#@+leo-ver=4-thin
#@+node:edream.120603093808:@thin pluginsManager.txt
#@@comment #
#@@tabwidth -4

#@+at
# 
# Leo enables those plugins whose filenames appear anywhere in this file 
# without comments.
# 
# Warning: make sure plugins appear at most once without comments. Otherwise,
# disabling a plugin in the Plugins Manageger plugin will have no effect.
# 
# Leo loads plugins in the order they appear in this file.
# 
# File names may be indented as desired.
# 
#@-at
#@@c

#@+others
#@+node:ekr.20041113105336:Enabled plugins
# Icon area: order is important.
#rowcol.py
mod_scripting.py
#hoist.py

# Plugin_manager.py needs plugins_menu.py
plugins_menu.py
plugin_manager.py

# test: second mention of rowcol should have no effect.
rowcol.py
#@nonl
#@-node:ekr.20041113105336:Enabled plugins
#@+node:ekr.20041113105527.1:Documentation for plugins
#@@killcolor
#@nonl
#@+node:ekr.20040722122459.4:Commands &  directives
# Allows plugins to add their own directives.
    # Required by the syntax check unit test.
    # add_directives.py

# FileAction nodes specify scripts to be run when Leo writes dirty @file, @thin etc. nodes
    # FileActions.py
    
# Use Python's anydbm module to store Leo files.
    # Library.py

# Automatically executes Save commands every so often.
    # mod_autosave.py
    
# Timestamp all save operations to show when they occur.
    # mod_timestamp.py
    
# Overrides pretty printing class.
    # pretty_print.py

# Puts the View Table command in the Outline menu.
    # table.py

# Supports template nodes.
    # templates.py

# Adds XSLT-Node Command submen item to the Outline menu.
    # xsltWithNodes.py
#@nonl
#@-node:ekr.20040722122459.4:Commands &  directives
#@+node:ekr.20040722122459:Debugging & testing
# Traces all keystrokes.
    # trace_keys.py
    
# A plugin to test Leo's shutdown logic.
    # quit_leo.py
#@nonl
#@-node:ekr.20040722122459:Debugging & testing
#@+node:ekr.20040919095858:Dyna plugins
# Several plugins written by 'e'.
# Included as is without any editing by EKR.

# There is a lot of good stuff here, including many scripts.
# The exSButton.py plugin inspired the mod_scripting.py plugin.

    # dyna_menu.py
    # dynacommon.py
    # exSButton.py
#@nonl
#@-node:ekr.20040919095858:Dyna plugins
#@+node:ekr.20040722122459.3:Enhance the body pane
# Rebind up/down arrow keys
    # arrows.py

# Handles autocompletion when the user types '.' or '(' characters.
    # autocompleter.py

# Allows coloring of wiki-style markup.
    # NOTE: requires add_directives.py plugin.
    # color_markup.py

# Allows images within body panes.
    # image.py

# newButtons.py
    
# Allows right clicks in the body pane.
    # rClick.py
    
# Sends output from the Execute Script command to the end of the body pane.
    # script_io_to_body.py
#@nonl
#@-node:ekr.20040722122459.3:Enhance the body pane
#@+node:ekr.20040722122459.2:Enhance the icon or status areas
# Creates Hoist and De-Hoist buttons.
    # hoist.py
    
# Automatically add nodes for common tasks.
    # newButtons.py

# Creates "Recent" and "Marks" popups in the icon area.
    # nodenavigator.py
    
# Creates row-column indicators in the status area.
    # rowcol.py
    
# Creates a search box and a "go" button in the icon area.
    # searchbox.py
    
# Creates a status line at the bottom of the body pane.
    # status_line.py
#@nonl
#@-node:ekr.20040722122459.2:Enhance the icon or status areas
#@+node:ekr.20040915073259.3:Enhance windows
# Adds tabs to Leo outline.
    #chapters.py

# Maximizes all new windows. (Windows platform only).
    # maximizeNewWindows.py

# Adds icons for common commands.
# Settings specify where the icons go.
    # nodebar.py
    
# Sends all output to the log pane.
    # redirect_to_log.py

# Turns the log into a tabbed component.  Other plugins may add tabs.
    # TabbedLog.py
    
# A plugin for searching unknownAttributes (uA's).
    # Requires tabbedLog.py plugin.
    # UASearch.py
    
# Left mouse click scrolls down; right mouse click scrolls up.
    # This does not work well with expanded_click_area = 1
    # UniversalScrolling.py
    
# Uses Python's urllib module to download files and import them into Leo.
    # requires the TabbedLog plugin.
    # URLloader.py
#@nonl
#@-node:ekr.20040915073259.3:Enhance windows
#@+node:ekr.20040919091615:Example code
#@+at
# 
# You would typically not enable any of the following "plugins".
# These plugins contain example code only.
# 
# style_guide.py
#     Shows the recommended style for all plugins.
#     I shall reject submissions that grossly violate these guidelines.
# __overrideClasses.py
#     Shows how to override Leo's core classes.
# override_commands.py
#     Shows how to override commands with code defined in a plugin.
# redefine_put.py
#     Contrived example that redefines the "put" and "put_nl" methods that 
# draw to the log pane.
#@-at
#@nonl
#@-node:ekr.20040919091615:Example code
#@+node:ekr.20040722121404:Experimental plugins
# PRE_ALPHA QUALITY: MAY BE DANGEROUS
    # __wx_gui.py
    
# Adds ConceptualSort to outline menu.
    # Requires editAttributes.py plugin.
    # ConceptualSort.py
    
# Add and edit unknown attributes of a node.
    # Temporarily replaces the outline pane!
    # editAttributes.py

# Creates Parameterize Section Reference command.
    # macros.py
    
# New from Bernhard Mulder
    # mod_http.py
    
# Draws pie menus on mouse movements in the outline pane.
    # pie_menus.py
    
# schedule commands for later execution."""
    # scheduler.py
#@nonl
#@-node:ekr.20040722121404:Experimental plugins
#@+node:ekr.20040722134535.1:External editors & Open With
# Opens temporary files with a filename that begins with the headline text,
# located in a "username_Leo" subdirectory of the temporary directory.
    # Recommended for use with the open_with, vim or xemacs plugins.
    # mod_tempfname.py

# Opens a windows shell.
    # open_shell.py

# Creates the Open With menu.
    # open_with.py
    
# Launches (starts) a file with the name of the headline on double-clicking it.
    # startfile.py
    
# vim handler.
    # Recommended: use mod_tempfname.py.
    # vim.py

# A plugin to add many emacs-like commands to Leo.
# Much of this plugin deserves to move into Leo's core.
    # usetemacs.py
    
# Formats and exports the selected outline to Word.
# Do this using the Plugins:Word Export:Export menu item.
    # word_export.py
    
# xemacs handler
    # Recommended: use mod_tempfname.py.
    # http://www.cs.mu.oz.au/~markn/leo/external_editors.leo
    # xemacs.py
#@nonl
#@-node:ekr.20040722134535.1:External editors & Open With
#@+node:ekr.20040722140105:Files
# Open any empty file as a minimal .leo file
    # empty_leo_file.py
    
# Adds #line directives in perl and perlpod programs.
lineNumbers.py
    
# Edit @file-nosent nodes: make sure there is a newline at the end
# of each subnode, replace all tabs with spaces and add a newline before
# class and functions in the derived file.
    # niceNosent.py
#@nonl
#@-node:ekr.20040722140105:Files
#@+node:ekr.20040722135618:Menus & translations
#T ranslate a few menu items into Simplified Chinese
# 本插件将部分Leo菜单翻译成简体中文
    # chinese_menu.py

# Traduit les menus en Français.
    # french_fm.py
    
# Creates the plugins menu.
    # plugins_menu.py
    
# Creates a scripts menu.
    # scripts_menu.py
#@nonl
#@-node:ekr.20040722135618:Menus & translations
#@+node:ekr.20040722140829:New kinds of nodes
# Executes commands in @produce nodes.
    # at_produce.py

# The predecessor to rst2.py
    # rst.py

# Creates output files from restructured text.
    # Double-click @rst nodes to process the restructured text.
    # ** requires docutils: http://docutils.sourceforge.net/
    # ** Will use SilverCity syntax styline if present: http://silvercity.sourceforge.net/
    # See also, rst3.py
    # rst2.py
    
# Double clicking the icon of an @run <command> node will launch <command>
    # The '#' character terminates the command.
    # Child nodes may contain other @run nodes.
    # Child @arg nodes contribute headline text as an argument to the command.
    # Child @in nodes are ignored.
    # All other child nodes contribute body text as an argument to the command.
    # @in or @input nodes (anywhere) can be used to send input to the running process.
    # run_nodes.py
    
# Lauches (starts) a file with the name of the headline on double-clicking it.
    # This does not work on Linux because os.startfile does not exist.
    # startfile.py
#@-node:ekr.20040722140829:New kinds of nodes
#@+node:ekr.20041009112303.1:Plugins manager and menu
# Enables or disables plugins using a proper plugins manager rather than this file!
    # plugin_manager.py

# Test file for plugin_manager.py
    # pluginsTest.py
#@-node:ekr.20041009112303.1:Plugins manager and menu
#@+node:ekr.20041001210557.1:Scripting
# Adds "run Script" and "scriptButton" buttons to the icon area.
# Highly recommended for all Python programmers.
# 
# Optionally adds support for @plugin and @script nodes.
# 
# WARNING:
#     @plugin and @script are potentially HIGHLY dangerous.
#     @plugin and @script are enabled by constants in mod_scripting.py.

    # mod_scripting.py
#@-node:ekr.20041001210557.1:Scripting
#@+node:ekr.20040810065413:Spell checking
# Older, slower, spell checker can be used with all versions of Python.
    # Does not work with Leo 4.2.
    # mod_spelling.py
    
# Recommended.  Requires aspell.pyd configured for Python and aspell.
# The present version of aspell works only with Python 2.3.
    # spellpyx.py
#@nonl
#@-node:ekr.20040810065413:Spell checking
#@-node:ekr.20041113105527.1:Documentation for plugins
#@-others
#@nonl
#@-node:edream.120603093808:@thin pluginsManager.txt
#@-leo
