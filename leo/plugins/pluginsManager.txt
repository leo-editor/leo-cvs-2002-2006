#@+leo-ver=4-thin
#@+node:edream.120603093808:@thin pluginsManager.txt
#@@comment #
#@@tabwidth -4

# Leo enables only those plugins whose filenames appear here.
# Leo loads plugins in the order they appear in this file.
# File names may be indented as desired.

#@+others
#@+node:ekr.20040909092620:To be enabled in distribution
# add_directives.py
# color_markup.py
# image.py
# rClick.py
# hoist.py
# nodenavigator.py
# searchbox.py
# open_with.py
# mod_scripting.py
# plugins_menu.py
# rst2.py
# run_nodes.py
# spellpyx.py
#@nonl
#@-node:ekr.20040909092620:To be enabled in distribution
#@+node:ekr.20040722122459.4:Commands &  directives
# Allows plugins to add their own directives.
    # Required by the syntax check unit test.
    add_directives.py
    
# FileAction nodes specify scripts to be run when Leo writes dirty @file, @thin etc. nodes
    # FileActions.py

# Automatically executes Save commands every so often.
    # mod_autosave.py
    
# Timestamp all save operations to show when they occur.
    # mod_timestamp.py
    
# Uses Python's urllib module to download files and import them into Leo.
    # requires the TabbedLog plugin,
     URLloader.py
#@nonl
#@-node:ekr.20040722122459.4:Commands &  directives
#@+node:ekr.20040722122459:Debugging & testing
# Traces all keystrokes.
    # trace_keys.py
    
# A plugin to test Leo's shutdown logic.
    # quit_leo.py
#@nonl
#@-node:ekr.20040722122459:Debugging & testing
#@+node:ekr.20040722122459.3:Enhance the body pane
# Rebind up/down arrow keys
    # arrows.py

# Handles autocompletion when the user types '.' or '(' characters.
    # FIXME: Thread doesn't shut down properly.  Causes unit tests to fail.
    # autocompleter.py

# Allows coloring of wiki-style markup.
    # NOTE: requires add_directives.py plugin.
    color_markup.py

# Allows images within body panes.
    image.py

# newButtons.py
    
# Allows right clicks in the body pane.
    rClick.py
#@nonl
#@-node:ekr.20040722122459.3:Enhance the body pane
#@+node:ekr.20040722122459.2:Enhance the icon or status areas
# Creates Hoist and De-Hoist buttons.
    hoist.py

# Adds "run Script" and "scriptButton" buttons to the icon area.
    # Highly recommended for all Python programmers.
    mod_scripting.py
    
# Automatically add nodes for common tasks.
    # newButtons.py

# Creates "Recent" and "Marks" popups in the icon area.
    nodenavigator.py
    
# Creates a search box and a "go" button in the icon area.
    searchbox.py

# Creates row-column indicators in the status area.
    # rowcol.py
#@nonl
#@-node:ekr.20040722122459.2:Enhance the icon or status areas
#@+node:ekr.20040915073259.3:Enhance windows
# Maximizes all new windows. (Windows platform only).
    # maximizeNewWindows.py

# Turns the log into a tabbed component.  Other plugins may add tabs.
    # tabbedLog.py
    
# A plugin for searching unknownAttributes (uA's).
    # Requires tabbedLog.py plugin.
    # UASearch.py
    
# Left mouse click scrolls down; right mouse click scrolls up.
    # This does not work well with expanded_click_area = 1
    # UniversalScrolling.py
#@nonl
#@-node:ekr.20040915073259.3:Enhance windows
#@+node:ekr.20040722121404:Experimental plugins
# PRE_ALPHA QUALITY: MAY BE DANGEROUS
    # __wx_gui.py
    
# The original inspirations for mod_scripting.py 
    # dyna_menu.py
    
# """Add and edit unknown attributes of a node
    # editAttributes.py
    
# New from Bernhard Mulder
    # mod_http.py
    
# Draws pie menus on mouse movements in the outline pane.
    # pie_menus.py
    
# schedule commands for later execution."""
    # scheduler.py
    
# A plugin to create an Emacs-like status line.
    # Not ready yet: probably interferes with auto-completion
    # status_line.py
    
# New from Paul Paterson.
    # I'm not sure what the status of this is.
    # wordcompleter.py
#@nonl
#@-node:ekr.20040722121404:Experimental plugins
#@+node:ekr.20040722134535.1:External editors & Open With
# Opens temporary files with a filename that begins with the headline text,
# located in a "username_Leo" subdirectory of the temporary directory.
    # Recommended for use with the open_with, vim or xemacs plugins.
    mod_tempfname.py

# Opens a windows shell.
    # open_shell.py

# Creates the Open With menu.
    open_with.py
    
# Launches (starts) a file with the name of the headline on double-clicking it.
    # startfile.py
    
# vim handler.
    # Recommended: use mod_tempfname.py.
    # vim.py
    
# Formats and exports the selected outline to Word.
# Do this using the Plugins:Word Export:Export menu item.
    # word_export.py
    
# xemacs handler
    # Recommended: use mod_tempfname.py.
    # http://www.cs.mu.oz.au/~markn/leo/external_editors.leo
    # xemacs.py
#@nonl
#@-node:ekr.20040722134535.1:External editors & Open With
#@+node:ekr.20040722140105:Files
# Open any empty file as a minimal .leo file
    # empty_leo_file.py
    
# Adds #line directives in perl and perlpod programs.
    # lineNumbers.py
    
# Edit @file-nosent nodes: make sure there is a newline at the end
# of each subnode, replace all tabs with spaces and add a newline before
# class and functions in the derived file.
    # niceNosent.py
#@nonl
#@-node:ekr.20040722140105:Files
#@+node:ekr.20040722135618:Menus & translations
#T ranslate a few menu items into Simplified Chinese
# 本插件将部分Leo菜单翻译成简体中文
    # chinese_menu.py

# Traduit les menus en Français.
    # french_fm.py
    
# Creates the plugins menu.
    plugins_menu.py
    
# Creates a scripts menu.
    # scripts_menu.py
#@nonl
#@-node:ekr.20040722135618:Menus & translations
#@+node:ekr.20040722140829:New kinds of nodes
# Executes commands in @produce nodes.
    # at_produce.py

# The predecessor to rst2.py
    # rst.py

# Creates output files from restructured text.
    # Double-click @rst nodes to process the restructured text.
    # ** requires docutils: http://docutils.sourceforge.net/
    # ** Will use SilverCity syntax styline if present: http://silvercity.sourceforge.net/
    # See also, rst3.py
    rst2.py
    
# Double clicking the icon of an @run <command> node will launch <command>
    # The '#' character terminates the command.
    # Child nodes may contain other @run nodes.
    # Child @arg nodes contribute headline text as an argument to the command.
    # Child @in nodes are ignored.
    # All other child nodes contribute body text as an argument to the command.
    # @in or @input nodes (anywhere) can be used to send input to the running process.
    run_nodes.py
    
# Lauches (starts) a file with the name of the headline on double-clicking it.
    # This does not work on Linux because os.startfile does not exist.
    # startfile.py
#@-node:ekr.20040722140829:New kinds of nodes
#@+node:ekr.20040810065413:Spell checking
# Both these plugins check spelling.
    # Both share the same code base.
    # Both use mod_spelling.ini and mod_spelling.txt.

# Older, slower, can be used with all versions of Python.
    # It's unclear whether this works with Leo 4.2
    # mod_spelling.py
    
# Newer, faster.  Requires aspell.pyd configured for Python and aspell.
# The present version of aspell.py works only with Python 2.3.
    spellpyx.py
#@nonl
#@-node:ekr.20040810065413:Spell checking
#@-others
#@nonl
#@-node:edream.120603093808:@thin pluginsManager.txt
#@-leo
