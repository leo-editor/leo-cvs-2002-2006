<?xml version="1.0" encoding="UTF-8"?>
<leo_file>
<leo_header file_format="2" tnodes="0" max_tnode_index="1898" clone_windows="0"/>
<globals body_outline_ratio="0.49679487179487181">
	<global_window_position top="10" left="10" height="624" width="768"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences allow_rich_text="0">
</preferences>
<find_panel_settings>
	<find_string></find_string>
	<change_string></change_string>
</find_panel_settings>
<vnodes>
<v t="T1" a="V"><vh>Diary</vh>
<v t="T2"><vh>July 2002</vh>
<v t="T3"><vh>7/8 The REM hack &amp; fixed crasher</vh></v>
<v t="T4"><vh>7/8 Fixed crasher in atFile.scanAllDirectives</vh></v>
<v t="T5"><vh>7/8 Finished Toggle Split Direction</vh></v>
<v><vh>7/7</vh>
<v t="T6"><vh>7/7 Fixed crashers when undoing or redoing moves</vh></v>
<v><vh>7/7 Updated LeoDocs.leo and Leo's web site</vh></v>
<v><vh>7/7 Released 2.5 and updated CVS</vh></v>
</v>
<v><vh>7/6 version 2.5 is now code complete</vh>
<v t="T7"><vh>7/6 Improved Import to @root</vh></v>
<v t="T8"><vh>7/6 Fixed Import bug: empty classes and nested classes</vh></v>
<v t="T9"><vh>7/6 Fixed Import bug that caused orphan nodes</vh></v>
<v t="T10"><vh>7/6 Fixed Import bug that caused duplicate class lines.</vh></v>
<v><vh>7/6 Renamed Font to Set Font... and Syntax Coloring... to Set Colors...</vh></v>
<v t="T11"><vh>7/6 Created c.initJoinedCloneBits</vh></v>
<v t="T12"><vh>7/6 Verified that undo works</vh></v>
</v>
<v><vh>7/5</vh>
<v t="T13"><vh>7/5 Made extract commands undoable &amp; simplified undo.</vh></v>
<v t="T14"><vh>7/5 Made import commands undoable.</vh></v>
<v t="T15"><vh>7/5 Discovered traceback module</vh></v>
<v><vh>7/5 Made Cascade command functional</vh></v>
<v><vh>7/5 Enabled Minimize All command</vh></v>
<v><vh>7/5 Forced syntax coloring after extract commands</vh></v>
</v>
<v><vh>7/4</vh>
<v><vh>7/4 Find/Change settings can be overridden by leoConfig.txt</vh></v>
<v t="T16"><vh>7/4 Invalid directories are no longer errors in leoAtFiles.scanAllDirectives</vh></v>
<v t="T17"><vh>7/4 Prefs now can be overridden by leoConfig.txt</vh></v>
</v>
<v><vh>7/3</vh>
<v t="T18"><vh>7/3 Added Convert All Blanks and Convert All Tabs commands</vh></v>
<v><vh>7/3 Added Convert Tabs command</vh></v>
<v><vh>7/3 Changed tabs to blanks when tab width is negative</vh></v>
<v t="T19"><vh>7/3 Changed c.tab/page_width to self.tab/page_width in leoAtFile.py</vh></v>
<v t="T20"><vh>7/3 Added OK, Cancel, Revert buttons to Prefs panel</vh></v>
<v t="T21"><vh>7/3 Added window name to Prefs title</vh></v>
<v t="T22"><vh>7/3 Added @language python to all @file nodes</vh></v>
</v>
<v><vh>7/2</vh>
<v t="T23"><vh>7/2 Changed defaultextension from "x" to ".x"</vh></v>
<v t="T24"><vh>7/2 Made prefs a modal dialog</vh></v>
<v t="T25"><vh>7/2 About c.defaultDirectory</vh></v>
<v t="T26"><vh>7/2 Changed Save and Save As...</vh></v>
<v><vh>7/2 Fixed crashers in Remove Sentinels command</vh></v>
<v t="T27"><vh>7/2 Fixed crasher in import.scanAllDirectives)</vh></v>
<v t="T28"><vh>7/2 Hacked code so tab width works</vh></v>
<v><vh>7/2 Fixed doc problems</vh>
<v t="T29"><vh>Demote docs</vh></v>
<v t="T30"><vh>Open/Close log window docs</vh></v>
<v t="T31"><vh>Insert Headline docs</vh></v>
<v t="T32"><vh>Extract Section docs</vh></v>
<v t="T33"><vh>Syntax Coloring... &amp; Font...</vh></v>
</v>
</v>
<v t="T34"><vh>7/1 Cut/Paste now works properly</vh></v>
</v>
<v><vh>June 2002	</vh>
<v t="T35"><vh>06/22 Implemented Recent Files menu &amp; leoConfig.py</vh></v>
<v t="T36"><vh>06/19 Removed assert from st_enter_root_name</vh></v>
<v t="T37"><vh>06/18 Improved error recovery when writing .leo files</vh></v>
<v t="T38"><vh>06/16 Changed leo.py so Leo can open files when files are double-clicked</vh></v>
<v t="T39"><vh>06/16 Finished updating LeoDocs.leo to match Leo's web site</vh></v>
<v t="T40"><vh>06/15 Fixed the control-I and control-H bugs</vh></v>
<v t="T41"><vh>06/15 Double clicking in a headline now selects a word</vh></v>
<v t="T42"><vh>06/15 Implemented Drag and Drop</vh></v>
<v t="T43"><vh>06/04 Changed atFile.scanAllDirectives to use c.openDirectory as default</vh></v>
<v><vh>06/03 Changed cursor to double arrow when cursor is over splitter bars</vh></v>
<v t="T44"><vh>06/02 Bug fix in es in leoGlobals</vh></v>
<v t="T45"><vh>06/02 Tried and failed to call wm_iconbitmap</vh></v>
</v>
<v><vh>May 2002</vh>
<v t="T46"><vh>5/30/02 Move theory of operation sections back into this outline</vh></v>
<v><vh>5/27/02 Undo move down doesn't always work</vh></v>
<v t="T47"><vh>5/27/02 Fixed bugs involving changing roots</vh></v>
<v t="T48"><vh>5/27/02 Handled unicode error in leoFileCommands::put</vh></v>
<v t="T49"><vh>5/13/02 LeoPy.leo corrupted</vh></v>
</v>
<v><vh>April 2002</vh>
<v t="T50"><vh>4/27/02 Started Remove Sentinels command</vh></v>
<v t="T51"><vh>4/27/02 Changes to Export Noweb command</vh></v>
<v t="T52"><vh>4/25/02 Added code to os()</vh></v>
<v t="T53"><vh>4/7/02 Added frame.outlineToNowebDefaultFileName ivar</vh></v>
<v t="T54"><vh>4/7/02 Replaced &lt;&lt;*&gt;&gt;= with &lt;&lt;fileName&gt;&gt;= whenever possible</vh></v>
<v t="T55"><vh>4/7/02 Added code to make @ defs not start a doc part</vh></v>
<v><vh>4/7/02 Added warnings for all non-undoable import commands</vh></v>
</v>
<v><vh>March 2002</vh>
<v t="T56"><vh>3/16 Fixed moves up to root postion</vh></v>
<v t="T57"><vh>3/16 Simplified syntax colorer for docState</vh></v>
<v t="T58"><vh>3/10 Rewrote skipLeadingComments</vh></v>
<v t="T59"><vh>3/08 Modified colorer for CWEB</vh></v>
<v t="T60"><vh>3/07 Color strings green</vh></v>
<v t="T61"><vh>3/07 Rewrote importWebCommand and its allies</vh></v>
<v><vh>3/06 Import/Export commands</vh>
<v t="T62"><vh>3/06 Outline To Noweb works (as well as it is going to)</vh></v>
<v t="T63"><vh>3/06 Flatten Outline and Import Flattened Outline work</vh></v>
<v t="T64"><vh>3/06 Python, C, Java and Pascal Imports now work</vh></v>
</v>
<v><vh>3/05 Import commands, colorizer, clear IDLE breakpoints</vh>
<v t="T65"><vh>3/05 Import commands, colorizer</vh></v>
<v t="T66"><vh>3/05 Added ability to clear breakpoints in IDLE</vh></v>
</v>
<v><vh>3/04 Released leo.py 2.0 and Borland v2.6</vh>
<v t="T67"><vh>3/04 Improved read error messages.</vh></v>
<v t="T68"><vh>3/04 Untangle calls v.trimTrailingLines only for changed nodes</vh></v>
<v t="T69"><vh>3/04 changed v.setBodyStringOrPane</vh></v>
<v t="T70"><vh>3/04 Added finished messages for Tangle/Untangle</vh></v>
</v>
<v><vh>3/03 Fixed Untangle, </vh>
<v><vh>3/03 Created readme files</vh></v>
<v t="T71"><vh>3/03 Fixed Untangle bug</vh></v>
</v>
<v><vh>3/02 Finished Undo, Preparing for release</vh>
<v><vh>3/02 Created distutils files to distribute Borland Leo</vh></v>
<v><vh>3/02 Created release notes for Borland v2.6</vh></v>
<v t="T72"><vh>3/02 Documented new commands and features</vh></v>
<v t="T73"><vh>3/02 Fixed all pychecker complaints against leoImport.py</vh></v>
<v t="T74"><vh>3/02 Added @space to Utils &amp; Tangle/Untangle code in LeoCB</vh></v>
<v t="T75"><vh>3/02 Completed Undo Change All</vh></v>
</v>
<v><vh>3/01 Finished Tangle, Finished v2.6, etc.</vh>
<v><vh>3/01 Completely supress all auto-indent in @nocolor mode</vh></v>
<v t="T76"><vh>3/01 Tangle now works exactly like LeoCB Tangle</vh></v>
<v t="T77"><vh>3/01 Finished Borland version 2.6</vh></v>
</v>
</v>
<v><vh>Feb 2002</vh>
<v><vh>2/28 Small fixes</vh>
<v t="T78"><vh>Tangle now treats @c like @code</vh></v>
<v t="T79"><vh>Changed is_special_bits</vh></v>
<v t="T80"><vh>Installed Johansson patches</vh></v>
</v>
<v><vh>2/27 pychecker(!), colorizer bug</vh>
<v t="T81"><vh>2/27 Fixed bug in colorizer</vh></v>
<v t="T82"><vh>2/27 Discovered pychecker (several bug fixes)</vh>
<v t="T83"><vh>Fixed bug in Mark Changed Roots</vh></v>
<v t="T84"><vh>Fixed bug in scanText related to @delims sentinel</vh></v>
<v t="T85"><vh>Fixed bug in write</vh></v>
<v t="T86"><vh>Fixed bugs in leoFileCommands</vh></v>
<v t="T87"><vh>Fixed bugs in leoNodes</vh></v>
<v t="T88"><vh>Fixed bugs in leoTangle</vh></v>
</v>
</v>
<v t="T89"><vh>2/26 LeoCB can read compressed derived files</vh></v>
<v><vh>2/25 Fixed IDLE, added verbatimAfterRef sentinel</vh>
<v t="T90"><vh>2/25 Fixed breakpoints in IDLE</vh></v>
<v t="T91"><vh>2/25 Added verbatimAfterRef sentinel</vh></v>
</v>
<v t="T92"><vh>2/24 suppressing newlines</vh></v>
<v><vh>2/23 Untangle, colorizer bug</vh>
<v t="T93"><vh>2/23 Debugging untangle: fixed leading single-comments bug</vh></v>
<v t="T94"><vh>2/23 Fixed small colorizing bug</vh></v>
</v>
<v><vh>2/22 askOKCancel dialog, suppressing auto-indent.</vh>
<v t="T95"><vh>2/22 Created askOkCancel dialog for Read @file Nodes</vh></v>
<v><vh>2/22 Supressed auto-indent in @nocolor mode.</vh></v>
</v>
<v><vh>2/20 and 2/21 Debugged Untangle</vh></v>
<v t="T96"><vh>2/19 Improved Unlimited Undo</vh></v>
<v t="T97"><vh>2/18 Unlimited Undo works</vh></v>
<v><vh>2/16 Syntax coloring</vh>
<v t="T98"><vh>2/16 Fixed bugs in colorAnyLanguage</vh></v>
<v><vh>2/16 Finished adding keywords for colorAnyLanguage</vh></v>
</v>
<v><vh>2/15 Syntax coloring, undo, @space bug</vh>
<v t="T99"><vh>02/15 Created colorAnyLanguage</vh></v>
<v t="T100"><vh>02/15 Fixed @space bug</vh></v>
<v t="T101"><vh>02/15 Bug fix: section definition lines now end coloring for doc parts</vh></v>
<v t="T102"><vh>02/15 Finished Limited undo.</vh></v>
<v t="T103"><vh>02/15 Added files to manifest</vh></v>
</v>
<v><vh>02/14 CVS</vh>
<v t="T104"><vh>02/14 Fixed Undo problems</vh></v>
<v t="T105"><vh>02/14 Checked out Leo from CVS</vh></v>
<v><vh>02/14 Cant mend clones, How to use CVS</vh>
<v t="T106"><vh>CVS: Making a virtue out of necessity</vh></v>
<v t="T107"><vh>Ooops: Leo can't mend clone links!</vh></v>
<v t="T108"><vh>Completed Mending dialog</vh></v>
</v>
</v>
<v><vh>02/13 Mending clone links, undo</vh>
<v><vh>Made the undo class partly functional</vh></v>
<v t="T109"><vh>Created menu utilities</vh></v>
<v t="T110"><vh>Fixed bug in Extract and Extract Section commands</vh></v>
</v>
<v><vh>02/12 Minor fixes</vh>
<v t="T111"><vh>Studied the DnD code</vh></v>
<v t="T112"><vh>Cleared tab and space tags in colorizePython</vh></v>
<v t="T113"><vh>Made headlines longer</vh></v>
<v t="T114"><vh>Cleaned code</vh></v>
</v>
<v><vh>02/11 experiments</vh>
<v t="T115"><vh>created sortSequence utility</vh></v>
<v t="T116"><vh>experimented with inspect</vh></v>
</v>
<v><vh>02/10 1.0 released</vh>
<v t="T117"><vh>Removed "from x import *" from reload_all() and OnOpenPythonWindow'</vh></v>
<v><vh>Released 1.0</vh></v>
<v t="T118"><vh>Added Contract Parent (Alt-0)</vh></v>
<v t="T119"><vh>Fixed bugs in Prefs panel</vh></v>
</v>
<v><vh>02/09 Preparing for release</vh>
<v t="T120"><vh>02/09 Got clean import of leoImport.py</vh></v>
<v t="T121"><vh>02/09 Created do-nothing leoUndo.py</vh></v>
<v t="T122"><vh>02/09 Updated current language properly in Prefs panel</vh></v>
<v t="T123"><vh>02/09 Re-marked @file nodes dirty on write errors</vh></v>
<v t="T124"><vh>02/09 Prefs Panel stick to current window</vh></v>
<v><vh>02/09 Tangle passes full regression test</vh></v>
<v t="T125"><vh>02/09 Added Sort Siblings</vh></v>
</v>
<v><vh>02/08 Regression testing</vh>
<v t="T126"><vh>02/08 Found Tangle problem</vh></v>
<v><vh>02/08 Cleaned up leoCompare.py</vh></v>
<v t="T127"><vh>02/08 @c in Tangled files</vh></v>
<v t="T128"><vh>02/08 Testing wiped out files!</vh></v>
</v>
<v><vh>02/07 New commands and bug fixes</vh>
<v t="T129"><vh>02/07 Possible reversion</vh></v>
<v><vh>02/07 Converted Import Files code</vh></v>
<v t="T130"><vh>02/07 Search suboutline only now applies to Search/ChangeAll</vh></v>
<v t="T131"><vh>02/07 Fixed bug in search()</vh></v>
<v><vh>02/07 Fixed bug: @others wasn't colored unless at left margin.</vh></v>
<v><vh>02/07 * Added indent and undent commands</vh></v>
<v t="T132"><vh>02/07 * Improved idle_body_key</vh></v>
</v>
<v><vh>02/06 Finished commands</vh>
<v t="T133"><vh>02/06 Rewrote and tested all Edit Body commands</vh></v>
<v t="T134"><vh>02/06 Rewrote and tested Convert Blanks command</vh></v>
<v t="T135"><vh>02/06 Removed Print and Page Setup commands</vh></v>
<v t="T136"><vh>02/06 * Implemented View All Characters</vh></v>
<v t="T137"><vh>02/06 Got the arrow binding right</vh></v>
<v><vh>02/06 finished Delete command</vh></v>
<v t="T138"><vh>02/06 created tree.onBodyChanged</vh></v>
<v><vh>02/06 rewrote and tested Revert</vh></v>
<v><vh>02/06 created leoDialog.yesNo</vh></v>
</v>
<v><vh>2/05 More bug fixes</vh>
<v t="T139"><vh>02/05 * Extended Sherlock</vh></v>
<v t="T140"><vh>02/05 * Properly enabled and disabled all menu items</vh></v>
<v t="T141"><vh>02/05 Got special accelerator keys working</vh></v>
<v><vh>02/05 GoTo commands now working</vh></v>
<v t="T142"><vh>02/05 Got Alt-keys working</vh></v>
<v t="T143"><vh>02/05 Made es and trace safer during quit</vh></v>
<v t="T144"><vh>02/05 Fixed bugs in Search Headline and Find, Then Change</vh></v>
<v t="T145"><vh>02/05 Do not eliminate begin/endUpdate!</vh></v>
</v>
<v><vh>02/04 Many bug fixes &amp; some big improvements</vh>
<v t="T146"><vh>02/04 Fixed Change command in headline</vh></v>
<v t="T147"><vh>02/04 A kludgy way to cut &amp; paste between Leo &amp; Leo.py</vh></v>
<v t="T148"><vh>02/04 Ended all event handlers with return "break"</vh></v>
<v><vh>02/04 Changed Insert Node accelerator from Control-K to Control-I</vh></v>
<v t="T149"><vh>02/04 Implemented Toggle Active Pane</vh></v>
<v t="T150"><vh>02/04 ** Overrode default text keys</vh></v>
<v><vh>02/04 Documented control characters used in the body pane.</vh></v>
<v t="T151"><vh>02/04 ** Breakthrough regarding events and accelerators</vh></v>
<v t="T152"><vh>02/04 Implemented Select All command</vh></v>
<v t="T153"><vh>02/04 created OnBodyDoubleClick and allies</vh></v>
<v><vh>02/04 create setTextSelelection utility</vh></v>
<v t="T154"><vh>02/04 Created Sort command</vh></v>
<v t="T155"><vh>02/04 Fixed Tangle Marked and Tangle All commands</vh></v>
</v>
<v t="T156"><vh>02/03 Created shortcuts for opening LeoPy.leo</vh></v>
<v><vh>02/03 Released 0.08</vh></v>
<v><vh>02/02 Fixing Bugs</vh>
<v t="T157"><vh>02/02 Fixed bugs in outline-only and whole-word searches &amp; is_c_id</vh></v>
<v t="T158"><vh>02/02 ** Drawing breakthroughs</vh></v>
<v t="T159"><vh>02/02 Fixed control-d bug</vh></v>
<v t="T160"><vh>02/02 ** About redrawing</vh></v>
</v>
<v><vh>02/01 Fixing bugs</vh>
<v t="T161"><vh>02/01 Test tangle path errors</vh></v>
<v t="T162"><vh>02/01 ** started tree.makeVisible &amp; tree.scrollTo</vh></v>
<v t="T163"><vh>02/01 ** used distutils</vh></v>
</v>
</v>
<v><vh>Jan 2002</vh>
<v><vh>01/31 Preparing for release...</vh>
<v t="T164"><vh>** 01/31 leo.py now tangles better than LeoCB</vh></v>
<v t="T165"><vh>01/31 Created open script in leo.py</vh></v>
<v t="T166"><vh>01/31 Fixed suboutline only logic</vh></v>
<v t="T167"><vh>01/31 Tested directory logic</vh></v>
<v t="T168"><vh>01/31 replaced frame.defaultDirectory by c.tangle_directory</vh></v>
</v>
<v><vh>01/30 Major improvements...</vh>
<v t="T169"><vh>01/30 ** May have solved the load path problem</vh></v>
<v t="T170"><vh>01/30 ** Rewrote path logic: removed all calls to os.chdir</vh></v>
<v t="T171"><vh>01/30 ** Fixed major bug causing @file read errors</vh></v>
<v t="T172"><vh>01/30 ** Changed how directories are handled</vh></v>
</v>
<v t="T173"><vh>01/29 Improved Paste Node command</vh></v>
<v t="T174"><vh>01/28 Generalized trace to allow function args</vh></v>
<v t="T175"><vh>01/28 Found source of Find performance bug</vh></v>
<v t="T176"><vh>01/25 Found one source of misreads</vh></v>
<v><vh>01/24 Implemented Sherlock: init_trace and trace</vh></v>
<v t="T177"><vh>01/22 More work on leoTangle.py</vh></v>
<v><vh>01/21 Started workon leoTangle.py</vh></v>
<v><vh>01/20</vh>
<v t="T178"><vh>01/20 Lost clones into leoColor.py</vh></v>
<v t="T179"><vh>01/20 Implemented hyperlinks</vh></v>
</v>
<v><vh>01/18 Completed Change all command</vh></v>
<v><vh>01/17</vh>
<v t="T180"><vh>01/17 Breakthrough: tree.redraw_now</vh></v>
<v t="T181"><vh>01/17 much work on Find class</vh></v>
<v t="T182"><vh>01/17 v.edit_text defined only if v is visible</vh></v>
</v>
<v><vh>01/16</vh>
<v t="T183"><vh>01/16 Fixed idle_headline logic</vh></v>
<v t="T184"><vh>01/16 Lost data in outline (not derived files)</vh></v>
<v><vh>01/16 Fixed minor find/change bugs and removed batch checkbox</vh></v>
<v t="T185"><vh>01/16 Breakthrough re event handlers!</vh></v>
</v>
<v><vh>01/15 Find/Change</vh>
<v t="T186"><vh>01/15 ** Completed find/change commands</vh></v>
<v t="T187"><vh>01/15 Converted headline from Tk.Entry to Tk.Text</vh></v>
</v>
<v><vh>01/14</vh>
<v t="T188"><vh>01/14 Fixed bug: cancelling dialog wrote .leo</vh></v>
<v t="T189"><vh>01/14 Got basic Find commands to work</vh></v>
<v t="T190"><vh>01/14 Fixed Save To bug</vh></v>
<v><vh>01/14 Added log messages for saves</vh></v>
<v><vh>01/14 Always recompute file indices on saves</vh></v>
<v t="T191"><vh>01/14 Reduced width of log window</vh></v>
</v>
<v><vh>01/13</vh>
<v t="T192"><vh>01/13 exec statement simplifies code</vh></v>
<v t="T193"><vh>01/13 Prefs/Find settings now functional</vh></v>
</v>
<v><vh>01/11</vh>
<v t="T194"><vh>01/11 Replaced globals with app() ivars</vh></v>
<v t="T195"><vh>01/11 New memory management: created c/v/tree/frame destroy routines</vh></v>
<v t="T196"><vh>01/11 About destroy routines: eliminating circular references</vh></v>
<v t="T197"><vh>01/11 disabled c.setChanged while loading</vh></v>
<v t="T198"><vh>01/11 Eliminated ?? error message on exit</vh></v>
<v t="T199"><vh>01/11 created leoFrame.__del__</vh></v>
</v>
<v><vh>01/10</vh>
<v t="T200"><vh>01/10 Worked on Quit error messages</vh></v>
<v><vh>01/10 Released v 0.07</vh></v>
<v t="T201"><vh>01/10 Tested c2py on Borland</vh></v>
</v>
<v><vh>01/09</vh>
<v t="T202"><vh>01/09 Wrote and debugged leo1to2 scripts !</vh></v>
<v t="T203"><vh>01/09 Made Python window functional !</vh></v>
<v><vh>01/09 Added auto indent</vh></v>
</v>
<v><vh>01/08</vh>
<v t="T204"><vh>01/08 bodyKeepsFocus logic</vh></v>
<v t="T205"><vh>01/08 Fixed bug: no doesn't abort a Quit command</vh></v>
<v t="T206"><vh>01/08 Fixed bug: changing clones didn't mark joined dirty.</vh></v>
<v t="T207"><vh>01/08 Got cut/copy/paste working</vh></v>
<v t="T208"><vh>01/08 Fixed reooloring problem</vh></v>
<v><vh>01/08 Added Help-Leo Documentation command</vh></v>
<v><vh>01/08 Save commands now ensure .leo extension</vh></v>
<v t="T209"><vh>01/08 Still no joy with canvas border</vh></v>
<v t="T210"><vh>01/08 Expermented with window icons</vh></v>
<v t="T211"><vh>01/08 Increased size of open windows</vh></v>
<v t="T212"><vh>01/08 Improved look of prefs panel</vh></v>
<v t="T213"><vh>01/08 Made progress towards "Show invisibles"</vh></v>
<v t="T214"><vh>01/08 @ignore now colored properly</vh></v>
<v><vh>01/08 @color and @nocolor are now inherited</vh></v>
</v>
<v><vh>01/07</vh>
<v t="T215"><vh>01/07 Fixed some bugs in Move Up and Move Down commands</vh></v>
<v t="T216"><vh>01/07 Fixed loss-of-data on insert command</vh></v>
<v t="T217"><vh>01/07 tab width</vh></v>
</v>
<v><vh>01/06</vh>
<v t="T218"><vh>01/06 borders again</vh></v>
<v t="T219"><vh>01/06 editing and selecting</vh></v>
</v>
</v>
<v><vh>2001</vh>
<v><vh>Dec 2001</vh>
<v t="T220"><vh>12/20/01 Fixed Linux problems</vh></v>
<v t="T221"><vh>12/19/01 Improved LeoDocs.leo</vh></v>
<v t="T222"><vh>12/18/01 Improved Leo2 documentation</vh></v>
<v t="T223"><vh>12/17/01 ** Leo 0.05 released</vh></v>
<v t="T224"><vh>12/16/01 Found the source of the file mismatches</vh></v>
<v t="T225"><vh>12/16/01 Created directory compare routines</vh></v>
<v><vh>12/15/01 Leo is operational</vh></v>
<v t="T226"><vh>12/15/01 Fixed bug in scanText</vh></v>
<v t="T227"><vh>12/15/01 Fixed bug in putBodyPart</vh></v>
<v t="T228"><vh>12/15/01 Fixed lookahead code in scanText, scanDoc</vh></v>
<v t="T229"><vh>12/14/01 Created leoCompare.py</vh></v>
<v t="T230"><vh>12/14/01 Create leoDialog.py</vh></v>
<v t="T231"><vh>12/14/01 Fixed minor problems</vh></v>
<v t="T232"><vh>12/13/01 Fixed several clone bugs</vh></v>
<v t="T233"><vh>12/13/01 Aha: we can eliminate v.setIcon !</vh></v>
<v t="T234"><vh>12/13/01 ** Fixed bottleneck with endupdate(flag)</vh></v>
<v t="T235"><vh>12/13/01 ** Syntax coloring now works</vh></v>
<v t="T236"><vh>12/12/01 Cut/copy/paste of nodes now done using internal clipboard</vh></v>
<v t="T237"><vh>12/12/01 Fixed insert, move, clone and delete commands</vh></v>
<v t="T238"><vh>12/12/01 Looked into Tk &amp; Python clipboard commands</vh></v>
<v t="T239"><vh>12/11/01 Menu accelerators</vh></v>
<v t="T240"><vh>12/11/01 Properly initialized the file in getLeoFile</vh></v>
<v t="T241"><vh>12/10/01 Got accellerators working</vh></v>
<v t="T242"><vh>12/10/01 Simplified icon handling, tree.redraw</vh></v>
<v t="T243"><vh>12/10/01 Used idle-time handler to work around event problems</vh></v>
<v t="T244"><vh>12/09/01 Problems with canvas border</vh></v>
<v><vh>12/09/01 Tree now drawn properly</vh></v>
<v t="T245"><vh>12/08/01 Progress with selection</vh></v>
<v t="T246"><vh>12/07/01 Small improvements</vh></v>
<v><vh>12/07/01 Tree now contains labels for editing</vh></v>
<v t="T247"><vh>12/06/01 Open/Close events now handled properly</vh></v>
<v t="T248"><vh>12/06/01 Tree drawn correctly, slowly</vh></v>
<v t="T249"><vh>12/04/01 Create .gif icons</vh></v>
<v t="T250"><vh>12/04/01 replaced dvnodes with vnodes!</vh></v>
<v t="T251"><vh>12/04/01 read code is now fast enough!</vh></v>
<v t="T252"><vh>12/04/01 tree starts to work</vh></v>
<v t="T253"><vh>12/01/01</vh></v>
</v>
<v><vh>Nov 2001</vh>
<v t="T254"><vh>11/15/01 Created do-nothing tk app using Tkinter</vh></v>
<v t="T255"><vh>11/15/01 added -padx to log window</vh></v>
<v t="T256"><vh>11/13/01 Speeding up reads</vh></v>
<v t="T257"><vh>11/11/01 Design of tree class</vh></v>
<v t="T258"><vh>11/10/01 began conversion to tk</vh></v>
<v t="T259"><vh>11/10/01 es outputs newline</vh></v>
<v t="T260"><vh>11/10/01 fixed bug in putDocPart</vh></v>
<v t="T261"><vh>11/10/01 added code for @delims</vh></v>
<v t="T262"><vh>11/10/01 got @first working</vh></v>
<v t="T263"><vh>11/09/01 moved all globals into class</vh></v>
<v t="T264"><vh>11/09/01 fixed bugs in write logic</vh></v>
<v t="T265"><vh>11/09/01 fixed bugs read logic</vh></v>
<v t="T266"><vh>11/06/01 created Leo window using Tk</vh></v>
</v>
<v><vh>Oct 2001</vh>
<v t="T267"><vh>11/01/01 Write code works except for comments</vh></v>
<v><vh>10/31/01 Added Read/write submenu</vh></v>
<v t="T268"><vh>10/31/01 Fixed write code</vh></v>
<v t="T269"><vh>10/26/01 Read code is slow</vh></v>
<v t="T270"><vh>10/26/01 Read/write code now works</vh></v>
<v t="T271"><vh>10/11/01 Outline commands now work</vh></v>
<v t="T272"><vh>10/11/01 Removed redundant getters</vh></v>
<v t="T273"><vh>10/10/01 Debugged Commands, nodes, fileCommands</vh></v>
<v t="T274"><vh>10/08/01 design of leoFileCommands</vh></v>
<v t="T275"><vh>10/07/01 removed info and tagList classes</vh></v>
<v t="T276"><vh>10/05/01 c2py fixes, speedTest</vh></v>
<v t="T277"><vh>10/02/01 through 1/10/4</vh></v>
<v t="T278"><vh>10/01/01 fxed bugs in c2py</vh></v>
<v t="T279"><vh>10/01/01 c2py in leo</vh></v>
</v>
<v><vh>Sept 2001</vh>
<v t="T280"><vh>9/30/01 documented c2py</vh></v>
<v t="T281"><vh>9/29/01 c2py.py</vh></v>
<v t="T282"><vh>9/25/01 Idle has trees &amp; syntax coloring</vh></v>
<v t="T283"><vh>9/14/01</vh></v>
</v>
</v>
</v>
<v t="T284"><vh>Notes</vh>
<v t="T285"><vh>Template ANN to comp.prog.literate</vh></v>
<v t="T286"><vh>Template ANN to comp.lang.python</vh></v>
<v t="T287"><vh>Adding and removing files from CVS repository</vh></v>
<v t="T288"><vh>about sys.settrace</vh></v>
<v t="T289"><vh>Increasing environment space</vh></v>
<v><vh>Milestones</vh>
<v><vh>02/03/02 Leo 0.08 released</vh></v>
<v><vh>12/17/01 ** Leo 0.05 released</vh></v>
<v t="T290"><vh>12/16/01 Leo becomes functional</vh></v>
<v t="T291"><vh>12/13/01 Syntax coloring works</vh></v>
<v><vh>12/09/01 Tree now drawn properly</vh></v>
<v><vh>12/05/01 Tree works with Tkinter</vh></v>
<v t="T292"><vh>11/10/01 ** began conversion to tk</vh></v>
<v><vh>10/26/01 First successful read of .leo file w/ @file nodes</vh></v>
<v t="T293"><vh>9/29/01 c2py: Totally in love with Python</vh></v>
<v t="T294"><vh>ca. 9/1/01 began work on wxPython version of Leo</vh></v>
</v>
<v><vh>Problems</vh>
<v t="T295"><vh>Linux problems</vh></v>
</v>
<v t="T296"><vh>pychecker reports</vh>
<v t="T297"><vh>leo.py (done)</vh></v>
<v t="T298"><vh>leoApp (done)</vh></v>
<v t="T299"><vh>leoAtFile (done)</vh></v>
<v t="T300"><vh>leoColor (done)</vh></v>
<v t="T301"><vh>leoCommands (done)</vh></v>
<v t="T302"><vh>leoDialogs (done)</vh></v>
<v t="T303"><vh>leoFileCommands (done)</vh></v>
<v t="T304"><vh>leoFind (done)</vh></v>
<v t="T305"><vh>leoFrame (done)</vh></v>
<v t="T306"><vh>leoImport (done)</vh></v>
<v t="T307"><vh>leoNodes (done)</vh></v>
<v t="T308"><vh>leoTangle (done)</vh></v>
<v t="T309"><vh>leoTree (done)</vh></v>
<v t="T310"><vh>leoUtils (done)</vh></v>
</v>
<v t="T311"><vh>Scripting compatibility</vh>
<v t="T312"><vh>Functions (done with stub topCommand)</vh></v>
<v t="T313"><vh>Commands (menu commands &amp; enablers not ready yet)</vh>
<v t="T314"><vh>menu commands (not ready yet)</vh></v>
<v t="T315"><vh>command enablers (not ready yet)</vh></v>
</v>
<v t="T316"><vh>Prefs (not ready yet)</vh></v>
<v t="T317"><vh>vnodes (done except for minor routines)</vh></v>
</v>
<v t="T318"><vh>Selection notes</vh></v>
<v t="T319"><vh>tk code</vh>
<v t="T320"><vh>@file c:/prog/test/leoSplitter.tcl</vh>
<v t="T321"><vh>go</vh></v>
<v t="T322"><vh>createLeo</vh></v>
<v t="T323"><vh>createMenus</vh></v>
<v><vh>createSplitter</vh>
<v t="T324"><vh>createSplitter</vh></v>
<v t="T325"><vh>onGrabSplitterBar</vh></v>
<v t="T326"><vh>onDropSplitterBar</vh></v>
<v t="T327"><vh>onDragSplitterBar</vh></v>
<v t="T328"><vh>divideSplitter</vh></v>
</v>
<v t="T329"><vh>createFindPanel</vh>
<v t="T330"><vh>&lt;&lt; Create the Find and Change panes &gt;&gt;</vh></v>
<v t="T331"><vh>&lt;&lt; Create two columns of checkboxes &gt;&gt;</vh></v>
<v t="T332"><vh>&lt;&lt; Create two rows of buttons &gt;&gt;</vh></v>
</v>
<v t="T333"><vh>createPrefsPanel</vh>
<v t="T334"><vh>&lt;&lt; Create the Global Options frame &gt;&gt;</vh></v>
<v t="T335"><vh>&lt;&lt; Create the Tangle Options frame &gt;&gt;</vh></v>
<v t="T336"><vh>&lt;&lt; Create the Target Language frame &gt;&gt;</vh></v>
</v>
<v t="T337"><vh>createColorPanel</vh></v>
<v t="T338"><vh>createFontPanel</vh>
<v t="T339"><vh>&lt;&lt; create family pane &gt;&gt;</vh></v>
<v t="T340"><vh>&lt;&lt; create style pane &gt;&gt;</vh></v>
<v t="T341"><vh>&lt;&lt; create buttons &gt;&gt;</vh></v>
<v t="T342"><vh>&lt;&lt; create size pane &gt;&gt;</vh></v>
<v t="T343"><vh>&lt;&lt; create sample pane &gt;&gt;</vh></v>
</v>
<v t="T344"><vh>dkffontCreateFontPanel</vh>
<v t="T345"><vh>get_accel</vh></v>
<v t="T346"><vh>get_gap</vh></v>
<v t="T347"><vh>list_families</vh></v>
</v>
<v t="T348"><vh>createComparePanel</vh></v>
</v>
<v t="T349"><vh>tk labeled frames</vh>
<v t="T350"><vh>myFrame</vh></v>
</v>
<v t="T351"><vh>font dialogs</vh>
<v t="T352"><vh>@file dkffont.tcl</vh>
<v t="T353"><vh>parse_opts</vh></v>
<v t="T354"><vh>capitalize</vh></v>
<v t="T355"><vh>map</vh></v>
<v t="T356"><vh>decls ?</vh></v>
<v t="T357"><vh>get_gap</vh></v>
<v t="T358"><vh>make_UI</vh></v>
<v t="T359"><vh>get_accel</vh></v>
<v t="T360"><vh>change_family</vh></v>
<v t="T361"><vh>do_apply</vh></v>
<v t="T362"><vh>configure_apply</vh></v>
<v t="T363"><vh>set_font</vh></v>
<v t="T364"><vh>list_families</vh></v>
<v t="T365"><vh>dkf_chooseFont</vh></v>
<v t="T366"><vh>initializing</vh></v>
</v>
<v t="T367"><vh>@file PrefEditor.py</vh>
<v t="T368"><vh>&lt;&lt; PrefEditor declarations &gt;&gt;</vh></v>
<v t="T369"><vh>class PrefEditFactory</vh>
<v t="T370"><vh>&lt;&lt; class PrefEditFactory declarations &gt;&gt;</vh></v>
<v t="T371"><vh>&lt;&lt; class PrefEditFactory methods &gt;&gt;</vh>
<v t="T372"><vh>getEditor</vh></v>
</v>
</v>
<v t="T373"><vh>class PrefEditor</vh>
<v t="T374"><vh>__init__</vh></v>
<v t="T375"><vh>getCurrentValue</vh></v>
<v t="T376"><vh>getDefaultValue</vh></v>
<v t="T377"><vh>getEditValue</vh></v>
<v t="T378"><vh>getInitialValue</vh></v>
<v t="T379"><vh>setVariable</vh></v>
<v t="T380"><vh>showValue</vh></v>
<v t="T381"><vh>showCurrentValue</vh></v>
<v t="T382"><vh>showDefaultValue</vh></v>
<v t="T383"><vh>showInitialValue</vh></v>
<v t="T384"><vh>unappliedChanges</vh></v>
<v t="T385"><vh>updateEditor</vh></v>
<v t="T386"><vh>updateChanged</vh></v>
<v t="T387"><vh>_editCallback</vh></v>
<v t="T388"><vh>_getLabelWdg</vh></v>
<v t="T389"><vh>_getEditWdg</vh></v>
<v t="T390"><vh>_getRangeWdg</vh></v>
<v t="T391"><vh>_getShowMenu</vh></v>
</v>
<v t="T392"><vh>class FontPrefEditor</vh>
<v t="T393"><vh>_getEditWdg</vh></v>
<v t="T394"><vh>getCurrentValue</vh></v>
<v t="T395"><vh>getInitialvalue</vh></v>
<v t="T396"><vh>getDefaultValue</vh></v>
<v t="T397"><vh>getEditValue</vh></v>
<v t="T398"><vh>showValue</vh></v>
<v t="T399"><vh>_editCallback</vh></v>
</v>
</v>
<v t="T400"><vh>_getEditWdg (copy)</vh>
<v t="T401"><vh>&lt;&lt; initialize ivars &gt;&gt;</vh></v>
<v t="T402"><vh>&lt;&lt; create the frame &gt;&gt;</vh></v>
</v>
</v>
<v t="T403"><vh>colorizer tags</vh></v>
</v>
<v t="T404"><vh>Tk notes &amp; url's</vh>
<v t="T405"><vh>Standard names for all accelerator keys</vh>
<v t="T406"><vh>Useful for "show invisibles"</vh></v>
<v t="T407"><vh>Other characters</vh></v>
</v>
</v>
<v t="T408"><vh>tk prototype code</vh>
<v t="T409"><vh>tree</vh>
<v t="T410"><vh>createTree</vh></v>
<v><vh>expand/contract</vh>
<v t="T411"><vh>flip</vh></v>
<v t="T412"><vh>expand</vh></v>
<v t="T413"><vh>collapse</vh></v>
</v>
<v><vh>drawing</vh>
<v t="T414"><vh>geticonimage</vh></v>
<v t="T415"><vh>view</vh></v>
<v t="T416"><vh>lastvisiblechild</vh></v>
<v t="T417"><vh>update</vh></v>
<v t="T418"><vh>drawicon</vh></v>
<v t="T419"><vh>draw (draws the tree!)</vh>
<v t="T420"><vh>&lt;&lt; append TreeNodes to children &gt;&gt;</vh></v>
<v t="T421"><vh>&lt;&lt; draw the horizontal line to the child &gt;&gt;</vh></v>
<v t="T422"><vh>&lt;&lt; draw the plus or minus icon &gt;&gt;</vh></v>
<v t="T423"><vh>&lt;&lt; Add bindings for plus or minus icon &gt;&gt;</vh></v>
<v t="T424"><vh>&lt;&lt; draw the vertical line to the left of all children &gt;&gt;</vh></v>
</v>
<v t="T425"><vh>drawtext</vh></v>
</v>
<v><vh>edit or select</vh>
<v t="T426"><vh>edit</vh></v>
<v t="T427"><vh>edit_finish</vh></v>
<v t="T428"><vh>edit_cancel</vh></v>
<v t="T429"><vh>select</vh></v>
<v t="T430"><vh>select_or_edit</vh></v>
<v t="T431"><vh>deselect</vh></v>
<v t="T432"><vh>deselectall</vh></v>
<v t="T433"><vh>deselecttree</vh></v>
</v>
</v>
<v t="T434"><vh>widget.tcl (The Tk demo)</vh>
<v t="T435"><vh>&lt;&lt; Create the main window &gt;&gt;</vh>
<v t="T436"><vh>&lt;&lt; Create the menu bar &gt;&gt;</vh></v>
<v t="T437"><vh>&lt;&lt; Create the status bar &gt;&gt;</vh></v>
<v t="T438"><vh>&lt;&lt; Create the text frame &gt;&gt;</vh></v>
<v t="T439"><vh>&lt;&lt; Create tags for the text widget &gt;&gt;</vh></v>
</v>
<v t="T440"><vh>&lt;&lt; Create the text for the text widget &gt;&gt;</vh></v>
<v t="T441"><vh>AboutBox</vh></v>
<v t="T442"><vh>invoke</vh></v>
<v t="T443"><vh>positionWindow</vh></v>
<v t="T444"><vh>showCode</vh></v>
<v t="T445"><vh>showStatus</vh></v>
<v t="T446"><vh>showVars</vh></v>
</v>
</v>
<v t="T447"><vh>Unused code</vh>
<v t="T448"><vh>leoImport.sort (works)</vh></v>
<v t="T449"><vh>exportMoreText (won't do)</vh></v>
</v>
<v><vh>White papers</vh>
<v t="T450"><vh>Recovering from Read Errors</vh></v>
<v t="T451"><vh>CVS postings</vh>
<v t="T452"><vh>How to use Leo with CVS</vh></v>
<v t="T453"><vh>Leo can't mend clone links</vh></v>
<v t="T454"><vh>Problems</vh></v>
<v t="T455"><vh>.cvs.leo format</vh></v>
<v t="T456"><vh>@cvs</vh></v>
</v>
<v t="T457"><vh>Mac status report</vh></v>
<v t="T458"><vh>tk is the future of Leo</vh></v>
<v t="T459"><vh>Why I like Python</vh></v>
</v>
</v>
<v t="T460"><vh>To do</vh>
<v t="T461"><vh>email: retire Borland version?</vh></v>
<v t="T462"><vh>email: what't after Leo?</vh></v>
<v a="M"><vh>3.0 (if use "ISO-8859-1")</vh>
<v><vh>@comment messes up syntax coloring</vh></v>
<v><vh>run pychecker</vh></v>
<v><vh>Tk stuff</vh>
<v><vh>Labeled frame</vh></v>
<v><vh>Font Window</vh></v>
<v><vh>Colors Window</vh></v>
<v t="T463"><vh>Compare Window?</vh></v>
</v>
<v><vh>Other stuff</vh>
<v><vh>Make all Convert commands undoable</vh></v>
<v t="T464"><vh>Use config params </vh></v>
<v><vh>bug: non-leading tabs seem to have width = 1</vh></v>
<v t="T465"><vh>Fix javadoc problem</vh></v>
<v t="T466"><vh>Allow "ISO-8859-1" specification?</vh></v>
<v><vh>Load derived files directly</vh></v>
<v><vh>Don't canonicalize in short_file_name?</vh></v>
</v>
<v t="T467"><vh>email re: Eliminate trailing newlines</vh></v>
<v t="T468"><vh>Web site</vh></v>
</v>
<v><vh>Submit Leo, Sherlock and Tk stuff to vaults of parnassus</vh></v>
<v><vh>Borland 2.8 Fix bugs?</vh>
<v t="T469"><vh>Fix javadoc problem</vh></v>
<v t="T470"><vh>Contract All keeps current text pane</vh></v>
<v t="T471"><vh>Null node to clipboard:invalid outl/file </vh></v>
<v t="T472"><vh>Endless tangle with repeated @root file</vh></v>
</v>
<v t="T473"><vh>Probably never</vh>
<v t="T474"><vh>add hooks to Python scripts on entry</vh></v>
<v><vh>automatic "tab nanny" and syntax checking of Python code</vh></v>
<v t="T475"><vh>add mutex so only one copy of Leo will run</vh></v>
<v t="T476"><vh>mouse wheel issue</vh></v>
</v>
<v t="T477"><vh>Tk bugs</vh>
<v t="T478"><vh>Tree problems</vh></v>
<v t="T479"><vh>Window icons are Tk icon, not Leo icon</vh></v>
</v>
<v t="T480"><vh> Calls to notYet</vh></v>
</v>
<v t="T481" a="E"><vh>(Projects)</vh>
<v><vh> Commands &amp; utilities</vh>
<v t="T482" a="C"><vh> Sherlock...</vh>
<v t="T483"><vh>get_Sherlock_args</vh></v>
<v t="T484"><vh>init_trace</vh></v>
<v t="T485"><vh>trace</vh></v>
</v>
<v t="T486"><vh>(Cascade)</vh>
<v t="T487" a="C"><vh>OnCascade</vh></v>
</v>
<v t="T488"><vh>(Convert Blanks and Convert Tabs)</vh>
<v t="T489" a="C"><vh>updateBodyPane</vh></v>
<v t="T490" a="C"><vh>Leading &amp; trailing whitespace...</vh>
<v t="T491"><vh>computeLeadingWhitespace</vh></v>
<v t="T492"><vh>computeWidth</vh></v>
<v t="T493"><vh>optimizeLeadingWhitespace</vh></v>
<v t="T494"><vh>removeLeadingWhitespace</vh></v>
<v t="T495"><vh>removeTrailingWs</vh></v>
<v t="T496"><vh>skip_leading_ws</vh></v>
<v t="T497"><vh>skip_leading_ws_with_indent</vh></v>
</v>
<v t="T498" a="C"><vh>convertAllBlanks</vh></v>
<v t="T499" a="C"><vh>convertAllTabs</vh></v>
<v t="T500" a="C"><vh>convertTabs</vh></v>
<v t="T501" a="C"><vh>convertBlanks</vh></v>
</v>
<v><vh>(ConvertOutlineToNoweb crash)</vh>
<v t="T502"><vh>OutlineToNoweb crash</vh></v>
<v t="T503" a="C"><vh>convertVnodeToWeb</vh>
<v t="T504"><vh>&lt;&lt; Supply a missing doc part &gt;&gt;</vh></v>
</v>
<v t="T505" a="C"><vh>copyPart</vh></v>
</v>
<v><vh>(Cut &amp; Paste between apps)</vh>
<v t="T506" a="C"><vh>OnSelectAll</vh></v>
<v t="T507" a="C"><vh>frame.__init__</vh>
<v t="T508"><vh>&lt;&lt; set the LeoFrame ivars &gt;&gt;</vh></v>
<v t="T509"><vh>&lt;&lt; create the first tree node &gt;&gt;</vh></v>
</v>
<v t="T510" a="C"><vh>frame.OnPaste, OnPasteNode, OnPasteFromMenu</vh></v>
<v t="T511" a="C"><vh>frame.OnCopy, OnCopyFromMenu</vh></v>
<v t="T512" a="C"><vh>frame.OnCut, OnCutFrom Menu</vh></v>
<v t="T513" a="C"><vh>canPasteOutline</vh></v>
<v t="T514" a="C"><vh>Cut &amp; Paste Outlines</vh>
<v t="T515"><vh>cutOutline</vh></v>
<v t="T516"><vh>copyOutline</vh></v>
<v t="T517"><vh>pasteOutline</vh></v>
</v>
<v t="T518" a="C"><vh>Tk.Text selection (utils)</vh>
<v t="T519"><vh>getTextSelection</vh></v>
<v t="T520"><vh>getSelectedText</vh></v>
<v t="T521" a="C"><vh>setTextSelection</vh></v>
</v>
<v t="T522" a="C"><vh>stringIs/stringsAreValidMoreFile</vh></v>
<v t="T523" a="C"><vh>convertMoreString/StringsToOutlineAfter</vh>
<v t="T524"><vh>&lt;&lt; Link a new vnode v into the outline &gt;&gt;</vh></v>
<v t="T525"><vh>&lt;&lt; Set the headline string, skipping over the leader &gt;&gt;</vh></v>
<v t="T526"><vh>&lt;&lt; Count the number of following body lines &gt;&gt;</vh></v>
<v t="T527"><vh>&lt;&lt; Add the lines to the body text of v &gt;&gt;</vh></v>
</v>
</v>
<v><vh>(Cut/Paste Crash)</vh>
<v t="T528"><vh>Cut/Paste Crash</vh></v>
<v t="T529" a="C"><vh>os, onl, etc.</vh></v>
<v t="T530" a="C"><vh>putDocPart</vh>
<v t="T531"><vh>&lt;&lt; copy words, splitting the line if needed &gt;&gt;</vh></v>
</v>
</v>
<v><vh>(Delete &amp; Revert)</vh>
<v t="T532" a="C"><vh>canRevert</vh></v>
<v t="T533" a="C"><vh>OnRevert</vh></v>
<v t="T534" a="C"><vh>OnDelete</vh></v>
</v>
<v t="T535"><vh>(Edit Body Commands)</vh>
<v t="T536" a="C"><vh>c.copyTree</vh></v>
<v t="T537" a="C"><vh>undoReplace</vh></v>
<v t="T538" a="C"><vh>undo</vh>
<v t="T539"><vh>&lt;&lt; undo clone cases &gt;&gt;</vh></v>
<v t="T540"><vh>&lt;&lt; undo delete cases &gt;&gt;</vh></v>
<v t="T541"><vh>&lt;&lt; undo insert cases &gt;&gt;</vh></v>
<v t="T542" a="C"><vh>&lt;&lt; undo move  &amp; drag cases &gt;&gt;</vh></v>
<v t="T543"><vh>&lt;&lt; undo promote and demote cases &gt;&gt;</vh></v>
<v t="T544"><vh>&lt;&lt; undo replace cases &gt;&gt;</vh></v>
<v t="T545"><vh>&lt;&lt; undo sort cases &gt;&gt;</vh></v>
<v t="T546"><vh>&lt;&lt; undo typing cases &gt;&gt;</vh></v>
</v>
<v t="T547" a="C"><vh>redo</vh>
<v t="T548"><vh>&lt;&lt; redo clone cases &gt;&gt;</vh></v>
<v t="T549"><vh>&lt;&lt; redo delete cases &gt;&gt;</vh></v>
<v t="T550"><vh>&lt;&lt; redo insert cases &gt;&gt;</vh></v>
<v t="T551" a="C"><vh>&lt;&lt; redo move &amp; drag cases &gt;&gt;</vh></v>
<v t="T552"><vh>&lt;&lt; redo promote and demote cases &gt;&gt;</vh></v>
<v t="T553"><vh>&lt;&lt; redo replace cases &gt;&gt;</vh></v>
<v t="T554"><vh>&lt;&lt; redo sort cases &gt;&gt;</vh></v>
<v t="T555"><vh>&lt;&lt; redo typing cases &gt;&gt;</vh></v>
</v>
<v><vh>vnode methods used for undo</vh>
<v t="T556" a="C"><vh>swap_links</vh></v>
<v t="T557" a="C"><vh>v.__init__</vh>
<v t="T558"><vh>&lt;&lt; initialize vnode data members &gt;&gt;</vh></v>
</v>
<v t="T559" a="C"><vh>insertAfter</vh></v>
<v t="T560" a="C"><vh>v.copyNode</vh></v>
<v t="T561" a="C"><vh>v.copyTree</vh></v>
</v>
<v t="T518" a="C"><vh>Tk.Text selection (utils)</vh>
<v t="T519"><vh>getTextSelection</vh></v>
<v t="T520"><vh>getSelectedText</vh></v>
<v t="T521" a="C"><vh>setTextSelection</vh></v>
</v>
<v t="T490" a="C"><vh>Leading &amp; trailing whitespace...</vh>
<v t="T491"><vh>computeLeadingWhitespace</vh></v>
<v t="T492"><vh>computeWidth</vh></v>
<v t="T493"><vh>optimizeLeadingWhitespace</vh></v>
<v t="T494"><vh>removeLeadingWhitespace</vh></v>
<v t="T495"><vh>removeTrailingWs</vh></v>
<v t="T496"><vh>skip_leading_ws</vh></v>
<v t="T497"><vh>skip_leading_ws_with_indent</vh></v>
</v>
<v t="T562" a="C"><vh>canExtract, canExtractSection &amp; canExtractSectionNames</vh></v>
<v t="T563" a="C"><vh>Edit Body Text</vh>
<v t="T498" a="C"><vh>convertAllBlanks</vh></v>
<v t="T499" a="C"><vh>convertAllTabs</vh></v>
<v t="T501" a="C"><vh>convertBlanks</vh></v>
<v t="T500" a="C"><vh>convertTabs</vh></v>
<v t="T564"><vh>createLastChildNode</vh></v>
<v t="T565"><vh>dedentBody</vh></v>
<v t="T566"><vh>extract (not undoable)</vh>
<v t="T567"><vh>&lt;&lt; Set headline for extract &gt;&gt;</vh></v>
</v>
<v t="T568"><vh>extractSection (not undoable)</vh>
<v t="T569"><vh>&lt;&lt; Set headline for extractSection &gt;&gt;</vh></v>
</v>
<v t="T570"><vh>extractSectionNames (not undoable)</vh>
<v t="T571"><vh>&lt;&lt; Find the next section name &gt;&gt;</vh></v>
</v>
<v t="T572"><vh>getBodyLines</vh></v>
<v t="T573"><vh>getBodySelection</vh></v>
<v t="T574"><vh>indentBody</vh></v>
<v t="T489" a="C"><vh>updateBodyPane</vh></v>
</v>
<v t="T489" a="C"><vh>updateBodyPane</vh></v>
</v>
<v><vh>(Find)</vh>
<v t="T575" a="C"><vh>tree.onBodyChanged, onBodyWillChange, OnBodyKey, idle_body_key</vh>
<v t="T576"><vh>&lt;&lt; Do Auto indent &gt;&gt;</vh></v>
<v t="T577"><vh>&lt;&lt; convert leading tab to blanks &gt;&gt;</vh></v>
</v>
<v t="T578" a="C"><vh>tree.OnHeadlineKey, onHeadlineChanged, idle_head_key</vh></v>
<v t="T579" a="C"><vh>tree.redraw , force_redraw, redraw_now</vh></v>
<v t="T580" a="C"><vh>tree.set...LabelState</vh></v>
<v t="T581" a="C"><vh>&lt;&lt; Theory of operation &gt;&gt;</vh></v>
<v t="T582" a="C"><vh>find.__init__</vh>
<v t="T583"><vh>&lt;&lt; Initialize the leoFind ivars &gt;&gt;</vh></v>
<v t="T584"><vh>&lt;&lt; Create the Find and Change panes &gt;&gt;</vh></v>
<v t="T585"><vh>&lt;&lt; Create two columns of checkboxes &gt;&gt;</vh></v>
<v t="T586"><vh>&lt;&lt; Create two rows of buttons &gt;&gt;</vh></v>
</v>
<v t="T587" a="C"><vh>find.init</vh>
<v t="T588"><vh>&lt;&lt; set widgets &gt;&gt;</vh></v>
</v>
<v t="T589" a="C"><vh>resetWrap</vh></v>
<v t="T590" a="C"><vh>Top Level Commands</vh>
<v t="T591"><vh>changeButton</vh></v>
<v t="T592"><vh>changeAllButton</vh></v>
<v t="T593"><vh>changeThenFindButton</vh></v>
<v t="T594"><vh>findButton</vh></v>
<v t="T595"><vh>findAllButton</vh></v>
<v t="T596"><vh>changeCommand </vh></v>
<v t="T597"><vh>changeThenFindCommandd</vh></v>
<v t="T598"><vh>findNextCommand</vh></v>
<v t="T599"><vh>fndPreviousCommand</vh></v>
<v t="T600"><vh>setup_button</vh></v>
<v t="T601"><vh>setup_command</vh></v>
</v>
<v t="T602" a="C"><vh>Utilities</vh>
<v t="T603" a="C"><vh>batchChange</vh>
<v t="T604"><vh>&lt;&lt; set the undo head params &gt;&gt;</vh></v>
<v t="T605"><vh>&lt;&lt; set the undo body typing params &gt;&gt;</vh></v>
</v>
<v t="T606"><vh>change</vh></v>
<v t="T607" a="C"><vh>changeAll</vh></v>
<v t="T608" a="C"><vh>changeSelection</vh></v>
<v t="T609"><vh>changeThenFind</vh></v>
<v t="T610"><vh>findAll</vh></v>
<v t="T611"><vh>findNext</vh></v>
<v t="T612"><vh>findNextMatch</vh></v>
<v t="T613"><vh>selectNextVnode</vh></v>
<v t="T614"><vh>search</vh>
<v t="T615"><vh>&lt;&lt; return if we are passed the wrap point &gt;&gt;</vh></v>
<v t="T616"><vh>&lt;&lt; test for whole word match &gt;&gt;</vh></v>
</v>
<v t="T617"><vh>Initializing &amp; finalizing &amp; selecting</vh>
<v t="T618"><vh>checkArgs</vh></v>
<v t="T619"><vh>initBatchCommands</vh></v>
<v t="T620"><vh>initBatchText &amp; initNextText</vh></v>
<v t="T621"><vh>initInHeadline</vh></v>
<v t="T622"><vh>initInteractiveCommands</vh></v>
<v t="T623"><vh>printLine</vh></v>
<v t="T624"><vh>restore</vh></v>
<v t="T625"><vh>save</vh></v>
<v t="T626" a="C"><vh>showSuccess</vh></v>
</v>
</v>
</v>
<v t="T627"><vh>(Go To Commands)</vh>
<v t="T628" a="C"><vh>canSelectThreadBack</vh></v>
<v t="T629" a="C"><vh>canSelectThreadNext</vh></v>
<v t="T630" a="C"><vh>canSelectVisBack</vh></v>
<v t="T631" a="C"><vh>canSelectVisNext</vh></v>
<v t="T632" a="C"><vh>selectThreadBack</vh></v>
<v t="T633" a="C"><vh>selectThreadNext</vh></v>
<v t="T634" a="C"><vh>selectVisBack</vh></v>
<v t="T635" a="C"><vh>selectVisNext</vh></v>
</v>
<v t="T636"><vh>(Modal prefs)</vh>
<v t="T637" a="C"><vh>atFile.scanAllDirectives (calls writeError on errors)</vh>
<v t="T638" a="C"><vh>&lt;&lt; Set delims to default values &gt;&gt;</vh></v>
<v t="T639"><vh>&lt;&lt; Set path from @file node &gt;&gt;</vh></v>
<v t="T640"><vh>&lt;&lt; Test for @comment or @language &gt;&gt;</vh></v>
<v t="T641"><vh>&lt;&lt; Test for @path &gt;&gt;</vh></v>
<v t="T642" a="C"><vh>&lt;&lt; Test for @pagewidth and @tabwidth &gt;&gt;</vh></v>
<v t="T643"><vh>&lt;&lt; Set current directory &gt;&gt;</vh></v>
<v t="T644"><vh>&lt;&lt; Set comment Strings from delims &gt;&gt;</vh></v>
</v>
<v t="T645" a="C"><vh>getPrefs</vh>
<v t="T646"><vh>&lt;&lt; check for syntax coloring prefs &gt;&gt;</vh></v>
</v>
<v t="T647" a="C"><vh>OnClosePrefsFrame</vh></v>
<v t="T648" a="C"><vh>OnPreferences</vh></v>
</v>
<v t="T649"><vh>(Move up past root problems)</vh>
<v t="T551" a="C"><vh>&lt;&lt; redo move &amp; drag cases &gt;&gt;</vh></v>
<v t="T542" a="C"><vh>&lt;&lt; undo move  &amp; drag cases &gt;&gt;</vh></v>
<v t="T650" a="C"><vh>moveOutlineDown</vh>
<v t="T651"><vh>&lt;&lt; Move v down &gt;&gt;</vh></v>
</v>
<v t="T652" a="C"><vh>moveOutlineUp</vh>
<v t="T653"><vh>&lt;&lt; Move v up &gt;&gt;</vh></v>
</v>
<v t="T654" a="C"><vh>setDirty &amp; initDirtyBit</vh></v>
<v t="T655" a="C"><vh>linkAsRoot</vh></v>
<v t="T656" a="C"><vh>moveAfter</vh></v>
<v t="T657" a="C"><vh>moveToNthChildOf</vh></v>
<v t="T658" a="C"><vh>moveToRoot</vh></v>
</v>
<v t="T659"><vh>(present_language)</vh>
<v t="T660" a="C"><vh>prefs.init</vh>
<v t="T661"><vh>&lt;&lt; remember values for revert &gt;&gt;</vh></v>
<v t="T662"><vh>&lt;&lt; set widgets &gt;&gt;</vh></v>
</v>
<v t="T663" a="C"><vh>set_lang</vh></v>
<v t="T664" a="C"><vh>prefs.__init__</vh>
<v t="T665"><vh>&lt;&lt; Set ivars &gt;&gt;</vh></v>
<v t="T666"><vh>&lt;&lt; Create the Global Options frame &gt;&gt;</vh></v>
<v t="T667"><vh>&lt;&lt; Create the Tangle Options frame &gt;&gt;</vh></v>
<v t="T668"><vh>&lt;&lt; Create the Target Language frame &gt;&gt;</vh></v>
<v t="T669"><vh>&lt;&lt; Create the Ok, Cancel &amp; Revert buttons &gt;&gt;</vh></v>
</v>
<v t="T670" a="C"><vh>prefs.set_ivars &amp; idle_set_ivars &amp; print_ivars</vh>
<v t="T671"><vh>&lt;&lt; update ivars &gt;&gt;</vh></v>
</v>
<v t="T672" a="C"><vh>scanColorDirectives</vh>
<v t="T673"><vh>&lt;&lt; Test for @comment or @language &gt;&gt;</vh></v>
</v>
<v t="T575" a="C"><vh>tree.onBodyChanged, onBodyWillChange, OnBodyKey, idle_body_key</vh>
<v t="T576"><vh>&lt;&lt; Do Auto indent &gt;&gt;</vh></v>
<v t="T577"><vh>&lt;&lt; convert leading tab to blanks &gt;&gt;</vh></v>
</v>
</v>
<v><vh>(Python 2.2 import * problems)</vh>
<v t="T674" a="C"><vh>reload_all</vh></v>
<v t="T675" a="C"><vh>OnOpenPythonWindow   </vh></v>
</v>
<v><vh>(Quit safe log and trace)</vh>
<v t="T676" a="C"><vh>tree.destroy</vh></v>
<v t="T677" a="C"><vh>v.destroy</vh></v>
<v t="T678" a="C"><vh>c.destroy</vh></v>
<v t="T679" a="C"><vh>frame.destroy</vh></v>
<v t="T680" a="C"><vh>frame.OnCloseLeoEvent</vh>
<v t="T681"><vh>&lt;&lt; Prompt for change.  Set veto if the user cancels &gt;&gt;</vh>
<v t="T682"><vh>&lt;&lt; Put up a file save dialog; set veto if the user cancels &gt;&gt;</vh></v>
</v>
</v>
<v t="T683" a="C"><vh>frame.OnQuit</vh></v>
<v t="T684" a="C"><vh>app.quit</vh></v>
<v t="T685" a="C"><vh>frame.put, putnl</vh></v>
</v>
<v><vh>(Retain .leo file if write fails)</vh>
<v t="T686" a="C"><vh>atFile.write</vh>
<v t="T687"><vh>&lt;&lt; Open files.  Set orphan and dirty flags and return on errors &gt;&gt;</vh></v>
<v t="T688"><vh>&lt;&lt; put all @first lines in root &gt;&gt;</vh></v>
<v t="T689"><vh>&lt;&lt; Warn about @ignored and orphans  &gt;&gt;</vh></v>
<v t="T690"><vh>&lt;&lt; Replace the target with the temp file if different &gt;&gt;</vh></v>
</v>
<v t="T691" a="C"><vh>write_LEO_file</vh>
<v t="T692"><vh>&lt;&lt; create backup file &gt;&gt;</vh></v>
<v t="T693"><vh>&lt;&lt; delete backup file &gt;&gt;</vh></v>
<v t="T694"><vh>&lt;&lt; erase filename and rename backupName to fileName &gt;&gt;</vh></v>
</v>
</v>
<v><vh>(Save problems)</vh>
<v t="T695" a="C"><vh>OnSaveTo</vh></v>
<v t="T696" a="C"><vh>OnSaveAs</vh></v>
<v t="T697" a="C"><vh>OnSave</vh></v>
</v>
<v><vh>(Show Invisibles)</vh>
<v t="T698" a="C"><vh>OnViewAllCharacters</vh></v>
<v t="T699" a="C"><vh>&lt;&lt; configure tags &gt;&gt;</vh></v>
</v>
<v><vh>(Slow find)</vh>
<v t="T579" a="C"><vh>tree.redraw , force_redraw, redraw_now</vh></v>
<v t="T626" a="C"><vh>showSuccess</vh></v>
</v>
<v><vh>(Sort headline)</vh>
<v t="T700" a="C"><vh>c.sortChildren, sortSiblings</vh>
<v t="T701"><vh>&lt;&lt; Set the undo info for sortChildren &gt;&gt;</vh></v>
<v t="T702"><vh>&lt;&lt; Set the undo info for sortSiblings &gt;&gt;</vh></v>
</v>
<v t="T703" a="C"><vh>v.sortChildren</vh></v>
</v>
<v><vh>(Tangle &amp; Untangle)</vh>
<v t="T704"><vh>(@space bug)</vh>
<v t="T705" a="C"><vh>skip_doc</vh></v>
<v t="T706" a="C"><vh>token_type</vh>
<v t="T707"><vh>&lt;&lt; set token_type in noweb mode &gt;&gt;</vh></v>
<v t="T708"><vh>&lt;&lt; set token_type for CWEB mode &gt;&gt;</vh></v>
<v t="T709"><vh>&lt;&lt; set kind for directive &gt;&gt;</vh></v>
</v>
</v>
<v><vh>(Tangle marked &amp; Tangle All</vh>
<v t="T710" a="C"><vh>tangleAll</vh></v>
<v t="T711" a="C"><vh>tangleMarked</vh></v>
<v t="T712" a="C"><vh>tangleTree (calls cleanup)</vh></v>
</v>
<v><vh>(leo_done.bat)</vh>
<v t="T713" a="C"><vh>cleanup</vh></v>
</v>
<v t="T714"><vh>(scanAllDirectives)</vh>
<v t="T715"><vh>from args.c</vh></v>
<v t="T716"><vh>old code from tangle.scanAllDirectives &lt;&lt; try to set path... &gt;&gt;</vh></v>
<v t="T672" a="C"><vh>scanColorDirectives</vh>
<v t="T673"><vh>&lt;&lt; Test for @comment or @language &gt;&gt;</vh></v>
</v>
<v t="T637" a="C"><vh>atFile.scanAllDirectives (calls writeError on errors) </vh>
<v t="T638" a="C"><vh>&lt;&lt; Set delims to default values &gt;&gt;</vh></v>
<v t="T639"><vh>&lt;&lt; Set path from @file node &gt;&gt;</vh></v>
<v t="T640"><vh>&lt;&lt; Test for @comment or @language &gt;&gt;</vh></v>
<v t="T641"><vh>&lt;&lt; Test for @path &gt;&gt;</vh></v>
<v t="T642" a="C"><vh>&lt;&lt; Test for @pagewidth and @tabwidth &gt;&gt;</vh></v>
<v t="T643"><vh>&lt;&lt; Set current directory &gt;&gt;</vh></v>
<v t="T644"><vh>&lt;&lt; Set comment Strings from delims &gt;&gt;</vh></v>
</v>
<v t="T717" a="C"><vh>tangle.scanAllDirectives</vh>
<v t="T718"><vh>&lt;&lt; Test for @comment or @language &gt;&gt;</vh></v>
<v t="T719"><vh>&lt;&lt; Test for @verbose, @terse or @silent &gt;&gt;</vh></v>
<v t="T720"><vh>&lt;&lt; Test for @path, @pagewidth and @tabwidth &gt;&gt;</vh>
<v t="T721"><vh>&lt;&lt; Remove leading and trailing delims if they exist &gt;&gt;</vh></v>
</v>
<v t="T722"><vh>&lt;&lt; Test for @header or @noheader &gt;&gt;</vh></v>
<v t="T723"><vh>&lt;&lt; Set self.tangle_directory &gt;&gt;</vh></v>
</v>
</v>
<v><vh>(Untangle)</vh>
<v t="T724"><vh>Untangle test</vh>
<v t="T725"><vh>&lt;&lt; section1 &gt;&gt;</vh></v>
<v t="T726"><vh>section2</vh></v>
</v>
<v t="T727" a="C"><vh>find_line_start</vh></v>
<v t="T728" a="C"><vh>get_line &amp; get_line_after</vh></v>
<v t="T729" a="C"><vh>tangle.init_ivars &amp; init_directive_ivars</vh>
<v t="T730"><vh>&lt;&lt; init tangle ivars &gt;&gt;</vh></v>
<v t="T731"><vh>&lt;&lt; init untangle ivars &gt;&gt;</vh></v>
<v t="T732" a="C"><vh>&lt;&lt; init directive ivars &gt;&gt;</vh></v>
</v>
<v t="T733" a="C"><vh>Pass 1</vh>
<v t="T734"><vh>handle_newline</vh></v>
<v t="T735"><vh>skip_body</vh>
<v t="T736"><vh>The interface between tangle and untangle</vh>
<v t="T737"><vh>&lt;&lt; Define a section containing only an @doc part &gt;&gt;</vh></v>
<v t="T738"><vh>&lt;&lt; Scan and define a section definition &gt;&gt;</vh></v>
<v t="T739"><vh>&lt;&lt; Scan and define an @code defininition &gt;&gt;</vh></v>
<v t="T740"><vh>&lt;&lt; Scan and define a root section &gt;&gt;</vh></v>
</v>
</v>
<v t="T741"><vh>skip_code</vh>
<v t="T742"><vh>&lt;&lt; skip a noweb code section &gt;&gt;</vh>
<v t="T743"><vh>&lt;&lt; handle possible noweb section reference &gt;&gt;</vh></v>
</v>
<v t="T744"><vh>&lt;&lt; skip a CWEB code section &gt;&gt;</vh>
<v t="T745"><vh>&lt;&lt; handle CWEB control code &gt;&gt;</vh></v>
</v>
</v>
<v t="T705" a="C"><vh>skip_doc</vh></v>
<v t="T746"><vh>skip_headline</vh></v>
</v>
<v t="T747" a="C"><vh>untangle</vh>
<v t="T748"><vh>compare_comments</vh>
<v t="T749" a="C"><vh>&lt;&lt; Check both parts for @ comment conventions &gt;&gt;</vh></v>
</v>
<v t="T750"><vh>massage_block_comment (no longer used)</vh></v>
<v t="T751"><vh>forgiving_compare</vh>
<v t="T752"><vh>&lt;&lt; Define forgiving_compare vars &gt;&gt;</vh></v>
<v t="T749" a="C"><vh>&lt;&lt; Check both parts for @ comment conventions &gt;&gt;</vh></v>
<v t="T753"><vh>&lt;&lt; Compare non-critical newlines &gt;&gt;</vh></v>
<v t="T754"><vh>&lt;&lt; Compare non-critical whitespace &gt;&gt;</vh></v>
<v t="T755"><vh>&lt;&lt; Compare possible preprocessor directives &gt;&gt;</vh>
<v t="T756" a="C"><vh>&lt;&lt; Compare single characters &gt;&gt;</vh></v>
<v t="T757"><vh>&lt;&lt; Compare preprocessor directives &gt;&gt;</vh></v>
</v>
<v t="T758"><vh>&lt;&lt; Compare possible strings &gt;&gt;</vh>
<v t="T756" a="C"><vh>&lt;&lt; Compare single characters &gt;&gt;</vh></v>
<v t="T759"><vh>&lt;&lt; Compare C strings &gt;&gt;</vh></v>
<v t="T760"><vh>&lt;&lt; Compare Pascal strings &gt;&gt;</vh></v>
</v>
<v t="T761"><vh>&lt;&lt; Compare possible section references &gt;&gt;</vh></v>
<v t="T762"><vh>&lt;&lt; Compare comments or single characters &gt;&gt;</vh>
<v t="T756" a="C"><vh>&lt;&lt; Compare single characters &gt;&gt;</vh></v>
</v>
<v t="T763"><vh>&lt;&lt; Make sure both parts have ended &gt;&gt;</vh></v>
<v t="T764"><vh>&lt;&lt; Trace the mismatch &gt;&gt;</vh></v>
</v>
<v t="T765"><vh>mismatch</vh></v>
<v t="T766"><vh>scan_derived_file (pass 1)</vh>
<v t="T767"><vh>&lt;&lt; set the private global matching vars &gt;&gt;</vh></v>
<v t="T768"><vh>&lt;&lt; Skip the header line output by tangle &gt;&gt;</vh></v>
<v t="T769"><vh>&lt;&lt; handle the start of a new line &gt;&gt;</vh></v>
<v t="T770"><vh>&lt;&lt; handle a sentinel line &gt;&gt;</vh>
<v t="T771"><vh>&lt;&lt; terminate the previous part of this section if it exists &gt;&gt;</vh></v>
</v>
<v t="T772"><vh>&lt;&lt; copy the entire line &gt;&gt;</vh></v>
<v t="T773"><vh>&lt;&lt; copy a string &gt;&gt;</vh></v>
<v t="T774"><vh>&lt;&lt; copy a multi-line comment &gt;&gt;</vh></v>
<v t="T775"><vh>&lt;&lt; copy an alternate multi-line comment &gt;&gt;</vh></v>
<v t="T776"><vh>&lt;&lt; end all open sections &gt;&gt;</vh></v>
</v>
<v t="T777"><vh>update_def (pass 2)</vh>
<v t="T778"><vh>&lt;&lt; Remove leading blank lines and comments from ucode &gt;&gt;</vh></v>
</v>
<v t="T779"><vh>update_current_vnode</vh></v>
</v>
<v t="T780" a="C"><vh>ust</vh>
<v t="T781"><vh>ust_dump</vh></v>
<v t="T782"><vh>ust_enter</vh>
<v t="T783"><vh>&lt;&lt; remove blank lines from the start and end of the text &gt;&gt;</vh></v>
</v>
<v t="T784"><vh>ust_lookup</vh></v>
<v t="T785"><vh>ust_warn_about_orphans</vh></v>
</v>
<v t="T786" a="C"><vh>utility methods</vh>
<v t="T787"><vh>compare_section_names</vh></v>
<v t="T788"><vh>copy</vh></v>
<v t="T789"><vh>error &amp; warning</vh></v>
<v t="T790"><vh>is_end_of_directive</vh></v>
<v t="T791"><vh>is_end_of_string</vh></v>
<v t="T792"><vh>is_escaped</vh></v>
<v t="T793"><vh>is_section_name</vh></v>
<v t="T794"><vh>is_sentinel_line &amp; is_sentinel_line_with_data</vh>
<v t="T795"><vh>&lt;&lt; Initialize the return values  &gt;&gt;</vh></v>
<v t="T796"><vh>&lt;&lt; Make sure the line starts with start_sentinel &gt;&gt;</vh></v>
<v t="T797"><vh>&lt;&lt; Set end_flag if we have -- end -- &gt;&gt;</vh></v>
<v t="T798"><vh>&lt;&lt; Make sure we have a section reference &gt;&gt;</vh></v>
<v t="T799"><vh>&lt;&lt; Set part and of if they exist &gt;&gt;</vh></v>
<v t="T800"><vh>&lt;&lt; Set nl_flag to false if !newline exists &gt;&gt;</vh></v>
<v t="T801"><vh>&lt;&lt; Make sure the line ends with end_sentinel &gt;&gt;</vh></v>
</v>
<v t="T802"><vh>push_new_def_node</vh></v>
<v t="T803"><vh>scan_short_val</vh></v>
<v t="T804"><vh>set_root_delims</vh></v>
<v t="T805"><vh>setRootFromHeadline</vh></v>
<v t="T806"><vh>setRootFromText</vh></v>
<v t="T807"><vh>skip_CWEB_section_name</vh></v>
<v t="T808"><vh>skip_noweb_section_name</vh></v>
<v t="T809"><vh>skip_section_name</vh></v>
<v t="T810"><vh>standardize_name</vh></v>
<v t="T717" a="C"><vh>tangle.scanAllDirectives</vh>
<v t="T718"><vh>&lt;&lt; Test for @comment or @language &gt;&gt;</vh></v>
<v t="T719"><vh>&lt;&lt; Test for @verbose, @terse or @silent &gt;&gt;</vh></v>
<v t="T720"><vh>&lt;&lt; Test for @path, @pagewidth and @tabwidth &gt;&gt;</vh>
<v t="T721"><vh>&lt;&lt; Remove leading and trailing delims if they exist &gt;&gt;</vh></v>
</v>
<v t="T722"><vh>&lt;&lt; Test for @header or @noheader &gt;&gt;</vh></v>
<v t="T723"><vh>&lt;&lt; Set self.tangle_directory &gt;&gt;</vh></v>
</v>
<v t="T706" a="C"><vh>token_type</vh>
<v t="T707"><vh>&lt;&lt; set token_type in noweb mode &gt;&gt;</vh></v>
<v t="T708"><vh>&lt;&lt; set token_type for CWEB mode &gt;&gt;</vh></v>
<v t="T709"><vh>&lt;&lt; set kind for directive &gt;&gt;</vh></v>
</v>
</v>
</v>
</v>
<v t="T811"><vh>(Toggle Split direction)</vh>
<v t="T812" a="C"><vh>c.__init__</vh>
<v t="T813"><vh>&lt;&lt; initialize ivars &gt;&gt;</vh></v>
</v>
<v t="T507" a="C"><vh>frame.__init__</vh>
<v t="T508"><vh>&lt;&lt; set the LeoFrame ivars &gt;&gt;</vh></v>
<v t="T509"><vh>&lt;&lt; create the first tree node &gt;&gt;</vh></v>
</v>
<v t="T814" a="C"><vh>resizePanesToRatio</vh></v>
<v t="T815" a="C"><vh>OnToggleSplitDirection</vh></v>
<v t="T816" a="C"><vh>Splitter stuff</vh>
<v t="T817"><vh>bindBar</vh></v>
<v t="T818"><vh>configureBar (use config.bar_width)</vh></v>
<v t="T819"><vh>createBothLeoSplitters (use config.body_font,etc)</vh>
<v t="T820"><vh>&lt;&lt; set the font for the body pane &gt;&gt;</vh></v>
<v t="T821"><vh>&lt;&lt; create the body pane &gt;&gt;</vh></v>
<v t="T822"><vh>&lt;&lt; create the tree pane &gt;&gt;</vh></v>
<v t="T823"><vh>&lt;&lt; create the log pane &gt;&gt;</vh></v>
</v>
<v t="T824"><vh>createLeoSplitter (use config params)</vh></v>
<v t="T825"><vh>divideAnySplitter</vh></v>
<v t="T826"><vh>divideLeoSplitter</vh></v>
<v t="T827"><vh>onDrag...</vh></v>
<v t="T828"><vh>placeSplitter</vh></v>
<v t="T829"><vh>reconfigurePanes (use config bar_width)</vh></v>
</v>
</v>
<v t="T830"><vh>(Undo)</vh>
<v t="T518" a="C"><vh>Tk.Text selection (utils)</vh>
<v t="T519"><vh>getTextSelection</vh></v>
<v t="T520"><vh>getSelectedText</vh></v>
<v t="T521" a="C"><vh>setTextSelection</vh></v>
</v>
<v t="T578" a="C"><vh>tree.OnHeadlineKey, onHeadlineChanged, idle_head_key</vh></v>
<v t="T575" a="C"><vh>tree.onBodyChanged, onBodyWillChange, OnBodyKey, idle_body_key</vh>
<v t="T576"><vh>&lt;&lt; Do Auto indent &gt;&gt;</vh></v>
<v t="T577"><vh>&lt;&lt; convert leading tab to blanks &gt;&gt;</vh></v>
</v>
<v t="T831" a="C"><vh>State routines...</vh>
<v t="T832"><vh>canRedo &amp; canUndo</vh></v>
<v t="T833"><vh>enableMenuItems</vh></v>
<v t="T834"><vh>getBead, peekBead, setBead</vh></v>
<v t="T835"><vh>redoMenuName, undoMenuName</vh></v>
<v t="T836"><vh>setRedoType, setUndoType</vh></v>
<v t="T837"><vh>setUndoParams</vh></v>
<v t="T838"><vh>setUndoTypingParams</vh></v>
<v t="T839"><vh>setUndoTypes</vh></v>
</v>
<v t="T514" a="C"><vh>Cut &amp; Paste Outlines</vh>
<v t="T515"><vh>cutOutline</vh></v>
<v t="T516"><vh>copyOutline</vh></v>
<v t="T517"><vh>pasteOutline</vh></v>
</v>
<v t="T840" a="C"><vh>Moving, Dragging, Promote, Demote, Sort</vh>
<v t="T841" a="C"><vh>c.dragAfter</vh></v>
<v t="T842" a="C"><vh>c.dragToNthChildOf</vh></v>
<v t="T700" a="C"><vh>c.sortChildren, sortSiblings</vh>
<v t="T701"><vh>&lt;&lt; Set the undo info for sortChildren &gt;&gt;</vh></v>
<v t="T702"><vh>&lt;&lt; Set the undo info for sortSiblings &gt;&gt;</vh></v>
</v>
<v t="T843"><vh>demote</vh></v>
<v t="T650" a="C"><vh>moveOutlineDown</vh>
<v t="T651"><vh>&lt;&lt; Move v down &gt;&gt;</vh></v>
</v>
<v t="T844"><vh>moveOutlineLeft</vh></v>
<v t="T845"><vh>moveOutlineRight</vh></v>
<v t="T652" a="C"><vh>moveOutlineUp</vh>
<v t="T653"><vh>&lt;&lt; Move v up &gt;&gt;</vh></v>
</v>
<v t="T846"><vh>promote</vh></v>
</v>
<v t="T847" a="C"><vh>c.insertHeadline</vh></v>
<v t="T848" a="C"><vh>c.deleteHeadline</vh></v>
<v t="T849" a="C"><vh>undoPromote</vh></v>
<v t="T850" a="C"><vh>undoDemote</vh></v>
<v><vh>Find/Change</vh>
<v t="T608" a="C"><vh>changeSelection</vh></v>
<v t="T607" a="C"><vh>changeAll</vh></v>
<v t="T603" a="C"><vh>batchChange</vh>
<v t="T604"><vh>&lt;&lt; set the undo head params &gt;&gt;</vh></v>
<v t="T605"><vh>&lt;&lt; set the undo body typing params &gt;&gt;</vh></v>
</v>
</v>
<v t="T538" a="C"><vh>undo</vh>
<v t="T539"><vh>&lt;&lt; undo clone cases &gt;&gt;</vh></v>
<v t="T540"><vh>&lt;&lt; undo delete cases &gt;&gt;</vh></v>
<v t="T541"><vh>&lt;&lt; undo insert cases &gt;&gt;</vh></v>
<v t="T542" a="C"><vh>&lt;&lt; undo move  &amp; drag cases &gt;&gt;</vh></v>
<v t="T543"><vh>&lt;&lt; undo promote and demote cases &gt;&gt;</vh></v>
<v t="T544"><vh>&lt;&lt; undo replace cases &gt;&gt;</vh></v>
<v t="T545"><vh>&lt;&lt; undo sort cases &gt;&gt;</vh></v>
<v t="T546"><vh>&lt;&lt; undo typing cases &gt;&gt;</vh></v>
</v>
<v t="T547" a="C"><vh>redo</vh>
<v t="T548"><vh>&lt;&lt; redo clone cases &gt;&gt;</vh></v>
<v t="T549"><vh>&lt;&lt; redo delete cases &gt;&gt;</vh></v>
<v t="T550"><vh>&lt;&lt; redo insert cases &gt;&gt;</vh></v>
<v t="T551" a="C"><vh>&lt;&lt; redo move &amp; drag cases &gt;&gt;</vh></v>
<v t="T552"><vh>&lt;&lt; redo promote and demote cases &gt;&gt;</vh></v>
<v t="T553"><vh>&lt;&lt; redo replace cases &gt;&gt;</vh></v>
<v t="T554"><vh>&lt;&lt; redo sort cases &gt;&gt;</vh></v>
<v t="T555"><vh>&lt;&lt; redo typing cases &gt;&gt;</vh></v>
</v>
<v t="T851"><vh>test of extract commands</vh>
<v><vh>a</vh>
<v><vh>c</vh></v>
</v>
<v><vh>b</vh></v>
<v t="T852"><vh>&lt;&lt;aa&gt;&gt;</vh></v>
</v>
</v>
</v>
<v><vh> Drawing</vh>
<v t="T853"><vh>(body flashing &amp; recolor)</vh>
<v t="T575" a="C"><vh>tree.onBodyChanged, onBodyWillChange, OnBodyKey, idle_body_key</vh>
<v t="T576"><vh>&lt;&lt; Do Auto indent &gt;&gt;</vh></v>
<v t="T577"><vh>&lt;&lt; convert leading tab to blanks &gt;&gt;</vh></v>
</v>
<v t="T854" a="C"><vh>tree.select</vh></v>
<v t="T855" a="C"><vh>tree.recolor &amp; recolor_now</vh></v>
</v>
<v><vh>(c.makeVisible &amp; scrolling)</vh>
<v t="T856"><vh>c.makeVisible</vh></v>
<v t="T857" a="C"><vh>lastVisible</vh></v>
<v t="T858" a="C"><vh>tree.yoffset</vh></v>
<v t="T859" a="C"><vh>tree.expandAllAncestors</vh></v>
<v t="T860" a="C"><vh>tree.idle_scrollTo</vh></v>
<v t="T579" a="C"><vh>tree.redraw , force_redraw, redraw_now</vh></v>
</v>
<v t="T861"><vh>(Simplified redraw)</vh>
<v t="T862" a="C"><vh>tree.__init__</vh></v>
<v t="T579" a="C"><vh>tree.redraw , force_redraw, redraw_now</vh></v>
<v t="T863" a="C"><vh>beginUpdate</vh></v>
<v t="T864" a="C"><vh>endUpdate</vh></v>
</v>
<v t="T865"><vh>(General syntax coloring)</vh>
<v t="T866"><vh>Syntax tests</vh></v>
<v t="T867" a="C"><vh>&lt;&lt; define colorizer keywords &gt;&gt;</vh></v>
<v t="T868" a="C"><vh>@language and @comment directives</vh>
<v t="T869" a="C"><vh>set_delims_from_language</vh></v>
<v t="T870" a="C"><vh>set_delims_from_string</vh></v>
<v t="T871"><vh>set_language</vh></v>
</v>
<v t="T872" a="C"><vh>colorize</vh></v>
<v t="T873" a="C"><vh>colorizeAnyLanguage</vh>
<v t="T874"><vh>&lt;&lt; configure tags &gt;&gt;</vh></v>
<v t="T875"><vh>&lt;&lt; configure language-specific settings &gt;&gt;</vh></v>
<v t="T876"><vh>Multiline State Handlers</vh>
<v t="T877"><vh>&lt;&lt; continue doc part &gt;&gt;</vh>
<v t="T878"><vh>&lt;&lt; handle cweb doc part &gt;&gt;</vh></v>
<v t="T879"><vh>&lt;&lt; handle noweb doc part &gt;&gt;</vh></v>
</v>
<v t="T880"><vh>&lt;&lt; continue python triple string &gt;&gt;</vh></v>
<v t="T881"><vh>&lt;&lt; continue block comment &gt;&gt;</vh></v>
<v t="T882"><vh>&lt;&lt; continue nocolor state &gt;&gt;</vh></v>
</v>
<v t="T883"><vh>&lt;&lt; handle string &gt;&gt;</vh></v>
<v t="T884"><vh>&lt;&lt; start block comment &gt;&gt;</vh></v>
<v t="T885"><vh>&lt;&lt; handle single-line comment &gt;&gt;</vh></v>
<v t="T886"><vh>&lt;&lt; handle C preprocessor line &gt;&gt;</vh></v>
<v t="T887"><vh>&lt;&lt; handle possible section ref or def &gt;&gt;</vh>
<v t="T888"><vh>&lt;&lt; set the hyperlink &gt;&gt;</vh></v>
</v>
<v t="T889"><vh>&lt;&lt; handle possible @keyword &gt;&gt;</vh>
<v t="T890"><vh>&lt;&lt; Handle all cweb control codes &gt;&gt;</vh></v>
<v t="T891"><vh>&lt;&lt; Handle non-cweb @keywords &gt;&gt;</vh></v>
</v>
<v t="T892"><vh>&lt;&lt; handle possible  keyword &gt;&gt;</vh></v>
<v t="T893"><vh>&lt;&lt; handle blank &gt;&gt;</vh></v>
<v t="T894"><vh>&lt;&lt; handle tab &gt;&gt;</vh></v>
<v t="T895"><vh>&lt;&lt; handle normal character &gt;&gt;</vh></v>
</v>
</v>
<v t="T896"><vh>(Focus problems)</vh>
<v><vh>Control-I and control-H didn't work</vh>
<v t="T847" a="C"><vh>c.insertHeadline</vh></v>
<v t="T897" a="C"><vh>editVnode (calls tree.editLabel)</vh></v>
<v t="T898" a="C"><vh>editLabel	</vh></v>
<v t="T899" a="C"><vh>endEditLab (es here helps set focus properly!)</vh></v>
<v t="T580" a="C"><vh>tree.set...LabelState</vh></v>
</v>
</v>
</v>
<v><vh> Events</vh>
<v t="T900"><vh>(DnD)</vh>
<v t="T901" a="C"><vh>c.checkMoveWithParentWithWarning</vh></v>
<v t="T841" a="C"><vh>c.dragAfter</vh></v>
<v t="T842" a="C"><vh>c.dragToNthChildOf</vh></v>
<v t="T902" a="C"><vh>tree.drawIcon</vh></v>
<v t="T903" a="C"><vh>tree.findVnodeWithIconId</vh></v>
<v t="T904" a="C"><vh>tree.OnDrag</vh>
<v t="T905"><vh>&lt;&lt; set vdrag and expandFlag &gt;&gt;</vh></v>
<v t="T906"><vh>&lt;&lt; expand vdrag and redraw &gt;&gt;</vh></v>
<v t="T907"><vh>&lt;&lt; scroll the canvas as needed &gt;&gt;</vh></v>
</v>
<v t="T908" a="C"><vh>tree.OnEndDrag</vh>
<v t="T909"><vh>&lt;&lt; set vdrag, childFlag &gt;&gt;</vh></v>
</v>
<v t="T910" a="C"><vh>tree.OnIconClick</vh></v>
<v t="T860" a="C"><vh>tree.idle_scrollTo</vh></v>
<v t="T858" a="C"><vh>tree.yoffset</vh></v>
<v t="T911" a="C"><vh>tree.numberOfVisibleNodes</vh></v>
</v>
<v t="T912"><vh>(Double-click and word select)</vh>
<v t="T507" a="C"><vh>frame.__init__</vh>
<v t="T508"><vh>&lt;&lt; set the LeoFrame ivars &gt;&gt;</vh></v>
<v t="T509"><vh>&lt;&lt; create the first tree node &gt;&gt;</vh></v>
</v>
<v t="T521" a="C"><vh>setTextSelection</vh></v>
<v t="T913" a="C"><vh>OnActivateBody &amp; OnBodyDoubleClick</vh></v>
<v t="T575" a="C"><vh>tree.onBodyChanged, onBodyWillChange, OnBodyKey, idle_body_key</vh>
<v t="T576"><vh>&lt;&lt; Do Auto indent &gt;&gt;</vh></v>
<v t="T577"><vh>&lt;&lt; convert leading tab to blanks &gt;&gt;</vh></v>
</v>
</v>
<v><vh>(event handlers)</vh>
<v t="T575" a="C"><vh>tree.onBodyChanged, onBodyWillChange, OnBodyKey, idle_body_key</vh>
<v t="T576"><vh>&lt;&lt; Do Auto indent &gt;&gt;</vh></v>
<v t="T577"><vh>&lt;&lt; convert leading tab to blanks &gt;&gt;</vh></v>
</v>
<v t="T578" a="C"><vh>tree.OnHeadlineKey, onHeadlineChanged, idle_head_key</vh></v>
<v t="T898" a="C"><vh>editLabel	</vh></v>
<v t="T899" a="C"><vh>endEditLab (es here helps set focus properly!)</vh></v>
</v>
<v><vh>(hypertext links)</vh>
<v t="T914" a="C"><vh>color.__init__</vh></v>
<v t="T915"><vh>colorizePython (no longer used)</vh>
<v t="T699" a="C"><vh>&lt;&lt; configure tags &gt;&gt;</vh></v>
<v t="T916"><vh>&lt;&lt; continue doc part &gt;&gt;</vh></v>
<v t="T917"><vh>&lt;&lt; continue python triple string &gt;&gt;</vh></v>
<v t="T918"><vh>&lt;&lt; continue nocolor state &gt;&gt;</vh></v>
<v t="T919"><vh>&lt;&lt; handle python string &gt;&gt;</vh></v>
<v t="T920"><vh>&lt;&lt; handle python comment &gt;&gt;</vh></v>
<v t="T921"><vh>&lt;&lt; handle possible @keyword &gt;&gt;</vh></v>
<v t="T922"><vh>&lt;&lt; handle possible section ref or def &gt;&gt;</vh>
<v t="T923"><vh>&lt;&lt; set the hyperlink &gt;&gt;</vh></v>
</v>
<v t="T924"><vh>&lt;&lt; handle possible python keyword &gt;&gt;</vh></v>
<v t="T925"><vh>&lt;&lt; handle blank &gt;&gt;</vh></v>
<v t="T926"><vh>&lt;&lt; handle tab &gt;&gt;</vh></v>
<v t="T927"><vh>&lt;&lt; handle normal character &gt;&gt;</vh></v>
</v>
<v t="T859" a="C"><vh>tree.expandAllAncestors</vh></v>
<v t="T928" a="C"><vh>v.Callbacks</vh>
<v t="T929"><vh>OnBoxClick</vh></v>
<v t="T930"><vh>OnDrag</vh></v>
<v t="T931"><vh>OnEndDrag</vh></v>
<v t="T932"><vh>OnHeadlineClick</vh></v>
<v t="T933"><vh>OnHeadlineKey</vh></v>
<v t="T934"><vh>OnHyperLinkControlClick</vh></v>
<v t="T935"><vh>OnHyperLinkEnter</vh></v>
<v t="T936"><vh>OnHyperLinkLeave</vh></v>
<v t="T937"><vh>v.OnIconClick</vh></v>
</v>
<v t="T938" a="C"><vh>findReference</vh></v>
</v>
<v t="T939"><vh>(Negative tab widths)</vh>
<v t="T575" a="C"><vh>tree.onBodyChanged, onBodyWillChange, OnBodyKey, idle_body_key</vh>
<v t="T576"><vh>&lt;&lt; Do Auto indent &gt;&gt;</vh></v>
<v t="T577"><vh>&lt;&lt; convert leading tab to blanks &gt;&gt;</vh></v>
</v>
</v>
<v><vh>(Per-window default tangle directory)</vh>
<v t="T664" a="C"><vh>prefs.__init__</vh>
<v t="T665"><vh>&lt;&lt; Set ivars &gt;&gt;</vh></v>
<v t="T666"><vh>&lt;&lt; Create the Global Options frame &gt;&gt;</vh></v>
<v t="T667"><vh>&lt;&lt; Create the Tangle Options frame &gt;&gt;</vh></v>
<v t="T668"><vh>&lt;&lt; Create the Target Language frame &gt;&gt;</vh></v>
<v t="T669"><vh>&lt;&lt; Create the Ok, Cancel &amp; Revert buttons &gt;&gt;</vh></v>
</v>
<v t="T670" a="C"><vh>prefs.set_ivars &amp; idle_set_ivars &amp; print_ivars</vh>
<v t="T671"><vh>&lt;&lt; update ivars &gt;&gt;</vh></v>
</v>
<v t="T660" a="C"><vh>prefs.init</vh>
<v t="T661"><vh>&lt;&lt; remember values for revert &gt;&gt;</vh></v>
<v t="T662"><vh>&lt;&lt; set widgets &gt;&gt;</vh></v>
</v>
<v t="T940" a="C"><vh>OnActivateLeoEvent</vh></v>
</v>
<v t="T941"><vh>(tab_width)</vh>
<v t="T732" a="C"><vh>&lt;&lt; init directive ivars &gt;&gt;</vh></v>
<v t="T642" a="C"><vh>&lt;&lt; Test for @pagewidth and @tabwidth &gt;&gt;</vh></v>
<v t="T638" a="C"><vh>&lt;&lt; Set delims to default values &gt;&gt;</vh></v>
<v t="T660" a="C"><vh>prefs.init</vh>
<v t="T661"><vh>&lt;&lt; remember values for revert &gt;&gt;</vh></v>
<v t="T662"><vh>&lt;&lt; set widgets &gt;&gt;</vh></v>
</v>
<v t="T670" a="C"><vh>prefs.set_ivars &amp; idle_set_ivars &amp; print_ivars</vh>
<v t="T671"><vh>&lt;&lt; update ivars &gt;&gt;</vh></v>
</v>
<v t="T575" a="C"><vh>tree.onBodyChanged, onBodyWillChange, OnBodyKey, idle_body_key</vh>
<v t="T576"><vh>&lt;&lt; Do Auto indent &gt;&gt;</vh></v>
<v t="T577"><vh>&lt;&lt; convert leading tab to blanks &gt;&gt;</vh></v>
</v>
<v t="T812" a="C"><vh>c.__init__</vh>
<v t="T813"><vh>&lt;&lt; initialize ivars &gt;&gt;</vh></v>
</v>
<v t="T507" a="C"><vh>frame.__init__</vh>
<v t="T508"><vh>&lt;&lt; set the LeoFrame ivars &gt;&gt;</vh></v>
<v t="T509"><vh>&lt;&lt; create the first tree node &gt;&gt;</vh></v>
</v>
<v t="T942" a="C"><vh>frame.setTabWidth</vh></v>
</v>
<v><vh>(tree bindings)</vh>
<v t="T557" a="C"><vh>v.__init__</vh>
<v t="T558"><vh>&lt;&lt; initialize vnode data members &gt;&gt;</vh></v>
</v>
<v t="T943" a="C"><vh>drawBox</vh></v>
<v t="T902" a="C"><vh>tree.drawIcon</vh></v>
<v t="T944" a="C"><vh>drawText</vh>
<v t="T945"><vh>&lt;&lt; configure the text depending on state &gt;&gt;</vh></v>
</v>
<v><vh>&lt;&lt; update the canvas &gt;&gt;</vh></v>
</v>
</v>
<v><vh> Files &amp; Directories</vh>
<v t="T946"><vh>(missing dirty marks ) </vh>
<v t="T575" a="C"><vh>tree.onBodyChanged, onBodyWillChange, OnBodyKey, idle_body_key</vh>
<v t="T576"><vh>&lt;&lt; Do Auto indent &gt;&gt;</vh></v>
<v t="T577"><vh>&lt;&lt; convert leading tab to blanks &gt;&gt;</vh></v>
</v>
<v t="T578" a="C"><vh>tree.OnHeadlineKey, onHeadlineChanged, idle_head_key</vh></v>
<v t="T654" a="C"><vh>setDirty &amp; initDirtyBit</vh></v>
<v t="T947" a="C"><vh>setAncestorAtFileNodeDirty</vh></v>
</v>
<v t="T948"><vh>(remarking bad @file nodes dirty)</vh>
<v t="T686" a="C"><vh>atFile.write</vh>
<v t="T687"><vh>&lt;&lt; Open files.  Set orphan and dirty flags and return on errors &gt;&gt;</vh></v>
<v t="T688"><vh>&lt;&lt; put all @first lines in root &gt;&gt;</vh></v>
<v t="T689"><vh>&lt;&lt; Warn about @ignored and orphans  &gt;&gt;</vh></v>
<v t="T690"><vh>&lt;&lt; Replace the target with the temp file if different &gt;&gt;</vh></v>
</v>
</v>
<v><vh>(remove blank lines)</vh>
<v t="T949" a="C"><vh>&lt;&lt; scan @+node &gt;&gt;</vh>
<v t="T950"><vh>&lt;&lt; Set childIndex &gt;&gt;</vh></v>
<v t="T951"><vh>&lt;&lt; Set cloneIndex &gt;&gt;</vh></v>
<v t="T952"><vh>&lt;&lt; Set headline and ref &gt;&gt;</vh></v>
<v t="T953"><vh>&lt;&lt; Check the filename in the sentinel &gt;&gt;</vh></v>
</v>
<v t="T954" a="C"><vh>putCodePart &amp; allies</vh>
<v t="T955"><vh>&lt;&lt; handle the start of a line &gt;&gt;</vh>
<v t="T956"><vh>&lt;&lt; handle @others &gt;&gt;</vh></v>
<v t="T957"><vh>&lt;&lt; put @verbatim sentinel if necessary &gt;&gt;</vh></v>
</v>
<v t="T958"><vh>&lt;&lt; put the line &gt;&gt;</vh>
<v t="T959"><vh>&lt;&lt; put possible section reference &gt;&gt;</vh></v>
</v>
<v t="T960"><vh>isSectionName</vh></v>
<v t="T961"><vh>inAtOthers</vh></v>
<v t="T962"><vh>putAtOthers</vh></v>
<v t="T963"><vh>putAtOthersChild</vh></v>
<v t="T964"><vh>putRef</vh></v>
</v>
<v t="T529" a="C"><vh>os, onl, etc.</vh></v>
<v t="T965" a="C"><vh>sentinelKind</vh></v>
<v t="T966" a="C"><vh>putSentinel</vh></v>
</v>
<v t="T967"><vh>(computing loaddir)</vh>
<v t="T968" a="C"><vh>app.finishCreate</vh>
<v t="T969" a="C"><vh>&lt;&lt; set loadDir &gt;&gt;</vh></v>
<v t="T970"><vh>&lt;&lt; set the default Leo icon &gt;&gt;</vh>
<v t="T971"><vh>&lt;&lt; set v834 if version is 8.3.4 or greater &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="T972"><vh>(default directory)</vh>
<v t="T973"><vh>Notes</vh></v>
<v><vh>leo.py (done)</vh>
<v t="T969" a="C"><vh>&lt;&lt; set loadDir &gt;&gt;</vh></v>
<v t="T974" a="C"><vh>run</vh>
<v t="T975" a="C"><vh>&lt;&lt; set the icon image &gt;&gt;</vh></v>
</v>
</v>
<v><vh>App (done)</vh>
<v t="T976" a="C"><vh>app.__init__</vh></v>
<v t="T968" a="C"><vh>app.finishCreate</vh>
<v t="T969" a="C"><vh>&lt;&lt; set loadDir &gt;&gt;</vh></v>
<v t="T970"><vh>&lt;&lt; set the default Leo icon &gt;&gt;</vh>
<v t="T971"><vh>&lt;&lt; set v834 if version is 8.3.4 or greater &gt;&gt;</vh></v>
</v>
</v>
</v>
<v><vh>AtFile... (done)</vh>
<v t="T977" a="C"><vh>atFile ctor</vh>
<v t="T978"><vh>&lt;&lt; initialize atFile ivars &gt;&gt;</vh></v>
</v>
<v t="T637" a="C"><vh>atFile.scanAllDirectives (calls writeError on errors) </vh>
<v t="T638" a="C"><vh>&lt;&lt; Set delims to default values &gt;&gt;</vh></v>
<v t="T639"><vh>&lt;&lt; Set path from @file node &gt;&gt;</vh></v>
<v t="T640"><vh>&lt;&lt; Test for @comment or @language &gt;&gt;</vh></v>
<v t="T641"><vh>&lt;&lt; Test for @path &gt;&gt;</vh></v>
<v t="T642" a="C"><vh>&lt;&lt; Test for @pagewidth and @tabwidth &gt;&gt;</vh></v>
<v t="T643"><vh>&lt;&lt; Set current directory &gt;&gt;</vh></v>
<v t="T644"><vh>&lt;&lt; Set comment Strings from delims &gt;&gt;</vh></v>
</v>
<v t="T979" a="C"><vh>atFile.read</vh>
<v t="T980"><vh>&lt;&lt; open file &gt;&gt;</vh></v>
<v t="T981"><vh>&lt;&lt; Scan the file buffer  &gt;&gt;</vh></v>
<v t="T982"><vh>&lt;&lt; Bump mStructureErrors if any vnodes are unvisited &gt;&gt;</vh></v>
<v t="T983"><vh>&lt;&lt; Delete root's tree and body text &gt;&gt;</vh></v>
<v t="T984"><vh>&lt;&lt; Handle clone bits &gt;&gt;</vh></v>
<v t="T985"><vh>&lt;&lt; Join cloned trees &gt;&gt;</vh></v>
<v t="T986"><vh>&lt;&lt; Handle all status bits &gt;&gt;</vh></v>
</v>
<v t="T686" a="C"><vh>atFile.write</vh>
<v t="T687"><vh>&lt;&lt; Open files.  Set orphan and dirty flags and return on errors &gt;&gt;</vh></v>
<v t="T688"><vh>&lt;&lt; put all @first lines in root &gt;&gt;</vh></v>
<v t="T689"><vh>&lt;&lt; Warn about @ignored and orphans  &gt;&gt;</vh></v>
<v t="T690"><vh>&lt;&lt; Replace the target with the temp file if different &gt;&gt;</vh></v>
</v>
</v>
<v t="T987"><vh>File Commands... (done) </vh>
<v t="T988" a="C"><vh>fileCommands.readOutlineOnly</vh>
<v t="T989" a="C"><vh>&lt;&lt; Set the default directory &gt;&gt;</vh></v>
</v>
<v t="T990" a="C"><vh>fileCommands.open</vh>
<v t="T989" a="C"><vh>&lt;&lt; Set the default directory &gt;&gt;</vh></v>
</v>
<v t="T645" a="C"><vh>getPrefs</vh>
<v t="T646"><vh>&lt;&lt; check for syntax coloring prefs &gt;&gt;</vh></v>
</v>
<v t="T991" a="C"><vh>fileCommands.OnReadOutlineOnly</vh></v>
<v t="T691" a="C"><vh>write_LEO_file</vh>
<v t="T692"><vh>&lt;&lt; create backup file &gt;&gt;</vh></v>
<v t="T693"><vh>&lt;&lt; delete backup file &gt;&gt;</vh></v>
<v t="T694"><vh>&lt;&lt; erase filename and rename backupName to fileName &gt;&gt;</vh></v>
</v>
</v>
<v><vh>Frame... (done)</vh>
<v t="T507" a="C"><vh>frame.__init__</vh>
<v t="T508"><vh>&lt;&lt; set the LeoFrame ivars &gt;&gt;</vh></v>
<v t="T509"><vh>&lt;&lt; create the first tree node &gt;&gt;</vh></v>
</v>
<v t="T992" a="C"><vh>frame.OnOpen</vh>
<v t="T993"><vh>&lt;&lt; Set closeFlag if the only open window is empty &gt;&gt;</vh></v>
</v>
<v t="T994" a="C"><vh>frame.OpenWithFileName</vh>
<v t="T995" a="C"><vh>&lt;&lt; make fileName the most recent file of frame &gt;&gt;</vh></v>
</v>
</v>
<v t="T996"><vh>Import... (no changes needed)</vh>
<v t="T997"><vh>importFiles.createRootBody</vh></v>
<v t="T998" a="C"><vh>flattenOutline</vh></v>
<v t="T999" a="C"><vh>outlineToWeb</vh></v>
</v>
<v><vh>Tangle... (done)</vh>
<v t="T729" a="C"><vh>tangle.init_ivars &amp; init_directive_ivars</vh>
<v t="T730"><vh>&lt;&lt; init tangle ivars &gt;&gt;</vh></v>
<v t="T731"><vh>&lt;&lt; init untangle ivars &gt;&gt;</vh></v>
<v t="T732" a="C"><vh>&lt;&lt; init directive ivars &gt;&gt;</vh></v>
</v>
<v t="T1000" a="C"><vh>tangle.put_all_roots</vh>
<v t="T1001"><vh>&lt;&lt;Write a banner at the start of the output file&gt;&gt;</vh></v>
<v t="T1002"><vh>&lt;&lt; Erase the temporary file &gt;&gt;</vh></v>
</v>
<v t="T717" a="C"><vh>tangle.scanAllDirectives</vh>
<v t="T718"><vh>&lt;&lt; Test for @comment or @language &gt;&gt;</vh></v>
<v t="T719"><vh>&lt;&lt; Test for @verbose, @terse or @silent &gt;&gt;</vh></v>
<v t="T720"><vh>&lt;&lt; Test for @path, @pagewidth and @tabwidth &gt;&gt;</vh>
<v t="T721"><vh>&lt;&lt; Remove leading and trailing delims if they exist &gt;&gt;</vh></v>
</v>
<v t="T722"><vh>&lt;&lt; Test for @header or @noheader &gt;&gt;</vh></v>
<v t="T723"><vh>&lt;&lt; Set self.tangle_directory &gt;&gt;</vh></v>
</v>
</v>
<v><vh>Tree... (done)</vh>
<v t="T902" a="C"><vh>tree.drawIcon</vh></v>
<v t="T1003" a="C"><vh>tree.getIconImage</vh></v>
</v>
</v>
</v>
<v><vh> Menus</vh>
<v t="T1004"><vh>(Problem bindings)</vh>
<v t="T992" a="C"><vh>frame.OnOpen</vh>
<v t="T993"><vh>&lt;&lt; Set closeFlag if the only open window is empty &gt;&gt;</vh></v>
</v>
<v t="T1005" a="C"><vh>OnMoveDownwn</vh></v>
<v t="T1006" a="C"><vh>OnToggleActivePane</vh></v>
</v>
<v t="T1007"><vh>(Recent Files menu</vh>
<v t="T1008" a="C"><vh>config.__init__</vh>
<v t="T1009"><vh>&lt;&lt; define constants &gt;&gt;</vh></v>
</v>
<v t="T1010" a="C"><vh>get/setRecentFiles</vh></v>
<v t="T968" a="C"><vh>app.finishCreate</vh>
<v t="T969" a="C"><vh>&lt;&lt; set loadDir &gt;&gt;</vh></v>
<v t="T970"><vh>&lt;&lt; set the default Leo icon &gt;&gt;</vh>
<v t="T971"><vh>&lt;&lt; set v834 if version is 8.3.4 or greater &gt;&gt;</vh></v>
</v>
</v>
<v t="T1011" a="C"><vh>&lt;&lt; create the recent files submenu &gt;&gt;</vh></v>
<v t="T994" a="C"><vh>frame.OpenWithFileName</vh>
<v t="T995" a="C"><vh>&lt;&lt; make fileName the most recent file of frame &gt;&gt;</vh></v>
</v>
<v t="T1012" a="C"><vh>Recent Files submenu</vh>
<v t="T1013"><vh>OnOpenRecentFile1...OnOpenFileN</vh></v>
<v t="T1014"><vh>OnOpenRecentFile</vh></v>
</v>
</v>
<v t="T1015" a="C"><vh>createAccelerators</vh>
<v t="T1016"><vh>&lt;&lt; control key bindings &gt;&gt;</vh></v>
<v t="T1017"><vh>&lt;&lt; canvas control bindings &gt;&gt;</vh></v>
<v t="T1018"><vh>&lt;&lt; alt key bindings &gt;&gt;</vh></v>
</v>
<v t="T1019" a="C"><vh>createMenuBar</vh>
<v t="T1020"><vh>&lt;&lt; create the file menu &gt;&gt;</vh>
<v t="T1021"><vh>&lt;&lt; create the top-level file entries &gt;&gt;</vh></v>
<v t="T1011" a="C"><vh>&lt;&lt; create the recent files submenu &gt;&gt;</vh></v>
<v t="T1022"><vh>&lt;&lt; create the read/write submenu &gt;&gt;</vh></v>
<v t="T1023"><vh>&lt;&lt; create the tangle submenu &gt;&gt;</vh></v>
<v t="T1024"><vh>&lt;&lt; create the untangle submenu &gt;&gt;</vh></v>
<v t="T1025"><vh>&lt;&lt; create the import submenu &gt;&gt;</vh></v>
</v>
<v t="T1026"><vh>&lt;&lt; create the edit menu &gt;&gt;</vh>
<v t="T1027"><vh>&lt;&lt; create the edit body submenu &gt;&gt;</vh></v>
<v t="T1028"><vh>&lt;&lt; create the find submenu &gt;&gt;</vh></v>
</v>
<v t="T1029"><vh>&lt;&lt; create the outline menu &gt;&gt;</vh>
<v t="T1030"><vh>&lt;&lt; create expand/contract submenu &gt;&gt;</vh></v>
<v t="T1031"><vh>&lt;&lt; create move/select submenu &gt;&gt;</vh></v>
<v t="T1032"><vh>&lt;&lt; create mark/goto submenu &gt;&gt;</vh></v>
</v>
<v t="T1033"><vh>&lt;&lt; create the window menu &gt;&gt;</vh></v>
<v t="T1034"><vh>&lt;&lt; create the help menu &gt;&gt;</vh></v>
</v>
<v t="T1035" a="C"><vh>Enabling Menu Items (Commands)</vh>
<v t="T1036"><vh>canContractAllHeadlines</vh></v>
<v t="T1037"><vh>canContractAllSubheads</vh></v>
<v t="T1038"><vh>canContractParent</vh></v>
<v t="T1039"><vh>canContractSubheads</vh></v>
<v t="T1040"><vh>canCutOutline &amp; canDeleteHeadline</vh></v>
<v t="T1041"><vh>canDemote</vh></v>
<v t="T1042"><vh>canExpandAllHeadlines</vh></v>
<v t="T1043"><vh>canExpandAllSubheads</vh></v>
<v t="T1044"><vh>canExpandSubheads</vh></v>
<v t="T562" a="C"><vh>canExtract, canExtractSection &amp; canExtractSectionNames</vh></v>
<v t="T1045"><vh>canGoToNextDirtyHeadline</vh></v>
<v t="T1046"><vh>canGoToNextMarkedHeadline</vh></v>
<v t="T1047"><vh>canMarkChangedHeadline</vh></v>
<v t="T1048"><vh>canMarkChangedRoots</vh></v>
<v t="T1049"><vh>canMoveOutlineDown</vh></v>
<v t="T1050"><vh>canMoveOutlineLeft</vh></v>
<v t="T1051"><vh>canMoveOutlineRight</vh></v>
<v t="T1052"><vh>canMoveOutlineUp</vh></v>
<v t="T513" a="C"><vh>canPasteOutline</vh></v>
<v t="T1053"><vh>canPromote</vh></v>
<v t="T532" a="C"><vh>canRevert</vh></v>
<v t="T628" a="C"><vh>canSelectThreadBack</vh></v>
<v t="T629" a="C"><vh>canSelectThreadNext</vh></v>
<v t="T630" a="C"><vh>canSelectVisBack</vh></v>
<v t="T631" a="C"><vh>canSelectVisNext</vh></v>
<v t="T1054"><vh>canShiftBodyLeft</vh></v>
<v t="T1055"><vh>canShiftBodyRight</vh></v>
<v t="T1056"><vh>canSortChildren, canSortSiblings</vh></v>
<v t="T1057"><vh>canUndo &amp; canRedo</vh></v>
<v t="T1058"><vh>canUnmarkAll</vh></v>
</v>
<v t="T1059" a="C"><vh>frame.__del__</vh></v>
<v t="T507" a="C"><vh>frame.__init__</vh>
<v t="T508"><vh>&lt;&lt; set the LeoFrame ivars &gt;&gt;</vh></v>
<v t="T509"><vh>&lt;&lt; create the first tree node &gt;&gt;</vh></v>
</v>
<v t="T1060" a="C"><vh>Menu Command Handlers</vh>
<v t="T1061"><vh>File Menu</vh>
<v t="T1062"><vh>top level</vh>
<v t="T1063"><vh>OnNew</vh></v>
<v t="T992" a="C"><vh>frame.OnOpen</vh>
<v t="T993"><vh>&lt;&lt; Set closeFlag if the only open window is empty &gt;&gt;</vh></v>
</v>
<v t="T994" a="C"><vh>frame.OpenWithFileName</vh>
<v t="T995" a="C"><vh>&lt;&lt; make fileName the most recent file of frame &gt;&gt;</vh></v>
</v>
<v t="T1064"><vh>OnClose</vh></v>
<v t="T697" a="C"><vh>OnSave</vh></v>
<v t="T696" a="C"><vh>OnSaveAs</vh></v>
<v t="T695" a="C"><vh>OnSaveTo</vh></v>
<v t="T533" a="C"><vh>OnRevert</vh></v>
<v t="T683" a="C"><vh>frame.OnQuit</vh></v>
</v>
<v t="T1012" a="C"><vh>Recent Files submenu</vh>
<v t="T1013"><vh>OnOpenRecentFile1...OnOpenFileN</vh></v>
<v t="T1014"><vh>OnOpenRecentFile</vh></v>
</v>
<v t="T1065"><vh>Read/Write submenu</vh>
<v t="T991" a="C"><vh>fileCommands.OnReadOutlineOnly</vh></v>
<v t="T1066"><vh>OnReadAtFileNodes</vh></v>
<v t="T1067"><vh>OnWriteOutlineOnly</vh></v>
<v t="T1068"><vh>OnWriteAtFileNodes</vh></v>
</v>
<v t="T1069"><vh>Tangle submenu</vh>
<v t="T1070"><vh>OnTangleAll</vh></v>
<v t="T1071"><vh>OnTangleMarked</vh></v>
<v t="T1072"><vh>OnTangle</vh></v>
</v>
<v t="T1073"><vh>Untangle submenu</vh>
<v t="T1074"><vh>OnUntangleAll</vh></v>
<v t="T1075"><vh>OnUntangleMarked</vh></v>
<v t="T1076"><vh>OnUntangle</vh></v>
</v>
<v t="T1077"><vh>Import&amp;Export submenu</vh>
<v t="T1078"><vh>OnFlattenOutline</vh></v>
<v t="T1079"><vh>OnImportAtFile</vh></v>
<v t="T1080"><vh>OnImportAtRoot</vh></v>
<v t="T1081"><vh>OnImportCWEBFiles</vh></v>
<v t="T1082"><vh>OnImportFlattenedOutline</vh></v>
<v t="T1083"><vh>OnImportNowebFiles</vh></v>
<v t="T1084"><vh>OnOutlineToCWEB</vh></v>
<v t="T1085"><vh>OnOutlineToNoweb</vh></v>
<v t="T1086"><vh>OnRemoveSentinels</vh></v>
</v>
</v>
<v t="T1087"><vh>Edit Menu (change to handle log pane too)</vh>
<v t="T1088"><vh>Edit top level</vh>
<v t="T1089"><vh>OnUndo</vh></v>
<v t="T1090"><vh>OnRedo</vh></v>
<v t="T512" a="C"><vh>frame.OnCut, OnCutFrom Menu</vh></v>
<v t="T511" a="C"><vh>frame.OnCopy, OnCopyFromMenu</vh></v>
<v t="T510" a="C"><vh>frame.OnPaste, OnPasteNode, OnPasteFromMenu</vh></v>
<v t="T534" a="C"><vh>OnDelete</vh></v>
<v t="T506" a="C"><vh>OnSelectAll</vh></v>
<v t="T1091"><vh>OnEditHeadline</vh></v>
<v t="T1092"><vh>OnFontPanel (set font)</vh></v>
<v t="T1093"><vh>OnSyntaxColoring (rewrite)</vh></v>
<v t="T698" a="C"><vh>OnViewAllCharacters</vh></v>
<v t="T648" a="C"><vh>OnPreferences</vh></v>
</v>
<v t="T1094"><vh>Edit Body submenu</vh>
<v t="T1095"><vh>OnConvertBlanks &amp; OnConvertAllBlanks</vh></v>
<v t="T1096"><vh>OnConvertTabs &amp; OnConvertAllTabs</vh></v>
<v t="T1097"><vh>OnDedent</vh></v>
<v t="T1098"><vh>OnExtract</vh></v>
<v t="T1099"><vh>OnExtractNames</vh></v>
<v t="T1100"><vh>OnExtractSection</vh></v>
<v t="T1101"><vh>OnIndent</vh></v>
</v>
<v t="T1102"><vh>Find submenu (frame methods)</vh>
<v t="T1103"><vh>OnFindPanel</vh></v>
<v t="T1104"><vh>OnFindNext</vh></v>
<v t="T1105"><vh>OnFindPrevious</vh></v>
<v t="T1106"><vh>OnReplace</vh></v>
<v t="T1107"><vh>OnReplaceThenFind</vh></v>
</v>
</v>
<v t="T1108"><vh>Outline Menu</vh>
<v t="T1109"><vh>top level</vh>
<v t="T1110"><vh>OnCutNode</vh></v>
<v t="T1111"><vh>OnCopyNode</vh></v>
<v t="T1112"><vh>OnPasteNodee</vh></v>
<v t="T1113"><vh>OnDeleteNode</vh></v>
<v t="T1114"><vh>OnInsertNode</vh></v>
<v t="T1115"><vh>OnCloneNode</vh></v>
<v t="T1116"><vh>OnSortChildren, OnSortSiblings</vh></v>
</v>
<v t="T1117"><vh>Expand/Contract</vh>
<v t="T1118"><vh>OnContractParent</vh></v>
<v t="T1119"><vh>OnExpandAll</vh></v>
<v t="T1120"><vh>OnExpandAllChildren</vh></v>
<v t="T1121"><vh>OnExpandChildren</vh></v>
<v t="T1122"><vh>OnContractAll</vh></v>
<v t="T1123"><vh>OnContractAllChildren</vh></v>
<v t="T1124"><vh>OnContractChildren</vh></v>
<v t="T1125"><vh>OnExpandNextLevel</vh></v>
<v t="T1126"><vh>OnExpandToLevel1</vh></v>
<v t="T1127"><vh>OnExpandToLevel2</vh></v>
<v t="T1128"><vh>OnExpandToLevel3</vh></v>
<v t="T1129"><vh>OnExpandToLevel4</vh></v>
<v t="T1130"><vh>OnExpandToLevel5</vh></v>
<v t="T1131"><vh>OnExpandToLevel6</vh></v>
<v t="T1132"><vh>OnExpandToLevel7</vh></v>
<v t="T1133"><vh>OnExpandToLevel8</vh></v>
<v t="T1134"><vh>OnExpandToLevel9</vh></v>
</v>
<v t="T1135"><vh>Move/Select</vh>
<v t="T1005" a="C"><vh>OnMoveDownwn</vh></v>
<v t="T1136"><vh>OnMoveLeft</vh></v>
<v t="T1137"><vh>OnMoveRight</vh></v>
<v t="T1138"><vh>OnMoveUp</vh></v>
<v t="T1139"><vh>OnPromote</vh></v>
<v t="T1140"><vh>OnDemote</vh></v>
<v t="T1141"><vh>OnGoPrevVisible</vh></v>
<v t="T1142"><vh>OnGoNextVisible</vh></v>
<v t="T1143"><vh>OnGoBack</vh></v>
<v t="T1144"><vh>OnGoNext</vh></v>
</v>
<v t="T1145"><vh>Mark/Goto</vh>
<v t="T1146"><vh>OnMark</vh></v>
<v t="T1147"><vh>OnMarkSubheads</vh></v>
<v t="T1148"><vh>OnMarkChangedItems</vh></v>
<v t="T1149"><vh>OnMarkChangedRoots</vh></v>
<v t="T1150"><vh>OnUnmarkAll</vh></v>
<v t="T1151"><vh>OnGoToNextMarked</vh></v>
<v t="T1152"><vh>OnGoToNextChanged</vh></v>
</v>
</v>
<v t="T1153"><vh>Window Menu</vh>
<v t="T1154"><vh>OnEqualSizedPanes</vh></v>
<v t="T1006" a="C"><vh>OnToggleActivePane</vh></v>
<v t="T815" a="C"><vh>OnToggleSplitDirection</vh></v>
<v t="T487" a="C"><vh>OnCascade</vh></v>
<v t="T1155"><vh>OnMinimizeAll</vh></v>
<v t="T675" a="C"><vh>OnOpenPythonWindow   </vh></v>
</v>
<v t="T1156"><vh>Help Menu</vh>
<v t="T1157" a="C"><vh>OnAbout (version number)</vh></v>
<v t="T1158"><vh>OnLeoDocumentation</vh></v>
</v>
</v>
<v t="T1159" a="C"><vh>Menu enablers (Frame)</vh>
<v t="T1160"><vh>OnMenuClick (enables and disables all menu items)</vh></v>
<v t="T1161"><vh>hasSelection</vh></v>
<v t="T1162"><vh>updateFileMenu</vh></v>
<v t="T1163"><vh>updateEditMenu</vh></v>
<v t="T1164"><vh>updateOutlineMenu</vh></v>
</v>
</v>
<v><vh>(double @root bug)</vh>
<v t="T1165"><vh>Assert fails</vh></v>
<v t="T1166"><vh>double at-root test (assert fails)</vh></v>
</v>
<v t="T1167"><vh>(javadoc bug)</vh>
<v t="T1168"><vh>@file c:\prog\test\javadoc_test.java</vh></v>
<v t="T1169"><vh>javadoc_test2.java</vh>
<v t="T1170"><vh>&lt;&lt; stuff &gt;&gt;</vh></v>
</v>
</v>
<v t="T1171"><vh>(leoConfig.txt prefs)</vh>
<v t="T995" a="C"><vh>&lt;&lt; make fileName the most recent file of frame &gt;&gt;</vh></v>
<v t="T1172" a="C"><vh>getFindPanelSettings</vh>
<v t="T1173"><vh>&lt;&lt; Set defaults of all flags &gt;&gt;</vh></v>
</v>
<v t="T645" a="C"><vh>getPrefs</vh>
<v t="T646"><vh>&lt;&lt; check for syntax coloring prefs &gt;&gt;</vh></v>
</v>
<v t="T1174" a="C"><vh>putFindSettings</vh></v>
<v t="T1175" a="C"><vh>putPrefs</vh>
<v t="T1176"><vh>&lt;&lt; put prefs that may exist in leoConfig.txt &gt;&gt;</vh>
<v t="T1177"><vh>&lt;&lt; put language prefs &gt;&gt;</vh></v>
<v t="T1178"><vh>&lt;&lt; put default directory &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="T1179"><vh>(memory management)</vh>
<v t="T676" a="C"><vh>tree.destroy</vh></v>
<v t="T677" a="C"><vh>v.destroy</vh></v>
<v t="T557" a="C"><vh>v.__init__</vh>
<v t="T558"><vh>&lt;&lt; initialize vnode data members &gt;&gt;</vh></v>
</v>
<v t="T976" a="C"><vh>app.__init__</vh></v>
</v>
<v t="T1180"><vh>(Import problems)</vh>
<v t="T1181" a="C"><vh>Python scanners</vh>
<v t="T1182"><vh>scanPythonClass</vh>
<v t="T1183"><vh>&lt;&lt; set classname and headline, or return i &gt;&gt;</vh></v>
<v t="T1184"><vh>&lt;&lt; create class_vnode  &gt;&gt;</vh></v>
<v t="T1185"><vh>&lt;&lt; create nodes for all defs of the class &gt;&gt;</vh>
<v t="T1186"><vh>&lt;&lt; create parent_vnode &gt;&gt;</vh></v>
</v>
</v>
<v t="T1187"><vh>scanPythonDef</vh>
<v t="T1188"><vh>&lt;&lt; set headline or return i &gt;&gt;</vh></v>
<v t="T1189"><vh>&lt;&lt; skip the Python def &gt;&gt;</vh></v>
<v t="T1190"><vh>&lt;&lt; Create def node &gt;&gt;</vh></v>
</v>
<v t="T1191"><vh>scanPythonDecls</vh>
<v t="T1192"><vh>&lt;&lt; break on def or class &gt;&gt;</vh></v>
<v t="T1193"><vh>&lt;&lt; Create a child node for declarations &gt;&gt;</vh></v>
</v>
<v t="T1194"><vh>scanPythonText</vh>
<v t="T1195"><vh>&lt;&lt; handle possible Python function or class &gt;&gt;</vh></v>
<v t="T1196"><vh>&lt;&lt; Append a reference to the methods of this file &gt;&gt;</vh></v>
<v t="T1197"><vh>&lt;&lt; Append any unused python text to the parent's body text &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="T1198" a="E"><vh>(REM_ hack)</vh>
<v t="T965" a="C"><vh>sentinelKind</vh></v>
<v t="T1199" a="C"><vh>scanHeader</vh></v>
<v t="T870" a="C"><vh>set_delims_from_string</vh></v>
<v t="T1200"><vh>REM test</vh>
<v t="T1201"><vh>@file c:/prog/test/remTest.txt</vh></v>
</v>
</v>
</v>
<v><vh>(Missing language crash)</vh>
<v t="T1202" a="C"><vh>is_special_bits</vh>
<v t="T1203"><vh>&lt;&lt; set bits for @ directives &gt;&gt;</vh></v>
<v t="T1204"><vh>&lt;&lt; set root bits for noweb * chunks &gt;&gt;</vh></v>
</v>
<v t="T869" a="C"><vh>set_delims_from_language</vh></v>
<v t="T637" a="C"><vh>atFile.scanAllDirectives (calls writeError on errors)</vh>
<v t="T638" a="C"><vh>&lt;&lt; Set delims to default values &gt;&gt;</vh></v>
<v t="T639"><vh>&lt;&lt; Set path from @file node &gt;&gt;</vh></v>
<v t="T640"><vh>&lt;&lt; Test for @comment or @language &gt;&gt;</vh></v>
<v t="T641"><vh>&lt;&lt; Test for @path &gt;&gt;</vh></v>
<v t="T642" a="C"><vh>&lt;&lt; Test for @pagewidth and @tabwidth &gt;&gt;</vh></v>
<v t="T643"><vh>&lt;&lt; Set current directory &gt;&gt;</vh></v>
<v t="T644"><vh>&lt;&lt; Set comment Strings from delims &gt;&gt;</vh></v>
</v>
</v>
<v t="T1205"><vh>Code</vh>
<v t="T1157" a="C"><vh> OnAbout (version number)</vh></v>
<v t="T1206"><vh> Overview of code</vh></v>
<v t="T1207"><vh> Scripts &amp; Batch Files (Change version in setup.py)</vh>
<v t="T1208"><vh> Batch Files &amp; other @root trees</vh>
<v t="T1209"><vh>go.bat</vh></v>
<v t="T1210"><vh>help.bat</vh></v>
<v t="T1211"><vh>sdist.bat</vh></v>
<v t="T1212"><vh>bdist.bat</vh></v>
<v t="T1213"><vh>manifest.in</vh></v>
</v>
<v t="T1214"><vh>@file c2py.py</vh>
<v><vh>Documentation</vh>
<v t="T1215"><vh>&lt;&lt; what c2py does &gt;&gt;</vh></v>
<v t="T1216"><vh>&lt;&lt; theory of operation &gt;&gt;</vh></v>
</v>
<v t="T1217"><vh>&lt;&lt; specifying user types &gt;&gt;</vh></v>
<v t="T1218"><vh>&lt;&lt; define testData &gt;&gt;</vh></v>
<v t="T1219"><vh>speedTest</vh></v>
<v><vh>leo1to2</vh>
<v t="T1220"><vh>leo1to2</vh></v>
<v t="T1221"><vh>convertLeo1to2</vh></v>
<v t="T1222"><vh>convertStringLeo1to2</vh></v>
<v t="T1223"><vh>convertCodeList1to2</vh></v>
</v>
<v t="T1224"><vh>c2py entry points</vh>
<v t="T1225"><vh>convertCurrentTree</vh></v>
<v t="T1226"><vh>convertLeoTree</vh></v>
<v t="T1227"><vh>convertCFileToPython</vh></v>
</v>
<v><vh>c2py Top Level</vh>
<v t="T1228"><vh>convertCStringToPython</vh></v>
<v t="T1229"><vh>convertCodeList</vh></v>
<v t="T1230"><vh>convertDocList</vh></v>
<v t="T1231"><vh>skipDocPart</vh></v>
<v t="T1232"><vh>skipCodePart</vh></v>
</v>
<v><vh>removeSentinels</vh></v>
<v><vh>Scanning &amp; Replacing</vh>
<v t="T1233"><vh>convertLeadingBlanks</vh></v>
<v t="T1234"><vh>findInList</vh></v>
<v t="T1235"><vh>findInCode</vh></v>
<v t="T1236"><vh>mungeAllFunctions</vh>
<v t="T1237"><vh>handlePossibleFunctionHeader</vh></v>
<v t="T1238"><vh>massageFunctionArgs</vh></v>
<v t="T1239"><vh>massageFunctionHead (sets gClassName)</vh></v>
<v t="T1240"><vh>massageFunctionBody</vh>
<v t="T1241"><vh>massageIvars</vh></v>
<v t="T1242"><vh>removeCasts</vh></v>
<v t="T1243"><vh>removeTypeNames</vh></v>
</v>
</v>
<v t="T1244"><vh>handleAllKeywords</vh>
<v t="T1245"><vh>handleKeyword</vh></v>
</v>
<v t="T1246"><vh>isWs and isWOrNl</vh></v>
<v t="T1247"><vh>isSectionDef</vh></v>
<v t="T1248"><vh>isStringOrComment</vh></v>
<v t="T1249"><vh>match</vh></v>
<v t="T1250"><vh>matchWord</vh></v>
<v t="T1251"><vh>prevNonWsChar and prevNonWsOrNlChar</vh></v>
<v t="T1252"><vh>removeAllCComments</vh></v>
<v t="T1253"><vh>removeAllCSentinels</vh></v>
<v t="T1254"><vh>removeAllPythonComments</vh></v>
<v t="T1255"><vh>removeAllPythonSentinels</vh></v>
<v t="T1256"><vh>removeAtRoot</vh></v>
<v t="T1257"><vh>removeBlankLines</vh></v>
<v t="T1258"><vh>removeExcessWs</vh>
<v t="T1259"><vh>removeExessWsFromLine</vh></v>
</v>
<v t="T1260"><vh>removeLeadingAtCode</vh></v>
<v t="T1261"><vh>removeMatchingBrackets</vh></v>
<v t="T1262"><vh>removeSemicolonsAtEndOfLines</vh></v>
<v t="T1263"><vh>removeTrailingWs</vh></v>
<v t="T1264"><vh>replace</vh></v>
<v t="T1265"><vh>replaceComments</vh></v>
<v t="T1266"><vh>replaceSectionDefs</vh></v>
<v t="T1267"><vh>safeReplace</vh></v>
<v t="T1268"><vh>skipCBlockComment</vh></v>
<v t="T1269"><vh>skipPastLine</vh></v>
<v t="T1270"><vh>skipPastWord</vh></v>
<v t="T1271"><vh>skipString</vh></v>
<v t="T1272"><vh>skipStringOrComment</vh></v>
<v t="T1273"><vh>skipToMatchingBracket</vh></v>
<v t="T1274"><vh>skipWs and skipWsAndNl</vh></v>
<v t="T1275"><vh>stringToList</vh></v>
<v t="T1276"><vh>listToString</vh></v>
</v>
</v>
<v t="T1277"><vh>@file leoCompare.py</vh>
<v t="T1278"><vh>choose</vh></v>
<v t="T1279"><vh>cmp</vh></v>
<v t="T1280"><vh>compare</vh>
<v t="T1281"><vh>&lt;&lt; ignore blank lines &gt;&gt;</vh></v>
</v>
<v t="T1282"><vh>compare_files</vh></v>
<v t="T1283"><vh>compare_lines</vh></v>
<v t="T1284"><vh>compareDirs</vh></v>
<v t="T1285"><vh>compare_directories</vh></v>
<v t="T1286"><vh>crlf &amp; count_crlf</vh></v>
<v t="T1287"><vh>diff (does not exist!)</vh></v>
<v t="T1288"><vh>doOpen</vh></v>
<v t="T1289"><vh>dump</vh></v>
<v t="T1290"><vh>dumpEnd</vh></v>
<v t="T1291"><vh>go()</vh></v>
<v t="T1292"><vh>sequence (hangs)</vh></v>
</v>
<v t="T1293"><vh>@file leoFindScript.py</vh>
<v t="T1294"><vh>changeAll</vh></v>
<v t="T1295"><vh>changeNext</vh></v>
<v t="T1296"><vh>changePrev</vh></v>
<v t="T1297"><vh>findAll</vh></v>
<v t="T1298"><vh>findNext</vh></v>
<v t="T1299"><vh>findPrev</vh></v>
<v t="T1300"><vh>reChangeAll</vh></v>
<v t="T1301"><vh>reChangeNext</vh></v>
<v t="T1302"><vh>reChangePrev</vh></v>
<v t="T1303"><vh>reFindAll</vh></v>
<v t="T1304"><vh>reFindNext</vh></v>
<v t="T1305"><vh>reFindPrev</vh></v>
<v t="T1306"><vh>lineAtPos</vh></v>
<v t="T1307"><vh>printFindList</vh></v>
</v>
<v t="T1308"><vh>@file openLeo.py</vh></v>
<v t="T1309"><vh>@file setup.py</vh></v>
<v t="T1310"><vh>@file tangle_done.py</vh></v>
<v t="T1311"><vh>@file untangle_done.py</vh></v>
</v>
<v t="T1312"><vh>@file __init__.py</vh></v>
<v t="T1313"><vh>@file leo.py</vh>
<v t="T1314"><vh>&lt;&lt; Import pychecker &gt;&gt;</vh></v>
<v t="T1315"><vh>Functions for scripts</vh></v>
<v t="T1316"><vh>go</vh></v>
<v t="T1317"><vh>init_sherlock</vh></v>
<v t="T1318"><vh>open</vh>
<v t="T975" a="C"><vh>&lt;&lt; set the icon image &gt;&gt;</vh></v>
</v>
<v t="T674" a="C"><vh>reload_all</vh></v>
<v t="T974" a="C"><vh>run</vh>
<v t="T975" a="C"><vh>&lt;&lt; set the icon image &gt;&gt;</vh></v>
</v>
</v>
<v t="T1319"><vh>@file leoApp.py</vh>
<v t="T976" a="C"><vh>app.__init__</vh></v>
<v t="T968" a="C"><vh>app.finishCreate</vh>
<v t="T969" a="C"><vh>&lt;&lt; set loadDir &gt;&gt;</vh></v>
<v t="T970"><vh>&lt;&lt; set the default Leo icon &gt;&gt;</vh>
<v t="T971"><vh>&lt;&lt; set v834 if version is 8.3.4 or greater &gt;&gt;</vh></v>
</v>
</v>
<v t="T1320"><vh>destroyAllGlobalWindows</vh></v>
<v t="T684" a="C"><vh>app.quit</vh></v>
<v t="T1321"><vh>app.testDialogs</vh></v>
</v>
<v t="T1322"><vh>@file leoColor.py</vh>
<v t="T1323"><vh>&lt;&lt; define colorizer constants &gt;&gt;</vh></v>
<v t="T867" a="C"><vh>&lt;&lt; define colorizer keywords &gt;&gt;</vh></v>
<v t="T1324"><vh>&lt;&lt; define colorizer functions &gt;&gt;</vh></v>
<v t="T914" a="C"><vh>color.__init__</vh></v>
<v><vh>color.callbacks...</vh>
<v t="T1325"><vh>OnHyperLinkControlClick</vh></v>
<v t="T1326"><vh>OnHyperLinkEnter</vh></v>
<v t="T1327"><vh>OnHyperLinkLeave</vh></v>
</v>
<v t="T872" a="C"><vh>colorize</vh></v>
<v t="T873" a="C"><vh>colorizeAnyLanguage</vh>
<v t="T874"><vh>&lt;&lt; configure tags &gt;&gt;</vh></v>
<v t="T875"><vh>&lt;&lt; configure language-specific settings &gt;&gt;</vh></v>
<v t="T876"><vh>Multiline State Handlers</vh>
<v t="T877"><vh>&lt;&lt; continue doc part &gt;&gt;</vh>
<v t="T878"><vh>&lt;&lt; handle cweb doc part &gt;&gt;</vh></v>
<v t="T879"><vh>&lt;&lt; handle noweb doc part &gt;&gt;</vh></v>
</v>
<v t="T880"><vh>&lt;&lt; continue python triple string &gt;&gt;</vh></v>
<v t="T881"><vh>&lt;&lt; continue block comment &gt;&gt;</vh></v>
<v t="T882"><vh>&lt;&lt; continue nocolor state &gt;&gt;</vh></v>
</v>
<v t="T883"><vh>&lt;&lt; handle string &gt;&gt;</vh></v>
<v t="T884"><vh>&lt;&lt; start block comment &gt;&gt;</vh></v>
<v t="T885"><vh>&lt;&lt; handle single-line comment &gt;&gt;</vh></v>
<v t="T886"><vh>&lt;&lt; handle C preprocessor line &gt;&gt;</vh></v>
<v t="T887"><vh>&lt;&lt; handle possible section ref or def &gt;&gt;</vh>
<v t="T888"><vh>&lt;&lt; set the hyperlink &gt;&gt;</vh></v>
</v>
<v t="T889"><vh>&lt;&lt; handle possible @keyword &gt;&gt;</vh>
<v t="T890"><vh>&lt;&lt; Handle all cweb control codes &gt;&gt;</vh></v>
<v t="T891"><vh>&lt;&lt; Handle non-cweb @keywords &gt;&gt;</vh></v>
</v>
<v t="T892"><vh>&lt;&lt; handle possible  keyword &gt;&gt;</vh></v>
<v t="T893"><vh>&lt;&lt; handle blank &gt;&gt;</vh></v>
<v t="T894"><vh>&lt;&lt; handle tab &gt;&gt;</vh></v>
<v t="T895"><vh>&lt;&lt; handle normal character &gt;&gt;</vh></v>
</v>
<v t="T672" a="C"><vh>scanColorDirectives</vh>
<v t="T673"><vh>&lt;&lt; Test for @comment or @language &gt;&gt;</vh></v>
</v>
<v t="T1328"><vh>color.schedule</vh></v>
<v t="T1329"><vh>getCwebWord</vh></v>
<v t="T1330"><vh>updateSyntaxColorer</vh></v>
<v t="T1331"><vh>useSyntaxColoring</vh></v>
<v t="T1332"><vh>Utils</vh>
<v t="T1333"><vh>skip_id</vh></v>
<v t="T1334"><vh>skip_python_string</vh></v>
<v t="T1335"><vh>skip_string</vh></v>
</v>
</v>
<v t="T1336"><vh>@file leoCommands.py</vh>
<v t="T812" a="C"><vh>c.__init__</vh>
<v t="T813"><vh>&lt;&lt; initialize ivars &gt;&gt;</vh></v>
</v>
<v t="T1337"><vh>c.__del__</vh></v>
<v t="T1338"><vh>c.__repr__</vh></v>
<v t="T678" a="C"><vh>c.destroy</vh></v>
<v t="T1339"><vh>c.setIvarsFromPrefs</vh></v>
<v t="T1340"><vh>c.setIvarsFromFind</vh></v>
<v t="T514" a="C"><vh>Cut &amp; Paste Outlines</vh>
<v t="T515"><vh>cutOutline</vh></v>
<v t="T516"><vh>copyOutline</vh></v>
<v t="T517"><vh>pasteOutline</vh></v>
</v>
<v><vh>Drawing Utilities</vh>
<v t="T1341"><vh>beginUpdate</vh></v>
<v t="T1342"><vh>bringToFront</vh></v>
<v t="T1343"><vh>endUpdate</vh></v>
<v t="T1344"><vh>recolor</vh></v>
<v t="T1345"><vh>redraw &amp; repaint</vh></v>
</v>
<v t="T563" a="C"><vh>Edit Body Text</vh>
<v t="T498" a="C"><vh>convertAllBlanks</vh></v>
<v t="T499" a="C"><vh>convertAllTabs</vh></v>
<v t="T501" a="C"><vh>convertBlanks</vh></v>
<v t="T500" a="C"><vh>convertTabs</vh></v>
<v t="T564"><vh>createLastChildNode</vh></v>
<v t="T565"><vh>dedentBody</vh></v>
<v t="T566"><vh>extract (not undoable)</vh>
<v t="T567"><vh>&lt;&lt; Set headline for extract &gt;&gt;</vh></v>
</v>
<v t="T568"><vh>extractSection (not undoable)</vh>
<v t="T569"><vh>&lt;&lt; Set headline for extractSection &gt;&gt;</vh></v>
</v>
<v t="T570"><vh>extractSectionNames (not undoable)</vh>
<v t="T571"><vh>&lt;&lt; Find the next section name &gt;&gt;</vh></v>
</v>
<v t="T572"><vh>getBodyLines</vh></v>
<v t="T573"><vh>getBodySelection</vh></v>
<v t="T574"><vh>indentBody</vh></v>
<v t="T489" a="C"><vh>updateBodyPane</vh></v>
</v>
<v t="T1035" a="C"><vh>Enabling Menu Items (Commands)</vh>
<v t="T1036"><vh>canContractAllHeadlines</vh></v>
<v t="T1037"><vh>canContractAllSubheads</vh></v>
<v t="T1038"><vh>canContractParent</vh></v>
<v t="T1039"><vh>canContractSubheads</vh></v>
<v t="T1040"><vh>canCutOutline &amp; canDeleteHeadline</vh></v>
<v t="T1041"><vh>canDemote</vh></v>
<v t="T1042"><vh>canExpandAllHeadlines</vh></v>
<v t="T1043"><vh>canExpandAllSubheads</vh></v>
<v t="T1044"><vh>canExpandSubheads</vh></v>
<v t="T562" a="C"><vh>canExtract, canExtractSection &amp; canExtractSectionNames</vh></v>
<v t="T1045"><vh>canGoToNextDirtyHeadline</vh></v>
<v t="T1046"><vh>canGoToNextMarkedHeadline</vh></v>
<v t="T1047"><vh>canMarkChangedHeadline</vh></v>
<v t="T1048"><vh>canMarkChangedRoots</vh></v>
<v t="T1049"><vh>canMoveOutlineDown</vh></v>
<v t="T1050"><vh>canMoveOutlineLeft</vh></v>
<v t="T1051"><vh>canMoveOutlineRight</vh></v>
<v t="T1052"><vh>canMoveOutlineUp</vh></v>
<v t="T513" a="C"><vh>canPasteOutline</vh></v>
<v t="T1053"><vh>canPromote</vh></v>
<v t="T532" a="C"><vh>canRevert</vh></v>
<v t="T628" a="C"><vh>canSelectThreadBack</vh></v>
<v t="T629" a="C"><vh>canSelectThreadNext</vh></v>
<v t="T630" a="C"><vh>canSelectVisBack</vh></v>
<v t="T631" a="C"><vh>canSelectVisNext</vh></v>
<v t="T1054"><vh>canShiftBodyLeft</vh></v>
<v t="T1055"><vh>canShiftBodyRight</vh></v>
<v t="T1056"><vh>canSortChildren, canSortSiblings</vh></v>
<v t="T1057"><vh>canUndo &amp; canRedo</vh></v>
<v t="T1058"><vh>canUnmarkAll</vh></v>
</v>
<v><vh>Expand &amp; Contract</vh>
<v><vh>Commands</vh>
<v t="T1346"><vh>contractAllHeadlines</vh></v>
<v t="T1347"><vh>contractAllSubheads</vh></v>
<v t="T1348"><vh>contractParent</vh></v>
<v t="T1349"><vh>contractSubheads</vh></v>
<v t="T1350"><vh>expandLevel1</vh></v>
<v t="T1351"><vh>expandLevel2</vh></v>
<v t="T1352"><vh>expandLevel3</vh></v>
<v t="T1353"><vh>expandLevel4</vh></v>
<v t="T1354"><vh>expandLevel5</vh></v>
<v t="T1355"><vh>expandLevel6</vh></v>
<v t="T1356"><vh>expandLevel7</vh></v>
<v t="T1357"><vh>expandLevel8</vh></v>
<v t="T1358"><vh>expandLevel9</vh></v>
<v t="T1359"><vh>expandNextLevel</vh></v>
<v t="T1360"><vh>expandAllHeadlines</vh></v>
<v t="T1361"><vh>expandAllSubheads</vh></v>
<v t="T1362"><vh>expandSubheads</vh></v>
</v>
<v><vh>Utilities</vh>
<v t="T1363"><vh>contractSubtree</vh></v>
<v t="T1364"><vh>contractVnode</vh></v>
<v t="T1365"><vh>expandSubtree</vh></v>
<v t="T1366"><vh>expandToLevel</vh></v>
<v t="T1367"><vh>expandVnode</vh></v>
<v t="T1368"><vh>expandTreeToLevelFromLevel</vh></v>
</v>
</v>
<v><vh>Getters &amp; Setters</vh>
<v t="T1369"><vh>c.currentVnode</vh></v>
<v t="T1370"><vh>clearAllMarked</vh></v>
<v t="T1371"><vh>clearAllVisited</vh></v>
<v t="T1372"><vh>fileName</vh></v>
<v t="T1373"><vh>isChanged</vh></v>
<v t="T1374"><vh>rootVnode</vh></v>
<v t="T1375"><vh>setChanged</vh></v>
</v>
<v><vh>Insert, Delete &amp; Clone (Commands)</vh>
<v t="T901" a="C"><vh>c.checkMoveWithParentWithWarning</vh></v>
<v t="T848" a="C"><vh>c.deleteHeadline</vh></v>
<v t="T847" a="C"><vh>c.insertHeadline</vh></v>
<v t="T1376"><vh>clone (Commands)</vh></v>
<v t="T536" a="C"><vh>c.copyTree</vh></v>
<v t="T1377"><vh>initAllCloneBits</vh></v>
<v t="T1378"><vh>initJoinedClonedBits</vh>
<v t="T1379"><vh>&lt;&lt; init clone bit for v &gt;&gt;</vh></v>
</v>
<v t="T1380"><vh>validateOutline</vh></v>
</v>
<v><vh>Mark &amp; Unmark</vh>
<v t="T1381"><vh>goToNextDirtyHeadline</vh></v>
<v t="T1382"><vh>goToNextMarkedHeadline</vh></v>
<v t="T1383"><vh>markChangedHeadlines</vh></v>
<v t="T1384"><vh>markChangedRoots</vh></v>
<v t="T1385"><vh>markAllAtFileNodesDirty</vh></v>
<v t="T1386"><vh>markAtFileNodesDirty</vh></v>
<v t="T1387"><vh>markHeadline</vh></v>
<v t="T1388"><vh>markSubheads</vh></v>
<v t="T1389"><vh>unmarkAll</vh></v>
</v>
<v t="T840" a="C"><vh>Moving, Dragging, Promote, Demote, Sort</vh>
<v t="T841" a="C"><vh>c.dragAfter</vh></v>
<v t="T842" a="C"><vh>c.dragToNthChildOf</vh></v>
<v t="T700" a="C"><vh>c.sortChildren, sortSiblings</vh>
<v t="T701"><vh>&lt;&lt; Set the undo info for sortChildren &gt;&gt;</vh></v>
<v t="T702"><vh>&lt;&lt; Set the undo info for sortSiblings &gt;&gt;</vh></v>
</v>
<v t="T843"><vh>demote</vh></v>
<v t="T650" a="C"><vh>moveOutlineDown</vh>
<v t="T651"><vh>&lt;&lt; Move v down &gt;&gt;</vh></v>
</v>
<v t="T844"><vh>moveOutlineLeft</vh></v>
<v t="T845" a="M"><vh>moveOutlineRight</vh></v>
<v t="T652" a="C"><vh>moveOutlineUp</vh>
<v t="T653"><vh>&lt;&lt; Move v up &gt;&gt;</vh></v>
</v>
<v t="T846"><vh>promote</vh></v>
</v>
<v><vh>Selecting &amp; Updating (commands)</vh>
<v t="T897" a="C"><vh>editVnode (calls tree.editLabel)</vh></v>
<v t="T1390"><vh>endEditing (calls tree.endEditLabel)</vh></v>
<v t="T632" a="C"><vh>selectThreadBack</vh></v>
<v t="T633" a="C"><vh>selectThreadNext</vh></v>
<v t="T634" a="C"><vh>selectVisBack</vh></v>
<v t="T635" a="C"><vh>selectVisNext</vh></v>
<v t="T1391"><vh>c.selectVnode (calls tree.select)</vh></v>
<v t="T1392"><vh>selectVnodeWithEditing</vh></v>
</v>
<v t="T1393"><vh>Syntax coloring interface</vh>
<v t="T1394"><vh>updateSyntaxColorer</vh></v>
</v>
</v>
<v t="T1395"><vh>@file leoConfig.py</vh>
<v t="T1008" a="C"><vh>config.__init__</vh>
<v t="T1009"><vh>&lt;&lt; define constants &gt;&gt;</vh></v>
</v>
<v t="T1396"><vh>get/setFindPref</vh></v>
<v t="T1397"><vh>get/setFont (todo)</vh></v>
<v t="T1398"><vh>get/setPref</vh></v>
<v t="T1010" a="C"><vh>get/setRecentFiles</vh></v>
<v t="T1399"><vh>get/setSyntaxColors (todo)</vh></v>
<v t="T1400"><vh>open</vh>
<v t="T1401"><vh>&lt;&lt; get config options &gt;&gt;</vh></v>
<v t="T1402"><vh>&lt;&lt; get recent files &gt;&gt;</vh></v>
<v t="T1403"><vh>&lt;&lt; get prefs &gt;&gt;</vh></v>
<v t="T1404"><vh>&lt;&lt; get find prefs &gt;&gt;</vh></v>
<v t="T1405"><vh>&lt;&lt; get font prefs &gt;&gt;</vh></v>
<v t="T1406"><vh>&lt;&lt; get syntax coloring prefs &gt;&gt;</vh></v>
</v>
<v t="T1407"><vh>setCommandsFindIvars</vh>
<v t="T1408"><vh>&lt;&lt; set find ivars &gt;&gt;</vh></v>
</v>
<v t="T1409"><vh>setCommandsIvars</vh>
<v t="T1410"><vh>&lt;&lt; set prefs ivars &gt;&gt;</vh></v>
</v>
<v t="T1411"><vh>setConfigFindIvars</vh></v>
<v t="T1412"><vh>setConfigIvars</vh></v>
<v t="T1413"><vh>update</vh>
<v t="T1414"><vh>&lt;&lt; write config section &gt;&gt;</vh></v>
<v t="T1415"><vh>&lt;&lt; write recent files section &gt;&gt;</vh></v>
<v t="T1416"><vh>&lt;&lt; write prefs section &gt;&gt;</vh></v>
<v t="T1417"><vh>&lt;&lt; write find/change section &gt;&gt;</vh></v>
<v t="T1418"><vh>&lt;&lt; write font section &gt;&gt;</vh></v>
<v t="T1419"><vh>&lt;&lt; write syntax coloring section &gt;&gt;</vh></v>
</v>
<v t="T1420"><vh>update_section</vh></v>
</v>
<v t="T1421"><vh>@file leoDialog.py</vh>
<v t="T1422"><vh>dialog.__init__</vh></v>
<v t="T1423"><vh>askOkCancel</vh></v>
<v t="T1424"><vh>askYesNo</vh></v>
<v t="T1425"><vh>askYesNoCancel</vh></v>
<v t="T1426"><vh>dialog.center</vh></v>
<v><vh>Event handlers &amp; command handlers</vh>
<v t="T1427"><vh>cancelButton, noButton, okButton, yesButton</vh></v>
<v t="T1428"><vh>OnOkCancelKey, OnYesNoKey, OnYesNoCancelKey</vh></v>
</v>
</v>
<v t="T1429"><vh>@file leoFileCommands.py</vh>
<v t="T1430"><vh>ctor leoFileCommands</vh></v>
<v><vh>Reading</vh>
<v t="T1431"><vh>createVnode</vh></v>
<v t="T1432"><vh>finishPaste (creating join lists could be a problem)</vh>
<v t="T1433"><vh>&lt;&lt; Create join lists of all pasted vnodes &gt;&gt;</vh></v>
<v t="T1434"><vh>&lt;&lt; Recompute clone bits for pasted vnodes &gt;&gt;</vh></v>
</v>
<v><vh>get routines</vh>
<v t="T1435"><vh>get &amp; match (basic)</vh></v>
<v t="T1436"><vh>getClipboardHeader</vh></v>
<v t="T1437"><vh>getCloneWindows</vh></v>
<v t="T1438"><vh>getEscapedString</vh></v>
<v t="T1172" a="C"><vh>getFindPanelSettings</vh>
<v t="T1173"><vh>&lt;&lt; Set defaults of all flags &gt;&gt;</vh></v>
</v>
<v t="T1439"><vh>getGlobals</vh></v>
<v t="T1440"><vh>getLeoFile (Leo2)</vh>
<v t="T1441"><vh>&lt;&lt; Create join lists of all vnodes &gt;&gt;</vh></v>
</v>
<v t="T1442"><vh>getLeoHeader</vh></v>
<v t="T1443"><vh>getLeoOutline (from clipboard)</vh></v>
<v t="T1444"><vh>getPosition</vh></v>
<v t="T645" a="C"><vh>getPrefs</vh>
<v t="T646"><vh>&lt;&lt; check for syntax coloring prefs &gt;&gt;</vh></v>
</v>
<v t="T1445"><vh>getSize</vh></v>
<v t="T1446"><vh>getT</vh></v>
<v t="T1447"><vh>getTnode</vh></v>
<v t="T1448"><vh>getTnodes</vh></v>
<v t="T1449"><vh>getVnode (Leo2)</vh>
<v t="T1450"><vh>&lt;&lt; Handle vnode attribute bits  &gt;&gt;</vh></v>
</v>
<v t="T1451"><vh>getVnodes</vh></v>
<v t="T1452"><vh>skipWs</vh></v>
<v t="T1453"><vh>skipWsAndNl</vh></v>
</v>
<v t="T1454"><vh>newTnode</vh></v>
<v t="T1455"><vh>readAtFileNodes</vh></v>
<v t="T988" a="C"><vh>fileCommands.readOutlineOnly</vh>
<v t="T989" a="C"><vh>&lt;&lt; Set the default directory &gt;&gt;</vh></v>
</v>
<v t="T990" a="C"><vh>fileCommands.open</vh>
<v t="T989" a="C"><vh>&lt;&lt; Set the default directory &gt;&gt;</vh></v>
</v>
<v t="T1456"><vh>xmlUnescape</vh></v>
</v>
<v><vh>Writing</vh>
<v t="T1457"><vh>assignFileIndices</vh></v>
<v t="T1458"><vh>compactFileIndices</vh></v>
<v t="T1459"><vh>shouldCompactOnSave</vh></v>
<v><vh>put routines</vh>
<v t="T1460"><vh>putClipboardHeader</vh>
<v t="T1461"><vh>&lt;&lt; count the number of tnodes &gt;&gt;</vh></v>
</v>
<v t="T1462"><vh>put (basic)</vh></v>
<v t="T1463"><vh>putEscapedString</vh></v>
<v t="T1174" a="C"><vh>putFindSettings</vh></v>
<v t="T1464"><vh>putGlobals</vh>
<v t="T1465"><vh>&lt;&lt; put the body/outline ratio &gt;&gt;</vh></v>
<v t="T1466"><vh>&lt;&lt; put the position of this frame &gt;&gt;</vh></v>
<v t="T1467"><vh>&lt;&lt; put the position of the log window &gt;&gt;</vh></v>
</v>
<v t="T1468"><vh>putHeader</vh></v>
<v t="T1469"><vh>putLeoOutline (to clipboard)</vh></v>
<v t="T1175" a="C"><vh>putPrefs</vh>
<v t="T1176"><vh>&lt;&lt; put prefs that may exist in leoConfig.txt &gt;&gt;</vh>
<v t="T1177"><vh>&lt;&lt; put language prefs &gt;&gt;</vh></v>
<v t="T1178"><vh>&lt;&lt; put default directory &gt;&gt;</vh></v>
</v>
</v>
<v t="T1470"><vh>putProlog</vh></v>
<v t="T1471"><vh>putPostlog</vh></v>
<v t="T1472"><vh>putTnodes (Leo2)</vh></v>
<v t="T1473"><vh>putTnode</vh></v>
<v t="T1474"><vh>putVnodes (Leo2)</vh></v>
<v t="T1475"><vh>putVnode (Leo2)</vh>
<v t="T1476"><vh>&lt;&lt; Put tnode index if this vnode has body text &gt;&gt;</vh></v>
<v t="T1477"><vh>&lt;&lt; Put attribute bits &gt;&gt;</vh></v>
<v t="T1478"><vh>&lt;&lt; write the head text &gt;&gt;</vh></v>
</v>
</v>
<v t="T1479"><vh>save</vh></v>
<v t="T1480"><vh>saveAs</vh></v>
<v t="T1481"><vh>saveTo</vh></v>
<v t="T1482"><vh>xmlEscape</vh></v>
<v t="T1483"><vh>writeAtFileNodes</vh></v>
<v t="T1484"><vh>writeOutlineOnly</vh></v>
<v t="T691" a="C"><vh>write_LEO_file</vh>
<v t="T692"><vh>&lt;&lt; create backup file &gt;&gt;</vh></v>
<v t="T693"><vh>&lt;&lt; delete backup file &gt;&gt;</vh></v>
<v t="T694"><vh>&lt;&lt; erase filename and rename backupName to fileName &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="T1485"><vh>@file leoFind.py</vh>
<v t="T581" a="C"><vh>&lt;&lt; Theory of operation &gt;&gt;</vh></v>
<v t="T582" a="C"><vh>find.__init__</vh>
<v t="T583"><vh>&lt;&lt; Initialize the leoFind ivars &gt;&gt;</vh></v>
<v t="T584"><vh>&lt;&lt; Create the Find and Change panes &gt;&gt;</vh></v>
<v t="T585"><vh>&lt;&lt; Create two columns of checkboxes &gt;&gt;</vh></v>
<v t="T586"><vh>&lt;&lt; Create two rows of buttons &gt;&gt;</vh></v>
</v>
<v t="T587" a="C"><vh>find.init</vh>
<v t="T588"><vh>&lt;&lt; set widgets &gt;&gt;</vh></v>
</v>
<v t="T1486"><vh>find.set_ivars</vh></v>
<v t="T589" a="C"><vh>resetWrap</vh></v>
<v t="T1487"><vh>OnCloseFindEvent</vh></v>
<v t="T590" a="C"><vh>Top Level Commands</vh>
<v t="T591"><vh>changeButton</vh></v>
<v t="T592"><vh>changeAllButton</vh></v>
<v t="T593"><vh>changeThenFindButton</vh></v>
<v t="T594"><vh>findButton</vh></v>
<v t="T595"><vh>findAllButton</vh></v>
<v t="T596"><vh>changeCommand</vh></v>
<v t="T597"><vh>changeThenFindCommandd</vh></v>
<v t="T598"><vh>findNextCommand</vh></v>
<v t="T599"><vh>fndPreviousCommand</vh></v>
<v t="T600"><vh>setup_button</vh></v>
<v t="T601"><vh>setup_command</vh></v>
</v>
<v t="T602" a="C"><vh>Utilities</vh>
<v t="T603" a="C"><vh>batchChange</vh>
<v t="T604"><vh>&lt;&lt; set the undo head params &gt;&gt;</vh></v>
<v t="T605"><vh>&lt;&lt; set the undo body typing params &gt;&gt;</vh></v>
</v>
<v t="T606"><vh>change</vh></v>
<v t="T607" a="C"><vh>changeAll</vh></v>
<v t="T608" a="C"><vh>changeSelection</vh></v>
<v t="T609"><vh>changeThenFind</vh></v>
<v t="T610"><vh>findAll</vh></v>
<v t="T611"><vh>findNext</vh></v>
<v t="T612"><vh>findNextMatch</vh></v>
<v t="T613"><vh>selectNextVnode</vh></v>
<v t="T614"><vh>search</vh>
<v t="T615"><vh>&lt;&lt; return if we are passed the wrap point &gt;&gt;</vh></v>
<v t="T616"><vh>&lt;&lt; test for whole word match &gt;&gt;</vh></v>
</v>
<v t="T617"><vh>Initializing &amp; finalizing &amp; selecting</vh>
<v t="T618"><vh>checkArgs</vh></v>
<v t="T619"><vh>initBatchCommands</vh></v>
<v t="T620"><vh>initBatchText &amp; initNextText</vh></v>
<v t="T621"><vh>initInHeadline</vh></v>
<v t="T622"><vh>initInteractiveCommands</vh></v>
<v t="T623"><vh>printLine</vh></v>
<v t="T624"><vh>restore</vh></v>
<v t="T625"><vh>save</vh></v>
<v t="T626" a="C"><vh>showSuccess</vh></v>
</v>
</v>
</v>
<v t="T1488"><vh>@file leoGlobals.py</vh>
<v t="T1489"><vh>&lt;&lt; define global constants &gt;&gt;</vh></v>
<v t="T1490"><vh>alert</vh></v>
<v t="T1491"><vh>app, setApp</vh></v>
<v t="T1492"><vh>choose</vh></v>
<v t="T1493"><vh>es, enl, ecnl</vh></v>
<v t="T1494"><vh>print_stack</vh></v>
<v t="T1495"><vh>top</vh></v>
</v>
<v t="T1496"><vh>@file leoImport.py</vh>
<v t="T1497"><vh>import.__init__</vh></v>
<v><vh>Import</vh>
<v t="T1498"><vh>createOutline</vh>
<v t="T1499"><vh>&lt;&lt; Read file into s &gt;&gt;</vh></v>
</v>
<v t="T1500"><vh>importFilesCommand</vh>
<v t="T1501"><vh>&lt;&lt; Create a parent for two files having a common prefix &gt;&gt;</vh></v>
</v>
<v><vh>importFlattenedOutline &amp; allies</vh>
<v t="T523" a="C"><vh>convertMoreString/StringsToOutlineAfter</vh>
<v t="T524"><vh>&lt;&lt; Link a new vnode v into the outline &gt;&gt;</vh></v>
<v t="T525"><vh>&lt;&lt; Set the headline string, skipping over the leader &gt;&gt;</vh></v>
<v t="T526"><vh>&lt;&lt; Count the number of following body lines &gt;&gt;</vh></v>
<v t="T527"><vh>&lt;&lt; Add the lines to the body text of v &gt;&gt;</vh></v>
</v>
<v t="T1502"><vh>importFlattenedOutline</vh>
<v t="T1503"><vh>&lt;&lt; Read the file into array &gt;&gt;</vh></v>
</v>
<v t="T1504"><vh>moreHeadlineLevel</vh></v>
<v t="T522" a="C"><vh>stringIs/stringsAreValidMoreFile</vh></v>
</v>
<v><vh>importWebCommand &amp; allies</vh>
<v t="T1505"><vh>createOutlineFromWeb</vh></v>
<v t="T1506"><vh>importWebCommand</vh></v>
<v t="T1507"><vh>findFunctionDef</vh></v>
<v t="T1508"><vh>massageWebBody</vh>
<v t="T1509"><vh>&lt;&lt; Remove most newlines from @space and @* sections &gt;&gt;</vh></v>
<v t="T1510"><vh>&lt;&lt; Replace abbreviated names with full names &gt;&gt;</vh></v>
</v>
<v t="T1511"><vh>scanBodyForHeadline</vh>
<v t="T1512"><vh>&lt;&lt; scan cweb body for headline &gt;&gt;</vh></v>
<v t="T1513"><vh>&lt;&lt; scan noweb body for headline &gt;&gt;</vh></v>
</v>
<v t="T1514"><vh>scanWebFile (handles limbo)</vh>
<v t="T1515"><vh>&lt;&lt; Create a symbol table of all section names &gt;&gt;</vh></v>
<v t="T1516"><vh>&lt;&lt; Create nodes for limbo text and the root section &gt;&gt;</vh></v>
<v t="T1517"><vh>&lt;&lt; Create a node for the next module &gt;&gt;</vh>
<v t="T1518"><vh>&lt;&lt; Handle cweb @d, @f, @c and @p directives &gt;&gt;</vh></v>
</v>
</v>
<v><vh>Symbol table</vh>
<v t="T1519"><vh>cstCanonicalize</vh></v>
<v t="T1520"><vh>cstDump</vh></v>
<v t="T1521"><vh>cstEnter</vh></v>
<v t="T1522"><vh>cstLookup</vh></v>
</v>
</v>
<v><vh>Scanners for createOutline</vh>
<v t="T1181" a="C"><vh>Python scanners</vh>
<v t="T1182"><vh>scanPythonClass</vh>
<v t="T1183"><vh>&lt;&lt; set classname and headline, or return i &gt;&gt;</vh></v>
<v t="T1184"><vh>&lt;&lt; create class_vnode  &gt;&gt;</vh></v>
<v t="T1185"><vh>&lt;&lt; create nodes for all defs of the class &gt;&gt;</vh>
<v t="T1186"><vh>&lt;&lt; create parent_vnode &gt;&gt;</vh></v>
</v>
</v>
<v t="T1187"><vh>scanPythonDef</vh>
<v t="T1188"><vh>&lt;&lt; set headline or return i &gt;&gt;</vh></v>
<v t="T1189"><vh>&lt;&lt; skip the Python def &gt;&gt;</vh></v>
<v t="T1190"><vh>&lt;&lt; Create def node &gt;&gt;</vh></v>
</v>
<v t="T1191"><vh>scanPythonDecls</vh>
<v t="T1192"><vh>&lt;&lt; break on def or class &gt;&gt;</vh></v>
<v t="T1193"><vh>&lt;&lt; Create a child node for declarations &gt;&gt;</vh></v>
</v>
<v t="T1194"><vh>scanPythonText</vh>
<v t="T1195"><vh>&lt;&lt; handle possible Python function or class &gt;&gt;</vh></v>
<v t="T1196"><vh>&lt;&lt; Append a reference to the methods of this file &gt;&gt;</vh></v>
<v t="T1197"><vh>&lt;&lt; Append any unused python text to the parent's body text &gt;&gt;</vh></v>
</v>
</v>
<v t="T1523"><vh>scanCText</vh>
<v t="T1524"><vh>&lt;&lt; define scanCText vars &gt;&gt;</vh></v>
<v t="T1525"><vh>&lt;&lt; handle # sign &gt;&gt;</vh>
<v t="T1526"><vh>&lt;&lt; create a child node for all #include statements &gt;&gt;</vh></v>
</v>
<v t="T1527"><vh>&lt;&lt; handle open curly bracket in C &gt;&gt; (scans function)</vh>
<v t="T1528"><vh>&lt;&lt; create a declaration node &gt;&gt;</vh></v>
<v t="T1529"><vh>&lt;&lt; append C function/method reference to parent node &gt;&gt;</vh></v>
</v>
<v t="T1530"><vh>&lt;&lt; skip c identifier, typedef, struct, union, namespace &gt;&gt;</vh>
<v t="T1531"><vh>&lt;&lt; test for operator keyword &gt;&gt;</vh></v>
<v t="T1532"><vh>&lt;&lt; Create children for the namespace &gt;&gt;</vh></v>
</v>
<v t="T1533" a="C"><vh>Shared by C and Java</vh>
<v t="T1534"><vh>&lt;&lt; handle possible C comments &gt;&gt;</vh></v>
<v t="T1535"><vh>&lt;&lt; handle equal sign in C or Java &gt;&gt;</vh></v>
<v t="T1536"><vh>&lt;&lt; handle open paren in C or Java &gt;&gt;</vh></v>
<v t="T1537"><vh>&lt;&lt; handle semicolon in C or Java &gt;&gt;</vh></v>
</v>
<v t="T1538" a="C"><vh>&lt;&lt; Append any unused text to the parent's body text &gt;&gt;</vh></v>
</v>
<v t="T1539"><vh>scanJavaText</vh>
<v t="T1540"><vh>&lt;&lt; define scanJavaText vars &gt;&gt;</vh></v>
<v t="T1541"><vh>&lt;&lt; handle open curly bracket in Java &gt;&gt;</vh>
<v t="T1542"><vh>&lt;&lt; create a Java declaration node &gt;&gt;</vh></v>
<v t="T1543"><vh>&lt;&lt; append Java method reference to parent node &gt;&gt;</vh></v>
<v t="T1544"><vh>&lt;&lt; recursively scan the text &gt;&gt;</vh></v>
</v>
<v t="T1545"><vh>&lt;&lt; skip and remember the Java id &gt;&gt;</vh></v>
<v t="T1533" a="C"><vh>Shared by C and Java</vh>
<v t="T1534"><vh>&lt;&lt; handle possible C comments &gt;&gt;</vh></v>
<v t="T1535"><vh>&lt;&lt; handle equal sign in C or Java &gt;&gt;</vh></v>
<v t="T1536"><vh>&lt;&lt; handle open paren in C or Java &gt;&gt;</vh></v>
<v t="T1537"><vh>&lt;&lt; handle semicolon in C or Java &gt;&gt;</vh></v>
</v>
<v t="T1538" a="C"><vh>&lt;&lt; Append any unused text to the parent's body text &gt;&gt;</vh></v>
</v>
<v t="T1546"><vh>scanPascalText</vh>
<v t="T1547"><vh>&lt;&lt; handle possible Pascal function &gt;&gt;</vh>
<v t="T1548"><vh>&lt;&lt; create a child node for leading declarations &gt;&gt;</vh></v>
<v t="T1549"><vh>&lt;&lt; create a child node for the function &gt;&gt;</vh></v>
<v t="T1550"><vh>&lt;&lt; remember the function name, or continue &gt;&gt;</vh></v>
<v t="T1551"><vh>&lt;&lt; skip the function definition, or continue &gt;&gt;</vh>
<v t="T1552"><vh>&lt;&lt; skip past the semicolon &gt;&gt;</vh></v>
</v>
<v t="T1553"><vh>&lt;&lt; append noweb method reference to the parent node &gt;&gt;</vh></v>
</v>
<v t="T1538" a="C"><vh>&lt;&lt; Append any unused text to the parent's body text &gt;&gt;</vh></v>
</v>
</v>
</v>
<v><vh>Export</vh>
<v t="T1554"><vh>convertCodePartToWeb</vh>
<v t="T1555"><vh>&lt;&lt; put v's headline ref in head_ref&gt;&gt;</vh></v>
<v t="T1556"><vh>&lt;&lt; put name following @root or @file in file_name &gt;&gt;</vh>
<v t="T1557"><vh>&lt;&lt; Set file_name &gt;&gt;</vh></v>
</v>
<v t="T1558"><vh>&lt;&lt; append ref to file_name &gt;&gt;</vh></v>
<v t="T1559"><vh>&lt;&lt; append head_ref &gt;&gt;</vh></v>
</v>
<v t="T1560"><vh>convertDocPartToWeb (handle @ %def)</vh></v>
<v t="T503" a="C"><vh>convertVnodeToWeb</vh>
<v t="T504"><vh>&lt;&lt; Supply a missing doc part &gt;&gt;</vh></v>
</v>
<v t="T505" a="C"><vh>copyPart</vh></v>
<v t="T998" a="C"><vh>flattenOutline</vh></v>
<v t="T999" a="C"><vh>outlineToWeb</vh></v>
<v t="T1561"><vh>removeSentinelsCommand</vh>
<v t="T1562"><vh>&lt;&lt; Read file into s &gt;&gt;</vh></v>
<v t="T1563"><vh>&lt;&lt; set delims from the header line &gt;&gt;</vh></v>
<v t="T1564"><vh>&lt;&lt; Write s into newFileName &gt;&gt;</vh></v>
</v>
<v t="T1565"><vh>removeSentinelLines</vh>
<v t="T1566"><vh>&lt;&lt; handle possible sentinel &gt;&gt;</vh></v>
</v>
</v>
<v><vh>Utilities</vh>
<v t="T1567"><vh>createHeadline</vh></v>
<v t="T1568"><vh>error</vh></v>
<v t="T1569"><vh>getPythonIndent</vh></v>
<v t="T1570"><vh>isDocStart and isModuleStart</vh></v>
<v t="T1571"><vh>massageBody</vh></v>
<v t="T1572"><vh>massageComment</vh></v>
<v t="T1573"><vh>skipLeadingComments</vh>
<v t="T1574"><vh>&lt;&lt; scan for C-style comments &gt;&gt;</vh></v>
<v t="T1575"><vh>&lt;&lt; scan for Pascal comments &gt;&gt;</vh></v>
<v t="T1576"><vh>&lt;&lt; scan for Python comments &gt;&gt;</vh></v>
</v>
<v t="T1577"><vh>undentPythonBody</vh></v>
</v>
</v>
<v t="T1578"><vh>@file leoNodes.py</vh>
<v t="T1579"><vh>&lt;&lt; About the vnode and tnode classes &gt;&gt;</vh></v>
<v t="T1580"><vh>&lt;&lt; About clones &gt;&gt;</vh></v>
<v t="T1581"><vh>&lt;&lt; tnode members &gt;&gt;</vh>
<v t="T1582"><vh>&lt;&lt; tnode constants &gt;&gt;</vh></v>
<v t="T1583"><vh>t.__init__</vh></v>
<v t="T1584"><vh>t.__del__</vh></v>
<v t="T1585"><vh>t.destroy</vh></v>
<v><vh>Getters</vh>
<v t="T1586"><vh>hasBody</vh></v>
<v t="T1587"><vh>loadBodyPaneFromTnode</vh></v>
<v><vh>Status bits</vh>
<v t="T1588"><vh>isDirty</vh></v>
<v t="T1589"><vh>isRichTextBit</vh></v>
<v t="T1590"><vh>isVisited</vh></v>
</v>
</v>
<v><vh>Setters</vh>
<v><vh>Setting body text</vh>
<v t="T1591"><vh>saveBodyPaneToTnode</vh></v>
<v t="T1592"><vh>setTnodeText</vh></v>
<v t="T1593"><vh>setSelection</vh></v>
</v>
<v><vh>Status bits</vh>
<v t="T1594"><vh>clearDirty</vh></v>
<v t="T1595"><vh>clearRichTextBit</vh></v>
<v t="T1596"><vh>clearVisited</vh></v>
<v t="T1597"><vh>setDirty</vh></v>
<v t="T1598"><vh>setRichTextBit</vh></v>
<v t="T1599"><vh>setVisited</vh></v>
</v>
<v t="T1600"><vh>setCloneIndex</vh></v>
<v t="T1601"><vh>setFileIndex</vh></v>
<v t="T1602"><vh>setJoinHead</vh></v>
</v>
</v>
<v t="T1603"><vh>&lt;&lt; vnode members &gt;&gt;</vh>
<v t="T1604"><vh>&lt;&lt; vnode constants &gt;&gt;</vh></v>
<v t="T557" a="C"><vh>v.__init__</vh>
<v t="T558"><vh>&lt;&lt; initialize vnode data members &gt;&gt;</vh></v>
</v>
<v t="T1605"><vh>v.__del__</vh></v>
<v t="T1606"><vh>vnode.__repr__</vh></v>
<v t="T1607"><vh>vnode.__cmp__ (not used)</vh></v>
<v t="T677" a="C"><vh>v.destroy</vh></v>
<v t="T928" a="C"><vh>v.Callbacks</vh>
<v t="T929"><vh>OnBoxClick</vh></v>
<v t="T930"><vh>OnDrag</vh></v>
<v t="T931"><vh>OnEndDrag</vh></v>
<v t="T932"><vh>OnHeadlineClick</vh></v>
<v t="T933"><vh>OnHeadlineKey</vh></v>
<v t="T934"><vh>OnHyperLinkControlClick</vh></v>
<v t="T935"><vh>OnHyperLinkEnter</vh></v>
<v t="T936"><vh>OnHyperLinkLeave</vh></v>
<v t="T937"><vh>v.OnIconClick</vh></v>
</v>
<v><vh>Comparisons</vh>
<v t="T1608"><vh>atFileNodeName</vh></v>
<v t="T1609"><vh>isAtFileNode</vh></v>
<v t="T1610"><vh>isAtIgnoreNode</vh></v>
<v t="T1611"><vh>isAtOthersNode</vh></v>
<v t="T1612"><vh>matchHeadline</vh></v>
</v>
<v><vh>File Conversion (vnode)</vh>
<v t="T1613"><vh>convertTreeToString</vh></v>
<v t="T1614"><vh>moreHead</vh></v>
<v t="T1615"><vh>moreBody</vh></v>
</v>
<v><vh>Getters</vh>
<v t="T1616"><vh>bodyString</vh></v>
<v><vh>Children</vh>
<v t="T1617"><vh>childIndex</vh></v>
<v t="T1618"><vh>firstChild</vh></v>
<v t="T1619"><vh>hasChildren</vh></v>
<v t="T1620"><vh>lastChild</vh></v>
<v t="T1621"><vh>nthChild</vh></v>
<v t="T1622"><vh>numberOfChildren (n)</vh></v>
</v>
<v t="T1623"><vh>currentVnode (vnode)</vh></v>
<v t="T1624"><vh>findRoot</vh></v>
<v t="T1625"><vh>getJoinList</vh></v>
<v t="T1626"><vh>headString</vh></v>
<v t="T1627"><vh>isAncestorOf</vh></v>
<v t="T1628"><vh>isRoot</vh></v>
<v><vh>Status Bits</vh>
<v t="T1629"><vh>isCloned</vh></v>
<v t="T1630"><vh>isDirty</vh></v>
<v t="T1631"><vh>isExpanded</vh></v>
<v t="T1632"><vh>isMarked</vh></v>
<v t="T1633"><vh>isOrphan</vh></v>
<v t="T1634"><vh>isSelected</vh></v>
<v t="T1635"><vh>isTopBitSet</vh></v>
<v t="T1636"><vh>isVisible</vh></v>
<v t="T1637"><vh>isVisited</vh></v>
<v t="T1638"><vh>status</vh></v>
</v>
<v><vh>Structure Links</vh>
<v t="T1639"><vh>back</vh></v>
<v t="T1640"><vh>lastNode</vh></v>
<v t="T1641"><vh>level</vh></v>
<v t="T1642"><vh>next</vh></v>
<v t="T1643"><vh>nodeAfterTree</vh></v>
<v t="T1644"><vh>parent</vh></v>
<v t="T1645"><vh>threadBack</vh></v>
<v t="T1646"><vh>threadNext</vh></v>
<v t="T1647"><vh>visBack</vh></v>
<v t="T1648"><vh>visNext</vh></v>
</v>
</v>
<v><vh>Setters</vh>
<v><vh>Head and body text</vh>
<v t="T1649"><vh>appendStringToBody</vh></v>
<v t="T1650"><vh>setBodyStringOrPane &amp; setBodyTextOrPane</vh></v>
<v t="T1651"><vh>setHeadString &amp; initHeadString</vh></v>
<v t="T1652"><vh>setHeadStringOrHeadline</vh></v>
</v>
<v t="T1653"><vh>computeIcon &amp; setIcon</vh></v>
<v><vh>Status bits</vh>
<v t="T1654"><vh>clearAllVisited</vh></v>
<v t="T1655"><vh>clearAllVisitedInTree</vh></v>
<v t="T1656"><vh>clearClonedBit</vh></v>
<v t="T1657"><vh>clearDirty &amp; clearDirtyJoined</vh></v>
<v t="T1658"><vh>clearMarked</vh></v>
<v t="T1659"><vh>clearOrphan</vh></v>
<v t="T1660"><vh>clearVisited</vh></v>
<v t="T1661"><vh>clearVisitedInTree</vh></v>
<v t="T1662"><vh>contract &amp; expand &amp; initExpandedBit</vh></v>
<v t="T1663"><vh>initStatus</vh></v>
<v t="T947" a="C"><vh>setAncestorAtFileNodeDirty</vh></v>
<v t="T1664"><vh>setClonedBit &amp; initClonedBit</vh></v>
<v t="T654" a="C"><vh>setDirty &amp; initDirtyBit</vh></v>
<v t="T1665"><vh>setMarked &amp; initMarkedBit</vh></v>
<v t="T1666"><vh>setOrphan</vh></v>
<v t="T1667"><vh>setSelected (vnode, new)</vh></v>
<v t="T1668"><vh>setVisited</vh></v>
</v>
<v t="T1669"><vh>setJoinList</vh></v>
<v t="T1670"><vh>setSelection</vh></v>
<v t="T1671"><vh>setT</vh></v>
<v t="T703" a="C"><vh>v.sortChildren</vh></v>
<v t="T1672"><vh>trimTrailingLines</vh></v>
</v>
<v><vh>Moving, Inserting, Deleting, Cloning</vh>
<v><vh>Entry Points (vnode)</vh>
<v t="T1673"><vh>vnode::clone</vh></v>
<v t="T1674"><vh>doDelete</vh></v>
<v t="T559" a="C"><vh>insertAfter</vh></v>
<v t="T1675"><vh>insertAsLastChild</vh></v>
<v t="T1676"><vh>insertAsNthChild</vh></v>
<v t="T656" a="C"><vh>moveAfter</vh></v>
<v t="T658" a="C"><vh>moveToRoot</vh></v>
<v t="T657" a="C"><vh>moveToNthChildOf</vh></v>
<v t="T1677"><vh>restoreOutlineFromDVnodes (test)</vh></v>
<v t="T556" a="C"><vh>swap_links</vh></v>
</v>
<v><vh>Public helper functions</vh>
<v t="T561" a="C"><vh>v.copyTree</vh></v>
<v t="T1678"><vh>joinTreeTo</vh></v>
<v t="T1679"><vh>shouldBeClone</vh></v>
<v t="T1680"><vh>validateOutlineWithParent</vh>
<v t="T1681"><vh>&lt;&lt; validate parent ivar &gt;&gt;</vh></v>
<v t="T1682"><vh>&lt;&lt; validate childIndex ivar &gt;&gt;</vh></v>
<v t="T1683"><vh>&lt;&lt; validate x ivar &gt;&gt;</vh></v>
</v>
</v>
<v><vh>Private helper functions</vh>
<v t="T1684"><vh>cloneTree</vh></v>
<v t="T1685"><vh>copyCloneBitsTo</vh></v>
<v t="T560" a="C"><vh>v.copyNode</vh></v>
<v t="T1686"><vh>createDependents (bug fix: 4/22/01)</vh></v>
<v t="T1687"><vh>destroyDependents</vh></v>
<v t="T1688"><vh>destroyTree (does nothing!)</vh></v>
<v t="T1689"><vh>invalidOutline</vh></v>
<v t="T1690"><vh>isJoinedTo</vh></v>
<v t="T1691"><vh>isOnJoinListOf</vh></v>
<v t="T1692"><vh>joinNodeTo</vh></v>
<v t="T1693"><vh>linkAfter</vh></v>
<v t="T1694"><vh>linkAsNthChild</vh></v>
<v t="T655" a="C"><vh>linkAsRoot</vh></v>
<v t="T1695"><vh>unlink</vh></v>
<v t="T1696"><vh>unjoinNode</vh>
<v t="T1697"><vh>&lt;&lt; Set prev to the node that points to self &gt;&gt;</vh></v>
</v>
<v t="T1698"><vh>unjoinTree</vh></v>
</v>
</v>
</v>
</v>
<v t="T1699"><vh>@file leoPrefs.py</vh>
<v t="T664" a="C"><vh>prefs.__init__</vh>
<v t="T665"><vh>&lt;&lt; Set ivars &gt;&gt;</vh></v>
<v t="T666"><vh>&lt;&lt; Create the Global Options frame &gt;&gt;</vh></v>
<v t="T667"><vh>&lt;&lt; Create the Tangle Options frame &gt;&gt;</vh></v>
<v t="T668"><vh>&lt;&lt; Create the Target Language frame &gt;&gt;</vh></v>
<v t="T669"><vh>&lt;&lt; Create the Ok, Cancel &amp; Revert buttons &gt;&gt;</vh></v>
</v>
<v t="T660" a="C"><vh>prefs.init</vh>
<v t="T661"><vh>&lt;&lt; remember values for revert &gt;&gt;</vh></v>
<v t="T662"><vh>&lt;&lt; set widgets &gt;&gt;</vh></v>
</v>
<v><vh>Event handlers</vh>
<v t="T670" a="C"><vh>prefs.set_ivars &amp; idle_set_ivars &amp; print_ivars</vh>
<v t="T671"><vh>&lt;&lt; update ivars &gt;&gt;</vh></v>
</v>
<v t="T663" a="C"><vh>set_lang</vh></v>
<v t="T647" a="C"><vh>OnClosePrefsFrame</vh></v>
<v t="T1700"><vh>onOK, onCancel, onRevert</vh>
<v t="T1701"><vh>&lt;&lt; restore options &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="T1702"><vh>@file leoTangle.py</vh>
<v t="T1703"><vh>&lt;&lt; about Tangle and Untangle &gt;&gt;</vh></v>
<v t="T1704"><vh>&lt;&lt; constants &amp; synonyms &gt;&gt;</vh></v>
<v t="T1705"><vh>&lt;&lt; define node classes &gt;&gt;</vh>
<v t="T1706"><vh>&lt;&lt; tst_node methods &gt;&gt;</vh>
<v t="T1707"><vh>tst_node.__init__</vh></v>
<v t="T1708"><vh>tst_node.__repr__</vh></v>
</v>
<v t="T1709"><vh>&lt;&lt; part_node methods &gt;&gt;</vh>
<v t="T1710"><vh>part_node.__init__</vh></v>
<v t="T1711"><vh>part_node.__repr__</vh></v>
</v>
<v t="T1712"><vh>&lt;&lt; ust_node methods &gt;&gt;</vh>
<v t="T1713"><vh>ust_node.__init__</vh></v>
<v t="T1714"><vh>ust_node.__repr__</vh></v>
</v>
<v t="T1715"><vh>&lt;&lt; def_node methods &gt;&gt;</vh>
<v t="T1716"><vh>def_node.__init__</vh></v>
<v t="T1717"><vh>def_node.__repr__</vh></v>
</v>
</v>
<v t="T1718"><vh>&lt;&lt; tangleCommands methods &gt;&gt;</vh>
<v t="T1719"><vh>tangle.__init__</vh></v>
<v t="T729" a="C"><vh>tangle.init_ivars &amp; init_directive_ivars</vh>
<v t="T730"><vh>&lt;&lt; init tangle ivars &gt;&gt;</vh></v>
<v t="T731"><vh>&lt;&lt; init untangle ivars &gt;&gt;</vh></v>
<v t="T732" a="C"><vh>&lt;&lt; init directive ivars &gt;&gt;</vh></v>
</v>
<v t="T1720"><vh>top level</vh>
<v t="T713" a="C"><vh>cleanup</vh></v>
<v t="T1721"><vh>initTangleCommand</vh></v>
<v t="T1722"><vh>initUntangleCommand</vh></v>
<v t="T1723"><vh>tangle</vh></v>
<v t="T710" a="C"><vh>tangleAll</vh></v>
<v t="T711" a="C"><vh>tangleMarked</vh></v>
<v t="T1724"><vh>tanglePass1</vh></v>
<v t="T1725"><vh>tanglePass2</vh></v>
<v t="T712" a="C"><vh>tangleTree (calls cleanup)</vh></v>
<v t="T1726"><vh>untangle</vh></v>
<v t="T1727"><vh>untangleAll</vh></v>
<v t="T1728"><vh>untangleMarked</vh></v>
<v t="T1729"><vh>untangleRoot (calls cleanup)</vh>
<v t="T1730"><vh>&lt;&lt; return if @silent or unknown language &gt;&gt;</vh></v>
<v t="T1731"><vh>&lt;&lt; Set path &amp; root_name to the file specified in the @root directive &gt;&gt;</vh></v>
<v t="T1732"><vh>&lt;&lt; Read the file into file_buf  &gt;&gt;</vh></v>
<v t="T1733"><vh>&lt;&lt; Pass 2:  Untangle the outline using the UST and a newly-created TST &gt;&gt;</vh></v>
</v>
<v t="T1734"><vh>untangleTree</vh>
<v t="T1735"><vh>&lt;&lt; set end to the next root in the unit &gt;&gt;</vh></v>
</v>
</v>
<v><vh>tangle</vh>
<v t="T733" a="C"><vh>Pass 1</vh>
<v t="T734"><vh>handle_newline</vh></v>
<v t="T735"><vh>skip_body</vh>
<v t="T736"><vh>The interface between tangle and untangle</vh>
<v t="T737"><vh>&lt;&lt; Define a section containing only an @doc part &gt;&gt;</vh></v>
<v t="T738"><vh>&lt;&lt; Scan and define a section definition &gt;&gt;</vh></v>
<v t="T739"><vh>&lt;&lt; Scan and define an @code defininition &gt;&gt;</vh></v>
<v t="T740"><vh>&lt;&lt; Scan and define a root section &gt;&gt;</vh></v>
</v>
</v>
<v t="T741"><vh>skip_code</vh>
<v t="T742"><vh>&lt;&lt; skip a noweb code section &gt;&gt;</vh>
<v t="T743"><vh>&lt;&lt; handle possible noweb section reference &gt;&gt;</vh></v>
</v>
<v t="T744"><vh>&lt;&lt; skip a CWEB code section &gt;&gt;</vh>
<v t="T745"><vh>&lt;&lt; handle CWEB control code &gt;&gt;</vh></v>
</v>
</v>
<v t="T705" a="C"><vh>skip_doc</vh></v>
<v t="T746"><vh>skip_headline</vh></v>
</v>
<v><vh>Pass 2</vh>
<v t="T1736"><vh>oblank, oblanks, os, otab, otabs</vh></v>
<v t="T1000" a="C"><vh>tangle.put_all_roots</vh>
<v t="T1001"><vh>&lt;&lt;Write a banner at the start of the output file&gt;&gt;</vh></v>
<v t="T1002"><vh>&lt;&lt; Erase the temporary file &gt;&gt;</vh></v>
</v>
<v t="T1737"><vh>put_code</vh>
<v t="T1738"><vh>&lt;&lt;put possible section reference &gt;&gt;</vh></v>
<v t="T1739"><vh>&lt;&lt; handle 2-character CWEB control codes &gt;&gt;</vh></v>
<v t="T1740"><vh>&lt;&lt; handle noweb @ &lt; &lt; convention &gt;&gt;</vh></v>
</v>
<v t="T1741"><vh>put_doc</vh>
<v t="T1742"><vh>&lt;&lt;put the doc part&gt;&gt;</vh>
<v t="T1743"><vh>&lt;&lt;output or skip whitespace or newlines&gt;&gt;</vh></v>
<v t="T1744"><vh>&lt;&lt;compute the width of the next word&gt;&gt;</vh></v>
<v t="T1745"><vh>&lt;&lt;output next word&gt;&gt;</vh></v>
</v>
</v>
<v t="T1746"><vh>put_leading_ws</vh></v>
<v t="T1747"><vh>put_newline</vh>
<v t="T1748"><vh>&lt;&lt; Output leading white space except for blank lines &gt;&gt;</vh></v>
</v>
<v t="T1749"><vh>put_part_node</vh></v>
<v t="T1750"><vh>put_section</vh>
<v t="T1751"><vh>&lt;&lt; Calculate the new value of tangle_indent &gt;&gt;</vh></v>
<v t="T1752"><vh>&lt;&lt; Set 'newline_flag' if the line ends with the reference &gt;&gt;</vh></v>
<v t="T1753"><vh>&lt;&lt;put all parts of the section definition&gt;&gt;</vh>
<v t="T1754"><vh>&lt;&lt; Put the section name in a comment &gt;&gt;</vh>
<v t="T1755"><vh>&lt;&lt; put ( n of m ) &gt;&gt;</vh></v>
</v>
<v t="T1756"><vh>&lt;&lt; Put the ending comment &gt;&gt;</vh></v>
</v>
<v t="T1757"><vh>&lt;&lt;Put a comment about the undefined section&gt;&gt;</vh></v>
</v>
<v t="T1758"><vh>section_check</vh></v>
</v>
</v>
<v><vh>tst</vh>
<v t="T1759"><vh>st_check</vh></v>
<v t="T1760"><vh>st_dump</vh></v>
<v t="T1761"><vh>st_dump_node</vh></v>
<v t="T1762"><vh>st_enter</vh>
<v t="T1763"><vh>&lt;&lt;check for duplicate code definitions &gt;&gt;</vh></v>
</v>
<v t="T1764"><vh>st_enter_section_name</vh></v>
<v t="T1765"><vh>st_enter_root_name</vh></v>
<v t="T1766"><vh>st_lookup</vh></v>
</v>
<v t="T780" a="C"><vh>ust</vh>
<v t="T781"><vh>ust_dump</vh></v>
<v t="T782"><vh>ust_enter</vh>
<v t="T783"><vh>&lt;&lt; remove blank lines from the start and end of the text &gt;&gt;</vh></v>
</v>
<v t="T784"><vh>ust_lookup</vh></v>
<v t="T785"><vh>ust_warn_about_orphans</vh></v>
</v>
<v t="T747" a="C"><vh>untangle</vh>
<v t="T748"><vh>compare_comments</vh>
<v t="T749" a="C"><vh>&lt;&lt; Check both parts for @ comment conventions &gt;&gt;</vh></v>
</v>
<v t="T750"><vh>massage_block_comment (no longer used)</vh></v>
<v t="T751"><vh>forgiving_compare</vh>
<v t="T752"><vh>&lt;&lt; Define forgiving_compare vars &gt;&gt;</vh></v>
<v t="T749" a="C"><vh>&lt;&lt; Check both parts for @ comment conventions &gt;&gt;</vh></v>
<v t="T753"><vh>&lt;&lt; Compare non-critical newlines &gt;&gt;</vh></v>
<v t="T754"><vh>&lt;&lt; Compare non-critical whitespace &gt;&gt;</vh></v>
<v t="T755"><vh>&lt;&lt; Compare possible preprocessor directives &gt;&gt;</vh>
<v t="T756" a="C"><vh>&lt;&lt; Compare single characters &gt;&gt;</vh></v>
<v t="T757"><vh>&lt;&lt; Compare preprocessor directives &gt;&gt;</vh></v>
</v>
<v t="T758"><vh>&lt;&lt; Compare possible strings &gt;&gt;</vh>
<v t="T756" a="C"><vh>&lt;&lt; Compare single characters &gt;&gt;</vh></v>
<v t="T759"><vh>&lt;&lt; Compare C strings &gt;&gt;</vh></v>
<v t="T760"><vh>&lt;&lt; Compare Pascal strings &gt;&gt;</vh></v>
</v>
<v t="T761"><vh>&lt;&lt; Compare possible section references &gt;&gt;</vh></v>
<v t="T762"><vh>&lt;&lt; Compare comments or single characters &gt;&gt;</vh>
<v t="T756" a="C"><vh>&lt;&lt; Compare single characters &gt;&gt;</vh></v>
</v>
<v t="T763"><vh>&lt;&lt; Make sure both parts have ended &gt;&gt;</vh></v>
<v t="T764"><vh>&lt;&lt; Trace the mismatch &gt;&gt;</vh></v>
</v>
<v t="T765"><vh>mismatch</vh></v>
<v t="T766"><vh>scan_derived_file (pass 1)</vh>
<v t="T767"><vh>&lt;&lt; set the private global matching vars &gt;&gt;</vh></v>
<v t="T768"><vh>&lt;&lt; Skip the header line output by tangle &gt;&gt;</vh></v>
<v t="T769"><vh>&lt;&lt; handle the start of a new line &gt;&gt;</vh></v>
<v t="T770"><vh>&lt;&lt; handle a sentinel line &gt;&gt;</vh>
<v t="T771"><vh>&lt;&lt; terminate the previous part of this section if it exists &gt;&gt;</vh></v>
</v>
<v t="T772"><vh>&lt;&lt; copy the entire line &gt;&gt;</vh></v>
<v t="T773"><vh>&lt;&lt; copy a string &gt;&gt;</vh></v>
<v t="T774"><vh>&lt;&lt; copy a multi-line comment &gt;&gt;</vh></v>
<v t="T775"><vh>&lt;&lt; copy an alternate multi-line comment &gt;&gt;</vh></v>
<v t="T776"><vh>&lt;&lt; end all open sections &gt;&gt;</vh></v>
</v>
<v t="T777"><vh>update_def (pass 2)</vh>
<v t="T778"><vh>&lt;&lt; Remove leading blank lines and comments from ucode &gt;&gt;</vh></v>
</v>
<v t="T779"><vh>update_current_vnode</vh></v>
</v>
<v t="T786" a="C"><vh>utility methods</vh>
<v t="T787"><vh>compare_section_names</vh></v>
<v t="T788"><vh>copy</vh></v>
<v t="T789"><vh>error &amp; warning</vh></v>
<v t="T790"><vh>is_end_of_directive</vh></v>
<v t="T791"><vh>is_end_of_string</vh></v>
<v t="T792"><vh>is_escaped</vh></v>
<v t="T793"><vh>is_section_name</vh></v>
<v t="T794"><vh>is_sentinel_line &amp; is_sentinel_line_with_data</vh>
<v t="T795"><vh>&lt;&lt; Initialize the return values  &gt;&gt;</vh></v>
<v t="T796"><vh>&lt;&lt; Make sure the line starts with start_sentinel &gt;&gt;</vh></v>
<v t="T797"><vh>&lt;&lt; Set end_flag if we have -- end -- &gt;&gt;</vh></v>
<v t="T798"><vh>&lt;&lt; Make sure we have a section reference &gt;&gt;</vh></v>
<v t="T799"><vh>&lt;&lt; Set part and of if they exist &gt;&gt;</vh></v>
<v t="T800"><vh>&lt;&lt; Set nl_flag to false if !newline exists &gt;&gt;</vh></v>
<v t="T801"><vh>&lt;&lt; Make sure the line ends with end_sentinel &gt;&gt;</vh></v>
</v>
<v t="T802"><vh>push_new_def_node</vh></v>
<v t="T803"><vh>scan_short_val</vh></v>
<v t="T804"><vh>set_root_delims</vh></v>
<v t="T805"><vh>setRootFromHeadline</vh></v>
<v t="T806"><vh>setRootFromText</vh></v>
<v t="T807"><vh>skip_CWEB_section_name</vh></v>
<v t="T808"><vh>skip_noweb_section_name</vh></v>
<v t="T809"><vh>skip_section_name</vh></v>
<v t="T810"><vh>standardize_name</vh></v>
<v t="T717" a="C"><vh>tangle.scanAllDirectives</vh>
<v t="T718"><vh>&lt;&lt; Test for @comment or @language &gt;&gt;</vh></v>
<v t="T719"><vh>&lt;&lt; Test for @verbose, @terse or @silent &gt;&gt;</vh></v>
<v t="T720"><vh>&lt;&lt; Test for @path, @pagewidth and @tabwidth &gt;&gt;</vh>
<v t="T721"><vh>&lt;&lt; Remove leading and trailing delims if they exist &gt;&gt;</vh></v>
</v>
<v t="T722"><vh>&lt;&lt; Test for @header or @noheader &gt;&gt;</vh></v>
<v t="T723"><vh>&lt;&lt; Set self.tangle_directory &gt;&gt;</vh></v>
</v>
<v t="T706" a="C"><vh>token_type</vh>
<v t="T707"><vh>&lt;&lt; set token_type in noweb mode &gt;&gt;</vh></v>
<v t="T708"><vh>&lt;&lt; set token_type for CWEB mode &gt;&gt;</vh></v>
<v t="T709"><vh>&lt;&lt; set kind for directive &gt;&gt;</vh></v>
</v>
</v>
</v>
</v>
<v t="T1767"><vh>@file leoTree.py</vh>
<v t="T1768"><vh>&lt;&lt; about drawing and events &gt;&gt;</vh></v>
<v t="T1769"><vh>&lt;&lt; drawing constants &gt;&gt;</vh></v>
<v t="T862" a="C"><vh>tree.__init__</vh></v>
<v t="T1770"><vh>tree.__del__</vh></v>
<v t="T676" a="C"><vh>tree.destroy</vh></v>
<v t="T859" a="C"><vh>tree.expandAllAncestors</vh></v>
<v t="T903" a="C"><vh>tree.findVnodeWithIconId</vh></v>
<v><vh>Drawing</vh>
<v t="T1771"><vh>About drawing and updating</vh></v>
<v t="T863" a="C"><vh>beginUpdate</vh></v>
<v t="T943" a="C"><vh>drawBox</vh></v>
<v t="T902" a="C"><vh>tree.drawIcon</vh></v>
<v t="T1772"><vh>drawTree</vh>
<v t="T1773"><vh>&lt;&lt; draw vertical line &gt;&gt;</vh></v>
</v>
<v t="T1774"><vh>drawNode</vh></v>
<v t="T944" a="C"><vh>drawText</vh>
<v t="T945"><vh>&lt;&lt; configure the text depending on state &gt;&gt;</vh></v>
</v>
<v t="T864" a="C"><vh>endUpdate</vh></v>
<v t="T1003" a="C"><vh>tree.getIconImage</vh></v>
<v t="T1775"><vh>headWidth</vh></v>
<v t="T1776"><vh>hideAllChildren</vh></v>
<v t="T1777"><vh>hideNode (no longer used)</vh></v>
<v t="T1778"><vh>hideTree (no longer used)</vh></v>
<v t="T857" a="C"><vh>lastVisible</vh></v>
<v t="T855" a="C"><vh>tree.recolor &amp; recolor_now</vh></v>
<v t="T579" a="C"><vh>tree.redraw , force_redraw, redraw_now</vh></v>
<v t="T860" a="C"><vh>tree.idle_scrollTo</vh></v>
<v t="T858" a="C"><vh>tree.yoffset</vh></v>
<v t="T911" a="C"><vh>tree.numberOfVisibleNodes</vh></v>
</v>
<v><vh>Event handers</vh>
<v t="T1779"><vh>OnActivate</vh></v>
<v t="T1780"><vh>OnBoxClick</vh></v>
<v t="T904" a="C"><vh>tree.OnDrag</vh>
<v t="T905"><vh>&lt;&lt; set vdrag and expandFlag &gt;&gt;</vh></v>
<v t="T906"><vh>&lt;&lt; expand vdrag and redraw &gt;&gt;</vh></v>
<v t="T907"><vh>&lt;&lt; scroll the canvas as needed &gt;&gt;</vh></v>
</v>
<v t="T908" a="C"><vh>tree.OnEndDrag</vh>
<v t="T909"><vh>&lt;&lt; set vdrag, childFlag &gt;&gt;</vh></v>
</v>
<v t="T910" a="C"><vh>tree.OnIconClick</vh></v>
<v t="T575" a="C"><vh>tree.onBodyChanged, onBodyWillChange, OnBodyKey, idle_body_key</vh>
<v t="T576"><vh>&lt;&lt; Do Auto indent &gt;&gt;</vh></v>
<v t="T577"><vh>&lt;&lt; convert leading tab to blanks &gt;&gt;</vh></v>
</v>
<v t="T1781"><vh>OnDeactivate</vh></v>
<v t="T578" a="C"><vh>tree.OnHeadlineKey, onHeadlineChanged, idle_head_key</vh></v>
</v>
<v><vh>Selecting &amp; editing (tree)</vh>
<v t="T1782"><vh>dimEditLabel, undimEditLabel</vh></v>
<v t="T898" a="C"><vh>editLabel</vh></v>
<v t="T899" a="C"><vh>endEditLab (es here helps set focus properly!)</vh></v>
<v t="T854" a="C"><vh>tree.select</vh></v>
<v t="T580" a="C"><vh>tree.set...LabelState</vh></v>
</v>
</v>
<v t="T1783"><vh>@file leoUndo.py</vh>
<v t="T1784"><vh>&lt;&lt; How Leo implements unlimited undo &gt;&gt;</vh></v>
<v t="T1785"><vh>undo.__init__</vh>
<v t="T1786"><vh>clearUndoState &amp; clearIvars</vh></v>
</v>
<v t="T831" a="C"><vh>State routines...</vh>
<v t="T832"><vh>canRedo &amp; canUndo</vh></v>
<v t="T833"><vh>enableMenuItems</vh></v>
<v t="T834"><vh>getBead, peekBead, setBead</vh></v>
<v t="T835"><vh>redoMenuName, undoMenuName</vh></v>
<v t="T836"><vh>setRedoType, setUndoType</vh></v>
<v t="T837"><vh>setUndoParams</vh></v>
<v t="T838"><vh>setUndoTypingParams</vh></v>
<v t="T839"><vh>setUndoTypes</vh></v>
</v>
<v t="T547" a="C"><vh>redo</vh>
<v t="T548"><vh>&lt;&lt; redo clone cases &gt;&gt;</vh></v>
<v t="T549"><vh>&lt;&lt; redo delete cases &gt;&gt;</vh></v>
<v t="T550"><vh>&lt;&lt; redo insert cases &gt;&gt;</vh></v>
<v t="T551" a="CM"><vh>&lt;&lt; redo move &amp; drag cases &gt;&gt;</vh></v>
<v t="T552"><vh>&lt;&lt; redo promote and demote cases &gt;&gt;</vh></v>
<v t="T553"><vh>&lt;&lt; redo replace cases &gt;&gt;</vh></v>
<v t="T554"><vh>&lt;&lt; redo sort cases &gt;&gt;</vh></v>
<v t="T555"><vh>&lt;&lt; redo typing cases &gt;&gt;</vh></v>
</v>
<v t="T538" a="C"><vh>undo</vh>
<v t="T539"><vh>&lt;&lt; undo clone cases &gt;&gt;</vh></v>
<v t="T540"><vh>&lt;&lt; undo delete cases &gt;&gt;</vh></v>
<v t="T541"><vh>&lt;&lt; undo insert cases &gt;&gt;</vh></v>
<v t="T542" a="CM"><vh>&lt;&lt; undo move  &amp; drag cases &gt;&gt;</vh></v>
<v t="T543"><vh>&lt;&lt; undo promote and demote cases &gt;&gt;</vh></v>
<v t="T544"><vh>&lt;&lt; undo replace cases &gt;&gt;</vh></v>
<v t="T545"><vh>&lt;&lt; undo sort cases &gt;&gt;</vh></v>
<v t="T546"><vh>&lt;&lt; undo typing cases &gt;&gt;</vh></v>
</v>
<v><vh>Undo helpers</vh>
<v t="T1787"><vh>findSharedVnode</vh></v>
<v t="T850" a="C"><vh>undoDemote</vh></v>
<v t="T849" a="C"><vh>undoPromote</vh></v>
<v t="T537" a="C"><vh>undoReplace</vh></v>
<v t="T1788"><vh>undoSortChildren</vh></v>
<v t="T1789"><vh>undoSortSiblings</vh></v>
</v>
</v>
<v t="T1790"><vh>@file leoUtils.py</vh>
<v t="T868" a="C"><vh>@language and @comment directives</vh>
<v t="T869" a="C"><vh>set_delims_from_language</vh></v>
<v t="T870" a="C"><vh>set_delims_from_string</vh></v>
<v t="T871"><vh>set_language</vh></v>
</v>
<v t="T1791"><vh>angleBrackets &amp; virtual_event_name</vh></v>
<v t="T1792"><vh>btest</vh></v>
<v t="T1793"><vh>center_dialog</vh></v>
<v t="T1794"><vh>create_temp_name</vh></v>
<v><vh>Dumping, Tracing &amp; Sherlock</vh>
<v t="T1795"><vh>dump</vh></v>
<v t="T728" a="C"><vh>get_line &amp; get_line_after</vh></v>
<v t="T1796"><vh>printBindings</vh></v>
<v t="T482" a="C"><vh>Sherlock...</vh>
<v t="T483"><vh>get_Sherlock_args</vh></v>
<v t="T484"><vh>init_trace</vh></v>
<v t="T485"><vh>trace</vh></v>
</v>
</v>
<v t="T1797"><vh>ensure_extension</vh></v>
<v t="T938" a="C"><vh>findReference</vh></v>
<v t="T490" a="C"><vh>Leading &amp; trailing whitespace...</vh>
<v t="T491"><vh>computeLeadingWhitespace</vh></v>
<v t="T492"><vh>computeWidth</vh></v>
<v t="T493"><vh>optimizeLeadingWhitespace</vh></v>
<v t="T494"><vh>removeLeadingWhitespace</vh></v>
<v t="T495"><vh>removeTrailingWs</vh></v>
<v t="T496"><vh>skip_leading_ws</vh></v>
<v t="T497"><vh>skip_leading_ws_with_indent</vh></v>
</v>
<v><vh>List utilities...</vh>
<v t="T1798"><vh>appendToList</vh></v>
<v t="T1799"><vh>flattenList</vh></v>
<v t="T1800"><vh>listToString</vh></v>
</v>
<v><vh>Menu utlities...</vh>
<v t="T1801"><vh>enableMenu &amp; disableMenu &amp; setMenuLabel</vh></v>
</v>
<v t="T1802"><vh>scanError</vh></v>
<v t="T1803"><vh>Scanners: calling scanError</vh>
<v t="T1804"><vh>skip_block_comment</vh></v>
<v t="T1805"><vh>skip_braces</vh></v>
<v t="T1806"><vh>skip_parens</vh></v>
<v t="T1807"><vh>skip_pascal_begin_end</vh></v>
<v t="T1808"><vh>skip_pascal_block_comment</vh></v>
<v t="T1809"><vh>skip_pascal_string : called by tangle</vh></v>
<v t="T1810"><vh>skip_pp_directive</vh></v>
<v t="T1811"><vh>skip_pp_if</vh></v>
<v t="T1812"><vh>skip_to_semicolon</vh></v>
<v t="T1813"><vh>skip_python_string</vh></v>
<v t="T1814"><vh>skip_string : called by tangle</vh></v>
<v t="T1815"><vh>skip_typedef</vh></v>
</v>
<v><vh>Scanners: no error messages</vh>
<v t="T1816"><vh>escaped</vh></v>
<v t="T727" a="C"><vh>find_line_start</vh></v>
<v t="T1817"><vh>find_on_line</vh></v>
<v t="T1818"><vh>is_c_id</vh></v>
<v t="T1819"><vh>is_nl</vh></v>
<v t="T1820"><vh>is_special</vh></v>
<v t="T1202" a="C"><vh>is_special_bits</vh>
<v t="T1203"><vh>&lt;&lt; set bits for @ directives &gt;&gt;</vh></v>
<v t="T1204"><vh>&lt;&lt; set root bits for noweb * chunks &gt;&gt;</vh></v>
</v>
<v t="T1821"><vh>is_ws &amp; is_ws_or_nl</vh></v>
<v t="T1822"><vh>match</vh></v>
<v t="T1823"><vh>match_c_word</vh></v>
<v t="T1824"><vh>match_ignoring_case</vh></v>
<v t="T1825"><vh>match_word</vh></v>
<v t="T1826"><vh>skip_blank_lines</vh></v>
<v t="T1827"><vh>skip_c_id</vh></v>
<v t="T1828"><vh>skip_line, skip_to_end_of_line</vh></v>
<v t="T1829"><vh>skip_long</vh></v>
<v t="T1830"><vh>skip_matching_delims</vh></v>
<v t="T1831"><vh>skip_nl</vh></v>
<v t="T1832"><vh>skip_pascal_braces</vh></v>
<v t="T1833"><vh>skip_ws, skip_ws_and_nl</vh></v>
</v>
<v t="T1834"><vh>shortFileName</vh></v>
<v t="T1835"><vh>sortSequence</vh></v>
<v t="T1836"><vh>Timing</vh></v>
<v t="T518" a="C"><vh>Tk.Text selection (utils)</vh>
<v t="T519"><vh>getTextSelection</vh></v>
<v t="T520"><vh>getSelectedText</vh></v>
<v t="T521" a="C"><vh>setTextSelection</vh></v>
</v>
<v t="T1837"><vh>update_file_if_changed</vh></v>
</v>
</v>
<v t="T1838"><vh>@file leoFrame.py</vh>
<v t="T507" a="C"><vh>frame.__init__</vh>
<v t="T508"><vh>&lt;&lt; set the LeoFrame ivars &gt;&gt;</vh></v>
<v t="T509"><vh>&lt;&lt; create the first tree node &gt;&gt;</vh></v>
</v>
<v t="T1059" a="C"><vh>frame.__del__</vh></v>
<v t="T1839"><vh>frame.__repr__</vh></v>
<v t="T679" a="C"><vh>frame.destroy</vh></v>
<v t="T942" a="C"><vh>frame.setTabWidth</vh></v>
<v t="T1019" a="C"><vh>createMenuBar</vh>
<v t="T1020"><vh>&lt;&lt; create the file menu &gt;&gt;</vh>
<v t="T1021"><vh>&lt;&lt; create the top-level file entries &gt;&gt;</vh></v>
<v t="T1011" a="C"><vh>&lt;&lt; create the recent files submenu &gt;&gt;</vh></v>
<v t="T1022"><vh>&lt;&lt; create the read/write submenu &gt;&gt;</vh></v>
<v t="T1023"><vh>&lt;&lt; create the tangle submenu &gt;&gt;</vh></v>
<v t="T1024"><vh>&lt;&lt; create the untangle submenu &gt;&gt;</vh></v>
<v t="T1025"><vh>&lt;&lt; create the import submenu &gt;&gt;</vh></v>
</v>
<v t="T1026"><vh>&lt;&lt; create the edit menu &gt;&gt;</vh>
<v t="T1027"><vh>&lt;&lt; create the edit body submenu &gt;&gt;</vh></v>
<v t="T1028"><vh>&lt;&lt; create the find submenu &gt;&gt;</vh></v>
</v>
<v t="T1029"><vh>&lt;&lt; create the outline menu &gt;&gt;</vh>
<v t="T1030"><vh>&lt;&lt; create expand/contract submenu &gt;&gt;</vh></v>
<v t="T1031"><vh>&lt;&lt; create move/select submenu &gt;&gt;</vh></v>
<v t="T1032"><vh>&lt;&lt; create mark/goto submenu &gt;&gt;</vh></v>
</v>
<v t="T1033"><vh>&lt;&lt; create the window menu &gt;&gt;</vh></v>
<v t="T1034"><vh>&lt;&lt; create the help menu &gt;&gt;</vh></v>
</v>
<v t="T1015" a="C"><vh>createAccelerators</vh>
<v t="T1016"><vh>&lt;&lt; control key bindings &gt;&gt;</vh></v>
<v t="T1017"><vh>&lt;&lt; canvas control bindings &gt;&gt;</vh></v>
<v t="T1018"><vh>&lt;&lt; alt key bindings &gt;&gt;</vh></v>
</v>
<v t="T1840"><vh>getFocus</vh></v>
<v t="T1841"><vh>notYet</vh></v>
<v t="T685" a="C"><vh>frame.put, putnl</vh></v>
<v t="T814" a="C"><vh>resizePanesToRatio</vh></v>
<v><vh>Event handlers</vh>
<v t="T680" a="C"><vh>frame.OnCloseLeoEvent</vh>
<v t="T681"><vh>&lt;&lt; Prompt for change.  Set veto if the user cancels &gt;&gt;</vh>
<v t="T682"><vh>&lt;&lt; Put up a file save dialog; set veto if the user cancels &gt;&gt;</vh></v>
</v>
</v>
<v t="T940" a="C"><vh>OnActivateLeoEvent</vh></v>
<v t="T913" a="C"><vh>OnActivateBody &amp; OnBodyDoubleClick</vh></v>
<v t="T1842"><vh>OnActivateLog</vh></v>
<v t="T1843"><vh>OnActivateTree</vh></v>
</v>
<v t="T1159" a="C"><vh>Menu enablers (Frame)</vh>
<v t="T1160"><vh>OnMenuClick (enables and disables all menu items)</vh></v>
<v t="T1161"><vh>hasSelection</vh></v>
<v t="T1162"><vh>updateFileMenu</vh></v>
<v t="T1163"><vh>updateEditMenu</vh></v>
<v t="T1164"><vh>updateOutlineMenu</vh></v>
</v>
<v t="T1060" a="C"><vh>Menu Command Handlers</vh>
<v t="T1061"><vh>File Menu</vh>
<v t="T1062"><vh>top level</vh>
<v t="T1063"><vh>OnNew</vh></v>
<v t="T992" a="C"><vh>frame.OnOpen</vh>
<v t="T993"><vh>&lt;&lt; Set closeFlag if the only open window is empty &gt;&gt;</vh></v>
</v>
<v t="T994" a="C"><vh>frame.OpenWithFileName</vh>
<v t="T995" a="C"><vh>&lt;&lt; make fileName the most recent file of frame &gt;&gt;</vh></v>
</v>
<v t="T1064"><vh>OnClose</vh></v>
<v t="T697" a="C"><vh>OnSave</vh></v>
<v t="T696" a="C"><vh>OnSaveAs</vh></v>
<v t="T695" a="C"><vh>OnSaveTo</vh></v>
<v t="T533" a="C"><vh>OnRevert</vh></v>
<v t="T683" a="C"><vh>frame.OnQuit</vh></v>
</v>
<v t="T1012" a="C"><vh>Recent Files submenu</vh>
<v t="T1013"><vh>OnOpenRecentFile1...OnOpenFileN</vh></v>
<v t="T1014"><vh>OnOpenRecentFile</vh></v>
</v>
<v t="T1065"><vh>Read/Write submenu</vh>
<v t="T991" a="C"><vh>fileCommands.OnReadOutlineOnly</vh></v>
<v t="T1066"><vh>OnReadAtFileNodes</vh></v>
<v t="T1067"><vh>OnWriteOutlineOnly</vh></v>
<v t="T1068"><vh>OnWriteAtFileNodes</vh></v>
</v>
<v t="T1069"><vh>Tangle submenu</vh>
<v t="T1070"><vh>OnTangleAll</vh></v>
<v t="T1071"><vh>OnTangleMarked</vh></v>
<v t="T1072"><vh>OnTangle</vh></v>
</v>
<v t="T1073"><vh>Untangle submenu</vh>
<v t="T1074"><vh>OnUntangleAll</vh></v>
<v t="T1075"><vh>OnUntangleMarked</vh></v>
<v t="T1076"><vh>OnUntangle</vh></v>
</v>
<v t="T1077"><vh>Import&amp;Export submenu</vh>
<v t="T1078"><vh>OnFlattenOutline</vh></v>
<v t="T1079"><vh>OnImportAtFile</vh></v>
<v t="T1080"><vh>OnImportAtRoot</vh></v>
<v t="T1081"><vh>OnImportCWEBFiles</vh></v>
<v t="T1082"><vh>OnImportFlattenedOutline</vh></v>
<v t="T1083"><vh>OnImportNowebFiles</vh></v>
<v t="T1084"><vh>OnOutlineToCWEB</vh></v>
<v t="T1085"><vh>OnOutlineToNoweb</vh></v>
<v t="T1086"><vh>OnRemoveSentinels</vh></v>
</v>
</v>
<v t="T1087"><vh>Edit Menu (change to handle log pane too)</vh>
<v t="T1088"><vh>Edit top level</vh>
<v t="T1089"><vh>OnUndo</vh></v>
<v t="T1090"><vh>OnRedo</vh></v>
<v t="T512" a="C"><vh>frame.OnCut, OnCutFrom Menu</vh></v>
<v t="T511" a="C"><vh>frame.OnCopy, OnCopyFromMenu</vh></v>
<v t="T510" a="C"><vh>frame.OnPaste, OnPasteNode, OnPasteFromMenu</vh></v>
<v t="T534" a="C"><vh>OnDelete</vh></v>
<v t="T506" a="C"><vh>OnSelectAll</vh></v>
<v t="T1091"><vh>OnEditHeadline</vh></v>
<v t="T1092"><vh>OnFontPanel (set font)</vh></v>
<v t="T1093"><vh>OnSyntaxColoring (rewrite)</vh></v>
<v t="T698" a="C"><vh>OnViewAllCharacters</vh></v>
<v t="T648" a="C"><vh>OnPreferences</vh></v>
</v>
<v t="T1094"><vh>Edit Body submenu</vh>
<v t="T1095"><vh>OnConvertBlanks &amp; OnConvertAllBlanks</vh></v>
<v t="T1096"><vh>OnConvertTabs &amp; OnConvertAllTabs</vh></v>
<v t="T1097"><vh>OnDedent</vh></v>
<v t="T1098"><vh>OnExtract</vh></v>
<v t="T1099"><vh>OnExtractNames</vh></v>
<v t="T1100"><vh>OnExtractSection</vh></v>
<v t="T1101"><vh>OnIndent</vh></v>
</v>
<v t="T1102"><vh>Find submenu (frame methods)</vh>
<v t="T1103"><vh>OnFindPanel</vh></v>
<v t="T1104"><vh>OnFindNext</vh></v>
<v t="T1105"><vh>OnFindPrevious</vh></v>
<v t="T1106"><vh>OnReplace</vh></v>
<v t="T1107"><vh>OnReplaceThenFind</vh></v>
</v>
</v>
<v t="T1108"><vh>Outline Menu</vh>
<v t="T1109"><vh>top level</vh>
<v t="T1110"><vh>OnCutNode</vh></v>
<v t="T1111"><vh>OnCopyNode</vh></v>
<v t="T1112"><vh>OnPasteNodee</vh></v>
<v t="T1113"><vh>OnDeleteNode</vh></v>
<v t="T1114"><vh>OnInsertNode</vh></v>
<v t="T1115"><vh>OnCloneNode</vh></v>
<v t="T1116"><vh>OnSortChildren, OnSortSiblings</vh></v>
</v>
<v t="T1117"><vh>Expand/Contract</vh>
<v t="T1118"><vh>OnContractParent</vh></v>
<v t="T1119"><vh>OnExpandAll</vh></v>
<v t="T1120"><vh>OnExpandAllChildren</vh></v>
<v t="T1121"><vh>OnExpandChildren</vh></v>
<v t="T1122"><vh>OnContractAll</vh></v>
<v t="T1123"><vh>OnContractAllChildren</vh></v>
<v t="T1124"><vh>OnContractChildren</vh></v>
<v t="T1125"><vh>OnExpandNextLevel</vh></v>
<v t="T1126"><vh>OnExpandToLevel1</vh></v>
<v t="T1127"><vh>OnExpandToLevel2</vh></v>
<v t="T1128"><vh>OnExpandToLevel3</vh></v>
<v t="T1129"><vh>OnExpandToLevel4</vh></v>
<v t="T1130"><vh>OnExpandToLevel5</vh></v>
<v t="T1131"><vh>OnExpandToLevel6</vh></v>
<v t="T1132"><vh>OnExpandToLevel7</vh></v>
<v t="T1133"><vh>OnExpandToLevel8</vh></v>
<v t="T1134"><vh>OnExpandToLevel9</vh></v>
</v>
<v t="T1135"><vh>Move/Select</vh>
<v t="T1005" a="C"><vh>OnMoveDownwn</vh></v>
<v t="T1136"><vh>OnMoveLeft</vh></v>
<v t="T1137"><vh>OnMoveRight</vh></v>
<v t="T1138"><vh>OnMoveUp</vh></v>
<v t="T1139"><vh>OnPromote</vh></v>
<v t="T1140"><vh>OnDemote</vh></v>
<v t="T1141"><vh>OnGoPrevVisible</vh></v>
<v t="T1142"><vh>OnGoNextVisible</vh></v>
<v t="T1143"><vh>OnGoBack</vh></v>
<v t="T1144"><vh>OnGoNext</vh></v>
</v>
<v t="T1145"><vh>Mark/Goto</vh>
<v t="T1146"><vh>OnMark</vh></v>
<v t="T1147"><vh>OnMarkSubheads</vh></v>
<v t="T1148"><vh>OnMarkChangedItems</vh></v>
<v t="T1149"><vh>OnMarkChangedRoots</vh></v>
<v t="T1150"><vh>OnUnmarkAll</vh></v>
<v t="T1151"><vh>OnGoToNextMarked</vh></v>
<v t="T1152"><vh>OnGoToNextChanged</vh></v>
</v>
</v>
<v t="T1153"><vh>Window Menu</vh>
<v t="T1154"><vh>OnEqualSizedPanes</vh></v>
<v t="T1006" a="C"><vh>OnToggleActivePane</vh></v>
<v t="T815" a="C"><vh>OnToggleSplitDirection</vh></v>
<v t="T487" a="C"><vh>OnCascade</vh></v>
<v t="T1155"><vh>OnMinimizeAll</vh></v>
<v t="T675" a="C"><vh>OnOpenPythonWindow</vh></v>
</v>
<v t="T1156"><vh>Help Menu</vh>
<v t="T1157" a="C"><vh>OnAbout (version number)</vh></v>
<v t="T1158"><vh>OnLeoDocumentation</vh></v>
</v>
</v>
<v t="T816" a="C"><vh>Splitter stuff</vh>
<v t="T817"><vh>bindBar</vh></v>
<v t="T818"><vh>configureBar (use config.bar_width)</vh></v>
<v t="T819"><vh>createBothLeoSplitters (use config.body_font,etc)</vh>
<v t="T820"><vh>&lt;&lt; set the font for the body pane &gt;&gt;</vh></v>
<v t="T821"><vh>&lt;&lt; create the body pane &gt;&gt;</vh></v>
<v t="T822"><vh>&lt;&lt; create the tree pane &gt;&gt;</vh></v>
<v t="T823"><vh>&lt;&lt; create the log pane &gt;&gt;</vh></v>
</v>
<v t="T824"><vh>createLeoSplitter (use config params)</vh></v>
<v t="T825"><vh>divideAnySplitter</vh></v>
<v t="T826"><vh>divideLeoSplitter</vh></v>
<v t="T827"><vh>onDrag...</vh></v>
<v t="T828"><vh>placeSplitter</vh></v>
<v t="T829"><vh>reconfigurePanes (use config bar_width)</vh></v>
</v>
</v>
<v t="T1844"><vh>@file leoAtFile.py</vh>
<v t="T1845"><vh>&lt;&lt; atFile constants &gt;&gt;</vh></v>
<v t="T977" a="C"><vh>atFile ctor</vh>
<v t="T978"><vh>&lt;&lt; initialize atFile ivars &gt;&gt;</vh></v>
</v>
<v><vh>Sentinels</vh>
<v t="T1846"><vh>nodeSentinelText</vh></v>
<v t="T1847"><vh>putCloseNodeSentinel</vh></v>
<v t="T1848"><vh>putCloseSentinels</vh></v>
<v t="T1849"><vh>putOpenLeoSentinel</vh></v>
<v t="T1850"><vh>putOpenNodeSentinel</vh></v>
<v t="T1851"><vh>putOpenSentinels</vh></v>
<v t="T966" a="C"><vh>putSentinel</vh></v>
<v t="T965" a="C"><vh>sentinelKind</vh></v>
<v t="T1852"><vh>sentinelName</vh></v>
<v t="T1853"><vh>skipSentinelStart</vh></v>
</v>
<v><vh>Utilites</vh>
<v t="T637" a="C"><vh>atFile.scanAllDirectives (calls writeError on errors)</vh>
<v t="T638" a="C"><vh>&lt;&lt; Set delims to default values &gt;&gt;</vh></v>
<v t="T639"><vh>&lt;&lt; Set path from @file node &gt;&gt;</vh></v>
<v t="T640"><vh>&lt;&lt; Test for @comment or @language &gt;&gt;</vh></v>
<v t="T641"><vh>&lt;&lt; Test for @path &gt;&gt;</vh></v>
<v t="T642" a="C"><vh>&lt;&lt; Test for @pagewidth and @tabwidth &gt;&gt;</vh></v>
<v t="T643"><vh>&lt;&lt; Set current directory &gt;&gt;</vh></v>
<v t="T644"><vh>&lt;&lt; Set comment Strings from delims &gt;&gt;</vh></v>
</v>
<v t="T1854"><vh>directiveKind</vh></v>
<v t="T1855"><vh>error</vh></v>
<v t="T1856"><vh>skipIndent</vh></v>
<v t="T1857"><vh>readError</vh></v>
<v t="T1858"><vh>updateCloneIndices</vh></v>
<v t="T1859"><vh>writeError</vh></v>
</v>
<v><vh>Reading</vh>
<v t="T1860"><vh>createNthChild</vh></v>
<v t="T1861"><vh>joinTrees</vh></v>
<v t="T979" a="C"><vh>atFile.read</vh>
<v t="T980"><vh>&lt;&lt; open file &gt;&gt;</vh></v>
<v t="T981"><vh>&lt;&lt; Scan the file buffer  &gt;&gt;</vh></v>
<v t="T982"><vh>&lt;&lt; Bump mStructureErrors if any vnodes are unvisited &gt;&gt;</vh></v>
<v t="T983"><vh>&lt;&lt; Delete root's tree and body text &gt;&gt;</vh></v>
<v t="T984"><vh>&lt;&lt; Handle clone bits &gt;&gt;</vh></v>
<v t="T985"><vh>&lt;&lt; Join cloned trees &gt;&gt;</vh></v>
<v t="T986"><vh>&lt;&lt; Handle all status bits &gt;&gt;</vh></v>
</v>
<v t="T1862"><vh>readAll (Leo2)</vh></v>
<v t="T1863"><vh>scanDoc</vh>
<v t="T1864"><vh>&lt;&lt; Skip the opening sentinel &gt;&gt;</vh></v>
<v t="T1865"><vh>&lt;&lt; Skip an opening block delim &gt;&gt;</vh></v>
<v t="T1866"><vh>&lt;&lt; set kind, nextLine &gt;&gt;</vh></v>
<v t="T1867"><vh>&lt;&lt; Skip the leading stuff &gt;&gt;</vh></v>
<v t="T1868"><vh>&lt;&lt; Append s to out &gt;&gt;</vh></v>
<v t="T1869"><vh>&lt;&lt; Remove a closing block delim from out &gt;&gt;</vh></v>
</v>
<v t="T1199" a="C"><vh>scanHeader</vh></v>
<v t="T1870"><vh>scanText</vh>
<v t="T1871"><vh>&lt;&lt; set kind, nextKind &gt;&gt;</vh></v>
<v t="T1872"><vh>&lt;&lt; Set lineIndent, linep and leading_ws &gt;&gt;</vh></v>
<v t="T1873"><vh>&lt;&lt; append non-sentinel line &gt;&gt;</vh></v>
<v t="T1874"><vh>&lt;&lt; handle an ending sentinel &gt;&gt;</vh></v>
<v t="T1875"><vh>&lt;&lt; handle unexpected end of text &gt;&gt;</vh></v>
<v><vh>start sentinels</vh>
<v t="T1876"><vh>&lt;&lt; scan @+at &gt;&gt;</vh></v>
<v t="T1877"><vh>&lt;&lt; scan @+body &gt;&gt;</vh></v>
<v t="T1878"><vh>&lt;&lt; scan @+doc &gt;&gt;</vh></v>
<v t="T1879"><vh>&lt;&lt; scan @+leo &gt;&gt;</vh></v>
<v t="T949" a="C"><vh>&lt;&lt; scan @+node &gt;&gt;</vh>
<v t="T950"><vh>&lt;&lt; Set childIndex &gt;&gt;</vh></v>
<v t="T951"><vh>&lt;&lt; Set cloneIndex &gt;&gt;</vh></v>
<v t="T952"><vh>&lt;&lt; Set headline and ref &gt;&gt;</vh></v>
<v t="T953"><vh>&lt;&lt; Check the filename in the sentinel &gt;&gt;</vh></v>
</v>
<v t="T1880"><vh>&lt;&lt; scan @+others &gt;&gt;</vh></v>
</v>
<v><vh>unpaired sentinels</vh>
<v t="T1881"><vh>&lt;&lt; scan @delims &gt;&gt;</vh></v>
<v t="T1882"><vh>&lt;&lt; scan @ref &gt;&gt;</vh></v>
<v t="T1883"><vh>&lt;&lt; scan @verbatim &gt;&gt;</vh></v>
<v t="T1884"><vh>&lt;&lt; scan @@ &gt;&gt;</vh></v>
</v>
<v t="T1885"><vh>&lt;&lt; warn about unknown sentinel &gt;&gt;</vh></v>
</v>
</v>
<v><vh>Writing</vh>
<v t="T529" a="C"><vh>os, onl, etc.</vh></v>
<v t="T1886"><vh>putBody</vh></v>
<v t="T1887"><vh>putBodyPart (removes trailing lines)</vh>
<v t="T1888"><vh>&lt;&lt; put code/doc parts and sentinels &gt;&gt;</vh></v>
</v>
<v t="T954" a="C"><vh>putCodePart &amp; allies</vh>
<v t="T955"><vh>&lt;&lt; handle the start of a line &gt;&gt;</vh>
<v t="T956"><vh>&lt;&lt; handle @others &gt;&gt;</vh></v>
<v t="T957"><vh>&lt;&lt; put @verbatim sentinel if necessary &gt;&gt;</vh></v>
</v>
<v t="T958"><vh>&lt;&lt; put the line &gt;&gt;</vh>
<v t="T959"><vh>&lt;&lt; put possible section reference &gt;&gt;</vh></v>
</v>
<v t="T960"><vh>isSectionName</vh></v>
<v t="T961"><vh>inAtOthers</vh></v>
<v t="T962"><vh>putAtOthers</vh></v>
<v t="T963"><vh>putAtOthersChild</vh></v>
<v t="T964"><vh>putRef</vh></v>
</v>
<v t="T1889"><vh>putDirective  (handles @delims)</vh>
<v t="T1890"><vh>&lt;&lt; handle @delims &gt;&gt;</vh></v>
</v>
<v t="T1891"><vh>putDoc</vh></v>
<v t="T530" a="C"><vh>putDocPart</vh>
<v t="T531"><vh>&lt;&lt; copy words, splitting the line if needed &gt;&gt;</vh></v>
</v>
<v t="T1892"><vh>putIndent</vh></v>
<v t="T686" a="C"><vh>atFile.write</vh>
<v t="T687"><vh>&lt;&lt; Open files.  Set orphan and dirty flags and return on errors &gt;&gt;</vh></v>
<v t="T688"><vh>&lt;&lt; put all @first lines in root &gt;&gt;</vh></v>
<v t="T689"><vh>&lt;&lt; Warn about @ignored and orphans  &gt;&gt;</vh></v>
<v t="T690"><vh>&lt;&lt; Replace the target with the temp file if different &gt;&gt;</vh></v>
</v>
<v t="T1893"><vh>writeAll</vh>
<v t="T1894"><vh>&lt;&lt; Clear all orphan bits &gt;&gt;</vh></v>
</v>
</v>
<v><vh>Testing</vh>
<v t="T1895"><vh>scanAll</vh></v>
<v t="T1896"><vh>scanFile</vh>
<v t="T1897"><vh>&lt;&lt; open file &gt;&gt;</vh></v>
<v t="T1898"><vh>&lt;&lt; Scan the file buffer  &gt;&gt;</vh></v>
</v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="T1">@nocolor</t>
<t tx="T2">Change c.initJoinedCloneBit to c.initJoinedCloneBits in the undo/redo logic.</t>
<t tx="T3">This was a bit of a fiasco.  I updated CVS without a real test.  Hopefully I'll learn from this.

Anyway, the REM hack is as follows:  Leo will convert underscores in the @comment directives to significant spaces.  For example,

@comment REM_

causes the comment delimiter to be "REM " (Note the trailing space).

I originally inserted a skip_space in sentinelKind where the comment was "Do not skip spaces here!".  However, I eventually settled on a better solution, namely making spaces significant in scanHeader. To quote from scanHeader:

"Leading whitespace is now significant here before the @+leo.  This is part of the "REM hack".  We do this so that sentinelKind need not skip whitespace following self.startSentinelComment.  This is correct: we want to be as restrictive as possible about what is recognized as a sentinel.  This minimizes false matches."</t>
<t tx="T4">The "comment" code was looking for "language", not "comment" in dict.</t>
<t tx="T5">I'm proud of the code: it is simpler, clearer and more general than the previous code.

There were several important breakthroughs:

1. The old divideSplitter routine had hard binding to various panes.  This was wrong.  The new divideAnySplitter routine uses params for all frames, so it can be general.

2. The key invariant is that self.splitVerticalFlag tells the alignment of the main splitter.  Getting clear about this was crucial to making everything work.  I could then split the old divideSplitter routine into divideLeoSplitter and divideAnySplitter.  Once that happened, everything just worked when I changed self.splitVerticalFlag from true to false in frame.__init__ (!!)

3. We shouldn't ever delete any frames when toggling the split direction.  It's just too hard to reinitialize them.  The key to making this happen are:

a) the calls to pack_forget and
b) creating placeSplitter from the old createSplitter (now createLeoSplitter) code.

4. The key invariant allows us to define onDragMainSplitBar and onDragMainSplitBar instead of the old onDragVSplitBar and onDragHSplitBar. The new routines work regardless of split direction, so we don't have to rebind the split bars when the split direction changes.</t>
<t tx="T6">Change c.initJoinedCloneBit to c.initJoinedCloneBits.</t>
<t tx="T7">Added @root node to root of tree and eliminated @language and @others directives.</t>
<t tx="T8">Importing a Python file containing classes without methods results in nested classes.  A workaround is to insert a dummy method in each class.

The fix was to define classIndent and defIndent variables, and to ensure that we break on equality with these values.  Also changed code to generate reference to methods only if methods or nested classes were seen.

There is still a minor bug:  The following

class A:
	pass

Puts the pass statement in &lt;&lt; class A declarations &gt;&gt;.  This bug is not so easy to fix, and it is easy to correct by hand.</t>
<t tx="T9">Importing the following file creates orphan nodes for declaration.

import sys # This line becomes an orphaned node
class C:
    xyz = 'xyz' # This line becomes an orphaned node
    def __init__(self):
        pass

The fix was in &lt;&lt; Create a child node for declarations &gt;&gt;.</t>
<t tx="T10">Importing the following script

class C:
    def __init__(self):
        pass

created an outline with class C appearing in two nodes, something like:

class C:
        class C:
                def __init__(self):
                    pass

The fix was to &lt;&lt; Append a reference to class_vnode's methods &gt;&gt;.</t>
<t tx="T11">This fixes a bug involving clone bits, and is much faster than calling c.initAllCloneBits.  The code involves c.moveOutlineRight and similar code in the undo and redo logic.</t>
<t tx="T12">Verified that u.undoReplace will handle all clones properly.  c.copyTree simply makes copies of all tnodes after v.copyTree has actually copied the tree.  These are really simple and elegant routines.</t>
<t tx="T13">The new "replace" paradigm greatly simplifies complex undo.  The ahas:

1. swap_links is a very simple way of replacing trees.
2. The caller of swap_links can easily redo join lists and clone info.
3. We need to use new tnodes in copied trees.  This hasn't been done yet.
4. Undo and redo use exactly the same code.</t>
<t tx="T14">The aha is this: the import commands are in essence nothing but an insertion of a tree rather than a single node, so exactly the same code will work for undo and redo!</t>
<t tx="T15">@ It is often useful to print a traceback message when a try block unexpected fails.  This can be done as follows:
@color

import traceback
try:
	...
except:
	# traceback.print_exc()
	pass</t>
<t tx="T16">This is important, because it means that invalid entries in, say, the Default Tangle Directory preference will no longer abort an attempted read.</t>
<t tx="T17">This is a little tricky.  The general rules are:

1. Settings in the [override .leo file prefs] section of leoConfig.txt override similar settings that exist in the &lt;preferences&gt; element in .leo files.

2. You may cancel this overriding by using "ignore" (without the quotes) as the value of a setting in leoConfig.txt.  For example:

[override .leo file prefs]
tab_width = ignore

In this example, Leo will use the tab width in each .leo file, or a default value if it doesn't exist.

3. Leo won't write overridden settings to .leo files.

The actual rules are as follows:

1. If a setting is not found in either the [override .leo file prefs] section of leoConfig.txt or the preferences section of the .leo file, Leo uses a default, hard-coded value.

2. When reading a .leo file, Leo will use settings in the [override .leo file prefs] section of leoConfig.txt unless the value of the setting is "ignore" (without the quotes).  Case is insignificant when specifying the value of default_target_language.

3. When writing leoConfig.txt, Leo will write settings in the [override .leo file prefs] section of leoConfig.txt if the setting exists in leoConfig.txt and its value is not "ignore" (without the quotes).

4. When Leo saves a .leo file, Leo updates leoConfig.txt (using rule 3) and Leo will write a Preferences setting to the .leo file only if the setting will not be written to leoConfig.txt using rule 3.  NB: this rule does not change Leo's file format because all atrributes of the &lt;preferences&gt; element have always been optional.

5. Leo will update leoConfig.txt (using rule 3) whenever the user closes the Preferences Panel successfully.

As the result of these rules, changes made in the Preferences Panel will become permanent immediately if the the setting will be written under rule 3.  Otherwise, the change will become permanent when any .leo file is saved.

I believe these rules are flexible and good.</t>
<t tx="T18">These commands convert an entire tree.</t>
<t tx="T19">It is important not to change the c. copies of these ivars.</t>
<t tx="T20">These are actually quite nice to have, and they are possible only because we have a modal dialog.</t>
<t tx="T21">This makes it absolutely clear what is happening.</t>
<t tx="T22">Added @language to all @file nodes.  This is good style.</t>
<t tx="T23">Gary Herron suggested this change.  This affects a number of commands.  Apparently this makes a difference in Linux...</t>
<t tx="T24">This allows us to remove the c.setIvarsFromPrefs routine.  I have left it in as a reminder of what needed to be done formerly.

Removed app().prefs and all references to it.</t>
<t tx="T25">This variable should _not_ be eliminated!  It is needed when reading the .leo file for the first time.</t>
<t tx="T26">These commands now set self.mFileName only if the dialog succeeds.  This is much more natural.</t>
<t tx="T27">This was a weird one.  I have no idea what I was thinking about!  Using c.openDirectory makes absolutely no sense.  Probably the c.openDirectory ivar should go away!</t>
<t tx="T28">The whole preferences issue needs rethinking and reworking...</t>
<t tx="T29">DEMOTE:

  Doc: The Demote command makes all the siblings of a node children of
  the node.

  Reality: Not quite: it makes all sibilings WHICH FOLLOW a node into
  children
</t>
<t tx="T30">LOG WINDOW:

  Doc: The Open Log Window command opens the window, and the Close Log
  Window command closes it.  Only one of these commands is present in
  the Window menu at any time.

  Reality: These don't seem to exist.
</t>
<t tx="T31">INSERT HEADLINE:

  Doc: The Insert Headline command inserts a new headline as the next
  sibling of the currently selected headline.  If the root headline is
  selected, this command inserts the new headline as the first child
  of the root.

  Reality: Insert Headline appears to insert a child if the current
  headline has any children, and it appears to insert a sibling
  otherwise.
</t>
<t tx="T32">EXTRACT SECTION COMMAND:

  Doc: The Extract Section command creates a new node ...

  Reality: The menu item is highlighted (no mater what the first line
  contains), but NOTHING HAPPENS (no mater what the first line
  contains).

Leo.py works correctly.  Fixed docs.</t>
<t tx="T33">SYNTAX COLORING

  Is never highlighted so can't be used


FONT PANEL:

  Is never highlighted so can't be used

</t>
<t tx="T34">At long last cut/paste works properly!

1.  The way to get the contents of the clipboard is:

s = app().root.selection_get(selection="CLIPBOARD")

The following does _not_ work:

s = app().root.selection_get(selection="clipboard")

2.  Added stringIsValidMoreFile and convertMoreStringToOutlineAfter to leoImport.py.  These routines just convert the string to an array and call stringsAreValidMoreFile and convertMoreStringsToOutlineAfter.

3.  Removed app().clipboard ivar.</t>
<t tx="T35">Once again, things are easier with Python than I expect.  The ConfigParser class is quite nice: it gives a flexible framework for all kinds of preferences.  It would be good to move most, if not all, preferences into this framework.

Note: we no longer need to change the format of .leo files to handle new kinds of preferences!  Indeed, we can just define new sections of leoConfig.txt!

Leo reads and writes leoConfig.txt.  Leo looks first in sys.leo_config_directory.  If that has not been set in sitecustomize.py, then Leo looks in app().loaddir.

</t>
<t tx="T36">This assert isn't useful and doesn't have to be true.</t>
<t tx="T37">Added code to recover the old .leo file if the write fails.  We create a backup (.bak) file by renaming the .leo file if it exists.  If there is a write error, we rename the .bak file back to .leo.  Otherwise, we just delete the .bak file.</t>
<t tx="T38">This was so easy...It should have been done ages ago.</t>
<t tx="T39">LeoDocs.leo now matches Leo's web site as closely as possible.  At this point, I consider Leo's documentation completely finished.</t>
<t tx="T40">The solutions to the control-H bug was to call v.edit_text.focus_force() in tree.editLabel().

Adding a call to es() in endEditLabel() makes everything work, at least on XP, but this is too strange.  I finaly fixed the problem by having c.insertHeadline call c.endUpdate(false) followed by c.tree.redraw_now().  This is pretty kludgy. Apparently the call to c.endUpdate() was redrawing the outline after the headline had been selected, with the usual bad results.  </t>
<t tx="T41">I removed a binding that resulted in double-clicks in headlines expanding or contracting nodes.  You can expand or contract headlines now by double-clicking a node's headline or by clicking its plus/minus box.

This change was requested by Bill Drissel.</t>
<t tx="T42">I have spent quite a bit of time on getting dragging to work as smoothly as possible.  This has been made more difficult because I know of know way of reading the state of the mouse button without generating a mouse-moved event.

To start a drag, press the main (left) mouse button while the cursor is over the icon for a node.  The cursor will change to a hand icon. Continuing to drag the mouse will scroll the outline pane if the hand cursor moves above or below the outline pane.  If you release the mouse button while the hand cursor is above another icon, Leo will move the dragged node after the node over which the cursor rests.  If you release the mouse button when the hand cursor is not over an icon, Leo will print "not moved" and leave the outline pane as it is.  This can result in the dragged node not being visible on the screen, but it seems less alarming not to force the current node to become visible as that would undo any scrolling that has just been done.

As usual, there are a number of details.  

1. Leo only allows dragging from one icon to another.  In particular, you can't move a node to the first child of another node unless that node is already expanded.   I experimented with automatically open nodes when the cursor moves over an unexpanded node with children.  However, this was highly confusing.  It seems less alarming to expand and contract nodes explicitly. 

2. Leo scrolls the outline pane as the result of mouse-moved events, so to continue scrolling you must keep moving the mouse.  I experimented with scrolling the outline pane whenever the cursor is dragged outside it, but the results are not good.  There was a noticable delay between releasing the cursors and halting the scrolling.  The present code is simpler and more likely to work on all platforms.</t>
<t tx="T43">Note that tangle.scanAllDirectives already did this.</t>
<t tx="T44">es() failed if log is None because log.newlines does not exist.  The new code alters log.newlines only if log is not None.</t>
<t tx="T45">Leo takes an exception.  It may be because tcl 8.3.4+ is required.  The download tcl is 8.3.4.2, but I'm not sure what version is included in Python 2.2.1.</t>
<t tx="T46">In particular, the theory of operation for Tangle and Untangle was eliminated by mistake several months ago.</t>
<t tx="T47">There were two problems in this area.  First, v.moveToRoot wasn't preserving the tree when a node was moved to the root.  This caused nodes to disappear.  Second, the code wasn't taking care to change c.tree.rootVnode as needed when nodes moved up or down.

Several important routines had to be changed.  v.moveAfter and v.moveToNthChild now are careful to set c.tree.rootVnode if the root changes.  I hacked v.moveToRoot and v.linkAsRoot so that they update c.tree.rootVnode only if the oldRoot param is not None.  This allows the init code to work properly, and allows the v.moveToRoot routine to properly link in the rest of the tree.  The undo and redo code now use the new param to v.moveToRoot.</t>
<t tx="T48">@nocolor

The new code isn't great, and it seems to solve the immediate problem.

@color

try: # 5/27/02: We can get Unicode strings here via cut/paste.
	try:
		self.outputFile.write(s)
	except UnicodeError:
		self.outputFile.write(`s`)
except:
	es("error writing:" + `s`)</t>
<t tx="T49">After creating some clone nodes with the Borland version of Leo, LeoPy.leo was corrupted.  Reading the damaged file with Read Outline Only works, so apparently the problem involves the clone indices in the derived files.

The problem was that not all the code in atFile::updateCloneIndices got copied back to the Borland code.  In particular, clone indices were not cleared before being reassigned!</t>
<t tx="T50">Added skip_matching_delims utility function.</t>
<t tx="T51">Removed extra whitespace between sections.

Fixed bug in convertCodePartToWeb: added code to skip @file line.</t>
<t tx="T52">This was an attempt (probably futile) to fix a crash in cut/paste logic.</t>
<t tx="T53">This allows the the last filename used to be the default for the Outline To Noweb dialog.</t>
<t tx="T54">We generate &lt;&lt;*&gt;&gt;= only if no file name is given in @root or @file.  The old code always generated * for @root.

Also, changed &lt;&lt; append head_ref &gt;&gt; so that @c generates &lt;&lt;fileName&gt;&gt;= instead of &lt;&lt;*&gt;&gt;= whenever possible.</t>
<t tx="T55">I rewrote isDocStart.</t>
<t tx="T56">Moving an outline up before the "root" node hung in v.setDirty.

The fix was in c.moveOutlineUp: we must call v.moveToRoot, followed by back.moveAfter.  To make this work, v.moveToRoot must leave the mFirstChild link unchanged.

Fixes were also needed in undo.undo() and undo.redo() to handle this special case.</t>
<t tx="T57">This fixed a bug that caused Leo to hang when syntax coloring noweb code with the CWEB syntax colorer.</t>
<t tx="T58">This routine must take into account the kind of file being imported.</t>
<t tx="T59">There are many details here.  The present code handles substantial code well, and looks good.</t>
<t tx="T60">The green used by IDLE looks really good to me.</t>
<t tx="T61">The code now purports to work for both CWEB and noweb files.</t>
<t tx="T62">Outline To Noweb creates &lt;&lt; * &gt;&gt; sections when it doesn't know what name to give something.  This may be partially correct, or entirely wrong.</t>
<t tx="T63">Please note that the same mechanisms work unchnaged for both @root and @file trees.</t>
<t tx="T64">I hacked the Python and Java code (hacks on hacks) to insert nodes to carry @others commands when generating @file trees.  The Python code now handles nested classes fairly well.

At this point I'm not sure what is a bigger kludge, the "parsing" parts or the "code generation" parts.  I really don't want to do full parsing here, but the present code is pretty wild.  OTOH, it works.

Fixed bug in skip_pascal_string.

Split the Import Files command into Import To @file and Import To @root.</t>
<t tx="T65">Debugged the Import Files command for .py files.  The main problems were getting the params to the scanPythonX routines correct: these were just transcription problems.

Fixed 2 bugs in the colorizer: it wasn't handling Python triple strings or C preprocessor directives properly.

Fixed a bug in skip_python_string.  It was returning the start of the ending delim, not past it.</t>
<t tx="T66">It only took an hour.  I am amazed this hasn't been done long ago.</t>
<t tx="T67">Issue the "reading:" message only if the file can be opened.
Eliminated the #--- error reading x" message before read errors.</t>
<t tx="T68">Added a return value to update_def so that skip_body can tell if a node has been changed.  skip_body now calls v.trimTrailingLines only if the node has changed.</t>
<t tx="T69">Untangle was setting the pane changed even when not reporting any changes.  This was due to a call to v.trimTrailingLines.  Changed v.setBodyStringOrPane so that it calls c.setChanged and v.setDirty only if the new text is different from the old, but this doesn't completely solve the problem.</t>
<t tx="T70">These are helpful in leo.py because the commands are slower than in LeoCB.</t>
<t tx="T71">The code mistakenly set part to zero before calling update_def, with the result that the wrong parts were compared.  This simple blunder took several hours to find.</t>
<t tx="T72">Documented new file format, unlimited undo/redo, auto indent, Contract Parent and Sort Siblings commands.</t>
<t tx="T73">Note: this code is still untested and very likely has major bugs.</t>
<t tx="T74">I did this to reasssure myself that such changes were benign, and they are: all files Tangle and Untangle as before.  Also, @space (or @doc) is needed at the start of all doc parts so that Leo2 will syntax color them properly.

This took quite a bit of time, and I really should do this for all of LeoCB.leo, or alternatively, convert all of LeoCB.leo to @file trees.  I'll probably leave this as an exercise for someone else to do ;-)  Actually, the proper way to do this is probably to write a Python script.</t>
<t tx="T75">The code is straightforward.</t>
<t tx="T76">Fixed &lt;&lt; Scan and define an @code defininition &gt;&gt; and &lt;&lt; Scan and define a section definition &gt;&gt; in skip_body.  The calls to skip_code were setting k, not i.  I'm not sure how Tangle could ever have worked before.  Perhaps a reversion of some kind.

With these fixes, all files are tangled identically by LeoCB and leo.py.

Removed trailing lines in code part in st_enter.  With this change almost all files compare identical except those containing (!newline).  Fixed a bug in put_section which caused whitespace not to be properly output after (!newline).  With this fix leo.py tangles all files in tangleTest.leo exactly the same as LeoCB!</t>
<t tx="T77">One bug remains in the Borland version and will probably never be fixed: Preferences settings do not stick to windows.  This is a result of using the arg_xxx vars rather than ivars.</t>
<t tx="T78">It is intolerable to have misleading syntax coloring.  The syntax colorer treats @c just like @code.  Tangle must do the same.</t>
<t tx="T79">Made the root arg optional.  If present it is a list with one element and is_special_bits checks for @root.  We pass a list of one element to is_special_bits so we can distinguish between None and [None].

Removed @owncolor code.</t>
<t tx="T80">In leoFrame.py: make the font size platform-dependent.
In leoTree.py: use os.path.join to join Icons and file names.</t>
<t tx="T81">''' wasn't handled like """</t>
<t tx="T82">pychecker is a marvelous tool.  It fixes most of the problems that compilers fix.</t>
<t tx="T83">Caught by pychecker:  the call to special_bits was missing the i param.  This would cause a fault when executed.</t>
<t tx="T84">changed mStartSentinelComment to self.startSentinelComment.
changed mEndSentinelComment to self.endSentinelComment.</t>
<t tx="T85">changed writeError to self.writeError.</t>
<t tx="T86">Changed message to self.message in BadLeoFile.__init__.

Changed param to es in getTnode().</t>
<t tx="T87">Initialized s to "" in moreHead.

Note: v.trimTrailingLines does nothing(!)

removed v.saveOutlineWithLevel.  This uses dvnodes and is old, old code.

removed v.setThreadLinks.  This was a bad idea that should have gone away a long time ago.</t>
<t tx="T88">x Changed all arg_ vars to ivars in scanAllDirectives:
	arg_present_language --&gt; self.language
	arg_tab_width --&gt; self.tab_width
	arg_page_width --&gt; self.page_width
	arg_use_header_flag -&gt; self.use_header_flag
	These will affect the @comment and @language directives!
x Changed set_root_delims() to self.set_root_delims()
x Changed end_sentinel_len to len(end_sentinel)
x Changed sentinel_end to self.sentinel_end in scanDerivedFile.
x Added c = self.commands in massage_block_comment. (This routine is never used, though).
x Removed extra param to match in put_section.
x Initialized code = None in skip_body.
x Initialized path in untangleRoot before error messages that use path.
x Used marked_flag properly in untangleMarked.</t>
<t tx="T89">A weird one: LeoCB was removing the last character (typically half of a cr-lf combination), probably in the mistaken belief that it was an end-of-file character.  Geeze:  how do C++ programs ever work when you have to deal with minutia like eof marks and 2-character newlines.  Tk has really spoiled me.

I added code to leo.py to ensure that even compressed derived files end in a newline, which will help.</t>
<t tx="T90">Emailed Guido.  He indicated that the fix just involves filenames, so I took a look at it immediately.  Used Leo to study the code and made a simple fix.</t>
<t tx="T91">This fixes a serious hole in Leo:  The read logic would crash (report corrupted sentinels) if what follows a reference looked like a sentinel line!</t>
<t tx="T92">It turns out to be easy to suppress newlines between sentinels.  It is a bit harder to make the read logic work properly.

By single-stepping through the Borland code (which also fails when newlines are suppressed) I see that there is logic in scanText that checks for a non-blank line after a +body sentinel!  By adding a check to see that the next line is not another sentinel line we can make the read logic work properly.

I wonder: suppose the text after a reference looks like a sentinel?  What happens then?</t>
<t tx="T93">Fixed a bug that for all languages (like Python and Perl) that do not have block comments.  The change was to update_def.</t>
<t tx="T94">Three characters were colored blue at the start of a section def in:
  &lt;&lt;name&gt;&gt;=
The fix was to change k to 2 in one spot.</t>
<t tx="T95">This is the only undoable command.  Now it puts up a dialog saying that.</t>
<t tx="T96">Optimize Undo Typing by suppressing the "oldText" entry in the dict if the previous entry was "Typing" and the vnode match.  This optimization saves almost half the space used in the bead list!

Verified that the Change All and Read @file Nodes commands call clearUndoState().

The "Cut", "Copy", "Delete", "Change", "Convert Blanks", "Indent", "Undent" are now undoable.  The only change was a new param to the body key handler.

Created onBodyWillChange event handler.  We must distinguish between commands like "Find, Then Change", which must call onBodyChanged, and commands like "Cut" and "Paste" that must call onBodyWillChange.  The former commands have already changed the body text, and that change must be captured immediately.  The latter commands have not changed the body text, and that change may only be captured at idle time.

Keystrokes in the headline are now undoable.</t>
<t tx="T97">The code is hardly more complex than the old limited code.  In many places it is simpler.

The code now saves only the "optional" ivars that are non-None.  This should be an important space optimization for "Undo Typing".

While messing with Undo in the body pane I realized I could simplify idle_body_key a bit.  I believe this is important.</t>
<t tx="T98">alt-v now work in @nocolor mode.</t>
<t tx="T99">Almost all of the logic is language independent!

Added keywords for c,pascal,perl &amp; python.</t>
<t tx="T100">skip_doc must test for actual strings, not the return value from token_type.</t>
<t tx="T101">This was a fix to the syntax colorer only.

Also colored the equal sign in &lt;&lt;name&gt;&gt;=.</t>
<t tx="T102">Added undoers for Cut/Past Node commands and Sort commands.

Apparently the Copy Node command has no undo consequences.

Added calls to clearUndoState for Read and Import commands.  Actually, the Import commands could easily be undone: they are just like insert commands.

Decided not to clear the undo state after Save commands.  Do so is confusing and seems pointless.  I may revisit this issue when implementing Unlimited Undo.</t>
<t tx="T103">These are not present in the CVS tree.  They should be.

c2py.py, openLeo.py, tangle_done.py, untangle_done.py, __init__.py.</t>
<t tx="T104">Most problems had to do with changing c.undoX to c.undoer.undoX or u.undoX.

Everything with an undoer now works.

Cut/Copy/Paste Nodes have no undoers.
Sort commands have no undoers.</t>
<t tx="T105">Apparently WinCVS is set up appropriately.  Remember to use my corrct password

Did a checkout from the create menu and everything went well!</t>
<t tx="T106">It is clear that broken clone links can't be mended automatically.  That is, Leo can't be made significantly more CVS friendly.  That being so, let us consider how to use CVS with Leo.

Our goal is this: we don't want clone links to break when we check derived files into or out of the repository.  In general, clone links will break whenever we a read derived file from a .leo file different from the .leo file that created it.  So to meet our goal we must obey the following rules:

Rules for using Leo files with CVS:
	
1. All derived files in a particular revision in the CVS repository must be generated by a single .leo file. Call that file the _generating_ .leo file (for the revision as a whole and for each derived file in particular).
	
2. When we check out files from the repository we must check out the generating .leo file in addition to the derived files that we are checking out.

3. When we check in files to the repository we must check in the single .leo file that generated the derived files that we are checking in.

4. When CVS detect update conflicts in derived files, developers must resolve those conflicts in a "merged" .leo file.  All derived files that are later checked in must be derived from this .leo file.  When creating this merged .leo files, developers should take care to retain clone links.  

These rules make a virtue out of necessity.  I always envisioned that update conflicts would have to be resolved in .leo files rather than derived files.  What I now see is that this is the also the only way to prevent clone links from being broken.</t>
<t tx="T107">Just after I completed the Mending Dialog I realized that the concept behind this dialog was fatally flawed: cloned nodes must have the same structure!

Indeed, at the time the Mend Clone dialog is put up, the user would have no way of knowing whether any joins made sense.  Conceivably Leo could test for structural simularity, and in that case this dialog would be useless.  Note: many read errors arise from structural mismatches; clones could never be mended properly in those cases.

About the only situation in which mending would be possible is if the only differences between trees were outline differences.  This suggests that we don't test headline text at all and just rely on structure identity.</t>
<t tx="T108">This dialog returns a list of pairs of names.  It is up to the caller to associate the names with vnodes.</t>
<t tx="T109">Moved these out of the frame class: the undo class also uses them.</t>
<t tx="T110">We want to remove only the leading whitespace present on the first line, not all leading whitespace!

Also, the Extract Section command was deleting the section reference line.

I could have sworn I tested these commands.  Apparently not.</t>
<t tx="T111">It appears that DnD will be straightforward: probably less then 100 lines of code!</t>
<t tx="T112">Removed "blank" and "tab" tags on entry.  I thought I did this!  Anyway, it remains to be seen whether this has any effect on the "disappearing" selection bug.

I did some perfunctory tests on the various find/change commands and everything appears to be working well.  We shall see...</t>
<t tx="T113">Made headlines longer in tree.headWidth(). Sometimes the right edge of a headline was being cut off.  This must be a Tk bug, and the workaround is easy enough.</t>
<t tx="T114">Cleaned up the code in several ways.  Some of these have been bugging me for a while.

Yesturday I realized that the proper time to clean up code is just _after_ a release.  That way the new code will be thoroughly tested before the next release.

c.tree.currentVnode -&gt; c.currentVnode()
Used keyword.iskeyword() in leoColor.py to test whether a word is a Python keyword.
Used string.endswith() in Import code.
Renamed is_c_word() to match_c_word() to be compatible with the match and match_word names.</t>
<t tx="T115">This is used in v.sortChildren and in leoImport.sort testing routine.  Apparently the latest code is about the best that can be done.  Passing a param to the list.sort() routine might seem elegant, and apparently it is slow.  Also, it is not clear how to pass the "n" param to the sort routine. I might challenge the net to do better, but the present code works and is fast, general, elegant and clear.</t>
<t tx="T116">Experimented with using Python's inspect module.  However, it doesn't provide nearly the level of parsing needed for Leo's import commands.  We need access to the entire parse tree.  It is probably possible...</t>
<t tx="T117">Removing from leoUtils import * from reload_all() will cause problems.  The only workaround appears to quit Python when modifying leoUtils.  Sigh.</t>
<t tx="T118">This is a really useful command!</t>
<t tx="T119">This is quite tricky code.  To capture changed values we typically must set a commands method that calls an idle routine. We can't capture the values by binding Button clicks because values haven't changed yet, or so it seems.

Anyway, the preferences panel settings now appear to "stick" to the presently active window.

The print_prefs routine was vital to sorting out what was happening.</t>
<t tx="T120">Now the real work begins.</t>
<t tx="T121">This will serve as a start for CVS.</t>
<t tx="T122">Added commands handler for all radio buttons.  There was a timing problem: it took 2 clicks to set the current language.  Also added code to recolor the body pane immediately.</t>
<t tx="T123">It is vital that @file nodes remain dirty until they are written without errors.  Otherwise, a Save command will succeeed without warning, and a later read may cause the dreaded "clones have been cleared" message.</t>
<t tx="T124">The settings in the Preferences panel now "stick" to the current window.  This turns out to be very important for Tangling: I ran into serious problems with Tangling to the wrong directory when more than one window was open.</t>
<t tx="T125">This turns out to be more useful than Sort Children.</t>
<t tx="T126">All the "Tangle" Constants must be defined in the same place.  It turns out that leoUtils no longer use any of these constants anyway, so I moved them to leoTangle where they have always belonged.

scanError() is now the only part of leoUtils that uses Tangle data.  It accesses the commands instances using the top() function.  A kludge...

In any event, when I split them I also defined some new values, so values from leoGlobals.py overlapped with values from leoTangle.py.  It is a good thing I caught the problem now...</t>
<t tx="T127">Moved the tangle constants into the tangle class.

Changed header to self.header in an error message in scanAllDirective.

The source of the "mismatch" in Utils.h was that somehow I inserted @c into the root of Utils.h, which should produce errors, and eventually it did.</t>
<t tx="T128">I reset the default tangle directory while doing regression testing, then saved LeoPy.leo.  This destroyed files LeoPy directory, I'm not sure how, so I had to revert.  All looks well now.</t>
<t tx="T129">There was a problem with a global change command.  I'll have to do a full regression test of Tangle.  This would be a good time to use the new whitespace utility routines.</t>
<t tx="T130">This was the result of a Change All disaster.</t>
<t tx="T131">We have to update s_text as well as c.body so that another call to search on the same line will find the updated text.</t>
<t tx="T132">Newlines now set the dirty bit.

We increase auto indent after a colon.  This should happen only for Python mode...</t>
<t tx="T133">Once again, I am astounded at how easy this is.</t>
<t tx="T134">Convert Blanks now converts the entire body pane if there is no selected text.</t>
<t tx="T135">It is doubtful that leo.py will ever support a Print command directly.  Rather, users can use export commands to create text files that may then be formatted and printed as desired.  Tk does provide print support.</t>
<t tx="T136">Only blanks and tabs are shown, and they not very well.

What we need is a font that shows blanks and tabs as descent symbols for blanks, tabs and newlines.</t>
<t tx="T137">The key is that two things have to happen:

1. Menu items should be enabled only when focus is in the canvas pane.
2. Bindings for for the outline commands should be added only to the canvas pane.</t>
<t tx="T138">A useful convenience method that makes it much clearer what is going on.</t>
<t tx="T139">Sherlock attempts to read the file SherlockArgs.  If found, each line is assumed to be a separate sherlock argument.

However, the main improvement is defaulting empty arguments to "+*".  This makes tracing as easy to use as print statements.

Could trace accept multiple arguments, just like print?  No: we would lose the ability to specify tracepoints by default.  There is no need to duplicate print!</t>
<t tx="T140">Very easy to do, compared with other systems.</t>
<t tx="T141">This should solve some compatibility problems.</t>
<t tx="T142">Alt-1 refers to Alt-Button-1, not Alt-Key-1 (!)</t>
<t tx="T143">Changed frame.put routines so that they return during quitting.

Also removed trace statements from __del__ routines.</t>
<t tx="T144">We must be careful to enclose all find/change code in c.beginUpdate/c.endUpdate(false) so a redraw after the call to tree.redraw_now() in find.showSuccess won't deselect the headline text.

It would be elegant to cancel any pending redraw in tree.redraw_now, and that does not seem to work.

Because we don't always redraw the screen, we must update icons "by hand" by calling c.tree.drawIcon.

It is very tricky to compute self.in_headline correctly.

Perhaps a more sensible approach would be to have the tree.redraw routine save and restore the editing status and selection of the current headline.  However, the present code works and minimizes redraws, so there isn't much incentive...</t>
<t tx="T145">The idea was that if all drawing happens at idle time we could do the following:

	Eliminate all c.beginUpdate()
	Eliminate all c.endUpdate(false)
	Replace c.endUpdate() with c.redraw()
	Replace c.endUpdate(flag) with if flag: c.redraw()
	
However, the find command needs to _prohibit_ drawing, and there doesn't seem to be a clean way to do this, so using c.endUpdate(false) seems to be needed.

In other words, without c.endUpdate(false) we would need c.cancelDrawing(), and this doesn't seem any cleaner than the present code.</t>
<t tx="T146">I messed things up when I "optimized" the redraw code.  The Find code must redraw the screen _before_ making selections in the headline--otherwise the headline becomes inactive.</t>
<t tx="T147">Altered the Cut/Copy routines so they set Leo's internal clipboard (app().clipboard).  So to cut from LeoCB to leo.py do the following:

Copy the tree in LeoCB.
Paste the tree into empty body text of leo.py.
Select all the body text and paste.
Move to the tree view, and do a Paste Node.

Yes, this is very clumsy, but how often do we want to transfer information between LeoCB and leo.py?</t>
<t tx="T148">This is defensive programming.  Only a few event handlers override body handlers:  These include Control-I, Control-T and Control-D.

Exception: the command handlers for cut/copy/paste must _not_ return "break"!  The actual work is done by the Tk.Text widget.</t>
<t tx="T149">Now that event handlers return "break" they can do things involving focus that they could not do before.</t>
<t tx="T150">This is done in frame.createAccelerators().  For the first time leo.py handles keystrokes properly!

We could override _all_ body pane keys, and this would be dangerous until all event handlers return "break."  Indeed, doing so would create duplicate bindings, one for frame.top and one for frame.body, so without a "break" the command would be done twice!</t>
<t tx="T151">Event scripts need only return the string "break" to inhibit all further event processing!  This is what I have been missing all along, and it was staring me right in the face.  Sheesh.

This eliminates the need for several kludgy workarounds:
	The double-click event handler no longer needs to wait till idle time.
	The c.moveDown routine no longer needs to call c.select.

Another breakthrough.  Way down at the bottom of the Tk.Text documentation I discovered a list of all the key bindings defined by default in Text widgets.  This includes Control-O, which explains why body text sometimes had blanks lines inserted at the top. (Amazingly, Control-O never seems to have split lines, purely by luck.)

I can now use control-I to insert nodes again!</t>
<t tx="T152">This is similar to the double-click logic!</t>
<t tx="T153">We must compute the word to be selected before the Tk.Text widget does its default double-click handling, then actually select the text at idle-time.</t>
<t tx="T154">The code was easy to write and worked the first time.  I love Python.  I chose to ignore case in the comparison.

A more elegant solution would be to define a v.__cmp__ method, but the present code is clear enough and works.</t>
<t tx="T155">Fixed the Tangle Marked command.  It had numerous problems.

The code that executes Leo_done.bat and Leo_un.bat didn't work.  Now these options specify Python scripts to execute, and these scripts are passed a list of filenames that were tangled or untangled.</t>
<t tx="T156">Created go.bat and openLeo.py.  These simplify the process of starting leo.  Just open a console window and type go.

Added "c:\prog\LeoPy\LeoPy.leo" as default to filename argument to leo.open().</t>
<t tx="T157">The whole-word search only fails if there are two consecutive "in-word" characters at the beginning or end of the supposed match.

Added some logic to make suboutline-only searches work correctly.

In the process, discovered a bug in is_c_id.  It was testing for blank instead of underscore!</t>
<t tx="T158">tree.select now calls tree.recolor_now instead of tree.recolor.  The result is much better than before.

Did add the tree.updateScheduled ivar and logic.  This ensures that only one redraw ever happens at idle time.  It seems like the body text is drawn much faster now.  This may have been a big performance bug!

At present the performance of leo.py seems excellent.</t>
<t tx="T159">When the "Move Down" command did nothing the control-d ate the character at the cursor!  The workaround is to have c.moveOutlineDown call c.selectVnode(v) even if nothing happens.  This forces the body text to be restored.</t>
<t tx="T160">c.makeVisible and even c.beginUpdate/c.endUpdate can be eliminated!  Indeed, the tree class can work as follows:

1. All ancestors of the current node are expanded at the start of tree.redraw.
2. The current node is scrolled into view at the end of tree.redraw.

We want to do the expansion of nodes before drawing so offsets are computed properly.  We must do scrolling after idle tasks are complete so Tk.Scrollbar.get() will return proper values.

Note: we still may want to inhibit drawing even though all drawing happens at idle time.  We don't really need begin/endUpdate to do that:  just keep a flag and call c.redraw() only if the flag is true.

I'm not going to eliminate c.beginUpdate/c.endUpdate just yet.</t>
<t tx="T161">Eliminated redundant error messages.
All path problems now generate an error.  This seems safest.</t>
<t tx="T162">tree.makeVisible and tree.scrollTo are called before the tree is redrawn, so we can't get accurate measurements from the canvas class.  I created tree.yoffset() and tree.lastVisible() to get proper measurements.  The final code is deceptively simple; it took several hours to get it all right.

This is an important step forward because now the screen is drawn properly during interactive search commands.  It would have been intolerable to release Leo with only partly functional Find commands.

There are still "policy" questions about when and how to scroll.  The present code doesn't work smoothly in all cases.  It may be that the Tk.canvas.yview routine doesn nothing in certain unexpected situations.</t>
<t tx="T163">I have spent several pleasant hours preparing setup.py, manifest.in and sdist.bat.

Create a source distribution (.zip file) by running sdist.bat from c:\prog\LeoPy.

I have not been able to create a .gzip file yet.</t>
<t tx="T164">There was an assignment kind = kind in the section &lt;&lt; set kind for directive &gt;&gt;, so @chapter, @section were never recognized.  Amazingly, this blunder did not seem to affect anything else.

With this this bug fixed, all files in LeoCB.leo are tangled the same by LeoCB and leo.py, except for the first line and whitespace.  The first line is different because LeoCB puts slashes differently than leo.py.

When ignoring only trailing whitespace and blank lines, we see that LeoCB and leo.py differ in how they output (!newline).  LeoCB outputs a single space before (!newline) in put_section(), so this is what leo.py must do as well.

With this bugs fixed, the only differences between LeoCB.leo and leo.py involve leading and trailing whitespace and blank lines.  Tangle works!  Actually, leo.py now does a better job than LeoCB, for the following reasons:

1. leo.py does a good job of deleting trailing blank lines in sections, and this should simplify Untangle.
2. leo.py does a better job of putting leading whitespace than LeoCB, because leo.py more accurately computes the effective width of leading whitespace than does LeoCB.</t>
<t tx="T165">This allows us to open a file when leo starts.  From the Python interpreter do the following:

import leo
fn = "c:\prog\LeoPy\LeoPy.leo"
leo.open(fn)

The open script is the companion to the run and go scripts.  leo.run() just runs leo.  leo.go() reloads all modules before running. For reasons that I don't fully understand, leo.go() does not always handle leoUtils properly: it is sometimes necessary to do

from leoUtils import *</t>
<t tx="T166">Actually, clicking on another node should probably reset the "wrap_node", but it doesn't.  Only changing something in the Find panel does that.</t>
<t tx="T167">Tested paths when Leo invoked directly.
Tested explicit paths in @file nodes
Tested paths in prefs panel.
Tested paths in @path directive.
Tested no path anywhere.

As a result, changed writeError by error in atFile.scanAllDirectives.</t>
<t tx="T168">frame.defaultDirectory was never being used.</t>
<t tx="T169">It appears that putting the following in app.finishCreate will work:

	import leo
	loaddir = os.path.dirname(leo.__file__)

Apparently we can not reference leo.__file__ reliably until leo has been completely imported.  The workaround is to do so in app.finishCreate.  This is a bit mysterious, and it appears to work.</t>
<t tx="T170">The new path philosophy is as follows:

1. Leo will not call os.chdir except possibly after file dialogs that are not cancelled.  This will leave the file system's current directory (returned by os.getcwd()) unchanged by tangling, importing, reading or writing.

2. Commands that access files (tangling, untangling, reading, writing, importing) call either os.getcwd(), atFile.scanAllDirectives or tangle.scanAllDirectives to set appropriate ivars indicating what the proper default directory will be.

3. These commands open a file as follows, where self.default_directory is set in step 2:

	fn = os.path.join(self.default_directory, fileName)
	f = open(fn,...)</t>
<t tx="T171">@file trees were not being marked as dirty when cloned headlines outside those trees were changed.  This definitely would have caused errors while reading @file trees!  Fixing this bug is a big step forward.

The fix was to to have v.setDirty() ensure that all cloned nodes are set dirty and that all ancestor @file nodes are set dirty.  I eliminated v.setDirtyJoined() entirely, and eliminated all calls to v.setAncestorAtFileNodeDirty() outside of v.setDirty().  The result is much safer, cleaner and simpler code.

As a side effect, nodes now become dirty when they move.</t>
<t tx="T172">leo.py used to call chdir from many places to indicate which default directory should be in effect.  That was wrong. From now on, leo.py will call chdir only file dialogs return without being cancelled, that is, for Open, Save and Import commands.

Otherwise, directives will set ivars, and the code will compute full path names using
os.path.join(directory_ivar, pathname).  The neat thing about this is that if pathname already contains a full path name it will override the path in directory_ivar.

For example, the Tangle code now writes the final file like this:

	file_name = os.path.join(self.tangle_directory,section.name)
	... # tangle into temp file
	update_file_if_changed(file_name,temp_name)

This works properly whether or not section.name contains a full path name.</t>
<t tx="T173">If the present node is expanded, the Paste Nodes command now pastes the pasted node as the first child of the present node, rather than as the next sibling of the present node.</t>
<t tx="T174">trace(a) prints a if s is a string and executes a() if a is a function.</t>
<t tx="T175">The symptom of the bug was that it was taking a _long_ time to close windows after doing many interactive find commands.  Actually, it was redrawing the tree that was the real problem.

Disable the recycling of nodes made no difference.  By removing code I isolated the performance bug to the call to tree.redraw in find.showSuccess().  This was very good news, as it meant that the bug was in the tree code rather than in Tk or Tkinter.

The bug was caused by "extra" links to the Tk.text widgets in the vnode, specifically, the v.box_id, v.edit_text_id, v.icon_id and v.box_id ivars.  These links apparently created permanent references that prevented widgets from being deallocated when the tree was redrawn, so a large number of widgets and their binding had to be deleted when the tree was deleted.

The fix was just to eliminate these vnode ivars entirely: they were not being used!  The v.edit_text ivar could not be eliminated, so I added a call to self.edit_text.destroy() just before reallocating.  Perhaps just moving the edit_text would be better than destroying and reallocating it, but that wouldn't be so easy because of the call to self.canvas.destroy("all").</t>
<t tx="T176">If a clone problem is reported, the @file node is not marked dirty again, so if we save the .leo file and then quit the problem will still exist in the derived file.

This happened in Borland Leo, so it is clear if it is a problem in leo.py.

I recovered by doing a Read Outline Only.</t>
<t tx="T177">Moved Tangle utils into Tangle leoTangle.py.  These should be methods because they deal with tangle ivars.

Separated utils that call scanError from other utils.</t>
<t tx="T178">This happened after deleting a clone outside of the tree for @file leoColor.py.  I am not sure of the exact sequence.  Perhaps LeoCB was involved.</t>
<t tx="T179">This was pretty easy.  I think underlining hyperlinked section references looks good.

Still to do:

1. We need browser-style navigation: forward, up, back, home.

2. We may have to change things for Leo1.</t>
<t tx="T180">I finally realized why c.redraw and c.endUpdate wiped out the edit status:

1.  tree.redraw does not preserve the edit status (it probably should)
2.  tree.redraw only causes queuing of the redraw.  It doesn't happen immediately.

This was causing problems in find.show_success.  My quick fix was to create tree.redraw_now, and then to restore the status as needed.  Another, probably better, way would be to have tree.redraw restore edit status.  Duh.

However, in this case tree.redraw_now is exactly what is needed, so I feel a bit less stupid...</t>
<t tx="T181">There are a huge number of details to get exactly correct.  It appears that the code is close to working.</t>
<t tx="T182">I finally realized that v.edit_text is defined only if v is visible on the screen, that is, only if all of v's ancestors are expanded.</t>
<t tx="T183">Previously, cloned headlines were not updated in unison.  This could have been the source of some apparent "lost data".  It is remarkable how complex this logic is.

I finally chose to do a redraw in tree.endUpdate() to force headlines in synch.  We can't typically just do a redraw() in idle_headline because that messes up the editing state of v.edit_text.

I also fixed a bug in idle_body that caused control-Q to call c.setChanged() again.  The new code just sees whether the code has caused the text to change: it does not need the value of ch to do that.

idle_headline also now handles all details of marking nodes dirty.  This used to be done partly in undimHeadline.</t>
<t tx="T184">I made terrible blunder: I eliminated a commands ivar that was involved in writing, so the write failed and wiped out the .leo file.  Since I didn't have a recent backup .leo file, I lost todays notes.

Let this be a lesson to myself:

1.  Backup .leo files _are_ useful for backing up ouline only data.
2.  Make backup of entire LeoPy folder when there are problems.  I came very close to all of today's programming work, which would have been hard to bear.</t>
<t tx="T185">We don't need to keep track of the status of control or alt keys!  Instead, we let idle_body_key and idle_head_key compare the old with the new value.  They do nothing on a match.

An important point:  idle_body_key must make sure that v == c.currentVnode.  If it doesn't make this check we will lose data when the user types Control-K to create a new node.

The new code also takes care not to allow any newlines in headline text.</t>
<t tx="T186">This code is _vastly_ superior to the Borland code, for several reasons:

1.  Unlike the Borland code, the Python code uses no "state" variables.  This not only greatly simplifies the code, it makes it possible to restart incremental searches after the user has changed nodes or changed postion in body text.

Instead of using state variables in the find class, the code uses the c.currentVnode and the "insert" and "sel" tags of the Tk.text widgets.  This automatically ensures that the state of the search matches the state of the outline and body panes!

2. At last!  I know how to restart incremental searches without using state variables.  The trick is _not_ to call c.endEditing() in the setup routines, so set_in_headline() can use c.tree.editVnode to see if we are editing a headline.  If so, we start there.  OTOH, select_next_v _does_ call c.endEditing() and c.editVnode() to force c.tree.editVnode to have the proper value.

3. Leo now uses Tk.Text widgets for both headline and body text.  This eliminates all the special case code that selects between headline and body searches.  Moreover, the same regular expressions are now used for searches in both headlines and body text.  I doubt I could ever have produced bug-free code without this simplification.</t>
<t tx="T187">This hugely simplfies the find/change commands, and makes them more capable.

This also solves the "Control-K" problem in headlines.</t>
<t tx="T188">The ensure_extension routine was adding a .leo extension, thereby defeating the test for an empty file name.</t>
<t tx="T189">This code is much cleaner than the Borland code.  The search commands keep almost no state variables now: we always search from the present location.  This hugely simplifies the logic, and makes the code do what is expected more often.

In particular, is no longer any "first_v" or "first_position" state.  The various find and change commands will save the present state on entry, and restore that state if no finds are found.  This "local" save/restore makes much clearer what is happening.

Still to do: searching in headlines.</t>
<t tx="T190">The save message immediately showed a Save bug.  After doing a Save To, a following Save command used the Save To file name!  This explains why some saves "didn't take".</t>
<t tx="T191">This probably should depend on the size of the window, and at present it does not.</t>
<t tx="T192">I have a new toy: Python's exec statement.  This allows one to have all the flexibility found in tcl scripts.  For example, one can treat the name of variables as variables themselves.  Building statements from strings isn't quite as simple as in tcl, but the effect is exactly the same.

The added flexibily is useful when loading and saving many variables, as in the prefs and find code.  For example:

ivars = [ "tangle_batch_flag", "untangle_batch_flag",
	"use_header_flag", "output_doc_flag",
	"tangle_directory", "page_width", "tab_width" ]
	
for var in ivars:
	exec("self." + var + " = c." + var)  # self.var = c.var
	
This exec statement expresses the pattern directly.  Moreover, once the ivars list is defined many similar exec statements are possible.  Using the % operator might be even clearer:

	exec("self.%s = c.%s" % (var,var))</t>
<t tx="T193">This is tedious code, and Tk makes it much simpler than with other systems.</t>
<t tx="T194">Replaced global with app().idle_imported.

Replaced global with fileCommands.dummy_v.  This fixed a big memory botch: previously a new dummy vnode was allocated for every vnode created!

Replaced es_newline global with app().log.es_newline, i.e., frame.es_newline.  This is better than before because each log stream has its own count.</t>
<t tx="T195">These allow us to reclaim memory when closing a window.  It also showed a that we are wasting lots of space allocating dummy vnodes in the read logic.

With these routines in place, all __del__ routines are eventually being called, which indicates that all circular references are being destroyed by the destroy() routines.  Note that it is _not_ necessary to do any of the following:  del v, del tree, del commands or del frame.  Setting the pointers to None is enough.

Added tree.vnode_alloc_list.  v.__init__ adds items to this list.  tree.destroy removes items from this list.  This is an elegant and powerful solution: all vnodes will be reclaimed eventually, and we don't need to worry about reclaiming them while the window is open.  In particular, this avoids all problems with undo.

Added two new app() ivars to control memory management and tracing.
	self.deleteOnClose	# true: delete all frame objects when a frame closes.
	self.printDel		# true: enable prints in __del__ routines</t>
<t tx="T196">The frame dtor is never being called because (I think) of circular references throughout the vnode, commands and frame classes.  There are several possible approaches:

1.  Ignore the problem completely.  This makes a lot of sense, for several reasons.
	A: Memory is not an issue, and reclaiming memory at termination time doesn't help!
	B: Memory reclamation can legitimately be called a Python implementation issue.
	C: It takes time and memory to reclaim memory.
	D: Errors in reclaiming memory can lead to intermittent crashes.
	
2.  Create destroy() routine for vnodes, tnodes, commands and frames.  These routines would eliminate links between nodes, thereby freeing Python's references.  The frame.destroy() routine would also call self.top.destroy() to force the closing of the frame's window.  The destroy() routine would also do a del self to reduce the reference count of the object.

Note:  deleting vnodes and tnodes is tricky because of undo.  By far the safest course of action is never to delete these nodes until a window closes.  The easy way to do this is put every vnode in a vnode allocation list, an ivar of the tree class.  Calling tree.destroy() would do the following:

	for v in self.vnode_alloc_list:
		v.destroy()
		del v
		
With this structure in place, the __del__ routines would do nothing.  We could insert a print statement in the routines to show when the routines are actually called.  This would indicate whether circular references remain.</t>
<t tx="T197">The old code marked the loading headline as changed.  Added c.loading ivar to disable update of window title during loading.</t>
<t tx="T198">This happens when a save is quickly followed by a quit.  I can get this error when in the Python window, which is reassuring, I suppose.

frame in app().windowList trick doesn't work: very weird.

I enclosed the code in idle_redraw() in a try/except block.  I'm not sure whether this will cure all problems, but it seems like it should.</t>
<t tx="T199">The old code never got around to deleting the frame, tree and commands objects.

However, del self just decrements the reference count; it does not guarantee that self.__del__ is called.  In fact, it doesn't seem that __del_ is _ever_ called!  So much for cleaning up memory.

There may be a bug here, or perhaps this is just a weirdness of usint Tk or Tkinter.  At this point I haven't a clue.</t>
<t tx="T200">This is a strange one.  The problem happens when a save is quickly followed by a quit.  It appears that there is a fault in idle_redraw(), even when the code is locked out with if self in app().windowList.  This is very weird.  Even stranger is that the error traceback never happens when the Python window is opened first (so it stays open).</t>
<t tx="T201">Tested c2py.leo1to2() on LeoCB.  The script now works on both Borland and leo.py.

There is a problem with the v.commands method on Borland. The workaround was to pass the value from top() to convertLeo1to2(v,c).</t>
<t tx="T202">Once again, I am making faster progress with Python than expected.  Amazing.</t>
<t tx="T203">I just imported idle and voila: the IDLE IDE is available!

I did have to add r"c:\Python21\Tools\Idle" to sys.path.  I also removed the wxPython stuff from the path: they interfered with the include.

I added a few top-level functions to leo.py that were described in the scripting documentation.

I added the public commands and vnodes methods described in the scripting documentation.  Several of these routines had names that conflicted with ivars.  In those cases I changed x to mX.  The changed vnode ivars were back, firstChild, headString, next and parent.

I also added several vnode and commands methods that were described in the documentation but that did not presently exist.  Like c.findRoot, c.currentVnode, etc.

The script c2py.convertLeoTree(v) appears to work, so leo.py appears to be largely compatible with scripting in LeoCB.</t>
<t tx="T204">I spent almost an entire day messing with focus issues.  There are two choices:

1.  If tree.bodyKeepsFocus is true the body pane will always have focus unless we are editing a headline.  The current headline is highlighted in grey to indicate the tree has no focus.

2.  If tree.bodyKeepsFocus is false the body pane will not have focus if we select a headline by clicking on it.  In that case the curren headline will be white text on a dark blue background.  When focus shifts to the body pane, the current headline will be greyed.

After much experimentation, it seems that the first way is more convenient, though slightly less accurate as far as visual protocol goes.  I think the convenience of having focus in the body pane (where it is useful) outweighs the small visual incongruity of having the current headline be grayed even when the tree canvas is selected.

Warning: Using frame.getFocus() is much less good than using the tree.active flag, because we can edit a headline with at most two clicks.  That is not true when using frame.getFocus()

The bodyKeepsFocus logic affects all routines that alter the highlighting of headlines.</t>
<t tx="T205">Changed OnCloseLeoEvent so it returns not veto.</t>
<t tx="T206">TThe body handler didn't call setDirtyJoined.  Changed setDirtyJoined so it returns a redraw flag.</t>
<t tx="T207">Added virtual_event_name utility to generate &lt; &lt; name &gt; &gt;.  Sigh.

The OnCut, OnCopy and OnPaste routines just call the body key event handler to do syntax coloring and set the various dirty/changed bits.

There is a small glitch: choosing cut/copy/paste "by hand" from the menu doesn't work when the focus is in an edit label in a headline.  I'm not sure how to fix this and it is extremely minor anyway.</t>
<t tx="T208">Added v param to tree.recolor so we don't assume that v is the current vnode.</t>
<t tx="T209">I tried several options, with no luck: selectborderwidth, selectbackground, selectforground.</t>
<t tx="T210">Added code to leo.py to set the window icon.  Alas, the documentation is poor enough so that I don't know what the arguments to iconbitmap should be.</t>
<t tx="T211">I tried a lot of experiments in fileCommands.getGlobals(), and it is still not possible to set the height and width of the top level window properly.  It is still too large, and its size does not depend on the requrested width.

Note that the size of the window is set in createSplitter, by setting the size of a Frame object.  Perhaps this is interfering with matters.

The present situation is poor, but tolerable.</t>
<t tx="T212">Changed bd="2m" to bd=2.  This makes a big difference in how the panel looks.</t>
<t tx="T213">The syntax colorers can use tag_config to show tabs and spaces.  This isn't perfect (it doesn't look good now) and does not work for newlines.  It may be better than nothing, however.</t>
<t tx="T214">I just forgot to add it to the list of @keywords.</t>
<t tx="T215">These "bugs" may be appearing because these commands are always enabled in the menu.  In any case, the fixes were straightforward.</t>
<t tx="T216">The problem was that the body key handler was being scheduled before the new node was inserted and being called at idle time after the new node was inserted, so the body text disappeared.  The fix was to disabling scheduling if control or alt keys are down.</t>
<t tx="T217">All it took was the following:

font = tkFont.Font(family="Courier",size=9)
tabw = font.measure("    ")
self.body = body = Tk.Text(...font=font,tabs=tabw...)

This hard codes tabs as 4 spaces.  Later I'll make it more general.</t>
<t tx="T218">I am getting closer to getting the look of the splitter panes just right.  Setting bg="white",relief="flat",bd=0 in createSplitter helps quite a bit.

The problem with the tree pane is clearly in the Canvas widget.  If that widget is not packed the pane looks fine.  There seems to be no way to eliminate the canvas's border, and no way to prevent the border from being overwritten by the Entry widget.

Maybe there is a way: the problem may be that Entry widgets are embedded in their own windows...</t>
<t tx="T219">I will use leo.py from now on to develop leo.py.  It is the only way to really get the bugs out.

Changed the code that computes the length of the edit box for headlines.  We always use len(v.headString) now.  This still does not quite work properly, but it is better.

Fixed a bug in the selection logic.  The colors for the previous headline are changed only if the previous is not the same as the current.  This can happen if we click in the icon or plus/minus icon of the current headline.

Added the v.iconx and v.icony ivars so the tree.OnHeadlineKey routine can just redraw the cursor in place if it needs to change.  This is a workaround to a problem that I haven't been able to solve: namely, how to force the cursor to be visible again after the headline loses focus.  This is more than a little kludgy, especially after creating the elegant endUpdate mechanisim.  OTOH, it may point a way towards incremental redrawing of the screen.</t>
<t tx="T220">Changed "darkblue" to "DarkBlue".  The colors known to Tk are listed at
	http://tcl.activestate.com/man/tcl8.4/TkCmd/colors.htm 

Changed print_stack() to Print statements in es() logic.  This was more confusing than helpful.

Eliminated some accelerators (Linux only)

Added loaddir code to leo.py.
</t>
<t tx="T221">Added many terms to the Glossary.

Improved description of Leo2.  Partially merged Leo1 and Leo2 documentation.  It still isn't perfect.</t>
<t tx="T222">Probably very few people could understand the description of Leo2.</t>
<t tx="T223">I fixed the "last" serious bug in this version.  What was happening was that the clone information in leoFileCommands.py and leoCommands.py was alternatively being written and not being written.  The fix was to v.joinNodeTo:  there was a bug that was fixed in the Borland version that had not been fixed in this version.</t>
<t tx="T224">It turns out the updateCloneIndices routines in both LeoCB and leo.py are slightly buggy.  Both can increment indices multiple times for the same tnode.  In addition, LeoCB computes indices for parts of the tree beyond the actual tree, so that would increase the indices further, which is why the LeoCB version sometimes has a larger clone indices.

Neither of these "bugs" really makes a difference.  In either case, nodes are joined properly.

To "minimize" the clone indices we would do the following:

	index = 0
	v = root
	# Zero all indices.
	while v and v != next:
		v.t.cloneIndex = 0
	# Set clone index only if it has not already been set.
	while v and v != next:
		if v.t.cloneIndex == 0 and v.isCloned() and v.shouldBeClone():
			index += 1
			v.t.cloneIndex = index
		v = v.threadNext()
		
This might be just slightly slower than the "wasteful" way.</t>
<t tx="T225">The directory compare routines in the Python lib do not seem to exist.  The new routines compare only .py files.</t>
<t tx="T226">The lineIndent var was not set properly in &lt;&lt; Set lineIndent, linep and leading_ws &gt;&gt;, with the result that some sections contained extra leading whitespace in their body parts.

With this bug fixed, leo.py reads and writes all files correctly!</t>
<t tx="T227">Fixed a bug that was causing the last newline of doc parts to be deleted.  The problem was that string.rstrip() also strips newlines!  With this bug fixed it appears that Leo.py can read and write @file nodes just like Leo2CB does.

Created the removeTrailingWs() in leoUtils that strips trailing blanks and tabs.</t>
<t tx="T228">Rewrote the code in scanText and scanDoc that figures out where sentinels start.

The new nextLine and nextKind vars clarify what is going on.  When a non-sentinel line is output, the trailing newline is part of a sentinel if and only if nextKind is some kind of sentinel.

I'm not convinced the code in scanDoc is correct...

</t>
<t tx="T229">This is a very useful comparison tool.  It allows me to compare whitespace easily.</t>
<t tx="T230">This puts up a model dialog.  The hardest part was writing the code that centers the dialog on the screen.  Sheesh.</t>
<t tx="T231">I fixed many minor problems in preparation for releasing the first usable version of Leo.py.</t>
<t tx="T232">These bugs were simple transcription errors; they do not occur in LeoCB.

v.childIndex() was always returning 0, so naturally v.createDependents() was not working well.

Added a call to v.unlink() in v.destroyDependents.  The call to v.destroyTree() no longer does anything.</t>
<t tx="T233">We no longer need setIcon!!  Indeed, setIcon just calls c.redraw(), so as long as the callers enclose code in beginUpdate/endUpdate all will be well.  This eliminates a _major_ mess, and will result in further simplifications: we no longer need the distinction between the setX and initX routines!</t>
<t tx="T234">It turned out that tree.idle_body_key was the bottleneck, _not_ syntax coloring!

What was happening was this:  tree.redraw was being called on _every_ keystroke, and that was causing a huge amount of memory allocation and deallocation.  After a while everything ground to a halt.

The fix was very clever: I added a flag to c.endUpdate and tree.endUpdate, true by default.  tree.redraw is called only if count==0 and flag==true. So calling endUpdate(false) prevents all redraws from happening in a range of code.  This is a wonderful addition to the beginUpdate/endUpdate pattern.

Both tree.idle_body_key and v.setAncestorAtFileNodeDirty use this pattern.  The result is that tree.redraw() is called only when the icon really and truly must change.
</t>
<t tx="T235">Amazing.  I wrote some dummy code last night, read up on indices this morning, and got everything to work in a couple of hours. The result is very fast: no optimization is needed for Leo. I love Tkinter!

Added c.recolor and tree.recolor routines.  This hooks should be called whenever the body text changes.  Apparently there is no "OnTextChanged" event in Tk.</t>
<t tx="T236">Implementing this was trivial: we use a app.clipboard ivar, a string.  Using an internal clipboard means that we can't inadvertantly paste the XML representation of a string into body text.</t>
<t tx="T237">The only major step left before releasing a functional version of Leo is to check the @file write code.
</t>
<t tx="T238">The Tk clipboard handling is confusing: there are routines for clearing and setting the clipboard, but no obvious way to get the contents of the clipboard.  I could use an internal clipboard (part of the LeoApp class) for leo nodes, which would work pretty well.  If I did that I might want other commands: cut, copy and paste between node clipboard and the text widgets...

There doesn't seem to be any Python support for the clipboard, which is weird.</t>
<t tx="T239">This is a tedious task, no matter how it is done.</t>
<t tx="T240">Simplified the code that sets the current vnode and initializes icons.  Having tree.redraw update icons automatically helps a lot.

Added tree.initing hack to disable endEditLabel from marking the tree as changed. Actually, this probably isn't necessary, as top.title probably won't be redrawn until idle time anyway.</t>
<t tx="T241">Here is how to get accelerators working:

fileMenu.add_command(label="New", accelerator="Ctrl+N", command=self.OnNew)
self.top.bind("&lt;Control-n&gt;", self.OnNew)

Warning: using top.bind_all would not work well with multiple windows.

The accelerator="Ctrl+N" option merely sets the menu text(!).  The bind_all method actually does the work.  BTW, I had to change (self) to (self,event=None) in all the command handlers.  When an accelerator is used the handler is called with two args.  When the menu is used the handler is called with only one arg.

IDLE shows how to be a bit more clever with initialization.  I probably should study the Idle code and be clever ;-)  IDLE also use the configuration data base, and I probably should study that too.</t>
<t tx="T242">There are now just two routines, v.computeIcon() and v.setIcon().

v.setIcon just does c.tree.redraw() (!)

c.tree.redraw() now does nothing if the update count &gt; 0, so this is safe. Moreover, we can now enclose any code in c.beginUpdate()/c.endUpdate() without worry.

This is the way it is written in the Book.</t>
<t tx="T243">The &lt;Key&gt; event is called _before_ the body text is updated, so it is not possible to properly update syntax coloring, icons or tnodes there.  Instead, the &lt;Key&gt; event handler just registers an idle-time event to do the real work.  Very simple!</t>
<t tx="T244">The canvas widget appears to have an improper 1 or 2 pixel gray border.  I have worked around this by limiting the size of the Tk.Entry widget: expanding it only when editing is enabled.</t>
<t tx="T245">Following the IDLE code lead me astray.  IDLE does not allow the headline text to be edited!  At last some of the confusion is gone.</t>
<t tx="T246">openWithFileName now shows the window before loading, so that reading messages become visible.  To do this, we call app().root.update().

Made leoFrames bigger: this is done in createSplitter(!)</t>
<t tx="T247">We close the initial open window if it has not been changed.

app.quit() now closes the hidden root window to close the app.

Close processing now calls the close event handler.

There are no bugs as in wxWindows!  Everything is straightforward.</t>
<t tx="T248">I have rewritten the code to draw the tree, and it seems to work reliably.  However, expanding an entire tree is slow, and redrawing the tree is also slow is many nodes are visible.  I'm not sure what is causing this...

Disabling drawNode speeds up the redraw greatly.
Disabling only tags also speeds up the redraw greatly.  Indeed, way too many tags appear to be created...

Still to do: I have not been able to create edit windows in the canvas properly...</t>
<t tx="T249">I'm not sure whether Tkinter can read .bmp icons, so I created .gif icons, which work well.</t>
<t tx="T250">Rewrote v.restoreOutlineFromDVnodes.  It is now very simple because undo no longer creates dvnodes; vnodes now contain all tree information.  So when we "delete" a tree we just unlink and unjoin it, and when we "restore a tree we just relink and rejoin it.  It is truly amazing how simple the tree code now is.</t>
<t tx="T251">It now takes about 3 seconds to read this file, rather than the 9+ seconds needed by wxPython!  Apparently the wxPython tree class was very slow.

The _old_ bottleneck was as follows:
	Most of the time is spent in atFile scanning code
		.. c.clearAllVisited is very slow(!!) because it clears the entire tree.
			c.clearAllVisited takes about 1/3 time of the entire scanning phase (!!)
		.. Reading the file itself, is very fast, scanning in atFile::read is slow.
		.. es calls are fast.
</t>
<t tx="T252">A milestone.  It is now possible to read a .leo file and to draw the tree at least partially.  Most of the conversion to Tkinter has now been completed.

I removed vnode and commands getters that merely returned ivars.  Also converted wxWindows calls to Tk calls.  It is remarkable how easily the changes went.  
</t>
<t tx="T253">Converted all Tk prototype code to Tkinter.  It was straightforward for the most part.  The Leo window works: scrollbars work and the text panes work.  However, the tree pane is a text pane at present.

Copied menu code from Leo.py version 0.04.  Somehow the old code was lost, I have no idea why.  The copied code is wxWindows code, so it will have to be rewritten for Python.  Still, it is much easier to use the properly converted Python code.  Perhaps I deleted the code thinking that it would all have to be rewritten.  If so, that was a minor mistake.</t>
<t tx="T254">The use_tk global indicates whether Leo will use wxPython or Tkinter.  The next step is to transliterate the Tk code that creates the Leo window into Tkinter.</t>
<t tx="T255">After much experimentation, adding a -padx param to the log window pane seems like the only way to handle the width of the vertical scroll bar.  Without this extra padding, the scroll bar obscures the left edge of the log window.</t>
<t tx="T256">It simplifies and speeds up the code to use file.readline to process lines as a unit.  This way I never have to scan to the end of a line.  However, it turns out that scanning is not really the bottleneck.  In addition, we no longer read entire derived files into memory at once.

BTW, it may be possible to use readline() in the getLeoFile logic as well.  I have no idea whether this would help or not.

The problem is the _second_ half of atFile::read, that is, after the derived file has been completely scanned and all vnodes have been created!  Apparently, something (maybe shouldBeClone?) involved with setting bits is horribly slow.  I'm not sure why earlier testing didn't show this problem.  I must have been mistaken somehow in my earlier conclusions.

This actually is very good news.  It means that the raw file code is good enough as it is.  Note:  reading derived files will not slow down when I switch to Tk because we don't create vnodes unless there are file errors!

I have just found that a single call to c.clearAllVisited() in read() _substantially_ slows down the read!  Amazing.

Create v.clearVisitedInTree() and v.clearAllVisitedInTree()</t>
<t tx="T257">@nocolor
@ignore

This is a _very_ easy class.

Ivars
	self.root: the root vnode
	self.update: update count
		tree::beginUpdate increments.  tree::endUpdate decrements.
		Disable redraw if &gt; 0
		Redraw when falls to 0.
	self.selected: the selected vnode
	self.top the top vnode on the screen (needed?)

Tree methods know about vnodes(!) Greatly simplifies both tree and vnode classes.
tree:endUpdate does nothing if self.update &gt; 0
	User code should not call tree::redraw directly.
	Most tree methods call redraw
Insert methods create a vnode, set links and redraw.
Move methods just set links and redraw
Commands methods enclose complex operations in tree.beginUpdate/endUpdate, as they do now.
tree::delete(v) just unlinks v's tree
	vnodes are not deleted until window goes away: unlimited undo!
	v.threadNext ivar makes deleting a list trivial.

vnodes

vnodes contain headString, expanded, firstChild, parent, back, next and threadNext ivars
	tree::getThreadNext() used to set v.threadNext
	no need for dvnodes: vnodes contain all undo info!


		</t>
<t tx="T258">added use_tk constant in leoGlobals.</t>
<t tx="T259">es now outputs a newline, which makes most uses of enl and ecnl superfluous.  We can do this be string concatenation is so easy.</t>
<t tx="T260">There was a transliteration error in computing the line to be output which mangled long lines.</t>
<t tx="T261">This code has not been tested.</t>
<t tx="T262">There was a bug in sentinelKind.  skip_c_id won't handle @@, so @@ must be handled separately.</t>
<t tx="T263">It is not possible to access global _variables_ using from leoGlobals import * because that creates copies of the data.  The new way is simpler and more modular.

Revised how the prefs panel works.  The new code just sets the prefs ivars.  It is up to the caller to access the prefs panel as needed. Added tab_width preference and prefs.tab_width ivar.  This should have been done long ago.</t>
<t tx="T264">Fixed problems with at_xxx_ptr globals.  The problem that from leoGlobals import * doesn't work, so I changed is_special_bits so it returns a dictionary containing name:value pairs rather than setting globals.

Fixed many problems in scanAllDirectives involving paths.  Also rewrote the code in atFile::write that opens files.

At this point leo.py can read and write files except files containing @first.
</t>
<t tx="T265">.. initAllCloneBits had several errors.
.. self.structureErrors wasn't being initialized in atFile::Read
.. createNthChild must mark nodes as visited to suppress unvisited node logic later.
.. Added log messages any time self.structureErrors is incremented in createNthChild

At this point leo.py can read a simple test file properly, except files containing @first.</t>
<t tx="T266">It wasn't too hard to create a proper splitter window.  After that, creating a Leo window was trivial.</t>
<t tx="T267">I am beginning to think that globals should _never_ be used.

The @language bug appears to be a problem of not setting globals properly.</t>
<t tx="T268">Added assert in tnode::setTnodeText that we are getting a string.  This assert was not always true before I added a call to listToString in &lt;&lt; copy new_out to child's body t't' in scanText.</t>
<t tx="T269">The read code is slow.  I'll have to see why.

3 seconds with read doing nothing (reads leoPy.leo)
5 seconds with read reading files but not scanning them.
9 seconds with read fully enabled.

Therefore:

3 sec to read and scan LeoPy.leo
2 sec for reading all derived files
4 sec to scan all derived files.

So scanning derived files is pretty slow.

BTW, LeoCB can do everything in about 2 sec.
</t>
<t tx="T270">There was the usual assortment of minor problems.

.. The write code was writing flags using `flag`, and this fails if false is None.
.. Added code to make sure None is never passed to wxFileDialog as a file name.  I wonder if this could have caused problems earlier.  Once again, the C++ code is shown to be radically unsafe.

.. I think false should be defined as 0, not None.  There are several advantages:

1.  not 0 == not None, so various tests work as before.
2.  `0` is very different from `None`, and this affects the file format.

I'll make this change.  Hope it works ;-)</t>
<t tx="T271">A major milestone:  the read command works and so do most outline commands.  It is now clear that reading a file is fast enough so that no further work is required!

The main problems today:

1.  The code must use the test: id and id.IsOk().  Failure to make _both_ tests will cause the code to fail, possibly in an unbounded loop.  This was ultimately the problem with the Move Down command:  the threadNext code didn't make these test.  I finally called wxGetThreadNext inside threadNext and that solved the problem.

2.  I added the self.changing lockout in the LeoFrame OnTextUpdate handler so that tnodes would not be erroneously updated while switching tnodes.  The new code seems simple and robust.</t>
<t tx="T272">A case can be made for getters of the form:

	def getX():
		return x
		
In particular, they are a reaonable place to put asserts.  However, such getters do not seem good style in Python because all ivars are public anyway.  Moreover, getters like

	def x():
		return x
		
are invalid in Python, so there is a problem.  The simplest approach seems to be to get rid of all such redundant getters, and that is what I have just done.  Note that assert's aren't so important in wxPython, because nothing bad can happen anyway.</t>
<t tx="T273">This was a very interesting experience, for the following reason.

1.  The weakness of a non-compiled language is that problems don't show up until code is actually executed.
2.  Python is very safe.  The only real problem are unbounded loops.
3.  In particular, the continue statement will _always_ loop in Python unless progress the loop variable is incremented.  So care must be taken when translating C for loops into Python while loops.
4.  Even without the ability to set breakpoints (which means that single-stepping is impossible in wxPython!) it wasn't too hard to trace with print statements.  Amazing.
5.  The biggest mess came with getters that return an ivar of the same name.  I'll sleep on this, and I think the thing to do is get rid of the getter entirely:  convert x.getY() x.Y.
6.  Defining constants in a class is nice: they are accessed by class name.  For example: vnode.dirtyBit.

Status:
1.  The outline is being read in correctly.
2.  The atFile::read logic hasn't been tested.
3.  The body pane (and probably all the tnode text) is not being set properly.
4.  It is possible that we might be able to get rid of join lists!  They are used:
	a) To update the headline text
	b) For shouldBeClone.
	We could replace join lists by a reference count and temporary join lists.
	This could be really cool, and I'll have to think about this more...
	</t>
<t tx="T274">Created leoFileCommands.py.  We use com=self.mCommands to access the "real" commander for this class.  It would be wrong to make fileCommands a subclass of Commands; we must have exactly one commander per frame so that mCurrentVnode, mRootVnode, etc. are updated properly.

In short, the ivars of fileCommands are mFrame, mCommands and any ivars used exclusively by fileCommands.  This pattern will be used to create outlineCommands.py, findCommands.py, etc.</t>
<t tx="T275">The info class was confusing.  All the ivars from that class now become ivars in the fileCommands class.  The mTnodes array is now a Python dict, so there is no need for the mNumberOfTnodes or mMaxTnodeIndex ivars!  The new clode is _much_ clearer.  A major victory.</t>
<t tx="T276">Fixed several bugs in c2py.

Greatly simplified handlePossibleFunctionHeader; there is no need to compute a delta there:  we munge the head, args and body separately, then replace the original all at once with the new lists.  This is bullet proof.

Fixed some bugs in safeReplace and matchWord.

Fixed bugs in convertCStringToPython that caused skipDoc and skipCode to be called in the wrong places.  That was really messing things up!

Tested the speed of tests by writing speedTest.  This is so much fun!</t>
<t tx="T277">I have been happily converting, with the help of c2py, Leo's C++ code to python.  The new code is far, far easier to understand.</t>
<t tx="T278">Fixed several bugs in c2py:

1. removeExcessWS was sometimes skipping past a newline, thereby removing leading whitespace in the following line.  This made it look like the code for "if", "while" and "for" was bad.

2. the function scanning code had several bugs.  Added new code to ignore "if", "while" and "for" code.  Added new code to ignore # lines (preprocessor directives).  Added the firstOpen variable to eliminate scanning later.  This is pretty tricky code.

3. Added code to replace " . " by "." and "\t " by "\t".

4. Fixed skipPastWord so it handles underscores and digits.  This helped a lot ;-)

5. @code was not always properly converted to @c.

I think I will leave c2py as is for now.  It has the following rough edges:

1.  I don't know how to break long scripts.
2.  c2py doesn't handle : initializers in constructors well; they inhibit processing of the initializer.
3.  c2py doesn't place self. in all the places it is needed.  I'm not sure there is an elegant way to do this...</t>
<t tx="T279">Worked on c2py.  As documented in LeoCB.leo, had to add a __cmp__ routine in leo.py so that vnodes compare equal properly.  Fixed some minor bugs in c2py.

We now have two separate routines called leo.py.  The one used by LeoCB and LeoWX is the python expression evaluator.  The leo.py in LeoPy is the top level of leo.py.

Added signed, unsigned and bool to the list of type names.</t>
<t tx="T280">Documented the theory of operation of c2py.  This is a remarkably simple program!  Converting from string to list representation turns out to be a very good choice.</t>
<t tx="T281">For the last two days I have been working on c2py.py.  I am totally in love with Python.  Everything is so much easier:  Automatic debugging, no declarations, no types, no compilation. Great data structures. Even without single stepping the debugging is easy.

All major aspects of c2py are now complete.</t>
<t tx="T282">It has been staring me right in the face.  Idle.py supports tree views and syntax coloring!  All I need do is adapt the Idle code for Leo.  The only remaining piece of the puzzle is a good splitter window (and splitter events?)
</t>
<t tx="T283">All menu work is now complete, with stubs for many calls to Commands routines...
The Python menu is functional.
The Find Panel can be opened.
The Find Panel can be opened.

Still to do:
	Icons for outline
	Nodes classes
	Commands classes:
		outline commands
		file commands,
		find commands,
		tangle/untangle commands</t>
<t tx="T284">@nocolor</t>
<t tx="T285">leo.py 2.5 is now available at:  http://sourceforge.net/projects/leo/

The highlights of 2.5
---------------------

1. Leo supports tab widths properly, and negative tab widths cause Leo
to convert tabs to blanks as you type.  Three new commands appear in the
Edit Body menu: Convert Tabs, Convert All Tabs and Convert All Blanks. 
Convert All Tabs and Convert All Spaces convert the entire selected
tree.

2. Leo now allows you to override selected preferences using a
configuration file called leoConfig.txt. Leo acts as before if this file
does not exist.  An option in leoConfig.txt specifies whether
leoConfig.txt is read-only.

3. The Preferences panel is now a modal dialog containing Ok, Cancel and
Revert buttons.

4. At long last, cut and paste work properly in all situations.  You can
cut and paste between Leo and other applications, or between two
different copies of Leo.

5. Added the Recent Files submenu to the File menu.

6. Fixed a number of bugs, including several crashers.  Fixed several
bugs in the Import commands.  Leo will no longer abort reading if it
detects an invalid directory name in the Default Tangle Directory in the
Preferences panel.

What is Leo?
------------

 - A programmer's editor, an outlining editor and a flexible browser.
 - A literate programming tool, compatible with noweb and CWEB.
 - A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
 - Fully scriptable using Python. Leo saves its files in XML format.
 - Portable. leo.py is 100% pure Python and will run on any platform
   supporting Python and Tk/tcl.
 - Open Software, distributed under the Python License.

Links
-----

Leo:      http://personalpages.tds.net/~edream/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458</t>
<t tx="T286">leo.py 2.5 is now available at:  http://sourceforge.net/projects/leo/

The highlights of 2.5
---------------------

1. Leo supports tab widths properly, and negative tab widths cause Leo
to convert tabs to blanks as you type.  Three new commands appear in the
Edit Body menu: Convert Tabs, Convert All Tabs and Convert All Blanks. 
Convert All Tabs and Convert All Spaces convert the entire selected
tree.

2. Leo now allows you to override selected preferences using a
configuration file called leoConfig.txt. Leo acts as before if this file
does not exist.  An option in leoConfig.txt specifies whether
leoConfig.txt is read-only.

3. The Preferences panel is now a modal dialog containing Ok, Cancel and
Revert buttons.

4. At long last, cut and paste work properly in all situations.  You can
cut and paste between Leo and other applications, or between two
different copies of Leo.

5. Added the Recent Files submenu to the File menu.

6. Fixed a number of bugs, including several crashers.  Fixed several
bugs in the Import commands.  Leo will no longer abort reading if it
detects an invalid directory name in the Default Tangle Directory in the
Preferences panel.

What is Leo?
------------

 - A programmer's editor, an outlining editor and a flexible browser.
 - A literate programming tool, compatible with noweb and CWEB.
 - A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
 - Fully scriptable using Python. Leo saves its files in XML format.
 - Portable. leo.py is 100% pure Python and will run on any platform
   supporting Python and Tk/tcl.
 - Open Software, distributed under the Python License.

Links
-----

Leo:      http://personalpages.tds.net/~edream/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458</t>
<t tx="T287">use the command line option in the admin menu to do the following:

add leoConfig.py and leoConfig.txt
	cvs add leoConfig.txt
	cvs add leoConfig.py
	(then do commit)

remove readme*.doc
	remove files from working area (done)
	cvs remove readme1.doc
	cvs remove readme2.doc
	...
	(then do commit)</t>
<t tx="T288">sys.settrace(func) sets the global trace function. there can also a local trace function (see later)

Trace functions have three arguments: frame, event, and arg.
frame is the current stack frame.
event is a string: 'call', 'line', 'return' or 'exception'.
arg depends on the event type. 

The global trace function is invoked (with event set to 'call') whenever a new local scope is entered; it should return a reference to the local trace function to be used that scope, or None if the scope shouldn't be traced. 

The local trace function should return a reference to itself (or to another function for further tracing in that scope), or None to turn off tracing in that scope. 

Instance methods are accepted (and very useful!) as trace functions. 

The events have the following meaning: 

'call' 
A function is called (or some other code block entered). The global trace function is called
arg is the argument list to the function
the return value specifies the local trace function. 

'line' 
The interpreter is about to execute a new line of code (sometimes multiple line events on one line exist). The local trace function is called
arg is None
the return value specifies the new local trace function. 

'return' 
A function (or other code block) is about to return. The local trace function is called
arg is the value that will be returned.
The trace function's return value is ignored. 

'exception' 
An exception has occurred. The local trace function is called.
arg is a triple (exception, value, traceback)
the return value specifies the new local trace function 

Note that as an exception is propagated down the chain of callers, an 'exception' event is generated at each level. 

For more information on code and frame objects, refer to the Python Reference Manual.</t>
<t tx="T289">To increase the size of environment space, add the following to config.sys:

shell=C:\windows\command\command.com /p:4096

Notes:

1. The path C:\windows\command\command.com may vary.  Check you system for the location of command.com.

2. This works for versions of Windows prior to Me.  On Me you set the registry somehow.  No information on XP.</t>
<t tx="T290">leo.py reads and writes exactly like LeoCB</t>
<t tx="T291">Amazing.  I wrote some dummy code last night, read up on indices this morning, and got everything to work in a couple of hours. The result is very fast: no optimization is needed for Leo. I love Tkinter!

Added c.recolor and tree.recolor routines.  This hooks should be called whenever the body text changes.  Apparently there is no "OnTextChanged" event in Tk.</t>
<t tx="T292">This marked my complete frustration with wxLeo and wxPython, and the real beginning of the work on leo.py.</t>
<t tx="T293">I am totally in love with Python.  Everything is so much easier:  Automatic debugging, no declarations, no types, no compilation. Great data structures. Even without single stepping the debugging is easy.

All major aspects of c2py are now complete.</t>
<t tx="T294">I am not sure exactly when this happened.  The details apparently have been lost.  There was a time when I was experimenting with Python and wxPython, and a time when I was working on wxWindows version of Leo.</t>
<t tx="T295">Executable scripts don't execute
	idle, other scripts
Linker sees .so file, loader doesn't
$PATH  no such file or directory
PS1 = "ekr" doesn't work
gdbtk doesn't spawn processes properly
error message (?) when installing using package manager
	no error message given
	Any way of seeing the message?
ldconfig doesn't show /usr/local/lib files
downloaded distributions to /home/edream/downloads and installed from there
Is there any way to allow null passwords?
strange core dumps
worked on Corel Linux
installed from /usr/edream/downloads
high partition with Windows
</t>
<t tx="T296">(wrong) indicates that the pychecker warning is wrong.
(fixed) indicates a lint-like problem was fixed.
(real bug) indicates a real bug was fixed.  These bugs could cause crashes.
(not yet) indicates the problem is in old code that will be rewritten.</t>
<t tx="T297">1: Imported module (sys) not used
	sys.argv is used in some commented-out-traces.</t>
<t tx="T298">(fixed) 1: Imported module (leoFrame) not used

(fixed) 15: Parameter (master) not used</t>
<t tx="T299">(fixed) 362: Local variable (ftag) not used
(fixed) 395: Local variable (dont_set_root_from_headline) shadows global defined on line 0
(fixed) 398: Local variable (dont_set_root_from_headline) shadows global defined on line 0
(fixed) 732: Parameter (doErrorRecoveryFlag) not used
(wrong) 1149: Function (scanText) has too many branches (55)
(wrong) 1149: Function (scanText) has too many lines (434)

(real bug) 1281: Local variable (mStartSentinelComment) not used
(real bug) 1289: Variable (mEndSentinelComment) used before being set

(fixed) 1402: Local variable (ref) not used
(wrong) 1663: Using a conditional statement with a constant value (0)
(fixed) 1777: Local variable (j) not used
(fixed) 1923: Parameter (v) not used
(wrong) 1929: Using a conditional statement with a constant value (0)
(real bug) 2057: No global (writeError) found
(fixed) 2231: Local variable (c) not used
(fixed) 2265: Local variable (next) not used</t>
<t tx="T300">(fixed) 1:   Imported module (Tkinter) not used
(fixed) 267: Parameter (v) not used
(wrong) 281: Function (colorizePython) has too many lines (289)
(fixed) 458: Local variable (linkName) not used
(wrong) 582: Function (colorizeAnyLanguage) has too many lines (366)
(fixed) 832: Local variable (linkName) not used
(fixed) 1083: Local variable (j) not used</t>
<t tx="T301">(fixed) 168: No global (current) found
(fixed) 244: Local variable (v) not used
(fixed) 277: Local variable (v) not used
(fixed) 441: Local variable (v) not used
(fixed) 1058: Local variable (c) not used
(fixed) 1106: Local variable (c) not used
(fixed) 1221: Local variable (c) not used
(fixed) 1414: Invalid arguments to (is_special), got 2, expected 3</t>
<t tx="T302">(wrong) 157: Parameter (event) not used
(wrong) 161: Parameter (event) not used
(fixed) 163: No class attribute (outlineBox) found
(fixed) 163: No class attribute (outlinePick) found
(wrong) 172: Parameter (event) not used
(wrong) 176: Parameter (event) not used
(fixed) 178: No class attribute (fileBox) found
(fixed) 178: No class attribute (filePick) found</t>
<t tx="T303">(real bug) 19: No global (message) found
(fixed) 65: No global (FALSE) found
(fixed) 77: No global (FileExists) found
(fixed) 78: No global (FileAge) found
(fixed) 465: Local variable (c) not used
(fixed) 643: Local variable (rtf) not used
(real bug) 652: Invalid arguments to (es), got 3, expected 1
(fixed) 687: Local variable (vtag) not used

# Numbers changed after I removed checkAllFileDates

(not yet) 831: Local variable (top) not used
(fixed) 1088: Local variable (c) not used
(fixed) 1295: Local variable (at) not used
</t>
<t tx="T304">(wrong) c:\prog\LeoPy\leoFind.py:186: No global (box) found
	box is set in an exec statement.
(wrong) 209: No class attribute (reverse_flag) found
	reverse_flag is initialized in an exect statement.
	It is the only flag that appears in a command=flag outside an exec statement.
(wrong) 272: Parameter (event) not used
(fixed) 293: Local variable (c) not used
(fixed) 314: Local variable (c) not used
(fixed) 324: Local variable (c) not used
(fixed) 536: Local variable (c) not used
(fixed) 573: Local variable (v) not used
</t>
<t tx="T305">(wrong) Note: deleted all "Parameter (event) not used"
(wrong) 203: Function (createMenuBar) has too many lines (387)

(fixed) 227: Local variable (revert) not used
(not yet) 823: Parameter (ratio) not used
(fixed) 893: Statement appears to have no effect
(fixed) 1479: No global (types) found

(later) 1629: No global (SetInitialFont) found
(later) 1632: No global (wxFontDialog) found
(later) 1633: No global (wxPlatform) found
(later) 1634: No global (dialog) found
(later) 1636: No global (wxID_OK) found
(later) 1652: No class attribute (Refresh) found
(later) 2176: No global (wxPoint) found</t>
<t tx="T306">(wrong) 502: Object (lastVnode) has no attribute (insertAfter)
(wrong) 504: Object (lastVnode) has no attribute (insertAsNthChild)
(wrong) 509: Object (lastVnode) has no attribute (parent)</t>
<t tx="T307">(fixed) 1: Imported module (leoTree) not used

(wrong) 307: Parameter (event) not used
(wrong) 314: Parameter (event) not used
(wrong) 328: Parameter (event) not used
(wrong) 339: Parameter (event) not used
(wrong) 348: Parameter (event) not used
(wrong) 357: Parameter (event) not used

# These vars are used in if 0: sections

(wrong) 341: Local variable (c) not used
(wrong) 341: Local variable (v) not used
(wrong) 350: Local variable (c) not used
(wrong) 350: Local variable (v) not used

(real bug) 472: Variable (s) used before being set

(wrong) 523: Using a conditional statement with a constant value (0)
(fixed) 938: Local variable (c) not used
(not yet) 1239: Variable (len) used before being set
(fixed) 1821: No global (dvnode) found
(fixed) 1841: Invalid arguments to (threadNext), got 1, expected 0
(fixed) 1843: Invalid arguments to (threadNext), got 1, expected 0</t>
<t tx="T308">(fixed) 502: Local variable (c) not used
(fixed) 535: Parameter (unitFlag) not used
(fixed) 535: Parameter (v) not used
(real bug) 634: Local variable (marked_flag) not used
(fixed) 662: Local variable (c) not used
(real bug) 668: Variable (path) used before being set
(fixed) 879: Local variable (is_dirty_flag) not used
(real bug) 899: Variable (code) used before being set
(fixed) 1079: Local variable (part) not used
(fixed) 1226: Invalid arguments to (create_temp_name), got 0, expected 1
(fixed) 1577: Local variable (name) not used
(real bug) 1606: Invalid arguments to (match), got 4, expected 3
(fixed) 1901: Local variable (is_dirty) not used
(fixed) 2085: Local variable (first) not used
(real bug) 2087: No global (c) found
(wrong) 2123: Function (forgiving_compare) has too many branches (69)
(wrong) 2123: Function (forgiving_compare) has too many lines (337)
(wrong) 2488: Function (scan_derived_file) has too many lines (236)
(real bug) 2504: Local variable (sentinel_end) not used
(wrong) 3067: Function (is_sentinel_line_with_data) has too many returns (11)
(real bug) 3190: No global (end_sentinel_len) found
(fixed) 3442: Local variable (frame) not used
(real bug) 3458: No global (set_root_delims) found
(real bug) 3460: Local variable (arg_present_language) not used
(real bug) 3532: Local variable (arg_page_width) not used
(real bug) 3541: Local variable (arg_tab_width) not used
(real bug) 3555: Local variable (arg_use_header_flag) not used
(fixed) 3689: Local variable (j) not used</t>
<t tx="T309">(fixed) 1: Imported module (leoApp) not used
(fixed) 1: Imported module (leoNodes) not used
(fixed) 1: Imported module (traceback) not used

(wrong) c:\prog\LeoPy\leoTree.py:664: Parameter (event) not used</t>
<t tx="T310">(fixed) 134: Parameter (name) not used
(fixed) 871: No global (owncolor_bits) found
(fixed) 912: No global (head_root) found

(wrong) 1135: No module attribute (clock) found
(wrong) 1139: No module attribute (clock) found
(wrong) 1141: No module attribute (clock) found</t>
<t tx="T311">@color</t>
<t tx="T312">c=leo.topCommand() # done, sort of

[c]=leo.getCommands() # done</t>
<t tx="T313"># Drawing utilities...
c.BeginUpdate() # also beginUpdate (done)
c.EndUpdate() # also endUpdate (done)
c.Repaint() # also repaint (done)
c.BringToFront() # also bringToFront (done)

# Getters...
v=c.currentVnode() # add (done)
v=c.rootVnode() # add (done)
b=c.isChanged()
s=c.fileName() # mFileName (done)

# Setters...
c.bringToFront()
c.clearAllVisited()
c.editVnode(v)
c.endEditing(v)
c.makeVisible(v)
c.selectVnode(v)
c.synchVnode()  # No longer used.</t>
<t tx="T314"># File menu commands
c.new(windowName)
b=c.open(fileName)
c.close()
b=c.save(fileName)
b=c.saveAs(fileName)
b=c.saveACopyAs(fileName)
c.revert(windowName)

c.tangle()
c.tangleAll()
c.tangleMarked()

c.untangle()
c.untangleAll()
c.untangleMarked()

c.flattenOutline( [fileNames] )
c.cwebToOutline( [fileNames] )
c.importFiles( [fileNames] )
c.importMoreText( [fileNames] )
c.exportMoreText()

# Edit menu commands
c.cut
c.copy
c.paste
c.delete
c.selectAll

c.editCurrentHeadline()
c.extract()
c.extractSection()
c.extractSectionNames()
c.convertBlanks()

# Outline menu commands
c.cutOutline()
c.copyOutline()
c.pasteOutline()
c.deleteHeadline()
c.insertHeadline()
c.clone()

c.contractSubheads()
c.contractAllSubheads()
c.contractAllHeadlines()

c.expandAllHeadlines()
c.expandAllSubheads()
c.expandSubheads()

c.expandLevel1()
c.expandLevel2()
c.expandLevel3()
c.expandLevel4()
c.expandLevel5()
c.expandLevel6()
c.expandLevel7()
c.expandLevel8()
c.expandLevel9()
c.expandNextLevel()

c.moveOutlineLeft()
c.moveOutlineRight()
c.moveOutlineUp()
c.moveOutlineDown()

c.promote()
c.demote()

c.selectThreadBack()
c.selectThreadNext()
c.selectVisBack()
c.selectVisNext()

c.markHeadline()
c.markSubheads()
c.markChangedHeadlines()
c.markChangedRoots()
c.unmarkAll()

c.goToNextDirtyHeadline()
c.goToNextMarkedHeadline()

# Window menu commands
c.equalSizedPanes()</t>
<t tx="T315"># Menu enablers
b=c.canContractAllHeadlines()
b=c.canContractAllSubheads()
b=c.canContractSubheads()
b=c.canCutOutline()
b=c.canDeleteHeadline()
b=c.canDemote()
b=c.canExpandAllHeadlines()
b=c.canExpandAllSubheads()
b=c.canExpandSubheads()
b=c.canExtractSection()
b=c.canExtractSectionNames()
b=c.canGoToNextDirtyHeadline ()
b=c.canGoToNextMarkedHeadline()
b=c.canMarkChangedHeadlines()
b=c.canMarkChangedRoots()
b=c.canMoveOutlineDown()
# Note: the docs do not indicate that these are commands methods (c. omitted)

b=c.canMoveOutlineLeft()
b=c.canMoveOutlineRight()
b=c.canMoveOutlineUp()
b=c.canPasteOutline()
b=c.canPromote()
b=c.canRevert()
b=c.canSelectVisBack()
b=c.canSelectVisNext()
b=c.canSelectThreadBack()
b=c.canSelectThreadNext()
b=c.canSelectToEnd()
b=c.canSelectToStart()
b=c.canShiftBodyLeft()
b=c.canShiftBodyRight()
b=c.canUndo()
b=c.canUnmarkAll()</t>
<t tx="T316"># Getters...
p = leo.getPrefs() # returns instance of the Prefs class
b=p.defaultTangleDirectory()
b=p.doLeoDoneBat()
b=p.doLeoUnBat()
s=p.logWindowString() # returns contents of log window
n=p.pageWidth()
b=p.tangleOutputsHeaderLine()
b=p.tangleOutputsDocChunks()

# Setters...
p.setDefaultTangleDirectory(s)
p.setDoLeoDoneBat(b)
p.setDoLeoUnBat(b)
p.setPageWidth(n)
p.setTangleOutputsHeaderLine(b)
p.setTangleOutputsDocChunks(b)
</t>
<t tx="T317"># Getters...

v=v.next() # mNext (done)
v=v.back() # mBack (done)
v=v.parent()  # mParent (done)
v=v.firstChild() # mFirstChild (done)
s=v.headString() # mHeadString (done)
v=v.findRoot() # (done)
s=v.bodyString() # add: return v.t.bodystring (done)

v=v.currentVnode()
v=v.lastChild()
v=v.lastNode()
v=v.nodeAfterTree()
v=v.nthChild(n)
v=v.threadBack()
v=v.threadNext()
v=v.visBack()
v=v.visNext()
n=v.childIndex()
n=v.numberOfChildren()
n=v.level()
b=v.hasChildren()
b=v.isAncestorOf(v2)
b=v.isCloned()
b=v.isDirty()
b=v.isExpanded()
b=v.isMarked()
b=v.isVisible()
b=v.isVisited()

s=v.convertTreeToString() # not ready yet
s=v.moreBody() # not ready yet
s=v.moreHead(n) # not ready yet

# Setters...
v.setBodyTextOrPane(s) # add (done)
v.setHeadStringOrHeadline(s)
v.setIcon() # add for compatibility (done)
v.trimTrailingLines() # not ready yet

v.moveAfter(v2)
v.moveToNthChildOf(v2,n)  
v.moveToRoot()

v.clearVisited()
v.setVisited()
</t>
<t tx="T318">@ignore
@color

	# To get the current selection
	sel = c.body.tag_ranges("sel")
	if len(sel) == 2:
		start,end = sel # unpack tuple.

	def selection_clear(text):
		text.tag_remove(SEL, 1.0, END)

	def selection_from(text, index):
		text._anchor = index

	def selection_present(text):
		return len(text.tag_ranges(SEL)) != 0

	def selection_range(text, start, end):
		text.tag_remove(SEL, 1.0, start)
		text.tag_add(SEL, start, end)
		text.tag_remove(SEL, end, END)

	def selection_to(text, index):
		if text.compare(index, "&lt;", text._anchor):
			selection_range(text, index, text._anchor)
		else:
			selection_range(text, text._anchor, index)</t>
<t tx="T319">@language python
@color</t>
<t tx="T320">@others</t>
<t tx="T321">proc go {} {
	# createLeo 1
	# createLeo 2
	# createFindPanel
	# createPrefsPanel
	# createColorPanel
	toplevel .font
	createFontPanel .font
	# createComparePanel
}
</t>
<t tx="T322">proc createLeo { n } {

	toplevel .leo$n

	# Create two splitters
	createSplitter .leo$n.s 1
	createSplitter .leo$n.s.pane1.s 0 ;# contains tree and log
	
	text      .leo$n.s.pane2.body -bd 2 -yscrollcommand ".leo$n.s.pane2.scroll set" -setgrid 1
	scrollbar .leo$n.s.pane2.scroll -command ".leo$n.s.pane2.body yview"

	pack .leo$n.s.pane2.scroll -side right -fill y
	pack .leo$n.s.pane2.body -expand yes -fill both

	text .leo$n.s.pane1.s.pane1.tree -bd 2 -yscrollcommand ".leo$n.s.pane1.s.pane1.scroll set" -setgrid 1
	scrollbar .leo$n.s.pane1.s.pane1.scroll -command ".leo$n.s.pane1.s.pane1.tree yview"
	
	pack .leo$n.s.pane1.s.pane1.scroll -side right -fill y
	pack .leo$n.s.pane1.s.pane1.tree   -expand yes -fill both

	# -padx is needed to handle overlap of splitter bar
	text      .leo$n.s.pane1.s.pane2.log    -yscrollcommand ".leo$n.s.pane1.s.pane2.scroll set" -setgrid 1 -padx 4
	scrollbar .leo$n.s.pane1.s.pane2.scroll -command ".leo$n.s.pane1.s.pane2.log yview"
	pack .leo$n.s.pane1.s.pane2.scroll -side right -fill y
	pack .leo$n.s.pane1.s.pane2.log -expand yes -fill both
	
	createMenus $n
}</t>
<t tx="T323">proc createMenus { n } {

	# Create the menu bar
	menu .leo$n.menu -tearoff 0

    set m .leo$n.menu.file
    menu $m -tearoff 0

    .leo$n.menu add cascade -label "File" -menu $m -underline 0
	# to do: fill in the commands...
    $m add command -label "Open..." -command {""}
    $m add command -label "New" -command {""}
    $m add command -label "Save" -command {""}
    $m add command -label "Save As..." -command {""}
    $m add separator
    $m add command -label "Print Setup..." -command {""}
    $m add command -label "Print..." -command {""}
    $m add separator
    $m add command -label "Quit" -command "destroy ."
	
	.leo$n configure -menu .leo$n.menu
}</t>
<t tx="T324"># Create a splitter window into which the caller packs widgets.

proc createSplitter {w verticalFlag} {
	# verticalFlag, height, width could be params
	frame $w -width 4i -height 3i
	frame $w.pane1
	frame $w.pane2
	if { $verticalFlag } {
		# Panes arranged vertically; horizontal splitter bar
		frame $w.bar -height 7
		place $w.pane1 -relx 0.5 -rely   0 -anchor n -relwidth 1.0 -relheight 0.5
		place $w.pane2 -relx 0.5 -rely 1.0 -anchor s -relwidth 1.0 -relheight 0.5
		place $w.bar   -relx 0.5 -rely 0.5 -anchor c -relwidth 1.0
		bind $w.bar &lt;ButtonPress-1&gt;		"onGrabSplitterBar $w 1"
		bind $w.bar &lt;B1-Motion&gt;			"onDragSplitterBar $w 1 %y"
		bind $w.bar &lt;ButtonRelease-1&gt;	"onDropSplitterBar $w 1 %y"
	} else {
		# Panes arranged horizontally; vertical splitter bar
		frame $w.bar -width 7
		place $w.pane1 -rely 0.5 -relx   0 -anchor w -relheight 1.0 -relwidth 0.5
		place $w.pane2 -rely 0.5 -relx 1.0 -anchor e -relheight 1.0 -relwidth 0.5
		place $w.bar   -rely 0.5 -relx 0.5 -anchor c -relheight 1.0
		bind $w.bar &lt;ButtonPress-1&gt;		"onGrabSplitterBar $w 0"
		bind $w.bar &lt;B1-Motion&gt;			"onDragSplitterBar $w 0 %x"
		bind $w.bar &lt;ButtonRelease-1&gt;	"onDropSplitterBar $w 0 %x"
	}
	# Borderwidth required
	$w.bar configure -borderwidth 2 -relief raised -background LightSteelBlue2 
	pack $w -expand yes -fill both
}
</t>
<t tx="T325">proc onGrabSplitterBar {w verticalFlag} {

	# We should change the cursor here.
	
	# Changing the relief is pointless.
		# $w.bar configure -relief sunken
	
	# Changing colors is really bad
		# $w.bar configure -relief sunken -background LightSteelBlue4
		# $w.bar configure -background LightSteelBlue4
}</t>
<t tx="T326">proc onDropSplitterBar {w verticalFlag xy} {

	# We should reset the cursor here.
	$w.bar configure -relief raised -background LightSteelBlue2
}
</t>
<t tx="T327"># xy is the coordinate of the cursor relative to the bar, not the main window.

proc onDragSplitterBar {w verticalFlag xy} {

	if { $verticalFlag } {
		# Panes arranged vertically; horizontal splitter bar
		set wRoot	[winfo rooty $w]
		set barRoot [winfo rooty $w.bar]
		set wMax	[winfo height $w]
	} else {
		# Panes arranged horizontally; vertical splitter bar
		set wRoot	[winfo rootx $w]
		set barRoot [winfo rootx $w.bar]
		set wMax	[winfo width $w]
	}
	set offset [expr double($barRoot) + $xy - $wRoot ]
	# Adjust the pixels, not the frac.
	if { $offset &lt; 3 } { set offset 3 }
	if { $offset &gt; [expr $wMax - 2] } { set offset [expr $wMax - 2] }
	set frac [ expr double($offset) / $wMax ]
	# This redraws the splitter as the drag is occuring.
	# We could also redraw in onDropSplitterBar for non-dynamic updates.
	divideSplitter $w $verticalFlag $frac
	return $frac ;# No longer used
}</t>
<t tx="T328">proc divideSplitter {w verticalFlag frac} {

	if { $verticalFlag } {
		# Panes arranged vertically; horizontal splitter bar
		place $w.bar -rely $frac
		place $w.pane1 -relheight $frac
		place $w.pane2 -relheight [expr 1 - $frac]
	} else {
		# Panes arranged horizontally; vertical splitter bar
		place $w.bar -relx $frac
		place $w.pane1 -relwidth $frac
		place $w.pane2 -relwidth [expr 1 - $frac]
	}
}</t>
<t tx="T329">proc createFindPanel {} {

	toplevel .find
	&lt;&lt; Create the Find and Change panes &gt;&gt;
	&lt;&lt; Create two columns of checkboxes &gt;&gt;
	&lt;&lt; Create two rows of buttons &gt;&gt;
}
</t>
<t tx="T330">frame .find.fc -bd 1m
pack  .find.fc -anchor n -expand yes -fill x

frame .find.fc.fpane -bd 1 -height 0.95i -width 1.5i
frame .find.fc.cpane -bd 1 -height 0.95i -width 1.5i

pack  .find.fc.fpane -anchor n -expand yes -fill x
pack  .find.fc.cpane -anchor s -expand yes -fill x

# Create the labels and text fields.
label .find.fc.fpane.lab -width 8 -text "Find:"
label .find.fc.cpane.lab -width 8 -text "Change:"
text  .find.fc.fpane.t -height 2 -width 20 ; # 2 lines, 20 characters
text  .find.fc.cpane.t -height 2 -width 20

pack  .find.fc.fpane.lab -side left 
pack  .find.fc.cpane.lab -side left
pack  .find.fc.cpane.t -side right -expand yes -fill both
pack  .find.fc.fpane.t -side right -expand yes -fill both
</t>
<t tx="T331">frame .find.boxes -bd 1m
pack  .find.boxes -anchor n -expand yes -fill x

frame .find.boxes.lt -bd 1
frame .find.boxes.rt -bd 1
pack  .find.boxes.lt -side left  -padx 5m
pack  .find.boxes.rt -side right -ipadx 2m

# Create the left column
checkbutton .find.boxes.lt.batch -anchor w -text "Batch"
checkbutton .find.boxes.lt.wrap  -anchor w -text "Wrap around"
checkbutton .find.boxes.lt.word  -anchor w -text "Whole word"
checkbutton .find.boxes.lt.case  -anchor w -text "Ignore case"
checkbutton .find.boxes.lt.pat   -anchor w -text "Pattern match"
pack .find.boxes.lt.batch -fill x
pack .find.boxes.lt.wrap  -fill x
pack .find.boxes.lt.word  -fill x
pack .find.boxes.lt.case  -fill x
pack .find.boxes.lt.pat    -fill x

# Create the right column
checkbutton .find.boxes.rt.headline -anchor w -text "Search Headline Text"
checkbutton .find.boxes.rt.body     -anchor w -text "Search Body Text"
checkbutton .find.boxes.rt.outline  -anchor w -text "Suboutline Only"
checkbutton .find.boxes.rt.mark     -anchor w -text "Mark Changes"
checkbutton .find.boxes.rt.markch   -anchor w -text "Mark Finds"
pack .find.boxes.rt.headline -side top -fill x
pack .find.boxes.rt.body     -side top -fill x
pack .find.boxes.rt.outline  -side top -fill x
pack .find.boxes.rt.mark     -side top -fill x
pack .find.boxes.rt.markch   -side top -fill x
</t>
<t tx="T332"># Create the button panes
frame .find.buttons -bd 1
pack  .find.buttons -anchor n -expand yes -fill x

frame .find.buttons2 -bd 1
pack  .find.buttons2 -anchor n -expand yes -fill x

# Create the first row of buttons
button      .find.buttons.find    -width 8 -text "Find"
checkbutton .find.buttons.reverse -width 8 -text "Reverse"
button      .find.buttons.findAll -width 8 -text "Find All"

pack .find.buttons.find    -pady 1m -padx 1m -side left
pack .find.buttons.reverse -pady 1m          -side left -expand 1
pack .find.buttons.findAll -pady 1m -padx 1m -side right

# Create the second row of buttons
button .find.buttons2.change     -width 8 -text "Change"
button .find.buttons2.changeFind           -text "Change, Then Find"
button .find.buttons2.changeAll  -width 8 -text "Change All"

pack .find.buttons2.change       -pady 1m -padx 1m -side left
pack .find.buttons2.changeFind   -pady 1m          -side left -expand 1
pack .find.buttons2.changeAll    -pady 1m -padx 1m -side right
</t>
<t tx="T333">proc createPrefsPanel {} {

	toplevel .prefs
	&lt;&lt; Create the Global Options frame &gt;&gt;
	&lt;&lt; Create the Tangle Options frame &gt;&gt;
	&lt;&lt; Create the Target Language frame &gt;&gt;
}</t>
<t tx="T334">frame .prefs.glob -bd 1m -relief groove
pack  .prefs.glob -anchor n -pady 1m -ipadx 1m -expand 1 -fill x

label .prefs.glob.title -text "Global Options..."
pack  .prefs.glob.title -pady 1m

# Page width &amp; page width
frame .prefs.glob.f
pack  .prefs.glob.f -anchor w -pady 1m -expand 1 -fill x

label .prefs.glob.f.lab -anchor w -padx 1m -text "Page width:"
text  .prefs.glob.f.txt -height 1 -width 4 ;# lines, characters
pack  .prefs.glob.f.lab .prefs.glob.f.txt -side left

label .prefs.glob.f.lab2 -padx 1m -text "Tab width:"
text  .prefs.glob.f.txt2 -height 1 -width 4 ;# lines, characters
pack  .prefs.glob.f.lab2 .prefs.glob.f.txt2 -side left

# Checkbuttons
checkbutton .prefs.glob.done -anchor w -text "Execute Leo_done.bat after Tangle"
checkbutton .prefs.glob.un   -anchor w -text "Execute Leo_un.bat after Tangle"
pack .prefs.glob.done .prefs.glob.un -fill x
</t>
<t tx="T335"># Frame and title
frame .prefs.tangle -bd 1m -relief groove
pack  .prefs.tangle -anchor n -ipadx 1m -expand 1 -fill x

label .prefs.tangle.title -text "Default Options..."
pack  .prefs.tangle.title -pady 1m

# Label and text
label .prefs.tangle.lab -anchor w -text "Default tangle directory"
text  .prefs.tangle.txt -height 1 -width 30 ;# width significant

pack  .prefs.tangle.lab           -padx 1m -pady 1m -fill x
pack  .prefs.tangle.txt -anchor w -padx 1m -pady 1m -fill x

# Checkbuttons
checkbutton .prefs.tangle.header -anchor w -text "Tangle outputs header line"
checkbutton .prefs.tangle.doc    -anchor w -text "Tangle outputs document chunks"
pack .prefs.tangle.header .prefs.tangle.doc -fill x
</t>
<t tx="T336"># Frame and title
frame .prefs.target -bd 1m -relief groove
pack  .prefs.target -anchor n -pady 1m -ipadx 1m -expand 1 -fill x

label .prefs.target.title -text "Default Target Language..."
pack  .prefs.target.title -pady 1m

# Frames for two columns of radio buttons
frame .prefs.target.lt 
frame .prefs.target.rt
pack  .prefs.target.lt -side left
pack  .prefs.target.rt -side right

## To do: make radio buttons functional.

# Left column of radio buttons
radiobutton .prefs.target.lt.c      -anchor w -text "C/C++"
radiobutton .prefs.target.lt.cweb   -anchor w -text "CWEB"
radiobutton .prefs.target.lt.html   -anchor w -text "HTML"
radiobutton .prefs.target.lt.java   -anchor w -text "Java"
radiobutton .prefs.target.lt.pascal -anchor w -text "Pascal"

pack .prefs.target.lt.c      -fill x
pack .prefs.target.lt.cweb   -fill x
pack .prefs.target.lt.html   -fill x
pack .prefs.target.lt.java   -fill x
pack .prefs.target.lt.pascal -fill x

# Right column of radio buttons
radiobutton .prefs.target.rt.perl   -width 12 -anchor w -text "Perl"
radiobutton .prefs.target.rt.pod              -anchor w -text "Perl + POD"
radiobutton .prefs.target.rt.plain            -anchor w -text "Plain Text"
radiobutton .prefs.target.rt.python           -anchor w -text "Python"

pack .prefs.target.rt.perl   -fill x
pack .prefs.target.rt.pod    -fill x
pack .prefs.target.rt.plain  -fill x
pack .prefs.target.rt.python -fill x
</t>
<t tx="T337">proc showColorPicker {} {
	tk_chooseColor
}

proc createColorPanel {} {

	toplevel .color
	wm title .color "Syntax Coloring"

	frame .color.f -bd 2 -relief groove
	pack  .color.f -anchor n -pady 2 -ipady 1 -ipadx 0 -expand 1 -fill x
	
	# label .color.f.lab -text "Choose syntax colors..."
	# pack  .color.f.lab -side top -fill x
	
	frame .color.f.docF -bd 2
	pack  .color.f.docF
	label .color.f.docF.lab -text "Doc parts:" -width 14 -anchor e
	button .color.f.docF.show -text "" -bg "red" -width 4
	button .color.f.docF.set -text "Set..." -command showColorPicker
	pack  .color.f.docF.lab .color.f.docF.show .color.f.docF.set -side left -padx 3
	
	frame .color.f.cF -bd 2
	pack  .color.f.cF
	label .color.f.cF.lab -text "Comments:" -width 14 -anchor e
	button .color.f.cF.show -text "" -bg "red" -width 4
	button .color.f.cF.set -text "Set..." -command showColorPicker
	pack  .color.f.cF.lab .color.f.cF.show .color.f.cF.set -side left -padx 3

	frame .color.f.sF -bd 2
	pack  .color.f.sF
	label .color.f.sF.lab  -text "Strings:" -width 14 -anchor e
	button .color.f.sF.show -bg "green" -width 4
	button .color.f.sF.set -text "Set..." -command showColorPicker
	pack  .color.f.sF.lab .color.f.sF.show .color.f.sF.set -side left -padx 3
	
	frame .color.f.kF -bd 2
	pack  .color.f.kF
	label .color.f.kF.lab  -text "Keywords:" -width 14 -anchor e
	button .color.f.kF.show -bg "blue" -width 4
	button .color.f.kF.set -text "Set..." -command showColorPicker
	pack  .color.f.kF.lab .color.f.kF.show .color.f.kF.set -side left -padx 3
	
	frame .color.f.dF -bd 2
	pack  .color.f.dF
	label .color.f.dF.lab  -text "Directives:" -width 14 -anchor e
	button .color.f.dF.show -bg "blue" -width 4
	button .color.f.dF.set -text "Set..." -command showColorPicker
	pack  .color.f.dF.lab .color.f.dF.show .color.f.dF.set -side left -padx 3

	frame .color.f.snF -bd 2
	pack  .color.f.snF
	label .color.f.snF.lab  -text "Section names:" -width 14 -anchor e
	button .color.f.snF.show -bg "red" -width 4
	button .color.f.snF.set -text "Set..." -command showColorPicker
	pack  .color.f.snF.lab .color.f.snF.show .color.f.snF.set -side left -padx 3

	frame .color.f.unF -bd 2
	pack  .color.f.unF
	label .color.f.unF.lab  -text "Undefined names:" -width 14 -anchor e
	button .color.f.unF.show -bg "orange" -width 4 
	button .color.f.unF.set -text "Set..." -command showColorPicker
	pack  .color.f.unF.lab .color.f.unF.show .color.f.unF.set -side left -padx 3
}</t>
<t tx="T338">proc createFontPanel {w} {

	frame $w.top
	frame $w.size -bd 2 -relief "ridge"
	frame $w.sample -bd 2 -relief "ridge"
	pack $w.top $w.size $w.sample -pady 2 -ipadx 5 -anchor w -fill both
	
	&lt;&lt; create family pane &gt;&gt;
	&lt;&lt; create style pane &gt;&gt;
	&lt;&lt; create buttons &gt;&gt;
	&lt;&lt; create size pane &gt;&gt;
	&lt;&lt; create sample pane &gt;&gt;
}</t>
<t tx="T339">frame $w.top.family -bd 2 -relief "ridge"
label $w.top.family.lab -text "family"
listbox $w.top.family.box
pack $w.top.family.lab $w.top.family.box -anchor w

frame $w.top.style -bd 2 -relief "ridge"
frame $w.top.right -bd 2 -relief "flat"
pack $w.top.family $w.top.style $w.top.right -side left -fill y -padx 2 -pady 2 ; # -ipadx 5 -ipady 5</t>
<t tx="T340">label $w.top.style.lab -text "Style"
pack  $w.top.style.lab -anchor w
foreach {name text} {
	b Bold
	i Italic
	u Underline
	o Overstrike
} {
	checkbutton $w.top.style.$name -text $text
	pack $w.top.style.$name -side top -anchor w -expand 1
}</t>
<t tx="T341">foreach {name text} {
	ok OK
	cancel Cancel
	apply Apply
} {
	button $w.top.right.$name -text $text -width 6
	pack   $w.top.right.$name -side top -anchor w -pady 2m ; # -expand 1
}</t>
<t tx="T342">frame $w.size.left
label $w.size.lab -text "Size"

text  $w.size.text -height 1 -width 4
pack  $w.size.lab -anchor w
pack  $w.size.left -side left
pack  $w.size.text -side left -fill x -expand 1

frame $w.size.left.row1
frame $w.size.left.row2
pack $w.size.left.row1 $w.size.left.row2 -side top

foreach {size} {
	8 12 18
} {
	radiobutton $w.size.left.row1.radio$size -text $size -variable size
	pack $w.size.left.row1.radio$size -side left
}
foreach {size} {
	10 14 24
} {
	radiobutton $w.size.left.row2.radio$size -text $size -variable size
	pack $w.size.left.row2.radio$size -side left
}</t>
<t tx="T343">label $w.sample.lab -text "Sample"
pack  $w.sample.lab -side top -anchor w

label $w.sample.text -text "ABCabcXYZxyz123(may be changed)"

# entry $w.sample.text -background [$w.sample cget -background]
# $w.sample.text insert 0 "ABCabcXYZxyz123(may be changed)"

pack $w.sample.text -side top -anchor c -expand 1 -fill none

# $w.sample.text insert 0 "ABCabcXYZxyz123(may be changed)"
# $w.sample.text configure -state disabled</t>
<t tx="T344">@ Build the font panel (except for the apply button, which is handled by the 'configure_apply procedure...
@c

proc origCreateFontPanel {w} {
	# Framed regions.  Do this with grid and labels, as that seems
	# to be the most effective technique in practise!
	frame $w.border1 -class DKFChooseFontFrame
	frame $w.border2 -class DKFChooseFontFrame
	frame $w.border3 -class DKFChooseFontFrame
	frame $w.border4 -class DKFChooseFontFrame
	set gap [get_gap $w]
	grid $w.border1 -row 0 -column 0 -rowspan 4 -columnspan 4 \
		-padx $gap -pady $gap -sticky nsew
	grid $w.border2 -row 0 -column 4 -rowspan 4 -columnspan 3 \
		-padx $gap -pady $gap -sticky nsew
	grid $w.border3 -row 4 -column 0 -rowspan 3 -columnspan 9 \
		-padx $gap -pady $gap -sticky nsew
	grid $w.border4 -row 7 -column 0 -rowspan 3 -columnspan 9 \
		-padx $gap -pady $gap -sticky nsew
	incr gap $gap
	foreach col {0 3 4 6 8} {
		grid columnconfigure $w $col -minsize $gap
	}
	foreach row {0 3 4 6 7 9} {
		grid rowconfigure    $w $row -minsize $gap
	}
	grid columnconfigure $w 1 -weight 1
	grid rowconfigure    $w 1 -weight 1
	grid rowconfigure    $w 8 -weight 1

	# Labels for the framed boxes &amp; focus accelerators for their contents
	foreach {subname row col focusWin} {
		Family 0 1 .family     
		Style  0 5 .style.sBold
		Size   4 1 .size.b8    
		Sample 7 1 .sample.text
	} {
		set l [label $w.lbl$subname]
		grid $l -row $row -column $col -sticky w
		## set accel [get_accel $l]
		## if {[string length $accel]} {
			## bind $w &lt;$accel&gt; [list focus $w$focusWin]
		##}
	}

	# Font families
	frame $w.familyBox
	listbox $w.family -exportsel 0 -selectmode browse \
		-xscrollcommand [list $w.familyX set] \
		-yscrollcommand [list $w.familyY set]
	scrollbar $w.familyX -command [list $w.family xview]
	scrollbar $w.familyY -command [list $w.family yview]
	##foreach family [list_families] {
	##	$w.family insert end ['map 'capitalise $family]
	##}
	grid $w.familyBox -row 1 -column 1 -rowspan 1 -columnspan 2 -sticky nsew
	grid columnconfigure $w.familyBox 0 -weight 1
	grid rowconfigure    $w.familyBox 0 -weight 1
	grid $w.family  $w.familyY -sticky nsew -in $w.familyBox
	grid $w.familyX            -sticky nsew -in $w.familyBox
	## bind $w.family &lt;1&gt; [namespace code {'change_family %W [%W nearest %y]}]
	## bindtags $w.family [concat [bindtags $w.family] key$w.family]
	## bind key$w.family &lt;Key&gt; [namespace code {'change_family %W active %A}]

	# Font styles.
	frame $w.style
	grid $w.style -row 1 -column 5 -sticky news
	grid columnconfigure $w.style 0 -weight 1
	foreach {fontstyle lcstyle row next prev} {
		Bold      bold       0 Italic    {}
		Italic    italic     1 Underline Bold
		Underline underline  2 Strikeout Italic
		Strikeout overstrike 3 {}        Underline
	} {
		set b $w.style.s$fontstyle
		checkbutton $b -variable [namespace current]::Style($lcstyle) \
			-command [namespace code 'set_font]
		grid $b -sticky nsew -row $row
		grid rowconfigure $w.style $row -weight 1
		if {[string length $next]} {
			## bind $b &lt;Down&gt; [list focus $w.style.s$next]
		}
		if {[string length $prev]} {
			## bind $b &lt;Up&gt; [list focus $w.style.s$prev]
		}
		## bind $b &lt;Tab&gt;       "[list focus $w.size.b8];break"
		## bind $b &lt;Shift-Tab&gt; "[list focus $w.family ];break"
		## set accel ['get_accel $b]
		## if {[string length $accel]} {
			## bind $w &lt;$accel&gt; "focus $b; $b invoke"
		## }
		## bind $b &lt;Return&gt; "$b invoke; break"
	}
	
	# Size adjustment.  Common sizes with radio buttons, and an
	# entry for everything else.
	frame $w.size
	grid $w.size -row 5 -column 1 -rowspan 1 -columnspan 7 -sticky nsew
	foreach {size row col u d l r} {
		8  0 0  {} 10 {} 12
		10 1 0   8 {} {} 14
		12 0 1  {} 14  8 18
		14 1 1  12 {} 10 24
		18 0 2  {} 24 12 {}
		24 1 2  18 {} 14 {}
	} {
		set b $w.size.b$size
		radiobutton $b -variable [namespace current]::Size -value $size \
			-command [namespace code 'set_font]
		grid $b -row $row -column $col -sticky ew
		#grid columnconfigure $w.size $col -weight 1
		## bif {[string length $u]} {bind $b &lt;Up&gt;    [list focus $w.size.b$u]}
		## bif {[string length $d]} {bind $b &lt;Down&gt;  [list focus $w.size.b$d]}
		## bif {[string length $l]} {bind $b &lt;Left&gt;  [list focus $w.size.b$l]}
		## bif {[string length $r]} {bind $b &lt;Right&gt; [list focus $w.size.b$r]}
		## bind $b &lt;Tab&gt;       "[list focus $w.size.entry ];break"
		## bind $b &lt;Shift-Tab&gt; "[list focus $w.style.sBold];break"
		## set accel ['get_accel $b]
		## if {[string length $accel]} {
			## bind $w &lt;$accel&gt; "focus $b; $b invoke"
		## }
		## bind $b &lt;Return&gt; "$b invoke; break"
	}
	entry $w.size.entry -textvariable [namespace current]::Size
	grid $w.size.entry -row 0 -column 3 -rowspan 2 -sticky ew
	grid columnconfigure $w.size 3 -weight 1
	## bind $w.size.entry &lt;Return&gt; [namespace code {'set_font;break}]
	
	# Sample text.  Note that this is editable
	frame $w.sample
	grid $w.sample -row 8 -column 1 -columnspan 7 -sticky nsew
	grid propagate $w.sample 0
	entry $w.sample.text -background [$w.sample cget -background]
	$w.sample.text insert 0 [option get $w.sample.text text Text]
	grid $w.sample.text
	
	# OK, Cancel and (partially) Apply.  See also 'configure_apply
	frame $w.butnframe
	grid $w.butnframe -row 0 -column 7 -rowspan 4 -columnspan 2 -sticky nsew -pady $gap
	foreach {but code} {
		ok  0
		can 1
	} {
		button $w.butnframe.$but -command [namespace code [list set Done $code]]
		pack   $w.butnframe.$but -side top -fill x -padx [expr {$gap/2}] -pady [expr {$gap/2}]
	}
	button $w.butnframe.apl
	## bind $w.butnframe.ok &lt;Down&gt; [list focus $w.butnframe.can]
	## bind $w.butnframe.can &lt;Up&gt; [list focus $w.butnframe.ok]
}</t>
<t tx="T345"># Convenience proc to get the accelerator for a particular window
# if the user has given one.  Makes it simpler to get this right
# everywhere it is needed...

proc get_accel {w} {
	option get $w accelerator Accelerator
}</t>
<t tx="T346"># Get the gap spacing for the frameboxes.  Use a user-specified
# default if there is one (that is a valid integer) and fall back
# to measuring/guessing otherwise.
proc get_gap {w} {
	set gap [option get $w lineGap LineGap]
	if {[catch {incr gap 0}]} {
		# Some cunning font measuring!
		label $w._testing
		set font [$w._testing cget -font]
		set gap [expr {[font metrics $font -linespace]/2+1}]
		destroy $w._testing
	}
	return $gap
}</t>
<t tx="T347"># Get a sorted lower-case list of all the font families defined on
# the system.  A canonicalisation of [font families]
proc list_families {} {
	lsort [string tolower [font families]]
}
</t>
<t tx="T348"># Path 1: text box
# Path 2: text box

# check: File extension: text box

# Radio buttons:
# 	* print all lines
# 	* print mismatches
# 	* print matches
	
# check: stop after first mismatch
# check: send result to file: text box
# check: generate diffs
# check: ignore whitespace
# check: ignore blank lines

proc createComparePanel {} {

	toplevel .comparePanel
}</t>
<t tx="T349">if 0 {
	myFrame .f -padx 2 -pady 2 -text "My buttons"
	pack .f -fill both -expand 1 -padx 2 -pady 2
	button .f.f.b1 -text Hejsan
	button .f.f.b2 -text Exit -command exit
	pack .f.f.b1 .f.f.b2 -side top -fill x -padx 2 -pady 2
} else {

	# Create the outer labeld frame (doesn't actually have a label).
	myFrame .f -relief ridge -padx 5 -pady 5
	pack .f -fill both -expand 1 -padx 5 -pady 5
	
	# Initialize the grid positioin.
	set row 0
	set col 0
	# lp is the labelanchor value: 1 or two characters, the first character indicates side.
	foreach lp {nw n ne en e es se s sw ws w wn} {
		set w .f.f.f$lp
		# Create a myFrame: everything after %w are args.
		myFrame $w -text "Hej" -padx 2 -pady 2 -labelanchor $lp
		# Place the frame in the grid.
		grid $w -row $row -col $col -sticky news -padx 5 -pady 5
		# Create two buttons and pack them in the labeled frame.
		button $w.f.b1 -text Hoppsan
		button $w.f.b2 -text Quit -command exit
		pack $w.f.b1 $w.f.b2 -side top -fill x -padx 2 -pady 2
		# Bump the grid position.
		incr col
		if {$col == 3} {
			incr row
			set col 0
		}
	}
	
	# Create the last row.
	foreach wl {l1 l2 l3} {
		# Create the "special" label w.
		switch $wl {
			l1 {
				label .$wl -text Hej -bd 2 -relief groove
			} 
			l2 {
				checkbutton .$wl -text Hej
			} 
			l3 {
				radiobutton .$wl -text Hej
			}
		} 
		set w .f.f.f$wl
	
		# Create the labled frame using the -labelwindow option.
		myFrame $w -labelwindow .$wl -padx 2 -pady 2 -labelanchor nw
		# Place the labeled frame in the grid
		grid $w -row $row -col $col -sticky news -padx 5 -pady 5
		# Create two buttons and pack them in the labeled frame.
		button $w.f.b1 -text Hoppsan
		button $w.f.b2 -text Quit -command exit
		pack $w.f.b1 $w.f.b2 -side top -fill x -padx 2 -pady 2
		# Bump the grid position.
		incr col
		if {$col == 3} {
			incr row
			set col 0
		}
	}
}</t>
<t tx="T350"># w is the frame to be created.
# This configures w.f to be the content.
# Typically, the user will pack more content into w.f.

proc myFrame {w args} {

	# Args must come in pairs.
    if {([llength $args] % 2) != 0} {
        error {wrong # args: should be "myFrame pathName ?options?"}
    }
	# Initialize the local vars.
    set allopts {} # options that apply everywhere.
    set fopts {} # border options.
    set lopts {} # label options (only for labels that are Tk label widgets)
    set labelanchor nw # The usual default.
    set padx 0
    set pady 0
    set bd 2
    set relief groove
    set labelwindow "" # Can be any Tk widget!
    set text "" # The user usually just sets this.
	# Set vars based on args.
    foreach {opt val} $args {
        switch -- $opt {
            -bd - -borderwidth {
                set bd $val
            }
            -relief {
                set relief $val
            }
            -text {
                lappend lopts $opt $val
                set text $val
            }
            -font - -fg - -foreground {
                lappend lopts $opt $val
            }
            -labelanchor {
                set labelanchor $val
            }
            -labelwindow {
                set labelwindow $val
            }
            -padx {
                set padx $val
            }
            -pady {
                set pady $val
            }
            -bg - -background - -cursor {
                lappend allopts $opt $val
            }
            default {
                error "Unknown or unsupported option: $opt"
            }
        }
    }
	# relief and border options are frame options.
    lappend fopts -relief $relief -bd $bd 
	# Create the frame and its border, w.bd.
    eval frame $w $allopts
    eval frame $w.bd $fopts $allopts
	# Create lw depending on args.
    if {$labelwindow != ""} {
		# Used the window the user passed in.
        set lw $labelwindow
        raise $labelwindow $w
    } elseif {$text != ""} {
        set lw $w.l
		# This is typical.
        eval label $lw $lopts $allopts -highlightthickness 0 -bd 0
    } else {
        set lw ""
    }
	# Create the frame's grid.
    eval frame $w.f $allopts
	# Configure w as a grid with 5 rows and columns:
	# 1 border, 2 pad, 3 w.f, 4 pad, 5 border.
    grid columnconfigure $w {2 4} -minsize $padx
    grid rowconfigure    $w {2 4} -minsize $pady
    grid columnconfigure $w 3     -weight 1
    grid rowconfigure    $w 3     -weight 1
    grid columnconfigure $w {1 5} -minsize $bd
    grid rowconfigure    $w {1 5} -minsize $bd
	# Create the border, w.bd.
    grid $w.bd -row 1 -col 1 -rowspan 5 -columnspan 5 -sticky news
	# Create the content, w.f in the center.
    grid $w.f -row 3 -col 3 -sticky news
	# Optional: configure lw, the label window in the frame.
    if {$lw != ""} {
		# n*, s*, w* and e* are patterns to -glob.
        switch -glob $labelanchor {
            n* {
                grid $lw -in $w -row 0 -col 2 -rowspan 2 -columnspan 3 -padx 4
            }
            s* {
                grid $lw -in $w -row 5 -col 2 -rowspan 2 -columnspan 3 -padx 4
            }
            w* {
                grid $lw -in $w -row 2 -col 0 -rowspan 3 -columnspan 2 -pady 4
            }
            e* {
                grid $lw -in $w -row 2 -col 5 -rowspan 3 -columnspan 2 -pady 4
            }
        }
		# set the sticky param to the first character of the labelanchor, i.e., n,s,e or w.
        grid $lw -sticky [string index $labelanchor 1]
    }
}</t>
<t tx="T351">@ignore</t>
<t tx="T352">@ignore

#! /bin/sh
# \
exec wish8.0 $0 ${1+"$@"} || exec wish $0 ${1+"$@"} || exit 1

namespace eval ::dkfFontSel {
	@others
}

namespace import ::dkfFontSel::dkf_chooseFont

# Is there anything already set up as a standard command?
if {![info exist tk_chooseFont]} {
    # If not, set ourselves up using an alias
    interp alias {} tk_chooseFont {} ::dkfFontSel::dkf_chooseFont
}

# ----------------------------------------------------------------------
# Stuff for testing the font selector
if {![string compare [info script] $argv0]} {
    wm deiconify .; update
    # use after idle here to put errors into a dialog for testing...
    after idle {puts [dkf_chooseFont -apply puts]}
}</t>
<t tx="T353"># Local procedure names (ones that it is a bad idea to refer to
# outside this namespace/file) are prepended with an apostrophe
# character.  There are no externally useful variables.

# First some library stuff that is normally in another namespace

# Simple (nay, brain-dead) option parser.  Given the list of
# arguments in arglist and the list of legal options in optlist,
# parse the options to convert into array values (which are stored
# in the caller's array named in optarray.  Does not handle errors
# spectacularly well, and can be replaced by something that does a
# better job without me feeling to fussed about it!
proc 'parse_opts {arglist optlist optarray} {
upvar $optarray options
set options(foo) {}
unset options(foo)
set callername [lindex [info level -1] 0]
if {[llength $arglist]&amp;1} {
    return -code error \
	    "Must be an even number of arguments to $callername"
}
array set options $arglist
foreach key [array names options] {
    if {![string match -?* $key]} {
	return -code error "All parameter keys must start\
		with \"-\", but \"$key\" doesn't"
    }
    if {[lsearch -exact $optlist $key] &lt; 0} {
	return -code error "Bad parameter \"$key\""
    }
}
}</t>
<t tx="T354"># Capitalise the given word.  Assumes the first capitalisable
# letter is the first character in the argument.
proc 'capitalise {word} {
set cUpper [string toupper [string index $word 0]]
set cLower [string tolower [string range $word 1 end]]
return ${cUpper}${cLower}
}</t>
<t tx="T355"># The classic functional operation.  Replaces each element of the
# input list with the result of running the supplied script on
# that element.
proc 'map {script list} {
set newlist {}
foreach item $list {
    lappend newlist [uplevel 1 $script [list $item]]
}
return $newlist
}
</t>
<t tx="T356"># ----------------------------------------------------------------------
# Now we start in earnest
namespace export dkf_chooseFont

variable Family Helvetica
variable Size   12
variable Done   0
variable Win    {}

array set Style {
bold 0
italic 0
underline 0
overstrike 0
}</t>
<t tx="T357"># Get the gap spacing for the frameboxes.  Use a user-specified
# default if there is one (that is a valid integer) and fall back
# to measuring/guessing otherwise.
proc 'get_gap {w} {
	set gap [option get $w lineGap LineGap]
	if {[catch {incr gap 0}]} {
		# Some cunning font measuring!
		label $w._testing
		set font [$w._testing cget -font]
		set gap [expr {[font metrics $font -linespace]/2+1}]
		destroy $w._testing
	}
	return $gap
}</t>
<t tx="T358"># Build the user interface (except for the apply button, which is
# handled by the 'configure_apply procedure...
proc 'make_UI {w} {
# Framed regions.  Do this with grid and labels, as that seems
# to be the most effective technique in practise!
frame $w.border1 -class DKFChooseFontFrame
frame $w.border2 -class DKFChooseFontFrame
frame $w.border3 -class DKFChooseFontFrame
frame $w.border4 -class DKFChooseFontFrame
set gap ['get_gap $w]
grid $w.border1 -row 0 -column 0 -rowspan 4 -columnspan 4 \
	-padx $gap -pady $gap -sticky nsew
grid $w.border2 -row 0 -column 4 -rowspan 4 -columnspan 3 \
	-padx $gap -pady $gap -sticky nsew
grid $w.border3 -row 4 -column 0 -rowspan 3 -columnspan 9 \
	-padx $gap -pady $gap -sticky nsew
grid $w.border4 -row 7 -column 0 -rowspan 3 -columnspan 9 \
	-padx $gap -pady $gap -sticky nsew
incr gap $gap
foreach col {0 3 4 6 8} {
    grid columnconfigure $w $col -minsize $gap
}
foreach row {0 3 4 6 7 9} {
    grid rowconfigure    $w $row -minsize $gap
}
grid columnconfigure $w 1 -weight 1
grid rowconfigure    $w 1 -weight 1
grid rowconfigure    $w 8 -weight 1


# Labels for the framed boxes &amp; focus accelerators for their contents
foreach {subname row col focusWin} {
    Family 0 1 .family     
    Style  0 5 .style.sBold
    Size   4 1 .size.b8    
    Sample 7 1 .sample.text
} {
    set l [label $w.lbl$subname]
    grid $l -row $row -column $col -sticky w
    set accel ['get_accel $l]
    if {[string length $accel]} {
	bind $w &lt;$accel&gt; [list focus $w$focusWin]
    }
}


# Font families
frame $w.familyBox
listbox $w.family -exportsel 0 -selectmode browse \
	-xscrollcommand [list $w.familyX set] \
	-yscrollcommand [list $w.familyY set]
scrollbar $w.familyX -command [list $w.family xview]
scrollbar $w.familyY -command [list $w.family yview]
foreach family ['list_families] {
    $w.family insert end ['map 'capitalise $family]
}
grid $w.familyBox -row 1 -column 1 -rowspan 1 -columnspan 2 \
	-sticky nsew
grid columnconfigure $w.familyBox 0 -weight 1
grid rowconfigure    $w.familyBox 0 -weight 1
grid $w.family  $w.familyY -sticky nsew -in $w.familyBox
grid $w.familyX            -sticky nsew -in $w.familyBox
bind $w.family &lt;1&gt; [namespace code {'change_family %W [%W nearest %y]}]
bindtags $w.family [concat [bindtags $w.family] key$w.family]
bind key$w.family &lt;Key&gt; [namespace code {'change_family %W active %A}]


# Font styles.
frame $w.style
grid $w.style -row 1 -column 5 -sticky news
grid columnconfigure $w.style 0 -weight 1
foreach {fontstyle lcstyle row next prev} {
    Bold      bold       0 Italic    {}
    Italic    italic     1 Underline Bold
    Underline underline  2 Strikeout Italic
    Strikeout overstrike 3 {}        Underline
} {
    set b $w.style.s$fontstyle
    checkbutton $b -variable [namespace current]::Style($lcstyle) \
	    -command [namespace code 'set_font]
    grid $b -sticky nsew -row $row
    grid rowconfigure $w.style $row -weight 1
    if {[string length $next]} {
	bind $b &lt;Down&gt; [list focus $w.style.s$next]
    }
    if {[string length $prev]} {
	bind $b &lt;Up&gt; [list focus $w.style.s$prev]
    }
    bind $b &lt;Tab&gt;       "[list focus $w.size.b8];break"
    bind $b &lt;Shift-Tab&gt; "[list focus $w.family ];break"
    set accel ['get_accel $b]
    if {[string length $accel]} {
	bind $w &lt;$accel&gt; "focus $b; $b invoke"
    }
    bind $b &lt;Return&gt; "$b invoke; break"
}


# Size adjustment.  Common sizes with radio buttons, and an
# entry for everything else.
frame $w.size
grid $w.size -row 5 -column 1 -rowspan 1 -columnspan 7 -sticky nsew
foreach {size row col u d l r} {
    8  0 0  {} 10 {} 12
    10 1 0   8 {} {} 14
    12 0 1  {} 14  8 18
    14 1 1  12 {} 10 24
    18 0 2  {} 24 12 {}
    24 1 2  18 {} 14 {}
} {
    set b $w.size.b$size
    radiobutton $b -variable [namespace current]::Size -value $size \
	    -command [namespace code 'set_font]
    grid $b -row $row -column $col -sticky ew
    #grid columnconfigure $w.size $col -weight 1
    if {[string length $u]} {bind $b &lt;Up&gt;    [list focus $w.size.b$u]}
    if {[string length $d]} {bind $b &lt;Down&gt;  [list focus $w.size.b$d]}
    if {[string length $l]} {bind $b &lt;Left&gt;  [list focus $w.size.b$l]}
    if {[string length $r]} {bind $b &lt;Right&gt; [list focus $w.size.b$r]}
    bind $b &lt;Tab&gt;       "[list focus $w.size.entry ];break"
    bind $b &lt;Shift-Tab&gt; "[list focus $w.style.sBold];break"
    set accel ['get_accel $b]
    if {[string length $accel]} {
	bind $w &lt;$accel&gt; "focus $b; $b invoke"
    }
    bind $b &lt;Return&gt; "$b invoke; break"
}
entry $w.size.entry -textvariable [namespace current]::Size
grid $w.size.entry -row 0 -column 3 -rowspan 2 -sticky ew
grid columnconfigure $w.size 3 -weight 1
bind $w.size.entry &lt;Return&gt; \
	[namespace code {'set_font;break}]


# Sample text.  Note that this is editable
frame $w.sample
grid $w.sample -row 8 -column 1 -columnspan 7 -sticky nsew
grid propagate $w.sample 0
entry $w.sample.text -background [$w.sample cget -background]
$w.sample.text insert 0 [option get $w.sample.text text Text]
grid $w.sample.text


# OK, Cancel and (partially) Apply.  See also 'configure_apply
frame $w.butnframe
grid $w.butnframe -row 0 -column 7 -rowspan 4 -columnspan 2 \
	-sticky nsew -pady $gap
foreach {but code} {
    ok  0
    can 1
} {
    button $w.butnframe.$but -command \
	    [namespace code [list set Done $code]]
    pack $w.butnframe.$but -side top -fill x -padx [expr {$gap/2}] \
	    -pady [expr {$gap/2}]
}
button $w.butnframe.apl
bind $w.butnframe.ok &lt;Down&gt; [list focus $w.butnframe.can]
bind $w.butnframe.can &lt;Up&gt; [list focus $w.butnframe.ok]
}</t>
<t tx="T359"># Convenience proc to get the accelerator for a particular window
# if the user has given one.  Makes it simpler to get this right
# everywhere it is needed...
proc 'get_accel {w} {
option get $w accelerator Accelerator
}


</t>
<t tx="T360"># Called when changing the family.  Sets the family to either be
# the first family whose name starts with the given character (if
# char is non-empty and not special) or to be the name of the
# family at the given index of the listbox.
proc 'change_family {w index {char {}}} {
variable Family
if {[string length $char] &amp;&amp; ![regexp {[]*?\\[]} $char]} {
    set idx [lsearch -glob ['list_families] $char*]
    if {$idx &gt;= 0} {
	set index $idx
	$w activate $idx
	$w selection clear 0 end
	$w selection anchor $idx
	$w selection set $idx
	$w see $idx
    }
}
set Family [$w get $index]
##DEBUG
#wm title [winfo toplevel $w] $Family
'set_font
}</t>
<t tx="T361"># The apply button runs this script when pressed.
proc 'do_apply {w script} {
'set_font
set font [$w.sample.text cget -font]
uplevel #0 $script [list $font]
}
</t>
<t tx="T362"># Based on whether the supplied script is empty or not, install an
# apply button into the dialog.  This is not part of 'make_UI
# since it happens at a different stage of initialisation.
proc 'configure_apply {w script} {
set b $w.butnframe.apl
set binding [list $b invoke]
if {[string length $script]} {
    # There is a script, so map the button
    array set packinfo [pack info $w.butnframe.ok]
    $b configure -command [namespace code [list 'do_apply $w $script]]
    pack $b -side top -fill x -padx $packinfo(-padx) \
	    -pady $packinfo(-pady)

    bind $w.butnframe.can &lt;Down&gt; [list focus $w.butnframe.apl]
    bind $w.butnframe.apl &lt;Up&gt;   [list focus $w.butnframe.can]

    # Set up accelerator.  Tricky since we want to force a
    # systematic match with the underline
    set uline [$b cget -underline]
    if {$uline&gt;=0} {
	set uchar [string index [$b cget -text] $uline]
	set uchar [string tolower $uchar]
	bind $w &lt;Meta-$uchar&gt; $binding
    }

} else {
    # No script =&gt; no button
    set manager [winfo manager $b]
    if {[string length $manager]} {
	$manager forget $b

	# Now we must remove the accelerator!  This is tricky
	# since we don't actually know what it is officially
	# bound to...
	foreach bindseq [bind $w] {
	    if {![string compare [bind $w $bindseq] $binding]} {
		bind $w $bindseq {}
		break
	    }
	}

    }
}
}
</t>
<t tx="T363"># Set the font on the editor window based on the information in
# the namespace variables.  Returns a 1 if the operation was a
# failure and 0 if it iwas a success.
proc 'set_font {} {
variable Family
variable Style
variable Size
variable Win

set styles {}
foreach style {italic bold underline overstrike} {
    if {$Style($style)} {
	lappend styles $style
    }
}
if {[catch {
    expr {$Size+0}
    if {[llength $styles]} {
	$Win configure -font [list $Family $Size $styles]
    } else {
	$Win configure -font [list $Family $Size]
    }
} s]} {
    bgerror $s
    return 1
}
return 0
}</t>
<t tx="T364"># Get a sorted lower-case list of all the font families defined on
# the system.  A canonicalisation of [font families]
proc 'list_families {} {
lsort [string tolower [font families]]
}

# ----------------------------------------------------------------------
</t>
<t tx="T365">proc dkf_chooseFont {args} {
variable Family
variable Style
variable Size
variable Done
variable Win

array set options {
    -parent {}
    -title {Select a font}
    -initialfont {}
    -apply {}
}
'parse_opts $args [array names options] options
switch -exact -- $options(-parent) {
    . - {} {
	set parent .
	set w .__dkf_chooseFont
    }
    default {
	set parent $options(-parent)
	set w $options(-parent).__dkf_chooseFont
    }
}
catch {destroy $w}

toplevel $w -class DKFChooseFont
wm title $w $options(-title)
wm transient $w $parent
wm iconname $w ChooseFont
wm group $w $parent
wm protocol $w WM_DELETE_WINDOW {#}

if {![string length $options(-initialfont)]} {
    set options(-initialfont) [option get $w initialFont InitialFont]
}

set Win $w.sample.text
'make_UI $w
bind $w &lt;Return&gt;  [namespace code {set Done 0}]
bind $w &lt;Escape&gt;  [namespace code {set Done 1}]
bind $w &lt;Destroy&gt; [namespace code {set Done 1}]
focus $w.butnframe.ok

'configure_apply $w $options(-apply)

foreach style {italic bold underline overstrike} {
    set Style($style) 0
}
foreach {family size styles} $options(-initialfont) {break}
set Family $family
set familyIndex [lsearch -exact ['list_families] \
	[string tolower $family]]
if {$familyIndex&lt;0} {
    wm withdraw $w
    tk_messageBox -type ok -icon warning -title "Bad Font Family" \
	    -message "Font family \"$family\" is unknown.  Guessing..."
    set family [font actual $options(-initialfont) -family]
    set familyIndex [lsearch -exact ['list_families] \
	    [string tolower $family]]
    if {$familyIndex&lt;0} {
	return -code error "unknown font family fallback \"$family\""
    }
    wm deiconify $w
}
$w.family selection set $familyIndex
$w.family see $familyIndex
set Size $size
foreach style $styles {set Style($style) 1}

'set_font

wm withdraw $w
update idletasks
if {$options(-parent)==""} {
    set x [expr {([winfo screenwidth $w]-[winfo reqwidth $w])/2}]
    set y [expr {([winfo screenheigh $w]-[winfo reqheigh $w])/2}]
} else {
    set pw $options(-parent)
    set x [expr {[winfo x $pw]+
                     ([winfo width $pw]-[winfo reqwidth $w])/2}]
    set y [expr {[winfo y $pw]+
                     ([winfo heigh $pw]-[winfo reqheigh $w])/2}]
}
wm geometry $w +$x+$y
update idletasks
wm deiconify $w
tkwait visibility $w
vwait [namespace current]::Done
if {$Done} {
    destroy $w
    return ""
}
if {['set_font]} {
    destroy $w
    return ""
}
set font [$Win cget -font]
destroy $w
return $font
}</t>
<t tx="T366"># ----------------------------------------------------------------------
# I normally load these from a file, but I inline them here for portability
foreach {pattern value} {
*DKFChooseFont.DKFChooseFontFrame.borderWidth	2
*DKFChooseFont.DKFChooseFontFrame.relief	ridge


*DKFChooseFont.lblFamily.text	       Family
*DKFChooseFont.lblFamily.underline     0
*DKFChooseFont.lblFamily.accelerator   Control-f

*DKFChooseFont.lblStyle.text	       Style
*DKFChooseFont.lblStyle.underline      2
*DKFChooseFont.lblStyle.accelerator    Control-y

*DKFChooseFont.lblSize.text	       Size
*DKFChooseFont.lblSize.underline       2
*DKFChooseFont.lblSize.accelerator     Control-z

*DKFChooseFont.lblSample.text	       Sample


*DKFChooseFont.style.Checkbutton.anchor		w

*DKFChooseFont.style.sBold.text	       Bold
*DKFChooseFont.style.sBold.underline   0
*DKFChooseFont.style.sBold.accelerator Control-b

*DKFChooseFont.style.sItalic.text      Italic
*DKFChooseFont.style.sItalic.underline   0
*DKFChooseFont.style.sItalic.accelerator Control-i

*DKFChooseFont.style.sUnderline.text   Underline
*DKFChooseFont.style.sUnderline.underline   0
*DKFChooseFont.style.sUnderline.accelerator Control-u

*DKFChooseFont.style.sStrikeout.text   Overstrike
*DKFChooseFont.style.sStrikeout.underline   0
*DKFChooseFont.style.sStrikeout.accelerator Control-o


*DKFChooseFont.Label.padX	       1m
*DKFChooseFont.Label.padY	       1

*DKFChooseFont.family.height	       1
*DKFChooseFont.family.width	       12
*DKFChooseFont.familyX.orient	       horizontal
*DKFChooseFont.Scrollbar.takeFocus     0

*DKFChooseFont.size.b8.text	       8
*DKFChooseFont.size.b10.text	       10
*DKFChooseFont.size.b12.text	       12
*DKFChooseFont.size.b14.text	       14
*DKFChooseFont.size.b18.text	       18
*DKFChooseFont.size.b24.text	       24
*DKFChooseFont.size.Radiobutton.anchor w
*DKFChooseFont.size.Entry.background   white

*DKFChooseFont.sample.text.text	       ABCabcXYZxyz123
*DKFChooseFont.sample.text.takeFocus   0
*DKFChooseFont.sample.text.highlightThickness 0
*DKFChooseFont.sample.text.borderWidth 0
*DKFChooseFont.sample.text.relief      flat
*DKFChooseFont.sample.text.width       0
*DKFChooseFont.sample.text.cursor      {}
*DKFChooseFont.sample.height	       40
*DKFChooseFont.sample.width	       40

*DKFChooseFont.butnframe.ok.default    active
*DKFChooseFont.butnframe.ok.text       OK
*DKFChooseFont.butnframe.can.default   normal
*DKFChooseFont.butnframe.can.text      Cancel
*DKFChooseFont.butnframe.apl.default   normal
*DKFChooseFont.butnframe.apl.text      Apply
*DKFChooseFont.butnframe.apl.underline 0
} {
option add $pattern $value startupFile
}
switch $tcl_platform(platform) {
windows {
    option add *DKFChooseFont.initialFont {Arial 12 bold} startupFile
}
default {
    foreach {pattern value} {
	*DKFChooseFont*Button.BorderWidth      1
	*DKFChooseFont*Checkbutton.BorderWidth 1
	*DKFChooseFont*Entry.BorderWidth       1
	*DKFChooseFont*Label.BorderWidth       1
	*DKFChooseFont*Listbox.BorderWidth     1
	*DKFChooseFont*Menu.BorderWidth	       1
	*DKFChooseFont*Menubutton.BorderWidth  1
	*DKFChooseFont*Message.BorderWidth     1
	*DKFChooseFont*Radiobutton.BorderWidth 1
	*DKFChooseFont*Scale.BorderWidth       1
	*DKFChooseFont*Scrollbar.BorderWidth   1
	*DKFChooseFont*Text.BorderWidth	       1
	*DKFChooseFont.Scrollbar.width         10
	*DKFChooseFont.initialFont             {Helvetica 12 bold}
    } {
	option add $pattern $value startupFile
    }
}
}</t>
<t tx="T367">@language python
@others

if __name__ == "__main__":
	import ROStdTk
	root = ROStdTk.ROStdTk()
	
	pvList = (
		PrefVar.FontPrefVar(
			name = "font1",
			category = "fonts",
			defValue = {"family":"helvetica", "size":"12"},
			shortDescr = "a font",
		),
		PrefVar.FontPrefVar(
			name = "font2",
			category = "fonts",
			defValue = {"family":"times", "size":"14", "weight":"bold"},
			shortDescr = "another font",
		),
		PrefVar.ColorPrefVar(
			name = "color1",
			category = "colors",
			defValue = "black",
			shortDescr = "a color",
		),
		PrefVar.ColorPrefVar(
			name = "color2",
			category = "colors",
			defValue = "red",
			shortDescr = "another color",
		),
		PrefVar.StrPrefVar(
			name = "string1",
			category = "strings",
			defValue = "",
			shortDescr = "string with no restrictions",
		),
		PrefVar.StrPrefVar(
			name = "string2",
			category = "strings",
			defValue = "foo",
			partialPattern = r"^[a-z]*$",
			shortDescr = "string with format ^[a-z]*$",
		),
		PrefVar.StrPrefVar(
			name = "string3",
			category = "strings",
			defValue = "foo",
			validValues = ("foo", "bar", "baz", "and so on"),
			partialPattern = r"^[a-z]*$",
			shortDescr = "string with format ^[a-z]*$",
		),
		PrefVar.IntPrefVar(
			name ="int1",
			category = "ints",
			defValue = 0,
			shortDescr = "int with no restrictions",
		),
		PrefVar.IntPrefVar(
			name = "int2",
			category = "ints",
			defValue = 45,
			maxValue = 99,
			shortDescr = "int with default 45 and upper limit 99",
		),
		PrefVar.IntPrefVar(
			name = "int3",
			category = "ints",
			defValue = 0,
			minValue = -75,
			shortDescr = "int with lower limit of -75",
		),
		PrefVar.IntPrefVar(
			name = "int4",
			category = "ints",
			defValue = 0,
			minValue = -9,
			maxValue =  9,
			shortDescr = "int with range of [-9, 9]",
		),
		PrefVar.FloatPrefVar(
			name = "float1",
			category = "floats",
			defValue = 0,
			shortDescr = "float with no restrictions",
		),
		PrefVar.FloatPrefVar(
			name = "float2",
			category = "floats",
			defValue = 0,
			maxValue = 99.99,
			shortDescr = "float with upper limit of 99.99",
		),
		PrefVar.FloatPrefVar(
			name = "float3",
			category = "floats",
			defValue = 0, 
			minValue = -75.50,
			shortDescr = "float with lower limit of -75.50",
		),
		PrefVar.FloatPrefVar(
			name = "float4",
			category = "floats",
			defValue = 0,
			minValue = -9.99,
			maxValue =  9.99,
			shortDescr = "float with range of [-9.99, 9.99]",
		),
	)
	
	peList = []
	row = 0
	editFactory = PrefEditFactory()
	for pv in pvList:
		peList.append(editFactory.getEditor(pv, root, row, column = 0))
		row += 1

	root.mainloop()
</t>
<t tx="T368">#!/usr/local/bin/python
"""Widgets for editing individual preference variables.

To Do:
- Support multiple choice plus editing
- Support multiple choice (with and without editing) for colors and fonts?

History:
2002-02-06 R. Owen: strings, floats and ints work; colors started, fonts not started.
2002-02-07 R. Owen: added code to sense unapplied changes
2002-02-08 R. Owen: implemented the color editor and fixed the test code
	Font editor partially implemented. Restoring default and current values fails
	and styles are not yet implemented -- need a menu with checkboxes for
	italic, bold, underscore and overstrike (plus, preferably, a "Plain" entry to remove all that crap).
2002-03-01 R. Owen: greatly simplified the display be replacing the buttons
	with a menu. Added a "changed" indicator. Finished color and made great strides in font handling.
2002-03-08 R. Owen: finished font editor.
"""
import PrefVar
import Tkinter
import tkColorChooser
import tkFont
from OrderedDict import OrderedDict

</t>
<t tx="T369">class PrefEditFactory:
	&lt;&lt; class PrefEditFactory methods &gt;&gt;

</t>
<t tx="T370">"""Returns a PrefEditor suitable for the specified PrefVar"""
</t>
<t tx="T371">class PrefEditFactory:

	@others</t>
<t tx="T372">def getEditor(self,
	prefVar,
	master,
	row = 0,
	column = 0,
</t>
<t tx="T373">class PrefEditor:
	"""Basic preferences editor. Works for string, numeric and boolean data
(PrefVar, StrPrefVar, IntPrefVar, FloatPrefVar, BoolPrefVar).
"""
	@others

</t>
<t tx="T374">def __init__(self,
	prefVar,
	master,
	row = 0,
	column = 0,
):
	self.master = master
	self.prefVar = prefVar

	# create and set a variable to contain the edited value
	self.editVar = Tkinter.StringVar()
	self.editVar.set(self.prefVar.getValueStr())
	
	# save initial value, in case we have to restore it
	self.initialValue = self.getCurrentValue()
	
	# save last good value, for use if a typed char is rejected
	self.mostRecentValidValue = self.editVar.get()
	
	# set up checking of partial values
	self.editVar.trace_variable('w', self._editCallback)

	# create a dictionary of widgets
	self.wdgDict = OrderedDict()
	self.wdgDict["changed"] = Tkinter.Label(self.master, width=2)
	self.wdgDict["label"] = self._getLabelWdg()
	self.wdgDict["edit"] = self._getEditWdg()
	self.wdgDict["range"] = self._getRangeWdg()
	self.wdgDict["showmenu"] = self._getShowMenu()
	
	# grid the widgets
	for wdg in self.wdgDict.itervalues():
		wdg.grid(row=row, column=column)
		column += 1</t>
<t tx="T375">

def getCurrentValue(self):
	"""Returns the current value of the preference variable
	(not necessarily the value shown in the value editor).
	"""
	return self.prefVar.getValueStr()
</t>
<t tx="T376">def getDefaultValue(self):
	"""Returns the current value of the preference variable
	(not necessarily the value shown in the value editor).
	"""
	return self.prefVar.getDefaultValueStr()
</t>
<t tx="T377">def getEditValue(self):
	"""Returns the value from the editor widget"""
	return self.editVar.get()
</t>
<t tx="T378">def getInitialValue(self):
	return self.initialValue
</t>
<t tx="T379">def setVariable(self):
	"""Sets the preference variable to the edit value"""
	self.prefVar.setValue(self.getEditValue())
	self.updateChanged()
	
</t>
<t tx="T380">def showValue(self, value):
	self.editVar.set(value)
	self.updateEditor()
</t>
<t tx="T381">def showCurrentValue(self):
	self.showValue(self.getCurrentValue())
</t>
<t tx="T382">def showDefaultValue(self):
	self.showValue(self.getDefaultValue())
</t>
<t tx="T383">def showInitialValue(self):
	self.showValue(self.getInitialValue())
</t>
<t tx="T384">def unappliedChanges(self):
	"""Returns true if the user has changed the value and it has not been applied"""
	return self.getEditValue() != self.prefVar.getValueStr()
</t>
<t tx="T385">def updateEditor(self):
	"""Called after editVal is changed (and verified)"""
	pass
</t>
<t tx="T386">def updateChanged(self):
	"""Updates the "value changed" indicator.
	"""
	editValue = self.getEditValue()
# 		print "updateChanged called"
# 		print "editValue = %r" % editValue
# 		print "currentValue = %r" % self.getCurrentValue()
# 		print "initialValue = %r" % self.getInitialValue()
# 		print "defaultValue = %r" % self.getDefaultValue()
	if editValue == self.getCurrentValue():
		self.wdgDict["changed"]["text"] = ""
	else:
		self.wdgDict["changed"]["text"] = "!"
</t>
<t tx="T387">def _editCallback(self, *args):
	try:
		proposedValue = self.editVar.get()
		self.prefVar.checkPartialValue(proposedValue)
		self.mostRecentValidValue = proposedValue
		self.updateChanged()
	except:
		# new value rejected; restore old value
		print "rejected value %r" % (proposedValue,)
		self.editVar.set(self.mostRecentValidValue)
</t>
<t tx="T388">def _getLabelWdg(self):
	if self.prefVar.units:
		labelText = "%s (%s)" % (self.prefVar.name, self.prefVar.units)
	else:
		labelText = self.prefVar.name
	return Tkinter.Label(self.master, text = labelText)
</t>
<t tx="T389">def _getEditWdg(self):
	if self.prefVar.validValues:
		# use a pop-up list of values
		# first generate a list of strings representing the values
		valueList = [self.prefVar.valueToStr(val) for val in self.prefVar.validValues]
		# now return a menu containing those values
		return Tkinter.OptionMenu(self.master, self.editVar, *valueList)
	else:
		return self.prefVar.getEditWdg(self.master, self.editVar)
</t>
<t tx="T390">def _getRangeWdg(self):
	return Tkinter.Label(self.master, text = self.prefVar.getRangeStr())
</t>
<t tx="T391">def _getShowMenu(self):
	mbut = Tkinter.Menubutton(self.master,
		indicatoron=1,
		direction="below",
		borderwidth=2,
		relief="raised",
		highlightthickness=2,
	)
	mnu = Tkinter.Menu(mbut, tearoff=0)
	mnu.add_command(label="Current", command=self.showCurrentValue)
	mnu.add_command(label="Initial", command=self.showInitialValue)
	mnu.add_command(label="Default", command=self.showDefaultValue)
	mnu.add_separator()
	mnu.add_command(label="Apply", command=self.setVariable)
	mbut["menu"] = mnu
	return mbut
</t>
<t tx="T392">class FontPrefEditor(PrefEditor):
	"""An editor for fonts.
getEditValue() returns a dictionary of font attributes
such as can be used to configure a Tk Font widget.
self.editVar is not used at all, and unlike some other pref editors,
the value passed around is obtained from prefVar.value,
not the string version returned by prefVar.getValue()
"""
	@others

</t>
<t tx="T393">def _getEditWdg(self):

	currFontDict = self.prefVar.value
	fontFamilies = tkFont.families()
	fontSizes = [str(x) for x in range(9, 25)]
	
	# create a Font for the font editor widgets
	self.editFont = tkFont.Font(**currFontDict)
	
	varNameDefSet = (
		("family", "Helvetica"),
		("size", 12),
		("weight", "normal"),
		("slant", "roman"),
		("underline", "0"),
		("overstrike", "0"),
	)
	self.varDict = {}
	for varName, varDef in varNameDefSet:
		self.varDict[varName] = Tkinter.StringVar()
		self.varDict[varName].set(currFontDict.get(varName, varDef))
	
	frame = Tkinter.Frame(self.master)
	fontNameWdg = Tkinter.OptionMenu(frame, self.varDict["family"], *fontFamilies)
	fontNameWdg.configure(font=self.editFont)
	fontSizeWdg = Tkinter.OptionMenu(frame, self.varDict["size"], *fontSizes)
	fontSizeWdg.configure(font=self.editFont)

	fontOptionWdg = Tkinter.Menubutton(frame,
		indicatoron=1,
		direction="below",
		borderwidth=2,
		relief="raised",
		highlightthickness=2,
	)
	mnu = Tkinter.Menu(fontOptionWdg, tearoff=0)
	mnu.add_checkbutton(label="Bold", variable=self.varDict["weight"], onvalue="bold", offvalue="normal")
	mnu.add_checkbutton(label="Italic", variable=self.varDict["slant"], onvalue="italic", offvalue="roman")
	mnu.add_checkbutton(label="Underline", variable=self.varDict["underline"], onvalue="1", offvalue="0")
	mnu.add_checkbutton(label="Overstrike", variable=self.varDict["overstrike"], onvalue="1", offvalue="0")
	fontOptionWdg["menu"] = mnu
	
	# also supply size menu and style menu with checkable items
	# but for now omit that and plow ahead
	fontNameWdg.pack(side="left")
	fontSizeWdg.pack(side="left")
	fontOptionWdg.pack(side="left")

	# set up a callback for each variable
	for var in self.varDict.itervalues():
		var.trace_variable("w", self._editCallback)

	return frame
</t>
<t tx="T394">def getCurrentValue(self):

	"""Returns a font description dictionary"""
	return self.prefVar.getValue()
</t>
<t tx="T395">def getInitialvalue(self):
	
	return self.initialValue.copy()</t>
<t tx="T396">def getDefaultValue(self):
	
	"""Returns a font description dictionary"""
	return self.prefVar.getDefaultValue()</t>
<t tx="T397">def getEditValue(self):
	"""Returns a dictionary of font attributes,
	such as are used by PrefVar FontPrefs.
	"""
	# combine options from current value (some of which may not be editable
	# with our limited font editor) with the edit values
	retValue = self.getCurrentValue()
	editValue = {}
	for name, var in self.varDict.iteritems():
		editValue[name] = var.get()
	retValue.update(editValue)
	return retValue
</t>
<t tx="T398">def showValue(self, valueDict):
	"""Value is a dictionary of font attributes containing fields:
	"family", "size" and ?. Unknown values are ignored.
	"""
	# set pop-up menus
	for name, val in valueDict.iteritems():
		if self.varDict.has_key(name):
			self.varDict[name].set(val)

	# now update the font used for the menu text
	self._editCallback()
</t>
<t tx="T399">def _editCallback(self, *args):
	self.editFont.configure(**self.getEditValue())
	self.updateChanged()
	
</t>
<t tx="T400">def _getEditWdg(self):
	
	&lt;&lt; initialize ivars &gt;&gt;
	&lt;&lt; create the frame &gt;&gt;

	# set up a callback for each variable
	for var in self.varDict.itervalues():
		var.trace_variable("w", self._editCallback)

	return frame</t>
<t tx="T401">currFontDict = self.prefVar.value
fontFamilies = tkFont.families()
fontSizes = [str(x) for x in range(9, 25)]

# create a Font for the font editor widgets
self.editFont = tkFont.Font(**currFontDict)

varNameDefSet = (
	("family", "Helvetica"),
	("size", 12),
	("weight", "normal"),
	("slant", "roman"),
	("underline", "0"),
	("overstrike", "0"),
)
self.varDict = {}
for varName, varDef in varNameDefSet:
	self.varDict[varName] = Tkinter.StringVar()
	self.varDict[varName].set(currFontDict.get(varName, varDef))</t>
<t tx="T402">frame = Tkinter.Frame(self.master)

fontNameWdg = Tkinter.OptionMenu(frame, self.varDict["family"], *fontFamilies)
fontNameWdg.configure(font=self.editFont)

fontSizeWdg = Tkinter.OptionMenu(frame, self.varDict["size"], *fontSizes)
fontSizeWdg.configure(font=self.editFont)

fontOptionWdg = Tkinter.Menubutton(frame,
	indicatoron=1,
	direction="below",
	borderwidth=2,
	relief="raised",
	highlightthickness=2,
)

mnu = Tkinter.Menu(fontOptionWdg, tearoff=0)
mnu.add_checkbutton(label="Bold", variable=self.varDict["weight"], onvalue="bold", offvalue="normal")
mnu.add_checkbutton(label="Italic", variable=self.varDict["slant"], onvalue="italic", offvalue="roman")
mnu.add_checkbutton(label="Underline", variable=self.varDict["underline"], onvalue="1", offvalue="0")
mnu.add_checkbutton(label="Overstrike", variable=self.varDict["overstrike"], onvalue="1", offvalue="0")
fontOptionWdg["menu"] = mnu

# also supply size menu and style menu with checkable items
# but for now omit that and plow ahead
fontNameWdg.pack(side="left")
fontSizeWdg.pack(side="left")
fontOptionWdg.pack(side="left")</t>
<t tx="T403"># Must use foreground, not fg
body.tag_config("comment", foreground="red")
body.tag_config("cwebName", foreground="DarkRed")
body.tag_config("docPart", foreground="red")
body.tag_config("keyword", foreground="blue")
body.tag_config("pp", foreground="blue")
if self.use_hyperlinks: # underline=self.use_hyperlinks doesn't seem to work.
	body.tag_config("link", foreground="red",underline=1) # Defined section name
else:
	body.tag_config("link", foreground="red",underline=0) # Defined section name
body.tag_config("leoKeyword", foreground="blue")

if 0: # Looks good, but problems when text is selected.
	body.tag_config("name", foreground="red", background="gray90") # Undefined section name
else: # Reverse the underlining used for defined section names.
	if self.use_hyperlinks: # underline=(not self.use_hyperlinks) doesn't seem to work.
		body.tag_config("name", foreground="red", underline=0) # Undefined section name
	else:
		body.tag_config("name", foreground="red", underline=1) # Undefined section name
body.tag_config("nameBrackets", foreground="blue")
body.tag_config("string", foreground="#00aa00") # "gray50") # a dark green.

if self.showInvisibles:
	if 1: # Very poor, and vaguely usable.
		body.tag_config("blank",background="black",bgstipple="gray25")
		body.tag_config("tab",background="black",bgstipple="gray50")
	else: # Doesn't work, but does increase the spacing ;-)
		body.tag_config("blank",font="Symbol")
		body.tag_config("tab",font="Symbol")
else:
	body.tag_config("blank",background="white")
	body.tag_config("tab",background="white")

# body.tag_config("normal", foreground="black")</t>
<t tx="T404">Valid colors: ( see colors in main TOC )
  http://tcl.activestate.com/man/tcl8.4/TkCmd/colors.htm

Valid key names ( see keysyms in main TOC)
  http://tcl.activestate.com/man/tcl8.4/TkCmd/keysyms.htm</t>
<t tx="T405">@nocolor

Not all keysyms will be valid on all platforms.

space                               32     0x0020
exclam                              33     0x0021
quotedbl                            34     0x0022
numbersign                          35     0x0023
dollar                              36     0x0024
percent                             37     0x0025
ampersand                           38     0x0026
quoteright                          39     0x0027
parenleft                           40     0x0028
parenright                          41     0x0029
asterisk                            42     0x002a
plus                                43     0x002b
comma                               44     0x002c
minus                               45     0x002d
period                              46     0x002e
slash                               47     0x002f
0                                   48     0x0030
1                                   49     0x0031
2                                   50     0x0032
3                                   51     0x0033
4                                   52     0x0034
5                                   53     0x0035
6                                   54     0x0036
7                                   55     0x0037
8                                   56     0x0038
9                                   57     0x0039
colon                               58     0x003a
semicolon                           59     0x003b
less                                60     0x003c
equal                               61     0x003d
greater                             62     0x003e
question                            63     0x003f
at                                  64     0x0040
A                                   65     0x0041
B                                   66     0x0042
C                                   67     0x0043
D                                   68     0x0044
E                                   69     0x0045
F                                   70     0x0046
G                                   71     0x0047
H                                   72     0x0048
I                                   73     0x0049
J                                   74     0x004a
K                                   75     0x004b
L                                   76     0x004c
M                                   77     0x004d
N                                   78     0x004e
O                                   79     0x004f
P                                   80     0x0050
Q                                   81     0x0051
R                                   82     0x0052
S                                   83     0x0053
T                                   84     0x0054
U                                   85     0x0055
V                                   86     0x0056
W                                   87     0x0057
X                                   88     0x0058
Y                                   89     0x0059
Z                                   90     0x005a
bracketleft                         91     0x005b
backslash                           92     0x005c
bracketright                        93     0x005d
asciicircum                         94     0x005e
underscore                          95     0x005f
quoteleft                           96     0x0060
a                                   97     0x0061
b                                   98     0x0062
c                                   99     0x0063
d                                  100     0x0064
e                                  101     0x0065
f                                  102     0x0066
g                                  103     0x0067
h                                  104     0x0068
i                                  105     0x0069
j                                  106     0x006a
k                                  107     0x006b
l                                  108     0x006c
m                                  109     0x006d
n                                  110     0x006e
o                                  111     0x006f
p                                  112     0x0070
q                                  113     0x0071
r                                  114     0x0072
s                                  115     0x0073
t                                  116     0x0074
u                                  117     0x0075
v                                  118     0x0076
w                                  119     0x0077
x                                  120     0x0078
y                                  121     0x0079
z                                  122     0x007a
braceleft                          123     0x007b
bar                                124     0x007c
braceright                         125     0x007d
asciitilde                         126     0x007e
nobreakspace                       160     0x00a0



BackSpace                        65288     0xff08
Tab                              65289     0xff09
Linefeed                         65290     0xff0a
Clear                            65291     0xff0b
Return                           65293     0xff0d
Pause                            65299     0xff13
Scroll_Lock                      65300     0xff14
Sys_Req                          65301     0xff15
Escape                           65307     0xff1b
Multi_key                        65312     0xff20
Kanji                            65313     0xff21
Home                             65360     0xff50
Left                             65361     0xff51
Up                               65362     0xff52
Right                            65363     0xff53
Down                             65364     0xff54
Prior                            65365     0xff55
Next                             65366     0xff56
End                              65367     0xff57
Begin                            65368     0xff58
Win_L                            65371     0xff5b
Win_R                            65372     0xff5c
App                              65373     0xff5d
Select                           65376     0xff60
Print                            65377     0xff61
Execute                          65378     0xff62
Insert                           65379     0xff63
Undo                             65381     0xff65
Redo                             65382     0xff66
Menu                             65383     0xff67
Find                             65384     0xff68
Cancel                           65385     0xff69
Help                             65386     0xff6a
Break                            65387     0xff6b
Hebrew_switch                    65406     0xff7e
Num_Lock                         65407     0xff7f
KP_Space                         65408     0xff80
KP_Tab                           65417     0xff89
KP_Enter                         65421     0xff8d
KP_F1                            65425     0xff91
KP_F2                            65426     0xff92
KP_F3                            65427     0xff93
KP_F4                            65428     0xff94
KP_Multiply                      65450     0xffaa
KP_Add                           65451     0xffab
KP_Separator                     65452     0xffac
KP_Subtract                      65453     0xffad
KP_Decimal                       65454     0xffae
KP_Divide                        65455     0xffaf
KP_0                             65456     0xffb0
KP_1                             65457     0xffb1
KP_2                             65458     0xffb2
KP_3                             65459     0xffb3
KP_4                             65460     0xffb4
KP_5                             65461     0xffb5
KP_6                             65462     0xffb6
KP_7                             65463     0xffb7
KP_8                             65464     0xffb8
KP_9                             65465     0xffb9
KP_Equal                         65469     0xffbd
F1                               65470     0xffbe
F2                               65471     0xffbf
F3                               65472     0xffc0
F4                               65473     0xffc1
F5                               65474     0xffc2
F6                               65475     0xffc3
F7                               65476     0xffc4
F8                               65477     0xffc5
F9                               65478     0xffc6
F10                              65479     0xffc7
L1                               65480     0xffc8
L2                               65481     0xffc9
L3                               65482     0xffca
L4                               65483     0xffcb
L5                               65484     0xffcc
L6                               65485     0xffcd
L7                               65486     0xffce
L8                               65487     0xffcf
L9                               65488     0xffd0
L10                              65489     0xffd1
R1                               65490     0xffd2
R2                               65491     0xffd3
R3                               65492     0xffd4
R4                               65493     0xffd5
R5                               65494     0xffd6
R6                               65495     0xffd7
R7                               65496     0xffd8
R8                               65497     0xffd9
R9                               65498     0xffda
R10                              65499     0xffdb
R11                              65500     0xffdc
R12                              65501     0xffdd
F33                              65502     0xffde
R14                              65503     0xffdf
R15                              65504     0xffe0
Shift_L                          65505     0xffe1
Shift_R                          65506     0xffe2
Control_L                        65507     0xffe3
Control_R                        65508     0xffe4
Caps_Lock                        65509     0xffe5
Shift_Lock                       65510     0xffe6
Meta_L                           65511     0xffe7
Meta_R                           65512     0xffe8
Alt_L                            65513     0xffe9
Alt_R                            65514     0xffea
Super_L                          65515     0xffeb
Super_R                          65516     0xffec
Hyper_L                          65517     0xffed
Hyper_R                          65518     0xffee
Delete                           65535     0xffff</t>
<t tx="T406">paragraph                          182     0x00b6
periodcentered                     183     0x00b7

section                            167     0x00a7
notsign                            172     0x00ac
hyphen                             173     0x00ad
degree                             176     0x00b0
plusminus                          177     0x00b1

copyright                          169     0x00a9
registered                         174     0x00ae</t>
<t tx="T407">exclamdown                         161     0x00a1
cent                               162     0x00a2
sterling                           163     0x00a3
currency                           164     0x00a4
yen                                165     0x00a5
brokenbar                          166     0x00a6
diaeresis                          168     0x00a8
ordfeminine                        170     0x00aa
guillemotleft                      171     0x00ab
macron                             175     0x00af
twosuperior                        178     0x00b2
threesuperior                      179     0x00b3
acute                              180     0x00b4
mu                                 181     0x00b5
cedilla                            184     0x00b8
onesuperior                        185     0x00b9
masculine                          186     0x00ba
guillemotright                     187     0x00bb
onequarter                         188     0x00bc
onehalf                            189     0x00bd
threequarters                      190     0x00be
questiondown                       191     0x00bf

Agrave                             192     0x00c0
Aacute                             193     0x00c1
Acircumflex                        194     0x00c2
Atilde                             195     0x00c3
Adiaeresis                         196     0x00c4
Aring                              197     0x00c5
AE                                 198     0x00c6
Ccedilla                           199     0x00c7
Egrave                             200     0x00c8
Eacute                             201     0x00c9
Ecircumflex                        202     0x00ca
Ediaeresis                         203     0x00cb
Igrave                             204     0x00cc
Iacute                             205     0x00cd
Icircumflex                        206     0x00ce
Idiaeresis                         207     0x00cf
Eth                                208     0x00d0
Ntilde                             209     0x00d1
Ograve                             210     0x00d2
Oacute                             211     0x00d3
Ocircumflex                        212     0x00d4
Otilde                             213     0x00d5
Odiaeresis                         214     0x00d6
multiply                           215     0x00d7
Ooblique                           216     0x00d8
Ugrave                             217     0x00d9
Uacute                             218     0x00da
Ucircumflex                        219     0x00db
Udiaeresis                         220     0x00dc
Yacute                             221     0x00dd
Thorn                              222     0x00de
ssharp                             223     0x00df
agrave                             224     0x00e0
aacute                             225     0x00e1
acircumflex                        226     0x00e2
atilde                             227     0x00e3
adiaeresis                         228     0x00e4
aring                              229     0x00e5
ae                                 230     0x00e6
ccedilla                           231     0x00e7
egrave                             232     0x00e8
eacute                             233     0x00e9
ecircumflex                        234     0x00ea
ediaeresis                         235     0x00eb
igrave                             236     0x00ec
iacute                             237     0x00ed
icircumflex                        238     0x00ee
idiaeresis                         239     0x00ef
eth                                240     0x00f0
ntilde                             241     0x00f1
ograve                             242     0x00f2
oacute                             243     0x00f3
ocircumflex                        244     0x00f4
otilde                             245     0x00f5
odiaeresis                         246     0x00f6
division                           247     0x00f7
oslash                             248     0x00f8
ugrave                             249     0x00f9
uacute                             250     0x00fa
ucircumflex                        251     0x00fb
udiaeresis                         252     0x00fc
yacute                             253     0x00fd
thorn                              254     0x00fe
ydiaeresis                         255     0x00ff
Aogonek                            417     0x01a1
breve                              418     0x01a2
Lstroke                            419     0x01a3
Lcaron                             421     0x01a5
Sacute                             422     0x01a6
Scaron                             425     0x01a9
Scedilla                           426     0x01aa
Tcaron                             427     0x01ab
Zacute                             428     0x01ac
Zcaron                             430     0x01ae
Zabovedot                          431     0x01af
aogonek                            433     0x01b1
ogonek                             434     0x01b2
lstroke                            435     0x01b3
lcaron                             437     0x01b5
sacute                             438     0x01b6
caron                              439     0x01b7
scaron                             441     0x01b9
scedilla                           442     0x01ba
tcaron                             443     0x01bb
zacute                             444     0x01bc
doubleacute                        445     0x01bd
zcaron                             446     0x01be
zabovedot                          447     0x01bf
Racute                             448     0x01c0
Abreve                             451     0x01c3
Cacute                             454     0x01c6
Ccaron                             456     0x01c8
Eogonek                            458     0x01ca
Ecaron                             460     0x01cc
Dcaron                             463     0x01cf
Nacute                             465     0x01d1
Ncaron                             466     0x01d2
Odoubleacute                       469     0x01d5
Rcaron                             472     0x01d8
Uring                              473     0x01d9
Udoubleacute                       475     0x01db
Tcedilla                           478     0x01de
racute                             480     0x01e0
abreve                             483     0x01e3
cacute                             486     0x01e6
ccaron                             488     0x01e8
eogonek                            490     0x01ea
ecaron                             492     0x01ec
dcaron                             495     0x01ef
nacute                             497     0x01f1
ncaron                             498     0x01f2
odoubleacute                       501     0x01f5
rcaron                             504     0x01f8
uring                              505     0x01f9
udoubleacute                       507     0x01fb
tcedilla                           510     0x01fe
abovedot                           511     0x01ff
Hstroke                            673     0x02a1
Hcircumflex                        678     0x02a6
Iabovedot                          681     0x02a9
Gbreve                             683     0x02ab
Jcircumflex                        684     0x02ac
hstroke                            689     0x02b1
hcircumflex                        694     0x02b6
idotless                           697     0x02b9
gbreve                             699     0x02bb
jcircumflex                        700     0x02bc
Cabovedot                          709     0x02c5
Ccircumflex                        710     0x02c6
Gabovedot                          725     0x02d5
Gcircumflex                        728     0x02d8
Ubreve                             733     0x02dd
Scircumflex                        734     0x02de
cabovedot                          741     0x02e5
ccircumflex                        742     0x02e6
gabovedot                          757     0x02f5
gcircumflex                        760     0x02f8
ubreve                             765     0x02fd
scircumflex                        766     0x02fe
kappa                              930     0x03a2
Rcedilla                           931     0x03a3
Itilde                             933     0x03a5
Lcedilla                           934     0x03a6
Emacron                            938     0x03aa
Gcedilla                           939     0x03ab
Tslash                             940     0x03ac
rcedilla                           947     0x03b3
itilde                             949     0x03b5
lcedilla                           950     0x03b6
emacron                            954     0x03ba
gacute                             955     0x03bb
tslash                             956     0x03bc
ENG                                957     0x03bd
eng                                959     0x03bf
Amacron                            960     0x03c0
Iogonek                            967     0x03c7
Eabovedot                          972     0x03cc
Imacron                            975     0x03cf
Ncedilla                           977     0x03d1
Omacron                            978     0x03d2
Kcedilla                           979     0x03d3
Uogonek                            985     0x03d9
Utilde                             989     0x03dd
Umacron                            990     0x03de
amacron                            992     0x03e0
iogonek                            999     0x03e7
eabovedot                         1004     0x03ec
imacron                           1007     0x03ef
ncedilla                          1009     0x03f1
omacron                           1010     0x03f2
kcedilla                          1011     0x03f3
uogonek                           1017     0x03f9
utilde                            1021     0x03fd
umacron                           1022     0x03fe
overline                          1150     0x047e
kana_fullstop                     1185     0x04a1
kana_openingbracket               1186     0x04a2
kana_closingbracket               1187     0x04a3
kana_comma                        1188     0x04a4
kana_middledot                    1189     0x04a5
kana_WO                           1190     0x04a6
kana_a                            1191     0x04a7
kana_i                            1192     0x04a8
kana_u                            1193     0x04a9
kana_e                            1194     0x04aa
kana_o                            1195     0x04ab
kana_ya                           1196     0x04ac
kana_yu                           1197     0x04ad
kana_yo                           1198     0x04ae
kana_tu                           1199     0x04af
prolongedsound                    1200     0x04b0
kana_A                            1201     0x04b1
kana_I                            1202     0x04b2
kana_U                            1203     0x04b3
kana_E                            1204     0x04b4
kana_O                            1205     0x04b5
kana_KA                           1206     0x04b6
kana_KI                           1207     0x04b7
kana_KU                           1208     0x04b8
kana_KE                           1209     0x04b9
kana_KO                           1210     0x04ba
kana_SA                           1211     0x04bb
kana_SHI                          1212     0x04bc
kana_SU                           1213     0x04bd
kana_SE                           1214     0x04be
kana_SO                           1215     0x04bf
kana_TA                           1216     0x04c0
kana_TI                           1217     0x04c1
kana_TU                           1218     0x04c2
kana_TE                           1219     0x04c3
kana_TO                           1220     0x04c4
kana_NA                           1221     0x04c5
kana_NI                           1222     0x04c6
kana_NU                           1223     0x04c7
kana_NE                           1224     0x04c8
kana_NO                           1225     0x04c9
kana_HA                           1226     0x04ca
kana_HI                           1227     0x04cb
kana_HU                           1228     0x04cc
kana_HE                           1229     0x04cd
kana_HO                           1230     0x04ce
kana_MA                           1231     0x04cf
kana_MI                           1232     0x04d0
kana_MU                           1233     0x04d1
kana_ME                           1234     0x04d2
kana_MO                           1235     0x04d3
kana_YA                           1236     0x04d4
kana_YU                           1237     0x04d5
kana_YO                           1238     0x04d6
kana_RA                           1239     0x04d7
kana_RI                           1240     0x04d8
kana_RU                           1241     0x04d9
kana_RE                           1242     0x04da
kana_RO                           1243     0x04db
kana_WA                           1244     0x04dc
kana_N                            1245     0x04dd
voicedsound                       1246     0x04de
semivoicedsound                   1247     0x04df
Arabic_comma                      1452     0x05ac
Arabic_semicolon                  1467     0x05bb
Arabic_question_mark              1471     0x05bf
Arabic_hamza                      1473     0x05c1
Arabic_maddaonalef                1474     0x05c2
Arabic_hamzaonalef                1475     0x05c3
Arabic_hamzaonwaw                 1476     0x05c4
Arabic_hamzaunderalef             1477     0x05c5
Arabic_hamzaonyeh                 1478     0x05c6
Arabic_alef                       1479     0x05c7
Arabic_beh                        1480     0x05c8
Arabic_tehmarbuta                 1481     0x05c9
Arabic_teh                        1482     0x05ca
Arabic_theh                       1483     0x05cb
Arabic_jeem                       1484     0x05cc
Arabic_hah                        1485     0x05cd
Arabic_khah                       1486     0x05ce
Arabic_dal                        1487     0x05cf
Arabic_thal                       1488     0x05d0
Arabic_ra                         1489     0x05d1
Arabic_zain                       1490     0x05d2
Arabic_seen                       1491     0x05d3
Arabic_sheen                      1492     0x05d4
Arabic_sad                        1493     0x05d5
Arabic_dad                        1494     0x05d6
Arabic_tah                        1495     0x05d7
Arabic_zah                        1496     0x05d8
Arabic_ain                        1497     0x05d9
Arabic_ghain                      1498     0x05da
Arabic_tatweel                    1504     0x05e0
Arabic_feh                        1505     0x05e1
Arabic_qaf                        1506     0x05e2
Arabic_kaf                        1507     0x05e3
Arabic_lam                        1508     0x05e4
Arabic_meem                       1509     0x05e5
Arabic_noon                       1510     0x05e6
Arabic_heh                        1511     0x05e7
Arabic_waw                        1512     0x05e8
Arabic_alefmaksura                1513     0x05e9
Arabic_yeh                        1514     0x05ea
Arabic_fathatan                   1515     0x05eb
Arabic_dammatan                   1516     0x05ec
Arabic_kasratan                   1517     0x05ed
Arabic_fatha                      1518     0x05ee
Arabic_damma                      1519     0x05ef
Arabic_kasra                      1520     0x05f0
Arabic_shadda                     1521     0x05f1
Arabic_sukun                      1522     0x05f2
Serbian_dje                       1697     0x06a1
Macedonia_gje                     1698     0x06a2
Cyrillic_io                       1699     0x06a3
Ukranian_je                       1700     0x06a4
Macedonia_dse                     1701     0x06a5
Ukranian_i                        1702     0x06a6
Ukranian_yi                       1703     0x06a7
Serbian_je                        1704     0x06a8
Serbian_lje                       1705     0x06a9
Serbian_nje                       1706     0x06aa
Serbian_tshe                      1707     0x06ab
Macedonia_kje                     1708     0x06ac
Byelorussian_shortu               1710     0x06ae
Serbian_dze                       1711     0x06af
numerosign                        1712     0x06b0
Serbian_DJE                       1713     0x06b1
Macedonia_GJE                     1714     0x06b2
Cyrillic_IO                       1715     0x06b3
Ukranian_JE                       1716     0x06b4
Macedonia_DSE                     1717     0x06b5
Ukranian_I                        1718     0x06b6
Ukranian_YI                       1719     0x06b7
Serbian_JE                        1720     0x06b8
Serbian_LJE                       1721     0x06b9
Serbian_NJE                       1722     0x06ba
Serbian_TSHE                      1723     0x06bb
Macedonia_KJE                     1724     0x06bc
Byelorussian_SHORTU               1726     0x06be
Serbian_DZE                       1727     0x06bf
Cyrillic_yu                       1728     0x06c0
Cyrillic_a                        1729     0x06c1
Cyrillic_be                       1730     0x06c2
Cyrillic_tse                      1731     0x06c3
Cyrillic_de                       1732     0x06c4
Cyrillic_ie                       1733     0x06c5
Cyrillic_ef                       1734     0x06c6
Cyrillic_ghe                      1735     0x06c7
Cyrillic_ha                       1736     0x06c8
Cyrillic_i                        1737     0x06c9
Cyrillic_shorti                   1738     0x06ca
Cyrillic_ka                       1739     0x06cb
Cyrillic_el                       1740     0x06cc
Cyrillic_em                       1741     0x06cd
Cyrillic_en                       1742     0x06ce
Cyrillic_o                        1743     0x06cf
Cyrillic_pe                       1744     0x06d0
Cyrillic_ya                       1745     0x06d1
Cyrillic_er                       1746     0x06d2
Cyrillic_es                       1747     0x06d3
Cyrillic_te                       1748     0x06d4
Cyrillic_u                        1749     0x06d5
Cyrillic_zhe                      1750     0x06d6
Cyrillic_ve                       1751     0x06d7
Cyrillic_softsign                 1752     0x06d8
Cyrillic_yeru                     1753     0x06d9
Cyrillic_ze                       1754     0x06da
Cyrillic_sha                      1755     0x06db
Cyrillic_e                        1756     0x06dc
Cyrillic_shcha                    1757     0x06dd
Cyrillic_che                      1758     0x06de
Cyrillic_hardsign                 1759     0x06df
Cyrillic_YU                       1760     0x06e0
Cyrillic_A                        1761     0x06e1
Cyrillic_BE                       1762     0x06e2
Cyrillic_TSE                      1763     0x06e3
Cyrillic_DE                       1764     0x06e4
Cyrillic_IE                       1765     0x06e5
Cyrillic_EF                       1766     0x06e6
Cyrillic_GHE                      1767     0x06e7
Cyrillic_HA                       1768     0x06e8
Cyrillic_I                        1769     0x06e9
Cyrillic_SHORTI                   1770     0x06ea
Cyrillic_KA                       1771     0x06eb
Cyrillic_EL                       1772     0x06ec
Cyrillic_EM                       1773     0x06ed
Cyrillic_EN                       1774     0x06ee
Cyrillic_O                        1775     0x06ef
Cyrillic_PE                       1776     0x06f0
Cyrillic_YA                       1777     0x06f1
Cyrillic_ER                       1778     0x06f2
Cyrillic_ES                       1779     0x06f3
Cyrillic_TE                       1780     0x06f4
Cyrillic_U                        1781     0x06f5
Cyrillic_ZHE                      1782     0x06f6
Cyrillic_VE                       1783     0x06f7
Cyrillic_SOFTSIGN                 1784     0x06f8
Cyrillic_YERU                     1785     0x06f9
Cyrillic_ZE                       1786     0x06fa
Cyrillic_SHA                      1787     0x06fb
Cyrillic_E                        1788     0x06fc
Cyrillic_SHCHA                    1789     0x06fd
Cyrillic_CHE                      1790     0x06fe
Cyrillic_HARDSIGN                 1791     0x06ff
Greek_ALPHAaccent                 1953     0x07a1
Greek_EPSILONaccent               1954     0x07a2
Greek_ETAaccent                   1955     0x07a3
Greek_IOTAaccent                  1956     0x07a4
Greek_IOTAdiaeresis               1957     0x07a5
Greek_IOTAaccentdiaeresis         1958     0x07a6
Greek_OMICRONaccent               1959     0x07a7
Greek_UPSILONaccent               1960     0x07a8
Greek_UPSILONdieresis             1961     0x07a9
Greek_UPSILONaccentdieresis       1962     0x07aa
Greek_OMEGAaccent                 1963     0x07ab
Greek_alphaaccent                 1969     0x07b1
Greek_epsilonaccent               1970     0x07b2
Greek_etaaccent                   1971     0x07b3
Greek_iotaaccent                  1972     0x07b4
Greek_iotadieresis                1973     0x07b5
Greek_iotaaccentdieresis          1974     0x07b6
Greek_omicronaccent               1975     0x07b7
Greek_upsilonaccent               1976     0x07b8
Greek_upsilondieresis             1977     0x07b9
Greek_upsilonaccentdieresis       1978     0x07ba
Greek_omegaaccent                 1979     0x07bb
Greek_ALPHA                       1985     0x07c1
Greek_BETA                        1986     0x07c2
Greek_GAMMA                       1987     0x07c3
Greek_DELTA                       1988     0x07c4
Greek_EPSILON                     1989     0x07c5
Greek_ZETA                        1990     0x07c6
Greek_ETA                         1991     0x07c7
Greek_THETA                       1992     0x07c8
Greek_IOTA                        1993     0x07c9
Greek_KAPPA                       1994     0x07ca
Greek_LAMBDA                      1995     0x07cb
Greek_MU                          1996     0x07cc
Greek_NU                          1997     0x07cd
Greek_XI                          1998     0x07ce
Greek_OMICRON                     1999     0x07cf
Greek_PI                          2000     0x07d0
Greek_RHO                         2001     0x07d1
Greek_SIGMA                       2002     0x07d2
Greek_TAU                         2004     0x07d4
Greek_UPSILON                     2005     0x07d5
Greek_PHI                         2006     0x07d6
Greek_CHI                         2007     0x07d7
Greek_PSI                         2008     0x07d8
Greek_OMEGA                       2009     0x07d9
Greek_alpha                       2017     0x07e1
Greek_beta                        2018     0x07e2
Greek_gamma                       2019     0x07e3
Greek_delta                       2020     0x07e4
Greek_epsilon                     2021     0x07e5
Greek_zeta                        2022     0x07e6
Greek_eta                         2023     0x07e7
Greek_theta                       2024     0x07e8
Greek_iota                        2025     0x07e9
Greek_kappa                       2026     0x07ea
Greek_lambda                      2027     0x07eb
Greek_mu                          2028     0x07ec
Greek_nu                          2029     0x07ed
Greek_xi                          2030     0x07ee
Greek_omicron                     2031     0x07ef
Greek_pi                          2032     0x07f0
Greek_rho                         2033     0x07f1
Greek_sigma                       2034     0x07f2
Greek_finalsmallsigma             2035     0x07f3
Greek_tau                         2036     0x07f4
Greek_upsilon                     2037     0x07f5
Greek_phi                         2038     0x07f6
Greek_chi                         2039     0x07f7
Greek_psi                         2040     0x07f8
Greek_omega                       2041     0x07f9
leftradical                       2209     0x08a1
topleftradical                    2210     0x08a2
horizconnector                    2211     0x08a3
topintegral                       2212     0x08a4
botintegral                       2213     0x08a5
vertconnector                     2214     0x08a6
topleftsqbracket                  2215     0x08a7
botleftsqbracket                  2216     0x08a8
toprightsqbracket                 2217     0x08a9
botrightsqbracket                 2218     0x08aa
topleftparens                     2219     0x08ab
botleftparens                     2220     0x08ac
toprightparens                    2221     0x08ad
botrightparens                    2222     0x08ae
leftmiddlecurlybrace              2223     0x08af
rightmiddlecurlybrace             2224     0x08b0
topleftsummation                  2225     0x08b1
botleftsummation                  2226     0x08b2
topvertsummationconnector         2227     0x08b3
botvertsummationconnector         2228     0x08b4
toprightsummation                 2229     0x08b5
botrightsummation                 2230     0x08b6
rightmiddlesummation              2231     0x08b7
lessthanequal                     2236     0x08bc
notequal                          2237     0x08bd
greaterthanequal                  2238     0x08be
integral                          2239     0x08bf
therefore                         2240     0x08c0
variation                         2241     0x08c1
infinity                          2242     0x08c2
nabla                             2245     0x08c5
approximate                       2248     0x08c8
similarequal                      2249     0x08c9
ifonlyif                          2253     0x08cd
implies                           2254     0x08ce
identical                         2255     0x08cf
radical                           2262     0x08d6
includedin                        2266     0x08da
includes                          2267     0x08db
intersection                      2268     0x08dc
union                             2269     0x08dd
logicaland                        2270     0x08de
logicalor                         2271     0x08df
partialderivative                 2287     0x08ef
function                          2294     0x08f6
leftarrow                         2299     0x08fb
uparrow                           2300     0x08fc
rightarrow                        2301     0x08fd
downarrow                         2302     0x08fe
blank                             2527     0x09df
soliddiamond                      2528     0x09e0
checkerboard                      2529     0x09e1
ht                                2530     0x09e2
ff                                2531     0x09e3
cr                                2532     0x09e4
lf                                2533     0x09e5
nl                                2536     0x09e8
vt                                2537     0x09e9
lowrightcorner                    2538     0x09ea
uprightcorner                     2539     0x09eb
upleftcorner                      2540     0x09ec
lowleftcorner                     2541     0x09ed
crossinglines                     2542     0x09ee
horizlinescan1                    2543     0x09ef
horizlinescan3                    2544     0x09f0
horizlinescan5                    2545     0x09f1
horizlinescan7                    2546     0x09f2
horizlinescan9                    2547     0x09f3
leftt                             2548     0x09f4
rightt                            2549     0x09f5
bott                              2550     0x09f6
topt                              2551     0x09f7
vertbar                           2552     0x09f8
emspace                           2721     0x0aa1
enspace                           2722     0x0aa2
em3space                          2723     0x0aa3
em4space                          2724     0x0aa4
digitspace                        2725     0x0aa5
punctspace                        2726     0x0aa6
thinspace                         2727     0x0aa7
hairspace                         2728     0x0aa8
emdash                            2729     0x0aa9
endash                            2730     0x0aaa
signifblank                       2732     0x0aac
ellipsis                          2734     0x0aae
doubbaselinedot                   2735     0x0aaf
onethird                          2736     0x0ab0
twothirds                         2737     0x0ab1
onefifth                          2738     0x0ab2
twofifths                         2739     0x0ab3
threefifths                       2740     0x0ab4
fourfifths                        2741     0x0ab5
onesixth                          2742     0x0ab6
fivesixths                        2743     0x0ab7
careof                            2744     0x0ab8
figdash                           2747     0x0abb
leftanglebracket                  2748     0x0abc
decimalpoint                      2749     0x0abd
rightanglebracket                 2750     0x0abe
marker                            2751     0x0abf
oneeighth                         2755     0x0ac3
threeeighths                      2756     0x0ac4
fiveeighths                       2757     0x0ac5
seveneighths                      2758     0x0ac6
trademark                         2761     0x0ac9
signaturemark                     2762     0x0aca
trademarkincircle                 2763     0x0acb
leftopentriangle                  2764     0x0acc
rightopentriangle                 2765     0x0acd
emopencircle                      2766     0x0ace
emopenrectangle                   2767     0x0acf
leftsinglequotemark               2768     0x0ad0
rightsinglequotemark              2769     0x0ad1
leftdoublequotemark               2770     0x0ad2
rightdoublequotemark              2771     0x0ad3
prescription                      2772     0x0ad4
minutes                           2774     0x0ad6
seconds                           2775     0x0ad7
latincross                        2777     0x0ad9
hexagram                          2778     0x0ada
filledrectbullet                  2779     0x0adb
filledlefttribullet               2780     0x0adc
filledrighttribullet              2781     0x0add
emfilledcircle                    2782     0x0ade
emfilledrect                      2783     0x0adf
enopencircbullet                  2784     0x0ae0
enopensquarebullet                2785     0x0ae1
openrectbullet                    2786     0x0ae2
opentribulletup                   2787     0x0ae3
opentribulletdown                 2788     0x0ae4
openstar                          2789     0x0ae5
enfilledcircbullet                2790     0x0ae6
enfilledsqbullet                  2791     0x0ae7
filledtribulletup                 2792     0x0ae8
filledtribulletdown               2793     0x0ae9
leftpointer                       2794     0x0aea
rightpointer                      2795     0x0aeb
club                              2796     0x0aec
diamond                           2797     0x0aed
heart                             2798     0x0aee
maltesecross                      2800     0x0af0
dagger                            2801     0x0af1
doubledagger                      2802     0x0af2
checkmark                         2803     0x0af3
ballotcross                       2804     0x0af4
musicalsharp                      2805     0x0af5
musicalflat                       2806     0x0af6
malesymbol                        2807     0x0af7
femalesymbol                      2808     0x0af8
telephone                         2809     0x0af9
telephonerecorder                 2810     0x0afa
phonographcopyright               2811     0x0afb
caret                             2812     0x0afc
singlelowquotemark                2813     0x0afd
doublelowquotemark                2814     0x0afe
cursor                            2815     0x0aff
leftcaret                         2979     0x0ba3
rightcaret                        2982     0x0ba6
downcaret                         2984     0x0ba8
upcaret                           2985     0x0ba9
overbar                           3008     0x0bc0
downtack                          3010     0x0bc2
upshoe                            3011     0x0bc3
downstile                         3012     0x0bc4
underbar                          3014     0x0bc6
jot                               3018     0x0bca
quad                              3020     0x0bcc
uptack                            3022     0x0bce
circle                            3023     0x0bcf
upstile                           3027     0x0bd3
downshoe                          3030     0x0bd6
rightshoe                         3032     0x0bd8
leftshoe                          3034     0x0bda
lefttack                          3036     0x0bdc
righttack                         3068     0x0bfc
hebrew_aleph                      3296     0x0ce0
hebrew_beth                       3297     0x0ce1
hebrew_gimmel                     3298     0x0ce2
hebrew_daleth                     3299     0x0ce3
hebrew_he                         3300     0x0ce4
hebrew_waw                        3301     0x0ce5
hebrew_zayin                      3302     0x0ce6
hebrew_het                        3303     0x0ce7
hebrew_teth                       3304     0x0ce8
hebrew_yod                        3305     0x0ce9
hebrew_finalkaph                  3306     0x0cea
hebrew_kaph                       3307     0x0ceb
hebrew_lamed                      3308     0x0cec
hebrew_finalmem                   3309     0x0ced
hebrew_mem                        3310     0x0cee
hebrew_finalnun                   3311     0x0cef
hebrew_nun                        3312     0x0cf0
hebrew_samekh                     3313     0x0cf1
hebrew_ayin                       3314     0x0cf2
hebrew_finalpe                    3315     0x0cf3
hebrew_pe                         3316     0x0cf4
hebrew_finalzadi                  3317     0x0cf5
hebrew_zadi                       3318     0x0cf6
hebrew_kuf                        3319     0x0cf7
hebrew_resh                       3320     0x0cf8
hebrew_shin                       3321     0x0cf9
hebrew_taf                        3322     0x0cfa</t>
<t tx="T408">@language python
@ignore
@color</t>
<t tx="T409">@ignore</t>
<t tx="T410"># How do we remember the state?
# How do we insert, delete and move nodes?
# Is it worth it to do this in tcl, or should I wait for tkinter??

proc createTree {w} {

	Canvas $w.c
	## pack??
}</t>
<t tx="T411">def flip(self, event=None):

	if self.state == 'expanded':
		self.collapse()
	else:
		self.expand()
	self.item.OnDoubleClick()
	return "break"
</t>
<t tx="T412">def expand(self, event=None):

	if not self.item._IsExpandable():
		return
	if self.state != 'expanded':
		self.state = 'expanded'
		self.update()
		self.view()
</t>
<t tx="T413">def collapse(self, event=None):

	if self.state != 'collapsed':
		self.state = 'collapsed'
		self.update()
</t>
<t tx="T414">def geticonimage(self, name):

	try:
		return self.iconimages[name]
	except KeyError:
		pass

	file, ext = os.path.splitext(name)
	ext = ext or ".gif"
	fullname = os.path.join(ICONDIR, file + ext)
	image = PhotoImage(master=self.canvas, file=fullname)
	self.iconimages[name] = image
	return image
</t>
<t tx="T415">def view(self):

	top = self.y - 2
	bottom = self.lastvisiblechild().y + 17
	height = bottom - top
	visible_top = self.canvas.canvasy(0)
	visible_height = self.canvas.winfo_height()
	visible_bottom = self.canvas.canvasy(visible_height)
	if visible_top &lt;= top and bottom &lt;= visible_bottom:
		return

	# EKR: I think this scrolls the canvas to match the scrollregion
	x0, y0, x1, y1 = self.canvas._getints(self.canvas['scrollregion'])
	if top &gt;= visible_top and height &lt;= visible_height:
		fraction = top + height - visible_height
	else:
		fraction = top
	fraction = float(fraction) / y1
	self.canvas.yview_moveto(fraction)
</t>
<t tx="T416">def lastvisiblechild(self):

	if self.children and self.state == 'expanded':
		return self.children[-1].lastvisiblechild()
	else:
		return self
</t>
<t tx="T417">def update(self):

	# EKR: I would do v=self.findRoot(), etc.

	if self.parent:  # EKR: update starting with root node.
		self.parent.update()
	else:
		oldcursor = self.canvas['cursor']
		self.canvas['cursor'] = "watch"
		if 1: # EKR: erase and redraw everything
			self.canvas.update()
			self.canvas.delete(ALL)     # XXX could be more subtle.  EKR, but why bother?
			self.draw(7, 2)
			x0, y0, x1, y1 = self.canvas.bbox(ALL)
			self.canvas.configure(scrollregion=(0, 0, x1, y1))
		self.canvas['cursor'] = oldcursor
</t>
<t tx="T418"># EKR: draws icon at self.x, self.y

def drawicon(self):

	if self.selected:
		imagename = (self.item.GetSelectedIconName() or
					 self.item.GetIconName() or
					 "openfolder")
	else:
		imagename = self.item.GetIconName() or "folder"
		
	# EKR: I would do: image = self.imageList[self.iconVal]
	image = self.geticonimage(imagename)
	id = self.canvas.create_image(self.x, self.y, anchor="nw", image=image)
	self.image_id = id
	self.canvas.tag_bind(id, "&lt;1&gt;", self.select)
	self.canvas.tag_bind(id, "&lt;Double-1&gt;", self.flip)
</t>
<t tx="T419">@ EKR: draws the receiver and all its descendants at x,y and returns the tree's total height.

EKR: modified from IDLE code
	all vnodes have treeNode and firstChild fields
	self.state --&gt; self.expanded
@c

def draw(self, x, y):
	# XXX This hard-codes too many geometry constants!
	self.x, self.y = x, y
	self.drawicon() # EKR: should return height of icon
	self.drawtext() # EKR: should return height of text
	if not self.expanded:
		return y+17
	# draw children
	cx = x+20 # ekr: indent child by 20
	cy = y+17 # ekr: height of first child is 17 below parent
	cylast = 0
	child = self.v.firstChild:
	while child:
		cylast = cy
		&lt;&lt; draw the horizontal line to the child &gt;&gt;
		# EKR: recursively draw child and all its descendants
		cy = child.treeNode.draw(cx, cy)
		if child.firstChild:
			&lt;&lt; draw the plus or minus icon &gt;&gt;
			&lt;&lt; Add bindings for plus or minus icon &gt;&gt;
		child = child.next
	&lt;&lt; draw the vertical line to the left of all children &gt;&gt;
	return cy # EKR: return total height of node and its children
</t>
<t tx="T420">sublist = self.item._GetSubList()
if not sublist:
	# _IsExpandable() was mistaken; that's allowed
	return y+17

for item in sublist:
	child = TreeNode(self.canvas, self, item)
	self.children.append(child)
</t>
<t tx="T421">@ EKR: The horizontal line runs from the vertical line to the left of all children at x+9 to the child's icon at cx = x+20
@c

self.canvas.create_line(x+9, cy+7, cx, cy+7, fill="gray50")
</t>
<t tx="T422"># EKR: this icon will overlay part of the horizontal line just drawn.

if child.state == 'expanded':
	iconname = "minusnode"
	callback = child.collapse
else:
	iconname = "plusnode"
	callback = child.expand

image = self.geticonimage(iconname)
id = self.canvas.create_image(x+9, cylast+7, image=image)
</t>
<t tx="T423"># XXX This leaks bindings until canvas is deleted:
self.canvas.tag_bind(id, "&lt;1&gt;", callback)
self.canvas.tag_bind(id, "&lt;Double-1&gt;", lambda x: None)
</t>
<t tx="T424"># EKR: the line is at x+9

id = self.canvas.create_line(x+9, y+10, x+9, cylast+7,
	##stipple="gray50",     # XXX Seems broken in Tk 8.0.x
	fill="gray50")
self.canvas.tag_lower(id) # XXX .lower(id) before Python 1.5.2
</t>
<t tx="T425">@ EKR
draws text at self.x+20-1, self.y-1
label text preceeds other text (no idea why we need both)
@c

def drawtext(self):

	textx = self.x+20-1
	texty = self.y-1
	
	# EKR: handle label text, whatever that is.
	labeltext = self.item.GetLabelText()
	if labeltext:
		id = self.canvas.create_text(textx, texty, anchor="nw",text=labeltext)
		self.canvas.tag_bind(id, "&lt;1&gt;", self.select)
		self.canvas.tag_bind(id, "&lt;Double-1&gt;", self.flip)
		x0, y0, x1, y1 = self.canvas.bbox(id)
		textx = max(x1, 200) + 10 # Minimum size of box is 200.  Allow 10 more
		
	# Handle regular text
	text = self.item.GetText() or "&lt;no text&gt;"
	try:
		self.entry
	except AttributeError:
		pass
	else:
		self.edit_finish()

	try:
		label = self.label
	except AttributeError:
		# padding carefully selected (on Windows) to match Entry widget:
		self.label = Label(self.canvas, text=text, bd=0, padx=2, pady=2)

	if self.selected:
		self.label.configure(fg="white", bg="darkblue")
	else:
		self.label.configure(fg="black", bg="white")

	id = self.canvas.create_window(textx,texty,anchor="nw",window=self.label)
	self.label.bind("&lt;1&gt;", self.select_or_edit)
	self.label.bind("&lt;Double-1&gt;", self.flip)
	self.text_id = id
</t>
<t tx="T426">def edit(self, event=None):

	self.entry = Entry(self.label, bd=0, highlightthickness=1, width=0)
	self.entry.insert(0, self.label['text'])
	self.entry.selection_range(0, END)
	self.entry.pack(ipadx=5)
	self.entry.focus_set()
	self.entry.bind("&lt;Return&gt;", self.edit_finish)
	self.entry.bind("&lt;Escape&gt;", self.edit_cancel)
</t>
<t tx="T427">def edit_finish(self, event=None):

	try:
		entry = self.entry
		del self.entry
	except AttributeError:
		return

	text = entry.get()
	entry.destroy()
	if text and text != self.item.GetText():
		self.item.SetText(text)
	text = self.item.GetText()
	self.label['text'] = text
	self.drawtext()
	self.canvas.focus_set()
</t>
<t tx="T428">def edit_cancel(self, event=None):

	try:
		entry = self.entry
		del self.entry
	except AttributeError:
		return

	entry.destroy()
	self.drawtext()
	self.canvas.focus_set()
</t>
<t tx="T429">def select(self, event=None):

	if self.selected:
		return
	self.deselectall()
	self.selected = 1
	self.canvas.delete(self.image_id)
	self.drawicon()
	self.drawtext()
</t>
<t tx="T430">def select_or_edit(self, event=None):

	if self.selected and self.item.IsEditable():
		self.edit(event)
	else:
		self.select(event)
</t>
<t tx="T431">def deselect(self, event=None):

	if not self.selected:
		return
	self.selected = 0
	self.canvas.delete(self.image_id)
	self.drawicon()
	self.drawtext()
</t>
<t tx="T432">def deselectall(self):

	if self.parent:
		self.parent.deselectall()
	else:
		self.deselecttree()
</t>
<t tx="T433">def deselecttree(self):

	if self.selected:
		self.deselect()
	for child in self.children:
		child.deselecttree()
</t>
<t tx="T434">#!/bin/sh
# the next line restarts using wish \
exec wish "$0" "$@"

# This script demonstrates the various widgets provided by Tk,
# along with many of the features of the Tk toolkit.  This file
# only contains code to generate the main window for the
# application, which invokes individual demonstrations.  The
# code for the actual demonstrations is contained in separate
# ".tcl" files is this directory, which are sourced by this script
# as needed.

eval destroy [winfo child .]
wm title . "Widget Demonstration"
set widgetDemo 1

&lt;&lt; Create the main window &gt;&gt;
&lt;&lt; Create the text for the text widget &gt;&gt;
@others

</t>
<t tx="T435"># The code below create the main window, consisting of a menu bar
# and a text widget that explains how to use the program, plus lists
# all of the demos as hypertext items.

&lt;&lt; Create the menu bar &gt;&gt;
&lt;&lt; Create the status bar &gt;&gt;
&lt;&lt; Create the text frame &gt;&gt;
&lt;&lt; Create tags for the text widget &gt;&gt;</t>
<t tx="T436">set font {Helvetica 14}
menu .menuBar -tearoff 0
.menuBar add cascade -menu .menuBar.file -label "File" -underline 0
menu .menuBar.file -tearoff 0

# On the Mac use the special .apple menu for the about item
if {$tcl_platform(platform) == "macintosh"} {
    .menuBar add cascade -menu .menuBar.apple
    menu .menuBar.apple -tearoff 0
    .menuBar.apple add command -label "About..." -command "aboutBox"
} else {
    .menuBar.file add command -label "About..." -command "aboutBox" \
	-underline 0 -accelerator "&lt;F1&gt;"
    .menuBar.file add sep
}

.menuBar.file add command -label "Quit" -command "exit" -underline 0 \
    -accelerator "Meta-Q"
. configure -menu .menuBar
bind . &lt;F1&gt; aboutBox
</t>
<t tx="T437">frame .statusBar
label .statusBar.lab -text "   " -relief sunken -bd 1 \
    -font -*-Helvetica-Medium-R-Normal--*-120-*-*-*-*-*-* -anchor w
label .statusBar.foo -width 8 -relief sunken -bd 1 \
    -font -*-Helvetica-Medium-R-Normal--*-120-*-*-*-*-*-* -anchor w
pack .statusBar.lab -side left -padx 2 -expand yes -fill both
pack .statusBar.foo -side left -padx 2
pack .statusBar -side bottom -fill x -pady 2
</t>
<t tx="T438">frame .textFrame
scrollbar .s -orient vertical -command {.t yview} -highlightthickness 0 \
    -takefocus 1
pack .s -in .textFrame -side right -fill y
text .t -yscrollcommand {.s set} -wrap word -width 60 -height 30 -font $font \
    -setgrid 1 -highlightthickness 0 -padx 4 -pady 2 -takefocus 0
pack .t -in .textFrame -expand y -fill both -padx 1
pack  .textFrame -expand yes -fill both
</t>
<t tx="T439"># Create a bunch of tags to use in the text widget, such as those for
# section titles and demo descriptions.  Also define the bindings for tags.

.t tag configure title -font {Helvetica 18 bold}

# We put some "space" characters to the left and right of each demo description
# so that the descriptions are highlighted only when the mouse cursor
# is right over them (but not when the cursor is to their left or right)

.t tag configure demospace -lmargin1 1c -lmargin2 1c

if {[winfo depth .] == 1} {
    .t tag configure demo -lmargin1 1c -lmargin2 1c \
	-underline 1
    .t tag configure visited -lmargin1 1c -lmargin2 1c \
	-underline 1
    .t tag configure hot -background black -foreground white
} else {
    .t tag configure demo -lmargin1 1c -lmargin2 1c \
	-foreground blue -underline 1
    .t tag configure visited -lmargin1 1c -lmargin2 1c \
	-foreground #303080 -underline 1
    .t tag configure hot -foreground red -underline 1
}

.t tag bind demo &lt;ButtonRelease-1&gt; {
    invoke [.t index {@%x,%y}]
}

set lastLine ""

.t tag bind demo &lt;Enter&gt; {
    set lastLine [.t index {@%x,%y linestart}]
    .t tag add hot "$lastLine +1 chars" "$lastLine lineend -1 chars"
    .t config -cursor hand2
    showStatus [.t index {@%x,%y}]
}

.t tag bind demo &lt;Leave&gt; {
    .t tag remove hot 1.0 end
    .t config -cursor xterm
    .statusBar.lab config -text ""
}

.t tag bind demo &lt;Motion&gt; {
    set newLine [.t index {@%x,%y linestart}]
    if {[string compare $newLine $lastLine] != 0} {
    	.t tag remove hot 1.0 end
    	set lastLine $newLine
    
    	set tags [.t tag names {@%x,%y}]
    	set i [lsearch -glob $tags demo-*]
    	if {$i &gt;= 0} {
    	    .t tag add hot "$lastLine +1 chars" "$lastLine lineend -1 chars"
    	}
    }
    showStatus [.t index {@%x,%y}]
}
</t>
<t tx="T440">.t insert end "Tk Widget Demonstrations\n" title

.t insert end {
This application provides a front end for several short scripts that demonstrate what you can do with Tk widgets.  Each of the numbered lines below describes a demonstration;  you can click on it to invoke the demonstration.  Once the demonstration window appears, you can click the "See Code" button to see the Tcl/Tk code that created the demonstration.  If you wish, you can edit the code and click the "Rerun Demo" button in the code window to reinvoke the demonstration with the modified code.

}

.t insert end "Labels, buttons, checkbuttons, and radiobuttons" title
.t insert end " \n " {demospace}
.t insert end "1. Labels (text and bitmaps)." {demo demo-label}
.t insert end " \n " {demospace}
.t insert end "2. Buttons." {demo demo-button}
.t insert end " \n " {demospace}
.t insert end "3. Checkbuttons (select any of a group)." {demo demo-check}
.t insert end " \n " {demospace}
.t insert end "4. Radiobuttons (select one of a group)." {demo demo-radio}
.t insert end " \n " {demospace}
.t insert end "5. A 15-puzzle game made out of buttons." {demo demo-puzzle}
.t insert end " \n " {demospace}
.t insert end "6. Iconic buttons that use bitmaps." {demo demo-icon}
.t insert end " \n " {demospace}
.t insert end "7. Two labels displaying images." {demo demo-image1}
.t insert end " \n " {demospace}
.t insert end "8. A simple user interface for viewing images." \
    {demo demo-image2}
.t insert end " \n " {demospace}

.t insert end \n {} "Listboxes" title
.t insert end " \n " {demospace}
.t insert end "1. 50 states." {demo demo-states}
.t insert end " \n " {demospace}
.t insert end "2. Colors: change the color scheme for the application." \
	{demo demo-colors}
.t insert end " \n " {demospace}
.t insert end "3. A collection of famous sayings." {demo demo-sayings}
.t insert end " \n " {demospace}

.t insert end \n {} "Entries" title
.t insert end " \n " {demospace}
.t insert end "1. Without scrollbars." {demo demo-entry1}
.t insert end " \n " {demospace}
.t insert end "2. With scrollbars." {demo demo-entry2}
.t insert end " \n " {demospace}
.t insert end "3. Simple Rolodex-like form." {demo demo-form}
.t insert end " \n " {demospace}

.t insert end \n {} "Text" title
.t insert end " \n " {demospace}
.t insert end "1. Basic editable text." {demo demo-text}
.t insert end " \n " {demospace}
.t insert end "2. Text display styles." {demo demo-style}
.t insert end " \n " {demospace}
.t insert end "3. Hypertext (tag bindings)." {demo demo-bind}
.t insert end " \n " {demospace}
.t insert end "4. A text widget with embedded windows." {demo demo-twind}
.t insert end " \n " {demospace}
.t insert end "5. A search tool built with a text widget." {demo demo-search}
.t insert end " \n " {demospace}

.t insert end \n {} "Canvases" title
.t insert end " \n " {demospace}
.t insert end "1. The canvas item types." {demo demo-items}
.t insert end " \n " {demospace}
.t insert end "2. A simple 2-D plot." {demo demo-plot}
.t insert end " \n " {demospace}
.t insert end "3. Text items in canvases." {demo demo-ctext}
.t insert end " \n " {demospace}
.t insert end "4. An editor for arrowheads on canvas lines." {demo demo-arrow}
.t insert end " \n " {demospace}
.t insert end "5. A ruler with adjustable tab stops." {demo demo-ruler}
.t insert end " \n " {demospace}
.t insert end "6. A building floor plan." {demo demo-floor}
.t insert end " \n " {demospace}
.t insert end "7. A simple scrollable canvas." {demo demo-cscroll}
.t insert end " \n " {demospace}

.t insert end \n {} "Scales" title
.t insert end " \n " {demospace}
.t insert end "1. Vertical scale." {demo demo-vscale}
.t insert end " \n " {demospace}
.t insert end "2. Horizontal scale." {demo demo-hscale}
.t insert end " \n " {demospace}

.t insert end \n {} "Menus" title
.t insert end " \n " {demospace}
.t insert end "1. Menus and cascades." \
	{demo demo-menu}
.t insert end " \n " {demospace}
.t insert end "2. Menubuttons"\
	{demo demo-menubu}
.t insert end " \n " {demospace}

.t insert end \n {} "Common Dialogs" title
.t insert end " \n " {demospace}
.t insert end "1. Message boxes." {demo demo-msgbox}
.t insert end " \n " {demospace}
.t insert end "2. File selection dialog." {demo demo-filebox}
.t insert end " \n " {demospace}
.t insert end "3. Color picker." {demo demo-clrpick}
.t insert end " \n " {demospace}

.t insert end \n {} "Miscellaneous" title
.t insert end " \n " {demospace}
.t insert end "1. The built-in bitmaps." {demo demo-bitmap}
.t insert end " \n " {demospace}
.t insert end "2. A dialog box with a local grab." {demo demo-dialog1}
.t insert end " \n " {demospace}
.t insert end "3. A dialog box with a global grab." {demo demo-dialog2}
.t insert end " \n " {demospace}

.t configure -state disabled
focus .s</t>
<t tx="T441"># Pops up a message box with an "about" message

proc aboutBox {} {
    tk_messageBox -icon info -type ok -title "About Widget Demo" -message \
		"Tk widget demonstration\n\n\Copyright (c) 1996-1997 Sun Microsystems, Inc."
}
</t>
<t tx="T442"># This procedure invokes a demo when the user clicks on a demo description.
# index - The index of the character that the user clicked on.

proc invoke index {
	global tk_library
	set tags [.t tag names $index]
	set i [lsearch -glob $tags demo-*]
	if {$i &lt; 0} {
		return
	}
	set cursor [.t cget -cursor]
	.t configure -cursor watch
	update
	set demo [string range [lindex $tags $i] 5 end]
	uplevel [list source [file join $tk_library demos $demo.tcl]]
	update
	.t configure -cursor $cursor

	.t tag add visited "$index linestart +1 chars" "$index lineend -1 chars"
}

</t>
<t tx="T443"># Invoked by most of the demos to position a new demo window.
# w - The name of the window to position.

proc positionWindow w {
    wm geometry $w +300+300
}</t>
<t tx="T444"># This procedure creates a toplevel window that displays the code for
# a demonstration and allows it to be edited and reinvoked.
#
# Arguments:
# w - The name of the demonstration's window,
# which can be used to derive the name of the file containing its code.

proc showCode w {
	global tk_library
	set file [string range $w 1 end].tcl
	if ![winfo exists .code] {
		toplevel .code
		frame .code.buttons
		pack .code.buttons -side bottom -fill x
		button .code.buttons.dismiss -text Dismiss \
			-default active -command "destroy .code"
		button .code.buttons.rerun -text "Rerun Demo" -command {
			eval [.code.text get 1.0 end]
		}
		pack .code.buttons.dismiss .code.buttons.rerun -side left \
			-expand 1 -pady 2
		frame .code.frame
		pack  .code.frame -expand yes -fill both -padx 1 -pady 1
		text .code.text -height 40 -wrap word \
			-xscrollcommand ".code.xscroll set" \
			-yscrollcommand ".code.yscroll set" \
			-setgrid 1 -highlightthickness 0 -pady 2 -padx 3
		scrollbar .code.xscroll -command ".code.text xview" \
			-highlightthickness 0 -orient horizontal
		scrollbar .code.yscroll -command ".code.text yview" \
			-highlightthickness 0 -orient vertical
	
		grid .code.text -in .code.frame -padx 1 -pady 1 \
			-row 0 -column 0 -rowspan 1 -columnspan 1 -sticky news
		grid .code.yscroll -in .code.frame -padx 1 -pady 1 \
			-row 0 -column 1 -rowspan 1 -columnspan 1 -sticky news
	#	grid .code.xscroll -in .code.frame -padx 1 -pady 1 \
	#	    -row 1 -column 0 -rowspan 1 -columnspan 1 -sticky news
		grid rowconfig    .code.frame 0 -weight 1 -minsize 0
		grid columnconfig .code.frame 0 -weight 1 -minsize 0
	} else {
		wm deiconify .code
		raise .code
	}
	wm title .code "Demo code: [file join $tk_library demos $file]"
	wm iconname .code $file
	set id [open [file join $tk_library demos $file]]
	.code.text delete 1.0 end
	.code.text insert 1.0 [read $id]
	.code.text mark set insert 1.0
	close $id
}
</t>
<t tx="T445">#	Show the name of the demo program in the status bar. This procedure
#	is called when the user moves the cursor over a demo description.

proc showStatus index {
	global tk_library
	set tags [.t tag names $index]
	set i [lsearch -glob $tags demo-*]
	set cursor [.t cget -cursor]
	if {$i &lt; 0} {
		.statusBar.lab config -text " "
		set newcursor xterm
	} else {
		set demo [string range [lindex $tags $i] 5 end]
		.statusBar.lab config -text "Run the \"$demo\" sample program"
		set newcursor hand2
	}
	if [string compare $cursor $newcursor] {
		.t config -cursor $newcursor
	}
}
</t>
<t tx="T446"># Displays the values of one or more variables in a window, and
# updates the display whenever any of the variables changes.
#
# Arguments:
# w -		Name of new window to create for display.
# args -	Any number of names of variables.

proc showVars {w args} {
	catch {destroy $w}
	toplevel $w
	wm title $w "Variable values"
	label $w.title -text "Variable values:" -width 20 -anchor center \
		-font {Helvetica 18}
	pack $w.title -side top -fill x
	set len 1
	foreach i $args {
		if {[string length $i] &gt; $len} {
			set len [string length $i]
		}
	}
	foreach i $args {
		frame $w.$i
		label $w.$i.name -text "$i: " -width [expr $len + 2] -anchor w
		label $w.$i.value -textvar $i -anchor w
		pack $w.$i.name -side left
		pack $w.$i.value -side left -expand 1 -fill x
		pack $w.$i -side top -anchor w -fill x
	}
	button $w.ok -text OK -command "destroy $w" -default active
	bind $w &lt;Return&gt; "tkButtonInvoke $w.ok"
	pack $w.ok -side bottom -pady 2
}
</t>
<t tx="T447">@ignore
@color</t>
<t tx="T448"># Returns a list of methods in this file, sorted by starting line number.
# This works, and it isn't clear that Leo can use it.

def sort():

	import leoImport
	ins = inspect
	members = ins.getmembers(leoImport.leoImportCommands,ins.ismethod)
	numbers = []
	for name,val in members:
		n = val.im_func.func_code.co_firstlineno
		numbers.append((n,val))
	sorted = sortSequence(numbers,0)
	for n, val in sorted: print n, val
	return sorted</t>
<t tx="T449">@ The problem here is getting app().clipboard to the "real" clipboard.  This I don't know how to do!
@c

def exportMoreText (self):

	c = self.commands ; v = c.currentVnode()
	if v:
		app().clipboard = v.convertTreeToString()
		trace(app().clipboard)</t>
<t tx="T450">@nocolor

This paper presents my present thoughts about recovering from "read errors", that is, errors encountered while reading @file trees.

Recall that read errors will occur when the .leo file is out of synch with the derived files that it creates.  Read errors break clone links into the derived file, a highly undesirable situation.  Read errors will occur when restoring a project from a backup file.  They can also occur when using CVS if derived files aren't checked out with the .leo file that created them.

No More "False" Read Errors

leo.py v 0.8 fixed a bug that caused some changed clone nodes not to be marked dirty.  I haven't suffered a read error since then.  "False" read errors, that is, read errors encountered while reading derived files that are in synch with the .leo files, seem to be gone forever.

Note:  This bug still exists in the Borland version of Leo.  I plan to fix this and all other known bugs in the Borland version in the next week or so.

No More Broken Clone Links

Even though "false" read errors are gone, read errors can still occur when the .leo file is out of synch with derived files.  To repeat: this can happen when using a backup .leo file, or when failing to check out all files in synch from CVS.

At present Leo restores the @file tree in the outline from the derived file when a read error occurs, breaking clone links into the derived file in the process. Leo could retain clone links if it recovered from read errors using the outline rather than the derived file.  This way has the following features:
	
1. We retain clone links by default.  The user doesn't have to understand all the issues involved when read errors occur.  In particular, the user won't be confronted with an dialog when read errors occur that requires the user to make an obscure choice. Leo will clearly state that data is recovered from the outline rather than the derived file.

2. When restoring a project from a backup .leo file, it is natural to have the information in the .leo file take precedence over the derived file.  Ditto when using CVS.

3. The user can "manually" restore information from a derived file using the Read @file Nodes command if  necessary.  This operation, and only this operation, will break clone links.</t>
<t tx="T451">@nocolor</t>
<t tx="T452">Let us consider how to use CVS with Leo.  Our goal is this:
	
	CVS operations should retain clone links.
	
In general, clone links will break whenever Leo reads a derived file from a .leo file different from the .leo file that created it.  This leads immediately to

-- Rules for using Leo files with CVS --
	
1. All derived files in a particular revision in the CVS repository must be generated by a single .leo file. Call that .leo file the _generating_ .leo file (for the revision as a whole and for each derived file in particular).  In other words, all .leo files in the repository should be proper snapshots of their revision.
	
2. When we check files out of the repository, we must check out their generating .leo file.

3. When we check files into the repository, we must check in their (unique!) generating .leo file.  Developers should use Write @file Nodes command to ensure that all derived files are in synch with this .leo file.

4. When CVS detects update conflicts, developers should resolve those conflicts into a single "merged" .leo file.  Again, developers should use Write @file Nodes to recreate all derived files.

5. Developers should retain clone links when creating a merged .leo file.  Most merges will have to be done "by hand" by starting with one .leo file and pasting changes from the other .leo file into it.

In short: Developers should include generating .leo files in all CVS operations.

We could conceivably go further and include _only_ .leo files in CVS operations.  We would check out only  .leo files, creating derived files as needed using the Write @file Nodes command.  One drawback to this scheme is that the repository would contain only .leo files, so all diffs would be based on .leo files. This will make detecting conflicts more difficult.  Another drawback is that the repository would contain no human readable files.  So probably we should include both .leo files and derived files in the repository.

Rules 4 and 5 imply that there is extra work to be done when using Leo with CVS.  That should not be too surprising; there are extra files (the .leo files) to update.

I always envisioned that update conflicts would have to be resolved in .leo files rather than derived files.  It is now clear that this is the only way to prevent clone links from being broken.

I believe these rules are correct.  If you disagree with these conclusions please let me know immediately.

Edward</t>
<t tx="T453">My last posting is completely wrong.  Leo can not mend clone links for a very simple reason: cloned nodes must have the same structure!  Most read errors come about because Leo has detected that nodes do _not_ have the same structure.

Even if a Mend Clone dialog were put up, the user would have no way of knowing whether any joins made sense.  Joining two nodes with different structure would be disastrous.

Mending clones would be possible only if the only differences between trees were differences in headline text.  This suggests that Leo shouldn't test headline text during reads. This would eliminated false read errors.  This is an easy change and I plan to test it soon.

My next posting will try to make a virtue out of necessity by proposing guidelines for using Leo with CVS.

Edward</t>
<t tx="T454">Development work on Leo is about to start using CVS.  This raises a number of questions about how to use Leo projects with CVS.  Resolving these issues is very important; people won't use Leo if it doesn't work well with CVS.
	
1. CVS may not do very well in reporting conflicts involving .leo files.  Indeed, .leo files might almost be considered to be "binary" files as far as CVS is concerned.  Experience will show how serious this problem turns out to be, and I have some ideas about how to help out CVS.

2. Files derived from @root or @file trees contain structure information that should not be edited by hand.  In particular, if CVS reports a conflict, that conflict should be resolved at the outline level, not in the derived file.  Again, it remains to be seen how big a problem this will be, and again I have some ideas about how to make things more smooth.

Note: It will never be possible to update outline _structure_ using the Untangle command.  Indeed, the Untangle command traverses the outline to find body text to update; there is absolutely no way for Untangle to change outline structure.  It _is_ possible to update outline structure by reading @file trees (that was a big reason for creating @file trees!), and there are problems with clones.  See the next section.</t>
<t tx="T455">This note addresses problem 1 of my initial posting, namely that .leo files are like "binary" files as far as CVS is concerned.  That is, CVS may have problems providing intelligent diffs of .leo files.

It would be easy for Leo to write a "diff-friendly" version of a .leo file.  Call such files .cvs.leo files.  .cvs.leo files would be easy for us humans to understand.  I am thinking that people would check .cvs.leo files in and out rather than .leo files.  On checkout, one would then recreate .leo files from .cvs.leo files.  Before checkin, one would create .cvs.leo files from .leo files.

A .cvs.leo file would be a text file, but not an XML file. It would have the following format:

1. header line:  // created by leo: &lt;file name&gt;

The information found in the &lt;leo_header&gt;, &lt;globals&gt;, &lt;preferences&gt; and &lt;find_panel_settings&gt;
parts of the present .leo file format would be omitted.  Such information is not needed and will only confuse diff.

2. vnode (outline) section

Optional.  A list of headline names without status bits and without tnode indices.  It indicates the structure of the outline.

3. separator line

Optional.  It might make it easy for diff to distinguish the vnode section from the tnode section.

4. tnode (full outline) section:
	
This would be easy for humans to understand and would be like the format used in the Import/Export MORE text commands:
	
Each headline on separate line, starts with + or -.  The + or = depends only on children: the expansion state of the headline doesn't matter.  The headline is followed by body text, with escapes for + and - so that body text can never be confused with headlines.

Still unresolved is a way of specifying clones in a bullet-proof way.

Edward</t>
<t tx="T456">This note is another approach to handling some of the problems mentioned in my original post.

It may be desirable to use @cvs trees instead of @file tree.  When Leo writes a @cvs tree to a .leo file it writes only the headline of the tree; it writes none of the headlines below the @cvs tree and writes none of the body text of the tree.  This is suspiciously like the infamous "Archive" command, and it may be a good idea nevertheless in the context of CVS.  With @cvs, the .leo file becomes just a dummy file, so it would not be common to check .leo files in or out.

Implementing this command can be done easily.  The question is, does it make sense to do so?</t>
<t tx="T457">@nocolor

Farewell to the Mac?

I still have hopes that Leo2 will someday work on the Mac.  However, I decline to create a new Mac-only version of Leo, nor will I revise previous versions of Leo for the Mac.  My reasons for this decision, taken after much thought, are as follows.

The present Mac versions can not, and should not, be brought up to date.  There are two Mac versions.  The first is written in C, the second in Objective C (using Yellow Box, aka Cocoa).  Neither version supports Leo2 @file nodes.  Neither version contains the latest Tangle/Untangle code, which is written in a strange mixture of C and C++.

Upgrading either of these versions would amount to a total rewrite.  It is tempting to revise them so that they could read and write the present XML file format.  Alas, that would hardly suffice.  The tangle and untangle code would have to be completely revised.  All the Leo2 code would have to be transliterated back to C or Objective C.  Indeed, every line of code would need a hard look.

Revising Mac code would be foolish.  Any work maintaining Mac code would detract from job of improving Leo.  What I want is fewer versions of Leo, not more.  My goal is to provide a single, cross-platform version of Leo.  Maintaining Mac code works against that goal.

What about wxWindows and wxPython?  Alas, wxWindows is too buggy, the Mac version of wxWindows is unacceptable, and wxPython does not exist on the Mac.  Moreover, wxPython is not nearly as safe as Python;  erroneous code often causes crashes inside wxWindows.  The C++ code in wxWindows makes wxPython unreliable.

I am committed to using the highest level tools and most portable tools.  The combination of Python and tkinter (the Python interface to Tk) appears to be the best, most stable and most portable platform on which to build Leo.  Indeed, IDLE, the Python IDE/Debugger, is written in Python + tkinter.  Alas, Tk does not work well on the Mac.  I can justify no further work on the Mac until it does.

This posting uses the word 'alas' three times, not counting the last one ;-)  I am indeed sorry about the present state of affairs; I have loved the Mac for a long time.  I hope that the best tools will be ported to the Mac, and I wonder whether that will happen.

Edward K. Ream
November 4, 2001
</t>
<t tx="T458">@nocolor

The more I look at Tk, the more convinced I am that Python + Tk (aka tkinter) is, by far, the best way to go with Leo.py.  I now have Open Source code for tree widgets and splitter windows, and have intensely studied how to modify that code for use in Leo.  It is clear, even at this early date, that this code will provide a very pleasant base on which to build Leo.

The tree code is based on code in IDLE, the Python IDE.  This code is simple, good and plenty fast enough. The tree code draws directly to a Tk canvas object.  The look and feel matches Windows exactly.  It would be trivial to use Mac triangle icons instead of the Windows plus and minus icons.  It would also be trivial to modify the look and feel for Linux.

The tree widget code solves several intractable problems with wxTreeCtrl.  Moving nodes becomes trivial.  Bugs in wxTreeCtrl involving editing and redrawing disappear.  Using Python/Tk code simplifies the vnode class, and having access to the vnode class simplifies and speeds up the tree widget code.  There is no SWIG overhead in calling the wxTreeCtrl code.  It will now be possible to bind keystrokes properly; this simply can not be done in wxWindows.

Actually, the tree widget code shows just how trivial the Windows native tree control is.  Of course, the Tk canvas class simplifies matters, but there are several important points here:

1. The wxTreeCtrl tree class actually does very little, and does it rather badly.
2. There is absolutely no need for C++ code (except in the Tk canvas class) to draw trees.
3. Leo can _easily_ have _complete_ control over the look and feel of tree controls.
4. I can modify in the tree code to simplify the rest of Leo, especially Leo's vnode class.

Here we have a splendid example of higher-level code being superior, in _every_ way, to lower level code.  The wxTreeCtrl code is horrendously complex, and in fact does almost nothing!

Similar remarks apply to the splitter window.  The Tk code for splitter windows is about a page long.  No code could be higher level because the Tk code describes only _what_ is to be done, not _how_ it is too be done.

Another big win comes from using the Tk text widget.  This widget is extraordinarily powerful.  The only text control that rivals it is the MacOS/Yellow Box text control.  Indeed, the Tk text widget does everything that Leo could possibly want.  One can even embed images in text!

Syntax coloring Tk text will be straightforward in Python. IDLE's syntax coloring is very fast on modern workstations.  There will be no need to use or modify the Scintilla C++ code.

In short, using Tk for Leo.py will be fast enough and will greatly increase what is possible in Leo while at the same time greatly simplifying Leo's code.  I am about to convert Leo.py from wxPython to Python + Tk.

Edward K. Ream
November 4, 2001</t>
<t tx="T459">@nocolor

I've known for a while that Python was interesting; I attended a Python conference last year and added Python support to Leo.  But last week I got that Python is something truly remarkable.  I wanted to convert Leo from wxWindows to wxPython, so I began work on c2py, a Python script that would help convert from C++ syntax to Python.  While doing so, I had an Aha experience.  Python is more than an incremental improvement over Smalltalk or C++ or objective-C; it is "something completely different".  The rest of this post tries to explain this difference.

Clarity: no clutter, easy prototyping

What struck me first as I converted C++ code to Python is how much less blah, blah, blah there is in Python.  No braces, no stupid semicolons and most importantly, _no declarations_.  No more pointless distinctions between const char *, char const *, char * and wxString. No more wondering whether a variable should be signed, unsigned, short or long.

Declarations add clutter, declarations are never obviously right and declarations don't prevent memory allocation tragedies.  Declarations also hinder prototyping.  In C++, if I change the type of something I much change all related declarations; this can be a huge and dangerous task.  With Python, I can change the type of an object without changing the code at all!  It's no accident that Leo's new log pane was created first in Python.

Functions returning tuples are a "minor" feature with a huge impact on code clarity.  No more passing pointers to data, no more defining (and allocating and deallocating) temporary structs to hold multiple values.

Python can't check declarations because there aren't any.  Python can only check for syntax errors before running a script; other errors must be found by executing code.  In practice, this drawback is minor: one simply writes code to ensure that all code gets tested.

Power

Python is much more powerful than C++, not because Python has more features, but because Python needs _less_ features.  Some examples:

1. Python does everything that the C++ Standard Template Library (STL) does, without any of the blah, blah, blah needed by STL.  No fuss, no muss, no code bloat.

2. Python's slicing mechanism is very powerful and applies to any sequence (string, list or tuple).  Python's string library does more with far less functions because slices replace many functions typically found in other string libraries.

3. Writing dict = {} creates a dictionary (hash table).  Hash tables can contain anything, including lists and other hash tables.

4. Python's special functions, like __init__, __del__, __repr__, __cmp__, etc. create an elegant way to handle any special need that might arise.

Safety

Before using Python I never fully realized how difficult and dangerous memory allocation is in C++.  Try doing

        aList[i:j] = list(aString)

in C.  You will write at least 10 - 20 lines of code.  Any error in this code will create a memory allocation crash or leak.

Python is fundamentally safe.  C++ is fundamentally unsafe.  When I am using Python I am free from worry and anxiety.  When I am using C++ I must be constantly "on guard."  A momentary lapse can create a hard-to-find pointer bug.  With Python, almost nothing serious can ever go wrong, so I can work late at night, or after a few beers.

And the Python debugger is always available.  If an unexpected exception occurs, the debugger/interpreter tells me just what went wrong.  I don't have to plan a debugging strategy!  Finally, wxPython recovers from exceptions, so Leo can keep right on going even after a crash!

Code Speed

Python has almost all the speed of C.  Other interpretive environments such as icon and smalltalk have clarity, power and safety similar to Python.  What makes Python unique is its seamless way of making C code look like Python code.

Much of Python executes at essentially the speed of C code because most Python modules are written in C.  The overhead in calling such modules is negligible.  Moreover, if code is too slow, one can always create a C module to do the job.

In fact, Python encourages optimization by moving to _higher_ levels of expression.  For example, Leo's Open command reads an XML file.  If this command is too slow I can use Python's XML parser module.  This will speed up Leo while at the same time raising the level of the code.

Conclusions

Little of Python is completely new.  What stands out is the superb engineering judgment evident in Python's design.  Python is extremely powerful, yet small, simple and elegant.  Python allows me to express my intentions clearly and at the highest possible level.

The only hope of making Leo all it can be is to use the best possible tools.  I believe Python (possibly with tkinter) will allow me to add, at long last, the new features that Leo should have.

Edward K. Ream
October 25, 2001</t>
<t tx="T460">@nocolor</t>
<t tx="T461">Pros: leo.py is much better.
Cons: It wouldn't be hard to make Borland version 3.0 compliant.</t>
<t tx="T462">What I won't do: Python to C
	Pyrex is good enough.
	Python is fast enough.
	In 2 years, Python will be twice as fast.
	The project is feasible only if super-aggressive optimizations are done.
		But that means new debugging.
		People just aren't going to be interested.

Easy and useful:
	Add Python support to Idle.

My career has involved developing tools to solve my own programming problems.  The combination of Leo + Python + Tk essentially solves all these problems and more.  There is very little left for me to do.</t>
<t tx="T463">Path 1: text box
Path 2: text box

check: File extension: text box

Radio buttons:
	* print all lines
	* print mismatches
	* print matches
	
check: stop after first mismatch
check: send result to file: text box
check: generate diffs
check: ignore whitespace
check: ignore blank lines</t>
<t tx="T464">for window height, width.
for bar color, relief and width.
for font color, etc.</t>
<t tx="T465">Basically, javadoc in the following form: 

/** 
* Returns a JNDI context that can be used to lookup 
references 
* to EJB's. 
*/ 

appears like this after a save: 

/* 
* * Returns a JNDI context that can be 
used to lookup references * to EJB's. 
*/ </t>
<t tx="T466">Drat: this would effective change Leo's file format: older versions of Leo will not be able to read the new files :-(

Allow a prolog string of either:

&lt;?xml version="1.0" encoding="UTF-8"?&gt;
or
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;

is_prolog, get_prolog, put_prolog.</t>
<t tx="T467">I would consider this feature complete  if I had a way to achieve the effect of a section ending without a new line when that section is not the last section in the text pane.

In the following example I would like the two sections to work in the same way. The first section should be terminated by something distinguishable from a single @ sign that ends a section and retains the last new line.  In my example I use @@ to terminate the section and to kill the last new line.

Syntax is not important to me, the functionality is. 

=== Text pane top === 
&lt;&lt; section one &gt;&gt;= 
partial line one 
@@ 

&lt;&lt; section two &gt;&gt;= 
partial line two[NO NEW LINE HERE] 
=== Text pane end ===
</t>
<t tx="T468">Check modification dates of pages.
Reorganize Appendix?</t>
<t tx="T469">Basically, javadoc in the following form: 

/** 
* Returns a JNDI context that can be used to lookup 
references 
* to EJB's. 
*/ 

appears like this after a save: 

/* 
* * Returns a JNDI context that can be 
used to lookup references * to EJB's. 
*/ </t>
<t tx="T470">Contract All keeps current text pane 

Leo/PC 1.13 Windows 98SE/J 

Category: Editor/Display 

Clicking on [-] of the root node in the LEO file displays the text pane of the root node. 
Contract All should probably do the same. It keeps open the text pane that was open before. 
</t>
<t tx="T471">Leo/PC 1.13 Windows 98SE/J 

Category: Editor/Clipboard

Make a node with empty header and empty body. 
With that header selected. 
Shift-Ctrl-C 
Shift-Ctrl-V 
Errors: 
1. The clipboard is not a valid Leo outline. 
2. The clipboard is not a valid LEO file. 

Type this in the header: head 
With that header selected. 
Shift-Ctrl-C 
Shift-Ctrl-V 
The same errors persists. 

Type this in the text: 
--- Top --- 
text 
--- End --- 
The same errors persists. 

Type this in the text: 
--- Top --- 
&lt;&lt; chunk &gt;&gt;= 
--- End --- 
The same errors persists. 

Type this in the text: 
--- Top --- 
&lt;&lt; chunk &gt;&gt;= 

--- End --- 
The same errors persists. 

Type this in the text: 
--- Top --- 
&lt;&lt; chunk &gt;&gt;= 
@ 
--- End --- 
The node is now copied. 

Sometimes it is not possible to get out of this state when no node can be copied to the clipboard. 
I have to close the file and load it again to clear the problem. </t>
<t tx="T472">Leo/PC 1.13 Windows 98SE/J 

Category: Tangle/Error handling

I copied a @root directive and forgot to change the file name. 
I had something like this: 

@root ./a.txt 
@ 

@root ./a.txt 
some text 
@ 

Ctrl-Shift-A resulted in a never ending Tangle run, 
with repeated line in the log window: 
Unchanged: ./a.txt 

I did not find a way to stop this. I had to shut down Windows. 
I am afraid to repeat this. If you cannot reproduce this problem, I will try again. </t>
<t tx="T473">The following items might be nice, and they just don't seem very important to me.</t>
<t tx="T474">This will allow great flexibility to users.</t>
<t tx="T475">A "Recent Files" menu is sufficient.</t>
<t tx="T476">&gt; Mouse wheel works on window that has focus regardless of where the insertion
&gt; point is.  In IE5 wheel works in window that has insertion point regardless
&gt; of which window has focus.  This is my preference.  How do you see this?  Is
&gt; it just a matter of transition until all windows programs work like IE5?

</t>
<t tx="T477">The following bugs can not be fixed because they are Tk bugs.</t>
<t tx="T478">1. The border of the tree control is gray, and it is overwritten with large headlines.  This may be a Tk or Tkinter bug.

2. Adding trailing whitespace to a line in body text does not set the file-dirty mark.  This can never cause a derived file to become "out-of-synch" because the read code does not compare body text.

Apparently there is no way to fix this glitch because of holes in Tk's event mechanism.  Specifically, tree.idle_body_key has no way to tell directly what keystroke caused it to be entered.</t>
<t tx="T479">This can be done using 'wm iconbitmap' in Tk 8.3.4+, or with the winico extension.  I don't want to use an extension; I hope Python will come pre-built with Tk 8.3.8+ soon.</t>
<t tx="T480">@color

@ The following commands are not yet implemented.  They are always dimmed.
@c

# Edit menu: These require new fields in leoConfig.txt.

	notYet("Font Panel")
	notYet("Syntax Coloring")</t>
<t tx="T481">@ignore
@language python
</t>
<t tx="T482">@ Starting with this release, you will see trace statements throughout the code.  The trace function is defined in leoUtils.py; trace implements much of the functionality of my Sherlock tracing package.  Traces are more convenient than print statements for two reasons: 1) you don't need explicit trace names and 2) you can disable them without recompiling.

In the following examples, suppose that the call to trace appears in function f.

trace(string) prints string if tracing for f has been enabled.  For example, the following statment prints from s[i] to the end of the line if tracing for f has been enabled.

	j = skip_line(s,i) ; trace(s[i:j])

trace(function) exectutes the function if tracing for f has been enabled.  For example,

	trace(self.f2)

You enable and disable tracing by calling init_trace(args).  Examples:

	init_trace("+*")         # enable all traces
	init_trace("+a","+b")    # enable traces for a and b
	init_trace(("+a","+b"))  # enable traces for a and b
	init_trace("-a")         # disable tracing for a
	traces = init_trace("?") # return the list of enabled traces

If two arguments are supplied to trace, the first argument is the "tracepoint name" and the second argument is the "tracepoint action" as shown in the examples above.  If tracing for the tracepoint name is enabled, the tracepoint action is printed (if it is a string) or exectuted (if it is a function name).

"*" will not match an explicit tracepoint name that starts with a minus sign.  For example,

	trace("-nocolor", self.disable_color)
</t>
<t tx="T483">@ It no args are given we attempt to get them from the "SherlockArgs" file.  If there are still no arguments we trace everything.  This default makes tracing much more useful in Python.
@c

def get_Sherlock_args (args):

	if not args or len(args)==0:
		try:
			f = open(os.path.join(app().loadDir,"SherlockArgs"))
			args = f.readlines()
			f.close()
		except: pass
	elif type(args[0]) == type(("1","2")):
		args = args[0] # strip away the outer tuple.

	# No args means trace everything.
	if not args or len(args)==0: args = ["+*"] 
	# print "get_Sherlock_args:" + `args`
	return args</t>
<t tx="T484">def init_trace(args):

	t = app().trace_list
	args = get_Sherlock_args(args)

	for arg in args:
		if arg[0] in string.letters: prefix = '+'
		else: prefix = arg[0] ; arg = arg[1:]
		
		if prefix == '?':
			print "trace list:", `t`
		elif prefix == '+' and not arg in t:
			t.append(string.lower(arg))
			# print "enabling:", arg
		elif prefix == '-' and arg in t:
			t.remove(string.lower(arg))
			# print "disabling:", arg
		else:
			print "ignoring:", prefix + arg</t>
<t tx="T485">def trace (s1=None,s2=None):

	if s1 and s2:
		name = s1 ; message = s2
	else: # use the funtion name as the tracepoint name.
		message = s1 # may be None
		try: # get the function name from the call stack.
			f1 = sys._getframe(1) # The stack frame, one level up.
			code1 = f1.f_code # The code object
			name = code1.co_name # The code name
		except: name = ""
		
	t = app().trace_list
	# tracepoint names starting with '-' must match exactly.
	minus = len(name) &gt; 0 and name[0] == '-'
	if minus: name = name[1:]
	if (not minus and '*' in t) or string.lower(name) in t:
		if not message: message = ""
		if type(message) == type("a"):
			s = name + ": " + message
			if 1: print s
			else: es(s)
		else: # assume we have a method and try to execute it.
			# print `type(message)`
			message()</t>
<t tx="T486">@ignore</t>
<t tx="T487">def OnCascade(self,event=None):
	
	c = self ; x,y,delta = 10,10,10
	for frame in app().windowList:
		top = frame.top
		# Compute w,h
		top.update_idletasks() # Required to get proper info.
		g = top.geometry() # g = "WidthxHeight+XOffset+YOffset"
		dim,junkx,junky = string.split(g,'+')
		w,h = string.split(dim,'x')
		w,h = int(w),int(h)
		# Set new x,y and old w,h
		frame.top.geometry("%dx%d%+d%+d" % (w,h,x,y))
		# Compute the new offsets.
		x += 30 ; y += 30
		if x &gt; 200:
			x = 10 + delta ; y = 40 + delta
			delta += 10
	
	return "break" # inhibit further command processing
</t>
<t tx="T488">@ignore</t>
<t tx="T489">def updateBodyPane (self,head,middle,tail,undoType):
	
	c = self ; v = c.currentVnode()
	# Update the text and set start, end.
	c.body.delete("1.0","end")
	# The caller must do rstrip.head if appropriate.
	if head and len(head) &gt; 0:
		c.body.insert("end",head)
		start = c.body.index("end-1c")
	else: start = "1.0"
	if middle and len(middle) &gt; 0:
		middle = string.rstrip(middle)
	if middle and len(middle) &gt; 0:
		c.body.insert("end",middle)
		end = c.body.index("end-1c")
	else: end = start
	if tail and len(tail) &gt; 0:
		tail = string.rstrip(tail)
	if tail and len(tail) &gt; 0:
		c.body.insert("end",tail)
	# Activate the body key handler by hand.
	c.tree.onBodyChanged(v,undoType)
	# Update the changed mark.
	if not c.isChanged():
		c.setChanged(true)
	# Update the icon.
	c.beginUpdate()
	if not v.isDirty():
		v.setDirty()
	c.endUpdate()
	# Update the selection.
	# trace(`start` + "," + `end`)
	setTextSelection(c.body,start,end)
	c.body.see("insert")
	c.body.focus_force()
	c.recolor() # 7/5/02</t>
<t tx="T490"></t>
<t tx="T491"># Returns optimized whitespace corresponding to width with the indicated tab_width.

def computeLeadingWhitespace (width, tab_width):

	if width &lt;= 0:
		return ""
	if tab_width &gt; 1:
		tabs   = width / tab_width
		blanks = width % tab_width
		return ('\t' * tabs) + (' ' * blanks)
	else: # 7/3/02: negative tab width always gets converted to blanks.
		return (' ' * width)</t>
<t tx="T492"># Returns the width of s, assuming s starts a line, with indicated tab_width.

def computeWidth (s, tab_width):
		
	w = 0
	for ch in s:
		if ch == '\t':
			w += (abs(tab_width) - (w % abs(tab_width)))
		else:
			w += 1
	return w</t>
<t tx="T493"># Optimize leading whitespace in s with the given tab_width.

def optimizeLeadingWhitespace (line,tab_width):

	i, width = skip_leading_ws_with_indent(line,0,tab_width)
	s = computeLeadingWhitespace(width,tab_width) + line[i:]
	return s</t>
<t tx="T494"># Remove whitespace up to first_ws wide in s, given tab_width, the width of a tab.

def removeLeadingWhitespace (s,first_ws,tab_width):

	j = 0 ; ws = 0
	for ch in s:
		if ws &gt;= first_ws:
			break
		elif ch == ' ':
			j += 1 ; ws += 1
		elif ch == '\t':
			j += 1 ; ws += (abs(tab_width) - (ws % abs(tab_width)))
		else: break
	if j &gt; 0:
		s = s[j:]
	return s</t>
<t tx="T495"># Warning: string.rstrip also removes newlines!

def removeTrailingWs(s):

	j = len(s)-1
	while j &gt;= 0 and (s[j] == ' ' or s[j] == '\t'):
		j -= 1
	return s[:j+1]
</t>
<t tx="T496"># Skips leading up to width leading whitespace.

def skip_leading_ws(s,i,ws,tab_width):

	count = 0
	while count &lt; ws and i &lt; len(s):
		ch = s[i]
		if ch == ' ':
			count += 1
			i += 1
		elif ch == '\t':
			count += (abs(tab_width) - (count % abs(tab_width)))
			i += 1
		else: break

	return i</t>
<t tx="T497">@ Skips leading whitespace and returns (i, indent), where i points after the whitespace and indent is the width of the whitespace, assuming tab_width wide tabs.
@c

def skip_leading_ws_with_indent(s,i,tab_width):

	count = 0 ; n = len(s)
	while i &lt; n:
		ch = s[i]
		if ch == ' ':
			count += 1
			i += 1
		elif ch == '\t':
			count += (abs(tab_width) - (count % abs(tab_width)))
			i += 1
		else: break

	return i, count</t>
<t tx="T498">def convertAllBlanks (self):
	
	c = self ; v = current = c.currentVnode()
	next = v.nodeAfterTree()
	while v and v != next:
		if v == current:
			c.convertBlanks()
		else:
			result = [] ; changed = false
			text = v.t.bodyString
			lines = string.split(text, '\n')
			for line in lines:
				s = optimizeLeadingWhitespace(line,c.tab_width)
				if s != line: changed = true
				result.append(s)
			if changed:
				result = string.join(result,'\n')
				v.t.setTnodeText(result)
		v.setDirty()
		v = v.threadNext()</t>
<t tx="T499">def convertAllTabs (self):

	c = self ; v = current = c.currentVnode()
	next = v.nodeAfterTree()
	while v and v != next:
		if v == current:
			self.convertTabs()
		else:
			result = [] ; changed = false
			text = v.t.bodyString
			lines = string.split(text, '\n')
			for line in lines:
				i,w = skip_leading_ws_with_indent(line,0,c.tab_width)
				s = computeLeadingWhitespace(w,-abs(c.tab_width)) + line[i:] # use negative width.
				if s != line: changed = true
				result.append(s)
			if changed:
				result = string.join(result,'\n')
				v.t.setTnodeText(result)
		v.setDirty()
		v = v.threadNext()</t>
<t tx="T500">def convertTabs (self):

	c = self
	head, lines, tail = self.getBodyLines()
	result = [] ; changed = false
	for line in lines:
		i,w = skip_leading_ws_with_indent(line,0,c.tab_width)
		s = computeLeadingWhitespace(w,-abs(c.tab_width)) + line[i:] # use negative width.
		if s != line: changed = true
		result.append(s)
	if changed:
		result = string.join(result,'\n')
		c.updateBodyPane(head,result,tail,"Convert Tabs")
		setTextSelection(c.body,"1.0","1.0")</t>
<t tx="T501">def convertBlanks (self):

	c = self ; v = current = c.currentVnode()
	head, lines, tail = c.getBodyLines()
	result = [] ; changed = false
	for line in lines:
		s = optimizeLeadingWhitespace(line,c.tab_width)
		if s != line: changed = true
		result.append(s)
	if changed:
		result = string.join(result,'\n')
		c.updateBodyPane(head,result,tail,"Convert Blanks")
		setTextSelection(c.body,"1.0","1.0")</t>
<t tx="T502">@color

Exception in Tkinter callback
Traceback (most recent call last):
  File "leoFrame.py", line 1570, in OnOutlineToNoweb
    c.importCommands.outlineToWeb(fileName,"noweb")
  File "leoImport.py", line 2085, in outlineToWeb
    s = self.convertVnodeToWeb(v)
  File "leoImport.py", line 1999, in convertVnodeToWeb
    assert(progress &lt; i)
AssertionError</t>
<t tx="T503">@ This code converts a vnode to noweb text as follows:

Convert @doc to @
Convert @root or @code to &lt;&lt; name &gt;&gt;=, assuming the headline contains &lt;&lt; name &gt;&gt;
Ignore other directives
Format doc parts so they fit in pagewidth columns.
Output code parts as is.
@c

def convertVnodeToWeb (self,v):

	if not v: return ""
	s = v.bodyString()
	lb = choose(self.webType=="cweb","@&lt;","&lt;&lt;")
	i = 0 ; result = "" ; docSeen = false
	while i &lt; len(s):
		progress = i
		# line = get_line(s,i) ; trace(`line`)
		i = skip_ws_and_nl(s,i)
		if self.isDocStart(s,i) or match_word(s,i,"@doc"):
			i,result = self.convertDocPartToWeb(s,i,result)
			docSeen = true
		elif (match_word(s,i,"@code") or match_word(s,i,"@root") or
			match_word(s,i,"@c") or match(s,i,lb)):
			&lt;&lt; Supply a missing doc part &gt;&gt;
			i,result = self.convertCodePartToWeb(s,i,v,result)
		elif self.treeType == "@file":
			&lt;&lt; Supply a missing doc part &gt;&gt;
			i,result = self.convertCodePartToWeb(s,i,v,result)
		else:
			i,result = self.convertDocPartToWeb(s,i,result)
			docSeen = true
		assert(progress &lt; i)
	result = string.strip(result)
	if len(result) &gt; 0:
		result += "\n"
	return result</t>
<t tx="T504">if not docSeen:
	docSeen = true
	result += choose(self.webType=="cweb","\n@ ","\n@\n")</t>
<t tx="T505"># Copies characters to result until the end of the present section is seen.

def copyPart (self,s,i,result):

	# line = get_line(s,i) ; trace(`line`)
	lb = choose(self.webType=="cweb","@&lt;","&lt;&lt;")
	rb = choose(self.webType=="cweb","@&gt;","&gt;&gt;")
	type = self.webType
	while i &lt; len(s):
		progress = j = i # We should be at the start of a line here.
		# line = get_line(s,i) ; trace(`line`)
		i = skip_nl(s,i) ; i = skip_ws(s,i)
		if self.isDocStart(s,i):
			return i, result
		if match_word(s,i,"@doc") or match_word(s,i,"@c") or match_word(s,i,"@root"):
			return i, result
		elif (match(s,i,"&lt;&lt;") and # must be on separate lines.
			find_on_line(s,i,"&gt;&gt;=") &gt; -1):
			return i, result
		else:
			# Copy the entire line, escaping '@' and
			# Converting @others to &lt; &lt; @ others &gt; &gt;
			i = skip_line(s,j) ; line = s[j:i]
			if type == "cweb":
				line = string.replace(line,"@","@@")
			else:
				j = skip_ws(line,0)
				if match(line,j,"@others"):
					line = string.replace(line,"@others",lb + "@others" + rb)
				elif match(line,0,"@"):
					# Special case: do not escape @ %defs.
					k = skip_ws(line,1)
					if not match(line,k,"%defs"):
						line = "@" + line
			result += line
		assert(progress &lt; i)
	return i, string.rstrip(result)</t>
<t tx="T506">def OnSelectAll(self,event=None):

	setTextSelection(self.body,"1.0","end")
	return "break" # inhibit further command processing</t>
<t tx="T507">def __init__(self, title = None):

	Tk = Tkinter
	&lt;&lt; set the LeoFrame ivars &gt;&gt;
	self.top = top = Tk.Toplevel()
	if sys.platform=="win32":
		self.hwnd = top.frame()
		# trace("__init__", "frame.__init__: self.hwnd:" + `self.hwnd`)
	top.title(title)
	top.minsize(30,10) # This doesn't work as I expect.
	g = "+%d%+d" % (30, 30)
	top.geometry(g)
	c = None # Make sure we don't mess with c yet.
	self.createBothLeoSplitters(top)
	self.commands = c = leoCommands.Commands(self)
	self.tree = leoTree.leoTree(self.commands, self.canvas)
	c.tree = self.tree
	self.setTabWidth(c.tab_width)
	&lt;&lt; create the first tree node &gt;&gt;
	self.createMenuBar(top)
	self.createAccelerators(top)
	app().log = self # the LeoFrame containing the log
	app().windowList.append(self)
	es("Leo Log Window...") ; enl()

	self.top.protocol("WM_DELETE_WINDOW", self.OnCloseLeoEvent)
	self.top.bind("&lt;Button-1&gt;", self.OnActivateLeoEvent)
	self.tree.canvas.bind("&lt;Button-1&gt;", self.OnActivateTree)
	self.body.bind("&lt;Button-1&gt;", self.OnActivateBody)
	self.body.bind("&lt;Double-Button-1&gt;", self.OnBodyDoubleClick)
	self.log.bind("&lt;Button-1&gt;", self.OnActivateLog)
	self.body.bind("&lt;Key&gt;", self.tree.OnBodyKey)
	# self.body.bind("&lt;Control-d&gt;", self.OnMoveDown) # Makes control-d problem worse!!
	self.body.bind(virtual_event_name("Cut"), self.OnCut)
	self.body.bind(virtual_event_name("Copy"), self.OnCopy)
	self.body.bind(virtual_event_name("Paste"), self.OnPaste)</t>
<t tx="T508"># Set title and fileName
if title:
	self.mFileName = title
else:
	title = "untitled"
	n = app().numberOfWindows
	if n &gt; 0: title += `n`
	app().numberOfWindows = n+1
	self.mFileName = ""
	
self.outlineToNowebDefaultFileName = "noweb.nw" # For Outline To Noweb dialog.

self.title=title # Title of window, not including dirty mark
self.saved=false # True if ever saved
self.startupWindow=false # True if initially opened window
self.openDirectory = ""
self.splitVerticalFlag = true # True: main paines split vertically (horizontal main splitter)
self.ratio = 0.5 # Ratio of body pane to tree pane.
self.es_newlines = 0 # newline count for this log stream

# Created below
self.commands = None

self.tree = None 

self.f1 = self.f2 = None
self.log = None  ; self.logBar = None
self.body = None ; self.bodyBar = None
self.canvas = None ; self.treeBar = None
self.splitter1 = self.splitter2 = None

# Menu bars
self.topMenu = self.fileMenu = self.editMenu = None
self.outlineMenu = self.windowMenu = self.helpMenu = None
# Submenus
self.editBodyMenu = self.moveSelectMenu = self.markGotoMenu = None

# Used by event handlers...
self.redrawCount = 0
self.activeFrame = None
self.draggedItem = None
self.recentFiles = [] # List of recent files</t>
<t tx="T509">t = leoNodes.tnode()
v = leoNodes.vnode(c,t)
v.initHeadString("NewHeadline")
v.moveToRoot()
c.tree.redraw()
c.tree.canvas.focus_get()
c.editVnode(v)</t>
<t tx="T510">def OnPaste (self,event=None):

	# Activate the body key handler by hand.
	c = self.commands ; v = c.currentVnode()
	self.commands.tree.onBodyWillChange(v,"Paste")
	return # Allow the actual paste!
	
def OnPasteNode (self,event=None):

	# trace(`event`)
	return "break" # inhibit further command processing ??
	
def OnPasteFromMenu (self,event=None):

	# trace()
	w = self.getFocus()
	w.event_generate(virtual_event_name("Paste"))</t>
<t tx="T511">def OnCopy (self,event=None):

	# Copy never changes dirty bits or syntax coloring.
	
	# Copy the selection to the internal clipboard.
	if 0: # no longer needed.
		app().clipboard = getSelectedText(self.body)
		# trace(`app().clipboard`)
	return # Allow the actual copy!
	
def OnCopyFromMenu (self,event=None):

	trace()
	w = self.getFocus()
	w.event_generate(virtual_event_name("Copy"))</t>
<t tx="T512">def OnCut (self,event=None):

	# Activate the body key handler by hand.
	c = self.commands ; v = c.currentVnode()
	self.commands.tree.onBodyWillChange(v,"Cut")
	
	# Copy the selection to the internal clipboard.
	if 0: # no longer needed.
		app().clipboard = getSelectedText(self.body)
		# trace(`app().clipboard`)
	return # Allow the actual cut!

def OnCutFromMenu (self,event=None):

	w = self.getFocus()
	w.event_generate(virtual_event_name("Cut"))</t>
<t tx="T513">def canPasteOutline (self,s=None):

	c = self
	if s == None:
		try:
			s = app().root.selection_get(selection="CLIPBOARD")
		except:
			return false

	# trace(`s`)
	if len(s) &gt;= len(prolog_string) and s[0:len(prolog_string)] == prolog_string:
		return true
	elif len(s) &gt; 0:
		return c.importCommands.stringIsValidMoreFile(s)
	else:
		return false</t>
<t tx="T514"></t>
<t tx="T515">def cutOutline(self):

	c = self
	if c.canDeleteHeadline():
		c.copyOutline()
		c.deleteHeadline("Cut Node")
		c.recolor()</t>
<t tx="T516">def copyOutline(self):

	c = self
	c.endEditing()
	c.fileCommands.assignFileIndices()
	s = c.fileCommands.putLeoOutline()
	# trace(`s`)
	app().root.clipboard_clear()
	app().root.clipboard_append(s)
	# Copying an outline has no undo consequences.
</t>
<t tx="T517">@ To cut and paste between apps, just copy into an empty body first, then copy to Leo's clipboard.
@c

def pasteOutline(self):

	c = self ; current = c.currentVnode()
	
	try:
		s = app().root.selection_get(selection="CLIPBOARD")
	except:
		s = None # This should never happen.

	if not s or not c.canPasteOutline(s):
		return # This should never happen.

	isLeo = len(s)&gt;=len(prolog_string) and prolog_string==s[0:len(prolog_string)]

	# trace(`s`)
	if isLeo:
		v = c.fileCommands.getLeoOutline(s)
	else:
		v = c.importCommands.convertMoreStringToOutlineAfter(s,current)
	if v:
		c.endEditing()
		c.beginUpdate()
		if 1: # inside update...
			v.createDependents()# To handle effects of clones.
			c.validateOutline()
			c.selectVnode(v)
			v.setDirty()
			c.setChanged(true)
			# paste as first child if back is expanded.
			back = v.back()
			if back and back.isExpanded():
				v.moveToNthChildOf(back,0)
			c.undoer.setUndoParams("Paste Node",v)
		c.endUpdate()
		c.recolor()
	else:
		es("The clipboard is not a valid " + choose(isLeo,"Leo","MORE") + " file")</t>
<t tx="T518"></t>
<t tx="T519"># t is a Tk.Text widget.  Returns the selected range of t.

def getTextSelection (t):

	# To get the current selection
	sel = t.tag_ranges("sel")
	if len(sel) == 2:
		start, end = sel # unpack tuple.
		return start, end
	else: return None, None</t>
<t tx="T520"># t is a Tk.Text widget.  Returns the text of the selected range of t.

def getSelectedText (t):

	start, end = getTextSelection(t)
	if start and end:
		return t.get(start,end)
	else:
		return None</t>
<t tx="T521">@ t is a Tk.Text widget.  start and end are positions.  Selects from start to end.
@c

def setTextSelection (t,start,end): 

	if not start or not end:
		return
	if t.compare(start, "&gt;", end):
		start,end = end,start
		
	t.tag_remove("sel","1.0",start)
	t.tag_add("sel",start,end)
	t.tag_remove("sel",end,"end")
	t.mark_set("insert",end)</t>
<t tx="T522"># Used by paste logic.

def stringIsValidMoreFile (self,s):
	
	s = string.replace(s,"\r","")
	strings = string.split(s,"\n")
	return self.stringsAreValidMoreFile(strings)

def stringsAreValidMoreFile (self,strings):

	if len(strings) &lt; 1: return false
	level1, plusFlag = self.moreHeadlineLevel(strings[0])
	if level1 == -1: return false
	# Check the level of all headlines.
	i = 0 ; 	lastLevel = level1
	while i &lt; len(strings):
		s = strings[i] ; i += 1
		level, newFlag = self.moreHeadlineLevel(s)
		if level &gt; 0:
			if level &lt; level1 or level &gt; lastLevel + 1:
				return false # improper level.
			elif level &gt; lastLevel and plusFlag == false:
				return false # parent of this node has no children.
			elif level == lastLevel and plusFlag == true:
				return false # last node has missing child.
			else:
				lastLevel = level
				plusFlag = newFlag
	return true</t>
<t tx="T523"># Used by paste logic.

def convertMoreStringToOutlineAfter (self,s,firstVnode):
	s = string.replace(s,"\r","")
	strings = string.split(s,"\n")
	return self.convertMoreStringsToOutlineAfter(strings,firstVnode)

# Almost all the time spent in this command is spent here.

def convertMoreStringsToOutlineAfter (self,strings,firstVnode):

	c = self.commands
	if len(strings) == 0: return None
	if not self.stringsAreValidMoreFile(strings): return None
	c.beginUpdate()
	firstLevel, junk = self.moreHeadlineLevel(strings[0])
	lastLevel = -1 ; theRoot = lastVnode = None
	index = 0
	while index &lt; len(strings):
		progress = index
		s = strings[index]
		level, newFlag = self.moreHeadlineLevel(s)
		level -= firstLevel
		if level &gt;= 0:
			&lt;&lt; Link a new vnode v into the outline &gt;&gt;
			&lt;&lt; Set the headline string, skipping over the leader &gt;&gt;
			&lt;&lt; Count the number of following body lines &gt;&gt;
			&lt;&lt; Add the lines to the body text of v &gt;&gt;
			v.setDirty()
		else: index += 1
		assert progress &lt; index
	if theRoot:
		theRoot.setDirty()
		c.setChanged(true)
	c.endUpdate()
	return theRoot</t>
<t tx="T524">assert(level &gt;= 0)
if not lastVnode:
	theRoot = v = firstVnode.insertAfter()
elif level == lastLevel:
	v = lastVnode.insertAfter()
elif level == lastLevel + 1:
	v = lastVnode.insertAsNthChild(0)
else:
	assert(level &lt; lastLevel)
	while level &lt; lastLevel:
		lastLevel -= 1
		lastVnode = lastVnode.parent()
		assert(lastVnode)
		assert(lastLevel &gt;= 0)
	v = lastVnode.insertAfter()
lastVnode = v
lastLevel = level</t>
<t tx="T525">j = 0
while match(s,j,'\t'):
	j += 1
if match(s,j,"+ ") or match(s,j,"- "):
	j += 2

v.initHeadString(s[j:])</t>
<t tx="T526">bodyLines = 0
index += 1 # Skip the headline.
while index &lt; len(strings):
	s = strings[index]
	level, junk = self.moreHeadlineLevel(s)
	level -= firstLevel
	if level &gt;= 0:
		break
	# Remove first backslash of the body line.
	if match(s,0,'\\'):
		strings[index] = s[1:]
	bodyLines += 1
	index += 1</t>
<t tx="T527">if bodyLines &gt; 0:
	body = ""
	n = index - bodyLines
	while n &lt; index:
		body += strings[n]
		if n != index - 1:
			body += "\n"
		n += 1
	v.t.setTnodeText(body)</t>
<t tx="T528">@color

I used SciTE to open a .htm file I made with MS Word and Front Page.  I
selected a buncha text, copied and pasted into the Leo text window in a doc
chunk.  The star came on in the (Leo) title bar indicating the file had been
altered.  I pulled down File | Save and the * didn't go away.  The command
window shows:

Exception in Tkinter callback
Traceback (most recent call last):
  File "C:\Python22\lib\lib-tk\Tkinter.py", line 1292, in __call__
    return apply(self.func, args)
  File "C:\downloads\Leo\Leo-2.7beta\leo-2.7beta\leoFrame.py", line 1175, in OnSave
    c.fileCommands.save(self.mFileName)
  File "C:\downloads\Leo\Leo-2.7beta\leo-2.7beta\leoFileCommands.py", line 1346, in save
    if self.write_LEO_file(fileName,false): # outlineOnlyFlag
  File "C:\downloads\Leo\Leo-2.7beta\leo-2.7beta\leoFileCommands.py", line 1423, in write_LEO_file
    at.writeAll(c.rootVnode(), false) # forceFlag
  File "C:\downloads\Leo\Leo-2.7beta\leo-2.7beta\leoAtFile.py", line 2203, in writeAll
    self.write(v)
  File "C:\downloads\Leo\Leo-2.7beta\leo-2.7beta\leoAtFile.py", line 2108, in write
    self.putBodyPart(root)
  File "C:\downloads\Leo\Leo-2.7beta\leo-2.7beta\leoAtFile.py", line 1663, in putBodyPart
    i = self.putCodePart(s,i,v)
  File "C:\downloads\Leo\Leo-2.7beta\leo-2.7beta\leoAtFile.py", line 1755, in putCodePart
    self.putRef(name,v,s,j,delta)
  File "C:\downloads\Leo\Leo-2.7beta\leo-2.7beta\leoAtFile.py", line 1859, in putRef
    self.putBody(v, ref)
  File "C:\downloads\Leo\Leo-2.7beta\leo-2.7beta\leoAtFile.py", line 1627, in putBody
    self.putBodyPart(v)
  File "C:\downloads\Leo\Leo-2.7beta\leo-2.7beta\leoAtFile.py", line 1663, in putBodyPart
    i = self.putCodePart(s,i,v)
  File "C:\downloads\Leo\Leo-2.7beta\leo-2.7beta\leoAtFile.py", line 1755, in putCodePart
    self.putRef(name,v,s,j,delta)
  File "C:\downloads\Leo\Leo-2.7beta\leo-2.7beta\leoAtFile.py", line 1859, in putRef
    self.putBody(v, ref)
  File "C:\downloads\Leo\Leo-2.7beta\leo-2.7beta\leoAtFile.py", line 1627, in putBody
    self.putBodyPart(v)
  File "C:\downloads\Leo\Leo-2.7beta\leo-2.7beta\leoAtFile.py", line 1656, in putBodyPart
    i = self.putDoc(s,i,kind)
  File "C:\downloads\Leo\Leo-2.7beta\leo-2.7beta\leoAtFile.py", line 1938, in putDoc
    self.putDocPart(s[i:j])
  File "C:\downloads\Leo\Leo-2.7beta\leo-2.7beta\leoAtFile.py", line 1998, in putDocPart
    self.os(theLine)
  File "C:\downloads\Leo\Leo-2.7beta\leo-2.7beta\leoAtFile.py", line 1610, in os

    self.outputFile.write(s)
UnicodeError: ASCII encoding error: ordinal not in range(128)</t>
<t tx="T529">def oblank(self):
	self.os(' ')

def oblanks(self,n):
	self.os(' ' * n)

def onl(self):
	self.os("\n")

def os(self,s):
	if s is None or len(s) == 0: return
	if self.suppress_newlines and self.newline_pending:
		self.newline_pending = false
		s = "\n" + s
	if self.outputFile:
		self.outputFile.write(s)

def otabs(self,n):
	self.os('\t' * n)</t>
<t tx="T530"># Puts a comment part in comments.

def putDocPart(self,s):

	# j = skip_line(s,0) ; trace(`s[:j]`)
	c = self.commands
	single = len(self.endSentinelComment) == 0
	if not single:
		self.putIndent(self.indent)
		self.os(self.startSentinelComment) ; self.onl()
	# Put all lines.
	i = 0 ; n = len(s)
	while i &lt; n:
		self.putIndent(self.indent)
		leading = self.indent
		if single:
			self.os(self.startSentinelComment) ; self.oblank()
			leading += len(self.startSentinelComment) + 1
		&lt;&lt; copy words, splitting the line if needed &gt;&gt;
	if not single:
		# This comment is like a sentinel.
		self.onl() ; self.putIndent(self.indent)
		self.os(self.endSentinelComment)
		self.onl() # Note: no trailing whitespace.</t>
<t tx="T531">@ We remove trailing whitespace from lines that have _not_ been split so that a newline has been inserted by this routine if and only if it is preceded by whitespace.
@c

line = i # Start of the current line.
while i &lt; n:
	word = i # Start of the current word.
	# Skip the next word and trailing whitespace.
	i = skip_ws(s, i)
	while i &lt; n and not is_nl(s,i) and not is_ws(s[i]):
		i += 1
	i = skip_ws(s,i)
	# Output the line if no more is left.
	if i &lt; n and is_nl(s,i):
		break
	# Split the line before the current word if needed.
	lineLen = i - line
	if line == word or leading + lineLen &lt; self.page_width:
		word = i # Advance to the next word.
	else:
		# Write the line before the current word and insert a newline.
		theLine = s[line:word]
		self.os(theLine)
		self.onl() # This line must contain trailing whitespace.
		line = i = word  # Put word on the next line.
		break
# Remove trailing whitespace and output the remainder of the line.
theLine = string.rstrip(s[line:i]) # from right.
self.os(theLine)
if i &lt; n and is_nl(s,i):
	i = skip_nl(s,i)
	self.onl() # No inserted newline and no trailing whitespace.</t>
<t tx="T532">def canRevert (self):

	# c.mFileName will be "untitled" for unsaved files.
	c = self
	return (c.frame and c.frame.mFileName and
		len(c.frame.mFileName) &gt; 0 and c.isChanged())</t>
<t tx="T533">def OnRevert(self,event=None):

	# Make sure the user wants to Revert.
	if not self.mFileName:
		self.mFileName = ""
	if len(self.mFileName)==0:
		return "break" # inhibit further command processing
	
	d = leoDialog.leoDialog()
	reply = d.askYesNo("Revert",
		"Revert to previous version of " + self.mFileName + "?")

	if reply=="no":
		return "break" # inhibit further command processing

	# Kludge: rename this frame so OpenWithFileName won't think it is open.
	fileName = self.mFileName ; self.mFileName = ""

	# Create a new frame before deleting this frame.
	ok, frame = self.OpenWithFileName(fileName)
	if ok:
		frame.top.deiconify()
		app().windowList.remove(self)
		self.destroy() # Destroy this frame.
	else:
		self.mFileName = fileName
	return "break" # inhibit further command processing</t>
<t tx="T534">def OnDelete(self,event=None):

	c = self.commands ; v = c.currentVnode()
	first, last = getTextSelection(self.body)
	if first and last:
		self.body.delete(first,last)
		c.tree.onBodyChanged(v,"Delete")
	return "break" # inhibit further command processing</t>
<t tx="T535">@ignore
@nocolor

The trickiest part of the edit body commands is undo.  The undoReplace and c.copyTree routines show how undo can be done in general.

@color</t>
<t tx="T536"># This creates a free-floating copy of v's tree for undo.
# The copied trees must use different tnodes than the original.

def copyTree(self,root):

	c = self
	# Create the root vnode.
	result = v = leoNodes.vnode(c,root.t)
	# Copy the headline and icon values
	v.copyNode(root,v)
	# Copy the rest of tree.
	v.copyTree(root,v)
	# Replace all tnodes in v by copies.
	assert(v.nodeAfterTree() == None)
	while v:
		v.t = leoNodes.tnode(0, v.t.bodyString)
		v = v.threadNext()
	return result</t>
<t tx="T537">@ This routine implements undo by properly replacing v's tree by the oldv tree.  For redo, just call this routine with these two variables interchanged.

This routine shows how to implement undo for any kind of operation, no matter how complex.  Just do:

	v_copy = c.copyTree(v)
	&lt; &lt; make arbitrary changes to v's tree &gt; &gt;
	c.undoer.setUndoParams("Op Name",v,select=current,oldTree=v_copy)

This way is far more elegant than calling v.destroyDependents and v.createDependents.  This is the way it is written in "The Book." Yes, entire trees are copied, but in the most general case that is necessary.
@c

def undoReplace (self,v,oldv):

	assert(v)
	assert(oldv)
	u = self ; c = u.commands
	j = v.joinList
	copies = []

	# For each node joined to v, swap in a copy of oldv.
	while j and j != v:
		nextj = j.joinList
		copy = c.copyTree(oldv)
		copies.append(copy)
		j.swap_links(copy,j)
		j = nextj

	# Swap v and oldv.
	v.swap_links(oldv,v)
	v = oldv
	
	# Join v to all copies.
	for copy in copies:
		v.joinTreeTo(copy)
		
	# Restore all clone bits.
	if v.shouldBeClone():
		v.setClonedBit()
	c.initAllCloneBits()</t>
<t tx="T538">@ This function and its allies undo the operation described by the undo parmaters.
@c

def undo (self):

	u = self ; c = u.commands
	if not u.canUndo(): return
	if not u.getBead(u.bead): return
	current = c.currentVnode()
	if not current: return
	# trace(`u.bead` + ":" + `len(u.beads)` + ":" + `u.peekBead(u.bead)`)
	c.endEditing()# Make sure we capture the headline for a redo.
	u.undoing = true
	c.beginUpdate()
	type = u.undoType
	if 1: # range...
		&lt;&lt; undo clone cases &gt;&gt;
		&lt;&lt; undo delete cases &gt;&gt;
		&lt;&lt; undo insert cases &gt;&gt;
		&lt;&lt; undo move &amp; drag cases &gt;&gt;
		&lt;&lt; undo promote and demote cases &gt;&gt;
		&lt;&lt; undo replace cases &gt;&gt;
		&lt;&lt; undo sort cases &gt;&gt;
		&lt;&lt; undo typing cases &gt;&gt;
		else: trace("Unknown case: " + `u.undoType`)
		c.setChanged(true)
		if u.v: u.v.setDirty()
	c.endUpdate()
	u.undoing = false
	u.bead -= 1
	u.setUndoTypes()</t>
<t tx="T539"># We can immediately delete the clone because clone() can recreate it using only v.

if type == "Clone":
	
	c.selectVnode(u.v)
	c.deleteHeadline()
	c.selectVnode(u.back)</t>
<t tx="T540">@ Deleting a clone is _not_ the same as undoing a clone: the clone may have been moved, so there is no necessary relationship between the two nodes.
@c

elif type == "Delete Outline" or type == "Cut Node":
	
	if u.back:
		u.v.linkAfter(u.back)
	elif u.parent:
		u.v.linkAsNthChild(u.parent,0)
	else:
		u.v.linkAsRoot()
	shared = u.findSharedVnode(u.v)
	if shared: u.v.joinTreeTo(shared)
	u.v.createDependents()
	if u.v.shouldBeClone():
		u.v.setClonedBit()
	c.initAllCloneBits()
	c.selectVnode(u.v)</t>
<t tx="T541">elif type in ["Import", "Insert Outline", "Paste Node"]:
	
	c.selectVnode(u.v)
	c.deleteHeadline()
	if u.select:
		# trace("Insert/Paste:" + `u.select`)
		c.selectVnode(u.select)</t>
<t tx="T542">elif type in ["Drag", "Move Down","Move Left","Move Right","Move Up"]:

	if u.oldParent:
		u.v.moveToNthChildOf(u.oldParent,u.oldN)
	elif u.oldBack:
		u.v.moveAfter(u.oldBack)
	else:
		# 3/16/02: Moving up is the only case that can do this.
		parent = u.v.parent()
		u.v.moveToRoot(c.tree.rootVnode) # 5/27/02
		if parent: # We could assert(parent)
			parent.moveAfter(u.v)
	
	c.initJoinedCloneBits(u.v) # 7/6/02
	c.selectVnode(u.v)</t>
<t tx="T543">@ Promote and demote operations are the hard to undo, because they involve relinking a list of nodes. We pass the work off to routines dedicated to the task.
@c

elif type == "Demote":

	u.undoDemote()

elif type == "Promote":
	
	u.undoPromote()</t>
<t tx="T544">elif type in ["Extract", "Extract Names", "Extract Section"]:
	
	self.undoReplace(u.v,u.oldTree)
	u.v,u.oldTree = u.oldTree,u.v
	
	v = u.v
	c.selectVnode(v)
	v.setBodyStringOrPane(v.bodyString())
	c.tree.recolor(v)</t>
<t tx="T545">@ Sort operations are the hard to undo, because they involve relinking a list of nodes. We pass the work off to routines dedicated to the task.
@c

elif type == "Sort Children":
	
	u.undoSortChildren()

elif type == "Sort Siblings":
	
	u.undoSortSiblings()</t>
<t tx="T546">elif type in [
	"Typing","Change","Cut","Paste","Delete",
	"Convert Blanks","Indent","Undent"]:

	# trace(`type` + ":" + `u.v`)
	c.selectVnode(u.v)
	u.v.setBodyStringOrPane(u.oldText)
	c.tree.recolor(u.v)
	if u.oldSel:
		c.body.mark_set("insert",u.oldSel)
		c.body.see(u.oldSel)
		
elif type == "Change All":

	while 1:
		u.bead -= 1
		d = u.getBead(u.bead)
		assert(d)
		type = u.undoType
		# trace(`type`)
		if type == "Change All":
			c.selectVnode(u.v)
			break
		elif type == "Change":
			u.v.t.setTnodeText(u.oldText)
			u.v.setDirty()
		elif type == "Change Headline":
			u.v.initHeadString(u.oldText)
		else: assert(false)
		
elif type == "Change Headline":
	
	# trace(`u.oldText`)
	u.v.setHeadStringOrHeadline(u.oldText)
	c.selectVnode(u.v)</t>
<t tx="T547">def redo (self):
	
	u = self ; c = u.commands
	if not u.canRedo(): return
	if not u.getBead(u.bead+1): return
	current = c.currentVnode()
	if not current: return
	# trace(`u.bead+1` + ":" + `len(u.beads)` + ":" + `u.peekBead(u.bead+1)`)
	u.redoing = true
	c.beginUpdate()
	type = u.undoType # Use the type of the next bead.
	if 1: # range...
		&lt;&lt; redo clone cases &gt;&gt;
		&lt;&lt; redo insert cases &gt;&gt;
		&lt;&lt; redo delete cases &gt;&gt;
		&lt;&lt; redo move &amp; drag cases &gt;&gt;
		&lt;&lt; redo promote and demote cases &gt;&gt;
		&lt;&lt; redo replace cases &gt;&gt;
		&lt;&lt; redo sort cases &gt;&gt;
		&lt;&lt; redo typing cases &gt;&gt;
		else: trace("Unknown case: " + `type`)
		c.setChanged(true)
		if u.v: u.v.setDirty()
	c.endUpdate()
	u.redoing = false
	u.bead += 1
	u.setUndoTypes()</t>
<t tx="T548">if type == "Clone":

	if u.back:
		u.v.linkAfter(u.back)
	elif u.parent:
		u.v.linkAsNthChild(u.parent,0)
	else:
		u.v.linkAsRoot()

	shared = u.findSharedVnode(u.v)
	if shared: u.v.joinTreeTo(shared)
	u.v.createDependents()
	if u.v.shouldBeClone():
		u.v.setClonedBit()
	c.initAllCloneBits()
	c.selectVnode(u.v)</t>
<t tx="T549">elif type == "Delete Outline" or type == "Cut Node":

	c.selectVnode(u.v)
	c.deleteHeadline()</t>
<t tx="T550">elif type in ["Import", "Insert Outline", "Paste Node"]:

	if u.back:
		u.v.linkAfter(u.back)
	elif u.parent:
		u.v.linkAsNthChild(u.parent,0)
	else:
		u.v.linkAsRoot()

	shared = u.findSharedVnode(u.v)
	if shared: u.v.joinTreeTo(shared)
	u.v.createDependents()
	if u.v.shouldBeClone():
		u.v.setClonedBit()
	c.initAllCloneBits()
	c.selectVnode(u.v)</t>
<t tx="T551">elif type in ["Drag","Move Down","Move Left","Move Right","Move Up"]:

	if u.parent:
		u.v.moveToNthChildOf(u.parent,u.n)
	elif u.back:
		u.v.moveAfter(u.back)
	else:
		# 3/16/02: Moving up is the only case that can do this.
		parent = u.v.parent()
		u.v.moveToRoot(c.tree.rootVnode) # 5/27/02
		if parent: # We could assert(parent)
			parent.moveAfter(u.v)
	c.initJoinedCloneBits(u.v) # 7/6/02
	c.selectVnode(u.v)
	
elif type == "Drag":

	u.v.moveToNthChildOf(u.parent,u.n)
	c.initJoinedCloneBits(u.v) # 7/6/02
	c.selectVnode(u.v)</t>
<t tx="T552">elif type == "Demote":

	c.selectVnode(u.v)
	c.demote()
	
elif type == "Promote":

	c.selectVnode(u.v)
	c.promote()</t>
<t tx="T553">elif type in ["Extract", "Extract Names", "Extract Section"]:
	
	# Same as undo except we interchange u.oldTree and u.v in the call to undoReplace.
	self.undoReplace(u.oldTree,u.v)
	u.v,u.oldTree = u.oldTree,u.v
	
	v = u.oldTree
	c.selectVnode(v)
	v.setBodyStringOrPane(v.bodyString())
	c.tree.recolor(v)</t>
<t tx="T554">elif type == "Sort Children":

	c.selectVnode(u.v)
	c.sortChildren()

elif type == "Sort Siblings":

	c.selectVnode(u.v)
	c.sortSiblings()</t>
<t tx="T555">elif type in [
	"Typing","Change","Cut","Paste","Delete",
	"Convert Blanks","Indent","Undent"]:

	# trace(`type` + ":" + `u.v`)
	c.selectVnode(u.v)
	u.v.setBodyStringOrPane(u.newText)
	c.tree.recolor(u.v)
	if u.newSel:
		c.body.mark_set("insert",u.newSel)
		c.body.see(u.oldSel)
		
elif type == "Change All":

	while 1:
		u.bead += 1
		d = u.getBead(u.bead+1)
		assert(d)
		type = u.undoType
		# trace(`type`)
		if type == "Change All":
			c.selectVnode(u.v)
			break
		elif type == "Change":
			u.v.t.setTnodeText(u.newText)
			u.v.setDirty()
		elif type == "Change Headline":
			u.v.initHeadString(u.newText)
		else: assert(false)

elif type == "Change Headline":
	
	# trace(`u.newText`)
	u.v.setHeadStringOrHeadline(u.newText)
	c.selectVnode(u.v)</t>
<t tx="T556"># 7/5/02: New for undo.
# On entry, linked is linked into a tree and unlinked is not.
# On exit,  unlinked is linked into a tree and linked is not.

# Warning: caller is responsible for hanling join links properly.

def swap_links (self,unlinked,linked):

	assert(unlinked and linked)
	assert(unlinked.mParent == None)
	assert(unlinked.mBack == None)
	assert(unlinked.mNext == None)
	assert(unlinked.joinList == None)
	#print "swap_links:unlinked.last,linked.last",`unlinked.lastChild()`,`linked.lastChild()`

	# Copy links to unlinked.
	unlinked.mParent = linked.mParent
	unlinked.mBack = linked.mBack
	unlinked.mNext = linked.mNext
	# Caller is responsible for handling join links.
	unlinked.joinList = None 
	
	# Change links to linked from other nodes.
	if linked.mParent and linked.mParent.mFirstChild == linked:
		linked.mParent.mFirstChild = unlinked
	if linked.mBack:
		linked.mBack.mNext = unlinked
	if linked.mNext:
		linked.mNext.mBack = unlinked
		
	# Clear links in linked.
	linked.mParent = linked.mBack = linked.mNext = linked.joinList = None</t>
<t tx="T557">def __init__ (self, commands, t):

	assert(t and commands)
	&lt;&lt; initialize vnode data members &gt;&gt;
	if app().deleteOnClose:
		self.commands.tree.vnode_alloc_list.append(self)</t>
<t tx="T558">self.commands = commands # The commander for this vnode.
self.joinList = None # vnodes on the same joinlist are updated together.
self.t = t # The tnode, i.e., the body text.
self.statusBits = 0 # status bits
self.iconVal = -1 # The icon index.  -1 forces an update of icon.
self.mHeadString = "" # The headline text.

# Structure links
self.mParent = self.mFirstChild = self.mNext = self.mBack = None

# Canvas items.  Set by tree.redraw
self.iconx, self.icony = 0,0 # Coords of icon so icon can be redrawn separately.
self.edit_text = None # Essential: used by many parts of tree code.

if 1:
	self.icon_id = None # 6/15/02: Now cleared in __del__

if 0: # These links are harmful: they prevent old tree items from being recycled properly.
	self.box_id = None
	self.edit_text_id = None # The editable text field for this vnode.</t>
<t tx="T559">def insertAfter (self, t = None):

	"""Inserts a new vnode after the receiver"""

	if not t: t = tnode()
	v = vnode(self.commands,t)
	v.mHeadString = "NewHeadline"
	v.iconVal = 0
	v.linkAfter(self)
	return v</t>
<t tx="T560">def copyNode (self, old_node, new_node):

	new_node.mHeadString = old_node.mHeadString
	new_node.iconVal = old_node.iconVal</t>
<t tx="T561">@ This method copies all subtrees of oldRoot to the subtrees of newRoot.  The caller is responsible for copying the headline text from oldRoot to newRoot.

This method must be given the new root as well as the old:  the wxWindows classes do not allow us to create an unattached outline.
@c

def copyTree (self, oldTree, newTree):

	old_v = oldTree.firstChild()
	if not old_v: return
	# Copy the first child of oldTree to the first child of newTree.
	new_v = newTree.insertAsNthChild (0, old_v.t)
	self.copyNode(old_v, new_v)
	# Copy all other children of oldTree after the first child of newTree.
	old_v = old_v.next()
	while old_v:
		new_v = new_v.insertAfter(old_v.t)
		self.copyNode(old_v, new_v)
		old_v = old_v.next()
	# Recursively copy all descendents of oldTree.
	new_v = newTree.firstChild()
	old_v = oldTree.firstChild()
	while old_v:
		assert(new_v)
		self.copyTree(old_v, new_v)
		old_v = old_v.next()
		new_v = new_v.next()
	assert(new_v == None)</t>
<t tx="T562">def canExtract (self):

	c = self
	if c.body:
		i, j = getTextSelection(c.body)
		return i and j and c.body.compare(i, "!=", j)
	else:
		return false

canExtractSection = canExtract
canExtractSectionNames = canExtract</t>
<t tx="T563"></t>
<t tx="T564">def createLastChildNode (self,parent,headline,body):
	
	c = self
	if body and len(body) &gt; 0:
		body = string.rstrip(body)
	if not body or len(body) == 0:
		body = ""
	v = parent.insertAsLastChild()
	v.initHeadString(headline)
	v.t.setTnodeText(body)
	v.createDependents() # To handle effects of clones.
	v.setDirty()
	c.validateOutline()</t>
<t tx="T565">def dedentBody (self):

	c = self
	head, lines, tail = self.getBodyLines()
	result = [] ; changed = false
	for line in lines:
		i, width = skip_leading_ws_with_indent(line,0,c.tab_width)
		s = computeLeadingWhitespace(width-abs(c.tab_width),c.tab_width) + line[i:]
		if s != line: changed = true
		result.append(s)
	if changed:
		result = string.join(result,'\n')
		c.updateBodyPane(head,result,tail,"Undent")</t>
<t tx="T566">def extract(self):

	c = self ; current = v = c.currentVnode()
	head, lines, tail = self.getBodyLines()
	if not lines: return
	headline = lines[0] ; del lines[0]
	junk, ws = skip_leading_ws_with_indent(headline,0,c.tab_width)
	# Create copy for undo.
	v_copy = c.copyTree(v)
	&lt;&lt; Set headline for extract &gt;&gt;
	# Remove leading whitespace from all body lines.
	result = []
	for line in lines:
		# Remove the whitespace on the first line
		line = removeLeadingWhitespace(line,ws,c.tab_width)
		result.append(line)
	# Create a new node from lines.
	body = string.join(result,'\n')
	if head and len(head) &gt; 0:
		head = string.rstrip(head)
	c.beginUpdate()
	c.createLastChildNode(v,headline,body)
	c.updateBodyPane(head,None,tail,"Can't Undo")
	c.undoer.setUndoParams("Extract",v,select=current,oldTree=v_copy)
	c.endUpdate()</t>
<t tx="T567">headline = string.strip(headline)
while len(headline) &gt; 0 and headline[0] == '/':
	headline = headline[1:]
headline = string.strip(headline)</t>
<t tx="T568">def extractSection(self):

	c = self ; current = v = c.currentVnode()
	head, lines, tail = self.getBodyLines()
	if not lines: return
	headline = lines[0] ; del lines[0]
	junk, ws = skip_leading_ws_with_indent(headline,0,c.tab_width)
	line1 = "\n" + headline
	# Create copy for undo.
	v_copy = c.copyTree(v)
	&lt;&lt; Set headline for extractSection &gt;&gt;
	# Remove leading whitespace from all body lines.
	result = []
	for line in lines:
		# Remove the whitespace on the first line
		line = removeLeadingWhitespace(line,ws,c.tab_width)
		result.append(line)
	# Create a new node from lines.
	body = string.join(result,'\n')
	if head and len(head) &gt; 0:
		head = string.rstrip(head)
	c.beginUpdate()
	c.createLastChildNode(v,headline,body)
	c.updateBodyPane(head,line1,tail,"Can't Undo")
	c.undoer.setUndoParams("Extract Section",v,select=current,oldTree=v_copy)
	c.endUpdate()</t>
<t tx="T569">while len(headline) &gt; 0 and headline[0] == '/':
	headline = headline[1:]
headline = string.strip(headline)

# Make sure we have a @&lt; or &lt;&lt;
if headline[0:2] != '&lt;&lt;' and headline[0:2] != '@&lt;': return</t>
<t tx="T570">def extractSectionNames(self):

	c = self ; current = v = c.currentVnode()
	head, lines, tail = self.getBodyLines()
	if not lines: return
	# Save the selection.
	i, j = self.getBodySelection()
	# Create copy for undo.
	v_copy = c.copyTree(v)
	c.beginUpdate()
	for s in lines:
		&lt;&lt; Find the next section name &gt;&gt;
		if name: self.createLastChildNode(v,name,None)
	c.selectVnode(v)
	c.validateOutline()
	c.endUpdate()
	c.undoer.setUndoParams("Extract Names",v,select=current,oldTree=v_copy)
	#c.undoer.clearUndoState()
	# Restore the selection.
	setTextSelection(c.body,i,j)
	c.body.focus_force()</t>
<t tx="T571">head1 = string.find(s,"&lt;&lt;")
if head1 &gt; -1:
	head2 = string.find(s,"&gt;&gt;",head1)
else:
	head1 = string.find(s,"@&lt;")
	if head1 &gt; -1:
		head2 = string.find(s,"@&gt;",head1)
		
if head1 == -1 or head2 == -1 or head1 &gt; head2:
	name = None
else:
	name = s[head1:head2+2]</t>
<t tx="T572">def getBodyLines (self):
	
	c = self
	i, j = getTextSelection(c.body)
	if i and j: # Convert all lines containing any part of the selection.
		if c.body.compare(i,"&gt;",j): i,j = j,i
		i = c.body.index(i + "linestart")
		j = c.body.index(j + "lineend")
		head = c.body.get("1.0",i)
		tail = c.body.get(j,"end")
	else: # Convert the entire text.
		i = "1.0" ; j = "end" ; head = tail = ""
	lines = c.body.get(i,j)
	lines = string.split(lines, '\n')
	return head, lines, tail</t>
<t tx="T573">def getBodySelection (self):

	c = self
	i, j = getTextSelection(c.body)
	if i and j and c.body.compare(i,"&gt;",j):
		i,j = j,i
	return i, j</t>
<t tx="T574">def indentBody (self):

	c = self
	head, lines, tail = self.getBodyLines()
	result = [] ; changed = false
	for line in lines:
		i, width = skip_leading_ws_with_indent(line,0,c.tab_width)
		s = computeLeadingWhitespace(width+abs(c.tab_width),c.tab_width) + line[i:]
		if s != line: changed = true
		result.append(s)
	if changed:
		result = string.join(result,'\n')
		c.updateBodyPane(head,result,tail,"Indent")</t>
<t tx="T575">@ The &lt;Key&gt; event generates the event before the body text is changed(!), so we register an idle-event handler to do the work later.

1/17/02: Rather than trying to figure out whether the control or alt keys are down, we always schedule the idle_handler.  The idle_handler sees if any change has, in fact, been made to the body text, and sets the changed and dirty bits only if so.  This is the clean and safe way.

2/19/02: We must distinguish between commands like "Find, Then Change", which must call onBodyChanged, and commands like "Cut" and "Paste" that must call onBodyWillChange.  The former commands have already changed the body text, and that change must be captured immediately.  The latter commands have not changed the body text, and that change may only be captured at idle time.
@c

# Called by command handlers that have already changed the text.
def onBodyChanged (self,v,undoType):

	c = self.commands
	if not v: v = c.currentVnode()
	oldSel = c.body.index("insert")
	# trace(`oldSel`)
	self.idle_body_key(v,oldSel,undoType)
	
# Called by command handlers that change the text just before idle time.
def onBodyWillChange (self,v,undoType):

	c = self.commands
	if not v: v = c.currentVnode()
	oldSel = c.body.index("insert")
	# trace(`oldSel`)
	self.commands.body.after_idle(self.idle_body_key,v,oldSel,undoType)

# Bound to any key press.
def OnBodyKey (self,event):

	c = self.commands
	v = c.currentVnode() ; ch = event.char
	oldSel = c.body.index("insert")
	# trace(`oldSel`)
	self.commands.body.after_idle(self.idle_body_key,v,oldSel,"Typing",ch)

# Does the real work of updating the body pane.
def idle_body_key (self,v,oldSel,undoType,ch=None):

	c = self.commands
	if not c or not v or v != c.currentVnode(): return
	if 0: # prints on control-alt keys
		trace(`ch` + ":" + `c.body.get("1.0", "end")`)
		trace(c.body.index("insert")+":"+c.body.get("insert linestart","insert lineend"))
	# Ignore characters that don't change the body text.
	s = c.body.get("1.0", "end")
	if len(s) &gt; 0 and s[-1]=='\n': s = s[:-1]
	if s == v.bodyString(): return
	# trace(`ch`)
	# trace(`ch` + ":" + `s`)
	# trace(c.body.index("insert")+":"+c.body.get("insert linestart","insert lineend"))
	newSel = c.body.index("insert")
	if ch == '\r' or ch == '\n':
		&lt;&lt; Do auto indent &gt;&gt;
		s = c.body.get("1.0", "end")
		s = string.rstrip(s)
	elif ch == '\t' and c.tab_width &lt; 0:
		&lt;&lt; convert leading tab to blanks &gt;&gt;
	# Update the tnode.
	if s == None: s = ""
	c.undoer.setUndoTypingParams(v,undoType,v.bodyString(),s,oldSel,newSel)
	v.t.bodyString = s
	# Recolor the body.
	self.recolor_now(v) # We are already at idle time, so this doesn't help much.
	# Update dirty bits and changed bit.
	if not c.changed:
		c.setChanged(true) 
	redraw_flag = false
	c.beginUpdate()
	if not v.isDirty() and v.setDirty(): # Sets all cloned and @file dirty bits
		redraw_flag = true
	# update icons.
	val = v.computeIcon()
	if val != v.iconVal:
		v.iconVal = val
		redraw_flag = true
	c.endUpdate(redraw_flag) # redraw only if necessary</t>
<t tx="T576"># Do nothing if we are in @nocolor mode or if we are executing a Change command.
if self.colorizer.useSyntaxColoring(v) and undoType != "Change":
	# Get the previous line.
	s=c.body.get("insert linestart - 1 lines","insert linestart -1c")
	# Add the leading whitespace to the present line.
	junk,width = skip_leading_ws_with_indent(s,0,c.tab_width)
	if s and len(s) &gt; 0 and s[-1]==':':
		# For Python: increase auto-indent after colons.
		language = self.colorizer.scanColorDirectives(v)
		if language == python_language:
			width += abs(c.tab_width)
	ws = computeLeadingWhitespace (width,c.tab_width)
	if ws and len(ws) &gt; 0:
		c.body.insert("insert", ws)
</t>
<t tx="T577"># Do nothing if we are in @nocolor mode or if we are executing a Change command.
if self.colorizer.useSyntaxColoring(v) and undoType != "Change":
	# Get the characters preceeding the tab.
	prev=c.body.get("insert linestart","insert -1c")
	# Do nothing if there are non-whitespace in prev:
	all_ws = true
	for ch in prev:
		if ch != ' ' and ch != '\t':
			all_ws = false
	if all_ws:
		w = computeWidth(prev,c.tab_width)
		w2 = (abs(c.tab_width) - (w % abs(c.tab_width)))
		# print "prev w:" + `w` + ", prev chars:" + `prev`
		c.body.delete("insert -1c")
		c.body.insert("insert",' ' * w2)</t>
<t tx="T578">@ The &lt;Key&gt; event generates the event before the headline text is changed(!), so we register an idle-event handler to do the work later.
@c

def onHeadChanged (self,v):
	self.commands.body.after_idle(self.idle_head_key,v)

def OnHeadlineKey (self,v,event):

	# v = self.currentVnode ;
	ch = event.char
	self.commands.body.after_idle(self.idle_head_key,v,ch)

def idle_head_key (self,v,ch=None):

	c = self.commands
	if not v or not v.edit_text or v != c.currentVnode():
		return
	s = v.edit_text.get("1.0","end")
	# remove all newlines and update the vnode
	s = string.replace(s,'\n','')
	s = string.replace(s,'\r','')
	if not s: s = ""
	changed = s != v.headString()
	done = ch and (ch == '\r' or ch == '\n')
	if not changed and not done:
		return
	if changed:
		c.undoer.setUndoParams("Change Headline",v,newText=s,oldText=v.headString())
	index = v.edit_text.index("insert")
	# trace(`s`)
	if changed:
		c.beginUpdate()
		# Update changed bit.
		if not c.changed:
			c.setChanged(true)
		# Update all dirty bits.
		v.setDirty() 
		# Update v.
		v.initHeadString(s)
		v.edit_text.delete("1.0","end")
		v.edit_text.insert("end",s)
		v.edit_text.mark_set("insert",index)
		# Update all joined nodes.
		v2 = v.joinList
		while v2 and v2 != v:
			v2.initHeadString(s)
			if v2.edit_text: # v2 may not be visible
				v2.edit_text.delete("1.0","end")
				v2.edit_text.insert("end",s)
			v2 = v2.joinList
		c.endUpdate(false) # do not redraw now.

	# Reconfigure v's headline.
	if done:
		if self.bodyKeepsFocus:
			v.edit_text.configure(state="disabled",fg="black",bg="gray80",width=self.headWidth(v))
		else:
			v.edit_text.configure(state="disabled",fg="white",bg="DarkBlue",width=self.headWidth(v))
	else:
		v.edit_text.configure(width=self.headWidth(v))

	# Reconfigure all joined headlines.
	v2 = v
	while v2 and v2 != v:
		if v2.edit_text: # v2 may not be visible
			v2.edit_text.configure(width=self.headWidth(v2))
		v2 = v2.joinList
		
	# Update the screen.
	if done:
		c.beginUpdate()
		self.endEditLabel()
		c.endUpdate()
	elif changed:
		# update v immediately.  Joined nodes are redrawn later by endEditLabel.
		# Redrawing the whole screen now messes up the cursor in the headline.
		self.drawIcon(v,v.iconx,v.icony) # just redraw the icon.</t>
<t tx="T579"># Calling redraw inside c.beginUpdate()/c.endUpdate() does nothing.
# This _is_ useful when a flag is passed to c.endUpdate.
def redraw (self):
	if self.updateCount == 0 and not self.redrawScheduled:
		# print "tree.redraw"
		self.redrawScheduled = true
		self.canvas.after_idle(self.idle_redraw)
		
# Schedules a redraw even if inside beginUpdate/endUpdate
def force_redraw (self):
	# print "tree.force_redraw"
	if not self.redrawScheduled:
		self.redrawScheduled = true
		self.canvas.after_idle(self.idle_redraw)
		
# Redraws immediately: used by Find so a redraw doesn't mess up selections.
# It is up to the caller to ensure that no other redraws are pending.
def redraw_now (self):

	# print "tree.redraw_now: ", self.redrawScheduled
	self.idle_redraw()

def idle_redraw (self):

	self.redrawScheduled = false
	frame = self.commands.frame
	if frame in app().windowList and app().quitting == 0:
		# self.redrawCount += 1 ; trace(`self.redrawCount`)
		self.expandAllAncestors(self.currentVnode)
		# Erase and redraw the entire tree.
		oldcursor = self.canvas['cursor']
		self.canvas['cursor'] = "watch"
		self.canvas.delete("all")
		self.drawTree(self.rootVnode,root_left,root_top,0,0)
		self.canvas['cursor'] = oldcursor
		# Set up the scroll region.
		x0, y0, x1, y1 = self.canvas.bbox("all")
		self.canvas.configure(scrollregion=(0, 0, x1, y1))
		# Schedule a scrolling operation after the scrollbar is redrawn
		self.canvas.after_idle(self.idle_scrollTo)</t>
<t tx="T580">def setNormalLabelState (self,v): # selected, editing
	if v and v.edit_text:
		v.edit_text.configure(state="normal",highlightthickness=1,fg="black", bg="white")

def setDisabledLabelState (self,v): # selected, disabled
	if v and v.edit_text:
		v.edit_text.configure(state="disabled",highlightthickness=0,fg="black",bg="gray80")

def setSelectedLabelState (self,v): # selected, not editing
	if self.bodyKeepsFocus:
		self.setDisabledLabelState(v)
	elif v and v.edit_text:
		v.edit_text.configure(state="disabled",highlightthickness=0,fg="white",bg="DarkBlue")

def setUnselectedLabelState (self,v): # not selected.
	if v and v.edit_text:
		v.edit_text.configure(state="disabled",highlightthickness=0,fg="black",bg="white")</t>
<t tx="T581">@ The find and change commands are tricky; there are many details that must be handled properly. This documentation describes the leo.py code. Previous versions of Leo used an inferior scheme.  The following principles govern the LeoFind class:

1.	Find and Change commands initialize themselves using only the state of the present Leo window. In particular, the Find class must not save internal state information from one invocation to the next. This means that when the user changes the nodes, or selects new text in headline or body text, those changes will affect the next invocation of any Find or Change command. Failure to follow this principle caused all kinds of problems in the Borland and Macintosh codes. There is one exception to this rule: we must remember where interactive wrapped searches start. This principle simplifies the code because most ivars do not persist. However, each command must ensure that the Leo window is left in a state suitable for restarting the incremental (interactive) Find and Change commands. Details of initialization are discussed below.

2. The Find and Change commands must not change the state of the outline or body pane during execution. That would cause severe flashing and slow down the commands a great deal. In particular, c.selectVnode and c.editVnode methods must not be called while looking for matches.

3. When incremental Find or Change commands succeed they must leave the Leo window in the proper state to execute another incremental command. We restore the Leo window as it was on entry whenever an incremental search fails and after any Find All and Change All command.

Initialization involves setting the self.c, self.v, self.in_headline, self.wrapping and self.s_text ivars. Setting self.in_headline is tricky; we must be sure to retain the state of the outline pane until initialization is complete. Initializing the Find All and Change All commands is much easier because such initialization does not depend on the state of the Leo window.

Using Tk.Text widgets for both headlines and body text results in a huge simplification of the code. Indeed, the searching code does not know whether it is searching headline or body text. The search code knows only that self.s_text is a Tk.Text widget that contains the text to be searched or changed and the insert and sel Tk attributes of self.search_text indicate the range of text to be searched. Searching headline and body text simultaneously is complicated. The selectNextVnode() method handles the many details involved by setting self.s_text and its insert and sel attributes.
</t>
<t tx="T582">def __init__(self):

	Tk=Tkinter
	&lt;&lt; Initialize the leoFind ivars &gt;&gt;
	self.top = top = Tk.Toplevel()
	top.title("Leo Find/Change")
	top.resizable(0,0) # neither height or width is resizable.
	# self.top.SetIcon("LeoIcon")

	# Create the find panel...
	&lt;&lt; Create the Find and Change panes &gt;&gt;
	&lt;&lt; Create two columns of checkboxes &gt;&gt;
	&lt;&lt; Create two rows of buttons &gt;&gt;
	self.top.protocol("WM_DELETE_WINDOW", self.OnCloseFindEvent)
	self.find_text.bind  ("&lt;1&gt;", self.resetWrap)
	self.change_text.bind("&lt;1&gt;", self.resetWrap)
	self.find_text.bind  ("&lt;Key&gt;", self.resetWrap)
	self.change_text.bind("&lt;Key&gt;", self.resetWrap)</t>
<t tx="T583"># Initialize the ivars for the find panel.
for var in ivars:
	exec ("self.%s_flag = Tk.IntVar()" % var)
	
# The c.x_flag ivars contain the user preferences.
# These are updated just before executing any find/change command.

# Ivars containing internal state...
self.commands = None # The commander for this search.
self.v = None # The vnode being searched.  Never saved between searches!
self.in_headline = false # true: searching headline text.
self.wrapping = false # true: wrapping is enabled. _not_ the same as c.wrap_flag for batch searches.
self.s_text = Tk.Text() # Used by find.search()

@ Initializing a wrapped search is tricky.  The search() method will fail if v==wrapVnode and pos &gt;= wrapPos.  selectNextVnode() will fail if v == wrapVnode.  We set wrapPos on entry, before the first search.  We set wrapVnode in selectNextVnode after the first search fails.  We also set wrapVnode on exit if the first search suceeds.
@c
self.wrapVnode = None # The start of wrapped searches: persists between calls.
self.onlyVnode = None # The starting node for suboutline-only searches.
self.wrapPos = None # The starting position of the wrapped search: persists between calls.</t>
<t tx="T584">fc = Tk.Frame(top, bd="1m")
fc.pack(anchor="n", fill="x", expand=1)

fpane = Tk.Frame(fc, borderwidth=1, height="0.95i", width="1.5i")
cpane = Tk.Frame(fc, borderwidth=1, height="0.95i", width="1.5i")

fpane.pack(anchor="n", expand=1, fill="x")
cpane.pack(anchor="s", expand=1, fill="x")

# Create the labels and text fields...
flab = Tk.Label(fpane, width=8, text="Find:")
clab = Tk.Label(cpane, width=8, text="Change:")
self.find_text   = ftxt = Tk.Text(fpane, height=2, width=20)
self.change_text = ctxt = Tk.Text(cpane, height=2, width=20)

flab.pack(side="left")
clab.pack(side="left")
ctxt.pack(side="right", expand=1, fill="both")
ftxt.pack(side="right", expand=1, fill="both")</t>
<t tx="T585">boxes = Tk.Frame(top, bd="1m")
boxes.pack(anchor="n", expand=1, fill="x")

lt = Tk.Frame(boxes, bd=1)
rt = Tk.Frame(boxes, bd=1)
lt.pack(side="left", padx="5m")
rt.pack(side="right", ipadx="2m")

lt_list = [
	("Show Context", "batch"), # batch flag now records Show context.
	("Wrap Around", "wrap"), ("Whole Word", "whole_word"),
	("Ignore Case", "ignore_case"),("Pattern Match", "pattern_match") ]

rt_list = [ ("Search Headline Text", "search_headline"),
	("Search Body Text", "search_body"), ("Suboutline Only", "suboutline_only"),
	("Mark Changes", "mark_changes"), ("Mark Finds", "mark_finds") ]

for name, var in lt_list:
	exec ( 'box = Tk.Checkbutton(lt, anchor="w", text="' + name +
		'", variable=self.' + var + "_flag)" )
	box.pack(fill="x")
	box.bind("&lt;1&gt;", self.resetWrap)
	
for name, var in rt_list:
	exec ( 'box = Tk.Checkbutton(rt, anchor="w", text="' + name +
		'", variable=self.' + var + "_flag)" )
	box.pack(fill="x")
	box.bind("&lt;1&gt;", self.resetWrap)</t>
<t tx="T586"># Create the button panes
buttons  = Tk.Frame(top, bd=1)
buttons2 = Tk.Frame(top, bd=1)
buttons.pack (anchor="n", expand=1, fill="x")
buttons2.pack(anchor="n", expand=1, fill="x")

# Create the first row of buttons
findButton   =Tk.Button     (buttons,width=8,text="Find",command=self.findButton)
reverseBox   =Tk.Checkbutton(buttons,width=8,text="Reverse",variable=self.reverse_flag)
findAllButton=Tk.Button     (buttons,width=8,text="Find All",command=self.findAllButton)

reverseBox.bind("&lt;1&gt;", self.resetWrap)

findButton.pack   (pady="1m",padx="1m",side="left")
reverseBox.pack   (pady="1m",          side="left",expand=1)
findAllButton.pack(pady="1m",padx="1m",side="left")

# Create the second row of buttons
changeButton    =Tk.Button(buttons2,width=8,text="Change",command=self.changeButton)
changeFindButton=Tk.Button(buttons2,        text="Change, Then Find",command=self.changeThenFindButton)
changeAllButton =Tk.Button(buttons2,width=8,text="Change All",command=self.changeAllButton)

changeButton.pack    (pady="1m",padx="1m",side="left")
changeFindButton.pack(pady="1m",          side="left",expand=1)
changeAllButton.pack (pady="1m",padx="1m",side="right")</t>
<t tx="T587">def init (self,c):

	for var in ivars:
		exec("self.%s_flag.set(c.%s_flag)" % (var,var))

	&lt;&lt; set widgets &gt;&gt;
	
	# trace("__init__", "find.init")</t>
<t tx="T588">self.find_text.delete("1.0","end")
self.find_text.insert("end",c.find_text)

self.change_text.delete("1.0","end")
self.change_text.insert("end",c.change_text)</t>
<t tx="T589">def resetWrap (self,event=None):

	self.wrapVnode = None
	self.onlyVnode = None</t>
<t tx="T590"></t>
<t tx="T591">
# The user has pushed the "Change" button from the find panel.

def changeButton(self):

	self.setup_button()
	self.change()</t>
<t tx="T592"># The user has pushed the "Change All" button from the find panel.

def changeAllButton(self):

	c = self.setup_button()
	c.clearAllVisited() # Clear visited for context reporting.
	self.changeAll()</t>
<t tx="T593"># The user has pushed the "Change Then Find" button from the find panel.

def changeThenFindButton(self):

	self.setup_button()
	self.changeThenFind()</t>
<t tx="T594"># The user has pushed the "Find" button from the find panel.

def findButton(self):

	self.setup_button()
	self.findNext()</t>
<t tx="T595"># The user has pushed the "Find All" button from the find panel.

def findAllButton(self):

	c = self.setup_button()
	c.clearAllVisited() # Clear visited for context reporting.
	self.findAll()</t>
<t tx="T596"># The user has selected the "Replace" menu item.

def changeCommand(self,c):

	self.setup_command(c)
	self.change()</t>
<t tx="T597"># The user has pushed the "Change Then Find" button from the Find menu.

def changeThenFindCommand(self,c):

	self.setup_command(c)
	self.changeThenFind()</t>
<t tx="T598"># The user has selected the "Find Next" menu item.

def findNextCommand(self,c):

	self.setup_command(c)
	self.findNext()</t>
<t tx="T599"># The user has selected the "Find Previous" menu item.

def findPreviousCommand(self,c):

	self.setup_command(c)
	c.reverse_flag = not c.reverse_flag
	self.findNext()
	c.reverse_flag = not c.reverse_flag</t>
<t tx="T600"># Initializes a search when a button is pressed in the Find panel.

def setup_button(self):

	self.commands = c = app().log.commands
	self.v = c.currentVnode()
	assert(c)
	c.bringToFront()
	if 0: # We _must_ retain the editing status for incremental searches!
		c.endEditing()
	c.setIvarsFromFind()
	return c</t>
<t tx="T601"># Initializes a search when a command is invoked from the menu.

def setup_command(self,c):

	self.commands = c
	self.v = c.currentVnode()
	if 0: # We _must_ retain the editing status for incremental searches!
		c.endEditing()
	c.setIvarsFromFind()</t>
<t tx="T602"></t>
<t tx="T603">@ This routine performs a single batch change operation, updating the head or body string of v and leaving the result in s_text.  We update the c.body if we are changing the body text of c.currentVnode().

s_text contains the found text on entry and contains the changed text on exit.  pos and pos2 indicate the selection.  The selection will never be empty. NB: we can not assume that self.v is visible.
@c

def batchChange (self,pos1,pos2,count):

	c = self.commands ; v = self.v ; st = self.s_text
	# Replace the selection with c.change_text
	# s = st.get("1.0","end") ; trace("entry:" + `s`)
	if st.compare(pos1, "&gt;", pos2):
		pos1,pos2=pos2,pos1
	st.delete(pos1,pos2)
	st.insert(pos1,c.change_text)
	s = st.get("1.0","end")
	# Update the selection.
	insert=choose(c.reverse_flag,pos1,pos1+'+'+`len(c.change_text)`+'c')
	st.tag_remove("sel","1.0","end")
	st.mark_set("insert",insert)
	# trace("result:" + `insert` + ", " + `s`)
	# Update the node
	if self.in_headline:
		&lt;&lt; set the undo head params &gt;&gt;
		v.initHeadString(s)
	else:
		&lt;&lt; set the undo body typing params &gt;&gt;
		v.setBodyStringOrPane(s)
	# Set mark, changed and dirty bits.
	if c.mark_changes_flag:
		v.setMarked()
	if not c.isChanged():
		c.setChanged(true)
	v.setDirty()</t>
<t tx="T604">sel = None
if len(s) &gt; 0 and s[-1]=='\n': s = s[:-1]
if s != v.headString():
	if count == 1:
		c.undoer.setUndoParams("Change All",v) # Tag the start of the Change all.
	c.undoer.setUndoTypingParams(v,"Change Headline",v.bodyString(),s,sel,sel)</t>
<t tx="T605">sel = c.body.index("insert")
if len(s) &gt; 0 and s[-1]=='\n': s = s[:-1]
if s != v.bodyString():
	if count == 1:
		c.undoer.setUndoParams("Change All",v) # Tag the start of the Change all.
	c.undoer.setUndoTypingParams(v,"Change",v.bodyString(),s,sel,sel)</t>
<t tx="T606">def change(self):

	if self.checkArgs():
		self.initInHeadline()
		self.changeSelection()</t>
<t tx="T607">def changeAll(self):

	c = self.commands ; st = self.s_text
	if not self.checkArgs():
		return
	self.initInHeadline()
	data = self.save()
	self.initBatchCommands()
	count = 0
	c.beginUpdate()
	while 1:
		pos1, pos2 = self.findNextMatch()
		if pos1:
			count += 1
			self.batchChange(pos1,pos2,count)
			line = st.get(pos1 + " linestart", pos1 + " lineend")
			self.printLine(line,all)
		else: break
	c.endUpdate() # self.restore
	# Make sure the headline and body text are updated.
	v = c.currentVnode()
	c.tree.onHeadChanged(v)
	c.tree.onBodyChanged(v,"Can't Undo")
	if count &gt; 0:
		# A change was made.  Tag the end of the Change All command.
		c.undoer.setUndoParams("Change All",v)
	## c.undoer.clearUndoState()
	es("changed: " + `count`)
	self.restore(data)</t>
<t tx="T608"># Replace selection with c.change_text.
# If no selection, insert c.change_text at the cursor.

def changeSelection(self):
	
	c = self.commands ; v = self.v
	# trace(`self.in_headline`)
	t = choose(self.in_headline,v.edit_text,c.body)
	# Not yet: set undo params.
	sel = t.tag_ranges("sel")
	if len(sel) != 2:
		es("No text selected")
		return false
	# trace(`sel` + ", " + `c.change_text`)
	# Replace the selection
	start,end = sel
	t.delete(start,end)
	t.insert(start,c.change_text)
	# 2/7/02: Also update s_text in case we find another match on the same line.
	self.s_text.delete(start,end)
	self.s_text.insert(start,c.change_text)
	# Update the selection for the next match.
	setTextSelection(t,start,start + "+" + `len(c.change_text)` + "c")
	t.focus_force()

	c.beginUpdate()
	if c.mark_changes_flag:
		v.setMarked()
		c.tree.drawIcon(v,v.iconx,v.icony) # redraw only the icon.
	# update node, undo status, dirty flag, changed mark &amp; recolor
	if self.in_headline:
		c.tree.idle_head_key(v)
	else:
		c.tree.onBodyChanged(v,"Change")
	c.endUpdate(false) # No redraws here: they would destroy the headline selection.
	# trace(c.body.index("insert")+":"+c.body.get("insert linestart","insert lineend"))
	return true</t>
<t tx="T609">def changeThenFind(self):

	if not self.checkArgs():
		return

	self.initInHeadline()
	if self.changeSelection():
		self.findNext(false) # don't reinitialize</t>
<t tx="T610">def findAll(self):

	c = self.commands ; st = self.s_text
	if not self.checkArgs():
		return
	self.initInHeadline()
	data = self.save()
	self.initBatchCommands()
	count = 0
	c.beginUpdate()
	while 1:
		pos, newpos = self.findNextMatch()
		if pos:
			count += 1
			line = st.get(pos + " linestart", pos + " lineend")
			self.printLine(line,all)
		else: break
	c.endUpdate()
	es("found: " + `count`)
	self.restore(data)</t>
<t tx="T611">def findNext(self,initFlag = true):

	c = self.commands
	if not self.checkArgs():
		return
		
	if initFlag:
		self.initInHeadline()
		data = self.save()
		self.initInteractiveCommands()
	else:
		data = self.save()
	
	c.beginUpdate()
	pos, newpos = self.findNextMatch()
	c.endUpdate(false) # Inhibit redraws so that headline remains selected.
	
	if pos:
		self.showSuccess(pos,newpos)
	else:
		if self.wrapping:
			es("end of wrapped search")
		else:
			es("not found: " + `c.find_text`)
		self.restore(data)</t>
<t tx="T612"># Resumes the search where it left off.
# The caller must call set_first_incremental_search or set_first_batch_search.

def findNextMatch(self):

	c = self.commands

	if not c.search_headline_flag and not c.search_body_flag:
		return None, None

	if len(c.find_text) == 0:
		return None, None
		
	v = self.v
	while v:
		pos, newpos = self.search()
		if pos:
			if c.mark_finds_flag:
				v.setMarked()
				c.tree.drawIcon(v,v.iconx,v.icony) # redraw only the icon.
			return pos, newpos
		else:
			v = self.v = self.selectNextVnode()
	return None, None</t>
<t tx="T613"># Selects the next node to be searched.

def selectNextVnode(self):

	c = self.commands ; v = self.v
	# trace(`v`)
	
	# Start suboutline only searches.
	if c.suboutline_only_flag and not self.onlyVnode:
		self.onlyVnode = v

	# Start wrapped searches.
	if self.wrapping and not self.wrapVnode:
		assert(self.wrapPos != None)
		self.wrapVnode = v

	if self.in_headline and c.search_body_flag:
		# just switch to body pane.
		self.in_headline = false
		self.initNextText()
		# trace(`v`)
		return v

	if c.reverse_flag:
		v = v.threadBack()
	else:
		v = v.threadNext()

	# Wrap if needed.
	if not v and self.wrapping and not c.suboutline_only_flag:
		v = c.rootVnode()
		if c.reverse_flag:
			# Set search_v to the last node of the tree.
			while v and v.next():
				v = v.next()
			if v: v = v.lastNode()

	# End wrapped searches.
	if self.wrapping and v and v == self.wrapVnode:
		# trace("ending wrapped search")
		v = None ; self.resetWrap()
		
	# End suboutline only searches.
	if (c.suboutline_only_flag and self.onlyVnode and v and
		(v == self.onlyVnode or not self.onlyVnode.isAncestorOf(v))):
		# trace("end outline-only")
		v = None ; self.onlyVnode = None

	self.v = v # used in initNextText().
	if v: # select v and set the search point within v.
		self.in_headline = c.search_headline_flag
		self.initNextText()
	return v</t>
<t tx="T614">@ Searches the present headline or body text for c.find_text and returns true if found.
c.whole_word_flag, c.ignore_case_flag, and c.pattern_match_flag control the search.
@c

def search (self):

	c = self.commands ; v = self.v ; t = self.s_text
	assert(c and t and v)
	index = t.index("insert")
	stopindex = choose(c.reverse_flag,"1.0","end")
	while 1:
		# trace(`index`+":"+`stopindex`+":"+t.get(index+" linestart",index+" lineend"))
		pos = t.search(c.find_text,index,
			stopindex=stopindex,backwards=c.reverse_flag,
			regexp=c.pattern_match_flag,nocase=c.ignore_case_flag)
		if not pos:
			# trace("not found")
			return None, None
		newpos = pos + "+" + `len(c.find_text)` + "c"
		&lt;&lt; return if we are passed the wrap point &gt;&gt;
		if c.whole_word_flag:
			index = t.index(choose(c.reverse_flag,pos,newpos))
			&lt;&lt; test for whole word match &gt;&gt;
			if not pos: continue
		# trace("found:" + `pos` + ":" + `newpos` + ":" + `v`)
		# set the insertion point.
		setTextSelection(t,pos,newpos)
		t.mark_set("insert",choose(c.reverse_flag,pos,newpos))
		return pos, newpos</t>
<t tx="T615">if self.wrapping and self.wrapPos and self.wrapVnode and self.v == self.wrapVnode:
	if c.reverse_flag and t.compare(pos, "&lt;", self.wrapPos):
		# trace("wrap done")
		return None, None
	if not c.reverse_flag and t.compare(newpos, "&gt;", self.wrapPos):
		return None, None</t>
<t tx="T616"># Set pos to None if word characters preceed or follow the selection.

before = t.get(pos + "-1c", pos)
first  = t.get(pos)
last   = t.get(newpos)
after  = t.get(newpos, newpos + "+1c")
# print `before`, `first`, `last`, `after`

if before and is_c_id(before) and first and is_c_id(first):
	pos = None
if after  and is_c_id(after)  and last  and is_c_id(last):
	pos = None</t>
<t tx="T617"></t>
<t tx="T618">def checkArgs (self):

	c = self.commands 
	val = true
	if not c.search_headline_flag and not c.search_body_flag:
		es("not searching headline or body")
		val = false
	if len(c.find_text) == 0:
		es("empty find patttern")
		val = false
	return val</t>
<t tx="T619"># Initializes for the Find All and Change All commands.

def initBatchCommands (self):

	c = self.commands
	self.in_headline = c.search_headline_flag # Search headlines first.

	# Select the first node.
	if c.suboutline_only_flag:
		self.v = c.currentVnode()
	else:
		v = c.rootVnode()
		if c.reverse_flag:
			while v and v.next():
				v = v.next()
			v = v.lastNode()
		self.v = v
	
	# Set the insert point.
	self.initBatchText()</t>
<t tx="T620">@ Returns s_text with "insert" point set properly for batch searches.
@c

def initBatchText(self):
	c = self.commands ; v = self.v ; st = self.s_text	
	s = choose(self.in_headline,v.headString(), v.bodyString())
	st.delete("1.0","end")
	st.insert("end",s)
	st.mark_set("insert",choose(c.reverse_flag,"end","1.0"))
	self.wrapping = false # Only interactive commands allow wrapping.
	return st

# Call this routine when moving to the next node when a search fails.
# Same as above except we don't reset wrapping flag.
def initNextText(self):
	c = self.commands ; v = self.v ; st = self.s_text	
	s = choose(self.in_headline,v.headString(), v.bodyString())
	st.delete("1.0","end")
	st.insert("end",s)
	st.mark_set("insert",choose(c.reverse_flag,"end","1.0"))
	return st</t>
<t tx="T621"># Guesses which pane to start in for incremental searches and changes.
# This must not alter the current "insert" or "sel" marks.

def initInHeadline (self):

	c = self.commands ; v = self.v
	
	if c.search_headline_flag and c.search_body_flag:
		# Do not change this line without careful thought and extensive testing!
		self.in_headline = (v == c.tree.editVnode)
	else:
		self.in_headline = c.search_headline_flag</t>
<t tx="T622"># For incremental searches

def initInteractiveCommands(self):

	c = self.commands ; v = self.v
	
	if self.in_headline:
		t = v.edit_text
		c.tree.editVnode = v
		pos = t.index("insert")
		# trace(`pos` + ":" + `self.in_headline` + ":" + `v==c.tree.editVnode` + ":" + `v`)
	else:
		t = c.body
		pos = t.index("insert")

	st = self.initNextText()
	t.focus_force()
	st.mark_set("insert",pos)
	self.wrapping = c.wrap_flag
	if c.wrap_flag and self.wrapVnode == None:
		self.wrapPos = pos
		# Do not set self.wrapVnode here: that must be done after the first search.</t>
<t tx="T623">def printLine (self,line,allFlag=false):

	c = self.commands
	both = c.search_body_flag and c.search_headline_flag
	context = c.batch_flag # "batch" now indicates context

	if allFlag and both and context:
		es(`self.v`)
		type = choose(self.in_headline,"head: ","body: ")
		es(type + line)
	elif allFlag and context and not self.v.isVisited():
		# We only need to print the context once.
		es(`self.v`)
		es(line)
		self.v.setVisited()
	else:
		es(line)</t>
<t tx="T624"># Restores the screen after a search fails

def restore (self,data):

	c = self.commands
	in_headline,v,t,insert,start,end = data
	# trace(`insert` + ":" + `start` + ":" + `end`)
	# Don't try to reedit headline.
	c.selectVnode(v) 
	if not in_headline:
		if 0: # Looks bad.
			if start and end:
				setTextSelection(t,start,end)
		else: # Looks good and provides clear indication of failure or termination.
			t.tag_remove("sel","1.0","end")
		t.mark_set("insert",insert)
		t.see("insert")
		t.focus_force()</t>
<t tx="T625">def save (self):

	c = self.commands ; v = self.v
	t = choose(self.in_headline,v.edit_text,c.body)
	insert = t.index("insert")
	sel = t.tag_ranges("sel")
	if len(sel) == 2:
		start,end = sel
	else:
		start,end = None,None
	return (self.in_headline,v,t,insert,start,end)</t>
<t tx="T626">@ This is used for displaying the final result.  It returns self.dummy_vnode, v.edit_text or c.body with "insert" and "sel" points set properly.
@c

def showSuccess(self,pos,newpos):

	c = self.commands ; v = self.v
	
	c.beginUpdate() # Prevent all redraws except c.tree.redraw_now()
	if 1: # range of update...
		c.selectVnode(v)
		c.tree.redraw_now() # Redraw now so selections are not destroyed.
		# Select the found vnode again after redraw.
		if self.in_headline:
			c.editVnode(v)
			c.tree.setNormalLabelState(v)
			assert(v.edit_text)
		else:
			c.selectVnode(v)
	c.endUpdate(false) # Do not draw again!

	t = choose(self.in_headline,v.edit_text,c.body)
	# trace(`self.in_headline` + "," + `t`)
	insert = choose(c.reverse_flag,pos,newpos)
	t.mark_set("insert",insert)
	setTextSelection(t,pos,newpos)
	if not self.in_headline:
		t.see(insert)
	t.focus_force()
	if c.wrap_flag and not self.wrapVnode:
		self.wrapVnode = self.v</t>
<t tx="T627">@ Two things must happen:

1. Menu items should be enabled only when focus is in the canvas pane.
2. Bindings for for the outline commands should be added only to the canvas pane.</t>
<t tx="T628">def canSelectThreadBack (self):

	c = self ; v = c.currentVnode()
	w = c.frame.top.focus_get()
	return w == c.canvas and v and v.threadBack()</t>
<t tx="T629">def canSelectThreadNext (self):

	c = self ; v = c.currentVnode()
	w = c.frame.top.focus_get()
	return w == c.canvas and v and v.threadNext()</t>
<t tx="T630">def canSelectVisBack (self):

	c = self ; v = c.currentVnode()
	w = c.frame.top.focus_get()
	return w == c.canvas and v and v.visBack()</t>
<t tx="T631">def canSelectVisNext (self):

	c = self ; v = c.currentVnode()
	w = c.frame.top.focus_get()
	return w == c.canvas and v and v.visNext()</t>
<t tx="T632">def selectThreadBack(self):

	c = self ; current = c.currentVnode()
	if not current: return
	
	v = current.threadBack()
	if v:
		c.beginUpdate()
		c.selectVnode(v)
		c.endUpdate()
		c.frame.canvas.focus_force()</t>
<t tx="T633">def selectThreadNext(self):

	c = self ; current = c.currentVnode()
	if not current: return

	v = current.threadNext()
	if v:
		c.beginUpdate()
		c.selectVnode(v)
		c.endUpdate()
		c.frame.canvas.focus_force()</t>
<t tx="T634"># This has an up arrow for a control key.

def selectVisBack(self):

	c = self ; current = c.currentVnode()
	if not current: return

	v = current.visBack()
	if v:
		c.beginUpdate()
		c.selectVnode(v)
		c.endUpdate()
		c.frame.canvas.focus_force()</t>
<t tx="T635">def selectVisNext(self):

	c = self ; current = c.currentVnode()
	if not current: return
	
	v = current.visNext()
	if v:
		c.beginUpdate()
		c.selectVnode(v)
		c.endUpdate()
		c.frame.canvas.focus_force()</t>
<t tx="T636">@ignore</t>
<t tx="T637">@ This code scans the node v and all of v's ancestors looking for directives.  If found, the corresponding Tangle/Untangle globals are set.

Once a directive is seen, no other related directives in nodes further up the tree have any effect.  For example, if an @color directive is seen in node x, no @color or @nocolor directives are examined in any ancestor of x.

This code is similar to Commands::scanAllDirectives, but it has been modified for use by the atFile class.
@c

def btest(self, b1, b2):
	return (b1 &amp; b2) != 0

def scanAllDirectives(self,v):

	c = self.commands
	bits = 0 ; old_bits = 0 ; val = 0
	&lt;&lt; Set delims to default values &gt;&gt;
	&lt;&lt; Set path from @file node &gt;&gt;
	while v:
		s = v.t.bodyString
		bits, dict = is_special_bits(s)
		&lt;&lt; Test for @path &gt;&gt;
		&lt;&lt; Test for @comment or @language &gt;&gt;
		&lt;&lt; Test for @pagewidth and @tabwidth &gt;&gt;
		old_bits |= bits
		v = v.parent()
	if c.frame and not self.default_directory: # No path in @file headline and no @path directive.
		&lt;&lt; Set current directory &gt;&gt;
	&lt;&lt; Set comment Strings from delims &gt;&gt;</t>
<t tx="T638">self.page_width = leoPrefs.default_page_width
self.tab_width = leoPrefs.default_tab_width

self.presentLanguage = self.targetLanguage = leoPrefs.default_target_language
self.default_directory = leoPrefs.default_default_directory

delim1, delim2, delim3 = set_delims_from_language(self.presentLanguage)</t>
<t tx="T639"># A directory in an @file node over-rides everything else.

name = v.atFileNodeName()
dir = os.path.dirname(name)
if dir and len(dir) &gt; 0:
	if os.path.exists(dir):
		self.default_directory = dir
	else:
		self.error("Directory \"" + dir + "\" does not exist")</t>
<t tx="T640">if self.btest(comment_bits, old_bits) or self.btest(language_bits, old_bits):
	pass # Do nothing more.

elif self.btest(comment_bits, bits):
	k = dict["comment"] # 7/8/02, not "language!"
	delim1, delim2, delim3 = set_delims_from_string(s[k:])
	# @comment effectively disables Untangle.
	self.presentLanguage = unknown_language
	
elif self.btest(language_bits, bits):
	k = dict["language"]
	issue_error_flag = false
	language, delim1, delim2, delim3 = set_language(
		s,k,issue_error_flag,self.targetLanguage)
	if delim1:
		self.targetLanguage = self.presentLanguage = language</t>
<t tx="T641"># We set the current director to a path so future writes will go to that directory.

if self.btest(path_bits, bits) and not self.default_directory and not self.btest(path_bits, old_bits):
	k = dict["path"]
	j = i = k + len("@path")
	i = skip_to_end_of_line(s,i)
	path = string.strip(s[j:i])
	# es(ftag + " path: " + path)
	# Remove leading and trailing delims if they exist.
	if len(path) &gt; 2 and (
		(path[0]=='&lt;' and path[-1] == '&gt;') or
		(path[0]=='"' and path[-1] == '"') ):
		path = path[1:-1]
	path = string.strip(path)
	if len(path) &gt; 0:
		if os.path.exists(path):
			self.default_directory = path
		else:
			self.error("Directory does not exist: " + path)
	else:
		self.error("ignoring empty @path")</t>
<t tx="T642">if self.btest(page_width_bits, bits) and not self.btest(page_width_bits, old_bits):
	k = dict["page_width"]
	j = i = k + len("@pagewidth")
	i, val = skip_long(s,i)
	if val:
		self.page_width = val
	else:
		i = skip_to_end_of_line(s,i)
		self.error("Ignoring " + s[k:i])

if self.btest(tab_width_bits, bits) and not self.btest(tab_width_bits, old_bits):
	k = dict["tab_width"]
	j = i = k + len("@tabwidth")
	i, val = skip_long(s, i)
	if val:
		self.tab_width = val
	else:
		i = skip_to_end_of_line(s,i)
		self.error("Ignoring " + s[k:i])</t>
<t tx="T643"># This code is executed if no valid path was specified in the @file node or in an @path directive.

# 6/4/02: Use c.openDirectory as the initial default.
dir = c.openDirectory
if dir and len(dir) &gt; 0:
	if os.path.exists(dir):
		self.default_directory = dir
	else:
		# self.error("Invalid open directory: " + `dir`)
		pass

dir = c.tangle_directory # Try the directory in the Preferences panel
if dir and len(dir) &gt; 0:
	if os.path.exists(dir):
		self.default_directory = dir
	# It is not an error if this is not correct.
	else:
		# self.error("Invalid Default Tangle Directory: " + `dir`)
		pass

dir = c.frame.openDirectory # Try the directory used in the Open command
if not self.default_directory and dir and len(dir) &gt; 0:
	if os.path.exists(dir):
		self.default_directory = dir
	else:
		# self.error("Open directory no longer valid: " + `dir`)
		pass
		
if not self.default_directory:
	# 6/4/02: This message will almost never happen.
	self.error("No directory specified by @file, @path or Preferences.")
	self.default_directory = ""</t>
<t tx="T644"># Use single-line comments if we have a choice.

if delim3:
	# choice
	self.startSentinelComment = delim1
	self.endSentinelComment = ""
elif delim2:
	# no choice
	self.startSentinelComment = delim1
	self.endSentinelComment = delim2
elif delim1:
	# no choice
	self.startSentinelComment = delim1
	self.endSentinelComment = ""
else: pass</t>
<t tx="T645">def getPrefs (self):

	c = self.commands ; config = app().config
	
	self.getTag("&lt;preferences")
	while 1:
		if self.matchTag("allow_rich_text="):
			self.getDquote() ; self.getBool() ; self.getDquote() #ignored
		elif self.matchTag("tab_width="):
			self.getDquote() ; c.tab_width = self.getLong() ; self.getDquote()
		elif self.matchTag("page_width="):
			self.getDquote() ; c.page_width = self.getLong() ; self.getDquote()
		elif self.matchTag("tangle_bat="):
			self.getDquote() ; c.tangle_batch_flag = self.getBool() ; self.getDquote()
		elif self.matchTag("untangle_bat="):
			self.getDquote() ; c.untangle_batch_flag = self.getBool() ; self.getDquote()
		# New in version 0.10
		elif self.matchTag("output_doc_chunks="):
			self.getDquote() ; c.output_doc_flag = self.getBool() ; self.getDquote()
		elif self.matchTag("noweb_flag="):
			# New in version 0.19: Ignore this flag.
			self.getDquote() ; self.getBool() ; self.getDquote()
		elif self.matchTag("extended_noweb_flag="):
			# New in version 0.19: Ignore this flag.
			self.getDquote() ; self.getBool() ; self.getDquote()
		elif self.matchTag("defaultTargetLanguage="):
			# New in version 0.15
			self.getDquote()
			&lt;&lt; check for syntax coloring prefs &gt;&gt;
		elif self.matchTag("use_header_flag="):
			self.getDquote() ; c.use_header_flag = self.getBool() ; self.getDquote()
		else: break
	self.getTag("&gt;")
	while 1:
		if self.matchTag("&lt;defaultDirectory&gt;"):
			# New in version 0.16.
			c.tangle_directory = self.getEscapedString()
			self.getTag("&lt;/defaultDirectory&gt;")
			if not os.path.exists(c.tangle_directory):
				es("Default tangle directory not found:" + c.tangle_directory)
		elif self.matchTag("&lt;TSyntaxMemo_options&gt;"):
			self.getEscapedString() # ignored
			self.getTag("&lt;/TSyntaxMemo_options&gt;")
		else: break
	self.getTag("&lt;/preferences&gt;")
	
	# Override .leo file's preferences if settings are in leoConfig.txt.
	config.setCommandsIvars(c)</t>
<t tx="T646"># Must match longer tags before short prefixes.
language = c_language # default

if self.matchTag("CWEB"):
	language = cweb_language ; self.getDquote();
elif self.matchTag("C"):
	language = c_language ; self.getDquote()
elif self.matchTag("HTML"):
	language = html_language ; self.getDquote()
elif self.matchTag("Java"):
	language = java_language ; self.getDquote()
elif self.matchTag("Pascal"):
	language = pascal_language ; self.getDquote()
elif self.matchTag("PerlPod"):
	language = perlpod_language ; self.getDquote()
elif self.matchTag("Perl"):
	language = perl_language ; self.getDquote()
elif self.matchTag("Plain"):
	language = plain_text_language ; self.getDquote()
elif self.matchTag("Python"):
	language = python_language ; self.getDquote()

c.target_language = language</t>
<t tx="T647">def OnClosePrefsFrame(self):

	# trace()
	app().config.setConfigIvars(self.commands)
	app().config.update()
	self.top.destroy()</t>
<t tx="T648">def OnPreferences(self,event=None):
	
	c = self.commands
	prefs = leoPrefs.LeoPrefs(c) ; top = prefs.top
	center_dialog(top)
	top.grab_set() # Make the dialog a modal dialog.
	top.focus_force() # Get all keystrokes.
	app().root.wait_window(top)

	return "break" # inhibit further command processing</t>
<t tx="T649">@ Moving the first child of the root hangs in v::setDirty after the call to moveAfter in c.moveOutlineUp.  Also, there is a special case that I didn't consider.  Moving the root down creates a new root.

The original fix didn't work; the siblings of the original root could become unlinked from the tree in certain situations!</t>
<t tx="T650">@ Moving down is more tricky than moving up; we can't move v to be a child of itself.  An important optimization:  we don't have to call checkMoveWithParentWithWarning() if the parent of the moved node remains the same.
@c

def moveOutlineDown(self):

	c = self
	v = c.currentVnode()
	if not v: return
	# Set next to the node after which v will be moved.
	next = v.visNext()
	while next and v.isAncestorOf(next):
		next = next.visNext()
	if not next: return
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		v.setDirty()
		&lt;&lt; Move v down &gt;&gt;
		v.setDirty() # This second call is essential.
		c.selectVnode(v)# 4/23/01
		c.setChanged(true)
	c.endUpdate()
	c.updateSyntaxColorer(v) # Moving can change syntax coloring.</t>
<t tx="T651"># Remember both the before state and the after state for undo/redo
oldBack = v.back()
oldParent = v.parent()
oldN = v.childIndex()

if next.hasChildren() and next.isExpanded():
	# Attempt to move v to the first child of next.
	if c.checkMoveWithParentWithWarning(v,next,true):
		v.moveToNthChildOf(next,0)
		c.undoer.setUndoParams("Move Down",v,
			oldBack=oldBack,oldParent=oldParent,oldN=oldN)
else:
	# Attempt to move v after next.
	if c.checkMoveWithParentWithWarning(v,next.parent(),true):
		v.moveAfter(next)
		c.undoer.setUndoParams("Move Down",v,
			oldBack=oldBack,oldParent=oldParent,oldN=oldN)</t>
<t tx="T652">def moveOutlineUp(self):

	c = self
	v = c.currentVnode()
	if not v: return
	back = v.visBack()
	if not back: return
	back2 = back.visBack()
	c = self
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		v.setDirty()
		&lt;&lt; Move v up &gt;&gt;
		v.setDirty()
		c.selectVnode(v)
		c.setChanged(true)
	c.endUpdate()
	c.updateSyntaxColorer(v) # Moving can change syntax coloring.</t>
<t tx="T653"># Remember both the before state and the after state for undo/redo
oldBack = v.back()
oldParent = v.parent()
oldN = v.childIndex()

if not back2:
	# v will be the new root node
	v.moveToRoot(c.tree.rootVnode) # 3/16/02, 5/17/02
	c.undoer.setUndoParams("Move Up",v,
		oldBack=oldBack,oldParent=oldParent,oldN=oldN)
elif back2.hasChildren() and back2.isExpanded():
	if c.checkMoveWithParentWithWarning(v,back2,true):
		v.moveToNthChildOf(back2,0)
		c.undoer.setUndoParams("Move Up",v,
			oldBack=oldBack,oldParent=oldParent,oldN=oldN)
elif c.checkMoveWithParentWithWarning(v,back2.parent(),true):
	# Insert after back2.
	v.moveAfter(back2)
	c.undoer.setUndoParams("Move Up",v,
		oldBack=oldBack,oldParent=oldParent,oldN=oldN)</t>
<t tx="T654">@ This now ensures that all cloned nodes are marked dirty and that all ancestor @file nodes are marked dirty.  It is much safer to do it this way.
@c

def setDirty (self):

	v = self ; c = v.commands
	# trace(`v`)
	changed = false
	c.beginUpdate()
	if not v.t.isDirty():
		v.t.setDirty()
		changed = true
	# This must _always_ be called, even if v is already dirty.
	if v.setAncestorAtFileNodeDirty():
		changed = true
	v2 = v.getJoinList()
	while v2 and v2 != v: 
		if not v2.t.isDirty():
			v2.t.setDirty()
			changed = true
		# Again, must always be called.
		if v2.setAncestorAtFileNodeDirty():
			changed = true
		v2 = v2.getJoinList()
	c.endUpdate(changed)
	return changed

def initDirtyBit (self):
	self.t.setDirty()</t>
<t tx="T655">@ Bug fix: 5/27/02.  We link in the rest of the tree only when oldRoot != None.  Otherwise, we are calling this routine from init code and we want to start with a pristine tree.
@c
def linkAsRoot(self, oldRoot = None):

	v = self ; c = v.commands ; tree = c.tree
	# trace(`v`)
	# Bug fix 3/16/02:
	# Clear all links except the child link.
	# This allows a node with children to be moved up properly to the root position.
	# v.mFirstChild = None
	v.mParent = None
	v.mBack = None
	# 5/27/02
	if oldRoot: oldRoot.mBack = v
	v.mNext = oldRoot
	tree.rootVnode = v
</t>
<t tx="T656"># Used by scripts

def moveAfter (self,a):

	"""Moves the receiver after a"""

	v = self ; c = self.commands
	# trace(`v`)
	v.destroyDependents()
	v.unlink()
	v.linkAfter(a)
	v.createDependents()
	
	# 5/27/02: Moving a node after another node can create a new root node.
	if not a.parent() and not a.back():
		c.tree.rootVnode = a</t>
<t tx="T657"># Compatibility routine for scripts

def moveToNthChildOf (self, p, n):

	"""Moves the receiver to the nth child of p"""

	v = self ; c = self.commands
	# trace(`n` + ", " + `p`)
	v.destroyDependents()
	v.unlink()
	v.linkAsNthChild(p, n)
	v.createDependents()
	
	# 5/27/02: Moving a node can create a new root node.
	if not p.parent() and not p.back():
		c.tree.rootVnode = p</t>
<t tx="T658">def moveToRoot (self, oldRoot = None):

	"""Moves the receiver to the root position"""

	v = self
	# trace(`v`)
	v.destroyDependents()
	v.unlink()
	v.linkAsRoot(oldRoot)
	v.createDependents()</t>
<t tx="T659">@ The syntax colorer needs to know what the present language is.  By analogy with tangle.scanAllDirectives, color.scanColorDirectives scans for @language and @color directives.  If not found, we use the Prefs panel setting.

There is no need for a c.present_language here, and idle_body_key calls this routine to determine what the present lanuage is.</t>
<t tx="T660"># Initializes prefs ivars and widgets from c's ivars.

def init(self,c):

	self.commands = c
	#trace(`c.tab_width`)

	for var in ivars:
		exec("self.%s = c.%s" % (var,var))

	&lt;&lt; remember values for revert &gt;&gt;
	&lt;&lt; set widgets &gt;&gt;
	# print "init" ; print self.print_ivars()</t>
<t tx="T661"># Global options
self.revert_tangle_batch_flag = c.tangle_batch_flag
self.revert_untangle_batch_flag = c.untangle_batch_flag
self.revert_page_width = c.page_width
self.revert_tab_width = c.tab_width
# Default Tangle Options
self.revert_tangle_directory = c.tangle_directory
self.revert_output_doc_flag = c.output_doc_flag
self.revert_use_header_flag = c.use_header_flag
# Default Target Language
self.revert_target_language = c.target_language</t>
<t tx="T662"># Global options
self.tangle_batch_var.set(c.tangle_batch_flag)
self.untangle_batch_var.set(c.untangle_batch_flag)
self.pageWidthText.delete("1.0","end")
self.pageWidthText.insert("end",`c.page_width`)
self.tabWidthText.delete("1.0","end")
self.tabWidthText.insert("end",`c.tab_width`)
# Default Tangle Options
self.tangleDirectoryText.delete("1.0","end")
self.tangleDirectoryText.insert("end",c.tangle_directory)
self.output_doc_var.set(c.output_doc_flag)
self.use_header_var.set(c.use_header_flag)
# Default Target Language
self.lang_var.set(c.target_language)</t>
<t tx="T663"># This event handler gets executed when the user choose a new default language.

def set_lang (self):
	
	c = top() ; v = c.currentVnode()
	language = self.lang_var.get()
	c.target_language = self.target_language = language
	c.tree.recolor(v)
	# print "set_lang" ; print self.print_ivars()</t>
<t tx="T664">def __init__ (self,c):

	Tk = Tkinter
	&lt;&lt; set ivars &gt;&gt;
	self.top = top = Tk.Toplevel()
	head,tail = os.path.split(c.frame.title)
	self.top.title("Prefs for " + tail)
	top.resizable(0,0) # neither height or width is resizable.
	&lt;&lt; Create the Global Options frame &gt;&gt;
	&lt;&lt; Create the Tangle Options frame &gt;&gt;
	&lt;&lt; Create the Target Language frame &gt;&gt;
	&lt;&lt; Create the Ok, Cancel &amp; Revert buttons &gt;&gt;
	self.top.protocol("WM_DELETE_WINDOW", self.OnClosePrefsFrame)
	self.init(c)
	# es("Prefs.__init__")</t>
<t tx="T665"># These ivars have the same names as the corresponding ivars in commands class.

# Global options
self.page_width = default_page_width
self.tab_width = default_tab_width
self.tangle_batch_flag = 0
self.untangle_batch_flag = 0

self.tangle_batch_var = Tk.IntVar()
self.untangle_batch_var = Tk.IntVar()

# Default Tangle options
self.tangle_directory = ""
self.use_header_flag = 0
self.output_doc_flag = 0

self.use_header_var = Tk.IntVar()
self.output_doc_var = Tk.IntVar()

# Default Target Language
self.target_language = default_target_language
self.lang_var = Tk.IntVar()</t>
<t tx="T666">glob = Tk.Frame(top, bd="2", relief="groove") 
glob.pack(anchor="n", pady=2, ipadx="1m", expand=1, fill="x")

globTitle = Tk.Label(glob, text="Global Options...")
globTitle.pack(pady="1m")

# Page width &amp; page width
f = Tk.Frame(glob)
f.pack(anchor="w", pady="1m", expand=1, fill="x")

lab = Tk.Label(f, anchor="w", padx="1m", text="Page width:")
self.pageWidthText = txt = Tk.Text(f, height=1, width=4)
lab.pack(side="left")
txt.pack(side="left")
txt.bind("&lt;Key&gt;", self.idle_set_ivars)

lab2 = Tk.Label(f, padx="1m", text="Tab width:")
self.tabWidthText = txt2 = Tk.Text(f, height=1, width=4)
lab2.pack(side="left")
txt2.pack(side="left")
txt2.bind("&lt;Key&gt;", self.idle_set_ivars)

# Batch Checkbuttons...
# Can't easily use a list becasue we use different variables.
self.doneBox = doneBox = Tk.Checkbutton(glob,anchor="w",
	text="Run tangle_done.py after Tangle",
	variable=self.tangle_batch_var,command=self.idle_set_ivars)
self.unBox = unBox = Tk.Checkbutton(glob,anchor="w",
	text="Run untangle_done.py after Untangle",
	variable=self.untangle_batch_var,command=self.idle_set_ivars)
doneBox.pack(fill="x")
unBox.pack(fill="x")</t>
<t tx="T667"># Frame and title
tangle = Tk.Frame(top, bd="2", relief="groove")
tangle.pack(anchor="n", ipadx="1m", expand=1, fill="x")

tangleTitle = Tk.Label(tangle, text="Default Options...")
tangleTitle.pack(pady="1m")

# Label and text
lab3 = Tk.Label(tangle, anchor="w", text="Default tangle directory")
self.tangleDirectoryText = txt3 = Tk.Text(tangle, height=1, width=30)
txt3.bind("&lt;Key&gt;", self.idle_set_ivars) # Capture the change immediately
lab3.pack(            padx="1m", pady="1m", fill="x")
txt3.pack(anchor="w", padx="1m", pady="1m", fill="x")

# Checkbuttons
self.headerBox = header = Tk.Checkbutton(tangle,anchor="w",
	text="Tangle outputs header line",
	variable=self.use_header_var,command=self.idle_set_ivars)
self.docBox = doc = Tk.Checkbutton(tangle,anchor="w",
	text="Tangle outputs document chunks",
	variable=self.output_doc_var,command=self.idle_set_ivars)
header.pack(fill="x")
doc.pack(fill="x")</t>
<t tx="T668"># Frame and title
target = Tk.Frame(top, bd="2", relief="groove")
target.pack(anchor="n", pady=2, expand=1, fill="x") #   

targetTitle = Tk.Label(target, text="Default Target Language...")
targetTitle.pack(pady="1m")

# Frames for two columns of radio buttons
lt = Tk.Frame(target)
rt = Tk.Frame(target)
lt.pack(side="left")
rt.pack(side="right")

# Left column of radio buttons.
left_data = [
	("C/C++",c_language), ("CWEB", cweb_language),
	("HTML", html_language), ("Java", java_language),
	("Pascal", pascal_language) ]

for text,value in left_data:
	button = Tk.Radiobutton(lt,anchor="w",text=text,
		variable=self.lang_var,value=value,command=self.set_lang)
	button.pack(fill="x") 
	
# Right column of radio buttons.
right_data = [ ("Perl", perl_language), ("Perl+POD", perlpod_language),
	("Plain Text", plain_text_language), ("Python", python_language) ]
	
for text,value in right_data:
	button = Tk.Radiobutton(rt,anchor="w",text=text,
		variable=self.lang_var,value=value,command=self.set_lang)
	button.pack(fill="x")</t>
<t tx="T669">buttons = Tk.Frame(top,bd="2",relief="groove")
buttons.pack(expand=1,fill="x")

okButton = Tk.Button(buttons,text="OK",width=7,command=self.onOK)
cancelButton = Tk.Button(buttons,text="Cancel",width=7,command=self.onCancel)
revertButton = Tk.Button(buttons,text="Revert",width=7,command=self.onRevert)

okButton.pack(side="left",pady=7,expand=1)
cancelButton.pack(side="left",pady=7,expand=0)
revertButton.pack(side="left",pady=7,expand=1)</t>
<t tx="T670"># These event handlers get executed when the user types in the prefs panel.

def set_ivars (self,c):

	&lt;&lt; update ivars &gt;&gt;
	for var in ivars:
		exec("c.%s = self.%s" % (var,var))
	c.frame.setTabWidth(c.tab_width)
	# print "set_ivars" ; print self.print_ivars()

def idle_set_ivars (self, event=None):
	
	c = top() ; v = c.currentVnode()
	self.top.after_idle(self.set_ivars,c)
	c.tree.recolor(v)
	# print "idle_set_ivars" ; print self.print_ivars()
	
def print_ivars (self):
	
	for var in ivars:
		exec("print self.%s, '%s'" % (var,var))</t>
<t tx="T671"># Global options
w = self.pageWidthText.get("1.0","end")
w = string.strip(w)
try:
	self.page_width = int(w)
except:
	self.page_width = default_page_width
	
w = self.tabWidthText.get("1.0","end")
w = string.strip(w)
try:
	self.tab_width = int(w)
except:
	self.tab_width = default_tab_width

self.tangle_batch_flag = self.tangle_batch_var.get()
self.untangle_batch_flag = self.untangle_batch_var.get()

# Default Tangle options
dir = self.tangleDirectoryText.get("1.0","end")
self.tangle_directory = string.strip(dir)

self.use_header_flag = self.use_header_var.get()
self.output_doc_flag = self.output_doc_var.get()

# Default Target Language
self.target_language = self.lang_var.get()</t>
<t tx="T672">@ This code scans the node v and all of v's ancestors looking for @color and @nocolor directives.
@c

def scanColorDirectives(self,v):

	c = self.commands
	val = c.target_language
	while v:
		s = v.t.bodyString
		bits, dict = is_special_bits(s)
		&lt;&lt; Test for @comment or @language &gt;&gt;
		v = v.parent()
	# trace(`val`)
	return val</t>
<t tx="T673">if btest(comment_bits,bits):
	# @comment effectively disables syntax coloring.
	val = plain_text_language
	break

elif btest(language_bits,bits):
	issue_error_flag = false
	i = dict["language"]
	val, delim1, delim2, delim3 = set_language(s,i,issue_error_flag,c.target_language)
	break</t>
<t tx="T674">def reload_all ():

	return ##

	modules = [ "", "App", "AtFile", "Color", "Commands", "Compare",
		"Dialog", "FileCommands", "Frame", "Find", "Globals",
		"Import", "Nodes", "Prefs", "Tangle", "Tree", "Undo", "Utils" ]
	
	print "reloading all modules"
	for m in modules:
		exec("import leo%s" % m)
		exec("reload(leo%s)" % m)
		
@ Warning: Python version 2.2 warns if import * is done outside the module level.  Alas, for reasons that are not clear to me, it appears necessary to do an import * whenever leoGlobals or leoUtils change.  The workaround is to quit Python and then reload leo.py from scratch.  Sigh.
@c 
	if 0: # invalid past 2.1: import * must be at the module level.
		from leoGlobals import *
		from leoUtils import *</t>
<t tx="T675">def OnOpenPythonWindow(self,event=None):

	try:
		if 0: # Python 2.2 warns that import * must be at the module level.
			from leoApp import *
			from leoGlobals import *
			from leoUtils import *
		import idle
		if app().idle_imported:
			reload(idle)
		app().idle_imported = true
	except:
		es("Can not import idle")
		es("Please add \Python2x\Tools\idle to sys.paths")
	return "break" # inhibit further command processing</t>
<t tx="T676">def destroy (self):

	if not app().deleteOnClose:
		return
		
	# Can't trace while destroying.
	# print "tree.destroy"

	for v in self.vnode_alloc_list:
		v.destroy()
	del self.vnode_alloc_list # del all vnodes

	self.iconimages = None
	del self.colorizer
	self.colorizer = None

	# Remove links to objects destroyed by frame.
	self.commands = None
	self.canvas = None

	# Remove all links to nodes
	self.currentVnode = None # The presently selected vnode.
	self.editVnode = None # The vnode being edited.
	self.rootVnode = None
	self.topVnode = None</t>
<t tx="T677">@ This routine immediately removes all links from this node to other objects.  We expect this routine to be called only from tree.destroy when a window is being closed.
@c

def destroy (self):

	# Can't trace while destroying.
	# print "v.destroy"
	self.commands = None
	self.joinList = None
	self.t.destroy()
	self.t = None
	self.mParent = self.mFirstChild = self.mNext = self.mBack = None
	self.edit_text = None
	if 0: # These no longer exist
		self.box_id = self.icon_id = self.edit_text_id = None</t>
<t tx="T678">def destroy (self):

	# Can't trace while destroying.
	# print "c.destroy:", `self.frame`

	# Remove all links from this object to other objects.
	self.frame = None
	self.fileCommands = None
	self.atFileCommands = None
	self.importCommands = None
	self.tangleCommands = None</t>
<t tx="T679">def destroy (self):

	# don't trace during shutdown logic.
	# print "frame.destroy:", `self`
	self.tree.destroy()
	self.tree = None
	self.commands.destroy()
	self.commands = None
	self.top.destroy() # Actually close the window.
	self.top = None</t>
<t tx="T680"># Called from quit logic and when user closes the window.
# Returns true if the close happened.

def OnCloseLeoEvent(self):

	# trace(`self in app().windowList` + ":" + `self`)
	veto=false
	c = self.commands
	if c.changed:
		&lt;&lt; Prompt for change.  Set veto if the user cancels &gt;&gt;
	if veto: return false
	app().log = None # no log until we reactive a window
	if self in app().windowList:
		app().windowList.remove(self)
		self.destroy() # force the window to go away now.
	if app().windowList:
		# Pick a window to activate so we can set the log.
		w = app().windowList[0]
		w.top.deiconify()
		w.top.lift()
		app().log = w
	else:
		app().quit()
	return true</t>
<t tx="T681">name = choose(self.mFileName, self.mFileName, self.title)
type = choose(app().quitting, "quitting?", "closing?")

d = leoDialog.leoDialog()
answer = d.askYesNoCancel("Confirm",
	'Save changes to "' + name + '" before ' + type)

if answer=="yes":
	if not self.mFileName or self.mFileName == "":
		&lt;&lt; Put up a file save dialog; set veto if the user cancels &gt;&gt;
	if veto==false and self.mFileName and self.mFileName != "":
		self.commands.fileCommands.save( self.mFileName )

elif answer=="cancel":
	veto = true #The user wants to cancel the close.

else: veto = false # The user wants to close without saving.</t>
<t tx="T682"># Make sure we never pass None to the ctor.
if not self.title:
	self.title = ""
	
self.mFileName = tkFileDialog.asksaveasfilename(
	initialfile = self.mFileName,
	title="Save",
	filetypes=[("Leo files", "*.leo")],
	defaultextension=".leo")
	
if not self.mFileName:
	veto = true
</t>
<t tx="T683">def OnQuit(self,event=None):

	app().quitting += 1
	
	while app().windowList:
		w = app().windowList[0]
		if not w.OnCloseLeoEvent():
			break
			
	app().quitting -= 1 # If we get here the quit has been disabled.
	return "break" # inhibit further command processing</t>
<t tx="T684">def quit(self):

	# Wait until everything is quiet before really quitting.
	self.destroyAllGlobalWindows()
	if 1: # leaves Python window open.
		self.root.destroy()
	else: # closes Python window.
		self.root.quit()</t>
<t tx="T685"># All output to the log stream eventually comes here.

def put (self,s):
	if app().quitting &gt; 0: return
	if self.log:
			self.log.insert("end",s)
			self.log.see("end")
			self.log.update_idletasks()
	else:
		print "Null log"
		print s

def putnl (self):
	if app().quitting &gt; 0: return
	if self.log:
		self.log.insert("end",'\n')
		self.log.see("end")
		self.log.update_idletasks()
	else:
		print "Null log"
		print</t>
<t tx="T686">@ This is the entry point to the write code.  root should be an @file vnode. We set the orphan and dirty flags if there are problems writing the file to force Commands::write_LEO_file to write the tree to the .leo file.
@c
def write(self,root):

	c = self.commands
	c.setIvarsFromPrefs()
	self.root = root
	c.endEditing() # Capture the current headline.
	self.targetFileName = root.atFileNodeName()
	&lt;&lt; Open files.  Set orphan and dirty flags and return on errors &gt;&gt;
	# unvisited nodes will be orphans.
	root.clearVisitedInTree()
	next = root.nodeAfterTree()
	self.updateCloneIndices(root, next)
	&lt;&lt; put all @first lines in root &gt;&gt;
	if 1: # write the entire file
		self.putOpenLeoSentinel("@+leo")
		self.putOpenNodeSentinel(root)
		self.putBodyPart(root)
		root.setVisited()
		self.putCloseNodeSentinel(root)
		self.putSentinel("@-leo")
	if self.outputFile:
		if self.suppress_newlines and self.newline_pending:
			self.newline_pending = false
			self.onl() # Make sure file ends with a newline.
		self.outputFile.flush()
		self.outputFile.close()
		self.outputFile = None
	&lt;&lt; Warn about @ignored and orphans &gt;&gt;
	if self.errors &gt; 0 or self.root.isOrphan():
		root.setOrphan()
		root.setDirty() # 2/9/02: make _sure_ we try to rewrite this file.
		os.remove(self.outputFileName) # Delete the temp file.
	else:
		root.clearOrphan()
		root.clearDirty()
		&lt;&lt; Replace the target with the temp file if different &gt;&gt;</t>
<t tx="T687">self.scanAllDirectives(root)
valid = self.errors == 0

if valid:
	fn = root.atFileNodeName()
	self.shortFileName = fn # name to use in status messages.
	self.targetFileName = os.path.join(self.default_directory,fn)
	self.targetFileName = os.path.normpath(self.targetFileName)
	path = os.path.dirname(self.targetFileName)
	if len(path) &gt; 0:
		valid = os.path.exists(path)
		if not valid:
			self.writeError("Path does not exist: " + path)
	else:
		valid = false

if valid:
	self.outputFileName = self.targetFileName + ".tmp"
	self.outputFile = open(self.outputFileName, 'w')
	valid = self.outputFile != None
	if not valid:
		self.writeError("Can not open " + self.outputFileName)

if not valid:
	root.setOrphan()
	root.setDirty()
	return</t>
<t tx="T688">@ Write any @first lines to ms.  These lines are also converted to @verbatim lines, so the read logic simply ignores these lines.
@c

s = root.t.bodyString
tag = "@first"
i = 0
while match(s,i,"@first"):
	i += len(tag)
	i = skip_ws(s,i)
	j = i
	i = skip_to_end_of_line(s,i)
	if i &gt; j:
		line = s[j:i]
		self.os(line) ; self.onl()
	i = skip_nl(s,i)</t>
<t tx="T689">next = root.nodeAfterTree()
v = root
while v and v != next:
	if not v.isVisited():
		self.writeError("Orphan node:  " + v.headString())
	if v.isAtIgnoreNode():
		self.writeError("@ignore node: " + v.headString())
	v = v.threadNext()</t>
<t tx="T690">if os.path.exists(self.targetFileName):
	if filecmp.cmp(self.outputFileName, self.targetFileName):
		try: # Just delete the temp file.
			os.remove(self.outputFileName)
		except: pass
		es("Unchanged: " + self.shortFileName)
	else:
		try: # Replace target file with temp file.
			os.remove(self.targetFileName)
			os.rename(self.outputFileName, self.targetFileName)
			es("Writing: " + self.shortFileName)
		except:
			self.writeError("Rename failed: no file created! (file may be read-only)")
else:
	os.rename(self.outputFileName, self.targetFileName)
	es("Creating: " + self.targetFileName)</t>
<t tx="T691">def write_LEO_file(self,fileName,outlineOnlyFlag):

	c=self.commands
	# Leo2: write all @file nodes and set orphan bits.
	if not outlineOnlyFlag:
		at = c.atFileCommands
		at.writeAll(c.rootVnode(), false) # forceFlag
	&lt;&lt; create backup file &gt;&gt;
	self.mFileName = fileName
	self.outputFile = open(fileName, 'w')
	if not self.outputFile:
		es("Can not open " + fileName)
		&lt;&lt; delete backup file &gt;&gt;
		return false
	try:
		app().config.update()
		self.putProlog()
		self.putHeader()
		self.putGlobals()
		self.putPrefs()
		self.putFindSettings()
		self.putVnodes()
		self.putTnodes()
		self.putPostlog()
		# raise BadLeoFile # testing
	except:
		# traceback.print_exc() 
		if self.outputFile:
			self.outputFile.close()
			self.outputFile = None
		&lt;&lt; erase filename and rename backupName to fileName &gt;&gt;
		return false

	if self.outputFile:
		self.outputFile.close()
		self.outputFile = None
		&lt;&lt; delete backup file &gt;&gt;
		return true
	else: # This probably will never happen because errors should raise exceptions.
		&lt;&lt; erase filename and rename backupName to fileName &gt;&gt;
		return false</t>
<t tx="T692"># rename fileName to fileName.bak if fileName exists.

if os.path.exists(fileName):
	try:
		backupName = os.path.join(app().loadDir,fileName)
		backupName = fileName + ".bak"
		if os.path.exists(backupName):
			os.unlink(backupName)
		os.rename(fileName,backupName)
	except:
		es("error creating " + backupName)
		backupName = None
else:
	backupName = None</t>
<t tx="T693">if backupName and os.path.exists(backupName):
	try:
		os.unlink(backupName)
	except:
		es("error deleting " + backupName)</t>
<t tx="T694">es("error writing " + fileName)

if fileName and os.path.exists(fileName):
	try:
		os.unlink(fileName)
	except:
		pass
		
if backupName:
	es("restoring " + fileName + " from " + backupName)
	try:
		os.rename(backupName, fileName)
	except:
		es("can not rename " + backupName + " to " + fileName)
</t>
<t tx="T695">def OnSaveTo(self,event=None):

	# Make sure we never pass None to the ctor.
	if not self.mFileName:
		self.title = ""

	# set local fileName, _not_ self.mFileName
	fileName = tkFileDialog.asksaveasfilename(
		initialfile = self.mFileName,
		title="Save To",
		filetypes=[("Leo files", "*.leo")],
		defaultextension=".leo")

	if len(fileName) &gt; 0:
		fileName = ensure_extension(fileName, ".leo")
		self.commands.fileCommands.saveTo(fileName)
	return "break" # inhibit further command processing</t>
<t tx="T696">def OnSaveAs(self,event=None):

	# Make sure we never pass None to the ctor.
	if not self.mFileName:
		self.title = ""
		
	fileName = tkFileDialog.asksaveasfilename(
		initialfile = self.mFileName,
		title="Save As",
		filetypes=[("Leo files", "*.leo")],
		defaultextension=".leo")

	if len(fileName) &gt; 0:
		# 7/2/02: don't change mFileName until the dialog has suceeded.
		self.mFileName = ensure_extension(fileName, ".leo")
		self.title = self.mFileName
		self.top.title(self.mFileName)
		self.commands.fileCommands.saveAs(self.mFileName)

	return "break" # inhibit further command processing</t>
<t tx="T697">def OnSave(self,event=None):

	c = self.commands
	
	# Make sure we never pass None to the ctor.
	if not self.mFileName:
		self.title = ""
		self.mFileName = ""

	if self.mFileName != "":
		c.fileCommands.save(self.mFileName)
		c.setChanged(false)
		return "break" # inhibit further command processing

	fileName = tkFileDialog.asksaveasfilename(
		initialfile = self.mFileName,
		title="Save",
		filetypes=[("Leo files", "*.leo")],
		defaultextension=".leo")

	if len(fileName) &gt; 0:
		# 7/2/02: don't change mFileName until the dialog has suceeded.
		self.mFileName = ensure_extension(fileName, ".leo")
		self.title = self.mFileName
		self.top.title(self.mFileName)
		c.fileCommands.save(self.mFileName)
	return "break" # inhibit further command processing</t>
<t tx="T698">def OnViewAllCharacters (self, event=None):

	c = self.commands ; v = c.currentVnode() ; colorizer = c.tree.colorizer
	colorizer.showInvisibles = choose(colorizer.showInvisibles,0,1)
	# It is much easier to change the menu name here than in the menu updater.
	menu = c.frame.editMenu
	if colorizer.showInvisibles:
		setMenuLabel(menu,"Show Invisibles","Hide Invisibles")
	else:
		setMenuLabel(menu,"Hide Invisibles","Show Invisibles")

	c.tree.recolor_now(v)
	return "break" # inhibit further command processing</t>
<t tx="T699"># Must use foreground, not fg
body.tag_config("comment", foreground="red")
body.tag_config("docPart", foreground="red")
body.tag_config("keyword", foreground="blue")
if self.use_hyperlinks: # underline=self.use_hyperlinks doesn't seem to work.
	body.tag_config("link", foreground="red",underline=1) # Defined section name
else:
	body.tag_config("link", foreground="red",underline=0) # Defined section name
body.tag_config("leoKeyword", foreground="blue")
if 0: # Looks good, but problems when text is selected.
	body.tag_config("name", foreground="red", background="gray90") # Undefined section name
else: # Reverse the underlining used for defined section names.
	if self.use_hyperlinks: # underline=(not self.use_hyperlinks) doesn't seem to work.
		body.tag_config("name", foreground="red", underline=0) # Undefined section name
	else:
		body.tag_config("name", foreground="red", underline=1) # Undefined section name
body.tag_config("nameBrackets", foreground="blue")
body.tag_config("string", foreground="gray50")

if self.showInvisibles:
	if 1: # Very poor, and vaguely usable.
		body.tag_config("blank",background="black",bgstipple="gray25")
		body.tag_config("tab",background="black",bgstipple="gray50")
	else: # Doesn't work, but does increase the spacing ;-)
		body.tag_config("blank",font="Symbol")
		body.tag_config("tab",font="Symbol")
else:
	body.tag_config("blank",background="white")
	body.tag_config("tab",background="white")

# body.tag_config("normal", foreground="black")</t>
<t tx="T700">def sortChildren(self):

	c = self ; v = c.currentVnode()
	if not v or not v.hasChildren(): return
	&lt;&lt; Set the undo info for sortChildren &gt;&gt;
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		v.sortChildren()
		v.setDirty()
		c.setChanged(true)
	c.endUpdate()
	
def sortSiblings (self):
	
	c = self ; v = c.currentVnode()
	if not v: return
	parent = v.parent()
	if not parent: return # can't sort the top level this way.
	&lt;&lt; Set the undo info for sortSiblings &gt;&gt;
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		parent.sortChildren()
		parent.setDirty()
		c.setChanged(true)
	c.endUpdate()</t>
<t tx="T701"># Get the present list of children.
children = []
child = v.firstChild()
while child:
	children.append(child)
	child = child.next()
c.undoer.setUndoParams("Sort Children",v,sort=children)</t>
<t tx="T702"># Get the present list of siblings.
sibs = []
sib = parent.firstChild()
while sib:
	sibs.append(sib)
	sib = sib.next()
c.undoer.setUndoParams("Sort Siblings",v,sort=sibs)</t>
<t tx="T703">def sortChildren (self):
	
	# Create a list of vnode, headline tuples
	v = self ; pairs = []
	child = v.firstChild()
	if not child: return
	while child:
		pairs.append((string.lower(child.headString()), child))
		child = child.next()
	# Sort the list on the headlines.
	sortedChildren = sortSequence(pairs,0)
	# Move the children.
	index = 0
	for headline,child in sortedChildren:
		child.moveToNthChildOf(v,index)
		index += 1
	
if 0:
	def oldSortChildren (self):
	
		v = self
		# Create a sorted list of all child names
		names = [] ; children = []
		child = v.firstChild()
		if not child: return
		while child:
			children.append(child)
			names.append(string.lower(child.headString()))
			child = child.next()
		names.sort()
		# Create a list of children sorted by name.
		sortedChildren = []
		for name in names:
			for child in children:
				if name == string.lower(child.headString()):
					sortedChildren.append(child)
					children.remove(child)
		# Move the children.
		index = 0
		for child in sortedChildren:
			child.moveToNthChildOf(v,index)
			index += 1</t>
<t tx="T704">@ignore</t>
<t tx="T705">def skip_doc(self,s,i):

	# trace(`get_line(s,i)`)
	# Skip @space, @*, @doc, @chapter and @section directives.
	doc1 = i
	while i &lt; len(s):
		if is_nl(s,i):
			doc1 = i = skip_nl(s,i)
		elif match(s,i,"@ ") or match(s,i,"@\t") or match(s,i,"@*"):
			i = skip_ws(s,i+2) ; doc1 = i
		elif match(s,i,"@\n"):
			i += 1 ; doc1 = i
		elif (match_word(s,i,"@doc") or
			  match_word(s,i,"@chapter") or
			  match_word(s,i,"@section")):
			doc1 = i = skip_line(s,i)
		else: break

	while i &lt; len(s):
		kind, end = self.token_type(s,i,dont_report_errors)
		if kind == at_code or kind == at_root or kind == section_def:
			break
		i = skip_line(s,i)

	doc = s[doc1:i]
	# trace(doc)
	return i, doc</t>
<t tx="T706">@ This method returns a code indicating the apparent kind of token at the position i. The caller must determine whether section definiton tokens are valid.

returns (kind, end) and sets global root_name using setRootFromText().
@c

def token_type(self,s,i,err_flag):

	kind = plain_line ; end = -1
	if self.use_noweb_flag:
		&lt;&lt; set token_type in noweb mode &gt;&gt;
	else:
		&lt;&lt; set token_type for CWEB mode &gt;&gt;
	if kind == at_other :
		&lt;&lt; set kind for directive &gt;&gt;
	# trace(`kind` + ":" + `get_line(s,i)`)
	return kind, end</t>
<t tx="T707">if match(s,i,"&lt;&lt;"):
	i, kind, end = self.skip_section_name(s,i)
	if kind == bad_section_name:
		kind = plain_line # not an error.
	elif kind == at_root:
		if self.head_root:
			self.setRootFromText(self.head_root,err_flag)
		else:
			kind = bad_section_name # The warning has been given.
elif match(s,i,"@ ") or match(s,i,"@\t") or match(s,i,"@\n"): kind = at_doc
elif match(s,i,"@@"): kind = at_at
elif i &lt; len(s) and s[i] == '@': kind = at_other
else: kind = plain_line</t>
<t tx="T708">i = skip_ws(s,i)
if match(s,i,"@*") or match(s,i,"@ "): kind = at_doc
elif match(s,i,"@&lt;"): i, kind, end = self.skip_section_name(s,i)
elif match(s,i,"@@"): kind = at_at
elif match_word(s,i,"@c") or match_word(s,i,"@p"): kind = at_code
elif i &lt; len(s) and s[i] == '@':
	if   i + 1 &gt;= len(s): kind = at_doc
	elif i + 1 &lt; len(s) and s[i+1] not in string.letters:
		kind = at_web
	else: kind = at_other # Set kind later
else: kind = plain_line</t>
<t tx="T709"># This code will return at_other for any directive other than those listed.

for name, type in [ ("@chapter", at_chapter),
	("@c", at_code), # 2/28/02: treat @c just like @code.
	("@code", at_code), ("@doc", at_doc),
	("@root", at_root), ("@section", at_section) ]:
	if match_word(s,i,name):
		kind = type ; break

if kind == at_root:
	i = self.setRootFromText(s[i+5:],err_flag)</t>
<t tx="T710">def tangleAll(self):

	c = self.commands ; v = c.rootVnode()
	self.initTangleCommand()
	has_roots = false

	while v:
		ok = self.tangleTree(v,dont_report_errors)
		if ok: has_roots = true
		if self.path_warning_given:
			break # Fatal error.
		v = v.next()

	if not has_roots:
		es("----- The outline contains no roots")
	elif self.errors &gt; 0 and not self.path_warning_given:
		es("----- Tangle halted because of errors")
	else:
		es("Tangle complete")</t>
<t tx="T711">def tangleMarked(self):

	c = self.commands ; v = c.rootVnode()
	c.clearAllVisited() # No roots have been tangled yet.
	self.initTangleCommand()
	any_marked = false

	while v:
		is_ignore, i = is_special(v.bodyString(),0,"@ignore")
		# Only tangle marked and unvisited nodes.
		if is_ignore:
			v = v.nodeAfterTree()
		elif v.isMarked():
			ok = self.tangleTree(v,dont_report_errors)
			if ok: any_marked = true
			if self.path_warning_given:
				break # Fatal error.
			v = v.nodeAfterTree()
		else: v = v.threadNext()

	if not any_marked:
		es("----- The outline contains no marked roots")
	elif self.errors &gt; 0 and not self.path_warning_given:
		es("----- Tangle halted because of errors")
	else:
		es("Tangle complete")</t>
<t tx="T712">@ This funtion tangles all nodes in the tree whose root is v. It reports on its results if report_flag is true.

This function is called only from the top level, so there is no need to initialize globals.
@c

def tangleTree(self,v,report_flag):

	assert(v)
	any_root_flag = false
	next = v.nodeAfterTree()
	self.path_warning_given = false

	while v and v != next:
		self.setRootFromHeadline(v)
		bits, dict = is_special_bits(v.bodyString(),[self.head_root])
		is_ignore = (bits &amp; ignore_bits) != 0
		is_root = (bits &amp; root_bits) != 0
		is_unit = (bits &amp; unit_bits) != 0
		if is_ignore:
			v = v.nodeAfterTree()
		elif not is_root and not is_unit:
			v = v.threadNext()
		else:
			self.tanglePass1(v) # sets self.v
			if self.root_list and self.tangling:
				any_root_flag = true
				self.tanglePass2() # self.v invalid in pass 2.
			self.cleanup()
			v = v.nodeAfterTree()
			if self.path_warning_given: break # Fatal error.

	if self.tangling and report_flag and not any_root_flag:
		# This is done by Untangle if we are untangling.
		es("----- The outline contains no roots")
	return any_root_flag</t>
<t tx="T713"># This code is called from tangleTree and untangleTree.

def cleanup (self):
	
	#trace()
	if self.errors == 0:
	
		# Create a list of root names:
		root_names = [] ; dir = app().loadDir
		for section in self.root_list:
			for part in section.parts:
				if part.is_root:
					root_names.append(os.path.join(dir,part.name))

		if self.tangling and self.tangle_batch_flag:
			try:
				import tangle_done
				tangle_done.run(root_names)
			except: es("Can not execute tangle_done.run()")
		if not self.tangling and self.untangle_batch_flag:
			try:
				import untangle_done
				untangle_done.run(root_names)
			except: es("Can not execute tangle_done.run()")

	# Reinitialize the symbol tables and lists.
	self.tst = {}
	self.ust = {}
	self.root_list = []
	self.def_stack = []</t>
<t tx="T714">@ignore</t>
<t tx="T715"># Used by Tangle/Untangle

# arg_allow_rich_text = false # No longer used.
arg_extended_noweb_flag = true
arg_output_doc_flag = true
arg_tangle_batch = false
arg_untangle_batch = false
arg_use_noweb_flag = true
arg_use_CWEB_flag = false
arg_use_header_flag = true
long arg_tab_width = 4  # Now set by the TSyntaxMemo options.
long arg_page_width = 132
long arg_present_language = c_language
long arg_target_language = c_language

// Used by Prefs panel.
default_allow_rich_text = false
default_extended_noweb_flag = false
default_output_doc_flag = true
default_tangle_batch = false
default_untangle_batch = false
default_use_noweb_flag = true
default_use_CWEB_flag = false
default_use_header_flag = true
default_page_width = 132
default_tab_width = 4
# extern long default_present_language
default_target_language = c_language
</t>
<t tx="T716">flag = false # true if we have suceeded.

if frame and frame.mDefaultDirectory.Length()&gt; 0:
	flag = SetCurrentDir(frame.mDefaultDirectory)
	if not flag and not path_warning_given:
		self.path_warning_given = true
		self.error("Invalid Default Tangle Directory: " + frame.mDefaultDirectory)

if not flag and frame and frame.mOpenDirectory.Length()&gt; 0:
	flag = SetCurrentDir(frame.mOpenDirectory.c_str())
	if not flag and not path_warning_given:
		self.path_warning_given = true
		self.error("Directory no longer valid: " + frame.mDefaultDirectory)

if not flag and self.root_name:
	# Try to get the directory from the root name.
	dir = ExtractFileDir(root_name)
	if len(s) &gt; 0:
		flag = SetCurrentDir(dir)
		if not flag and not path_warning_given:
			path_warning_given = true
			self.error("Invalid @root directory: " + frame.mDefaultDirectory)

if not flag and issue_error_flag and not path_warning_given:
	self.path_warning_given = true # Disable further error messages.
	self.error("No directory specified by @root,@path or Preferences.")
</t>
<t tx="T717">@ This code scans the node v and all its ancestors looking for directives.  If found,the corresponding globals are set for use by Tangle, Untangle and syntax coloring.

Once a directive is seen, related directives in ancesors have no effect.  For example, if an @color directive is seen in node x, no @color or @nocolor directives are examined in any ancestor of x.
@c

def scanAllDirectives(self,v,require_path_flag,issue_error_flag):

	c = self.commands
	# trace(`v`)
	old_bits = 0 # One bit for each directive.
	self.init_directive_ivars()
	while v:
		s = v.bodyString()
		bits, dict = is_special_bits(s)
		# trace("bits:" + `bits` + ", dict:" + `dict`, ", " + `v`)
		&lt;&lt; Test for @comment or @language &gt;&gt;
		&lt;&lt; Test for @verbose,@terse or @silent &gt;&gt;
		&lt;&lt; Test for @path,@pagewidth and @tabwidth &gt;&gt;
		&lt;&lt; Test for @header or @noheader &gt;&gt;
		old_bits |= bits
		v = v.parent()
	if c.frame and require_path_flag and not self.tangle_directory:
		# No path is in effect.
		&lt;&lt; Set self.tangle_directory &gt;&gt;
	# trace(`self.tangle_directory`)</t>
<t tx="T718">if btest(old_bits,comment_bits)or btest(old_bits,language_bits):
	 pass # Do nothing more.
elif btest(bits,comment_bits):
	i = dict["comment"]
	self.set_root_delims(s[i:])
	# @comment effectively disables Untangle.
	self.language = unknown_language
elif btest(bits,language_bits):
	issue_error_flag = false
	i = dict["language"]
	set_language(s,i,issue_error_flag,c.target_language)
</t>
<t tx="T719">@ It is valid to have more than one of these directives in the same body text: the more verbose directive takes precedence.
@c

if btest(old_bits,verbose_bits)or btest(old_bits,terse_bits)or btest(old_bits,silent_bits):
	pass # Do nothing more.
elif btest(bits,verbose_bits):
	self.print_bits = verbose_bits
elif btest(bits,terse_bits):
	self.print_bits = terse_bits
elif btest(bits,silent_bits):
	self.print_bits = silent_bits
</t>
<t tx="T720">if require_path_flag and btest(bits,path_bits)and not btest(old_bits,path_bits):
	i = dict["path"]
	j = skip_to_end_of_line(s,i+5) # Point past @path
	path = string.strip(s[i+5:j])
	&lt;&lt; Remove leading and trailing delims if they exist &gt;&gt;
	if len(path) &gt; 0:
		dir = os.path.dirname(path)
		if len(dir) &gt; 0 and os.path.exists(dir):
			self.tangle_directory = dir
			# trace("@path dir:" + `dir`)
		elif issue_error_flag and not self.path_warning_given:
			self.path_warning_given = true # supress future warnings
			self.error("Invalid directory: " + `s[i:j]`)
	elif issue_error_flag and not self.path_warning_given:
		self.path_warning_given = true # supress future warnings
		self.error("Empty @path")

if btest(bits,page_width_bits) and not btest(old_bits,page_width_bits):
	i = dict["pagewidth"]
	i, val = skip_long(s,i+10) # Point past @pagewidth
	if val == -1:
		if issue_error_flag:
			j = skip_to_end_of_line(s,i)
			es("ignoring " + s[i:j])
	else: self.page_width = val

if btest(bits,tab_width_bits)and not btest(old_bits,tab_width_bits):
	i = dict["tabwidth"]
	i, val = skip_long(s,i+9) # Point past @tabwidth.
	if val == -1:
		if issue_error_flag:
			j = skip_to_end_of_line(s,i)
			es("ignoring " + s[i:j])
	else: self.tab_width = val</t>
<t tx="T721"># es(ftag + " path: " + path)
# Remove leading and trailing delims if they exist.
if len(path) &gt; 2 and (
	(path[0]=='&lt;' and path[-1] == '&gt;') or
	(path[0]=='"' and path[-1] == '"') ):
	path = path[1:-1]
path = string.strip(path)</t>
<t tx="T722">if btest(old_bits,header_bits)or btest(old_bits,noheader_bits):
	pass # Do nothing more.
elif btest(bits,header_bits)and btest(bits,noheader_bits):
	if issue_error_flag:
		es("conflicting @header and @noheader directives")
elif btest(bits,header_bits):
	self.use_header_flag = true
elif btest(bits,noheader_bits):
	self.use_header_flag = false
</t>
<t tx="T723">@ This code sets self.tangle_directory--it has not already been set by an @path directive.

An explicit file name in an @root directive will override the directory set here.  The final file name will be os.path.join(self.tangle_directory,fileName)

If no @path directive is in effect we use the following directories:
1. The directory in the @root directive (self.root_name)
2. The Tangle Default Directory specified in the Preferences panel.
3. The directory set by the Open command
@c

# Always check @root directory if it exists.
if self.root_name and len(self.root_name) &gt; 0:
	dir = os.path.dirname(self.root_name)
	if len(dir) &gt; 0 and os.path.exists(dir):
		self.tangle_directory = dir
		# trace("@root directory:" + `dir`)
	elif len(dir) &gt; 0 and issue_error_flag and not self.path_warning_given:
		self.path_warning_given = true
		self.error("@root directory missing or invalid: " + dir)

if not self.tangle_directory and c.tangle_directory and len(c.tangle_directory) &gt; 0:
	dir = c.tangle_directory
	if len(dir) &gt; 0 and os.path.exists(dir):
		self.tangle_directory = dir
		# trace("Default tangle directory:" + `dir`)
	elif len(dir) &gt; 0 and issue_error_flag and not self.path_warning_given:
		self.path_warning_given = true
		self.error("Invalid Default Tangle Directory: " + dir)

if not self.tangle_directory and c.frame.openDirectory and len(c.frame.openDirectory) &gt; 0:
	dir = c.frame.openDirectory # Try the directory used in the Open command
	if len(dir) &gt; 0 and os.path.exists(dir):
		self.tangle_directory = dir
		# trace("Open directory:" + `dir`)
	elif len(dir) &gt; 0 and issue_error_flag and not self.path_warning_given:
		self.path_warning_given = true
		self.error("Invalid Open directory: " + dir)

if not self.tangle_directory and issue_error_flag and not self.path_warning_given:
	self.path_warning_given = true
	self.error("No directory specified by @root, @path or Preferences.")</t>
<t tx="T724">@root "c:\prog\test\untangleTest.c"

line 1

&lt;&lt;section1&gt;&gt;
line2
&lt;&lt;section 2&gt;&gt;</t>
<t tx="T725">section 1 doc
@code
section 1 code1
section 2 code2</t>
<t tx="T726">section 2 doc1
section 2 doc2
&lt;&lt; section 2 &gt;&gt;=
section 2 code1
section 2 code2</t>
<t tx="T727">def find_line_start(s,i):

	i = string.rfind(s,'\n',0,i) # Finds the highest index in the range.
	if i == -1: return 0
	else: return i + 1</t>
<t tx="T728"># Very useful for tracing.

def get_line (s,i):

	nl = ""
	if is_nl(s,i):
		i = skip_nl(s,i)
		nl = "[nl]"
	j = find_line_start(s,i)
	k = skip_to_end_of_line(s,i)
	return nl + s[j:k]
	
def get_line_after (s,i):
	
	nl = ""
	if is_nl(s,i):
		i = skip_nl(s,i)
		nl = "[nl]"
	k = skip_to_end_of_line(s,i)
	return nl + s[i:k]
</t>
<t tx="T729"># Called by __init__

def init_ivars(self):

	c = self.commands
	&lt;&lt; init tangle ivars &gt;&gt;
	&lt;&lt; init untangle ivars &gt;&gt;
	
# Called by scanAllDirectives

def init_directive_ivars (self):

	c = self.commands
	&lt;&lt; init directive ivars &gt;&gt;</t>
<t tx="T730"># Various flags and counts...

self.errors = 0 # The number of errors seen.
self.tangling = true # true if tangling, false if untangling.
self.path_warning_given = false # true: suppress duplicate warnings.
self.tangle_indent = 0 # Level of indentation during pass 2, in spaces.
self.file_name = c.frame.mFileName # The file name (was a bridge function)
self.v = None # vnode being processed.
self.output_file = None # The file descriptor of the output file.
self.tangle_default_directory = None # Default directory set by scanAllDirectives.

@ Symbol tables: the TST (Tangle Symbol Table) contains all section names in the outline. The UST (Untangle Symbol Table) contains all sections defined in the derived file.
@c
self.tst = {}
self.ust = {}

# The section stack for Tangle and the definition stack for Untangle.
self.section_stack = []
self.def_stack = []

@ The list of all roots. The symbol table routines add roots to self list during pass 1. Pass 2 uses self list to generate code for all roots.
@c
self.root_list = []

# The delimiters for comments created by the @comment directive.
self.single_comment_string = "//"  # present comment delimiters.
self.start_comment_string = "/*"
self.end_comment_string = "*/"
self.sentinel = None

# The filename following @root in a headline.
# The code that checks for &lt; &lt; * &gt; &gt; = uses these globals.
self.root = None
self.root_name = None

# Formerly the "tangle private globals"
# These save state during tangling and untangling.
# It is possible that these will be removed...
if 1:
	self.head_root = None
	self.code = None
	self.doc = None
	self.header_name = None
	self.header = None
	self.section_name = None

@ The following records whether we have seen an @code directive in a body text.
If so, an @code represents &lt; &lt; header name &gt; &gt; = and it is valid to continue a section definition.
@c
self.code_seen = false # true if @code seen in body text.
</t>
<t tx="T731">@ Untangle vars used while comparing.
@c
self.line_comment = self.comment = self.comment_end = None
self.comment2 = self.comment2_end = None
self.string1 = self.string2 = self.verbatim = None
self.message = None # forgiving compare message.</t>
<t tx="T732">if 0: # not used in this version of Leo
	self.allow_rich_text = default_allow_rich_text
	self.extended_noweb_flag = default_extended_noweb_flag
	self.target_language = default_target_language # uses c.target_lanuage instead
	
# Global options
self.page_width = c.page_width
self.tab_width = c.tab_width
self.tangle_batch_flag = c.tangle_batch_flag
self.untangle_batch_flag = c.untangle_batch_flag

# Default tangle options.
self.tangle_directory = None # Initialized by scanAllDirectives
self.output_doc_flag = c.output_doc_flag
self.use_header_flag = c.use_header_flag

# Default tangle language
self.language = c.target_language
(	self.single_comment_string,
	self.start_comment_string,
	self.end_comment_string ) = set_delims_from_language(self.language)

# Abbreviations for self.language
self.use_cweb_flag = self.language == cweb_language
self.use_noweb_flag = not self.use_cweb_flag

# Set only from directives.
self.print_bits = verbose_bits</t>
<t tx="T733"></t>
<t tx="T734">@ This method handles newline processing while skipping a code section. It sets 'done' if the line contains an @directive or section definition that terminates the present code section. On entry: i should point to the first character of a line.  This routine scans past a line only if it could not contain a section reference.

Returns (i, done)
@c

def handle_newline(self,s,i):

	j = i ; done = false
	kind, end = self.token_type(s,i,dont_report_errors)
	# token_type will not skip whitespace in noweb mode.
	i = skip_ws(s,i)
	# trace(`kind` + "," + `get_line(s,i)`)

	if kind == plain_line:
		pass
	elif (kind == at_code or kind == at_doc or
		kind == at_root or kind == section_def):
		i = j ; done = true # Terminate this code section and rescan.
	elif kind == section_ref:
		# Enter the reference.
		ref = s[i:end]
		self.st_enter_section_name(ref,None,None,unused_parts_flag)
	elif kind == at_other or kind == at_chapter or kind == at_section:
		# We expect to see only @doc,@c or @root directives
		# while scanning a code section.
		i = skip_to_end_of_line(s,i)
		self.error("directive not valid here: " + s[j:i])
	elif kind == bad_section_name:
		if self.use_cweb_flag:
			i = skip_to_end_of_line(s,i)
	elif kind == at_web or kind == at_at:
		i += 2 # Skip a CWEB control code.
	else: assert(false)

	return i, done</t>
<t tx="T735"># This method handles all the body text.

def skip_body (self,v):

	# trace(`v`)
	s = v.bodyString()
	code_seen = false ; code = None ; anyChanged = false
	i, doc = self.skip_doc(s,0) # Start in doc section by default.
	if i &gt;= len(s) and doc:
		&lt;&lt; Define a section containing only an @doc part &gt;&gt;
	while i &lt; len(s):
		progress = i # progress indicator
		# line = get_line(s,i) ; trace(`line`)
		kind, end = self.token_type(s,i,report_errors)
		# if is_nl(s,i): i = skip_nl(s,i)
		i = skip_ws(s,i)
		if kind == section_def:
			&lt;&lt; Scan and define a section definition &gt;&gt;
		elif kind == at_code:
			if self.use_cweb_flag:
				i += 2 # Skip the at-c or at-p
			else:
				i = skip_line(s,i)
			&lt;&lt; Scan and define an @code defininition &gt;&gt;
		elif kind == at_root:
			i = skip_line(s,i)
			&lt;&lt; Scan and define a root section &gt;&gt;
		elif kind == at_doc:
			if self.use_cweb_flag:
				i += 2 # Skip the at-space
			else:
				i = skip_line(s,i)
			i, doc = self.skip_doc(s,i)
		elif kind == at_chapter or kind == at_section:
			i = skip_line(s,i)
			i, doc = self.skip_doc(s,i)
		else:
			i = skip_line(s,i)
		assert(progress &lt; i) # we must make progress!
	# 3/4/02: Only call v.trimTrailingLines if we have changed its body.
	if anyChanged:
		v.trimTrailingLines()</t>
<t tx="T736">@ The following subsections contain the interface between the Tangle and Untangle commands.  This interface is an important hack, and allows Untangle to avoid duplicating the logic in skip_tree and its allies.

The aha is this: just at the time the Tangle command enters a definition into the symbol table, all the information is present that Untangle needs to update that definition.

To get whitespace exactly right we retain the outline's leading whitespace and remove leading whitespace from the updated definition.
</t>
<t tx="T737">@ It's valid for an @doc directive to appear under a headline that does not contain a section name.  In that case, no section is defined.
@c

if self.header_name:

	# Tangle code.
	flag = choose(code_seen,allow_multiple_parts,disallow_multiple_parts)
	part = self.st_enter_section_name(self.header_name,code,doc,flag)

	# Untangle no longer updates doc parts.
	
doc = None</t>
<t tx="T738"># We enter the code part and any preceding doc part into the symbol table.

# Skip the section definition line.
k = i ; i, kind, junk = self.skip_section_name(s,i)
section_name = s[k:i]
# trace(`section_name`)
assert(kind == section_def)
i = skip_to_end_of_line(s,i)

# Tangle code: enter the section name even if the code part is empty.
j = skip_blank_lines(s,i)
i, code = self.skip_code(s,j)
flag = choose(kind==section_def,allow_multiple_parts,disallow_multiple_parts)
part = self.st_enter_section_name(section_name,code,doc,flag)
		
if not self.tangling: # Untangle code.
	head = s[:j] ; tail = s[i:]
	s,i,changed = self.update_def(section_name,part,head,code,tail,not_root_name)
	if changed: anyChanged = true
	
code = doc = None</t>
<t tx="T739"># All @c or @code directives denote &lt; &lt; headline_name &gt; &gt; =
if self.header_name:

	# Tangle code.
	j = skip_blank_lines(s,i)
	i, code = self.skip_code(s,j)
	flag = choose(code_seen,allow_multiple_parts,disallow_multiple_parts)
	part = self.st_enter_section_name(self.header_name,code,doc,flag)
	if not self.tangling: # Untangle code.
		head = s[:j] ; tail = s[i:]
		s,i,changed = self.update_def(self.header,part,head,code,tail,not_root_name)
		if changed: anyChanged = true
else:
	self.error("@c expects the headline: " + self.header + " to contain a section name")

code_seen = true
code = doc = None</t>
<t tx="T740"># We save the file name in case another @root ends the code section.
old_root_name = self.root_name

# Tangle code.
j = skip_blank_lines(s,i)
k, code = self.skip_code(s,j)
self.st_enter_root_name(old_root_name,code,doc)

if not self.tangling: # Untangle code.
	part = 1 # Use 1 for root part.
	head = s[:j] ; tail = s[k:]
	s,i,changed = self.update_def(old_root_name,part,head,code,tail,is_root_name)
	if changed: anyChanged = true
	
code = doc = None</t>
<t tx="T741">@ This method skips an entire code section. The caller is responsible for entering the completed section into the symbol table. On entry, i points at the line following the @directive or section definition that starts a code section. We skip code until we see the end of the body text or the next @ directive or section defintion that starts a code or doc part.
@c

def skip_code(self,s,i):

	# trace(`get_line(s,i)`)
	code1 = i
	nl_i = i # For error messages
	done = false # true when end of code part seen.
	if self.use_noweb_flag:
		&lt;&lt; skip a noweb code section &gt;&gt;
	else:
		&lt;&lt; skip a CWEB code section &gt;&gt;
	code = s[code1:i]
	# trace(returns: + `code`)
	return i,code</t>
<t tx="T742">@ This code handles the following escape conventions: double at-sign at the start of a line and at-&lt;&lt; and at.&gt;.
@c

i, done = self.handle_newline(s,i)
while not done and i &lt; len(s):
	ch = s[i]
	if is_nl(s,i):
		nl_i = i = skip_nl(s,i)
		i, done = self.handle_newline(s,i)
	elif ch == '@' and (match(s,i+1,"&lt;&lt;") or # must be on different lines
		match(s,i+1,"&gt;&gt;")):
		i += 3 # skip the noweb escape sequence.
	elif ch == '&lt;':
		&lt;&lt; handle possible noweb section reference &gt;&gt;
	else: i += 1</t>
<t tx="T743">j, kind, end = self.is_section_name(s,i)
if kind == section_def:
	k = skip_to_end_of_line(s,i)
	# We are in the middle of a line.
	i += 1
	self.error("chunk definition not valid here\n" + s[nl_i:k])
elif kind == bad_section_name:
	i += 1 # This is not an error.  Just skip the '&lt;'.
else:
	assert(kind == section_ref)
	# Enter the reference into the symbol table.
	name = s[i:end]
	self.st_enter_section_name(name,None,None,unused_parts_flag)
	i = end</t>
<t tx="T744"># This code is simple because CWEB control codes are valid anywhere.

while not done and i &lt; len(s):
	if s[i] == '@':
		&lt;&lt; handle CWEB control code &gt;&gt;
	else: i += 1</t>
<t tx="T745">j, kind, end = self.is_section_name(s,i)

if kind == section_def:
	done = true
elif kind == bad_section_name:
	i += 2 # Any other control code.
else:
	assert(kind == section_ref)
	# Enter the reference into the symbol table.
	name = s[i:j]
	self.st_enter_section_name(name,None,None,unused_parts_flag)
	i = j</t>
<t tx="T746">@ This function sets ivars that keep track of the indentation level. We also remember where the next line starts because it is assumed to be the first line of a documentation section.

A headline can contain a leading section name.  If it does, we substitute the section name if we see an @c directive in the body text.
@c

def skip_headline(self,v):

	# trace(`v`)
	self.header = s = v.headString()
	# Set self.header_name.
	j = i = skip_ws(s,0)
	i, kind, end = self.is_section_name(s,i)
	if kind == bad_section_name:
		self.header_name = None
	else:
		self.header_name = s[j:end]</t>
<t tx="T747"></t>
<t tx="T748">@ This function compares the interior of comments and returns true if they are identical except for whitespace or newlines. It is up to the caller to eliminate the opening and closing delimiters from the text to be compared.
@c

def compare_comments (self,s1,s2):

	tot_len = 0
	if self.comment: tot_len += len(self.comment)
	if self.comment_end: tot_len += len(self.comment_end)
	CWEB_flag = (self.language == c_language and not self.use_noweb_flag)
	
	p1, p2 = 0, 0
	while p1 &lt; len(s1) and p2 &lt; len(s2):
		p1 = skip_ws_and_nl(s1,p1)
		p2 = skip_ws_and_nl(s2,p2)
		if self.comment and self.comment_end:
			&lt;&lt; Check both parts for @ comment conventions &gt;&gt;
		if p1 &gt;= len(s1) or p2 &gt;= len(s2):
			break
		if s1[p1] != s2[p2]:
			return false
		p1 += 1 ; p2 += 1
	p1 = skip_ws_and_nl(s1,p1)
	p2 = skip_ws_and_nl(s2,p2)
	return p1 == len(s1) and p2 == len(s2)
</t>
<t tx="T749">@ This code is used in forgiving_compare()and in compare_comments().

In noweb mode we allow / * @ * /  (without the spaces)to be equal to @.
In CWEB mode we allow / * @ ? * / (without the spaces)to be equal to @?.
at-backslash is not a valid CWEB control code, so we don't have to equate
/ * @ \\ * / with at-backslash.

We must be careful not to run afoul of this very convention here!
@c

if p1 &lt; len(s1) and s1[p1] == '@':
	if match(s2,p2,self.comment + '@' + self.comment_end):
		p1 += 1
		p2 += tot_len + 1
		continue
	elif (CWEB_flag and s1[p1] == '@' and p1 + 1 &lt; len(s1) and
		match(s2,p2,self.comment + '@' + s1[p1+1])):
		p1 += 2
		p2 += tot_len + 2
		continue
elif p2 &lt; len(s2) and s2[p2] == '@':
	if match(s1,p1,self.comment + '@' + self.comment_end):
		p2 += 1
		p1 += tot_len + 1
		continue
	elif (CWEB_flag and s1[p1] == '@' and p1 + 1 &lt; len(s1) and
		match(s1,p1,self.comment + '@' + s2[p2+1])):
		p2 += 2
		p1 += tot_len + 2
		continue
</t>
<t tx="T750">@ This function is called to massage an @doc part in the ust. We call this routine only after a mismatch in @doc parts is found between the ust and tst. On entry, the parameters point to the inside of a block C comment: the opening and closing delimiters are not part of the text handled by self routine.

This code removes newlines that may have been inserted by the Tangle command in a block comment. Tangle may break lines differently in different expansions, but line breaks are ignored by forgiving_compare() and doc_compare() within block C comments.

We count the leading whitespace from the first non-blank line and remove this much whitespace from all lines. We also remove singleton newlines and replace sequences of two or more newlines by a single newline.
@c

def massage_block_comment (self,s):

	c = self.commands
	newlines = 0  # Consecutive newlines seen.
	i = skip_blank_lines(s,0)
	# Copy the first line and set n
	i, n = skip_leading_ws_with_indent(s,i,c.tab_width)
	j = i ; i = skip_to_end_of_line(s,i)
	result = s[j:i]
	while i &lt; len(s):
		assert(is_nl(s,i))
		newlines += 1
		# Replace the first newline with a blank.
		result += ' ' ; i += 1
		while i &lt; len(s) and is_nl(s,i):
			i += 1 # skip the newline.
		j = i ; i = skip_ws(s,i)
		if is_nl(s,i)and newlines &gt; 1:
			# Skip blank lines.
			while is_nl(s,i):
				i += 1
		else:
			# Skip the leading whitespace.
			i = j # back track
			i = skip_leading_ws(s,i,n,c.tab_width)
			newlines = 0
			# Copy the rest of the line.
			j = i ; i = skip_to_end_of_line(s,i)
			result += s[j:i]
	return result
</t>
<t tx="T751">@ This is the "forgiving compare" function.  It compares two texts and returns true if they are identical except for comments or non-critical whitespace.  Whitespace inside strings or preprocessor directives must match exactly.
@c

def forgiving_compare (self,name,part,s1,s2):

	# trace(`name` +":"+ `part` +"\n1:"+ `get_line(s1,0)` +"\n2:"+ `get_line(s2,0)`)
	&lt;&lt; Define forgiving_compare vars &gt;&gt;
	p1 = skip_ws_and_nl(s1,0) 
	p2 = skip_ws_and_nl(s2,0)
	result = true
	while result and p1 &lt; len(s1) and p2 &lt; len(s2):
		first1 = p1 ; first2 = p2
		if self.comment and self.comment_end:
			&lt;&lt; Check both parts for @ comment conventions &gt;&gt;
		ch1 = s1[p1]
		if ch1 == '\r' or ch1 == '\n':
			&lt;&lt; Compare non-critical newlines &gt;&gt;
		elif ch1 ==  ' ' or ch1 == '\t':
			&lt;&lt; Compare non-critical whitespace &gt;&gt;
		elif ch1 == '\'' or ch1 == '"':
			&lt;&lt; Compare possible strings &gt;&gt;
		elif ch1 == '#':
			&lt;&lt; Compare possible preprocessor directives &gt;&gt;
		elif ch1 == '&lt;' or ch1 == '@':
			&lt;&lt; Compare possible section references &gt;&gt;
		else:
			&lt;&lt; Compare comments or single characters &gt;&gt;
	&lt;&lt; Make sure both parts have ended &gt;&gt;
	if not result:
		&lt;&lt; trace the mismatch &gt;&gt;
	return result</t>
<t tx="T752"># scan_derived_file has set the ivars describing comment delims.
first1 = first2 = 0

tot_len = 0
if self.comment: tot_len += len(self.comment)
if self.comment_end: tot_len += len(self.comment_end)

CWEB_flag = (self.language == c_language and not self.use_noweb_flag)</t>
<t tx="T753">p1 = skip_ws_and_nl(s1,p1)
p2 = skip_ws_and_nl(s2,p2)
</t>
<t tx="T754">p1 = skip_ws(s1,p1)
p2 = skip_ws(s2,p2)</t>
<t tx="T755">if self.language == c_language:
	&lt;&lt; compare preprocessor directives &gt;&gt;
else:
	&lt;&lt; compare single characters &gt;&gt;
</t>
<t tx="T756">assert(p1 &lt; len(s1) and p2 &lt; len(s2))
result = s1[p1] == s2[p2]
p1 += 1 ; p2 += 1
if not result: self.mismatch("Mismatched single characters")</t>
<t tx="T757"># We cannot assume that newlines are single characters.

result = s1[p1] == s2[p2]
p1 += 1 ; p2 += 1
while result and p1 &lt; len(s1) and p2 &lt; len(s2):
	if is_nl(s1,p1):
		result = is_nl(s2,p2)
		if not result or self.is_end_of_directive(s1,p1):
			break
		p1 = skip_nl(s1,p1)
		p2 = skip_nl(s2,p2)
	else:
		result = s1[p1] == s2[p2]
		p1 += 1 ; p2 += 1
if not result:
	self.mismatch("Mismatched preprocessor directives")</t>
<t tx="T758"># This code implicitly assumes that string1_len == string2_len == 1.
# The match test ensures that the language actually supports strings.

if (match(s1,p1,self.string1) or match(s1,p1,self.string2)) and s1[p1] == s2[p2]:

	if self.language == pascal_language:
		&lt;&lt; Compare Pascal strings &gt;&gt;
	else:
		&lt;&lt; Compare C strings &gt;&gt;
	if not result:
		self.mismatch("Mismatched strings")
else:
	&lt;&lt; Compare single characters &gt;&gt;</t>
<t tx="T759">delim = s1[p1]
result = s1[p1] == s2[p2]
p1 += 1 ; p2 += 1

while result and p1 &lt; len(s1) and p2 &lt; len(s2):
	if s1[p1] == delim and self.is_end_of_string(s1,p1,delim):
		result =(s2[p2] == delim and self.is_end_of_string(s2,p2,delim))
		p1 += 1 ; p2 += 1
		break
	elif is_nl(s1,p1) and is_nl(s2,p2):
		p1 = skip_nl(s1,p1)
		p2 = skip_nl(s2,p2)
	else:
		result = s1[p1] == s2[p2]
		p1 += 1 ; p2 += 1
</t>
<t tx="T760">@ We assume the Pascal string is on a single line so the problems with cr/lf do not concern us.
@c

first1 = p1 ; first2 = p2
p1 = skip_pascal_string(s1,p1)
p2 = skip_pascal_string(s2,p2)
result = s1[first1,p1] == s2[first2,p2]
</t>
<t tx="T761">if s1[p1] == '@' and CWEB_flag:  start_ref = "@&lt;"
elif s1[p1] == '&lt;' and not CWEB_flag:  start_ref = "&lt;&lt;"
else: start_ref = None

# Tangling may insert newlines.
p2 = skip_ws_and_nl(s2,p2)

junk, kind1, junk2 = self.is_section_name(s1,p1)
junk, kind2, junk2 = self.is_section_name(s2,p2)

if start_ref and (kind1 != bad_section_name or kind2 != bad_section_name):
	result = self.compare_section_names(s1[p1:],s2[p2:])
	if result:
		p1, junk1, junk2 = self.skip_section_name(s1,p1)
		p2, junk1, junk2 = self.skip_section_name(s2,p2)
	else: self.mismatch("Mismatched section names")
else:
	# Neither p1 nor p2 points at a section name.
	result = s1[p1] == s2[p2]
	p1 += 1 ; p2 += 1
	if not result:
		self.mismatch("Mismatch at '@' or '&lt;'")</t>
<t tx="T762">if match(s1,p1,self.sentinel) and match(s2,p2,self.sentinel):
	first1 = p1 ; first2 = p2
	p1 = skip_to_end_of_line(s1,p1)
	p2 = skip_to_end_of_line(s2,p2)
	result = self.compare_comments(s1[first1:p1],s2[first2:p2])
	if not result:
		self.mismatch("Mismatched sentinel comments")
elif match(s1,p1,self.line_comment) and match(s2,p2,self.line_comment):
	first1 = p1 ; first2 = p2
	p1 = skip_to_end_of_line(s1,p1)
	p2 = skip_to_end_of_line(s2,p2)
	result = self.compare_comments(s1[first1:p1],s2[first2:p2])
	if not result:
		self.mismatch("Mismatched single-line comments")
elif match(s1,p1,self.comment) and match(s2,p2,self.comment):
	while (p1 &lt; len(s1) and p2 &lt; len(s2) and
		not match(s1,p1,self.comment_end) and not match(s2,p2,self.comment_end)):
		# ws doesn't have to match exactly either!
		if is_nl(s1,p1)or is_ws(s1[p1]):
			p1 = skip_ws_and_nl(s1,p1)
		else: p1 += 1
		if is_nl(s2,p2)or is_ws(s2[p2]):
			p2 = skip_ws_and_nl(s2,p2)
		else: p2 += 1
	p1 = skip_ws_and_nl(s1,p1)
	p2 = skip_ws_and_nl(s2,p2)
	if match(s1,p1,self.comment_end) and match(s2,p2,self.comment_end):
		first1 = p1 ; first2 = p2
		p1 += len(self.comment_end)
		p2 += len(self.comment_end)
		result = self.compare_comments(s1[first1:p1],s2[first2:p2])
	else: result = false
	if not result:
		self.mismatch("Mismatched block comments")
elif match(s1,p1,self.comment2) and match(s2,p2,self.comment2):
	while (p1 &lt; len(s1) and p2 &lt; len(s2) and
		not match(s1,p1,self.comment2_end) and not match(s2,p2,self.comment2_end)):
		# ws doesn't have to match exactly either!
		if  is_nl(s1,p1)or is_ws(s1[p1]):
			p1 = skip_ws_and_nl(s1,p1)
		else: p1 += 1
		if is_nl(s2,p2)or is_ws(s2[p2]):
			p2 = skip_ws_and_nl(s2,p2)
		else: p2 += 1
	p1 = skip_ws_and_nl(s1,p1)
	p2 = skip_ws_and_nl(s2,p2)
	if match(s1,p1,self.comment2_end) and match(s2,p2,self.comment2_end):
		first1 = p1 ; first2 = p2
		p1 += len(self.comment2_end)
		p2 += len(self.comment2_end)
		result = self.compare_comments(s1[first1:p1],s2[first2:p2])
	else: result = false
	if not result:
		self.mismatch("Mismatched alternalte block comments")
else:
	&lt;&lt; Compare single characters &gt;&gt;</t>
<t tx="T763">if result:
	p1 = skip_ws_and_nl(s1,p1)
	p2 = skip_ws_and_nl(s2,p2)
	result = p1 &gt;= len(s1) and p2 &gt;= len(s2)
	if not result:
		# Show the ends of both parts.
		p1 = len(s1)
		p2 = len(s2)
		self.mismatch("One part ends before the other.")</t>
<t tx="T764">if 0:
	trace(self.message +
		"\nPart " + `part` + ", section " + name +
		"\n1:" + get_line(s1,p1) +
		"\n2:" + get_line(s2,p2) )</t>
<t tx="T765">def mismatch (self,message):

	self.message = message</t>
<t tx="T766">@ This function scans an entire derived file in s, discovering section or part definitions.

This is the easiest place to delete leading whitespace from each line: we simply don't copy it.  We also ignore leading blank lines and trailing blank lines.  The resulting definition must compare equal using the "forgiving" compare to any other definitions of that section or part.

We use a stack to handle nested expansions.  The outermost level of expansion corresponds to the @root directive that created the file.  When the stack is popped, the indent variable is restored.
self.root_name is the name of the file mentioned in the @root directive.

The caller has deleted all body_ignored_newlines from the text.
@c

def scan_derived_file (self,s):

	c = self.commands
	self.def_stack = []
	&lt;&lt; set the private global matching vars &gt;&gt;
	line_indent = 0  # The indentation to use if we see a section reference.
	# indent is the leading whitespace to be deleted.
	i, indent = skip_leading_ws_with_indent(s,0,self.tab_width)
	&lt;&lt; Skip the header line output by tangle &gt;&gt;
	# The top level of the stack represents the root.
	self.push_new_def_node(self.root_name,indent,1,1,true)
	while i &lt; len(s):
		ch = s[i]
		if ch == body_ignored_newline:
			i += 1 # ignore
		elif ch == body_newline:
			&lt;&lt; handle the start of a new line &gt;&gt;
		elif match(s,i,self.sentinel) and self.is_sentinel_line(s,i):
			&lt;&lt; handle a sentinel line  &gt;&gt;
		elif match(s,i,self.line_comment) or match(s,i,self.verbatim):
			&lt;&lt; copy the entire line &gt;&gt;
		elif match(s,i,self.comment):
			&lt;&lt; copy a multi-line comment &gt;&gt;
		elif match(s,i,self.comment2):
			&lt;&lt; copy an alternate multi-line comment &gt;&gt;
		elif match(s,i,self.string1) or match(s,i,self.string2):
			&lt;&lt; copy a string &gt;&gt;
		else:
			self.copy(ch) ; i += 1
	&lt;&lt; end all open sections &gt;&gt;</t>
<t tx="T767"># Set defaults from the public globals set by the @comment command.
if self.single_comment_string:
	self.sentinel = self.single_comment_string
	self.sentinel_end = None
elif self.end_comment_string:
	self.sentinel = self.start_comment_string
	self.sentinel_end = self.end_comment_string
else:
	self.sentinel = self.sentinel_end = None
	
if 0:
	trace("single,start,end,sentinel:"+
		`self.single_comment_string` +":"+ `self.start_comment_string` +":"+
		`self.end_comment_string` +":"+ `self.sentinel`)

# Set defaults.  See set_delims_from_langauge.
self.line_comment = self.single_comment_string
self.comment = self.start_comment_string
self.comment_end = self.end_comment_string
self.comment2 = self.comment2_end = None
self.string1 = "\""
self.string2 = "'"
self.verbatim = None

# Set special cases.
if self.language == plain_text_language:
	self.string1 = self.string2 = None # This is debatable.
	self.line_comment = None
if self.language == pascal_language:
	self.comment2 = "(*" ; self.comment2_end = "*)"</t>
<t tx="T768">if self.sentinel or self.comment:
	line = choose(self.sentinel,self.sentinel,self.comment) + " Created by Leo from" 
	if match(s,i,line):
		# Even a block comment will end on the first line.
		i = skip_to_end_of_line(s,i)</t>
<t tx="T769">self.copy(ch) ; i += 1 # This works because we have one-character newlines.

# Set line_indent, used only if we see a section reference.
junk, line_indent = skip_leading_ws_with_indent(s,i,c.tab_width)
i = skip_leading_ws(s,i,indent,c.tab_width) # skip indent leading white space.</t>
<t tx="T770">@ This is the place to eliminate the proper amount of whitespace from the start of each line. We do this by setting the 'indent' variable to the leading whitespace of the first _non-blank_ line following the opening sentinel.

Tangle increases the indentation by one tab if the section reference is not the first non-whitespace item on the line,so self code must do the same.
@c

# trace(`get_line(s,i)`)
result,junk,kind,name,part,of,end,nl_flag = self.is_sentinel_line_with_data(s,i)
assert(result==true)
&lt;&lt; terminate the previous part of this section if it exists &gt;&gt;

if kind == start_sentinel_line:
	indent = line_indent
	# Increase line_indent by one tab width if the
	# the section reference does not start the line.
	j = i - 1
	while j &gt;= 0:
		if is_nl(s,j):
			break
		elif not is_ws(s[j]):
			indent += abs(self.tab_width) ; break
		j -= 1
	# copy the section reference to the _present_ section,
	# but only if this is the first part of the section.
	if part &lt; 2: self.copy(name)
	# Skip to the first character of the new section definition.
	i = skip_to_end_of_line(s,i)
	# Start the new section.
	self.push_new_def_node(name,indent,part,of,nl_flag)
else:
	assert(kind == end_sentinel_line)
	# Skip the sentinel line.
	i = skip_to_end_of_line(s,i)
	# Skip a newline only if it was added after(!newline)
	if not nl_flag:
		i = skip_ws(s,i)
		i = skip_nl(s,i)
		i = skip_ws(s,i)
		# Copy any whitespace following the (!newline)
		while end and is_ws(s[end]):
			self.copy(s[end])
			end += 1
	# Restore the old indentation level.
	if len(self.def_stack) &gt; 0:
		indent = self.def_stack[-1].indent</t>
<t tx="T771">@ We have just seen a sentinel line. Any kind of sentinel line will terminate a previous part of the present definition. For end sentinel lines, the present section name must match the name on the top of the stack.
@c

if len(self.def_stack) &gt; 0:
	dn = self.def_stack[-1]
	if self.compare_section_names(name,dn.name):
		dn = self.def_stack.pop()
		if len(dn.code) &gt; 0:
			thePart, found = self.ust_lookup(name,dn.part,false,false) # not root, not update
			# Check for incompatible previous definition.
			if found and not self.forgiving_compare(name,dn.part,dn.code,thePart.code):
				self.error("Incompatible definitions of " + name)
			elif not found:
				self.ust_enter(name,dn.part,dn.of,dn.code,dn.nl_flag,false) # not root
	elif kind == end_sentinel_line:
		self.error("Missing sentinel line for: " + name)</t>
<t tx="T772">j = i ; i = skip_to_end_of_line(s,i)
self.copy(s[j:i])
</t>
<t tx="T773">j = i
if self.language == pascal_language:
	i = skip_pascal_string(s,i)
else:
	i = skip_string(s,i)
self.copy(s[j:i])</t>
<t tx="T774">assert(self.comment_end)

# Scan for the ending delimiter.
j = i ; i += len(self.comment)
while i &lt; len(s) and not match(s,i,self.comment_end):
	i += 1
if match(s,i,self.comment_end):
	i += len(self.comment_end)
self.copy(s[j:i])</t>
<t tx="T775">assert(self.comment2_end)
j = i
# Scan for the ending delimiter.
i += len(self.comment2)
while i &lt; len(s) and not match(s,i,self.comment2_end):
	i += 1
if match(s,i,self.comment2_end):
	i += len(self.comment2)
self.copy(s[j:i])</t>
<t tx="T776">dn= None
while len(self.def_stack) &gt; 0:
	dn = self.def_stack.pop()
	if len(self.def_stack) &gt; 0:
		self.error("Unterminated section: " + dn.name)
if dn:
	# Terminate the root setcion.
	i = len(s)
	if dn.code and len(dn.code) &gt; 0:
		self.ust_enter(dn.name,dn.part,dn.of,dn.code,dn.nl_flag,true) # is_root_flag
	else:
		self.error("Missing root part")
else:
	self.error("Missing root section")</t>
<t tx="T777">@ This function handles the actual updating of section definitions in the web.  Only code parts are updated, never doc parts.

During pass 2 of Untangle, skip_body() calls this routine when it discovers the definition of a section in the outline.  We look up the name in the ust. If an entry exists, we compare the code (the code part of an outline node) with the code part in the ust. We update the code part if necessary.

We use the forgiving_compare() to compare code parts. It's not possible to change only trivial whitespace using Untangle because forgiving_compare() ignores trivial whitespace.
@c

# Major change: 2/23/01: Untangle never updates doc parts.

def update_def (self,name,part_number,head,code,tail,is_root_flag): # Doc parts are never updated!

	# trace(`name` + ":" + `part_number` + ":" + `code`)
	v = self.v ; body = v.bodyString()
	if not head: head = ""
	if not tail: tail = ""
	if not code: code = ""
	false_ret = head + code + tail, len(head) + len(code), false
	part, found = self.ust_lookup(name,part_number,is_root_flag,true) # Set update
	if not found:
		return false_ret  # Not an error.
	ucode = part.code
	&lt;&lt; Remove leading blank lines and comments from ucode &gt;&gt;
	# trace(`ucode`)
	if not ucode or len(ucode) == 0:
		return false_ret # Not an error.
	if code and self.forgiving_compare(name,part,code,ucode):
		return false_ret # Not an error.
	# Update the body.
	es("***Updating: " + v.headString())
	i = skip_blank_lines(ucode,0)
	ucode = ucode[i:]
	ucode = string.rstrip(ucode)
	# Add the trailing whitespace of code to ucode.
	code2 = string.rstrip(code)
	trail_ws = code[len(code2):]
	ucode = ucode + trail_ws
	body = head + ucode + tail
	self.update_current_vnode(body)
	if 0:
		trace("head:" + `head`)
		trace("ucode:" + `ucode`)
		trace("tail:" + `tail`)
	return body, len(head) + len(ucode),true
</t>
<t tx="T778">@ We assume that any leading comments came from an @doc part.  This isn't always valid and this code will eliminate such leading comments.  This is a defect in Untangle; it can hardly be avoided.
@c

i = skip_blank_lines(ucode,0)
j = skip_ws(ucode,i)
# trace("comment,end,single:"+`self.comment`+":"+`self.comment_end`+":"+`self.line_comment`)

if self.comment and self.comment_end:
	if ucode and match(ucode,j,self.comment):
		# Skip to the end of the block comment.
		i = j + len(self.comment)
		i = string.find(ucode,self.comment_end,i)
		if i == -1: ucode = None # An unreported problem in the user code.
		else:
			i += len(self.comment_end)
			i = skip_blank_lines(ucode,i)
elif self.line_comment:
	while ucode and match(ucode,j,self.line_comment):
		i = skip_line(ucode,i)
		i = skip_blank_lines(ucode,i)
		j = skip_ws(ucode,i)
# Only the value of ucode matters here.
if ucode: ucode = ucode[i:]</t>
<t tx="T779">@ This function is called from within the Untangle logic to update the body text of self.v.
@c

def update_current_vnode (self,s):

	c = self.commands ; v = self.v
	assert(self.v)
	v.setBodyStringOrPane(s)

	c.beginUpdate()
	c.setChanged(true)
	v.setDirty()
	v.setMarked()
	c.endUpdate()</t>
<t tx="T780"></t>
<t tx="T781">def ust_dump (self):

	s = "\n---------- Untangle Symbol Table ----------"
	keys = self.ust.keys()
	keys.sort()
	for name in keys:
		section = self.ust[name]
		s += "\n\n" + section.name
		for part in section.parts.values():
			assert(part.of == section.of)
			s += "\n----- part " + `part.part` + " of " + `part.of` + " -----\n"
			s += `get_line(part.code,0)`
	s += "\n--------------------"
	return s</t>
<t tx="T782">@ This routine enters names and their code parts into the given table. The 'part' and 'of' parameters are taken from the "(part n of m)" portion of the line that introduces the section definition in the C code.

If no part numbers are given the caller should set the 'part' and 'of' parameters to zero.  The caller is reponsible for checking for duplicate parts.

This function handles names scanned from a source file; the corresponding st_enter routine handles names scanned from outlines.
@c

def ust_enter (self,name,part,of,code,nl_flag,is_root_flag):

	if not is_root_flag:
		name = self.standardize_name(name)
	&lt;&lt; remove blank lines from the start and end of the text &gt;&gt;
	u = ust_node(name,code,part,of,nl_flag,false) # update_flag
	if not self.ust.has_key(name):
		self.ust[name] = u
	section = self.ust[name]
	section.parts[part]=u # Parts may be defined in any order.
	# trace("section name: [" + name + "](" + `part` + " of " + `of` + ")..."+`get_line(code,0)`)</t>
<t tx="T783">i = skip_blank_lines(code,0)
if i &gt; 0:
	code = code[i:]
	code = string.rstrip(code)
</t>
<t tx="T784"># Searches the given table for a part matching the name and part number.

def ust_lookup (self,name,part_number,is_root_flag,update_flag):
	
	# trace(`name` + ":" + `part_number`)
	
	if not is_root_flag:
		name = self.standardize_name(name)

	if part_number == 0: part_number = 1 # A hack: zero indicates the first part.
	if self.ust.has_key(name):
		section = self.ust[name]
		if section.parts.has_key(part_number):
			part = section.parts[part_number]
			if update_flag: part.update_flag = true
			# trace("found:" + name + " (" + `part_number` + ")...\n" + `get_line(part.code,0)`)
			return part, true

	# trace("not found:" + name + " (" + `part_number` + ")...\n")
	return None, false</t>
<t tx="T785">@ This function issues a warning about any sections in the derived file for which no corresponding section has been seen in the outline.
@c

def ust_warn_about_orphans (self):

	for section in self.ust.values():
		# trace(`section`)
		for part in section.parts.values():
			assert(part.of == section.of)
			if not part.update_flag:
				es("Warning: " +
					choose(self.use_noweb_flag,"&lt;&lt; ","@&lt; ") +
					part.name +
					choose(self.use_noweb_flag," &gt;&gt;"," @&gt;") +
					" is not in the outline")
				break # One warning per section is enough.</t>
<t tx="T786">@ These utilities deal with tangle ivars, so they should be methods.
</t>
<t tx="T787"># Compares section names or root names.
# Arbitrary text may follow the section name on the same line.

def compare_section_names (self,s1,s2):

	# trace(`get_line(s1,0)` + ":" + `get_line(s2,0)`)
	if match(s1,0,"&lt;&lt;") or match(s1,0,"@&lt;"):
		# Use a forgiving compare of the two section names.
		delim = choose(self.use_cweb_flag,"@&gt;","&gt;&gt;")
		i1 = i2 = 0
		while i1 &lt; len(s1) and i2 &lt; len(s2):
			ch1 = s1[i1] ; ch2 = s2[i2]
			if is_ws(ch1) and is_ws(ch2):
				i1 = skip_ws(s1,i1)
				i2 = skip_ws(s2,i2)
			elif match(s1,i1,delim) and match(s2,i2,delim):
				return true
			elif string.lower(ch1) == string.lower(ch2):
				i1 += 1 ; i2 += 1
			else: return false
		return false
	else: # A root name.
		return s1 == s2</t>
<t tx="T788">def copy (self, s):

	assert(len(self.def_stack) &gt; 0)
	dn = self.def_stack[-1] # Add the code at the top of the stack.
	dn.code += s</t>
<t tx="T789">def error (self,s):

	self.errors += 1
	es(s)
	
def warning (self,s):

	es(s)</t>
<t tx="T790"># This function returns true if we are at the end of preprocessor directive.

def is_end_of_directive (self,s,i):

	return is_nl(s,i) and not self.is_escaped(s,i)</t>
<t tx="T791">def is_end_of_string (self,s,i,delim):

	return i &lt; len(s) and s[i] == delim and not self.is_escaped(s,i)</t>
<t tx="T792"># This function returns true if the s[i] is preceded by an odd number of back slashes.

def is_escaped (self,s,i):

	back_slashes = 0 ; i -= 1
	while i &gt;= 0 and s[i] == '\\':
		back_slashes += 1
		i -= 1
	return (back_slashes &amp; 1) == 1
</t>
<t tx="T793">def is_section_name(self,s,i):

	kind = bad_section_name ; end = -1

	if self.use_cweb_flag :
		if match(s,i,"@&lt;"):
			i, kind, end = self.skip_cweb_section_name(s,i)
	elif match(s,i,"&lt;&lt;"):
		i, kind, end = self.skip_noweb_section_name(s,i)

	# trace(`kind` + ":" + `get_line(s,end)`)
	return i, kind, end</t>
<t tx="T794">@ This function returns true if i points to a line a sentinel line of one of the following forms:

start_sentinel &lt;&lt;section name&gt;&gt; end_sentinel
start_sentinel &lt;&lt;section name&gt;&gt; (n of m) end_sentinel
start_sentinel -- end -- &lt;&lt;section name&gt;&gt; end_sentinel
start_sentinel -- end -- &lt;&lt;section name&gt;&gt; (n of m) end_sentinel

start_sentinel: the string that signals the start of sentinel lines\
end_sentinel:   the string that signals the endof sentinel lines.

end_sentinel may be None,indicating that sentinel lines end with a newline.

Any of these forms may end with (!newline), indicating that the section reference was not followed by a newline in the orignal text.  We set nl_flag to false if such a string is seen. The name argument contains the section name.

The valid values of kind param are:

non_sentinel_line,   # not a sentinel line.
start_sentinel_line, #   /// &lt;section name&gt; or /// &lt;section name&gt;(n of m)
end_sentinel_line  //  /// -- end -- &lt;section name&gt; or /// -- end -- &lt;section name&gt;(n of m).
@c
def is_sentinel_line (self,s,i):

	result,i,kind,name,part,of,end,nl_flag = self.is_sentinel_line_with_data(s,i)
	return result

def is_sentinel_line_with_data (self,s,i):

	start_sentinel = self.sentinel
	end_sentinel = self.sentinel_end
	&lt;&lt; Initialize the return values &gt;&gt;
	&lt;&lt; Make sure the line starts with start_sentinel &gt;&gt;
	&lt;&lt; Set end_flag if we have -- end -- &gt;&gt;
	&lt;&lt; Make sure we have a section reference &gt;&gt;
	&lt;&lt; Set part and of if they exist &gt;&gt;
	&lt;&lt; Set nl_flag to false if !newline exists &gt;&gt;
	&lt;&lt; Make sure the line ends with end_sentinel &gt;&gt;
	kind = choose(end_flag,end_sentinel_line,start_sentinel_line)
	return true,i,kind,name,part,of,end,nl_flag</t>
<t tx="T795">name = end = None
part = of = 1
kind = non_sentinel_line
nl_flag = true
false_data = (false,i,kind,name,part,of,end,nl_flag)
</t>
<t tx="T796">if is_nl(s,i): i = skip_nl(s,i)
i = skip_ws(s,i)

# 4/18/00: We now require an exact match of the sentinel.
if match(s,i,start_sentinel):
	i += len(start_sentinel)
else:
	return false_data</t>
<t tx="T797"># If i points to "-- end --", this code skips it and sets end_flag.

end_flag = false
i = skip_ws(s,i)
if match(s,i,"--"):
	while i &lt; len(s) and s[i] == '-':
		i += 1
	i = skip_ws(s,i)
	if not match(s,i,"end"):
		return false_data # Not a valid sentinel line.
	i += 3 ; i = skip_ws(s,i)
	if not match(s,i,"--"):
		return false_data # Not a valid sentinel line.
	while i &lt; len(s) and s[i] == '-':
		i += 1
	end_flag = true</t>
<t tx="T798">i = skip_ws(s,i)

if (self.use_noweb_flag and match(s,i,"&lt;&lt;") or
	self.use_cweb_flag  and match(s,i,"@&lt;") ):

	j = i ; i, kind, end = self.skip_section_name(s,i)
	if kind != section_ref:
		return false_data
	name = s[j:i]
else:
	return false_data</t>
<t tx="T799"># This code handles (m of n), if it exists.
i = skip_ws(s,i)
if match(s,i,'('):
	j = i
	i += 1 ; i = skip_ws(s,i)
	i, part = self.scan_short_val(s,i)
	if part == -1:
		i = j # back out of the scanning for the number.
		part = 1
	else:
		i = skip_ws(s,i)
		if not match(s,i,"of"):
			return false_data
		i += 2 ; i = skip_ws(s,i)
		i, of = self.scan_short_val(s,i)
		if of == -1:
			return false_data
		i = skip_ws(s,i)
		if match(s,i,')'):
			i += 1 # Skip the paren and do _not_ return.
		else:
			return false_data</t>
<t tx="T800">line = "(!newline)"
i = skip_ws(s,i)
if match(s,i,line):
	i += len(line)
	nl_flag = false
</t>
<t tx="T801">i = skip_ws(s,i)
if end_sentinel:
	# Make sure the line ends with the end sentinel.
	if match(s,i,end_sentinel):
		i += len(end_sentinel)
	else:
		return false_data

end = i # Show the start of the whitespace.
i = skip_ws(s,i)
if i &lt; len(s) and not is_nl(s,i):
	return false_data</t>
<t tx="T802"># This function pushes a new def_node on the top of the section stack.

def push_new_def_node (self,name,indent,part,of,nl_flag):
		
	# trace(`name` + ":" + `part`)
	node = def_node(name,indent,part,of,nl_flag,None)
	self.def_stack.append(node)</t>
<t tx="T803"># This function scans a positive integer.
# returns (i,val), where val == -1 if there is an error.

def scan_short_val (self,s,i):

	if i &gt;= len(s) or s[i] not in string.digits:
		return i, -1

	j = i
	while i &lt; len(s) and s[i] in string.digits:
		i += 1

	val = int(s[j:i])
	# trace(s[j:i] + ":" + `val`)
	return i, val</t>
<t tx="T804">def set_root_delims(self,s):

	(self.single_comment_string,
	self.start_comment_string,
	self.end_comment_string) = set_delims_from_string(s)</t>
<t tx="T805">def setRootFromHeadline (self,v):

	# trace(`v`)
	s = v.headString()

	if s[0:5] == "@root":
		i = skip_ws(s,5)
		if i &lt; len(s): # Non-empty file name.
			# self.root_name must be set later by token_type().
			self.root = s</t>
<t tx="T806">@ This code skips the file name used in @root directives.  i points after the @root directive.

File names may be enclosed in &lt; and &gt; characters, or in double quotes.  If a file name is not enclosed be these delimiters it continues until the next newline.
@c
def setRootFromText(self,s,err_flag):
	
	# trace(`s`)
	self.root_name = None
	i = skip_ws(s,0)
	if i &gt;= len(s): return i
	# Allow &lt;&gt; or "" as delimiters, or a bare file name.
	if s[i] == '"':
		i += 1 ; delim = '"'
	elif s[i] == '&lt;':
		i += 1 ; delim = '&gt;'
	else: delim = body_newline

	root1 = i # The name does not include the delimiter.
	while i &lt; len(s) and s[i] != delim and not is_nl(s,i):
		i += 1
	root2 = i

	if delim != body_newline and not match(s,i,delim):
		if err_flag:
			scanError("bad filename in @root " + s[:i])
	else:
		self.root_name = string.strip(s[root1:root2])
	return i</t>
<t tx="T807">@ This function skips past a section name that starts with @&lt; and ends with @&gt;. This code also skips any = following the section name.

Returns (i, kind, end), where kind is:

	bad_section_name:  @ &lt; with no matching @ &gt;
	section_ref: @ &lt; name @ &gt;
	section_def: @ &lt; name @ &gt; =

Unlike noweb, bad section names generate errors.
@c

def skip_cweb_section_name(self,s,i):
	
	j = i # Used for error message.
	kind = bad_section_name ; end = -1
	runon = false ; empty_name = true
	assert(s[i:i+2]=="@&lt;")
	i += 2
	while i &lt; len(s):
		if match(s,i,"@&gt;="):
			i += 3 ; end = i-1 ; kind = section_def ; break
		elif match(s,i,"@&gt;"):
			i += 2 ; end = i ; kind = section_ref ; break
		elif match(s,i,"@&lt;"):
			runon = true ; break
		elif match(s,i,"@@"): i += 2
		elif is_ws_or_nl(s,i): i += 1
		else:
			i += 1 ; empty_name = false

	if empty_name:
		scanError("empty CWEB section name: " + s[j:i])
		return i, bad_section_name, -1
	elif i &gt;= len(s) or runon:
		scanError("Run on CWEB section name: " + s[j:i])
		return i, bad_section_name, -1
	else:
		return i, kind, end</t>
<t tx="T808">@ This function skips past a section name that starts with &lt; &lt; and might end with &gt; &gt; or &gt; &gt; =. The entire section name must appear on the same line.

Note: this code no longer supports extended noweb mode.

Returns (i, kind, end),
	end indicates the end of the section name itself (not counting the =).
	kind is one of:
		bad_section_name: "no matching "&gt;&gt;" or "&gt;&gt;"  This is _not_ a user error!
		section_ref: &lt; &lt; name &gt; &gt;
		section_def: &lt; &lt; name &gt; &gt; =
		at_root:     &lt; &lt; * &gt; &gt; =
@c
def skip_noweb_section_name(self,s,i):
	
	assert(match(s,i,"&lt;&lt;"))
	i += 2
	j = i # Return this value if no section name found.
	kind = bad_section_name ; end = -1 ; empty_name = true

	# Scan for the end of the section name.
	while i &lt; len(s) and not is_nl(s,i):
		if match(s,i,"&gt;&gt;="):
			i += 3 ; end = i - 1 ; kind = section_def ; break
		elif match(s,i,"&gt;&gt;"):
			i += 2 ; end = i ; kind = section_ref ; break
		elif is_ws_or_nl(s,i):
			i += 1
		elif empty_name and s[i] == '*':
			empty_name = false
			i = skip_ws(s,i+1) # skip the '*'
			if match(s,i,"&gt;&gt;="):
				i += 3 ; end = i - 1 ; kind = at_root ; break
		else:
			i += 1 ; empty_name = false

	if empty_name:
		kind = bad_section_name
	if kind == bad_section_name:
		i = j
	return i, kind, end</t>
<t tx="T809"># Returns a tuple (i, kind, end)

def skip_section_name(self,s,i):

	if self.use_noweb_flag:
		return self.skip_noweb_section_name(s,i)
	else:
		return self.skip_cweb_section_name(s,i)</t>
<t tx="T810">@ This code removes leading and trailing brackets, converts white space to a single blank and converts to lower case.
@c

def standardize_name (self,name):

	# Convert to lowercase.
	name = string.lower(name)
	# Convert whitespace to a single space.
	name = string.replace(name,'\t',' ')
	name = string.replace(name,'  ',' ')
	# Remove leading '&lt;'
	i = 0 ; n = len(name)
	while i &lt; n and name[i] == '&lt;':
		i += 1
	j = i
	# Find the first '&gt;'
	while i &lt; n and name [i] != '&gt;':
		i += 1
	name = string.strip(name[j:i])
	# trace(`name`)
	return name</t>
<t tx="T811">@ignore</t>
<t tx="T812">def __init__(self,frame):

	# trace("__init__", "c.__init__")
	self.frame = frame
	self.initIvars(frame)

	# initialize the sub-commanders
	self.fileCommands = leoFileCommands.fileCommands(self)
	self.atFileCommands = leoAtFile.atFile(self)
	self.importCommands = leoImport.leoImportCommands(self)
	self.tangleCommands = leoTangle.tangleCommands(self)
	self.undoer = leoUndo.undoer(self)

def initIvars(self, frame):
	&lt;&lt; initialize ivars &gt;&gt;</t>
<t tx="T813"># per-document info...
self.openDirectory = None # 7/2/02

self.expansionLevel = 0  # The expansion level of this outline.
self.changed = false # true if any data has been changed since the last save.
self.loading = false # true if we are loading a file: disables c.setChanged()

# copies of frame info
self.body = frame.body
self.log = frame.log
self.tree = frame.tree
self.canvas = frame.canvas

# For tangle/untangle
self.tangle_errrors = 0

# Global options
self.page_width = 132
self.tab_width = 4
self.tangle_batch_flag = false
self.untangle_batch_flag = false
# Default Tangle options
self.tangle_directory = ""
self.use_header_flag = false
self.output_doc_flag = false
# Default Target Language
self.target_language = None # c_language

self.setIvarsFromFind()</t>
<t tx="T814">def resizePanesToRatio(self,ratio):

	self.divideLeoSplitter(self.splitVerticalFlag, ratio)
</t>
<t tx="T815"># The key invariant: self.splitVerticalFlag tells the alignment of the main splitter.

def OnToggleSplitDirection(self,event=None):
	# Abbreviations.
	frame = self ; c = frame.commands
	bar1 = self.bar1 ; bar2 = self.bar2
	split1Pane1,split1Pane2 = self.split1Pane1,self.split1Pane2
	split2Pane1,split2Pane2 = self.split2Pane1,self.split2Pane2
	# Switch directions.
	verticalFlag = self.splitVerticalFlag = not self.splitVerticalFlag
	# Reconfigure the bars.
	bar1.place_forget()
	bar2.place_forget()
	self.configureBar(bar1,verticalFlag)
	self.configureBar(bar2,not verticalFlag)
	# Make the initial placements again.
	self.placeSplitter(bar1,split1Pane1,split1Pane2,verticalFlag)
	self.placeSplitter(bar2,split2Pane1,split2Pane2,not verticalFlag)
	# Adjust the log and body panes to give more room around the bars.
	self.reconfigurePanes()
	# Redraw with an appropriate ratio.
	ratio = choose(verticalFlag,0.5,0.3)
	self.resizePanesToRatio(ratio)
	return "break" # inhibit further command processing</t>
<t tx="T816">@ The key invariants used throughout this code:

1. self.splitVerticalFlag tells the alignment of the main splitter and
2. not self.splitVerticalFlag tells the alignment of the secondary splitter.

Only the general-purpose divideAnySplitter routine doesn't know about these invariants.  So most of this code is specialized for Leo's window.  OTOH, creating a single splitter window would be much easier than this code.
</t>
<t tx="T817">def bindBar (self, bar, verticalFlag):
	
	if verticalFlag == self.splitVerticalFlag:
		bar.bind("&lt;B1-Motion&gt;", self.onDragMainSplitBar)
	else:
		bar.bind("&lt;B1-Motion&gt;", self.onDragSecondarySplitBar)</t>
<t tx="T818">def configureBar (self, bar, verticalFlag):

	if verticalFlag:
		# Panes arranged vertically; horizontal splitter bar
		bar.configure(height=7,cursor="sb_v_double_arrow")
	else:
		# Panes arranged horizontally; vertical splitter bar
		bar.configure(width=7,cursor="sb_h_double_arrow")</t>
<t tx="T819">def createBothLeoSplitters (self,top):

	Tk = Tkinter
	# Splitter 1 is the main splitter containing splitter2 and the body pane.
	f1,bar1,split1Pane1,split1Pane2 = self.createLeoSplitter(top, self.splitVerticalFlag)
	self.f1,self.bar1 = f1,bar1
	self.split1Pane1,self.split1Pane2 = split1Pane1,split1Pane2
	# Splitter 2 is the secondary splitter containing the tree and log panes.
	f2,bar2,split2Pane1,split2Pane2 = self.createLeoSplitter(split1Pane1, not self.splitVerticalFlag)
	self.f2,self.bar2 = f2,bar2
	self.split2Pane1,self.split2Pane2 = split2Pane1,split2Pane2
	&lt;&lt; set the font for the body pane &gt;&gt;
	&lt;&lt; create the body pane &gt;&gt;
	&lt;&lt; create the tree pane &gt;&gt;
	&lt;&lt; create the log pane &gt;&gt;
	# Give the log and body panes the proper borders.
	self.reconfigurePanes()</t>
<t tx="T820"># Verdana is good looking, but not fixed size.
# Courier is fixed size, not great looking.
# A light selectbackground value is needed to make syntax coloring look good.

# EKR 2/28/02: made code size platform dependent.
if sys.platform=="win32": # Windows
	font = tkFont.Font(family="Courier",size=9)
else:
	font = tkFont.Font(family="Courier",size=12)</t>
<t tx="T821">self.body = body = Tk.Text(split1Pane2,name='body',
	bd=2,bg="white",relief="flat",
	setgrid=1,font=font,wrap="word",selectbackground="Gray80")

self.bodyBar = bodyBar = Tk.Scrollbar(split1Pane2,name='bodyBar')

body['yscrollcommand'] = bodyBar.set
bodyBar['command'] = body.yview

bodyBar.pack(side="right", fill="y")
body.pack(expand=1, fill="both")</t>
<t tx="T822">self.canvas = tree = Tk.Canvas(split2Pane1,name="tree",
	bd=0,bg="white",relief="flat")

# These do nothing...
# selectborderwidth=0,selectforeground="white",selectbackground="white")
self.treeBar = treeBar = Tk.Scrollbar(split2Pane1,name="treeBar")

tree['yscrollcommand'] = treeBar.set
treeBar['command'] = tree.yview

treeBar.pack(side="right", fill="y")
tree.pack(expand=1,fill="both")</t>
<t tx="T823">self.log = log = Tk.Text(split2Pane2,name="log",
	setgrid=1,wrap="word",bd=2,bg="white",relief="flat")

self.logBar = logBar = Tk.Scrollbar(split2Pane2,name="logBar")

log['yscrollcommand'] = logBar.set
logBar['command'] = log.yview

logBar.pack(side="right", fill="y")
log.pack(expand=1, fill="both")</t>
<t tx="T824"># Create a splitter window and panes into which the caller packs widgets.
# Returns (f, bar, pane1, pane2)

# To do: use config.window_height config.window_width
# To do: use config.bar_color, config.bar_relief

def createLeoSplitter (self, parent, verticalFlag):

	Tk = Tkinter
	# Create the frames.
	f = Tk.Frame(parent,width="8i",height="6.5i",bd=0,bg="white",relief="flat")
	f.pack(expand=1,fill="both")
	pane1 = Tk.Frame(f,bd=0,bg="white",relief="flat")
	pane2 = Tk.Frame(f,bg="white",relief="flat")
	bar =   Tk.Frame(f,bd=2,relief="raised",bg="LightSteelBlue2")
	# Configure and place the frames.
	self.configureBar(bar,verticalFlag)
	self.bindBar(bar,verticalFlag)
	self.placeSplitter(bar,pane1,pane2,verticalFlag)
	
	return f, bar, pane1, pane2</t>
<t tx="T825"># This is the general-purpose placer for splitters.
# It is the only general-purpose splitter code in Leo.

def divideAnySplitter (self, frac, verticalFlag, bar, pane1, pane2):

	if verticalFlag:
		# Panes arranged vertically; horizontal splitter bar
		bar.place(rely=frac)
		pane1.place(relheight=frac)
		pane2.place(relheight=1-frac)
	else:
		# Panes arranged horizontally; vertical splitter bar
		bar.place(relx=frac)
		pane1.place(relwidth=frac)
		pane2.place(relwidth=1-frac)</t>
<t tx="T826"># Divides the main or secondary splitter, using the key invariant.
def divideLeoSplitter (self, verticalFlag, frac):
	if self.splitVerticalFlag == verticalFlag:
		self.divideLeoSplitter1(frac,verticalFlag)
		self.ratio = frac # Ratio of body pane to tree pane.
	else:
		self.divideLeoSplitter2(frac,verticalFlag)

# Divides the main splitter.
def divideLeoSplitter1 (self, frac, verticalFlag): 
	self.divideAnySplitter(frac, verticalFlag,
		self.bar1, self.split1Pane1, self.split1Pane2)

# Divides the secondary splitter.
def divideLeoSplitter2 (self, frac, verticalFlag): 
	self.divideAnySplitter (frac, verticalFlag,
		self.bar2, self.split2Pane1, self.split2Pane2)</t>
<t tx="T827">def onDragMainSplitBar (self, event):
	self.onDragSplitterBar(event,self.splitVerticalFlag)
	
def onDragSecondarySplitBar (self, event):
	self.onDragSplitterBar(event,not self.splitVerticalFlag)

def onDragSplitterBar (self, event, verticalFlag):

	# x and y are the coordinates of the cursor relative to the bar, not the main window.
	bar = event.widget
	x = event.x
	y = event.y
	top = bar.winfo_toplevel()

	if verticalFlag:
		# Panes arranged vertically; horizontal splitter bar
		wRoot	= top.winfo_rooty()
		barRoot = bar.winfo_rooty()
		wMax	= top.winfo_height()
		offset = float(barRoot) + y - wRoot
	else:
		# Panes arranged horizontally; vertical splitter bar
		wRoot	= top.winfo_rootx()
		barRoot = bar.winfo_rootx()
		wMax	= top.winfo_width()
		offset = float(barRoot) + x - wRoot

	# Adjust the pixels, not the frac.
	if offset &lt; 3: offset = 3
	if offset &gt; wMax - 2: offset = wMax - 2
	# Redraw the splitter as the drag is occuring.
	frac = float(offset) / wMax
	# trace(`frac`)
	self.divideLeoSplitter(verticalFlag, frac)</t>
<t tx="T828">def placeSplitter (self,bar,pane1,pane2,verticalFlag):

	if verticalFlag:
		# Panes arranged vertically; horizontal splitter bar
		pane1.place(relx=0.5, rely =   0, anchor="n", relwidth=1.0, relheight=0.5)
		pane2.place(relx=0.5, rely = 1.0, anchor="s", relwidth=1.0, relheight=0.5)
		bar.place  (relx=0.5, rely = 0.5, anchor="c", relwidth=1.0)
	else:
		# Panes arranged horizontally; vertical splitter bar
		# adj gives tree pane more room when tiling vertically.
		adj = choose(verticalFlag != self.splitVerticalFlag,0.65,0.5)
		pane1.place(rely=0.5, relx =   0, anchor="w", relheight=1.0, relwidth=adj)
		pane2.place(rely=0.5, relx = 1.0, anchor="e", relheight=1.0, relwidth=1.0-adj)
		bar.place  (rely=0.5, relx = adj, anchor="c", relheight=1.0)</t>
<t tx="T829">def reconfigurePanes (self):
	
	# The body pane needs a _much_ bigger border when tiling horizontally.
	border = choose(self.splitVerticalFlag,2,6)
	self.body.configure(bd=border)
	
	# The log pane needs a slightly bigger border when tiling vertically.
	border = choose(self.splitVerticalFlag,4,2) 
	self.log.configure(bd=border)</t>
<t tx="T830">@ignore</t>
<t tx="T831"></t>
<t tx="T832">def canRedo (self):

	return self.redoMenuLabel != "Can't Redo"

def canUndo (self):

	return self.undoMenuLabel != "Can't Undo"</t>
<t tx="T833">def enableMenuItems (self):

	u = self ; c = u.commands ; menu = c.frame.editMenu
	enableMenu(menu,u.redoMenuLabel,u.canRedo())
	enableMenu(menu,u.undoMenuLabel,u.canUndo())</t>
<t tx="T834">def getBead (self,n):
	
	u = self
	if n &lt; 0 or n &gt;= len(u.beads): return false
	d = u.beads[n]
	# trace(`n` + ":" + `len(u.beads)` + ":" + `d`)
	self.clearIvars()
	u.v = d["v"]
	u.undoType = d["undoType"]

	for ivar in optionalIvars:
		if d.has_key(ivar):
			exec('u.%s = d["%s"]' % (ivar,ivar))
		else:
			exec('u.%s = None' % ivar)
	if 1: # Recreate an "oldText" entry if necessary.
		if u.undoType == "Typing" and u.oldText == None:
			assert(n &gt; 0)
			old_d = u.beads[n-1]
			# The user will lose data if these asserts fail.
			assert(old_d["undoType"] == "Typing")
			assert(old_d["v"] == u.v)
			u.oldText = old_d["newText"]
			# trace(`u.oldText`)
	return d
	
def peekBead (self,n):
	
	u = self
	if n &lt; 0 or n &gt;= len(u.beads): return false
	d = u.beads[n]
	# trace(`n` + ":" + `len(u.beads)` + ":" + `d`)
	return d

def setBead (self,n,keywords=None):

	u = self ; d = {}
	d["undoType"]=u.undoType
	d["v"]=u.v
	# Only enter significant entries into the dictionary.
	# This is an important space optimization for typing.
	for ivar in optionalIvars:
		exec('if u.%s != None: d["%s"] = u.%s' % (ivar,ivar,ivar))
	# copy all significant keywords to d.
	if keywords:
		for key in keywords.keys():
			if keywords[key] != None:
				d[key] = keywords[key]
	# Clear the "oldText" entry if the previous entry was a "Typing" entry.
	# This optimization halves the space needed for Undo/Redo Typing.
	if 1:
		if u.undoType == "Typing" and n &gt; 0:
			old_d = u.beads[n-1]
			if old_d["undoType"] == "Typing" and old_d["v"] == u.v:
				del d["oldText"] # We can recreate this entry from old_d["newText"]
				# trace(`u.oldText`)
	# trace(`d`)
	return d</t>
<t tx="T835">def redoMenuName (self,name):

	if name=="Can't Redo":
		return name
	else:
		return "Redo " + name

def undoMenuName (self,name):

	if name=="Can't Undo":
		return name
	else:
		return "Undo " + name</t>
<t tx="T836"># These routines update both the ivar and the menu label.
def setRedoType (self,type):

	u = self ; c = u.commands ; menu = c.frame.editMenu
	name = u.redoMenuName(type)
	if name != u.redoMenuLabel:
		# Update menu using old name.
		setMenuLabel(menu,u.redoMenuLabel,name)
		u.redoMenuLabel = name

def setUndoType (self,type):

	u = self ; c = u.commands ; menu = c.frame.editMenu
	name = u.undoMenuName(type)
	if name != u.undoMenuLabel:
		# Update menu using old name.
		setMenuLabel(menu,u.undoMenuLabel,name)
		u.undoType = type
		u.undoMenuLabel = name</t>
<t tx="T837">@ This routine saves enough information so an operation can be undone and redone.  We do nothing when called from the undo/redo logic because the Undo and Redo commands merely reset the bead pointer.
@c

def setUndoParams (self,undo_type,v,**keywords):

	u = self
	if u.redoing or u.undoing: return None
	if undo_type == "Can't Undo":
		u.clearUndoState()
		return None
	# Set the type: set the menu labels later.
	u.undoType = undo_type
	# Calculate the standard derived information.
	u.v = v
	u.parent = v.parent()
	u.back = v.back()
	u.n = v.childIndex()
	# Push params on undo stack, clearing all forward entries.
	u.bead += 1
	d = u.setBead(u.bead,keywords)
	u.beads[u.bead:] = [d]
	# trace(`u.bead` + ":" + `len(u.beads)` + ":" + `keywords`)
	# Recalculate the menu labels.
	u.setUndoTypes()
	return d</t>
<t tx="T838">@ This routine saves enough information so a typing operation can be undone and redone..  We do nothing when called from the undo/redo logic because the Undo and Redo commands merely reset the bead pointer.

This is called with the following undo Types: "Typing", "Cut", "Paste", "Delete", "Change"
@c

def setUndoTypingParams (self,v,undo_type,oldText,newText,oldSel,newSel):

	u = self
	if u.redoing or u.undoing: return None
	if undo_type == "Can't Undo":
		u.clearUndoState()
		return None
	# Clear all optional params.
	for ivar in optionalIvars:
		exec('u.%s = None' % ivar)
	# Set the params.
	u.undoType = undo_type
	u.v = v
	u.oldText = oldText ; u.newText = newText
	u.oldSel = oldSel ; u.newSel = newSel
	# Push params on undo stack, clearing all forward entries.
	u.bead += 1
	d = u.setBead(u.bead)
	u.beads[u.bead:] = [d]
	# trace(`u.bead` + ":" + `len(u.beads)`)
	# Recalculate the menu labels.
	u.setUndoTypes()
	return d</t>
<t tx="T839">def setUndoTypes (self):
	
	u = self
	# trace(`u.bead` + ":" + `len(u.beads)`)

	# Set the undo type and undo menu label.
	d = u.peekBead(u.bead)
	if d:
		u.setUndoType(d["undoType"])
	else:
		u.setUndoType("Can't Undo")

	# Set only the redo menu label.
	d = u.peekBead(u.bead+1)
	if d:
		u.setRedoType(d["undoType"])
	else:
		u.setRedoType("Can't Redo")</t>
<t tx="T840"></t>
<t tx="T841">def dragAfter(self,v,after):

	# es("dragAfter")
	c = self
	if not c.checkMoveWithParentWithWarning(v,after.parent(),true): return
	# Remember both the before state and the after state for undo/redo
	oldBack = v.back()
	oldParent = v.parent()
	oldN = v.childIndex()
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		v.setDirty()
		v.moveAfter(after)
		c.undoer.setUndoParams("Drag",v,
			oldBack=oldBack,oldParent=oldParent,oldN=oldN)
		v.setDirty()
		c.selectVnode(v)
		c.setChanged(true)
	c.endUpdate()
	c.updateSyntaxColorer(v) # Dragging can change syntax coloring.</t>
<t tx="T842">def dragToNthChildOf(self,v,parent,n):

	# es("dragToNthChildOf")
	c = self
	if not c.checkMoveWithParentWithWarning(v,parent,true): return
	# Remember both the before state and the after state for undo/redo
	oldBack = v.back()
	oldParent = v.parent()
	oldN = v.childIndex()
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		v.setDirty()
		v.moveToNthChildOf(parent,n)
		c.undoer.setUndoParams("Drag",v,
			oldBack=oldBack,oldParent=oldParent,oldN=oldN)
		v.setDirty()
		c.selectVnode(v)
		c.setChanged(true)
	c.endUpdate()
	c.updateSyntaxColorer(v) # Dragging can change syntax coloring.</t>
<t tx="T843">def demote(self):

	c = self ; v = c.currentVnode()
	if not v or not v.next(): return
	# Make sure all the moves will be valid.
	child = v.next()
	while child:
		if not c.checkMoveWithParentWithWarning(child,v,true):
			return
		child = child.next()
	c.beginUpdate()
	if 1: # update range...
		c.mInhibitOnTreeChanged = true
		c.endEditing()
		last = None
		while v.next():
			child = v.next()
			child.moveToNthChildOf(v,v.numberOfChildren())
			last = child # For undo.
		c.expandVnode(v)
		c.selectVnode(v)
		v.setDirty()
		c.setChanged(true)
		c.mInhibitOnTreeChanged = false
		c.initAllCloneBits() # 7/6/02
	c.endUpdate()
	c.undoer.setUndoParams("Demote",v,lastChild=last)
	c.updateSyntaxColorer(v) # Moving can change syntax coloring.</t>
<t tx="T844">def moveOutlineLeft(self):

	c = self
	v = c.currentVnode()
	if not v: return
	parent = v.parent()
	if not parent: return
	# Remember both the before state and the after state for undo/redo
	oldBack = v.back()
	oldParent = v.parent()
	oldN = v.childIndex()
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		v.setDirty()
		v.moveAfter(parent)
		c.undoer.setUndoParams("Move Left",v,
			oldBack=oldBack,oldParent=oldParent,oldN=oldN)
		v.setDirty()
		c.selectVnode(v)
		c.setChanged(true)
	c.endUpdate()
	c.updateSyntaxColorer(v) # Moving can change syntax coloring.</t>
<t tx="T845">def moveOutlineRight(self):

	c = self
	v = c.currentVnode()
	if not v: return
	back = v.back()
	if not back: return
	if not c.checkMoveWithParentWithWarning(v,back,true): return
	# Remember both the before state and the after state for undo/redo
	oldBack = v.back()
	oldParent = v.parent()
	oldN = v.childIndex()
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		v.setDirty()
		n = back.numberOfChildren()
		v.moveToNthChildOf(back,n)
		c.undoer.setUndoParams("Move Right",v,
			oldBack=oldBack,oldParent=oldParent,oldN=oldN)
		v.setDirty()
		c.selectVnode(v)
		c.setChanged(true)
		c.initJoinedCloneBits(v) # 7/6/02
	c.endUpdate()
	c.updateSyntaxColorer(v) # Moving can change syntax coloring.</t>
<t tx="T846">def promote(self):

	c = self
	v = c.currentVnode()
	if not v or not v.hasChildren(): return
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		after = v ; last = None
		while v.hasChildren():
			child = v.firstChild()
			child.moveAfter(after)
			after = child
			last = child # for undo.
		v.setDirty()
		c.setChanged(true)
		c.selectVnode(v)
	c.endUpdate()
	c.undoer.setUndoParams("Promote",v,lastChild=last)
	c.updateSyntaxColorer(v) # Moving can change syntax coloring.</t>
<t tx="T847"># Inserts a vnode after the current vnode.  All details are handled by the vnode class.

def insertHeadline (self,op_name="Insert Outline"):

	c = self ; current = c.currentVnode()
	if not current: return
	c.beginUpdate()
	if 1: # inside update...
		if current.hasChildren() and current.isExpanded():
			v = current.insertAsNthChild(0)
		else:
			v = current.insertAfter()
		c.undoer.setUndoParams(op_name,v,select=current)
		v.createDependents() # To handle effects of clones.
		c.selectVnode(v)
		v.setDirty() # Essential in Leo2.
		c.setChanged(true)
	c.endUpdate(false)
	c.tree.redraw_now()
	c.editVnode(v)</t>
<t tx="T848"># Deletes the current vnode and dependent nodes. Does nothing if the outline would become empty.

def deleteHeadline (self,op_name="Delete Outline"):

	c = self ; v = c.currentVnode()
	if not v: return
	vBack = v.visBack()
	# Bug fix: 1/18/00: if vBack is NULL we are at the top level,
	# the next node should be v.next(), _not_ v.visNext();
	if vBack: newNode = vBack
	else: newNode = v.next()
	if not newNode: return
	c.endEditing()# Make sure we capture the headline for Undo.
	c.beginUpdate()
	v.setDirty() # 1/30/02: Mark @file nodes dirty!
	# Reinsert v after back, or as the first child of parent, or as the root.
	c.undoer.setUndoParams(op_name,v,select=newNode)
	v.doDelete(newNode) # doDelete destroys dependents.
	c.setChanged(true)
	c.endUpdate()
	c.validateOutline()</t>
<t tx="T849"># Undoes the previous promote operation.
def undoPromote (self):

	u = self ; c = u.commands
	v = v1 = u.v
	assert(v1)
	last = u.lastChild
	next = v.next()
	assert(next and last)
	c.beginUpdate()
	while 1:
		v = next
		assert(v)
		next = v.next()
		n = v1.numberOfChildren()
		v.moveToNthChildOf(v1,n)
		u.lastChild = v
		if v == last: break
	c.selectVnode(v1)
	c.endUpdate()</t>
<t tx="T850"># undoes the previous demote operation.
def undoDemote (self):

	u = self ; c = u.commands
	ins = u.v
	last = u.lastChild
	child = u.v.firstChild()
	assert(child and last)
	c.beginUpdate()
	while 1:
		save_next = child.next()
		child.moveAfter(ins)
		ins = child
		u.lastChild = child
		child = save_next
		assert(ins == last or child)
		if ins == last: break
	c.selectVnode(u.v)
	c.endUpdate()</t>
<t tx="T851">@ignore

a
&lt;&lt;aa&gt;&gt;
&lt;&lt;cc&gt;&gt;&gt;
d</t>
<t tx="T852">&lt;&lt;bb&gt;&gt;</t>
<t tx="T853">@ignore

@ Calling tree.recolor_now in tree.select eliminates almost all flashing!</t>
<t tx="T854">@ Warning: do not try to "optimize" this be returning if v==tree.currentVnode.
@c

def select (self, v):

	# Replace body text
	body = self.commands.frame.body
	body.delete("1.0", "end")
	body.insert("1.0", v.t.bodyString)
	self.recolor_now(v)
	# Unselect any previous selected but unedited label.
	self.endEditLabel()
	old = self.currentVnode
	if old and old != v and old.edit_text:
		self.setUnselectedLabelState(old)
	self.currentVnode = v
	self.setSelectedLabelState(v)
	# Set focus.
	if self.bodyKeepsFocus:
		self.commands.body.focus_set()
	else:
		self.canvas.focus_set()</t>
<t tx="T855">def recolor(self,v):

	body = self.commands.frame.body
	
	if 0: # Do immediately
		self.colorizer.colorize(v,body)
	else: # Do at idle time
		self.colorizer.schedule(v,body)

def recolor_now(self,v):

	body = self.commands.frame.body
	self.colorizer.colorize(v,body)</t>
<t tx="T856">def makeVisible(self,v):

	pass # This is now done automatically by the tree class.</t>
<t tx="T857"># Returns the last visible node of the screen.

def lastVisible (self):

	v = self.rootVnode
	while v:
		last = v
		if v.firstChild():
			if v.isExpanded():
				v = v.firstChild()
			else:
				v = v.nodeAfterTree()
		else:
			v = v.threadNext()
	return last</t>
<t tx="T858">@ We can't just return icony because the tree hasn't been redrawn yet.  For the same reason we can't rely on any TK canvas methods here.
@c

def yoffset(self, v1):

	# if not v1.isVisible(): print "yoffset not visible:", `v1`
	root = self.rootVnode
	h, flag = self.yoffsetTree(root,v1)
	# flag can be false during initialization.
	# if not flag: print "yoffset fails:", h, `v1`
	return h

# Returns the visible height of the tree and all sibling trees, stopping at v1

def yoffsetTree(self,v,v1):

	h = 0
	while v:
		# print "yoffsetTree:", `v`
		if v == v1:
			return h, true
		h += line_height
		child = v.firstChild()
		if v.isExpanded() and child:
			h2, flag = self.yoffsetTree(child,v1)
			h += h2
			if flag: return h, true
		v = v.next()
	return h, false</t>
<t tx="T859">def expandAllAncestors (self,v):

	redraw_flag = false
	p = v.parent()
	while p:
		if not p.isExpanded():
			p.expand()
			redraw_flag = true
		p = p.parent()
	return redraw_flag</t>
<t tx="T860">@ This scrolls the canvas so that v is in view.  This is done at idle time after a redraw so that treeBar.get() will return proper values.  Earlier versions of this routine were called _before_ a redraw so that the calls to yoffset() were required.  We could use v.icony instead, and that might be better.

Another approach would be to add a "draw" flat to the drawing routines so that they just compute a height if the draw flag is false.  However, that would complicate the drawing logic quite a bit.
@c

def idle_scrollTo(self,v=None):

	if v == None:
		v = self.currentVnode
	last = self.lastVisible()
	h1 = self.yoffset(v)
	h2 = self.yoffset(last)
	# Compute the fraction to scroll, minus a smidge so the first line will be entirely visible.
	if h2 &gt; 0.1:
		frac = float(h1)/float(h2)
	else:
		frac = 0.0 # probably any value would work here.
	frac = min(frac,1.0)
	frac = max(frac,0.0)
	
	# Do nothing if the line is already in view
	frame = self.commands.frame
	lo, hi = frame.treeBar.get()
	if frac &lt; lo or frac &gt; hi:
		# print "h1, h2, frac, hi, lo:", h1, h2, frac, hi, lo
		self.canvas.yview("moveto", frac)</t>
<t tx="T861">@  Warning: it _is_ sometimes useful to have the update_count logic in place even though all drawing is done at idle time.  Indeed, we don't want to schedule a redraw if we will call endupdate(false).

Howevever, we could replace beginUpdate/endUpdate() with c.redraw() and replace endUpdate(flag) with:
	if flag: c.redraw()</t>
<t tx="T862">def __init__(self,commands,canvas):

	self.canvas = canvas
	self.commands = commands
	self.rootVnode = None
	self.topVnode = None
	self.iconimages = {} # Image cache set by getIconImage().
	self.colorizer = leoColor.colorizer(commands)
	self.bodyKeepsFocus = true # true if body keeps focus when tree canvas clicked
	self.vnode_alloc_list = [] # List of all vnodes ever allocated in this tree.
	self.active = false # true if tree is active
	
	# Controlling redraws
	self.updateCount = 0 # self.redraw does nothing unless this is zero.
	self.redrawCount = 0 # For traces
	self.redrawScheduled = false # true if redraw scheduled.

	# Selection ivars.
	self.currentVnode = None # The presently selected vnode.
	self.editVnode = None # The vnode being edited.
	self.initing = false # true: opening file.
	
	# Drag and drop
	self.oldcursor = None # To reset cursor after drag
	self.drag_id = None # To reset bindings after drag</t>
<t tx="T863">def beginUpdate (self):

	self.updateCount += 1</t>
<t tx="T864">def endUpdate (self, flag=true):

	assert(self.updateCount &gt; 0)
	self.updateCount -= 1
	if flag and self.updateCount == 0:
		self.redraw()</t>
<t tx="T865">@ignore</t>
<t tx="T866">@ignore

# Python single-line comment
// C single-line comment
xx /* C block comment */ yy
xxx """ triple string """ zzz
a 'string' b
c "string" d
// C keywords
switch, case</t>
<t tx="T867">leoKeywords = (
	# Leo 2 directives.
	"@","@c","@code","@doc","@color","@comment",
	"@delims","@first","@language","@nocolor","@others",
	"@pagewidth","@path","@tabwidth",
	# Leo 1 directives.
	"@cweb","@ignore","@noweb","@root","@unit","@silent","@terse","@verbose")
	
c_keywords = (
	# C keywords
	"auto","break","case","char","continue",
	"default","do","double","else","enum","extern",
	"float","for","goto","if","int","long","register","return",
	"short","signed","sizeof","static","struct","switch",
	"typedef","union","unsigned","void","volatile","while"
	# C++ keywords
	"asm","bool","catch","class","const_cast",
	"delete","dynamic_cast","explicit","false","friend",
	"inline","mutable","namespace","new","operator",
	"private","protected","public","reinterpret_cast","static_cast",
	"template","this","throw","true","try",
	"typeid","typename","using","virtual","wchar_t")
	
cweb_keywords = c_keywords

html_keywords = (
	# HTML constructs.
	"&lt;","&lt;/","&gt;",
	'"',
	"&lt;!---","&lt;!--","&lt;!",
	"&lt;%","%&gt;",
	"&lt;a","&lt;/a",
	"&lt;img",
	"&lt;cf","&lt;/cf",
	# Common tags: tables
	"&lt;table","&lt;/table",
	"&lt;td","&lt;/td",
	"&lt;th","&lt;/th",
	"&lt;tr","&lt;/tr",
	"&lt;caption","&lt;/caption",
	"&lt;col","&lt;/col",
	"&lt;colgroup","&lt;/colgroup",
	"&lt;tbody","&lt;/tbody",
	"&lt;tfoot","&lt;/tfoot",
	"&lt;thead","&lt;/thead",	
	# Common tags: styles
	"&lt;style","&lt;/style",
	# Common tags: scripts
	"&lt;script","&lt;/script",
	# Escapes
	"&amp;amp;", "&amp;lt;", "&amp;gt;", "&amp;quot;" )

java_keywords = (
	"abstract","boolean","break","byte","byvalue",
	"case","cast","catch","char","class","const","continue",
	"default","do","double","else","extends",
	"false","final","finally","float","for","future",
	"generic","goto","if","implements","import","inner",
	"instanceof","int","interface","long","native",
	"new","null","operator","outer",
	"package","private","protected","public","rest","return",
	"short","static","super","switch","synchronized",
	"this","throw","transient","true","try",
	"var","void","volatile","while")

pascal_keywords = (
	"and","array","as","begin",
	"case","const","class","constructor","cdecl"
	"div","do","downto","destructor","dispid","dynamic",
	"else","end","except","external",
	"false","file","for","forward","function","finally",
	"goto","if","in","is","label","library",
	"mod","message","nil","not","nodefault""of","or","on",
	"procedure","program","packed","pascal"
	"private","protected","public","published",
	"record","repeat","raise","read","register",
	"set","string","shl","shr","stdcall",
	"then","to","true","type","try","until","unit","uses"
	"var","virtual","while","with","xor"
	# object pascal
	"asm","absolute","abstract","assembler","at","automated",
	"finalization",
	"implementation","inherited","initialization","inline","interface",
	"object","override","resident","resourcestring",
	"threadvar",
	# limited contexts
	"exports","property","default","write","stored","index","name" )

perl_keywords = (
	"continue","do","else","elsif","format","for","format","for","foreach",
	"if","local","package","sub","tr","unless","until","while","y",
	# Comparison operators
	"cmp","eq","ge","gt","le","lt","ne",
	# Matching ooperators
	"m","s"
	# Unary functions
	"alarm","caller","chdir","cos","chroot","exit","eval","exp",
	"getpgrp","getprotobyname","gethostbyname","getnetbyname","gmtime",
	"hex","int","length","localtime","log","ord","oct",
	"require","reset","rand","rmdir","readlink",
	"scalar","sin","sleep","sqrt","srand","umask",
	# Transfer ops
	"next","last","redo","go","dump",
	# File operations...
	"select","open",
	# FL ops
	"binmode","close","closedir","eof",
	"fileno","getc","getpeername","getsockname","lstat",
	"readdir","rewinddir","stat","tell","telldir","write",
	# FL2 ops
	"bind","connect","flock","listen","opendir",
	"seekdir","shutdown","truncate",
	# FL32 ops
	"accept","pipe",
	# FL3 ops
	"fcntl","getsockopt","ioctl","read",
	"seek","send","sysread","syswrite",
	# FL4 &amp; FL5 ops
	"recv","setsocket","socket","socketpair",
	# Array operations
	"pop","shift","split","delete",
	# FLIST ops
	"sprintf","grep","join","pack",
	# LVAL ops
	"chop","defined","study","undef",
	# f0 ops
	"endhostent","endnetent","endservent","endprotoent",
	"endpwent","endgrent","fork",
	"getgrent","gethostent","getlogin","getnetent","getppid",
	"getprotoent","getpwent","getservent",
	"setgrent","setpwent","time","times","wait","wantarray",
	# f1 ops
	"getgrgid","getgrnam","getprotobynumber","getpwnam","getpwuid",
	"sethostent","setnetent","setprotoent","setservent",
	# f2 ops
	"atan2","crypt",
	"gethostbyaddr","getnetbyaddr","getpriority","getservbyname","getservbyport",
	"index","link","mkdir","msgget","rename",
	"semop","setpgrp","symlink","unpack","waitpid",
	# f2 or 3 ops
	"index","rindex","substr",
	# f3 ops
	"msgctl","msgsnd","semget","setpriority","shmctl","shmget","vec",
	# f4 &amp; f5 ops
	"semctl","shmread","shmwrite","msgrcv",
	# Assoc ops
	"dbmclose","each","keys","values",
	# List ops
	"chmod","chown","die","exec","kill",
	"print","printf","return","reverse",
	"sort","system","syscall","unlink","utime","warn")

perlpod_keywords = perl_keywords
	
python_keywords = (
	"and",       "del",       "for",       "is",        "raise",    
	"assert",    "elif",      "from",      "lambda",    "return",   
	"break",     "else",      "global",    "not",       "try",      
	"class",     "except",    "if",        "or",        "yield",   
	"continue",  "exec",      "import",    "pass",      "while",
	"def",       "finally",   "in",        "print")</t>
<t tx="T868"></t>
<t tx="T869"># Returns a tuple (single,start,end) of comment delims

def set_delims_from_language(language):

	for lang, val in [ (cweb_language, "// /* */"),
		(c_language, "// /* */"), (java_language, "// /* */"),
		(fortran_language, "C"), (fortran90_language, "!"),
		(html_language, "&lt;!-- --&gt;"), (pascal_language, "// { }"),
		(perl_language, "#"), (perlpod_language, "# =pod =cut"),
		(shell_language, "#"), (python_language, "#") ]:
		if lang == language:
			return set_delims_from_string(val)

	return None, None, None # Indicate that no change should be made</t>
<t tx="T870">@ Returns (delim1, delim2, delim2), the delims following the @comment directive.

This code can be called from @languge logic, in which case s can point at @comment
@c

def set_delims_from_string(s):

	# Skip an optional @comment
	tag = "@comment"
	i = 0
	if match_word(s,i,tag):
		i += len(tag)
		
	count = 0 ; delims = [None, None, None]
	while count &lt; 3 and i &lt; len(s):
		i = j = skip_ws(s,i)
		while i &lt; len(s) and not is_ws(s[i]) and not is_nl(s,i):
			i += 1
		if j == i: break
		delims[count] = s[j:i]
		count += 1
		
	# Restore defaults if nothing specified
	if not delims[0]:
		delims[0], delims[1], delims[2] = "//", "/*", "*/"

	# 7/8/02: The "REM hack": replace underscores by blanks.
	for i in xrange(0,3):
		if delims[i]:
			delims[i] = string.replace(delims[i],'_',' ')

	return delims[0], delims[1], delims[2]</t>
<t tx="T871">@  Scans the @language directive that appears at s[i]. 'default' returns default_language.

Returns (language, delim1, delim2, delim3)
@c

def set_language(s,i,issue_errors_flag,default_language):

	tag = "@language"
	assert(i != None)
	assert(match_word(s,i,tag))
	i += len(tag) ; i = skip_ws(s, i)
	# Get the argument.
	j = i
	i = skip_c_id(s,i)
	arg = string.lower(s[j:i])
	if len(arg) &gt; 0:
		for name, language in [ ("ada", ada_language),
			("c", c_language), ("c++", c_language),
			("cweb", cweb_language), ("default", default_language),
			("fortran", fortran_language), ("fortran90", fortran90_language),
			("html", html_language), ("java", java_language),
			("lisp", lisp_language), ("objective-c", c_language),
			("pascal", pascal_language), ("perl", perl_language),
			("perlpod", perlpod_language), ("python", python_language),
			("shell", shell_language) ]:
		
			if arg == name:
				delim1, delim2, delim3 = set_delims_from_language(language)
				return language, delim1, delim2, delim3

	if issue_errors_flag:
		es("ignoring: " + get_line(s,i))

	return None, None, None, None,</t>
<t tx="T872">def colorize(self,v,body):

	if self.enabled:
		type = self.updateSyntaxColorer(v)
		self.colorizeAnyLanguage(v,body,type)</t>
<t tx="T873">tags = (
	"blank", "comment", "cwebName", "docPart", "keyword", "leoKeyword",
	"link", "name", "nameBrackets", "pp", "string", "tab")

def colorizeAnyLanguage(self,v,body,language):

	hyperCount = 0 # Number of hypertext tags
	self.body = body # For callbacks
	s = body.get("1.0", "end")
	sel = body.index("insert") # get the location of the insert point
	start, end = string.split(sel,'.')
	start = int(start)
	# trace(`self.count` + `v`)
	# trace(`body.tag_names()`)

	if 0: # Remove all tags from the selected line.
		for tag in self.tags:
			body.tag_remove(tag, index(start,0), index(start,"end"))
	else: # Remove all tags from body.
		body.tag_delete(
			"blank", "comment", "cwebName", "docPart", "keyword", "leoKeyword",
			"link", "name", "nameBrackets", "pp", "string", "tab")
	&lt;&lt; configure tags &gt;&gt;
	&lt;&lt; configure language-specific settings &gt;&gt;
	self.count += 1
	
	lines = string.split(s,'\n')
	n = 0 # The line number for indices, as in n.i
	for s in lines:
		n += 1 ; i = 0 ; sLen = len(s)
		# trace(`n` + ", " + `s`)
		while i &lt; sLen:
			progress = i
			ch = s[i]
			if state == string3State:
				&lt;&lt; continue python triple string &gt;&gt;
				continue
			elif state == docState:
				&lt;&lt; continue doc part &gt;&gt;
				continue
			elif state == nocolorState:
				&lt;&lt; continue nocolor state &gt;&gt;
				continue
			elif state == blockCommentState:
				&lt;&lt; continue block comment &gt;&gt;
				continue
			else: assert(state == normalState)

			if has_string and ch == '"' or ch == "'":
				&lt;&lt; handle string &gt;&gt;
			elif single_comment_start and match(s,i,single_comment_start):
				&lt;&lt; handle single-line comment &gt;&gt;
			elif block_comment_start and match(s,i,block_comment_start):
				&lt;&lt; start block comment &gt;&gt;
			elif ch == '#' and language in [c_language,cweb_language]:
				&lt;&lt; handle C preprocessor line &gt;&gt;
			elif match(s,i,lb) or (language==cweb_language and match(s,i,"@(")):
				&lt;&lt; handle possible section ref or def &gt;&gt;
			elif ch == '@':
				&lt;&lt; handle possible @keyword &gt;&gt;
			elif ch in string.letters:
				&lt;&lt; handle possible keyword &gt;&gt;
			elif ch == ' ':
				&lt;&lt; handle blank &gt;&gt;
			elif ch == '\t':
				&lt;&lt; handle tab &gt;&gt;
			else:
				&lt;&lt; handle normal character &gt;&gt;
			assert(progress &lt; i)</t>
<t tx="T874"># Must use foreground, not fg
body.tag_config("comment", foreground="red")
body.tag_config("cwebName", foreground="DarkRed")
body.tag_config("docPart", foreground="red")
body.tag_config("keyword", foreground="blue")
body.tag_config("pp", foreground="blue")
if self.use_hyperlinks: # underline=self.use_hyperlinks doesn't seem to work.
	body.tag_config("link", foreground="red",underline=1) # Defined section name
else:
	body.tag_config("link", foreground="red",underline=0) # Defined section name
body.tag_config("leoKeyword", foreground="blue")
if 0: # Looks good, but problems when text is selected.
	body.tag_config("name", foreground="red", background="gray90") # Undefined section name
else: # Reverse the underlining used for defined section names.
	if self.use_hyperlinks: # underline=(not self.use_hyperlinks) doesn't seem to work.
		body.tag_config("name", foreground="red", underline=0) # Undefined section name
	else:
		body.tag_config("name", foreground="red", underline=1) # Undefined section name
body.tag_config("nameBrackets", foreground="blue")
body.tag_config("string", foreground="#00aa00") # "gray50") # a dark green.

if self.showInvisibles:
	if 1: # Very poor, and vaguely usable.
		body.tag_config("blank",background="black",bgstipple="gray25")
		body.tag_config("tab",background="black",bgstipple="gray50")
	else: # Doesn't work, but does increase the spacing ;-)
		body.tag_config("blank",font="Symbol")
		body.tag_config("tab",font="Symbol")
else:
	body.tag_config("blank",background="white")
	body.tag_config("tab",background="white")

# body.tag_config("normal", foreground="black")</t>
<t tx="T875"># Define has_string, keywords, single_comment_start, block_comment_start, block_comment_end

(single_comment_start,
	block_comment_start,
	block_comment_end) = set_delims_from_language(language)

has_string = language != plain_text_language

languages = ["c","cweb","html","java","pascal","perl","perlpod","python"]

keywords = []
if language==cweb_language:
	for i in c_keywords:
		keywords.append(i)
	for i in cweb_keywords:
		keywords.append(i)
else:
	for name in languages:
		exec("if language==%s_language: keywords=%s_keywords" % (name,name))
	
state = choose(language==plain_text_language,nocolorState,normalState)

lb = choose(language==cweb_language,"@&lt;","&lt;&lt;")
rb = choose(language==cweb_language,"@&gt;","&gt;&gt;")</t>
<t tx="T876"></t>
<t tx="T877">if language == cweb_language:
	&lt;&lt; handle cweb doc part &gt;&gt;
else:
	&lt;&lt; handle noweb doc part &gt;&gt;</t>
<t tx="T878">word = self.getCwebWord(s,i)
if word and len(word) &gt; 0:
	j = i + len(word)
	if word in ("@&lt;","@(","@c","@d","@f","@p"):
		state = normalState # end the doc part and rescan
	else:
		# The control code does not end the doc part.
		body.tag_add("keyword", index(n,i), index(n,j))
		i = j
		if word in ("@^","@.","@:","@="): # Ended by "@&gt;"
			j = string.find(s,"@&gt;",i)
			if j &gt; -1:
				body.tag_add("cwebName", index(n,i), index(n,j))
				body.tag_add("nameBrackets", index(n,j), index(n,j+2))
				i = j + 2
else:
	# Everthing up to the next "@" is in the doc part.
	j = string.find(s,"@",i+1)
	if j == -1: j = len(s)
	body.tag_add("docPart", index(n,i), index(n,j))
	i = j</t>
<t tx="T879">if i == 0 and match(s,i,lb):
	# Possible section definition line.
	state = normalState # rescan the line.
	continue
if i == 0 and ch == '@':
	j = self.skip_id(s,i+1)
	word = s[i:j]
	word = string.lower(word)
else:
	word = ""

if word in ["@c","@code","@unit","@root","@color","@nocolor"]:
	# End of the doc part.
	body.tag_remove("docPart", index(n,i), index(n,j))
	body.tag_add("leoKeyword", index(n,i), index(n,j))
	i = j ; state = normalState
else:
	# The entire line is in the doc part.
	body.tag_add("docPart", index(n,i), index(n,sLen))
	i = sLen # skipt the rest of the line.</t>
<t tx="T880">delim = self.delim
if delim=="'''":
	j = string.find(s,"'''",i)
elif delim=='"""':
	j = string.find(s,'"""', i)
else:
	state=normalState ; self.delim = None ; continue

if j == -1:
	# The entire line is part of the triple-quoted string.
	body.tag_add("string", index(n,i), index(n,"end"))
	i = sLen # skipt the rest of the line.
else:
	# End the string
	body.tag_add("string", index(n,i), index(n,j+3))
	i = j + 3 ; state = normalState ; self.delim = None</t>
<t tx="T881">j = string.find(s,block_comment_end,i)
if j == -1:
	# The entire line is part of the block comment.
	body.tag_add("comment", index(n,i), index(n,"end"))
	i = sLen # skipt the rest of the line.
else:
	# End the block comment.
	k = len(block_comment_end)
	body.tag_add("comment", index(n,i), index(n,j+k))
	i = j + k ; state = normalState</t>
<t tx="T882">if i == 0 and ch == '@':
	j = self.skip_id(s,i+1)
	word = s[i:j]
	word = string.lower(word)
else:
	word = ""

if word == "@color" and language != plain_text_language:
	# End of the nocolor part.
	## body.tag_remove("normal", index(n,0), index(n,j))
	body.tag_add("leoKeyword", index(n,0), index(n,j))
	i = j ; state = normalState
else:
	## body.tag_add("normal", index(n,0), index(n,sLen))
	# The entire line is in the nocolor part.
	# Add tags for blanks and tabs to make "Show Invisibles" work.
	for ch in s[i:]:
		if ch == ' ':
			body.tag_add("blank", index(n,i))
		elif ch == '\t':
			body.tag_add("tab", index(n,i))
		i += 1
	## i = sLen # skipt the rest of the line.</t>
<t tx="T883">if language == python_language:
	j, state = self.skip_python_string(s,i)
	body.tag_add("string", index(n,i), index(n,j))
	i = j
else:
	j = self.skip_string(s,i)
	body.tag_add("string", index(n,i), index(n,j))
	i = j</t>
<t tx="T884">k = len(block_comment_start)
body.tag_add("comment", index(n,i), index(n,i+k))
i += k ; state = blockCommentState</t>
<t tx="T885">body.tag_add("comment", index(n,i), index(n,"end"))
i = sLen</t>
<t tx="T886">body.tag_add("pp", index(n,i), index(n,"end"))
i = sLen</t>
<t tx="T887">body.tag_add("nameBrackets", index(n,i), index(n,i+2))

# See if the line contains the rb
j = string.find(s,rb+"=",i+2) ; k = 3
if j == -1:
	j = string.find(s,rb,i+2) ; k = 2
if j == -1:
	i += 2
else:
	if language != cweb_language:
		searchName = body.get(index(n,i),   index(n,j+k)) # includes brackets
		ref = findReference(searchName,v)
	
	if language == cweb_language:
		body.tag_add("cwebName", index(n,i+2), index(n,j))
	elif ref:
		body.tag_add("link", index(n,i+2), index(n,j))
		if self.use_hyperlinks:
			&lt;&lt; set the hyperlink &gt;&gt;
	elif k == 3: # a section definition
		body.tag_add("link", index(n,i+2), index(n,j))
	else:
		body.tag_add("name", index(n,i+2), index(n,j))
	body.tag_add("nameBrackets", index(n,j), index(n,j+k))
	i = j + k</t>
<t tx="T888"># Set the bindings to vnode callbacks.
# Create the tag.
# Create the tag name.
tagName = "hyper" + `hyperCount`
hyperCount += 1
body.tag_delete(tagName)
body.tag_add(tagName, index(n,i+2), index(n,j))
ref.tagName = tagName
body.tag_bind(tagName,"&lt;Control-1&gt;",ref.OnHyperLinkControlClick)
body.tag_bind(tagName,"&lt;Any-Enter&gt;",ref.OnHyperLinkEnter)
body.tag_bind(tagName,"&lt;Any-Leave&gt;",ref.OnHyperLinkLeave)</t>
<t tx="T889">word = None
if language == cweb_language:
	&lt;&lt; Handle all cweb control codes &gt;&gt;
if not word:
	&lt;&lt; Handle non-cweb @keywords &gt;&gt;</t>
<t tx="T890">word = self.getCwebWord(s,i)
if word:
	# Color and skip the word.
	j = i + len(word)
	body.tag_add("keyword",index(n,i),index(n,j))
	i = j

	if word in ("@ ","@\t","@\n","@*","@**"):
		state = docState
		continue ;

	if word in ("@^","@.","@:","@="): # Ended by "@&gt;"
		j = string.find(s,"@&gt;",i)
		if j &gt; -1:
			body.tag_add("cwebName", index(n,i), index(n,j))
			body.tag_add("nameBrackets", index(n,j), index(n,j+2))
			i = j + 2
</t>
<t tx="T891">j = self.skip_id(s,i+1)
word = s[i:j]
word = string.lower(word)
if i != 0 and word != "@others":
	word = "" # can't be a Leo keyword, even if it looks like it.

# to do: the keyword should start the line.
if word == "@" or word == "@doc":
	# at-space starts doc part
	## body.tag_remove("normal", index(n,i), index(n,j))
	body.tag_add("leoKeyword", index(n,i), index(n,j))
	# Everything on the line is in the doc part.
	body.tag_add("docPart", index(n,j), index(n,sLen))
	i = sLen ; state = docState
elif word == "@nocolor":
	# Nothing on the line is colored.
	## body.tag_add("normal", index(n,j), index(n,sLen))
	body.tag_add("keyword", index(n,i), index(n,j))
	i = j ; state = nocolorState
elif word in leoKeywords:
	## body.tag_remove("normal", index(n,i), index(n,j))
	body.tag_add("keyword", index(n,i), index(n,j))
	i = j
else:
	## body.tag_add("normal", index(n,i), index(n,j+1))
	i = j</t>
<t tx="T892">j = self.skip_id(s,i)
word = s[i:j]
if word in keywords:
	## body.tag_remove("normal", index(n,i), index(n,j))
	body.tag_add("keyword", index(n,i), index(n,j))
else:
	pass # body.tag_add("normal", index(n,i), index(n,j))
i = j</t>
<t tx="T893">body.tag_add("blank", index(n,i)) ; i += 1</t>
<t tx="T894">body.tag_add("tab", index(n,i)) ; i += 1</t>
<t tx="T895"># body.tag_add("normal", index(n,i))
i += 1
</t>
<t tx="T896">@ignore</t>
<t tx="T897"># Selects v: sets the focus to v and edits v.

def editVnode(self,v):

	c = self
	if v:
		c.selectVnode(v)
		c.tree.editLabel(v)</t>
<t tx="T898"># Start editing v.edit_text

def editLabel (self, v):

	# End any previous editing
	if self.editVnode and v != self.editVnode:
		self.endEditLabel()
		
	# Start editing
	if v and v.edit_text:
		# es("editLabel" + `v`)
		self.setNormalLabelState(v)
		v.edit_text.tag_remove("sel","1.0","end")
		v.edit_text.tag_add("sel","1.0","end")
		v.edit_text.focus_force()
		self.editVnode = v
	else:
		self.editVnode = None</t>
<t tx="T899"># End editing for self.editText

def endEditLabel (self):

	v = self.editVnode
	# es("EndEditLabel" + `v`)
	
	if v and v.edit_text:
		self.setUnselectedLabelState(v)
		self.editVnode = None
	
	if v and v.joinList:
		self.redraw_now() # force a redraw of joined headlines.</t>
<t tx="T900">@ignore</t>
<t tx="T901"># Returns false if any node of tree is a clone of parent or any of parents ancestors.

def checkMoveWithParentWithWarning (self,root,parent,warningFlag):

	next = root.nodeAfterTree() ; parent1 = parent
	clone_message = "Illegal move or drag: no clone may contain a clone of itself"
	while parent:
		if parent.isCloned():
			v = root
			while v and v != next:
				if v.t == parent.t:
					if warningFlag:
						alert(clone_message)
					return false
				v = v.threadNext()
		parent = parent.parent()
		
	drag_message = "Can't drag a node into its own tree"
	parent = parent1
	while parent:
		if root == parent:
			if warningFlag:
				alert(drag_message)
			return false
		parent = parent.parent()
	return true</t>
<t tx="T902"># Draws icon for v at x,y

def drawIcon(self,v,x,y):

	v.iconx, v.icony = x,y

	y += 2 # draw icon at y + 2

	# Always recompute icon.
	val = v.iconVal = v.computeIcon()
	assert(0 &lt;= val &lt;= 15)
	
	# Compute the image name
	imagename = os.path.join("Icons", "box")
	if val &lt; 10: imagename += "0"
	imagename += `val`

	# Get the image
	image = self.getIconImage(imagename + ".GIF")
	id = self.canvas.create_image(x,y,anchor="nw",image=image)
	if 1: # 6/15/02: this reference is now cleared in v.__del__
		v.icon_id = id
	self.canvas.tag_bind(id, "&lt;1&gt;", v.OnIconClick)
	self.canvas.tag_bind(id, "&lt;Double-1&gt;", v.OnBoxClick)

	return 0 # dummy icon height</t>
<t tx="T903">def findVnodeWithIconId (self,id):

	v = self.rootVnode
	while v:
		if v.icon_id == id or (v.icon_id,) == id:
			return v
		v = v.threadNext()
	return None</t>
<t tx="T904">@ Auto-scrolls the canvas as needed and opens nodes if the control key is down.
@c

def OnDrag(self,v,event):
	
	# es("tree.OnDrag" + `v`)
	assert(v == self.drag_v)

	if not event: return
	c = self.commands ; canvas = self.canvas ; frame = self.commands.frame
	x,y = event.x,event.y

	&lt;&lt; set vdrag and expandFlag &gt;&gt;
	if 0: # Confusing: we should only do this if a modifier key is down.
		if vdrag and vdrag != v and expandFlag:
			&lt;&lt; expand vdrag and redraw &gt;&gt;

	if self.drag_id: # OnEndDrag can stop the scheduling of more events.
		&lt;&lt; scroll the canvas as needed &gt;&gt;</t>
<t tx="T905">@ vdrag is the node presently under the cursor.  childFlag is set if vdrag could be expanded.
@c

canvas_x = canvas.canvasx(x)
canvas_y = canvas.canvasy(y)

id = self.canvas.find_closest(canvas_x,canvas_y)
vdrag = self.findVnodeWithIconId(id)
expandFlag = vdrag and vdrag.hasChildren() and not vdrag.isExpanded()</t>
<t tx="T906"># redrawing will change id's.
if self.drag_id:
	canvas.tag_unbind(self.drag_id , "&lt;B1-Motion&gt;")
	canvas.tag_unbind(self.drag_id , "&lt;Any-ButtonRelease-1&gt;")
	
vdrag.expand()
c.dragToNthChildOf(v,vdrag,0)
self.redraw_now()
self.idle_scrollTo(vdrag)

if 0: # This doesn't work, because we haven't had a mouse down event in the new node.
	# Pretend the expanded node is what we are dragging!
	self.drag_id = vdrag.icon_id
	# es("OnDrag expanding:" + `vdrag` + " " + `self.drag_id`)
	if self.drag_id:
		canvas.tag_bind(self.drag_id, "&lt;B1-Motion&gt;", v.OnDrag)
		canvas.tag_bind(self.drag_id, "&lt;Any-ButtonRelease-1&gt;", v.OnEndDrag)
else:
	self.canvas['cursor'] = self.oldcursor</t>
<t tx="T907"># Scroll the screen up or down one line if the cursor (y) is outside the canvas.
h = canvas.winfo_height()
if y &lt; 0 or y &gt; h:
	lo, hi = frame.treeBar.get()
	n = self.numberOfVisibleNodes()
	line_frac = 1.0 / float(n)
	frac = choose(y &lt; 0, lo - line_frac, lo + line_frac)
	frac = min(frac,1.0)
	frac = max(frac,0.0)
	# es("lo,hi,frac:" + `lo` + " " + `hi` + " " + `frac`)
	canvas.yview("moveto", frac)
	
# Queue up another event to keep scrolling while the cursor is outside the canvas.
# OnEndDrag() halts the scrolling by clearing self.drag_id when the mouse button goes up.
if 0: # This doesn't work very well.  Just moving the cursor to force scrolling seems better.
	lo, hi = frame.treeBar.get()
	if (y &lt; 0 and lo &gt; 0.1) or (y &gt; h and hi &lt; 0.9):
		canvas.after_idle(self.OnDrag,v,event)</t>
<t tx="T908">def OnEndDrag(self,v,event):
	
	# es("tree.OnEndDrag" + `v`)
	assert(v == self.drag_v)
	c = self.commands ; canvas = self.canvas

	if event:
		&lt;&lt; set vdrag, childFlag &gt;&gt;
		if vdrag and vdrag != v:
			if childFlag:
				c.dragToNthChildOf(v,vdrag,0)
			else:
				c.dragAfter(v,vdrag)
		else:
			if v and vdrag == None: es("not dragged: " + v.headString())
			if 0: # Don't undo the scrolling we just did!
				self.idle_scrollTo(v)
		self.canvas['cursor'] = self.oldcursor

	if self.drag_id:
		canvas.tag_unbind(self.drag_id , "&lt;B1-Motion&gt;")
		canvas.tag_unbind(self.drag_id , "&lt;Any-ButtonRelease-1&gt;")
		self.drag_id = None</t>
<t tx="T909">x,y = event.x,event.y
canvas_x = canvas.canvasx(x)
canvas_y = canvas.canvasy(y)

id = self.canvas.find_closest(canvas_x,canvas_y)
vdrag = self.findVnodeWithIconId(id)
childFlag = vdrag and vdrag.hasChildren() and vdrag.isExpanded()</t>
<t tx="T910">def OnIconClick (self,v,event):

	canvas = self.canvas
	# es("OnIconClick" + `v`)
	
	if event:
		canvas_x = canvas.canvasx(event.x)
		canvas_y = canvas.canvasy(event.y)
		id = canvas.find_closest(canvas_x,canvas_y)
		if id:
			self.drag_id = id
			self.drag_v = v
			canvas.tag_bind(id, "&lt;B1-Motion&gt;", v.OnDrag)
			canvas.tag_bind(id, "&lt;Any-ButtonRelease-1&gt;", v.OnEndDrag)
			self.oldcursor = self.canvas['cursor']
			self.canvas['cursor'] = "hand2" # "center_ptr"

	self.select(v)</t>
<t tx="T911">def numberOfVisibleNodes(self):
	
	n = 0 ; v = self.rootVnode
	while v:
		n += 1
		v = v.visNext()
	return n</t>
<t tx="T912">@ We must compute the word to be selected before the Tk.Text widget does its default double-click handling, then actually select the text at idle-time.</t>
<t tx="T913">def OnActivateBody (self,event=None):

	app().log = self
	self.tree.OnDeactivate()

def OnBodyDoubleClick (self,event=None):

	body = self.body
	start = body.index("insert wordstart")
	end = body.index("insert wordend")
	setTextSelection(self.body,start,end)
	return "break" # Inhibit all further event processing.</t>
<t tx="T914">def disable (self):

	print "disabling all syntax coloring"
	self.enabled=false

def __init__(self, commands):

	self.commands = commands
	self.count = 0 # how many times this has been called.
	self.use_hyperlinks = false # true: use hyperlinks and underline "live" links.
	self.enabled = true # true: syntax coloring enabled
	self.showInvisibles = false # true: show "invisible" characters.
	self.delim = None # delimiter for triple strings.
	trace("-nocolor", self.disable)</t>
<t tx="T915">tags = (
	"blank", "comment", "docPart", "keyword", "leoKeyword",
	"link", "name", "nameBrackets", "string", "tab")

def colorizePython(self,v,body):

	hyperCount = 0 # Number of hypertext tags
	self.body = body # For callbacks
	s = body.get("1.0", "end")
	sel = body.index("insert") # get the location of the insert point
	start, end = string.split(sel,'.')
	start = int(start)
	# trace(`self.count` + `sel`)
	# trace(`body.tag_names()`)

	if 0: # Remove all tags from the selected line.
		for tag in self.tags:
			body.tag_remove(tag, index(start,0), index(start,"end"))
	else: # Remove all tags from body.
		body.tag_delete(
			"blank", "comment", "docPart", "keyword", "leoKeyword",
			"link", "name", "nameBrackets", "string", "tab")
	&lt;&lt; configure tags &gt;&gt;
	self.count += 1
	
	lines = string.split(s,'\n')
	state = normalState ; n = 0
	for s in lines:
		n += 1 ; i = 0 ; sLen = len(s)
		# trace(`n` + ", " + `s`)
		while i &lt; sLen:
			ch = s[i]
			if state == string3State:
				&lt;&lt; continue python triple string &gt;&gt;
				continue
			elif state == docState:
				&lt;&lt; continue doc part &gt;&gt;
				continue
			elif state == nocolorState:
				&lt;&lt; continue nocolor state &gt;&gt;
			else: assert(state == normalState)

			if ch == '"' or ch == "'":
				&lt;&lt; handle python string &gt;&gt;
			elif ch == '#':
				&lt;&lt; handle python comment &gt;&gt;
			elif ch == '&lt;':
				&lt;&lt; handle possible section ref or def &gt;&gt;
			elif ch == '@':
				&lt;&lt; handle possible @keyword &gt;&gt;
			elif ch in string.letters:
				&lt;&lt; handle possible python keyword &gt;&gt;
			elif ch == ' ':
				&lt;&lt; handle blank &gt;&gt;
			elif ch == '\t':
				&lt;&lt; handle tab &gt;&gt;
			else:
				&lt;&lt; handle normal character &gt;&gt;</t>
<t tx="T916">if i == 0 and ch == '@':
	j = self.skip_id(s,i+1)
	word = s[i:j]
	word = string.lower(word)
elif i == 0 and match(s,i,"&lt;&lt;"): # Bug fix: 2/15/02
	# Possible section definition line.
	j = string.find(s,"&gt;&gt;=",i+2)
	if j != -1:
		state = normalState
		continue # rescan the line
else:
	word = ""

if word == "@c" or word == "@code":
	# End of the doc part.
	body.tag_remove("docPart", index(n,i), index(n,j))
	body.tag_add("leoKeyword", index(n,i), index(n,j))
	i = j ; state = normalState
else:
	# The entire line is in the doc part.
	body.tag_add("docPart", index(n,i), index(n,sLen))
	i = sLen # skipt the rest of the line.</t>
<t tx="T917">j = string.find(s, '"""', i)
if j == -1:
	# The entire line is part of the triple-quoted string.
	body.tag_add("string", index(n,i), index(n,"end"))
	i = sLen # skipt the rest of the line.
else:
	# End the string
	body.tag_add("string", index(n,i), index(n,j+3))
	i = j + 3 ; state = normalState</t>
<t tx="T918">if i == 0 and ch == '@':
	j = self.skip_id(s,i+1)
	word = s[i:j]
	word = string.lower(word)
else:
	word = ""

if word == "@color":
	# End of the nocolor part.
	## body.tag_remove("normal", index(n,0), index(n,j))
	body.tag_add("leoKeyword", index(n,0), index(n,j))
	i = j ; state = normalState
else:
	# The entire line is in the nocolor part.
	## body.tag_add("normal", index(n,0), index(n,sLen))
	i = sLen # skipt the rest of the line.</t>
<t tx="T919">j, state = self.skip_python_string(s,i)
body.tag_add("string", index(n,i), index(n,j))
i = j</t>
<t tx="T920">body.tag_add("comment", index(n,i), index(n,"end"))
i = sLen</t>
<t tx="T921">j = self.skip_id(s,i+1)
word = s[i:j]
word = string.lower(word)
if i != 0 and word != "@others":
	word = "" # can't be a Leo keyword, even if it looks like it.

# to do: the keyword should start the line.
if word == "@" or word == "@doc":
	# at-space starts doc part
	## body.tag_remove("normal", index(n,i), index(n,j))
	body.tag_add("leoKeyword", index(n,i), index(n,j))
	# Everything on the line is in the doc part.
	body.tag_add("docPart", index(n,j), index(n,sLen))
	i = sLen ; state = docState
elif word == "@nocolor":
	# Nothing on the line is colored.
	## body.tag_add("normal", index(n,j), index(n,sLen))
	i = sLen ; state = nocolorState
elif word in leoKeywords:
	## body.tag_remove("normal", index(n,i), index(n,j))
	body.tag_add("keyword", index(n,i), index(n,j))
	i = j
else:
	## body.tag_add("normal", index(n,i), index(n,j+1))
	i = j</t>
<t tx="T922">if s[i:i+2] == "&lt;&lt;":
	# See if the line contains &gt;&gt;
	
	j = string.find(s,"&gt;&gt;=",i+2) ; k = 3
	if j == -1:
		j = string.find(s,"&gt;&gt;",i+2) ; k = 2
	if j == -1:
		## body.tag_add("normal", index(n,i), index(n,i+1))
		i += 2
	else:
		searchName = body.get(index(n,i),   index(n,j+k)) # includes brackets
		# linkName   = body.get(index(n,i+2), index(n,j)) # does not include brackets
		ref = findReference(searchName,v)
		## body.tag_remove("normal", index(n,i), index(n,j+k))
		body.tag_add("nameBrackets", index(n,i), index(n,i+k))
		if ref:
			body.tag_add("link", index(n,i+2), index(n,j))
			&lt;&lt; set the hyperlink &gt;&gt;
		elif k == 3: # a section definition
			body.tag_add("link", index(n,i+2), index(n,j))
		else:
			body.tag_add("name", index(n,i+2), index(n,j))
		body.tag_add("nameBrackets", index(n,j), index(n,j+k))
		i = j + k
else: # a single '&lt;'
	## body.tag_add("normal", index(n,i))
	i += 1</t>
<t tx="T923"># Set the bindings to vnode callbacks.
if self.use_hyperlinks:
	# Create the tag.
	# Create the tag name.
	tagName = "hyper" + `hyperCount`
	hyperCount += 1
	body.tag_delete(tagName)
	body.tag_add(tagName, index(n,i+2), index(n,j))
	ref.tagName = tagName
	body.tag_bind(tagName,"&lt;Control-1&gt;",ref.OnHyperLinkControlClick)
	body.tag_bind(tagName,"&lt;Any-Enter&gt;",ref.OnHyperLinkEnter)
	body.tag_bind(tagName,"&lt;Any-Leave&gt;",ref.OnHyperLinkLeave)</t>
<t tx="T924">j = self.skip_id(s,i)
word = s[i:j]
if keyword.iskeyword(word):
	## body.tag_remove("normal", index(n,i), index(n,j))
	body.tag_add("keyword", index(n,i), index(n,j))
else:
	pass # body.tag_add("normal", index(n,i), index(n,j))
i = j</t>
<t tx="T925">body.tag_add("blank", index(n,i)) ; i += 1
</t>
<t tx="T926">body.tag_add("tab", index(n,i)) ; i += 1
</t>
<t tx="T927"># body.tag_add("normal", index(n,i))
i += 1
</t>
<t tx="T928">@ These callbacks are vnode methods so we can pass the vnode back to the tree class.
</t>
<t tx="T929"># Called when the box is clicked or the icon or headline are double-clicked.

def OnBoxClick(self,event=None):

	self.commands.tree.OnBoxClick(self)</t>
<t tx="T930">def OnDrag(self,event=None):
	
	self.commands.tree.OnDrag(self,event)
</t>
<t tx="T931">def OnEndDrag(self,event=None):
	
	self.commands.tree.OnEndDrag(self,event)
</t>
<t tx="T932">def OnHeadlineClick(self,event=None):

	self.commands.tree.OnActivate(self)</t>
<t tx="T933">def OnHeadlineKey (self,event):

	self.commands.tree.OnHeadlineKey(self,event)</t>
<t tx="T934">def OnHyperLinkControlClick (self,event):

	c = self.commands ; v = self
	c.beginUpdate()
	c.selectVnode(v)
	c.endUpdate()
	c.body.mark_set("insert","1.0")</t>
<t tx="T935">def OnHyperLinkEnter (self,event):

	c = self.commands ; v = self
	if 0: # This works, and isn't very useful.
		c.body.tag_config(v.tagName,background="green")</t>
<t tx="T936">def OnHyperLinkLeave (self,event):

	c = self.commands ; v = self
	if 0: # This works, and isn't very useful.
		c.body.tag_config(v.tagName,background="white")</t>
<t tx="T937">def OnIconClick(self,event=None):
	
	self.commands.tree.OnIconClick(self,event)
</t>
<t tx="T938">@ We search the descendents of v looking for the definition node matching name.
There should be exactly one such node (descendents of other definition nodes are not searched).
@c

def findReference(name,root):

	after = root.nodeAfterTree()
	v = root.firstChild()
	while v and v != after:
		if v.matchHeadline(name) and not v.isAtIgnoreNode():
			return v
		v = v.threadNext()
	return None
</t>
<t tx="T939">@ignore

changed x.tab_width to abs(x.tab_width) in most places.</t>
<t tx="T940">def OnActivateLeoEvent(self,event=None):

	c = self.commands
	app().log = self
</t>
<t tx="T941">@nocolor

tangle uses self.tab_width.
Everything else should use c.tab_width.

@color</t>
<t tx="T942">def setTabWidth (self, w):
	
	# EKR 2/28/02: made code size platform dependent.
	if sys.platform=="win32": # Windows
		font = tkFont.Font(family="Courier",size=9)
	else:
		font = tkFont.Font(family="Courier",size=12)
		
	# print "frame.setTabWidth:" + `w`
	tabw = font.measure(" " * abs(w)) # 7/2/02
	self.body.configure(tabs=tabw)</t>
<t tx="T943">def drawBox (self,v,x,y):

	y += 7 # draw the box at x, y+7

	# Portability fix for linux.
	minus_node = os.path.join("Icons", "minusnode.gif")
	plus_node = os.path.join("Icons", "plusnode.gif")
	iconname = choose(v.isExpanded(), minus_node, plus_node)
	
	image = self.getIconImage(iconname)
	id = self.canvas.create_image(x,y,image=image)
	if 0: # don't create a reference to this!
		v.box_id = id
	self.canvas.tag_bind(id, "&lt;1&gt;", v.OnBoxClick)
	self.canvas.tag_bind(id, "&lt;Double-1&gt;", lambda x: None)</t>
<t tx="T944"># draws text for v at x,y

def drawText(self,v,x,y):

	x += text_indent
	if v.edit_text: # self.canvas.delete("all") may already have done this, but do it anyway.
		v.edit_text.destroy()
	v.edit_text = t = Tkinter.Text(self.canvas,bd=0,relief="flat",width=self.headWidth(v),height=1)
	t.insert("end", v.headString())
	&lt;&lt; configure the text depending on state &gt;&gt;
	t.bind("&lt;1&gt;", v.OnHeadlineClick)
	if 0: # 6/15/02: Bill Drissel objects to this binding.
		t.bind("&lt;Double-1&gt;", v.OnBoxClick)
	t.bind("&lt;Key&gt;", v.OnHeadlineKey)
	id = self.canvas.create_window(x,y,anchor="nw",window=t)
	if 0: # don't create this reference!
		v.edit_text_id = id
	self.canvas.tag_lower(id)

	return line_height</t>
<t tx="T945">if v == self.currentVnode:
	if self.bodyKeepsFocus:
		t.configure(state="disabled",fg="black",bg="gray80")
	else:
		w = self.commands.frame.getFocus()
		if w == self.canvas:
			t.configure(state="normal",fg="white",bg="DarkBlue")
		else:
			t.configure(state="disabled",fg="black",bg="gray80")
else:
	t.configure(state="disabled",fg="black",bg="white")</t>
<t tx="T946"># Cutting a node definitely does not set the ancestor @file node dirty!</t>
<t tx="T947">@ This is called from the key-event handler, so we must not force a redraw of the screen here. We avoid redraw in most cases by passing redraw_flag to c.endUpdate().

This is called from v.setDirty, so we avoid further calls to v.setDirty here.  The caller, that is, v.setDirty itself, handles all clones.

@c
def setAncestorAtFileNodeDirty(self):

	# Look up the tree for an ancestor @file node.
	v = self ; c = v.commands
	redraw_flag = false
	c.beginUpdate()
	while v:
		if not v.isDirty() and v.isAtFileNode():
			redraw_flag = true
			v.t.setDirty() # Do not call v.setDirty here!
		v = v.parent()
	c.endUpdate(redraw_flag) # A crucial optimization!
	return redraw_flag # Allow caller to do the same optimization.</t>
<t tx="T948">@ It is vital that @file nodes remain dirty until they are written without errors.  Otherwise, a Save command will succeeed without warning, and a later read may cause the dreaded "clones have been cleared" message.</t>
<t tx="T949">assert(match(s,i,"+node:"))
i += 6

childIndex = 0 ; cloneIndex = 0
&lt;&lt; Set childIndex &gt;&gt;
&lt;&lt; Set cloneIndex &gt;&gt;
headline = ""
&lt;&lt; Set headline and ref &gt;&gt;
oldIndent = self.indent ; self.indent = lineIndent

if childIndex == 0: # The root node.
	&lt;&lt; Check the filename in the sentinel &gt;&gt;
	# Put the text of the root node in the current node.
	self.scanText(file,v,out,atFile.endNode)
	v.t.setCloneIndex(cloneIndex)
	# if cloneIndex &gt; 0: trace("clone index:" + `cloneIndex` + ", " + `v`)
	self.indent = oldIndent
else:
	# NB: this call to createNthChild is the bottleneck!
	child = self.createNthChild(childIndex,v,headline)
	child.t.setCloneIndex(cloneIndex)
	# if cloneIndex &gt; 0: trace("clone index:" + `cloneIndex` + ", " + `child`)
	child_out = []
	self.scanText(file,child,child_out,atFile.endNode)
	# If text followed the section reference in the outline,
	# that text will immediately follow the @-node sentinel.
	s = file.readline()
	# 2/24/02: when newlines are suppressed the next line could be a sentinel.
	if len(s) &gt; 1 and self.sentinelKind(s) == atFile.startVerbatimAfterRef:
		s = file.readline()
		# trace("verbatim:"+`s`)
		out.append(s)
	elif len(s) &gt; 1 and self.sentinelKind(s) == atFile.noSentinel: 
		out.append(s)
	else:
		nextLine = s
	if child.isOrphan():
		self.readError("Replacing body text of orphan: " + child.headString())
	body = string.join(child_out, "")
	child.t.setTnodeText(body)
	self.indent = oldIndent
	if len(s) == 1: # don't discard newline
		continue</t>
<t tx="T950">i = skip_ws(s,i) ; j = i
while i &lt; len(s) and s[i] in string.digits:
	i += 1

if j == i or not match(s,i,':'):
	self.readError("Bad child index in @+node")
else:
	childIndex = int(s[j:i])
	i += 1 # Skip the ":".</t>
<t tx="T951">while i &lt; len(s) and s[i] != ':' and not is_nl(s,i):
	if match(s,i,"C="):
		# set cloneIndex from the C=nnn, field
		i += 2 ; j = i
		while i &lt; len(s) and s[i] in string.digits:
			i += 1
		if j &lt; i:
			cloneIndex = int(s[j:i])
	else: i += 1 # Ignore unknown status bits.

if match(s,i,":"):
	i += 1
else:
	self.readError("Bad attribute field in @+node")</t>
<t tx="T952"># Set headline to the rest of the line.
if len(self.endSentinelComment) == 0:
	headline = string.strip(s[i:-1])
else:
	k = string.find(s,self.endSentinelComment,i)
	headline = string.strip(s[i:k]) # works if k == -1

# Set reference if it exists.
i = skip_ws(s,i)

if 0: # no longer used
	if match(s,i,"&lt;&lt;"):
		k = string.find(s,"&gt;&gt;",i)
		if k != -1: ref = s[i:k+2]</t>
<t tx="T953">fileName = string.strip(headline)

if fileName[:5] == "@file":
	fileName = string.strip(fileName[5:])
	if fileName != self.targetFileName:
		self.readError("File name in @node sentinel does not match file's name")
else:
	self.readError("Missing @file in root @node sentinel")</t>
<t tx="T954">@ This method expands a code part, terminated by any at-directive except at-others.  It expands references and at-others and outputs @verbatim sentinels as needed.
@c
def putCodePart(self,s,i,v):

	c = self.commands
	atOthersSeen = false # true: at-others has been expanded.
	while i &lt; len(s):
		&lt;&lt; handle the start of a line &gt;&gt;
		&lt;&lt; put the line &gt;&gt;
	return i</t>
<t tx="T955">@ The at-others directive is the only directive that is recognized following leading whitespace, so it is just a little tricky to recognize it.
@c

j,delta = skip_leading_ws_with_indent(s,i,self.tab_width)
kind1 = self.directiveKind(s,i)
kind2 = self.directiveKind(s,j)
if kind1 == atFile.othersDirective or kind2 == atFile.othersDirective:
	&lt;&lt; handle @others &gt;&gt;
elif kind1 == atFile.noDirective:
	&lt;&lt; put @verbatim sentinel if necessary &gt;&gt;
else:
	break # all other directives terminate the code part.
</t>
<t tx="T956"># This skips all indent and delta whitespace, so putAtOthers must generate it all.
i = skip_to_end_of_line(s,i)
if atOthersSeen:
	self.writeError("@others already expanded in: " + v.headString())
else:
	atOthersSeen = true
	self.putAtOthers(v, delta)</t>
<t tx="T957">if match (s, i, self.startSentinelComment + '@'):
	self.putSentinel("verbatim")</t>
<t tx="T958">self.putIndent(self.indent)

while i &lt; len(s):
	ch = s[i]
	if ch == body_newline:
		self.onl()
		i = skip_nl(s, i)
		break
	elif ch == body_ignored_newline:
		i += 1
	elif ch == '&lt;':
		&lt;&lt; put possible section reference &gt;&gt;
	else:
		self.os(ch)
		i += 1</t>
<t tx="T959">isSection, j = self.isSectionName(s, i)

if isSection:
	# Output the expansion.
	name = s[i:j]
	self.putRef(name,v,s,j,delta)
	assert(j &gt; i) # isSectionName must have made progress
	i = j
else:
	self.os(s[i]) # This is _not_ an error.
	i += 1</t>
<t tx="T960"># returns (flag, end). end is the index of the character after the section name.

def isSectionName(self,s,i):

	if not match(s,i,"&lt;&lt;"):
		return false, -1
	i = find_on_line(s,i,"&gt;&gt;")
	if i:
		return true, i + 2
	else:
		return false, -1</t>
<t tx="T961">@ Returns true if v should be included in the expansion of the at-others directive in the body text of v's parent. v will not be included if it is a definition node or if its body text contains another at-others or @ignore directive.
@c
def inAtOthers(self,v):

	# Return false if this has been expanded previously.
	if  v.isVisited(): return false
	# Return false if this is a definition node.
	h = v.headString()
	i = skip_ws(h,0)
	isSection, j = self.isSectionName(h,i)
	if isSection: return false
	# Return false if v's body contains an @ignore or at-others directive.
	return not v.isAtIgnoreNode() and not v.isAtOthersNode()</t>
<t tx="T962">@ The at-others directive is recognized only at the start of the line.  This code must generate all leading whitespace for the opening sentinel.
@c
def putAtOthers(self,v,delta):

	self.indent += delta
	self.putSentinel("@+others")
	child = v.firstChild()
	while child:
		if self.inAtOthers( child ):
			self.putAtOthersChild( child )
		child = child.next()
	self.putSentinel("@-others")
	self.indent -= delta</t>
<t tx="T963">def putAtOthersChild(self,v):

	self.putOpenNodeSentinel(v)
	
	# Insert the expansion of v.
	v.setVisited() # Make sure it is never expanded again.
	self.putBodyPart(v)

	# Insert expansions of all children.
	child = v.firstChild()
	while child:
		if self.inAtOthers( child ):
			self.putAtOthersChild( child )
		child = child.next()

	self.putCloseNodeSentinel(v)</t>
<t tx="T964">def putRef (self,name,v,s,i,delta):

	# trace(get_line(s[i:],0))
	ref = findReference(name, v)
	if ref:
		# 2/24/02: adjust indent here so sentinel looks better.
		self.indent += delta 
		self.putSentinel("@" + name)
		self.putBody(v, ref)
		self.indent -= delta
		# 2/25/02: Add a sentinel if required.
		j = skip_ws(s,i)
		if j &lt; len(s) and match(s,j,self.startSentinelComment + '@'):
			self.putSentinel("@verbatimAfterRef")
	else:
		self.writeError("undefined section: " + name +
			"\n\treferenced from: " + v.headString())</t>
<t tx="T965">@ This method tells what kind of sentinel appears in line s.  Typically s will be an empty line before the actual sentinel, but it is also valid for s to be an actual sentinel line.

Returns (kind, s, emptyFlag), where emptyFlag is true if kind == noSentinel and s was an empty line on entry.
@c

sentinelDict = {
	"@verbatim": startVerbatim,
	"@verbatimAfterRef": startVerbatimAfterRef,
	"@+at": startAt, "@-at": endAt,
	"@+body": startBody, "@-body": endBody,
	"@+doc": startDoc, "@-doc": endDoc,
	"@+leo": startLeo, "@-leo": endLeo,
	"@+node": startNode, "@-node": endNode,
	"@+others": startOthers, "@-others": endOthers }

def sentinelKind(self,s):

	i = skip_ws(s,0)
	if match(s,i,self.startSentinelComment): 
		i += len(self.startSentinelComment)
	else:
		return atFile.noSentinel
	# Do not skip whitespace here!
	if match(s,i,"@&lt;&lt;"): return atFile.startRef
	if match(s,i,"@@"): return atFile.startDirective
	if not match(s,i,'@'): return atFile.noSentinel
	j = i # start of lookup
	i += 1 # skip the at sign.
	if match(s,i,'+') or match(s,i,'-'):
		i += 1
	i = skip_c_id(s,i)
	# trace(`s[j:i]`)
	key = s[j:i]
	if len(key) &gt; 0 and atFile.sentinelDict.has_key(key):
		return atFile.sentinelDict[key]
	else:
		return atFile.noSentinel</t>
<t tx="T966">@ All sentinels are eventually output by this method.

Sentinels include both the preceding and following newlines. This rule greatly simplies the code and has several important benefits:

1. Callers never have to generate newlines before or after sentinels.  Similarly, routines that expand code and doc parts never have to add "extra" newlines.
2. There is no need for a "no-newline" directive.  If text follows a section reference, it will appear just after the newline that ends sentinel at the end of the expansion of the reference.  If no significant text follows a reference, there will be two newlines following the ending sentinel.

The only exception is that no newline is required before the opening "leo" sentinel. The putLeoSentinel and isLeoSentinel routines handle this minor exception.
@c
def putSentinel(self,s):

	self.newline_pending = false # discard any pending newline.
	self.onl() ; self.putIndent(self.indent) # Start of sentinel.
	self.os(self.startSentinelComment)
	self.os(s)
	self.os(self.endSentinelComment)
	if self.suppress_newlines:
		self.newline_pending = true # Schedule a newline.
	else:
		self.onl() # End of sentinel.</t>
<t tx="T967">@ignore
@ Apparently we can not reference leo.__file__ reliably until leo has been completely imported.  The workaround is to do so in app.finishCreate.  This is a bit mysterious, and it appears to work.</t>
<t tx="T968"># Called when the gApp global has been defined.

def finishCreate(self):

	&lt;&lt; set loadDir &gt;&gt;
	&lt;&lt; set the default Leo icon &gt;&gt;
	self.config = leoConfig.config()
	
	# Create the global windows
	self.findFrame = leoFind.LeoFind()
	self.findFrame.top.withdraw()</t>
<t tx="T969"># loadDir should be the directory that contains leo.py

try:
	self.loadDir = os.path.dirname(leo.__file__)
except:
	# Emergency defaults.  Hopefully we will never have to use them.
	if sys.platform=="win32": # Windows
		self.loadDir = "c:\\prog\\LeoPy\\"
	else: # Linux, or whatever.
		self.loadDir = "LeoPy"
	print "Setting load directory to:", self.loadDir

# Trace hasn't been enabled yet.
# print `self.loadDir`</t>
<t tx="T970">try: # 6/2/02: Try to set the default bitmap.
	bitmap_name = os.path.join(self.loadDir, "Icons\LeoApp.ico")
	bitmap = Tkinter.BitmapImage(bitmap_name)
except:
	print "exception creating bitmap"

try:
	version = self.root.getvar("tk_patchLevel")
	# print "tcl version:" + `version`
	&lt;&lt; set v834 if version is 8.3.4 or greater &gt;&gt;
except:
	print "exception getting version"
	v834 = None # 6/18/02
	
if v834:
	try:
		if sys.platform=="win32": # Windows
			top.wm_iconbitmap(bitmap,default=1)
		else:
			top.wm_iconbitmap(bitmap)
	except:
		es("exception setting bitmap")</t>
<t tx="T971"># A compare version utility would be good.

vlist = string.split(version,".")

v0 = int(vlist[0])
v1 =  int(vlist[1])
if len(vlist) &gt; 2: 
	v2 = int(vlist[2])
else:
	v2 = 0

v834 = v0 &gt; 8 or (
	(v0 == 8 and v1 &gt; 3) or (
	(v0 == 8 and v1 == 3 and v2 &gt;= 4 )))</t>
<t tx="T972">@ignore

Better traces on @read failure.</t>
<t tx="T973">@nocolor

use os.path.join(a,b) rather than a + "\\" + b
use os.path.exists(path) to test whether directories exist.
use os.normpath(path) and os.normcase(path) ?

os.pathjoin(path1[, path2[, ...]]) Joins one or more path components intelligently. If any component is an absolute path, all previous components are thrown away, and joining continues. The return value is the concatenation of path1, and optionally path2, etc., with exactly one slash ('/') inserted between components, unless path is empty.

6/4/02  Leo will now use the directory from which a .leo file has been loaded as the default value for Default Tangle Dirctory.  fileCommands.open sets c.openDirectory, and that should be what we need.

@color</t>
<t tx="T974">def run(*args):

	# Create a hidden main window: this window never becomes visible!
	root = Tkinter.Tk()
	&lt;&lt; set the icon image &gt;&gt;
	root.title("Leo Main Window")
	root.withdraw()
	# Initialize application globals
	app = leoApp.LeoApp(root)
	leoGlobals.setApp(app)
	app.finishCreate() # do this after gApp exists.
	# Create the first Leo window
	frame = leoFrame.LeoFrame()
	frame.startupWindow = leoGlobals.true
	init_sherlock(args)
	root.mainloop()</t>
<t tx="T975">if 0: # not yet
	fullname = r"c:\prog\LeoPy\Icons\box05.GIF"
	image = Tkinter.PhotoImage(file=fullname)
	trace(`image`)
	image = Tkinter.BitmapImage(image)
	trace(`image`)
	image = Tkinter.BitmapImage("stop")
	trace(`image`)
	root.iconbitmap(image)</t>
<t tx="T976">def __init__(self, root):

	# These ivars are the global vars of this program.
	self.root = root # The hidden main window
	self.log = None # The LeoFrame containing the present log
	self.quitting = false # True if quitting.  Locks out some events.
	self.windowList = [] # Global list of all frames.  Does not include hidden root window.
	self.numberOfWindows = 0 # Number of opened windows.
	self.loadDir = None # The directory from which Leo was loaded.
	self.configDir = None # The directory containing configuration info.
	self.config = None # The leoConfig instance.
	self.idle_imported = false # true: we have done an import idle
	
	# Global options...
	self.trace_list = [] # "Sherlock" argument list for tracing().
	self.deleteOnClose = true # true: delete frame objects when a frame closes.
	if 0: # app() is not accessible during shutdown!
		self.printDel = false # true: enable prints in __del__ routines

	# Set by finishCreate...
	self.findFrame = None
	self.pythonFrame = None</t>
<t tx="T977">def __init__(self,theCommander):

	# trace("__init__", "atFile.__init__")
	self.commands = theCommander # The commander for the current window.
	self.initIvars()

def initIvars(self):

	&lt;&lt; initialize atFile ivars &gt;&gt;</t>
<t tx="T978">@ errors is the number of errors seen while reading and writing.  structureErrors are errors reported by createNthChild.  If structure errors are found we delete the outline tree and rescan.
@c
self.errors = 0
self.structureErrors = 0

@ Set by atFile.scanAllDirectives
@c
self.default_directory = None
self.tab_width = leoPrefs.default_tab_width
self.page_width = leoPrefs.default_page_width

@ The files used by the output routines.  When tangling, we first write to a temporary output file.  After tangling is temporary file.  Otherwise we delete the old target file and rename the temporary file to be the target file.
@c
self.shortFileName = "" # short version of file name used for messages.
self.targetFileName = ""
self.outputFileName = ""
self.outputFile = None # The temporary output file.

@ The indentation used when outputting section references or at-others sections.  We add the indentation of the line containing the at-node directive and restore the old value when the
expansion is complete.
@c
self.indent = 0  # The unit of indentation is spaces, not tabs.

@ The strings specifying the beginning and end of sentinel comments. endSentinelComment is empty for single-line comment before and after the &lt;leo&gt; tag in the first line of the file.
@c
self.startSentinelComment = "//"
self.endSentinelComment = ""

# Used to parse @language and @comment directives.
self.presentLanguage = python_language
self.targetLanguage = python_language ## Should be set from the preferences panel.
self.singleCommentString = "#"
self.startCommentString = ""
self.endCommentString = ""

# The root of tree being written.
self.root = None

# Ivars used to suppress newlines between sentinels.
self.suppress_newlines = true # true: enable suppression of newlines.
self.newline_pending = false # true: newline is pending on read or write.</t>
<t tx="T979">@ This is the entry point to the read code.  The root vnode should be an @file node.  If doErrorRecoveryFlag is false we are doing an update.  In that case it would be very unwise to do any error recovery which might clear clone links.  If doErrorRecoveryFlag is true and there are structure errors during the first pass we delete root's children and its body text, then rescan.  All other errors indicate potentially serious problems with sentinels.

The caller has enclosed this code in beginUpdate/endUpdate.
@c
def read(self,root):

	t1 = getTime()
	# c = self.commands
	root.clearVisitedInTree() # Clear the list of nodes for orphans logic.
	self.targetFileName = root.atFileNodeName()
	self.root = root
	self.errors = self.structureErrors = 0
	&lt;&lt; open file &gt;&gt;
	if self.errors &gt; 0: return 0
	es("reading: " + root.headString())
	&lt;&lt; Scan the file buffer &gt;&gt;
	&lt;&lt; Bump mStructureErrors if any vnodes are unvisited &gt;&gt;
	next = root.nodeAfterTree()
	if self.structureErrors &gt; 0:
		self.readError("-- Rereading file.  Clone links into this file will be lost.") ;
		self.errors = 0
		root.clearVisitedInTree() # Clear the list of nodes for orphans logic.
		&lt;&lt; Delete root's tree and body text &gt;&gt;
		file.seek(0)
		&lt;&lt; Scan the file buffer &gt;&gt;
	file.close()
	if self.errors == 0:
		next = root.nodeAfterTree()
		root.clearAllVisitedInTree()
		&lt;&lt; Handle clone bits &gt;&gt;
		&lt;&lt; Join cloned trees &gt;&gt;
		&lt;&lt; Handle all status bits &gt;&gt;
	if self.errors &gt; 0:
		# A serious error has occured that has not been corrected.
		self.readError("----- File may have damaged sentinels!")
		root.unjoinTree();
	else: root.clearDirty()
	# esDiffTime("read: exit", t1)
	return self.errors == 0</t>
<t tx="T980">self.scanAllDirectives(root) # 1/30/02

if not self.targetFileName or len(self.targetFileName) == 0:
	self.readError("Missing file name.  Restoring @file tree from .leo file.")
else:
	# print `self.default_directory`, `self.targetFileName`
	fn = os.path.join(self.default_directory, self.targetFileName)
	fn = os.path.normpath(fn)
	try:
		file = open(fn,'r')
	except:
		self.readError("Can not open: " + `root.headString()`)</t>
<t tx="T981">self.indent = 0
out = []
self.scanHeader(file)
self.scanText(file,root,out,atFile.endLeo)
s = string.join(out, "")
root.setBodyStringOrPane(s)</t>
<t tx="T982">@ createNthNode marks all nodes in the derived file as visited.  Any unvisited nodes are either dummies or nodes that don't exist in the derived file.
@c

next = root.nodeAfterTree()
v = root.threadNext()
while v and v != next:
	if not v.isVisited():
		es("unvisited node: " + v.headString())
		self.structureErrors += 1
	v = v.threadNext()
</t>
<t tx="T983">while root.firstChild():
	root.firstChild().doDelete(root)

root.setBodyStringOrPane("")</t>
<t tx="T984">h = {}
v = root
while v and v != next:
	cloneIndex = v.t.cloneIndex
	# new Leo2: we skip the root node: @file nodes can not be cloned.
	if cloneIndex &gt; 0 and v != root:
		if h.has_key(cloneIndex):
			t = h[cloneIndex]
			# v is a clone: share the previous tnode.
			v.setT(t)
			t.setVisited() # We will mark these clones later.
		else: h[cloneIndex] = v.t
	v = v.threadNext()

# Set clone marks for all visited tnodes.
v = root
while v and v != next:
	if v.t.isVisited():
		if v == root:
			pass
		elif v.shouldBeClone():
			v.initClonedBit(true)
		else:
			# Not a serious error.
			es("clone links cleared for: " + v.headString())
			v.unjoinTree();
			t.setCloneIndex(0) # t is no longer cloned.
	v = v.threadNext()</t>
<t tx="T985">@ In most cases, this code is not needed, because the outline already has been read and nodes joined.  However, there could be problems on read errors, so we also join nodes here.
@c

h = {}
v = root
while v and v != next:
	cloneIndex = v.t.cloneIndex
	# new Leo2: we skip the root node: @file nodes can not be cloned.
	if cloneIndex &gt; 0 and v != root:
		if h.has_key(cloneIndex):
			clone = h[cloneIndex]
			if v.headString() == clone.headString():
				self.joinTrees(clone,v)
			else:
				# An extremely serious error.  Data may be lost.
				self.readError(
					"Outline corrupted: " +
					"different nodes have same clone index!\n\t" +
					v.headString() + "\n\t" + clone.headString())
		# Enter v so we can join the next clone to it.
		# The next call to lookup will find this v, not the previous.
		h[cloneIndex] = v
	v = v.threadNext()</t>
<t tx="T986">current = None
v = root
while v and v != next:
	if v.isSelected():
		self.commands.tree.currentVnode = current = v
	if v.isTopBitSet():
		# Just tell the open code we have seen the top vnode.
		self.commands.tree.topVnode = v ;
	v = v.threadNext()

if current:
	# Indicate what the current node will be.
	c.tree.currentVnode = current
</t>
<t tx="T987">@ To do:

remove all calls to chdir
set ivar and use it in file commands</t>
<t tx="T988">def readOutlineOnly (self,file,fileName):

	c=self.commands
	# Read the entire file into the buffer
	self.fileBuffer = file.read() ; file.close()
	self.fileIndex = 0
	&lt;&lt; Set the default directory &gt;&gt;
	c.beginUpdate()
	ok, ratio = self.getLeoFile(self.frame, false) # readAtFileNodes
	c.endUpdate()
	c.frame.top.deiconify()
	c.setChanged(false)
	c.frame.resizePanesToRatio(ratio)
	# This should be done after the pane size has been set.
	if 0: # This can not be done at present.
		if self.topVnode:
			c.tree.scrollTo(self.topVnode)
			c.tree.Refresh()
	# delete the file buffer
	self.fileBuffer = ""
	return ok</t>
<t tx="T989">@ The most natural default directory is the directory containing the .leo file that we are about to open.  If the user has specified the "Default Directory" preference that will over-ride what we are about to set.
@c

dir = os.path.dirname(fileName) 
if len(dir) &gt; 0:
	c.openDirectory = dir</t>
<t tx="T990">def open(self,file,fileName):

	c=self.commands
	# Read the entire file into the buffer
	# t = getTime()
	self.fileBuffer = file.read() ; file.close()
	self.fileIndex = 0
	&lt;&lt; Set the default directory &gt;&gt;
	# esDiffTime("open:read all", t)
	es("reading: " + fileName)
	c.beginUpdate()
	if 1: # inside update...
		c.loading = true # disable c.changed
		ok, ratio = self.getLeoFile(self.frame, true) # readAtFileNodes
		c.loading = false # reenable c.changed
		c.setChanged(false)
		# c.frame.resizePanesToRatio(ratio)
		# This should be done after the pane size has been set.
		top = c.tree.topVnode
		if 0: # This can't be done directly.
			if top: c.tree.scrollTo(top)
	c.endUpdate()
	# delete the file buffer
	self.fileBuffer = ""
	# esDiffTime("open: exit",t)
	return ok</t>
<t tx="T991">def OnReadOutlineOnly (self,event=None):

	fileName = tkFileDialog.askopenfilename(
		title="Read Outline Only",
		filetypes=[("Leo files", "*.leo"), ("All files", "*")],
		defaultextension=".leo")

	if not fileName or len(fileName) == 0:
		return "break" # inhibit further command processing
		
	file = open(fileName,'r')
	if file:
		frame = LeoFrame(fileName)
		frame.top.deiconify()
		frame.top.lift()
		app().root.update() # Force a screen redraw immediately.
		frame.commands.fileCommands.readOutlineOnly(file,fileName) # closes file.
	else:
		es("can not open:" + fileName)
	return "break" # inhibit further command processing</t>
<t tx="T992">def OnOpen(self,event=None):

	c = self.commands
	&lt;&lt; Set closeFlag if the only open window is empty &gt;&gt;
	# trace(`closeFlag`)

	fileName = tkFileDialog.askopenfilename(
		title="Open",
		filetypes=[("Leo files", "*.leo"), ("All files", "*")],
		defaultextension=".leo")

	if fileName and len(fileName) &gt; 0:
		ok, frame = self.OpenWithFileName(fileName)
		if ok and closeFlag:
			app().windowList.remove(self)
			self.destroy() # force the window to go away now.
			app().log = frame # Sets the log stream for es()

	return "break" # inhibit further command processing</t>
<t tx="T993">@ If this is the only open window was opened when the app started, and the window has never been written to or saved, then we will automatically close that window if this open command completes successfully.
@c
	
closeFlag = (
	self.startupWindow==true and # The window was open on startup
	c.changed==false and self.saved==false and # The window has never been changed
	app().numberOfWindows == 1) # Only one untitled window has ever been opened
</t>
<t tx="T994">def OpenWithFileName(self, fileName):

	if not fileName or len(fileName) == 0:
		return false, None
		
	# Display the _unnormalized_ file name
	oldFileName = fileName
		
	# Create a full normalized path name only for comparison.
	fileName = os.path.join(os.getcwd(), fileName)
	fileName = os.path.normcase(fileName)
	fileName = os.path.normpath(fileName)

	# If the file is already open just bring its window to the front.
	list = app().windowList
	for frame in list:
		fn = os.path.normcase(frame.mFileName)
		fn = os.path.normpath(fn)
		if fileName == fn:
			frame.top.deiconify()
			app().log = frame
			es("This window already open")
			return true, frame
			
	fileName = oldFileName # Use the idiosyncratic file name.

	try:
		file = open(fileName,'r')
		if file:
			frame = LeoFrame(fileName)
			frame.top.deiconify()
			frame.top.lift()
			app().root.update() # Force a screen redraw immediately.
			frame.commands.fileCommands.open(file,fileName) # closes file.
			frame.openDirectory=os.path.dirname(fileName)
			&lt;&lt; make fileName the most recent file of frame &gt;&gt;
			return true, frame
		else:
			es("can not open" + fileName)
			return false, None
	except:
		traceback.print_exc()
		es("exceptions opening" + fileName)
		return false, None</t>
<t tx="T995"># Update the recent files list in all windows.
normFileName = os.path.normcase(fileName)

for frame in app().windowList:
	if normFileName in frame.recentFiles:
		frame.recentFiles.remove(normFileName)
	frame.recentFiles.insert(0,normFileName)
	
	# Delete all elements of frame.recentFilesMenu.
	frame.recentFilesMenu.delete(0,len(frame.recentFiles))
	
	# Recreate frame.recentFilesMenu.
	i = 0
	for name in frame.recentFiles:
		exec("frame.recentFilesMenu.add_command(label=name,command=frame.OnOpenRecentFile" + `i` + ")")
		i += 1
	
# Update the config file.
app().config.setRecentFiles(frame.recentFiles)
app().config.update()</t>
<t tx="T996">@ These commands get their file names from dialogs, so there should be no need to adjust the filenames as long as we don't call chdir</t>
<t tx="T997">@ Returns a string consisting of @root "gFileName" followed by the contents of the file if appendFileFlag is true.
@c

def createRootBody (self,fileName,appendFileFlag):

	# root = "@root \"" + gFileName + "\"\n\n"
	if appendFileFlag:
		try:
			f=open(fileName,'r')
			s = f.read()
			f.close()
			return s
		except: return ""
	else: return ""</t>
<t tx="T998">def flattenOutline (self,fileName):

	c = self.commands ; v = c.currentVnode()
	if not v: return
	after = v.nodeAfterTree()
	firstLevel = v.level()
	try:
		file = open(fileName,'w')
		while v and v != after:
			head = v.moreHead(firstLevel)
			file.write( head + '\n')
			body = v.moreBody() # Inserts escapes.
			if len(body) &gt; 0:
				file.write(body + '\n')
			v = v.threadNext()
		file.close()
	except:
		es("File error while flattening the outline")</t>
<t tx="T999">def outlineToWeb (self,fileName,webType):

	c = self.commands ; v = c.currentVnode()
	if v == None: return
	self.webType = webType
	after = v.nodeAfterTree()
	try: # This can fail if the file is open by another app.
		file = open(fileName,'w')
		self.treeType = "@file"
		# Set self.treeType to @root if v or an ancestor is an @root node.
		while v:
			flag, junk = is_special(v.bodyString(),0,"@root")
			if flag:
				self.treeType = "@root" ; break
			else: v = v.parent()
		v = c.currentVnode()
		while v and v != after:
			s = self.convertVnodeToWeb(v)
			if len(s) &gt; 0:
				file.write(s)
				if s[-1] != '\n':
					file.write('\n')
			v = v.threadNext()
		file.close()
	except:
		es("File error in Outline To noweb command")</t>
<t tx="T1000">@ This is the top level method of the second pass. It creates a separate C file for each @root directive in the outline. As will be seen later,the file is actually written only if the new version of the file is different from the old version,or if the file did not exist previously. If changed_only_flag FLAG is true only changed roots are actually written.
@c

def put_all_roots(self):

	c = self.commands ; outline_name = c.frame.mFileName

	for section in self.root_list:
	
		# trace(`section.name`)
		file_name = os.path.join(self.tangle_directory,section.name)
		file_name = os.path.normpath(file_name)
		temp_name = create_temp_name()
		if not temp_name:
			es("Can not create temp file")
			break
		# Set the output_file global.
		self.output_file = open(temp_name,"w")
		if not self.output_file:
			es("Can not create: " + temp_name)
			break
		if self.use_header_flag and self.print_bits == verbose_bits:
			&lt;&lt; Write a banner at the start of the output file &gt;&gt;
		for part in section.parts:
			if part.is_root:
				self.tangle_indent = 0 # Initialize global.
				self.put_part_node(part,false) # output first lws
		self.onl() # Make sure the file ends with a cr/lf
		self.output_file.close()
		self.output_file = None
		if self.errors == 0:
			update_file_if_changed(file_name,temp_name)
		else:
			es("unchanged:  " + file_name)
			&lt;&lt; Erase the temporary file &gt;&gt;</t>
<t tx="T1001">if self.single_comment_string:
	self.os(self.single_comment_string)
	self.os(" Created by Leo from: ")
	self.os(outline_name)
	self.onl() ; self.onl()
elif self.start_comment_string and self.end_comment_string:
	self.os(self.start_comment_string)
	self.os(" Created by Leo from: ")
	self.os(outline_name)
	self.oblank() ; self.os(self.end_comment_string)
	self.onl() ; self.onl()
</t>
<t tx="T1002">
try: # Just delete the temp file.
	os.remove(temp_name)
except: pass
</t>
<t tx="T1003">def getIconImage (self, name):

	# Return the image from the cache if possible.
	if self.iconimages.has_key(name):
		return self.iconimages[name]
		
	try:
		dir = app().loadDir
		file, ext = os.path.splitext(name)
		fullname = os.path.join(dir, file + ext)
		fullname = os.path.normpath(fullname)
		image = Tkinter.PhotoImage(master=self.canvas, file=fullname)
		self.iconimages[name] = image
		return image
	except:
		es("Can not load: " + fullname)
		es("dir:" + `dir` + ", file:" + `file` + ", ext:" + `ext`)
		return None</t>
<t tx="T1004">The problem with Control-d was that event handlers did not return "break"</t>
<t tx="T1005">def OnMoveDown(self,event=None):

	self.commands.moveOutlineDown()
	return "break" # inhibit further command processing</t>
<t tx="T1006">def OnToggleActivePane (self,event=None):

	# trace(`event`)
	if self.getFocus() == self.body:
		self.canvas.focus_force()
	else:
		self.body.focus_force()
	return "break" # inhibit further command processing</t>
<t tx="T1007">@ignore</t>
<t tx="T1008">def __init__ (self):
	
	# Files and directories.
	try:
		self.configDir = sys.leo_config_directory
	except:
		self.configDir = app().loadDir
	self.configFileName = os.path.join(self.configDir,"leoConfig.txt")
	&lt;&lt; define constants &gt;&gt;
	# Settings in each section.
	self.read_only = false
	self.findDict = {}
	self.fontDict = {}
	self.prefsDict = {}
	self.recentFiles = []
	self.syntaxColoringDict = {}
	# Initialize the ivars from the config file.
	self.open()</t>
<t tx="T1009"># Language names.
self.languageNameDict = {
	c_language: "C", cweb_language: "CWEB",
	html_language: "HTML", java_language: "Java",
	pascal_language: "Pascal", perl_language: "Perl",
	perlpod_language: "PerlPod", plain_text_language: "Plain",
	python_language: "Python" }
# Names of sections.
self.configSection = "config options"
self.findSection = "find/change prefs"
self.fontSection = "font prefs"
self.prefsSection = "prefs panel"
self.recentFilesSection = "recent files"
self.syntaxColoringSection = "syntax coloring prefs"</t>
<t tx="T1010">def getRecentFiles (self):
	
	return self.recentFiles

def setRecentFiles (self,files):
	
	self.recentFiles = files
</t>
<t tx="T1011">recentFilesMenu = self.recentFilesMenu = Tk.Menu(fileMenu,tearoff=0)
fileMenu.add_cascade(label="Recent Files...", menu=recentFilesMenu)

self.recentFiles = app().config.getRecentFiles()

for i in xrange(len(self.recentFiles)):
	name = self.recentFiles[i]
	exec("recentFilesMenu.add_command(label=name,command=self.OnOpenRecentFile" + `i` + ")")
</t>
<t tx="T1012"></t>
<t tx="T1013">def OnOpenRecentFile0(self): return self.OnOpenFileN(0)
def OnOpenRecentFile1(self): return self.OnOpenFileN(1)
def OnOpenRecentFile2(self): return self.OnOpenFileN(2)
def OnOpenRecentFile3(self): return self.OnOpenFileN(3)
def OnOpenRecentFile4(self): return self.OnOpenFileN(4)
def OnOpenRecentFile5(self): return self.OnOpenFileN(5)
def OnOpenRecentFile6(self): return self.OnOpenFileN(6)
def OnOpenRecentFile7(self): return self.OnOpenFileN(7)
def OnOpenRecentFile8(self): return self.OnOpenFileN(8)
def OnOpenRecentFile9(self): return self.OnOpenFileN(9)

def OnOpenFileN(self,n):
	
	if n &lt; len(self.recentFiles):
		fileName = self.recentFiles[n]
		ok, frame = self.OpenWithFileName(fileName)

	return "break" # inhibit further command processing</t>
<t tx="T1014">def OnOpenRecentFile(self,fileName):
	
	# Update the submenu.
	# trace(`fileName`)

	# Create a new frame before deleting this frame.
	ok, frame = self.OpenWithFileName(fileName)

	return "break" # inhibit further command processing</t>
<t tx="T1015">@ The accelerator entry specified when creating a menu item just creates text.  The actual correspondance between keys and routines is defined here.
@c

def createAccelerators (self,top):

	body = self.body ; canvas = self.canvas

	fkeyBindings = [
		("F3", self.OnFindNext)
	]
	for accel, command in fkeyBindings:
		top.bind("&lt;" + accel + "&gt;", command)

	controlBindings = [
		&lt;&lt; control key bindings &gt;&gt;
	]
	# Warnings: two sets of actions will be taken for these
	# unless all event handlers returns "break".
	for accel, command in controlBindings:
		body.bind("&lt;Control-" + accel + "&gt;", command) # Necessary to override defaults in body.
		top.bind("&lt;Control-" + accel + "&gt;", command)
		
	# These keys must be bound only in the canvas widget.
	canvasControlBindings = [
		&lt;&lt; canvas control bindings &gt;&gt;
	]
	for accel, command in canvasControlBindings:
		canvas.bind("&lt;Control-" + accel + "&gt;", command)

	altBindings = [
		&lt;&lt; alt key bindings &gt;&gt;
	]
	# Warnings: two sets of actions will be taken for these
	# unless all event handlers returns "break".
	for accel, command in altBindings:
		body.bind("&lt;Alt-" + accel + "&gt;", command) # Necessary to override defaults in body.
		top.bind("&lt;Alt-" + accel + "&gt;", command)
		
	if 0: # A useful trace
		print_bindings("top",self.top)
		print_bindings("body",self.body)
		print_bindings("canvas",self.canvas)</t>
<t tx="T1016"># The names at http://tcl.activestate.com/man/tcl8.4/TkCmd/keysyms.htm must be used here.
("equal", self.OnReplace), # "="
("quoteleft", self.OnCloneNode), # "`"
("minus", self.OnReplaceThenFind),

("braceleft", self.OnPromote), # "{"
("braceright", self.OnDemote), # "}"
("bracketleft", self.OnDedent), # "["
("bracketright", self.OnIndent), # "]"
("Shift-BackSpace", self.OnDeleteNode),

# Note: These keys must be bound _only_ to the body pane!
# ("Down", self.OnGoNextVisible),
# ("Up", self.OnGoPrevVisible),
# ("Shift-Down", self.OnGoBack),
# ("Shift-Up", self.OnGoNext),

("a", self.OnSelectAll),
# "b" unused
# ("c", self.OnCopy), # Done in frame.__init__
("d", self.OnMoveDown),
("e", self.OnEqualSizedPanes),
("f", self.OnFindPanel),
("g", self.OnFindNext),
("h", self.OnEditHeadline),
("i", self.OnInsertNode), # Control-I == '\t'
# Control-J == '\n'
# Control-k no longer used
("l", self.OnMoveLeft),
("m", self.OnMark),
("n", self.OnNew),
("o", self.OnOpen),
# "p" unused.
("q", self.OnQuit),
("r", self.OnMoveRight),
("s", self.OnSave),
("t", self.OnToggleActivePane),
("u", self.OnMoveUp),
# ("v", self.OnCopy), # Done in frame.__init__
("w", self.OnClose),
# ("x", self.OnCut), # Done in frame.__init__
("y", self.OnPreferences),
("z", self.OnUndo),
# Shift-Control...
("A", self.OnTangleAll),
("B", self.OnConvertBlanks),
("C", self.OnCopyNode),
("D", self.OnExtract),
("E", self.OnExtractSection),
("F", self.OnImportAtFile),
("G", self.OnFindPrevious),
# H unused
# I reserved
("J", self.OnConvertTabs),
# K unused
# L unused
("M", self.OnTangleMarked),
("N", self.OnExtractNames),
# O unused
# P unused
# Q unused
# R unused
("S", self.OnSaveAs),
("T", self.OnTangle),
("U", self.OnUntangle),
("V", self.OnPasteNode),
# W unused
("X", self.OnCutNode),
("Z", self.OnRedo)</t>
<t tx="T1017">("Down", self.OnGoNextVisible),
("Up", self.OnGoPrevVisible),
("Shift-Down", self.OnGoNext),
("Shift-Up", self.OnGoBack),</t>
<t tx="T1018">("equal", self.OnExpandNextLevel),
("Key-0", self.OnContractParent),
("Key-1", self.OnExpandToLevel1), # Note 1-5 all by itself refers to button 1-5, not key 1-5.
("Key-2", self.OnExpandToLevel2),
("Key-3", self.OnExpandToLevel3),
("Key-4", self.OnExpandToLevel4),
("Key-5", self.OnExpandToLevel5),
("Key-6", self.OnExpandToLevel6),
("Key-7", self.OnExpandToLevel7),
("Key-8", self.OnExpandToLevel8),
("Key-9", self.OnExpandAll),
("a", self.OnSortSiblings),
# "b" unused
("c", self.OnMarkChangedItems),
("d", self.OnGoToNextChanged),
# "e" opens Edit menu
# "f" opens File menu
# "g" unused
# "h" opens Help menu
# "i" unused (reserved?)
# "j" unused (reserved?)
# "k" unused
# "l" unused
("m", self.OnGoToNextMarked),
# "n" unused
# "o" opens Outline menu
("p", self.OnOpenPythonWindow),
# "q" unused
("r", self.OnMarkChangedRoots),
("s", self.OnMarkSubheads),
# "t" unused
("u", self.OnUnmarkAll),
("v", self.OnViewAllCharacters),
# "w" opens Window menu
# "x" unused
# "y" unused
# "z" unused
# Shift-Alt
# ("E", self.OnExecuteScript),
("S", self.OnSyntaxColoring),
("T", self.OnFontPanel)</t>
<t tx="T1019">def createMenuBar(self, top):

	c = self.commands
	Tk = Tkinter
	self.topMenu = menu = Tk.Menu(top,postcommand=self.OnMenuClick)
	# To do: use Meta rathter than Control for accelerators for Unix
	&lt;&lt; create the file menu &gt;&gt;
	&lt;&lt; create the edit menu &gt;&gt;
	&lt;&lt; create the outline menu &gt;&gt;
	&lt;&lt; create the window menu &gt;&gt;
	&lt;&lt; create the help menu &gt;&gt;
	top.config(menu=menu) # Display the menu.</t>
<t tx="T1020">self.fileMenu = fileMenu = Tk.Menu(menu,tearoff=0)
menu.add_cascade(label="File",menu=fileMenu)
&lt;&lt; create the top-level file entries &gt;&gt;
&lt;&lt; create the recent files submenu &gt;&gt;
fileMenu.add_separator()
&lt;&lt; create the read/write submenu &gt;&gt;
&lt;&lt; create the tangle submenu &gt;&gt;
&lt;&lt; create the untangle submenu &gt;&gt;
&lt;&lt; create the import submenu &gt;&gt;
fileMenu.add_separator()
fileMenu.add_command(label="Exit", command=self.OnQuit)</t>
<t tx="T1021">fileMenu.add_command(label="New",accelerator="Ctrl+N", command=self.OnNew)
fileMenu.add_command(label="Open...",accelerator="Ctrl+O", command=self.OnOpen)
fileMenu.add_separator()

fileMenu.add_command(label="Close",accelerator="Ctrl+W", command=self.OnClose)
fileMenu.add_command(label="Save",accelerator="Ctrl+S", command=self.OnSave)
fileMenu.add_command(label="Save As",accelerator="Shift+Ctrl+S", command=self.OnSaveAs)
fileMenu.add_command(label="Save To",command=self.OnSaveTo)
fileMenu.add_command(label="Revert To Saved",command=self.OnRevert)

@ It is doubtful that leo.py will ever support a Print command directly.  Rather, users can use export commands to create text files that may then be formatted and printed as desired.
@c
if 0:
	fileMenu.add_command(label="Page Setup", accelerator="Shift+Ctrl+P",command=self.OnPageSetup)
	fileMenu.add_command(label="Print", accelerator="Ctrl+P", command=self.OnPrint)
	fileMenu.add_separator()</t>
<t tx="T1022">readWriteMenu = Tk.Menu(fileMenu,tearoff=0)
fileMenu.add_cascade(label="Read/Write...", menu=readWriteMenu)

readWriteMenu.add_command(label="Read Outline Only",command=self.OnReadOutlineOnly)
readWriteMenu.add_command(label="Read @file Nodes",command=self.OnReadAtFileNodes)
readWriteMenu.add_command(label="Write Outline Only",command=self.OnWriteOutlineOnly)
readWriteMenu.add_command(label="Write @file Nodes",command=self.OnWriteAtFileNodes)</t>
<t tx="T1023">tangleMenu = Tk.Menu(fileMenu,tearoff=0)
fileMenu.add_cascade(label="Tangle...", menu=tangleMenu)

tangleMenu.add_command(label="Tangle All",
	accelerator="Shift+Ctrl+A",
	command=self.OnTangleAll)
tangleMenu.add_command(label="Tangle Marked",
	accelerator="Shift+Ctrl+M",
	command=self.OnTangleMarked)
tangleMenu.add_command(label="Tangle",
	accelerator="Shift+Ctrl+T",
	command=self.OnTangle)</t>
<t tx="T1024">untangleMenu = Tk.Menu(fileMenu,tearoff=0)
fileMenu.add_cascade(label="Untangle...", menu=untangleMenu)

untangleMenu.add_command(label="Untangle All",
	command=self.OnUntangleAll)
untangleMenu.add_command(label="Untangle Marked",
	command=self.OnUntangleMarked)
untangleMenu.add_command(label="Untangle",
	accelerator="Shift+Ctrl+U",command=self.OnUntangle)</t>
<t tx="T1025">importMenu = Tk.Menu(fileMenu,tearoff=0)
fileMenu.add_cascade(label="Import/Export...", menu=importMenu)

importMenu.add_command(label="Import To @file",accelerator="Shift+Ctrl+F",
	command=self.OnImportAtFile)
importMenu.add_command(label="Import To @root",
	command=self.OnImportAtRoot)
importMenu.add_command(label="Import CWEB Files",
	command=self.OnImportCWEBFiles)
importMenu.add_command(label="Import noweb Files",
	command=self.OnImportNowebFiles)
importMenu.add_command(label="Import Flattened Outline",
	command=self.OnImportFlattenedOutline)
importMenu.add_separator()

importMenu.add_command(label="Outline To CWEB",
	command=self.OnOutlineToCWEB)
importMenu.add_command(label="Outline To Noweb",
	command=self.OnOutlineToNoweb)
importMenu.add_command(label="Flatten Outline",
	command=self.OnFlattenOutline)
importMenu.add_command(label="Remove Sentinels",
	command=self.OnRemoveSentinels)</t>
<t tx="T1026">self.editMenu = editMenu = Tk.Menu(menu,tearoff=0)
menu.add_cascade(label="Edit", menu=editMenu)

editMenu.add_command(label="Can't Undo",
	accelerator="Ctrl+Z",command=self.OnUndo)
editMenu.add_command(label="Can't Redo",
	accelerator="Shift+Ctrl+Z",command=self.OnRedo)
editMenu.add_separator()

editMenu.add_command(label="Cut", accelerator="Ctrl+X", command=self.OnCutFromMenu)
editMenu.add_command(label="Copy", accelerator="Ctrl+C", command=self.OnCopyFromMenu)
editMenu.add_command(label="Paste", accelerator="Ctrl+V", command=self.OnPasteFromMenu) 

editMenu.add_command(label="Delete",
	command=self.OnDelete)
editMenu.add_command(label="Select All",
	command=self.OnSelectAll)
editMenu.add_separator()

editMenu.add_command(label="Edit Headline",
	accelerator="Ctrl+H",command=self.OnEditHeadline)
&lt;&lt; create the edit body submenu &gt;&gt;
&lt;&lt; create the find submenu &gt;&gt;
editMenu.add_command(label="Set Font...",
	accelerator="Shift+Alt+T",command=self.OnFontPanel,state="disabled") #
editMenu.add_command(label="Set Colors...",
	accelerator="Shift+Alt+S",command=self.OnSyntaxColoring,state="disabled") #

label = choose(c.tree.colorizer.showInvisibles,"Hide Invisibles","Show Invisibles")
editMenu.add_command(label=label,command=self.OnViewAllCharacters,
	accelerator="Alt+V")
editMenu.add_separator()

editMenu.add_command(label="Preferences",accelerator="Ctrl+Y",command=self.OnPreferences)</t>
<t tx="T1027">self.editBodyMenu = editBodyMenu = Tk.Menu(editMenu,tearoff=0)
editMenu.add_cascade(label="Edit Body...", menu=editBodyMenu)

editBodyMenu.add_command(label="Extract Section",
	accelerator="Shift+Ctrl+E",command=self.OnExtractSection)
editBodyMenu.add_command(label="Extract Names",
	accelerator="Shift+Ctrl+N",command=self.OnExtractNames)
editBodyMenu.add_command(label="Extract",
	accelerator="Shift+Ctrl+D",command=self.OnExtract)
editBodyMenu.add_separator()
	
editBodyMenu.add_command(label="Convert All Blanks",
	command=self.OnConvertAllBlanks)
editBodyMenu.add_command(label="Convert All Tabs",
	command=self.OnConvertAllTabs)
editBodyMenu.add_command(label="Convert Blanks",
	accelerator="Shift+Ctrl+B",command=self.OnConvertBlanks)
editBodyMenu.add_command(label="Convert Tabs",
	accelerator="Shift+Ctrl+J",command=self.OnConvertTabs)
editBodyMenu.add_separator()

editBodyMenu.add_command(label="Indent",
	accelerator="Ctrl+]",command=self.OnIndent)
editBodyMenu.add_command(label="Unindent",
	accelerator="Ctrl+[",command=self.OnDedent)</t>
<t tx="T1028">findMenu = Tk.Menu(editMenu,tearoff=0)
editMenu.add_cascade(label="Find...", menu=findMenu)

findMenu.add_command(label="Find Panel",accelerator="Ctrl+F",
	command=self.OnFindPanel)
findMenu.add_separator()

findMenu.add_command(label="Find Next",accelerator="F3",
	command=self.OnFindNext)
findMenu.add_command(label="Find Next",accelerator="Ctrl+G",
	command=self.OnFindNext)
findMenu.add_command(label="Find Previous",accelerator="Shift+Ctrl+G",
	command=self.OnFindPrevious)
findMenu.add_command(label="Replace",accelerator="Ctrl+=",
	command=self.OnReplace)
findMenu.add_command(label="Replace, Then Find",accelerator="Ctrl+-",
	command=self.OnReplaceThenFind)</t>
<t tx="T1029">self.outlineMenu = outlineMenu = Tk.Menu(menu,tearoff=0)
menu.add_cascade(label="Outline", menu=outlineMenu)

outlineMenu.add_command(label="Cut Node",
	accelerator="Shift+Ctrl+X",command=self.OnCutNode)
outlineMenu.add_command(label="Copy Node",
	accelerator="Shift+Ctrl+C",command=self.OnCopyNode)
outlineMenu.add_command(label="Paste Node",
	accelerator="Shift+Ctrl+V",command=self.OnPasteNode)
outlineMenu.add_command(label="Delete Node",
	accelerator="Shift+Ctrl+BkSp",command=self.OnDeleteNode)
outlineMenu.add_separator()

outlineMenu.add_command(label="Insert Node",
	accelerator="Ctrl+I",command=self.OnInsertNode)
outlineMenu.add_command(label="Clone Node",
	accelerator="Ctrl+`",command=self.OnCloneNode)
outlineMenu.add_command(label="Sort Children",
	command=self.OnSortChildren)
outlineMenu.add_command(label="Sort Siblings",
	accelerator="Alt-A",command=self.OnSortSiblings)
outlineMenu.add_separator()

&lt;&lt; create expand/contract submenu &gt;&gt;
&lt;&lt; create move/select submenu &gt;&gt;
&lt;&lt; create mark/goto submenu &gt;&gt;</t>
<t tx="T1030">self.expandContractMenu = expandContractMenu = Tk.Menu(outlineMenu,tearoff=0)
outlineMenu.add_cascade(label="Expand/Contract...", menu=expandContractMenu)

expandContractMenu.add_command(label="Expand All",
	accelerator="Alt+9",command=self.OnExpandAll)
expandContractMenu.add_command(label="Expand All Children",
	command=self.OnExpandAllChildren)
expandContractMenu.add_command(label="Expand Children",
	command=self.OnExpandChildren)
expandContractMenu.add_separator()

expandContractMenu.add_command(label="Contract Parent",
	accelerator="Alt+0",command=self.OnContractParent)
expandContractMenu.add_command(label="Contract All",
	accelerator="Alt+1",command=self.OnContractAll)
expandContractMenu.add_command(label="Contract All Children",
	command=self.OnContractAllChildren)
expandContractMenu.add_command(label="Contract Children",
	command=self.OnContractChildren)
expandContractMenu.add_separator()

expandContractMenu.add_command(label="Expand Next Level",
	accelerator="Alt+=",command=self.OnExpandNextLevel)
expandContractMenu.add_command(label="Expand To Level 1",
	accelerator="Alt+1",command=self.OnExpandToLevel1)
expandContractMenu.add_command(label="Expand To Level 2",
	accelerator="Alt+2",command=self.OnExpandToLevel2)
expandContractMenu.add_command(label="Expand To Level 3",
	accelerator="Alt+3",command=self.OnExpandToLevel3)
expandContractMenu.add_command(label="Expand To Level 4",
	accelerator="Alt+4",command=self.OnExpandToLevel4)
expandContractMenu.add_command(label="Expand To Level 5",
	accelerator="Alt+5",command=self.OnExpandToLevel5)
expandContractMenu.add_command(label="Expand To Level 6",
	accelerator="Alt+6",command=self.OnExpandToLevel6)
expandContractMenu.add_command(label="Expand To Level 7",
	accelerator="Alt+7",command=self.OnExpandToLevel7)
expandContractMenu.add_command(label="Expand To Level 8",
	accelerator="Alt+8",command=self.OnExpandToLevel8)
#expandContractMenu.add_command(label="Expand To Level 9",
	#accelerator="Alt+9",command=self.OnExpandToLevel9)</t>
<t tx="T1031">self.moveSelectMenu = moveSelectMenu = Tk.Menu(outlineMenu,tearoff=0)
outlineMenu.add_cascade(label="Move/Select...", menu=moveSelectMenu)

moveSelectMenu.add_command(label="Move Down",
	accelerator="Ctrl+D",command=self.OnMoveDown)
moveSelectMenu.add_command(label="Move Left",
	accelerator="Ctrl+L",command=self.OnMoveLeft)
moveSelectMenu.add_command(label="Move Right",
	accelerator="Ctrl+R",command=self.OnMoveRight)
moveSelectMenu.add_command(label="Move Up",
	accelerator="Ctrl+U", command=self.OnMoveUp)
moveSelectMenu.add_separator()

moveSelectMenu.add_command(label="Promote",
	accelerator="Shift+Ctrl+[", command=self.OnPromote)
moveSelectMenu.add_command(label="Demote",
	accelerator="Shift+Ctrl+]", command=self.OnDemote)
moveSelectMenu.add_separator()

moveSelectMenu.add_command(label="Go Prev Visible",
	accelerator="Ctrl+Up",command=self.OnGoPrevVisible)
moveSelectMenu.add_command(label="Go Next Visible",
	accelerator="Ctrl+Down",command=self.OnGoNextVisible)
moveSelectMenu.add_separator()

moveSelectMenu.add_command(label="Go Back",
	accelerator="Shift+Ctrl+Up",command=self.OnGoBack)
moveSelectMenu.add_command(label="Go Next",
	accelerator="Shift+Ctrl+Down",command=self.OnGoNext)</t>
<t tx="T1032">self.markGotoMenu = markGotoMenu = Tk.Menu(outlineMenu,tearoff=0)
outlineMenu.add_cascade(label="Mark/Go To...", menu=markGotoMenu)

markGotoMenu.add_command(label="Mark",
	accelerator="Ctrl-M",command=self.OnMark)
markGotoMenu.add_command(label="Mark Subheads",
	accelerator="Alt+S",command=self.OnMarkSubheads)
markGotoMenu.add_command(label="Mark Changed Items",
	accelerator="Alt+C",command=self.OnMarkChangedItems)
markGotoMenu.add_command(label="Mark Changed Roots",
	accelerator="Alt+R",command=self.OnMarkChangedRoots)
markGotoMenu.add_separator()

markGotoMenu.add_command(label="Unmark All",
	accelerator="Alt+U",command=self.OnUnmarkAll)
markGotoMenu.add_command(label="Go To Next Marked",
	accelerator="Alt+M",command=self.OnGoToNextMarked)
markGotoMenu.add_command(label="Go To Next Changed",
	accelerator="Alt+C",command=self.OnGoToNextChanged)</t>
<t tx="T1033">self.windowMenu = windowMenu = Tk.Menu(menu,tearoff=0)
menu.add_cascade(label="Window", menu=windowMenu)

windowMenu.add_command(label="Equal Sized Panes",
	accelerator="Ctrl-E",command=self.OnEqualSizedPanes)
windowMenu.add_command(label="Toggle Active Pane",
	accelerator="Ctrl-T",command=self.OnToggleActivePane)
windowMenu.add_command(label="Toggle Split Direction",
	command=self.OnToggleSplitDirection)
windowMenu.add_separator()

windowMenu.add_command(label="Cascade",
	command=self.OnCascade)
windowMenu.add_command(label="Minimize All",
	command=self.OnMinimizeAll)
windowMenu.add_separator()

windowMenu.add_command(label="Open Python Window",
	accelerator="Alt+P",command=self.OnOpenPythonWindow)</t>
<t tx="T1034">self.helpMenu = helpMenu = Tk.Menu(menu,tearoff=0)
menu.add_cascade(label="Help", menu=helpMenu)
helpMenu.add_command(label="About Leo...", command=self.OnAbout)
helpMenu.add_command(label="Leo Documentation...", command=self.OnLeoDocumentation)</t>
<t tx="T1035"></t>
<t tx="T1036">def canContractAllHeadlines (self):

	c = self ; v = c.rootVnode()
	if not v: return false
	while v:
		if v.isExpanded():
			return true
		v = v.threadNext()
	return false</t>
<t tx="T1037">def canContractAllSubheads (self):

	c = self
	v = c.currentVnode()
	if not v: return false
	next = v.nodeAfterTree()
	v = v.threadNext()
	while v and v != next:
		if v.isExpanded():
			return true
		v = v.threadNext()
	return false</t>
<t tx="T1038">def canContractParent (self):

	c = self ; v = c.currentVnode()
	return v.parent() != None</t>
<t tx="T1039">def canContractSubheads (self):

	c = self ; v = c.currentVnode()
	if not v: return false
	v = v.firstChild()
	while v:
		if v.isExpanded():
			return true
		v = v.next()
	return false</t>
<t tx="T1040">def canDeleteHeadline (self):

	c = self ; v = c.currentVnode()
	if not v: return false
	if v.parent(): # v is below the top level.
		return true
	else: # v is at the top level.  We can not delete the last node.
		return v.threadBack() or v.next()

canCutOutline = canDeleteHeadline</t>
<t tx="T1041">def canDemote (self):

	c = self
	v = c.currentVnode()
	if not v: return false
	return v.next() != None</t>
<t tx="T1042">def canExpandAllHeadlines (self):

	c = self ; v = c.rootVnode()
	if not v: return false
	while v:
		if not v.isExpanded():
			return true
		v = v.threadNext()
	return false</t>
<t tx="T1043">def canExpandAllSubheads (self):

	c = self
	v = c.currentVnode()
	if not v: return false
	next = v.nodeAfterTree()
	v = v.threadNext()
	while v and v != next:
		if not v.isExpanded():
			return true
		v = v.threadNext()
	return false</t>
<t tx="T1044">def canExpandSubheads (self):

	c = self ; v = c.currentVnode()
	if not v: return false
	v = v.firstChild()
	while v:
		if not v.isExpanded():
			return true
		v = v.next()
	return false</t>
<t tx="T1045">def canGoToNextDirtyHeadline (self):

	c = self ; current = c.currentVnode()
	if not current: return false

	v = c.rootVnode()
	while v:
		if v.isDirty()and v != current:
			return true
		v = v.threadNext()
	return false</t>
<t tx="T1046">def canGoToNextMarkedHeadline (self):

	c = self ; current = c.currentVnode()
	if not current: return false

	v = c.rootVnode()
	while v:
		if v.isMarked()and v != current:
			return true
		v = v.threadNext()
	return false</t>
<t tx="T1047">def canMarkChangedHeadlines (self):

	c = self ; v = c.rootVnode()
	while v:
		if v.isDirty():
			return true
		v = v.threadNext()
	return false</t>
<t tx="T1048">def canMarkChangedRoots (self):

	c = self ; v = c.rootVnode()
	while v:
		if v.isDirty():
			return true
		v = v.threadNext()
	return false</t>
<t tx="T1049">def canMoveOutlineDown (self):

	c = self
	if 1: # The permissive way
		current = c.currentVnode()
		if not current: return false
		v = current.visNext()
		while v and current.isAncestorOf(v):
			v = v.visNext()
		return v != None
	else: # The MORE way.
		return c.currentVnode().next() != None</t>
<t tx="T1050">def canMoveOutlineLeft (self):

	c = self ; v = c.currentVnode()
	if 0: # Old code: assumes multiple leftmost nodes.
		return v and v.parent()
	else: # Can't move a child of the root left.
		return v and v.parent() and v.parent().parent()</t>
<t tx="T1051">def canMoveOutlineRight (self):

	c = self ; v = c.currentVnode()
	return v and v.back()</t>
<t tx="T1052">def canMoveOutlineUp (self):

	c = self ; v = c.currentVnode()
	if 1: # The permissive way.
		return v and v.visBack()
	else: # The MORE way.
		return v and v.back()</t>
<t tx="T1053">def canPromote (self):

	c = self ; v = c.currentVnode()
	return v and v.hasChildren()</t>
<t tx="T1054">def canShiftBodyLeft (self):

	c = self
	if c.body:
		s = c.body.GetValue()
		return len(s) &gt; 0
	else:
		return false</t>
<t tx="T1055">def canShiftBodyRight (self):

	c = self
	if c.body:
		s = c.body.GetValue()
		return len(s) &gt; 0
	else:
		return false</t>
<t tx="T1056">def canSortChildren (self):

	c = self ; v = c.currentVnode()
	return v and v.hasChildren()
	
def canSortSiblings (self):

	c = self ; v = c.currentVnode()
	parent = v.parent()
	return parent and parent.hasChildren()</t>
<t tx="T1057">def canUndo (self):

	c = self
	return c.undoer.canUndo()
	
def canRedo (self):

	c = self
	return c.undoer.canRedo()</t>
<t tx="T1058"># Returns true if any node is marked.

def canUnmarkAll (self):

	c = self ; v = c.rootVnode()
	while v:
		if v.isMarked():
			return true
		v = v.threadNext()
	return false</t>
<t tx="T1059"># Warning:  call del self will not necessarily call this routine.

def __del__ (self):
	
	# Can't trace while destroying.
	# print "frame.__del__"
	
	self.log = self.body = self.tree = None
	self.treeBar = self.canvas = self.splitter1 = self.splitter2 = None
	# Menu bars.
	self.topMenu = self.fileMenu = self.editMenu = None
	self.outlineMenu = self.windowMenu = self.helpMenu = None
	# Submenus.
	self.editBodyMenu = self.moveSelectMenu = self.markGotoMenu = None</t>
<t tx="T1060"></t>
<t tx="T1061"></t>
<t tx="T1062"></t>
<t tx="T1063">def OnNew (self,event=None):

	frame = LeoFrame() # Create another Leo window.
	c = frame.commands # Use the commander of the _new_ frame.
	c.beginUpdate()
	if 1: # within update
		t = leoNodes.tnode()
		v = leoNodes.vnode(c,t)
		v.initHeadString("NewHeadline")
		v.moveToRoot()
		c.editVnode(v)
	c.endUpdate()
	frame.body.focus_set()
	return "break" # inhibit further command processing</t>
<t tx="T1064"># Called when File-Close command is chosen.

def OnClose(self,event=None):
	
	self.OnCloseLeoEvent() # Destroy the frame unless the user cancels.
	return "break" # inhibit further command processing</t>
<t tx="T1065"></t>
<t tx="T1066">def OnReadAtFileNodes (self,event=None):

	c = self.commands
	
	d = leoDialog.leoDialog()
	answer = d.askOkCancel("Proceed?",
		"Read @file Nodes is not undoable." +
		"\nProceed?")

	if answer=="ok":
		c.fileCommands.readAtFileNodes()
		c.undoer.clearUndoState()

	return "break" # inhibit further command processing</t>
<t tx="T1067">def OnWriteOutlineOnly (self,event=None):

	self.commands.fileCommands.writeOutlineOnly()
	return "break" # inhibit further command processing</t>
<t tx="T1068">def OnWriteAtFileNodes (self,event=None):

	self.commands.fileCommands.writeAtFileNodes()
	return "break" # inhibit further command processing</t>
<t tx="T1069"></t>
<t tx="T1070">def OnTangleAll(self,event=None):

	self.commands.tangleCommands.tangleAll()
	return "break" # inhibit further command processing</t>
<t tx="T1071">def OnTangleMarked(self,event=None):

	self.commands.tangleCommands.tangleMarked()
	return "break" # inhibit further command processing</t>
<t tx="T1072">def OnTangle (self,event=None):

	self.commands.tangleCommands.tangle()
	return "break" # inhibit further command processing</t>
<t tx="T1073"></t>
<t tx="T1074">def OnUntangleAll(self,event=None):

	c = self.commands
	c.tangleCommands.untangleAll()
	c.undoer.clearUndoState()
	return "break" # inhibit further command processing</t>
<t tx="T1075">def OnUntangleMarked(self,event=None):

	c = self.commands
	self.commands.tangleCommands.untangleMarked()
	c.undoer.clearUndoState()
	return "break" # inhibit further command processing</t>
<t tx="T1076">def OnUntangle(self,event=None):

	c = self.commands
	self.commands.tangleCommands.untangle()
	c.undoer.clearUndoState()
	return "break" # inhibit further command processing</t>
<t tx="T1077"></t>
<t tx="T1078">def OnFlattenOutline (self,event=None):
	
	filetypes = [("Text files", "*.txt"),("All files", "*")]

	fileName = tkFileDialog.asksaveasfilename(
		title="Flatten Outline",filetypes=filetypes,
		initialfile="flat.txt",defaultextension=".txt")

	if fileName and len(fileName) &gt; 0:
		c = self.commands
		c.importCommands.flattenOutline(fileName)

	return "break" # inhibit further command processing</t>
<t tx="T1079">def OnImportAtFile (self,event=None):
	
	types = [
		("All files","*"),
		("C/C++ files","*.c"),
		("C/C++ files","*.cpp"),
		("C/C++ files","*.h"),
		("C/C++ files","*.hpp"),
		("Java files","*.java"),
		("Pascal files","*.pas"),
		("Python files","*.py") ]
			
	fileName = tkFileDialog.askopenfilename(
		title="Import To @file",filetypes=types)
	if fileName and len(fileName) &gt; 0:
		c = self.commands
		paths = [fileName] # alas, askopenfilename returns only a single name.
		c.importCommands.importFilesCommand (paths,"@file")

	return "break" # inhibit further command processing</t>
<t tx="T1080">def OnImportAtRoot (self,event=None):
	
	types = [
		("All files","*"),
		("C/C++ files","*.c"),
		("C/C++ files","*.cpp"),
		("C/C++ files","*.h"),
		("C/C++ files","*.hpp"),
		("Java files","*.java"),
		("Pascal files","*.pas"),
		("Python files","*.py") ]

	fileName = tkFileDialog.askopenfilename(
		title="Import To @root",filetypes=types)
	if fileName and len(fileName) &gt; 0:
		c = self.commands
		paths = [fileName] # alas, askopenfilename returns only a single name.
		c.importCommands.importFilesCommand (paths,"@root")

	return "break" # inhibit further command processing</t>
<t tx="T1081">def OnImportCWEBFiles (self,event=None):
	
	filetypes = [
		("CWEB files", "*.w"),
		("Text files", "*.txt"),
		("All files", "*")]

	fileName = tkFileDialog.askopenfilename(
		title="Import CWEB Files",filetypes=filetypes,
		defaultextension=".w")
	if fileName and len(fileName) &gt; 0:
		c = self.commands
		paths = [fileName] # alas, askopenfilename returns only a single name.
		c.importCommands.importWebCommand(paths,"cweb")
	
	return "break" # inhibit further command processing</t>
<t tx="T1082">def OnImportFlattenedOutline (self,event=None):
	
	types = [("Text files","*.txt"), ("All files","*")]
		
	fileName = tkFileDialog.askopenfilename(
		title="Import MORE Text",
		filetypes=types,
		defaultextension=".py")
	if fileName and len(fileName) &gt; 0:
		c = self.commands
		paths = [fileName] # alas, askopenfilename returns only a single name.
		c.importCommands.importFlattenedOutline(paths)
		
	return "break" # inhibit further command processing</t>
<t tx="T1083">def OnImportNowebFiles (self,event=None):
	
	filetypes = [
		("Noweb files", "*.nw"),
		("Text files", "*.txt"),
		("All files", "*")]

	fileName = tkFileDialog.askopenfilename(
		title="Import Noweb Files",filetypes=filetypes,
		defaultextension=".nw")
	if fileName and len(fileName) &gt; 0:
		c = self.commands
		paths = [fileName] # alas, askopenfilename returns only a single name.
		c.importCommands.importWebCommand(paths,"noweb")
	
	return "break" # inhibit further command processing</t>
<t tx="T1084">def OnOutlineToCWEB (self,event=None):
	
	filetypes=[
		("CWEB files", "*.w"),
		("Text files", "*.txt"),
		("All files", "*")]

	fileName = tkFileDialog.asksaveasfilename(
		title="Outline To CWEB",filetypes=filetypes,
		initialfile="cweb.w",defaultextension=".w")

	if fileName and len(fileName) &gt; 0:
		c = self.commands
		c.importCommands.outlineToWeb(fileName,"cweb")

	return "break" # inhibit further command processing</t>
<t tx="T1085">def OnOutlineToNoweb (self,event=None):
	
	filetypes=[
		("Noweb files", "*.nw"),
		("Text files", "*.txt"),
		("All files", "*")]

	fileName = tkFileDialog.asksaveasfilename(
		title="Outline To Noweb",filetypes=filetypes,
		initialfile=self.outlineToNowebDefaultFileName,defaultextension=".nw")

	if fileName and len(fileName) &gt; 0:
		c = self.commands
		c.importCommands.outlineToWeb(fileName,"noweb")
		self.outlineToNowebDefaultFileName = fileName

	return "break" # inhibit further command processing</t>
<t tx="T1086">def OnRemoveSentinels (self,event=None):
	
	types = [
		("All files","*"),
		("C/C++ files","*.c"),
		("C/C++ files","*.cpp"),
		("C/C++ files","*.h"),
		("C/C++ files","*.hpp"),
		("Java files","*.java"),
		("Pascal files","*.pas"),
		("Python files","*.py") ]
		
	fileName = tkFileDialog.askopenfilename(
		title="Remove Sentinels",filetypes=types)

	if fileName and len(fileName) &gt; 0:
		c = self.commands
		# alas, askopenfilename returns only a single name.
		c.importCommands.removeSentinelsCommand (fileName)

	return "break" # inhibit further command processing</t>
<t tx="T1087"></t>
<t tx="T1088"></t>
<t tx="T1089">def OnUndo(self,event=None):

	self.commands.undoer.undo()
	return "break" # inhibit further command processing</t>
<t tx="T1090">def OnRedo(self,event=None):

	self.commands.undoer.redo()
	return "break" # inhibit further command processing</t>
<t tx="T1091">def OnEditHeadline(self,event=None):

	tree = self.commands.tree
	tree.editLabel(tree.currentVnode)
	return "break" # inhibit further command processing</t>
<t tx="T1092">def OnFontPanel(self,event=None):

	self.notYet("Font Panel")
	return "break" # inhibit further command processing

	data = SetInitialFont(self.body.GetFont())
	data.SetColour(self.body.GetForegroundColour())

	d = wxFontDialog (self, data)
	if wxPlatform != "__WXGTK__": # Causes problems on GTK+.
		dialog.CentreOnScreen()

	if d.ShowModal() != wxID_OK:
		return "break" # inhibit further command processing
	retData = d.GetFontData()
	font = retData.GetChosenFont()
	color = retData.GetColour()

	# On Linux, SetFont apparently clears the text control's text string!
	if wxPlatform == "__WXGTK__":
		contents = self.body.GetValue()
		self.body.SetFont ( font )
		self.body.SetForegroundColour(color)
		self.body.SetValue(contents)
	else:
		self.body.SetFont ( font )
		self.body.SetForegroundColour(color)

	self.Refresh()
	return "break" # inhibit further command processing</t>
<t tx="T1093">def OnSyntaxColoring(self,event=None):

	self.notYet("Syntax Coloring")
	return "break" # inhibit further command processing</t>
<t tx="T1094"></t>
<t tx="T1095">def OnConvertBlanks(self,event=None):

	self.commands.convertBlanks()
	return "break" # inhibit further command processing
	
def OnConvertAllBlanks(self,event=None):

	self.commands.convertAllBlanks()
	return "break" # inhibit further command processing</t>
<t tx="T1096">def OnConvertTabs(self,event=None):

	self.commands.convertTabs()
	return "break" # inhibit further command processing
	
def OnConvertAllTabs(self,event=None):

	self.commands.convertAllTabs()
	return "break" # inhibit further command processing</t>
<t tx="T1097">def OnDedent (self,event=None):

	self.commands.dedentBody()
	return "break" # inhibit further command processing</t>
<t tx="T1098">def OnExtract(self,event=None):

	self.commands.extract()
	return "break" # inhibit further command processing</t>
<t tx="T1099">def OnExtractNames(self,event=None):

	self.commands.extractSectionNames()
	return "break" # inhibit further command processing</t>
<t tx="T1100">def OnExtractSection(self,event=None):

	self.commands.extractSection()
	return "break" # inhibit further command processing</t>
<t tx="T1101">def OnIndent(self,event=None):

	self.commands.indentBody()
	return "break" # inhibit further command processing</t>
<t tx="T1102"></t>
<t tx="T1103">def OnFindPanel(self,event=None):

	find = app().findFrame
	find.top.deiconify()
	find.find_text.focus_set()
	find.commands = self
	return "break" # inhibit further command processing</t>
<t tx="T1104">def OnFindNext(self,event=None):

	c = self.commands
	app().findFrame.findNextCommand(c)
	return "break" # inhibit further command processing</t>
<t tx="T1105">def OnFindPrevious(self,event=None):

	c = self.commands
	app().findFrame.findPreviousCommand(c)
	return "break" # inhibit further command processing</t>
<t tx="T1106">def OnReplace(self,event=None):

	c = self.commands
	app().findFrame.changeCommand(c)
	return "break" # inhibit further command processing</t>
<t tx="T1107">def OnReplaceThenFind(self,event=None):

	c = self.commands
	app().findFrame.changeThenFindCommand(c)
	return "break" # inhibit further command processing</t>
<t tx="T1108"></t>
<t tx="T1109"></t>
<t tx="T1110">def OnCutNode(self,event=None):

	self.commands.cutOutline()
	return "break" # inhibit further command processing</t>
<t tx="T1111">def OnCopyNode(self,event=None):

	self.commands.copyOutline()
	return "break" # inhibit further command processing</t>
<t tx="T1112">def OnPasteNode(self,event=None):

	self.commands.pasteOutline()
	return "break" # inhibit further command processing</t>
<t tx="T1113">def OnDeleteNode(self,event=None):

	self.commands.deleteHeadline()
	return "break" # inhibit further command processing</t>
<t tx="T1114">def OnInsertNode(self,event=None):

	self.commands.insertHeadline()
	return "break" # inhibit further command processing</t>
<t tx="T1115">def OnCloneNode(self,event=None):

	self.commands.clone()
	return "break" # inhibit further command processing</t>
<t tx="T1116">def OnSortChildren(self,event=None):

	self.commands.sortChildren()
	return "break" # inhibit further command processing
	
def OnSortSiblings(self,event=None):

	self.commands.sortSiblings()
	return "break" # inhibit further command processing</t>
<t tx="T1117"></t>
<t tx="T1118">def OnContractParent(self,event=None):

	self.commands.contractParent()
	return "break" # inhibit further command processing</t>
<t tx="T1119">def OnExpandAll(self,event=None):

	self.commands.expandAllHeadlines()
	return "break" # inhibit further command processing</t>
<t tx="T1120">def OnExpandAllChildren(self,event=None):

	self.commands.expandAllSubheads()
	return "break" # inhibit further command processing</t>
<t tx="T1121">def OnExpandChildren(self,event=None):

	self.commands.expandSubheads()
	return "break" # inhibit further command processing</t>
<t tx="T1122">def OnContractAll(self,event=None):

	self.commands.contractAllHeadlines()
	return "break" # inhibit further command processing</t>
<t tx="T1123">def OnContractAllChildren(self,event=None):

	self.commands.contractAllSubheads()
	return "break" # inhibit further command processing</t>
<t tx="T1124">def OnContractChildren(self,event=None):

	self.commands.contractSubheads()
	return "break" # inhibit further command processing</t>
<t tx="T1125">def OnExpandNextLevel(self,event=None):

	self.commands.expandNextLevel()
	return "break" # inhibit further command processing</t>
<t tx="T1126">def OnExpandToLevel1(self,event=None):

	self.commands.expandLevel1()
	return "break" # inhibit further command processing</t>
<t tx="T1127">def OnExpandToLevel2(self,event=None):

	self.commands.expandLevel2()
	return "break" # inhibit further command processing</t>
<t tx="T1128">def OnExpandToLevel3(self,event=None):

	self.commands.expandLevel3()
	return "break" # inhibit further command processing</t>
<t tx="T1129">def OnExpandToLevel4(self,event=None):

	self.commands.expandLevel4()
	return "break" # inhibit further command processing</t>
<t tx="T1130">def OnExpandToLevel5(self,event=None):

	self.commands.expandLevel5()
	return "break" # inhibit further command processing</t>
<t tx="T1131">def OnExpandToLevel6(self,event=None):

	self.commands.expandLevel6()
	return "break" # inhibit further command processing</t>
<t tx="T1132">def OnExpandToLevel7(self,event=None):

	self.commands.expandLevel7()
	return "break" # inhibit further command processing</t>
<t tx="T1133">def OnExpandToLevel8(self,event=None):

	self.commands.expandLevel8()
	return "break" # inhibit further command processing</t>
<t tx="T1134">def OnExpandToLevel9(self,event=None):

	self.commands.expandLevel9()
	return "break" # inhibit further command processing</t>
<t tx="T1135"></t>
<t tx="T1136">def OnMoveLeft(self,event=None):

	self.commands.moveOutlineLeft()
	return "break" # inhibit further command processing</t>
<t tx="T1137">def OnMoveRight(self,event=None):

	self.commands.moveOutlineRight()
	return "break" # inhibit further command processing</t>
<t tx="T1138">def OnMoveUp(self,event=None):

	self.commands.moveOutlineUp()
	return "break" # inhibit further command processing</t>
<t tx="T1139">def OnPromote(self,event=None):

	self.commands.promote()
	return "break" # inhibit further command processing</t>
<t tx="T1140">def OnDemote(self,event=None):

	self.commands.demote()
	return "break" # inhibit further command processing</t>
<t tx="T1141">def OnGoPrevVisible(self,event=None):

	self.commands.selectVisBack()
	return "break" # inhibit further command processing</t>
<t tx="T1142">def OnGoNextVisible(self,event=None):

	self.commands.selectVisNext()
	return "break" # inhibit further command processing</t>
<t tx="T1143">def OnGoBack(self,event=None):

	self.commands.selectThreadBack()
	return "break" # inhibit further command processing</t>
<t tx="T1144">def OnGoNext(self,event=None):

	self.commands.selectThreadNext()
	return "break" # inhibit further command processing</t>
<t tx="T1145"></t>
<t tx="T1146">def OnMark(self,event=None):

	self.commands.markHeadline()
	return "break" # inhibit further command processing</t>
<t tx="T1147">def OnMarkSubheads(self,event=None):

	self.commands.markSubheads()
	return "break" # inhibit further command processing</t>
<t tx="T1148">def OnMarkChangedItems(self,event=None):

	self.commands.markChangedHeadlines()
	return "break" # inhibit further command processing</t>
<t tx="T1149">def OnMarkChangedRoots(self,event=None):

	self.commands.markChangedRoots()
	return "break" # inhibit further command processing</t>
<t tx="T1150">def OnUnmarkAll(self,event=None):

	self.commands.unmarkAll()
	return "break" # inhibit further command processing</t>
<t tx="T1151">def OnGoToNextMarked(self,event=None):

	self.commands.goToNextMarkedHeadline()
	return "break" # inhibit further command processing</t>
<t tx="T1152">def OnGoToNextChanged(self,event=None):

	self.commands.goToNextDirtyHeadline()
	return "break" # inhibit further command processing</t>
<t tx="T1153"></t>
<t tx="T1154">def OnEqualSizedPanes(self,event=None):

	self.resizePanesToRatio(0.5)
	return "break" # inhibit further command processing</t>
<t tx="T1155">def OnMinimizeAll(self,event=None):

	self.minimize(app().findFrame)
	self.minimize(app().pythonFrame)
	for frame in app().windowList:
		self.minimize(frame)
	return "break" # inhibit further command processing
		
def minimize(self, frame):

	if frame and frame.top.state() == "normal":
		frame.top.iconify()</t>
<t tx="T1156"></t>
<t tx="T1157">def OnAbout(self,event=None):

	import tkMessageBox

	tkMessageBox.showinfo(
		"About Leo",
		"Leo in Python/Tk\n" +
		"Version 2.5.1, July 7, 2002\n\n" +

		"Copyright 1999-2002 by Edward K. Ream\n" +
		"All Rights Reserved\n" +
		"Leo is distributed under the Python License")

	return "break" # inhibit further command processing</t>
<t tx="T1158">def OnLeoDocumentation (self,event=None):

	dir = app().loadDir
	fileName = os.path.join(dir, "LeoDocs.leo")
	try:
		self.OpenWithFileName(fileName)
	except:
		es("LeoDocs.leo not found")
	return "break" # inhibit further command processing</t>
<t tx="T1159"></t>
<t tx="T1160"># This is the Tk "postcommand" callback.  It should update all menu items.

def OnMenuClick (self):

	self.updateFileMenu()
	self.updateEditMenu()
	self.updateOutlineMenu()</t>
<t tx="T1161"># Returns true if text in the outline or body text is selected.

def hasSelection (self):

	if self.body:
		first, last = getTextSelection(self.body)
		return first != last
	else:
		return false</t>
<t tx="T1162">def updateFileMenu (self):

	c = self.commands ; menu = self.fileMenu
	if not c: return
	enableMenu(menu,"Revert To Saved", c.canRevert())</t>
<t tx="T1163">def updateEditMenu (self):

	c = self.commands
	if not c: return
	menu = self.editMenu
	# Top level entries.
	c.undoer.enableMenuItems()
	if 0: # Always on for now.
		enableMenu(menu,"Cut",c.canCut())
		enableMenu(menu,"Copy",c.canCut()) # delete
		enableMenu(menu,"Paste",c.canPaste())
	if 0: # Always on for now.
		menu = self.findMenu
		enableMenu(menu,"Find Next",c.canFind())
		flag = c.canReplace()
		enableMenu(menu,"Replace",flag)
		enableMenu(menu,"Replace, Then Find",flag)
	# Edit Body submenu
	menu = self.editBodyMenu
	enableMenu(menu,"Extract Section",c.canExtractSection())
	enableMenu(menu,"Extract Names",c.canExtractSectionNames())
	enableMenu(menu,"Extract",c.canExtract())</t>
<t tx="T1164">def updateOutlineMenu (self):

	c = self.commands ; v = c.currentVnode()
	if not c: return

	menu = self.outlineMenu
	enableMenu(menu,"Cut Node",c.canCutOutline())
	enableMenu(menu,"Delete Node",c.canDeleteHeadline())
	enableMenu(menu,"Paste Node",c.canPasteOutline())
	enableMenu(menu,"Sort Siblings",c.canSortSiblings())
	# Expand/Contract submenu
	menu = self.expandContractMenu
	enableMenu(menu,"Contract Parent",c.canContractParent())
	# Move/Select submenu
	menu = self.moveSelectMenu
	enableMenu(menu,"Move Down",c.canMoveOutlineDown())
	enableMenu(menu,"Move Left",c.canMoveOutlineLeft())
	enableMenu(menu,"Move Right",c.canMoveOutlineRight())
	enableMenu(menu,"Move Up",c.canMoveOutlineUp())
	enableMenu(menu,"Promote",c.canPromote())
	enableMenu(menu,"Demote",c.canDemote())
	enableMenu(menu,"Go Prev Visible",c.canSelectVisBack())
	enableMenu(menu,"Go Next Visible",c.canSelectVisNext())
	enableMenu(menu,"Go Back",c.canSelectThreadBack())
	enableMenu(menu,"Go Next",c.canSelectThreadNext())
	# Mark/Go To submenu
	menu = self.markGotoMenu
	label = choose(v and v.isMarked(),"Unmark","Mark")
	setMenuLabel(menu,0,label)
	enableMenu(menu,"Mark Subheads",(v and v.hasChildren()))
	enableMenu(menu,"Mark Changed Items",c.canMarkChangedHeadlines())
	enableMenu(menu,"Mark Changed Roots",c.canMarkChangedRoots())
	enableMenu(menu,"Go To Next Marked",c.canGoToNextMarkedHeadline())
	enableMenu(menu,"Go To Next Changed",c.canGoToNextDirtyHeadline())</t>
<t tx="T1165">enabling: *
Exception in Tkinter callback
Traceback (most recent call last):
  File "c:\python22\lib\lib-tk\Tkinter.py", line 1292, in __call__
    return apply(self.func, args)
  File "c:\prog\LeoCVS\leo\leoFrame.py", line 1368, in OnTangle
    self.commands.tangleCommands.tangle()
  File "c:\prog\LeoCVS\leo\leoTangle.py", line 507, in tangle
    self.tangleTree(v,report_errors)
  File "c:\prog\LeoCVS\leo\leoTangle.py", line 644, in tangleTree
    self.tanglePass1(v) # sets self.v
  File "c:\prog\LeoCVS\leo\leoTangle.py", line 589, in tanglePass1
    self.skip_body(v)
  File "c:\prog\LeoCVS\leo\leoTangle.py", line 1062, in skip_body
    self.st_enter_root_name(old_root_name,code,doc)
  File "c:\prog\LeoCVS\leo\leoTangle.py", line 2040, in st_enter_root_name
    assert(code)
AssertionError
</t>
<t tx="T1166">@root a.txt
@ 

@root a.txt 
some text 
@ </t>
<t tx="T1167">@language java</t>
<t tx="T1168">/** 
* Returns a JNDI context that can be used to lookup 
references 
* to EJB's. 
*/ 

some java code.</t>
<t tx="T1169">@root c:\prog\test\javadoc_test2.java

&lt;&lt; stuff &gt;&gt;</t>
<t tx="T1170">@code

/** 
* Returns a JNDI context that can be used to lookup 
references 
* to EJB's. 
*/ 

some java code.</t>
<t tx="T1171">@ignore</t>
<t tx="T1172">def getFindPanelSettings (self):

	c = self.commands ; config = app().config
	&lt;&lt; Set defaults of all flags &gt;&gt;
	self.getTag("&lt;find_panel_settings")
	while 1:
		if   self.matchTag("batch="): c.batch_flag = self.getDqBool()
		elif self.matchTag("wrap="): c.wrap_flag = self.getDqBool()
		elif self.matchTag("whole_word="): c.whole_word_flag = self.getDqBool()
		elif self.matchTag("ignore_case="): c.ignore_case_flag = self.getDqBool()
		elif self.matchTag("pattern_match="): c.pattern_match_flag = self.getDqBool()
		elif self.matchTag("search_headline="): c.search_headline_flag = self.getDqBool()
		elif self.matchTag("search_body="): c.search_body_flag = self.getDqBool()
		elif self.matchTag("suboutline_only="): c.suboutline_only_flag = self.getDqBool()
		elif self.matchTag("mark_changes="): c.mark_changes_flag = self.getDqBool()
		elif self.matchTag("mark_finds="): c.mark_finds_flag = self.getDqBool()
		elif self.matchTag("reverse="): c.reverse_flag = self.getDqBool()
		else: break
	self.getTag("&gt;")
	#
	self.getTag("&lt;find_string&gt;")
	c.find_text = self.getEscapedString()
	self.getTag("&lt;/find_string&gt;")
	#
	self.getTag("&lt;change_string&gt;")
	c.change_text = self.getEscapedString()
	self.getTag("&lt;/change_string&gt;")
	#
	self.getTag("&lt;/find_panel_settings&gt;")
	
	# Override .leo file's preferences if settings are in leoConfig.txt.
	config.setCommandsFindIvars(c)
	# Update the settings immediately.
	app().findFrame.init(c)</t>
<t tx="T1173">import leoFind

for var in leoFind.ivars:
	exec("c.%s_flag = false" % var)
</t>
<t tx="T1174">def putFindSettings (self):

	c = self.commands ; config = app().config
	c.setIvarsFromFind()
	config.setConfigFindIvars(c)

	self.put("&lt;find_panel_settings")
	self.put_find_flag(c.batch_flag,"batch")
	self.put_find_flag(c.ignore_case_flag,"ignore_case")
	self.put_find_flag(c.mark_changes_flag,"mark_changes")
	self.put_find_flag(c.mark_finds_flag,"mark_finds")
	self.put_find_flag(c.pattern_match_flag,"pattern_match")
	self.put_find_flag(c.reverse_flag,"reverse")
	self.put_find_flag(c.search_headline_flag,"search_headline")
	self.put_find_flag(c.search_body_flag,"search_body")
	self.put_find_flag(c.suboutline_only_flag,"suboutline_only")
	self.put_find_flag(c.whole_word_flag,"whole_word")
	self.put_find_flag(c.wrap_flag,"wrap")
	self.put("&gt;") ; self.put_nl()
	#
	if config.getFindPref("find_string"):
		config.setFindPref("find_string",c.find_text)
		self.put_tab()
		self.put("&lt;find_string&gt;&lt;/find_string&gt;") ; self.put_nl()
	else:
		self.put_tab()
		self.put("&lt;find_string&gt;") ; self.putEscapedString(c.find_text)
		self.put("&lt;/find_string&gt;") ; self.put_nl()
	#
	if config.getFindPref("change_string"):
		config.setFindPref("change_string",c.change_text)
		self.put_tab()
		self.put("&lt;change_string&gt;&lt;/change_string&gt;") ; self.put_nl()
	else:
		self.put_tab()
		self.put("&lt;change_string&gt;") ; self.putEscapedString(c.change_text)
		self.put("&lt;/change_string&gt;") ; self.put_nl()
	#
	self.put("&lt;/find_panel_settings&gt;") ; self.put_nl()</t>
<t tx="T1175">def putPrefs (self):

	c = self.commands ; config = app().config
	c.setIvarsFromPrefs()

	self.put("&lt;preferences")
	self.put(" allow_rich_text=") ; self.put_dquoted_bool(0) # no longer used
	&lt;&lt; put prefs that may exist in leoConfig.txt &gt;&gt;
	self.put("&lt;/preferences&gt;") ; self.put_nl()</t>
<t tx="T1176"># tab width
if config.getPref("tab_width") != None:
	config.setPref("tab_width",`c.tab_width`)
else:
	self.put(" tab_width=") ; self.put_in_dquotes(`c.tab_width`)
# page width
if config.getPref("page_width") != None:
	config.setPref("page_width",`c.page_width`)
else:
	self.put(" page_width=") ; self.put_in_dquotes(`c.page_width`)
# run tangle_done.py
if config.getPref("run_tangle_done.py") != None:
	config.setPref("run_tangle_done.py",`c.tangle_batch_flag`)
else:
	self.put(" tangle_bat=") ; self.put_dquoted_bool(c.tangle_batch_flag)
# run untangle_done.py
if config.getPref("run_untangle_done.py") != None:
	config.setPref("run_untangle_done.py",`c.untangle_batch_flag`)
else:
	self.put(" untangle_bat=") ; self.put_dquoted_bool(c.untangle_batch_flag)
# output document chunks: New in version 0.10
if config.getPref("output_doc_chunks") != None:
	config.setPref("output_doc_chunks",`c.output_doc_flag`)
else:
	self.put(" output_doc_chunks=") ; self.put_dquoted_bool(c.output_doc_flag)
# New in version 0.15
&lt;&lt; put language prefs &gt;&gt;
# tangle outputs header: New in version 0.18
if config.getPref("tangle_outputs_header") != None:
	config.setPref("tangle_outputs_header",`c.use_header_flag`)
else:
	self.put(" use_header_flag=") ; self.put_dquoted_bool(c.use_header_flag)

self.put("&gt;") ; self.put_nl()
# New in version 0.16
&lt;&lt; put default directory &gt;&gt;</t>
<t tx="T1177">dict = config.languageNameDict

if c.target_language and dict.has_key(c.target_language):
	language = dict[c.target_language]
else:
	language = "Plain"

if config.getPref("default_target_language") != None:
	config.setPref("default_target_language",language)
else:
	self.put(" defaultTargetLanguage=") ; self.put_in_dquotes(language)</t>
<t tx="T1178">if config.getPref("default_tangle_directory"):
	config.setPref("default_tangle_directory",c.tangle_directory)
elif len(c.tangle_directory) &gt; 0:
	self.put_tab()
	self.put("&lt;defaultDirectory&gt;")
	self.putEscapedString(c.tangle_directory)
	self.put("&lt;/defaultDirectory&gt;")
	self.put_nl()</t>
<t tx="T1179">@ignore</t>
<t tx="T1180">@ignore</t>
<t tx="T1181"></t>
<t tx="T1182">@ Creates a child node c of parent for the class, and children of c for each def in the class.
@c

def scanPythonClass (self,s,i,start,parent):

	# line = get_line(s,i) ; trace(`line`)
	classIndent = self.getPythonIndent(s,i)
	&lt;&lt; set classname and headline, or return i &gt;&gt;
	i = skip_line(s,i) # Skip the class line.
	&lt;&lt; create class_vnode &gt;&gt;
	savedMethodName = self.methodName
	self.methodName = headline
	# Create a node for leading declarations of the class.
	i = self.scanPythonDecls(s,i,class_vnode,indent_refs)
	&lt;&lt; create nodes for all defs of the class &gt;&gt;
	self.methodName = savedMethodName
	return i</t>
<t tx="T1183"># Skip to the class name.
i = skip_ws(s,i)
i = skip_c_id(s,i) # skip "class"
i = skip_ws_and_nl(s,i)
if i &lt; len(s) and is_c_id(s[i]):
	j = i ; i = skip_c_id(s,i)
	classname = s[j:i]
	headline = "class " + classname
else:
	return i</t>
<t tx="T1184"># Create the section name using the old value of self.methodName.
if  self.treeType == "@file":
	prefix = ""
else:
	prefix = angleBrackets(" " + self.methodName + " methods ") + "=\n\n"

# i points just after the class line.
body = s[start:i]
body = self.undentPythonBody(body)
class_vnode = self.createHeadline(parent,prefix + body,headline)
</t>
<t tx="T1185">indent =  self.getPythonIndent(s,i)
start = i = skip_blank_lines(s,i)
parent_vnode = None # 7/6/02
while i &lt; len(s) and indent &gt; classIndent:
	progress = i
	if is_nl(s,i):
		j = skip_nl(s,i)
		indent = self.getPythonIndent(s,j)
		if indent &gt; classIndent: i = j
		else: break
	elif match_c_word(s,i,"def"):
		if not parent_vnode:
			&lt;&lt; create parent_vnode &gt;&gt;
		i = start = self.scanPythonDef(s,i,start,parent_vnode)
		indent = self.getPythonIndent(s,i)
	elif match_c_word(s,i,"class"):
		if not parent_vnode:
			&lt;&lt; create parent_vnode &gt;&gt;
		i = start = self.scanPythonClass(s,i,start,parent_vnode)
		indent = self.getPythonIndent(s,i)
	elif s[i] == '#': i = skip_to_end_of_line(s,i)
	elif s[i] == '"' or s[i] == '\'': i = skip_python_string(s,i)
	else: i += 1
	assert(progress &lt; i)</t>
<t tx="T1186"># This must be done after the declaration reference is generated.
ref = angleBrackets(" class " + classname + " methods ")
class_vnode.appendStringToBody("\t" + ref + "\n\n")

if self.treeType == "@file":
	parent_vnode = self.createHeadline(class_vnode,"@others",ref) # 7/6/02
else:
	parent_vnode = class_vnode</t>
<t tx="T1187">@ Creates a node of parent for the def.
@c

def scanPythonDef (self,s,i,start,parent):

	# line = get_line(s,i) ; trace(`line`)
	&lt;&lt; set headline or return i &gt;&gt;
	&lt;&lt; skip the Python def &gt;&gt;
	# Create the def node.
	savedMethodName = self.methodName
	self.methodName = headline
	&lt;&lt; Create def node &gt;&gt;
	self.methodName = savedMethodName
	return i</t>
<t tx="T1188">i = skip_ws(s,i)
i = skip_c_id(s,i) # Skip the "def"
i = skip_ws_and_nl(s,i)
if i &lt; len(s) and is_c_id(s[i]):
	j = i ; i = skip_c_id(s,i)
	headline = s[j:i]
	# trace("headline:" + `headline`)
else: return i</t>
<t tx="T1189"># Set defIndent to the indentation of the def line.
defIndent = self.getPythonIndent(s,start)
i = skip_line(s,i) # Skip the def line.
indent = self.getPythonIndent(s,i)
while i &lt; len(s) and indent &gt; defIndent:
	progress = i
	ch = s[i]
	if is_nl(s,i):
		i = skip_nl(s,i)
		indent = self.getPythonIndent(s,i)
		if indent &lt;= defIndent: break
	elif ch == '#':
		i = skip_line(s,i)
	elif ch == '"' or ch == '\'':
		i = skip_python_string(s,i)
	else: i += 1
	assert(progress &lt; i)</t>
<t tx="T1190"># Create the prefix line for @root trees.
if self.treeType == "@file":
	prefix = ""
else:
	prefix = angleBrackets(" " + savedMethodName + " methods ") + "=\n\n"

# Create body.
start = skip_blank_lines(s,start)
body = s[start:i]
body = self.undentPythonBody(body)

# Create the node.
self.createHeadline(parent,prefix + body,headline)</t>
<t tx="T1191">def scanPythonDecls (self,s,i,parent,indent_parent_ref_flag):
	
	done = false ; start = i
	while not done and i &lt; len(s):
		progress = i
		# line = get_line(s,i) ; trace(`line`)
		ch = s[i]
		if ch == '\n': i = skip_nl(s,i)
		elif ch == '#': i = skip_to_end_of_line(s,i)
		elif ch == '"' or ch == '\'':
			i = skip_python_string(s,i)
		elif is_c_id(ch):
			&lt;&lt; break on def or class &gt;&gt;
		else: i += 1
		assert(progress &lt; i)
	j = skip_blank_lines(s,start)
	if is_nl(s,j): j = skip_nl(s,j)
	if j &lt; i:
		&lt;&lt; Create a child node for declarations &gt;&gt;
	return i</t>
<t tx="T1192">if match_c_word(s,i,"def") or match_c_word(s,i,"class"):
	i = find_line_start(s,i)
	done = true
	break
else:
	i = skip_c_id(s,i)</t>
<t tx="T1193">headline = ref = angleBrackets(" " + self.methodName + " declarations ")
leading_tab = choose(indent_parent_ref_flag,"\t","")

# Append the reference to the parent's body.
parent.appendStringToBody(leading_tab + ref + "\n") # 7/6/02

# Create the node for the decls.
body = self.undentPythonBody(s[j:i])
if self.treeType == "@root":
	body = "@code\n\n" + body
self.createHeadline(parent,body,headline)</t>
<t tx="T1194">@ This code creates a child of parent for each Python function definition seen.  See the comments for scanCText for what the text looks like.
@c

def scanPythonText (self,s,parent):

	decls_seen = false ; start = i = 0
	while i &lt; len(s):
		progress = i
		# line = get_line(s,i) ; trace(`line`)
		ch = s[i]
		if ch == '\n' or ch == '\r': i = skip_nl(s,i)
		elif ch == '#': i = skip_to_end_of_line(s,i)
		elif ch == '"' or ch == '\'': i = skip_python_string(s,i)
		elif is_c_id(ch):
			&lt;&lt; handle possible Python function or class &gt;&gt;
		else: i += 1
		assert(progress &lt; i)
	&lt;&lt; Append a reference to the methods of this file &gt;&gt;
	&lt;&lt; Append any unused python text to the parent's body text &gt;&gt;</t>
<t tx="T1195">if match_c_word(s,i,"def") or match(s,i,"class"):
	isDef = match_c_word(s,i,"def")
	if not decls_seen:
		if self.treeType == "@file":
			parent.appendStringToBody("@language python\n@others\n")
		else:
			parent.appendStringToBody("@root " + self.fileName + "\n\n")
		i = start = self.scanPythonDecls(s,start,parent,dont_indent_refs)
		decls_seen = true
	if isDef:
		i = start = self.scanPythonDef(s,i,start,parent)
	else:
		i = start = self.scanPythonClass(s,i,start,parent)
else:
	i = skip_c_id(s,i)</t>
<t tx="T1196">if self.treeType == "@file":
	pass
else:
	parent.appendStringToBody(
		angleBrackets(" " + self.methodName + " methods ") + "\n\n")</t>
<t tx="T1197"># Do nothing if only whitespace is left.
i = start ; i = skip_ws_and_nl(s,i)
if i &lt; len(s):
	parent.appendStringToBody(s[start:])</t>
<t tx="T1198">@ignore</t>
<t tx="T1199">@ This method sets self.startSentinelComment and self.endSentinelComment based on the first @+leo sentinel line of the file.  We can not call sentinelKind here because that depends on the comment delimiters we set here.  @first lines are written "verbatim", so nothing more needs to be done!

7/8/02: Leading whitespace is now significant here before the @+leo.  This is part of the "REM hack".  We do this so that sentinelKind need not skip whitespace following self.startSentinelComment.  This is correct: we want to be as restrictive as possible about what is recognized as a sentinel.  This minimizes false matches.
@c
def scanHeader(self,file):

	valid = true ; tag = "@+leo"
	# Skip any non @+leo lines.
	s = file.readline()
	while len(s) &gt; 0:
		j = string.find(s,tag)
		if j != -1: break
		s = file.readline()
	n = len(s)
	valid = n &gt; 0
	# s contains the tag
	i = j = skip_ws(s,0)
	# The opening comment delim is the initial non-whitespace.
	# 7/8/02: The opening comment delim is the initial non-tag
	while i &lt; n and not match(s,i,tag) and not is_nl(s,i): # and not is_ws(s[i]) :
		i += 1
	if j &lt; i:
		self.startSentinelComment = s[j:i]
	else: valid = false
	# Make sure we have @+leo
	if 0:# 7/8/02: make leading whitespace significant.
		i = skip_ws(s, i)
	if match(s, i, tag):
		i += len(tag)
	else: valid = false
	# The closing comment delim is the trailing non-whitespace.
	i = j = skip_ws(s,i)
	while i &lt; n and not is_ws(s[i]) and not is_nl(s,i):
		i += 1
	self.endSentinelComment = s[j:i]
	if not valid:
		self.readError("Bad @+leo sentinel in " + self.targetFileName)</t>
<t tx="T1200">@comment REM_</t>
<t tx="T1201">test 6</t>
<t tx="T1202">@ Returns bits, dict where:
bits is a bit-set representing all the @directives of a particular body text.
dict contains various pointers into the text.

The caller passes [root_node] or None as the second arg.  This allows us to distinguish between None and [None].
@c

def is_special_bits(s,root=None):

	if root: root_node = root[0]
	bits = 0 ; dict = {}
	i = 0 ; n = len(s)
	while i &lt; n:
		if s[i] == '@' and i+1 &lt; n:
			&lt;&lt; set bits for @ directives &gt;&gt;
		elif root and match(s,i,"&lt;&lt;"):
			&lt;&lt; set root bits for noweb * chunks &gt;&gt;
		i = skip_line(s,i)
	return bits, dict</t>
<t tx="T1203">ch = s[i+1]
if ch == 'c':
	if   match_word(s,i,"@color"): bits |= color_bits
	elif match_word(s,i,"@comment"):
		bits |= comment_bits ; dict["comment"] = i
elif ch == 'h':
	if match_word(s,i,"@header"): bits |= header_bits
elif ch == 'i':
	if match_word(s,i,"@ignore"): bits |= ignore_bits
elif ch == 'l':
	if match_word(s,i,"@language"):
		# trace(`s[i:]`)
		bits |= language_bits ; dict ["language"] = i
elif ch == 'n':
	if   match_word(s,i,"@nocolor"):  bits |= nocolor_bits
	elif match_word(s,i,"@noheader"): bits |= noheader_bits
elif ch == 'p':
	if   match_word(s,i,"@pagewidth"):
		bits |= page_width_bits ; dict["page_width"] = i
	elif match_word(s,i,"@path"):
		# trace(`s[i:]`)
		bits |= path_bits ; dict["path"] = i
elif ch == 'r':
	if match_word(s,i,"@root"): bits |= root_bits # skip_body finds the root.
elif ch == 's':
	if match_word(s,i,"@silent"): bits |= silent_bits
elif ch == 't':
	if   match_word(s,i,"@tabwidth"):
		bits |= tab_width_bits ; dict["tab_width"] = i
	elif match_word(s,i,"@terse"):
		bits |= terse_bits
elif ch == 'u':
	if match_word(s,i,"@unit"): bits |= unit_bits
elif ch == 'v':
	if match_word(s,i,"@verbose"): bits |= verbose_bits</t>
<t tx="T1204">@ The following looks for chunk definitions of the form &lt; &lt; * &gt; &gt; =. If found, we take this to be equivalent to @root filename if the headline has the form @root filename.
@c

i = skip_ws(s,i+2)
if i &lt; n and s[i] == '*' :
	i = skip_ws(s,i+1) # Skip the '*'
	if match(s,i,"&gt;&gt;="):
		# &lt; &lt; * &gt; &gt; = implies that @root should appear in the headline.
		i += 3
		if root_node:
			bits |= root_bits
		else:
			es("&lt;&lt;" +
				"*&gt;&gt;= requires @root in the headline")</t>
<t tx="T1205">@language python

@ This section contains all the source code of leo.py.

We use the following conventions throughout the code:

c: a commander
ch: a character
d: a dialog or a dict.
i, j, k: indices into a string
lst: a list
s: a string
t: a tnode
u: an undoer
v: a vnode</t>
<t tx="T1206">@nocolor
@ignore

This documentation describes leo.py. Other versions of Leo are similar in design; the differences between versions are generally not interesting enough to describe here.

All versions of Leo are organized as a collection of classes.  The general organization of Leo has remained remarkably stable throughout all versions of Leo, although the names of classes are different in different versions. Smalltalk's Model/View/Controller terminology is a good way to organize Leo's classes conceptually.

Model classes represent the fundamental data. The vnode and tnode classes are Leo's primary model classes.

View classes draw the screen. The main view classes are leoFrame.py and leoTree.py.  The colorizer class in leoColor.py handles syntax coloring in the body pane. In leo.py, the view classes know about data stored in the vnode class. Most events (keystrokes and mouse actions) in the outline and body pane are handled in the leoTree class. The leoFrame class also creates the Leo window, including menus, and dispatches the appropriate members of the controller classes in response to menu commands.

Controller classes (aka commanders) control the application. In Leo, controllers mostly handle menu commands. In leo.py, the Commands class creates subcommanders to handle complex commands. The atFile class reads and writes files derived from @file trees. The LeoFind class handles the Find and Change commands. The leoImportCommands class handles the Import and Export commands, the tangleCommands class handles the Tangle and Untangle commands and the undoer class handles the Undo command. Other classes could be considered controller classes.

Each Leo window has its own commander and subcommanders. Subcommanders are not subclasses of their commander. Instead, subcommanders know the commander that created them, and call that commander as needed. Commanders and subcommanders call the model and view classes as needed. For example, the Commands class handles outline commands. To move a headline, the commander for the window calls a vnode move routine to alter the data, then calls the view class to redraw the screen based on the new data.

A singleton instance of the LeoApp class represents the application itself. All code uses the app() global function to gain access to this singleton member. The ivars of the LeoApp object are the equivalent of Leo's global variables. leo.py uses no global Python variables, except the gApp variable returned by app(). leoGlobals.py defines all application constants.  Naturally, most constants are local to the class that uses them.

Several classes combine aspects of model, view and controller. For example, the LeoPrefs class represents user preferences (model), the Preference Panel (view) and the Preferences menu command (controller). Similarly, the LeoFind class represents find settings, the Find/Change dialog, and the Find/Change commands.</t>
<t tx="T1207">@language python

@ This section contains scripts and other files for creating, testing and distributing leo.py.  leo.py itself does not use any of the code in these scripts, nor do these scripts use any code in leo.py.
@c

# To convert from C to Python, do the following from Leo's Python window:
import c2py
c2py.convertCurrentTree()

# To convert from Leo1 to Leo2, do the following from Leo's Python window:
import c2py
c2py.leo1to2()

@  To create a source distribution using Python's distutils:

On windows: do the following from inside a console window:
	cd c:\prog\LeoPy
	sdist

On Linux do the following:
	cd LeoPy
	python setup.py sdist --force-manifest --formats=gztar,zip</t>
<t tx="T1208">@silent

@ The following batch files use @root and @silent so that no extraneous lines get generated.

The go.bat batch loads leo.py and opens LeoPy.leo by default, so to work on leo.py I just open a Windows console window and type go.  Add LeoPy folder to your PATH environment variable, or put go.bat in c:\Windows.

The sdist.bat batch file creates a source distribution using distutils and setup.py.

The bdist.bat batch file creates a binary distribution.  It does not work yet.

The manifest.in file contains a list of files to be included in the distutils distribution.</t>
<t tx="T1209">@root go.bat
cd c:\prog\LeoPy
c:\python22\python c:\prog\LeoPy\openLeo.py</t>
<t tx="T1210">@root "help.bat"
rem print help message re setup.py
c:\python22\python setup.py sdist --help</t>
<t tx="T1211">@root "sdist.bat"
rem creates source distribution using setup.py
rem cd c:\prog\LeoPy
rem --formats=gztar,zip
c:\python22\python setup.py sdist --force-manifest</t>
<t tx="T1212">@ignore
@root "bdist.bat"
rem Create binary distribution using information in setup.py
rem cd c:\prog\LeoPy
c:\python22\python setup.py bdist --formats=wininst</t>
<t tx="T1213"># The manifest template: specifies all files to be included in the distribution
@root "manifest.in"

include LeoPy.leo
include LeoDocs.leo
include leo*.py
include c2py.py
include openLeo.py
include tangle_done.py
include untangle_done.py
include __init__.py
include readme*.*
include Icons/*.*
include leo.rc
include leo.res
include sdist.bat
include manifest.in</t>
<t tx="T1214">@first #! /usr/bin/env python
@language python

@ When using c2py as a script to translate entire files, use convertCFileToPython().  When using c2py within Leo, use convertCurrentTree().

Please set user data in the &lt;&lt; specifying user types &gt;&gt; section.
@c

&lt;&lt; what c2py does &gt;&gt;
&lt;&lt; theory of operation &gt;&gt;
import string
&lt;&lt; specifying user types &gt;&gt;
true = 1 ; false = None
tabWidth = 4 # how many blanks in a tab.
printFlag = false
doLeoTranslations = true ; dontDoLeoTranslations = false
&lt;&lt; define testData &gt;&gt;
@others

gClassName = "" # The class name for the present function.  Used to modify ivars.
gIvars = [] # List of ivars to be converted to self.ivar

def test():
	global printFlag ; printFlag = true
	for s in testData:
		convertCStringToPython(s, doLeoTranslations)
		
def go():
	test()

if __name__ == "__main__":
	speedTest(2)</t>
<t tx="T1215">@ c2py converts C or C++ text into python text.  The conversion is not complete.  Nevertheless, c2py eliminates much of the tedious text manipulation that would otherwise be required.

The following is a list of the translations performed by c2py.  These transformations are controlled by convertCodeList().

I.  Prepass

These translations before removing all curly braces.

Suppose we are translating:

	aTypeSpec aClass::aMethod(t1 v1,...,tn vn)
	{
		body
	}

1. Translates the function prototype, i.e., translates:

	aTypeSpec aClass::aMethod(t1 v1,...,tn vn)
to:
	def aMethod(v1,...vn):

As a special case, c2py translates:

	aTypeSpec aClass::aClass(t1 v1,...,tn vn)
to:
	aClass.__init__(t1 v1,...,tn vn)

Yes, I know, aClass.__init__ isn't proper Python, but retaining the class name is useful.

2. Let t denote any member of typeList or classList.

	a) Removes all casts of the form (t) or (t*) or (t**), etc.
	b) Converts t x, t *x, t **x, etc. to x.
	c) Converts x = new t(...) to x = t(...)
	d) For all i in ivarsDict[aClass] converts this -&gt; i to self.i
	e) For all i in ivarsDict[aClass] converts i to self.i

3. Converts &lt; &lt; x &gt; &gt; = to @c.  This Leo-specific translation is not done when translating files.

II.  Main Pass

This pass does the following simple translations everywhere except in comments and strings.

Changes all -&gt; to .
Changes all this.self to self (This corrects problems during the prepass.)
Removes all curly braces
Changes all #if to if
Changes all else if to elif
Changes all #else to else:
Changes all else to else:
Removes all #endif
Changes all &amp;&amp; to and
Changes all || to or
Changes all TRUE to true
Changes all FALSE to false
Changes all NULL to None
Changes all this to self
Changes all @code to @c.  This Leo-specific translation is not done when translating files.

III.  Complex Pass

This pass attempts more complex translations.

Converts if ( x ) to if x:
Converts elif ( x ) to elif x:
Converts while ( x ) to while x:
Converts for ( x ; y ; z ) to for x SEMI y SEMI z:

remove all semicolons.

IV.  Final Pass

This pass completes the translation.

Removes all semicolons.
Removes @c if it starts the text.  This Leo-specific translation is not done when translating files.
Removes all blank lines.
Removes excess whitespace from all lines, leaving leading whitespace unchanged.
Replaces C/C++ comments by Python comments.
Removes trailing whitespace from all lines.
</t>
<t tx="T1216">@ Strategy and Performance

c2py is straightforward.  The speed of c2py is unimportant.  We don't care about the memory used because we translate only small pieces of text at a time.

We can do body[i:j] = x, regardless of len(x).  We can also do del body[i:j] to delete characters.

We scan repeatedly through the text.  Using many passes greatly simplifies the code and does not slow down c2py significantly.

No scans are done within strings or comments.  The idiom to handle such scans is the following:

def someScan(body):
	i = 0
	while i &lt; body(len):
		if isStringOrComment(body,i):
			i = skipStringOrComment(body,i)
		elif &lt;&lt; found what we are looking for ? &gt;&gt; :
			&lt;&lt; convert what we are looking for, setting i &gt;&gt;
		else: i += 1

That's about all there is to it.  The code was remarkably easy to write and seems clear to me.
</t>
<t tx="T1217">@ Please change the following lists so they contain the types and classes used by your program.

c2py removes all type definitions correctly; it converts
	new aType(...)
to
	aType(...)
@c

classList = [
	"vnode", "tnode", "Commands",
	"wxString", "wxTreeCtrl", "wxTextCtrl", "wxSplitterWindow" ]
	
typeList = ["char", "void", "short", "long", "int", "double", "float"]

@ Please change ivarsDict so it represents the instance variables (ivars) used by your program's classes.

ivarsDict is a dictionary used to translate ivar i of class c to self.i.  It also translates this-&gt;i to self.i.
@c
	
ivarsDict = {
	"atFile": [ "mCommands", "mErrors", "mStructureErrors",
		"mTargetFileName", "mOutputFileName", "mOutputStream",
		"mStartSentinelComment", "mEndSentinelComment", "mRoot"],

	"vnode": ["mCommands", "mJoinList", "mIconVal", "mTreeID", "mT", "mStatusBits"],

	"tnode": ["mBodyString", "mBodyRTF", "mJoinHead", "mStatusBits", "mFileIndex",
		"mSelectionStart", "mSelectionLength", "mCloneIndex"],
		
	"LeoFrame": ["mNextFrame", "mPrevFrame", "mCommands"],

	"Commands": [
		# public
		"mCurrentVnode", "mLeoFrame", "mInhibitOnTreeChanged", "mMaxTnodeIndex",
		"mTreeCtrl", "mBodyCtrl", "mFirstWindowAndNeverSaved",
		#private
		"mTabWidth", "mChanged", "mOutlineExpansionLevel", "mUsingClipboard",
		"mFileName", "mMemoryInputStream", "mMemoryOutputStream", "mFileInputStream",
		"mInputFile", "mFileOutputStream", "mFileSize", "mTopVnode", "mTagList",
		"mMaxVnodeTag",
		"mUndoType", "mUndoVnode", "mUndoParent", "mUndoBack", "mUndoN",
		"mUndoDVnodes", "mUndoLastChild", "mUndoablyDeletedVnode" ]}</t>
<t tx="T1218">testData = [ "\n@doc\n\
This is a doc part: format, whilest, {};-&gt;.\n\
&lt;&lt;\
section def&gt;&gt;=\n\
LeoFrame::LeoFrame(vnode *v, char *s, int i)\n\
{\n\
	// test ; {} /* */.\n\
	#if 0 //comment\n\
		if(gLeoFrameList)gLeoFrameList -&gt; mPrevFrame = this ;\n\
		else\n\
			this -&gt; mNextFrame = gLeoFrameList ;\n\
	#else\n\
		\n\
		vnode *v = new vnode(a,b);\n\
		Commands *commander = (Commands) NULL ; // after cast\n\
		this -&gt; mPrevFrame = NULL ;\n\
	#endif\n\
	if (a==b)\n\
		a = 2;\n\
	else if (a ==c)\n\
		a = 3;\n\
	else return; \n\
	/* Block comment test:\n\
		if(2):while(1): end.*/\n\
	for(int i = 1; i &lt; limit; ++i){\n\
		mVisible = FALSE ;\n\
		mOnTop = TRUE ;\n\
	}\n\
	// trailing ws.	 \n\
	mCommands = new Commands(this, mTreeCtrl, mTextCtrl) ;\n\
	gActiveFrame = this ;\n\
}\n\
	", "&lt;&lt;" +
"vnode methods &gt;&gt;=\n\
\n\
void vnode::OnCopyNode(wxCommandEvent&amp; WXUNUSED(event))\n\
{\n\
	mCommands -&gt; copyOutline();\n\
}\n\
\n@doc\n\
another doc part if, then, else, -&gt; \n&lt;&lt;" +
"vnode methods &gt;&gt;=\n\
void vnode::OnPasteNode(wxCommandEvent&amp; WXUNUSED(event))\n\
{\n\
	mCommands -&gt; pasteOutline();\n\
}\n" ]</t>
<t tx="T1219">def speedTest(passes):

	import time
	file = r"c:\prog\LeoPy\LeoPy.leo"
	f=open(file)
	if not f:
		print "not found: ", file
		return
	s=f.read()
	f.close()
	print "file:", file, " size:", len(s), " passes:", passes
	print "speedTest start"
	time1 = time.clock()
	p = passes
	while p &gt; 0:
		n = len(s) ; i = 0 ; lines = 0
		while -1 &lt; i &lt; n:
			if s[i] == '\n':
				lines += 1 ; i += 1
			else:
				i = string.find(s,'\n',i) # _much_ faster than list-based-find.
			continue
			# match is about 9 times slower than simple test.
			if s[i]=='\n': # match(s,i,'\n'): # 
				i += 1
			else:
				i += 1
		p -= 1
	time2 = time.clock()
	print "lines:", lines
	print "speedTest done:"
	print "elapsed time:", time2-time1
	print "time/pass:", (time2-time1)/passes</t>
<t tx="T1220">def leo1to2():

	import leo
	c=leo.top()
	v=c.currentVnode()
	convertLeo1to2(v,c)
</t>
<t tx="T1221">def convertLeo1to2(v,c):

	after=v.nodeAfterTree()
	while v and v != after:
		s=v.bodyString()
		print "converting:", v.headString()
		s=convertStringLeo1to2(s)
		v.setBodyStringOrPane(s)
		v=v.threadNext()

	c.Repaint() # for backward compatibility
	print "end of leo1to2"</t>
<t tx="T1222">def convertStringLeo1to2 (s):

	# print "convertStringLeo1to2:start\n", s
	codeList = stringToList(s) ; outputList = []
	i = 0
	while i &lt; len(codeList):
		j = skipCodePart(codeList,i)
		if j &gt; i:
			code = codeList[i:j]
			convertCodeList1to2(code)
			i = j
			#print "-----code:", listToString(code)
			for item in code:
				outputList.append(item)
		j = skipDocPart(codeList,i)
		if j &gt; i:
			doc = codeList[i:j]
			convertDocList(doc) # same as in c2py
			#print "-----doc:", listToString(doc)
			i = j
			for item in doc:
				outputList.append(item)
	
	result = listToString(outputList)
	global printFlag
	if printFlag: print "-----:\n", result
	return result</t>
<t tx="T1223">@ We do _not_ replace @root by @file or insert @others as needed.  Inserting @others can be done easily enough by hand, and may take more global knowledge than we can reasonably expect to have.
@c

def convertCodeList1to2(list):

	if 0: # There isn't much reason to do this.
		removeAtRoot(list)
	safeReplace(list, "@code", "@c")
	replaceSectionDefs(list)
	removeLeadingAtCode(list)
</t>
<t tx="T1224">@ We separate the processing into two parts, 1) a leo-aware driver that iterates over @file trees and 2) a text-based part that processes one or more files or strings.
</t>
<t tx="T1225">def convertCurrentTree():

	import leo
	c=leo.top()
	v = c.currentVnode()
	c2py.convertLeoTree(v,c)</t>
<t tx="T1226">def convertLeoTree(v,c):

	after=v.nodeAfterTree()
	while v and v != after:
		s=v.bodyString()
		print "converting:", v.headString()
		s=convertCStringToPython(s, doLeoTranslations )
		v.setBodyStringOrPane(s)
		v=v.threadNext()
	c.Repaint() # for backward compatibility.
	print "end of c2py"</t>
<t tx="T1227">def convertCFileToPython(file):

	f=open(file, 'r')
	if not f: return
	s = f.read()
	f.close();
	f=open(file + ".py", 'w')
	if not f: return
	s = convertCStringToPython(s, dontDoLeoTranslations )
	f.write(s)
	f.close()</t>
<t tx="T1228">def convertCStringToPython(s, leoFlag):

	# print "convertCStringToPython:start\n", s
	firstPart = true
	codeList = stringToList(s)
	
	if not leoFlag:
		convertCodeList(codeList, firstPart, dontDoLeoTranslations)
		return listToString(codeList)

	outputList = []
	i = 0
	while i &lt; len(codeList):
		j = skipCodePart(codeList,i)
		if j &gt; i:
			code = codeList[i:j]
			convertCodeList(code, firstPart, doLeoTranslations)
			i = j
			#print "-----code:", listToString(code)
			for item in code:
				outputList.append(item)
		firstPart = false # don't remove @c from here on.
		j = skipDocPart(codeList,i)
		if j &gt; i:
			doc = codeList[i:j]
			convertDocList(doc)
			#print "-----doc:", listToString(doc)
			i = j
			for item in doc:
				outputList.append(item)
	
	result = listToString(outputList)
	global printFlag
	if printFlag: print "-----:\n", result
	return result</t>
<t tx="T1229">def convertCodeList(list, firstPart, leoFlag):
	#first
	replace(list, "\r", None)
	convertLeadingBlanks(list)
	if leoFlag:
		replaceSectionDefs(list)
	mungeAllFunctions(list)
	#next
	safeReplace(list, " -&gt; ", '.')
	safeReplace(list, "-&gt;", '.')
	safeReplace(list, " . ", '.')
	safeReplace(list, "this.self", "self")
	safeReplace(list, "{", None)
	safeReplace(list, "}", None)
	safeReplace(list, "#if", "if")
	safeReplace(list, "#else", "else")
	safeReplace(list, "#endif", None)
	safeReplace(list, "else if", "elif")
	safeReplace(list, "else", "else:")
	safeReplace(list, "&amp;&amp;", "and")
	safeReplace(list, "||", "or")
	safeReplace(list, "TRUE", "true")
	safeReplace(list, "FALSE", "false")
	safeReplace(list, "NULL", "None")
	safeReplace(list, "this", "self")
	safeReplace(list, "try", "try:")
	safeReplace(list, "catch", "except:")
	if leoFlag:
		safeReplace(list, "@code", "@c")
	#next
	handleAllKeywords(list)
	# after processing for keywords
	removeSemicolonsAtEndOfLines(list)
	#last
	if firstPart and leoFlag: removeLeadingAtCode(list)
	removeBlankLines(list)
	removeExcessWs(list)
	# your taste may vary: in Python I don't like extra whitespace
	safeReplace(list, " :", ":") 
	safeReplace(list, ", ", ",")
	safeReplace(list, " ,", ",")
	safeReplace(list, " (", "(")
	safeReplace(list, "( ", "(")
	safeReplace(list, " )", ")")
	safeReplace(list, ") ", ")")
	replaceComments(list) # should follow all calls to safeReplace
	removeTrailingWs(list)
	safeReplace(list, "\t ", "\t") # happens when deleting declarations.</t>
<t tx="T1230">def convertDocList(docList):

	# print "convertDocList:", `docList`
	if matchWord(docList, 0, "@doc"):
		i = skipWs(docList, 4)
		if match(docList, i, "\n"):
			i += 1
		docList[0:i] = list("@ ")</t>
<t tx="T1231">def skipDocPart(list, i):
	
	# print "skipDocPart", `i`
	while i &lt; len(list):
		if matchWord(list, i, "@code") or matchWord(list, i, "@c"):
			break
		elif isSectionDef(list,i):
			break
		else: i = skipPastLine(list, i)
	return i</t>
<t tx="T1232">def skipCodePart(codeList, i):
	
	# print "skipCodePart", `i`
	if matchWord(codeList, i, "@doc") or matchWord(codeList, i, "@"):
		return i
	while i &lt; len(codeList):
		if match(codeList, i, "//"):
			i = skipPastLine(codeList,i)
		elif match(codeList, i, "/*"):
			i = skipCBlockComment(codeList,i)
		elif match(codeList, i, '"') or match(codeList, i, "'"):
			i = skipString(codeList,i)
		elif match(codeList, i, "\n"):
			i += 1
			if matchWord(codeList, i, "@doc") or matchWord(codeList, i, "@"):
				break
		else: i += 1
	return i</t>
<t tx="T1233">def convertLeadingBlanks(list):

	global tabWidth
	if tabWidth &lt; 2: return
	i = 0
	while i &lt; len(list):
		n = 0
		while i &lt; len(list) and list[i] == ' ':
			n += 1 ; i += 1
			if n == tabWidth:
				list[i-tabWidth:i] = ['\t']
				i = i - tabWidth + 1
				n = 0
		i = skipPastLine(list, i)</t>
<t tx="T1234">def findInList(list, i, findStringOrList):

	findList = stringToList(findStringOrList)
	
	while i &lt; len(list):
		if match(list, i, findList): return i
		else: i += 1
	return -1</t>
<t tx="T1235">def findInCode(codeList, i, findStringOrList):

	findList = stringToList(findStringOrList)
	
	while i &lt; len(codeList):
		if isStringOrComment(codeList,i):
			i = skipStringOrComment(codeList,i)
		elif match(codeList, i, findList):
			return i
		else: i += 1
	return -1</t>
<t tx="T1236"># We scan for a '{' at the top level that is preceeded by ')'
# @code and &lt; &lt; x &gt; &gt; = have been replaced by @c
def mungeAllFunctions(codeList):

	prevSemi = 0 # Previous semicolon: header contains all previous text
	i = 0
	firstOpen = None
	while i &lt; len(codeList):
		if isStringOrComment(codeList,i):
			i = skipStringOrComment(codeList,i)
			prevSemi = i
		elif match(codeList, i, '('):
			if not firstOpen:
				firstOpen = i
			i += 1
		elif match(codeList, i, '#'):
			i = skipPastLine(codeList, i)
			prevSemi = i
		elif match(codeList, i, ';'):
			i += 1
			prevSemi = i
		elif matchWord(codeList, i, "@code"):
			i += 5
			prevSemi = i # restart the scan
		elif matchWord(codeList, i, "@c"):
			i += 2 ; prevSemi = i # restart the scan
		elif match(codeList, i, "{"):
			i = handlePossibleFunctionHeader(codeList,i,prevSemi,firstOpen)
			prevSemi = i ; firstOpen = None # restart the scan
		else: i += 1</t>
<t tx="T1237"># converts function header lines from c++ format to python format.
# That is, converts
# x1..nn w::y ( t1 z1,..tn zn) {
# to
# def y (z1,..zn): {

def handlePossibleFunctionHeader(codeList, i, prevSemi, firstOpen):

	assert(match(codeList,i,"{"))
	prevSemi = skipWsAndNl(codeList, prevSemi)
	close = prevNonWsOrNlChar(codeList, i)
	if close &lt; 0 or codeList[close] != ')':
		return 1 + skipToMatchingBracket(codeList, i)
	if not firstOpen:
		return 1 + skipToMatchingBracket(codeList, i)
	close2 = skipToMatchingBracket(codeList, firstOpen)
	if close2 != close:
		return 1 + skipToMatchingBracket(codeList, i)
	open = firstOpen
	assert(codeList[open]=='(')
	head = codeList[prevSemi:open]
	# do nothing if the head starts with "if", "for" or "while"
	k = skipWs(head,0)
	if k &gt;= len(head) or not head[k] in string.letters:
		return 1 + skipToMatchingBracket(codeList, i)
	kk = skipPastWord(head,k)
	if kk &gt; k:
		headString = listToString(head[k:kk])
		# C keywords that might be followed by '{'
		# print "headString:", headString
		if headString in [ "class", "do", "for", "if", "struct", "switch", "while"]:
			return 1 + skipToMatchingBracket(codeList, i)
	args = codeList[open:close+1]
	k = 1 + skipToMatchingBracket(codeList,i)
	body = codeList[i:k]
	#print "head:", listToString(head)
	#print "args:", listToString(args)
	#print "body:", listToString(body)
	#print "tot: ", listToString(codeList[prevSemi:k])
	head = massageFunctionHead(head)
	args = massageFunctionArgs(args)
	body = massageFunctionBody(body)
	#print "head2:", listToString(head)
	#print "args2:", listToString(args)
	#print "body2:", listToString(body)
	#print "tot2: ", listToString(codeList[prevSemi:k])
	result = []
	for item in head:
		result.append(item)
	for item in args:
		result.append(item)
	for item in body:
		result.append(item)
	codeList[prevSemi:k] = result
	return k</t>
<t tx="T1238">def massageFunctionArgs(args):
	global gClassName
	assert(args[0]=='(')
	assert(args[-1]==')')

	result = ['('] ; lastWord = []
	if gClassName:
		for item in list("self,"): result.append(item) #can put extra comma

	i = 1
	while i &lt; len(args):
		i = skipWsAndNl(args, i)
		c = args[i]
		if c in string.letters:
			j = skipPastWord(args,i)
			lastWord = args[i:j]
			i = j
		elif c == ',' or c == ')':
			for item in lastWord:
				result.append(item)
			if lastWord != [] and c == ',':
				result.append(',')
			lastWord = []
			i += 1
		else: i += 1
	if result[-1] == ',':
		del result[-1]
	result.append(')')
	result.append(':')
	# print "new args:", listToString(result)
	return result</t>
<t tx="T1239">def massageFunctionHead(head):

	# print "head:", listToString(head)
	result = []
	prevWord = []
	global gClassName ; gClassName = []
	i = 0
	while i &lt; len(head):
		i = skipWsAndNl(head, i)
		if i &lt; len(head) and head[i] in string.letters:
			result = []
			j = skipPastWord(head,i)
			prevWord = head[i:j]
			i = j
			# look for ::word2
			i = skipWs(head,i)
			if match(head,i,"::"):
				# Set the global to the class name.
				gClassName = listToString(prevWord)
				# print "class name:", gClassName
				i = skipWs(head, i+2)
			 	if i &lt; len(head) and (head[i]=='~' or head[i] in string.letters):
					j = skipPastWord(head,i)
					if head[i:j] == prevWord:
						for item in list("__init__"): result.append(item)
					elif head[i]=='~' and head[i+1:j] == prevWord:
						for item in list("__del__"): result.append(item)
					else:
						# for item in "::": result.append(item)
						for item in head[i:j]: result.append(item)
					i = j
			else:
				for item in prevWord:result.append(item)
		else: i += 1
		
	finalResult = list("def ")
	for item in result: finalResult.append(item)
	# print "new head:", listToString(finalResult)
	return finalResult</t>
<t tx="T1240">def massageFunctionBody(body):

	body = massageIvars(body)
	body = removeCasts(body)
	body = removeTypeNames(body)
	return body</t>
<t tx="T1241">def massageIvars(body):

	if gClassName and ivarsDict.has_key(gClassName):
		ivars = ivarsDict [ gClassName ]
	else:
		ivars = []
	# print "key:ivars=", gClassName, ':', `ivars`

	i = 0
	while i &lt; len(body):
		if isStringOrComment(body,i):
			i = skipStringOrComment(body,i)
		elif body[i] in string.letters:
			j = skipPastWord(body,i)
			word = listToString(body[i:j])
			# print "looking up:", word
			if word in ivars:
				# replace word by self.word
				# print "replacing", word, " by self.", word
				word = "self." + word
				word = list(word)
				body[i:j] = word
				delta = len(word)-(j-i)
				i = j + delta
			else: i = j
		else: i += 1
	return body</t>
<t tx="T1242">def removeCasts(body):

	i = 0
	while i &lt; len(body):
		if isStringOrComment(body,i):
			i = skipStringOrComment(body,i)
		elif match(body, i, '('):
			start = i
			i = skipWs(body, i+1)
			if body[i] in string.letters:
				j = skipPastWord(body,i)
				word = listToString(body[i:j])
				i = j
				if word in classList or word in typeList:
					i = skipWs(body, i)
					while match(body,i,'*'):
						i += 1
					i = skipWs(body, i)
					if match(body,i,')'):
						i += 1
						# print "removing cast:", listToString(body[start:i])
						del body[start:i]
						i = start
		else: i += 1
	return body</t>
<t tx="T1243"># Do _not_ remove type names when preceeded by new.

def removeTypeNames(body):

	i = 0
	while i &lt; len(body):
		if isStringOrComment(body,i):
			i = skipStringOrComment(body,i)
		elif matchWord(body, i, "new"):
			i = skipPastWord(body,i)
			i = skipWs(body,i)
			# don't remove what follows new.
			if body[i] in string.letters:
				i = skipPastWord(body,i)
		elif body[i] in string.letters:
			j = skipPastWord(body,i)
			word = listToString(body[i:j])
			if word in classList or word in typeList:
				k = skipWs(body, j)
				while match(body,k,'*'):
					k += 1 ; j = k
				# print "Deleting type name:", listToString(body[i:j])
				del body[i:j]
			else:
				i = j
		else: i += 1
	return body</t>
<t tx="T1244"># converts if ( x ) to if x:
# converts while ( x ) to while x:
def handleAllKeywords(codeList):

	# print "handAllKeywords:", listToString(codeList)
	i = 0
	while i &lt; len(codeList):
		if isStringOrComment(codeList,i):
			i = skipStringOrComment(codeList,i)
		elif ( matchWord(codeList,i,"if") or
			matchWord(codeList,i,"while") or
			matchWord(codeList,i,"for") or
			matchWord(codeList,i,"elif") ):
			i = handleKeyword(codeList,i)
		else:
			i += 1
	# print "handAllKeywords2:", listToString(codeList)</t>
<t tx="T1245">def handleKeyword(codeList,i):

	isFor = false
	if (matchWord(codeList,i,"if")):
		i += 2
	elif (matchWord(codeList,i,"elif")):
		i += 4
	elif (matchWord(codeList,i,"while")):
		i += 5
	elif (matchWord(codeList,i,"for")):
		i += 3
		isFor = true
	else: assert(0)
	# Make sure one space follows the keyword
	k = i
	i = skipWs(codeList,i)
	if k == i:
		c = codeList[i]
		codeList[i:i+1] = [ ' ', c ]
		i += 1
	# Remove '(' and matching ')' and add a ':'
	if codeList[i] == "(":
		j = removeMatchingBrackets(codeList,i)
		if j &gt; i and j &lt; len(codeList):
			c = codeList[j]
			codeList[j:j+1] = [":", " ", c]
			j = j + 2
		return j
	return i</t>
<t tx="T1246">def isWs(c):
	return c == ' ' or c == '\t'
	
def isWsOrNl(c):
	return c == ' ' or c == '\t' or c == '\n'</t>
<t tx="T1247"># returns the ending index if i points to &lt; &lt; x &gt; &gt; =
def isSectionDef(list, i):

	i = skipWs(list,i)
	if not match(list,i,"&lt;&lt;"): return false
	while i &lt; len(list) and list[i] != '\n':
		if match(list,i,"&gt;&gt;="): return i+3
		else: i += 1
	return false</t>
<t tx="T1248">def isStringOrComment(list, i):

	return match(list,i,"'") or match(list,i,'"') or match(list,i,"//") or match(list,i,"/*")</t>
<t tx="T1249"># returns true if findList matches starting at codeList[i]

def match (codeList, i, findStringOrList):

	findList = stringToList(findStringOrList)
	n = len(findList)
	j = 0
	while i+j &lt; len(codeList) and j &lt; len(findList):
		if codeList[i+j] != findList[j]:
			return false
		else:
			j += 1
			if j == n:
				return i+j
	return false</t>
<t tx="T1250">def matchWord (codeList, i, findStringOrList):

	j = match(codeList,i,findStringOrList)
	if not j:
		return false
	elif j &gt;= len(codeList):
		return true
	else:
		c = codeList[j]
		return not (c in string.letters or c in string.digits or c == '_')</t>
<t tx="T1251">def prevNonWsChar(list, i):

	i -= 1
	while i &gt;= 0 and isWs(list[i]):
		i -= 1
	return i

def prevNonWsOrNlChar(list, i):

	i -= 1
	while i &gt;= 0 and isWsOrNl(list[i]):
		i -= 1
	return i</t>
<t tx="T1252">def removeAllCComments(list, delim):

	i = 0
	while i &lt; len(list):
		if match(list,i,"'") or match(list,i,'"'):
			i = skipString(list,i)
		elif match(list,i,"//"):
			j = skipPastLine(list,i)
			print "deleting single line comment:", listToString(list[i:j])
			del list[i:j]
		elif match(list,i,"/*"):
			j = skipCBlockComment(list,i)
			print "deleting block comment:", listToString(list[i:j])
			del list[i:j]
		else:
			i += 1</t>
<t tx="T1253">def removeAllCSentinels(list, delim):

	i = 0
	while i &lt; len(list):
		if match(list,i,"'") or match(list,i,'"'):
			# string starts a line.
			i = skipString(list,i)
			i = skipPastLine(list,i)
		elif match(list,i,"/*"):
			# block comment starts a line
			i = skipCBlockComment(list,i)
			i = skipPastLine(line,i)
		elif match(list,i,"//@"):
			j = skipPastLine(list,i)
			print "deleting sentinel:", listToString(list[i:j])
			del list[i:j]
		else:
			i = skipPastLine(list,i)</t>
<t tx="T1254">def removeAllPythonComments(list, delim):

	i = 0
	while i &lt; len(list):
		if match(list,i,"'") or match(list,i,'"'):
			i = skipString(list,i)
		elif match(list,i,"#"):
			j = skipPastLine(list,i)
			print "deleting comment:", listToString(list[i:j])
			del list[i:j]
		else:
			i += 1</t>
<t tx="T1255">def removeAllPythonSentinels(list, delim):

	i = 0
	while i &lt; len(list):
		if match(list,i,"'") or match(list,i,'"'):
			# string starts a line.
			i = skipString(list,i)
			i = skipPastLine(list,i)
		elif match(list,i,"#@"):
			j = skipPastLine(list,i)
			print "deleting sentinel:", listToString(list[i:j])
			del list[i:j]
		else:
			i = skipPastLine(list,i)</t>
<t tx="T1256">def removeAtRoot (codeList):

	i = skipWs(codeList, 0)
	if matchWord(codeList,i,"@root"):
		j = skipPastLine(codeList,i)
		del codeList[i:j]

	while i &lt; len(codeList):
		if isStringOrComment(codeList,i):
			i = skipStringOrComment(codeList,i)
		elif match(codeList,i,"\n"):
			i = skipWs(codeList, i+1)
			if matchWord (codeList,i,"@root"):
				j = skipPastLine(codeList,i)
				del codeList[i:j]
		else: i += 1
</t>
<t tx="T1257">def removeBlankLines(codeList):

	i = 0
	while i &lt; len(codeList):
		j = i
		while j &lt; len(codeList) and (codeList[j]==" " or codeList[j]=="\t"):
			j += 1
		if j== len(codeList) or codeList[j] == '\n':
			del codeList[i:j+1]
		else:
			oldi = i
			i = skipPastLine(codeList,i)</t>
<t tx="T1258">def removeExcessWs(codeList):

	i = 0
	i = removeExcessWsFromLine(codeList,i)
	while i &lt; len(codeList):
		if isStringOrComment(codeList,i):
			i = skipStringOrComment(codeList,i)
		elif match(codeList,i,'\n'):
			i += 1
			i = removeExcessWsFromLine(codeList,i)
		else: i += 1</t>
<t tx="T1259">def removeExcessWsFromLine(codeList,i):

	assert(i==0 or codeList[i-1] == '\n')
	i = skipWs(codeList,i)
	while i &lt; len(codeList):
		if isStringOrComment(codeList,i): break # safe
		elif match(codeList, i, '\n'): break
		elif match(codeList, i, ' ') or match(codeList, i, '\t'):
			# Replace all whitespace by one blank.
			k = i
			i = skipWs(codeList,i)
			codeList[k:i] = [' ']
			i = k + 1 # make sure we don't go past a newline!
		else: i += 1
	return i</t>
<t tx="T1260">def removeLeadingAtCode(codeList):

	i = skipWsAndNl(codeList,0)
	if matchWord(codeList,i,"@code"):
		i = skipWsAndNl(codeList,5)
		del codeList[0:i]
	elif matchWord(codeList,i,"@c"):
		i = skipWsAndNl(codeList,2)
		del codeList[0:i]</t>
<t tx="T1261">def removeMatchingBrackets(codeList, i):

	j = skipToMatchingBracket(codeList, i)
	if j &gt; i and j &lt; len(codeList):
		# print "del brackets:", listToString(codeList[i:j+1])
		c = codeList[j]
		if c == ')' or c == ']' or c == '}':
			del codeList[j:j+1]
			del codeList[i:i+1]
			# print "returning:", listToString(codeList[i:j])
			return j - 1
		else: return j + 1
	else: return j</t>
<t tx="T1262">def removeSemicolonsAtEndOfLines(list):

	i = 0
	while i &lt; len(list):
		if isStringOrComment(list,i):
			i = skipStringOrComment(list,i)
		elif list[i] == ';':
			j = skipWs(list,i+1)
			if j &gt;= len(list) or match(list,j,'\n') or match(list,j,'#') or match(list,j,"//"):
				del list[i]
			else: i += 1
		else: i += 1</t>
<t tx="T1263">def removeTrailingWs(list):

	i = 0
	while i &lt; len(list):
		if isWs(list[i]):
			j = i
			i = skipWs(list,i)
			assert(j &lt; i)
			if i &gt;= len(list) or list[i] == '\n':
				# print "removing trailing ws:", `i-j`
				del list[j:i]
				i = j
		else: i += 1</t>
<t tx="T1264"># Replaces all occurances of findString by changeString.
# Deletes all occurances if change is None
def replace(codeList, findString, changeString):

	if len(findString)==0: return
	findList = stringToList(findString)
	changeList = stringToList(changeString)

	i = 0
	while i &lt; len(codeList):
		if match(codeList, i, findList):
			codeList[i:i+len(findList)] = changeList
			i += len(changeList)
		else: i += 1</t>
<t tx="T1265"># For Leo we expect few block comments; doc parts are much more common.

def replaceComments(codeList):

	i = 0
	if match(codeList, i, "//"):
		codeList[0:2] = ['#']
	while i &lt; len(codeList):
		if match(codeList, i, "//"):
			codeList[i:i+2] = ['#']
			i = skipPastLine(codeList,i)
		elif match(codeList, i, "/*"):
			j = skipCBlockComment(codeList,i)
			del codeList[j-2:j]
			codeList[i:i+2] = ['#']
			j -= 2 ; k = i ; delta = -1
			while k &lt; j + delta :
				if codeList[k]=='\n':
					codeList[k:k+1] = ['\n', '#', ' ']
					delta += 2 ; k += 3 # progress!
				else: k += 1
			i = j + delta
		elif match(codeList, i, '"') or match(codeList, i, "'"):
			i = skipString(codeList,i)
		else: i += 1</t>
<t tx="T1266"># Replaces &lt; &lt; x &gt; &gt; = by @c (at the start of lines).
def replaceSectionDefs(codeList):

	i = 0
	j = isSectionDef(codeList,i)
	if j &gt; 0: codeList[i:j] = list("@c ")

	while i &lt; len(codeList):
		if isStringOrComment(codeList,i):
			i = skipStringOrComment(codeList,i)
		elif match(codeList,i,"\n"):
			i += 1
			j = isSectionDef(codeList,i)
			if j &gt; i: codeList[i:j] = list("@c ")
		else: i += 1</t>
<t tx="T1267"># Replaces occurances of findString by changeString outside of C comments and strings.
# Deletes all occurances if change is None.
def safeReplace(codeList, findString, changeString):

	if len(findString)==0: return
	findList = stringToList(findString)
	changeList = stringToList(changeString)
	i = 0
	if findList[0] in string.letters: #use matchWord
		while i &lt; len(codeList):
			if isStringOrComment(codeList,i):
				i = skipStringOrComment(codeList,i)
			elif matchWord(codeList, i, findList):
				codeList[i:i+len(findList)] = changeList
				i += len(changeList)
			else: i += 1
	else: #use match
		while i &lt; len(codeList):
			if match(codeList, i, findList):
				codeList[i:i+len(findList)] = changeList
				i += len(changeList)
			else: i += 1</t>
<t tx="T1268">def skipCBlockComment(codeList, i):

	assert(match(codeList, i, "/*"))
	i += 2

	while i &lt; len(codeList):
		if match(codeList, i, "*/"): return i + 2
		else: i += 1
	return i</t>
<t tx="T1269">def skipPastLine(codeList, i):

	while i &lt; len(codeList) and codeList[i] != '\n':
		i += 1
	if i &lt; len(codeList) and codeList[i] == '\n':
		i += 1
	return i</t>
<t tx="T1270">def skipPastWord(list, i):

	assert(list[i] in string.letters or list[i]=='~')
	
	# Kludge: this helps recognize dtors.
	if list[i]=='~':
		i += 1
	
	while i &lt; len(list) and (
		list[i] in string.letters or
		list[i] in string.digits or
		list[i]=='_'):
		i += 1
	return i</t>
<t tx="T1271">def skipString(codeList, i):

	delim = codeList[i] # handle either single or double-quoted strings
	assert(delim == '"' or delim == "'")
	i += 1

	while i &lt; len(codeList):
		if codeList[i] == delim: return i + 1
		elif codeList[i] == '\\': i += 2
		else: i += 1
	return i</t>
<t tx="T1272">def skipStringOrComment(list,i):

	if match(list,i,"'") or match(list,i,'"'):
		return skipString(list,i)
	if match(list, i, "//"):
		return skipPastLine(list,i)
	elif match(list, i, "/*"):
		return skipCBlockComment(list,i)
	else: assert(0)</t>
<t tx="T1273">def skipToMatchingBracket(codeList, i):

	c = codeList[i]
	if   c == '(': delim = ')'
	elif c == '{': delim = '}'
	elif c == '[': delim = ']'
	else: assert(0)

	i += 1
	while i &lt; len(codeList):
		c = codeList[i]
		if isStringOrComment(codeList,i):
			i = skipStringOrComment(codeList,i)
		elif c == delim:
			return i
		elif c == '(' or c == '[' or c == '{':
			i = skipToMatchingBracket(codeList,i)
			i += 1 # skip the closing bracket.
		else: i += 1
	return i</t>
<t tx="T1274">def skipWs(list, i):

	while i &lt; len(list):
		c = list[i]
		if c == ' ' or c == '\t':
			i += 1
		else: break
	return i
	
def skipWsAndNl(list, i):

	while i &lt; len(list):
		c = list[i]
		if c == ' ' or c == '\t' or c == '\n':
			i += 1
		else: break
	return i</t>
<t tx="T1275"># converts a string to a list containing one item per character of the list.
# converts None to the empty string and leaves other types alone.

# list(string) does not work on none.
def stringToList(string):

	if string:
		return list(string)
	else:
		return []</t>
<t tx="T1276">def listToString(list):

	return string.join(list,"")</t>
<t tx="T1277">@language python

@ This file contains compare routines used for testing and I hack away as needed.  To save typing, I usually invoke the go() from the Python interpreter.
@c

import difflib, filecmp, os, string

@others</t>
<t tx="T1278">def choose(cond, a, b): # warning: evaluates all arguments

	if cond: return a
	else: return b
</t>
<t tx="T1279">def cmp(name1,name2):

	val = filecmp.cmp(name1,name2,0)
	if 1:
		if val: print "equal"
		else:   print "*** not equal"
	else:
		print "filecmp.cmp returns:",
		if val: print val, "(equal)"
		else:   print val, "(not equal)"

	return val</t>
<t tx="T1280">def compare(f1,f2,name1,name2,verbose):

	lines = 0 ; mismatches = 0
	s1 = f1.readline() ; s2 = f2.readline() # Ignore the first line!
	while 1:
		s1 = f1.readline() ; s2 = f2.readline()
		if 1: # Ignore leading whitespace
			s1 = string.lstrip(s1)
			s2 = string.lstrip(s2)
		if 1: # LeoCB doesn't delete whitespace as well as leo.py.
			&lt;&lt; ignore blank lines &gt;&gt;
		n1 = len(s1) ; n2 = len(s2)
		if n1==0 and n2 != 0: print "eof on", name1
		if n2==0 and n1 != 0: print "eof on", name2
		if n1==0 or n2==0: break
		match = compare_lines(s1,s2)
		if not match: mismatches += 1
		lines += 1
		if verbose or not match:
			mark = choose(match,' ','*')
			dump("1.",lines,mark,s1)
			dump("2.",lines,mark,s2)
			if mismatches &gt; 9: return

	return #
	print "lines", lines, "mismatches:", mismatches
	if n1&gt;0: dumpEnd("1",f1)
	if n2&gt;0: dumpEnd("2",f2)</t>
<t tx="T1281">while 1:
	s = string.rstrip(s1)
	if len(s) == 0:
		s1 = f1.readline()
		if len(s1) == 0: break
	else: break
while 1:
	s = string.rstrip(s2)
	if len(s) == 0:
		s2 = f2.readline()
		if len(s1) == 0: break
	else: break</t>
<t tx="T1282">def compare_files (name1,name2,verbose):
	
	f1=doOpen(name1)
	f2=doOpen(name2)
	if f1 and f2:
		compare(f1,f2,name1,name2,verbose)
	try:
		f1.close()
		f2.close()
	except: pass</t>
<t tx="T1283">def compare_lines(s1,s2):

	if 0: # ignore all whitespace
		s1 = string.replace(s1," ","")
		s1 = string.replace(s1,"\t","")
		s2 = string.replace(s2," ","")
		s2 = string.replace(s2,"\t","")
	else: # ignore leading and/or trailing whitespace
		s1 = string.strip(s1)
		s2 = string.strip(s2)
	return s1==s2</t>
<t tx="T1284">def compareDirs(dir1,dir2): # make ".py" an arg.

  print "dir1:", dir1
  print "dir2:", dir2
  list1 = os.listdir(dir1)
  list2 = os.listdir(dir2)
  py1 = [] ; py2 = []
  for f in list1:
    root, ext = os.path.splitext(f)
    if ext == ".py": py1.append(f)
  for f in list2:
    root, ext = os.path.splitext(f)
    if ext == ".py": py2.append(f)
  print "comparing using filecmp.cmp"
  print
  yes = [] ; no = [] ; fail = []
  for f1 in py1:
    head,f2 = os.path.split(f1)
    if f2 in py2:
      val = filecmp.cmp(dir1+f1,dir2+f2,0)
      if val:  yes.append(f1)
      else: no.append(f1)
    else: fail.append(f1)

  print "matches:",
  for f in yes:  print f,
  print ; print "mismatches:",
  for f in no:   print f,
  print ; print "not found:",
  for f in fail: print f,</t>
<t tx="T1285">def compare_directories(path1,path2,verbose):

	files = os.listdir(path1)
	files.sort()
	for f in files:
		if os.path.exists(path2 + f):
			val = filecmp.cmp(path1 + f, path2 + f)
			# print "cmp:", val, f
		else:
			print path2+f, "does not exist in both directories"
			files.remove(f)

	print "1." + path1
	print "2." + path2
	for f in files:
		name1 = path1 + f ; name2 = path2 + f
		val = filecmp.cmp(name1,name2)
		if val == 0:
			f1 = open(name1) ; f2 = open(name2)
			print f
			# note: should have param telling how to deal with whitespace.
			compare(f1,f2,name1,name2,verbose)
			f1.close() ; f2.close()
			## return ## just one</t>
<t tx="T1286">def crlf(f1,f2):
	s1=f1.read() ; s2=f2.read()
	cr, lf = count_crlf(s1)
	print name1, cr, lf
	cr, lf = count_crlf(s2)
	print name2, cr, lf

def count_crlf(s):
	cr, lf = 0, 0
	for i in s:
		if i == '\n': lf += 1
		if i == '\r': cr += 1
	return cr,lf
</t>
<t tx="T1287">def diff(f1,f2):

	s1=f1.read() ; s2=f2.read()
	s = difflib.Differ()
	delta = s.compare(s1,s2)
	print len(delta)</t>
<t tx="T1288">def doOpen(name):

	try:
		f = open(name,'r')
		return f
	except:
		print "can not open:", `name`
		return None</t>
<t tx="T1289">def dump(tag,line,mark,s):

	out = tag + `line` + mark + ':' 
	for ch in s[:-1]: # don't print the newline
		if 0: # compact
			if ch == '\t' or ch == ' ':
				out += ' '
			else:
				out += ch
		else: # more visible
			if ch=='\t':
				out += "[" ; out += "t" ; out += "]"
			elif ch==' ':
				out += "[" ; out += " " ; out += "]"
			else: out += ch
	print out
</t>
<t tx="T1290">def dumpEnd(tag,f):

	lines = 0
	while 1:
		s = f.readline()
		if len(s) == 0: break
		lines += 1
		# dump(tag,s)

	print "file", tag, "has", lines, "trailing lines"</t>
<t tx="T1291">def go(name=None):

	if 1: # Compare all files in Tangle test directories
		path1 = "c:\\prog\\test\\tangleTest\\"
		path2 = "c:\\prog\\test\\tangleTestCB\\"
		verbose = 0
		compare_directories(path1,path2,verbose)
	else: # Compare two files.
		name1 = "c:\\prog\\test\\compare1.txt"
		name2 = "c:\\prog\\test\\compare2.txt"
		verbose = 0
		compare_files(name1,name2,verbose)</t>
<t tx="T1292">def sequence(f1,f2):

	s = difflib.SequenceMatcher()
	s1 = f1.read() ; s2 = f2.read()
	print len(s1), len(s2)
	# codes = s.get_opcodes() # hangs.
	# print len(codes)
	# print s.ratio() # hangs
</t>
<t tx="T1293">@language python

@ This file contains functions for non-interactive searching.  You might find these useful while running other scripts.
@c

import leo, string, re

@others</t>
<t tx="T1294">def changeAll ( commander, findPat, changePat, bodyFlag = 1 ):
	"""
	changeAll	make changes in an entire Leo outline.
	
	commander	Commands object for a Leo outline window.
	findPat		the search string.
	changePat	the replacement string.
	bodyFlag	true: change body text.  false: change headline text.
	"""
	n = len(changePat)
	v = commander.rootVnode()
	pos = 0
	while v != None:
		v, pos = changeNext(v, pos, findPat, changePat, bodyFlag)
		pos = pos + n</t>
<t tx="T1295">def changeNext ( v, pos, findPat, changePat, bodyFlag = 1 ):
	"""
	changeNext:	use string.find() to change text in a Leo outline.
	
	v	 		the vnode to start the search.
	pos			the position within the body text of v to start the search.
	findPat		the search string.
	changePat	the replacement string.
	bodyFlag	true: change body text.  false: change headline text.
	
	returns a tuple (v,pos) showing where the change occured.
	returns (None,0) if no further match in the outline was found.

	Note: if (v,pos) is a tuple returned previously from changeNext,
	changeNext(v,pos+len(findPat),findPat,changePat)
	changes the next matching string.
	"""
	n = len(findPat)
	v, pos = findNext(v, pos, findPat, bodyFlag)
	if v == None:
		return None, 0
	if bodyFlag:
		s = v.bodyString()
		# s[pos:pos+n] = changePat
		s = s[:pos] + changePat + s[pos+n:]
		v.setBodyStringOrPane(s)
	else:
		s = v.headString()
		# s[pos:pos+n] = changePat
		s = s[:pos] + changePat + s[pos+n:]
		v.setHeadStringOrHeadline(s)
		print "setting head string: ", result
	return v, pos</t>
<t tx="T1296">def changePrev ( v, pos, findPat, changePat, bodyFlag = 1 ):
	"""
	changePrev:	use string.rfind() to change text in a Leo outline.
	
	v	 		the vnode to start the search.
	pos			the position within the body text of v to start the search.
	findPat		the search string.
	changePat	the replacement string.
	bodyFlag	true: change body text.  false: change headline text.
	
	returns a tuple (v,pos) showing where the change occured.
	returns (None,0) if no further match in the outline was found.

	Note: if (v,pos) is a tuple returned previously from changePrev,
	changePrev(v,pos-len(findPat),findPat,changePat)
	changes the next matching string.
	"""
	n = len(findPat)
	v, pos = findPrev(v, pos, findPat, bodyFlag)
	if v == None:
		return None, 0
	if bodyFlag:
		s = v.bodyString()
		# s[pos:pos+n] = changePat
		s = s[:pos] + changePat + s[pos+n:]
		v.setBodyStringOrPane(s)
	else:
		s = v.headString()
		#s[pos:pos+n] = changePat
		s = s[:pos] + changePat + s[pos+n:]
		v.setHeadStringOrHeadline(s)
	return v, pos</t>
<t tx="T1297">def findAll ( commander, pattern, bodyFlag = 1 ):
	"""
	findAll		search an entire Leo outline for a pattern.
	
	commander	Commands object for a Leo outline window.
	pattern		the search string.
	bodyFlag	true: search body text.  false: search headline text.
	
	returns a list of tuples (v,pos) showing where matches occured.
	returns [] if no match were found.
	"""
	n = len(pattern)
	result = []
	v = commander.rootVnode()
	pos = 0
	while v != None:
		v, pos = findNext(v, pos, pattern, bodyFlag)
		if v != None:
			result.append ( (v, pos) )
		pos = pos + n
	return result</t>
<t tx="T1298">def findNext ( v, pos, pattern, bodyFlag = 1 ):
	"""
	findNext:	use string.find() to find a pattern in a Leo outline.
	
	v	 		the vnode to start the search.
	pos			the position within the body text of v to start the search.
	pattern		the search string.
	bodyFlag	true: search body text.  false: search headline text.
	
	returns a tuple (v,pos) showing where the match occured.
	returns (None,0) if no further match in the outline was found.

	Note: if (v,pos) is a tuple returned previously from findNext,
	findNext(v,pos+len(pattern),pattern) finds the next match.
	"""
	while v != None:
		if bodyFlag:
			s = v.bodyString()
		else:
			s = v.headString()
		pos = string.find ( s, pattern, pos )
		if pos != -1:
			return v, pos
		v = v.threadNext()
		pos = 0
	return None, 0</t>
<t tx="T1299">def findPrev ( v, pos, pattern, bodyFlag = 1 ):
	"""
	findPrev:	use string.rfind() to find a pattern in a Leo outline.
	
	v	 		the vnode to start the search.
	pos			the position within the body text of v to start the search.
	pattern		the search string
	bodyFlag	true: search body text.  false: search headline text.
	
	returns a tuple (v,pos) showing where the match occured.
	returns (None,0) if no further match in the outline was found.

	Note: if (v,pos) is a tuple returned previously from findPrev,
	findPrev(v,pos-len(pattern),pattern) finds the next match.
	"""
	while v != None:
		if bodyFlag:
			s = v.bodyString()
		else:
			s = v.headString()
		pos = string.rfind ( s, pattern, 0, pos )
		if pos != -1:
			return v, pos
		v  = v.threadBack()
		pos = -1
	return None, 0</t>
<t tx="T1300">def reChangeAll ( commander, findPat, changePat, bodyFlag, reFlags = None ):
	"""
	reChangeAll: make changes in an entire Leo outline using re module.
	
	commander	Commands object for a Leo outline window.
	findPat		the search string.
	changePat	the replacement string.
	bodyFlag	true: change body text.  false: change headline text.
	reFlags		flags argument to re.search().
	"""
	n = len(changePat)
	v = commander.rootVnode()
	pos = 0
	while v != None:
		v, mo, pos = reChangeNext(
			v, pos, findPat, changePat, bodyFlag, reFlags)
		pos = pos + n</t>
<t tx="T1301">def reChangeNext ( v, pos, findPat, changePat, bodyFlag, reFlags = None ):
	"""
	reChangeNext: use re.search() to change text in a Leo outline.
	
	v	 		the vnode to start the search.
	pos			the position within the body text of v to start the search.
	findPat		the search string.
	changePat	the replacement string.
	bodyFlag	true: change body text.  false: change headline text.
	reFlags		flags argument to re.search().
	
	returns a tuple (v,pos) showing where the change occured.
	returns (None,0) if no further match in the outline was found.

	Note: if (v,pos) is a tuple returned previously from reChangeNext,
	reChangeNext(v,pos+len(findPat),findPat,changePat,bodyFlag)
	changes the next matching string.
	"""
	n = len(findPat)
	v, mo, pos = reFindNext(v, pos, findPat, bodyFlag, reFlags)
	if v == None:
		return None, None, 0
	if bodyFlag:
		s = v.bodyString()
		print s, findPat, changePat
		# s[pos:pos+n] = changePat
		s = s[:pos] + changePat + s[pos+n:]
		v.setBodyStringOrPane(s)
	else:
		s = v.headString()
		# s[pos:pos+n] = changePat
		s = s[:pos] + changePat + s[pos+n:]
		v.setHeadStringOrHeadline(s)
	return v, mo, pos</t>
<t tx="T1302">def reChangePrev ( v, pos, findPat, changePat, bodyFlag, reFlags = None ):
	"""
	reChangePrev: use re.search() to change text in a Leo outline.
	
	v	 		the vnode to start the search.
	pos			the position within the body text of v to start the search.
	findPat		the search string.
	changePat	the replacement string.
	bodyFlag	true: change body text.  false: change headline text.
	reFlags		flags argument to re.search().
	
	returns a tuple (v,pos) showing where the change occured.
	returns (None,0) if no further match in the outline was found.

	Note: if (v,pos) is a tuple returned previously from reChangePrev,
	reChangePrev(v,pos-len(findPat),findPat,changePat,bodyFlag)
	changes the next matching string.
	"""
	n = len(findPat)
	v, mo, pos = reFindPrev(v, pos, findPat, bodyFlag, reFlags)
	if v == None:
		return None, None, 0
	if bodyFlag:
		s = v.bodyString()
		# s[pos:pos+n] = changePat
		s = s[:pos] + changePat + s[pos+n:]
		v.setBodyStringOrPane(s)
	else:
		s = v.headString()
		# s[pos:pos+n] = changePat
		s = s[:pos] + changePat + s[pos+n:]
		v.setHeadStringOrHeadline(s)
	return v, mo, pos</t>
<t tx="T1303">def reFindAll ( commander, findPat, bodyFlag, reFlags = None ):
	"""
	reFindAll	search an entire Leo outline using re module.
	
	commander	Commands object for a Leo outline window.
	pattern		the search string.
	bodyFlag	true: search body text.  false: search headline text.
	reFlags		flags argument to re.search().
	
	returns a list of tuples (v,pos) showing where matches occured.
	returns [] if no match were found.
	"""
	n = len(findPat)
	result = []
	v = commander.rootVnode()
	pos = 0
	while v != None:
		v, mo, pos = reFindNext(v, pos, findPat, bodyFlag, reFlags)
		if v != None:
			result.append ( (v,mo,pos) )
		pos = pos + n
	return result</t>
<t tx="T1304">def reFindNext ( v, pos, pattern, bodyFlag, reFlags = None ):
	"""
	reFindNext:	use re.search() to find pattern in a Leo outline.
	
	v	 		the vnode to start the search.
	pos			the position within the body text of v to start the search.
	pattern		the search string
	bodyFlag	true: search body text.  false: search headline text.
	reFlags		the flags argument to re.search()
	
	returns a tuple (v,mo,pos) showing where the match occured.
	returns (None,None,0) if no further match in the outline was found.

	Note: if (v,pos) is a tuple returned previously from reFindNext,
	reFindNext(v,pos+len(pattern),pattern) finds the next match.
	"""
	while v != None:
		if bodyFlag:
			s = v.bodyString()
		else:
			s = v.headString()
		if reFlags == None:
			mo = re.search ( pattern, s[pos:] )
		else:
			mo = re.search ( pattern, s[pos:], reFlags )
		if mo != None:
			return v, mo, pos + mo.start()
		v = v.threadNext()
		pos = 0
	return None, None, 0</t>
<t tx="T1305">def reFindPrev ( v, pos, pattern, bodyFlag, reFlags = None ):
	"""
	reFindPrev:	use re.search() to find pattern in a Leo outline.

	v	 		the vnode to start the search.
	pos			the position within the body text of v to start the search.
	pattern		the search string
	bodyFlag	true: search body text.  false: search headline text.
	reFlags		the flags argument to re.search()
	
	returns a tuple (v,mo,pos) showing where the match occured.
	returns (None,None,0) if no further match in the outline was found.
	
	Note 1: Searches vnodes in reverse (v.threadBack) direction.
	Searches text of vnodes in _forward_ direction.
	
	Note 2: if (v,pos) is a tuple returned previously from reFindPrev,
	reFindPrev(v,pos-len(pattern),pattern) finds the next match.
	"""
	while v != None:
		if bodyFlag:
			s = v.bodyString()
		else:
			s = v.headString()
		# Forward search through text...
		if reFlags == None:
			mo = re.search ( pattern, s[pos:] )
		else:
			mo = re.search ( pattern, s[pos:], reFlags )
		if mo != None:
			return v, mo, pos+mo.start()
		# Reverse search through vnode.
		v = v.threadBack()
		pos = 0
	return None, None, 0</t>
<t tx="T1306">def lineAtPos ( s, pos ):
	"""
	lineAtPos: return the line of a string containing the given index.
	s		a string
	pos		an index into s
	"""
	# find the start of the line containing the match
	if len(s) &lt; 1:
		return ""
	if pos &gt; len(s):
		pos = len(s)-1
		
	while pos &gt; 0:
		if s[pos] == '\n':
			pos = pos + 1
			break
		else:
			pos = pos - 1
	# return the line containing the match
	s = s[pos:]
	list = string.split(s,"\n")
	return list[0]</t>
<t tx="T1307">def printFindList( findList, bodyFlag = 1 ):
	"""
	printFindList:	Print matching lines from the list.
	
	findList:		a list of (v,pos) tuples returned from findAll().
	Only the line containing the match is printed.
	Lines are printed once for each match found on the line.
	"""
	for v,pos in findList:
		if v != None:
			if bodyFlag:
				s = v.bodyString()
			else:
				s = v.headString()
			print lineAtPos(s, pos)</t>
<t tx="T1308">@language python

@ This tiny script is intended to be called from go.bat to open LeoPy.leo.  You could change the file name to be any file you work on a lot...
@c

import leo
leo.open("c:\prog\leoCVS\leo\LeoPy.leo")</t>
<t tx="T1309">@language python

@ Script for creating and installing distributions of leo.py using Python's distutils package.  setup.py is the conventional name for such scripts.

On Windows, invoke this script using sdist.bat
On Linux do: cd LeoPy ; python setup.py sdist --force-manifest --formats=gztar,zip
@c

from distutils.core import setup
import os

print
print "Remember to update version numbers!"
print "Remember to clear Default Tangle Directory!"
print

# Generate the list of modules.
files = os.listdir(os.getcwd())
modules = []
for f in files:
	head,tail = os.path.split(f)
	root,ext = os.path.splitext(tail)
	if tail[0:3]=="leo" and ext==".py":
		modules.append(root)
		
modules.sort()
# print "modules:", `modules`

setup( name="leo",
	version="2.5.1",
	author="Edward K. Ream",
	author_email="edream@tds.net",
	url="http://personalpages.tds.net/~edream/front.html",
	py_modules=modules, # leo*.py also included in manifest
	description = "Leo: Literate Editor with Outlines",
	licence="Python", # [sic], not license
	platforms=["Windows, Linux, Macintosh"],
	long_description =
"""Leo is an outline-oriented editor written in 100% pure Python.
Leo works on any platform that supports Python 2.x and the Tk toolkit.
This version of Leo was developed with Python 2.2 and Tk 8.3.2.
You may download Python from http://python.org/ and
tcl/Tk from http://tcl.activestate.com/software/tcltk/
Leo features a multi-window outlining editor, Python colorizing,
powerful outline commands and many other things, including
Unlimited Undo/Redo and an integrated Python shell(IDLE) window.""")</t>
<t tx="T1310">@language python

# Example tangle_done script

def run(root_list):

	print "tangle_done roots:", `root_list`</t>
<t tx="T1311">@language python

# Example untangle_done script

def run(root_list):

	print "untangle_done roots:", `root_list`</t>
<t tx="T1312">@language python

# Dummy file to make this a potential package.</t>
<t tx="T1313">@language python

# Top level of leo.py

&lt;&lt; Import pychecker &gt;&gt;
import leoGlobals # Can't import * here: app() is not defined yet!
import leoApp, leoFrame, leoUtils, Tkinter
import os, string, sys

app = leoGlobals.app
	
@others

if __name__ == "__main__":
	if len(sys.argv) &gt; 1:
		if sys.platform=="win32": # Windows
			fileName = string.join(sys.argv[1:],' ')
		else:
			fileName = sys.argv[1]
		open(fileName)
	else:
		run()</t>
<t tx="T1314">@ pychecker is extremely useful, and it sometimes reports problems erroneously.  In particular, the following warnings are invalid:

in leoFrame.py and leoNodes.py: warnings about the event param not being used. pychecker doesn't understand that these routines are Tkinter callbacks.

in leoApp.py and leoUtils.py: pychecker doesn't seem to handle globals very well.  There are spurious warnings about globals.

several files: pychecker complains about several routines being "too big", i.e., pychecker doesn't understand about literate programming.

@c

if 0: # Set to 1 for lint-like testing.  This can also be done in idle.
	try:
		import pychecker.checker
	except: pass</t>
<t tx="T1315">def windows():
	return app().windowList
	
def getCommands():
	c = []
	for w in windows():
		c.append(w.commands)
		
def topCommands():
	import leoGlobals
	return leoGlobals.top()</t>
<t tx="T1316"># This is useful for reloading after a file has been changed.

def go(*args):

	reload_all()
	if len(args) &gt; 0 and type(args[0]) == type(("a","b")):
		args = args[0] # Strip the outer tuple.
	run(args)</t>
<t tx="T1317">def init_sherlock (args):
	
	leoUtils.init_trace(args)
	# leoUtils.trace("argv", "sys.argv: " + `sys.argv`)</t>
<t tx="T1318">def open(fileName=None,*args):
	
	if fileName == None:
		run()
		return

	reload_all()

	# Create a hidden main window: this window never becomes visible!
	root = Tkinter.Tk()
	&lt;&lt; set the icon image &gt;&gt;
	root.title("Leo Main Window")
	root.withdraw()
	# Initialize application globals
	app = leoApp.LeoApp(root)
	leoGlobals.setApp(app)
	app.finishCreate() # do this after gApp exists.
	# Create the first Leo window
	frame1 = leoFrame.LeoFrame()
	frame1.top.withdraw()
	# Now open the second Leo window
	fileName = os.path.join(os.getcwd(), fileName)
	fileName = os.path.normpath(fileName)
	if os.path.exists(fileName):
		ok, frame = frame1.OpenWithFileName(fileName)
	else: ok = 0
	if ok:
		app.windowList.remove(frame1)
		frame1.destroy() # force the window to go away now.
		app.log = frame # Sets the log stream for es()
	else:
		frame1.top.deiconify()
		app.log = frame1
		leoGlobals.es("File not found: " + fileName)
	init_sherlock(args)
	root.mainloop()</t>
<t tx="T1319">@language python

from leoGlobals import *
from leoUtils import *
import leo,leoConfig,leoFind,leoPrefs
import os, sys, Tkinter

class LeoApp:
	@others</t>
<t tx="T1320">def destroyAllGlobalWindows (self):

	if self.findFrame:
		self.findFrame.top.destroy()
</t>
<t tx="T1321">def testDialogs (self):

	import leoDialog
	d = leoDialog.leoDialog()
	d.testDialogs()</t>
<t tx="T1322">@language python

# Syntax coloring routines for Leo.py

from leoGlobals import *
from leoUtils import *
import keyword, string

&lt;&lt; define colorizer constants &gt;&gt;
&lt;&lt; define colorizer keywords &gt;&gt;
&lt;&lt; define colorizer functions &gt;&gt;

class colorizer:
	@others</t>
<t tx="T1323"># We only define states that can continue across lines.
normalState, docState, nocolorState, string3State, blockCommentState = 1,2,3,4,5</t>
<t tx="T1324">def index(i,j):

	if type(i) != type("end"):
		i = `i`
	if type(j) != type("end"):
		j = `j`
	return i + '.' + j
</t>
<t tx="T1325">def OnHyperLinkControlClick (self,v):

	pass</t>
<t tx="T1326">def OnHyperLinkEnter (self,v):

	pass # trace(`v` + ", " + `v.tagName`)</t>
<t tx="T1327">def OnHyperLinkLeave (self,v):

	pass # trace(`v`)</t>
<t tx="T1328">def schedule(self,v,body):

	if self.enabled:
		body.after_idle(self.idle_colorize,v,body)
		
def idle_colorize(self,v,body):

	# trace(`v` + ", " + `body`)
	if v and body and self.enabled:
		self.colorize(v,body)</t>
<t tx="T1329">def getCwebWord (self,s,i):
	
	if not match(s,i,"@"):
		return None
	
	ch1 = ch2 = ch3 = word = None
	if i + 1 &lt; len(s): ch1 = s[i+1]
	if i + 2 &lt; len(s): ch2 = s[i+2]
	if i + 3 &lt; len(s): ch3 = s[i+3]

	if match(s,i,"@**"):
		word = "@**"
	elif not ch1:
		word = "@"
	elif not ch2:
		word = s[i:i+2]
	elif (
		(ch1 in string.letters and not ch2 in string.letters) or # single-letter control code
		ch1 not in string.letters # non-letter control code
	):
		word = s[i:i+2]
		
	# if word: trace(`word`)
		
	return word</t>
<t tx="T1330"># Returns the language to be used for syntax coloring of v.

def updateSyntaxColorer (self,v):

	if self.useSyntaxColoring(v):
		return self.scanColorDirectives(v)
	else:
		return plain_text_language</t>
<t tx="T1331"># Return true if v is unambiguously under the control of @color or @nocolor.

def useSyntaxColoring (self,v):

	first = v ; val = true
	while v:
		s = v.t.bodyString
		bits, dict = is_special_bits(s)
		no_color = ( bits &amp; nocolor_bits ) != 0
		color = ( bits &amp; color_bits ) != 0
		# trace(`bits` + ", " + `v`)
		# A color anywhere in the target enables coloring.
		if color and v == first:
			val = true ; break
		# Otherwise, the specification must be unambiguous.
		elif no_color and not color:
			val = false ; break
		elif color and not no_color:
			val = true ; break
		else:
			v = v.parent()
	trace("-useSyntaxColoring",`val`)
	return val</t>
<t tx="T1332">@ These methods are like the corresponding functions in leoUtils.py except they issue no error messages.
</t>
<t tx="T1333">def skip_id(self,s,i):

	n = len(s)
	while i &lt; n:
		ch = s[i]
		if ch in string.letters or ch in string.digits or ch == '_':
			i += 1
		else: break
	return i
</t>
<t tx="T1334">def skip_python_string(self,s,i):

	self.delim = delim = s[i:i+3]
	if delim == "'''" or delim == '"""':
		k = string.find(s,delim,i+3)
		if k == -1:
			return len(s), string3State
		else:
			return k+3, normalState
	else:
		return self.skip_string(s,i), normalState</t>
<t tx="T1335">def skip_string(self,s,i):

	# Remember delim for colorizeAnyLanguage.
	self.delim = delim = s[i] ; i += 1
	assert(delim == '"' or delim == '\'')
	n = len(s)
	while i &lt; n and s[i] != delim:
		if s[i] == '\\' : i += 2
		else: i += 1

	if i &gt;= n:
		return n
	elif s[i] == delim:
		i += 1
	return i</t>
<t tx="T1336">@language python

@ This class implements the most basic commands.  Subcommanders contain an ivar that points to an instance of this class.
@c

from leoGlobals import *
from leoUtils import *

# Import the subcommanders.
import leoAtFile,leoFileCommands,leoImport,leoNodes,leoTangle,leoUndo

class Commands:
	@others</t>
<t tx="T1337">def __del__ (self):

	# Can't trace while destroying.
	# print "c.__del__"
	pass</t>
<t tx="T1338">def __repr__ (self):

	return "Commander: " + self.frame.title
</t>
<t tx="T1339">@ This should be called whenever we need to use preference:
i.e., before reading, writing, tangling, untangling.

7/2/02: We no longer need this now that the Prefs dialog is modal.
@c

def setIvarsFromPrefs (self):

	pass</t>
<t tx="T1340"># This should be called whenever we need to use find values:
# i.e., before reading or writing

def setIvarsFromFind (self):

	c = self ; find = app().findFrame
	if find:
		find.set_ivars(c)
</t>
<t tx="T1341">def beginUpdate(self):

	self.tree.beginUpdate()
	
BeginUpdate = beginUpdate # Compatibility with old scripts</t>
<t tx="T1342">def bringToFront(self):

	self.frame.top.deiconify()

BringToFront = bringToFront # Compatibility with old scripts</t>
<t tx="T1343">def endUpdate(self, flag=true):
	
	self.tree.endUpdate(flag)
	
EndUpdate = endUpdate # Compatibility with old scripts</t>
<t tx="T1344">def recolor(self):

	tree = self.tree
	tree.recolor(tree.currentVnode)</t>
<t tx="T1345">def redraw(self):

	self.tree.redraw()
	
# Compatibility with old scripts
Redraw = redraw 
repaint = redraw
Repaint = redraw</t>
<t tx="T1346">def contractAllHeadlines (self):

	c = self ; current = c.currentVnode()
	v = c.rootVnode()
	c.beginUpdate()
	while v:
		c.contractSubtree(v)
		v = v.next()
	if not current.isVisible():
		c.selectVnode(c.rootVnode())
	c.endUpdate()
	c.expansionLevel = 1 # Reset expansion level.</t>
<t tx="T1347"># Contracts all offspring of the current node.

def contractAllSubheads (self):

	c = self ;v = c.currentVnode()
	if not v: return

	child = v.firstChild()
	c.beginUpdate()
	while child:
		c.contractSubtree(child)
		child = child.next()
	c.endUpdate()
	c.selectVnode(v) # Needed?
	c.expansionLevel = 0</t>
<t tx="T1348">def contractParent (self):
	
	c = self ; v = c.currentVnode()
	parent = v.parent()
	if not parent: return
	
	c.beginUpdate()
	c.selectVnode(parent)
	parent.contract()
	c.endUpdate()</t>
<t tx="T1349"># Contracts the children of the current node.

def contractSubheads (self):

	c = self ; v = c.currentVnode()
	if not v: return

	child = v.firstChild()
	c.beginUpdate()
	while child:
		c.contractVnode(child)
		child = child.next()
	c.endUpdate()
	c.selectVnode(v) # Needed?
	c.expansionLevel = 0</t>
<t tx="T1350">def expandLevel1 (self):

	self.expandToLevel(1)</t>
<t tx="T1351">def expandLevel2 (self):

	self.expandToLevel(2)</t>
<t tx="T1352">def expandLevel3 (self):

	self.expandToLevel(3)</t>
<t tx="T1353">def expandLevel4 (self):

	self.expandToLevel(4)</t>
<t tx="T1354">def expandLevel5 (self):

	self.expandToLevel(5)</t>
<t tx="T1355">def expandLevel6 (self):

	self.expandToLevel(6)</t>
<t tx="T1356">def expandLevel7 (self):

	self.expandToLevel(7)</t>
<t tx="T1357">def expandLevel8 (self):

	self.expandToLevel(8)</t>
<t tx="T1358">def expandLevel9 (self):

	self.expandToLevel(9)</t>
<t tx="T1359">def expandNextLevel (self):

	c = self
	self.expandToLevel(c.expansionLevel + 1)</t>
<t tx="T1360">def expandAllHeadlines(self):

	c = self ; v = root = c.rootVnode()
	c.beginUpdate()
	while v:
		c.expandSubtree(v)
		v = v.next()
	c.selectVnode(root)
	c.endUpdate()
	c.expansionLevel = 0 # Reset expansion level.</t>
<t tx="T1361">def expandAllSubheads (self):

	c = self ; v = c.currentVnode()
	if not v: return

	child = v.firstChild()
	c.beginUpdate()
	c.expandSubtree(v)
	while child:
		c.expandSubtree(child)
		child = child.next()
	c.selectVnode(v)
	c.endUpdate()</t>
<t tx="T1362">def expandSubheads (self):

	c = self ; v = c.currentVnode()
	if not v: return

	child = v.firstChild()
	c.beginUpdate()
	c.expandVnode(v)
	while child:
		c.expandVnode(child)
		child = child.next()
	c.selectVnode(v)
	c.endUpdate()</t>
<t tx="T1363">def contractSubtree (self,v):

	last = v.lastNode()
	while v and v != last:
		v.contract()
		v = v.threadNext()</t>
<t tx="T1364">def contractVnode (self,v):

	v.contract()
	self.tree.redraw()</t>
<t tx="T1365">def expandSubtree (self,v):

	c = self
	last = v.lastNode()
	while v and v != last:
		v.expand()
		v = v.threadNext()
	c.tree.redraw()</t>
<t tx="T1366">def expandToLevel (self,level):

	c = self
	c.beginUpdate()
	# First contract everything.
	c.contractAllHeadlines()
	# Start the recursion.
	v = c.rootVnode()
	while v:
		c.expandTreeToLevelFromLevel(v,level,1)
		v = v.next()
	c.expansionLevel = level
	c.endUpdate()</t>
<t tx="T1367">def expandVnode (self,v):

	v.expand()</t>
<t tx="T1368">def expandTreeToLevelFromLevel (self,v,toLevel,fromLevel):

	if toLevel &lt;= fromLevel: return
	c = self
	while v:
		# Expand this node.
		c.expandVnode(v)
		# Recursively expand lower levels.
		c.expandTreeToLevelFromLevel(v.firstChild(),toLevel,fromLevel + 1)
		v = v.next()</t>
<t tx="T1369"># Compatibility with scripts

def currentVnode (self):

	return self.tree.currentVnode
</t>
<t tx="T1370">def clearAllMarked (self):

	c = self ; v = c.rootVnode()
	while v:
		v.clearMarked()
		v = v.threadNext()</t>
<t tx="T1371">def clearAllVisited (self):

	c = self ; v = c.rootVnode()
	
	c.beginUpdate()
	while v:
		v.clearVisited()
		if v.t:
			v.t.clearVisited()
		v = v.threadNext()
	c.endUpdate(false) # never redraw the tree.</t>
<t tx="T1372"># Compatibility with scripts

def fileName (self):

	return self.frame.mFileName
</t>
<t tx="T1373">def isChanged (self):

	return self.changed</t>
<t tx="T1374"># Compatibility with scripts

def rootVnode (self):

	return self.tree.rootVnode
</t>
<t tx="T1375">def setChanged (self,changedFlag):

	c = self
	if not c.frame: return
	# Clear all dirty bits _before_ setting the caption.
	# 9/15/01 Clear all dirty bits except orphaned @file nodes
	if not changedFlag:
		v = c.rootVnode()
		while v:
			if v.isDirty() and not v.isAtFileNode():
				v.clearDirtyJoined()
			v = v.threadNext()
	# Update all derived changed markers.
	c.changed = changedFlag
	s = c.frame.top.title()
	if len(s) &gt; 2 and not c.loading: # don't update while loading.
		if changedFlag:
			# print_stack()
			if s [0] != '*': c.frame.top.title("* " + s)
		else:
			if s[0:2]=="* ": c.frame.top.title(s[2:])</t>
<t tx="T1376">def clone (self):

	c = self ; v = c.currentVnode()
	if not v: return
	c.beginUpdate()
	clone = v.clone(v)
	if clone:
		clone.setDirty() # essential in Leo2
		c.setChanged(true)
		if c.validateOutline():
			c.selectVnode(clone)
			c.undoer.setUndoParams("Clone",clone)
	c.endUpdate() # updates all icons</t>
<t tx="T1377">@ This function initializes all clone bits in the entire outline's tree.
@c

def initAllCloneBits (self):

	c=self
	c.clearAllVisited()
	v = self.tree.rootVnode
	c.beginUpdate()
	while v:
		if v.isVisited():
			v = v.threadNext()
			continue
		mark = v.shouldBeClone()
		# Mark all nodes joined to v.
		v2 = v.getJoinList()
		while v2 and v2 != v:
			v2.setVisited()
			# Important speedup: only change the bit if it needs changing.
			if not mark and v2.isCloned():
				v2.clearClonedBit()
			elif mark and not v2.isCloned():
				v2.setClonedBit()
			v2 = v2.getJoinList()
		# Mark v.
		v.setVisited()
		if not mark and v.isCloned():
			v.clearClonedBit()
		elif mark and not v.isCloned():
			v.setClonedBit()
		v = v.threadNext()
	c.endUpdate()</t>
<t tx="T1378"># Initializes all clone bits in the all nodes joined to v.

def initJoinedCloneBits (self,v):

	c = self ; v1 = v

	c.beginUpdate()
	if 1: # update range...
		&lt;&lt; init clone bit for v &gt;&gt;
		v = v.getJoinList()
		while v and v != v1:
			&lt;&lt; init clone bit for v &gt;&gt;
			v = v.getJoinList()
	c.endUpdate()</t>
<t tx="T1379">mark = v.shouldBeClone()
if not mark and v.isCloned():
	v.clearClonedBit()
elif mark and not v.isCloned():
	v.setClonedBit()</t>
<t tx="T1380"># Makes sure all nodes are valid.

def validateOutline (self):

	c = self ; root = c.rootVnode()
	if root:
		return root.validateOutlineWithParent(None)
	else:
		return true</t>
<t tx="T1381">def goToNextDirtyHeadline (self):

	c = self ; current = c.currentVnode()
	if not current: return

	v = current.threadNext()
	while v and not v.isDirty():
		v = v.threadNext()
	if not v:
		v = c.rootVnode()
		while v and not v.isDirty():
			v = v.threadNext()
	if v:
		c.selectVnode(v)</t>
<t tx="T1382">def goToNextMarkedHeadline(self):

	c = self ; current = c.currentVnode()
	if not current: return

	v = current.threadNext()
	while v and not v.isMarked():
		v = v.threadNext()
	if v:
		c.beginUpdate()
		c.endEditing()
		c.selectVnode(v)
		c.endUpdate()</t>
<t tx="T1383">def markChangedHeadlines (self):

	c = self ; v = c.rootVnode()
	c.beginUpdate()
	while v:
		if v.isDirty()and not v.isMarked():
			v.setMarked()
			c.setChanged(true)
		v = v.threadNext()
	c.endUpdate()</t>
<t tx="T1384">def markChangedRoots (self):

	c = self ; v = c.rootVnode()
	c.beginUpdate()
	while v:
		if v.isDirty()and not v.isMarked():
			s = v.bodyString()
			flag, i = is_special(s,0,"@root")
			if flag:
				v.setMarked()
				c.setChanged(true)
		v = v.threadNext()
	c.endUpdate()</t>
<t tx="T1385">def markAllAtFileNodesDirty (self):

	c = self ; v = c.rootVnode()
	c.beginUpdate()
	while v:
		if v.isAtFileNode()and not v.isDirty():
			v.setDirty()
			v = v.nodeAfterTree()
		else: v = v.threadNext()
	c.endUpdate()</t>
<t tx="T1386">def markAtFileNodesDirty (self):

	c = self
	v = c.currentVnode()
	if not v: return
	after = v.nodeAfterTree()
	c.beginUpdate()
	while v and v != after:
		if v.isAtFileNode() and not v.isDirty():
			v.setDirty()
			v = v.nodeAfterTree()
		else: v = v.threadNext()
	c.endUpdate()</t>
<t tx="T1387">def markHeadline (self):

	c = self ; v = c.currentVnode()
	if not v: return

	c.beginUpdate()
	if v.isMarked():
		v.clearMarked()
	else:
		v.setMarked()
		v.setDirty()
		c.setChanged(true)
	c.endUpdate()</t>
<t tx="T1388">def markSubheads(self):

	c = self ; v = c.currentVnode()
	if not v: return

	child = v.firstChild()
	c.beginUpdate()
	while child:
		if not child.isMarked():
			child.setMarked()
			child.setDirty()
			c.setChanged(true)
		child = child.next()
	c.endUpdate()</t>
<t tx="T1389">def unmarkAll(self):

	c = self ; v = c.rootVnode()
	c.beginUpdate()
	while v:
		if v.isMarked():
			v.clearMarked()
			v.setDirty()
			c.setChanged(true)
		v = v.threadNext()
	c.endUpdate()</t>
<t tx="T1390"># Ends the editing in the outline.

def endEditing(self):

	self.tree.endEditLabel()
</t>
<t tx="T1391"># This is called inside commands to select a new vnode.

def selectVnode(self,v):

	# All updating and "synching" of nodes are now done in the event handlers!
	c = self
	c.tree.endEditLabel()
	c.tree.select(v)
	c.body.mark_set("insert","1.0")
	# c.body.see("1.0")
	c.body.focus_force()
	self.editing = false</t>
<t tx="T1392"># Selects the given node and enables editing of the headline if editFlag is true.

def selectVnodeWithEditing(self,v,editFlag):

	c = self
	if editFlag:
		c.editVnode(v)
	else:
		c.selectVnode(v)
</t>
<t tx="T1393">@ These routines provide a convenient interface to the syntax colorer.
</t>
<t tx="T1394">def updateSyntaxColorer(self,v):

	self.tree.colorizer.updateSyntaxColorer(v)
</t>
<t tx="T1395">@language python

from leoGlobals import *
from leoUtils import *
import os, sys, traceback, ConfigParser

class config:
	@others</t>
<t tx="T1396"># We don't read or write keys whose value is "ignore"

def getIntFindPref (self,name):
	val = self.getFindPref(name)
	if val:
		try: val = int(val)
		except: val = None
	return val

def getFindPref (self,name):

	if name in self.findDict:
		val = self.findDict[name]
		if val == "ignore":
			val = None
		# print "get",`name`,`val`
		return val
	else:
		return None

def setFindPref (self,name,val):

	# print "set",`name`, `val`
	if name in self.findDict:
		old_val = self.findDict[name]
		if old_val != "ignore":
			self.findDict [name] = val
	else:
		self.findDict [name] = val</t>
<t tx="T1397">def getFont (self, fontDict):
	
	pass
	
def setFont (self):
	
	pass</t>
<t tx="T1398"># We don't read or write keys whose value is "ignore"

def getIntPref (self,name):
	val = self.getPref(name)
	if val:
		try: val = int(val)
		except: val = None
	return val

def getPref (self,name):

	if name in self.prefsDict:
		val = self.prefsDict[name]
		if val == "ignore":
			val = None
		return val
	else:
		return None

def setPref (self,name,val):

	# print `name`, `val`
	if name in self.prefsDict:
		old_val = self.prefsDict[name]
		if old_val != "ignore":
			self.prefsDict [name] = val
	else:
		self.prefsDict [name] = val</t>
<t tx="T1399">def getSyntaxColors (self):
	
	pass
	
def setSyntaxColors (self, colorsDict):
	
	pass</t>
<t tx="T1400">def open (self):
	
	config = ConfigParser.ConfigParser()
	try:
		cf = open(self.configFileName)
		config.readfp(cf)
		&lt;&lt; get config options &gt;&gt;
		&lt;&lt; get recent files &gt;&gt;
		&lt;&lt; get prefs &gt;&gt;
		&lt;&lt; get find prefs &gt;&gt;
		&lt;&lt; get font prefs &gt;&gt;
		&lt;&lt; get syntax coloring prefs &gt;&gt;
		# print `self.recentFiles`
		# print `self.prefsDict`
		cf.close()
	except:
		es("Can not open " + self.configFileName)
		pass</t>
<t tx="T1401">try:
	self.read_only = config.getboolean(self.configSection, "read_only")
except:
	self.read_only = false # not an error.</t>
<t tx="T1402">section = self.recentFilesSection

if 0: # elegant, but may be a security hole.
	self.recentFiles = eval(config.get(section, "recentFiles"))
else: # easier to read in the config file.
	try:
		for i in xrange(10):
			self.recentFiles.append(config.get(section, "file" + `i`))
	except: pass</t>
<t tx="T1403"># Names of prefsSection prefs
boolPrefsNames = ["output_doc_chunks",
		"run_tangle_done.py","run_untangle_done.py",
		"tangle_outputs_header" ]
		
for name in ["page_width","tab_width"]:
	try:
		val = config.getint(self.prefsSection, name)
		self.prefsDict[name] = val
	except: pass # not an error.

for name in ["default_tangle_directory", "default_target_language"]:
	try:
		val = config.get(self.prefsSection, name)
		self.prefsDict[name] = val
	except: pass # not an error.
	
for name in boolPrefsNames:
	try:
		val = config.getboolean(self.prefsSection, name)
		self.prefsDict[name] = val
	except: pass # not an error.</t>
<t tx="T1404"># Names of find/change prefs
boolFindNames = [
		"batch", "ignore_case",
		"mark_changes", "mark_finds",
		"pattern_match", "reverse",
		"search_body", "search_headline",
		"suboutline_only",
		"whole_word", "wrap" ]

for name in ["change_string", "find_string" ]:
	try:
		val = config.get(self.findSection, name)
		self.findDict[name] = val
	except: pass # not an error.
	
for name in boolFindNames:
	try:
		val = config.getboolean(self.findSection, name)
		self.findDict[name] = val
	except: pass # not an error.</t>
<t tx="T1405"># Not yet.</t>
<t tx="T1406"># Not yet.</t>
<t tx="T1407"># Sets ivars of c that can be overridden by leoConfig.txt

def setCommandsFindIvars (self,c):

	# print "setCommandsFindIvars"
	config = self
	&lt;&lt; set find ivars &gt;&gt;
	app().findFrame.init(c)</t>
<t tx="T1408">val = config.getIntFindPref("batch")
if val: c.batch_flag = val

val = config.getIntFindPref("wrap")
if val: c.wrap_flag = val

val = config.getIntFindPref("whole_word")
if val: c.whole_word_flag = val

val = config.getIntFindPref("ignore_case")
if val: c.ignore_case_flag = val

val = config.getIntFindPref("pattern_match")
if val: c.pattern_match_flag = val

val = config.getIntFindPref("search_headline")
if val: c.search_headline_flag = val

val = config.getIntFindPref("search_body")
if val: c.search_body_flag = val

val = config.getIntFindPref("suboutline_only")
if val: c.suboutline_only_flag = val

val = config.getIntFindPref("mark_changes")
if val: c.mark_changes_flag = val

val = config.getIntFindPref("mark_finds")
if val: c.mark_finds_flag = val

val = config.getIntFindPref("reverse")
if val: c.reverse_flag = val

val = config.getFindPref("change_string")
if val: c.change_text = val

val = config.getFindPref("find_string")
if val: c.find_text = val</t>
<t tx="T1409"># Sets ivars of c that can be overridden by leoConfig.txt

def setCommandsIvars (self,c):

	config = self
	&lt;&lt; set prefs ivars &gt;&gt;</t>
<t tx="T1410">
val = config.getIntPref("tab_width")
if val: c.tab_width = val
c.frame.setTabWidth(c.tab_width)

val = config.getIntPref("page_width")
if val: c.page_width = val

val = config.getIntPref("run_tangle_done.py")
if val: c.tangle_batch_flag = val

val = config.getIntPref("run_untangle_done.py")
if val: c.untangle_batch_flag = val

val = config.getIntPref("output_doc_chunks")
if val: c.output_doc_flag = val

val = config.getIntPref("tangle_outputs_header")
if val: c.use_header_flag = val

val = config.getPref("default_tangle_directory")
if val: c.tangle_directory = val

val = config.getPref("find_string")
if val: c.tangle_directory = val

c.target_language = python_language # default
val = config.getPref("default_target_language")
if val:
	try:
		val = string.lower(val)
		for language,name in self.languageNameDict.items():
			# print `language`, `name`
			if string.lower(name) == val:
				c.target_language = language
	except: pass</t>
<t tx="T1411"># Sets config ivars from c.

def setConfigFindIvars (self,c):
	
	# print "setConfigFindIvars"
	self.setFindPref("batch",`c.batch_flag`)
	self.setFindPref("ignore_case",`c.ignore_case_flag`)
	self.setFindPref("mark_changes",`c.mark_changes_flag`)
	self.setFindPref("mark_finds",`c.mark_finds_flag`)
	self.setFindPref("pattern_match",`c.pattern_match_flag`)
	self.setFindPref("reverse",`c.reverse_flag`)
	self.setFindPref("search_body",`c.search_body_flag`)
	self.setFindPref("search_headline",`c.search_headline_flag`)
	self.setFindPref("suboutline_only",`c.suboutline_only_flag`)
	self.setFindPref("wrap",`c.wrap_flag`)
	self.setFindPref("whole_word",`c.whole_word_flag`)
	
	self.setFindPref("change_string",c.change_text)
	self.setFindPref("find_string",c.find_text)
</t>
<t tx="T1412"># Sets config ivars from c.

def setConfigIvars (self,c):
	
	if c.target_language and c.target_language in self.languageNameDict.keys():
		language = self.languageNameDict[c.target_language]
	else:
		language = "Plain"

	self.setPref("default_tangle_directory",c.tangle_directory)
	self.setPref("default_target_language",language)
	self.setPref("output_doc_chunks",`c.output_doc_flag`)
	self.setPref("page_width",`c.page_width`)
	self.setPref("run_tangle_done.py",`c.tangle_batch_flag`)
	self.setPref("run_untangle_done.py",`c.untangle_batch_flag`)
	self.setPref("tab_width",`c.tab_width`)
	self.setPref("tangle_outputs_header",`c.use_header_flag`)
	
	self.setFindPref("batch",`c.batch_flag`)
	self.setFindPref("ignore_case",`c.ignore_case_flag`)
	self.setFindPref("mark_changes",`c.mark_changes_flag`)
	self.setFindPref("mark_finds",`c.mark_finds_flag`)
	self.setFindPref("pattern_match",`c.pattern_match_flag`)
	self.setFindPref("reverse",`c.reverse_flag`)
	self.setFindPref("search_body",`c.search_body_flag`)
	self.setFindPref("search_headline",`c.search_headline_flag`)
	self.setFindPref("suboutline_only",`c.suboutline_only_flag`)
	self.setFindPref("wrap",`c.wrap_flag`)
	self.setFindPref("whole_word",`c.whole_word_flag`)
	
	self.setFindPref("change_string",c.change_text)
	self.setFindPref("find_string",c.find_text)
</t>
<t tx="T1413"># Rewrites the entire config file from ivars.
# This is called when a .leo file is written and when the preferences panel changes.

def update (self):
	
	# Do nothing if the file does not exist, or if read_only.
	if self.read_only:
		# print "Read only config file"
		return
	if not os.path.exists(self.configFileName):
		# print "No config file"
		return
	
	config = ConfigParser.ConfigParser()
	try:
		cf = open(self.configFileName,"w")
		config.readfp(cf)
		&lt;&lt; write config section &gt;&gt;
		&lt;&lt; write recent files section &gt;&gt;
		&lt;&lt; write prefs section &gt;&gt;
		&lt;&lt; write find/change section &gt;&gt;
		&lt;&lt; write font section &gt;&gt;
		&lt;&lt; write syntax coloring section &gt;&gt;
		config.write(cf)
		cf.close()
	except:
		# traceback.print_exc() 
		pass</t>
<t tx="T1414">section = self.configSection

if config.has_section(section):
	config.remove_section(section)
config.add_section(section)

config.set(section,"read_only",self.read_only)</t>
<t tx="T1415">section = self.recentFilesSection
files = self.recentFiles

if config.has_section(section):
	config.remove_section(section)
config.add_section(section)

if 0: # elegant, but may be a security hole.
	config.set(section,"recentFiles",files)
else: # easier to read in the config file.
	for i in xrange(len(files)):
		config.set(section, "file"+`i`, files[i])</t>
<t tx="T1416">self.update_section(config,self.prefsSection,self.prefsDict)</t>
<t tx="T1417">self.update_section(config,self.findSection,self.findDict)</t>
<t tx="T1418">self.update_section(config,self.fontSection,self.fontDict)</t>
<t tx="T1419">self.update_section(config,self.syntaxColoringSection,self.syntaxColoringDict)</t>
<t tx="T1420">def update_section (self,config,section,dict):
	
	if config.has_section(section):
		config.remove_section(section)
	config.add_section(section)
	
	keys = dict.keys()
	keys.sort() # Not effective.
	for name in keys:
		val = dict [name]
		config.set(section,name,val)</t>
<t tx="T1421">@language python

from leoGlobals import *
from leoUtils import *
import string, Tkinter

class leoDialog:
	@others</t>
<t tx="T1422">def __init__(self):

	self.answer = ""
	self.top = None</t>
<t tx="T1423">def askOkCancel(self, title, message):

	Tk = Tkinter ; root = app().root
	self.answer="ok"
	self.top = top = Tk.Toplevel(root)
	top.title(title)
	top.resizable(0,0) # neither height or width is resizable.
	frame = Tk.Frame(top)
	self.top.bind("&lt;Key&gt;", self.OnOkCancelKey)
	frame.pack()
	label = Tk.Label(frame, text=message)
	label.pack(pady=10)
	center = Tk.Frame(frame)
	center.pack()
	ok = Tk.Button(center,width=6,text="OK",bd=4, # default button
		underline=0,command=self.okButton)
	cancel = Tk.Button(center,width=6,text="Cancel",
		underline=0,command=self.cancelButton)
	ok.pack(side="left",padx=5,pady=10)
	cancel.pack(side="left",padx=5,pady=10)
	self.center() # Do this after packing.
	top.grab_set() # Make the dialog a modal dialog.
	top.focus_force() # Get all keystrokes.
	root.wait_window(top)
	return self.answer</t>
<t tx="T1424">def askYesNo(self, title, message):

	Tk = Tkinter ; root = app().root
	self.answer="No"
	self.top = top = Tk.Toplevel(root)
	top.title(title)
	top.resizable(0,0) # neither height or width is resizable.
	frame = Tk.Frame(top)
	self.top.bind("&lt;Key&gt;", self.OnYesNoKey)
	frame.pack()
	label = Tk.Label(frame, text=message)
	label.pack(pady=10)
	center = Tk.Frame(frame)
	center.pack()
	yes = Tk.Button(center,width=6,text="Yes",bd=4, # default button
		underline=0,command=self.yesButton)
	no = Tk.Button(center,width=6,text="No",
		underline=0,command=self.noButton)
	yes.pack(side="left",padx=5,pady=10)
	no.pack(side="left",padx=5,pady=10)
	self.center() # Do this after packing.
	top.grab_set() # Make the dialog a modal dialog.
	top.focus_force() # Get all keystrokes.
	root.wait_window(top)
	return self.answer</t>
<t tx="T1425">def askYesNoCancel(self, title, message):

	Tk = Tkinter ; root = app().root
	self.answer="cancel"
	self.top = top = Tk.Toplevel(root)
	top.title(title)
	top.resizable(0,0) # neither height or width is resizable.
	frame = Tk.Frame(top)
	self.top.bind("&lt;Key&gt;", self.OnYesNoCancelKey)
	frame.pack()
	label = Tk.Label(frame, text=message)
	label.pack(pady=10)
	center = Tk.Frame(frame)
	center.pack()
	yes = Tk.Button(center,width=6,text="Yes",bd=4, # default button
		underline=0,command=self.yesButton)
	no = Tk.Button(center,width=6,text="No",
		underline=0,command=self.noButton)
	cancel = Tk.Button(center,width=6,text="Cancel",
		underline=0,command=self.cancelButton)
	yes.pack(side="left",padx=5,pady=10)
	no.pack(side="left",padx=5,pady=10)
	cancel.pack(side="left",padx=5,pady=10)
	self.center() # Do this after packing.
	top.grab_set() # Make the dialog a modal dialog.
	top.focus_force() # Get all keystrokes.
	root.wait_window(top)
	return self.answer</t>
<t tx="T1426"># Center the dialog on the screen.

def center(self):

	top = self.top
	top.update_idletasks() # Required to get proper info.

	# Get the information about top and the screen.
	sw = top.winfo_screenwidth()
	sh = top.winfo_screenheight()
	g = top.geometry() # g = "WidthxHeight+XOffset+YOffset"
	dim,x,y = string.split(g,'+')
	w,h = string.split(dim,'x')
	w,h,x,y = int(w),int(h),int(x),int(y)
	
	# Set the new window coordinates, leaving w and h unchanged.
	x = (sw - w)/2
	y = (sh - h)/2
	top.geometry("%dx%d%+d%+d" % (w,h,x,y))</t>
<t tx="T1427"># Command handlers.

def cancelButton(self):
	self.answer="cancel"
	self.top.destroy() # terminates wait_window
	
def noButton(self):
	self.answer="no"
	self.top.destroy() # terminates wait_window
	
def okButton(self):
	self.answer="ok"
	self.top.destroy() # terminates wait_window

def yesButton(self):
	self.answer="yes"
	self.top.destroy() # terminates wait_window</t>
<t tx="T1428">def OnOkCancelKey(self,event):
	ch=string.lower(event.char)
	if ch=='\n' or ch=='\r': self.okButton() # The default
	elif ch=='c': self.cancelButton()
	elif ch=='o': self.okButton()
	return "break"

def OnYesNoKey(self,event):
	ch=string.lower(event.char)
	if ch=='\n' or ch=='\r': self.yesButton() # The default
	elif ch=='n': self.noButton()
	elif ch=='y': self.yesButton()
	return "break"
	
def OnYesNoCancelKey(self,event):
	ch=string.lower(event.char)
	if ch=='\n' or ch=='\r': self.yesButton() # The default
	elif ch=='c': self.cancelButton()
	elif ch=='n': self.noButton()
	elif ch=='y': self.yesButton()
	return "break"</t>
<t tx="T1429">@language python

from leoGlobals import *
from leoUtils import *

import leoNodes
import os,os.path,time,traceback

class BadLeoFile:
	def __init__(self, message):
		self.message = message
	def __str__(self):
		return "Bad Leo File:" + self.message

class fileCommands:
	@others</t>
<t tx="T1430">def __init__(self,commands):

	# trace("__init__", "fileCommands.__init__")
	self.commands = commands
	self.frame = commands.frame
	self.initIvars()

def initIvars(self):

	# General
	self.maxTnodeIndex = 0
	self.numberOfTnodes = 0
	self.topVnode = None
	self.mFileName = ""
	self.fileDate = -1
	# For reading
	self.fileFormatNumber = 0
	self.ratio = 0.5
	self.tnodesDict = {}
	self.fileBuffer = None ; self.fileIndex = 0
	self.dummy_v = None
	self.dummy_t = None
	# For writing
	self.outputFile = None # File for normal writing
	self.outputString = None # String for pasting
	self.openDirectory = None
	self.usingClipboard = false</t>
<t tx="T1431">def createVnode(self,parent,back,tref,headline):

	# trace(`headline` + ", parent:" + `parent` + ", back:" + `back`)
	v = None ; c = self.commands
	# Shared tnodes are placed in the file even if empty.
	if tref == -1:
		t = leoNodes.tnode()
	else:
		t = self.getT(tref)
		if not t:
			t = self.newTnode(tref)
	if back: # create v after back.
		v = back.insertAfter(t)
	elif parent: # create v as the parent's first child.
		v = parent.insertAsNthChild(0,t)
	else: # create a root vnode
		v = leoNodes.vnode(c, t)
		v.moveToRoot()
		c.tree.rootVnode = v
	v.initHeadString(headline)
	return v</t>
<t tx="T1432"># This method finishes pasting the outline from the clipboard.
def finishPaste(self):

	c=self.commands
	current = c.currentVnode()
	after = current.nodeAfterTree()
	c.beginUpdate()
	if 1: # inside update...
		if 0: # Warning: this will only join pasted clones, and is very dangerous.
			&lt;&lt; Create join lists of all pasted vnodes &gt;&gt;
		&lt;&lt; Recompute clone bits for pasted vnodes &gt;&gt;
		self.compactFileIndices()
		c.selectVnode(current)
	c.endUpdate()
	return current</t>
<t tx="T1433"># Pass 1: create all join lists using tnode::joinHead
v = c.currentVnode()
while v and v != after:
	# Put v at the head of t's list of joined vnodes.
	v.setJoinList(v.t.joinHead)
	v.t.setJoinHead(v)
	v = v.threadNext()
	
# Pass 2: circularize each join list.
v = c.currentVnode()
while v and v != after:
	head = v.t.joinHead
	if not head:
		v = v.threadNext() ;continue
	# Make sure we don't handle this list again.
	v.t.setJoinHead(None)
	# Clear the join list if it has only one member.
	if head == v and not v.getJoinList():
		v.setJoinList(None)
		v = v.threadNext() ; continue
	# Point last at the last vnode of the list.
	last = head
	while last and last.getJoinList():
		last = last.getJoinList()
	assert(last)
	# Link last to head.
	last.setJoinList(head)
	v = v.threadNext()</t>
<t tx="T1434">@ This must be done after the join lists have been created.  The saved clone bit is unreliable for pasted nodes.
@c

v = c.currentVnode()
while v and v != after:
	v.initClonedBit(v.shouldBeClone())
	v.clearDirty()
	v = v.threadNext()</t>
<t tx="T1435">def getBool (self):
	self.skipWs() # guarantees at least one more character.
	ch = self.fileBuffer[self.fileIndex]
	if ch == '0':
		self.fileIndex += 1 ; return false
	elif ch == '1':
		self.fileIndex += 1 ; return true
	else:
		raise BadLeoFile("expecting bool constant")
		
def getDqBool (self):
	self.getDquote() ; val = self.getBool() ; self.getDquote()
	return val

def getDouble (self):
	self.skipWs()
	i = self.fileIndex ; buf = self.fileBuffer
	floatChars = string.digits + 'e' + 'E' + '.' + '+' + '-'
	n = len(buf)
	while i &lt; n and buf[i] in floatChars:
		i += 1
	if i == self.fileIndex:
		raise BadLeoFile("expecting float constant")
	val = float(buf[self.fileIndex:i])
	self.fileIndex = i
	return val

def getDquote (self):
	self.getTag('"')
	
def getIndex (self):
	val = self.getLong()
	if val &lt; 0: raise BadLeoFile("expecting index")
	return val
	
def getLong (self):
	self.skipWs() # guarantees at least one more character.
	i = self.fileIndex
	if self.fileBuffer[i] == '-':
		i += 1
	n = len(self.fileBuffer)
	while i &lt; n and self.fileBuffer[i] in string.digits:
		i += 1
	if i == self.fileIndex:
		raise BadLeoFile("expecting int constant")
	val = int(self.fileBuffer[self.fileIndex:i])
	self.fileIndex = i
	return val

def getTag (self,tag):
	if not self.matchTag(tag):
		print "getTag(", tag, ") failed:"
		raise BadLeoFile("expecting" + tag)
		
def matchChar (self,ch):
	self.skipWs() # guarantees at least one more character.
	if ch == self.fileBuffer[self.fileIndex]:
		self.fileIndex += 1 ; return true
	else: return false

# Warning: does not check for end-of-word,
# so caller must match prefixes first.
def matchTag (self,tag):
	self.skipWsAndNl() # guarantees at least one more character.
	i = self.fileIndex
	# if string.find(self.fileBuffer,tag,i,i+len(tag)) == i:
	if tag == self.fileBuffer[i:i+len(tag)]:
		self.fileIndex += len(tag)
		return true
	else:
		return false</t>
<t tx="T1436">def getClipboardHeader (self):

	self.getTag("&lt;leo_header")
	# New in version 1.7: fields may appear in any order.
	while 1:
		if self.matchTag("file_format="):
			self.getDquote() ; self.fileFormatNumber = self.getLong() ; self.getDquote()
		elif self.matchTag("tnodes="):
			self.getDquote() ; self.getLong() ; self.getDquote() # no longer used
		elif self.matchTag("max_tnode_index="):
			self.getDquote() ; self.getLong() ; self.getDquote() # no longer used
		else:
			self.getTag("/&gt;")
			break</t>
<t tx="T1437"># For compatibility with old file formats.

def getCloneWindows (self):

	if self.matchTag("&lt;clone_windows&gt;"):
		while self.matchTag("&lt;clone_window vtag=\"V"):
			self.getLong() ; self.getDquote() ; self.getTag("&gt;")
			self.getTag("&lt;global_window_position")
			self.getPosition()
			self.getTag("/&gt;")
			self.getTag("&lt;/clone_window&gt;")
		self.getTag("&lt;/clone_windows&gt;")</t>
<t tx="T1438">def getEscapedString (self):

	# The next '&lt;' begins the ending tag.
	i = self.fileIndex
	self.fileIndex = j = string.find(self.fileBuffer,'&lt;',i)
	if j == -1:
		raise BadLeoFile("unterminated escaped string")
	else:
		# Allocates memory
		return self.xmlUnescape(self.fileBuffer[i:j])</t>
<t tx="T1439">def getGlobals (self):

	self.getTag("&lt;globals")
	#
	self.getTag("body_outline_ratio=\"")
	self.ratio = self.getDouble() ; self.getDquote() ; self.getTag("&gt;")
	#
	self.getTag("&lt;global_window_position")
	top,left,height,width = self.getPosition() ; self.getTag("/&gt;")
	# trace("t,l,h,w:" + `top` + ":" + `left` + ":" + `height` + ":" + `width`)
	top = min(top,50) ; left = min(left,50)
	# Setting the heigth and width doesn't work properly.
	if 1:
		g = "+%d%+d" % (left, top)
	else:
		g = "%dx%d%+d%+d" % (width, height, left, top)
	self.frame.top.geometry(g)
	#
	self.getTag("&lt;global_log_window_position")
	self.getPosition() ; self.getTag("/&gt;") # no longer used.
	#
	self.getTag("&lt;/globals&gt;")</t>
<t tx="T1440">def getLeoFile (self,frame,atFileNodesFlag):

	c=self.commands
	self.mFileName = frame.mFileName
	self.tnodesDict = {} ; ok = true
	c.beginUpdate()
	try:
		c.tree.initing = true # inhibit endEditLabel from marking the file changed.
		self.getTag(prolog_string)
		self.getTag("&lt;leo_file&gt;")
		self.getLeoHeader()
		self.getGlobals()
		self.getPrefs()
		self.getFindPanelSettings()
		self.getVnodes()
		self.getTnodes()
		self.getCloneWindows()
		self.getTag("&lt;/leo_file&gt;")
		&lt;&lt; Create join lists of all vnodes &gt;&gt;
	except BadLeoFile, message: # All other exceptions are Leo bugs
		# traceback.print_exc()
		alert(self.mFileName + " is not a valid Leo file: " + `message`)
		ok = false
	# Leo2: read all @file nodes and reset orphan bits.
	if ok and atFileNodesFlag:
		at = c.atFileCommands
		at.readAll(c.rootVnode(), false) # partialFlag
	if not c.tree.currentVnode:
		c.tree.currentVnode = c.tree.rootVnode
	c.selectVnode(c.tree.currentVnode) # load body pane
	c.endUpdate() # redraw recomputes all icons.
	c.tree.initing = false # Enable changes in endEditLabel
	self.tnodesDict = {}
	return ok, self.ratio</t>
<t tx="T1441"># Pass 1: create all join lists using the joinHead field in each tnode
v = c.rootVnode()
while v:
	v.setJoinList(v.t.joinHead)
	v.t.setJoinHead(v)
	v = v.threadNext()

# Pass 2: Circularize each join list.
v = c.rootVnode()
while v:
	head = v.t.joinHead
	if not head:
		v = v.threadNext() ; continue
	# Make sure we don't handle this list again.
	v.t.setJoinHead(None)
	# Clear the join list if it has only one member.
	if head == v and not v.getJoinList():
		v.setJoinList(None)
		v = v.threadNext() ; continue
	# Point last at the last vnode of the list.
	last = head
	while last and last.getJoinList():
		assert(last != last.getJoinList())
		last = last.getJoinList()
	assert(last)
	# Link last to head.
	last.setJoinList(head)
	v = v.threadNext()</t>
<t tx="T1442">def getLeoHeader (self):

	# Set defaults.
	self.maxTnodeIndex = 0
	self.numberOfTnodes = 0
	self.getTag("&lt;leo_header")
	# New in version 1.7: attributes may appear in any order.
	while 1:
		if self.matchTag("file_format="):
			self.getDquote() ; self.fileFormatNumber = self.getLong() ; self.getDquote()
		elif self.matchTag("tnodes="):
			self.getDquote() ; self.numberOfTnodes = self.getLong() ; self.getDquote()
		elif self.matchTag("max_tnode_index="):
			self.getDquote() ; self.maxTnodeIndex = self.getLong() ; self.getDquote()
		elif self.matchTag("clone_windows="):
			self.getDquote() ; self.getLong() ; self.getDquote() # no longer used.
		else:
			self.getTag("/&gt;")
			break</t>
<t tx="T1443"># This method reads a Leo outline from string s in clipboard format.
def getLeoOutline (self,s):

	self.usingClipboard = true
	self.fileBuffer = s ; self.fileIndex = 0
	self.tnodesDict = {}
	try:
		self.getTag(prolog_string)
		self.getTag("&lt;leo_file&gt;")
		self.getClipboardHeader()
		self.getVnodes()
		self.getTnodes()
		self.getTag("&lt;/leo_file&gt;")
		v = self.finishPaste()
	except BadLeoFile:
		v = None
	# Clean up.
	self.fileBuffer = None ; self.fileIndex = 0
	self.tnodesDict = {}
	self.usingClipboard = false
	return v</t>
<t tx="T1444">def getPosition (self):

	top = left = height = width = 0
	# New in version 1.7: attributes may appear in any order.
	while 1:
		if self.matchTag("top=\""):
			top = self.getLong() ; self.getDquote()
		elif self.matchTag("left=\""):
			left = self.getLong() ; self.getDquote()
		elif self.matchTag("height=\""):
			height = self.getLong() ; self.getDquote()
		elif self.matchTag("width=\""):
			width = self.getLong() ; self.getDquote()
		else: break
	return top, left, height, width</t>
<t tx="T1445">def getSize (self):

	# New in version 1.7: attributes may appear in any order.
	height = 0 ; width = 0
	while 1:
		if self.matchTag("height=\""):
			height = self.getLong() ; self.getDquote()
		elif self.matchTag("width=\""):
			width = self.getLong() ; self.getDquote()
		else: break
	return height, width</t>
<t tx="T1446">def getT (self,index):

	if self.tnodesDict.has_key(index):
		return self.tnodesDict[index]
	else:
		return None</t>
<t tx="T1447">def getTnode (self):

	# we have already matched &lt;t.
	index = -1
	# New in version 1.7: attributes may appear in any order.
	while 1:
		if self.matchTag("tx=\"T"):
			index = self.getIndex() ; self.getDquote()
		elif self.matchTag("rtf=\"1\""): pass # ignored
		elif self.matchTag("rtf=\"0\""): pass # ignored
		else: break
	self.getTag("&gt;")
	t = self.getT(index)
	if t:
		s = self.getEscapedString()
		t.setTnodeText(s)
	else: # No vnode refers to this tnode.
		es("No tnode with index: " + `index` + ".  The text will be discarded")
		self.getEscapedString()
	self.getTag("&lt;/t&gt;")</t>
<t tx="T1448">def getTnodes (self):

	if self.matchTag("&lt;tnodes&gt;"):
		while self.matchTag("&lt;t"):
			self.getTnode()
		self.getTag("&lt;/tnodes&gt;")</t>
<t tx="T1449">def getVnode (self,parent,back):

	# trace("parent:" + `parent` + ", back:" + `back`)
	c=self.commands
	# Create a single dummy vnode to carry status bits.
	if not self.dummy_v:
		self.dummy_t = leoNodes.tnode(0,"")
		self.dummy_v = leoNodes.vnode(c, self.dummy_t)
		self.dummy_v.initHeadString("dummy")
	self.dummy_v.statusBits=0
	currentVnodeFlag = false # true if the 'V' attribute seen.
	topVnodeFlag = false # true if 'T' attribute seen.
	tref = -1 ; headline = ""
	# we have already matched &lt;v.
	while 1:
		if self.matchTag("t=\"T"):
			tref = self.getIndex() ; self.getDquote()
		elif self.matchTag("vtag=\"V"):
			self.getIndex() ; self.getDquote() # ignored
		elif self.matchTag("a=\""):
			&lt;&lt; Handle vnode attribute bits &gt;&gt;
		else: break
	self.getTag("&gt;")
	# Leo2: headlines are optional.
	if self.matchTag("&lt;vh&gt;"):
		headline = self.getEscapedString() ; self.getTag("&lt;/vh&gt;")
	# Link v into the outline using parent and back.
	v = self.createVnode(parent,back,tref,headline)
	v.statusBits = self.dummy_v.statusBits
	# Remember various info that may have been specified.
	if currentVnodeFlag:
		c.tree.currentVnode = v
	if topVnodeFlag: c.mTopVnode = v
	# Recursively create all nested nodes.
	parent = v ; back = None
	while self.matchTag("&lt;v"):
		back = self.getVnode(parent,back)
	# End this vnode.
	self.getTag("&lt;/v&gt;")
	return v</t>
<t tx="T1450"># The a=" has already been seen.
while 1:
	if   self.matchChar('C'): self.dummy_v.initClonedBit(true)
	elif self.matchChar('D'): pass # no longer used.
	elif self.matchChar('E'): self.dummy_v.initExpandedBit()
	elif self.matchChar('M'): self.dummy_v.initMarkedBit()
	elif self.matchChar('O'): self.dummy_v.setOrphan()
	elif self.matchChar('T'): topVnodeFlag = true
	elif self.matchChar('V'): currentVnodeFlag = true
	else: break
self.getDquote()</t>
<t tx="T1451">def getVnodes (self):

	c=self.commands
	if  self.usingClipboard:
		# Paste after the current vnode.
		back = c.currentVnode() ; parent = back.parent()
	else:
		back = None ; parent = None

	self.getTag("&lt;vnodes&gt;")
	while self.matchTag("&lt;v"):
		back = self.getVnode(parent,back)
	self.getTag("&lt;/vnodes&gt;")</t>
<t tx="T1452">def skipWs (self):

	while self.fileIndex &lt; len(self.fileBuffer):
		ch = self.fileBuffer[self.fileIndex]
		if ch == ' ' or ch == '\t':
			self.fileIndex += 1
		else: break

	# The caller is entitled to get the next character.
	if  self.fileIndex &gt;= len(self.fileBuffer):
		raise BadLeoFile("")</t>
<t tx="T1453">def skipWsAndNl (self):

	while self.fileIndex &lt; len(self.fileBuffer):
		ch = self.fileBuffer[self.fileIndex]
		if ch == ' ' or ch == '\t' or ch == '\r' or ch == '\n':
			self.fileIndex += 1
		else: break

	# The caller is entitled to get the next character.
	if  self.fileIndex &gt;= len(self.fileBuffer):
		raise BadLeoFile("")</t>
<t tx="T1454">def newTnode(self,index):

	if self.tnodesDict.has_key(index):
		es("bad tnode index: " + `index` + ". Using empty text.")
		return leoNodes.tnode()
	else:
		t = leoNodes.tnode()
		t.setFileIndex(index)
		self.tnodesDict[index] = t
		return t</t>
<t tx="T1455">def readAtFileNodes (self):

	c = self.commands
	c.atFileCommands.readAll(c.currentVnode(), true) # partialFlag</t>
<t tx="T1456">def xmlUnescape(self,s):

	if s:
		s = string.replace(s, '\r', '')
		s = string.replace(s, "&amp;lt;", '&lt;')
		s = string.replace(s, "&amp;gt;", '&gt;')
		s = string.replace(s, "&amp;amp;", '&amp;')
	return s</t>
<t tx="T1457">def assignFileIndices (self):

	c=self.commands ; v = c.rootVnode()
	while v:
		t = v.t
		# 8/28/99.  Write shared tnodes even if they are empty.
		if t.hasBody() or v.getJoinList():
			if t.fileIndex == 0:
				self.maxTnodeIndex += 1
				t.setFileIndex(self.maxTnodeIndex)
		else:
			t.setFileIndex(0)
		v = v.threadNext()</t>
<t tx="T1458">def compactFileIndices (self):

	c = self.commands ; v = c.rootVnode()
	self.maxTnodeIndex = 0
	while v: # Clear all indices.
		v.t.setFileIndex(0)
		v = v.threadNext()
	v = c.rootVnode()
	while v: # Set indices for all tnodes that will be written.
		t = v.t
		if t.hasBody() or v.getJoinList(): # 8/28/99. Write shared tnodes even if they are empty.
			if t.fileIndex == 0:
				self.maxTnodeIndex += 1
				t.setFileIndex(self.maxTnodeIndex)
		v = v.threadNext()</t>
<t tx="T1459">@ This method sets policy for when we should compact a file before doing a Save Command.
@c

def shouldCompactOnSave (self):

	c=self.commands
	# Count the number of tnodes used
	c.clearAllVisited()
	v = c.rootVnode() ; tnodesUsed = 0
	while v:
		t = v.t
		if t and not t.isVisited():
			tnodesUsed += 1
			t.setVisited()
		v = v.threadNext()
	tnodesUnused = self.maxTnodeIndex - tnodesUsed
	return tnodesUnused &gt; 100</t>
<t tx="T1460">def putClipboardHeader (self):

	tnodes = 0
	&lt;&lt; count the number of tnodes &gt;&gt;
	self.put('&lt;leo_header file_format="1" tnodes=')
	self.put_in_dquotes(`tnodes`)
	self.put(" max_tnode_index=")
	self.put_in_dquotes(`tnodes`)
	self.put("/&gt;") ; self.put_nl()</t>
<t tx="T1461">c=self.commands
c.clearAllVisited()

# Count the vnode and tnodes.
v = c.currentVnode()
after = v.nodeAfterTree()
while v and v != after:
	t = v.t
	if t and not t.isVisited() and (t.hasBody() or v.getJoinList()):
		t.setVisited()
		tnodes += 1
	v = v.threadNext()</t>
<t tx="T1462"># All output eventually comes here
def put (self,s):
	if s and len(s) &gt; 0:
		if self.outputFile: # Write to a file
			try: # 5/27/02: We can get Unicode strings here via cut/paste.
				try:
					self.outputFile.write(s)
				except UnicodeError:
					self.outputFile.write(`s`)
			except:
				es("error writing:" + `s`)
		elif self.outputString != None: # Write to a string
			self.outputString += s

def put_dquote (self):
	self.put('"')
		
def put_dquoted_bool (self,b):
	if b: self.put('"1"')
	else: self.put('"0"')
	
def put_find_flag (self,a,b):
	config = app().config
	if config.getFindPref(b) != None:
		config.setFindPref(b,`a`)
	else:
		self.put_flag(a,b)
		
def put_flag (self,a,b):
	if a:
		self.put(" ") ; self.put(b) ; self.put('="1"')
		
def put_in_dquotes (self,a):
	self.put('"')
	if a: self.put(a) # will always be true if we use backquotes.
	else: self.put('0')
	self.put('"')

def put_nl (self):
	self.put("\n")
	
def put_tab (self):
	self.put("\t")
	
def put_tabs (self,n):
	while n &gt; 0:
		self.put("\t")
		n -= 1</t>
<t tx="T1463">@ Surprisingly, the call to xmlEscape here is _much_ faster than calling put for each characters of s.
@c

def putEscapedString (self,s):

	if s and len(s) &gt; 0:
		self.put(self.xmlEscape(s))</t>
<t tx="T1464">def putGlobals (self):

	c=self.commands
	self.put("&lt;globals")
	&lt;&lt; put the body/outline ratio &gt;&gt;
	self.put("&gt;") ; self.put_nl()
	&lt;&lt; put the position of this frame &gt;&gt;
	&lt;&lt; put the position of the log window &gt;&gt;
	self.put("&lt;/globals&gt;") ; self.put_nl()</t>
<t tx="T1465"># Puts an innumerate number of digits

self.put(" body_outline_ratio=") ; self.put_in_dquotes(`c.frame.ratio`)</t>
<t tx="T1466">width = self.frame.top.winfo_width()
height = self.frame.top.winfo_height()
left, top = 10, 10 ##

self.put_tab()
self.put("&lt;global_window_position")
self.put(" top=") ; self.put_in_dquotes(`top`)
self.put(" left=") ; self.put_in_dquotes(`left`)
self.put(" height=") ; self.put_in_dquotes(`height`)
self.put(" width=") ; self.put_in_dquotes(`width`)
self.put("/&gt;") ; self.put_nl()</t>
<t tx="T1467">top = left = height = width = 0 # no longer used
self.put_tab()
self.put("&lt;global_log_window_position")
self.put(" top=") ; self.put_in_dquotes(`top`)
self.put(" left=") ; self.put_in_dquotes(`left`)
self.put(" height=") ; self.put_in_dquotes(`height`)
self.put(" width=") ; self.put_in_dquotes(`width`)
self.put("/&gt;") ; self.put_nl()</t>
<t tx="T1468">def putHeader (self):

	tnodes = 0 ; clone_windows = 0 # Always zero in Leo2.

	self.put("&lt;leo_header")
	self.put(" file_format=") ; self.put_in_dquotes("2")
	self.put(" tnodes=") ; self.put_in_dquotes(`tnodes`)
	self.put(" max_tnode_index=") ; self.put_in_dquotes(`self.maxTnodeIndex`)
	self.put(" clone_windows=") ; self.put_in_dquotes(`clone_windows`)
	self.put("/&gt;") ; self.put_nl()</t>
<t tx="T1469"># Writes a Leo outline to s in a format suitable for pasting to the clipboard.

def putLeoOutline (self):

	self.outputString = "" ; self.outputFile = None
	self.usingClipboard = true
	# self.assignFileIndices() // The caller does this.
	self.putProlog()
	self.putClipboardHeader()
	self.putVnodes()
	self.putTnodes()
	self.putPostlog()
	s = self.outputString
	self.outputString = None
	self.usingClipboard = false
	return s</t>
<t tx="T1470">def putProlog (self):

	self.put(prolog_string) ; self.put_nl()
	# internal or external DTD goes here
	self.put("&lt;leo_file&gt;") ; self.put_nl()</t>
<t tx="T1471">def putPostlog (self):

	self.put("&lt;/leo_file&gt;") ; self.put_nl()</t>
<t tx="T1472">@ This method puts all tnodes in index order.  All tnode indices must have been assigned at this point.
@c
def putTnodes (self):

	c=self.commands
	tnodes = {}
	if self.usingClipboard: # write the current tree.
		v = c.currentVnode() ; after = v.nodeAfterTree()
	else: # write everything
		v = c.rootVnode() ; after = None
	# Populate tnodes
	while v and v != after:
		index = v.t.fileIndex
		if index &gt; 0 and not tnodes.has_key(index):
			tnodes[index] = v.t
		v = v.threadNext()
	# Put all tnodes in index order.
	self.put("&lt;tnodes&gt;") ; self.put_nl()
	#
	keys = tnodes.keys() ; keys.sort()
	for index in keys:
		t = tnodes[index]
		assert(t)
		# New for Leo2: write only those tnodes whose vnodes were written.
		if t.isVisited(): self.putTnode(t)
	#
	self.put("&lt;/tnodes&gt;") ; self.put_nl()</t>
<t tx="T1473">def putTnode (self,t):

	self.put("&lt;t tx=") ; self.put_in_dquotes("T" + `t.fileIndex`)
	self.put("&gt;")
	if t and t.bodyString and len(t.bodyString) &gt; 0:
		self.putEscapedString(t.bodyString)
	self.put("&lt;/t&gt;") ; self.put_nl()</t>
<t tx="T1474">@ This method puts all vnodes by starting the recursion.  putVnode will write all vnodes in the order in which they appear in the outline.
@c
def putVnodes (self):

	c=self.commands
	c.clearAllVisited()

	self.put("&lt;vnodes&gt;") ; self.put_nl()
	if self.usingClipboard:
		self.putVnode(
			c.currentVnode(), # Write only current tree.
			None) # Don't write top vnode status bit.
	else: 
		v = c.rootVnode()
		while v:
			self.putVnode(
				v, # Write the next top-level node.
				c.tree.topVnode) # Write the top-vnode status bit.
			v = v.next()
	self.put("&lt;/vnodes&gt;") ; self.put_nl()</t>
<t tx="T1475">@ This writes full headline and body text for all vnodes, even orphan and @ignored nodes.  This allows all Leo outlines to be used as backup files.
@c

def putVnode (self,v,topVnode):

	c = self.commands
	self.put("&lt;v")
	&lt;&lt; Put tnode index if this vnode has body text &gt;&gt;
	&lt;&lt; Put attribute bits &gt;&gt;
	self.put("&gt;")
	&lt;&lt; write the head text &gt;&gt;
	child = v.firstChild()
	if child:
		self.put_nl()
		while child:
			self.putVnode(child,topVnode)
			child = child.next()
	self.put("&lt;/v&gt;") ; self.put_nl()</t>
<t tx="T1476">t = v.t
if t and (t.hasBody() or v.getJoinList()):
	if t.fileIndex &gt; 0:
		self.put(" t=") ; self.put_in_dquotes("T" + `t.fileIndex`)
		v.t.setVisited() # Indicate we wrote the body text.
	else:
		es("error writing file(bad vnode)!")
		es("Try using the Save To command")</t>
<t tx="T1477"># Dummy vnodes carry all attributes.
current = c.currentVnode()
top = topVnode
if ( v.isCloned() or v.isExpanded() or v.isMarked() or
	v == current or v == top ):
	self.put(" a=") ; self.put_dquote()
	if v.isCloned(): self.put("C")
	if v.isExpanded(): self.put("E")
	if v.isMarked(): self.put("M")
	if v.isOrphan(): self.put("O")
	if v == top: self.put("T")
	if v == current: self.put("V")
	self.put_dquote()</t>
<t tx="T1478">headString = v.headString()
if len(headString) &gt; 0:
	self.put("&lt;vh&gt;")
	self.putEscapedString(headString)
	self.put("&lt;/vh&gt;")</t>
<t tx="T1479">def save(self,fileName):

	c=self.commands
	c.beginUpdate()
	if 1: # within update...
		c.endEditing()# Set the current headline text.
		self.compactFileIndices() # 1/14/02: always recompute file indices
		if self.write_LEO_file(fileName,false): # outlineOnlyFlag
			c.setChanged(false) # Clears all dirty bits.
			es("saved: " + shortFileName(fileName))
	c.endUpdate()</t>
<t tx="T1480">def saveAs(self,fileName):

	c=self.commands
	c.beginUpdate()
	if 1: # within update...
		c.endEditing() # Set the current headline text.
		self.compactFileIndices()
		if self.write_LEO_file(fileName,false): # outlineOnlyFlag
			c.setChanged(false) # Clears all dirty bits.
			es("saved: " + shortFileName(fileName))
	c.endUpdate()</t>
<t tx="T1481">def saveTo (self,fileName):

	c=self.commands
	c.beginUpdate()
	if 1: # within update...
		c.endEditing()# Set the current headline text.
		self.compactFileIndices()
		if self.write_LEO_file(fileName,false): # outlineOnlyFlag
			es("saved: " + shortFileName(fileName))
	c.endUpdate()</t>
<t tx="T1482"># Surprisingly, this is a time critical routine.

def xmlEscape(self,s):

	assert(s and len(s) &gt; 0) # check is made in putEscapedString
	s = string.replace(s, '\r', '')
	s = string.replace(s, '&amp;', "&amp;amp;")
	s = string.replace(s, '&lt;', "&amp;lt;")
	s = string.replace(s, '&gt;', "&amp;gt;")
	return s</t>
<t tx="T1483">def writeAtFileNodes (self):

	c = self.commands ; v = c.currentVnode()
	if v:
		at = c.atFileCommands
		at.writeAll(v,true) # partialFlag</t>
<t tx="T1484">def writeOutlineOnly (self):

	c=self.commands
	c.endEditing()
	self.compactFileIndices()
	self.write_LEO_file(self.mFileName,true) # outlineOnlyFlag</t>
<t tx="T1485">@language python

&lt;&lt; Theory of operation &gt;&gt;

from leoGlobals import *
from leoUtils import *
import Tkinter

# Abbreviations
set_undo_params = true ; dont_set_undo_params = false
all = true

#define is_word(c)(isalnum(c)or(c)== '_')

# The names of the actual ivars have "_flag" appended to these.
# Note: batch_flag now records the "context" checkbox.
ivars = [ "batch", "wrap", "whole_word", "ignore_case",
	"pattern_match", "search_headline", "search_body",
	"suboutline_only", "mark_changes", "mark_finds", "reverse" ]

class LeoFind:
	@others</t>
<t tx="T1486">def set_ivars (self,c):

	for var in ivars:
		exec("c.%s_flag = self.%s_flag.get()" % (var,var))

	c.find_text = self.find_text.get("1.0","end - 1c") # Remove trailing newline
	c.change_text = self.change_text.get("1.0","end - 1c") # Remove trailing newline
</t>
<t tx="T1487">def OnCloseFindEvent(self):

	self.top.withdraw()</t>
<t tx="T1488">@language python

@ Global constants and variables used throughout Leo2.
Most modules should do from leoGlobals import *
NB: Use app().ivar instead of using global variables
@c
	
&lt;&lt; define global constants &gt;&gt;

@others</t>
<t tx="T1489"># General constants...
true = 1
false = 0 # Better than None
body_newline = '\n'
body_ignored_newline = '\r'
prolog_string = "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"

# These are set by the @langauge directive.
# Used by Tangle, Untangle and syntax coloring.
ada_language =		 1
c_language =		 2  # C, C++ or objective C.
cweb_language =		 3  # CWEB syntax coloring
cobol_language =	 4  # literate cobol??
fortran_language =	 5  # Comments start with C
fortran90_language =	 6  # Comments start with !
html_language =		 7
java_language =		 8
lisp_language =		 9
pascal_language =	10
plain_text_language =	11
perl_language =		12  # just ##
perlpod_language =	13  # ## and =pod and =cut
python_language =	14
shell_language =	15  # shell scripts
unknown_language =	16  # Set when @comment is seen.

# Synonyms for the bits returned by is_special_bits...
color_bits =    0x00001
comment_bits =	 0x00002
cweb_bits =     0x00004
header_bits =   0x00008
ignore_bits =   0x00010
language_bits = 0x00020
nocolor_bits =	 0x00040
noheader_bits = 0x00080
noweb_bits =    0x00100
#               0x00200 #unused
page_width_bits=0x00400
path_bits =	    0x00800
root_bits =	    0x01000 # Also represents &lt; &lt; * &gt; &gt; =
silent_bits =	  0x02000
tab_width_bits =0x04000
terse_bits = 	  0x08000
unit_bits = 	   0x10000
verbose_bits =	 0x20000</t>
<t tx="T1490">def alert(message):

	es(message)

	import tkMessageBox
	tkMessageBox.showwarning("Alert", message)
</t>
<t tx="T1491"># gApp is the only global in the application, and gApp is accessed only via app().

def app():
	global gApp
	return gApp
	
def setApp(app):
	global gApp
	gApp = app</t>
<t tx="T1492">def choose(cond, a, b): # warning: evaluates all arguments

	if cond: return a
	else: return b</t>
<t tx="T1493">def ecnl():
	ecnls(1)

def ecnls(n):
	log = app().log
	if log:
		while log.es_newlines &lt; n:
			enl()

def enl():
	log = app().log
	if log:
		log.es_newlines += 1
		log.putnl()

def es(s):
	if s == None or len(s) == 0: return
	log = app().log
	if log:
		log.put(s)
		# 6/2/02: This logic will fail if log is None.
		for ch in s:
			if ch == '\n': log.es_newlines += 1
			else: log.es_newlines = 0
		ecnl() # only valid here
	else:
		print "Null log:", s
</t>
<t tx="T1494">def print_stack():

	import traceback
	traceback.print_stack()</t>
<t tx="T1495">def top():

	frame = app().log # the current frame
	return frame.commands</t>
<t tx="T1496">@language python

from leoGlobals import *
from leoUtils import *

# Synonyms
indent_refs = true ; dont_indent_refs = false

class leoImportCommands:
	@others</t>
<t tx="T1497">def __init__ (self,commands):

	self.commands = commands
	
	# Set by ImportFilesFommand.
	self.treeType = "@file" # "@root" or "@file"
	# Set by ImportWebCommand.
	self.webType = "@noweb" # "cweb" or "noweb"

	# Set by create_outline.
	self.fileName = None # The original file name, say x.cpp
	self.methodName = None # x, as in &lt; &lt; x methods &gt; &gt; =
	self.fileType = None # ".py", ".c", etc.
	
	# Used by Importers.
	self.web_st = []
</t>
<t tx="T1498">def createOutline (self,fileName,parent):

	c = self.commands ; current = c.currentVnode()
	junk, self.fileName = os.path.split(fileName) # junk/fileName
	self.methodName, type = os.path.splitext(self.fileName) # methodName.fileType
	self.fileType = type
	# trace(`self.fileName`) ; trace(`self.fileType`)
	# All file types except the following just get copied to the parent node.
	appendFileFlag = type not in [".c", ".cpp", ".java", ".pas", ".py"]
	&lt;&lt; Read file into s &gt;&gt;
	# Create the top-level headline.
	v = parent.insertAsLastChild()
	c.undoer.setUndoParams("Import",v,select=current)
	if self.treeType == "@file":
		v.initHeadString("@file " + self.fileName)
	else:
		v.initHeadString(self.fileName)
	if appendFileFlag:
		v.setBodyStringOrPane(s)
	elif type == ".c" or type == ".cpp":
		self.scanCText(s,v)
	elif type == ".java":
		self.scanJavaText(s,v,true) #outer level
	elif type == ".pas":
		self.scanPascalText(s,v)
	elif type == ".py":
		self.scanPythonText(s,v)
	else:
		es("createOutline: can't happen")
	return v</t>
<t tx="T1499">try:
	file = open(fileName)
	s = file.read()
	file.close()
except:
	es("Can not read " + fileName)
	return</t>
<t tx="T1500">def importFilesCommand  (self,files,treeType):

	c = self.commands ; current = c.currentVnode()
	if not current: return
	if len(files) &lt; 1: return
	self.treeType = treeType
	c.beginUpdate()
	if 1: # range of update...
	  	c.selectVnode(current)
		if len(files) == 2:
			&lt;&lt; Create a parent for two files having a common prefix &gt;&gt;
		for i in xrange(len(files)):
			fileName = files[0]
			v = self.createOutline(fileName,current)
			c.contractVnode(v)
			v.setDirty()
			c.setChanged(true)
		c.validateOutline()
	  	c.selectVnode(current)
	c.endUpdate()</t>
<t tx="T1501">@ The two filenames have a common prefix everything before the last period is the same.  For example, x.h and x.cpp.
@c

name0 = files[0]
name1 = files[1]
prefix0, junk = os.path.splitext(name0)
prefix1, junk = os.path.splitext(name1)
if len(prefix0) &gt; 0 and prefix0 == prefix1:
	current = current.insertAsLastChild()
	junk, nameExt = os.path.split(prefix1)
	name,ext = os.path.splitext(prefix1)
	current.initHeadString(name)</t>
<t tx="T1502"># On entry,files contains at most one file to convert.
def importFlattenedOutline (self,files):

	c = self.commands ; current = c.currentVnode()
	if current == None: return
	if len(files) &lt; 1: return
	fileName = files[0]
	&lt;&lt; Read the file into array &gt;&gt;
	# Convert the string to an outline and insert it after the current node.
	newVnode = self.convertMoreStringsToOutlineAfter(array,current)
	if newVnode:
		c.undoer.setUndoParams("Import",newVnode,select=current)
		c.endEditing()
		c.validateOutline()
		c.editVnode(newVnode)
		newVnode.setDirty()
		c.setChanged(true)
	else:
		es(fileName + " is not a valid MORE file.")</t>
<t tx="T1503">try:
	file = open(fileName)
	s = file.read()
	s = string.replace(s,"\r","")
	array = string.split(s,"\n")
	file.close()
except: array = []</t>
<t tx="T1504"># return the headline level of s,or -1 if the string is not a MORE headline.
def moreHeadlineLevel (self,s):

	level = 0 ; i = 0
	while match(s,i,'\t'):
		level += 1
		i += 1
	plusFlag = choose(match(s,i,"+"),true,false)
	if match(s,i,"+ ") or match(s,i,"- "):
		return level, plusFlag
	else:
		return -1, plusFlag</t>
<t tx="T1505">def createOutlineFromWeb (self,path,parent):

	c = self.commands ; current = c.currentVnode()
	junk, fileName = os.path.split(path)
	# Create the top-level headline.
	v = parent.insertAsLastChild()
	c.undoer.setUndoParams("Import",v,select=current)
	v.initHeadString(fileName)
	if self.webType=="cweb":
		v.setBodyStringOrPane("@language cweb")
	# Scan the file,creating one section for each function definition.
	self.scanWebFile(path,v)
	return v</t>
<t tx="T1506">def importWebCommand (self,files,webType):

	c = self.commands ; current = c.currentVnode()
	if current == None: return
	if len(files) &lt; 1: return
	self.webType = webType
	c.beginUpdate()
	for i in xrange(len(files)):
		fileName = files[i]
		v = self.createOutlineFromWeb(fileName,current)
		c.contractVnode(v)
		v.setDirty()
		c.setChanged(true)
	c.selectVnode(current)
	c.endUpdate()</t>
<t tx="T1507">def findFunctionDef (self,s,i):
	
	# Look at the next non-blank line for a function name.
	i = skip_ws_and_nl(s,i)
	k = skip_line(s,i)
	name = None
	while i &lt; k:
		if is_c_id(s[i]):
			j = i ; i = skip_c_id(s,i) ; name = s[j:i]
		elif s[i] == '(':
			if name: return name
			else: break
		else: i += 1
	return None</t>
<t tx="T1508">def massageWebBody (self,s):

	type = self.webType
	lb = choose(type=="cweb","@&lt;","&lt;&lt;")
	rb = choose(type=="cweb","@&gt;","&gt;&gt;")
	&lt;&lt; Remove most newlines from @space and @* sections &gt;&gt;
	&lt;&lt; Replace abbreviated names with full names &gt;&gt;
	s = string.rstrip(s)
	return s</t>
<t tx="T1509">i = 0
while i &lt; len(s):
	i = skip_ws_and_nl(s,i)
	if self.isDocStart(s,i):
		# Scan to end of the doc part.
		if match(s,i,"@ %def"):
			# Don't remove the newline following %def
			i = skip_line(s,i) ; start = end = i
		else:
			start = end = i ; i += 2
		while i &lt; len(s):
			i = skip_ws_and_nl(s,i)
			if self.isModuleStart(s,i) or match(s,i,lb):
				end = i ; break
			elif type == "cweb": i += 1
			else: i = skip_to_end_of_line(s,i)
		# Remove newlines from start to end.
		doc = s[start:end]
		doc = string.replace(doc,"\n"," ")
		doc = string.replace(doc,"\r","")
		doc = string.strip(doc)
		if doc and len(doc) &gt; 0:
			if doc == "@":
				doc = choose(self.webType=="cweb", "@ ","@\n")
			else:
				doc += "\n\n"
			# trace("new doc:" + `doc`)
			s = s[:start] + doc + s[end:]
			i = start + len(doc)
	else: i = skip_line(s,i)</t>
<t tx="T1510">i = 0
while i &lt; len(s):
	# line = get_line(s,i) ; trace(`line`)
	if match(s,i,lb):
		i += 2 ; j = i ; k = find_on_line(s,j,rb)
		if k &gt; -1:
			name = s[j:k]
			name2 = self.cstLookup(name)
			if name != name2:
				# Replace name by name2 in s.
				# trace("replacing:" + `name` + ", by:" + `name2`)
				s = s[:j] + name2 + s[k:]
				i = j + len(name2)
	i = skip_line(s,i)</t>
<t tx="T1511">@ This method returns the proper headline text.

1. If s contains a section def, return the section ref.
2. cweb only: if s contains @c, return the function name following the @c.
3. cweb only: if s contains @d name, returns @d name.
4. Otherwise, returns "@"
@c

def scanBodyForHeadline (self,s):
	
	if self.webType == "cweb":
		&lt;&lt; scan cweb body for headline &gt;&gt;
	else:
		&lt;&lt; scan noweb body for headline &gt;&gt;
	return "@" # default.</t>
<t tx="T1512">i = 0
while i &lt; len(s):
	i = skip_ws_and_nl(s,i)
	# line = get_line(s,i) ; trace(`line`)
	# Allow constructs such as @ @c, or @ @&lt;.
	if self.isDocStart(s,i):
		i += 2 ; i = skip_ws(s,i)
	if match(s,i,"@d") or match(s,i,"@f"):
		# Look for a macro name.
		directive = s[i:i+2]
		i = skip_ws(s,i+2) # skip the @d or @f
		if i &lt; len(s) and is_c_id(s[i]):
			j = i ; skip_c_id(s,i) ; return s[j:i]
		else: return directive
	elif match(s,i,"@c") or match(s,i,"@p"):
		# Look for a function def.
		name = self.findFunctionDef(s,i+2)
		return choose(name,name,"outer function")
	elif match(s,i,"@&lt;"):
		# Look for a section def.
		# A small bug: the section def must end on this line.
		j = i ; k = find_on_line(s,i,"@&gt;")
		if k &gt; -1 and (match(s,k+2,"+=") or match(s,k+2,"=")):
			return s[j:k+2] # return the section ref.
	i = skip_line(s,i)</t>
<t tx="T1513">i = 0
while i &lt; len(s):
	i = skip_ws_and_nl(s,i)
	# line = get_line(s,i) ; trace(`line`)
	if match(s,i,"&lt;&lt;"):
		k = find_on_line(s,i,"&gt;&gt;=")
		if k &gt; -1:
			ref = s[i:k+2]
			name = string.strip(s[i+2:k])
			if name != "@others":
				return ref
	else:
		name = self.findFunctionDef(s,i)
		if name:
			return name
	i = skip_line(s,i)</t>
<t tx="T1514">def scanWebFile (self,fileName,parent):

	type = self.webType
	lb = choose(type=="cweb","@&lt;","&lt;&lt;")
	rb = choose(type=="cweb","@&gt;","&gt;&gt;")

	try: # Read the file into s.
		f = open(fileName)
		s = f.read()
	except: s = None

	&lt;&lt; Create a symbol table of all section names &gt;&gt;
	&lt;&lt; Create nodes for limbo text and the root section &gt;&gt;
	while i &lt; len(s):
		progress = i
		&lt;&lt; Create a node for the next module &gt;&gt;
		assert(progress &lt; i)</t>
<t tx="T1515">i = 0 ; 	self.web_st = []
while i &lt; len(s):
	i = skip_ws_and_nl(s,i)
	# line = get_line(s,i) ; trace(`line`)
	if self.isDocStart(s,i):
		if type == "cweb": i += 2
		else: i = skip_line(s,i)
	elif type == "cweb" and match(s,i,"@@"):
		i += 2
	elif match(s,i,lb):
		i += 2 ; j = i ; k = find_on_line(s,j,rb)
		if k &gt; -1: self.cstEnter(s[j:k])
	else: i += 1

# trace(self.cstDump())</t>
<t tx="T1516">i = 0
while i &lt; len(s):
	i = skip_ws_and_nl(s,i)
	if self.isModuleStart(s,i) or match(s,i,lb):
		break
	else: i = skip_line(s,i)
	
j = skip_ws(s,0)
if j &lt; i:
	self.createHeadline(parent,"@ " + s[j:i],"Limbo")

j = i
if match(s,i,lb):
	while i &lt; len(s):
		i = skip_ws_and_nl(s,i)
		if self.isModuleStart(s,i):
			break
		else: i = skip_line(s,i)
	self.createHeadline(parent,s[j:i],angleBrackets(" @ "))
	
# trace(`get_line(s,i)`)</t>
<t tx="T1517">if type=="cweb":
	assert(self.isModuleStart(s,i))
	start = i
	if self.isDocStart(s,i):
		i += 2
		while i &lt; len(s):
			i = skip_ws_and_nl(s,i)
			if self.isModuleStart(s,i): break
			else: i = skip_line(s,i)
	&lt;&lt; Handle cweb @d, @f, @c and @p directives &gt;&gt;
else:
	assert(self.isDocStart(s,i)) # isModuleStart == isDocStart for noweb.
	start = i ; i = skip_line(s,i)
	while i &lt; len(s):
		i = skip_ws_and_nl(s,i)
		if self.isDocStart(s,i): break
		else: i = skip_line(s,i)
	
body = s[start:i]
body = self.massageWebBody(body)
headline = self.scanBodyForHeadline(body)
self.createHeadline(parent,body,headline)</t>
<t tx="T1518">if match(s,i,"@d") or match(s,i,"@f"):
	i += 2 ; i = skip_line(s,i)
	# Place all @d and @f directives in the same node.
	while i &lt; len(s):
		i = skip_ws_and_nl(s,i)
		if match(s,i,"@d") or match(s,i,"@f"): i = skip_line(s,i)
		else: break
	i = skip_ws_and_nl(s,i)
	
while i &lt; len(s) and not self.isModuleStart(s,i):
	i = skip_line(s,i)
	i = skip_ws_and_nl(s,i)

if match(s,i,"@c") or match(s,i,"@p"):
	i += 2 ; 
	while i &lt; len(s):
		i = skip_line(s,i)
		i = skip_ws_and_nl(s,i)
		if self.isModuleStart(s,i):
			break</t>
<t tx="T1519">@ We canonicalize strings before looking them up, but strings are entered in the form they are first encountered.
@c

def cstCanonicalize (self,s,lower=true):
	
	if lower:
		s = string.lower(s)
	s = string.replace(s,"\t"," ")
	s = string.replace(s,"\r","")
	s = string.replace(s,"\n"," ")
	s = string.replace(s,"  "," ")
	s = string.strip(s)
	return s</t>
<t tx="T1520">def cstDump (self):

	self.web_st.sort()
	s = "Web Symbol Table...\n\n"
	for name in self.web_st:
		s += name + "\n"
	return s</t>
<t tx="T1521"># We only enter the section name into the symbol table if the ... convention is not used.

def cstEnter (self,s):

	# Don't enter names that end in "..."
	s = string.rstrip(s)
	if s.endswith("..."): return
	
	# Put the section name in the symbol table, retaining capitalization.
	lower = self.cstCanonicalize(s,true)  # do lower
	upper = self.cstCanonicalize(s,false) # don't lower.
	for name in self.web_st:
		if string.lower(name) == lower:
			return
	self.web_st.append(upper)</t>
<t tx="T1522"># This method returns a string if the indicated string is a prefix of an entry in the web_st.

def cstLookup (self,target):
	
	# Do nothing if the ... convention is not used.
	target = string.strip(target)
	if not target.endswith("..."): return target
	# Canonicalize the target name, and remove the trailing "..."
	ctarget = target[:-3]
	ctarget = self.cstCanonicalize(ctarget)
	ctarget = string.strip(ctarget)
	found = false ; result = target
	for s in self.web_st:
		cs = self.cstCanonicalize(s)
		if cs[:len(ctarget)] == ctarget:
			if found:
				es("****** " + target + ": is also a prefix of: " + s)
			else:
				found = true ; result = s
				# es("replacing: " + target + " with: " + s)
	return result</t>
<t tx="T1523"># Creates a child of parent for each C function definition seen.

def scanCText (self,s,parent):

	&lt;&lt; define scanCText vars &gt;&gt;
	while i &lt; len(s):
		# line = get_line(s,i) ; trace(`line`)
		ch = s[i]
		# These cases skip tokens.
		if ch == '/':
			&lt;&lt; handle possible C comments &gt;&gt;
		elif ch == '"' or ch == '\'':
			i = skip_string(s,i)
		# These cases help determine where functions start.
		elif ch == '=':
			&lt;&lt; handle equal sign in C or Java &gt;&gt;
		elif ch == '(':
			&lt;&lt; handle open paren in C or Java &gt;&gt;
		elif ch == ';':
			&lt;&lt; handle semicolon in C or Java &gt;&gt;
		# These cases and the default case can create child nodes.
		elif ch == '#':
			&lt;&lt; handle # sign &gt;&gt;
		elif ch == '{':
			&lt;&lt; handle open curly bracket in C &gt;&gt;
		elif is_c_id(ch):
			&lt;&lt; skip c identif ier, typedef, struct, union, namespace &gt;&gt;
		else: i += 1
	&lt;&lt; Append any unused text to the parent's body text &gt;&gt;</t>
<t tx="T1524">c = self.commands
include_seen = method_seen = false
methodKind = choose(self.fileType=="c","functions","methods")
lparen = None   # Non-null if '(' seen at outer level.
scan_start = function_start = 0
name = None
i = 0</t>
<t tx="T1525"># if statements may contain function definitions.
i += 1  # Skip the '#'
if not include_seen and match_c_word(s,i,"include"):
	include_seen = true
	&lt;&lt; create a child node for all #include statements &gt;&gt;
else: i = skip_pp_directive(s,i)</t>
<t tx="T1526"># Scan back to the start of the line.
include_start = i = find_line_start(s,i)
# Scan to the next line that is neither blank nor and #include.
i = skip_pp_directive(s,i)
i = skip_nl(s,i)
include_end = i
while i &lt; len(s):
	i = skip_ws_and_nl(s,i)
	if match_c_word(s,i,"#include"):
		i = skip_pp_directive(s,i)
		i = skip_nl(s,i)
		include_end = i
	elif i + 2 &lt; len(s) and s[i] == '\\':
		# Handle possible comment.
		if s[i+1] == '\\':
			i = skip_to_end_of_line(s,i)
		elif s[i+1] == '*':
			i = skip_block_comment(s,i + 2)
		else:
			i = include_end ; break
	else:
		i = include_end ; break
		

headline = angleBrackets(" " + self.methodName + " #includes ")
body = s[include_start:include_end]
prefix = choose(self.treeType == "@file","","@code\n\n")
self.createHeadline(parent,prefix + body,headline)
parent.appendStringToBody("@language c\n")
# Append any previous text to the parent's body.
save_ip = i ; i = scan_start
while i &lt; include_start and is_ws_or_nl(s,i):
	i += 1
if i &lt; include_start:
	parent.appendStringToBody(s[i:include_start])
scan_start = function_start = i = save_ip
# Append the headline to the parent's body.
parent.appendStringToBody(headline + "\n")</t>
<t tx="T1527">i = skip_braces(s,i) # Skip all inner blocks.
# This may fail if #if's contain unmathed curly braces.
if (match(s,i,'}') and lparen and name and function_start):
	# Point i _after_ the last character of the function.
	i += 1
	if is_nl(s,i):
		i = skip_nl(s,i)
	function_end = i
	if method_seen:
		# Include everything after the last function.
		function_start = scan_start 
	else:
		&lt;&lt; create a declaration node &gt;&gt;
		&lt;&lt; append C function/method reference to parent node &gt;&gt;
	headline = name
	body = s[function_start:function_end]
	body = self.massageBody(body,"functions")
	self.createHeadline(parent,body,headline)
	
	method_seen = true
	scan_start = function_start = i # Set the start of the _next_ function.
	lparen = None
else: i += 1</t>
<t tx="T1528">save_ip = i
i = scan_start
while i &lt; function_start and is_ws_or_nl(s,i):
	i += 1
if i &lt; function_start:
	headline = angleBrackets(" " + self.methodName + " declarations ")
	# Append the headline to the parent's body.
	parent.appendStringToBody(headline + "\n")
	decls = s[scan_start:function_start]
	if self.treeType == "@file":
		body = decls
	else:
		body = "@code\n\n" + decls
	self.createHeadline(parent,body,headline)
i = save_ip
scan_start = i</t>
<t tx="T1529">if self.treeType == "@file":
	parent.appendStringToBody("@others\n")
else:
	cweb = c.target_language == cweb_language
	lb = choose(cweb,"@&lt;","&lt;&lt;")
	rb = choose(cweb,"@&gt;","&gt;&gt;")
	parent.appendStringToBody(
		lb + " " + self.methodName + " " + methodKind + " " + rb + "\n")</t>
<t tx="T1530">if match_c_word(s,i,"typedef"):
	i = skip_typedef(s,i)
	lparen = None
elif match_c_word(s,i,"struct"):
	i = skip_typedef(s,i)
	# lparen = None ;  # This can appear in an argument list.
elif match_c_word(s,i,"union"):
	i = skip_typedef(s,i)
	# lparen = None ;  # This can appear in an argument list.
elif match_c_word(s,i,"namespace"):
	&lt;&lt; Create children for the namespace &gt;&gt;
else:
	# Remember the last name before an open parenthesis.
	if lparen == None:
		j = i ; i = skip_c_id(s,i) ; name = s[j:i]
	else:
		i = skip_c_id(s,i)
	&lt;&lt; test for operator keyword &gt;&gt;</t>
<t tx="T1531"># We treat a C++ a construct such as operator + as a function name.
if match(name,0,"operator"):
	j = i
	i = skip_ws(s,i) # Don't allow newline in headline.
	if (i &lt; len(s) and not is_c_id(s[i]) and
		s[i]!=' ' and s[i]!='\n' and s[i]!='\r'):
		while (i &lt; len(s) and not is_c_id(s[i]) and
			s[i]!=' ' and s[i]!='\n' and s[i] != '\r'):
			i += 1
		name = s[j:i] # extend the name.</t>
<t tx="T1532">@ Namesspaces change the self.moduleName and recursively call self function with a text covering only the range of the namespace. This effectively changes the definition line of any created child nodes. The namespace is written to the top level.
@c

# skip the "namespace" keyword.
i += len("namespace")
i = skip_ws_and_nl(s,i)
# Skip the namespace name.
namespace_name_start = i
namespace_name_end = None
if i &lt; len(s) and is_c_id(s[i]):
	i = skip_c_id(s,i)
	namespace_name_end = i - 1
else: namespace_name_start = None
# Skip the '{'
i = skip_ws_and_nl(s,i)
if match(s,i,'{') and namespace_name_start:
	inner_ip = i + 1
	i = skip_braces(s,i)
	if match(s,i,'}'):
		# Append everything so far to the body.
		if inner_ip &gt; scan_start:
			parent.appendStringToBody(s[scan_start:inner_ip])
		# Save and change self.moduleName to namespaceName
		savedMethodName = self.methodName
		namespaceName = s[namespace_name_start:namespace_name_end]
		self.methodName = "namespace " + namespaceName
		# Recursively call this function .
		self.scanCText(s[inner_ip:],parent)
		# Restore self.moduleName and continue scanning.
		self.methodName = savedMethodName
		scan_start = function_start = i</t>
<t tx="T1533"></t>
<t tx="T1534">if match(s,i,"//"):
	i = skip_line(s,i)
elif match(s,i,"/*"):
	i = skip_block_comment(s,i)
else:
	i += 1</t>
<t tx="T1535">@ We can not be seeing a function definition when we find an equal sign at the top level. Equal signs inside parentheses are handled by the open paren logic.
@c

i += 1 # skip the '='
function_start = None # We can't be in a function.
lparen = None   # We have not seen an argument list yet.
if match(s,i,'='):
	i = skip_braces(s,i)</t>
<t tx="T1536">lparen = i
# This will skip any equal signs inside the paren.
i = skip_parens(s,i)
if match(s,i,')'):
	i += 1
	i = skip_ws_and_nl(s,i)
	if match(s,i,';'):
		lparen = None # not a function definition.
else: lparen = None</t>
<t tx="T1537">@ A semicolon signals the end of a declaration, thereby potentially starting the _next_ function defintion.   Declarations end a function definition unless we have already seen a parenthesis, in which case we are seeing an old-style function definition.
@c

i += 1 # skip the semicolon.
if lparen == None:
	function_start = i + 1 # The semicolon ends the declaration.</t>
<t tx="T1538"># Used by C, Java and Pascal parsers.
# Do nothing if only whitespace is left.

i = skip_ws_and_nl(s,scan_start)
if i &lt; len(s):
	parent.appendStringToBody(s[scan_start:])</t>
<t tx="T1539"># Creates a child of parent for each Java function definition seen.

def scanJavaText (self,s,parent,outerFlag): # true if at outer level.

	&lt;&lt; define scanJavaText vars &gt;&gt;
	# if not outerFlag: trace("inner:" + `s`)
	while i &lt; len(s):
		# line = get_line(s,i) ; trace(`line`)
		ch = s[i]
		# These cases skip tokens.
		if ch == '/':
			&lt;&lt; handle possible C comments &gt;&gt;
		elif ch == '"' or ch == '\'': i = skip_string(s,i)
		# These cases help determine where functions start.
		elif ch == '=':
			&lt;&lt; handle equal sign in C or Java &gt;&gt;
		elif ch == '(':
			&lt;&lt; handle open paren in C or Java &gt;&gt;
		elif ch == ';':
			&lt;&lt; handle semicolon in C or Java &gt;&gt;
			class_seen = false
		# These cases can create child nodes.
		elif ch == '{':
			&lt;&lt; handle open curly bracket in Java &gt;&gt;
		elif is_c_id(s[i]):
			&lt;&lt; skip and remember the Java id &gt;&gt;
		else: i += 1
	&lt;&lt; Append any unused text to the parent's body text &gt;&gt;</t>
<t tx="T1540">method_seen = false
class_seen = false # true is class keyword seen at outer level.
lparen = None  # not None if '(' seen at outer level.
scan_start = 0
name = None
function_start = choose(outerFlag, None, 0)
i = 0</t>
<t tx="T1541">brace_ip1 = i
i = skip_braces(s,i) # Skip all inner blocks.
brace_ip2 = i
if (
	match(s,i,'}') and name and function_start != None and
	((outerFlag and class_seen) or (not outerFlag and lparen))):
	# Point i _after_ the last character of the method.
	i += 1
	if is_nl(s,i):
		i = skip_nl(s,i)
	function_end = i
	headline = name
	if outerFlag:
		leader = "" ; decl_leader = ""
		headline = "class " + headline
		methodKind = "classes"
	else:
		leader = "\t" # Indent only inner references.
		decl_leader = "\n"  # Declaration leader for inner references.
		methodKind = "methods"
	if method_seen:
		# Include everything after the last fucntion.
		function_start = scan_start
	else:
		&lt;&lt; create a Java declaration node &gt;&gt;
		&lt;&lt; append Java method reference to parent node &gt;&gt;
	if outerFlag:
		# Create a headline for the class.
		body = s[function_start:brace_ip1+1]
		body = self.massageBody(body,methodKind)
		v = self.createHeadline(parent,body,headline)
		&lt;&lt; recursively scan the text &gt;&gt;
	else:
		# Create a single headline for the method.
		body = s[function_start:function_end]
		body = self.massageBody(body,methodKind)
		self.createHeadline(parent,body,headline)
	method_seen = true
	scan_start = function_start = i # Set the start of the _next_ function.
	lparen = None ; class_seen = false
else: i += 1</t>
<t tx="T1542">save_ip = i
i = scan_start
while i &lt; function_start and is_ws_or_nl(s,i):
	i += 1
if i &lt; function_start:
	if outerFlag:
		parent.appendStringToBody("@language java\n")
	decl_headline = angleBrackets(" " + self.methodName + " declarations ")
	# Append the headline to the parent's body.
	parent.appendStringToBody(decl_leader + leader + decl_headline + "\n")
	decls = s[scan_start:function_start]
	body = choose(self.treeType == "@file",decls,"@code\n\n" + decls)
	self.createHeadline(parent,body,decl_headline)
i = save_ip
scan_start = i</t>
<t tx="T1543">if self.treeType == "@file":
	if outerFlag:
		parent.appendStringToBody("@others\n")
	else:
		ref_name = angleBrackets(" " + self.methodName + " methods ")
		parent.appendStringToBody("\n" + leader + ref_name + "\n")
		parent = self.createHeadline(parent,"@others\n",ref_name)
else:
	kind = choose(outerFlag,"classes","methods")
	ref_name = angleBrackets(" " + self.methodName + " " + kind + " ")
	parent.appendStringToBody(leader + ref_name + "\n")</t>
<t tx="T1544"># These mark the points in the present function.
# trace("recursive scan:" + `get_line(s,brace_ip1+ 1)`)
oldMethodName = self.methodName
self.methodName = headline
self.scanJavaText(s[brace_ip1+1:brace_ip2], # Don't include either brace.
	v,false) # inner level
self.methodName = oldMethodName
# Append the brace to the parent.
v.appendStringToBody("}")
i = brace_ip2 + 1 # Start after the closing brace.</t>
<t tx="T1545">if match_c_word(s,i,"class"):
	class_seen = true
	i = skip_c_id(s,i)
	i = skip_ws_and_nl(s,i)
	if i &lt; len(s) and is_c_id(s[i]):
		# Remember the class name.
		j = i ; i = skip_c_id(s,i) ; name = s[j:i]
elif not lparen and not class_seen:
	# Remember a possible method name.
	j = i ; i = skip_c_id(s,i) ; name = s[j:i]
else: i = skip_c_id(s,i)</t>
<t tx="T1546"># Creates a child of parent for each Pascal function definition seen.

def scanPascalText (self,s,parent):

	method_seen = false ; methodKind = "methods"
	scan_start = function_start = i = 0
	name = None
	while i &lt; len(s):
		# line = get_line(s,i) ; trace(`line`)
		ch = s[i]
		if ch == '{': i = skip_pascal_braces(s,i)
		elif ch == '"' or ch == '\'': i = skip_pascal_string(s,i)
		elif match(s,i,"//"): i = skip_to_end_of_line(s,i)
		elif match(s,i,"(*"): i = skip_pascal_block_comment(s,i)
		elif is_c_id(s[i]):
			&lt;&lt; handle possible Pascal function &gt;&gt;
		else: i += 1
	&lt;&lt; Append any unused text to the parent's body text &gt;&gt;</t>
<t tx="T1547">if match_c_word(s,i,"begin"):
	i = skip_pascal_begin_end(s,i)
	if match_c_word(s,i,"end"):
		i = skip_c_id(s,i)
elif (match_c_word(s,i,"function")  or match_c_word(s,i,"procedure") or
	match_c_word(s,i,"constructor") or match_c_word(s,i,"destructor")):

	# line = get_line(s,i) ; trace(`line`)
	
	start = i
	i = skip_c_id(s,i)
	i = skip_ws_and_nl(s,i)
	&lt;&lt; remember the function name, or continue &gt;&gt;
	&lt;&lt; skip the function definition, or continue &gt;&gt;
	if not method_seen:
		method_seen = true
		&lt;&lt; create a child node for leading declarations &gt;&gt;
		&lt;&lt; append noweb method reference to the parent node &gt;&gt;
		function_start = start
	else: function_start = scan_start
	&lt;&lt; create a child node for the function &gt;&gt;
else: i = skip_c_id(s,i)</t>
<t tx="T1548">save_ip = i
i = scan_start
while i &lt; start and is_ws_or_nl(s,i):
	i += 1
if i &lt; start:
	parent.appendStringToBody("@language pascal\n")
	headline = angleBrackets(self.methodName + " declarations ")
	# Append the headline to the parent's body.
	parent.appendStringToBody(headline + "\n")
	if self.treeType == "@file":
		body = s[scan_start:start]
	else:
		body = "@code\n\n" + s[scan_start:start]
	self.createHeadline(parent,body,headline)
i = save_ip
scan_start = i</t>
<t tx="T1549"># Point i _after_ the last character of the function.
i = skip_ws(s,i)
if is_nl(s,i):
	i = skip_nl(s,i)
function_end = i
headline = name
body = s[function_start:function_end]
body = self.massageBody(body,methodKind)
self.createHeadline(parent,body,headline)
scan_start = i</t>
<t tx="T1550">if i &lt; len(s) and is_c_id(s[i]):
	j = i ; i = skip_c_id(s,i)
	while i + 1 &lt; len(s) and s[i] == '.' and is_c_id(s[i+1]):
		i += 1 ; j = i
		i = skip_c_id(s,i)
	name = s[j:i]
else: continue</t>
<t tx="T1551">&lt;&lt; skip past the semicolon &gt;&gt;

if not match_c_word(s,i,"begin"):
	continue
# Skip to the matching end.
i = skip_pascal_begin_end(s,i)
if match_c_word(s,i,"end"):
	i = skip_c_id(s,i)
	i = skip_ws_and_nl(s,i)
	if match(s,i,';'):
		i += 1
	i = skip_ws(s,i)
	if is_nl(s,i):
		i = skip_nl(s,i)
else: continue</t>
<t tx="T1552">while i &lt; len(s) and s[i] != ';':
	# The paremeter list may contain "inner" semicolons.
	if s[i] == '(':
		i = skip_parens(s,i)
		if match(s,i,')'):
			i += 1
		else: break
	else: i += 1
if match(s,i,';'):
	i += 1
i = skip_ws_and_nl(s,i)

if match_c_word(s,i,"var"):
	# Skip to the next begin.
	i = skip_c_id(s,i)
	done = false
	while i &lt; len(s) and not done:
		ch = s[i]
		if ch == '{': i = skip_pascal_braces(s,i)
		elif match(s,i,"//"): i = skip_to_end_of_line(s,i)
		elif match(s,i,"(*"): i = skip_pascal_block_comment(s,i)
		elif is_c_id(ch):
			if match_c_word(s,i,"begin"): done = true
			else: i = skip_c_id(s,i)
		elif ch == '"' or ch == '\'': i = skip_pascal_string(s,i)
		else: i += 1</t>
<t tx="T1553"># Append the headline to the parent's body.
if self.treeType == "@file":
	parent.appendStringToBody("@others\n")
else:
	parent.appendStringToBody(
		angleBrackets(" " + self.methodName + " methods ") + "\n")</t>
<t tx="T1554">@ Headlines not containing a section reference are ignored in noweb and generate index index in cweb.
@c

def convertCodePartToWeb (self,s,i,v,result):

	# line = get_line(s,i) ; trace(`line`)
	c = self.commands
	lb = choose(self.webType=="cweb","@&lt;","&lt;&lt;")
	rb = choose(self.webType=="cweb","@&gt;","&gt;&gt;")
	h = string.strip(v.headString())
	&lt;&lt; put v's headline ref in head_ref &gt;&gt;
	&lt;&lt; put name following @root or @file in file_name &gt;&gt;
	if match_word(s,i,"@root"):
		i = skip_line(s,i)
		&lt;&lt; append ref to file_name &gt;&gt;
	elif match_word(s,i,"@c") or match_word(s,i,"@code"):
		i = skip_line(s,i)
		&lt;&lt; append head_ref &gt;&gt;
	elif match_word(h,0,"@file"):
		# Only do this if nothing else matches.
		&lt;&lt; append ref to file_name &gt;&gt;
		i = skip_line(s,i) # 4/28/02
	else:
		&lt;&lt; append head_ref &gt;&gt;
	i,result = self.copyPart(s,i,result)
	return i, string.strip(result) + "\n"
	
@ %defs a b c
</t>
<t tx="T1555">@ We look for either noweb or cweb brackets. head_ref does not include these brackets.
@c

head_ref = None
j = 0
if match(h,j,"&lt;&lt;"):
	k = string.find(h,"&gt;&gt;",j)
elif match(h,j,"&lt;@"):
	k = string.find(h,"@&gt;",j)
else:
	k = -1

if k &gt; -1:
	head_ref = string.strip(h[j+2:k])
	if len(head_ref) == 0:
		head_ref = None</t>
<t tx="T1556">if match(h,0,"@file") or match(h,0,"@root"):
	line = h[5:]
	line = string.strip(line)
	&lt;&lt; set file_name &gt;&gt;
else:
	file_name = line = None
</t>
<t tx="T1557"># set j &amp; k so line[j:k] is the file name.
# trace(`line`)

if match(line,0,"&lt;"):
	j = 1 ; k = string.find(line,"&gt;",1)
elif match(line,0,'"'):
	j = 1 ; k = string.find(line,'"',1)
else:
	j = 0 ; k = string.find(line," ",0)
if k == -1:
	k = len(line)

file_name = string.strip(line[j:k])
if file_name and len(file_name) == 0:
	file_name = None</t>
<t tx="T1558">if self.webType == "cweb":
	if not file_name:
		result += "@&lt;root@&gt;=\n"
	else:
		result += "@(" + file_name + "@&gt;\n" # @(...@&gt; denotes a file.
else:
	if not file_name:
		file_name = "*"
	result += lb + file_name + rb + "=\n"
</t>
<t tx="T1559">if self.webType == "cweb":
	if not head_ref:
		result += "@^" + h + "@&gt;\n" # Convert the headline to an index entry.
		result += "@c\n" # @c denotes a new section.
	else: 
		escaped_head_ref = string.replace(head_ref,"@","@@")
		result += "@&lt;" + escaped_head_ref + "@&gt;=\n"
else:
	if not head_ref:
		if v == c.currentVnode():
			head_ref = choose(file_name,file_name,"*")
		else:
			head_ref = "@others"

	result += lb + head_ref + rb + "=\n"</t>
<t tx="T1560">def convertDocPartToWeb (self,s,i,result):

	# line = get_line(s,i) ; trace(`line`)
	if match_word(s,i,"@doc"):
		i = skip_line(s,i)
	elif match(s,i,"@ ") or match(s,i,"@\t") or match(s,i,"@*"):
		i += 2
	elif match(s,i,"@\n"):
		i += 1
	i = skip_ws_and_nl(s,i)
	i, result2 = self.copyPart(s,i,"")
	if len(result2) &gt; 0:
		# Break lines after periods.
		result2 = string.replace(result2,".  ",".\n")
		result2 = string.replace(result2,". ",".\n")
		result += "\n@\n" + string.strip(result2) + "\n\n"
	else:
		# All nodes should start with '@', even if the doc part is empty.
		result += choose(self.webType=="cweb","\n@ ","\n@\n")
	return i, result</t>
<t tx="T1561">def removeSentinelsCommand (self,fileName):

	path, self.fileName = os.path.split(fileName) # path/fileName
	trace(`self.fileName`)
	&lt;&lt; Read file into s &gt;&gt;
	valid = true
	line_delim = start_delim = end_delim = None
	&lt;&lt; set delims from the header line &gt;&gt;
	if valid == false:
		es("Invalid @+leo sentinel in " + fileName)
	else:
		trace("line:"+`line_delim`+","+
			"start:"+`start_delim`+","+
			"end:"+`end_delim`)
		s = self.removeSentinelLines(s,line_delim,start_delim,end_delim)
		newFileName = os.path.join(path,fileName+".tmp")
		&lt;&lt; Write s into newFileName &gt;&gt;</t>
<t tx="T1562">try:
	file = open(fileName)
	s = file.read()
	file.close()
except:
	es("Can not read " + fileName)
	return</t>
<t tx="T1563">@ This code is similar to atFile::scanHeader.
@c

tag = "@+leo"
# Skip any non @+leo lines.
i = 0
while i &lt; len(s) and not find_on_line(s,i,tag):
	i = skip_line(s,i)
# We should be at the @+leo line.
i = j = skip_ws(s,i)
# The opening comment delim is the initial non-whitespace.
while i &lt; len(s) and not match(s,i,tag) and not is_ws(s[i]) and not is_nl(s,i):
	i += 1
if j &lt; i: line_delim = s[j:i]
else: valid = false
# Make sure we have @+leo
i = skip_ws(s,i)
if match(s,i,tag): i += len(tag)
else: valid = false
# The closing comment delim is the trailing non-whitespace.
i = j = skip_ws(s,i)
while i &lt; len(s) and not is_ws(s[i]) and not is_nl(s,i):
	i += 1
if j &lt; i:
	start_delim = line_delim
	end_delim = s[j:i]
	line_delim = None</t>
<t tx="T1564">try:
	file = open(newFileName,"w")
	file.write(s)
	file.close()
except:
	es("Can not create " + newFileName)</t>
<t tx="T1565">@ Properly removes all sentinel lines in s.  Only leading single-line comments may be sentinels.

line_delim, start_delim and end_delim are the comment delimiters.
@c

def removeSentinelLines(self,s,line_delim,start_delim,end_delim):

	i = 0 ; result = "" ; first = true
	while i &lt; len(s):
		start = i # The start of the next syntax element.
		if first or is_nl(s,i):
			first = false
			&lt;&lt; handle possible sentinel &gt;&gt;
		elif match(s,i,line_delim):
			i = skip_to_end_of_line(s,i)
		elif match(s,i,start_delim):
			i = skip_matching_delims(s,i,start_delim,end_delim)
		elif match(s,i,"'") or match(s,i,'"'):
			i = skip_string(s,i)
		else:
			i += 1
		assert(i==0 or start&lt;i)
		result += s[start:i]
	return result</t>
<t tx="T1566">i = skip_nl(s,i)
i = skip_ws(s,i)

if line_delim:
	if match(s,i,line_delim):
		j = i + len(line_delim)
		i = skip_to_end_of_line(s,i)
		if match(s,j,"@"):
			continue # Remove the sentinel.
elif start_delim:
	if match(s,i,start_delim):
		j = i + len(start_delim)
		i = skip_matching_delims(s,i,start_delim,end_delim)
		if match(s,j,"@"):
			continue # Remove the sentinel.</t>
<t tx="T1567">def createHeadline (self,parent,body,headline):

	# trace("parent,headline:" + `parent` + ":" + `headline`)
	# Create the vnode.
	v = parent.insertAsLastChild()
	v.initHeadString(headline)
	# Set the body.
	if len(body) &gt; 0: 
		v.setBodyStringOrPane(body)
	return v</t>
<t tx="T1568">def error (self,s): es(s)</t>
<t tx="T1569">@ This code returns the leading whitespace of a line, ignoring blank and comment lines.
@c

def getPythonIndent (self,s,i):

	c = self.commands
	i = find_line_start(s,i)
	while i &lt; len(s):
		# line = get_line(s,i) ; trace(`line`)
		if is_nl(s,i) or match(s,i,"#"):
			i = skip_line(s,i) # ignore blank lines and comments.
		else:
			i, width = skip_leading_ws_with_indent(s,i,c.tab_width)
			# trace("returns:" + `width`)
			return width
	# trace("returns:0")
	return 0</t>
<t tx="T1570"># The start of a document part or module in a noweb or cweb file.
# Exporters may have to test for @doc as well.

def isDocStart (self,s,i):
	
	if not match(s,i,"@"):
		return false

	j = skip_ws(s,i+1)
	if match(s,j,"%defs"):
		return false
	elif self.webType == "cweb" and match(s,i,"@*"):
		return true
	else:
		return match(s,i,"@ ") or match(s,i,"@\t") or match(s,i,"@\n")

def isModuleStart (self,s,i):

	if self.isDocStart(s,i):
		return true
	else:
		return self.webType == "cweb" and (
			match(s,i,"@c") or match(s,i,"@p") or
			match(s,i,"@d") or match(s,i,"@f"))
</t>
<t tx="T1571">def massageBody (self,s,methodKind):
	
	# line = get_line(s,0) ; trace(`line`)
	c = self.commands
	if self.treeType == "@file":
		if self.fileType == "py":
			return self.undentPythonBody(s)
		else:
			newBody, comment = self.skipLeadingComments(s)
			newLine = choose(is_nl(newBody,0),"\n","\n\n")
			if len(comment) &gt; 0:
				return comment + "\n@c" + newLine + newBody
			else:
				return newBody
	else:
		# Inserts &lt; &lt; self.methodName methodKind &gt; &gt; =
		cweb = self.fileType == "c" and not c.use_noweb_flag
		lb = choose(cweb,"@&lt;","&lt;&lt;")
		rb = choose(cweb,"@&gt;=","&gt;&gt;=")
		intro = lb + " " + self.methodName + " " + methodKind + " " + rb
		if self.fileType == "py":
			newBody = self.undentPythonBody(s)
			newLine = choose(is_nl(newBody,0),"\n","\n\n")
			return intro + newLine + newBody
		else:
			newBody, comment = self.skipLeadingComments(s)
			newLine = choose(is_nl(newBody,0),"\n","\n\n")
			if len(comment) &gt; 0:
				return comment + "\n" + intro + newLine + newBody
			else:
				return intro + newLine + newBody</t>
<t tx="T1572">@ Returns s with all runs of whitespace and newlines converted to a single blank.  It also removes leading and trailing whitespace.
@c

def massageComment (self,s):

	# line = get_line(s,0) ; trace(`line`)
	s = string.strip(s)
	s = string.replace(s,"\n"," ")
	s = string.replace(s,"\r"," ")
	s = string.replace(s,"\t"," ")
	s = string.replace(s,"  "," ")
	s = string.strip(s)
	return s</t>
<t tx="T1573">@ This skips all leading comments in s, returning the remaining body text and the massaged comment text.
Returns (body, comment)
@c

def skipLeadingComments (self,s):

	# trace(`get_line(s,0)`)
	s = string.lstrip(s)
	i = 0 ; comment = ""
	if self.fileType in [".c", ".cpp", ".java"]:
		&lt;&lt; scan for C-style comments &gt;&gt;
	elif self.fileType == ".pas":
		&lt;&lt; scan for Pascal comments &gt;&gt;
	elif self.fileType == ".py":
		&lt;&lt; scan for Python comments &gt;&gt;
	comment = string.strip(comment)
	if len(comment) == 0:
		return s[i:], ""
	elif self.treeType == "@file":
		return s[i:], "@ " + comment
	else:
		return s[i:], "@ " + comment + "\n"</t>
<t tx="T1574">while i &lt; len(s):
	if match(s,i,"//"): # Handle a C++ comment.
		while match(s,i,'/'):
			i += 1
		j = i ; i = skip_line(s,i)
		comment = comment + self.massageComment(s[j:i]) + "\n"
		i = skip_ws_and_nl(s,i)
	elif match(s,i,"/*"): # Handle a block C comment.
		j = i + 2 ; i = skip_block_comment (s,i)
		k = choose(match(s,i-2,"*/"),i-2,i)
		comment = comment + self.massageComment(s[j:k]) + "\n"
		i = skip_ws_and_nl(s,i)
	else: break</t>
<t tx="T1575">while i &lt; len(s):
	if match(s,i,"//"): # Handle a Pascal line comment.
		while match(s,i,'/'):
			i += 1
		j = i ; i = skip_line(s,i)
		comment = comment + self.massageComment(s[j:i]) + "\n"
		i = skip_ws_and_nl(s,i)
	elif match(s,i,'(*'):
		j = i + 1 ; i = skip_pascal_block_comment(s,i)
		comment = comment + self.massageComment(s[j:i]) + "\n"
		i = skip_ws_and_nl(s,i)
	else: break</t>
<t tx="T1576">while i &lt; len(s) and match(s,i,'#'):
	j = i + 1 ; i = skip_line(s,i)
	comment = comment + self.massageComment(s[j:i]) + "\n"
	i = skip_ws_and_nl(s,i)</t>
<t tx="T1577">@ Removes extra leading indentation from all lines.  We look at the first line to determine how much leading whitespace to delete.
@c

def undentPythonBody (self,s):

	c = self.commands
	i = 0 ; result = ""
	# Copy an @code line as is.
	if match(s,i,"@code"):
		j = i ; i = skip_line(s,i) # don't use get_line: it is only for dumping.
		result += s[j:i]
	# Calculate the amount to be removed from each line.
	undent = self.getPythonIndent(s,i)
	if undent == 0: return s
	while i &lt; len(s):
		j = i ; i = skip_line(s,i) # don't use get_line: it is only for dumping.
		line = s[j:i]
		# trace(`line`)
		line = removeLeadingWhitespace(line,undent,c.tab_width)
		result += line
	return result</t>
<t tx="T1578">@language python

&lt;&lt; About the vnode and tnode classes &gt;&gt;
&lt;&lt; About clones &gt;&gt;

from leoGlobals import *
from leoUtils import *

class vnode:
	&lt;&lt; vnode members &gt;&gt;

class tnode:
	&lt;&lt; tnode members &gt;&gt;</t>
<t tx="T1579">@ The vnode and tnode classes represent most of the data contained in the outline. These classes are Leo's fundamental Model classes.

A vnode (visual node) represents a headline at a particular location on the screen. When a headline is cloned, vnodes must be copied. vnodes persist even if they are not drawn on the screen. Commanders call vnode routines to insert, delete and move headlines.

The vnode contains data associated with a headline, except the body text data which is contained in tnodes. A vnode contains headline text, a link to its tnode and other information. In leo.py, vnodes contain structure links: parent, firstChild, next and back ivars. To insert, delete, move or clone a vnode the vnode class just alters those links. The Commands class calls the leoTree class to redraw the outline pane whenever it changes. The leoTree class knows about these structure links; in effect, the leoTree and vnode classes work together. The implementation of vnodes is quite different in the Borland version of Leo. This does not affect the rest of the Leo. Indeed, vnodes are designed to shield Leo from such implementation details.

A tnode, (text node) represents body text: a tnode is shared by all vnodes that are clones of each other. In other words, tnodes are the unit of sharing of body text. The tnode class is more private than the vnode class. Most commanders deal only with vnodes, though there are exceptions.

Because leo.py has unlimited Undo commands, vnodes and tnodes can be deleted only when the window containing them is closed. Nodes are deleted indirectly. Several classes, including the vnode, tnode, leoFrame and leoTree classes, have destroy() routines. These destroy() routines merely clear links so that Python's and Tkinter's reference counting mechanisms will eventually delete vnodes, tnodes and other data when a window closes.

Leo uses several kinds of node indices. Leo's XML file format uses tnode indices to indicate which tnodes (t elements) belong to which vnodes (v elements). Such indices are required. Even if we duplicated the body text of shared tnodes within the file, the file format would still need an unambiguous way to denote that tnodes are shared.

Present versions of Leo recompute these tnodes indices whenever Leo writes any .leo file. Earlier versions of Leo remembered tnode indices and rewrote the same indices whenever possible. Those versions of Leo recomputed indices when executing the Save As and Save To commands, so using these commands was a way of "compacting" indices. The main reason for not wanting to change tnode indices in .leo files was to reduce the number of changes reported by CVS and other Source Code Control Systems. I finally abandoned this goal in the interest of simplifying the code. Also, CVS will likely report many differences between two versions of the same .leo file, regardless of whether tnode indices are conserved.

A second kind of node index is the clone index used in @+node sentinels in files derived from @file trees. As with indices in .leo files, indices in derived files are required so that Leo can know unambiguously which nodes are cloned to each other.

It is imperative that clone indices be computed correctly, that is, that tnode @+node sentinels have the same index if and only if the corresponding vnodes are cloned. Early versions of leo.py had several bugs involving these clone indices. Such bugs are extremely serious because they corrupt the derived file and cause read errors when Leo reads the @file tree. Leo must guarantee that clone indices are always recomputed properly. This is not as simple as it might appear at first. In particular, Leo's commands must ensure that @file trees are marked dirty whenever any changed is made that affects cloned nodes within the tree. For example, a change made outside any @file tree may make several @file trees dirty if the change is made to a node with clones in those @file trees.
</t>
<t tx="T1580">@ This is the design document for clones in Leo. It covers all important aspects of clones. Clones are inherently complex, and this paper will include several different definitions of clones and related concepts.

The following is a definition of clones from the user's point of view.

Definition 1

A clone node is a copy of a node that changes when the original changes. Changes to the children, grandchildren, etc. of a node are simultaneously made to the corresponding nodes contained in all cloned nodes. Clones are marked by a small clone arrow by its leader character.

As we shall see, this definition glosses over a number of complications. Note that all cloned nodes (including the original node) are equivalent. There is no such thing as a "master" node from which all clones are derived. When the penultimate cloned node is deleted, the remaining node becomes an ordinary node again.

Internally, the clone arrow is represented by a clone bit in the status field of the vnode. The Clone Node command sets the clone bits of the original and cloned vnodes when it creates the clone. Setting and clearing clone bits properly when nodes are inserted, deleted or moved, is non-trivial. We need the following machinery to do the job properly.

Two vnodes are joined if a) they share the same tnode (body text) and b) changes to any subtree of either joined vnodes are made to the corresponding nodes in all joined nodes.  For example, Definition 1 defines clones as joined nodes that are marked with a clone arrow.  Leo links all vnodes joined to each other in a circular list, called the join list. For any vnode n, let J(n) denote the join list of n, that is, the set of all vnodes joined to n. Again, maintaining the join lists in an outline is non-trivial.

The concept of structurally similar nodes provides an effective way of determining when two joined nodes should also have their cloned bit set.  Two joined nodes are structurally similar if a) their parents are distinct but joined and b) they are both the nth child of their (distinct) parents.  We can define cloned nodes using the concept of structurally similar nodes as follows:

Definition 2

Clones are joined vnodes such that at least two of the vnodes of J(n) are not structurally similar to each other. Non-cloned vnodes are vnodes such that all of the vnodes of J(n) are structurally similar. In particular, n is a non-cloned vnode if J(n) is empty.

Leo ensures that definitions 1 and 2 are consistent. Definition 1 says that changes to the children, grandchildren, etc. of a node are simultaneously made to the corresponding nodes contained in all cloned nodes. Making "corresponding changes" to the non-cloned descendents of all cloned nodes insures that the non-cloned joined nodes will be structurally similar. On the other hand, cloned nodes are never structurally similar. They are created as siblings, so they have the same parent with different "child indices."  To see how this works in practice, let's look at some examples.

Example 1

+ root
	+ a' (1)
	+ a' (2)

This example shows the simplest possible clone. A prime (') indicates a cloned node.  Node a in position (1) has just been cloned to produce a' in position (2). Clearly, these two cloned nodes are not structurally similar because their parents are not distinct and they occupy different positions relative to their common parent.

Example 2

If we add a node b to either a' node we get the following tree:

+ root
	+ a'
		+ b
	+ a'
		+ b

The b nodes are structurally similar because the a' nodes are joined and each b node is the first child of its parent.

Example 3

If we now clone either b, we will get:

+ root
	+ a'
		+ b' (1)
		+ b' (2)
	+ a'
		+ b' (1)
		+ b' (2)

All b' nodes must be clones because the nodes marked (1) are not structurally similar to the nodes marked (2).

Dependent nodes are nodes created or destroyed when corresponding linked nodes are created or destroyed in another tree. For example, going from example 1 to example 2 above, adding node b to either node a' causes another (dependent) node to be created as the ancestor of the other node a'. Similarly, going from example 2 to example 1, deleting node b from either node a' causes the other (dependent) node b to be deleted from the other node a'.  Cloned nodes may also be dependent nodes. In Example 3, all the b' nodes are dependent on any of the other b' nodes.

We can now give simple rules for inserting and deleting dependent vnodes when other vnodes are created, moved or destroyed. For the purposes of this discussion, moving a node is handled exactly like deleting the node then inserting the node; we need not consider moving nodes further.  We insert a new node n as the nth child of a parent node p as follows. We insert n, then for every node pi linked to p, we insert a dependent node ni as the nth child of pi. Each ni is linked to n. Clearly, each ni is structurally similar to n.  Similarly, it is easy to delete a node n that is the nth child of a parent node p. We delete each dependent node ni that is the nth child of any node pi linked to p. We then delete n.  When inserting or deleting any vnode n we must update its join list, J(n). Updating the join list is easy because the join list is circular: the entire list is accessible from any of its members.

Inserting or deleting nodes can cause the clone bits of all joined nodes to change in non-trivial ways. To see the problems that can arise, consider deleting any of the b' nodes from Example 3. We would be left with the tree in Example 2. There are two remaining b nodes, each with the clone bit set. Unless we know that both b nodes are structurally similar, there would be no way to conclude that we should clear the clone bits in each node. In order to update clone links properly we could examine many special cases, but there is an easier way. Because of definition 2, we can define a shouldBeCloned function that checks J(n) to see whether all nodes of J(n) are structurally similar.

Leo's XML file format does not contain join lists. This makes it easy to change a Leo file "by hand." If join lists were a part of the file, as they are in the Mac version of Leo, corrupting a join list would corrupt the entire file. It is easy to recreate the join lists when reading a file using a dedicated field in the tnode.  This field is the head of a list of all vnodes that points to the tnode. After reading all nodes, Leo creates this list with one pass through the vnodes.  Leo then convert each list to a circular list with one additional pass through the tnodes.
</t>
<t tx="T1581">&lt;&lt; tnode constants &gt;&gt;

@others</t>
<t tx="T1582">dirtyBit =		0x01
richTextBit =	0x02 # Determines whether we use &lt;bt&gt; or &lt;btr&gt; tags.
visitedBit =	0x04</t>
<t tx="T1583"># All params have defaults, so t = tnode() is valid.

def __init__ (self, index = 0, bodyString = None):

	self.bodyString = choose(bodyString, bodyString, "")
	self.joinHead = None # The head of the join list while a file is being read.
	self.statusBits = 0 # status bits
	self.fileIndex = index # The immutable file index for self tnode.
	self.selectionStart = 0 # The start of the selected body text.
	self.selectionLength = 0 # The length of the selected body text.
	self.cloneIndex = 0 # Zero for @file nodes</t>
<t tx="T1584">def __del__ (self):

	# Can't trace while destroying.
	# print "t.__del__"
	pass</t>
<t tx="T1585">def destroy (self):

	self.joinHead = None</t>
<t tx="T1586">def hasBody (self):

	return self.bodyString and len(self.bodyString) &gt; 0</t>
<t tx="T1587">def loadBodyPaneFromTnode(self, body):

	s = self.bodyString
	if s and len(s) &gt; 0:
		body.delete(1,"end")
		body.insert(1,s)
		#body.SetSelection(
			#self.selectionStart,
			#self.selectionStart + self.selectionLength)
	else:
		body.delete(1,"end")
		#self.selectionStart = self.selectionLength = 0</t>
<t tx="T1588">def isDirty (self):

	return (self.statusBits &amp; self.dirtyBit) != 0</t>
<t tx="T1589">def isRichTextBit (self):

	return (self.statusBits &amp; self.richTextBit) != 0</t>
<t tx="T1590">def isVisited (self):

	return (self.statusBits &amp; self.visitedBit) != 0</t>
<t tx="T1591">def saveBodyPaneToTnode (self, body):

	self.bodyString = body.GetValue()
	# Set the selection.
	i, j = body.GetSelection()
	if i &gt; j:
		temp = i
		i = j
		j = temp
	self.selectionStart = i
	self.selectionLength = j - i</t>
<t tx="T1592"># This sets the text in the tnode from the given string.

def setTnodeText (self, s):

	assert(type(s)==type(""))
	self.bodyString = s</t>
<t tx="T1593">def setSelection (self, start, length):

	self.selectionStart = start
	self.selectionLength = length</t>
<t tx="T1594">def clearDirty (self):

	self.statusBits &amp;= ~ self.dirtyBit</t>
<t tx="T1595">def clearRichTextBit (self):

	self.statusBits &amp;= ~ self.richTextBit</t>
<t tx="T1596">def clearVisited (self):

	self.statusBits &amp;= ~ self.visitedBit</t>
<t tx="T1597">def setDirty (self):

	self.statusBits |= self.dirtyBit</t>
<t tx="T1598">def setRichTextBit (self):

	self.statusBits |= self.richTextBit</t>
<t tx="T1599">def setVisited (self):

	self.statusBits |= self.visitedBit</t>
<t tx="T1600">def setCloneIndex (self, index):

	self.cloneIndex = index</t>
<t tx="T1601">def setFileIndex (self, index):

	self.fileIndex = index</t>
<t tx="T1602">def setJoinHead (self, v):

	self.joinHead = v</t>
<t tx="T1603">&lt;&lt; vnode constants &gt;&gt;

@others</t>
<t tx="T1604"># Define the meaning of vnode status bits.

# Archived...
clonedBit	 = 0x01 # true: vnode has clone mark.
# not used	 = 0x02
expandedBit  = 0x04 # true: vnode is expanded.
markedBit	 = 0x08 # true: vnode is marked
orphanBit	 = 0x10 # true: vnode saved in .leo file, not derived file.
selectedBit  = 0x20 # true: vnode is current vnode.
topBit		 = 0x40 # true: vnode was top vnode when saved.

# Not archived
visitedBit	 = 0x80</t>
<t tx="T1605">def __del__ (self):

	# Can't trace while destroying.
	# print "v.__del__" + `self`
	try:
		self.icon_id = None
	except: pass</t>
<t tx="T1606">def __repr__ (self):

	return "v: " + self.mHeadString</t>
<t tx="T1607">if 0: # not used
	def __cmp__(self,other):
		
		trace(`self` + "," + `other`)
		return not (self is other) # Must return 0, 1 or -1</t>
<t tx="T1608">@ Returns the filename following @file in the receivers's headline, or the empty string if the receiver is not an @file node.
@c

def atFileNodeName (self):

	h = self.mHeadString
	if match(h,0,"@file"):
		s = h[5:]
		return string.strip(s)
	else:
		return ""</t>
<t tx="T1609"># Returns true if the receiver's headline starts with @file.

def isAtFileNode (self):

	s = self.atFileNodeName()
	return len(s) &gt; 0</t>
<t tx="T1610">@ Returns true if the receiver contains @ignore in its body at the start of a line.
@c

def isAtIgnoreNode (self):

	flag, i = is_special(self.t.bodyString, 0, "@ignore")
	return flag</t>
<t tx="T1611">@ Returns true if the receiver contains @others in its body at the start of a line.
@c

def isAtOthersNode (self):

	flag, i = is_special(self.t.bodyString, 0, "@others")
	return flag</t>
<t tx="T1612">@ Returns true if the headline matches the pattern ignoring whitespace and case.  The headline may contain characters following the successfully matched pattern.
@c

def matchHeadline (self,pattern):

	h = string.lower(self.mHeadString)
	h = string.replace(h,' ','')
	h = string.replace(h,'\t','')

	p = string.lower(pattern)
	p = string.replace(p,' ','')
	p = string.replace(p,'\t','')

	# ignore characters in the headline following the match
	return p == h[0:len(p)]</t>
<t tx="T1613"># Converts the outline to a string in "MORE" format

def convertTreeToString (self):

	v = self
	level1 = v.level()
	after = v.nodeAfterTree()
	s = ""
	while v and v != after:
		s += v.moreHead(level1) + "\n"
		body = v.moreBody()
		if len(body) &gt; 0:
			s += body + "\n"
		v = v.threadNext()
	return s</t>
<t tx="T1614"># Returns the headline string in MORE format.

def moreHead (self, firstLevel):

	v = self
	level = self.level() - firstLevel
	if level &gt; 0: s = "\t" * level
	else: s = ""
	s += choose(v.hasChildren(), "+ ", "- ")
	s += v.headString()
	return s</t>
<t tx="T1615">@ Returns the body string in MORE format.  It inserts a backslash before any leading plus, minus or backslash.
@c

def moreBody (self):

	v = self ; list = []
	for ch in v.t.bodyString:
		if ch == '+' or ch == '-' or ch == '\\':
			list.append('\\')
		list.append(ch)
	return string.join(list,'')</t>
<t tx="T1616"># Compatibility routine for scripts

def bodyString (self):

	return self.t.bodyString</t>
<t tx="T1617"># childIndex and nthChild are zero-based.

def childIndex (self):

	parent=self.parent()
	if not parent: return 0

	child = parent.firstChild()
	n = 0
	while child:
		if child == self: return n
		n += 1 ; child = child.next()
	assert(false)</t>
<t tx="T1618"># Compatibility routine for scripts

def firstChild (self):

	return self.mFirstChild</t>
<t tx="T1619">def hasChildren (self):

	return self.firstChild() != None</t>
<t tx="T1620"># Compatibility routine for scripts

def lastChild (self):

	child = self.firstChild()
	while child and child.next():
		child = child.next()
	return child</t>
<t tx="T1621"># childIndex and nthChild are zero-based.

def nthChild (self, n):

	child = self.firstChild()
	if not child: return None
	while n &gt; 0 and child:
		n -= 1
		child = child.next()
	return child</t>
<t tx="T1622">def numberOfChildren (self):

	n = 0
	child = self.firstChild()
	while child:
		n += 1
		child = child.next()
	return n</t>
<t tx="T1623"># Compatibility routine for scripts

def currentVnode (self):

	return self.commands.tree.currentVnode</t>
<t tx="T1624"># Compatibility routine for scripts

def findRoot (self):

	return self.commands.tree.rootVnode
</t>
<t tx="T1625">def getJoinList (self):

	return self.joinList</t>
<t tx="T1626"># Compatibility routine for scripts

def headString (self):

	return self.mHeadString

</t>
<t tx="T1627">def isAncestorOf (self, v):

	if not v:
		return false
	v = v.parent()
	while v:
		if v == self:
			return true
		v = v.parent()
	return false</t>
<t tx="T1628">def isRoot (self):

	return not self.parent() and not self.back()</t>
<t tx="T1629">def isCloned (self):

	return ( self.statusBits &amp; vnode.clonedBit ) != 0</t>
<t tx="T1630">def isDirty (self):

	return self.t.isDirty()</t>
<t tx="T1631">def isExpanded (self):

	return ( self.statusBits &amp; self.expandedBit ) != 0</t>
<t tx="T1632">def isMarked (self):

	return ( self.statusBits &amp; vnode.markedBit ) != 0</t>
<t tx="T1633">def isOrphan (self):

	return ( self.statusBits &amp; vnode.orphanBit ) != 0</t>
<t tx="T1634">def isSelected (self):

	return ( self.statusBits &amp; vnode.selectedBit ) != 0</t>
<t tx="T1635">def isTopBitSet (self):

	return ( self.statusBits &amp; self.topBit ) != 0</t>
<t tx="T1636"># Returns true if all parents are expanded.

def isVisible (self):

	v = self.parent()
	while v:
		if not v.isExpanded():
			return false
		v = v.parent()
	return true</t>
<t tx="T1637">def isVisited (self):

	return ( self.statusBits &amp; vnode.visitedBit ) != 0</t>
<t tx="T1638">def status (self):

	return self.statusBits</t>
<t tx="T1639"># Compatibility routine for scripts

def back (self):

	return self.mBack</t>
<t tx="T1640">def lastNode (self):

	v = self
	level = self.level()
	result = None

	while v:
		result = v
		v = v.threadNext()
		if not v or v.level() &lt;= level:
			break

	return result</t>
<t tx="T1641">@ This function returns the indentation level of the receiver. The root nodes have level 0, their children have level 1, and so on.
@c

def level (self):

	level = 0 ; parent = self.parent()
	while parent:
		level += 1
		parent = parent.parent()
	return level</t>
<t tx="T1642"># Compatibility routine for scripts

def next (self):

	return self.mNext</t>
<t tx="T1643"># Returns the vnode following the tree whose root is the receiver.

def nodeAfterTree (self):

	next = self.next()
	p = self.parent()

	while not next and p:
		next = p.next()
		p = p.parent()

	return next</t>
<t tx="T1644"># Compatibility routine for scripts

def parent (self):

	return self.mParent</t>
<t tx="T1645"># Returns the previous element of the outline, or None if at the start of the outline.

def threadBack (self):

	back = self.back()
	if back:
		lastChild = back.lastChild()
		if lastChild:
			return lastChild.lastNode()
		else:
			return back
	else:
		return self.parent()</t>
<t tx="T1646">def threadNext (self):

	"""Returns node following the receiver in "threadNext" order.
	This should be called whenever v's links change"""
	
	v = self
	
	if v.firstChild():
		return v.firstChild()
	elif v.next():
		return v.next()
	else:
		p = v.parent()
		while p:
			if p.next():
				return p.next()
			p = p.parent()
		return None</t>
<t tx="T1647">def visBack (self):

	v = self.threadBack()
	while v and not v.isVisible():
		v = v.threadBack()
	return v</t>
<t tx="T1648">def visNext (self):

	v = self.threadNext()
	while v and not v.isVisible():
		v = v.threadNext()
	return v</t>
<t tx="T1649">def appendStringToBody (self, s):

	if len(s) == 0: return
	body = self.t.bodyString + s
	self.setBodyStringOrPane(body)</t>
<t tx="T1650">def setBodyStringOrPane (self, s):

	v = self ; c = v.commands
	if not c or not v: return
	if v == c.currentVnode():
		c.frame.body.delete("1.0","end")
		c.frame.body.insert("1.0", s) # Replace the body text with s.
		c.recolor()
	# Keep the body text in the tnode up-to-date.
	if v.t.bodyString != s: # 3/4/02
		v.t.setTnodeText(s)
		v.t.setSelection(0,0)
		v.setDirty()
		if not c.isChanged():
			c.setChanged(true)

setBodyTextOrPane = setBodyStringOrPane # Compatibility with old scripts</t>
<t tx="T1651">def setHeadString(self, s):

	if not s: s = ""
	self.mHeadString = s
	self.setDirty()

def initHeadString (self, s):

	if not s: s = ""
	self.mHeadString = s</t>
<t tx="T1652"># Compatibility routine for scripts

def setHeadStringOrHeadline (self, s):

	c = self.commands
	c.endEditing()
	self.setHeadString(s)</t>
<t tx="T1653">def computeIcon (self):

	val = 0 ; v = self
	if v.t.hasBody(): val += 1
	if v.isMarked(): val += 2
	if v.isCloned(): val += 4
	if v.isDirty(): val += 8
	return val
	
def setIcon (self):

	pass # Compatibility routine for old scripts</t>
<t tx="T1654"># Compatibility routine for scripts

def clearAllVisited (self):
	
	self.commands.clearAllVisited()
</t>
<t tx="T1655">def clearAllVisitedInTree (self):

	v = self ; c = v.commands
	after = v.nodeAfterTree()
	
	c.beginUpdate()
	while v and v != after:
		v.clearVisited()
		v.t.clearVisited()
		v = v.threadNext()
	c.endUpdate()
</t>
<t tx="T1656">def clearClonedBit (self):

	self.statusBits &amp;= ~ self.clonedBit</t>
<t tx="T1657">def clearDirty (self):

	v = self
	v.t.clearDirty()

def clearDirtyJoined (self):

	v = self ; c = v.commands
	c.beginUpdate()
	if 1: # update range
		v.t.clearDirty()
		v2 = v.getJoinList()
		while v2 and v2 != self:
			v2.t.clearDirty()
			v2 = v2.getJoinList()
	c.endUpdate() # recomputes all icons</t>
<t tx="T1658">def clearMarked (self):

	self.statusBits &amp;= ~ self.markedBit</t>
<t tx="T1659">def clearOrphan (self):

	self.statusBits &amp;= ~ self.orphanBit</t>
<t tx="T1660">def clearVisited (self):

	self.statusBits &amp;= ~ self.visitedBit</t>
<t tx="T1661">def clearVisitedInTree (self):

	after = self.nodeAfterTree()
	v = self
	while v and v != after:
		v.clearVisited()
		v = v.threadNext()</t>
<t tx="T1662">def contract(self):

	self.statusBits &amp;= ~ self.expandedBit

def expand(self):

	self.statusBits |= self.expandedBit

def initExpandedBit (self):

    self.statusBits |= self.expandedBit</t>
<t tx="T1663">def initStatus (self, status):

	self.statusBits = status</t>
<t tx="T1664">def setClonedBit (self):

	self.statusBits |= self.clonedBit

def initClonedBit (self, val):

	if val:
		self.statusBits |= self.clonedBit
	else:
		self.statusBits &amp;= ~ self.clonedBit</t>
<t tx="T1665">def setMarked (self):

	self.statusBits |= self.markedBit

def initMarkedBit (self):

	self.statusBits |= self.markedBit</t>
<t tx="T1666">def setOrphan (self):

	self.statusBits |= self.orphanBit</t>
<t tx="T1667"># This only sets the selected bit.

def setSelected (self):

	self.statusBits |= self.selectedBit</t>
<t tx="T1668"># Compatibility routine for scripts

def setVisited (self):

	self.statusBits |= self.visitedBit</t>
<t tx="T1669">def setJoinList (self, v):

	assert(not self.joinList)
	self.joinList = v</t>
<t tx="T1670">def setSelection (self, start, length):

	self.t.setSelection ( start, length )</t>
<t tx="T1671">def setT (self, t):

	if t != self:
		del self.t
		self.t = t</t>
<t tx="T1672">@ This trims trailing blank lines from a node.  It is surprising difficult to do this during Untangle.
@c

def trimTrailingLines (self):

	v = self
	body = v.bodyString()
	# trace(`body`)
	lines = string.split(body,'\n')
	i = len(lines) - 1 ; changed = false
	while i &gt;= 0:
		line = lines[i]
		j = skip_ws(line,0)
		if j + 1 == len(line):
			del lines[i]
			i -= 1 ; changed = true
		else: break
	if changed:
		body = string.join(body,'') + '\n' # Add back one last newline.
		# trace(`body`)
		v.setBodyStringOrPane(body)
		# Don't set the dirty bit: it would just be annoying.</t>
<t tx="T1673"># Creates a clone of back and insert it as the next sibling of back.

def clone (self, back):

	clone = self.cloneTree(back)
	clone.createDependents()
	# Set the clone bit in all nodes joined to back.
	clone.setClonedBit()
	back.setClonedBit()
	v = back.joinList
	while v and v != back:
		v.setClonedBit()
		v = v.joinList
	return clone</t>
<t tx="T1674">@ This is the main delete routine.  It deletes the receiver's entire tree from the screen.  Because of the undo command we never actually delete vnodes or tnodes.
@c

def doDelete (self, newVnode):

	"""Unlinks the receiver, but does not destroy it. May be undone"""

	v = self ; c = v.commands
	v.setDirty() # 1/30/02: mark @file nodes dirty!
	v.destroyDependents()
	v.unjoinTree()
	v.unlink()
	# Bug fix: 1/18/99: we must set the currentVnode here!
	c.selectVnode(newVnode)
	# Update all clone bits.
	c.initAllCloneBits()
	return self # We no longer need dvnodes: vnodes contain all needed info.</t>
<t tx="T1675">def insertAsLastChild (self,t = None):

	"""Inserts a new vnode as the last child of the receiver"""

	n = self.numberOfChildren()
	if not t:
		t = tnode()
	return self.insertAsNthChild(n,t)</t>
<t tx="T1676">def insertAsNthChild (self, n, t=None):

	"""Inserts a new node as the the nth child of the receiver.
	The receiver must have at least n-1 children"""

	# trace(`n` + `self`)
	if not t: t = tnode()
	v = vnode(self.commands,t)
	v.mHeadString = "NewHeadline"
	v.iconVal = 0
	v.linkAsNthChild(self,n)
	return v</t>
<t tx="T1677"># Restores (relinks) the dv tree in the position described by back and parent.

def restoreOutlineFromDVnodes (self, dv, parent, back):

	if back:
		dv.linkAfter(back)
	elif parent:
		dv.linkAsNthChild(parent, 0)
	else:
		dv.linkAsRoot()
	return dv</t>
<t tx="T1678">@ This function joins all nodes in the receiver and tree2.  This code makes no assumptions about the two trees, and some or all of the nodes may already have been joined.  The assert's guarantee that both trees have the same topology.
@c

def joinTreeTo (self, tree2):

	tree1 = self
	assert(tree2)
	# Join the roots.
	tree1.joinNodeTo ( tree2 )
	# Recursively join all subtrees.
	child1 = tree1.firstChild()
	child2 = tree2.firstChild()
	while child1:
		assert(child2)
		child1.joinTreeTo(child2)
		child1 = child1.next()
		child2 = child2.next()
	assert(child2 == None)</t>
<t tx="T1679">@ This function returns true if the receiver should be a clone.  This can be done quickly using the receiver's join list.

The receiver is a clone if and only it is structurally _dissimilar_ to a node joined to it.  Structurally _similar_ joined nodes have non-null, distinct and joined parents, and have the same child indices.

9/16/99 We now return the node that proves that the receiver should be a clone.  This allows us to dispense with the old "survivor" logic in commands::deleteHeadline.
@c

def shouldBeClone (self,verbose=0):

	p = self.parent()
	n = self.childIndex()
	if verbose:
		v = self.joinList
		es("shouldBeClone: self,self.parent():"+`self`+","+`self.parent()`)
		es("shouldBeClone: joinlist of self:")
		while v and v != self:
			es("v,v.parent():"+`v`+","+`v.parent()`)
			v=v.joinList

	v = self.joinList
	while v and v != self:
		vp = v.parent()
		if 0: # verbose:
			es("shouldBeClone:" + `v`)
			es("shouldBeClone: p,vp:" + `p` + "," + `vp`)
			es("shouldBeClone: join:" + `p.isJoinedTo(vp)`)
			es("shouldBeClone: indices:" + `n` + "," + `v.childIndex()`)
		if ( # self and v are sturcturally dissimilar if...
			(not p or not vp) or  # they are at the top level, or
			vp == p or  # have the same parent, or
			not p.isJoinedTo(vp) or  # have unjoined parents, or
			(v.childIndex() != n)): # have different child indices.
			if verbose: es("shouldBeClone returns true")
			return true
		v = v.joinList

	# The receiver is structurally similar to all nodes joined to it.
	if verbose: es("shouldBeClone returns false")
	return false</t>
<t tx="T1680"># This routine checks the structure of the receiver's tree.

def validateOutlineWithParent (self, p):

	result = true # optimists get only unpleasant surprises.
	parent = self.parent()
	childIndex = self.childIndex()
	&lt;&lt; validate parent ivar &gt;&gt;
	&lt;&lt; validate childIndex ivar &gt;&gt;
	&lt;&lt; validate x ivar &gt;&gt;

	# Recursively validate all the children.
	child = self.firstChild()
	while child:
		r = child.validateOutlineWithParent ( self )
		if not r: result = false
		child = child.next()
	return result</t>
<t tx="T1681">if parent != p:
	self.invalidOutline ( "Invalid parent link: " + parent.description() )</t>
<t tx="T1682">if p:
	if childIndex &lt; 0:
		self.invalidOutline ( "missing childIndex" + childIndex )
	elif childIndex &gt;= p.numberOfChildren():
		self.invalidOutline ( "missing children entry for index: " + childIndex )
elif childIndex &lt; 0:
	self.invalidOutline ( "negative childIndex" + childIndex )</t>
<t tx="T1683">if not self.t and p:
	self.invalidOutline ( "Empty t" )</t>
<t tx="T1684"># This method creates a cloned tree after oldTree.

def cloneTree (self, oldTree):
	# Create a new tree following oldTree.
	newTree = self.insertAfter(oldTree.t)
	newTree.initHeadString (oldTree.mHeadString)
	self.copyTree(oldTree, newTree)
	# Join the trees and copy clone bits.
	oldTree.joinTreeTo(newTree)
	oldTree.copyCloneBitsTo(newTree)
	return newTree</t>
<t tx="T1685"># This methods propagates clone bits from the receiver's tree to tree2.

def copyCloneBitsTo (self, tree2):

	tree1 = self
	assert(tree2)
	# Set the bit in the root.
	if tree1.isCloned():
		tree2.setClonedBit()
	else:
		tree2.clearClonedBit()
	# Recursively set the bits in all subtrees.
	child1 = tree1.firstChild()
	child2 = tree2.firstChild()
	while child1:
		assert(child2)
		if child1.isCloned():
			child2.setClonedBit()
		else:
			child2.clearClonedBit()
		child1 = child1.next()
		child2 = child2.next()
	assert(child2 == None)</t>
<t tx="T1686"># This method creates all nodes that depend on the receiver.
def createDependents (self):

	v = self ; t = v.t ; parent = v.parent()
	if not parent: return
	# Copy v as the nth child of all nodes joined to parent.
	n = v.childIndex()
	# trace(`n` + ", " + `v`)
	p = parent.joinList
	while p and p != parent:
		copy = p.insertAsNthChild(n, t)
		copy.mHeadString = v.mHeadString
		copy.iconWithVal = v.iconVal
		self.copyTree(v, copy)
		v.joinTreeTo(copy)
		p = p.joinList</t>
<t tx="T1687"># Destroys all dependent vnodes and tree nodes associated with the receiver.

def destroyDependents (self):

	parent = self.parent()
	if not parent: return
	# Destroy the nth child of all nodes joined to the receiver's parent.
	n = self.childIndex()
	join = parent.joinList
	# trace(`n` + ", " + `self`)
	while join and join != parent:
		child = join.nthChild(n)
		if child:
			child.unjoinTree()
			child.unlink()
			child.destroyTree()
		join = join.joinList</t>
<t tx="T1688">@ This method destroys (irrevocably deletes) a vnode tree.

This code should be called only when it is no longer possible to undo a previous delete.  It is always valid to destroy dependent trees.
@c

def destroyTree (self):

	pass</t>
<t tx="T1689">def invalidOutline (self, message):

	s = "invalid outline: " + message + "\n"
	parent = self.parent()

	if parent:
		s += `parent`
	else:
		s += `self`

	alert ( s )</t>
<t tx="T1690">def isJoinedTo (self, v):

	return v and self.t == v.t</t>
<t tx="T1691"># Returns true if the nodes v1 and v2 are on the same join list.
def isOnJoinListOf (self, v2):

	v1 = self
	assert(v2 and v1.t and v2.t)
	
	# v1 and v2 must share the same tnode.
	if v1.t != v2.t: return false
	
	# v1 and v2 must have join lists.
	if not v1.joinList or not v2.joinList: return false
	
	# Return true if v2 is on v1's join list.
	v = v1.joinList
	while v and v != v1:
		if v == v2: return true
		v = v.joinList

	return false</t>
<t tx="T1692">@ This method joins the receiver to v2 if the two nodes have not already been joined. Joining involves placing each vnode on the others join list.
@c

def joinNodeTo (self, v2):

	v1 = self
	if v1.isOnJoinListOf(v2): return # 12/17/01: fix same bug as in LeoCB

	j1 = v1.joinList
	j2 = v2.joinList
	if j1 and j2:
		# Swapping pointers joins the two cycles.
		v1.joinList = j2  # Neither join list is None.
		v2.joinList = j1
	elif j1:
		v2.joinList = j1  # Link v2 after v1.
		v1.joinList = v2
	elif j2:
		v1.joinList = j2  # Link v1 after v2.
		v2.joinList = v1
	else:
		v1.joinList = v2  # point v1 and v2 at each other.
		v2.joinList = v1
	assert(v1.joinList and v2.joinList)</t>
<t tx="T1693"># Links the receiver after v.

def linkAfter (self, v):

	# trace(`v`)
	self.mParent = v.mParent
	self.mBack = v
	self.mNext = v.mNext
	v.mNext = self
	if self.mNext:
		self.mNext.mBack = self</t>
<t tx="T1694">def linkAsNthChild (self, p, n):

	"""Links the receiver as the n'th child of p"""

	v = self
	# trace(`v` + ", " + `p` + ", " + `n`)
	v.mParent = p
	if n == 0:
		v.mBack = None
		v.mNext = p.mFirstChild
		if p.mFirstChild:
			p.mFirstChild.mBack = v
		p.mFirstChild = v
	else:
		prev = p.nthChild(n-1) # zero based
		assert(prev)
		v.mBack = prev
		v.mNext = prev.mNext
		prev.mNext = v
		if v.mNext:
			v.mNext.mBack = v</t>
<t tx="T1695">def unlink (self):

	"""Unlinks the receiver from the tree before moving or deleting."""
	v = self ; c = v.commands ; tree = c.tree
	
	# trace(`v.mParent`+", child:"+`v.mFirstChild`+", back:"+`v.mBack`+", next:"+`v.mNext`)
	
	# Special case the root
	if v == tree.rootVnode:
		if not v.mNext: return # Should never happen.
		tree.rootVnode = v.mNext

	# Clear the links in other nodes
	if v.mBack:
		v.mBack.mNext = v.mNext
	if v.mNext:
		v.mNext.mBack = v.mBack
	if v.mParent and v == v.mParent.mFirstChild:
		v.mParent.mFirstChild = v.mNext

	# Clear the links in this node
	v.mParent = v.mNext = v.mBack = None</t>
<t tx="T1696">@ This code carefully unlinks the receiver from its join list.  We can not assume that all such links will eventually be cleared.
@c

def unjoinNode (self):

	next = self.joinList
	if not next: return

	if next.joinList == self:
		# The list contains only two elements.
		next.joinList = None
		self.joinList = None
	else:
		prev = None
		&lt;&lt; Set prev to the node that points to self &gt;&gt;
		# Remove self from the join list.
		prev.joinList = next
		self.joinList = None</t>
<t tx="T1697">@ We guard against any cycles in the join list, which would cause self loop to hang.  It's much better to cause an assert to fail.
@c

self.commands.clearAllVisited()

prev = next
while prev and prev.joinList != self:
	assert(not prev.isVisited())
	prev.setVisited()
	prev = prev.joinList</t>
<t tx="T1698"># This function unjoins all nodes of the receiver's tree.

def unjoinTree (self):

	v = self
	after = self.nodeAfterTree()
	while v and v != after:
		v.unjoinNode()
		v = v.threadNext()</t>
<t tx="T1699">@language python

from leoGlobals import *
from leoUtils import *
import string, Tkinter

# Public constants used for defaults when leoConfig.txt can not be read.
default_page_width = 132
default_tab_width = 4
default_target_language = python_language
default_default_directory = None

ivars = [
	"tangle_batch_flag", "untangle_batch_flag",
	"use_header_flag", "output_doc_flag",
	"tangle_directory", "page_width", "tab_width",
	"target_language" ]

class LeoPrefs:
	@others</t>
<t tx="T1700">def onOK (self):
	app().config.setConfigIvars(self.commands)
	app().config.update()
	self.top.destroy()
	
def onCancel (self):
	c = self.commands
	&lt;&lt; restore options &gt;&gt;
	self.init(c)
	self.set_ivars(c)
	self.top.destroy()

def onRevert (self):
	c = self.commands
	&lt;&lt; restore options &gt;&gt;
	self.init(c)
	self.set_ivars(c)</t>
<t tx="T1701"># Global options
c.tangle_batch_flag = self.revert_tangle_batch_flag
c.untangle_batch_flag = self.revert_untangle_batch_flag
c.page_width = self.revert_page_width
c.tab_width = self.revert_tab_width
# Default Tangle Options
c.tangle_directory = self.revert_tangle_directory
c.output_doc_flag = self.revert_output_doc_flag
c.use_header_flag = self.revert_use_header_flag
# Default Target Language
c.target_language = self.revert_target_language</t>
<t tx="T1702">@language python

# Tangle and Untangle.

from leoGlobals import *
from leoUtils import *
import os,string

&lt;&lt; about Tangle and Untangle &gt;&gt;
&lt;&lt; constants &amp; synonyms &gt;&gt;
&lt;&lt; define node classes &gt;&gt;

class tangleCommands:
	&lt;&lt; tangleCommands methods &gt;&gt;</t>
<t tx="T1703">@ The Tangle command translates the selected @root tree into one or more well-formatted C source files. The outline should contain directives, sections references and section definitions, as described in Chapter 4. The Untangle command is essentially the reverse of the Tangle command. The Tangle command creates a derived file from an @root tree; the Untangle command incorporates changes made to derived files back into the @root tree.

The Tangle command operates in two passes. The first pass discovers the complete definitions of all sections and places these definitions in a symbol table. The first pass also makes a list of root sections. Definitions can appear in any order, so we must scan the entire input file to know whether any particular definition has been completed.

Tangle's second pass creates one file for each @root node. Tangle rescans each section in the list of roots, copying the root text to the output and replacing each section reference by the section's definition. This is a recursive process because any definition may contain other references. We can not allow a section to be defined in terms of itself, either directly or indirectly. We check for such illegally recursive definitions in pass 2 using the section stack class.  Tangle indicates where sections begin and end using comment lines called sentinel lines.  The this part of the appendix discusses the format of the sentinels output by the Tangle command.

The key design principle of the Tangle command is this: Tangle must output newlines in a context-free manner. That is, Tangle must never output conditional newlines, either directly or indirectly. Without this rule Untangle could not determine whether to skip or copy newlines.

The Tangle command increases the indentation level of a section expansion the minimum necessary to align the section expansion with the surrounding code. In essence, this scheme aligns all section expansions with the line of code in which the reference to the section occurs. In some cases, several nested sections expansions will have the same indentation level. This can occur, for example, when a section reference in an outline occurs at the left margin of the outline.

This scheme is probably better than more obvious schemes that indent more "consistently." Such schemes would produce too much indentation for deeply nested outlines. The present scheme is clear enough and avoids indentation wherever possible, yet indents sections adequately. End sentinel lines make this scheme work by making clear where the expansion of one section ends and the expansion of a containing section resumes.

Tangle increases indentation if the section reference does not start a line. Untangle is aware of this hack and adjusts accordingly. This extra indentation handles several common code idioms, which otherwise would create under-indented code. In short, Tangle produces highly readable, given the necessity of preserving newlines for Untangle.

Untangle is inherently complex.  It must do a perfect job of updating the outline, especially whitespace, from expansions of section definitions created by the Tangle command.  Such expansions need not be identical because they may have been generated at different levels of indentation.  The Untangle command can not assume that all expansions of a section will be identical in the derived file; within the derived file, the programmer may have made incompatible changes to two different expansions of the same section. Untangle must check to see that all expansions of a section are "equivalent".  As an added complication, derived files do not contain all the information found in @root trees.  @root trees may contain headlines that generate no code at all.  Also, an outline may define a section in several ways: with an @c or @code directive or with a section definition line.  To be useful, Untangle must handle all these complications flawlessly. The this part of the appendix discusses the various conventions used in the sentinels output by the Tangle command.  These conventions allow the Untangle command to recreate whitespace correctly.

Untangle operates in two passes. The first pass finds definitions in the derived file and enters them into the Untangle Symbol Table, or UST.   Definitions often include references to other sections, so definitions often include nested definitions of referenced sections. The first pass of Untangle uses a definition stack to keep track of nested definitions. The top of the stack represents the definition following the latest reference, except for the very first entry pushed on the stack, which represents the code in the outline that contains the @root directive. The stack never becomes empty because of the entry for the @root section. All definitions of a section should match--otherwise there is an inconsistent definition. This pass uses a forgiving compare routine that ignores differences that do not affect the meaning of a program.

Untangle's second pass enters definitions from the outline into the Tangle Symbol Table, or TST. The second pass simultaneously updates all sections in the outline whose definition in the TST does not match the definition in the UST.  The central coding insight of the Untangle command is that the second pass of Untangle is almost identical to the first pass of Tangle! That is, Tangle and Untangle share key parts of code, namely the skip_body() method and its allies.  Just when skip_body() enters a definition into the symbol table, all the information is present that Untangle needs to update that definition.
</t>
<t tx="T1704"># Synonyms for multiple_parts_flag.
allow_multiple_parts = 1
disallow_multiple_parts = 2
unused_parts_flag = 3

# Synonyms for root_flag to st_enter.
is_root_name = 1 ; not_root_name = 0

# Synonyms for scanAllDirectives
report_errors = 1 ; dont_report_errors = 0
require_path = 1 ; done_require_path = 0

# Synonyms for verbose_flag.
verbose = true ; brief = 0

# Constants...
max_errors = 20

@ All these must be defined together, because they form a single enumeration.  Some of these are used by utility functions.
@c

if 1: # A single enum...

	# Used by token_type().
	plain_line = 1 # all other lines
	at_at	     = 2 # double-at sign.
	at_chapter = 3 # @chapter
	# at_c       = 4 # @c in noweb mode
	at_code	   = 5 # @code, or @c or @p in CWEB mode.
	at_doc	    = 6 # @doc
	at_other   = 7 # all other @directives
	at_root	   = 8 # @root or noweb * sections
	at_section = 9 # @section
	# at_space   = 10 # @space
	at_web	    = 11 # any CWEB control code, except at_at.
	
	# Returned by self.skip_section_name() and allies and used by token_type.
	bad_section_name = 12  # &lt; &lt; with no matching &gt; &gt;
	section_ref	 = 13  # &lt; &lt; name &gt; &gt;
	section_def	 = 14  # &lt; &lt; name &gt; &gt; =
	
	# Returned by is_sentinal_line.
	non_sentinel_line   = 15
	start_sentinel_line = 16
	end_sentinel_line   = 17</t>
<t tx="T1705">class tst_node:
	&lt;&lt; tst_node methods &gt;&gt;
	
class part_node:
	&lt;&lt; part_node methods &gt;&gt;

class ust_node:
	&lt;&lt; ust_node methods &gt;&gt;
	
class def_node:
	&lt;&lt; def_node methods &gt;&gt;</t>
<t tx="T1706">@others</t>
<t tx="T1707">def __init__ (self,name,root_flag):

	# trace("tst_node.__init__" + `name`)
	self.name = name
	self.is_root = root_flag
	self.referenced = false
	self.parts = []</t>
<t tx="T1708">def __repr__ (self):

	return "tst_node:" + self.name</t>
<t tx="T1709">@others</t>
<t tx="T1710">def __init__ (self,name,code,doc,is_root,is_dirty):

	# trace("part_node.__init__" + `name`)
	self.name = name # Section or file name.
	self.code = code # The code text.
	self.doc = doc # The doc text.
	self.is_dirty = is_dirty # true: vnode for body text is dirty.
	self.is_root = is_root # true: name is a root name.</t>
<t tx="T1711">def __repr__ (self):

	return "part_node:" + self.name</t>
<t tx="T1712">@others</t>
<t tx="T1713">@ The text has been masssaged so that 1) it contains no leading indentation and 2) all code arising from section references have been replaced by the reference line itself.  Text for all copies of the same part can differ only in non-critical white space.
@c

def __init__ (self,name,code,part,of,nl_flag,update_flag):

	# trace("ust_node.__init__", `name` +":"+ `part`)
	self.name = name # section name
	self.parts = {} # parts dict
	self.code = code # code text
	self.part = part # n in "(part n of m)" or zero.
	self.of = of  # m in "(part n of m)" or zero.
	self.nl_flag = nl_flag  # true: section starts with a newline.
	self.update_flag = update_flag # true: section corresponds to a section in the outline.</t>
<t tx="T1714">def __repr__ (self):

	return "ust_node:" + self.name</t>
<t tx="T1715">@others</t>
<t tx="T1716">@ The text has been masssaged so that 1) it contains no leading indentation and 2) all code arising from section references have been replaced by the reference line itself.  Text for all copies of the same part can differ only in non-critical white space.
@c

def __init__ (self,name,indent,part,of,nl_flag,code):

	if 0:
		trace("def_node.__init__",
			"name:" + name + ", part:" + `part` + ", of:" + `of` + ", indent:" + `indent`)
	self.name = name
	self.indent = indent
	self.code = code
	if self.code == None: self.code = ""
	self.part = part
	self.of = of
	self.nl_flag = nl_flag</t>
<t tx="T1717">def __repr__ (self):

	return "def_node:" + self.name</t>
<t tx="T1718">@others</t>
<t tx="T1719">def __init__ (self,commands):

	self.commands = commands
	self.init_ivars()</t>
<t tx="T1720">@ Only top-level drivers initialize ivars.
</t>
<t tx="T1721">def initTangleCommand (self):

	c = self.commands
	c.endEditing()
	
	es("Tangling...")
	c.setIvarsFromPrefs()
	self.init_ivars()
	self.tangling = true</t>
<t tx="T1722">def initUntangleCommand (self):

	c = self.commands
	c.endEditing()
	
	es("Untangling...")
	c.setIvarsFromPrefs()
	self.init_ivars()
	self.tangling = false</t>
<t tx="T1723">def tangle(self):

	c = self.commands ; v = c.currentVnode()
	self.initTangleCommand()
	self.tangleTree(v,report_errors)
	es("Tangle complete")</t>
<t tx="T1724">@ This is the main routine of pass 1. It traverses the tree whose root is given, handling each headline and associated body text.
@c

def tanglePass1(self,v):

	next = v.nodeAfterTree()
	
	while v and v != next:
		self.v = v
		self.setRootFromHeadline(v)
		bits, dict = is_special_bits(v.bodyString(),[self.head_root])
		is_ignore = (bits &amp; ignore_bits)!= 0
		if is_ignore:
			v = v.nodeAfterTree()
			continue
		# This must be called after root_name has been set.
		if self.tangling:
			self.scanAllDirectives(v,require_path,report_errors) # calls init_directive_ivars.
		# Scan the headline and body text.
		self.skip_headline(v)
		self.skip_body(v)
		v = v.threadNext()
		if self.errors &gt;= max_errors:
			es("----- Halting Tangle: too many errors")
			break

	if self.tangling:
		self.st_check()
		# trace(self.st_dump(verbose))</t>
<t tx="T1725"># At this point v is the root of the tree that has been tangled.

def tanglePass2(self):

	self.v = None # self.v is not valid in pass 2.

	if self.errors &gt; 0:
		es("----- No file written because of errors")
	elif self.root_list == None:
		es("----- The outline contains no roots")
	else:
		self.put_all_roots() # pass 2 top level function.</t>
<t tx="T1726">def untangle(self):

	c = self.commands ; v = c.currentVnode()
	self.initUntangleCommand()
	
	c.beginUpdate()
	self.untangleTree(v,report_errors)
	c.endUpdate()
	es("Untangle complete")</t>
<t tx="T1727">def untangleAll(self):

	c = self.commands ; v = c.rootVnode()
	self.initUntangleCommand()
	has_roots = false

	c.beginUpdate()
	while v:
		ok = self.untangleTree(v,false)
		if ok: has_roots = true
		v = v.next()
	c.endUpdate()
	
	if not has_roots:
		es("----- The outline contains no roots")
	elif self.errors &gt; 0:
		es("----- Untangle command halted because of errors")
	else:
		es("Untangle complete")</t>
<t tx="T1728">def untangleMarked(self):

	c = self.commands ; v = c.rootVnode()
	self.initUntangleCommand()
	marked_flag = false

	c.beginUpdate()
	while v:
		if v.isMarked():
			ok = self.untangleTree(v,dont_report_errors)
			if ok: marked_flag = true
			if self.errors &gt; 0: break
			v = v.nodeAfterTree()
		else: v = v.threadNext()
	c.endUpdate()

	if not marked_flag:
		es("----- The outline contains no marked roots")
	elif self.errors &gt; 0:
		es("----- Untangle command halted because of errors")
	else:
		es("Untangle complete")</t>
<t tx="T1729">@ This method untangles the derived files in a vnode known to contain at least one @root directive. The work is done in two passes. The first pass creates the UST by scanning the derived file. The second pass updates the outline using the UST and a TST that is created during the pass.

We assume that all sections from root to end are contained in the derived file, and we attempt to update all such sections. The begin/end params indicate the range of nodes to be scanned when building the TST.
@c

def untangleRoot(self,root,begin,end):

	# trace("root,begin,end:" + `root` + `begin` + `end`)
	&lt;&lt; Set path &amp; root_name to the file specified in the @root directive &gt;&gt;
	&lt;&lt; return if @silent or unknown language &gt;&gt;
	&lt;&lt; Read the file into file_buf &gt;&gt;
	es("@root " + path)
	# Pass 1: Scan the C file, creating the UST
	self.scan_derived_file(file_buf)
	# trace(self.ust_dump())
	if self.errors == 0:
		&lt;&lt; Pass 2: Untangle the outline using the UST and a newly-created TST &gt;&gt;
	self.cleanup()</t>
<t tx="T1730">if self.language == unknown_language:
	es("**Unknown language for " + path)
	return

if self.print_bits == silent_bits:
	es("@silent inhibits untangle for " + path)
	return</t>
<t tx="T1731">s = root.bodyString()
i = 0
while i &lt; len(s):
	code, junk = self.token_type(s,i,report_errors)
	if code == at_root:
		# token_type sets root_name unless there is a syntax error.
		if self.root_name: path = self.root_name
		break
	else: i = skip_line(s,i)
	
if not self.root_name:
	# A bad @root command.  token_type has already given an error.
	self.cleanup()
	return</t>
<t tx="T1732">f = None
try:
	path = os.path.join(self.tangle_directory,path)
	f = open(path)
	if f:
		file_buf = f.read()
		file_buf = string.replace(file_buf,body_ignored_newline,'')
except:
	if f: f.close()
	es("error reading: " + path)
	self.cleanup()
	return</t>
<t tx="T1733">@ This code untangles the root and all its siblings. We don't call tangleTree here because we must handle all siblings.  tanglePass1 handles an entire tree.  It also handles @ignore.
@c

v = begin
while v and v != end:
	self.tanglePass1(v)
	if self.errors != 0:
		break
	v = v.nodeAfterTree()

self.ust_warn_about_orphans()</t>
<t tx="T1734"># This funtion is called when the user selects any "Untangle" command.

def untangleTree(self,v,report_flag):

	# trace(`v`)
	c = self.commands
	any_root_flag = false
	afterEntireTree = v.nodeAfterTree()
	# Initialize these globals here: they can't be cleared later.
	self.head_root = None
	self.errors = 0
	c.clearAllVisited() # Used by untangle code.

	while v and v != afterEntireTree and self.errors == 0:
		self.setRootFromHeadline(v)
		bits, dict = is_special_bits(v.bodyString(),[self.head_root])
		ignore =(bits &amp; ignore_bits)!= 0
		root =(bits &amp; root_bits)!= 0
		unit =(bits &amp; unit_bits)!= 0
		if ignore:
			v = v.nodeAfterTree()
		elif unit:
			# Expand the context to the @unit directive.
			unitNode = v   # 9/27/99
			afterUnit = v.nodeAfterTree()
			v = v.threadNext()
			while v and v != afterUnit and self.errors == 0:
				self.setRootFromHeadline(v)
				bits, dict = is_special_bits(v.bodyString(),[self.head_root])
				root =(bits &amp; root_bits)!= 0
				if root:
					any_root_flag = true
					end = None
					&lt;&lt; set end to the next root in the unit &gt;&gt;
					# trace("end:" + `end`)
					self.scanAllDirectives(v,require_path,report_errors)
					self.untangleRoot(v,unitNode,afterUnit)
					v = end
				else: v = v.threadNext()
		elif root:
			# Limit the range of the @root to its own tree.
			afterRoot = v.nodeAfterTree()
			any_root_flag = true
			self.scanAllDirectives(v,require_path,report_errors)
			self.untangleRoot(v,v,afterRoot) # 9/27/99
			v = afterRoot
		else:
			v = v.threadNext()
	if report_flag:
		if not any_root_flag:
			es("----- The outline contains no roots")
		elif self.errors &gt; 0:
			es("----- Untangle command halted because of errors")
	return any_root_flag</t>
<t tx="T1735">@ The untangle_root function will untangle an entire tree by calling untangleTree, so the following code ensures that the next @root node will not be an offspring of v.
@c

end = v.threadNext()
while end and end != afterUnit:
	flag, i = is_special(end.bodyString(),0,"@root")
	if flag and not v.isAncestorOf(end):
		break
	end = end.threadNext()
</t>
<t tx="T1736">def oblank (self):
	self.oblanks(1)

def oblanks (self,n):
	if n &gt; 0:
		self.output_file.write(' ' * n)
		
def onl(self):
	self.os('\n')
		
def os (self,s):
	s = string.replace(s,body_ignored_newline,body_newline)
	self.output_file.write(s)

def otab (self):
	self.otabs(1)

def otabs (self,n):
	if n &gt; 0:
		self.output_file.write('\t' * n)</t>
<t tx="T1737">@ This method outputs a code section, expanding section references by their definition. We should see no @directives or section definitions that would end the code section.

Most of the differences bewteen noweb mode and CWEB mode are handled by token_type(called from put_newline). Here, the only difference is that noweb handles double-@ signs only at the start of a line.
@c

def put_code(self,s,no_first_lws_flag):

	# trace(`get_line(s,0)`)
	i = 0
	if i &lt; len(s):
		i = self.put_newline(s,i,no_first_lws_flag)
		# Double @ is valid in both noweb and CWEB modes here.
		if match(s,i,"@@"):
			self.os('@') ; i += 2
	while i &lt; len(s):
		progress = i
		ch = s[i]
		if (match(s,i,"&lt;&lt;") and self.use_noweb_flag or
			match(s,i,"@&lt;") and self.use_cweb_flag):
			&lt;&lt; put possible section reference &gt;&gt;
		elif ch == '@': # We are in the middle of a line.
			if self.use_cweb_flag:
				&lt;&lt; handle 2-character CWEB control codes &gt;&gt;
			else:
				&lt;&lt; handle noweb @ &lt; &lt; convention &gt;&gt;
		elif ch == body_ignored_newline:
			i += 1
		elif ch == body_newline:
			i += 1 ; self.onl()
			i = self.put_newline(s,i,false) # Put full lws
			if self.use_cweb_flag and match(s,i,"@@"):
				self.os('@') ; i += 2
		else: self.os(s[i]) ; i += 1
		assert(progress &lt; i)</t>
<t tx="T1738">j, kind, name_end = self.is_section_name(s,i)
if kind == section_def:
	# We are in the middle of a code section
	self.error(
		"Should never happen:\n" +
		"section definition while putting a section reference: " +
		s[i:j])
	i += 1
elif kind == bad_section_name:
	self.os(s[i]) ; i += 1 # This is not an error.
else:
	assert(kind == section_ref)
	name = s[i:name_end]
	self.put_section(s,i,name,name_end)
	i = j</t>
<t tx="T1739">if match(s,i,"@@"):
	# Handle double @ sign.
	self.os('@') ; i += 2
else:
	i += 1 # skip the @.
	if i+1 &gt;= len(s) or is_ws_or_nl(s,i):
		# A control code: at-backslash is not a valid CWEB control code.
		# We are in CWEB mode, so we can output C block comments.
		self.os("/*@" + s[i] + "*/") ; i += 1
	else:
		self.os("@") # The at sign is not part of a control code.</t>
<t tx="T1740">@ The user must ensure that neither @ &lt; &lt; nor @ &gt; &gt; occurs in comments or strings. However, it is valid for @ &lt; &lt; or @ &gt; &gt; to appear in the doc chunk or in a single-line comment.
@c

if match(s,i,"@&lt;&lt;"):
	self.os("/*@*/&lt;&lt;") ; i += 3

elif match(s,i,"@&gt;&gt;"):
	self.os("/*@*/&gt;&gt;") ; i += 3
	
else: self.os("@") ; i += 1</t>
<t tx="T1741"># This method outputs a doc section within a block comment.

def put_doc(self,s):

	# trace(`get_line(s,0)`)
	width = self.page_width
	words = 0 ; word_width = 0 ; line_width = 0
	single_w = choose(self.single_comment_string,len(self.single_comment_string),0)
	# Make sure we put at least 20 characters on a line.
	if width - max(0,self.tangle_indent) &lt; 20:
		width = max(0,self.tangle_indent) + 20
	# Skip Initial white space in the doc part.
	i = skip_ws_and_nl(s,0)
	if i &lt; len(s) and self.print_bits == verbose_bits:
		use_block_comment = self.start_comment_string and self.end_comment_string
		use_single_comment = not use_block_comment and self.single_comment_string
		if use_block_comment or use_single_comment:
			if 0: # The section name ends in an self.onl().
				self.onl()
			self.put_leading_ws(self.tangle_indent)
			if use_block_comment:
				self.os(self.start_comment_string)
			&lt;&lt; put the doc part &gt;&gt;
			self.onl()
			self.put_leading_ws(self.tangle_indent)
			if use_block_comment:
				self.os(self.end_comment_string)
			self.onl()
		else: self.onl()</t>
<t tx="T1742">@ This code fills and outputs each line of a doc part. It keeps track of whether the next word will fit on a line,and starts a new line if needed.
@c

if use_single_comment:
	# New code: 5/31/00
	self.os(self.single_comment_string) ; self.otab()
	line_width =(single_w / abs(self.tab_width) + 1) * abs(self.tab_width)
else:
	line_width = abs(self.tab_width)
	self.onl() ; self.otab()
self.put_leading_ws(self.tangle_indent)
line_width += max(0,self.tangle_indent)
words = 0 ; word_width = 0
while i &lt; len(s):
	&lt;&lt;output or skip whitespace or newlines&gt;&gt;
	if i &gt;= len(s):
		break
	&lt;&lt;compute the width of the next word&gt;&gt;
	if words == 0 or line_width + word_width &lt; width:
		words += 1
		&lt;&lt;output next word&gt;&gt;
		line_width += word_width
	else:
		self.onl() ; self.otab()
		line_width = abs(self.tab_width)
		if use_single_comment:
			self.os(self.single_comment_string) ; self.oblank()
			line_width += len(self.single_comment_string)+ 1
		words = 0
		self.put_leading_ws(self.tangle_indent)
 		# tangle_indent is in spaces.
		line_width += max(0,self.tangle_indent)</t>
<t tx="T1743">@ This outputs whitespace if it fits, and ignores it otherwise, and starts a new line if a newline is seen. The effect of self code is that we never start a line with whitespace that was originally at the end of a line.
@c

while is_ws_or_nl(s,i):
	ch = s[i]
	if ch == '\t':
		pad = abs(self.tab_width) - (line_width % abs(self.tab_width))
		line_width += pad
		if line_width &lt; width: self.otab()
		i += 1
	elif ch == ' ':
		line_width += 1
		if line_width &lt; width: self.os(ch)
		i += 1
	else:
		assert(is_nl(s,i))
		self.onl()
		if use_single_comment:
			# New code: 5/31/00
			self.os(self.single_comment_string) ; self.otab()
			line_width = (single_w / abs(self.tab_width) + 1) * abs(self.tab_width)
		else:
			self.otab()
			line_width = abs(self.tab_width)
		i = skip_nl(s,i)
		words = 0
		self.put_leading_ws(self.tangle_indent)
 		# tangle_indent is in spaces.
		line_width += max(0,self.tangle_indent)
</t>
<t tx="T1744">j = i ; word_width = 0
while j &lt; len(s) and not is_ws_or_nl(s,j):
	word_width += 1
	j += 1</t>
<t tx="T1745">while i &lt; len(s) and not is_ws_or_nl(s,i):
	self.os(s[i])
	i += 1</t>
<t tx="T1746"># Outputs leading whitespace, converting tab_width blanks to tabs.

def put_leading_ws(self,indent):

	# trace("tab_width:" + `self.tab_width` + ", indent:" + `indent`)
	w = abs(self.tab_width)

	if w &gt; 1:
		# Output tabs if possible.
		self.otabs  (indent / w)
		self.oblanks(indent % w)
	else:
		self.oblanks(indent)
</t>
<t tx="T1747">@ This method handles scanning when putting the start of a new line. Unlike the corresponding method in pass one, this method doesn't need to set a done flag in the caller because the caller already knows where the code section ends.
@c

def put_newline(self,s,i,no_first_lws_flag):

	kind, end = self.token_type(s,i,dont_report_errors)
	&lt;&lt; Output leading white space except for blank lines &gt;&gt;
	if i &gt;= len(s):
		return i
	elif kind == at_web or kind == at_at:
		i += 2 # Allow the line to be scanned.
	elif kind == at_doc or kind == at_code:
		if self.use_cweb_flag:
			i += 2
	else:
		# These should have set limit in pass 1.
		assert(kind != section_def and kind != at_chapter and kind != at_section)
	return i</t>
<t tx="T1748">j = i ; i = skip_ws(s,i)
if i &lt; len(s) and not is_nl(s,i):
	# Conditionally output the leading previous leading whitespace.
	if not no_first_lws_flag:
		self.put_leading_ws(self.tangle_indent)
	# Always output the leading whitespace of _this_ line.
	k, width = skip_leading_ws_with_indent(s,j,self.tab_width)
	self.put_leading_ws(width)</t>
<t tx="T1749"># This method outputs one part of a section definition.

def put_part_node(self,part,no_first_lws_flag):

	if 0:
		if part: name = part.name # can't use choose.
		else: name = "&lt;NULL part&gt;"
		trace(`name`)

	if part.doc and self.output_doc_flag and self.print_bits != silent_bits and part.doc:
		self.put_doc(part.doc)

	if part.code:
		self.put_code(part.code,no_first_lws_flag)</t>
<t tx="T1750">@ This method outputs the definition of a section and all sections referenced from the section. name is the section's name. This code checks for recursive definitions by calling section_check(). We can not allow section x to expand to code containing another call to section x, either directly or indirectly.
@c

def put_section(self,s,i,name,name_end):

	j = skip_line(s,i)
	# trace("indent:" + `self.tangle_indent`  + ", " + `s[i:j]`)
	outer_old_indent = self.tangle_indent
	trailing_ws_indent = 0 # Set below.
	inner_old_indent = 0 # Set below.
	newline_flag = false  # True if the line ends with the reference.
	assert(match(name,0,"&lt;&lt;") or match(name,0,"@&lt;"))
	&lt;&lt; Calculate the new value of tangle_indent &gt;&gt;
	&lt;&lt; Set 'newline_flag' if the line ends with the reference &gt;&gt;
	section = self.st_lookup(name,not_root_name)
	if section and section.parts:
		# Expand the section only if we are not already expanding it.
		if self.section_check(name):
			self.section_stack.append(name)
			&lt;&lt; put all parts of the section definition &gt;&gt;
			self.section_stack.pop()
	else:
		&lt;&lt; Put a comment about the undefined section &gt;&gt;
	if not newline_flag:
		self.put_leading_ws(trailing_ws_indent)
	self.tangle_indent = outer_old_indent
	return i, name_end</t>
<t tx="T1751"># Find the start of the line containing the reference.
j = i
while j &gt; 0 and not is_nl(s,j):
	j -= 1
if is_nl(s,j):
	j = skip_nl(s,j)

# Bump the indentation
j, width = skip_leading_ws_with_indent(s,j,self.tab_width)
self.tangle_indent += width
# trace("leading ws:" + `width` + " + new indent:" + `self.tangle_indent`)

# 4/27/01: Force no trailing whitespace in @silent mode.
if self.print_bits == silent_bits:
	trailing_ws_indent = 0
else:
	trailing_ws_indent = self.tangle_indent

# Increase the indentation if the section reference does not immediately follow
# the leading white space.  4/3/01: Make no adjustment in @silent mode.
if (j &lt; len(s) and self.print_bits != silent_bits and
	((self.use_noweb_flag and s[j] != '&lt;') or
	(self.use_cweb_flag and s[j] != '@'))):
	self.tangle_indent += abs(self.tab_width)</t>
<t tx="T1752">if self.print_bits != silent_bits:
	i = name_end
	i = skip_ws(s,i)
	newline_flag = (i &gt;= len(s) or is_nl(s,i))</t>
<t tx="T1753">@ This section outputs each part of a section definition. We first count how many parts there are so that the code can output a comment saying 'part x of y'.
@c

# Output each part of the section.
sections = len(section.parts)
count = 0
for part in section.parts:
	count += 1
	# In @silent mode, there is no sentinel line to "use up" the previously output
	# leading whitespace.  We set the flag to tell put_part_node and put_code
	# not to call put_newline at the start of the first code part of the definition.
	no_first_leading_ws_flag = (count == 1 and self.print_bits == silent_bits)
	inner_old_indent = self.tangle_indent
	# 4/3/01: @silent inhibits newlines after section expansion.
	if self.print_bits != silent_bits:
		&lt;&lt; Put the section name in a comment &gt;&gt;
	self.put_part_node(part,no_first_leading_ws_flag)
	# 4/3/01: @silent inhibits newlines after section expansion.
	if count == sections and self.print_bits != silent_bits:
		&lt;&lt; Put the ending comment &gt;&gt;
	# Restore the old indent.
	self.tangle_indent = inner_old_indent</t>
<t tx="T1754">if count &gt; 1:
	self.onl()
	self.put_leading_ws(self.tangle_indent)
	
# Don't print trailing whitespace
name = string.rstrip(name)
if self.single_comment_string:
	self.os(self.single_comment_string) ; self.oblank() ; self.os(name)
	&lt;&lt; put (n of m) &gt;&gt;
else:
	assert(
		self.start_comment_string and len(self.start_comment_string) &gt; 0 and
		self.end_comment_string and len(self.end_comment_string)&gt; 0)
	self.os(self.start_comment_string) ; self.oblank() ; self.os(name)
	&lt;&lt; put (n of m) &gt;&gt;
	self.oblank() ; self.os(self.end_comment_string)

self.onl() # Always output a newline.</t>
<t tx="T1755">if sections &gt; 1:
	self.oblank()
	self.os("(" + `count` + " of " + `sections` + ")")</t>
<t tx="T1756">@ We do not produce an ending comment unless we are ending the last part of the section,and the comment is clearer if we don't say(n of m).
@c

self.onl() ; self.put_leading_ws(self.tangle_indent)
#  Don't print trailing whitespace
while name_end &gt; 0 and is_ws(s[name_end-1]):
	name_end -= 1

if self.single_comment_string:
	self.os(self.single_comment_string) ; self.oblank()
	self.os("-- end -- ") ; self.os(name)
else:
	self.os(self.start_comment_string) ; self.oblank()
	self.os("-- end -- ") ; self.os(name)
	self.oblank() ; self.os(self.end_comment_string)
	
@ The following code sets a flag for untangle.

If something follows the section reference we must add a newline, otherwise the "something" would become part of the comment.  Any whitespace following the (!newline) should follow the section defintion when Untangled.
@c

if not newline_flag:
	self.os(" (!newline)") # LeoCB puts the leading blank, so we must do so too.
	# Put the whitespace following the reference.
	while name_end &lt; len(s) and is_ws(s[name_end]):
		self.os(s[name_end])
		name_end += 1
	self.onl() # We must supply the newline!</t>
<t tx="T1757">self.onl() ; self.put_leading_ws(self.tangle_indent)

if self.print_bits != silent_bits:
	if self.single_comment_string:
		self.os(self.single_comment_string)
		self.os(" undefined section: ") ; self.os(name) ; self.onl()
	else:
		self.os(self.start_comment_string)
		self.os(" undefined section: ") ; self.os(name)
		self.oblank() ; self.os(self.end_comment_string) ; self.onl()

self.error("Undefined section: " + name)</t>
<t tx="T1758">@ We can not allow a section to be defined in terms of itself, either directly or indirectly.

We push an entry on the section stack whenever beginning to expand a section and pop the section stack at the end of each section.  This method checks whether the given name appears in the stack. If so, the section is defined in terms of itself.
@c

def section_check (self,name):

	if name in self.section_stack:
		s = "Invalid recursive reference of " + name + "\n"
		for n in self.section_stack:
			s += "called from: " + n + "\n"
		self.error(s)
		return false
	return true</t>
<t tx="T1759">@ This function checks the given symbol table for defined but never referenced sections.
@c

def st_check(self):

	keys = self.tst.keys()
	keys.sort()
	# trace(`keys`)
	for name in keys:
		section = self.tst[name]
		if not section.referenced:
			es(	' ' * 4 + "Warning: " +
				choose(self.use_noweb_flag,"&lt;&lt; ","@&lt; ") +
				section.name +
				choose(self.use_noweb_flag," &gt;&gt;"," @&gt;") +
				" has been defined but not used.")</t>
<t tx="T1760"># Dumps the given symbol table in a readable format.

def st_dump(self,verbose_flag):
	
	s = "\ndump of symbol table...\n"
	keys = self.tst.keys()
	keys.sort()
	for name in keys:
		section = self.tst[name]
		if verbose_flag:
			s += self.st_dump_node(section)
		else:
			type = choose(len(section.parts)&gt;0,"  ","un")
			s += ("\n" + type + "defined:[" + section.name + "]")
	return s</t>
<t tx="T1761"># Dumps each part of a section's definition.

def st_dump_node(self,section):

	s = ("\nsection: " + section.name +
		", referenced:" + `section.referenced` +
		", is root:" + `section.is_root`)
	
	if len(section.parts) &gt; 0:
		s += "\n----- parts of " + angleBrackets(section.name)
		n = 1 # part list is in numeric order
		for part in section.parts:
			s += "\n----- Part " + `n`
			n += 1
			s += "\ndoc:  [" + `part.doc`  + "]"
			s += "\ncode: [" + `part.code` + "]"
		s += "\n----- end of partList\n"
	return s</t>
<t tx="T1762">@ Enters names and their associated code and doc parts into the given symbol table.
`is_dirty` is used only when entering root names.
@c

def st_enter(self,name,code,doc,multiple_parts_flag,is_root_flag):
	
	# trace(`name`)
	section = self.st_lookup(name,is_root_flag)
	assert(section)
	if doc:
		doc = string.rstrip(doc) # remove trailing lines.
	if code:
		if self.print_bits != silent_bits: # @silent supresses newline processing.
			i = skip_blank_lines(code,0) # remove leading lines.
			if i &gt; 0: code = code[i:] 
			if code and len(code) &gt; 0: code = string.rstrip(code) # remove trailing lines.
		if len(code) == 0: code = None
	if code:
		&lt;&lt; check for duplicate code definitions &gt;&gt;
	if code or doc:
		part = part_node(name,code,doc,is_root_flag,false) # not dirty
		section.parts.append(part)
	else: # A reference
		section.referenced = true
	if is_root_flag:
		self.root_list.append(section)
		section.referenced = true # Mark the root as referenced.
	return len(section.parts) # part number</t>
<t tx="T1763">for part in section.parts:

	if part.code and multiple_parts_flag == disallow_multiple_parts:
		# Give the message only for non-empty parts.
		self.error("Multiple parts not allowed for " + name)
	  	return 0 # part number

	if self.tangling and code and code == part.code:
		es("Warning: possible duplicate definition of: &lt;&lt;" +
			section.name + "&gt;&gt;")</t>
<t tx="T1764">@ This function enters a section name into the given symbol table.
The code and doc pointers are None for references.
@c

def st_enter_section_name(self,name,code,doc,multiple_parts_flag):
	
	return self.st_enter(name,code,doc,multiple_parts_flag,not_root_name)</t>
<t tx="T1765"># Enters a root name into the given symbol table.

def st_enter_root_name(self,name,code,doc):
	
	# assert(code)
	if name: # User errors can result in an empty @root name.
		self.st_enter(name,code,doc,disallow_multiple_parts,is_root_name)</t>
<t tx="T1766">@ This function looks up name in the symbol table and creates a tst_node for it if it does not exist.
@c

def st_lookup(self,name,is_root_flag):

	if is_root_flag:
		key = name
	else:
		key = self.standardize_name(name)

	if self.tst.has_key(key):
		section = self.tst[key]
		# trace("found:" + key)
		return section
	else:
		# trace("not found:" + key)
		section = tst_node(key,is_root_flag)
		self.tst [key] = section
		return section</t>
<t tx="T1767">@language python

@ This class implements a tree control similar to Windows explorer.  The draw code is based on code found in Python's IDLE program.  Thank you Guido van Rossum!

The tree class knows about vnodes.  The vnode class could be split into a base class (say a treeItem class) containing the ivars known to the tree class, and a derived class containing everything else, including, e.g., the bodyString ivar.  I haven't chosen to split the vnode class this way because nothing would be gained in Leo.
@c

from leoGlobals import *
from leoUtils import *
import leoColor
import os, string, Tkinter

&lt;&lt; about drawing and events &gt;&gt;
&lt;&lt; drawing constants &gt;&gt;

class leoTree:
	@others</t>
<t tx="T1768">@ Leo must redraw the outline pane when commands are executed and as the result of mouse and keyboard events.  The main challenges are eliminating flicker and handling events properly.  These topics are interrelated.

Eliminating flicker.  Leo must update the outline pane with minimum flicker.  Various versions of Leo have approached this problem in different ways.  The drawing code in leo.py is robust, flexible, relatively simple and should work in almost any conceivable environment.

Leo assumes that all code that changes the outline pane will be enclosed in matching calls to the c.beginUpdate and c.endUpdate  methods of the Commands class. c.beginUpdate() inhibits drawing until the matching c.endUpdate().  These calls may be nested; only the outermost call to c.endUpdate() calls c.redraw() to force a redraw of the outline pane.

In leo.py, code may call c.endUpdate(flag) instead of c.endUpdate().  Leo redraws the screen only if flag is true.  This allows code to suppress redrawing entirely when needed.  For example, study the idle_body_key event handler to see how Leo conditionally redraws the outline pane.

The leoTree class redraws all icons automatically when c.redraw() is called.  This is a major simplification compared to previous versions of Leo.  The entire machinery of drawing icons in the vnode class has been eliminated.  The v.computeIcon method tells what the icon should be.  The v.iconVal ivar that tells what the present icon is. The event handler simply compares these two values and sets redraw_flag if they don't match.

Handling events. Besides redrawing the screen, Leo must handle events or commands that change the text in the outline or body panes.  It is surprisingly difficult to ensure that headline and body text corresponds to the vnode and tnode corresponding to presently selected outline, and vice versa. For example, when the user selects a new headline in the outline pane, we must ensure that 1) the vnode and tnode of the previously selected node have up-to-date information and 2) the body pane is loaded from the correct data in the corresponding tnode.  Early versions of Leo attempted to satisfy these conditions when the user switched outline nodes.  Such attempts never worked well; there were too many special cases.  Later versions of Leo, including leo.py, use a much more direct approach.  The event handlers make sure that the vnode and tnode corresponding to the presently selected node are always kept up-to-date.  In particular, every keystroke in the body pane causes the presently selected tnode to be updated immediately.  There is no longer any need for the c.synchVnode method, though that method still exists for compatibility with old scripts.

The leoTree class contains all the event handlers for the body and outline panes.  The actual work is done in the idle_head_key and idle_body_key methods.  These routines are surprisingly complex; they must handle all the tasks mentioned above, as well as others. The idle_head_key and idle_body_key methods should not be called outside the leoTree class.  However, it often happens that code that handles user commands must simulate an event.  That is, the code needs to indicate that headline or body text has changed so that the screen may be redrawn properly.   The leoTree class defines the following simplified event handlers: onBodyChanged, onBodyWillChange, onBodyKey, onHeadChanged and onHeadlineKey.  Commanders and subcommanders call these event handlers to indicate that a command has changed, or will change, the headline or body text.  Calling event handlers rather than c.beginUpdate and c.endUpdate ensures that the outline pane is redrawn only when needed.
</t>
<t tx="T1769">box_padding = 5 # extra padding between box and icon
box_width = 9 + box_padding
icon_width = 20
text_indent = 4 # extra padding between icon and tex
child_indent = 28 # was 20
hline_y = 7 # Vertical offset of horizontal line
line_height = 17 + 2 # To be replaced by Font height

root_left = 7 + box_width
root_top = 2

hiding = true # True if we don't reallocate items</t>
<t tx="T1770">def __del__ (self):

	# Can't trace while destroying.
	# print "tree.__del__"
	pass</t>
<t tx="T1771">@ About drawing and updating strategy.

This version of Leo draws the outline "by hand" using the Tk canvas widget.  Surprisingly, this is not only easy, but simplifies the vnode and Commands classes.

1.  Updating and redraw.  The tree.redraw() method is called automatically from the "outermost" call to tree.endUpdate.  Moreover, calling .tree.redraw() inside a tree.beginUpdate/tree.endUpdate pair does nothing.  c.redraw(), c.beginUpdate() and c.endUpdate() just call the corresponding tree methods.  Finally, beginUpdate()/endUpdate(false) can be used to suppress redrawing entirely.

Therefore, the Commands class never needs to worry about extra calls to tree.redraw() provided all code that draws to the tree is enclosed in a tree.beginUpdate/tree.endUpdate pair.  The tree.idle_body_key event handler manages redrawing "by hand" by maintaining a redraw_flag and then calling endUpdate(redraw_flag).

2.  The tree.redraw() method deletes all old canvas items and recomputes all data, including v.iconVal.  This means that v.doDelete need not actually delete vnodes for them to disappear from the screen.  Indeed, vnode are never actually deleted, only unlinked.  It would be valid for "dependent" vnodes to be deleted, but there really is no need to do so.
</t>
<t tx="T1772">def drawTree(self,v,x,y,h,level):

	yfirst = ylast = y
	if level==0: yfirst += 10
	while v:
		# trace(`x` + ", " + `y` + ", " + `v`)
		h = self.drawNode(v,x,y)
		y += h ; ylast = y
		if v.isExpanded() and v.firstChild():
			y = self.drawTree(v.firstChild(),x+child_indent,y,h,level+1)
		v = v.next()
	&lt;&lt; draw vertical line &gt;&gt;
	return y</t>
<t tx="T1773">id = self.canvas.create_line(
	x, yfirst-hline_y+4,
	x, ylast+hline_y-h,
	fill="gray50", # stipple="gray50"
	tag="lines")

self.canvas.tag_lower(id)</t>
<t tx="T1774">def drawNode(self,v,x,y):

	# Draw horizontal line from vertical line to icon.
	self.canvas.create_line(x, y+7, x+box_width, y+7,tag="lines",fill="gray50") # stipple="gray25")
	if v.firstChild(): self.drawBox(v,x,y)
	icon_height = self.drawIcon(v,x+box_width,y)
	text_height = self.drawText(v,x+box_width+icon_width,y)
	return max(icon_height, text_height)</t>
<t tx="T1775">@ Returns the proper width of the entry widget for the headline. This has been a problem.
@c

def headWidth(self,v):

	return max(10,5 + len(v.headString()))</t>
<t tx="T1776">def hideAllChildren(self,v):

	child = v.firstChild()
	while child:
		self.hideTree(child)
		child = child.next()</t>
<t tx="T1777">def hideNode(self,v):

	self.canvas.delete(v.box_id)
	self.canvas.delete(v.icon_id)
	self.canvas.delete(v.edit_text)
	self.canvas.delete(v.edit_text_id)
	v.box_id = v.icon_id = None
	v.edit_text = v.edit_text_id = None</t>
<t tx="T1778">def hideTree(self,v):

	last = v.lastNode()
	while v:
		self.hideNode(v)
		if v == last: break
		v = v.threadNext()</t>
<t tx="T1779">def OnActivate (self,v):

	c=self.commands
	# trace(`v`)

	if v == self.currentVnode:
		# w = self.commands.frame.getFocus()
		if self.active:
			self.editLabel(v)
		else:
			self.undimEditLabel()
			self.canvas.focus_set()
	else:
		self.select(v)
		c.body.mark_set("insert","1.0")
		c.body.focus_force()

	self.active = true</t>
<t tx="T1780"># Called on click in box and double-click in headline.

def OnBoxClick (self,v):

	if v.isExpanded():
		v.contract()
	else:
		v.expand()

	self.active = true
	self.select(v)
	self.canvas.focus_set() # This is safe.
	self.redraw()</t>
<t tx="T1781">def OnDeactivate (self, event=None):

	self.endEditLabel()
	self.dimEditLabel()
	self.active = false</t>
<t tx="T1782"># Convenience methods so the caller doesn't have to know the present edit node.

def dimEditLabel (self):

	v = self.currentVnode
	self.setDisabledLabelState(v)

def undimEditLabel (self):

	v = self.currentVnode
	self.setSelectedLabelState(v)</t>
<t tx="T1783">@language python

# Undo manager for leo.py.

&lt;&lt; How Leo implements unlimited undo &gt;&gt;

optionalIvars = [
	"parent","back","n","lastChild","sort","select",
	"oldTree", # 7/5/02: a copy of the old tree.
	"oldParent","oldBack","oldN",
	"oldText","newText","oldSel","newSel"]

from leoGlobals import *
from leoUtils import *

class undoer:
	@others</t>
<t tx="T1784">@ Only leo.py supports unlimited undo.  Unlimited undo is straightforward; it merely requires that all commands that affect the outline or body text must be undoable. In other words, everything that affects the outline or body text must be remembered.

We may think of all the actions that may be Undone or Redone as a string of beads (undo nodes). Undoing an operation moves backwards to the next bead; redoing an operation moves forwards to the next bead. A bead pointer points to the present bead. The bead pointer points in front of the first bead when Undo is disabled.  The bead pointer points at the last bead when Redo is disabled. An undo node is a Python dictionary containing all information needed to undo or redo the operation.

The Undo command uses the present bead to undo the action, then moves the bead pointer backwards. The Redo command uses the bead after the present bead to redo the action, then moves the bead pointer forwards. All undoable operations call setUndoParams() to create a new bead. The list of beads does not branch; all undoable operations (except the Undo and Redo commands themselves) delete any beads following the newly created bead.

I did not invent this model of unlimited undo.  I first came across it in the documentation for Apple's Yellow Box classes.
</t>
<t tx="T1785">def __init__ (self,commands):
	
	self.commands = commands
	self.redoMenuLabel = "Can't Redo" # Set here to indicate initial menu entry.
	self.undoMenuLabel = "Can't Undo" # Set here to indicate initial menu entry.
	self.undoType = "Can't Undo"
	self.undoing = false # True if executing an Undo command.
	self.redoing = false # True if executing a Redo command.
	self.clearUndoState()</t>
<t tx="T1786">@ This method clears then entire Undo state.  All non-undoable commands should call this method.
@c

def clearUndoState (self):
	
	self.setRedoType("Can't Redo")
	self.setUndoType("Can't Undo")
	self.beads = [] # List of undo nodes.
	self.bead = -1 # Index of the present bead: -1:len(beads)
	self.clearIvars()
	
def clearIvars (self):
	
	self.v = None # The node being operated upon for undo and redo.
	for ivar in optionalIvars:
		exec('self.%s = None' % ivar)
	
	if 0:
		# Params describing the "before" state for undo.
		self.oldParent = self.oldBack = self.oldN = None
		self.sort = None # List of nodes before being sorted.
		self.oldText = None
		# Params describing the "after" state for redo.
		self.parent = self.back = self.lastChild = self.n = None
		self.select = None
		self.newText = None</t>
<t tx="T1787">def findSharedVnode (self,target):

	c = self.commands ; v = c.rootVnode()
	while v:
		if v != target and v.t == target.t:
			return v
		v = v.threadNext()
	return None</t>
<t tx="T1788">def undoSortChildren (self):

	u = self ; c = u.commands ; v = u.v
	assert(v)
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		index = 0
		for child in u.sort:
			child.moveToNthChildOf(v,index)
			index += 1
		v.setDirty()
		c.setChanged(true)
	c.endUpdate()</t>
<t tx="T1789">def undoSortSiblings (self):
	
	u = self ; c = u.commands ; v = u.v
	parent = v.parent()
	assert(v and parent)
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		index = 0
		for sib in u.sort:
			sib.moveToNthChildOf(parent,index)
			index += 1
		parent.setDirty()
		c.setChanged(true)
	c.endUpdate()</t>
<t tx="T1790">@language python

# Global utility functions

from leoGlobals import *
import os, string, sys, time, types

@others</t>
<t tx="T1791"># Returns &lt; &lt; s &gt; &gt;

def angleBrackets(s):

	return ( "&lt;&lt;" + s +
		"&gt;&gt;") # must be on a separate line.

virtual_event_name = angleBrackets</t>
<t tx="T1792"># bit testing.

def btest(b1, b2):

	return (b1 &amp; b2) != 0</t>
<t tx="T1793"># Center the dialog on the screen.

def center_dialog(top):

	top.update_idletasks() # Required to get proper info.

	# Get the information about top and the screen.
	sw = top.winfo_screenwidth()
	sh = top.winfo_screenheight()
	g = top.geometry() # g = "WidthxHeight+XOffset+YOffset"
	dim,x,y = string.split(g,'+')
	w,h = string.split(dim,'x')
	w,h,x,y = int(w),int(h),int(x),int(y)
	
	# Set the new window coordinates, leaving w and h unchanged.
	x = (sw - w)/2
	y = (sh - h)/2
	top.geometry("%dx%d%+d%+d" % (w,h,x,y))</t>
<t tx="T1794"># Returns a temporary file name.

def create_temp_name ():

	import tempfile
	temp = tempfile.mktemp()
	# trace(`temp`)
	return temp</t>
<t tx="T1795">def dump(s):
	
	out = ""
	for i in s:
		out += `ord(i)` + ","
	return out
		
def oldDump(s):

	out = ""
	for i in s:
		if i=='\n':
			out += "[" ; out += "n" ; out += "]"
		if i=='\t':
			out += "[" ; out += "t" ; out += "]"
		elif i==' ':
			out += "[" ; out += " " ; out += "]"
		else: out += i
	return out</t>
<t tx="T1796">def print_bindings (name,window):

	bindings = window.bind()
	print
	print "Bindings for", name
	for b in bindings:
		print `b`</t>
<t tx="T1797">def ensure_extension (name, ext):

	file, old_ext = os.path.splitext(name)
	if len(name) == 0:
		return name # don't add to an empty name.
	elif old_ext and old_ext == ext:
		return name
	else:
		return file + ext</t>
<t tx="T1798">def appendToList(out, s):

	for i in s:
		out.append(i)</t>
<t tx="T1799">def flattenList (theList):

	result = []
	for item in theList:
		if type(item) == types.ListType:
			result.extend(flattenList(item))
		else:
			result.append(item)
	return result</t>
<t tx="T1800">def listToString(theList):

	if list:
		theList = flattenList(theList)
		return string.join(theList,"")
	else:
		return ""</t>
<t tx="T1801">def enableMenu (menu,name,val):

	state = choose(val,"normal","disabled")
	menu.entryconfig(name,state=state)

def disableMenu (menu,name):

	menu.entryconfig(name,state="disabled")

def setMenuLabel (menu,name,label):

	menu.entryconfig(name,label=label)</t>
<t tx="T1802">@ It seems dubious to bump the Tangle error count here.  OTOH, it really doesn't hurt.
@c

def scanError(s):

	# Bump the error count in the tangle command.
	import leo
	c = leo.topCommands()
	c.tangleCommands.errors += 1

	es(s)</t>
<t tx="T1803">@ These scanners all call scanError() directly or indirectly, so they will call es() if they find an error.  scanError() also bumps commands.tangleCommands.errors, which is harmless if we aren't tangling, and useful if we are.

These routines are called by the Import routines and the Tangle routines.
</t>
<t tx="T1804"># Scans past a block comment (an old_style C comment).

def skip_block_comment (s,i):

	assert(match(s,i,"/*"))
	j = i ; i += 2 ; n = len(s)
	
	k = string.find(s,"*/",i)
	if k == -1:
		scanError("Run on block comment: " + s[j:i])
		return n
	else: return k + 2</t>
<t tx="T1805"># Skips from the opening to the matching . If no matching is found i is set to len(s).

def skip_braces(s,i):

	assert(match(s,i,'{'))
	level = 0 ; n = len(s)
	while i &lt; n:
		c = s[i]
		if c == '{':
			level += 1 ; i += 1
		elif c == '}':
			level -= 1
			if level &lt;= 0: return i
			i += 1
		elif c == '\'' or c == '"': i = skip_string(s,i)
		elif match(s,i,'//'): i = skip_to_end_of_line(s,i)
		elif match(s,i,'/*'): i = skip_block_comment(s,i)
		else: i += 1
	return i</t>
<t tx="T1806">@ Skips from the opening ( to the matching ) . If no matching is found i is set to len(s)
@c

def skip_parens(s,i):
	level = 0 ; n = len(s)
	assert(match(s,i,'('))
	while i &lt; n:
		c = s[i]
		if c == '(':
			level += 1 ; i += 1
		elif c == ')':
			level -= 1
			if level &lt;= 0:  return i
			i += 1
		elif c == '\'' or c == '"': i = skip_string(s,i)
		elif match(s,i,"//"): i = skip_to_end_of_line(s,i)
		elif match(s,i,"/*"): i = skip_block_comment(s,i)
		else: i += 1
	return i</t>
<t tx="T1807">@ Skips from begin to matching end.
If found, i points to the end. Otherwise, i &gt;= len(s)
The end keyword matches begin, case, class, record, and try.
@c

def skip_pascal_begin_end(s,i):

	assert(match_c_word(s,i,"begin"))
	i1 = i # for traces
	level = 1 ; i = skip_c_id(s,i) # Skip the opening begin.
	while i &lt; len(s):
		ch = s[i]
		if ch =='{' : i = skip_pascal_braces(s,i)
		elif ch =='"' or ch == '\'': i = skip_pascal_string(s,i)
		elif match(s,i,"//"): i = skip_line(s,i)
		elif match(s,i,"(*"): i = skip_pascal_block_comment(s,i)
		elif match_c_word(s,i,"end"):
			level -= 1 ;
			if level == 0:
				# lines = s[i1:i+3] ; trace('\n' + lines + '\n')
				return i
			else: i = skip_c_id(s,i)
		elif is_c_id(ch):
			j = i ; i = skip_c_id(s,i) ; name = s[j:i]
			if name in ["begin", "case", "class", "record", "try"]:
				level += 1
		else: i += 1
	# trace(`s[i1:i]`)
	return i</t>
<t tx="T1808"># Scans past a pascal comment delimited by (* and *).

def skip_pascal_block_comment(s,i):
	
	j = i
	assert(match(s,i,"(*"))
	i = string.find(s,"*)",i)
	if i &gt; -1: return i + 2
	else:
		scanError("Run on comment" + s[j:i])
		return len(s)

#	n = len(s)
#	while i &lt; n:
#		if match(s,i,"*)"): return i + 2
#		i += 1
#	scanError("Run on comment" + s[j:i])
#	return i</t>
<t tx="T1809">def skip_pascal_string(s,i):

	j = i ; delim = s[i] ; i += 1
	assert(delim == '"' or delim == '\'')

	while i &lt; len(s):
		if s[i] == delim:
			return i + 1
		else: i += 1

	scanError("Run on string: " + s[j:i])
	return i</t>
<t tx="T1810"># Now handles continuation lines and block comments.

def skip_pp_directive(s,i):

	while i &lt; len(s):
		if is_nl(s,i):
			if escaped(s,i): i = skip_nl(s,i)
			else: break
		elif match(s,i,"//"): i = skip_to_end_of_line(s,i)
		elif match(s,i,"/*"): i = skip_block_comment(s,i)
		else: i += 1
	return i</t>
<t tx="T1811"># Skips an entire if or if def statement, including any nested statements.

def skip_pp_if(s,i):

	assert(match(s,i,'#'))
	if ( not match_word(s,i,"#if") and
		not match_word(s,i,"ifdef") and
		not match_word(s,i,"#ifndef") ): return skip_to_end_of_line(s,i)

	level = 0
	while i &lt; len(s):
		c = s[i]
		if match_word(s,i,"#if") or match_word(s,i,"ifdef") or match_word(s,i,"#ifndef"):
			level += 1 ; i = skip_to_end_of_line(s,i)
		elif match_word(s,i,"#endif"):
			level -= 1 ; i = skip_to_end_of_line(s,i)
			if level &lt;= 0: return i
		elif c == '\'' or c == '"': i = skip_string(s,i)
		elif match(s,i,"//"): i = skip_to_end_of_line(s,i)
		elif match(s,i,"/*"): i = skip_block_comment(s,i)
		else: i += 1
	return i</t>
<t tx="T1812"># Skips to the next semicolon that is not in a comment or a string.

def skip_to_semicolon(s,i):

	n = len(s)
	while i &lt; n:
		c = s[i]
		if c == ';': return i
		elif c == '\'' or c == '"' : i = skip_string(s,i)
		elif match(s,i,"//"): i = skip_to_end_of_line(s,i)
		elif match(s,i,"/*"): i = skip_block_comment(s,i)
		else: i += 1
	return i</t>
<t tx="T1813">def skip_python_string(s,i):

	if match(s,i,"'''") or match(s,i,'"""'):
		j = i ; delim = s[i]*3 ; i += 3
		k = string.find(s,delim,i)
		if k &gt; -1: return k+3
		scanError("Run on triple quoted string: " + s[j:i])
		return len(s)
	else:
		return skip_string(s,i)</t>
<t tx="T1814">def skip_string(s,i):
	
	j = i ; delim = s[i] ; i += 1
	assert(delim == '"' or delim == '\'')
	n = len(s)
	while i &lt; n and s[i] != delim:
		if s[i] == '\\' : i += 2
		else: i += 1

	if i &gt;= n:
		scanError("Run on string: " + s[j:i])
	elif s[i] == delim:
		i += 1
	return i</t>
<t tx="T1815">def skip_typedef(s,i):

	n = len(s)
	while i &lt; n and is_c_id(s[i]):
		i = skip_c_id(s,i)
		i = skip_ws_and_nl(s,i)
	if match(s,i,'{'):
		i = skip_braces(s,i)
		i = skip_to_semicolon(s,i)
	return i</t>
<t tx="T1816"># Returns true if s[i] is preceded by an odd number of backslashes.

def escaped(s,i):

	count = 0
	while i-1 &gt;= 0 and s[i-1] == '\\':
		count += 1
		i -= 1
	return (count%2) == 1</t>
<t tx="T1817">def find_on_line(s,i,pattern):

	# j = skip_line(s,i) ; trace(`s[i:j]`)
	j = string.find(s,'\n',i)
	if j == -1: j = len(s)
	k = string.find(s,pattern,i,j)
	if k &gt; -1: return k
	else: return None</t>
<t tx="T1818">def is_c_id(ch):

	return ch in string.letters or ch in string.digits or ch == '_'</t>
<t tx="T1819">def is_nl(s,i):

	return i &lt; len(s) and (s[i] == '\n' or s[i] == '\r')</t>
<t tx="T1820">@ Return true if the body text contains the @ directive.

We no longer require that the directive appear befor e any @c directive or section definition.
@c

def is_special(s,i,directive):

	# j = skip_line(s,i) ; trace(`s[i:j]` + " : " + `directive`)
	assert (directive and directive [0] == '@' )
	while i &lt; len(s):
		i = skip_ws_and_nl(s,i)
		if match_word(s,i,directive):
			return true, i
		else:
			i = skip_line(s,i)
	return false, -1</t>
<t tx="T1821">def is_ws(c):

	return c == '\t' or c == ' '
	
def is_ws_or_nl(s,i):

	return is_nl(s,i) or (i &lt; len(s) and is_ws(s[i]))</t>
<t tx="T1822"># Warning: this code makes no assumptions about what follows pattern.

def match(s,i,pattern):

	return s and pattern and string.find(s,pattern,i,i+len(pattern)) == i</t>
<t tx="T1823">def match_c_word (s,i,name):

	n = len(name)
	return name == s[i:i+n] and (i+n == len(s) or not is_c_id(s[i+n]))</t>
<t tx="T1824">def match_ignoring_case(s1,s2):

	return string.lower(s1) == string.lower(s2)</t>
<t tx="T1825">def match_word(s,i,pattern):

	j = len(pattern)
	if string.find(s,pattern,i,i+j) != i:
		return false
	if i+j &gt;= len(s):
		return true
	c = s[i+j]
	return not (c in string.letters or c in string.digits or c == '_')</t>
<t tx="T1826">def skip_blank_lines(s,i):

	while i &lt; len(s):
		if is_nl(s,i) :
			i = skip_nl(s,i)
		elif is_ws(s[i]):
			j = skip_ws(s,i)
			if is_nl(s,j):
				i = j
			else: break
		else: break
	return i</t>
<t tx="T1827">def skip_c_id(s,i):

	n = len(s)
	while i &lt; n:
		c = s[i]
		if c in string.letters or c in string.digits or c == '_':
			i += 1
		else: break
	return i</t>
<t tx="T1828">@ These methods skip to the next newline, regardless of whether the newline may be preceeded by a backslash. Consequently, they should be used only when we know that we are not in a preprocessor directive or string.
@c

def skip_line (s,i):

	i = string.find(s,'\n',i)
	if i == -1: return len(s)
	else: return i + 1
		
def skip_to_end_of_line (s,i):

	i = string.find(s,'\n',i)
	if i == -1: return len(s)
	else: return i</t>
<t tx="T1829"># returns (i, val) or (i, None) if s[i] does not point at a number.

def skip_long(s,i):

	val = 0
	i = skip_ws(s,i)
	n = len(s)
	if i &gt;= n or s[i] not in string.digits:
		return i, None
	while i &lt; n and s[i] in string.digits:
		val = val * 10
		val += (s[i] - '0')
		i += 1
	return i, val</t>
<t tx="T1830">def skip_matching_delims(s,i,delim1,delim2):
	
	assert(match(s,i,delim1))

	i += len(delim1)
	k = string.find(s,delim2,i)
	if k == -1:
		return len(s)
	else:
		return k + len(delim2)</t>
<t tx="T1831">@ This function skips a single "logical" end-of-line character.  We need this function because different systems have different end-of-line conventions.
@c

def skip_nl (s,i):

	if match(s,i,"\r\n"): return i + 2
	elif match(s,i,'\n') or match(s,i,'\r'): return i + 1
	else: return i</t>
<t tx="T1832"># Skips from the opening { to the matching }.

def skip_pascal_braces(s,i):

	# No constructs are recognized inside Pascal block comments!
	k = string.find(s,'}',i)
	if i == -1: return len(s)
	else: return k</t>
<t tx="T1833">def skip_ws(s,i):

	n = len(s)
	while i &lt; n and is_ws(s[i]):
		i += 1
	return i
	
def skip_ws_and_nl(s,i):

	n = len(s)
	while i &lt; n and (is_ws(s[i]) or is_nl(s,i)):
		i += 1
	return i</t>
<t tx="T1834">def shortFileName (fileName):
	
	fileName = os.path.normpath(fileName)
	head,tail = os.path.split(fileName)
	return tail</t>
<t tx="T1835">@ sequence is a sequence of items, each of which is a sequence containing at least n elements.
returns a list of the the items sorted on the n'th element of each tuple.
@c

def sortSequence (sequence, n):

	keys = [] ; links = {}
	for item in sequence:
		key = item[n]
		links[key] = item
		keys.append(key)
	keys.sort() ; sorted = []
	for key in keys:
		sorted.append(links[key])
	return sorted
	
@ The sort() method takes an optional argument specifying a comparison function of two arguments (list items) which should return -1, 0 or 1 depending on whether the first argument is considered smaller than, equal to, or larger than the second argument.

Note that this slows the sorting process down considerably; e.g. to sort a list in reverse order it is much faster to use calls to the methods sort() and reverse() than to use the built-in function sort() with a comparison function that reverses the ordering of the elements.

So a "clever" solution wouldn't be so clever after all.
@c
</t>
<t tx="T1836">@ pychecker bug: pychecker complains that there is no attribute time.clock
@c

def getTime():
	return time.clock()
	
def esDiffTime(message, start):
	es(message + ("%6.3f" % (time.clock()-start)))
	return time.clock()</t>
<t tx="T1837">@ This function compares two files. If they are different, we replace file_name with temp_name. Otherwise, we just delete temp_name.  Both files should be closed.
@c

def update_file_if_changed(file_name,temp_name):

	if os.path.exists(file_name):
		import filecmp
		if filecmp.cmp(temp_name, file_name):
			try: # Just delete the temp file.
				os.remove(temp_name)
			except: pass
			es("unchanged: " + file_name)
		else:
			try: # Replace file with temp file.
				os.remove(file_name)
				os.rename(temp_name, file_name)
				es("***updating: " + file_name)
			except:
				es("Rename failed: no file created! (file may be read-only)")
	else:
		try:
			os.rename(temp_name, file_name)
			es("Creating: " + file_name)
		except:
			es("Rename failed: no file created! (file may be read-only)")</t>
<t tx="T1838"># To do: Use config params for window height, width and bar color, relief and width.

@language python

from leoGlobals import *
from leoUtils import *
import leoDialog, leoNodes, leoPrefs
import Tkinter, tkFileDialog, tkFont

# Needed for menu commands
import leoCommands, leoNodes, leoTree
import os, sys, traceback

class LeoFrame:
	@others</t>
<t tx="T1839">def __repr__ (self):

	return "leoFrame: " + self.title
</t>
<t tx="T1840"># Returns the frame that has focus, or body if None.

def getFocus(self):

	f = self.top.focus_displayof()
	if f:
		return f
	else:
		return self.body</t>
<t tx="T1841">def notYet(self,name):

	es(name + " not ready yet")
</t>
<t tx="T1842">def OnActivateLog (self,event=None):

	app().log = self
	self.tree.OnDeactivate()</t>
<t tx="T1843">def OnActivateTree (self,event=None):

	app().log = self
	self.tree.undimEditLabel()
	self.tree.canvas.focus_set()</t>
<t tx="T1844">@language python

@ Class to read and write @file nodes.

This code uses readline() to get each line rather than reading the entire file into a buffer.  This is more memory efficient and saves us from having to scan for the end of each line.  The result is cleaner and faster code.  This code also accumulates body text line-by-line rather than character-by-character, a much faster way.
@c

from leoGlobals import *
from leoUtils import *
import leoNodes, leoPrefs
import filecmp, os, os.path, time

class atFile:
	&lt;&lt; atFile constants &gt;&gt;
	@others</t>
<t tx="T1845"># The kind of at_directives.

noDirective		=  1 # not an at-directive.
delimsDirective =  2 # @delims
docDirective	=  3 # @doc.
atDirective		=  4 # @&lt;space&gt; or @&lt;newline&gt;
codeDirective	=  5 # @code
cDirective		=  6 # @c&lt;space&gt; or @c&lt;newline&gt;
othersDirective	=  7 # at-others
miscDirective	=  8 # All other directive

# The kind of sentinel line.
noSentinel		=  9 # Not a sentinel
endAt			= 10 # @-at
endBody			= 11 # @-body
endDoc			= 12 # @-doc
endLeo			= 13 # @-leo
endNode			= 14 # @-node
endOthers		= 15 # @-others
startAt			= 16 # @+at
startBody		= 17 # @+body
startDelims		= 18 # @delis
startDoc		= 19 # @+doc
startLeo		= 20 # @+leo
startNode		= 21 # @+node
startOthers		= 22 # @+others
startRef		= 23 # @&lt; &lt; ... &gt; &gt;
startVerbatim	= 24 # @verbatim
startVerbatimAfterRef = 25 # @verbatimAfterRef
startDirective	= 26 # @@</t>
<t tx="T1846">def nodeSentinelText(self,v):

	# A hack: zero indicates the root node so scanText won't create a child.
	if v != self.root and v.parent():
		index = v.childIndex() + 1
	else:
		index = 0
	cloneIndex = v.t.cloneIndex
	s = choose(cloneIndex &gt; 0, "C=" + `cloneIndex`, "")
	return `index` + ':' + s + ':' + v.headString()</t>
<t tx="T1847">def putCloseNodeSentinel(self,v):

	s = self.nodeSentinelText(v)
	self.putSentinel("@-node:" + s)</t>
<t tx="T1848">@ root is an ancestor of v, or root == v.  We call putCloseSentinel for v up to, but not including, root.
@c
def putCloseSentinels(self,root,v):

	self.putCloseNodeSentinel(v)
	while 1:
		v = v.parent()
		assert(v) # root must be an ancestor of v.
		if  v == root: break
		self.putCloseNodeSentinel(v)</t>
<t tx="T1849">@ This method is the same as putSentinel except we don't put an opening newline and leading whitespace.
@c
def putOpenLeoSentinel(self,s):

	self.os(self.startSentinelComment)
	self.os(s)
	self.os(self.endSentinelComment)
	self.onl() # Ends of sentinel.</t>
<t tx="T1850">@ This method puts an open node sentinel for node v.
@c
def putOpenNodeSentinel(self,v):

	if v.isAtFileNode() and v != self.root:
		self.writeError("@file not valid in: " + v.headString())
	else:
		s = self.nodeSentinelText(v)
		self.putSentinel("@+node:" + s)</t>
<t tx="T1851">@ root is an ancestor of v, or root == v.  We call putOpenNodeSentinel on all the descendents of root which are the ancestors of v.
@c
def putOpenSentinels(self,root,v):

	last = root
	while last != v:
		# Set node to v or the ancestor of v that is a child of last.
		node = v
		while node and node.parent() != last:
			node = node.parent()
		assert(node)
		self.putOpenNodeSentinel(node)
		last = node</t>
<t tx="T1852"># Returns the name of the sentinel for warnings.

sentinelNameDict = {
	endAt: "@-at", endBody: "@-body",
	endDoc: "@-body", endLeo: "@-leo",
	endNode: "@-node", endOthers: "@-others",
	noSentinel: "&lt;no sentinel&gt;",
	startAt: "@+at", startBody: "@+body",
	startDirective: "@@", startDoc: "@+doc",
	startLeo: "@+leo", startNode: "@+node",
 	startOthers: "@+others", startVerbatim: "@verbatim" }

def sentinelName(self, kind):
	if atFile.sentinelNameDict.has_key(kind):
		return atFile.sentinelNameDict[kind]
	else:
		return "&lt;unknown sentinel!&gt;"</t>
<t tx="T1853">def skipSentinelStart(self,s,i):

	if is_nl(s,i): i = skip_nl(s,i)
	i = skip_ws(s,i)
	assert(match(s,i,self.startSentinelComment))
	i += len(self.startSentinelComment)
	# 7/8/02: Support for REM hack
	i = skip_ws(s,i)
	assert(i &lt; len(s) and s[i] == '@')
	return i + 1</t>
<t tx="T1854"># Returns the kind of at-directive or noDirective.

def directiveKind(self,s,i):

	n = len(s)
	if i &gt;= n or s[i] != '@':
		return atFile.noDirective
	# This code rarely gets executed, so simple code suffices.
	if i+1 &gt;= n or match(s,i,"@ ") or match(s,i,"@\t") or match(s,i,"@\n"):
		return atFile.atDirective
	if match_word(s,i,"@c"):
		return atFile.cDirective
	elif match_word(s,i,"@code"):
		return atFile.codeDirective
	elif match_word(s,i,"@doc"):
		return atFile.docDirective
	elif match_word(s,i,"@others"):
		return atFile.othersDirective
	else:
		return atFile.miscDirective</t>
<t tx="T1855">def error(self,message):

	es(message)
	self.errors += 1</t>
<t tx="T1856"># Skip past whitespace equivalent to width spaces.

def skipIndent(self,s,i,width):

	c = self.commands
	ws = 0 ; n = len(s)
	while i &lt; n and ws &lt; width:
		if   s[i] == '\t': ws += (abs(self.tab_width) - (ws % abs(self.tab_width)))
		elif s[i] == ' ':  ws += 1
		else: break
		i += 1
	return i</t>
<t tx="T1857">def readError(self,message):

	if 0: # This is more irritating than useful.
		if self.errors == 0:
			es("----- Error reading @file " + self.targetFileName)
	self.error(message)
	self.root.setOrphan()
	self.root.setDirty()</t>
<t tx="T1858">@ The new Leo2 computes clone indices differently from the old Leo2:

1. The new Leo2 recomputes clone indices for every write.
2. The new Leo2 forces the clone index of the @file node to be zero.

Also, the read logic ignores the clone index of @file nodes, thereby ensuring that we don't mistakenly join an @file node to another node.
@c
def updateCloneIndices(self,root,next):

	if root.isCloned():
		self.error("Ignoring clone mark for " + root.headString())
		root.t.setCloneIndex(0)
	index = 0
	# 12/17/01: increment each cloneIndex at most once.
	v = root
	while v and v != next:
		v.t.cloneIndex = 0
		v = v.threadNext()
	v = root
	while v and v != next:
		vIs = v.isCloned()
		vShould = v.shouldBeClone() #verbose
		if 0: # vIs or vShould:
			es("update:"+`index`+" is:"+`vIs`+" should:"+`vShould`+`v`) ; enl()
		if v.t.cloneIndex == 0 and vIs and vShould:
			index += 1
			v.t.cloneIndex = index
		v = v.threadNext()
	# Make sure the root's clone index is zero.
	root.t.setCloneIndex(0)</t>
<t tx="T1859">def writeError(self,message):

	if self.errors == 0:
		es("Errors writing: " + self.targetFileName)
	self.error(message)
	self.root.setOrphan()
	self.root.setDirty()</t>
<t tx="T1860">@ Sections appear in the derived file in reference order, not tree order.  Therefore, when we insert the nth child of the parent there is no guarantee that the previous n-1 children have already been inserted. And it won't work just to insert the nth child as the last child if there aren't n-1 previous siblings.  For example, if we insert the third child followed by the second child followed by the first child the second and third children will be out of order.

To ensure that nodes are placed in the correct location we create "dummy" children as needed as placeholders.  In the example above, we would insert two dummy children when inserting the third child.  When inserting the other two children we replace the previously inserted dummy child with the actual children.

vnode child indices are zero-based.  Here we use 1-based indices.

With the "mirroring" scheme it is a structure error if we ever have to create dummy vnodes.  Such structure errors cause a second pass to be made, with an empty root.  This second pass will generate other structure errors, which are ignored.
@c
def createNthChild(self,n,parent,headline):

	assert(n &gt; 0)

	# Create any needed dummy children.
	dummies = n - parent.numberOfChildren() - 1
	if dummies &gt; 0:
		es("dummy created")
		self.structureErrors += 1
	while dummies &gt; 0:
		dummies -= 1
		dummy = parent.insertAsLastChild(leoNodes.tnode())
		# The user should never see this headline.
		dummy.initHeadString("Dummy")

	if n &lt;= parent.numberOfChildren():
		result = parent.nthChild(n-1)
		resulthead = result.headString()
		if string.strip(headline) != string.strip(resulthead):
			es("headline mismatch:")
			es("head1:" + `string.strip(headline)`)
			es("head2:" + `string.strip(resulthead)`)
			self.structureErrors += 1
	else:
		# This is using a dummy; we should already have bumped structureErrors.
		result = parent.insertAsLastChild(leoNodes.tnode())
	result.initHeadString(headline)
	
	result.setVisited() # Suppress all other errors for this node.
	return result</t>
<t tx="T1861">@ This function joins all nodes in the two trees which should have the same topology. This code makes no other assumptions about the two trees; some or all of the nodes may already have been joined.

There are several differences between this method and the similar vnode:joinTreeTo method.  First, we can not assert that the two trees have the same topology because the derived file could have been edited outside of Leo.  Second, this method also merges the tnodes of all joined nodes.
@c
def joinTrees(self,tree1,tree2):

	assert(tree1 and tree2)
	# Use a common tnode for both nodes.
	if tree1.t != tree2.t:
		tree1.setT(tree2.t)
	# Join the roots using the vnode class.
	tree1.joinNodeTo(tree2)
	# Recursively join all subtrees.
	child1 = tree1.firstChild()
	child2 = tree2.firstChild()
	while child1 and child2:
		self.joinTrees(child1, child2)
		child1 = child1.next()
		child2 = child2.next()
	if child1 or child2:
		self.readError("cloned nodes have different topologies")</t>
<t tx="T1862">@ This method scans all vnodes, calling read for every @file node found.  v should point to the root of the entire tree on entry.

Bug fix: 9/19/01 This routine clears all orphan status bits, so we must set the dirty bit of orphan @file nodes to force the writing of those nodes on saves.  If we didn't do this, a _second_ save of the .leo file would effectively wipe out bad @file nodes!

10/19/01: With the "new" Leo2 there are no such problems, and setting the dirty bit here is still correct.
@c

def readAll(self,root,partialFlag):

	c = self.commands
	c.endEditing() # Capture the current headline.
	anyRead = false
	self.initIvars()
	v = root
	if partialFlag: after = v.nodeAfterTree()
	else: after = None
	while v and v != after:
		if v.isAtIgnoreNode():
			v = v.nodeAfterTree()
		elif v.isAtFileNode():
			anyRead = true
			if partialFlag:
				# We are forcing the read.
				self.read(v)
			else:
				# f v is an orphan, we don't expect to see a derived file,
				# and we shall read a derived file if it exists.
				wasOrphan = v.isOrphan()
				ok = self.read(v)
				if wasOrphan and not ok:
					# Remind the user to fix the problem.
					v.setDirty()
					c.setChanged(true)
			v = v.nodeAfterTree()
		else: v = v.threadNext()
	# Clear all orphan bits.
	v = root
	while v:
		v.clearOrphan()
		v = v.threadNext()
		
	if partialFlag and not anyRead:
		es("No @file nodes in the selected tree.")</t>
<t tx="T1863"># Scans the doc part and appends the text out.
# s,i point to the present line on entry.

def scanDoc(self,file,s,i,out,kind):

	endKind = choose(kind == atFile.startDoc, atFile.endDoc, atFile.endAt)
	single = len(self.endSentinelComment) == 0
	&lt;&lt; Skip the opening sentinel &gt;&gt;
	&lt;&lt; Skip an opening block delim &gt;&gt;
	nextLine = None ; kind = atFile.noSentinel
	while len(s) &gt; 0:
		&lt;&lt; set kind, nextLine &gt;&gt;
		if kind == endKind: break
		&lt;&lt; Skip the leading stuff &gt;&gt;
		&lt;&lt; Append s to out &gt;&gt;
		if nextLine:
			s = nextLine ; nextLine = None
		else: s = file.readline()
	if kind != endKind:
		self.readError("Missing " + self.sentinelName(endKind) + " sentinel")
	&lt;&lt; Remove a closing block delim from out &gt;&gt;</t>
<t tx="T1864">assert(match(s,i,choose(kind == atFile.startDoc, "+doc", "+at")))

out.append(choose(kind == atFile.startDoc, "@doc", "@"))
s = file.readline()
</t>
<t tx="T1865">if not single:
	j = skip_ws(s,0)
	if match(s,j,self.startSentinelComment):
		s = file.readline()</t>
<t tx="T1866">@ For non-sentinel lines we look ahead to see whether the next line is a sentinel.
@c

assert(nextLine==None)

kind = self.sentinelKind(s)

if kind == atFile.noSentinel:
	j = skip_ws(s,0)
	blankLine = s[j] == '\n'
	nextLine = file.readline()
	nextKind = self.sentinelKind(nextLine)
	if blankLine and nextKind == endKind:
		kind = endKind # stop the scan now
</t>
<t tx="T1867"># Point i to the start of the real line.

if single: # Skip the opening comment delim and a blank.
	i = skip_ws(s,0)
	if match(s,i,self.startSentinelComment):
		i += len(self.startSentinelComment)
		if match(s,i," "): i += 1
else:
	i = self.skipIndent(s,0, self.indent)
</t>
<t tx="T1868"># Append the line with a newline if it is real

line = s[i:-1] # remove newline for rstrip.

if line == string.rstrip(line):
	# no trailing whitespace: the newline is real.
	out.append(line + '\n')
else:
	# trailing whitespace: the newline is not real.
	out.append(line)
</t>
<t tx="T1869"># This code will typically only be executed for HTML files.

if 0: ## must be rewritten
	if not single:
		# Remove the ending block delimiter.
		delim = list('\n' + self.endSentinelComment + '\n')
		if out[-len(delim):] == delim:
			# Rewrite the stream.
			out = out[:-len(delim)]</t>
<t tx="T1870">@ This method is the heart of the new read code.  It reads lines from the file until the given ending sentinel is found, and warns if any other ending sentinel is found instead.  It calls itself recursively to handle most nested sentinels.

@c
def scanText (self,file,v,out,endSentinelKind):

	c = self.commands
	lineIndent = 0 ; linep = 0 # Changed only for sentinels.
	nextLine = None
	while 1:
		if nextLine:
			s = nextLine ; nextLine = None
		else:
			s = file.readline()
			if len(s) == 0: break
		# trace(`s`)
		&lt;&lt; set kind, nextKind &gt;&gt;
		if kind != atFile.noSentinel:
			&lt;&lt; set lineIndent, linep and leading_ws &gt;&gt;
			i = self.skipSentinelStart(s,0)
		# All cases must appear here so we can set the next line properly below.
		if kind == atFile.noSentinel:
			&lt;&lt; append non-sentinel line &gt;&gt;
		elif kind == atFile.startAt:
			&lt;&lt; scan @+at &gt;&gt;
		elif kind == atFile.startBody:
			&lt;&lt; scan @+body &gt;&gt;
		elif kind == atFile.startDelims:
			&lt;&lt; scan @delims &gt;&gt;
		elif kind == atFile.startDirective:
			&lt;&lt; scan @@ &gt;&gt;
		elif kind == atFile.startDoc:
			&lt;&lt; scan @+doc &gt;&gt;
		elif kind == atFile.startLeo:
			&lt;&lt; scan @+leo &gt;&gt;
		elif kind == atFile.startNode:
			&lt;&lt; scan @+node &gt;&gt;
		elif kind == atFile.startOthers:
			&lt;&lt; scan @+others &gt;&gt;
		elif kind == atFile.startRef:
			&lt;&lt; scan @ref &gt;&gt;
		elif kind == atFile.startVerbatim:
			&lt;&lt; scan @verbatim &gt;&gt;
		elif ( kind == atFile.endAt or kind == atFile.endBody or
			kind == atFile.endDoc or kind == atFile.endLeo or
			kind == atFile.endNode or kind == atFile.endOthers ):
			&lt;&lt; handle an ending sentinel &gt;&gt;
		else:
			&lt;&lt; warn about unknown sentinel &gt;&gt;
	&lt;&lt; handle unexpected end of text &gt;&gt;
	assert(len(s)==0 and nextLine==None) # We get here only if readline fails.
</t>
<t tx="T1871">@ For non-sentinel lines we look ahead to see whether the next line is a sentinel.  If so, the newline that ends a non-sentinel line belongs to the next sentinel.
@c

assert(nextLine==None)

kind = self.sentinelKind(s)

if kind == atFile.noSentinel:
	nextLine = file.readline()
	nextKind = self.sentinelKind(nextLine)
else:
	nextLine = nextKind = None

# nextLine != None only if we have a non-sentinel line.
# Therefore, nextLine == None whenever scanText returns.</t>
<t tx="T1872">@ lineIndent is the total indentation on a sentinel line.  The first "self.indent" portion of that must be removed when recreating text.  leading_ws is the remainder of the leading whitespace.  linep points to the first "real" character of a line, the character following the "indent" whitespace.
@c

# Point linep past the first self.indent whitespace characters.
linep = self.skipIndent(s,0,self.indent)

# Set lineIndent to the total indentation on the line.
lineIndent = 0 ; i = 0
while i &lt; len(s):
	if s[i] == '\t': lineIndent += (abs(self.tab_width) - (lineIndent % abs(self.tab_width)))
	elif s[i] == ' ': lineIndent += 1
	else: break
	i += 1
# trace("lineIndent:" +`lineIndent` + ", " + `s`)

# Set leading_ws to the additional indentation on the line.
leading_ws = s[linep:i]</t>
<t tx="T1873"># We don't output the trailing newline if the next line is a sentinel.

i = self.skipIndent(s,0,self.indent)

assert(nextLine != None)

if nextKind == atFile.noSentinel:
	line = s[i:]
	out.append(line)
else:
	line = s[i:-1] # don't output the newline
	out.append(line)
</t>
<t tx="T1874">if kind == endSentinelKind:
	if kind == atFile.endLeo:
		s = file.readline()
		if len(s) &gt; 0:
			self.readError("Ignoring text after @-leo")
	# nextLine != None only if we have a non-sentinel line.
	# Therefore, nextLine == None whenever scanText returns.
	assert(nextLine==None)
	return
else:
	# Tell of the structure error.
	name = self.sentinelName(kind)
	expect = self.sentinelName(endSentinelKind)
	self.readError("Ignoring " + name + " sentinel.  Expecting " + expect)</t>
<t tx="T1875"># Issue the error.
name = self.sentinelName(endSentinelKind)
self.readError("Unexpected end of file. Expecting " + name + "sentinel" )
</t>
<t tx="T1876">assert(match(s,i,"+at"))
self.scanDoc(file,s,i,out,kind)</t>
<t tx="T1877">assert(match(s,i,"+body"))
self.scanText(file,v,out,atFile.endBody)</t>
<t tx="T1878">assert(match(s,i,"+doc"))
self.scanDoc(file,s,i,out,kind)</t>
<t tx="T1879">assert(match(s,i,"+leo"))
self.readError("Ignoring unexpected @+leo sentinel")</t>
<t tx="T1880">assert(match(s,i,"+others"))

# Make sure that the generated at-others is properly indented.
out.append(leading_ws + "@others")
self.scanText(file,v,out,atFile.endOthers )</t>
<t tx="T1881">assert(match(s,i,"@delims"));

# Skip the keyword and whitespace.
i0 = i
i = skip_ws(s,i+7)
	
# Get the first delim.
i1 = i
while i &lt; len(s) and is_ws(s[i]) and not is_nl(s,i):
	i += 1
if i1 &lt; i:
	self.startSentinelComment = s[i1,i]

	# Get the optional second delim.
	i1 = i = skip_ws(s,i)
	while i &lt; len(s) and not is_ws(*i) and not is_nl(*i):
		i += 1
	end = choose(i &gt; i1, s[i1:i], "")
	i2 = skip_ws(s,i)
	if end == self.endSentinelComment and (i2 &gt;= len(s) or is_nl(s,i2)):
		self.endSentinelComment = "" # Not really two params.
		line = s[i0:i1]
		line = string.rstrip(line)
		out.append(line)
	else:
		self.endSentinelComment = end
		line = s[i0:i]
		line = string.rstrip(line)
		out.append(line)
else:
	self.readError("Bad @delims")
	# Append the bad @delims line to the body text.
	out.append("@delims")

</t>
<t tx="T1882">@ The sentinel contains an @ followed by a section name in angle brackets.  This code is different from the code for the @@ sentinel: the expansion of the reference does not include a trailing newline.
@c

assert(match(s,i,"&lt;&lt;"))

if len(self.endSentinelComment) == 0:
	line = s[i:-1] # No trailing newline
else:
	k = string.find(s,self.endSentinelComment,i)
	line = s[i:k] # No trailing newline, whatever k is.
	
out.append(line)
</t>
<t tx="T1883">assert(match(s,i,"verbatim"))

# Skip the sentinel.
s = file.readline() 

# Append the next line to the text.
i = self.skipIndent(s,0,self.indent)
out.append(s[i:])
</t>
<t tx="T1884">assert(match(s,i,"@"))

# The first '@' has already been eaten.
if len(self.endSentinelComment) == 0:
	out.append(s[i:])
else:
	k = string.find(s,self.endSentinelComment,i)
	if k == -1:
		out.append(s[i:])
	else:
		out.append(s[i:k] + '\n')
</t>
<t tx="T1885">j = i
i = skip_line(s,i)
line = s[j:i]
self.readError("Unknown sentinel: " + line)</t>
<t tx="T1886">@ root is an ancestor of v, or root == v.  This puts the entire expansion of v's body text enclosed in sentinel lines.
@c

def putBody(self,root,v):

	self.putOpenSentinels(root, v)
	self.putBodyPart(v)
	v.setVisited()
	self.putCloseSentinels(root, v)
</t>
<t tx="T1887">@ We generate the body part only if it contains something besides whitespace. The check for at-ignore is made in atFile::write.
@c
def putBodyPart(self,v):

	s = v.t.bodyString
	i = skip_ws_and_nl(s, 0)
	if i &gt;= len(s): return
	s = removeTrailingWs(s) # don't use string.rstrip!
	self.putSentinel("@+body")
	&lt;&lt; put code/doc parts and sentinels &gt;&gt;
	self.putSentinel("@-body")</t>
<t tx="T1888">i = 0 ; n = len(s)
while i &lt; n:
	kind = self.directiveKind(s,i)
	j = i
	if kind == atFile.docDirective or kind == atFile.atDirective:
		i = self.putDoc(s,i,kind)
	elif kind == atFile.miscDirective:
		i = self.putDirective(s,i)
	elif kind == atFile.noDirective or kind == atFile.othersDirective:
		i = self.putCodePart(s,i,v)
	elif kind == atFile.cDirective or kind == atFile.codeDirective:
		i = self.putDirective(s,i)
		i = self.putCodePart(s,i,v)
	else: assert(false) # We must handle everything that directiveKind returns
	assert(n == len(s))
	assert(j &lt; i) # We must make progress.</t>
<t tx="T1889"># This method outputs s, a directive or reference, in a sentinel.

def putDirective(self,s,i):

	tag = "@delims"
	assert(i &lt; len(s) and s[i] == '@')
	k = i
	j = skip_to_end_of_line(s,i)
	directive = s[i:j]

	if match_word(s,k,tag):
		&lt;&lt; handle @delims &gt;&gt;
	else:
		self.putSentinel("@" + directive)

	i = skip_line(s,k)
	return i</t>
<t tx="T1890"># Put a space to protect the last delim.
self.putSentinel("@" + directive + " ")

# Skip the keyword and whitespace.
j = i = skip_ws(s,k+len(tag))

# Get the first delim.
while i &lt; len(s) and not is_ws(s[i]) and not is_nl(s,i):
	i += 1
if j &lt; i:
	self.startSentinelComment = s[j:i]
	# Get the optional second delim.
	j = i = skip_ws(s,i)
	while i &lt; len(s) and not is_ws(s[i]) and not is_nl(s,i):
		i += 1
	self.endSentinelComment = choose(j&lt;i, s[j:i], "")
else:
	self.writeError("Bad @delims directive")</t>
<t tx="T1891">@ This method outputs a doc section terminated by @code or end-of-text.  All other interior directives become part of the doc part.
@c
def putDoc(self,s,i,kind):

	if kind == atFile.atDirective:
		i += 1 ; tag = "at"
	elif kind == atFile.docDirective:
		i += 4 ; tag = "doc"
	else: assert(false)
	# Set j to the end of the doc part.
	n = len(s) ; j = i
	while j &lt; n:
		j = skip_line(s, j)
		kind = self.directiveKind(s, j)
		if kind == atFile.codeDirective or kind == atFile.cDirective:
			break
	self.putSentinel("@+" + tag)
	self.putDocPart(s[i:j])
	self.putSentinel("@-" + tag)
	return j</t>
<t tx="T1892"># Puts tabs and spaces corresponding to n spaces, assuming that we are at the start of a line.

def putIndent(self,n):

	c = self.commands
	w = abs(self.tab_width)
	if w &gt; 1:
		self.otabs  (n / w)
		self.oblanks(n % w)
	else:
		self.oblanks(n)</t>
<t tx="T1893">@ This method scans all vnodes, calling write for every @file node found.  If partialFlag is true we write all @file nodes in the selected outline.  Otherwise we write @file nodes in the entire outline.
@c
def writeAll(self,v,partialFlag):

	self.initIvars()
	# Kludge: look at whole tree if forceFlag is false;
	if partialFlag: after = v.nodeAfterTree()
	else: after = None
	&lt;&lt; Clear all orphan bits &gt;&gt;
	written = false
	while v and v != after:
		if v.isAtIgnoreNode():
			v = v.nodeAfterTree()
		elif v.isAtFileNode():
			if v.isDirty() or partialFlag:
				self.write(v)
				written = true
			v = v.nodeAfterTree()
		else: v = v.threadNext()
	if partialFlag and not written:
		es("No @file nodes in the selected tree.")</t>
<t tx="T1894">@ We must clear these bits because they may have been set on a previous write.  Calls to atFile::write may set the orphan bits in @file nodes.  If so, write_LEO_file will write the entire @file tree.
@c

v2 = v
while v2 and v2 != after:
	v2.clearOrphan()
	v2 = v2.threadNext()</t>
<t tx="T1895">def scanAll (self):

	c = self.commands ; v = c.rootVnode()
	while v:
		if v.isAtIgnoreNode():
			v = v.nodeAfterTree()
		elif v.isAtFileNode():
			self.scanFile(v)
			v = v.nodeAfterTree()
		else: v = v.threadNext()</t>
<t tx="T1896">def scanFile(self,root):

	es("scanning: " + root.headString())
	self.targetFileName = root.atFileNodeName()
	self.root = root
	self.errors = self.structureErrors = 0
	&lt;&lt; open file &gt;&gt;
	if self.errors &gt; 0: return 0
	&lt;&lt; Scan the file buffer &gt;&gt;
	if self.structureErrors &gt; 0:
		self.readError(`self.structureErrors` + " errors scanning file")
	return self.errors == 0
</t>
<t tx="T1897">if len(self.targetFileName) == 0:
	self.readError("Missing file name")
else:
	try:
		file = open(self.targetFileName,'r')
	except:
		self.readError("Error reading file")
</t>
<t tx="T1898">self.indent = 0
out = []
self.scanHeader(file)
self.scanText(file,root,out,atFile.endLeo)
s = string.join(out, "")
root.setBodyStringOrPane(s)</t>
</tnodes>
</leo_file>
