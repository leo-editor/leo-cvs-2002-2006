<?xml version="1.0" encoding="UTF-8"?>
<leo_file>
<leo_header file_format="2" tnodes="0" max_tnode_index="4923" clone_windows="0"/>
<globals body_outline_ratio="0.454029511918">
	<global_window_position top="15" left="348" height="881" width="836"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences>
</preferences>
<find_panel_settings>
	<find_string></find_string>
	<change_string></change_string>
</find_panel_settings>
<vnodes>
<v t="ekr.20040303080938"><vh>Diary</vh>
<v t="ekr.20040315210314"><vh>March 2004</vh>
<v t="ekr.20040315210314.1"><vh>3/15: Created stubs for Find Commands tests</vh></v>
<v t="ekr.20040315210314.2"><vh>3/15: Convert this file to 4.2 format</vh></v>
<v t="ekr.20040309095121"><vh>3/9: created more position mini tests</vh></v>
<v t="ekr.20040303080938.1"><vh>3/3: created position tests</vh></v>
</v>
</v>
<v t="EKR.20040619133116" a="E"><vh>Unit testing...</vh>
<v t="ekr.20040327114250" tnodeList="ekr.20040327114250"><vh>@file c:\prog\test\unittest\batchTest.py</vh></v>
<v t="EKR.20040623200709"><vh>@thin ../src/leoTest.py</vh></v>
<v t="ekr.20040303063549"><vh>Unit test scripts (Must be located here)</vh>
<v t="ekr.20040126105605"><vh>cloneTestData (not used yet)</vh>
<v t="ekr.20040302092753"><vh>aa</vh></v>
<v t="ekr.20040126105605.2"><vh>a</vh>
<v t="ekr.20040126105605.3"><vh>b</vh>
<v t="ekr.20040301191933"><vh>c</vh>
<v t="ekr.20040302092753.1"><vh>c2</vh>
<v t="ekr.20040302092753.2"><vh>c3</vh></v>
<v t="ekr.20040302092753.3"><vh>c4</vh></v>
</v>
</v>
</v>
<v t="ekr.20040126105605.3"><vh>b</vh>
<v t="ekr.20040301191933"><vh>c</vh>
<v t="ekr.20040302092753.1"><vh>c2</vh>
<v t="ekr.20040302092753.2"><vh>c3</vh></v>
<v t="ekr.20040302092753.3"><vh>c4</vh></v>
</v>
</v>
</v>
</v>
<v t="ekr.20040301191933.1"><vh>d</vh>
<v t="ekr.20040126105605.2"><vh>a</vh>
<v t="ekr.20040126105605.3"><vh>b</vh>
<v t="ekr.20040301191933"><vh>c</vh>
<v t="ekr.20040302092753.1"><vh>c2</vh>
<v t="ekr.20040302092753.2"><vh>c3</vh></v>
<v t="ekr.20040302092753.3"><vh>c4</vh></v>
</v>
</v>
</v>
<v t="ekr.20040126105605.3"><vh>b</vh>
<v t="ekr.20040301191933"><vh>c</vh>
<v t="ekr.20040302092753.1"><vh>c2</vh>
<v t="ekr.20040302092753.2"><vh>c3</vh></v>
<v t="ekr.20040302092753.3"><vh>c4</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="ekr.20040301191933.2"><vh>e</vh></v>
<v t="ekr.20040302092753.4"><vh>z</vh></v>
</v>
<v t="ekr.20040303063549.1"><vh>tempNode</vh></v>
<v t="EKR.20040621100553"><vh>@  file c:\prog\test\tempOutput.txt</vh></v>
<v t="EKR.20040619134504"><vh>atFileTests</vh>
<v t="EKR.20040624112329"><vh>Script to create expected output</vh></v>
<v t="EKR.20040624103339.1"><vh>testAtLast1 no newline</vh>
<v t="EKR.20040624103339.2"><vh>@@file</vh></v>
<v t="EKR.20040624103339.3"><vh>Output</vh></v>
</v>
<v t="EKR.20040623201322.4"><vh>testAtLast2 one newline</vh>
<v t="EKR.20040624111917"><vh>@@file</vh></v>
<v t="EKR.20040624111917.1"><vh>Output</vh></v>
</v>
<v t="EKR.20040623201322.7"><vh>testAtLast3 two newlines</vh>
<v t="EKR.20040624112329.1"><vh>@@file</vh></v>
<v t="EKR.20040624112329.2"><vh>Output</vh></v>
</v>
<v t="EKR.20040623201322.10"><vh>testAtLast4 @thin</vh>
<v t="EKR.20040624112329.3"><vh>@@thin</vh></v>
<v t="EKR.20040624112329.4"><vh>Output</vh></v>
</v>
</v>
<v t="ekr.20040327115825.1"><vh>batchModeTests</vh></v>
<v t="ekr.20040303063549.45"><vh>colorizerTests</vh>
<v t="ekr.20040303063549.46"><vh>Actionscript</vh></v>
<v t="ekr.20040303063549.47"><vh>C</vh></v>
<v t="ekr.20040303063549.48"><vh>C#</vh></v>
<v t="ekr.20040401104620"><vh>css</vh></v>
<v t="ekr.20040303063549.49"><vh>CWEB</vh>
<v t="ekr.20040303063549.50"><vh>&lt;&lt; section ref &gt;&gt;</vh></v>
</v>
<v t="ekr.20040303063549.51"><vh>elisp</vh></v>
<v t="ekr.20040303063549.52"><vh>HTML1</vh></v>
<v t="ekr.20040303063549.53"><vh>HTML2</vh></v>
<v t="ekr.20040303063549.54"><vh>LaTex</vh></v>
<v t="ekr.20040303063549.55"><vh>Mixed</vh></v>
<v t="ekr.20040303063549.56"><vh>PHP</vh></v>
<v t="ekr.20040303063549.57"><vh>Python1</vh></v>
<v t="ekr.20040303063549.58"><vh>Python2</vh></v>
<v t="ekr.20040401113911"><vh>rapidq</vh></v>
<v t="ekr.20040303063549.59"><vh>Rebol</vh></v>
<v t="ekr.20040401111417"><vh>shell</vh></v>
<v t="ekr.20040303063549.60"><vh>wikiTest1</vh></v>
<v t="ekr.20040303063549.61"><vh>wikiTest2</vh></v>
<v t="ekr.20040303063549.62"><vh>wikiTest3</vh></v>
</v>
<v t="ekr.20040303063549.63"><vh>editBodyTests</vh>
<v t="ekr.20040303063549.64"><vh>dedentBody</vh>
<v t="ekr.20040303063549.65"><vh>before</vh></v>
<v t="ekr.20040303063549.66"><vh>after</vh></v>
<v t="ekr.20040303063549.67"><vh>selection</vh></v>
</v>
<v t="ekr.20040303063549.68"><vh>indentBody</vh>
<v t="ekr.20040303063549.69"><vh>before</vh></v>
<v t="ekr.20040303063549.70"><vh>after</vh></v>
<v t="ekr.20040303063549.71"><vh>selection</vh></v>
</v>
<v t="ekr.20040303063549.72"><vh>extractSection</vh>
<v t="ekr.20040303063549.73"><vh>before</vh></v>
<v t="ekr.20040303063549.74"><vh>after</vh>
<v t="ekr.20040303063549.75"><vh>&lt;&lt; section &gt;&gt;</vh></v>
</v>
<v t="ekr.20040303063549.76"><vh>selection</vh></v>
</v>
</v>
<v t="ekr.20040303063549.77"><vh>exportTests</vh>
<v t="ekr.20040303063549.78"><vh>exportHeadlines</vh>
<v t="ekr.20040303063549.79"><vh>dialog</vh></v>
</v>
<v t="ekr.20040303063549.80"><vh>flattenOutline</vh>
<v t="ekr.20040303063549.81"><vh>dialog</vh></v>
</v>
<v t="ekr.20040303063549.82"><vh>weave</vh>
<v t="ekr.20040303063549.83"><vh>dialog</vh></v>
</v>
<v t="ekr.20040303063549.84"><vh>outlineToNoweb</vh>
<v t="ekr.20040303063549.85"><vh>dialog</vh></v>
</v>
<v t="ekr.20040303063549.86"><vh>outlineToCWEB</vh>
<v t="ekr.20040303063549.87"><vh>dialog</vh></v>
</v>
<v t="ekr.20040303063549.88"><vh>removeSentinels</vh>
<v t="ekr.20040303063549.89"><vh>dialog</vh></v>
</v>
</v>
<v t="ekr.20040303063549.120"><vh>leoFileTests</vh></v>
<v t="ekr.20040315202718.2"><vh>findCommandTests</vh></v>
<v t="ekr.20040303063549.90"><vh>importTests</vh>
<v t="ekr.20040303063549.91"><vh>importAtRoot</vh>
<v t="ekr.20040303063549.92"><vh>dialog</vh></v>
</v>
<v t="ekr.20040303063549.93"><vh>importAtFile</vh>
<v t="ekr.20040303063549.94"><vh>dialog</vh></v>
</v>
<v t="ekr.20040303063549.95"><vh>importNowebFiles</vh>
<v t="ekr.20040303063549.96"><vh>dialog</vh></v>
</v>
<v t="ekr.20040303063549.97"><vh>importFlattenedOutline</vh>
<v t="ekr.20040303063549.98"><vh>dialog</vh></v>
</v>
<v t="ekr.20040303063549.99"><vh>importCWEBFiles</vh>
<v t="ekr.20040303063549.100"><vh>dialog</vh></v>
</v>
</v>
<v t="ekr.20040303063549.101"><vh>outlineTests</vh>
<v t="ekr.20040303063549.102"><vh>moveOutlineDown</vh>
<v t="ekr.20040303063549.103"><vh>before</vh>
<v t="ekr.20040303063549.104"><vh>a</vh></v>
<v t="ekr.20040303063549.105"><vh>move</vh></v>
<v t="ekr.20040303063549.106"><vh>b</vh></v>
</v>
<v t="ekr.20040303063549.107"><vh>after</vh>
<v t="ekr.20040303063549.108"><vh>a</vh></v>
<v t="ekr.20040303063549.109"><vh>b</vh></v>
<v t="ekr.20040303063549.110"><vh>move</vh></v>
</v>
<v t="ekr.20040303063549.111"><vh>ref</vh>
<v t="ekr.20040303063549.112"><vh>a</vh></v>
<v t="ekr.20040303063549.113"><vh>move</vh></v>
<v t="ekr.20040303063549.114"><vh>b</vh></v>
</v>
</v>
<v t="ekr.20040303063549.115"><vh>moveOutlineLeft</vh></v>
<v t="ekr.20040303063549.116"><vh>moveOutlineRight</vh></v>
<v t="ekr.20040303063549.117"><vh>moveOutlineUp</vh></v>
</v>
<v t="ekr.20040303063549.118"><vh>pluginsTests</vh></v>
<v t="ekr.20040303063549.119"><vh>positionTests</vh></v>
<v t="ekr.20040303063549.2"><vh>reformatParagraphsTests</vh>
<v t="ekr.20040303063549.3"><vh>testNoTrailingNewline</vh>
<v t="ekr.20040303063549.4"><vh>before</vh></v>
<v t="ekr.20040303063549.5"><vh>after</vh></v>
</v>
<v t="ekr.20040303063549.6"><vh>testTrailingNewline</vh>
<v t="ekr.20040303063549.7"><vh>before</vh></v>
<v t="ekr.20040303063549.8"><vh>after</vh></v>
</v>
<v t="ekr.20040303063549.9"><vh>testMixedLineLengths</vh>
<v t="ekr.20040303063549.10"><vh>before</vh></v>
<v t="ekr.20040303063549.11"><vh>after</vh></v>
</v>
<v t="ekr.20040303063549.12"><vh>testMixedLinesWithLeadingWS</vh>
<v t="ekr.20040303063549.13"><vh>before</vh></v>
<v t="ekr.20040303063549.14"><vh>after</vh></v>
</v>
<v t="ekr.20040303063549.15"><vh>testNoChangeRequired</vh>
<v t="ekr.20040303063549.16"><vh>before</vh></v>
<v t="ekr.20040303063549.17"><vh>after</vh></v>
</v>
<v t="ekr.20040303063549.18"><vh>testHonorLeadingWS</vh>
<v t="ekr.20040303063549.19"><vh>before</vh></v>
<v t="ekr.20040303063549.20"><vh>after</vh></v>
</v>
<v t="ekr.20040303063549.21"><vh>testHonorLeadingWSVar1</vh>
<v t="ekr.20040303063549.22"><vh>before</vh></v>
<v t="ekr.20040303063549.23"><vh>after</vh></v>
</v>
<v t="ekr.20040303063549.24"><vh>testSimpleHangingIndent</vh>
<v t="ekr.20040303063549.25"><vh>before</vh></v>
<v t="ekr.20040303063549.26"><vh>after</vh></v>
</v>
<v t="ekr.20040303063549.27"><vh>testSimpleHangingIndentVar1</vh>
<v t="ekr.20040303063549.28"><vh>before</vh></v>
<v t="ekr.20040303063549.29"><vh>after</vh></v>
</v>
<v t="ekr.20040303063549.30"><vh>testSimpleHangingIndentVar2</vh>
<v t="ekr.20040303063549.31"><vh>before</vh></v>
<v t="ekr.20040303063549.32"><vh>after</vh></v>
</v>
<v t="ekr.20040303063549.33"><vh>testMultiParagraph</vh>
<v t="ekr.20040303063549.34"><vh>before</vh></v>
<v t="ekr.20040303063549.35"><vh>after</vh></v>
</v>
<v t="ekr.20040303063549.36"><vh>testMultiParagraphWithList</vh>
<v t="ekr.20040303063549.37"><vh>before</vh></v>
<v t="ekr.20040303063549.38"><vh>after</vh></v>
</v>
<v t="ekr.20040303063549.39"><vh>testDirectiveBreaksParagraph</vh>
<v t="ekr.20040303063549.40"><vh>before</vh></v>
<v t="ekr.20040303063549.41"><vh>after</vh></v>
</v>
<v t="ekr.20040303063549.42"><vh>testWithLeadingWSOnEmptyLines</vh>
<v t="ekr.20040303063549.43"><vh>before</vh></v>
<v t="ekr.20040303063549.44"><vh>after</vh></v>
</v>
</v>
<v t="ekr.20040303063549.125"><vh>Run all tests</vh></v>
<v t="ekr.20040303080010"><vh>Run all non-file tests</vh></v>
</v>
<v t="ekr.20040630154517" a="TV"><vh>pychecker sources</vh>
<v t="ekr.20040630154517.1"><vh>Copyright notice (BSD)</vh></v>
<v t="ekr.20040630154517.2" a="E"><vh>c:/prog/pychecker-0.8.14/pychecker</vh>
<v t="ekr.20040630154517.3"><vh>@file c:/prog/pychecker-0.8.14/pychecker\checker.py</vh>
<v t="ekr.20040630154517.4"><vh>&lt;&lt; checker declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.5"><vh>setupNamespace</vh></v>
<v t="ekr.20040630154517.6"><vh>cfg</vh></v>
<v t="ekr.20040630154517.7"><vh>_flattenList</vh></v>
<v t="ekr.20040630154517.8"><vh>getModules</vh></v>
<v t="ekr.20040630154517.9"><vh>_q_file</vh></v>
<v t="ekr.20040630154517.10"><vh>_q_find_module</vh></v>
<v t="ekr.20040630154517.11"><vh>_findModule</vh></v>
<v t="ekr.20040630154517.12"><vh>class Variable</vh>
<v t="ekr.20040630154517.13"><vh>&lt;&lt; class Variable declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.14"><vh>__init__</vh></v>
<v t="ekr.20040630154517.15"><vh>__str__</vh></v>
</v>
<v t="ekr.20040630154517.16"><vh>_filterDir</vh></v>
<v t="ekr.20040630154517.17"><vh>_getClassTokens</vh></v>
<v t="ekr.20040630154517.18"><vh>class Class</vh>
<v t="ekr.20040630154517.19"><vh>&lt;&lt; class Class declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.20"><vh>__init__</vh></v>
<v t="ekr.20040630154517.21"><vh>__str__</vh></v>
<v t="ekr.20040630154517.22"><vh>getFirstLine</vh></v>
<v t="ekr.20040630154517.23"><vh>allBaseClasses</vh></v>
<v t="ekr.20040630154517.24"><vh>__getMethodName</vh></v>
<v t="ekr.20040630154517.25"><vh>addMethod</vh></v>
<v t="ekr.20040630154517.26"><vh>addMethods</vh></v>
<v t="ekr.20040630154517.27"><vh>addMembers</vh></v>
<v t="ekr.20040630154517.28"><vh>addMembersFromMethod</vh></v>
<v t="ekr.20040630154517.29"><vh>cleanupMemberRefs</vh></v>
<v t="ekr.20040630154517.30"><vh>abstractMethod</vh></v>
<v t="ekr.20040630154517.31"><vh>isAbstract</vh></v>
</v>
<v t="ekr.20040630154517.32"><vh>_getLineInFile</vh></v>
<v t="ekr.20040630154517.33"><vh>importError</vh></v>
<v t="ekr.20040630154517.34"><vh>_getPyFile</vh></v>
<v t="ekr.20040630154517.35"><vh>class Module</vh>
<v t="ekr.20040630154517.36"><vh>&lt;&lt; class Module declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.37"><vh>__init__</vh></v>
<v t="ekr.20040630154517.38"><vh>__str__</vh></v>
<v t="ekr.20040630154517.39"><vh>addVariable</vh></v>
<v t="ekr.20040630154517.40"><vh>addFunction</vh></v>
<v t="ekr.20040630154517.41"><vh>__addAttributes</vh></v>
<v t="ekr.20040630154517.42"><vh>addClass</vh></v>
<v t="ekr.20040630154517.43"><vh>addModule</vh></v>
<v t="ekr.20040630154517.44"><vh>filename</vh></v>
<v t="ekr.20040630154517.45"><vh>load</vh></v>
<v t="ekr.20040630154517.46"><vh>initModule</vh></v>
<v t="ekr.20040630154517.47"><vh>_initModule</vh></v>
<v t="ekr.20040630154517.48"><vh>setupMainCode</vh></v>
<v t="ekr.20040630154517.49"><vh>_setupMainCode</vh></v>
</v>
<v t="ekr.20040630154517.50"><vh>getAllModules</vh></v>
<v t="ekr.20040630154517.51"><vh>fixupBuiltinModules</vh></v>
<v t="ekr.20040630154517.52"><vh>_printWarnings</vh></v>
<v t="ekr.20040630154517.53"><vh>processFiles</vh></v>
<v t="ekr.20040630154517.54"><vh>getWarnings</vh></v>
<v t="ekr.20040630154517.55"><vh>_print_processing</vh></v>
<v t="ekr.20040630154517.56"><vh>main</vh></v>
<v t="ekr.20040630154517.57"><vh>_get_unique_warnings</vh></v>
</v>
<v t="ekr.20040630154517.58"><vh>@file c:/prog/pychecker-0.8.14/pychecker\CodeChecks.py</vh>
<v t="ekr.20040630154517.59"><vh>&lt;&lt; CodeChecks declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.60"><vh>cfg</vh></v>
<v t="ekr.20040630154517.61"><vh>getFunctionArgErr</vh></v>
<v t="ekr.20040630154517.62"><vh>_checkFunctionArgCount</vh></v>
<v t="ekr.20040630154517.63"><vh>_checkFunctionArgs</vh></v>
<v t="ekr.20040630154517.64"><vh>_getReferenceFromModule</vh></v>
<v t="ekr.20040630154517.65"><vh>_getFunction</vh></v>
<v t="ekr.20040630154517.66"><vh>_checkBuiltin</vh></v>
<v t="ekr.20040630154517.67"><vh>_checkModifyDefaultArg</vh></v>
<v t="ekr.20040630154517.68"><vh>_isexception</vh></v>
<v t="ekr.20040630154517.69"><vh>_checkStringFind</vh></v>
<v t="ekr.20040630154517.70"><vh>_checkAbstract</vh></v>
<v t="ekr.20040630154517.71"><vh>_checkReturnValueUse</vh></v>
<v t="ekr.20040630154517.72"><vh>_handleFunctionCall</vh></v>
<v t="ekr.20040630154517.73"><vh>_classHasAttribute</vh></v>
<v t="ekr.20040630154517.74"><vh>_checkClassAttribute</vh></v>
<v t="ekr.20040630154517.75"><vh>_checkModuleAttribute</vh></v>
<v t="ekr.20040630154517.76"><vh>_getGlobalName</vh></v>
<v t="ekr.20040630154517.77"><vh>_checkNoEffect</vh></v>
<v t="ekr.20040630154517.78"><vh>_makeConstant</vh></v>
<v t="ekr.20040630154517.79"><vh>_hasGlobal</vh></v>
<v t="ekr.20040630154517.80"><vh>_checkGlobal</vh></v>
<v t="ekr.20040630154517.81"><vh>_handleComparison</vh></v>
<v t="ekr.20040630154517.82"><vh>_handleImport</vh></v>
<v t="ekr.20040630154517.83"><vh>_handleImportFrom</vh></v>
<v t="ekr.20040630154517.84"><vh>_getFormatInfo</vh></v>
<v t="ekr.20040630154517.85"><vh>_getConstant</vh></v>
<v t="ekr.20040630154517.86"><vh>_getFormatString</vh></v>
<v t="ekr.20040630154517.87"><vh>_getFormatWarnings</vh></v>
<v t="ekr.20040630154517.88"><vh>_checkAttributeType</vh></v>
<v t="ekr.20040630154517.89"><vh>_getTypeStr</vh></v>
<v t="ekr.20040630154517.90"><vh>_getLineNum</vh></v>
<v t="ekr.20040630154517.91"><vh>class Code</vh>
<v t="ekr.20040630154517.92"><vh>&lt;&lt; class Code declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.93"><vh>__init__</vh></v>
<v t="ekr.20040630154517.94"><vh>init</vh></v>
<v t="ekr.20040630154517.95"><vh>getLineNum</vh></v>
<v t="ekr.20040630154517.96"><vh>getWarning</vh></v>
<v t="ekr.20040630154517.97"><vh>addWarning</vh></v>
<v t="ekr.20040630154517.98"><vh>popNextOp</vh></v>
<v t="ekr.20040630154517.99"><vh>nextOpInfo</vh></v>
<v t="ekr.20040630154517.100"><vh>getFirstOp</vh></v>
<v t="ekr.20040630154517.101"><vh>pushStack</vh></v>
<v t="ekr.20040630154517.102"><vh>popStack</vh></v>
<v t="ekr.20040630154517.103"><vh>popStackItems</vh></v>
<v t="ekr.20040630154517.104"><vh>unpack</vh></v>
<v t="ekr.20040630154517.105"><vh>__getStringStackType</vh></v>
<v t="ekr.20040630154517.106"><vh>__getStackType</vh></v>
<v t="ekr.20040630154517.107"><vh>setType</vh></v>
<v t="ekr.20040630154517.108"><vh>addReturn</vh></v>
<v t="ekr.20040630154517.109"><vh>addRaise</vh></v>
<v t="ekr.20040630154517.110"><vh>addBranch</vh></v>
<v t="ekr.20040630154517.111"><vh>removeBranch</vh></v>
<v t="ekr.20040630154517.112"><vh>remove_unreachable_code</vh></v>
<v t="ekr.20040630154517.113"><vh>updateCheckerArgs</vh></v>
<v t="ekr.20040630154517.114"><vh>updateModuleLineNums</vh></v>
</v>
<v t="ekr.20040630154517.115"><vh>class CodeSource</vh>
<v t="ekr.20040630154517.116"><vh>&lt;&lt; class CodeSource declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.117"><vh>__init__</vh></v>
</v>
<v t="ekr.20040630154517.118"><vh>_checkException</vh></v>
<v t="ekr.20040630154517.119"><vh>_checkAssign</vh></v>
<v t="ekr.20040630154517.120"><vh>_checkVariableOperationOnItself</vh></v>
<v t="ekr.20040630154517.121"><vh>_checkFutureKeywords</vh></v>
<v t="ekr.20040630154517.122"><vh>_STORE_NAME</vh></v>
<v t="ekr.20040630154517.123"><vh>_checkLoadGlobal</vh></v>
<v t="ekr.20040630154517.124"><vh>_LOAD_NAME</vh></v>
<v t="ekr.20040630154517.125"><vh>_LOAD_DEREF</vh></v>
<v t="ekr.20040630154517.126"><vh>_DELETE_NAME</vh></v>
<v t="ekr.20040630154517.127"><vh>_LOAD_CONST</vh></v>
<v t="ekr.20040630154517.128"><vh>_checkLocalShadow</vh></v>
<v t="ekr.20040630154517.129"><vh>_checkShadowBuiltin</vh></v>
<v t="ekr.20040630154517.130"><vh>_checkLoadLocal</vh></v>
<v t="ekr.20040630154517.131"><vh>_handleLoadLocal</vh></v>
<v t="ekr.20040630154517.132"><vh>_LOAD_FAST</vh></v>
<v t="ekr.20040630154517.133"><vh>_STORE_FAST</vh></v>
<v t="ekr.20040630154517.134"><vh>_DELETE_FAST</vh></v>
<v t="ekr.20040630154517.135"><vh>_checkAttribute</vh></v>
<v t="ekr.20040630154517.136"><vh>_checkExcessiveReferences</vh></v>
<v t="ekr.20040630154517.137"><vh>_checkDeprecated</vh></v>
<v t="ekr.20040630154517.138"><vh>_LOAD_ATTR</vh></v>
<v t="ekr.20040630154517.139"><vh>_ok_to_set_attr</vh></v>
<v t="ekr.20040630154517.140"><vh>_STORE_ATTR</vh></v>
<v t="ekr.20040630154517.141"><vh>_DELETE_ATTR</vh></v>
<v t="ekr.20040630154517.142"><vh>_getExceptionInfo</vh></v>
<v t="ekr.20040630154517.143"><vh>_checkCatchException</vh></v>
<v t="ekr.20040630154517.144"><vh>_handleExceptionChecks</vh></v>
<v t="ekr.20040630154517.145"><vh>_checkBoolean</vh></v>
<v t="ekr.20040630154517.146"><vh>_COMPARE_OP</vh></v>
<v t="ekr.20040630154517.147"><vh>_IMPORT_NAME</vh></v>
<v t="ekr.20040630154517.148"><vh>_IMPORT_FROM</vh></v>
<v t="ekr.20040630154517.149"><vh>_IMPORT_STAR</vh></v>
<v t="ekr.20040630154517.150"><vh>_shouldIgnoreCodeOptimizations</vh></v>
<v t="ekr.20040630154517.151"><vh>_shouldIgnoreNoEffectWarning</vh></v>
<v t="ekr.20040630154517.152"><vh>_DUP_TOP</vh></v>
<v t="ekr.20040630154517.153"><vh>_popn</vh></v>
<v t="ekr.20040630154517.154"><vh>_DELETE_SUBSCR</vh></v>
<v t="ekr.20040630154517.155"><vh>_STORE_SUBSCR</vh></v>
<v t="ekr.20040630154517.156"><vh>_CALL_FUNCTION</vh></v>
<v t="ekr.20040630154517.157"><vh>_CALL_FUNCTION_VAR</vh></v>
<v t="ekr.20040630154517.158"><vh>_CALL_FUNCTION_KW</vh></v>
<v t="ekr.20040630154517.159"><vh>_CALL_FUNCTION_VAR_KW</vh></v>
<v t="ekr.20040630154517.160"><vh>_MAKE_FUNCTION</vh></v>
<v t="ekr.20040630154517.161"><vh>_MAKE_CLOSURE</vh></v>
<v t="ekr.20040630154517.162"><vh>_BUILD_MAP</vh></v>
<v t="ekr.20040630154517.163"><vh>_BUILD_TUPLE</vh></v>
<v t="ekr.20040630154517.164"><vh>_BUILD_LIST</vh></v>
<v t="ekr.20040630154517.165"><vh>_BUILD_CLASS</vh></v>
<v t="ekr.20040630154517.166"><vh>_LIST_APPEND</vh></v>
<v t="ekr.20040630154517.167"><vh>_modifyStackName</vh></v>
<v t="ekr.20040630154517.168"><vh>_UNARY_CONVERT</vh></v>
<v t="ekr.20040630154517.169"><vh>_UNARY_POSITIVE</vh></v>
<v t="ekr.20040630154517.170"><vh>_UNARY_NEGATIVE</vh></v>
<v t="ekr.20040630154517.171"><vh>_UNARY_NOT</vh></v>
<v t="ekr.20040630154517.172"><vh>_UNARY_INVERT</vh></v>
<v t="ekr.20040630154517.173"><vh>_popStackRef</vh></v>
<v t="ekr.20040630154517.174"><vh>_popModifiedStack</vh></v>
<v t="ekr.20040630154517.175"><vh>_pop</vh></v>
<v t="ekr.20040630154517.176"><vh>_popModified</vh></v>
<v t="ekr.20040630154517.177"><vh>_checkModifyNoOp</vh></v>
<v t="ekr.20040630154517.178"><vh>_BINARY_AND</vh></v>
<v t="ekr.20040630154517.179"><vh>_BINARY_OR</vh></v>
<v t="ekr.20040630154517.180"><vh>_BINARY_XOR</vh></v>
<v t="ekr.20040630154517.181"><vh>_PRINT_ITEM_TO</vh></v>
<v t="ekr.20040630154517.182"><vh>_coerce_type</vh></v>
<v t="ekr.20040630154517.183"><vh>_BINARY_ADD</vh></v>
<v t="ekr.20040630154517.184"><vh>_BINARY_SUBTRACT</vh></v>
<v t="ekr.20040630154517.185"><vh>_BINARY_SUBSCR</vh></v>
<v t="ekr.20040630154517.186"><vh>_isint</vh></v>
<v t="ekr.20040630154517.187"><vh>_BINARY_DIVIDE</vh></v>
<v t="ekr.20040630154517.188"><vh>_BINARY_TRUE_DIVIDE</vh></v>
<v t="ekr.20040630154517.189"><vh>_BINARY_MULTIPLY</vh></v>
<v t="ekr.20040630154517.190"><vh>_BINARY_MODULO</vh></v>
<v t="ekr.20040630154517.191"><vh>_ROT_TWO</vh></v>
<v t="ekr.20040630154517.192"><vh>_SETUP_EXCEPT</vh></v>
<v t="ekr.20040630154517.193"><vh>_SETUP_FINALLY</vh></v>
<v t="ekr.20040630154517.194"><vh>_END_FINALLY</vh></v>
<v t="ekr.20040630154517.195"><vh>_LINE_NUM</vh></v>
<v t="ekr.20040630154517.196"><vh>_UNPACK_SEQUENCE</vh></v>
<v t="ekr.20040630154517.197"><vh>_SLICE_1_ARG</vh></v>
<v t="ekr.20040630154517.198"><vh>_SLICE3</vh></v>
<v t="ekr.20040630154517.199"><vh>_check_string_iteration</vh></v>
<v t="ekr.20040630154517.200"><vh>_FOR_LOOP</vh></v>
<v t="ekr.20040630154517.201"><vh>_GET_ITER</vh></v>
<v t="ekr.20040630154517.202"><vh>_FOR_ITER</vh></v>
<v t="ekr.20040630154517.203"><vh>_jump</vh></v>
<v t="ekr.20040630154517.204"><vh>_skip_loops</vh></v>
<v t="ekr.20040630154517.205"><vh>_is_unreachable</vh></v>
<v t="ekr.20040630154517.206"><vh>_shouldIgnoreBogusJumps</vh></v>
<v t="ekr.20040630154517.207"><vh>_checkConstantCondition</vh></v>
<v t="ekr.20040630154517.208"><vh>_jump_conditional</vh></v>
<v t="ekr.20040630154517.209"><vh>_JUMP_IF_FALSE</vh></v>
<v t="ekr.20040630154517.210"><vh>_JUMP_IF_TRUE</vh></v>
<v t="ekr.20040630154517.211"><vh>_JUMP_FORWARD</vh></v>
<v t="ekr.20040630154517.212"><vh>_RETURN_VALUE</vh></v>
<v t="ekr.20040630154517.213"><vh>_EXEC_STMT</vh></v>
<v t="ekr.20040630154517.214"><vh>_checkStrException</vh></v>
<v t="ekr.20040630154517.215"><vh>_RAISE_VARARGS</vh></v>
</v>
<v t="ekr.20040630154517.216"><vh>@file c:/prog/pychecker-0.8.14/pychecker\Config.py</vh>
<v t="ekr.20040630154517.217"><vh>&lt;&lt; Config declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.218"><vh>Config.init</vh></v>
<v t="ekr.20040630154517.219"><vh>_getRCfiles</vh></v>
<v t="ekr.20040630154517.220"><vh>outputRc</vh></v>
<v t="ekr.20040630154517.221"><vh>class UsageError</vh></v>
<v t="ekr.20040630154517.222"><vh>_getSuppressions</vh></v>
<v t="ekr.20040630154517.223"><vh>class Config</vh>
<v t="ekr.20040630154517.224"><vh>&lt;&lt; class Config declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.225"><vh>__init__</vh></v>
<v t="ekr.20040630154517.226"><vh>loadFile</vh></v>
<v t="ekr.20040630154517.227"><vh>loadFiles</vh></v>
<v t="ekr.20040630154517.228"><vh>processArgs</vh></v>
</v>
<v t="ekr.20040630154517.229"><vh>errors_only</vh></v>
<v t="ekr.20040630154517.230"><vh>printArg</vh></v>
<v t="ekr.20040630154517.231"><vh>usage</vh></v>
<v t="ekr.20040630154517.232" a="M"><vh>Config.setupFromArgs</vh></v>
</v>
<v t="ekr.20040630154517.233"><vh>@file c:/prog/pychecker-0.8.14/pychecker\function.py</vh>
<v t="ekr.20040630154517.234"><vh>&lt;&lt; function declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.235"><vh>class _ReturnValues</vh>
<v t="ekr.20040630154517.236"><vh>__init__</vh></v>
<v t="ekr.20040630154517.237"><vh>returnsNoValue</vh></v>
</v>
<v t="ekr.20040630154517.238"><vh>class FakeCode</vh>
<v t="ekr.20040630154517.239"><vh>&lt;&lt; class FakeCode declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.240"><vh>__init__</vh></v>
</v>
<v t="ekr.20040630154517.241"><vh>class FakeFunction</vh>
<v t="ekr.20040630154517.242"><vh>&lt;&lt; class FakeFunction declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.243"><vh>__init__</vh></v>
<v t="ekr.20040630154517.244"><vh>__str__</vh></v>
<v t="ekr.20040630154517.245"><vh>__repr__</vh></v>
</v>
<v t="ekr.20040630154517.246"><vh>class Function</vh>
<v t="ekr.20040630154517.247"><vh>&lt;&lt; class Function declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.248"><vh>__init__</vh></v>
<v t="ekr.20040630154517.249"><vh>__str__</vh></v>
<v t="ekr.20040630154517.250"><vh>__repr__</vh></v>
<v t="ekr.20040630154517.251"><vh>arguments</vh></v>
<v t="ekr.20040630154517.252"><vh>isParam</vh></v>
<v t="ekr.20040630154517.253"><vh>isStaticMethod</vh></v>
<v t="ekr.20040630154517.254"><vh>isClassMethod</vh></v>
<v t="ekr.20040630154517.255"><vh>defaultValue</vh></v>
<v t="ekr.20040630154517.256"><vh>varArgName</vh></v>
</v>
<v t="ekr.20040630154517.257"><vh>create_fake</vh></v>
<v t="ekr.20040630154517.258"><vh>create_from_file</vh></v>
<v t="ekr.20040630154517.259"><vh>_co_flags_equal</vh></v>
<v t="ekr.20040630154517.260"><vh>same_signature</vh></v>
</v>
<v t="ekr.20040630154517.261"><vh>@file c:/prog/pychecker-0.8.14/pychecker\msgs.py</vh></v>
<v t="ekr.20040630154517.262"><vh>@file c:/prog/pychecker-0.8.14/pychecker\OP.py</vh>
<v t="ekr.20040630154517.263"><vh>&lt;&lt; OP declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.264"><vh>LINE_NUM</vh></v>
<v t="ekr.20040630154517.265"><vh>LOAD_GLOBAL</vh></v>
<v t="ekr.20040630154517.266"><vh>LOAD_CONST</vh></v>
<v t="ekr.20040630154517.267"><vh>LOAD_FAST</vh></v>
<v t="ekr.20040630154517.268"><vh>LOAD_ATTR</vh></v>
<v t="ekr.20040630154517.269"><vh>STORE_ATTR</vh></v>
<v t="ekr.20040630154517.270"><vh>POP_TOP</vh></v>
<v t="ekr.20040630154517.271"><vh>IMPORT_FROM</vh></v>
<v t="ekr.20040630154517.272"><vh>IMPORT_STAR</vh></v>
<v t="ekr.20040630154517.273"><vh>UNARY_POSITIVE</vh></v>
<v t="ekr.20040630154517.274"><vh>UNARY_NEGATIVE</vh></v>
<v t="ekr.20040630154517.275"><vh>UNARY_INVERT</vh></v>
<v t="ekr.20040630154517.276"><vh>RETURN_VALUE</vh></v>
<v t="ekr.20040630154517.277"><vh>JUMP_FORWARD</vh></v>
<v t="ekr.20040630154517.278"><vh>JUMP_ABSOLUTE</vh></v>
<v t="ekr.20040630154517.279"><vh>FOR_ITER</vh></v>
<v t="ekr.20040630154517.280"><vh>FOR_LOOP</vh></v>
<v t="ekr.20040630154517.281"><vh>SETUP_LOOP</vh></v>
<v t="ekr.20040630154517.282"><vh>BREAK_LOOP</vh></v>
<v t="ekr.20040630154517.283"><vh>RAISE_VARARGS</vh></v>
<v t="ekr.20040630154517.284"><vh>POP_BLOCK</vh></v>
<v t="ekr.20040630154517.285"><vh>END_FINALLY</vh></v>
<v t="ekr.20040630154517.286"><vh>UNPACK_SEQUENCE</vh></v>
<v t="ekr.20040630154517.287"><vh>IS_CONDITIONAL_JUMP</vh></v>
<v t="ekr.20040630154517.288"><vh>IS_NOT</vh></v>
<v t="ekr.20040630154517.289"><vh>getOperand</vh></v>
<v t="ekr.20040630154517.290"><vh>getLabel</vh></v>
<v t="ekr.20040630154517.291"><vh>getInfo</vh></v>
<v t="ekr.20040630154517.292"><vh>initFuncCode</vh></v>
<v t="ekr.20040630154517.293"><vh>conditional</vh></v>
<v t="ekr.20040630154517.294"><vh>class Name</vh>
<v t="ekr.20040630154517.295"><vh>&lt;&lt; class Name declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.296"><vh>__getitem__</vh></v>
</v>
</v>
<v t="ekr.20040630154517.297"><vh>@file c:/prog/pychecker-0.8.14/pychecker\options.py</vh>
<v t="ekr.20040630154517.298"><vh>&lt;&lt; options declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.299"><vh>col_weight</vh></v>
<v t="ekr.20040630154517.300"><vh>spawn</vh></v>
<v t="ekr.20040630154517.301"><vh>edit</vh></v>
<v t="ekr.20040630154517.302"><vh>closeCB</vh></v>
<v t="ekr.20040630154517.303"><vh>class Results</vh>
<v t="ekr.20040630154517.304"><vh>&lt;&lt; class Results declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.305"><vh>__init__</vh></v>
<v t="ekr.20040630154517.306"><vh>show</vh></v>
<v t="ekr.20040630154517.307"><vh>hide</vh></v>
<v t="ekr.20040630154517.308"><vh>line</vh></v>
<v t="ekr.20040630154517.309"><vh>showFile</vh></v>
<v t="ekr.20040630154517.310"><vh>selectLine</vh></v>
</v>
<v t="ekr.20040630154517.311"><vh>class ConfigDialog</vh>
<v t="ekr.20040630154517.312"><vh>&lt;&lt; class ConfigDialog declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.313"><vh>__init__</vh></v>
<v t="ekr.20040630154517.314"><vh>_add_fields</vh></v>
<v t="ekr.20040630154517.315"><vh>_add_group</vh></v>
<v t="ekr.20040630154517.316"><vh>main</vh></v>
<v t="ekr.20040630154517.317"><vh>help</vh></v>
<v t="ekr.20040630154517.318"><vh>focus</vh></v>
<v t="ekr.20040630154517.319"><vh>click</vh></v>
<v t="ekr.20040630154517.320"><vh>ok</vh></v>
<v t="ekr.20040630154517.321"><vh>default</vh></v>
<v t="ekr.20040630154517.322"><vh>file</vh></v>
<v t="ekr.20040630154517.323"><vh>check</vh></v>
</v>
</v>
<v t="ekr.20040630154517.324"><vh>@file c:/prog/pychecker-0.8.14/pychecker\OptionTypes.py</vh>
<v t="ekr.20040630154517.325"><vh>&lt;&lt; OptionTypes declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.326"><vh>bool</vh></v>
<v t="ekr.20040630154517.327"><vh>class Base</vh>
<v t="ekr.20040630154517.328"><vh>&lt;&lt; class Base declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.329"><vh>__init__</vh></v>
<v t="ekr.20040630154517.330"><vh>name</vh></v>
<v t="ekr.20040630154517.331"><vh>set</vh></v>
</v>
<v t="ekr.20040630154517.332"><vh>class Boolean</vh>
<v t="ekr.20040630154517.333"><vh>&lt;&lt; class Boolean declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.334"><vh>__init__</vh></v>
<v t="ekr.20040630154517.335"><vh>field</vh></v>
<v t="ekr.20040630154517.336"><vh>arg</vh></v>
</v>
<v t="ekr.20040630154517.337"><vh>class Number</vh>
<v t="ekr.20040630154517.338"><vh>&lt;&lt; class Number declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.339"><vh>__init__</vh></v>
<v t="ekr.20040630154517.340"><vh>field</vh></v>
<v t="ekr.20040630154517.341"><vh>arg</vh></v>
</v>
<v t="ekr.20040630154517.342"><vh>class Text</vh>
<v t="ekr.20040630154517.343"><vh>&lt;&lt; class Text declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.344"><vh>__init__</vh></v>
<v t="ekr.20040630154517.345"><vh>width</vh></v>
<v t="ekr.20040630154517.346"><vh>field</vh></v>
<v t="ekr.20040630154517.347"><vh>arg</vh></v>
</v>
<v t="ekr.20040630154517.348"><vh>join</vh></v>
<v t="ekr.20040630154517.349"><vh>class List</vh>
<v t="ekr.20040630154517.350"><vh>&lt;&lt; class List declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.351"><vh>__init__</vh></v>
<v t="ekr.20040630154517.352"><vh>set</vh></v>
</v>
</v>
<v t="ekr.20040630154517.353"><vh>@file c:/prog/pychecker-0.8.14/pychecker\printer.py</vh>
<v t="ekr.20040630154517.354"><vh>&lt;&lt; printer declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.355"><vh>printFunction</vh></v>
<v t="ekr.20040630154517.356"><vh>module</vh></v>
<v t="ekr.20040630154517.357"><vh>attrs</vh></v>
</v>
<v t="ekr.20040630154517.358"><vh>@file c:/prog/pychecker-0.8.14/pychecker\python.py</vh>
<v t="ekr.20040630154517.359"><vh>&lt;&lt; python declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.360"><vh>tryAddGlobal</vh></v>
<v t="ekr.20040630154517.361"><vh>_setupBuiltinMethods</vh></v>
<v t="ekr.20040630154517.362"><vh>_setupBuiltinAttrs</vh></v>
</v>
<v t="ekr.20040630154517.363"><vh>@file c:/prog/pychecker-0.8.14/pychecker\Stack.py</vh>
<v t="ekr.20040630154517.364"><vh>&lt;&lt; Stack declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.365"><vh>class Item</vh>
<v t="ekr.20040630154517.366"><vh>&lt;&lt; class Item declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.367"><vh>__init__</vh></v>
<v t="ekr.20040630154517.368"><vh>__str__</vh></v>
<v t="ekr.20040630154517.369"><vh>__repr__</vh></v>
<v t="ekr.20040630154517.370"><vh>isNone</vh></v>
<v t="ekr.20040630154517.371"><vh>isImplicitNone</vh></v>
<v t="ekr.20040630154517.372"><vh>isMethodCall</vh></v>
<v t="ekr.20040630154517.373"><vh>isLocals</vh></v>
<v t="ekr.20040630154517.374"><vh>setStringType</vh></v>
<v t="ekr.20040630154517.375"><vh>getType</vh></v>
<v t="ekr.20040630154517.376"><vh>getName</vh></v>
<v t="ekr.20040630154517.377"><vh>addAttribute</vh></v>
</v>
<v t="ekr.20040630154517.378"><vh>makeDict</vh></v>
<v t="ekr.20040630154517.379"><vh>makeTuple</vh></v>
<v t="ekr.20040630154517.380"><vh>makeList</vh></v>
<v t="ekr.20040630154517.381"><vh>makeFuncReturnValue</vh></v>
<v t="ekr.20040630154517.382"><vh>makeComparison</vh></v>
</v>
<v t="ekr.20040630154517.383"><vh>@file c:/prog/pychecker-0.8.14/pychecker\utils.py</vh>
<v t="ekr.20040630154517.384"><vh>&lt;&lt; utils declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.385"><vh>cfg</vh></v>
<v t="ekr.20040630154517.386"><vh>initConfig</vh></v>
<v t="ekr.20040630154517.387"><vh>pushConfig</vh></v>
<v t="ekr.20040630154517.388"><vh>popConfig</vh></v>
<v t="ekr.20040630154517.389"><vh>shouldUpdateArgs</vh></v>
<v t="ekr.20040630154517.390"><vh>updateCheckerArgs</vh></v>
<v t="ekr.20040630154517.391"><vh>debug</vh></v>
<v t="ekr.20040630154517.392"><vh>pythonVersion</vh></v>
<v t="ekr.20040630154517.393"><vh>startswith</vh></v>
<v t="ekr.20040630154517.394"><vh>endswith</vh></v>
<v t="ekr.20040630154517.395"><vh>std_repr</vh></v>
</v>
<v t="ekr.20040630154517.396"><vh>@file c:/prog/pychecker-0.8.14/pychecker\warn.py</vh>
<v t="ekr.20040630154517.397"><vh>&lt;&lt; warn declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.398"><vh>cfg</vh></v>
<v t="ekr.20040630154517.399"><vh>_checkSelfArg</vh></v>
<v t="ekr.20040630154517.400"><vh>_checkNoSelfArg</vh></v>
<v t="ekr.20040630154517.401"><vh>_checkSubclass</vh></v>
<v t="ekr.20040630154517.402"><vh>_checkReturnWarnings</vh></v>
<v t="ekr.20040630154517.403"><vh>_checkComplex</vh></v>
<v t="ekr.20040630154517.404"><vh>_checkCode</vh></v>
<v t="ekr.20040630154517.405"><vh>_name_unused</vh></v>
<v t="ekr.20040630154517.406"><vh>_checkUnusedParam</vh></v>
<v t="ekr.20040630154517.407"><vh>_handleNestedCode</vh></v>
<v t="ekr.20040630154517.408"><vh>_findUnreachableCode</vh></v>
<v t="ekr.20040630154517.409"><vh>_checkFunction</vh></v>
<v t="ekr.20040630154517.410"><vh>_getUnused</vh></v>
<v t="ekr.20040630154517.411"><vh>_get_func_info</vh></v>
<v t="ekr.20040630154517.412"><vh>_baseInitCalled</vh></v>
<v t="ekr.20040630154517.413"><vh>_checkBaseClassInit</vh></v>
<v t="ekr.20040630154517.414"><vh>_checkOverridenMethods</vh></v>
<v t="ekr.20040630154517.415"><vh>_updateFunctionWarnings</vh></v>
<v t="ekr.20040630154517.416"><vh>getBlackList</vh></v>
<v t="ekr.20040630154517.417"><vh>getStandardLibrary</vh></v>
<v t="ekr.20040630154517.418"><vh>normalize_path</vh></v>
<v t="ekr.20040630154517.419"><vh>removeWarnings</vh></v>
<v t="ekr.20040630154517.420"><vh>class _SuppressionError</vh>
<v t="ekr.20040630154517.421"><vh>&lt;&lt; class _SuppressionError declarations &gt;&gt;</vh></v>
</v>
<v t="ekr.20040630154517.422"><vh>_updateSuppressions</vh></v>
<v t="ekr.20040630154517.423"><vh>getSuppression</vh></v>
<v t="ekr.20040630154517.424"><vh>_findFunctionWarnings</vh></v>
<v t="ekr.20040630154517.425"><vh>_getModuleFromFilename</vh></v>
<v t="ekr.20040630154517.426"><vh>_findClassWarnings</vh></v>
<v t="ekr.20040630154517.427"><vh>find</vh></v>
</v>
<v t="ekr.20040630154517.428"><vh>@file c:/prog/pychecker-0.8.14/pychecker\Warning.py</vh>
<v t="ekr.20040630154517.429"><vh>&lt;&lt; Warning declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.430"><vh>class Warning</vh>
<v t="ekr.20040630154517.431"><vh>&lt;&lt; class Warning declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.432"><vh>__init__</vh></v>
<v t="ekr.20040630154517.433"><vh>__cmp__</vh></v>
<v t="ekr.20040630154517.434"><vh>format</vh></v>
<v t="ekr.20040630154517.435"><vh>output</vh></v>
</v>
</v>
<v t="ekr.20040630154517.436"><vh>@file c:/prog/pychecker-0.8.14/pychecker\__init__.py</vh></v>
<v t="ekr.20040630154517.437"><vh>argument handling</vh>
<v t="ekr.20040630154517.217" a="M"><vh>&lt;&lt; Config declarations &gt;&gt;</vh></v>
<v t="ekr.20040630154517.218"><vh>Config.init</vh></v>
<v t="ekr.20040630154517.232"><vh>Config.setupFromArgs</vh></v>
<v t="ekr.20040630154517.228"><vh>processArgs</vh></v>
</v>
</v>
</v>
</v>
<v t="EKR.20040623202054.1"><vh>Others...</vh>
<v t="EKR.20040626212434"><vh>Drawing experiments</vh>
<v t="EKR.20040626212434.1"><vh>Rectangles &amp; ovals</vh></v>
<v t="EKR.20040626212434.2"><vh>Lines &amp; arcs</vh></v>
<v t="EKR.20040626213007"><vh>Paul Klee</vh></v>
<v t="EKR.20040627150213"><vh>Complex functions</vh></v>
</v>
<v t="ekr.20040303071432"><vh>Mini tests, scripts &amp; experiments</vh>
<v t="ekr.20040312101720"><vh>Experiments</vh>
<v t="ekr.20040302091705"><vh>Test of moving positions</vh></v>
<v t="ekr.20040323075614"><vh>Test of using an iterator inside a list comprehension</vh></v>
<v t="ekr.20040323080317"><vh>Test of using c.allNodes_iter to create a list of all positions</vh></v>
<v t="ekr.20040323082119"><vh>Creating a list of distinct vnodes</vh></v>
<v t="ekr.20040325082811"><vh>Test that back quotes are not needed in es</vh></v>
<v t="ekr.20040325130503" a="M"><vh>test of list comparisons</vh></v>
<v t="ekr.20040325140133"><vh>test that childIndex doesn't mess with p</vh></v>
<v t="ekr.20040325155043"><vh>Test of __cmp__ vrs equal</vh></v>
</v>
<v t="ekr.20040312101720.1"><vh>Mini tests</vh>
<v t="ekr.20040309111054"><vh>Print iterations: do not delete</vh>
<v t="ekr.20040309111102"><vh>Clone test data</vh>
<v t="ekr.20040309111102.1"><vh>aa</vh></v>
<v t="ekr.20040309111102.2"><vh>a</vh>
<v t="ekr.20040309111102.3"><vh>b</vh>
<v t="ekr.20040309111102.4"><vh>c</vh>
<v t="ekr.20040309111102.5"><vh>c2</vh>
<v t="ekr.20040309111102.6"><vh>c3</vh></v>
<v t="ekr.20040309111102.7"><vh>c4</vh></v>
</v>
</v>
</v>
<v t="ekr.20040309111102.3"><vh>b</vh>
<v t="ekr.20040309111102.4"><vh>c</vh>
<v t="ekr.20040309111102.5"><vh>c2</vh>
<v t="ekr.20040309111102.6"><vh>c3</vh></v>
<v t="ekr.20040309111102.7"><vh>c4</vh></v>
</v>
</v>
</v>
</v>
<v t="ekr.20040309111102.8"><vh>d</vh>
<v t="ekr.20040309111102.2"><vh>a</vh>
<v t="ekr.20040309111102.3"><vh>b</vh>
<v t="ekr.20040309111102.4"><vh>c</vh>
<v t="ekr.20040309111102.5"><vh>c2</vh>
<v t="ekr.20040309111102.6"><vh>c3</vh></v>
<v t="ekr.20040309111102.7"><vh>c4</vh></v>
</v>
</v>
</v>
<v t="ekr.20040309111102.3"><vh>b</vh>
<v t="ekr.20040309111102.4"><vh>c</vh>
<v t="ekr.20040309111102.5"><vh>c2</vh>
<v t="ekr.20040309111102.6"><vh>c3</vh></v>
<v t="ekr.20040309111102.7"><vh>c4</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="ekr.20040309111102.9"><vh>e</vh></v>
<v t="ekr.20040309111102.10"><vh>z</vh></v>
</v>
<v t="ekr.20040309111232"><vh>last node</vh></v>
</v>
<v t="ekr.20040311125054"><vh>Test that p.t == p.v.t</vh></v>
<v t="ekr.20040310145919"><vh>Change python keywords</vh></v>
<v t="ekr.20040315030123"><vh>test convertTreeToString and allies</vh>
<v t="ekr.20040315025315"><vh>File Conversion</vh>
<v t="ekr.20040315025315.1"><vh>convertTreeToString</vh></v>
<v t="ekr.20040315025315.2"><vh>moreHead</vh></v>
<v t="ekr.20040315025315.3"><vh>moreBody</vh></v>
</v>
</v>
<v t="ekr.20040318102920"><vh>test of consistency between parents iter and v.parents</vh>
<v t="ekr.20040318102920.1"><vh>parent</vh>
<v t="ekr.20040318102920.2"><vh>actual test</vh></v>
</v>
<v t="ekr.20040318102920.1"><vh>parent</vh>
<v t="ekr.20040318102920.2"><vh>actual test</vh></v>
</v>
</v>
<v t="ekr.20040323085406"><vh>test of isAnyAtFileNode</vh></v>
<v t="ekr.20040323090541"><vh>Check consistency of p.v.t.vnodeList, &amp; v.parents for cloned nodes</vh></v>
<v t="ekr.20040323085933"><vh>test of findAllPotentiallyDirtyNodes</vh></v>
<v t="ekr.20040323162303"><vh>Check that cloned nodes actually share subtrees</vh></v>
<v t="ekr.20040325073120"><vh>Test that isAt...FileNode works</vh>
<v t="ekr.20040325073120.1"><vh>@thinfile thinfile.txt</vh></v>
</v>
<v t="ekr.20040330103006" tnodeList="ekr.20040330103006"><vh>@file c:\prog\test\testSectionDelims.txt</vh></v>
<v t="ekr.20040327105955"><vh>test of batch mode</vh></v>
<v t="ekr.20040419105536" tnodeList="ekr.20040419105536,ekr.20040419105536.1,ekr.20040419105536.2"><vh>@file c:\prog\test\perlLineNumbersTest.txt</vh>
<v t="ekr.20040419105536.1"><vh>one</vh></v>
<v t="ekr.20040419105536.2"><vh>two</vh></v>
</v>
<v t="EKR.20040427092657"><vh>@ file-thin c:\prog\test\at-file-thin-test.txt</vh>
<v t="EKR.20040427092657.1"><vh>node 1</vh>
<v t="EKR.20040428145741"><vh>&lt;&lt; node 1 ref &gt;&gt;</vh>
<v t="EKR.20040428145741.1"><vh>child node 1</vh></v>
<v t="EKR.20040428145741.2"><vh>child node 2</vh></v>
</v>
</v>
<v t="EKR.20040427092657.2"><vh>&lt;&lt; ref &gt;&gt;</vh>
<v t="EKR.20040428150018"><vh>organizer node</vh>
<v t="EKR.20040428145826"><vh>ref child 1</vh></v>
<v t="EKR.20040428145826.1"><vh>ref child 2</vh></v>
</v>
</v>
</v>
<v t="ekr.20040414082806"><vh>Clone test</vh>
<v t="ekr.20040409140301"><vh>clone test</vh>
<v t="ekr.20040409140301.1"><vh>b</vh>
<v t="ekr.20040409140301.2"><vh>c</vh>
<v t="ekr.20040409142108"><vh>firstChild</vh></v>
<v t="ekr.20040409142108.1"><vh>secondChild</vh></v>
</v>
<v t="ekr.20040409142028"><vh>sibling</vh></v>
</v>
<v t="ekr.20040409140301.3"><vh>a</vh></v>
</v>
<v t="ekr.20040409140343"><vh>d</vh>
<v t="ekr.20040409140301.2"><vh>c</vh>
<v t="ekr.20040409142108"><vh>firstChild</vh></v>
<v t="ekr.20040409142108.1"><vh>secondChild</vh></v>
</v>
<v t="ekr.20040409142028.1"><vh>sibling 2</vh></v>
</v>
<v t="ekr.20040409142108"><vh>firstChild</vh></v>
<v t="ekr.20040409140343.1"><vh>last</vh></v>
</v>
</v>
<v t="EKR.20040531110157"><vh>at-file thin tests</vh>
<v t="EKR.20040520104329"><vh>@thin c:\prog\test\thinCloneTest.txt</vh></v>
<v t="EKR.20040524050419" tnodeList="EKR.20040524050419,EKR.20040524050419.1,EKR.20040524050419.2"><vh>@file c:\prog\test\fatGrandChildTest.txt</vh>
<v t="EKR.20040524050419.1"><vh>Organizer node</vh>
<v t="EKR.20040524050419.2"><vh>&lt;&lt; defined in grandchild &gt;&gt;</vh></v>
</v>
</v>
<v t="EKR.20040524050438"><vh>@thin c:\prog\test\grandChildTest.txt</vh></v>
<v t="EKR.20040525083635" tnodeList="EKR.20040525083635,EKR.20040525083635.1"><vh>@file c:\prog\test\orphanMessageTest.txt</vh>
<v t="EKR.20040525083635.1"><vh>orphan</vh></v>
</v>
</v>
</v>
<v t="EKR.20040430160416"><vh>Tests: for unit tests</vh>
<v t="EKR.20040430160416.1"><vh>jEdit modes Colorizer tests (bugs here)</vh>
<v t="EKR.20040430160416.2"><vh>tex.xml</vh>
<v t="EKR.20040430160416.3"><vh>&lt;&lt; general rules &gt;&gt;</vh></v>
<v t="EKR.20040430160416.4"><vh>&lt;&lt; math rules &gt;&gt;</vh></v>
</v>
<v t="EKR.20040430160416.5"><vh>python.xml</vh>
<v t="EKR.20040430160416.6"><vh>&lt;&lt; remarks &gt;&gt;</vh></v>
<v t="EKR.20040430160416.7"><vh>&lt;&lt; comments &gt;&gt;</vh></v>
<v t="EKR.20040430160416.8"><vh>&lt;&lt; literals &gt;&gt;</vh></v>
<v t="EKR.20040430160416.9"><vh>&lt;&lt; operators &gt;&gt;</vh></v>
<v t="EKR.20040430160416.10"><vh>&lt;&lt; keywords &gt;&gt;</vh>
<v t="EKR.20040430160416.11"><vh>&lt;&lt; reserved words &gt;&gt;</vh></v>
<v t="EKR.20040430160416.12"><vh>&lt;&lt; builtins &gt;&gt;</vh></v>
<v t="EKR.20040430160416.13"><vh>&lt;&lt; exceptions &gt;&gt;</vh></v>
<v t="EKR.20040430160416.14"><vh>&lt;&lt; types &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="EKR.20040430160416.15"><vh> Colorizing Test</vh></v>
<v t="EKR.20040430162649.1"><vh>Unicode tests</vh>
<v t="EKR.20040430162649.2"><vh> Tests</vh>
<v t="EKR.20040430162649.3"><vh>@file-asis c:\prog\test\asisTest.txt</vh></v>
<v t="EKR.20040430162649.4"><vh>@file-nosent c:\prog\test\nosentTest.txt</vh></v>
<v t="EKR.20040430162649.5"><vh>@file-noref c:\prog\test\norefTest.txt</vh></v>
</v>
<v t="EKR.20040430162649.6"><vh> Tests</vh>
<v t="EKR.20040430162649.7"><vh>Import/export tests</vh>
<v t="EKR.20040430162649.8"><vh>test</vh>
<v t="EKR.20040430162649.9"><vh>NewHeadlineë</vh></v>
</v>
</v>
<v t="EKR.20040430162649.10"><vh>@file c:/prog/test/unicodeTest.doc</vh>
<v t="EKR.20040430162649.11"><vh>NewÖ</vh></v>
</v>
</v>
</v>
<v t="EKR.20040430162649.12"><vh>REM_ hack and perlpod hacks</vh>
<v t="EKR.20040430162649.13"><vh>perlpod test</vh>
<v t="EKR.20040430162649.14"><vh>perlpod test</vh>
<v t="EKR.20040430162649.15"><vh>&lt;&lt; ref &gt;&gt;</vh></v>
</v>
</v>
<v t="EKR.20040430162649.16"><vh>REM test</vh>
<v t="EKR.20040430162649.17"><vh>@file c:/prog/test/remTest.txt</vh></v>
</v>
</v>
<v t="EKR.20040430162649.18"><vh>Allow @comment after @language plain</vh>
<v t="EKR.20040430162649.19"><vh>Test</vh></v>
</v>
<v t="EKR.20040430162649.20"><vh>Suppress @@ sentinel unless leading @ starts a directive</vh>
<v t="EKR.20040430162649.21"><vh>@file c:\prog\test\perltest.txt</vh></v>
</v>
<v t="EKR.20040430162649.22"><vh>Reformat Paragraph tests</vh></v>
<v t="EKR.20040430162649.23"><vh>(double @root bug)</vh>
<v t="EKR.20040430162649.24"><vh>Assert fails</vh></v>
<v t="EKR.20040430162649.25"><vh>double at-root test (assert fails)</vh></v>
</v>
<v t="EKR.20040526094831"><vh>Test of undo registration</vh></v>
<v t="EKR.20040526193608"><vh>Tests of pickle &amp; hexlify</vh></v>
<v t="EKR.20040526200017" myPlugin="7d710055016171014930310a732e"><vh>Test of unknownAttributes</vh></v>
<v t="EKR.20040529092739"><vh>Tests of c iters</vh>
<v t="EKR.20040529093047"><vh>&lt;&lt; coverage tests &gt;&gt;</vh></v>
<v t="EKR.20040529093047.1"><vh>&lt;&lt; duplicate tests &gt;&gt;</vh></v>
</v>
<v t="EKR.20040528152529"><vh>Tests of p and v iters</vh>
<v t="EKR.20040527073459"><vh>child1</vh>
<v t="EKR.20040527072047"><vh>a</vh>
<v t="EKR.20040527072047.1"><vh>b</vh></v>
</v>
<v t="EKR.20040527074524"><vh>c</vh></v>
<v t="EKR.20040527072047"><vh>a</vh>
<v t="EKR.20040527072047.1"><vh>b</vh></v>
</v>
<v t="EKR.20040527074524.1"><vh>d</vh>
<v t="EKR.20040527074524.2"><vh>e</vh></v>
</v>
</v>
<v t="EKR.20040529105640"><vh>child2</vh></v>
<v t="EKR.20040529104307"><vh>&lt;&lt; tests of consistency of p and v iters &gt;&gt;</vh></v>
<v t="EKR.20040527083449.1"><vh>&lt;&lt; tests that node iterators return no duplicate nodes &gt;&gt;</vh></v>
<v t="EKR.20040527083449.2"><vh>&lt;&lt; print nodes returned by iterators &gt;&gt;</vh></v>
</v>
<v t="EKR.20040527154402"><vh>Test of undo extract section</vh>
<v t="EKR.20040528130659"><vh>a</vh></v>
<v t="EKR.20040528130659"><vh>a</vh></v>
</v>
<v t="EKR.20040523112430"><vh>Cloning headlines</vh>
<v t="EKR.20040523112430.1"><vh>read me</vh>
<v t="EKR.20040523112430.2"><vh>b</vh>
<v t="EKR.20040523112430.3"><vh>c</vh>
<v t="EKR.20040523112430.4"><vh>d</vh></v>
<v t="EKR.20040523112430.5"><vh>e</vh></v>
</v>
<v t="EKR.20040523112430.3"><vh>c</vh>
<v t="EKR.20040523112430.4"><vh>d</vh></v>
<v t="EKR.20040523112430.5"><vh>e</vh></v>
</v>
</v>
<v t="EKR.20040523112430.6"><vh>g</vh></v>
</v>
<v t="EKR.20040523112430.7"><vh>a</vh>
<v t="EKR.20040523112430.2"><vh>b</vh>
<v t="EKR.20040523112430.3"><vh>c</vh>
<v t="EKR.20040523112430.4"><vh>d</vh></v>
<v t="EKR.20040523112430.5"><vh>e</vh></v>
</v>
<v t="EKR.20040523112430.3"><vh>c</vh>
<v t="EKR.20040523112430.4"><vh>d</vh></v>
<v t="EKR.20040523112430.5"><vh>e</vh></v>
</v>
</v>
<v t="EKR.20040523112430.2"><vh>b</vh>
<v t="EKR.20040523112430.3"><vh>c</vh>
<v t="EKR.20040523112430.4"><vh>d</vh></v>
<v t="EKR.20040523112430.5"><vh>e</vh></v>
</v>
<v t="EKR.20040523112430.3"><vh>c</vh>
<v t="EKR.20040523112430.4"><vh>d</vh></v>
<v t="EKR.20040523112430.5"><vh>e</vh></v>
</v>
</v>
<v t="EKR.20040523112430.6"><vh>g</vh></v>
</v>
<v t="EKR.20040523112430.7"><vh>a</vh>
<v t="EKR.20040523112430.2"><vh>b</vh>
<v t="EKR.20040523112430.3"><vh>c</vh>
<v t="EKR.20040523112430.4"><vh>d</vh></v>
<v t="EKR.20040523112430.5"><vh>e</vh></v>
</v>
<v t="EKR.20040523112430.3"><vh>c</vh>
<v t="EKR.20040523112430.4"><vh>d</vh></v>
<v t="EKR.20040523112430.5"><vh>e</vh></v>
</v>
</v>
<v t="EKR.20040523112430.2"><vh>b</vh>
<v t="EKR.20040523112430.3"><vh>c</vh>
<v t="EKR.20040523112430.4"><vh>d</vh></v>
<v t="EKR.20040523112430.5"><vh>e</vh></v>
</v>
<v t="EKR.20040523112430.3"><vh>c</vh>
<v t="EKR.20040523112430.4"><vh>d</vh></v>
<v t="EKR.20040523112430.5"><vh>e</vh></v>
</v>
</v>
<v t="EKR.20040523112430.6"><vh>g</vh></v>
</v>
<v t="EKR.20040523112430.8"><vh>f</vh></v>
</v>
</v>
<v t="EKR.20040608095146"><vh>Recent tests</vh>
<v t="EKR.20040504083716.44"><vh>perfect import unit tests</vh>
<v t="EKR.20040504083716.45"><vh>@   file test_sentinels.py</vh>
<v t="EKR.20040504083716.47"><vh>class sentinel_test</vh>
<v t="EKR.20040504083716.48"><vh>setUp</vh></v>
<v t="EKR.20040504083716.49"><vh>setup_inputfile</vh></v>
<v t="EKR.20040504083716.50"><vh>setup_configfile</vh></v>
</v>
<v t="EKR.20040504083716.51"><vh>insert tests</vh>
<v t="EKR.20040504083716.52"><vh>class insert_test</vh>
<v t="EKR.20040504083716.53"><vh>setUp</vh></v>
<v t="EKR.20040504083716.54"><vh>runTest</vh></v>
</v>
</v>
<v t="EKR.20040504083716.55"><vh>replacement tests</vh>
<v t="EKR.20040504083716.56"><vh>class replace_test</vh>
<v t="EKR.20040504083716.57"><vh>setUp</vh></v>
<v t="EKR.20040504083716.58"><vh>runTest</vh></v>
</v>
<v t="EKR.20040504083716.59"><vh>class replace_test2</vh>
<v t="EKR.20040504083716.60"><vh>setUp</vh></v>
<v t="EKR.20040504083716.61"><vh>runTest</vh></v>
</v>
<v t="EKR.20040504083716.62"><vh>class replace_test3</vh>
<v t="EKR.20040504083716.63"><vh>setUp</vh></v>
<v t="EKR.20040504083716.64"><vh>runTest</vh></v>
</v>
<v t="EKR.20040504083716.65"><vh>class replace_test4</vh>
<v t="EKR.20040504083716.66"><vh>setUp</vh></v>
<v t="EKR.20040504083716.67"><vh>runTest</vh></v>
</v>
</v>
<v t="EKR.20040504083716.68"><vh>regression tests</vh>
<v t="EKR.20040504083716.69"><vh>class regression_test_1</vh>
<v t="EKR.20040504083716.70"><vh>setUp</vh></v>
<v t="EKR.20040504083716.71"><vh>runTest</vh></v>
</v>
</v>
<v t="EKR.20040504083716.72"><vh>main</vh></v>
</v>
<v t="EKR.20040504083716.73"><vh>not used</vh>
<v t="EKR.20040504083716.74" tnodeList="EKR.20040504083716.74"><vh>@file testtesting.ini</vh></v>
<v t="EKR.20040504083716.75"><vh>tests to write</vh>
<v t="EKR.20040504083716.76"><vh>Insert tests.</vh></v>
<v t="EKR.20040504083716.77"><vh>deletion tests.</vh></v>
<v t="EKR.20040504083716.78"><vh>Creation of backup files.</vh></v>
</v>
</v>
</v>
<v t="EKR.20040504083716"><vh>Mulder Update script</vh>
<v t="EKR.20040504083716.39"><vh>sync</vh>
<v t="EKR.20040504153320"><vh>&lt;&lt; compute sourcetime and targettime &gt;&gt;</vh></v>
<v t="EKR.20040504153320.1"><vh>&lt;&lt; compute operation &gt;&gt;</vh></v>
</v>
</v>
<v t="EKR.20040602101648"><vh>Test of "end1" hook</vh></v>
<v t="ekr.20040317173327"><vh>Delete user icons</vh></v>
<v t="ekr.20040317101155"><vh>Test of user icons</vh>
<v t="ekr.20040317185041"><vh>&lt;&lt; define event callbacks &gt;&gt;</vh></v>
</v>
<v t="EKR.20040603064545"><vh>Print timestamps of all nodes</vh></v>
<v t="EKR.20040603103118"><vh>String bug in html</vh></v>
<v t="EKR.20040603143325"><vh>AssertionError test</vh></v>
<v t="EKR.20040603174633"><vh>test of focus</vh></v>
<v t="EKR.20040604082113"><vh>Test of @tabwidth</vh></v>
<v t="EKR.20040604143253"><vh>Test of Remove sentinels</vh>
<v t="EKR.20040604143253.1"><vh>@thin removeSentTest.txt</vh></v>
</v>
<v t="EKR.20040604170105"><vh>Mini test of Remove sentinels</vh></v>
<v t="EKR.20040606204316"><vh>test of @first</vh>
<v t="EKR.20040606204316.1"><vh>@thin atFirstTest.txt</vh></v>
</v>
<v t="EKR.20040605200750"><vh>autocompleter test</vh></v>
<v t="EKR.20040608092841"><vh>test of indent/undent with negative tab width</vh></v>
<v t="EKR.20040608095146.1" a="M" tnodeList="EKR.20040608095146.1"><vh>@file login_process.cfm</vh></v>
<v t="EKR.20040610092248"><vh>Test of pasting into big node</vh></v>
<v t="EKR.20040610131858"><vh>Test of Paste Node Retaining Clones</vh>
<v t="EKR.20040615144810"><vh>b</vh></v>
<v t="EKR.20040615144735"><vh>branch</vh>
<v t="EKR.20040615144810"><vh>b</vh></v>
<v t="EKR.20040610131858.1"><vh>a</vh>
<v t="EKR.20040610143643"><vh>b</vh></v>
<v t="EKR.20040610143643"><vh>b</vh></v>
</v>
<v t="EKR.20040610131858.1"><vh>a</vh>
<v t="EKR.20040610143643"><vh>b</vh></v>
<v t="EKR.20040610143643"><vh>b</vh></v>
</v>
<v t="EKR.20040610132739"><vh>copied</vh></v>
</v>
</v>
<v t="EKR.20040612150543"><vh>Test of better error messages in Execute Script command</vh>
<v t="EKR.20040612215136"><vh>Contains error</vh></v>
</v>
<v t="EKR.20040615070332"><vh>Test print</vh></v>
<v t="EKR.20040625110032"><vh>@ thin c:\prog\test\mixedCommentDelims.txt</vh>
<v t="EKR.20040625110032.1"><vh>node 1</vh></v>
<v t="EKR.20040625110032.2"><vh>node 2</vh>
<v t="EKR.20040625110032.3"><vh>Node 3</vh></v>
</v>
</v>
<v t="EKR.20040627100615"><vh>Test of error messages when redirecting output</vh></v>
<v t="EKR.20040627103732"><vh>Test of writing descendent uA's</vh>
<v t="EKR.20040627121836"><vh>print all tnode attributes</vh></v>
<v t="EKR.20040627103902"><vh>Test of user icons</vh></v>
<v t="EKR.20040627103801"><vh>@thin c:\prog\test\uaTest.txt</vh></v>
</v>
<v t="EKR.20040611083703"><vh>Using a generator instead of readLinesClass</vh></v>
<v t="EKR.20040622074004"><vh>Test of conflicting node defs</vh>
<v t="EKR.20040622074004.1"><vh>a</vh>
<v t="EKR.20040622074004.2" a="M"><vh>b</vh></v>
<v t="EKR.20040622074004.3"><vh>c</vh></v>
</v>
<v t="EKR.20040622102618"><vh>@thin c:\prog\test\cloneConflicts.txt</vh></v>
</v>
</v>
</v>
<v t="ekr.20040312021734"><vh>Scripts</vh>
<v t="ekr.20040311090054"><vh>Dump fileIndex</vh></v>
<v t="ekr.20040312021734.1"><vh>Script to clean unused tnodeLists</vh></v>
<v t="ekr.20040318091620"><vh>Clear all unknown attributes</vh></v>
<v t="ekr.20040319111213"><vh>FilterHoist script</vh>
<v t="ekr.20040319111213.1"><vh>description</vh></v>
<v t="ekr.20040319142708"><vh>filter</vh></v>
<v t="ekr.20040319142202"><vh>old code</vh>
<v t="ekr.20040319111213.2"><vh>filter</vh></v>
<v t="ekr.20040319111213.3"><vh>search</vh></v>
</v>
<v t="ekr.20040319111213.4"><vh>filterHoist</vh></v>
<v t="ekr.20040319111213.5"><vh>addMenu</vh></v>
</v>
<v t="ekr.20040322120331"><vh>script to print tnodeList's</vh></v>
<v t="ekr.20040330095252"><vh>script to clear log frame</vh></v>
<v t="EKR.20040424065452"><vh>Compare script</vh></v>
<v t="EKR.20040424091411"><vh>Compare script using text mode to ignore newlines</vh></v>
<v t="EKR.20040517074600.8"><vh>Count pages</vh></v>
<v t="EKR.20040517074600.9"><vh>Scripts to debug font problem</vh>
<v t="EKR.20040517074600.10"><vh>Show font</vh></v>
<v t="EKR.20040517074600.11"><vh>Show settings</vh>
<v t="EKR.20040517074600.12"><vh>getFontSettings</vh></v>
</v>
<v t="EKR.20040517074600.13"><vh>Print default font</vh></v>
</v>
<v t="EKR.20040613162717"><vh>Report newlines</vh></v>
</v>
<v t="EKR.20040612095237"><vh>Prototypes of new commands</vh>
<v t="ekr.20040402043516"><vh>A pretty printer for Leo</vh>
<v t="ekr.20040402084155"><vh>prettyPrintNode</vh></v>
<v t="ekr.20040402064301"><vh>class prettyPrinter</vh>
<v t="ekr.20040402064301.1"><vh>__init__</vh></v>
<v t="ekr.20040402093822"><vh>get</vh></v>
<v t="ekr.20040402072335"><vh>put</vh></v>
<v t="ekr.20040402081135"><vh>putOperator</vh></v>
<v t="ekr.20040402080311"><vh>putToken</vh></v>
<v t="ekr.20040402074431"><vh>putNormalToken</vh></v>
<v t="ekr.20040402074431.1"><vh>dumpToken</vh></v>
</v>
</v>
<v t="EKR.20040610201941"><vh>Check Syntax prototype</vh>
<v t="EKR.20040610192622"><vh>Check Syntax script</vh></v>
<v t="EKR.20040610192622.1"><vh>Check Syntax data</vh></v>
</v>
<v t="EKR.20040610201236"><vh>Tabnanny prototype</vh>
<v t="EKR.20040610194209"><vh>TabNanny script</vh>
<v t="EKR.20040610195543"><vh>checkString</vh></v>
</v>
<v t="EKR.20040610195543.1"><vh>tabnanny.py (reference only) (good)</vh>
<v t="EKR.20040610195543.2"><vh>&lt;&lt; tabnanny declarations &gt;&gt;</vh></v>
<v t="EKR.20040610195543.3"><vh>errprint</vh></v>
<v t="EKR.20040610195543.4"><vh>main</vh></v>
<v t="EKR.20040610195543.5"><vh>class NannyNag</vh>
<v t="EKR.20040610195543.6"><vh>__init__</vh></v>
<v t="EKR.20040610195543.7"><vh>get_lineno</vh></v>
<v t="EKR.20040610195543.8"><vh>get_msg</vh></v>
<v t="EKR.20040610195543.9"><vh>get_line</vh></v>
</v>
<v t="EKR.20040610195543.10"><vh>check</vh></v>
<v t="EKR.20040610195543.11"><vh>class Whitespace</vh>
<v t="EKR.20040610195543.12"><vh>&lt;&lt; class Whitespace declarations &gt;&gt;</vh></v>
<v t="EKR.20040610195543.13"><vh>__init__</vh></v>
<v t="EKR.20040610195543.14"><vh>longest_run_of_spaces</vh></v>
<v t="EKR.20040610195543.15"><vh>indent_level</vh></v>
<v t="EKR.20040610195543.16"><vh>equal</vh></v>
<v t="EKR.20040610195543.17"><vh>not_equal_witness</vh></v>
<v t="EKR.20040610195543.18"><vh>less</vh></v>
<v t="EKR.20040610195543.19"><vh>not_less_witness</vh></v>
</v>
<v t="EKR.20040610195543.20"><vh>format_witnesses</vh></v>
<v t="EKR.20040610195543.21"><vh>process_tokens</vh></v>
</v>
<v t="EKR.20040610194209.1"><vh>TabNanny data (bad)</vh></v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="EKR.20040424065452">import leoGlobals as g
p1 = r"c:\prog\leoMenu(1).py"
p2 = r"c:\prog\leoMenu(2).py"

f1 = open(p1,"rb") ; f2 = open(p2,"rb")
lines1 = f1.readlines()
lines2 = f2.readlines()
f1.close() ; f2.close()

f1 = open(p1,"rb") ; f2 = open(p2,"rb")
text1 = f1.read()
text2 = f2.read()
f1.close() ; f2.close()

cr1 = text1.count('\r')
cr2 = text2.count('\r')

print '-'*20
print "lines ",len(lines1),len(lines2)
print "chars ",len(text1),len(text2)
print "non-cr",len(text1)-cr1,len(text2)-cr2
print "cr    ",cr1,cr2</t>
<t tx="EKR.20040424091411">import leoGlobals as g
p1 = r"c:\prog\leoMenu(1).py"
p2 = r"c:\prog\leoMenu(2).py"

f1 = open(p1,"rb") ; f2 = open(p2,"rb")
g.es("equal (raw mode)",f1.read()==f2.read())
f1.close() ; f2.close()

f1 = open(p1) ; f2 = open(p2)
g.es("equal (text mode)",f1.read()==f2.read())
f1.close() ; f2.close()</t>
<t tx="EKR.20040427092657">@ignore

root line 1

@others

root after at-others

&lt;&lt; ref &gt;&gt;
</t>
<t tx="EKR.20040427092657.1">node 1 line 1

&lt;&lt; node 1 ref &gt;&gt;

node 1 last line</t>
<t tx="EKR.20040427092657.2">ref line 1

@others</t>
<t tx="EKR.20040428145741">node 1 ref line 1

@others</t>
<t tx="EKR.20040428145741.1"></t>
<t tx="EKR.20040428145741.2"></t>
<t tx="EKR.20040428145826"></t>
<t tx="EKR.20040428145826.1"></t>
<t tx="EKR.20040428150018">text of organizer node</t>
<t tx="EKR.20040430160416">@language python
@tabwidth -4

@ignore
</t>
<t tx="EKR.20040430160416.1">@language html</t>
<t tx="EKR.20040430160416.2">&lt;!-- ekr uses the MARK_FOLLOWING to mark _anything_ after \ --&gt;

&lt;?xml version="1.0"?&gt;

&lt;!DOCTYPE MODE SYSTEM "xmode.dtd"&gt;

&lt;MODE&gt;
    &lt;PROPS&gt;
        &lt;PROPERTY NAME="lineComment" VALUE="%" /&gt;
    &lt;/PROPS&gt;

    &lt;RULES&gt;
        &lt;&lt; general rules &gt;&gt;
    &lt;/RULES&gt;

    &lt;RULES SET="MATH" DEFAULT="MARKUP"&gt;
        &lt;&lt; math rules &gt;&gt;
    &lt;/RULES&gt;
&lt;/MODE&gt;</t>
<t tx="EKR.20040430160416.3">&lt;!-- $$...$$ --&gt;
&lt;SPAN TYPE="MARKUP" DELEGATE="MATH"&gt;
    &lt;BEGIN&gt;$$&lt;/BEGIN&gt;
    &lt;END&gt;$$&lt;/END&gt;
&lt;/SPAN&gt;

&lt;!-- $...$ --&gt;
&lt;SPAN TYPE="MARKUP" DELEGATE="MATH"&gt;
    &lt;BEGIN&gt;$&lt;/BEGIN&gt;
    &lt;END&gt;$&lt;/END&gt;
&lt;/SPAN&gt;

&lt;!-- \[...\] (LaTeX math mode) --&gt;
&lt;SPAN TYPE="MARKUP" DELEGATE="MATH"&gt;
    &lt;BEGIN&gt;\[&lt;/BEGIN&gt;
    &lt;END&gt;\]&lt;/END&gt;
&lt;/SPAN&gt;

&lt;!-- some commands must be handled specially --&gt;
&lt;SEQ TYPE="KEYWORD1"&gt;\$&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD1"&gt;\\&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD1"&gt;\%&lt;/SEQ&gt;

&lt;!-- \... commands --&gt;
&lt;MARK_FOLLOWING TYPE="KEYWORD1"&gt;\&lt;/MARK_FOLLOWING&gt;

&lt;!-- comments --&gt;
&lt;EOL_SPAN TYPE="COMMENT1"&gt;%&lt;/EOL_SPAN&gt;

&lt;!-- word separators --&gt;
&lt;SEQ TYPE="OPERATOR"&gt;{&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;}&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;[&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;]&lt;/SEQ&gt;</t>
<t tx="EKR.20040430160416.4">&lt;!-- some commands must be handled specially --&gt;
&lt;SEQ TYPE="KEYWORD3"&gt;\$&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD3"&gt;\\&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD3"&gt;\%&lt;/SEQ&gt;

&lt;!-- \... commands --&gt;
&lt;MARK_FOLLOWING TYPE="KEYWORD3"&gt;\&lt;/MARK_FOLLOWING&gt;

&lt;!-- word separators --&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;)&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;(&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;{&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;}&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;[&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;]&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;=&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;!&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;+&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;-&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;/&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;*&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;&amp;gt;&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;&amp;lt;&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;&amp;amp;&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;|&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;^&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;~&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;.&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;,&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;;&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;?&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;:&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;'&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;"&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;`&lt;/SEQ&gt;

&lt;!-- comments --&gt;
&lt;EOL_SPAN TYPE="COMMENT1"&gt;%&lt;/EOL_SPAN&gt;</t>
<t tx="EKR.20040430160416.5">&lt;?xml version="1.0"?&gt;

&lt;!DOCTYPE MODE SYSTEM "xmode.dtd"&gt;
&lt;&lt; remarks &gt;&gt;

&lt;MODE&gt;
    &lt;PROPS&gt;
        &lt;PROPERTY NAME="indentPrevLine" VALUE="\s*.{3,}:\s*(#.*)?" /&gt;
        &lt;PROPERTY NAME="lineComment" VALUE="#" /&gt;
    &lt;/PROPS&gt;
    &lt;RULES ESCAPE="\" IGNORE_CASE="FALSE" HIGHLIGHT_DIGITS="TRUE"&gt;
        &lt;&lt; comments &gt;&gt;
        &lt;&lt; literals &gt;&gt;
        &lt;&lt; operators &gt;&gt;
        &lt;MARK_PREVIOUS TYPE="FUNCTION" EXCLUDE_MATCH="TRUE"&gt;(&lt;/MARK_PREVIOUS&gt;
        &lt;&lt; keywords &gt;&gt;
    &lt;/RULES&gt;
&lt;/MODE&gt;</t>
<t tx="EKR.20040430160416.6">&lt;!-- Python mode, by Slava Pestov. Based on PythonTokenMarker by --&gt;
&lt;!-- Jonathan Revusky --&gt;

&lt;!-- Modified 19-Jul-00 by Ivan Frohne to: --&gt;
&lt;!--  (a) implement 'indentOnEnter'; --&gt;
&lt;!--  (b) indent next line automatically after control structures followed --&gt;
&lt;!--	  by ':'; --&gt;
&lt;!--  (c) make """ or ''' multiline quotes TYPE LITERAL2; --&gt;
&lt;!--  (d) add TYPE FUNCTION identified by a following '(' --&gt;
&lt;!--  (e) eliminate the '?' SEQ TYPE ('?' has no meaning in Python); --&gt;
&lt;!--  (f) change the TYPE of 'and', 'or', and 'not' to KEYWORD1; and --&gt;
&lt;!--  (g) add all builtin functions, builtin exceptions, --&gt;
&lt;!--	  builtin type methods, File object methods, and special type --&gt;
&lt;!--	  attributes as TYPE KEYWORD3. --&gt;</t>
<t tx="EKR.20040430160416.7">&lt;!-- Comment --&gt;
&lt;EOL_SPAN TYPE="COMMENT1"&gt;#&lt;/EOL_SPAN&gt;

&lt;!-- Triple-quotes --&gt;
&lt;SPAN TYPE="LITERAL2"&gt;
    &lt;BEGIN&gt;"""&lt;/BEGIN&gt;
    &lt;END&gt;"""&lt;/END&gt;
&lt;/SPAN&gt;

&lt;SPAN TYPE="LITERAL2"&gt;
    &lt;BEGIN&gt;'''&lt;/BEGIN&gt;
    &lt;END&gt;'''&lt;/END&gt;
&lt;/SPAN&gt;</t>
<t tx="EKR.20040430160416.8">&lt;!-- Standard literals --&gt;
&lt;SPAN TYPE="LITERAL1"&gt;
    &lt;BEGIN&gt;"&lt;/BEGIN&gt;
    &lt;END&gt;"&lt;/END&gt;
&lt;/SPAN&gt;

&lt;SPAN TYPE="LITERAL1"&gt;
    &lt;BEGIN&gt;'&lt;/BEGIN&gt;
    &lt;END&gt;'&lt;/END&gt;
&lt;/SPAN&gt;
</t>
<t tx="EKR.20040430160416.9">&lt;SEQ TYPE="OPERATOR"&gt;=&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;!&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;&amp;gt;=&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;&amp;lt;=&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;+&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;-&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;/&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;*&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;&amp;gt;&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;&amp;lt;&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;%&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;&amp;amp;&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;|&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;^&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;~&lt;/SEQ&gt;</t>
<t tx="EKR.20040430160416.10">&lt;KEYWORDS&gt;
    &lt;&lt; reserved words &gt;&gt;
    &lt;&lt; builtins &gt;&gt;
    &lt;&lt; exceptions &gt;&gt;
    &lt;&lt; types &gt;&gt;
&lt;/KEYWORDS&gt;</t>
<t tx="EKR.20040430160416.11">&lt;!--  Reserved Words  --&gt;
&lt;KEYWORD1&gt;and&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;as&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;assert&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;break&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;class&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;continue&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;def&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;del&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;elif&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;else&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;except&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;exec&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;finally&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;for&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;from&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;global&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;if&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;import&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;in&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;is&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;lambda&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;not&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;or&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;pass&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;print&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;raise&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;return&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;try&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;while&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;yield&lt;/KEYWORD1&gt;</t>
<t tx="EKR.20040430160416.12">&lt;!-- builtins --&gt;
&lt;KEYWORD2&gt;abs&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;apply&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;bool&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;buffer&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;callable&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;chr&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;classmethod&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;cmp&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;coerce&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;compile&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;complex&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;delattr&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;dict&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;dir&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;divmod&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;eval&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;execfile&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;file&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;filter&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;float&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;getattr&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;globals&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;hasattr&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;hash&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;hex&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;id&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;input&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;int&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;intern&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;isinstance&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;issubclass&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;iter&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;len&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;list&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;locals&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;long&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;map&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;max&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;min&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;object&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;oct&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;open&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;ord&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;pow&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;property&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;range&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;raw_input&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;reduce&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;reload&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;repr&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;round&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;setattr&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;slice&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;staticmethod&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;str&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;super&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;tuple&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;type&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;unichr&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;unicode&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;vars&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;xrange&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;zip&lt;/KEYWORD2&gt;</t>
<t tx="EKR.20040430160416.13">&lt;!-- exceptions --&gt;
&lt;KEYWORD3&gt;ArithmeticError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;AssertionError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;AttributeError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;DeprecationWarning&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;EOFError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;EnvironmentError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;Exception&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;FloatingPointError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;IOError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;ImportError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;IndentationError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;IndexError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;KeyError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;KeyboardInterrupt&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;LookupError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;MemoryError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;NameError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;NotImplemented&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;NotImplementedError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;OSError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;OverflowError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;OverflowWarning&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;ReferenceError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;RuntimeError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;RuntimeWarning&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;StandardError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;StopIteration&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;SyntaxError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;SyntaxWarning&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;SystemError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;SystemExit&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;TabError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;TypeError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;UnboundLocalError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;UnicodeError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;UserWarning&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;ValueError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;Warning&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;WindowsError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;ZeroDivisionError&lt;/KEYWORD3&gt;</t>
<t tx="EKR.20040430160416.14">&lt;!-- types (from types module) --&gt;
&lt;KEYWORD3&gt;BufferType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;BuiltinFunctionType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;BuiltinMethodType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;ClassType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;CodeType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;ComplexType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;DictProxyType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;DictType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;DictionaryType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;EllipsisType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;FileType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;FloatType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;FrameType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;FunctionType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;GeneratorType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;InstanceType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;IntType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;LambdaType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;ListType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;LongType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;MethodType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;ModuleType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;NoneType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;ObjectType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;SliceType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;StringType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;StringTypes&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;TracebackType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;TupleType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;TypeType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;UnboundMethodType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;UnicodeType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;XRangeType&lt;/KEYWORD3&gt;

&lt;KEYWORD3&gt;False&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;None&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;True&lt;/KEYWORD3&gt;

&lt;KEYWORD3&gt;__abs__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__add__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__all__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__author__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__bases__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__builtins__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__call__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__class__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__cmp__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__coerce__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__contains__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__debug__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__del__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__delattr__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__delitem__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__delslice__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__dict__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__div__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__divmod__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__doc__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__eq__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__file__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__float__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__floordiv__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__future__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__ge__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__getattr__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__getattribute__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__getitem__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__getslice__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__gt__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__hash__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__hex__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__iadd__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__import__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__imul__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__init__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__int__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__invert__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__iter__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__le__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__len__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__long__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__lshift__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__lt__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__members__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__metaclass__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__mod__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__mro__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__mul__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__name__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__ne__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__neg__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__new__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__nonzero__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__oct__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__or__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__path__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__pos__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__pow__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__radd__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rdiv__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rdivmod__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__reduce__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__repr__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rfloordiv__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rlshift__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rmod__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rmul__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__ror__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rpow__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rrshift__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rsub__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rtruediv__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rxor__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__setattr__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__setitem__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__setslice__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__self__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__slots__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__str__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__sub__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__truediv__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__version__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__xor__&lt;/KEYWORD3&gt;</t>
<t tx="EKR.20040430160416.15">@language python
@markup wiki

""" continued
string"""

@ ''ab'' __xxx__ ''wx'' __xyz__
@c

# /* ''ab'' __xxx__ ''wx'' __xyz__ */

# Test

""" ''' """ ''' """'''  # Leo handles the common cases correctly.

''' ''ab'' __xxx__ ''wx'' __xyz__ ''' # No wiki markup in ''' strings.

""" ''ab'' __xxx__ ''wx'' __xyz__ """

# ''ab'' __xxx__ ''wx'' __xyz__

""" ''y'' """

""" text~~#ee00ff:some text~~more text"""

""" {picture file=../Icons/Leoapp.GIF}this """ # There are probdlems \with correct indexing following a graphic.

and if

import leoGlobals as g
print `g.app().loadDir`</t>
<t tx="EKR.20040430162649.1"></t>
<t tx="EKR.20040430162649.2"></t>
<t tx="EKR.20040430162649.3">@nocolor

I tried to write out text containing characters like:
ä ö ü Ä Ö Ü ß ø ó
with @file-asis and get:

UnicodeError: ASCII encoding error: ordinal not in range(128)

@file (without option) works fine.</t>
<t tx="EKR.20040430162649.4">@nocolor

I tried to write out text containing characters like:
ä ö ü Ä Ö Ü ß ø ó
with @file-asis and get:

UnicodeError: ASCII encoding error: ordinal not in range(128)

@file (without option) works fine.</t>
<t tx="EKR.20040430162649.5">@nocolor

I tried to write out text containing characters like:
ä ö ü Ä Ö Ü ß ø ó
with @file-asis and get:

UnicodeError: ASCII encoding error: ordinal not in range(128)

@file (without option) works fine.</t>
<t tx="EKR.20040430162649.6">@ignore

Ä á Û</t>
<t tx="EKR.20040430162649.7">@encoding iso-8859-1</t>
<t tx="EKR.20040430162649.8"></t>
<t tx="EKR.20040430162649.9"></t>
<t tx="EKR.20040430162649.10">@encoding cp1252
@others</t>
<t tx="EKR.20040430162649.11">aÖb</t>
<t tx="EKR.20040430162649.12">@ignore</t>
<t tx="EKR.20040430162649.13">@language perlpod
@path c:\prog\test</t>
<t tx="EKR.20040430162649.14">@root perlpod.txt
@ Multi-line
doc part
&lt;&lt;ref&gt;&gt;</t>
<t tx="EKR.20040430162649.15">@ doc part2
@c
code line1
code line2
@ more doc part</t>
<t tx="EKR.20040430162649.16">@comment REM_</t>
<t tx="EKR.20040430162649.17">test 6</t>
<t tx="EKR.20040430162649.18">@ignore</t>
<t tx="EKR.20040430162649.19">@language plain
@comment # /* */

This is plain text.

# This is a comment.

More plain text.

/* A block comment
ths continues */

More plain text.</t>
<t tx="EKR.20040430162649.20">@ atFile.directiveKind is return miscDirective on _any_ line that starts with @</t>
<t tx="EKR.20040430162649.21">@ignore

line 1
@line 2
    @line 3
line 4</t>
<t tx="EKR.20040430162649.22">@nocolor
@pagewidth 40

A one-line paragraph one two three four five six seven eight nine ten...

An @rawfile tree is a tree whose root headline starts with
@rawfile &lt;filename&gt;. Similarly, an @silentfile tree is a
tree whose root headline starts with an @silentfile
&lt;filename&gt; directive.

    Leo creates derived files from @rawfile and @silentfile trees by writing the body text of all nodes of the tree in outline order.  Leo writes the body text _as is_, without recognizing section definitions, without expanding section references, and without treating directives specially in any way.  In particular, Leo copies all directives, including @space or @c directives, to the derived file as text. Exception: Leo recognizes the @ignore directive in @rawfile or @silentfile nodes, so you may use the @ignore directive as usual to prevent Leo from writing @rawfile and @silentfile trees.

There are several difference between @rawfile and @silentfile trees:
    
  This
  is
  a
  test.

  1. This is the first line and it is really really really long. And it has
     a hanging indentation.
     and another line.

  2. This is a lllllllllllllllllllllllllllllllllllloooooooooooooooooong
     next item.
     And it too has a hanging indentation.

  3. This is an exxxxxxxxxxxxxxxxxxxxxxxxtrrrrrrrrrrrrrrreeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeemlylong
     word.
And it too has a hanging indentation.</t>
<t tx="EKR.20040430162649.23">@ignore</t>
<t tx="EKR.20040430162649.24">enabling: *
Exception in Tkinter callback
Traceback (most recent call last):
  File "c:\python22\lib\lib-tk\Tkinter.py", line 1292, in __call__
    return apply(self.func, args)
  File "leoFrame.py", line 1368, in OnTangle
    self.commands.tangleCommands.tangle()
  File "leoTangle.py", line 507, in tangle
    self.tangleTree(v,report_errors)
  File "leoTangle.py", line 644, in tangleTree
    self.tanglePass1(v) # sets self.v
  File "leoTangle.py", line 589, in tanglePass1
    self.skip_body(v)
  File "leoTangle.py", line 1062, in skip_body
    self.st_enter_root_name(old_root_name,code,doc)
  File "leoTangle.py", line 2040, in st_enter_root_name
    assert(code)
AssertionError
</t>
<t tx="EKR.20040430162649.25">@root a.txt
@ 

@root a.txt 
some text 
@ </t>
<t tx="EKR.20040504083716">@language python

import leoGlobals as g
import shutil

testing = True

sourcedir=r"c:/prog/test/perfectImport"
targetdir=r"c:/prog/test/perfectImport/leo"
s1 = g.os_path_join(sourcedir,"leoAtFile.py")
t1 = g.os_path_join(targetdir,"leoAtFile.py")
files = [(s1,t1)]

@others

print ; print '-' * 20

sync(files) # push or pull, depending on date.
</t>
<t tx="EKR.20040504083716.39">def sync(files):
    
    """Do a pull or a push, depending on the date of the files."""
    
    none, push, pull = 'None', 'push', 'pull'
    mu = g.mulderUpdateAlgorithm()

    for sourcefilename, targetfilename in files:
        &lt;&lt; compute sourcetime and targettime &gt;&gt;
        &lt;&lt; compute operation &gt;&gt;
        if operation == push:
            if testing: print push, sourcefilename, targetfilename
            strippedLines = mu.removeSentinelsFromFile(sourcefilename)
            mu.write_if_changed(strippedLines,sourcefilename,targetfilename)
            mu.copy_time(sourcefilename,targetfilename)
        elif operation == pull:
            if testing: print pull, sourcefilename, targetfilename
            if sourcetime:
                mu.propagateDiffsToSentinelsFile(sourcefilename,targetfilename)
                mu.copy_time(targetfilename,sourcefilename)
            else:
                shutil.copy2(targetfilename,sourcefilename)</t>
<t tx="EKR.20040504083716.44"># This is some basic testing.

@ignore</t>
<t tx="EKR.20040504083716.45">@others</t>
<t tx="EKR.20040504083716.47">class sentinel_test(TestCase):
    @others</t>
<t tx="EKR.20040504083716.48">def setUp(self):
    self.prefix = ["#@+leo-ver=4\n",
"#@+node:@file sentinel.py\n",
"#@@language python\n"]
    self.postfix = ["#@-node:@file sentinel.py\n",
"#@-leo\n"]
</t>
<t tx="EKR.20040504083716.49">def setup_inputfile(self, input):
    classname = self.__class__.__name__
    self.input_filename = os.path.join('test/s_%s.txt' % classname)
    self.output_filename = os.path.join('test/d_%s.txt' % classname)
    outfile = file(self.input_filename, "w")
    for line in input:
        outfile.write(line)
    outfile.close()
    
    
 
</t>
<t tx="EKR.20040504083716.50">def setup_configfile(self):
    self.configfilename = "test/sentinel.cfg"
    outfile = file(self.configfilename, "w")
    outfile.write("[sentinel]\n")
    outfile.write("\ns1=%s\n" % self.input_filename)
    outfile.write("\nd1=%s\n" % self.output_filename)
    outfile.close()

</t>
<t tx="EKR.20040504083716.51"></t>
<t tx="EKR.20040504083716.52">class insert_test(sentinel_test):
    @others</t>
<t tx="EKR.20040504083716.53">def setUp(self):
    sentinel_test.setUp(self)
    self.setup_inputfile(self.prefix + 
["Proof of concept implementation of sentinel free Leo files.\n",
"We try to insert a line after here\n",
"This should be after the inserted line\n",
"This should be the last line in the file\n"]
 + self.postfix)

    # here are the same lines, without sentinels
    self.lines = ["Proof of concept implementation of sentinel free Leo files.\n",
     "We try to insert a line after here\n",
     "This should be after the inserted line\n",
     "This should be the last line in the file\n"]
    self.setup_configfile()
</t>
<t tx="EKR.20040504083716.54">def runTest(self):
    """
    
    Insert a line in a file without sentinels of a file derived of a file with sentinels, and make sure that this line is inserted in the proper place.
    
    """
    
    # First, produce the sentinel free output.
    sentinel.main(self.configfilename, "push")
    
    # Verify this first step.
    assert os.path.exists(self.output_filename)
    assert file(self.output_filename).readlines() == self.lines
    
    # then insert one line in the sentinel free output.
    lines = self.lines
    lines[2:2] = ["This is an inserted line\n"]
    outfile = file(self.output_filename, "w")
    for line in lines:
        outfile.write(line)
    outfile.close()
    
    # get the sources back.
    sentinel.main(self.configfilename, "pull")
    
    # re-generate the output.
    sentinel.main(self.configfilename, "push")
    
    # and check for equality.
    assert file(self.output_filename).readlines() == lines
    
    
    
    
    
    



</t>
<t tx="EKR.20040504083716.55"></t>
<t tx="EKR.20040504083716.56">class replace_test(sentinel_test):
    """
    Replace a single line.
    """
    @others</t>
<t tx="EKR.20040504083716.57">def setUp(self):
    sentinel_test.setUp(self)
    self.lines = [
     "Proof of concept implementation of sentinel free Leo files.\n",
     "This line should be replaced\n",
     "This should be the last line in the file\n"]
    self.setup_inputfile(self.prefix + self.lines + self.postfix)

    # here are the same lines, without sentinels
    self.setup_configfile()
</t>
<t tx="EKR.20040504083716.58">def runTest(self):
    """
    
    Insert a line in a file without sentinels of a file derived of a file with sentinels, and make sure that this line is inserted in the proper place.
    
    """
    
    # First, produce the sentinel free output.
    sentinel.main(self.configfilename, "push")
    
    # Verify this first step.
    assert os.path.exists(self.output_filename)
    assert file(self.output_filename).readlines() == self.lines
    
    # then insert one line in the sentinel free output.
    lines = self.lines
    lines[2:2] = ["This is a replaced line\n"]
    outfile = file(self.output_filename, "w")
    for line in lines:
        outfile.write(line)
    outfile.close()
    
    # get the sources back.
    sentinel.main(self.configfilename, "pull")
    
    # re-generate the output.
    sentinel.main(self.configfilename, "push")
    
    # and check for equality.
    assert file(self.output_filename).readlines() == lines
    
    
    
    
    
    



</t>
<t tx="EKR.20040504083716.59">class replace_test2(sentinel_test):
    """
    Replace two lines.
    """
    @others</t>
<t tx="EKR.20040504083716.60">def setUp(self):
    sentinel_test.setUp(self)
    self.lines = [
    "Line 0\n",    #0
"   Line 1\n",    #1
"   Line 2.\n",   #2
"   Line 3.\n",   #3
"   Line 4\n",    #4
"\n", #5
" We have two subclasses:\n", #6
"   single_clss represents a (condition, register) =&gt; (expression_number, linenumber) mapping.\n", #7
"   set_class represents a set of (condition, register) =&gt; (expression_number, linenumber) mapping.\n", #8
"\n", #9
" Line 10\n", #10
" Line 11\n" #11
]
    self.setup_inputfile(self.prefix + self.lines + self.postfix)

    # here are the same lines, without sentinels
    self.setup_configfile()
</t>
<t tx="EKR.20040504083716.61">def runTest(self):
    """
    
    Insert a line in a file without sentinels of a file derived of a file with sentinels, and make sure that this line is inserted in the proper place.
    
    """
    
    # First, produce the sentinel free output.
    sentinel.main(self.configfilename, "push")
    
    # Verify this first step.
    assert os.path.exists(self.output_filename)
    assert file(self.output_filename).readlines() == self.lines
    
    # then insert two lines in the sentinel free output.
    lines = self.lines
    lines[7:9] = ["   single_class represents a (condition, register) =&gt; (expression_number, linenumber) mapping.\n", #7
                      "   set_class represents a set of (condition, register) =&gt; (expression_number, linenumber) mappings.\n", #8
                     ]
    outfile = file(self.output_filename, "w")
    for line in lines:
        outfile.write(line)
    outfile.close()
    
    # get the sources back.
    sentinel.main(self.configfilename, "pull")
    
    # re-generate the output.
    sentinel.main(self.configfilename, "push")
    
    # and check for equality.
    assert file(self.output_filename).readlines() == lines
    
    
    
    
    
    



</t>
<t tx="EKR.20040504083716.62">class replace_test3(sentinel_test):
    """
    Replace the lines of a whole node.
    """
    @others</t>
<t tx="EKR.20040504083716.63">def setUp(self):
    sentinel_test.setUp(self)
    self.lines = [
    "#@+node:main\n",
    "node 1: line 1\n", # 1
    "node 1: line 2\n", # 2
    "#@-node:main\n",
    "#@-others\n",
    "node 2: line 3\n", # 3
    "node 2: line 4\n", # 4
    "#@-node:@file sentinel.py\n",
    ]
    self.setup_inputfile(self.prefix + self.lines + self.postfix)

    # here are the same lines, without sentinels
    self.setup_configfile()
</t>
<t tx="EKR.20040504083716.64">def runTest(self):
    """
    
    Insert a line in a file without sentinels of a file derived of a file with sentinels, and make sure that this line is inserted in the proper place.
    
    """
    
    # First, produce the sentinel free output.
    sentinel.main(self.configfilename, "push")
    
    # Verify this first step.
    assert os.path.exists(self.output_filename)
    filtered_lines = sentinel.push_filter_lines(self.lines)[0]
    assert file(self.output_filename).readlines() == filtered_lines
    
    # then insert one line in the sentinel free output.
    filtered_lines [2:4] = [   "These lines should be totally different\n",
    "and be replaced across sentinel blocks,\n",

                     ]
    outfile = file(self.output_filename, "w")
    for line in filtered_lines:
        outfile.write(line)
    outfile.close()
    
    # get the sources back.
    sentinel.main(self.configfilename, "pull")
    
    # re-generate the output.
    sentinel.main(self.configfilename, "push")
    
    # and check for equality.
    assert file(self.output_filename).readlines() == filtered_lines
    
    
    
    
    
    



</t>
<t tx="EKR.20040504083716.65">class replace_test4(sentinel_test):
    """
    Replace the lines of a whole node.
    """
    @others</t>
<t tx="EKR.20040504083716.66">def setUp(self):
    sentinel_test.setUp(self)
    self.lines = [
    "#@+node:main\n",
    "node 1: line 1\n", # 1
    "node 1: line 2\n", # 2
    "#@-node:main\n",
    "#@-others\n",
    "node 2: line 3\n", # 3
    "node 2: line 4\n", # 4
    "#@-node:@file sentinel.py\n",
    ]
    self.setup_inputfile(self.prefix + self.lines + self.postfix)

    # here are the same lines, without sentinels
    self.setup_configfile()
</t>
<t tx="EKR.20040504083716.67">def runTest(self):
    """
    
    Insert a line in a file without sentinels of a file derived of a file with sentinels, and make sure that this line is inserted in the proper place.
    
    """
    
    # First, produce the sentinel free output.
    sentinel.main(self.configfilename, "push")
    
    # Verify this first step.
    assert os.path.exists(self.output_filename)
    filtered_lines = sentinel.push_filter_lines(self.lines)[0]
    assert file(self.output_filename).readlines() == filtered_lines
    
    # then insert one line in the sentinel free output.
    filtered_lines [1:3] = [   "These lines should be totally different\n",
    "and be replaced across sentinel blocks,\n",

                     ]
    outfile = file(self.output_filename, "w")
    for line in filtered_lines:
        outfile.write(line)
    outfile.close()
    
    # get the sources back.
    sentinel.main(self.configfilename, "pull")
    
    # re-generate the output.
    sentinel.main(self.configfilename, "push")
    
    # and check for equality.
    assert file(self.output_filename).readlines() == filtered_lines
    
    
    
    
    
    



</t>
<t tx="EKR.20040504083716.68">@doc
these are tests representing errors which I encountered during the development of the code.</t>
<t tx="EKR.20040504083716.69">class regression_test_1(sentinel_test):
    """
    Replace a single line.
    """
    @others</t>
<t tx="EKR.20040504083716.70">def setUp(self):
    self.lines = [
"#@+leo-ver=4\n",
"#@+node:@file driver.py\n",
"#@@language python\n",
"#@+others\n",
"#@+node:imports\n",
"# Analyse an IA64 assembly file:\n",
"#   1. Identify basic blocks.\n",
"#   2. Track the contents of registers symbolically.\n",
"import os, sys, cmp_globals\n",
"\n",
"#@-node:imports\n",
"#@+node:process_file\n",
"def process_file(infile, pyname_full, configfile, firststep, laststep):\n",
"   \n",
"      proc()\n",
"#@nonl\n",
"#@-node:process_file\n",
"#@-others\n",
"#@-node:@file driver.py\n",
"#@-leo\n"
]
    self.setup_inputfile(self.lines)

    # here are the same lines, without sentinels
    self.setup_configfile()
</t>
<t tx="EKR.20040504083716.71">def runTest(self):
    """
    
    Insert a line in a file without sentinels of a file derived of a file with sentinels, and make sure that this line is inserted in the proper place.
    
    """
    
    # First, produce the sentinel free output.
    sentinel.main(self.configfilename, "push")
    
    # Verify this first step.
    assert os.path.exists(self.output_filename)
    assert file(self.output_filename).readlines() == sentinel.push_filter_lines(self.lines)[0]
        
    # get the sources back.
    sentinel.main(self.configfilename, "pull")
    
    # Now check that the source has not been changed.
    assert file(self.input_filename).readlines() == self.lines   
    
    
    
    
    



</t>
<t tx="EKR.20040504083716.72">if __name__ == '__main__':
    #fileName = os.path.join(os.getcwd(),"testing.ini")
    #config = ConfigParser.ConfigParser()
    #config.read(fileName)
    #main = "Main"
    #leodir = config.get(main, "leodir")
    #test_to_run = config.get(main, "test_to_run")
    test_to_run = 'all'
    
    if os.path.exists("test"):
        shutil.rmtree("test")
    os.mkdir("test")
    suite = TestSuite()
    if test_to_run == 'all':
        for testclass in (
            insert_test,
            replace_test,
            replace_test2,
            replace_test3,
            regression_test_1,         
        ):
            suite.addTest(testclass())
    else:
        suite.addTest(globals()[test_to_run]())
    testrunner = TextTestRunner()
    testrunner.run(suite)
 </t>
<t tx="EKR.20040504083716.73">@ignore</t>
<t tx="EKR.20040504083716.74">[Main]
test_to_run = all
# use all to run all tests.

cleanup = True
# Set to True if you want all files deleted.

leodir = C:/bwm/ftptoot/Cleo-4.1-beta-5</t>
<t tx="EKR.20040504083716.75"></t>
<t tx="EKR.20040504083716.76"></t>
<t tx="EKR.20040504083716.77"></t>
<t tx="EKR.20040504083716.78"></t>
<t tx="EKR.20040504153320">sourcetime = targettime = None

if g.os_path_exists(sourcefilename):
    sourcetime = g.os_path_getmtime(sourcefilename)

if g.os_path_exists(targetfilename):
    targettime = g.os_path_getmtime(targetfilename)</t>
<t tx="EKR.20040504153320.1">operation = None
if sourcetime:
    if targettime:
        if sourcetime &gt; targettime:
            operation = push
        elif sourcetime &lt; targettime:
            operation = pull
    else:
        operation = push
elif targettime:
    operation = pull</t>
<t tx="EKR.20040517074600.8">import leoGlobals as g
import leoTest

u = leoTest.testUtils()
nodes = 0 ; lines = 0
c = g.top()
c.clearAllVisited()
v = u.findNodeAnywhere(c,"Plugins &amp; scripts")
after = v.nodeAfterTree()
trace(v,after)
while v and v != after:
    if not v.t.isVisited():
        v.t.setVisited()
        nodes += 1
        lines += len(splitLines(v.bodyString()))
    v = v.threadNext()
    
pages = ((nodes * 10) + lines) / 50
print "nodes,lines,pages",nodes,lines,pages
g.es("nodes,lines,pages",nodes,lines,pages)</t>
<t tx="EKR.20040517074600.9"></t>
<t tx="EKR.20040517074600.10">import leoGlobals as g
config = g.app.config

font = config.getFontFromParams(
        "body_text_font_family", "body_text_font_size",
        "body_text_font_slant",  "body_text_font_weight",
        tag = "body")
        
print font

c = top() ; body = c.frame.body.bodyCtrl

print body

# body.configure(font=font)</t>
<t tx="EKR.20040517074600.11">import leoGlobals as g
import tkFont

@others

c = g.top()

# Body pane.
fn = c.frame.body.cget("font")
font = tkFont.Font(font=fn)
name,size,slant,weight = getFontSettings(font)
print "body:",fn,name,size,slant,weight

if 0:

    # Log pane.
    fn = c.frame.log.getFontConfig()
    font = tkFont.Font(font=fn)
    name,size,slant,weight = getFontSettings(font)
    g.es("log:" + name + "," + `size` + "," + slant + "," + weight)
    
    # Tree pane.
    font = c.frame.tree.getFont()
    name,size,slant,weight = getFontSettings(font)
    g.es("head:" + name + "," + `size` + "," + slant + "," + weight)</t>
<t tx="EKR.20040517074600.12">def getFontSettings (font):

    name   = font.cget("family")
    size   = font.cget("size")
    slant  = font.cget("slant")
    weight = font.cget("weight")

    return name, size, slant, weight</t>
<t tx="EKR.20040517074600.13">import leoGlobals as g

font = g.app.config.defaultFont

print font.cget("family"), font.cget("weight")</t>
<t tx="EKR.20040523112430"></t>
<t tx="EKR.20040523112430.1"></t>
<t tx="EKR.20040523112430.2"></t>
<t tx="EKR.20040523112430.3"></t>
<t tx="EKR.20040523112430.4"></t>
<t tx="EKR.20040523112430.5"></t>
<t tx="EKR.20040523112430.6"></t>
<t tx="EKR.20040523112430.7"></t>
<t tx="EKR.20040523112430.8"></t>
<t tx="EKR.20040524050419">line 1
@others
&lt;&lt; defined in grandchild &gt;&gt;
last line</t>
<t tx="EKR.20040524050419.1">Organizer line</t>
<t tx="EKR.20040524050419.2">grandChild line</t>
<t tx="EKR.20040525083635">@others</t>
<t tx="EKR.20040525083635.1"></t>
<t tx="EKR.20040526094831">import leoGlobals as g

def redoBletch(self):
    g.trace()
    
def undoBletch(self):
    g.trace()
    
c = g.top() ; u = c.undoer
p = c.currentPosition()

if 0:
    # bad functions
    u.registerUndoHandlers("Bletch","abc","xyz")
else:
    u.registerUndoHandlers("Bletch",undoBletch,redoBletch)
    
# "Execute" the Bletch command :-)  The Edit command should contain "Undo Bletch"
u.setUndoParams("Bletch",p)

# Selecting "Undo Bletch" will enable "Redo Bletch", etc.</t>
<t tx="EKR.20040526193608">import leoGlobals as g
import binascii
import pickle

d = { "a":True }

print '-' * 40

s = pickle.dumps(d,bin=True)
s2 = binascii.hexlify(s)
print `s`,s2

s3 = binascii.unhexlify(s2)
d2 = cPickle.loads(s3)

print `d2`
print d == d2, d is d2</t>
<t tx="EKR.20040526200017">import leoGlobals as g

c = g.top() ; p = c.currentPosition()


d = { "a":True }

if 1:
    # Warning: executing this in the a2 code base will cause any save operation to fail.
    p.v.unknownAttributes = { "myPlugin" : d }
    
print repr(p.v.unknownAttributes)</t>
<t tx="EKR.20040527072047"></t>
<t tx="EKR.20040527072047.1"></t>
<t tx="EKR.20040527073459"></t>
<t tx="EKR.20040527074524"></t>
<t tx="EKR.20040527074524.1"></t>
<t tx="EKR.20040527074524.2"></t>
<t tx="EKR.20040527083449.1">nodes = []
for v in current.unique_vnodes_iter():
    assert v not in nodes
    nodes.append(v)
    
nodes = []
for t in current.unique_tnodes_iter():
    assert t not in nodes
    nodes.append(t)
    
print "duplicate tests pass"</t>
<t tx="EKR.20040527083449.2">if 0:
    for v in current.vnodes_iter(): print v
    for v in current.unique_vnodes_iter(): print v

if 0: # subtree of root node:
    root = c.rootPosition()
    for v in root.vnodes_iter(): print v
    for t in root.tnodes_iter(): print t

if 0: # child1's tree.  child2 should not be included.
    for v in child.vnodes_iter(): print v
    for t in child.tnodes_iter(): print t</t>
<t tx="EKR.20040527154402">line 1

&lt;&lt; sec &gt;&gt;
sec line 1
sec line 2

last line</t>
<t tx="EKR.20040528130659">d</t>
<t tx="EKR.20040528152529">import leoNodes
import leoGlobals as g

c = g.top()
current = c.currentPosition()
child = current.firstChild()

allList = [p.v for p in c.all_positions_iter()]
vList1 = [v for v in current.vnodes_iter()]
vList2 = [v for v in current.unique_vnodes_iter()]

if 0:
    for v in vList1: print v
    for v in vList2: print v

print len(allList),len(vList1),len(vList2)

&lt;&lt; tests of consistency of p and v iters &gt;&gt;
&lt;&lt; tests that node iterators return no duplicate nodes &gt;&gt;

&lt;&lt; print nodes returned by iterators &gt;&gt;</t>
<t tx="EKR.20040529092739">import leoGlobals as g

c = g.top() ; p = c.currentPosition()

&lt;&lt; coverage tests &gt;&gt;
&lt;&lt; duplicate tests &gt;&gt;

print "vnodes",len([v for v in c.all_vnodes_iter()]),len([v for v in c.all_unique_vnodes_iter()])
print "tnodes",len([t for t in c.all_tnodes_iter()]),len([t for t in c.all_unique_tnodes_iter()])

if 0: # all nodes
    for v in c.all_vnodes_iter(): print v
    for t in c.all_tnodes_iter(): print t
        
if 0: # unique nodes
    for v in c.all_unique_vnodes_iter(): print v
    for t in c.all_unique_tnodes_iter(): print t</t>
<t tx="EKR.20040529093047">v1 = [p.v for p in c.all_positions_iter()]
v2 = [v for v in c.all_vnodes_iter()]
for v in v2: assert(v in v1)
for v in v1: assert(v in v2)

t1 = [p.v.t for p in c.all_positions_iter()]
t2 = [t for t in c.all_tnodes_iter()]
for t in t2: assert(t in t1)
for t in t1: assert(t in t2)

print "coverage tests pass"</t>
<t tx="EKR.20040529093047.1">nodes = []
for v in c.all_unique_vnodes_iter():
    assert v not in nodes
    nodes.append(v)
    
nodes = []
for t in c.all_unique_tnodes_iter():
    assert t not in nodes
    nodes.append(t)
    
print "duplicate tests pass"</t>
<t tx="EKR.20040529104307">try:
    tag = "test1"
    list1 = [v for v in current.vnodes_iter()]
    list2 = [v for v in current.v.self_and_subtree_iter()]
    assert(list1==list2)
    
    tag = "test2"
    list1 = [p.v for p in c.all_positions_iter()]
    list2 = [v   for v in c.all_vnodes_iter()]
    assert(list1==list2)
    
    print "consistency tests pass"

except AssertionError:
    print tag
    print "list1"
    for v in list1: print v
    print "list2"
    for v in list2: print v</t>
<t tx="EKR.20040529105640"></t>
<t tx="EKR.20040531110157">@ignore</t>
<t tx="EKR.20040602101648">import leoGlobals as g
import leoPlugins

def onEnd (tag,keys):
    print "onEnd",tag,keys
    
count = 0
    
def onIdle (tag,keys):
    global count ; count += 1
    if count % 10 == 0:
        print "onIdle",count,keys.get("c")

leoPlugins.registerHandler("end1", onEnd)
print "onEnd registered as end1 hook"

leoPlugins.registerHandler("idle", onIdle)
print "onIdle registered as idle hook"</t>
<t tx="EKR.20040603064545">import leoGlobals as g

c = g.top()

for p in c.all_positions_iter():
    print p.v.t.fileIndex</t>
<t tx="EKR.20040603103118">@language html

b = "cd"
d
</t>
<t tx="EKR.20040603143325">try:
    assert(0)
except (AttributeError, AssertionError):
    print "caught"
</t>
<t tx="EKR.20040603174633">import leoGlobals as g
c = g.top()
print c.frame.bodyCtrl.focus()</t>
<t tx="EKR.20040604082113">@tabwidth -4

    
    a   b   c
a   b   c   d
aa  b   c   d
aaa b   c   d
end</t>
<t tx="EKR.20040604143253">@ignore</t>
<t tx="EKR.20040604170105">import leoGlobals as g
import os

c = g.top()

print os.getcwd()
name = g.os_path_join("test","removeSentTest.txt")
c.importCommands.removeSentinelsCommand(name)</t>
<t tx="EKR.20040605200750">string.join

__add__

'a'.__add__


def test(a,b): pass

v.copyTree(self,root)</t>
<t tx="EKR.20040606204316">@ignore</t>
<t tx="EKR.20040608092841">@tabwidth -4

    a
    b</t>
<t tx="EKR.20040608095146">@language python
@tabwidth -4</t>
<t tx="EKR.20040608095146.1">@ignore
@language html

&lt;!--- Get all records from the database that match this users credentials ---&gt;
&lt;cfquery name="qLoginVerify" datasource="xxxx"&gt;
SELECT user_name, user_pass, course_dir
FROM login
WHERE user_name = '#user_name#'
AND user_pass = '#user_pass#'
AND course_dir = '#course_dir#'
&lt;/cfquery&gt;

&lt;cfif qLoginVerify.RecordCount&gt;
&lt;!--- This user has logged in correctly; 
change the value of the session.allowin value ---&gt;
&lt;cfset session.allowin = session.directoryshort&gt;
&lt;/cfif&gt;

&lt;!--- now redirect to "index.cfm", which will go to login if problem ---&gt;

&lt;cflocation url="#session.location#"&gt;
</t>
<t tx="EKR.20040610092248">@killcolor

Note: Previously, one could crash Leo by pasting a large text into a headline.  Leo now truncates that text, and furthermore Leo no longer makes all headline text into one gigantic line.  Therefore, we don't have to test Tk's ability to handle super-long lines.

The test:  Copy the following and paste it into a headline.  Leo should give 2 truncation messages:

- Truncating headline to one line.
- Truncating headline to 250 characters.

About a year ago I found the website at www.literateprogamming.com and was immediately convinced that the basic idea of Literate Programming is an important breakthrough. At the time I was working on a contract trying to decipher a true masterpiece of over-engineering, and if at any time during the construction of this masterpiece the perpetrators had been required to explain themselves in English, my client would have saved millions of dollars.

I never did try CWEB or NOWEB though, because on the literate programming site I read about a tool named “Leo” that combined outlines with Literate Programming techniques. Since I’ve always found outlining tools very useful I downloaded and tried this. I found that using this tool completely changed my programming practice and brought out all of the power inherent in the original Literate Programming idea as I understood it.</t>
<t tx="EKR.20040610131858"></t>
<t tx="EKR.20040610131858.1">import leoGlobals as g

c = g.top() ; p = c.currentPosition()

print p.v.t.fileIndex,p.v.t</t>
<t tx="EKR.20040610132739">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;leo_file&gt;
&lt;leo_header file_format="1" tnodes="1" max_tnode_index="1"/&gt;
&lt;vnodes&gt;
&lt;v t="EKR.20040610131858.1" a="TV"&gt;&lt;vh&gt;a&lt;/vh&gt;&lt;/v&gt;
&lt;/vnodes&gt;
&lt;tnodes&gt;
&lt;t tx="EKR.20040610131858.1"&gt;import leoGlobals as g

c = g.top() ; p = c.currentPosition()

print p.v.t.fileIndex&lt;/t&gt;
&lt;/tnodes&gt;
&lt;/leo_file&gt;
</t>
<t tx="EKR.20040610143643"></t>
<t tx="EKR.20040610192622">import leoGlobals as g

c = g.top() ; p = c.currentPosition()

import compiler

next = p.next()
s = next.bodyString()
headline = next.headString()

try:
    val = compiler.parse(s)
    # print val
    g.es("Syntax OK: %s" % headline,color="blue")
except SyntaxError:
    g.es("Syntax error: %s" % headline,color="blue")</t>
<t tx="EKR.20040610192622.1">import string

string.join(a,b]
</t>
<t tx="EKR.20040610194209">import leoGlobals as g
import tabnanny

@others

# print '-' * 20

c = g.top()
p = c.currentPosition()
next = p.next()
s = next.bodyString()
headline = next.headString()

checkString(s,headline)</t>
<t tx="EKR.20040610194209.1">@tabwidth 4

# Tabnanny _only_ checks errors involving tabs.
# It does _not_ check other indentation errors.
# It does _not_ check syntax.

    a = 5
	b = 6 #Contains tab.
    c = 3</t>
<t tx="EKR.20040610195543">def checkString (s,headline):

    """Check indentation using tabnanny.process_tokens."""

    # This code is based on tabnanny.check.
    
    import tokenize

    try:
        # readline = g.readLinesGenerator(s).next
        readline = g.readLinesClass(s).next
        tabnanny.process_tokens(tokenize.generate_tokens(readline))

    except tokenize.TokenError, msg:

        g.es("Token error in %s" % headline,color="red")
        g.es(str(msg))
        return

    except tabnanny.NannyNag, nag:

        badline = nag.get_lineno()
        line    = nag.get_line()
        message = nag.get_msg()

        g.es("Indentation error in %s, line %d" % (headline, badline),color="red")
        g.es(message)
        g.es("offending line:\n%s" % repr(str(line))[1:-1])
        return
        
    except:
        g.trace("unexpected exception")
        return
        
    g.es("Indentation OK: %s" % headline,color="blue")
</t>
<t tx="EKR.20040610195543.1">@ignore
@language python
&lt;&lt; tabnanny declarations &gt;&gt;
@others

if __name__ == '__main__':
    main()
</t>
<t tx="EKR.20040610195543.2">#! /usr/bin/env python

"""The Tab Nanny despises ambiguous indentation.  She knows no mercy.

tabnanny -- Detection of ambiguous indentation

For the time being this module is intended to be called as a script.
However it is possible to import it into an IDE and use the function
check() described below.

Warning: The API provided by this module is likely to change in future
releases; such changes may not be backward compatible.
"""

# Released to the public domain, by Tim Peters, 15 April 1998.

# XXX Note: this is now a standard library module.
# XXX The API needs to undergo changes however; the current code is too
# XXX script-like.  This will be addressed later.

__version__ = "6"

import os
import sys
import getopt
import tokenize
if not hasattr(tokenize, 'NL'):
    raise ValueError("tokenize.NL doesn't exist -- tokenize module too old")

__all__ = ["check", "NannyNag", "process_tokens"]

verbose = 0
filename_only = 0</t>
<t tx="EKR.20040610195543.3">def errprint(*args):
    sep = ""
    for arg in args:
        sys.stderr.write(sep + str(arg))
        sep = " "
    sys.stderr.write("\n")
</t>
<t tx="EKR.20040610195543.4">def main():
    global verbose, filename_only
    try:
        opts, args = getopt.getopt(sys.argv[1:], "qv")
    except getopt.error, msg:
        errprint(msg)
        return
    for o, a in opts:
        if o == '-q':
            filename_only = filename_only + 1
        if o == '-v':
            verbose = verbose + 1
    if not args:
        errprint("Usage:", sys.argv[0], "[-v] file_or_directory ...")
        return
    for arg in args:
        check(arg)</t>
<t tx="EKR.20040610195543.5">
class NannyNag(Exception):
    """
    Raised by tokeneater() if detecting an ambiguous indent.
    Captured and handled in check().
    """
    @others
</t>
<t tx="EKR.20040610195543.6">def __init__(self, lineno, msg, line):
    self.lineno, self.msg, self.line = lineno, msg, line
</t>
<t tx="EKR.20040610195543.7">def get_lineno(self):
    return self.lineno
</t>
<t tx="EKR.20040610195543.8">def get_msg(self):
    return self.msg
</t>
<t tx="EKR.20040610195543.9">def get_line(self):
    return self.line
</t>
<t tx="EKR.20040610195543.10">def check(file):
    """check(file_or_dir)

    If file_or_dir is a directory and not a symbolic link, then recursively
    descend the directory tree named by file_or_dir, checking all .py files
    along the way. If file_or_dir is an ordinary Python source file, it is
    checked for whitespace related problems. The diagnostic messages are
    written to standard output using the print statement.
    """

    if os.path.isdir(file) and not os.path.islink(file):
        if verbose:
            print "%s: listing directory" % `file`
        names = os.listdir(file)
        for name in names:
            fullname = os.path.join(file, name)
            if (os.path.isdir(fullname) and
                not os.path.islink(fullname) or
                os.path.normcase(name[-3:]) == ".py"):
                check(fullname)
        return

    try:
        f = open(file)
    except IOError, msg:
        errprint("%s: I/O Error: %s" % (`file`, str(msg)))
        return

    if verbose &gt; 1:
        print "checking", `file`, "..."

    try:
        process_tokens(tokenize.generate_tokens(f.readline))

    except tokenize.TokenError, msg:
        errprint("%s: Token Error: %s" % (`file`, str(msg)))
        return

    except NannyNag, nag:
        badline = nag.get_lineno()
        line = nag.get_line()
        if verbose:
            print "%s: *** Line %d: trouble in tab city! ***" % (
                `file`, badline)
            print "offending line:", `line`
            print nag.get_msg()
        else:
            if ' ' in file: file = '"' + file + '"'
            if filename_only: print file
            else: print file, badline, `line`
        return

    if verbose:
        print "%s: Clean bill of health." % `file`
</t>
<t tx="EKR.20040610195543.11">
class Whitespace:
    &lt;&lt; class Whitespace declarations &gt;&gt;
    @others
</t>
<t tx="EKR.20040610195543.12"># the characters used for space and tab
S, T = ' \t'

# members:
#   raw
#       the original string
#   n
#       the number of leading whitespace characters in raw
#   nt
#       the number of tabs in raw[:n]
#   norm
#       the normal form as a pair (count, trailing), where:
#       count
#           a tuple such that raw[:n] contains count[i]
#           instances of S * i + T
#       trailing
#           the number of trailing spaces in raw[:n]
#       It's A Theorem that m.indent_level(t) ==
#       n.indent_level(t) for all t &gt;= 1 iff m.norm == n.norm.
#   is_simple
#       True iff raw[:n] is of the form (T*)(S*)

</t>
<t tx="EKR.20040610195543.13">def __init__(self, ws):
    self.raw  = ws
    S, T = Whitespace.S, Whitespace.T
    count = []
    b = n = nt = 0
    for ch in self.raw:
        if ch == S:
            n = n + 1
            b = b + 1
        elif ch == T:
            n = n + 1
            nt = nt + 1
            if b &gt;= len(count):
                count = count + [0] * (b - len(count) + 1)
            count[b] = count[b] + 1
            b = 0
        else:
            break
    self.n    = n
    self.nt   = nt
    self.norm = tuple(count), b
    self.is_simple = len(count) &lt;= 1
</t>
<t tx="EKR.20040610195543.14"># return length of longest contiguous run of spaces (whether or not
# preceding a tab)
def longest_run_of_spaces(self):
    count, trailing = self.norm
    return max(len(count)-1, trailing)
</t>
<t tx="EKR.20040610195543.15">def indent_level(self, tabsize):
    # count, il = self.norm
    # for i in range(len(count)):
    #    if count[i]:
    #        il = il + (i/tabsize + 1)*tabsize * count[i]
    # return il

    # quicker:
    # il = trailing + sum (i/ts + 1)*ts*count[i] =
    # trailing + ts * sum (i/ts + 1)*count[i] =
    # trailing + ts * sum i/ts*count[i] + count[i] =
    # trailing + ts * [(sum i/ts*count[i]) + (sum count[i])] =
    # trailing + ts * [(sum i/ts*count[i]) + num_tabs]
    # and note that i/ts*count[i] is 0 when i &lt; ts

    count, trailing = self.norm
    il = 0
    for i in range(tabsize, len(count)):
        il = il + i/tabsize * count[i]
    return trailing + tabsize * (il + self.nt)
</t>
<t tx="EKR.20040610195543.16"># return True iff self.indent_level(t) == other.indent_level(t)
# for all t &gt;= 1
def equal(self, other):
    return self.norm == other.norm
</t>
<t tx="EKR.20040610195543.17"># return a list of tuples (ts, i1, i2) such that
# i1 == self.indent_level(ts) != other.indent_level(ts) == i2.
# Intended to be used after not self.equal(other) is known, in which
# case it will return at least one witnessing tab size.
def not_equal_witness(self, other):
    n = max(self.longest_run_of_spaces(),
            other.longest_run_of_spaces()) + 1
    a = []
    for ts in range(1, n+1):
        if self.indent_level(ts) != other.indent_level(ts):
            a.append( (ts,
                       self.indent_level(ts),
                       other.indent_level(ts)) )
    return a
</t>
<t tx="EKR.20040610195543.18"># Return True iff self.indent_level(t) &lt; other.indent_level(t)
# for all t &gt;= 1.
# The algorithm is due to Vincent Broman.
# Easy to prove it's correct.
# XXXpost that.
# Trivial to prove n is sharp (consider T vs ST).
# Unknown whether there's a faster general way.  I suspected so at
# first, but no longer.
# For the special (but common!) case where M and N are both of the
# form (T*)(S*), M.less(N) iff M.len() &lt; N.len() and
# M.num_tabs() &lt;= N.num_tabs(). Proof is easy but kinda long-winded.
# XXXwrite that up.
# Note that M is of the form (T*)(S*) iff len(M.norm[0]) &lt;= 1.
def less(self, other):
    if self.n &gt;= other.n:
        return False
    if self.is_simple and other.is_simple:
        return self.nt &lt;= other.nt
    n = max(self.longest_run_of_spaces(),
            other.longest_run_of_spaces()) + 1
    # the self.n &gt;= other.n test already did it for ts=1
    for ts in range(2, n+1):
        if self.indent_level(ts) &gt;= other.indent_level(ts):
            return False
    return True
</t>
<t tx="EKR.20040610195543.19"># return a list of tuples (ts, i1, i2) such that
# i1 == self.indent_level(ts) &gt;= other.indent_level(ts) == i2.
# Intended to be used after not self.less(other) is known, in which
# case it will return at least one witnessing tab size.
def not_less_witness(self, other):
    n = max(self.longest_run_of_spaces(),
            other.longest_run_of_spaces()) + 1
    a = []
    for ts in range(1, n+1):
        if self.indent_level(ts) &gt;= other.indent_level(ts):
            a.append( (ts,
                       self.indent_level(ts),
                       other.indent_level(ts)) )
    return a
</t>
<t tx="EKR.20040610195543.20">def format_witnesses(w):
    firsts = map(lambda tup: str(tup[0]), w)
    prefix = "at tab size"
    if len(w) &gt; 1:
        prefix = prefix + "s"
    return prefix + " " + ', '.join(firsts)
</t>
<t tx="EKR.20040610195543.21">def process_tokens(tokens):
    INDENT = tokenize.INDENT
    DEDENT = tokenize.DEDENT
    NEWLINE = tokenize.NEWLINE
    JUNK = tokenize.COMMENT, tokenize.NL
    indents = [Whitespace("")]
    check_equal = 0

    for (type, token, start, end, line) in tokens:
        if type == NEWLINE:
            # a program statement, or ENDMARKER, will eventually follow,
            # after some (possibly empty) run of tokens of the form
            #     (NL | COMMENT)* (INDENT | DEDENT+)?
            # If an INDENT appears, setting check_equal is wrong, and will
            # be undone when we see the INDENT.
            check_equal = 1

        elif type == INDENT:
            check_equal = 0
            thisguy = Whitespace(token)
            if not indents[-1].less(thisguy):
                witness = indents[-1].not_less_witness(thisguy)
                msg = "indent not greater e.g. " + format_witnesses(witness)
                raise NannyNag(start[0], msg, line)
            indents.append(thisguy)

        elif type == DEDENT:
            # there's nothing we need to check here!  what's important is
            # that when the run of DEDENTs ends, the indentation of the
            # program statement (or ENDMARKER) that triggered the run is
            # equal to what's left at the top of the indents stack

            # Ouch!  This assert triggers if the last line of the source
            # is indented *and* lacks a newline -- then DEDENTs pop out
            # of thin air.
            # assert check_equal  # else no earlier NEWLINE, or an earlier INDENT
            check_equal = 1

            del indents[-1]

        elif check_equal and type not in JUNK:
            # this is the first "real token" following a NEWLINE, so it
            # must be the first token of the next program statement, or an
            # ENDMARKER; the "line" argument exposes the leading whitespace
            # for this statement; in the case of ENDMARKER, line is an empty
            # string, so will properly match the empty string with which the
            # "indents" stack was seeded
            check_equal = 0
            thisguy = Whitespace(line)
            if not indents[-1].equal(thisguy):
                witness = indents[-1].not_equal_witness(thisguy)
                msg = "indent not equal e.g. " + format_witnesses(witness)
                raise NannyNag(start[0], msg, line)
</t>
<t tx="EKR.20040610201236">@

To do:
    
- Specify which nodes to check.
- Check only Python code.
- use g.readLinesClass or similar code in existing Python module.</t>
<t tx="EKR.20040610201941">@

To do:
    
- Specify which nodes to check.
- Check only Python code.
- use g.readLinesClass or similar code in existing Python module.</t>
<t tx="EKR.20040611083703"># This kind of code is used in the prototypes of new commands.

from __future__ import generators

import leoGlobals as g

@others

lines = "a\nb\nc\nd"

if 1: # Both work
    readline = g.readLinesGenerator(lines).next
else:
    readline = g.readLinesClass(lines).next

print '-' * 20

if 1: # Both work
    for s in g.readLinesGenerator(lines):
        print s,
else:
    while 1:
        s = readline()
        if s: print s,
        else: break
    
print ; print '-' * 20</t>
<t tx="EKR.20040612095237">@language python
@tabwidth -4</t>
<t tx="EKR.20040612150543"># Test
@others
# Last</t>
<t tx="EKR.20040612215136">a = 1
print "hello"
c = b
</t>
<t tx="EKR.20040613162717">import leoGlobals as g

path = r"c:\prog\leoScripts(before).txt"
path = r"c:\prog\leoScripts(after).txt"

print g.top().currentPosition()

try:
    f = open(path,"rb")
    s = f.read()
    f.close()
    
    cr = 0 ; nl = 0
    for ch in s:
        if ch == '\r': cr += 1
        if ch == '\n': nl += 1
        
    g.es("cr %d, nl %d %s" % (cr,nl,path))

except IOError:
    print "can not open",path</t>
<t tx="EKR.20040615070332"># "LPT1:", "PRN:" and "PRN" all freeze

s = 'stuff\n'
port = 'USB002'

try:
    f = file(port,'w')
    f.write(s)
    f.flush()
    f.close()
    print "done"
except IOError:
    print "Can not open",port</t>
<t tx="EKR.20040615144735"></t>
<t tx="EKR.20040615144810">d</t>
<t tx="EKR.20040619133116"></t>
<t tx="EKR.20040619134504">import unittest
import leoTest
import leoGlobals as g
reload(leoTest)

# We need real nodes to pass to the tests.
suite = leoTest.makeAtFileSuite("atFileTests")
unittest.TextTestRunner().run(suite)</t>
<t tx="EKR.20040621100553">Line 1

@last last line 1: no newline</t>
<t tx="EKR.20040622074004">@ignore</t>
<t tx="EKR.20040622074004.1"></t>
<t tx="EKR.20040622074004.2">node b, line 1 (changed 12)</t>
<t tx="EKR.20040622074004.3"></t>
<t tx="EKR.20040623201322.4"></t>
<t tx="EKR.20040623201322.7"></t>
<t tx="EKR.20040623201322.10"></t>
<t tx="EKR.20040623202054.1"></t>
<t tx="EKR.20040624103339.1"></t>
<t tx="EKR.20040624103339.2">Line 1

@last last line 1: no newline</t>
<t tx="EKR.20040624103339.3">#@+leo-ver=4
#@+node:@@file
Line 1

#@@last
#@nonl
#@-node:@@file
#@-leo
last line 1: no newline</t>
<t tx="EKR.20040624111917">Line 1

@last last line 1: newline
</t>
<t tx="EKR.20040624111917.1">#@+leo-ver=4
#@+node:@@file
Line 1

#@@last
#@-node:@@file
#@-leo
last line 1: newline
</t>
<t tx="EKR.20040624112329"></t>
<t tx="EKR.20040624112329.1">Line 1

@last last line 1: two trailing newlines
</t>
<t tx="EKR.20040624112329.2">#@+leo-ver=4
#@+node:@@file
Line 1

#@@last
#@-node:@@file
#@-leo
last line 1: two trailing newlines
</t>
<t tx="EKR.20040624112329.3">Line 1

@last last line 1: no newline</t>
<t tx="EKR.20040624112329.4">#@+leo-ver=4-thin
#@+node:EKR.20040624112329.3:@@thin
Line 1

#@@last
#@nonl
#@-node:EKR.20040624112329.3:@@thin
#@-leo
last line 1: no newline</t>
<t tx="EKR.20040625110032">@ignore

@others</t>
<t tx="EKR.20040625110032.1"></t>
<t tx="EKR.20040625110032.2"># @language html

@comment &lt;!-- --&gt;</t>
<t tx="EKR.20040625110032.3"></t>
<t tx="EKR.20040626212434"></t>
<t tx="EKR.20040626212434.1">import leoGlobals as g
import Tkinter as Tk
import random as r ; rand = r.randint

top = Tk.Toplevel(None) ; top.title("Drawing")
canvas = Tk.Canvas(top,height="5i",width="9i") # ,background="white")
canvas.pack() ; top.update()

mincolor,maxcolor=125,225

for n in xrange(5000):
    x,y = rand(0,900),rand(0,500)
    w = rand(1,10) ; h = w * r.uniform(0.5,1.5)
    color = "#%02x%02x%02x" % (rand(0,maxcolor/2),rand(mincolor,maxcolor),rand(mincolor,maxcolor))
    kind = rand(1,3)
    sign = rand(-1,1) # rand(0,2)-1
    if kind == 1:
        canvas.create_rectangle(x,y,x+w,y+h,fill=color,width=0)
    elif kind == 2:
        canvas.create_oval(x,y,x+w,y+h,fill=color,width=0)
    else:
        canvas.create_line(x,y,x+sign*5*w,y+5*h,fill=color)
    if 0: # Redrawing slows things down a lot.
        if (n % 1000) == 0: top.update()</t>
<t tx="EKR.20040626212434.2">import leoGlobals as g
import Tkinter as Tk
import random as r

top = Tk.Toplevel(None) ; top.title("Drawing")
canvas = Tk.Canvas(top, height = "5i", width = "9i")
canvas.pack() ; top.update()
rand = r.randint

x,y = 10,10
mincolor,maxcolor=125,225

for n in xrange(2000):
    x2,y2 = rand(0,900),rand(0,500)
    color = "#%02x%02x%02x" % (rand(mincolor,maxcolor),rand(mincolor,maxcolor),rand(mincolor,maxcolor))
    width = "%fm" % r.uniform(0.1,0.6)
    canvas.create_line(x,y,x2,y2,fill=color,width=width)
    extent = rand(180,270)
    canvas.create_arc(x,y,x2,y2,outline=color,width=width,style="arc",extent=extent)
    x,y = x2,y2
    # if (n % 1000) == 0: top.update()</t>
<t tx="EKR.20040626213007">import leoGlobals as g
import Tkinter as Tk
import random as r ; rand = r.randint

top = Tk.Toplevel(None) ; top.title("Drawing")
canvas = Tk.Canvas(top,height="5i",width="9i") # ,background="white")
canvas.pack() ; top.update()

# Paul Klee
mincolor,maxcolor=125,225
xmax,ymax = 800,400
stipples = [None,"gray75"] # "gray12","gray25","gray50",]
h=w=90
for x in xrange(10,xmax,w):
    for y in xrange(10,ymax,h):
        color = "#%02x%02x%02x" % (rand(mincolor,maxcolor),rand(mincolor,maxcolor),rand(mincolor,maxcolor))
        range = h/6
        stipple = stipples[rand(0,len(stipples)-1)]
        dx = r.uniform(0.0,range) - range/2
        dy = r.uniform(0.0,range) - range/2
        canvas.create_rectangle(x+dx,y+dy,x+dx+w,y+dy+h,fill=color,width=0,stipple=stipple)</t>
<t tx="EKR.20040627100615">import leoGlobals as g

g.app.config.redirect_execute_script_output_to_log_pane = False

# Syntax error
print '

import leoGlobals as g
print g.app.config.redirect_execute_script_output_to_log_pane</t>
<t tx="EKR.20040627103732">@ignore</t>
<t tx="EKR.20040627103902" lineYOffset="4b032e" icons="5d7100287d710128550577686572657102550a6265666f726549636f6e710355047870616471044b025504747970657105550466696c6571066806582d000000633a5c70726f675c6c656f4356535c6c656f5c49636f6e735c6c745f6172726f775f656e61626c65642e67696671075507796f666673657471084afdffffff757d7109286805680668084afdffffff6806582d000000633a5c70726f675c6c656f4356535c6c656f5c49636f6e735c72745f6172726f775f656e61626c65642e676966710a68044afeffffff6802550e6265666f7265486561646c696e65710b5507786f6666736574710c4b0275652e"></t>
<t tx="EKR.20040627121836">import leoGlobals as g

c = g.top() ; p = c.currentPosition()

next = p.next()

t = next.v.t
v = next.v

for s in t.__dict__:
    print s,getattr(t,s)</t>
<t tx="EKR.20040627150213">import leoGlobals as g
import Tkinter as Tk
import random as r ; rand = r.randint

top = Tk.Toplevel(None) ; top.title("Drawing")
canvas = Tk.Canvas(top,height="5i",width="9i") # ,background="white")
canvas.pack() ; top.update()

@others

mincolor,maxcolor=125,225
xmax,ymax = 300,300
h=w=1
i = r.uniform(2.0,4.0)
j = r.uniform(-5.0,5.0)
power = r.uniform(1.1,1.2)
    #(1.5,1.7)
for n in xrange(1):
    i += 0.5
    j += 0.5
    power += 0.01
    print "i,j,power:",i,j,power
    c = complex(i,j)
    for format,m in (
        #("#%02x%02x%02x",256),
        #("#%03x%03x%03x",256*8),
        ("#%04x%04x%04x",256*256),
    ):
        for x in xrange(0,xmax,1):
            for y in xrange(0,ymax,1):
                n = complex(x,y)
                z = pow(c*n,power)
                n1 = int(z.real*m) ; n2 = int(z.imag*m)
                color = format % (n1%m,n2%m,abs(n1-n2)%m)
                # canvas.create_rectangle(w*x,h*y,w*x+w,h*y+h,fill=color,width=0)
                canvas.create_line(x,y,x+1,y+1,fill=color,width=1)
        top.update()
print "done"</t>
<t tx="ekr.20040126105605"></t>
<t tx="ekr.20040126105605.2"></t>
<t tx="ekr.20040126105605.3"></t>
<t tx="ekr.20040301191933"></t>
<t tx="ekr.20040301191933.1"></t>
<t tx="ekr.20040301191933.2"></t>
<t tx="ekr.20040302091705">import leoGlobals as g

class position:
    def __init__(self):
        self.v = "a"
    def move(self):
        self.v = "b"

p = position()
v = p.v
print "before", v, p.v, v is p.v
p.move()
print "after ", v, p.v, v is p.v</t>
<t tx="ekr.20040302092753"></t>
<t tx="ekr.20040302092753.1"></t>
<t tx="ekr.20040302092753.2"></t>
<t tx="ekr.20040302092753.3"></t>
<t tx="ekr.20040302092753.4"></t>
<t tx="ekr.20040303063549"></t>
<t tx="ekr.20040303063549.1"></t>
<t tx="ekr.20040303063549.2">@ 
# DTHEIN 2004.01.11: Added script

Each child node will in turn have two or more children:
    
- a "before" node
- an "after" node

The parent to before and after nodes will contain pagewidth
and language formatting directives
@c

import unittest
import leoTest
reload(leoTest) # Allows us to rerun this script when leoTest.py changes.

# Make sure this is the selected node.
u = leoTest.testUtils()
p = u.findUnitTestNode("reformatParagraphsTests")
p.c.selectVnode(p)

suite = leoTest.makeReformatParagraphSuite()
unittest.TextTestRunner().run(suite)</t>
<t tx="ekr.20040303063549.3">@language plain
@pagewidth 40
@tabwidth 8

# DTHEIN 2004.01.11: Added test case data

Wrap a long line, no trailing newline.
</t>
<t tx="ekr.20040303063549.4">This line is over forty characters long, at least it seems to be.</t>
<t tx="ekr.20040303063549.5">This line is over forty characters long,
at least it seems to be.</t>
<t tx="ekr.20040303063549.6">@language plain
@pagewidth 40
@tabwidth 8

# DTHEIN 2004.01.11: Added test case data

Wrap a long line, with trailing newline.
</t>
<t tx="ekr.20040303063549.7">This line is over forty characters long, at least it seems to be.
</t>
<t tx="ekr.20040303063549.8">This line is over forty characters long,
at least it seems to be.
</t>
<t tx="ekr.20040303063549.9">@language plain
@pagewidth 40
@tabwidth 8

# DTHEIN 2004.01.11: Added test case data

Wrap a long line and some short ones.</t>
<t tx="ekr.20040303063549.10">This line is over forty characters long, at least it seems to be.
This is shorter, 
but should be part of the same
paragraph.</t>
<t tx="ekr.20040303063549.11">This line is over forty characters long,
at least it seems to be. This is
shorter, but should be part of the same
paragraph.</t>
<t tx="ekr.20040303063549.12">@language plain
@pagewidth 40
@tabwidth 8

# DTHEIN 2004.01.11: Added test case data

Wrap a paragraph with interior lines that have leading white space.</t>
<t tx="ekr.20040303063549.13">This line is over forty characters long, at least it seems to be.
  This indented line should be merged into the same
paragraph.</t>
<t tx="ekr.20040303063549.14">This line is over forty characters long,
  at least it seems to be. This indented
  line should be merged into the same
  paragraph.</t>
<t tx="ekr.20040303063549.15">@language plain
@pagewidth 40
@tabwidth 8

# DTHEIN 2004.01.11: Added test case data

No wrapping required, so don't change a thing.</t>
<t tx="ekr.20040303063549.16">This line is under 40 chars.</t>
<t tx="ekr.20040303063549.17">This line is under 40 chars.</t>
<t tx="ekr.20040303063549.18">@language plain
@pagewidth 40
@tabwidth 8

# DTHEIN 2004.01.11: Added test case data

Honor the first line's leading whitespace.</t>
<t tx="ekr.20040303063549.19">   This line is over forty characters long, at least it seems to be.
   This is shorter, 
but should be part of the same
paragraph.  And this is indented 3 characters.</t>
<t tx="ekr.20040303063549.20">   This line is over forty characters
   long, at least it seems to be. This
   is shorter, but should be part of the
   same paragraph. And this is indented
   3 characters.</t>
<t tx="ekr.20040303063549.21">@language plain
@pagewidth 40
@tabwidth 8

# DTHEIN 2004.01.11: Added test case data

Honor the first and second line's leading whitespace.</t>
<t tx="ekr.20040303063549.22">   This line is over forty characters long, at least it seems to be.
   This is shorter, 
     but should be part of the same
     paragraph.  And this is indented 3 characters.</t>
<t tx="ekr.20040303063549.23">   This line is over forty characters
   long, at least it seems to be. This
   is shorter, but should be part of the
   same paragraph. And this is indented
   3 characters.</t>
<t tx="ekr.20040303063549.24">@language plain
@pagewidth 40
@tabwidth 8

# DTHEIN 2004.01.11: Added test case data

Single paragraph, hanging indentation.</t>
<t tx="ekr.20040303063549.25">Honor this line that has a hanging indentation, please.  Hanging
  indentation is valuable for lists of all kinds.  But it is tricky to get right.</t>
<t tx="ekr.20040303063549.26">Honor this line that has a hanging
  indentation, please. Hanging
  indentation is valuable for lists of
  all kinds. But it is tricky to get
  right.</t>
<t tx="ekr.20040303063549.27">@language plain
@pagewidth 40
@tabwidth 8

# DTHEIN 2004.01.11: Added test case data

Single paragraph, hanging indentation with other indentation beyond line 2.</t>
<t tx="ekr.20040303063549.28">Honor this line that has
  a hanging indentation, please.  Hanging
    indentation is valuable for lists of all kinds.  But it is tricky to get right.</t>
<t tx="ekr.20040303063549.29">Honor this line that has a hanging
  indentation, please. Hanging
  indentation is valuable for lists of
  all kinds. But it is tricky to get
  right.</t>
<t tx="ekr.20040303063549.30">@language plain
@pagewidth 40
@tabwidth 8

# DTHEIN 2004.01.11: Added test case data

Single paragraph, hanging indentation, short lines, extraneous indentation, and last line uses a tab for whitespace.</t>
<t tx="ekr.20040303063549.31">Honor this line that 
  has a hanging indentation, 
  please.  Hanging
   indentation is valuable
    for lists of all kinds.  But 
    it is tricky to get right.</t>
<t tx="ekr.20040303063549.32">Honor this line that has a hanging
  indentation, please. Hanging
  indentation is valuable for lists of
  all kinds. But it is tricky to get
  right.</t>
<t tx="ekr.20040303063549.33">@language plain
@pagewidth 40
@tabwidth 8

# DTHEIN 2004.01.11: Added test case data

Mutliple long lined paragraphs.  Cursor should move to next paragraph after formatting a paragraph.</t>
<t tx="ekr.20040303063549.34">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.

Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.

StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?</t>
<t tx="ekr.20040303063549.35">Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.

Some 90% of all presidentially declared
disasters are weather related, leading
to around 500 deaths per year and nearly
$14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK,
helps arm America's communities with the
communication and safety skills needed
to save lives and property– before and
during the event. StormReady helps
community leaders and emergency managers
strengthen local safety programs.

StormReady communities are better
prepared to save lives from the
onslaught of severe weather through
better planning, education, and
awareness. No community is storm proof,
but StormReady can help communities save
lives. Does StormReady make a
difference?</t>
<t tx="ekr.20040303063549.36">@language plain
@pagewidth 40
@tabwidth 8

# DTHEIN 2004.01.11: Added test case data

A regular paragraph, plus a numbered list of several items, plus a final regular paragraph.  Cursor should move to next paragraph after formatting a paragraph.
</t>
<t tx="ekr.20040303063549.37">This paragraph leads of this test.  It is the "lead"
paragraph.

  1. This is item 
     number 1.  It is the first item in the list.

  2. This is item 
     number 2.  It is the second item in the list.

  3. This is item 
     number 3.  It is the third item in the list.

This paragraph ends the test.  It is the "final"
paragraph.</t>
<t tx="ekr.20040303063549.38">This paragraph leads of this test. It is
the "lead" paragraph.

  1. This is item number 1. It is the
     first item in the list.

  2. This is item number 2. It is the
     second item in the list.

  3. This is item number 3. It is the
     third item in the list.

This paragraph ends the test. It is the
"final" paragraph.</t>
<t tx="ekr.20040303063549.39">@language plain
@pagewidth 40
@tabwidth 8

# DTHEIN 2004.01.11: Added test case data

Test to make sure that reformatting treats directives as a new paragraph and doesn't wrap directive lines.
</t>
<t tx="ekr.20040303063549.40">Americans live in the most severe weather-prone country on Earth. Each year, Americans cope with an average of 10,000 thunderstorms, 2,500 floods, 1,000 tornadoes, as well as an average of 6 deadly hurricanes. Potentially deadly weather impacts every American. Communities can now rely on the National Weather Service’s StormReady program to help them guard against the ravages of Mother Nature.
@unknownDirective
Some 90% of all presidentially declared disasters are weather related, leading to around 500 deaths per year and nearly $14 billion in damage. StormReady, a program started in 1999 in Tulsa, OK, helps arm America's communities with the communication and safety skills needed to save lives and property– before and during the event. StormReady helps community leaders and emergency managers strengthen local safety programs.
@unknownDirective
StormReady communities are better prepared to save lives from the onslaught of severe weather through better planning, education, and awareness. No community is storm proof, but StormReady can help communities save lives. Does StormReady make a difference?</t>
<t tx="ekr.20040303063549.41">Americans live in the most severe
weather-prone country on Earth. Each
year, Americans cope with an average of
10,000 thunderstorms, 2,500 floods,
1,000 tornadoes, as well as an average
of 6 deadly hurricanes. Potentially
deadly weather impacts every American.
Communities can now rely on the National
Weather Service’s StormReady program to
help them guard against the ravages of
Mother Nature.
@unknownDirective
Some 90% of all presidentially declared
disasters are weather related, leading
to around 500 deaths per year and nearly
$14 billion in damage. StormReady, a
program started in 1999 in Tulsa, OK,
helps arm America's communities with the
communication and safety skills needed
to save lives and property– before and
during the event. StormReady helps
community leaders and emergency managers
strengthen local safety programs.
@unknownDirective
StormReady communities are better
prepared to save lives from the
onslaught of severe weather through
better planning, education, and
awareness. No community is storm proof,
but StormReady can help communities save
lives. Does StormReady make a
difference?</t>
<t tx="ekr.20040303063549.42">@language plain
@pagewidth 40
@tabwidth 8

Ran into a problem with the wrapping
eating blank lines that delimit
paragraphs if those blank lines have any
leading whitespace. This test is to make
sure that still works.

If you "show invisibles" you'll see the
leading whitespace in the blank lines --
which is different from the
"testMultiParagraphWithList" test.</t>
<t tx="ekr.20040303063549.43">This paragraph leads of this test.  It is the "lead"
paragraph.
  
  1. This is item 
     number 1.  It is the first item in the list.
  
  2. This is item 
     number 2.  It is the second item in the list.
  
  3. This is item 
     number 3.  It is the third item in the list.
  
This paragraph ends the test.  It is the "final"
paragraph.</t>
<t tx="ekr.20040303063549.44">This paragraph leads of this test. It is
the "lead" paragraph.
  
  1. This is item number 1. It is the
     first item in the list.
  
  2. This is item number 2. It is the
     second item in the list.
  
  3. This is item number 3. It is the
     third item in the list.
  
This paragraph ends the test. It is the
"final" paragraph.</t>
<t tx="ekr.20040303063549.45">import unittest
import leoTest
reload(leoTest)

# Make sure this is the selected node.
u = leoTest.testUtils()
p = u.findUnitTestNode("colorizerTests")
p.c.selectVnode(p)

suite = leoTest.makeColorSuite("colorizerTests","tempNode")
unittest.TextTestRunner().run(suite)

# This works because there is _no_ @others here.</t>
<t tx="ekr.20040303063549.46">@language actionscript

break
call, continue
delete, do
else
false, for, function
goto
if, in
new, null
return
true, typeof
undefined
var, void, while, with
#include
catch, constructor
prototype
this, try
_parent, _root, __proto__
// Jeeze hasn't anyone ever heard of namespaces??
ASnative, abs, acos, appendChild, asfunction, asin, atan, atan2, attachMovie, attachSound, attributes
BACKSPACE
CAPSLOCK, CONTROL, ceil, charAt, charCodeAt, childNodes, chr, cloneNode, close, concat, connect, cos, createElement, createTextNode
DELETEKEY, DOWN, docTypeDecl, duplicateMovieClip
END, ENTER, ESCAPE, enterFrame, entry, equal, eval, evaluate, exp
firstChild, floor, fromCharCode, fscommand, getAscii
getBeginIndex, getBounds, getBytesLoaded, getBytesTotal, getCaretIndex, getCode, getDate, getDay, getEndIndex, getFocus, getFullYear, getHours, getMilliseconds, getMinutes, getMonth, getPan, getProperty, getRGB, getSeconds, getTime, getTimer, getTimezoneOffset, getTransform, getURL, getUTCDate, getUTCDay, getUTCFullYear, getUTCHours, getUTCMilliseconds, getUTCMinutes, getUTCMonth, getUTCSeconds, getVersion, getVolume, getYear, globalToLocal, gotoAndPlay, gotoAndStop
HOME, haschildNodes, hide, hitTest
INSERT, Infinity, ifFrameLoaded, ignoreWhite, indexOf, insertBefore, int, isDown, isFinite, isNaN, isToggled
join
keycode, keyDown, keyUp
LEFT, LN10, LN2, LOG10E, LOG2E, lastChild, lastIndexOf, length, load, loaded, loadMovie, loadMovieNum, loadVariables, loadVariablesNum, localToGlobal, log
MAX_VALUE, MIN_VALUE, max, maxscroll, mbchr, mblength, mbord, mbsubstring, min, 
NEGATIVE_INFINITY, NaN, newline, nextFrame, nextScene, nextSibling, nodeName, nodeType, nodeValue
on, onClipEvent, onClose, onConnect, onData, onLoad, onXML, ord
PGDN, PGUP, PI, POSITIVE_INFINITY, parentNode, parseFloat, parseInt, parseXML, play, pop, pow, press, prevFrame, previousSibling, prevScene, print, printAsBitmap, printAsBitmapNum, printNum, push
RIGHT, random, release, removeMovieClip, removeNode, reverse, round
SPACE, SQRT1_2, SQRT2, scroll, send, sendAndLoad, set, setDate, setFocus, setFullYear, setHours, setMilliseconds, setMinutes, setMonth, setPan, setProperty, setRGB, setSeconds, setSelection, setTime, setTransform, setUTCDate, setUTCFullYear, setUTCHours, setUTCMilliseconds, setUTCMinutes, setUTCMonth, setUTCSeconds, setVolume, setYear, shift, show, sin, slice, sort, start, startDrag, status, stop, stopAllSounds, stopDrag, substr, substring, swapDepths, splice, split, sqrt
TAB, tan, targetPath, tellTarget, toggleHighQuality, toLowerCase, toString, toUpperCase, trace
UP, UTC, unescape, unloadMovie, unLoadMovieNum, unshift, updateAfterEvent
valueOf
xmlDecl, _alpha
_currentframe
_droptarget
_focusrect, _framesloaded
_height, _highquality
_name
_quality
_rotation
_soundbuftime
_target, _totalframes
_url
_visible
_width
_x, _xmouse, _xscale
_y, _ymouse, _yscale
and, add, eq, ge, gt, le, lt, ne, not, or, Array, Boolean, Color, Date, Key, Math, MovieClip, Mouse, Number, Object, Selection, Sound, String, XML, XMLSocket</t>
<t tx="ekr.20040303063549.47">@language c
@comment /* */

@
@c

#define WIPEOUT 0 /* 
                   * Causes database card number &amp; flags to be set to zero. 
                   * This is so I don't need an infinite supply of cards!
                   */
// Not colored (because of @language /* */)
#include "equ.h"
#include "cmn.h"
#include "ramdef.h"
#include "eeprom.h"
#include &lt;hpc_ram.h&gt;
#include &lt;rlydef.h&gt;</t>
<t tx="ekr.20040303063549.48">@language csharp
@ comment
@c

/* block
comment */

// test

id // not a keyword

abstract as 
base bool break byte 
case catch char checked class const continue 
decimal default delegate do double 
else enum event explicit extern 
false finally fixed float for foreach 
get goto 
if implicit in int interface internal is 
lock long 
namespace new null 
object operator out override 
params partial private protected public 
readonly ref return 
sbyte sealed set short sizeof stackalloc 
static string struct switch 
this throw true try typeof 
uint ulong unchecked unsafe ushort using 
value virtual void volatile 
where while
yield</t>
<t tx="ekr.20040303063549.49">@language cweb

% This is limbo in cweb mode... It should be in \LaTeX mode, not \c mode.
% The following should not be colorized: class,if,else.

@* this is a _cweb_ comment.  Code is written in \c.
"strings" should not be colorized.
It should be colored in \LaTeX mode.
The following are not keywords in latex mode: if, else, etc.
Noweb section referencs are _valid_ in cweb comments!
&lt;&lt; section ref &gt;&gt;
&lt;&lt; missing ref &gt;&gt;
@c

and this is C code. // It is colored in \LaTeX mode by default.
/* This is a C block comment.  It may also be colored in restricted \LaTeX mode. */

// Section refs are valid in code too, of course.
&lt;&lt; section ref &gt;&gt;
&lt;&lt; missing ref &gt;&gt;

\LaTeX and \c should not be colored.
if else, while, do // C keywords.</t>
<t tx="ekr.20040303063549.50">&lt;&lt; section def &gt;&gt;=

    my \c code goes here // This is \LaTeX text
    /* This is also \LaTeX text */</t>
<t tx="ekr.20040303063549.51">@language elisp

; Maybe...
error princ 

; More typical of other lisps...
and apply
car cdr cons cond
defconst defun defvar 
eq equal eval
gt ge
if 
let le lt
mapcar 
ne nil 
or not 
prog progn 
set setq 
t type-of 
unless 
when while</t>
<t tx="ekr.20040303063549.52">@language html

&lt;HTML&gt;
&lt;!-- Author: Edward K. Ream, edream@tds.net --&gt;
&lt;HEAD&gt;
  &lt;META NAME="GENERATOR" CONTENT="Microsoft FrontPage 4.0"&gt;
  &lt;TITLE&gt; Leo's Home Page &lt;/TITLE&gt;
  &lt;META NAME="description" CONTENT="This page describes Leo.
Leo adds powerful outlines to the noweb and CWEB literate programming languages."&gt;
  &lt;META NAME="keywords" CONTENT="LEO, LITERATE PROGRAMMING, OUTLINES, CWEB,
NOWEB, OUTLINES, EDWARD K. REAM, DONALD E. KNUTH, SILVIO LEVY, OPEN SOFTWARE"&gt;
&lt;/HEAD&gt;
&lt;!-- Last Modified: May 12, 2002 --&gt;
&lt;BODY BGCOLOR="#fffbdc"&gt;

&lt;H1 ALIGN=CENTER&gt;&lt;a NAME="top"&gt;&lt;/a&gt;&lt;IMG SRC="Blank.gif" width=
"32" height="32" ALIGN="BOTTOM" NATURALSIZEFLAG="3"&gt;&lt;IMG SRC="leo.gif" 
WIDTH="32" HEIGHT="32" ALIGN="BOTTOM" NATURALSIZEFLAG="3"&gt;&lt;a href="leo_TOC.html#top"&gt;&lt;IMG SRC=
"arrow_rt.gif" WIDTH="32" HEIGHT="32" ALIGN="BOTTOM" NATURALSIZEFLAG="3"&gt;&lt;/a&gt; &amp;nbsp;&lt;/H1&gt;

&lt;H1 ALIGN=CENTER&gt; Leo's Home Page&lt;/H1&gt;

&lt;p align="center"&gt;&lt;a href="http://www.python.org/"&gt;&lt;img border="0" src="PythonPowered.gif" width="110" height="44"&gt; &lt;/a&gt; &lt;A HREF="http://sourceforge.net/"&gt;&lt;IMG SRC="http://sourceforge.net/sflogo.php?group_id=3458&amp;type=1" NATURALSIZEFLAG="0" ALT="SourceForge Logo"&gt;&lt;/A&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&lt;A HREF="http://sourceforge.net/project/?group_id=3458"&gt;Leo at SourceForge&lt;/A&gt;&amp;nbsp;&amp;nbsp;
&lt;a href="icons.html"&gt;&lt;img border="0" src="LeoCodeGray.gif" width="77" height="42"&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;
&lt;a href="icons.html"&gt;&lt;img border="0" src="LeoProse.gif" width="81" height="42"&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;

&lt;H3&gt;&lt;A NAME="anchor127554"&gt;&lt;/A&gt;Summary&lt;/H3&gt;

&lt;UL&gt;
  &lt;LI&gt;Leo is a &lt;i&gt; programmer's editor&lt;/i&gt;  and a flexible &lt;i&gt;browser&lt;/i&gt; for
    projects, programs, classes or data. Leo clarifies design, coding, debugging, testing
  and maintenance.
  &lt;LI&gt;Leo is an &lt;i&gt;outlining editor&lt;/i&gt;. Outlines clarify the big picture while
    providing unlimited space for details.
  &lt;LI&gt;Leo
    is a &lt;a HREF="http://www.literateprogramming.com/"&gt;&lt;i&gt;literate
    programming&lt;/i&gt;&lt;/a&gt; tool, compatible with &lt;A HREF="http://www.eecs.harvard.edu/~nr/noweb/"&gt;noweb&lt;/A&gt;
    and &lt;a HREF="http://www-cs-faculty.stanford.edu/~knuth/cweb.html"&gt;CWEB&lt;/a&gt;.
    Leo enhances any text-based
programming language, from assembly language and C to Java, Python and XML.
  &lt;LI&gt;Leo is also a &lt;i&gt;data organizer&lt;/i&gt;. A single Leo outline can generate complex
    data spanning many different files.&amp;nbsp; Leo has been used to manage web sites.
  &lt;LI&gt;Leo is a &lt;i&gt; project manager&lt;/i&gt;. Leo provides multiple views
of a project within a single outline. Leo naturally represents tasks that remain
    up-to-date.
  &lt;LI&gt;Leo is fully &lt;i&gt; scriptable&lt;/i&gt; using &lt;A HREF="http://www.python.org/"&gt;Python&lt;/A&gt;
  and saves its files in &lt;A HREF="http://www.w3.org/XML/"&gt;XML&lt;/A&gt; format.
  &lt;LI&gt;Leo is &lt;i&gt;portable&lt;/i&gt;.&amp;nbsp; Leo.py is 100% pure Python and will run on
    any platform supporting &lt;A HREF="http://www.python.org/"&gt;Python&lt;/A&gt;
    and &lt;a href="http://tcl.activestate.com/"&gt;Tk/tcl&lt;/a&gt;, including Windows,
    Linux and MacOS X.&amp;nbsp; Leo.exe runs on any Windows platform.
  &lt;LI&gt;Leo is &lt;a href="http://www.opensource.org/"&gt; &lt;i&gt; Open Software&lt;/i&gt;&lt;/a&gt;, distributed under
    the &lt;a href="http://www.python.org/doc/Copyright.html"&gt; Python License&lt;/a&gt;.
&lt;/UL&gt;

&lt;H3&gt;More Information and downloads&lt;/H3&gt;

&lt;ul&gt;
  &lt;LI&gt;An excellent &lt;a href="http://www.3dtree.com/ev/e/sbooks/leo/sbframetoc_ie.htm"&gt;online
    tutorial&lt;/a&gt; and &lt;A HREF="http://www.jserv.com/jk_orr/xml/leo.htm"&gt;Leo resource
  page&lt;/A&gt;, both written by &lt;a href="http://www.jserv.com/jk_orr"&gt;Joe Orr&lt;/a&gt;.
  &lt;LI&gt;My brother's &lt;a href="SpeedReam.html"&gt;slashdot
    article about Leo&lt;/a&gt;, the best description about why Leo is special.
  &lt;LI&gt;&lt;A HREF="testimonials.html#anchor104391"&gt;What people are saying about Leo&lt;/A&gt;
  &lt;LI&gt;&lt;A HREF="leo_TOC.html#anchor964914"&gt;Complete users guide&lt;/A&gt;
    and
    &lt;A HREF="intro.html#anchor887874"&gt;tutorial introduction&lt;/A&gt;  with
  screen shots.
  &lt;li&gt;&lt;a href="FAQ.html"&gt;FAQ&lt;/a&gt; and &lt;a href="http://sourceforge.net/forum/?group_id=3458"&gt;help and discussion
    forums&lt;/a&gt;, preferable to &lt;A HREF="mailto:edream@tds.net"&gt;email&lt;/A&gt; so others may join
    in.&lt;/li&gt;
  &lt;li&gt;&lt;a href="icons.html"&gt;Icons&lt;/a&gt; for bragging about Leo.&lt;/li&gt;
&lt;/ul&gt;

&lt;a href="http://sourceforge.net/project/showfiles.php?group_id=3458"&gt;Download
    Leo&lt;/a&gt; from &lt;A HREF="http://sourceforge.net/project/?group_id=3458"&gt;Leo's SourceForge
site&lt;/A&gt;.

&lt;P ALIGN=left&gt;Leo's author is &lt;A HREF="http://personalpages.tds.net/~edream/index.html"&gt;Edward
  K. Ream&lt;/A&gt; email: &lt;A HREF="mailto:edream@tds.net"&gt;edream@tds.net&lt;/A&gt; voice: (608) 231-0766

&lt;HR ALIGN=LEFT&gt;

&lt;p align="center"&gt;

&lt;IMG SRC="Blank.gif" ALIGN="left" NATURALSIZEFLAG=
"3" width="34" height="34"&gt;&lt;IMG SRC="leo.gif" ALIGN="left" NATURALSIZEFLAG=
"3" width="32" height="32"&gt;&lt;a HREF="leo_TOC.html"&gt;&lt;IMG SRC="arrow_rt.gif" WIDTH="32"
HEIGHT="32" ALIGN="left" NATURALSIZEFLAG="3"&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;</t>
<t tx="ekr.20040303063549.53">@language html

&lt;? xml version="1.0"&gt;
&lt;!-- test --&gt;
&lt;project name="Converter" default="dist"&gt;
&lt;/project&gt;"""</t>
<t tx="ekr.20040303063549.54">@language latex

% This is a \LaTeX mode comment.

This is a test of \LaTeX mode.

@ blah blah blah
@c

\c and \LaTeX are latex keywords.

This is a keyword \% not the start of a comment.

More keywords: \@ and \( and \) and \{ and \}</t>
<t tx="ekr.20040303063549.55">@ignore
@ doc
@c
@language c
    @others

abc
for # comment
# pp
@q comment @&gt; after
// comment
&lt;!-- comment --&gt; after
/* java comment */
{ pascal comment }
% latex comment
xor php keyword
fblocked tcl keyword
synchronized java keyword
\acute latex keyword
alarm perl keyword

# Python single-line comment
// C single-line comment
xx /* C block comment */ yy
xxx """ triple string """ zzz
a 'string' b
c "string" d
// C keywords
switch, case
</t>
<t tx="ekr.20040303063549.56">@language php
@ doc
This is a doc part.
@c

and or
array
array()
this is a test.
__CLASS__
&lt;?php and or array() ?&gt;
&lt;?PHP and or array() ?&gt;</t>
<t tx="ekr.20040303063549.57">@language python

"""python
string"""d

'this\
is'''</t>
<t tx="ekr.20040303063549.58">"""This creates a free-floating copy of v's tree for undo.
The copied trees must use different tnodes than the original."""
    
def copyTree(self,root):

    c = self
    # Create the root vnode.
    result = v = leoNodes.vnode(c,root.t)
    # Copy the headline and icon values v.copyNode(root,v)
    # Copy the rest of tree.
    v.copyTree(root,v)
    # Replace all tnodes in v by copies.
    assert(v.nodeAfterTree() == None)
    while v:
        v.t = leoNodes.tnode(0, v.t.bodyString)
        v = v.threadNext()
    return result</t>
<t tx="ekr.20040303063549.59">@language rebol

; a comment
about abs absolute add alert alias all alter and and~ any append arccosine arcsine arctangent array ask at  
back bind boot-prefs break browse build-port build-tag  
call caret-to-offset catch center-face change change-dir charset checksum choose clean-path clear clear-fields close comment complement compose compress confirm continue-post context copy cosine create-request crypt cvs-date cvs-version  
debase decode-cgi decode-url decompress deflag-face dehex delete demo desktop detab dh-compute-key dh-generate-key dh-make-key difference dirize disarm dispatch divide do do-boot do-events do-face do-face-alt does dsa-generate-key dsa-make-key dsa-make-signature dsa-verify-signature  
echo editor either else emailer enbase entab exclude exit exp extract 
fifth find find-key-face find-window flag-face first flash focus for forall foreach forever form forskip fourth free func function  
get get-modes get-net-info get-style  
halt has head help hide hide-popup  
if import-email in inform input insert insert-event-func intersect 
join 
last launch launch-thru layout license list-dir load load-image load-prefs load-thru log-10 log-2 log-e loop lowercase  
make make-dir make-face max maximum maximum-of min minimum minimum-of mold multiply  
negate net-error next not now  
offset-to-caret open open-events or or~ 
parse parse-email-addrs parse-header parse-header-date parse-xml path-thru pick poke power prin print probe protect protect-system  
q query quit  
random read read-io read-net read-thru reboot recycle reduce reform rejoin remainder remold remove remove-event-func rename repeat repend replace request request-color request-date request-download request-file request-list request-pass request-text resend return reverse rsa-encrypt rsa-generate-key rsa-make-key 
save save-prefs save-user scroll-para second secure select send send-and-check set set-modes set-font set-net set-para set-style set-user set-user-name show show-popup sine size-text skip sort source split-path square-root stylize subtract switch  
tail tangent textinfo third throw throw-on-error to to-binary to-bitset to-block to-char to-date to-decimal to-email to-event to-file to-get-word to-hash to-hex to-idate to-image to-integer to-issue to-list to-lit-path to-lit-word to-local-file to-logic to-money to-none to-pair to-paren to-path to-rebol-file to-refinement to-set-path to-set-word to-string to-tag to-time to-tuple to-url to-word trace trim try  
unfocus union unique uninstall unprotect unset until unview update upgrade uppercase usage use  
vbug view view-install view-prefs  
wait what what-dir while write write-io  
xor xor~  
action! any-block! any-function! any-string! any-type! any-word!  
binary! bitset! block!  
char!  
datatype! date! decimal! 
email! error! event!  
file! function!  
get-word!  
hash!  
image! integer! issue!  
library! list! lit-path! lit-word! logic!  
money!  
native! none! number!  
object! op!  
pair! paren! path! port!  
refinement! routine!  
series! set-path! set-word! string! struct! symbol!  
tag! time! tuple!  
unset! url!  
word!  
any-block? any-function? any-string? any-type? any-word?  
binary? bitset? block?  
char? connected? crypt-strength? 
datatype? date? decimal? dir?  
email? empty? equal? error? even? event? exists? exists-key?
file? flag-face? found? function?  
get-word? greater-or-equal? greater?  
hash? head?  
image? in-window? index? info? input? inside? integer? issue?  
length? lesser-or-equal? lesser? library? link-app? link? list? lit-path? lit-word? logic?  
modified? money?  
native? negative? none? not-equal? number?  
object? odd? offset? op? outside?  
pair? paren? path? port? positive?  
refinement? routine?  
same? screen-offset? script? series? set-path? set-word? size? span? strict-equal? strict-not-equal? string? struct?  
tag? tail? time? tuple? type?  
unset? url?  
value? view? 
within? word?  
zero?</t>
<t tx="ekr.20040303063549.60"># both color_markup &amp; add_directives plugins must be enabled.

@markup wiki
@language python

""" {picture file=../Icons/Leoapp.GIF}this """ # Problems with correct indexing following a graphic.

""" {picture file=../Icons/Leoapp.GIF}this """ # two copies work.

abc

""" {picture file=../Icons/Leodoc.GIF} """ # xyz

""" continued
string"""

@ ''ab'' __xxx__ ''wx'' __xyz__
@c

# /* ''ab'' __xxx__ ''wx'' __xyz__ */

# Test

""" ''' """ ''' """'''  # Leo handles the common cases correctly.

''' ''ab'' __xxx__ ''wx'' __xyz__ ''' # No wiki markup in ''' strings.

""" ''ab'' __xxx__ ''wx'' __xyz__ """

# ''ab'' __xxx__ ''wx'' __xyz__

""" ''y'' """

""" text~~#ff00ff:some text~~more text""

and if

import leoGlobals as g ; print g.app().loadDir</t>
<t tx="ekr.20040303063549.61"># both color_markup &amp; add_directives plugins must be enabled.
@markup wiki

""" continued
string"""

@ ''ab'' __xxx__ ''wx'' __xyz__  __''bolditalic''__ and ''__italicbold__''
@c

# /* ''ab'' __xxx__ ''wx'' __xyz__ */

__abc__ 

# Test

""" ''' """ ''' """'''  # Leo handles the __b__ common cases correctly.

''' ''ab'' __xxx__ ''wx'' __xyz__ ''' # No wiki markup in ''' strings.

""" ''ab'' __xxx__ ''wx'' __xyz__ """

# ''ab'' __xxx__ ''wx'' __xyz__

""" ''y'' """

""" text~~#ee00ff:some text~~more text"""



and if

import leoGlobals as g ; print g.app().loadDir
</t>
<t tx="ekr.20040303063549.62"># both color_markup &amp; add_directives plugins must be enabled.

@markup wiki

""" text~~red:some text~~more text"""

""" text~~#ee0ff:some text~~more text"""</t>
<t tx="ekr.20040303063549.63">@ The names of child nodes are the names of commander methods to be called to do the test.

Each child node will in turn have two or more children:
    
- a "before" node
- an "after" node
- an optional selection node containing two lines giving the selection range in Tk coordinates.
- An optional insert node containing one line giving the insert point in Tk coordinates.
@c

import unittest
import leoTest
reload(leoTest) # Allows us to rerun this script when leoTest.py changes.

# Make sure this is the selected node.
u = leoTest.testUtils()
p = u.findUnitTestNode("editBodyTests")
p.c.selectVnode(p)

suite = leoTest.makeEditBodySuite("editBodyTests","tempNode")
unittest.TextTestRunner().run(suite)</t>
<t tx="ekr.20040303063549.64"></t>
<t tx="ekr.20040303063549.65">line 1
    line 2
    line 3
line 4</t>
<t tx="ekr.20040303063549.66">line 1
line 2
line 3
line 4</t>
<t tx="ekr.20040303063549.67">2.0
3.0 lineend - 1c</t>
<t tx="ekr.20040303063549.68"></t>
<t tx="ekr.20040303063549.69">line 1
line 2
line 3
line 4</t>
<t tx="ekr.20040303063549.70">line 1
    line 2
    line 3
line 4</t>
<t tx="ekr.20040303063549.71">2.0
3.0 lineend - 1c</t>
<t tx="ekr.20040303063549.72"></t>
<t tx="ekr.20040303063549.73">before
&lt;&lt; section &gt;&gt;
sec line 1
    sec line 2 indented
sec line 3
after</t>
<t tx="ekr.20040303063549.74">before
&lt;&lt; section &gt;&gt;
after</t>
<t tx="ekr.20040303063549.75">sec line 1
    sec line 2 indented
sec line 3</t>
<t tx="ekr.20040303063549.76">2.0
5.0 lineend -1c</t>
<t tx="ekr.20040303063549.77">import unittest
import leoTest
reload(leoTest) # Allows us to rerun this script when leoTest.py changes.

# Make sure this is the selected node.
u = leoTest.testUtils()
p = u.findUnitTestNode("exportTests")
p.c.selectVnode(p)

suite = leoTest.makeImportExportSuite("exportTests","tempNode")
unittest.TextTestRunner().run(suite)</t>
<t tx="ekr.20040303063549.78"></t>
<t tx="ekr.20040303063549.79">saveFileDialog
c:\\prog\\test\\unittest\\output\\exportHeadlines.txt</t>
<t tx="ekr.20040303063549.80"></t>
<t tx="ekr.20040303063549.81">saveFileDialog
c:\\prog\\test\\unittest\\output\\flattenOutline.txt</t>
<t tx="ekr.20040303063549.82"></t>
<t tx="ekr.20040303063549.83">saveFileDialog
c:\\prog\\test\\unittest\\output\\weave.txt</t>
<t tx="ekr.20040303063549.84"></t>
<t tx="ekr.20040303063549.85">saveFileDialog
c:\\prog\\test\\unittest\\output\\outlineToNoweb.txt</t>
<t tx="ekr.20040303063549.86"></t>
<t tx="ekr.20040303063549.87">saveFileDialog
c:\\prog\\test\\unittest\\output\\outlineToCweb.txt</t>
<t tx="ekr.20040303063549.88"></t>
<t tx="ekr.20040303063549.89">openFileDialog
c:\\prog\\test\\unittest\\input\\leoAtFile.py</t>
<t tx="ekr.20040303063549.90"># To do: at present this creates a copy of this node as the next sib of tempNode!

import unittest
import leoTest
reload(leoTest) # Allows us to rerun this script when leoTest.py changes.

# Make sure this is the selected node.
u = leoTest.testUtils()
p = u.findUnitTestNode("importTests")
p.c.selectVnode(p)

suite = leoTest.makeImportExportSuite("importTests","tempNode")
unittest.TextTestRunner().run(suite)</t>
<t tx="ekr.20040303063549.91"></t>
<t tx="ekr.20040303063549.92">openFileDialog
c:\\prog\\test\\unittest\\input\\leoAtFile.py</t>
<t tx="ekr.20040303063549.93"></t>
<t tx="ekr.20040303063549.94">openFileDialog
c:\\prog\\test\\unittest\\input\\leoAtFile.py</t>
<t tx="ekr.20040303063549.95"></t>
<t tx="ekr.20040303063549.96">openFileDialog
c:\\prog\\test\\unittest\\input\\noweave.nw.txt</t>
<t tx="ekr.20040303063549.97"></t>
<t tx="ekr.20040303063549.98">openFileDialog
c:\\prog\\test\\unittest\\input\\flat.txt</t>
<t tx="ekr.20040303063549.99"></t>
<t tx="ekr.20040303063549.100">openFileDialog
c:\\prog\\test\\unittest\\input\\cweave.w</t>
<t tx="ekr.20040303063549.101">import unittest
import leoTest
reload(leoTest) # Allows us to rerun this script when leoTest.py changes.

# Make sure this is the selected node.
u = leoTest.testUtils()
p = u.findUnitTestNode("outlineTests")
p.c.selectVnode(p)

suite = leoTest.makeOutlineSuite("outlineTests")
unittest.TextTestRunner().run(suite)</t>
<t tx="ekr.20040303063549.102"></t>
<t tx="ekr.20040303063549.103"></t>
<t tx="ekr.20040303063549.104"></t>
<t tx="ekr.20040303063549.105"></t>
<t tx="ekr.20040303063549.106"></t>
<t tx="ekr.20040303063549.107"></t>
<t tx="ekr.20040303063549.108"></t>
<t tx="ekr.20040303063549.109"></t>
<t tx="ekr.20040303063549.110"></t>
<t tx="ekr.20040303063549.111"></t>
<t tx="ekr.20040303063549.112"></t>
<t tx="ekr.20040303063549.113"></t>
<t tx="ekr.20040303063549.114"></t>
<t tx="ekr.20040303063549.115"></t>
<t tx="ekr.20040303063549.116"></t>
<t tx="ekr.20040303063549.117"></t>
<t tx="ekr.20040303063549.118">import unittest
import leoTest
reload(leoTest) # Allows us to rerun this script when leoTest.py changes.

# Make sure this is the selected node.
u = leoTest.testUtils()
p = u.findUnitTestNode("pluginsTests")
p.c.selectVnode(p)

# NOTE: this enables all widgets: there may be problems with doing this that are not real errors.

suite = leoTest.makePluginsSuite(verbose=0)
unittest.TextTestRunner().run(suite)</t>
<t tx="ekr.20040303063549.119">import unittest
import leoTest
reload(leoTest) # Allows us to rerun this script when leoTest.py changes.

# Make sure this is the selected node.
u = leoTest.testUtils()
p = u.findUnitTestNode("positionTests")
p.c.selectVnode(p)

suite = leoTest.makePositionSuite(all=1)
unittest.TextTestRunner().run(suite)</t>
<t tx="ekr.20040303063549.120">import unittest
import leoTest
reload(leoTest)

suite = unittest.makeSuite(leoTest.leoFileTests)
unittest.TextTestRunner().run(suite)</t>
<t tx="ekr.20040303063549.125">import leoGlobals as g
import unittest
import leoTest
reload(leoTest) # Allows us to rerun this script when leoTest.py changes.

# Make sure this is the selected node.
c = g.top() ; u = leoTest.testUtils()
p = u.findUnitTestNode("Run all tests")
p.c.selectVnode(p)
changed = c.isChanged()

mainSuite = unittest.makeSuite(unittest.TestCase)

for f,arg in (
    (leoTest.makeBatchModeSuite,None),
    (leoTest.makeColorSuite,"colorizerTests"),
    (leoTest.makeEditBodySuite,"editBodyTests"),
    (leoTest.makeImportExportSuite,"exportTests"),
    (leoTest.makeImportExportSuite,"importTests"),
    (leoTest.makeOutlineSuite,"outlineTests"),
    (leoTest.makeAtFileSuite,None),
    (leoTest.makePositionSuite,None),
    (leoTest.makeReformatParagraphSuite,None)
    # 
    # These tests presently have problem with the gui when run with other tests...
    # (leoTest.makePluginsSuite,False) # verbose
):
    suite = f(arg,"tempNode")
    mainSuite.addTest(suite)
    
suite = unittest.makeSuite(leoTest.leoFileTests)
mainSuite.addTest(suite)

unittest.TextTestRunner().run(mainSuite)
c.setChanged(changed) # Restore changed state.
</t>
<t tx="ekr.20040303071432">@language python
@tabwidth -4</t>
<t tx="ekr.20040303080010">import leoGlobals as g
import unittest
import leoTest
reload(leoTest) # Allows us to rerun this script when leoTest.py changes.

# Make sure this is the selected node.
c = g.top() ; u = leoTest.testUtils()
p = u.findUnitTestNode("Run all non-file tests")
p.c.selectVnode(p)
changed = c.isChanged()

mainSuite = unittest.makeSuite(unittest.TestCase)

for f,arg in (
    (leoTest.makeAtFileSuite,None),
    (leoTest.makeBatchModeSuite,"dummy"),
    (leoTest.makeColorSuite,"colorizerTests"),
    (leoTest.makeEditBodySuite,"editBodyTests"),
    (leoTest.makePositionSuite,None),
    (leoTest.makeReformatParagraphSuite,None),
    (leoTest.makeOutlineSuite,"outlineTests")
    # These tests presently have problem with the gui when run with other tests...
    # (leoTest.makePluginsSuite,False)
):
    suite = f(arg,"tempNode")
    mainSuite.addTest(suite)

unittest.TextTestRunner().run(mainSuite)
c.setChanged(changed) # Restore changed state.</t>
<t tx="ekr.20040303080938"></t>
<t tx="ekr.20040303080938.1"></t>
<t tx="ekr.20040309095121"></t>
<t tx="ekr.20040309111054">import leoGlobals as g
import leoNodes

c = g.top()
position = leoNodes.position

@others

current = pos = c.currentPosition()
child1 = current.firstChild()
child2 = child1.firstChild()

if 0:
    print '-'*10, "parents"
    for p in child2.parents_iter(): print p
if 0:
    print '-'*10, "subtree"
    for p in pos.subtree_iter(): print p
if 0:
    print '-'*10, "children"
    for p in child1.children_iter(): print p
if 0:
    print '-'*10, "siblings"
    for p in pos.siblings_iter(): print p
if 1:
    print '-'*10, "all nodes"
    for p in pos.allNodes_iter():
        print p.isCloned(),p
</t>
<t tx="ekr.20040309111102"></t>
<t tx="ekr.20040309111102.1"></t>
<t tx="ekr.20040309111102.2"></t>
<t tx="ekr.20040309111102.3"></t>
<t tx="ekr.20040309111102.4"></t>
<t tx="ekr.20040309111102.5"></t>
<t tx="ekr.20040309111102.6"></t>
<t tx="ekr.20040309111102.7"></t>
<t tx="ekr.20040309111102.8"></t>
<t tx="ekr.20040309111102.9"></t>
<t tx="ekr.20040309111102.10"></t>
<t tx="ekr.20040309111232"></t>
<t tx="ekr.20040310145919">import leoGlobals as g
c = g.top()
c.frame.body.colorizer.python_keywords.append("as")</t>
<t tx="ekr.20040311090054">import leoGlobals as g
import leoNodes

c = g.top() ; root = c.rootPosition()

for p in root.allNodes_iter():
    print p.v.t.fileIndex</t>
<t tx="ekr.20040311125054">import leoGlobals as g
c = g.top()
root = c.rootPosition()

# NOTE: p.__getattr__ must be enabled for this test to work.

for p in root.allNodes_iter():
    assert(p.t == p.v.t)
    
print "done"</t>
<t tx="ekr.20040312021734"></t>
<t tx="ekr.20040312021734.1">import leoGlobals as g

c = g.top()

count = 0
for p in c.rootPosition().allNodes_iter():
    count += 1
    # Empty tnodeLists are not errors because they never get written to the .leo file.
    v = p.v
    if hasattr(v,"tnodeList") and len(v.tnodeList) &gt; 0 and not v.isAnyAtFileNode():
        g.es("deleting tnodeList for " + `v`,color="blue")
        delattr(v,"tnodeList")
        c.setChanged(True)

s = "%d nodes" % count
print s ; g.es(s)</t>
<t tx="ekr.20040312101720"></t>
<t tx="ekr.20040312101720.1"></t>
<t tx="ekr.20040315025315">@
- convertTreeToString and moreHead can't be vnode methods because they uses level().
- moreBody could be anywhere: it may as well be a postion method.
</t>
<t tx="ekr.20040315025315.1">def convertTreeToString (self):
    
    """Convert a positions  suboutline to a string in MORE format."""

    p = self ; level1 = p.level()
    
    array = []
    for p in p.subtree_iter()
        array.append(p.moreHead(level1)+'\n')
        body = p.moreBody()
        if body:
            array.append(body +'\n')

    return ''.join(array)</t>
<t tx="ekr.20040315025315.2">def moreHead (self, firstLevel,useVerticalBar=False):
    
    """Return the headline string in MORE format."""

    p = self

    level = self.level() - firstLevel
    plusMinus = g.choose(p.hasChildren(), "+", "-")
    
    return "%s%s %s" % ('\t'*level,plusMinus,p.headString())</t>
<t tx="ekr.20040315025315.3">@ 
    + test line
    - test line
    \ test line
    test line +
    test line -
    test line \
    More lines...
@c

def moreBody (self):

    """Returns the body string in MORE format.  
    
    Inserts a backslash before any leading plus, minus or backslash."""

    p = self ; list = []
    
    # Only escape the first non-blank character of the line.
    s =  p.bodyString() ; result = []
    lines = string.split(s,'\n')
    for s in lines:
        i = g.skip_ws(s,0)
        if i &lt; len(s):
            ch = s[i]
            if ch == '+' or ch == '-' or ch == '\\':
                s = s[:i] + '\\' + s[i:]
        result.append(s)
    return string.join(result,'\n')
</t>
<t tx="ekr.20040315030123">import leoGlobals as g

c = g.top() ; p = c.currentPosition()

p = p.firstChild()
assert(p.headString()=="File Conversion")
print p.convertTreeToString()</t>
<t tx="ekr.20040315202718.2">import unittest
import leoTest
reload(leoTest) # Allows us to rerun this script when leoTest.py changes.

# Make sure this is the selected node.
u = leoTest.testUtils()
p = u.findUnitTestNode("findCommandTests")
p.c.selectVnode(p)

suite = leoTest.makeFindCommandSuite()
unittest.TextTestRunner().run(suite)</t>
<t tx="ekr.20040315210314"></t>
<t tx="ekr.20040315210314.1"></t>
<t tx="ekr.20040315210314.2">@nocolor

- Used iterators in test utils.
- Used "import leoGlobals as g" style.</t>
<t tx="ekr.20040317101155" lineYOffset="4b032e" icons="5d7100287d7101285504747970657102550466696c65710355047870616471044b02550577686572657105550a6265666f726549636f6e71066803582d000000633a5c70726f675c6c656f4356535c6c656f5c49636f6e735c6c745f6172726f775f656e61626c65642e67696671075507796f666673657471084afdffffff757d7109286802680368084afdffffff6803582d000000633a5c70726f675c6c656f4356535c6c656f5c49636f6e735c72745f6172726f775f656e61626c65642e676966710a68044afeffffff6805550e6265666f7265486561646c696e65710b5507786f6666736574710c4b0275652e">import leoGlobals as g

c = g.top()

p = c.currentPosition()
p.v.t.unknownAttributes = {}
a = p.v.t.unknownAttributes

&lt;&lt; define event callbacks &gt;&gt;

path = r"c:\prog\leoCVS\leo\Icons"
icon1 = g.os_path_join(path,"lt_arrow_enabled.gif")
icon2 = g.os_path_join(path,"rt_arrow_enabled.gif")

d1 = {
    "type" : "file", "file" : icon1,
    "where" : "beforeIcon",
    "yoffset" : -3,
    # "yoffset" : 5, "ypad" : -5,
    # "height" : 40, # automatically adjust headline y position.
    "xpad": 2
}

# Classes and functions can only be pickled if they are at the top level of a module.
    #"onClick" : onClick,
    #"onRightClick" : onRightClick,
    #"onDoubleClick" : onDoubleClick }

d2 = {
    "type" : "file", "file" : icon2,
    "where" : "beforeHeadline",
    "yoffset" : -3,
    "xoffset" : 2, "xpad" : -2 }

a["icons"] = [d1,d2] # [d1,d2]
a["lineYOffset"] = 3

c.redraw()
</t>
<t tx="ekr.20040317173327">import leoGlobals as g

c = g.top()

for p in c.allNodes_iter():
    
    if hasattr(p.v.t,"unknownAttributes"):
        a = p.v.t.unknownAttributes
        iconsList = a.get("icons")
        if dict:
            a["icons"] = []
            a["lineYOffset"] = 0
            
c.redraw()</t>
<t tx="ekr.20040317185041">def onClick(p=p):
    
    g.trace(p)

def onRightClick(p=p):
    
    g.trace(p)

def onDoubleClick(p=p):
    
    g.trace(p)</t>
<t tx="ekr.20040318091620">import leoGlobals as g

c = g.top()

for p in c.allNodes_iter():
    if hasattr(p.v.t,"unknownAttributes"):
        print "deleting unknownAttributes:",p
        delattr(p.v.t,"unknownAttributes")
            
c.redraw()</t>
<t tx="ekr.20040318102920"># The actual test is in a child node.</t>
<t tx="ekr.20040318102920.1"></t>
<t tx="ekr.20040318102920.2">import leoGlobals as g
c = g.top()

print '-'*20

count = 0 ; ok = True
for p in c.allNodes_iter():
# for p in [c.currentPosition()]:
    count += 1
    if 0: # Check all ancestors.  This is tricky and doesn't work yet.
        parents1 = [parent.v for parent in p.parents_iter()]
        parents2 = []
        parent2 = p.v.directParents()
        while parent2:
            v = parent2[0]
            parents2.append(v)
            parent2 = v.directParents()
    else:
        if p.v._parent: parents1 = p.v._parent.t.vnodeList
        else:           parents1 = []
        parents2 = p.v.directParents()
    
    if len(parents1) != len(parents2):
        print "length mismatch",p,p.v._parent
        ok = False
    for parent in parents1:
        if parent not in parents2:
            print "not in parent2",p,parent
            ok = False
    for parent in parents2:
        if parent not in parents1:
            print "not in parents1",p,parent
            ok = False
    if not ok:
        print "parents1"
        for parent in parents1: print parent
        print "parents2"
        for parent in parents2: print parent
        break
    
print "%d vnodes checked" % count</t>
<t tx="ekr.20040319111213">from leoPlugins import *
from leoGlobals import *
from leoNodes import *
import Tkinter
import re
import sys

@others

fhp = None
fhp_entry = None
    
if 1:
    addMenu("none",None)
else:
    hooks = choose(sys.platform == 'win32',
        ('open2',"new"),
        ('start2','open2',"new"))
        
    print "hi"
        
    registerHandler(hooks,addMenu)

    __version__ = ".1"
    plugin_signon(__name__)
</t>
<t tx="ekr.20040319111213.1">@nocolor

@ This is what it does:

1. Under Outline it puts an Option called 'FilterHoist'
2. Selecting the option pops up an ugly little window.  On it is a section where
you can type in text.  You can close the window with the close button.  You
can activate the functionality with the Filter Button.
3. Filtering will walk the Leo tree, looking for a text match from the Text
field with the Nodes bodyString.
4. After finding some nodes it creates a new node at the root.  Then it clones
the matching nodes under that new node.  A Hoist operation is performed on the
new node.  This gives a view of all matching nodes.

I put this together because I wanted a find that was based in terms of Leo's
nodes.  Find as it is bounces you around the Tree(it bothers me).  This brings
the nodes to you and presents them.  As it is I may work further on this if
people like the idea.  It's possible I might migrate it to the NodeRoundup plugin
to.

You need 2.3 python; it uses generators in it's find method.

That was one motivation for writing this thing, using a generator vs. Recursive
approach to tree walking.</t>
<t tx="ekr.20040319111213.2">def OLDfilter(c,e):

    v = c.rootVnode()
    
    nodes = []
    while v:
        nodes.append(v)
        v = v.next()
    
    regex = re.compile(e.get())
    c.beginUpdate()
    if 1: # update...
        t = tnode('','A Filtered Hoist')
        ticker = c.rootVnode().insertAfter(t)
        for z in nodes:
            for x in search(z,regex):
                clone = x.clone( x )
                clone.moveToNthChildOf(ticker,0)
        c.setCurrentVnode(ticker)
        ticker.moveToRoot(c.rootVnode())
    c.endUpdate()
    c.hoist()
    fhp.withdraw()
</t>
<t tx="ekr.20040319111213.3">def OLDsearch(vn,regex):

    sn = vn 
    while vn != None:
        if regex.search( vn.t.bodyString ) : yield vn
        nc = vn.numberOfChildren()
        if nc == 0:
            i = vn.childIndex()
            p = vn.parent()
            if p == None: 
                vn = None
                continue
            if i == 0:
                while 1:
                    if p == sn :
                        vn = None
                        break
                    vn = p.back() 
                    if vn == None:
                        p = p.parent()
                        continue
                    break
                continue                                                        
            vn = p.nthChild( i - 1)
            continue
        vn = vn.nthChild( nc - 1 )
</t>
<t tx="ekr.20040319111213.4">def filterHoist(c):

    global fhp
    global e
    
    if fhp is None:

        fhp = Tkinter.Toplevel()
        fhp.title('FilterHoist')

        fhp_entry = e = Tkinter.Entry(fhp)
        e.pack(side="top",fill="both")

        def closeCallback(fhp=fhp):
            fhp.withdraw()
            
        def filterCallback(c=c,entry=e):
            filter(c,entry)

        b1 = Tkinter.Button(fhp,text='Close',command=closeCallback)
        b2 = Tkinter.Button(fhp,text='Filter',command=filterCallback)
        b1.pack(side="left")
        b2.pack(side="right")

    fhp.geometry('200x200+250+250') 
    fhp.deiconify()
    fhp_entry.focus_set()
</t>
<t tx="ekr.20040319111213.5">def addMenu(tag,keywords):
    
    c = top()
    
    trace()
    
    def callback(c=c):
        filterHoist(c)
    
    table = ("FilterHoist",None,callback),

    c.frame.menu.createMenuItemsFromTable("Outline",table)</t>
<t tx="ekr.20040319142202"></t>
<t tx="ekr.20040319142708">def filter(c,e):
    
    pat = re.compile(e.get())

    c.beginUpdate()
    if 1: # update...
        t = tnode('','A Filtered Hoist')
        newRoot = c.rootVnode().insertAfter(t)
        p = c.rootVnode()
        while p:
            if pat.search(p.bodyString()):
                clone = p.clone(p)
                clone.moveToLastChildOf(newRoot)
            p = p.threadNext()
        newRoot.moveToRoot(c.rootVnode())
        c.setCurrentVnode(newRoot)
    c.endUpdate()

    c.hoist()
    fhp.withdraw()
</t>
<t tx="ekr.20040322120331">import leoGlobals as g
c = g.top()

print '-'*20
for p in c.allNodes_iter():
    if hasattr(p.v.t,"tnodeList"):
        print p,p.v.t.tnodeList</t>
<t tx="ekr.20040323075614">import leoGlobals as g

class test_iter_class:
    def __init__ (self):
        self.vals = ("a","b","c")
        self.n = 0
    def __iter__(self):
        return self
    def next(self):
        if self.n &lt; len(self.vals):
            val = self.vals[self.n]
            self.n += 1
            return val
        else:
            raise StopIteration
            
def test_iter(): return test_iter_class()
        
vals = [val for val in test_iter()]

print vals
</t>
<t tx="ekr.20040323080317">import leoGlobals as g
c = g.top()

print '-'*20

# These are equivalent.
positions1 = [p for p in c.allNodes_iter(copy=True)]
positions2 = [p.copy() for p in c.allNodes_iter()]

assert(len(positions1) == len(positions2))
for i in xrange(len(positions1)):
    assert(positions1[i] == positions2[i])

if 0:
    for p in positions1:
        print p
print "done"</t>
<t tx="ekr.20040323082119">import leoGlobals as g
c = g.top()

print '-'*20

positions = [p.copy() for p in c.allNodes_iter()]

tnodes = {} ; vnodes = []
for p in c.allNodes_iter():
    t = p.v.t
    if tnodes.get(t) is None:
        tnodes[t]=t
        vnodes.append(p.v)
        
print len(positions),len(vnodes)

for v in vnodes:
    print v</t>
<t tx="ekr.20040323085406">import leoGlobals as g

c = g.top()

print '-'*20

for p in c.allNodes_iter():
    if p.isAnyAtFileNode():
        print p
        
print "done"</t>
<t tx="ekr.20040323085933">import leoGlobals as g

c = g.top()

print '-'*20

for p in c.allNodes_iter():
    if p.isDirty():
        vnodes = p.findAllPotentiallyDirtyNodes()
        print '-'*5, p
        for v in vnodes:
            print v

print "done"</t>
<t tx="ekr.20040323090541">import leoGlobals as g

c = g.top()

print '-'*20
ok = True ; count = 0
for p in c.allNodes_iter():
    if p.isCloned():
        count += 1
        parents = p.v.t.vnodeList
        for child in p.children_iter():
            vparents = child.v.directParents()
            if len(parents) != len(vparents):
                    print "length mismatch",p,child,
                    ok = False
            for parent in parents:
                if parent not in vparents:
                    print "not in vparents",p,child
                    ok = False
            for parent in vparents:
                if parent not in parents:
                    print "not in parents",p,child
                    ok = False
            if not ok:
                print "parents"
                for parent in parents: print parent
                print "vparents"
                for parent in vparents: print parent
                break
        if not ok: break
    if not ok: break
s = "checked %d cloned positions" % count
print s ; g.es(s)
</t>
<t tx="ekr.20040323162303">import leoGlobals as g

c = g.top()

for p in c.allNodes_iter():
    if p.isCloned() and p.hasChildren():
        childv = p.firstChild().v
        assert(childv == p.v.t._firstChild)
        assert(id(childv) == id(p.v.t._firstChild))
        for v in p.v.t.vnodeList:
            assert(v.t._firstChild == childv)
            assert(id(v.t._firstChild) == id(childv))
            
print "done"</t>
<t tx="ekr.20040325073120">@ignore</t>
<t tx="ekr.20040325082811">import leoGlobals as g

g.es("v",g.top().currentPosition())
g.es(1,2)</t>
<t tx="ekr.20040325130503">stack1 = ["a","b","c"]
stack2 = ["a","b","c"]
stack3 = ["a","b","d"]
stack4 = ["a","b"]
print stack1 == stack2
print stack1 == stack3
print stack1 == stack4</t>
<t tx="ekr.20040325140133">import leoGlobals as g
c = g.top() ; p = c.currentPosition()

print p.v.headString()
print p.childIndex()
print p.v.headString()</t>
<t tx="ekr.20040325155043">import timeit

s1 = '''\
class test(object):
    def __cmp__(self,p2):   return 0
    def equal(self,p2):     return 0
p1 = test() ; p2 = test()'''

s2 = '''\
class test:
    def __cmp__(self,p2):   return 0
    def equal(self,p2):     return 0
p1 = test() ; p2 = test()'''

s3 = '''\
import leoNodes
p1 = leoNodes.position(None,[])
p2 = leoNodes.position(None,[])'''

for s in (s1,s2,s3):
    t1 = timeit.Timer(stmt='p1==p2',setup=s).timeit()
    t2 = timeit.Timer(stmt='p1.equal(p2)',setup=s).timeit()
    print "%2.2f,%2.2f,%0.2f" % (t1,t2,t1/t2)
</t>
<t tx="ekr.20040327105955">import os

path = r"c:\prog\test\unittest\createdFile.txt"

s = r"c:\python23\python c:\prog\LeoCVS\leo\src\leo.py -script c:\prog\test\unittest\batchTest.py"

print '-'*10
if os.path.exists(path):
    print "deleting",path
    os.remove(path)

os.system(s)

assert(os.path.exists(path))
print "done"</t>
<t tx="ekr.20040327114250">@ignore

# A file to be executed in batch mode as part of unit testing.

@language python
@tabwidth -4

path = r"c:\prog\test\unittest\createdFile.txt"
f = None
try:
    f = open(path,"w")
    f.write("This is a test")
finally:
    if f: f.close()</t>
<t tx="ekr.20040327115825.1">@color

import unittest
import leoTest
reload(leoTest) # Allows us to rerun this script when leoTest.py changes.

# Make sure this is the selected node.
u = leoTest.testUtils()
p = u.findUnitTestNode("batchModeTests")
p.c.selectVnode(p)

suite = leoTest.makeBatchModeSuite()
unittest.TextTestRunner().run(suite)</t>
<t tx="ekr.20040330095252">import leoGlobals as g
c = g.top()
t = c.frame.log.logCtrl
print t
t.delete("1.0","end")</t>
<t tx="ekr.20040330103006">@ignore
@language c

oblk[1] = b64[((iblk[0] &amp; 0x03) &lt;&lt; 4) |
((iblk[1] &amp; 0xF0) &gt;&gt; 4)];
oblk[2] = b64[((iblk[1] &amp; 0x0F) &lt;&lt; 2) |
((iblk[2] &amp; 0xC0) &gt;&gt; 6)];
</t>
<t tx="ekr.20040401104620">@language css
/* New in 4.2. */

/*html tags*/
address, applet, area, a, base, basefont,
big, blockquote, body, br, b, caption, center,
cite, code, dd, dfn, dir, div, dl, dt, em, font,
form, h1, h2, h3, h4, h5, h6, head, hr, html, img,
input, isindex, i, kbd, link, li, link, map, menu,
meta, ol, option, param, pre, p, samp,
select, small, span, strike, strong, style, sub, sup,
table, td, textarea, th, title, tr, tt, ul, u, var,
/*units*/
mm, cm, in, pt, pc, em, ex, px,
/*colors*/
aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver, teal, yellow, white,
/*important directive*/
!important,
/*font rules*/
font, font-family, font-style, font-variant, font-weight, font-size,
/*font values*/
cursive, fantasy, monospace, normal, italic, oblique, small-caps,
bold, bolder, lighter, medium, larger, smaller,
serif, sans-serif,
/*background rules*/
background, background-color, background-image, background-repeat, background-attachment, background-position,
/*background values*/
contained, none, top, center, bottom, left, right, scroll, fixed,
repeat, repeat-x, repeat-y, no-repeat,
/*text rules*/
word-spacing, letter-spacing, text-decoration, vertical-align, text-transform, text-align, text-indent, text-transform, text-shadow, unicode-bidi, line-height,
/*text values*/
normal, none, underline, overline, blink, sub, super, middle, top, text-top, text-bottom,
capitalize, uppercase, lowercase, none, left, right, center, justify,
line-through,
/*box rules*/
margin, margin-top, margin-bottom, margin-left, margin-right,
margin, padding-top, padding-bottom, padding-left, padding-right,
border, border-width, border-style, border-top, border-top-width, border-top-style, border-bottom, border-bottom-width, border-bottom-style, border-left, border-left-width, border-left-style, border-right, border-right-width, border-right-style, border-color,
/*box values*/
width, height, float, clear,
auto, thin, medium, thick, left, right, none, both,
none, dotted, dashed, solid, double, groove, ridge, inset, outset,
/*display rules*/
display, white-space, 
min-width, max-width, min-height, max-height,
outline-color, outline-style, outline-width,
/*display values*/
run-in, inline-block, list-item, block, inline, none, normal, pre, nowrap, table-cell, table-row, table-row-group, table-header-group, inline-table, table-column, table-column-group, table-cell, table-caption
/*list rules*/
list-style, list-style-type, list-style-image, list-style-position,
/*list values*/
disc, circle, square, decimal, decimal-leading-zero, none,
lower-roman, upper-roman, lower-alpha, upper-alpha, lower-latin, upper-latin,
/*table rules*/
border-collapse, caption-side,
/*table-values*/
empty-cells, table-layout,
/*misc values/rules*/
counter-increment, counter-reset,
marker-offset, z-index,
cursor, direction, marks, quotes,
clip, content, orphans, overflow, visibility,
/*aural rules*/
pitch, range, pitch-during, cue-after, pause-after, cue-before, pause-before, speak-header, speak-numeral, speak-punctuation, speed-rate, play-during, voice-family,
/*aural values*/
stress, azimuth, elevation, pitch, richness, volume,
page-break, page-after, page-inside</t>
<t tx="ekr.20040401111417"># New in 4.2.

@language shell

# comment
$# not a comment
break
case,continue,
do,done
elif,else,esac
fi,for
if,in
return,
then
until
while,

cd,chdir,eval,exec,
exit,kill,newgrp,pwd,read,readonly,
shift,test,trap,ulimit,
umask,wait</t>
<t tx="ekr.20040401113911">' New in 4.2.
@language rapidq
' a comment.

$APPTYPE,$DEFINE,$ELSE,$ENDIF,$ESCAPECHARS,$IFDEF,$IFNDEF,
$INCLUDE,$MACRO,$OPTIMIZE,$OPTION,$RESOURCE,$TYPECHECK,$UNDEF,
ABS,ACOS,ALIAS,AND,AS,ASC,ASIN,ATAN,ATN,BIN$,BIND,BYTE,
CALL,CALLBACK,CALLFUNC,CASE,CEIL,CHDIR,CHDRIVE,CHR$,CINT,
CLNG,CLS,CODEPTR,COMMAND$,COMMANDCOUNT,CONSOLE,CONST,CONSTRUCTOR,
CONVBASE$,COS,CREATE,CSRLIN,CURDIR$,DATA,DATE$,DEC,DECLARE,
DEFBYTE,DEFDBL,DEFDWORD,DEFINT,DEFLNG,DEFSHORT,DEFSNG,DEFSTR,
DEFWORD,DELETE$,DIM,DIR$,DIREXISTS,DO,DOEVENTS,DOUBLE,DWORD,
ELSE,ELSEIF,END,ENVIRON,ENVIRON$,EVENT,EXIT,EXP,EXTENDS,
EXTRACTRESOURCE,FIELD$,FILEEXISTS,FIX,FLOOR,FOR,FORMAT$,FRAC,
FUNCTION,FUNCTIONI,GET$,GOSUB,GOTO,HEX$,IF,INC,INITARRAY,
INKEY$,INP,INPUT,INPUT$,INPUTHANDLE,INSERT$,INSTR,INT,INTEGER,
INV,IS,ISCONSOLE,KILL,KILLMESSAGE,LBOUND,LCASE$,LEFT$,LEN,
LFLUSH,LIB,LIBRARYINST,LOCATE,LOG,LONG,LOOP,LPRINT,LTRIM$,
MEMCMP,MESSAGEBOX,MESSAGEDLG,MID$,MKDIR,MOD,MOUSEX,MOUSEY,
NEXT,NOT,OFF,ON,OR,OUT,OUTPUTHANDLE,PARAMSTR$,PARAMSTRCOUNT,
PARAMVAL,PARAMVALCOUNT,PCOPY,PEEK,PLAYWAV,POKE,POS,POSTMESSAGE,
PRINT,PROPERTY,QUICKSORT,RANDOMIZE,REDIM,RENAME,REPLACE$,
REPLACESUBSTR$,RESOURCE,RESOURCECOUNT,RESTORE,RESULT,RETURN,
REVERSE$,RGB,RIGHT$,RINSTR,RMDIR,RND,ROUND,RTRIM$,RUN,
SCREEN,SELECT,SENDER,SENDMESSAGE,SETCONSOLETITLE,SGN,SHELL,
SHL,SHORT,SHOWMESSAGE,SHR,SIN,SINGLE,SIZEOF,SLEEP,SOUND,
SPACE$,SQR,STACK,STATIC,STEP,STR$,STRF$,STRING,STRING$,
SUB,SUBI,SWAP,TALLY,TAN,THEN,TIME$,TIMER,TO,TYPE,UBOUND,
UCASE$,UNLOADLIBRARY,UNTIL,VAL,VARIANT,VARPTR,VARPTR$,VARTYPE,
WEND,WHILE,WITH,WORD,XOR</t>
<t tx="ekr.20040402043516">@ a doc
part.
@c

"""A script to reformat non-leading whitespace."""

import leoGlobals as g

import tokenize,token

@others

c = g.top()

print '-'*50

if 1:
    # Just print the present position.
    prettyPrintNode(c.currentPosition())
else:
    # Print all top-level nodes.
    for p in c.rootPosition().self_and_siblings_iter():
        prettyPrintNode(p)
        
print
print '-'*50</t>
<t tx="ekr.20040402064301">class prettyPrinter:
    
    @others</t>
<t tx="ekr.20040402064301.1">def __init__ (self,p):
    
    self.line = 0
    self.lines = []
    self.col = 0
    self.array = []
    self.parenLevel = 0
    self.bracketLevel = 0
    self.p = p</t>
<t tx="ekr.20040402072335">def put (self,s,strip=True):
    
    if self.array and strip:
        prev = self.array[-1]
        if len(self.array) == 1:
            if prev.rstrip():
                # We aren't stripping all leading whitespace.
                self.array[-1] = prev.rstrip()
        else:
            # The previous entry isn't leading whitespace.
            self.array[-1] = prev.rstrip()

    self.array.append(s)</t>
<t tx="ekr.20040402074431">def putNormalToken (self,token5tuple):

    a = self.array
    t1,t2,t3,t4,t5 = token5tuple
    srow,scol = t3 ; erow,ecol = t4 ; line = str(t5)
    name = token.tok_name[t1].lower()
    val = str(t2)
    startLine = self.line != srow
    self.line = srow

    if startLine:
        ws = line[0:scol]
        if ws: a.append(ws)

    if name in ("nl","newline","endmarker"):
        if name in ("nl","newline"):
            a.append('\n')
        # else: a.append("&lt;END NODE&gt;")
        self.lines.append(''.join(self.array))
        self.array = []
    elif name == "op":
        self.putOperator(val)
    elif name == "name":
        a.append("%s " % val)
    elif name in ("comment","string","number"):
        a.append(val)
    elif name == "errortoken":
        if val == '@' and startLine:
            # Preserve whitespace after leading @.
            i = g.skip_ws(line,1)
            a.append(line[0:i])
        else:
            a.append(val)
    elif name == "indent":
        a.append(val)
    elif name == "dedent":
        pass
    else:
        print "unknown: %s" % (name)</t>
<t tx="ekr.20040402074431.1">def dumpToken (self,token5tuple):

    t1,t2,t3,t4,t5 = token5tuple
    srow,scol = t3 ; erow,ecol = t4 ; line = str(t5)
    name = token.tok_name[t1].lower()
    val = str(t2)

    startLine = self.line != srow
    if startLine:
        print "----- line",srow,repr(line)
    self.line = srow

    print "%10s (%2d,%2d) %-8s" % (name,scol,ecol,repr(val))</t>
<t tx="ekr.20040402080311">def putToken (self,token5tuple):
    
    if 1:
        self.putNormalToken(token5tuple)
    else:
        self.dumpToken(token5tuple)</t>
<t tx="ekr.20040402081135">def putOperator (self,val):
    
    if val == '(':
        self.parenLevel += 1
        self.put(val)
    elif val == ')':
        self.parenLevel -= 1
        self.put(val)
    elif val == '=':
        if self.parenLevel &gt; 0: self.put('=')
        else:                   self.put(' = ')
    elif val == ',':
        if self.parenLevel &gt; 0: self.put(',')
        else:                   self.put(', ')
    elif val == ';':
        self.put(" ; ")
    else:
        self.put(val)</t>
<t tx="ekr.20040402084155">def prettyPrintNode(p):

    s = p.bodyString()
    if not s: return
    
    print '-'*10, p.headString()

    pp = prettyPrinter(p)
    
    readlines = g.readLinesGenerator(s).next

    for token5tuple in tokenize.generate_tokens(readlines):
        pp.putToken(token5tuple)
        
    lines = pp.get()
    
    # Note: we could replace p's body text here.

    if 1:
        print ''.join(lines), # Don't add a trailing newline!
    else:
        for i in xrange(len(lines)):
            print "%3d" % i, repr(lines[i])</t>
<t tx="ekr.20040402093822">def get (self):
    
    return self.lines</t>
<t tx="ekr.20040409140301"></t>
<t tx="ekr.20040409140301.1"></t>
<t tx="ekr.20040409140301.2"></t>
<t tx="ekr.20040409140301.3"></t>
<t tx="ekr.20040409140343"></t>
<t tx="ekr.20040409140343.1"></t>
<t tx="ekr.20040409142028"></t>
<t tx="ekr.20040409142028.1"></t>
<t tx="ekr.20040409142108"></t>
<t tx="ekr.20040409142108.1"></t>
<t tx="ekr.20040414082806"></t>
<t tx="ekr.20040419105536">@ignore
@language perl

@others</t>
<t tx="ekr.20040419105536.1">line 1</t>
<t tx="ekr.20040419105536.2">line 2</t>
<t tx="ekr.20040630154517">@ignore

@ These are imported sources.  I may modify pychecker slightly for unit testing.

For example, rather than writing tedious tests to make sure that format strings are correct, the easy way would be to assert that pychecker gives no warnings of the form:
    
"Format string argument count (n1) doesnt match arguments (n2)"

Just how to do this remains unclear.</t>
<t tx="ekr.20040630154517.1">@killcolor

Copyright (c) 2000-2001, MetaSlash Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

 - Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

 - Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the
   distribution.

 - Neither name of MetaSlash Inc. nor the names of contributors
   may be used to endorse or promote products derived
   from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</t>
<t tx="ekr.20040630154517.2"></t>
<t tx="ekr.20040630154517.3">@ignore
@language python
&lt;&lt; checker declarations &gt;&gt;
@others
</t>
<t tx="ekr.20040630154517.4">#!/usr/bin/env python

# Copyright (c) 2001-2004, MetaSlash Inc.  All rights reserved.

"""
Check python source code files for possible errors and print warnings

Contact Info:
  http://pychecker.sourceforge.net/
  pychecker-list@lists.sourceforge.net
"""

import string
import types
import sys
import imp
import os
import glob
import traceback
import re

# see __init__.py for meaning, this must match the version there
LOCAL_MAIN_VERSION = 1


</t>
<t tx="ekr.20040630154517.5">def setupNamespace(path) :
    # remove pychecker if it's the first component, it needs to be last
    if sys.path[0][-9:] == 'pychecker' :
        del sys.path[0]

    # make sure pychecker is last in path, so we can import
    checker_path = os.path.dirname(os.path.dirname(path))
    if checker_path not in sys.path :
        sys.path.append(checker_path)
</t>
<t tx="ekr.20040630154517.6">if __name__ == '__main__' :
    setupNamespace(sys.argv[0])

from pychecker import utils
from pychecker import printer
from pychecker import warn
from pychecker import OP
from pychecker import Config
from pychecker import function
from pychecker.Warning import Warning

# Globals for storing a dictionary of info about modules and classes
_allModules = {}
_cfg = None

# Constants
_DEFAULT_MODULE_TOKENS = ('__builtins__', '__doc__', '__file__', '__name__',
                          '__path__')
_DEFAULT_CLASS_TOKENS = ('__doc__', '__name__', '__module__')

_VERSION_MISMATCH_ERROR = '''
There seem to be two versions of PyChecker being used.
One is probably in python/site-packages, the other in a local directory.
If you want to run the local version, you must remove the version
from site-packages.  Or you can install the current version
by doing python setup.py install.
'''

def cfg() :
    return utils.cfg()
</t>
<t tx="ekr.20040630154517.7">def _flattenList(list) :
    "Returns a list which contains no lists"

    new_list = []
    for element in list :
        if type(element) == types.ListType :
            new_list.extend(_flattenList(element))
        else :
            new_list.append(element)

    return new_list
</t>
<t tx="ekr.20040630154517.8">def getModules(arg_list) :
    "Returns a list of module names that can be imported"

    new_arguments = []
    for arg in arg_list :
        # is this a wildcard filespec? (necessary for windows)
        if '*' in arg or '?' in arg or '[' in arg :
            arg = glob.glob(arg)
        new_arguments.append(arg)

    PY_SUFFIXES = ['.py']
    PY_SUFFIX_LENS = [3]
    if _cfg.quixote:
        PY_SUFFIXES.append('.ptl')
        PY_SUFFIX_LENS.append(4)
        
    modules = []
    for arg in _flattenList(new_arguments) :
        # is it a .py file?
        for suf, suflen in zip(PY_SUFFIXES, PY_SUFFIX_LENS):
            if len(arg) &gt; suflen and arg[-suflen:] == suf:
                arg_dir = os.path.dirname(arg)
                if arg_dir and not os.path.exists(arg) :
                    print 'File or pathname element does not exist: "%s"' % arg
                    continue

                module_name = os.path.basename(arg)[:-suflen]
                if arg_dir not in sys.path :
                    sys.path.insert(0, arg_dir)
                arg = module_name
        modules.append(arg)

    return modules
</t>
<t tx="ekr.20040630154517.9">def _q_file(f):
    # crude hack!!!
    # imp.load_module requires a real file object, so we can't just
    # fiddle def lines and yield them
    import tempfile
    fd, newfname = tempfile.mkstemp(suffix=".py", text=True)
    newf = os.fdopen(fd, 'r+')
    os.unlink(newfname)
    for line in f:
        mat = re.match(r'(\s*def\s+\w+\s*)\[(html|plain)\](.*)', line)
        if mat is None:
            newf.write(line)
        else:
            newf.write(mat.group(1)+mat.group(3)+'\n')
    newf.seek(0)
    return newf
</t>
<t tx="ekr.20040630154517.10">def _q_find_module(p, path):
    if not _cfg.quixote:
        return imp.find_module(p, path)
    else:
        for direc in path:
            try:
                return imp.find_module(p, [direc])
            except ImportError:
                f = os.path.join(direc, p+".ptl")
                if os.path.exists(f):
                    return _q_file(file(f)), f, ('.ptl', 'U', 1)
</t>
<t tx="ekr.20040630154517.11">def _findModule(name) :
    """Returns the result of an imp.find_module(), ie, (file, filename, smt)
       name can be a module or a package name.  It is *not* a filename."""

    path = sys.path[:]
    packages = string.split(name, '.')
    for p in packages :
        # smt = (suffix, mode, type)
        file, filename, smt = _q_find_module(p, path)
        if smt[-1] == imp.PKG_DIRECTORY :
            try :
                # package found - read path info from init file
                m = imp.load_module(p, file, filename, smt)
            finally :
                if file is not None :
                    file.close()

            # importing xml plays a trick, which replaces itself with _xmlplus
            # both have subdirs w/same name, but different modules in them
            # we need to choose the real (replaced) version
            if m.__name__ != p :
                try :
                    file, filename, smt = _q_find_module(m.__name__, path)
                    m = imp.load_module(p, file, filename, smt)
                finally :
                    if file is not None :
                        file.close()

            new_path = m.__path__
            if type(new_path) == types.ListType :
                new_path = filename
            if new_path not in path :
                path.insert(1, new_path)
        elif smt[-1] != imp.PY_COMPILED:
            if p is not packages[-1] :
                if file is not None :
                    file.close()
                raise ImportError, "No module named %s" % packages[-1]
            return file, filename, smt

    # in case we have been given a package to check
    return file, filename, smt
</t>
<t tx="ekr.20040630154517.12">

class Variable :
	&lt;&lt; class Variable declarations &gt;&gt;
	@others

    __repr__ = utils.std_repr</t>
<t tx="ekr.20040630154517.13">"Class to hold all information about a variable"

</t>
<t tx="ekr.20040630154517.14">def __init__(self, name, type):
    self.name = name
    self.type = type
    self.value = None
</t>
<t tx="ekr.20040630154517.15">def __str__(self) :
    return self.name
</t>
<t tx="ekr.20040630154517.16">def _filterDir(object, ignoreList) :
    "Return a list of tokens (attributes) in a class, except for ignoreList"

    tokens = dir(object)
    for token in ignoreList :
        if token in tokens :
            tokens.remove(token)
    return tokens
</t>
<t tx="ekr.20040630154517.17">def _getClassTokens(c) :
    return _filterDir(c, _DEFAULT_CLASS_TOKENS)
</t>
<t tx="ekr.20040630154517.18">

class Class :
	&lt;&lt; class Class declarations &gt;&gt;
	@others
</t>
<t tx="ekr.20040630154517.19">"Class to hold all information about a class"

</t>
<t tx="ekr.20040630154517.20">def __init__(self, name, module) :
    self.name = name
    self.classObject = getattr(module, name)

    modname = getattr(self.classObject, '__module__', None)
    if modname is None:
        # hm, some ExtensionClasses don't have a __module__ attribute
        # so try parsing the type output
        typerepr = repr(type(self.classObject))
        mo = re.match("^&lt;type ['\"](.+)['\"]&gt;$", typerepr)
        if mo:
            modname = ".".join(mo.group(1).split(".")[:-1])

    self.module = sys.modules.get(modname)
    if not self.module:
        self.module = module
        sys.stderr.write("warning: couldn't find real module for class %s "
                         "(module name: %s)\n"
                         % (self.classObject, modname))
    self.ignoreAttrs = 0
    self.methods = {}
    self.members = { '__class__': types.ClassType,
                     '__doc__': types.StringType,
                     '__dict__': types.DictType, }
    self.memberRefs = {}
    self.statics = {}
    self.lineNums = {}
</t>
<t tx="ekr.20040630154517.21">def __str__(self) :
    return self.name
</t>
<t tx="ekr.20040630154517.22">__repr__ = utils.std_repr

def getFirstLine(self) :
    "Return first line we can find in THIS class, not any base classes"

    lineNums = []
    classDir = dir(self.classObject)
    for m in self.methods.values() :
        if m != None and m.function.func_code.co_name in classDir:
            lineNums.append(m.function.func_code.co_firstlineno)
    if lineNums :
        return min(lineNums)
    return 0
</t>
<t tx="ekr.20040630154517.23">def allBaseClasses(self, c = None) :
    "Return a list of all base classes for this class and it's subclasses"

    baseClasses = []
    if c == None :
        c = self.classObject
    for base in c.__bases__ :
        baseClasses = baseClasses + [ base ] + self.allBaseClasses(base)
    return baseClasses
</t>
<t tx="ekr.20040630154517.24">def __getMethodName(self, func_name, className = None) :
    if func_name[0:2] == '__' and func_name[-2:] != '__' :
        if className == None :
            className = self.name
        if className[0] != '_' :
            className = '_' + className
        func_name = className + func_name
    return func_name
</t>
<t tx="ekr.20040630154517.25">def addMethod(self, method, methodName = None) :
    if type(method) == types.StringType :
        self.methods[method] = None
    else :
        assert methodName is not None, "must supply methodName"
        self.methods[methodName] = function.Function(method, 1)
</t>
<t tx="ekr.20040630154517.26">def addMethods(self, classObject) :
    for classToken in _getClassTokens(classObject) :
        token = getattr(classObject, classToken, None)
        if token is None:
            continue

        # Looks like a method.  Need to code it this way to
        # accommodate ExtensionClass and Python 2.2.  Yecchh.
        if (hasattr(token, "func_code") and
            hasattr(token.func_code, "co_argcount")): 
            self.addMethod(token, token.__name__)

        elif hasattr(token, '__get__') and \
             not hasattr(token, '__set__') and \
             type(token) is not types.ClassType :
            self.addMethod(getattr(token, '__name__', classToken))
        else :
            self.members[classToken] = type(token)
            self.memberRefs[classToken] = None

    self.cleanupMemberRefs()
    # add standard methods
    for methodName in ('__class__',) :
        self.addMethod(methodName, classObject.__name__)
</t>
<t tx="ekr.20040630154517.27">def addMembers(self, classObject) :
    if not cfg().onlyCheckInitForMembers :
        for classToken in _getClassTokens(classObject) :
            method = getattr(classObject, classToken, None)
            if type(method) == types.MethodType :
                self.addMembersFromMethod(method.im_func)
    else:
        try:
            self.addMembersFromMethod(classObject.__init__.im_func)
        except AttributeError:
            pass
</t>
<t tx="ekr.20040630154517.28">def addMembersFromMethod(self, method) :
    if not hasattr(method, 'func_code') :
        return

    func_code, code, i, maxCode, extended_arg = OP.initFuncCode(method)
    stack = []
    while i &lt; maxCode :
        op, oparg, i, extended_arg = OP.getInfo(code, i, extended_arg)
        if op &gt;= OP.HAVE_ARGUMENT :
            operand = OP.getOperand(op, func_code, oparg)
            if OP.LOAD_CONST(op) or OP.LOAD_FAST(op) :
                stack.append(operand)
            elif OP.STORE_ATTR(op) :
                if len(stack) &gt; 0 :
                    if stack[-1] == cfg().methodArgName:
                        value = None
                        if len(stack) &gt; 1 :
                            value = type(stack[-2])
                        self.members[operand] = value
                        self.memberRefs[operand] = None
                    stack = []

    self.cleanupMemberRefs()
</t>
<t tx="ekr.20040630154517.29">def cleanupMemberRefs(self) :
    try :
        del self.memberRefs[Config.CHECKER_VAR]
    except KeyError :
        pass
</t>
<t tx="ekr.20040630154517.30">def abstractMethod(self, m):
    """Return 1 if method is abstract, None if not
       An abstract method always raises an exception.
    """
    if not self.methods.get(m, None):
        return None
    func_code, bytes, i, maxCode, extended_arg = \
               OP.initFuncCode(self.methods[m].function)
    # abstract if the first conditional is RAISE_VARARGS
    while i &lt; maxCode:
        op, oparg, i, extended_arg = OP.getInfo(bytes, i, extended_arg)
        if OP.RAISE_VARARGS(op):
            return 1
        if OP.conditional(op):
            break
    return None
</t>
<t tx="ekr.20040630154517.31">def isAbstract(self):
    """Return the method names that make a class abstract.
       An abstract class has at least one abstract method."""
    result = []
    for m in self.methods.keys():
        if self.abstractMethod(m):
            result.append(m)
    return result
</t>
<t tx="ekr.20040630154517.32">def _getLineInFile(moduleName, linenum):
    line = ''
    file, filename, smt = _findModule(moduleName)
    try:
        lines = file.readlines()
        line = string.rstrip(lines[linenum - 1])
    except (IOError, IndexError):
        pass
    file.close()
    return line
</t>
<t tx="ekr.20040630154517.33">def importError(moduleName):
    exc_type, exc_value, tb = sys.exc_info()

    # First, try to get a nice-looking name for this exception type.
    exc_name = getattr(exc_type, '__name__', None)
    if not exc_name:
        # either it's a string exception or a user-defined exception class
        # show string or fully-qualified class name
        exc_name = str(exc_type)
        
    # Print a traceback, unless this is an ImportError.  ImportError is
    # presumably the most common import-time exception, so this saves
    # the clutter of a traceback most of the time.  Also, the locus of
    # the error is usually irrelevant for ImportError, so the lack of
    # traceback shouldn't be a problem.
    if exc_type is SyntaxError:
        # SyntaxErrors are special, we want to control how we format
        # the output and make it consistent for all versions of Python
        e = exc_value
        msg = '%s (%s, line %d)' % (e.msg, e.filename, e.lineno)
        line = _getLineInFile(moduleName, e.lineno)
        offset = e.offset
        if type(offset) is not types.IntType:
            offset = 0
        exc_value = '%s\n    %s\n   %s^' % (msg, line, ' ' * offset)
    elif exc_type is not ImportError:
        sys.stderr.write("  Caught exception importing module %s:\n" %
                         moduleName)

        try:
            tbinfo = traceback.extract_tb(tb)
        except:
            tbinfo = []
            sys.stderr.write("      Unable to format traceback\n")
        for filename, line, func, text in tbinfo[1:]:
            sys.stderr.write("    File \"%s\", line %d" % (filename, line))
            if func != "?":
                sys.stderr.write(", in %s()" % func)
            sys.stderr.write("\n")
            if text:
                sys.stderr.write("      %s\n" % text)

    # And finally print the exception type and value.
    # Careful formatting exc_value -- can fail for some user exceptions
    sys.stderr.write("  %s: " % exc_name)
    try:
        sys.stderr.write(str(exc_value) + '\n')
    except:
        sys.stderr.write('**error formatting exception value**\n')
</t>
<t tx="ekr.20040630154517.34">def _getPyFile(filename):
    """Return the file and '.py' filename from a filename which could
    end with .py, .pyc, or .pyo"""

    if filename[-1] in 'oc' and filename[-4:-1] == '.py':
        return filename[:-1]
    return filename
</t>
<t tx="ekr.20040630154517.35">
class Module :
	&lt;&lt; class Module declarations &gt;&gt;
	@others
</t>
<t tx="ekr.20040630154517.36">"Class to hold all information for a module"

</t>
<t tx="ekr.20040630154517.37">def __init__(self, moduleName, check = 1) :
    self.moduleName = moduleName
    self.variables = {}
    self.functions = {}
    self.classes = {}
    self.modules = {}
    self.moduleLineNums = {}
    self.attributes = [ '__dict__' ]
    self.main_code = None
    self.module = None
    self.check = check
    _allModules[moduleName] = self
</t>
<t tx="ekr.20040630154517.38">def __str__(self) :
    return self.moduleName
</t>
<t tx="ekr.20040630154517.39">__repr__ = utils.std_repr

def addVariable(self, var, varType) :
    self.variables[var] = Variable(var, varType)
</t>
<t tx="ekr.20040630154517.40">def addFunction(self, func) :
    self.functions[func.__name__] = function.Function(func)
</t>
<t tx="ekr.20040630154517.41">def __addAttributes(self, c, classObject) :
    for base in classObject.__bases__ :
        self.__addAttributes(c, base)
    c.addMethods(classObject)
    c.addMembers(classObject)
</t>
<t tx="ekr.20040630154517.42">def addClass(self, name) :
    self.classes[name] = c = Class(name, self.module)
    try:
        objName = str(c.classObject)
    except TypeError:
        # this can happen if there is a goofy __getattr__
        c.ignoreAttrs = 1
    else:
        packages = string.split(objName, '.')
        c.ignoreAttrs = packages[0] in cfg().blacklist
    if not c.ignoreAttrs :
        self.__addAttributes(c, c.classObject)
</t>
<t tx="ekr.20040630154517.43">def addModule(self, name) :
    module = _allModules.get(name, None)
    if module is None :
        self.modules[name] = module = Module(name, 0)
        if imp.is_builtin(name) == 0 :
            module.load()
        else :
            globalModule = globals().get(name)
            if globalModule :
                module.attributes.extend(dir(globalModule))
    else :
        self.modules[name] = module
</t>
<t tx="ekr.20040630154517.44">def filename(self) :
    try :
        filename = self.module.__file__
    except AttributeError :
        filename = self.moduleName
    return _getPyFile(filename)
</t>
<t tx="ekr.20040630154517.45">def load(self):
    try :
        # there's no need to reload modules we already have
        module = sys.modules.get(self.moduleName)
        if module :
            if not _allModules[self.moduleName].module :
                return self._initModule(module)
            return 1

        return self._initModule(self.setupMainCode())
    except (SystemExit, KeyboardInterrupt) :
        exc_type, exc_value, exc_tb = sys.exc_info()
        raise exc_type, exc_value
    except :
        importError(self.moduleName)
        return 0
</t>
<t tx="ekr.20040630154517.46">def initModule(self, module) :
    if not self.module:
        filename = _getPyFile(module.__file__)
        if string.lower(filename[-3:]) == '.py':
            try:
                file = open(filename)
            except IOError:
                pass
            else:
                self._setupMainCode(file, filename, module)
        return self._initModule(module)
    return 1
</t>
<t tx="ekr.20040630154517.47">def _initModule(self, module):
    self.module = module
    self.attributes = dir(self.module)

    pychecker_attr = getattr(module, Config.CHECKER_VAR, None)
    if pychecker_attr is not None :
        utils.pushConfig()
        utils.updateCheckerArgs(pychecker_attr, 'suppressions', 0, [])

    for tokenName in _filterDir(self.module, _DEFAULT_MODULE_TOKENS) :
        token = getattr(self.module, tokenName)
        if isinstance(token, types.ModuleType) :
            # get the real module name, tokenName could be an alias
            self.addModule(token.__name__)
        elif isinstance(token, types.FunctionType) :
            self.addFunction(token)
        elif isinstance(token, types.ClassType) or \
             hasattr(token, '__bases__') :
            self.addClass(tokenName)
        else :
            self.addVariable(tokenName, type(token))

    if pychecker_attr is not None :
        utils.popConfig()
    return 1
</t>
<t tx="ekr.20040630154517.48">def setupMainCode(self) :
    file, filename, smt = _findModule(self.moduleName)
    # FIXME: if the smt[-1] == imp.PKG_DIRECTORY : load __all__
    module = imp.load_module(self.moduleName, file, filename, smt)
    self._setupMainCode(file, filename, module)
    return module
</t>
<t tx="ekr.20040630154517.49">def _setupMainCode(self, file, filename, module):
    try :
        self.main_code = function.create_from_file(file, filename, module)
    finally :
        if file != None :
            file.close()
</t>
<t tx="ekr.20040630154517.50">def getAllModules() :
    "Returns a list of all modules that should be checked."
    modules = []
    for module in _allModules.values() :
        if module.check :
            modules.append(module)
    return modules
</t>
<t tx="ekr.20040630154517.51">_BUILTIN_MODULE_ATTRS = { 'sys': [ 'ps1', 'ps2', 'tracebacklimit', 
                                   'exc_type', 'exc_value', 'exc_traceback',
                                   'last_type', 'last_value', 'last_traceback',
                                 ],
                        }

def fixupBuiltinModules(needs_init=0):
    for moduleName in sys.builtin_module_names :
        if needs_init:
            _ = Module(moduleName, 0)
        module = _allModules.get(moduleName, None)
        if module is not None :
            try :
                m = imp.init_builtin(moduleName)
            except ImportError :
                pass
            else :
                extra_attrs = _BUILTIN_MODULE_ATTRS.get(moduleName, [])
                module.attributes = [ '__dict__' ] + dir(m) + extra_attrs
</t>
<t tx="ekr.20040630154517.52">def _printWarnings(warnings, stream=None):
    if stream is None:
        stream = sys.stdout
    
    warnings.sort()
    lastWarning = None
    for warning in warnings :
        if lastWarning != None :
            # ignore duplicate warnings
            if cmp(lastWarning, warning) == 0 :
                continue
            # print blank line between files
            if lastWarning.file != warning.file :
                stream.write("\n")

        lastWarning = warning
        warning.output(stream)
</t>
<t tx="ekr.20040630154517.53">def processFiles(files, cfg = None, pre_process_cb = None) :
    # insert this here, so we find files in the local dir before std library
    if sys.path[0] != '' :
        sys.path.insert(0, '')

    # ensure we have a config object, it's necessary
    global _cfg
    if cfg is not None :
        _cfg = cfg
    elif _cfg is None :
        _cfg = Config.Config()

    warnings = []
    utils.initConfig(_cfg)
    for moduleName in getModules(files) :
        if callable(pre_process_cb) :
            pre_process_cb(moduleName)
        module = Module(moduleName)
        if not module.load() :
            w = Warning(module.filename(), 1, "NOT PROCESSED UNABLE TO IMPORT")
            warnings.append(w)
    utils.popConfig()
    return warnings
</t>
<t tx="ekr.20040630154517.54">def getWarnings(files, cfg = None, suppressions = None):
    warnings = processFiles(files, cfg)
    fixupBuiltinModules()
    return warnings + warn.find(getAllModules(), _cfg, suppressions)
</t>
<t tx="ekr.20040630154517.55">def _print_processing(name) :
    if not _cfg.quiet :
        sys.stderr.write("Processing %s...\n" % name)
</t>
<t tx="ekr.20040630154517.56">def main(argv) :
    __pychecker__ = 'no-miximport'
    import pychecker
    if LOCAL_MAIN_VERSION != pychecker.MAIN_MODULE_VERSION :
        sys.stderr.write(_VERSION_MISMATCH_ERROR)
        sys.exit(100)

    # remove empty arguments
    argv = filter(None, argv)
        
    # if the first arg starts with an @, read options from the file
    # after the @ (this is mostly for windows)
    if len(argv) &gt;= 2 and argv[1][0] == '@':
        # read data from the file
        command_file = argv[1][1:]
        try:
            f = open(command_file, 'r')
            command_line = f.read()
            f.close()
        except IOError, err:
            sys.stderr.write("Unable to read commands from file: %s\n  %s\n" % \
                             (command_file, err))
            sys.exit(101)

        # convert to an argv list, keeping argv[0] and the files to process
        argv = argv[:1] + string.split(command_line) + argv[2:]
 
    global _cfg
    _cfg, files, suppressions = Config.setupFromArgs(argv[1:])
    if not files :
        return 0

    # insert this here, so we find files in the local dir before std library
    sys.path.insert(0, '')

    importWarnings = processFiles(files, _cfg, _print_processing)
    fixupBuiltinModules()
    if _cfg.printParse :
        for module in getAllModules() :
            printer.module(module)

    warnings = warn.find(getAllModules(), _cfg, suppressions)
    if not _cfg.quiet :
        print "\nWarnings...\n"
    if warnings or importWarnings :
        _printWarnings(importWarnings + warnings)
        return 1

    if not _cfg.quiet :
        print "None"
    return 0
</t>
<t tx="ekr.20040630154517.57">if __name__ == '__main__' :
    try :
        sys.exit(main(sys.argv))
    except Config.UsageError :
        sys.exit(127)

else :
    _orig__import__ = None
    _suppressions = None
    _warnings_cache = {}

    def _get_unique_warnings(warnings):
        for i in range(len(warnings)-1, -1, -1):
            w = warnings[i].format()
            if _warnings_cache.has_key(w):
                del warnings[i]
            else:
                _warnings_cache[w] = 1
        return warnings

    def __import__(name, globals=None, locals=None, fromlist=None):
        if globals is None:
            globals = {}
        if locals is None:
            locals = {}
        if fromlist is None:
            fromlist = []

        check = not sys.modules.has_key(name) and name[:10] != 'pychecker.'
        pymodule = _orig__import__(name, globals, locals, fromlist)
        if check :
            try :
                module = Module(pymodule.__name__)
                if module.initModule(pymodule):
                    warnings = warn.find([module], _cfg, _suppressions)
                    _printWarnings(_get_unique_warnings(warnings))
                else :
                    print 'Unable to load module', pymodule.__name__
            except Exception:
                name = getattr(pymodule, '__name__', str(pymodule))
                importError(name)

        return pymodule

    def _init() :
        global _cfg, _suppressions, _orig__import__

        args = string.split(os.environ.get('PYCHECKER', ''))
        _cfg, files, _suppressions = Config.setupFromArgs(args)
        utils.initConfig(_cfg)
        fixupBuiltinModules(1)

        # keep the orig __import__ around so we can call it
        import __builtin__
        _orig__import__ = __builtin__.__import__
        __builtin__.__import__ = __import__

    if not os.environ.get('PYCHECKER_DISABLED') :
        _init()
</t>
<t tx="ekr.20040630154517.58">@ignore
@language python
&lt;&lt; CodeChecks declarations &gt;&gt;
@others


DISPATCH = [ None ] * 256
DISPATCH[  1] = _POP_TOP
DISPATCH[  2] = _ROT_TWO
DISPATCH[  4] = _DUP_TOP
DISPATCH[ 10] = _UNARY_POSITIVE
DISPATCH[ 11] = _UNARY_NEGATIVE
DISPATCH[ 12] = _UNARY_NOT
DISPATCH[ 13] = _UNARY_CONVERT
DISPATCH[ 15] = _UNARY_INVERT
DISPATCH[ 18] = _LIST_APPEND
DISPATCH[ 19] = _BINARY_POWER
DISPATCH[ 20] = _BINARY_MULTIPLY
DISPATCH[ 21] = _BINARY_DIVIDE
DISPATCH[ 22] = _BINARY_MODULO
DISPATCH[ 23] = _BINARY_ADD
DISPATCH[ 24] = _BINARY_SUBTRACT
DISPATCH[ 25] = _BINARY_SUBSCR
DISPATCH[ 26] = _BINARY_FLOOR_DIVIDE
DISPATCH[ 27] = _BINARY_TRUE_DIVIDE
# FIXME: add INPLACE FLOOR/TRUE DIVIDE: 28/29
DISPATCH[ 31] = _SLICE1
DISPATCH[ 32] = _SLICE2
DISPATCH[ 33] = _SLICE3
DISPATCH[ 55] = _BINARY_ADD             # INPLACE
DISPATCH[ 56] = _BINARY_SUBTRACT        # INPLACE
DISPATCH[ 57] = _BINARY_MULTIPLY        # INPLACE
DISPATCH[ 58] = _BINARY_DIVIDE          # INPLACE
DISPATCH[ 59] = _BINARY_MODULO          # INPLACE
DISPATCH[ 60] = _STORE_SUBSCR
DISPATCH[ 61] = _DELETE_SUBSCR
DISPATCH[ 62] = _BINARY_LSHIFT
DISPATCH[ 63] = _BINARY_RSHIFT
DISPATCH[ 64] = _BINARY_AND
DISPATCH[ 65] = _BINARY_XOR
DISPATCH[ 66] = _BINARY_OR
DISPATCH[ 67] = _BINARY_POWER           # INPLACE
DISPATCH[ 68] = _GET_ITER
DISPATCH[ 71] = _PRINT_ITEM
DISPATCH[ 73] = _PRINT_ITEM_TO
DISPATCH[ 75] = _BINARY_LSHIFT          # INPLACE
DISPATCH[ 76] = _BINARY_RSHIFT          # INPLACE
DISPATCH[ 77] = _BINARY_AND             # INPLACE
DISPATCH[ 78] = _BINARY_XOR             # INPLACE
DISPATCH[ 79] = _BINARY_OR              # INPLACE
DISPATCH[ 83] = _RETURN_VALUE
DISPATCH[ 84] = _IMPORT_STAR
DISPATCH[ 85] = _EXEC_STMT
DISPATCH[ 88] = _END_FINALLY
DISPATCH[ 89] = _BUILD_CLASS
DISPATCH[ 90] = _STORE_NAME
DISPATCH[ 91] = _DELETE_NAME
DISPATCH[ 92] = _UNPACK_SEQUENCE
DISPATCH[ 93] = _FOR_ITER
DISPATCH[ 95] = _STORE_ATTR
DISPATCH[ 96] = _DELETE_ATTR
DISPATCH[ 97] = _STORE_GLOBAL
DISPATCH[ 98] = _DELETE_GLOBAL
DISPATCH[100] = _LOAD_CONST
DISPATCH[101] = _LOAD_NAME
DISPATCH[102] = _BUILD_TUPLE
DISPATCH[103] = _BUILD_LIST
DISPATCH[104] = _BUILD_MAP
DISPATCH[105] = _LOAD_ATTR
DISPATCH[106] = _COMPARE_OP
DISPATCH[107] = _IMPORT_NAME
DISPATCH[108] = _IMPORT_FROM
DISPATCH[110] = _JUMP_FORWARD
DISPATCH[111] = _JUMP_IF_FALSE
DISPATCH[112] = _JUMP_IF_TRUE
DISPATCH[113] = _JUMP_ABSOLUTE
DISPATCH[114] = _FOR_LOOP
DISPATCH[116] = _LOAD_GLOBAL
DISPATCH[121] = _SETUP_EXCEPT
DISPATCH[122] = _SETUP_FINALLY
DISPATCH[124] = _LOAD_FAST
DISPATCH[125] = _STORE_FAST
DISPATCH[126] = _DELETE_FAST
DISPATCH[127] = _LINE_NUM
DISPATCH[130] = _RAISE_VARARGS
DISPATCH[131] = _CALL_FUNCTION
DISPATCH[132] = _MAKE_FUNCTION
DISPATCH[134] = _MAKE_CLOSURE
DISPATCH[135] = _LOAD_CLOSURE
DISPATCH[136] = _LOAD_DEREF
DISPATCH[140] = _CALL_FUNCTION_VAR
DISPATCH[141] = _CALL_FUNCTION_KW
DISPATCH[142] = _CALL_FUNCTION_VAR_KW
</t>
<t tx="ekr.20040630154517.59">#!/usr/bin/env python

# Copyright (c) 2001-2004, MetaSlash Inc.  All rights reserved.

"""
Find warnings in byte code from Python source files.
"""

import string
import types

from pychecker import msgs
from pychecker import utils
from pychecker import Warning
from pychecker import OP
from pychecker import Stack
from pychecker import python

__pychecker__ = 'no-argsused'


</t>
<t tx="ekr.20040630154517.60">def cfg() :
    return utils.cfg()
</t>
<t tx="ekr.20040630154517.61">def getFunctionArgErr(func_name, argCount, minArgs, maxArgs):
    err = None
    if maxArgs == None:
        if argCount &lt; minArgs :
            err = msgs.INVALID_ARG_COUNT2 % (func_name, argCount, minArgs)
    elif argCount &lt; minArgs or argCount &gt; maxArgs:
        if minArgs == maxArgs:
            err = msgs.INVALID_ARG_COUNT1 % (func_name, argCount, minArgs)
        else:
            err = msgs.INVALID_ARG_COUNT3 % (func_name, argCount, minArgs, maxArgs)
    return err
</t>
<t tx="ekr.20040630154517.62">def _checkFunctionArgCount(code, func_name, argCount, minArgs, maxArgs,
                           objectReference = 0) :
    # there is an implied argument for object creation and self.xxx()
    if objectReference :
        minArgs = minArgs - 1
        if maxArgs is not None :
            maxArgs = maxArgs - 1

    err = getFunctionArgErr(func_name, argCount, minArgs, maxArgs)
    if err :
        code.addWarning(err)
</t>
<t tx="ekr.20040630154517.63">def _checkFunctionArgs(code, func, objectReference, argCount, kwArgs,
                       check_arg_count = 1) :
    func_name = func.function.func_code.co_name
    if kwArgs :
        args_len = func.function.func_code.co_argcount
        arg_names = func.function.func_code.co_varnames[argCount:args_len]
        if argCount &lt; args_len and kwArgs[0] in arg_names:
            if cfg().namedArgs :
                code.addWarning(msgs.FUNC_USES_NAMED_ARGS % func_name)

            # convert the named args into regular params, and really check
            while argCount &lt; args_len and kwArgs and kwArgs[0] in arg_names:
                argCount = argCount + 1
                kwArgs = kwArgs[1:]
            _checkFunctionArgs(code, func, objectReference, argCount, kwArgs,
                               check_arg_count)
            return

        if not func.supportsKW :
            code.addWarning(msgs.FUNC_DOESNT_SUPPORT_KW % func_name)

    if check_arg_count :
        _checkFunctionArgCount(code, func_name, argCount,
                               func.minArgs, func.maxArgs, objectReference)
</t>
<t tx="ekr.20040630154517.64">def _getReferenceFromModule(module, identifier) :
    func = module.functions.get(identifier, None)
    if func is not None :
        return func, None, 0

    create = 0
    c = module.classes.get(identifier, None)
    if c is not None :
        func = c.methods.get(utils.INIT, None)
        create = 1
    return func, c, create
</t>
<t tx="ekr.20040630154517.65">def _getFunction(module, stackValue) :
    'Return (function, class) from the stack value'

    identifier = stackValue.data
    if type(identifier) == types.StringType :
        return _getReferenceFromModule(module, identifier)

    # find the module this references
    i, maxLen = 0, len(identifier)
    while i &lt; maxLen :
        id = str(identifier[i])
        if module.classes.has_key(id) or module.functions.has_key(id) :
            break
        refModule = module.modules.get(id, None)
        if refModule is not None :
            module = refModule
        else :
            return None, None, 0
        i = i + 1

    # if we got to the end, there is only modules, nothing we can do
    # we also can't handle if there is more than 2 items left
    if i &gt;= maxLen or (i+2) &lt; maxLen :
        return None, None, 0

    if (i+1) == maxLen :
        return _getReferenceFromModule(module, identifier[-1])

    # we can't handle self.x.y
    if (i+2) == maxLen and identifier[0] == cfg().methodArgName:
        return None, None, 0

    c = module.classes.get(identifier[-2], None)
    if c is None :
        return None, None, 0
    return c.methods.get(identifier[-1], None), c, 0
</t>
<t tx="ekr.20040630154517.66">def _checkBuiltin(code, loadValue, argCount, kwArgs, check_arg_count = 1) :
    returnValue = Stack.makeFuncReturnValue(loadValue, argCount)
    func_name = loadValue.data
    if loadValue.type == Stack.TYPE_GLOBAL :
        info = python.GLOBAL_FUNC_INFO.get(func_name, None)
        if info is not None :
            if func_name == 'input' and cfg().usesInput:
                code.addWarning(msgs.USES_INPUT)
            if cfg().constAttr and \
               ((func_name == 'setattr' and argCount &gt;= 2) or 
                (func_name == 'getattr' and argCount == 2)):
                arg2 = code.stack[-argCount + 1]
                if arg2.const:
                    code.addWarning(msgs.USES_CONST_ATTR % func_name)

            if kwArgs:
                if len(info) &lt; 4:
                    code.addWarning(msgs.FUNC_DOESNT_SUPPORT_KW % func_name)
                elif info[3]:
                    for arg in kwArgs:
                        if arg not in info[3]:
                            code.addWarning(msgs.FUNC_DOESNT_SUPPORT_KW_ARG % (func_name, arg))
            elif check_arg_count :
                _checkFunctionArgCount(code, func_name, argCount,
                                       info[1], info[2])
            returnValue = Stack.Item(returnValue.data, info[0])
            returnValue.setStringType(info[0])
    elif type(func_name) == types.TupleType and len(func_name) &lt;= 2 :
        objType = code.typeMap.get(str(func_name[0]), [])
        if types.ListType in objType :
            try :
                if func_name[1] == 'append' and argCount &gt; 1 :
                    code.addWarning(msgs.LIST_APPEND_ARGS % func_name[0])
                    check_arg_count = 0
            except AttributeError :
                # FIXME: why do we need to catch AttributeError???
                pass
        if len(objType) == 1 :
            # if it's a builtin, check method
            builtinType = python.BUILTIN_METHODS.get(objType[0])
            if builtinType is not None :
                methodInfo = builtinType.get(func_name[1])
                # set func properly
                if kwArgs :
                    code.addWarning(msgs.FUNC_DOESNT_SUPPORT_KW % func_name[1])
                elif methodInfo :
                    returnValue = Stack.Item(func_name[1], methodInfo[0])
                    returnValue.setStringType(methodInfo[0])
                    if check_arg_count and methodInfo is not None :
                        _checkFunctionArgCount(code, func_name[1], argCount,
                                               methodInfo[1], methodInfo[2])

    return returnValue
</t>
<t tx="ekr.20040630154517.67">_IMMUTABLE_LIST_METHODS = ('count', 'index',)
_IMMUTABLE_DICT_METHODS = ('copy', 'get', 'has_key',
                           'items', 'keys', 'values',
                           'iteritems', 'iterkeys', 'itervalues')

def _checkModifyDefaultArg(code, objectName, methodName=None) :
    try :
        value = code.func.defaultValue(objectName)
        objectType = type(value)
        if objectType in python.MUTABLE_TYPES :
            if objectType == types.DictType and \
               methodName in _IMMUTABLE_DICT_METHODS :
                return 
            if objectType == types.ListType and \
               methodName in _IMMUTABLE_LIST_METHODS :
                return
            code.addWarning(msgs.MODIFYING_DEFAULT_ARG % objectName)
    except ValueError :
        pass
</t>
<t tx="ekr.20040630154517.68">def _isexception(object) :
    # FIXME: i have no idea why this function is necessary
    # it seems that the issubclass() should work, but it doesn't always
    try:
        # try/except is necessary for globals like NotImplemented
        if issubclass(object, Exception) :
            return 1
    except TypeError:
        return 0

    for c in object.__bases__ :
        if utils.startswith(str(c), 'exceptions.') :
            return 1
        if len(c.__bases__) &gt; 0 and _isexception(c) :
            return 1
    return 0
</t>
<t tx="ekr.20040630154517.69">def _checkStringFind(code, loadValue):
    if len(loadValue.data) == 2 and loadValue.data[1] == 'find':
        try:
            if types.StringType in code.typeMap.get(loadValue.data[0], []):
                op = code.nextOpInfo()[0]
                if OP.IS_CONDITIONAL_JUMP(op) or OP.IS_NOT(op):
                    code.addWarning(msgs.BAD_STRING_FIND)
        except TypeError:
            # we don't care if loadValue.data[0] is not hashable
            pass
</t>
<t tx="ekr.20040630154517.70">def _checkAbstract(refClass, code, name):
    name_list = refClass.isAbstract()
    if name_list:
        name_list.sort()
        names = string.join(name_list, ", ")
        code.addWarning(msgs.METHODS_NEED_OVERRIDE % (names, name))
</t>
<t tx="ekr.20040630154517.71">_SEQUENCE_TYPES = (types.TupleType, types.ListType, types.StringType)
try: _SEQUENCE_TYPES = _SEQUENCE_TYPES + (types.UnicodeType,)
except AttributeError: pass

# FIXME: this is not complete. errors will be caught only sometimes,
#        depending on the order the functions/methods are processed
#        in the dict.  Need to be able to run through all functions
#        twice, but because the code sucks, this is not possible.
def _checkReturnValueUse(code, func):
    if func.returnValues is None:
        return

    err = None
    opInfo = code.nextOpInfo()
    if func.returnsNoValue():
        # make sure we really know how to check for all the return types
        for rv in func.returnValues:
            if rv[1].type in _UNCHECKABLE_STACK_TYPES:
                return

        if not OP.POP_TOP(opInfo[0]):
            err = msgs.USING_NONE_RETURN_VALUE % str(func)
    elif OP.UNPACK_SEQUENCE(opInfo[0]):
        # verify unpacking into proper # of vars
        varCount = opInfo[1]
        stackRV = func.returnValues[0][1]
        returnType = stackRV.getType({})
        funcCount = stackRV.length
        if returnType in _SEQUENCE_TYPES:
            if varCount != funcCount and funcCount &gt; 0:
                err = msgs.WRONG_UNPACK_FUNCTION % (str(func), funcCount, varCount)
        elif returnType not in _UNCHECKABLE_STACK_TYPES:
            err = msgs.UNPACK_NON_SEQUENCE % (str(func), _getTypeStr(returnType))
    if err:
        code.addWarning(err)
</t>
<t tx="ekr.20040630154517.72">def _handleFunctionCall(codeSource, code, argCount, indexOffset = 0,
                        check_arg_count = 1) :
    'Checks for warnings, returns function called (may be None)'

    if not code.stack :
        return

    kwArgCount = argCount &gt;&gt; utils.VAR_ARGS_BITS
    argCount = argCount &amp; utils.MAX_ARGS_MASK

    # function call on stack is before the args, and keyword args
    funcIndex = argCount + 2 * kwArgCount + 1 + indexOffset
    if funcIndex &gt; len(code.stack) :
        funcIndex = 0
    # to find on stack, we have to look backwards from top of stack (end)
    funcIndex = -funcIndex

    # store the keyword names/keys to check if using named arguments
    kwArgs = []
    if kwArgCount &gt; 0 :
        # loop backwards by 2 (keyword, value) in stack to find keyword args
        for i in range(-2 - indexOffset, (-2 * kwArgCount - 1), -2) :
            kwArgs.append(code.stack[i].data)
        kwArgs.reverse()

    loadValue = code.stack[funcIndex]
    funcName = loadValue.getName()
    returnValue = Stack.makeFuncReturnValue(loadValue, argCount)

    if loadValue.isMethodCall(codeSource.classObject, cfg().methodArgName):
        methodName = loadValue.data[1]
        try :
            m = codeSource.classObject.methods[methodName]
            if m != None :
                objRef = not m.isStaticMethod()
                _checkFunctionArgs(code, m, objRef, argCount, kwArgs,
                                   check_arg_count)
        except KeyError :
            sattr = codeSource.classObject.statics.get(methodName)
            if sattr is not None :
                funcName = sattr.getName()

            if sattr is None and cfg().callingAttribute :
                code.addWarning(msgs.INVALID_METHOD % methodName)

    elif loadValue.type in (Stack.TYPE_ATTRIBUTE, Stack.TYPE_GLOBAL) and \
         type(loadValue.data) in (types.StringType, types.TupleType) :
        # apply(func, (args)), can't check # of args, so just return func
        if loadValue.data == 'apply' :
            loadValue = code.stack[funcIndex+1]
            funcName = loadValue.getName()
        else :
            if cfg().modifyDefaultValue and \
               type(loadValue.data) == types.TupleType :
                _checkModifyDefaultArg(code, loadValue.data[0],
                                       loadValue.data[1])

            func, refClass, method = _getFunction(codeSource.module, loadValue)
            if func == None and type(loadValue.data) == types.TupleType and \
               len(loadValue.data) == 2 :
                # looks like we are making a method call
                data = loadValue.data
                if type(data[0]) == types.StringType :
                    # do we know the type of the local variable?
                    varType = code.typeMap.get(data[0])
                    if varType is not None and len(varType) == 1 :
                        if hasattr(varType[0], 'methods') :
                            # it's a class &amp; we know the type, get the method
                            func = varType[0].methods.get(data[1])
                            if func is not None :
                                method = 1

            if cfg().abstractClasses and refClass and method:
                _checkAbstract(refClass, code, funcName)

            if cfg().stringFind:
                _checkStringFind(code, loadValue)

            if func != None :
                if refClass and func.isClassMethod():
                    argCount = argCount + 1
                _checkFunctionArgs(code, func, method, argCount, kwArgs,
                                   check_arg_count)
                # if this isn't a c'tor, we should check
                if not (refClass and method) and cfg().checkReturnValues:
                    _checkReturnValueUse(code, func)

                if refClass :
                    if method :
                        # c'tor, return the class as the type
                        returnValue = Stack.Item(loadValue, refClass)
                    elif func.isClassMethod():
                        # FIXME: do anything here?
                        pass
                    elif argCount &gt; 0 and cfg().methodArgName and \
                         not func.isStaticMethod() and \
                         code.stack[funcIndex].type == Stack.TYPE_ATTRIBUTE and \
                         code.stack[funcIndex+1].data != cfg().methodArgName:
                        e = msgs.SELF_NOT_FIRST_ARG % (cfg().methodArgName, '')
                        code.addWarning(e)
            elif refClass and method :
                returnValue = Stack.Item(loadValue, refClass)
                if (argCount &gt; 0 or len(kwArgs) &gt; 0) and \
                   not refClass.ignoreAttrs and \
                   not refClass.methods.has_key(utils.INIT) and \
                   not _isexception(refClass.classObject) :
                    code.addWarning(msgs.NO_CTOR_ARGS)
            else :
                returnValue = _checkBuiltin(code, loadValue, argCount, kwArgs,
                                            check_arg_count)
                if returnValue.type is types.NoneType and \
                   not OP.POP_TOP(code.nextOpInfo()[0]) :
                    name = str(loadValue.data)
                    if type(loadValue.data) == types.TupleType :
                        name = string.join(loadValue.data, '.')
                    code.addWarning(msgs.USING_NONE_RETURN_VALUE % name)

    code.stack = code.stack[:funcIndex] + [ returnValue ]
    code.functionsCalled[funcName] = loadValue
</t>
<t tx="ekr.20040630154517.73">def _classHasAttribute(c, attr) :
    return (c.methods.has_key(attr) or c.members.has_key(attr) or
            hasattr(c.classObject, attr))
</t>
<t tx="ekr.20040630154517.74">def _checkClassAttribute(attr, c, code) :
    if _classHasAttribute(c, attr) :
        try :
            del c.memberRefs[attr]
        except KeyError :
            pass
    elif cfg().classAttrExists :
        code.addWarning(msgs.INVALID_CLASS_ATTR % attr)
</t>
<t tx="ekr.20040630154517.75">def _checkModuleAttribute(attr, module, code, ref) :
    try:
        if attr not in module.modules[ref].attributes and \
           not utils.endswith(ref, '.' + attr) :
            code.addWarning(msgs.INVALID_MODULE_ATTR % attr)
    except (KeyError, TypeError):
        # if ref isn't found, or ref isn't even hashable, we don't care
        # we may not know, or ref could be something funky [e for e].method()
        pass

    try:
        _checkClassAttribute(attr, module.classes[ref], code)
    except (KeyError, TypeError):
        # if ref isn't found, or ref isn't even hashable, we don't care
        # we may not know, or ref could be something funky [e for e].method()
        pass
</t>
<t tx="ekr.20040630154517.76">def _getGlobalName(name, func) :
    # get the right name of global refs (for from XXX import YYY)
    opModule = func.function.func_globals.get(name)
    try :
        if opModule and isinstance(opModule, types.ModuleType) :
            name = opModule.__name__
    except :
        # we have to do this in case the class raises an access exception
        # due to overriding __special__() methods
        pass

    return name
</t>
<t tx="ekr.20040630154517.77">def _checkNoEffect(code, ignoreStmtWithNoEffect=0):
    if (not ignoreStmtWithNoEffect and
        OP.POP_TOP(code.nextOpInfo()[0]) and cfg().noEffect):
        code.addWarning(msgs.POSSIBLE_STMT_WITH_NO_EFFECT)
</t>
<t tx="ekr.20040630154517.78">def _makeConstant(code, index, factoryFunction) :
    "Build a constant on the stack ((), [], or {})"
    if index &gt; 0 :
        code.stack[-index:] = [ factoryFunction(code.stack[-index:]) ]
        _checkNoEffect(code)
    else :
        code.pushStack(factoryFunction())
</t>
<t tx="ekr.20040630154517.79">def _hasGlobal(operand, module, func, main) :
    return (func.function.func_globals.has_key(operand) or
             main or module.moduleLineNums.has_key(operand) or
             __builtins__.has_key(operand))
</t>
<t tx="ekr.20040630154517.80">def _checkGlobal(operand, module, func, code, err, main = 0) :
    if not _hasGlobal(operand, module, func, main) :
        code.addWarning(err % operand)
        if not cfg().reportAllGlobals :
            func.function.func_globals[operand] = operand
</t>
<t tx="ekr.20040630154517.81">def _handleComparison(stack, operand) :
    si = min(len(stack), 2)
    compareValues = stack[-si:]
    for _ in range(si, 2) :
        compareValues.append(None)
    stack[-si:] = [ Stack.makeComparison(compareValues, operand) ]
    return compareValues
</t>
<t tx="ekr.20040630154517.82">def _handleImport(code, operand, module, main, fromName) :
    # FIXME: this function should be refactored/cleaned up
    key = operand
    tmpOperand = tmpFromName = operand
    if fromName is not None :
        tmpOperand = tmpFromName = fromName
        key = (fromName, operand)

    if cfg().deprecated:
        try:
            undeprecated = python.DEPRECATED_MODULES[tmpFromName]
        except KeyError:
            pass
        else:
            msg = msgs.USING_DEPRECATED_MODULE % tmpFromName
            if undeprecated:
                msg = msg + msgs.USE_INSTEAD % undeprecated
            code.addWarning(msg)

    if cfg().reimportSelf and tmpOperand == module.module.__name__ :
        code.addWarning(msgs.IMPORT_SELF % tmpOperand)

    modline1 = module.moduleLineNums.get(tmpOperand, None)
    modline2 = module.moduleLineNums.get((tmpFromName, '*'), None)
    key2 = (tmpFromName,)
    if fromName is not None and operand != '*' :
        key2 = (tmpFromName, operand)
    modline3 = module.moduleLineNums.get(key2, None)

    if modline1 is not None or modline2 is not None or modline3 is not None :
        err = None

        if fromName is None :
            if modline1 is not None :
                err = msgs.MODULE_IMPORTED_AGAIN % operand
            elif cfg().mixImport :
                err = msgs.MIX_IMPORT_AND_FROM_IMPORT % tmpFromName
        else :
            if modline3 is not None and operand != '*' :
                err = 'from %s import %s' % (tmpFromName, operand)
                err = msgs.MODULE_MEMBER_IMPORTED_AGAIN % err
            elif modline1 is not None :
                if cfg().mixImport and code.getLineNum() != modline1[1] :
                    err = msgs.MIX_IMPORT_AND_FROM_IMPORT % tmpFromName
            else :
                err = msgs.MODULE_MEMBER_ALSO_STAR_IMPORTED % fromName

        # filter out warnings when files are different (ie, from X import ...)
        if err is not None and cfg().moduleImportErrors :
            bytes = module.main_code
            if bytes is None or \
               bytes.function.func_code.co_filename == code.func_code.co_filename :
                code.addWarning(err)

    if main :
        fileline = (code.func_code.co_filename, code.getLineNum())
        module.moduleLineNums[key] = fileline
        if fromName is not None :
            module.moduleLineNums[(fromName,)] = fileline
</t>
<t tx="ekr.20040630154517.83">def _handleImportFrom(code, operand, module, main) :
    fromName = code.stack[-1].data
    if utils.pythonVersion() &lt; utils.PYTHON_2_0 and \
       OP.POP_TOP(code.nextOpInfo()[0]):
        code.popNextOp()
    code.pushStack(Stack.Item(operand, types.ModuleType))
    _handleImport(code, operand, module, main, fromName)
</t>
<t tx="ekr.20040630154517.84"># http://www.python.org/doc/current/lib/typesseq-strings.html
_FORMAT_CONVERTERS = 'diouxXeEfFgGcrs'
# NOTE: lLh are legal in the flags, but are ignored by python, we warn
_FORMAT_FLAGS = '*#- +.' + string.digits

def _getFormatInfo(format, code) :
    vars = []

    # first get rid of all the instances of %% in the string, they don't count
    format = string.replace(format, "%%", "")
    sections = string.split(format, '%')
    percentFormatCount = formatCount = string.count(format, '%')
    mappingFormatCount = 0

    # skip the first item in the list, it's always empty
    for section in sections[1:] :
        orig_section = section
        if not section:
            code.addWarning(msgs.INVALID_FORMAT % orig_section +
                            ' (end of format string)')
            continue

        # handle dictionary formats
        if section[0] == '(' :
            mappingFormatCount = mappingFormatCount + 1
            varname = string.split(section, ')')
            if varname[1] == '' :
                code.addWarning(msgs.INVALID_FORMAT % section)
            vars.append(varname[0][1:])
            section = varname[1]

        if not section :
            # no format data to check
            continue

        # FIXME: we ought to just define a regular expression to check
        # formatRE = '[ #+-]*([0-9]*|*)(|.(|*|[0-9]*)[diouxXeEfFgGcrs].*'
        stars = 0
        for i in range(0, len(section)) :
            if section[i] in _FORMAT_CONVERTERS :
                break
            if section[i] in _FORMAT_FLAGS :
                if section[i] == '*' :
                    stars = stars + 1
                    if mappingFormatCount &gt; 0 :
                        code.addWarning(msgs.USING_STAR_IN_FORMAT_MAPPING % section)

        if stars &gt; 2 :
            code.addWarning(msgs.TOO_MANY_STARS_IN_FORMAT)

        formatCount = formatCount + stars
        if section[i] not in _FORMAT_CONVERTERS :
            code.addWarning(msgs.INVALID_FORMAT % orig_section)

    if mappingFormatCount &gt; 0 and mappingFormatCount != percentFormatCount :
        code.addWarning(msgs.CANT_MIX_MAPPING_IN_FORMATS)

    return formatCount, vars
</t>
<t tx="ekr.20040630154517.85">try:
    unicode, UnicodeError
except NameError:
    UnicodeError = None

def _getConstant(code, module, data) :
    try:
        data = str(data.data)
    except UnicodeError:
        data = unicode(data.data)
    format = code.constants.get(data)
    if format is not None :
        return format

    format = module.variables.get(data)
    if format is not None and format.value is not None :
        return format.value
    return None
</t>
<t tx="ekr.20040630154517.86">_UNCHECKABLE_FORMAT_STACK_TYPES = \
      (Stack.TYPE_UNKNOWN, Stack.TYPE_FUNC_RETURN, Stack.TYPE_ATTRIBUTE,
       Stack.TYPE_GLOBAL, Stack.TYPE_EXCEPT)
_UNCHECKABLE_STACK_TYPES = _UNCHECKABLE_FORMAT_STACK_TYPES + (types.NoneType,)

def _getFormatString(code, codeSource) :
    if len(code.stack) &lt;= 1 :
        return ''

    format = code.stack[-2]
    if format.type != types.StringType or not format.const :
        format = _getConstant(code, codeSource.module, format)
        if format is None or type(format) != types.StringType :
            return ''
        return format
    return format.data
</t>
<t tx="ekr.20040630154517.87">def _getFormatWarnings(code, codeSource) :
    format = _getFormatString(code, codeSource)
    if not format :
        return

    args = 0
    count, vars = _getFormatInfo(format, code)
    topOfStack = code.stack[-1]
    if topOfStack.isLocals() :
        for varname in vars :
            if not code.unusedLocals.has_key(varname) :
                code.addWarning(msgs.NO_LOCAL_VAR % varname)
            else :
                code.unusedLocals[varname] = None
    else :
        stackItemType = topOfStack.getType(code.typeMap)
        if ((stackItemType == types.DictType and len(vars) &gt; 0) or
            codeSource.func.isParam(topOfStack.data) or
            stackItemType in _UNCHECKABLE_FORMAT_STACK_TYPES) :
            return

        if topOfStack.type == types.TupleType :
            args = topOfStack.length
        elif stackItemType == types.TupleType :
            args = len(code.constants.get(topOfStack.data, (0,)))
        else :
            args = 1

    if args and count != args :
        code.addWarning(msgs.INVALID_FORMAT_COUNT % (count, args))
</t>
<t tx="ekr.20040630154517.88">def _checkAttributeType(code, stackValue, attr) :
    if not cfg().checkObjectAttrs :
        return

    varTypes = code.typeMap.get(str(stackValue.data), None)
    if not varTypes :
        return

    # the value may have been converted on stack (`v`)
    other_types = []
    if stackValue.type not in varTypes :
        other_types = [stackValue.type]

    for varType in varTypes + other_types :
        # ignore built-in types that have no attributes
        if python.METHODLESS_OBJECTS.has_key(varType) :
            continue

        attrs = python.BUILTIN_ATTRS.get(varType, None)
        if attrs is not None :
            if attr in attrs :
                return
            continue

        if hasattr(varType, 'ignoreAttrs') :
            if varType.ignoreAttrs or _classHasAttribute(varType, attr) :
                return
        elif not hasattr(varType, 'attributes') or attr in varType.attributes :
            return

    code.addWarning(msgs.OBJECT_HAS_NO_ATTR % (stackValue.data, attr))
</t>
<t tx="ekr.20040630154517.89">def _getTypeStr(t):
    returnStr = str(t)
    strs = string.split(returnStr, "'")
    try:
        if len(strs) == 3:
            returnStr = strs[-2]
    except IndexError:
        pass
    return returnStr
</t>
<t tx="ekr.20040630154517.90">def _getLineNum(co, instr_index):
    co_lnotab = co.co_lnotab
    lineno = co.co_firstlineno
    addr = 0
    for lnotab_index in range(0, len(co_lnotab), 2):
        addr = addr + ord(co_lnotab[lnotab_index])
        if addr &gt; instr_index:
            return lineno
        lineno = lineno + ord(co_lnotab[lnotab_index+1])
    return lineno
</t>
<t tx="ekr.20040630154517.91">

class Code :
	&lt;&lt; class Code declarations &gt;&gt;
	@others
</t>
<t tx="ekr.20040630154517.92">'Hold all the code state information necessary to find warnings'

</t>
<t tx="ekr.20040630154517.93">def __init__(self) :
    self.bytes = None
    self.func = None
    self.func_code = None
    self.index = 0
    self.indexList = []
    self.extended_arg = 0
    self.lastLineNum = 0
    self.maxCode = 0
    self.has_except = 0
    self.try_finally_first = 0
    self.starts_and_ends_with_finally = 0

    self.returnValues = []
    self.raiseValues = []
    self.stack = []

    self.unpackCount = 0
    self.loops = 0
    self.branches = {}

    self.warnings = []

    self.globalRefs = {}
    self.unusedLocals = {}
    self.deletedLocals = {}
    self.functionsCalled = {}
    self.typeMap = {}
    self.constants = {}
    self.codeObjects = {}
</t>
<t tx="ekr.20040630154517.94">def init(self, func) :
    self.func = func
    self.func_code, self.bytes, self.index, self.maxCode, self.extended_arg = \
                    OP.initFuncCode(func.function)
    self.lastLineNum = self.func_code.co_firstlineno

    # initialize the arguments to unused
    for arg in func.arguments() :
        self.unusedLocals[arg] = 0
        self.typeMap[arg] = [ Stack.TYPE_UNKNOWN ]
</t>
<t tx="ekr.20040630154517.95">def getLineNum(self):
    line = self.lastLineNum
    # if we don't have linenum info, calc it from co_lntab &amp; index
    if line == self.func_code.co_firstlineno:
        # FIXME: this could be optimized, if we kept last line info
        line = _getLineNum(self.func_code, self.index - 1)
    return line
</t>
<t tx="ekr.20040630154517.96">def getWarning(self, err, line = None) :
    if line is None :
        line = self.getLineNum()
    return Warning.Warning(self.func_code, line, err)
</t>
<t tx="ekr.20040630154517.97">def addWarning(self, err, line = None) :
    w = err
    if not isinstance(w, Warning.Warning):
        w = self.getWarning(err, line)
    self.warnings.append(w)
</t>
<t tx="ekr.20040630154517.98">def popNextOp(self) :
    self.indexList.append(self.index)
    info = OP.getInfo(self.bytes, self.index, self.extended_arg)
    op, oparg, self.index, self.extended_arg = info
    if op &lt; OP.HAVE_ARGUMENT :
        utils.debug("  %d %s" % (self.indexList[-1], OP.name[op]))
        operand = None
    else :
        operand = OP.getOperand(op, self.func_code, oparg)
        self.label = label = OP.getLabel(op, oparg, self.index)
        utils.debug("  %d %s" % (self.indexList[-1], OP.name[op]), oparg, operand)
        if label != None :
            self.addBranch(label)

    return op, oparg, operand
</t>
<t tx="ekr.20040630154517.99">def nextOpInfo(self, offset = 0) :
    try :
        return OP.getInfo(self.bytes, self.index + offset, 0)[0:3]
    except IndexError :
        return -1, 0, -1
</t>
<t tx="ekr.20040630154517.100">def getFirstOp(self) :
    # find the first real op, maybe we should not check if params are used
    i = extended_arg = 0
    while i &lt; self.maxCode :
        op, oparg, i, extended_arg = OP.getInfo(self.bytes, i, extended_arg)
        if not OP.LINE_NUM(op) :
            if not (OP.LOAD_CONST(op) or OP.LOAD_GLOBAL(op)) :
                return op
    raise RuntimeError('Could not find first opcode in function')
</t>
<t tx="ekr.20040630154517.101">def pushStack(self, item, ignoreStmtWithNoEffect=0):
    self.stack.append(item)
    _checkNoEffect(self, ignoreStmtWithNoEffect)
</t>
<t tx="ekr.20040630154517.102">def popStack(self) :
    if self.stack :
        del self.stack[-1]
</t>
<t tx="ekr.20040630154517.103">def popStackItems(self, count) :
    stackLen = len(self.stack)
    if stackLen &gt; 0 :
        count = min(count, stackLen)
        del self.stack[-count:]
</t>
<t tx="ekr.20040630154517.104">def unpack(self) :
    if self.unpackCount :
        self.unpackCount = self.unpackCount - 1
    else :
        self.popStack()
</t>
<t tx="ekr.20040630154517.105">def __getStringStackType(self, data) :
    try :
        return data.getType({})
    except AttributeError :
        return Stack.TYPE_UNKNOWN
</t>
<t tx="ekr.20040630154517.106">def __getStackType(self) :
    if not self.stack :
        return Stack.TYPE_UNKNOWN

    if not self.unpackCount :
        return self.__getStringStackType(self.stack[-1])

    data = self.stack[-1].data
    if type(data) == types.TupleType :
        try :
            return self.__getStringStackType(data[len(data)-self.unpackCount])
        except IndexError :
            # happens when unpacking a var for which we don't know the size
            pass

    return Stack.TYPE_UNKNOWN
</t>
<t tx="ekr.20040630154517.107">def setType(self, name) :
    valueList = self.typeMap.get(name, [])
    newType = self.__getStackType()
    # longs are being merged with ints, assume they are the same
    # comparisons are really ints anyways
    if newType in (types.LongType, Stack.TYPE_COMPARISON):
        newType = types.IntType
    if newType not in valueList :
        valueList.append(newType)

        # need to ignore various types (Unknown, Func return values, etc)
        # also ignore None, don't care if they use it and a real type
        if valueList and newType not in _UNCHECKABLE_STACK_TYPES and \
           cfg().inconsistentTypes:
            oldTypes = []
            # only add types to the value list that are "interesting"
            for typeToAdd in valueList:
                if typeToAdd not in _UNCHECKABLE_STACK_TYPES and \
                   typeToAdd != newType:
                    oldTypes.append(_getTypeStr(typeToAdd))
            # do we have any "interesting" old types?  if so, warn
            if oldTypes:
                self.addWarning(msgs.INCONSISTENT_TYPE % \
                                (name, oldTypes, _getTypeStr(newType)))
    self.typeMap[name] = valueList
</t>
<t tx="ekr.20040630154517.108">def addReturn(self) :
    if len(self.stack) &gt; 0 :
        value = (self.getLineNum(), self.stack[-1], self.nextOpInfo()[2])
        self.returnValues.append(value)
        self.popStack()
</t>
<t tx="ekr.20040630154517.109">def addRaise(self) :
    self.raiseValues.append((self.getLineNum(), None, self.nextOpInfo()[2]))
</t>
<t tx="ekr.20040630154517.110">def addBranch(self, label) :
    if label is not None :
        self.branches[label] = self.branches.get(label, 0) + 1
</t>
<t tx="ekr.20040630154517.111">def removeBranch(self, label) :
    branch = self.branches.get(label, None)
    if branch is not None :
        if branch == 1 :
            del self.branches[label]
        else :
            self.branches[label] = branch - 1
</t>
<t tx="ekr.20040630154517.112">def remove_unreachable_code(self, label) :
    if len(self.indexList) &gt;= 2 :
        index = self.indexList[-2]
        if index &gt;= 0 and OP.POP_BLOCK(ord(self.bytes[index])) :
            index = self.indexList[-3]
        if index &gt;= 0 :
            op = ord(self.bytes[index])
            if OP.RETURN_VALUE(op) or OP.RAISE_VARARGS(op) or \
               OP.END_FINALLY(ord(self.bytes[label-1])) :
                self.removeBranch(label)
</t>
<t tx="ekr.20040630154517.113">def updateCheckerArgs(self, operand) :
    rc = utils.shouldUpdateArgs(operand)
    if rc :
        utils.updateCheckerArgs(self.stack[-1].data, self.func_code,
                                self.getLineNum(), self.warnings)
    return rc
</t>
<t tx="ekr.20040630154517.114">def updateModuleLineNums(self, module, operand) :
    filelist = (self.func_code.co_filename, self.getLineNum())
    module.moduleLineNums[operand] = filelist
</t>
<t tx="ekr.20040630154517.115">

class CodeSource :
	&lt;&lt; class CodeSource declarations &gt;&gt;
	@others
</t>
<t tx="ekr.20040630154517.116">'Holds source information about a code block (module, class, func, etc)'
</t>
<t tx="ekr.20040630154517.117">def __init__(self, module, func, c, main, in_class, code) :
    self.module = module
    self.func = func
    self.classObject = c
    self.main = main
    self.in_class = in_class
    self.code = code
    self.calling_code = []
</t>
<t tx="ekr.20040630154517.118">def _checkException(code, name) :
    if code.stack and code.stack[-1].type == Stack.TYPE_EXCEPT :
        if __builtins__.has_key(name) :
            code.addWarning(msgs.SET_EXCEPT_TO_BUILTIN % name)
</t>
<t tx="ekr.20040630154517.119">def _checkAssign(code, name):
    if name in _BAD_ASSIGN_NAMES:
        code.addWarning(msgs.SHOULDNT_ASSIGN_BUILTIN % name)
    else:
        cap = string.capitalize(name)
        if cap in _BAD_ASSIGN_NAMES:
            code.addWarning(msgs.SHOULDNT_ASSIGN_NAME % (name, cap))
</t>
<t tx="ekr.20040630154517.120">def _checkVariableOperationOnItself(code, lname, msg):
    if code.stack and code.stack[-1].getName() == lname:
        code.addWarning(msg % lname)
</t>
<t tx="ekr.20040630154517.121">def _checkFutureKeywords(code, varname) :
    kw = python.FUTURE_KEYWORDS.get(varname)
    if kw is not None :
        code.addWarning(msgs.USING_KEYWORD % (varname, kw))
</t>
<t tx="ekr.20040630154517.122">def _STORE_NAME(oparg, operand, codeSource, code) :
    if not code.updateCheckerArgs(operand) :
        _checkFutureKeywords(code, operand)
        module = codeSource.module
        if not codeSource.in_class :
            _checkShadowBuiltin(code, operand)
            if not codeSource.calling_code :
                _checkGlobal(operand, module, codeSource.func, code,
                             msgs.GLOBAL_DEFINED_NOT_DECLARED, codeSource.main)
        else :
            if code.stack :
                codeSource.classObject.statics[operand] = code.stack[-1]
                codeSource.classObject.lineNums[operand] = code.getLineNum()

        var = module.variables.get(operand)
        if var is not None and code.stack and code.stack[-1].const :
            var.value = code.stack[-1].data

        if code.unpackCount :
            code.unpackCount = code.unpackCount - 1
        else:
            _checkAssign(code, operand)
            _checkException(code, operand)
            code.popStack()
        if not module.moduleLineNums.has_key(operand) and codeSource.main :
            code.updateModuleLineNums(module, operand)
</t>
<t tx="ekr.20040630154517.123">_STORE_GLOBAL = _STORE_NAME

def _checkLoadGlobal(codeSource, code, varname) :
    _checkFutureKeywords(code, varname)
    should_check = 1
    if code.func_code.co_name == utils.LAMBDA :
        # this could really be a local reference, check first
        if not codeSource.main and codeSource.calling_code:
            func = getattr(codeSource.calling_code[-1], 'function', None)
            if func is not None and varname in func.func_code.co_varnames :
                _handleLoadLocal(code, codeSource, varname)
                should_check = 0

    if should_check :
        # if a global var starts w/__ and the global is referenced in a class
        # we have to strip off the _class-name, to get the original name
        if codeSource.classObject and \
           utils.startswith(varname, '_' + codeSource.classObject.name + '__'):
            varname = varname[len(codeSource.classObject.name)+1:]
            
        # make sure we remember each global ref to check for unused
        code.globalRefs[_getGlobalName(varname, codeSource.func)] = varname
        if not codeSource.in_class :
            _checkGlobal(varname, codeSource.module, codeSource.func,
                         code, msgs.INVALID_GLOBAL)
</t>
<t tx="ekr.20040630154517.124">def _LOAD_NAME(oparg, operand, codeSource, code) :
    _checkLoadGlobal(codeSource, code, operand)

    # if there was from XXX import *, _* names aren't imported
    if codeSource.module.modules.has_key(operand) and \
       hasattr(codeSource.module.module, operand) :
        operand = getattr(codeSource.module.module, operand).__name__

    opType, const = Stack.TYPE_GLOBAL, 0
    if operand == 'None' :
        opType, const = types.NoneType, 0
    elif operand == 'Ellipsis' :
        opType, const = types.EllipsisType, 1
    code.pushStack(Stack.Item(operand, opType, const))
</t>
<t tx="ekr.20040630154517.125">_LOAD_GLOBAL = _LOAD_NAME

def _LOAD_DEREF(oparg, operand, codeSource, code) :
    if type(oparg) == types.IntType :
        func_code = code.func_code
        if codeSource.calling_code :
            func_code = codeSource.calling_code[-1].function.func_code
        try:
            argname = func_code.co_cellvars[oparg]
        except IndexError:
            argname = func_code.co_freevars[oparg - len(func_code.co_cellvars)]
        code.pushStack(Stack.Item(argname, types.StringType))
        if code.func_code.co_name != utils.LAMBDA :
            code.unusedLocals[argname] = None
    else :
        _LOAD_GLOBAL(oparg, operand, codeSource, code)
</t>
<t tx="ekr.20040630154517.126">_LOAD_CLOSURE = _LOAD_DEREF

def _DELETE_NAME(oparg, operand, codeSource, code) :
    _checkLoadGlobal(codeSource, code, operand)
</t>
<t tx="ekr.20040630154517.127">    # FIXME: handle deleting global multiple times
_DELETE_GLOBAL = _DELETE_NAME

def _LOAD_CONST(oparg, operand, codeSource, code) :
    code.pushStack(Stack.Item(operand, type(operand), 1))
    if type(operand) == types.CodeType :
        name = operand.co_name
        obj = code.codeObjects.get(name, None)
        if name == utils.LAMBDA :
            # use a unique key, so we can have multiple lambdas
            code.codeObjects[code.index] = operand
        elif obj is None :
            code.codeObjects[name] = operand
        elif cfg().redefiningFunction :
            code.addWarning(msgs.REDEFINING_ATTR % (name, obj.co_firstlineno))
</t>
<t tx="ekr.20040630154517.128">def _checkLocalShadow(code, module, varname) :
    if module.variables.has_key(varname) and cfg().shadows :
        line = module.moduleLineNums.get(varname, ('&lt;unknown&gt;', 0))
        w = code.getWarning(msgs.LOCAL_SHADOWS_GLOBAL % (varname, line[1]))
        if line[0] != w.file:
            w.err = '%s in file %s' % (w.err, line[0])
        code.addWarning(w)
</t>
<t tx="ekr.20040630154517.129">def _checkShadowBuiltin(code, varname) :
    if __builtins__.has_key(varname) and varname[0] != '_' and \
       cfg().shadowBuiltins:
        code.addWarning(msgs.VARIABLE_SHADOWS_BUILTIN % varname)
</t>
<t tx="ekr.20040630154517.130">def _checkLoadLocal(code, codeSource, varname, deletedWarn, usedBeforeSetWarn) :
    _checkFutureKeywords(code, varname)
    deletedLine = code.deletedLocals.get(varname)
    if deletedLine :
        code.addWarning(deletedWarn % (varname, deletedLine))
    elif not code.unusedLocals.has_key(varname) and \
         not codeSource.func.isParam(varname) :
        code.addWarning(usedBeforeSetWarn % varname)
    code.unusedLocals[varname] = None
    _checkLocalShadow(code, codeSource.module, varname)
</t>
<t tx="ekr.20040630154517.131">def _handleLoadLocal(code, codeSource, varname) :
    _checkLoadLocal(code, codeSource, varname,
                    msgs.LOCAL_DELETED, msgs.VAR_USED_BEFORE_SET)
</t>
<t tx="ekr.20040630154517.132">def _LOAD_FAST(oparg, operand, codeSource, code) :
    code.pushStack(Stack.Item(operand, type(operand)))
    _handleLoadLocal(code, codeSource, operand)
</t>
<t tx="ekr.20040630154517.133">def _STORE_FAST(oparg, operand, codeSource, code) :
    if not code.updateCheckerArgs(operand) :
        _checkFutureKeywords(code, operand)
        if code.stack and code.stack[-1].type == types.StringType and \
               not code.stack[-1].const:
            _checkVariableOperationOnItself(code, operand,
                                            msgs.SET_VAR_TO_ITSELF)
        code.setType(operand)
        if not code.unpackCount and code.stack and \
           (code.stack[-1].const or code.stack[-1].type == types.TupleType) :
            if code.constants.has_key(operand) :
                del code.constants[operand]
            else :
                code.constants[operand] = code.stack[-1].data

        _checkLocalShadow(code, codeSource.module, operand)
        _checkShadowBuiltin(code, operand)
        _checkAssign(code, operand)
        _checkException(code, operand)
        if code.deletedLocals.has_key(operand) :
            del code.deletedLocals[operand]
        if not code.unusedLocals.has_key(operand) :
            errLine = code.getLineNum()
            if code.unpackCount and not cfg().unusedLocalTuple :
                errLine = -errLine
            code.unusedLocals[operand] = errLine
        code.unpack()
</t>
<t tx="ekr.20040630154517.134">def _DELETE_FAST(oparg, operand, codeSource, code) :
    _checkLoadLocal(code, codeSource, operand,
                    msgs.LOCAL_ALREADY_DELETED, msgs.VAR_DELETED_BEFORE_SET)
    code.deletedLocals[operand] = code.getLineNum()
</t>
<t tx="ekr.20040630154517.135">def _checkAttribute(top, operand, codeSource, code) :
    if top.data == cfg().methodArgName and codeSource.classObject != None :
        _checkClassAttribute(operand, codeSource.classObject, code)
    elif type(top.type) == types.StringType or top.type == types.ModuleType :
        _checkModuleAttribute(operand, codeSource.module, code, top.data)
    else :
        _checkAttributeType(code, top, operand)
</t>
<t tx="ekr.20040630154517.136">def _checkExcessiveReferences(code, top, extraAttr = None) :
    if cfg().maxReferences &lt;= 0 :
        return

    try :
        data = top.data
        if extraAttr is not None :
            data = data + (extraAttr,)
        
        maxReferences = cfg().maxReferences
        if data[0] == cfg().methodArgName:
            maxReferences = maxReferences + 1
        if len(data) &gt; maxReferences :
            name = string.join(top.data, '.')
            code.addWarning(msgs.TOO_MANY_REFERENCES % (maxReferences, name))
    except TypeError :
        pass
</t>
<t tx="ekr.20040630154517.137">def _checkDeprecated(code, identifierTuple):
    # check deprecated module.function
    try:
        name = string.join(identifierTuple, '.')
        undeprecated = python.DEPRECATED_ATTRS[name]
    except (KeyError, TypeError):
        pass
    else:
        msg = msgs.USING_DEPRECATED_ATTR % name
        if undeprecated:
            msg = msg + msgs.USE_INSTEAD % undeprecated
        code.addWarning(msg)
</t>
<t tx="ekr.20040630154517.138">def _LOAD_ATTR(oparg, operand, codeSource, code) :
    if len(code.stack) &gt; 0 :
        top = code.stack[-1]
        _checkAttribute(top, operand, codeSource, code)
        top.addAttribute(operand)

        if len(top.data) == 2:
            if cfg().deprecated:
                _checkDeprecated(code, top.data)

            try:
                insecure = python.SECURITY_FUNCS.get(top.data[0])
            except TypeError:
                pass
            else:
                if insecure and insecure.has_key(operand):
                    func = string.join(top.data, '.')
                    code.addWarning(msgs.USING_INSECURE_FUNC % func)

        nextOp = code.nextOpInfo()[0]
        if not OP.LOAD_ATTR(nextOp) :
            if OP.POP_TOP(nextOp) and cfg().noEffect:
                code.addWarning(msgs.POSSIBLE_STMT_WITH_NO_EFFECT)
            else :
                _checkExcessiveReferences(code, top)
</t>
<t tx="ekr.20040630154517.139">def _ok_to_set_attr(classObject, basename, attr) :
    return (cfg().onlyCheckInitForMembers and classObject != None and
            basename == cfg().methodArgName and 
            not _classHasAttribute(classObject, attr))
</t>
<t tx="ekr.20040630154517.140">def _STORE_ATTR(oparg, operand, codeSource, code) :
    if code.stack :
        top = code.stack.pop()
        top_name = '%s.%s' % (top.getName(), operand)
        try:
            # FIXME: this is a hack to handle code like:
            #        a.a = [x for x in range(2) if x &gt; 1]
            previous = code.stack[-1]
        except IndexError:
            previous = None
        if top.type in (types.StringType, Stack.TYPE_ATTRIBUTE) and \
           previous and previous.type == Stack.TYPE_ATTRIBUTE:
            _checkVariableOperationOnItself(code, top_name,
                                            msgs.SET_VAR_TO_ITSELF)
        _checkExcessiveReferences(code, top, operand)
        if _ok_to_set_attr(codeSource.classObject, top.data, operand) :
            code.addWarning(msgs.INVALID_SET_CLASS_ATTR % operand)
    code.unpack()
</t>
<t tx="ekr.20040630154517.141">def _DELETE_ATTR(oparg, operand, codeSource, code) :
    if len(code.stack) &gt; 0 :
        _checkAttribute(code.stack[-1], operand, codeSource, code)
</t>
<t tx="ekr.20040630154517.142">def _getExceptionInfo(codeSource, item):
    # FIXME: probably ought to try to handle raise module.Error
    if item.type is types.StringType and item.const == 1:
        return item.data, 1

    e = None
    if item.type is Stack.TYPE_GLOBAL:
        try:
            e = eval(item.data)
        except NameError:
            pass

    if not e:
        try:
            c = codeSource.module.classes.get(item.data)
        except TypeError:     # item.data may not be hashable (e.g., list)
            return e, 0

        if c is not None:
            e = c.classObject
        else:
            v = codeSource.module.variables.get(item.data)
            if v is not None:
                return v, 1
    return e, 0
</t>
<t tx="ekr.20040630154517.143">_UNCHECKABLE_CATCH_TYPES = (Stack.TYPE_UNKNOWN, Stack.TYPE_ATTRIBUTE)
def _checkCatchException(codeSource, code, item):
    if not cfg().badExceptions:
        return

    if item.data is None or item.type in _UNCHECKABLE_CATCH_TYPES:
        return

    e, is_str = _getExceptionInfo(codeSource, item)
    if is_str:
        code.addWarning(msgs.CATCH_STR_EXCEPTION % item.data)
    elif e is not None and not _isexception(e):
        code.addWarning(msgs.CATCH_BAD_EXCEPTION % item.data)
</t>
<t tx="ekr.20040630154517.144">def _handleExceptionChecks(codeSource, code, checks):
    for item in checks:
        if item is not None:
            if item.type is not types.TupleType:
                _checkCatchException(codeSource, code, item)
            else:
                for ti in item.data:
                    if isinstance(ti, Stack.Item):
                        _checkCatchException(codeSource, code, ti)
</t>
<t tx="ekr.20040630154517.145">_BOOL_NAMES = ('True', 'False')
_BAD_ASSIGN_NAMES = _BOOL_NAMES + ('None',)

def _checkBoolean(code, checks):
    for item in checks:
        try:
            data = string.capitalize(item.data)
            if item.type is Stack.TYPE_GLOBAL and data in _BOOL_NAMES:
                code.addWarning(msgs.BOOL_COMPARE % item.data)
        except (AttributeError, TypeError):
            # TypeError is necessary for Python 1.5.2
            pass # ignore items that are not a StackItem or a string
</t>
<t tx="ekr.20040630154517.146">def _COMPARE_OP(oparg, operand, codeSource, code) :
    compareValues = _handleComparison(code.stack, operand)
    if oparg == OP.EXCEPT_COMPARISON:
        _handleExceptionChecks(codeSource, code, compareValues)
    elif oparg &lt; OP.IS_COMPARISON:
        _checkBoolean(code, compareValues)
    elif cfg().isLiteral:
        # X is Y   or   X is not Y   comparison
        second_arg = code.stack[-1].data[2]
        # FIXME: how should booleans should e handled, need to think about it
##        if second_arg.const or (second_arg.type == Stack.TYPE_GLOBAL and
##                                second_arg.data in ['True', 'False']):
        if second_arg.const:
            data = second_arg.data
            if second_arg.type is types.DictType:
                data = {}
            not_str = ''
            if oparg != OP.IS_COMPARISON:
                not_str = ' not'
            code.addWarning(msgs.IS_LITERAL % (not_str, data))

    _checkNoEffect(code)
</t>
<t tx="ekr.20040630154517.147">def _IMPORT_NAME(oparg, operand, codeSource, code) :
    code.pushStack(Stack.Item(operand, types.ModuleType))
    nextOp = code.nextOpInfo()[0]
    if not OP.IMPORT_FROM(nextOp) and not OP.IMPORT_STAR(nextOp) :
        _handleImport(code, operand, codeSource.module, codeSource.main, None)
</t>
<t tx="ekr.20040630154517.148">def _IMPORT_FROM(oparg, operand, codeSource, code) :
    _handleImportFrom(code, operand, codeSource.module, codeSource.main)
    # this is necessary for python 1.5 (see STORE_GLOBAL/NAME)
    if utils.pythonVersion() &lt; utils.PYTHON_2_0 :
        code.popStack()
        if not codeSource.main :
            code.unusedLocals[operand] = None
        elif not codeSource.module.moduleLineNums.has_key(operand) :
            code.updateModuleLineNums(codeSource.module, operand)
</t>
<t tx="ekr.20040630154517.149">def _IMPORT_STAR(oparg, operand, codeSource, code) :
    _handleImportFrom(code, '*', codeSource.module, codeSource.main)
</t>
<t tx="ekr.20040630154517.150"># Python 2.3 introduced some optimizations that create problems
# this is a utility for ignoring these cases
def _shouldIgnoreCodeOptimizations(code, bytecodes, offset, length=None):
    if utils.pythonVersion() &lt; utils.PYTHON_2_3:
        return 0

    if length is None:
        length = offset - 1
    try:
        start = code.index - offset
        return bytecodes == code.bytes[start:start+length]
    except IndexError:
        return 0
</t>
<t tx="ekr.20040630154517.151"># In Python 2.3, a, b = 1,2 generates this code:
# ...
# ROT_TWO
# JUMP_FORWARD 2
# DUP_TOP
# POP_TOP
#
# which generates a Possible stmt w/no effect

# ROT_TWO = 2; JUMP_FORWARD = 110; 2, 0 is the offset (2)
_IGNORE_SEQ = '%c%c%c%c' % (2, 110, 2, 0)
def _shouldIgnoreNoEffectWarning(code):
    return _shouldIgnoreCodeOptimizations(code, _IGNORE_SEQ, 5)
</t>
<t tx="ekr.20040630154517.152">def _DUP_TOP(oparg, operand, codeSource, code) :
    if len(code.stack) &gt; 0 :
        code.pushStack(code.stack[-1], _shouldIgnoreNoEffectWarning(code))
</t>
<t tx="ekr.20040630154517.153">def _popn(code, n) :
    if len(code.stack) &gt;= 2 :
        loadValue = code.stack[-2]
        if cfg().modifyDefaultValue and loadValue.type == types.StringType :
            _checkModifyDefaultArg(code, loadValue.data)

    code.popStackItems(n)
</t>
<t tx="ekr.20040630154517.154">def _DELETE_SUBSCR(oparg, operand, codeSource, code) :
    _popn(code, 2)
</t>
<t tx="ekr.20040630154517.155">def _STORE_SUBSCR(oparg, operand, codeSource, code) :
    _popn(code, 3)
</t>
<t tx="ekr.20040630154517.156">def _CALL_FUNCTION(oparg, operand, codeSource, code) :
    _handleFunctionCall(codeSource, code, oparg)
</t>
<t tx="ekr.20040630154517.157">def _CALL_FUNCTION_VAR(oparg, operand, codeSource, code) :
    _handleFunctionCall(codeSource, code, oparg, 1, 0)
</t>
<t tx="ekr.20040630154517.158">def _CALL_FUNCTION_KW(oparg, operand, codeSource, code) :
    _handleFunctionCall(codeSource, code, oparg, 1)
</t>
<t tx="ekr.20040630154517.159">def _CALL_FUNCTION_VAR_KW(oparg, operand, codeSource, code) :
    _handleFunctionCall(codeSource, code, oparg, 2, 0)
</t>
<t tx="ekr.20040630154517.160">def _MAKE_FUNCTION(oparg, operand, codeSource, code) :
    newValue = Stack.makeFuncReturnValue(code.stack[-1], oparg)
    code.popStackItems(oparg+1)
    code.pushStack(newValue)
</t>
<t tx="ekr.20040630154517.161">def _MAKE_CLOSURE(oparg, operand, codeSource, code) :
    _MAKE_FUNCTION(max(0, oparg - 1), operand, codeSource, code)
</t>
<t tx="ekr.20040630154517.162">def _BUILD_MAP(oparg, operand, codeSource, code) :
    _makeConstant(code, oparg, Stack.makeDict)
</t>
<t tx="ekr.20040630154517.163">def _BUILD_TUPLE(oparg, operand, codeSource, code) :
    _makeConstant(code, oparg, Stack.makeTuple)
</t>
<t tx="ekr.20040630154517.164">def _BUILD_LIST(oparg, operand, codeSource, code) :
    _makeConstant(code, oparg, Stack.makeList)
</t>
<t tx="ekr.20040630154517.165">def _BUILD_CLASS(oparg, operand, codeSource, code) :
    newValue = Stack.makeFuncReturnValue(code.stack[-1], types.ClassType)
    code.popStackItems(3)
    code.pushStack(newValue)
</t>
<t tx="ekr.20040630154517.166">def _LIST_APPEND(oparg, operand, codeSource, code):
    code.popStackItems(2)
</t>
<t tx="ekr.20040630154517.167">def _modifyStackName(code, suffix):
    if code.stack:
        tos = code.stack[-1]
        tos_type = type(tos.data)
        if tos_type == types.StringType:
            tos.data = tos.data + suffix
        elif tos_type == types.TupleType and \
             type(tos.data[-1]) == types.StringType:
            tos.data = tos.data[:-1] + (tos.data[-1] + suffix,)
</t>
<t tx="ekr.20040630154517.168">def _UNARY_CONVERT(oparg, operand, codeSource, code) :
    if code.stack:
        stackValue = code.stack[-1]
        if stackValue.data == cfg().methodArgName and \
           stackValue.const == 0 and codeSource.classObject is not None and \
           codeSource.func.function.func_name == '__repr__' :
            code.addWarning(msgs.USING_SELF_IN_REPR)
        stackValue.data = str(stackValue.data)
        stackValue.type = types.StringType
    _modifyStackName(code, '-repr')
</t>
<t tx="ekr.20040630154517.169">def _UNARY_POSITIVE(oparg, operand, codeSource, code) :
    if OP.UNARY_POSITIVE(code.nextOpInfo()[0]) :
        code.addWarning(msgs.STMT_WITH_NO_EFFECT % '++')
        code.popNextOp()
    elif cfg().unaryPositive and code.stack and not code.stack[-1].const :
        code.addWarning(msgs.UNARY_POSITIVE_HAS_NO_EFFECT)
    _modifyStackName(code, '-pos')
</t>
<t tx="ekr.20040630154517.170">def _UNARY_NEGATIVE(oparg, operand, codeSource, code) :
    if OP.UNARY_NEGATIVE(code.nextOpInfo()[0]) :
        code.addWarning(msgs.STMT_WITH_NO_EFFECT % '--')
    _modifyStackName(code, '-neg')
</t>
<t tx="ekr.20040630154517.171">def _UNARY_NOT(oparg, operand, codeSource, code) :
    _modifyStackName(code, '-not')
</t>
<t tx="ekr.20040630154517.172">def _UNARY_INVERT(oparg, operand, codeSource, code) :
    if OP.UNARY_INVERT(code.nextOpInfo()[0]) :
        code.addWarning(msgs.STMT_WITH_NO_EFFECT % '~~')
    _modifyStackName(code, '-invert')
</t>
<t tx="ekr.20040630154517.173">def _popStackRef(code, operand, count = 2) :
    code.popStackItems(count)
    code.pushStack(Stack.Item(operand, Stack.TYPE_UNKNOWN))
</t>
<t tx="ekr.20040630154517.174">def _popModifiedStack(code, suffix=' '):
    code.popStack()
    _modifyStackName(code, suffix)
</t>
<t tx="ekr.20040630154517.175">def _pop(oparg, operand, codeSource, code) :
    code.popStack()
</t>
<t tx="ekr.20040630154517.176">_POP_TOP = _PRINT_ITEM = _pop

def _popModified(oparg, operand, codeSource, code):
    _popModifiedStack(code)
</t>
<t tx="ekr.20040630154517.177">_BINARY_LSHIFT = _BINARY_RSHIFT = _popModified

def _checkModifyNoOp(code, op, msg=msgs.MODIFY_VAR_NOOP, modifyStack=1):
    stack = code.stack
    if len(stack) &gt;= 2:
        name = stack[-1].getName()
        if name != Stack.TYPE_UNKNOWN and name == stack[-2].getName():
            code.addWarning(msg % (name, op, name))

        if modifyStack:
            code.popStack()
            stack[-1].const = 0
            _modifyStackName(code, op)
</t>
<t tx="ekr.20040630154517.178">def _BINARY_AND(oparg, operand, codeSource, code):
    _checkModifyNoOp(code, '&amp;')
</t>
<t tx="ekr.20040630154517.179">def _BINARY_OR(oparg, operand, codeSource, code):
    _checkModifyNoOp(code, '|')
</t>
<t tx="ekr.20040630154517.180">def _BINARY_XOR(oparg, operand, codeSource, code):
    _checkModifyNoOp(code, '^', msgs.XOR_VAR_WITH_ITSELF)
</t>
<t tx="ekr.20040630154517.181">def _PRINT_ITEM_TO(oparg, operand, codeSource, code) :
    code.popStackItems(2)
</t>
<t tx="ekr.20040630154517.182">try:
    ComplexType = types.ComplexType
except NameError:
    ComplexType = types.FloatType    # need some numeric type here

_NUMERIC_TYPES = (types.IntType, types.FloatType, ComplexType)

# FIXME: This is pathetically weak, need to handle more types
def _coerce_type(code) :
    _checkNoEffect(code)
    newItem = Stack.Item('&lt;stack&gt;', Stack.TYPE_UNKNOWN)
    if len(code.stack) &gt;= 2 :
        s1, s2 = code.stack[-2:]
        s1type = s1.getType(code.typeMap)
        s2type = s2.getType(code.typeMap)
        if s1type != s2type :
            if s1type in _NUMERIC_TYPES and s2type in _NUMERIC_TYPES :
                newType = types.FloatType
                if s1type == ComplexType or s2type == ComplexType:
                    newType = ComplexType
                newItem.type = newType

    code.popStackItems(2)
    code.pushStack(newItem)
</t>
<t tx="ekr.20040630154517.183">def _BINARY_ADD(oparg, operand, codeSource, code) :
    stack = code.stack
    if len(stack) &gt;= 2 and (stack[-1].const and stack[-2].const and
                            stack[-1].type == stack[-2].type) :
        value = stack[-2].data + stack[-1].data
        code.popStackItems(2)
        code.pushStack(Stack.Item(value, type(value), 1))
    else :
        _coerce_type(code)
</t>
<t tx="ekr.20040630154517.184">def _BINARY_SUBTRACT(oparg, operand, codeSource, code) :
    _coerce_type(code)
</t>
<t tx="ekr.20040630154517.185">_BINARY_POWER = _BINARY_SUBTRACT

def _BINARY_SUBSCR(oparg, operand, codeSource, code) :
    _checkNoEffect(code)
    if len(code.stack) &gt;= 2 :
        stack = code.stack
        varType = code.typeMap.get(str(stack[-2].data), [])
        if types.ListType in varType and stack[-1].type == types.TupleType :
            code.addWarning(msgs.USING_TUPLE_ACCESS_TO_LIST % stack[-2].data)
    _popStackRef(code, operand)
</t>
<t tx="ekr.20040630154517.186">def _isint(stackItem, code) :
    if type(stackItem.data) == types.IntType :
        return 1
    stackTypes = code.typeMap.get(stackItem.data, [])
    if len(stackTypes) != 1 :
        return 0
    return types.IntType in stackTypes
</t>
<t tx="ekr.20040630154517.187">def _BINARY_DIVIDE(oparg, operand, codeSource, code) :
    _checkNoEffect(code)
    _checkModifyNoOp(code, '/', msgs.DIVIDE_VAR_BY_ITSELF, 0)
    if cfg().intDivide and len(code.stack) &gt;= 2 :
        if _isint(code.stack[-1], code) and _isint(code.stack[-2], code) :
            code.addWarning(msgs.INTEGER_DIVISION % tuple(code.stack[-2:]))

    _popModifiedStack(code, '/')
</t>
<t tx="ekr.20040630154517.188">def _BINARY_TRUE_DIVIDE(oparg, operand, codeSource, code) :
    _checkNoEffect(code)
    _checkVariableOperationOnItself(code, operand, msgs.DIVIDE_VAR_BY_ITSELF)
    _popModifiedStack(code, '/')
</t>
<t tx="ekr.20040630154517.189">_BINARY_FLOOR_DIVIDE = _BINARY_TRUE_DIVIDE

def _BINARY_MULTIPLY(oparg, operand, codeSource, code) :
    if len(code.stack) &gt;= 2 :
        format = _getFormatString(code, codeSource)
        if format and type(code.stack[-1].data) == types.IntType :
            code.stack[-2].data = format * code.stack[-1].data
            code.popStack()
        else:
            _coerce_type(code)
    else:
        _popModifiedStack(code, '*')
</t>
<t tx="ekr.20040630154517.190">def _BINARY_MODULO(oparg, operand, codeSource, code) :
    _checkNoEffect(code)
    if cfg().modulo1 and code.stack and code.stack[-1].data == 1:
        if len(code.stack) &lt; 2 or \
           code.stack[-2].getType(code.typeMap) != types.FloatType:
            code.addWarning(msgs.MODULO_1)
    _getFormatWarnings(code, codeSource)
    _popModifiedStack(code, '%')
    if code.stack:
        code.stack[-1].const = 0
</t>
<t tx="ekr.20040630154517.191">def _ROT_TWO(oparg, operand, codeSource, code) :
    if len(code.stack) &gt;= 2 :
        tmp = code.stack[-2]
        code.stack[-2] = code.stack[-1]
        code.stack[-1] = tmp
</t>
<t tx="ekr.20040630154517.192">def _SETUP_EXCEPT(oparg, operand, codeSource, code) :
    code.has_except = 1
    code.pushStack(Stack.Item(None, Stack.TYPE_EXCEPT))
    code.pushStack(Stack.Item(None, Stack.TYPE_EXCEPT))
</t>
<t tx="ekr.20040630154517.193">def _SETUP_FINALLY(oparg, operand, codeSource, code) :
    if not code.has_except :
        code.try_finally_first = 1
</t>
<t tx="ekr.20040630154517.194">def _END_FINALLY(oparg, operand, codeSource, code) :
    if code.try_finally_first and code.index == (len(code.bytes) - 4) :
        code.starts_and_ends_with_finally = 1
</t>
<t tx="ekr.20040630154517.195">def _LINE_NUM(oparg, operand, codeSource, code) :
    code.lastLineNum = oparg
</t>
<t tx="ekr.20040630154517.196">def _UNPACK_SEQUENCE(oparg, operand, codeSource, code) :
    code.unpackCount = oparg
    if code.stack:
        top = code.stack[-1]
        # if we know we have a tuple, make sure we unpack it into the
        # right # of variables
        topType = top.getType(code.typeMap)
        if topType in _SEQUENCE_TYPES:
            length = top.length
            # we don't know the length, maybe it's constant and we can find out
            if length == 0:
                value = code.constants.get(str(top.data))
                if type(value) in _SEQUENCE_TYPES:
                    length = len(value)
            if length &gt; 0 and length != oparg:
                if cfg().unpackLength:
                    code.addWarning(msgs.WRONG_UNPACK_SIZE % (length, oparg))
        elif topType not in _UNCHECKABLE_STACK_TYPES:
            if cfg().unpackNonSequence:
                code.addWarning(msgs.UNPACK_NON_SEQUENCE %
                                (top.data, _getTypeStr(topType)))
        _modifyStackName(code, '-unpack')
</t>
<t tx="ekr.20040630154517.197">def _SLICE_1_ARG(oparg, operand, codeSource, code) :
    _popStackRef(code, operand)
</t>
<t tx="ekr.20040630154517.198">_SLICE1 = _SLICE2 = _SLICE_1_ARG

def _SLICE3(oparg, operand, codeSource, code) :
    _popStackRef(code, operand, 3)
</t>
<t tx="ekr.20040630154517.199">def _check_string_iteration(code, index):
    try:
        item = code.stack[index]
    except IndexError:
        return
    if item.getType(code.typeMap) == types.StringType and \
       cfg().stringIteration:
        code.addWarning(msgs.STRING_ITERATION % item.data)
</t>
<t tx="ekr.20040630154517.200">def _FOR_LOOP(oparg, operand, codeSource, code) :
    code.loops = code.loops + 1
    _check_string_iteration(code, -2)
    _popStackRef(code, '&lt;for_loop&gt;', 2)
</t>
<t tx="ekr.20040630154517.201">def _GET_ITER(oparg, operand, codeSource, code) :
    _check_string_iteration(code, -1)
</t>
<t tx="ekr.20040630154517.202">def _FOR_ITER(oparg, operand, codeSource, code) :
    code.loops = code.loops + 1
    _popStackRef(code, '&lt;for_iter&gt;', 1)
</t>
<t tx="ekr.20040630154517.203">def _jump(oparg, operand, codeSource, code) :
    if len(code.stack) &gt; 0 :
        topOfStack = code.stack[-1]
        if topOfStack.isMethodCall(codeSource.classObject, cfg().methodArgName):
            name = topOfStack.data[-1]
            if codeSource.classObject.methods.has_key(name) :
                code.addWarning(msgs.USING_METHOD_AS_ATTR % name)
</t>
<t tx="ekr.20040630154517.204">_JUMP_ABSOLUTE = _jump

def _skip_loops(bytes, i, lastLineNum, max) :
    extended_arg = 0
    blockCount = 1
    while i &lt; max :
        op, oparg, i, extended_arg = OP.getInfo(bytes, i, extended_arg)
        if OP.LINE_NUM(op) :
            lastLineNum = oparg
        elif OP.FOR_LOOP(op) or OP.FOR_ITER(op) or OP.SETUP_LOOP(op) :
            blockCount = blockCount + 1
        elif OP.POP_BLOCK(op) :
            blockCount = blockCount - 1
            if blockCount &lt;= 0 :
                break

    return lastLineNum, i
</t>
<t tx="ekr.20040630154517.205">def _is_unreachable(code, topOfStack, branch, if_false) :
    # Are we are checking exceptions, but we not catching all exceptions?
    if (topOfStack.type == Stack.TYPE_COMPARISON and 
        topOfStack.data[1] == 'exception match' and 
        topOfStack.data[2] is not Exception) :
        return 1

    # do we possibly have while 1: ?
    if not (topOfStack.const and topOfStack.data == 1 and if_false) :
        return 0

    # get the op just before the branch (ie, -3)
    op, oparg, i, extended_arg = OP.getInfo(code.bytes, branch - 3, 0)
    # are we are jumping to before the while 1: (LOAD_CONST, JUMP_IF_FALSE)
    if not (OP.JUMP_ABSOLUTE(op) and oparg == (code.index - 3*3)) :
        return 0

    # check if we break out of the loop
    i = code.index
    lastLineNum = code.getLineNum()
    while i &lt; branch :
        op, oparg, i, extended_arg = OP.getInfo(code.bytes, i, extended_arg)
        if OP.LINE_NUM(op) :
            lastLineNum = oparg
        elif OP.BREAK_LOOP(op) :
            return 0
        elif OP.FOR_LOOP(op) or OP.FOR_ITER(op) or OP.SETUP_LOOP(op) :
            lastLineNum, i = _skip_loops(code.bytes, i, lastLineNum, branch)

    i = code.index - 3*4
    op, oparg, i, extended_arg = OP.getInfo(code.bytes, i, 0)
    if OP.SETUP_LOOP(op) :
        # a little lie to pretend we have a raise after a while 1:
        code.removeBranch(i + oparg)
        code.raiseValues.append((lastLineNum, None, i + oparg))
    return 1
</t>
<t tx="ekr.20040630154517.206"># In Python 2.3, while/if 1: gets optimized to
# ...
# JUMP_FORWARD 4
# JUMP_IF_FALSE ?
# POP_TOP
#
# which generates a Using a conditional statement with a constant value

# JUMP_FORWARD = 110; 4, 0 is the offset (4)
_IGNORE_BOGUS_JUMP = '%c%c%c' % (110, 4, 0)
def _shouldIgnoreBogusJumps(code):
    return _shouldIgnoreCodeOptimizations(code, _IGNORE_BOGUS_JUMP, 6, 3)
</t>
<t tx="ekr.20040630154517.207">def _checkConstantCondition(code, topOfStack, if_false):
    # don't warn when doing (test and 'true' or 'false')
    # still warn when doing (test and None or 'false')
    if if_false or not OP.LOAD_CONST(code.nextOpInfo(1)[0]) or \
       not topOfStack.data or topOfStack.type is types.NoneType:
        if not _shouldIgnoreBogusJumps(code):
            code.addWarning(msgs.CONSTANT_CONDITION % str(topOfStack))
</t>
<t tx="ekr.20040630154517.208">def _jump_conditional(oparg, operand, codeSource, code, if_false) :
    # FIXME: this doesn't work in 2.3+ since constant conditions
    #        are optimized away by the compiler.
    if code.stack :
        topOfStack = code.stack[-1]
        if (topOfStack.const or topOfStack.type is types.NoneType) and \
           cfg().constantConditions and \
           (topOfStack.data != 1 or cfg().constant1):
            _checkConstantCondition(code, topOfStack, if_false)

        if _is_unreachable(code, topOfStack, code.label, if_false) :
            code.removeBranch(code.label)

    _jump(oparg, operand, codeSource, code)
</t>
<t tx="ekr.20040630154517.209">def _JUMP_IF_FALSE(oparg, operand, codeSource, code) :
    _jump_conditional(oparg, operand, codeSource, code, 1)
</t>
<t tx="ekr.20040630154517.210">def _JUMP_IF_TRUE(oparg, operand, codeSource, code) :
    _jump_conditional(oparg, operand, codeSource, code, 0)
</t>
<t tx="ekr.20040630154517.211">def _JUMP_FORWARD(oparg, operand, codeSource, code) :
    _jump(oparg, operand, codeSource, code)
    code.remove_unreachable_code(code.label)
</t>
<t tx="ekr.20040630154517.212">def _RETURN_VALUE(oparg, operand, codeSource, code) :
    if not codeSource.calling_code :
        code.addReturn()
</t>
<t tx="ekr.20040630154517.213">def _EXEC_STMT(oparg, operand, codeSource, code) :
    if cfg().usesExec :
        if code.stack and code.stack[-1].isNone() :
            code.addWarning(msgs.USES_GLOBAL_EXEC)
        else :
            code.addWarning(msgs.USES_EXEC)
</t>
<t tx="ekr.20040630154517.214">def _checkStrException(code, varType, item):
    if varType is types.StringType:
        code.addWarning(msgs.RAISE_STR_EXCEPTION % item.data)
</t>
<t tx="ekr.20040630154517.215">def _RAISE_VARARGS(oparg, operand, codeSource, code) :
    code.addRaise()
    if not cfg().badExceptions:
        return

    if oparg &gt; 0 and len(code.stack) &gt;= oparg:
        item = code.stack[-oparg]
        if item.type not in (Stack.TYPE_FUNC_RETURN, Stack.TYPE_UNKNOWN):
            if item.type is Stack.TYPE_GLOBAL:
                e, is_str = _getExceptionInfo(codeSource, item)
                if is_str:
                    _checkStrException(code, e.type, item)
                elif e is not None and not _isexception(e):
                    code.addWarning(msgs.RAISE_BAD_EXCEPTION % item.data)
            else:
                _checkStrException(code, item.getType(code.typeMap), item)
</t>
<t tx="ekr.20040630154517.216">@ignore
@language python
&lt;&lt; Config declarations &gt;&gt;
@others
</t>
<t tx="ekr.20040630154517.217">#!/usr/bin/env python

# Copyright (c) 2001-2004, MetaSlash Inc.  All rights reserved.

"""
Configuration information for checker.
"""

import sys
import os
import getopt
import string
import re
import time

_RC_FILE = ".pycheckrc"
CHECKER_VAR = '__pychecker__'
_VERSION = '0.8.14'

_DEFAULT_BLACK_LIST = [ "Tkinter", "wxPython", "gtk", "GTK", "GDK", ]
_DEFAULT_VARIABLE_IGNORE_LIST = [ '__version__', '__warningregistry__', 
                                  '__all__', '__credits__', '__test__',
                                  '__author__', '__email__', '__revision__', ]
_DEFAULT_UNUSED_LIST = [ '_', 'empty', 'unused', 'dummy', ]

# All these options are on even if -e/--errors is used
_ERRORS = { 'noEffect': 1, }

_OPTIONS = (
    ('Major Options', [
 ('e', 0, 'errors', None, 'turn off all warnings which are not likely errors'),
 ( '', 0, 'complexity', None, 'turn off all warnings which are related to complexity'),
 ('F', 1, 'config', None, 'specify .pycheckrc file to use'),
 ('',  0, 'quixote', None, 'support Quixote\'s PTL modules'),
     ]),
    ('Error Control', [
 ('i', 0, 'import', 'importUsed', 'unused imports'),
 ('k', 0, 'pkgimport', 'packageImportUsed', 'unused imports from __init__.py'),
 ('M', 0, 'reimportself', 'reimportSelf', 'module imports itself'),
 ('X', 0, 'reimport', 'moduleImportErrors', 'reimporting a module'),
 ('x', 0, 'miximport', 'mixImport', 'module does import and from ... import'),
 ('l', 0, 'local', 'localVariablesUsed', 'unused local variables, except tuples'),
 ('t', 0, 'tuple', 'unusedLocalTuple', 'all unused local variables, including tuples'),
 ('9', 0, 'members', 'membersUsed', 'all unused class data members'),
 ('v', 0, 'var', 'allVariablesUsed', 'all unused module variables'),
 ('p', 0, 'privatevar', 'privateVariableUsed', 'unused private module variables'),
 ('g', 0, 'allglobals', 'reportAllGlobals', 'report each occurrence of global warnings'),
 ('n', 0, 'namedargs', 'namedArgs', 'functions called with named arguments (like keywords)'),
 ('a', 0, 'initattr', 'onlyCheckInitForMembers', 'Attributes (members) must be defined in __init__()'),
 ('I', 0, 'initsubclass', 'initDefinedInSubclass', 'Subclass.__init__() not defined'),
 ('u', 0, 'callinit', 'baseClassInitted', 'Baseclass.__init__() not called'),
 ('0', 0, 'abstract', 'abstractClasses', 'Subclass needs to override methods that only throw exceptions'),
 ('N', 0, 'initreturn', 'returnNoneFromInit', 'Return None from __init__()'),
 ('8', 0, 'unreachable', 'unreachableCode', 'unreachable code'),
 ('2', 0, 'constCond', 'constantConditions', 'a constant is used in a conditional statement'),
 ('1', 0, 'constant1', 'constant1', '1 is used in a conditional statement (if 1: or while 1:)'),
 ( '', 0, 'stringiter', 'stringIteration', 'check if iterating over a string'),
 ( '', 0, 'stringfind', 'stringFind', 'check improper use of string.find()'),
 ('A', 0, 'callattr', 'callingAttribute', 'Calling data members as functions'),
 ('y', 0, 'classattr', 'classAttrExists', 'class attribute does not exist'),
 ('S', 1, 'self', 'methodArgName', 'First argument to methods'),
 ('',  1, 'classmethodargs', 'classmethodArgNames', 'First argument to classmethods'),
 ('T', 0, 'argsused', 'argumentsUsed', 'unused method/function arguments'),
 ('z', 0, 'varargsused', 'varArgumentsUsed', 'unused method/function variable arguments'),
 ('G', 0, 'selfused', 'ignoreSelfUnused', 'ignore if self is unused in methods'),
 ('o', 0, 'override', 'checkOverridenMethods', 'check if overridden methods have the same signature'),
 ('',  0, 'special', 'checkSpecialMethods', 'check if __special__ methods exist and have the correct signature'),
 ('U', 0, 'reuseattr', 'redefiningFunction', 'check if function/class/method names are reused'),
 ('Y', 0, 'positive', 'unaryPositive', 'check if using unary positive (+) which is usually meaningless'),
 ('j', 0, 'moddefvalue', 'modifyDefaultValue', 'check if modify (call method) on a parameter that has a default value'),
 ( '', 0, 'changetypes', 'inconsistentTypes', 'check if variables are set to different types'),
 ( '', 0, 'unpack', 'unpackNonSequence', 'check if unpacking a non-sequence'),
 ( '', 0, 'unpacklen', 'unpackLength', 'check if unpacking sequence with the wrong length'),
 ( '', 0, 'badexcept', 'badExceptions', 'check if raising or catching bad exceptions'),
 ('4', 0, 'noeffect', 'noEffect', 'check if statement appears to have no effect'),
 ('',  0, 'modulo1', 'modulo1', 'check if using (expr % 1), it has no effect on integers and strings'),
 ('',  0, 'isliteral', 'isLiteral', "check if using (expr is const-literal), doesn't always work on integers and strings"),
     ]),
    ('Possible Errors', [
 ('r', 0, 'returnvalues', 'checkReturnValues', 'check consistent return values'),
 ('C', 0, 'implicitreturns', 'checkImplicitReturns', 'check if using implict and explicit return values'),
 ('O', 0, 'objattrs', 'checkObjectAttrs', 'check that attributes of objects exist'),
 ('7', 0, 'slots', 'slots', 'various warnings about incorrect usage of __slots__'),
 ('3', 0, 'properties', 'classicProperties', 'using properties with classic classes'),
 ( '', 0, 'emptyslots', 'emptySlots', 'check if __slots__ is empty'),
 ('D', 0, 'intdivide', 'intDivide', 'check if using integer division'),
 ('w', 0, 'shadow', 'shadows', 'check if local variable shadows a global'),
 ('s', 0, 'shadowbuiltin', 'shadowBuiltins', 'check if a variable shadows a builtin'),
     ]),
    ('Security', [
 ( '', 0, 'input', 'usesInput', 'check if input() is used'),
 ('6', 0, 'exec', 'usesExec', 'check if the exec statement is used'),
     ]),
    ('Suppressions', [
 ('q', 0, 'stdlib', 'ignoreStandardLibrary', 'ignore warnings from files under standard library'),
 ('b', 1, 'blacklist', 'blacklist', 'ignore warnings from the list of modules\n\t\t\t'),
 ('Z', 1, 'varlist', 'variablesToIgnore', 'ignore global variables not used if name is one of these values\n\t\t\t'),
 ('E', 1, 'unusednames', 'unusedNames', 'ignore unused locals/arguments if name is one of these values\n\t\t\t'),
 ( '', 0, 'deprecated', 'deprecated', 'ignore use of deprecated modules/functions'),
     ]),
    ('Complexity', [
 ('L', 1, 'maxlines', 'maxLines', 'maximum lines in a function'),
 ('B', 1, 'maxbranches', 'maxBranches', 'maximum branches in a function'),
 ('R', 1, 'maxreturns', 'maxReturns', 'maximum returns in a function'),
 ('J', 1, 'maxargs', 'maxArgs', 'maximum # of arguments to a function'),
 ('K', 1, 'maxlocals', 'maxLocals', 'maximum # of locals in a function'),
 ('5', 1, 'maxrefs', 'maxReferences', 'maximum # of identifier references (Law of Demeter)'),
 ('m', 0, 'moduledoc', 'noDocModule', 'no module doc strings'),
 ('c', 0, 'classdoc', 'noDocClass', 'no class doc strings'),
 ('f', 0, 'funcdoc', 'noDocFunc', 'no function/method doc strings'),
     ]),
    ('Debug', [
 ( '', 0, 'rcfile', None, 'print a .pycheckrc file generated from command line args'),
 ('P', 0, 'printparse', 'printParse', 'print internal checker parse structures'),
 ('d', 0, 'debug', 'debug', 'turn on debugging for checker'),
 ('Q', 0, 'quiet', None, 'turn off all output except warnings'),
 ('V', 0, 'version', None, 'print the version of PyChecker and exit'),
     ])
)</t>
<t tx="ekr.20040630154517.218">def init() :
    GET_OPT_VALUE = (('', ''), (':', '='),)
    shortArgs, longArgs = "", []
    for _, group in _OPTIONS :
        for opt in group:
            optStr = GET_OPT_VALUE[opt[1]]
            shortArgs = shortArgs + opt[0] + optStr[0]
            longArgs.append(opt[2] + optStr[1])
            longArgs.append('no-' + opt[2] + optStr[1])

    options = {}
    for _, group in _OPTIONS :
        for opt in group:
            shortArg, useValue, longArg, member, description = opt
            if shortArg != '' :
                options['-' + shortArg] = opt
            options['--no-' + longArg] = options['--' + longArg] = opt

    return shortArgs, longArgs, options
</t>
<t tx="ekr.20040630154517.219">_SHORT_ARGS, _LONG_ARGS, _OPTIONS_DICT = init()

def _getRCfiles(filename) :
    """Return a list of .rc filenames, on Windows use the current directory
                                       on UNIX use the user's home directory
    """

    files = []
    home = os.environ.get('HOME')
    if home :
        files.append(home + os.sep + filename)
    files.append(filename)
    return files
</t>
<t tx="ekr.20040630154517.220">_RC_FILE_HEADER = '''#
# .pycheckrc file created by PyChecker v%s @ %s
#
# It should be placed in your home directory (value of $HOME).
# If $HOME is not set, it will look in the current directory.
#

'''

def outputRc(cfg) :
    output = _RC_FILE_HEADER % (_VERSION, time.ctime(time.time()))
    for name, group in _OPTIONS :
        for opt in group:
            shortArg, useValue, longArg, member, description = opt
            if member is None :
                continue
            description = string.strip(description)
            value = getattr(cfg, member)
            optStr = '# %s\n%s = %s\n\n' % (description, member, `value`)
            output = output + optStr

    return output
</t>
<t tx="ekr.20040630154517.221">        

class UsageError(Exception) :
    """Exception to indicate that the application should exit due to
       command line usage error."""
</t>
<t tx="ekr.20040630154517.222">_SUPPRESSIONS_ERR = \
'''\nWarning, error processing defaults file: %s
\%s must be a dictionary ({}) -- ignoring suppressions\n'''

def _getSuppressions(name, dict, filename) :
    suppressions = dict.get(name, {})
    if type(suppressions) != type({}) :
        print _SUPPRESSIONS_ERR % (filename, name)
        suppressions = {}
    return suppressions
</t>
<t tx="ekr.20040630154517.223">

class Config :
	&lt;&lt; class Config declarations &gt;&gt;
	@others
</t>
<t tx="ekr.20040630154517.224">"Hold configuration information"

</t>
<t tx="ekr.20040630154517.225">def __init__(self) :
    "Initialize configuration with default values."

    self.debug = 0
    self.quiet = 0
    self.onlyCheckInitForMembers = 0
    self.printParse = 0
    self.quixote = 0

    self.noDocModule = 0
    self.noDocClass = 0
    self.noDocFunc = 0

    self.reportAllGlobals = 0
    self.allVariablesUsed = 0
    self.privateVariableUsed = 1
    self.membersUsed = 0
    self.importUsed = 1
    self.reimportSelf = 1
    self.moduleImportErrors = 1
    self.mixImport = 1
    self.packageImportUsed = 1
    self.localVariablesUsed = 1
    self.unusedLocalTuple = 0
    self.initDefinedInSubclass = 0
    self.baseClassInitted = 1
    self.abstractClasses = 1
    self.callingAttribute = 0
    self.classAttrExists = 1
    self.namedArgs = 0
    self.returnNoneFromInit = 1
    self.unreachableCode = 0
    self.constantConditions = 1
    self.constant1 = 0
    self.stringIteration = 1
    self.inconsistentTypes = 0
    self.unpackNonSequence = 1
    self.unpackLength = 1
    self.badExceptions = 1
    self.noEffect = 1
    self.deprecated = 1
    self.modulo1 = 1
    self.isLiteral = 1
    self.stringFind = 1

    self.unusedNames = _DEFAULT_UNUSED_LIST
    self.variablesToIgnore = _DEFAULT_VARIABLE_IGNORE_LIST
    self.blacklist = _DEFAULT_BLACK_LIST
    self.ignoreStandardLibrary = 0
    self.methodArgName = 'self'
    self.classmethodArgNames = ['cls', 'klass']
    self.checkOverridenMethods = 1
    self.checkSpecialMethods = 1

    self.argumentsUsed = 1
    self.varArgumentsUsed = 1
    self.ignoreSelfUnused = 0
    self.redefiningFunction = 1

    self.maxLines = 200
    self.maxBranches = 50
    self.maxReturns = 10
    self.maxArgs = 10
    self.maxLocals = 40
    self.maxReferences = 5

    self.slots = 1
    self.emptySlots = 1
    self.classicProperties = 1
    self.checkObjectAttrs = 1
    self.checkReturnValues = 1
    self.checkImplicitReturns = 1
    self.intDivide = 1
    self.shadows = 1
    self.shadowBuiltins = 1
    self.unaryPositive = 1
    self.modifyDefaultValue = 1
    self.usesExec = 0
    self.usesInput = 1
    self.constAttr = 1
</t>
<t tx="ekr.20040630154517.226">def loadFile(self, filename) :
    suppressions = {}
    suppressionRegexs = {}
    try :
        tmpGlobal, dict = {}, {}
        execfile(filename, tmpGlobal, dict)
        for key, value in dict.items() :
            if self.__dict__.has_key(key) :
                self.__dict__[key] = value
            elif key not in ('suppressions', 'suppressionRegexs') and \
                 key[0] != '_':
                print "Warning, option (%s) doesn't exist, ignoring" % key

        suppressions = _getSuppressions('suppressions', dict, filename)
        regexs = _getSuppressions('suppressionRegexs', dict, filename)
        for regex_str in regexs.keys() :
            regex = re.compile(regex_str)
            suppressionRegexs[regex] = regexs[regex_str]
    except IOError :
        pass       # ignore if no file
    except Exception, detail:
        print "Warning, error loading defaults file:", filename, detail
    return suppressions, suppressionRegexs
</t>
<t tx="ekr.20040630154517.227">def loadFiles(self, filenames, oldSuppressions = None) :
    if oldSuppressions is None :
        oldSuppressions = ({}, {})
    suppressions = oldSuppressions[0]
    suppressionRegexs = oldSuppressions[1]
    for filename in filenames:
        updates = self.loadFile(filename)
        suppressions.update(updates[0])
        suppressionRegexs.update(updates[1])
    return suppressions, suppressionRegexs
</t>
<t tx="ekr.20040630154517.228">def processArgs(self, argList, otherConfigFiles = None) :
    try :
        args, files = getopt.getopt(argList, _SHORT_ARGS, _LONG_ARGS)
    except getopt.error, detail :
        raise UsageError, detail

    quiet = self.quiet
    if otherConfigFiles is None:
        otherConfigFiles = []
    for arg, value in args :
        shortArg, useValue, longArg, member, description = _OPTIONS_DICT[arg]
        if member == None :
            # FIXME: this whole block is a hack
            if longArg == 'rcfile' :
                sys.stdout.write(outputRc(self))
                continue
            elif longArg == 'quiet' :
                quiet = 1
                continue
            elif longArg == 'quixote' :
                import quixote
                quixote.enable_ptl()
                self.quixote = 1
                continue
            elif longArg == 'config' :
                otherConfigFiles.append(value)
                continue
            elif longArg == 'version' :
                # FIXME: it would be nice to define this in only one place
                print _VERSION
                sys.exit(0)

            self.noDocModule = 0
            self.noDocClass = 0
            self.noDocFunc = 0
            if longArg == 'errors' :
                self.__dict__.update(errors_only())
            elif longArg == 'complexity' :
                self.__dict__.update(errors_only(2))
        elif value  :
            newValue = value
            memberType = type(getattr(self, member))
            if memberType == type(0) :
                newValue = int(newValue)
            elif memberType == type([]) :
                newValue = string.split(newValue, ',')
            elif memberType == type('') and \
                 newValue[0] in '\'"':
                    try:
                        newValue = eval(newValue)
                    except:
                        msg = 'Invalid option parameter: %s for %s\n' % \
                              (`newValue`, arg)
                        sys.stderr.write(msg)
            setattr(self, member, newValue)
        elif arg[0:2] == '--' :
            setattr(self, member, arg[2:5] != 'no-')
        else :
            # for shortArgs we only toggle
            setattr(self, member, not getattr(self, member))

    self.quiet = quiet
    if self.variablesToIgnore.count(CHECKER_VAR) &lt;= 0 :
        self.variablesToIgnore.append(CHECKER_VAR)

    return files
</t>
<t tx="ekr.20040630154517.229">def errors_only(complexity = 0) :
    "Return {} of Config with all warnings turned off"
    dict = Config().__dict__
    for k, v in dict.items() :
        if type(v) == type(0) and v &gt;= complexity and not _ERRORS.has_key(k):
            dict[k] = 0
    return dict
</t>
<t tx="ekr.20040630154517.230">def printArg(shortArg, longArg, description, defaultValue, useValue) :
    defStr = ''
    shortArgStr = '   '
    if shortArg:
        shortArgStr = '-%s,' % shortArg

    if defaultValue != None :
        if not useValue :
            if defaultValue :
                defaultValue = 'on'
            else :
                defaultValue = 'off'
        defStr = ' [%s]' % defaultValue
    args = "%s --%s" % (shortArgStr, longArg)
    print "  %-18s %s%s" % (args, description, defStr)
</t>
<t tx="ekr.20040630154517.231">def usage(cfg = None) :
    print "Usage for: checker.py [options] PACKAGE ...\n"
    print "    PACKAGEs can be a python package, module or filename\n"
    print "Long options can be preceded with no- to turn off (e.g., no-namedargs)\n"
    print "Category"
    print "  Options:           Change warning for ... [default value]"
    
    if cfg is None :
        cfg = Config()
    for name, group in _OPTIONS :
        print
        print name + ":"
        for opt in group:  
            shortArg, useValue, longArg, member, description = opt
            defValue = None
            if member != None :
                defValue = cfg.__dict__[member]

            printArg(shortArg, longArg, description, defValue, useValue)
</t>
<t tx="ekr.20040630154517.232">def setupFromArgs(argList) :
    "Returns (Config, [ file1, file2, ... ]) from argList"

    cfg = Config()
    try :
        suppressions = cfg.loadFiles(_getRCfiles(_RC_FILE))
        otherConfigFiles = []
        files = cfg.processArgs(argList, otherConfigFiles)
        if otherConfigFiles:
            suppressions = cfg.loadFiles(otherConfigFiles, suppressions)
        return cfg, files, suppressions
    except UsageError :
        usage(cfg)
        raise
</t>
<t tx="ekr.20040630154517.233">@ignore
@language python
&lt;&lt; function declarations &gt;&gt;
@others
</t>
<t tx="ekr.20040630154517.234">#!/usr/bin/env python

# Copyright (c) 2001-2002, MetaSlash Inc.  All rights reserved.

"""
Object to hold information about functions.
Also contain a pseudo Python function object
"""

import string

_ARGS_ARGS_FLAG = 4
_KW_ARGS_FLAG = 8
_CO_FLAGS_MASK = _ARGS_ARGS_FLAG + _KW_ARGS_FLAG

</t>
<t tx="ekr.20040630154517.235">class _ReturnValues:
	@others
</t>
<t tx="ekr.20040630154517.236">def __init__(self):
    self.returnValues = None
</t>
<t tx="ekr.20040630154517.237">def returnsNoValue(self):
    returnValues = self.returnValues
    # if unset, we don't know
    if returnValues is None:
        return 0
    # it's an empty list, that means no values
    if not returnValues:
        return 1
    # make sure each value is not None
    for rv in returnValues:
        if not rv[1].isNone():
            return 0
    return returnValues[-1][1].isImplicitNone()
</t>
<t tx="ekr.20040630154517.238">
class FakeCode :
	&lt;&lt; class FakeCode declarations &gt;&gt;
	@others
</t>
<t tx="ekr.20040630154517.239">"This is a holder class for code objects (so we can modify them)"
</t>
<t tx="ekr.20040630154517.240">def __init__(self, code, varnames = None) :
    for attr in dir(code):
        try:
            setattr(self, attr, getattr(code, attr))
        except:
            pass
    if varnames is not None:
        self.co_varnames = varnames
</t>
<t tx="ekr.20040630154517.241">
class FakeFunction(_ReturnValues):
	&lt;&lt; class FakeFunction declarations &gt;&gt;
	@others
</t>
<t tx="ekr.20040630154517.242">"This is a holder class for turning code at module level into a function"

</t>
<t tx="ekr.20040630154517.243">def __init__(self, name, code, func_globals = {}, varnames = None) :
    _ReturnValues.__init__(self)
    self.func_name = self.__name__ = name
    self.func_doc  = self.__doc__  = "ignore"

    self.func_code = FakeCode(code, varnames)
    self.func_defaults = None
    self.func_globals = func_globals
</t>
<t tx="ekr.20040630154517.244">def __str__(self):
    return self.func_name
</t>
<t tx="ekr.20040630154517.245">def __repr__(self):
    return '%s from %s' % (self.func_name, self.func_code.co_filename)
</t>
<t tx="ekr.20040630154517.246">
class Function(_ReturnValues):
	&lt;&lt; class Function declarations &gt;&gt;
	@others
</t>
<t tx="ekr.20040630154517.247">"Class to hold all information about a function"

</t>
<t tx="ekr.20040630154517.248">def __init__(self, function, isMethod=0):
    _ReturnValues.__init__(self)
    self.function = function
    self.isMethod = isMethod
    self.minArgs = self.maxArgs = function.func_code.co_argcount
    if function.func_defaults is not None :
        self.minArgs = self.minArgs - len(function.func_defaults)
    # if function uses *args, there is no max # args
    try:
        if function.func_code.co_flags &amp; _ARGS_ARGS_FLAG != 0 :
            self.maxArgs = None
        self.supportsKW = function.func_code.co_flags &amp; _KW_ARGS_FLAG
    except AttributeError:
        # this happens w/Zope
        self.supportsKW = 0
</t>
<t tx="ekr.20040630154517.249">def __str__(self):
    return self.function.func_name
</t>
<t tx="ekr.20040630154517.250">def __repr__(self):
    return '%s from %s:%d' % (self.function.func_name,
                              self.function.func_code.co_filename,
                              self.function.func_code.co_firstlineno)
</t>
<t tx="ekr.20040630154517.251">def arguments(self) :
    numArgs = self.function.func_code.co_argcount
    if self.maxArgs is None :
        numArgs = numArgs + 1
    if self.supportsKW :
        numArgs = numArgs + 1
    return self.function.func_code.co_varnames[:numArgs]
</t>
<t tx="ekr.20040630154517.252">def isParam(self, name) :
    return name in self.arguments()
</t>
<t tx="ekr.20040630154517.253">def isStaticMethod(self):
    return self.isMethod and isinstance(self.function, type(create_fake))
</t>
<t tx="ekr.20040630154517.254">def isClassMethod(self):
    try:
        return self.isMethod and self.function.im_self is not None
    except AttributeError:
        return 0
</t>
<t tx="ekr.20040630154517.255">def defaultValue(self, name) :
    func_code = self.function.func_code
    arg_names = list(func_code.co_varnames[:func_code.co_argcount])
    i = arg_names.index(name)
    if i &lt; self.minArgs :
        raise ValueError
    return self.function.func_defaults[i - self.minArgs]
</t>
<t tx="ekr.20040630154517.256">def varArgName(self) :
    if self.maxArgs is not None :
        return None
    func_code = self.function.func_code
    return func_code.co_varnames[func_code.co_argcount]
</t>
<t tx="ekr.20040630154517.257">def create_fake(name, code, func_globals = {}, varnames = None) :
    return Function(FakeFunction(name, code, func_globals, varnames))
</t>
<t tx="ekr.20040630154517.258">def create_from_file(file, filename, module) :
    # Make sure the file is at the beginning
    #   if python compiled the file, it will be at the end
    file.seek(0)

    # Read in the source file, see py_compile.compile() for games w/src str
    codestr = file.read()
    codestr = string.replace(codestr, "\r\n", "\n")
    codestr = string.replace(codestr, "\r", "\n")
    if codestr and codestr[-1] != '\n' :
        codestr = codestr + '\n'
    code = compile(codestr, filename, 'exec')
    return Function(FakeFunction('__main__', code, module.__dict__))
</t>
<t tx="ekr.20040630154517.259">def _co_flags_equal(o1, o2) :
    return (o1.co_flags &amp; _CO_FLAGS_MASK) == (o2.co_flags &amp; _CO_FLAGS_MASK)
</t>
<t tx="ekr.20040630154517.260">def same_signature(func, object) :
    '''Return a boolean value if the &lt;func&gt; has the same signature as
       a function with the same name in &lt;object&gt; (ie, an overriden method)'''

    try :
        baseMethod = getattr(object, func.func_name)
        base_func_code = baseMethod.im_func.func_code
    except AttributeError :
        return 1

    return _co_flags_equal(base_func_code, func.func_code) and \
           base_func_code.co_argcount == func.func_code.co_argcount
</t>
<t tx="ekr.20040630154517.261">@ignore
@language python
#!/usr/bin/env python

# Copyright (c) 2001-2004, MetaSlash Inc.  All rights reserved.

"""
Warning Messages for PyChecker
"""

CHECKER_BROKEN = "INTERNAL ERROR -- STOPPED PROCESSING FUNCTION --\n\t%s"
INVALID_CHECKER_ARGS = "Invalid warning suppression arguments --\n\t%s"

NO_MODULE_DOC = "No module doc string"
NO_CLASS_DOC = "No doc string for class %s"
NO_FUNC_DOC = "No doc string for function %s"

VAR_NOT_USED = "Variable (%s) not used"
IMPORT_NOT_USED = "Imported module (%s) not used"
UNUSED_LOCAL = "Local variable (%s) not used"
UNUSED_PARAMETER = "Parameter (%s) not used"
UNUSED_MEMBERS = "Members (%s) not used in class (%s)"
NO_LOCAL_VAR = "No local variable (%s)"
VAR_USED_BEFORE_SET = "Variable (%s) used before being set"

REDEFINING_ATTR = "Redefining attribute (%s) original line (%d)"

MODULE_IMPORTED_AGAIN = "Module (%s) re-imported"
MODULE_MEMBER_IMPORTED_AGAIN = "Module member (%s) re-imported"
MODULE_MEMBER_ALSO_STAR_IMPORTED = "Module member (%s) re-imported with *"
MIX_IMPORT_AND_FROM_IMPORT = "Using import and from ... import for (%s)"
IMPORT_SELF = "Module (%s) imports itself"

NO_METHOD_ARGS = "No method arguments, should have %s as argument"
SELF_NOT_FIRST_ARG = "%s is not first %smethod argument"
SELF_IS_ARG = "self is argument in %s"
RETURN_FROM_INIT = "Cannot return a value from __init__"
NO_CTOR_ARGS = "Instantiating an object with arguments, but no constructor"

GLOBAL_DEFINED_NOT_DECLARED = "Global variable (%s) not defined in module scope"
INVALID_GLOBAL = "No global (%s) found"
INVALID_METHOD = "No method (%s) found"
INVALID_CLASS_ATTR = "No class attribute (%s) found"
INVALID_SET_CLASS_ATTR = "Setting class attribute (%s) not set in __init__"
INVALID_MODULE_ATTR = "No module attribute (%s) found"

LOCAL_SHADOWS_GLOBAL = "Local variable (%s) shadows global defined on line %d"
VARIABLE_SHADOWS_BUILTIN = "(%s) shadows builtin"
USING_METHOD_AS_ATTR = "Using method (%s) as an attribute (not invoked)"
OBJECT_HAS_NO_ATTR = "Object (%s) has no attribute (%s)"
METHOD_SIGNATURE_MISMATCH = "Overridden method (%s) doesn't match signature in class (%s)"

INVALID_ARG_COUNT1 = "Invalid arguments to (%s), got %d, expected %d"
INVALID_ARG_COUNT2 = "Invalid arguments to (%s), got %d, expected at least %d"
INVALID_ARG_COUNT3 = "Invalid arguments to (%s), got %d, expected between %d and %d"
FUNC_DOESNT_SUPPORT_KW = "Function (%s) doesn't support **kwArgs"
FUNC_DOESNT_SUPPORT_KW_ARG = "Function (%s) doesn't support **kwArgs for name (%s)"
FUNC_USES_NAMED_ARGS = "Function (%s) uses named arguments"

BASE_CLASS_NOT_INIT = "Base class (%s) __init__() not called"
NO_INIT_IN_SUBCLASS = "No __init__() in subclass (%s)"
METHODS_NEED_OVERRIDE = "Methods (%s) in %s need to be overridden in a subclass"

FUNC_TOO_LONG = "Function (%s) has too many lines (%d)"
TOO_MANY_BRANCHES = "Function (%s) has too many branches (%d)"
TOO_MANY_RETURNS = "Function (%s) has too many returns (%d)"
TOO_MANY_ARGS = "Function (%s) has too many arguments (%d)"
TOO_MANY_LOCALS = "Function (%s) has too many local variables (%d)"
TOO_MANY_REFERENCES = 'Law of Demeter violated, more than %d references for (%s)'

IMPLICIT_AND_EXPLICIT_RETURNS = "Function returns a value and also implicitly returns None"
INCONSISTENT_RETURN_TYPE = "Function return types are inconsistent"
INCONSISTENT_TYPE = "Variable (%s) already has types %s and set to %s"
CODE_UNREACHABLE = "Code appears to be unreachable"
CONSTANT_CONDITION = "Using a conditional statement with a constant value (%s)"
STRING_ITERATION = "Iterating over a string (%s)"
DONT_RETURN_NONE = "%s should not return None, raise an exception if not found"
IS_LITERAL = "Using is%s %s, may not always work"
INVALID_FORMAT = "Invalid format string, problem starts near: '%s'"
INVALID_FORMAT_COUNT = "Format string argument count (%d) doesn't match arguments (%d)"
TOO_MANY_STARS_IN_FORMAT = "Too many *s in format flags"
USING_STAR_IN_FORMAT_MAPPING = "Can't use * in formats when using a mapping (dictionary), near: '%s'"
CANT_MIX_MAPPING_IN_FORMATS = "Can't mix tuple/mapping (dictionary) formats in same format string"

INTEGER_DIVISION = "Using integer division (%s / %s) may return integer or float"
MODULO_1 = "... % 1 may be constant"
USING_TUPLE_ACCESS_TO_LIST = "Using a tuple instead of slice as list accessor for (%s)"
BOOL_COMPARE = "Comparisons with %s are not necessary and may not work as expected"
SHOULDNT_ASSIGN_BUILTIN = "Should not assign to %s, it is (or will be) a builtin"
SHOULDNT_ASSIGN_NAME = "Should not assign to %s, it is similar to builtin %s"
SET_VAR_TO_ITSELF = "Setting %s to itself has no effect"
MODIFY_VAR_NOOP = "%s %s %s has no effect"
DIVIDE_VAR_BY_ITSELF = "%s %s %s is always 1 or ZeroDivisionError"
XOR_VAR_WITH_ITSELF = "%s %s %s is always 0"

STMT_WITH_NO_EFFECT = "Operator (%s) doesn't exist, statement has no effect"
POSSIBLE_STMT_WITH_NO_EFFECT = "Statement appears to have no effect"
UNARY_POSITIVE_HAS_NO_EFFECT = "Unary positive (+) usually has no effect"
LIST_APPEND_ARGS = "[].append() only takes 1 argument in Python 1.6 and above for (%s)"

LOCAL_DELETED = "(%s) cannot be used after being deleted on line %d"
LOCAL_ALREADY_DELETED = "Local variable (%s) has already been deleted on line %d"
VAR_DELETED_BEFORE_SET = "Variable (%s) deleted before being set"

CATCH_BAD_EXCEPTION = "Catching a non-Exception object (%s)"
CATCH_STR_EXCEPTION = "Catching string exceptions are deprecated (%s)"
RAISE_BAD_EXCEPTION = "Raising an exception on a non-Exception object (%s)"
RAISE_STR_EXCEPTION = "Raising string exceptions are deprecated (%s)"
SET_EXCEPT_TO_BUILTIN = "Setting exception to builtin (%s), consider () around exceptions"
USING_KEYWORD = "Using identifier (%s) which will become a keyword in version %s"
MODIFYING_DEFAULT_ARG = "Modifying parameter (%s) with a default value may have unexpected consequences"
USING_SELF_IN_REPR = "Using `self` in __repr__ method"
USING_NONE_RETURN_VALUE = "Using the return value from (%s) which is always None"
WRONG_UNPACK_SIZE = "Unpacking %d values into %d variables"
WRONG_UNPACK_FUNCTION = "Unpacking function (%s) which returns %d values into %d variables"
UNPACK_NON_SEQUENCE = "Unpacking a non-sequence (%s) of type %s"

NOT_SPECIAL_METHOD = "%s is not a special method"
USING_COERCE_IN_NEW_CLASS = "Using __coerce__ in new-style class (%s) will not work for binary operations"
USING_GETATTRIBUTE_IN_OLD_CLASS = "Using __getattribute__ in old-style class (%s) does not work"
USING_PROPERTIES_IN_CLASSIC_CLASS = "Using property (%s) in classic class %s may not work"
USING_SLOTS_IN_CLASSIC_CLASS = "Using __slots__ in classic class %s has no effect, consider deriving from object"
EMPTY_SLOTS = "__slots__ are empty in %s"

USES_EXEC = "Using the exec statement"
USES_GLOBAL_EXEC = "Using the exec statement in global namespace"
USES_INPUT = "Using input() is a security problem, consider using raw_input()"

USING_DEPRECATED_MODULE = "%s module is deprecated"
USING_DEPRECATED_ATTR = "%s is deprecated"
USING_INSECURE_FUNC = "%s() is a security problem"
USE_INSTEAD = ", consider using %s"

USES_CONST_ATTR = "Passing a constant string to %s, consider direct reference"

BAD_STRING_FIND = "string.find() returns an integer, consider checking &gt;= 0 or &lt; 0 for not found"
</t>
<t tx="ekr.20040630154517.262">@ignore
@language python
&lt;&lt; OP declarations &gt;&gt;
@others
    name = Name()
</t>
<t tx="ekr.20040630154517.263">#!/usr/bin/env python

# Copyright (c) 2001-2004, MetaSlash Inc.  All rights reserved.

"""
Python byte code operations.

Very similar to the dis module, but dis does not exist in Jython,
so recreate the small portion we need here.
"""

</t>
<t tx="ekr.20040630154517.264">def LINE_NUM(op):              return op == 127
</t>
<t tx="ekr.20040630154517.265">def LOAD_GLOBAL(op):           return op == 116
</t>
<t tx="ekr.20040630154517.266">def LOAD_CONST(op):            return op == 100
</t>
<t tx="ekr.20040630154517.267">def LOAD_FAST(op):             return op == 124
</t>
<t tx="ekr.20040630154517.268">def LOAD_ATTR(op):             return op == 105
</t>
<t tx="ekr.20040630154517.269">def STORE_ATTR(op):            return op == 95
</t>
<t tx="ekr.20040630154517.270">def POP_TOP(op):               return op == 1
</t>
<t tx="ekr.20040630154517.271">def IMPORT_FROM(op):           return op == 108
</t>
<t tx="ekr.20040630154517.272">def IMPORT_STAR(op):           return op == 84
</t>
<t tx="ekr.20040630154517.273">def UNARY_POSITIVE(op):        return op == 10
</t>
<t tx="ekr.20040630154517.274">def UNARY_NEGATIVE(op):        return op == 11
</t>
<t tx="ekr.20040630154517.275">def UNARY_INVERT(op):          return op == 15
</t>
<t tx="ekr.20040630154517.276">def RETURN_VALUE(op):          return op == 83
</t>
<t tx="ekr.20040630154517.277">def JUMP_FORWARD(op):          return op == 110
</t>
<t tx="ekr.20040630154517.278">def JUMP_ABSOLUTE(op):         return op == 113
</t>
<t tx="ekr.20040630154517.279">def FOR_ITER(op):              return op == 93
</t>
<t tx="ekr.20040630154517.280">def FOR_LOOP(op):              return op == 114
</t>
<t tx="ekr.20040630154517.281">def SETUP_LOOP(op):            return op == 120
</t>
<t tx="ekr.20040630154517.282">def BREAK_LOOP(op):            return op == 80
</t>
<t tx="ekr.20040630154517.283">def RAISE_VARARGS(op):         return op == 130
</t>
<t tx="ekr.20040630154517.284">def POP_BLOCK(op):             return op == 87
</t>
<t tx="ekr.20040630154517.285">def END_FINALLY(op):           return op == 88
</t>
<t tx="ekr.20040630154517.286">def UNPACK_SEQUENCE(op) :
    "Deal w/Python 1.5.2 (UNPACK_[LIST|TUPLE]) or 2.0 (UNPACK_SEQUENCE)"
    return op in (92, 93,)
</t>
<t tx="ekr.20040630154517.287">def IS_CONDITIONAL_JUMP(op):
    return op in (111, 112)
</t>
<t tx="ekr.20040630154517.288">def IS_NOT(op):
    return op == 12
</t>
<t tx="ekr.20040630154517.289">HAVE_ARGUMENT = 90
EXTENDED_ARG = 143

_HAS_NAME = (90, 91, 95, 96, 97, 98, 101, 105, 107, 108, 116,)
_HAS_LOCAL = (124, 125, 126,)
_HAS_CONST = (100,)
_HAS_COMPARE = (106,)
_HAS_JREL = (110, 111, 112, 114, 120, 121, 122,)
_HAS_JABS = (113, 119,)

_CMP_OP =  ('&lt;', '&lt;=', '==', '!=', '&gt;', '&gt;=', 'in', 'not in', 'is',
            'is not', 'exception match', 'BAD')

EXCEPT_COMPARISON = 10
IS_COMPARISON = 8

def getOperand(op, func_code, oparg) :
    if op in _HAS_NAME :
        return func_code.co_names[oparg]
    elif op in _HAS_LOCAL :
        return func_code.co_varnames[oparg]
    elif op in _HAS_CONST :
        return func_code.co_consts[oparg]
    elif op in _HAS_COMPARE :
        return _CMP_OP[oparg]
    return None
</t>
<t tx="ekr.20040630154517.290">def getLabel(op, oparg, i) :
    if op in _HAS_JREL :
        return i + oparg
    elif op in _HAS_JABS :
        return oparg
    return None
</t>
<t tx="ekr.20040630154517.291">def getInfo(code, index, extended_arg) :
    """Returns (op, oparg, index, extended_arg) based on code
       this is a helper function while looping through byte code,
       refer to the standard module dis.disassemble() for more info"""

    # get the operation we are performing
    op = ord(code[index])
    index = index + 1
    if op &gt;= HAVE_ARGUMENT :
        # get the argument to the operation
        oparg = ord(code[index]) + ord(code[index+1])*256 + extended_arg
        index = index + 2
        extended_arg = 0
        if op == EXTENDED_ARG :
            extended_arg = oparg * 65536L
    else :
        oparg, extended_arg = 0, 0
    return op, oparg, index, extended_arg
</t>
<t tx="ekr.20040630154517.292">def initFuncCode(func) :
    """Returns (func_code, code, i, maxCode, extended_arg) based on func,
       this is a helper function to setup looping through byte code"""

    func_code = func.func_code
    code = func_code.co_code
    return func_code, code, 0, len(code), 0
</t>
<t tx="ekr.20040630154517.293">def conditional(op):
    "returns true if the code results in conditional execution"
    return op in [83,                   # return
                  93,                   # for_iter
                  111, 112, 114,        # conditional jump
                  121,                  # setup_exec
                  130                   # raise_varargs
                  ]
</t>
<t tx="ekr.20040630154517.294">
# this code is here for debugging purposes.
# Jython doesn't support dis, so don't rely on it
try :
    import dis
    name = dis.opname
except ImportError :
    class Name:
	&lt;&lt; class Name declarations &gt;&gt;
	@others
</t>
<t tx="ekr.20040630154517.295">'Turn name[x] into x'
</t>
<t tx="ekr.20040630154517.296">def __getitem__(self, x):
    return str(x)
</t>
<t tx="ekr.20040630154517.297">@ignore
@language python
&lt;&lt; options declarations &gt;&gt;
@others


if __name__=='__main__':
    dirs = os.path.join(os.path.split(os.getcwd())[:-1])
    sys.path.append(dirs[0])
    tk = Tkinter.Tk()
    tk.title('PyChecker')
    ConfigDialog(tk).main()
</t>
<t tx="ekr.20040630154517.298">"Main module for running pychecker a Tkinter GUI for all the options"

import sys
import os
import Tkinter, tkFileDialog

from OptionTypes import *
from string import capitalize, strip, rstrip, split

import Config

MAX_SUBBOX_ROWS = 8
MAX_BOX_COLS = 3
PAD = 10
EDITOR = "xterm -e vi -n +%(line)d %(file)s"
if sys.platform == 'win32':
    EDITOR = "notepad %(file)s"

</t>
<t tx="ekr.20040630154517.299">def col_weight(grid):
    "Set column weights so that sticky grid settings actually work"
    unused, col = grid.grid_size()
    for c in range(col):
        grid.columnconfigure(c, weight=1)
</t>
<t tx="ekr.20040630154517.300">def spawn(cmd_list):
    try:
        if os.fork():
            try:
                os.execvp(cmd_list[0], cmd_list)
            finally:
                sys.exit()
    except AttributeError:
        os.execvp(cmd_list[0], cmd_list)
</t>
<t tx="ekr.20040630154517.301">def edit(file, line):
    "Fire up an external editor to see the file at the given line"
    unused = file, line
    list = split(EDITOR)
    cmd_list = []
    for word in list:
        cmd_list.append(word % locals())
    spawn(cmd_list)
</t>
<t tx="ekr.20040630154517.302">def closeCB():
    sys.exit(0)
</t>
<t tx="ekr.20040630154517.303">
class Results:
	&lt;&lt; class Results declarations &gt;&gt;
	@others
</t>
<t tx="ekr.20040630154517.304">"Display the warnings produced by checker"

</t>
<t tx="ekr.20040630154517.305">def __init__(self, w):
    self.top = Tkinter.Toplevel(w, name="results")
    self.top.transient(w)
    self.top.bind('&lt;Return&gt;', self.hide)
    self.top.bind('&lt;Escape&gt;', self.hide)
    self.text = Tkinter.Text(self.top, name="text")
    self.text.grid()
    self.text.bind('&lt;Double-Button-1&gt;', self.showFile)
    close = Tkinter.Button(self.top,
                        name="close",
                        default=Tkinter.ACTIVE,
                        command=self.hide)
    close.grid()
    self.text.update_idletasks()
</t>
<t tx="ekr.20040630154517.306">def show(self, text):
    self.text.delete("0.1", "end")
    self.text.insert("0.1", text)
    self.top.deiconify()
    self.top.lift()
</t>
<t tx="ekr.20040630154517.307">def hide(self, *unused):
    self.top.withdraw()
</t>
<t tx="ekr.20040630154517.308">def line(self):
    return split(self.text.index(Tkinter.CURRENT), ".")[0]
</t>
<t tx="ekr.20040630154517.309">def showFile(self, unused):
    import re
    line = self.line()
    text = self.text.get(line + ".0", line + ".end")
    text = rstrip(text)
    result = re.search("(.*):([0-9]+):", text)
    if result:
        file, line = result.groups()
        edit(file, int(line))
        self.text.after(0, self.selectLine)
</t>
<t tx="ekr.20040630154517.310">def selectLine(self):
    line = self.line()
    self.text.tag_remove(Tkinter.SEL, "1.0", Tkinter.END)
    self.text.tag_add(Tkinter.SEL, line + ".0", line + ".end")
</t>
<t tx="ekr.20040630154517.311">
class ConfigDialog:
	&lt;&lt; class ConfigDialog declarations &gt;&gt;
	@others
</t>
<t tx="ekr.20040630154517.312">"Dialog for editing options"

</t>
<t tx="ekr.20040630154517.313">def __init__(self, tk):
    self._tk = tk
    self._cfg, _, _ = Config.setupFromArgs(sys.argv)

    self._help = None
    self._optMap = {}
    self._opts = []
    self._file = Tkinter.StringVar()
    self._results = None
</t>
<t tx="ekr.20040630154517.314">if len(sys.argv) &gt; 1:
        self._file.set(sys.argv[1])

    for name, group in Config._OPTIONS:
      opts = []
      for _, useValue, longArg, member, description in group:
          value = None
          if member:
              value = getattr(self._cfg, member)
              description = member + ": " + capitalize(description)
              description = strip(description)
          tk.option_add('*' + longArg + ".help", description)
          if useValue:
              if type(value) == type([]):
                  field = List(longArg, value)
              elif type(value) == type(1):
                  field = Number(longArg, int(value))
              elif type(value) == type(''):
                  field = Text(longArg, value)
              else:
                  field = Boolean(longArg, value)
          else:
              field = Boolean(longArg, value)
          self._optMap[longArg] = field
          opts.append(field)
      self._opts.append( (name, opts))

def _add_fields(self, w, opts):
    count = 0
    for opt in opts:
        f = opt.field(w)
        c, r = divmod(count, MAX_SUBBOX_ROWS)
        f.grid(row=r, column=c, sticky=Tkinter.NSEW)
        count = count + 1
</t>
<t tx="ekr.20040630154517.315">def _add_group(self, w, name, opts):
    colFrame = Tkinter.Frame(w)
    
    label = Tkinter.Label(colFrame, text=name + ":")
    label.grid(row=0, column=0, sticky=Tkinter.NSEW)
    
    gframe = Tkinter.Frame(colFrame, relief=Tkinter.GROOVE, borderwidth=2)
    gframe.grid(row=1, column=0, sticky=Tkinter.NSEW)
    self._add_fields(gframe, opts)
    
    label = Tkinter.Label(colFrame)
    label.grid(row=2, column=0, sticky=Tkinter.NSEW)
    colFrame.rowconfigure(2, weight=1)
    return colFrame
</t>
<t tx="ekr.20040630154517.316">def main(self):
    frame = Tkinter.Frame(self._tk, name="opts")
    frame.grid()
    self._tk.option_readfile('Options.ad')
    self._fields = {}
    row, col = 0, 0
    rowFrame = Tkinter.Frame(frame)
    rowFrame.grid(row=row)
    row = row + 1
    for name, opts in self._opts:
        w = self._add_group(rowFrame, name, opts)
        w.grid(row=row, column=col, sticky=Tkinter.NSEW, padx=PAD)
        col = col + 1
        if col &gt;= MAX_BOX_COLS:
            col_weight(rowFrame)
            rowFrame=Tkinter.Frame(frame)
            rowFrame.grid(row=row, sticky=Tkinter.NSEW)
            col = 0
            row = row + 1
    col_weight(rowFrame)

    self._help = Tkinter.Label(self._tk, name="helpBox")
    self._help.grid(row=row)
    self._help.config(takefocus=0)
    buttons = Tkinter.Frame(self._tk, name="buttons")
    ok = Tkinter.Button(buttons, name="ok", command=self.ok, default=Tkinter.ACTIVE)
    ok.grid(row=row, column=0)
    default = Tkinter.Button(buttons, name="default", command=self.default)
    default.grid(row=row, column=1)
    close = Tkinter.Button(buttons, name="close", command=closeCB)
    close.grid(row=row, column=2)
    buttons.grid()

    f = Tkinter.Frame(self._tk, name="fileStuff")
    Tkinter.Button(f, name="getfile", command=self.file).grid(row=0, column=1)
    fileEntry = Tkinter.Entry(f, name="fname", textvariable=self._file)
</t>
<t tx="ekr.20040630154517.317">fileEntry.grid(row=0, column=2)
    Tkinter.Button(f, name="check", command=self.check).grid(row=0, column=3)
    f.grid(sticky=Tkinter.EW)
    
    self._tk.bind_all('&lt;FocusIn&gt;', self.focus)
    self._tk.bind_all('&lt;Enter&gt;', self.focus)
    self._tk.bind_all('&lt;ButtonPress&gt;', self.click)
    fileEntry.bind('&lt;Return&gt;', self.check)
    self._tk.mainloop()

#
# Callbacks
#

def help(self, w):
    if type(w) == type(''):         # occurs with file dialog...
        return
    if self._help == w:             # ignore help events on help...
        return
    help = w.option_get("help", "help")
    self._help.configure(text=help)
</t>
<t tx="ekr.20040630154517.318">def focus(self, ev):
    self.help(ev.widget)
</t>
<t tx="ekr.20040630154517.319">def click(self, ev):
    self.help(ev.widget)
</t>
<t tx="ekr.20040630154517.320">def ok(self):
    opts = []
    # Pull command-line args
    for _, group in self._opts:
        for opt in group:
            arg = opt.arg()
            if arg:
                opts.append(arg)

    # Calculate config
    self._cfg, _, _ = Config.setupFromArgs(opts)

    # Set controls based on new config
    for _, group in Config._OPTIONS:
        for _, _, longArg, member, _ in group:
            if member:
                self._optMap[longArg].set(getattr(self._cfg, member))
</t>
<t tx="ekr.20040630154517.321">def default(self):
    self._cfg, _, _ = Config.setupFromArgs(sys.argv)
    for _, group in Config._OPTIONS:
        for _, _, longArg, member, _ in group:
            if member:
                self._optMap[longArg].set(getattr(self._cfg, member))
            else:
                self._optMap[longArg].set(0)
</t>
<t tx="ekr.20040630154517.322">def file(self):
    self._file.set(tkFileDialog.askopenfilename())
</t>
<t tx="ekr.20040630154517.323">def check(self, *unused):
    import checker
    import StringIO
    
    self.ok()                       # show effect of all settings

    checker._allModules = {}
    warnings = checker.getWarnings([self._file.get()], self._cfg)
    capture = StringIO.StringIO()
    
    if not self._results:
        self._results = Results(self._help)
    checker._printWarnings(warnings, capture)

    value = strip(capture.getvalue())
    if not value:
        value = "None"
    self._results.show(value)
</t>
<t tx="ekr.20040630154517.324">@ignore
@language python
&lt;&lt; OptionTypes declarations &gt;&gt;
@others
</t>
<t tx="ekr.20040630154517.325">import Tkinter

</t>
<t tx="ekr.20040630154517.326">def bool(value):
    if value:
        return 1
    return 0
</t>
<t tx="ekr.20040630154517.327">
class Base:
	&lt;&lt; class Base declarations &gt;&gt;
	@others
</t>
<t tx="ekr.20040630154517.328">"Base class for all OptionTypes"

</t>
<t tx="ekr.20040630154517.329">def __init__(self, name, default):
    self._name = name
    self._default = default
    self._var = None
</t>
<t tx="ekr.20040630154517.330">def name(self):
    return self._name
</t>
<t tx="ekr.20040630154517.331">def set(self, value):
    self._var.set(value)
</t>
<t tx="ekr.20040630154517.332">
class Boolean(Base):
	&lt;&lt; class Boolean declarations &gt;&gt;
	@others
</t>
<t tx="ekr.20040630154517.333">"A option type for editing boolean values"

</t>
<t tx="ekr.20040630154517.334">def __init__(self, name, default):
    Base.__init__(self, name, default)
</t>
<t tx="ekr.20040630154517.335">def field(self, w):
    self._var = Tkinter.BooleanVar()
    if self._default:
        self._var.set(1)
    else:
        self._var.set(0)
    frame = Tkinter.Frame(w, name = self._name + "Frame")
    result = Tkinter.Checkbutton(frame,
                                 name=self._name,
                                 text=self._name,
                                 variable=self._var)
    result.grid(sticky=Tkinter.W)
    frame.columnconfigure(0, weight=1)
    return frame
</t>
<t tx="ekr.20040630154517.336">def arg(self):
    if bool(self._var.get()) != bool(self._default):
        if bool(self._var.get()):
            return "--" + self._name
        return "--no-" + self._name
    return None
</t>
<t tx="ekr.20040630154517.337">
class Number(Base):
	&lt;&lt; class Number declarations &gt;&gt;
	@others
</t>
<t tx="ekr.20040630154517.338">"OptionType for editing numbers"

</t>
<t tx="ekr.20040630154517.339">def __init__(self, name, default):
    Base.__init__(self, name, default)
</t>
<t tx="ekr.20040630154517.340">def field(self, w):
    self._var = Tkinter.IntVar()
    self._var.set(self._default)
    frame = Tkinter.Frame(w, name = self._name + "Frame")
    label = Tkinter.Label(frame, text=self._name + ":")
    label.grid(row=0, column=0, sticky=Tkinter.W)
    entry = Tkinter.Entry(frame,
                          name=self._name,
                          textvariable=self._var,
                          width=4)
    entry.grid(row=0, column=1, sticky=Tkinter.E)
    for i in range(2):
        frame.columnconfigure(i, weight=1)
    return frame
</t>
<t tx="ekr.20040630154517.341">def arg(self):
    if self._var.get() != self._default:
        return "--%s=%d" % (self._name, self._var.get())
    return None
</t>
<t tx="ekr.20040630154517.342">    
class Text(Base):
	&lt;&lt; class Text declarations &gt;&gt;
	@others
</t>
<t tx="ekr.20040630154517.343">"OptionType for editing a little bit of text"

</t>
<t tx="ekr.20040630154517.344">def __init__(self, name, default):
    Base.__init__(self, name, default)
</t>
<t tx="ekr.20040630154517.345">def width(self):
    return int(min(15, len(self._default) * 1.20))
</t>
<t tx="ekr.20040630154517.346">def field(self, w):
    self._var = Tkinter.StringVar()
    self._var.set(self._default)
    frame = Tkinter.Frame(w, name = self._name + "Frame")
    label = Tkinter.Label(frame, text=self._name + ":")
    label.grid(row=0, column=0, sticky=Tkinter.W)
    entry = Tkinter.Entry(frame,
                          name=self._name,
                          textvariable=self._var,
                          width=self.width())
    entry.grid(row=0, column=1, sticky=Tkinter.E)
    for i in range(2):
        frame.columnconfigure(i, weight=1)
    return frame
</t>
<t tx="ekr.20040630154517.347">def arg(self):
    if self._var.get() != self._default:
        return "--%s=%s" % (self._name, self._var.get())
    return None
</t>
<t tx="ekr.20040630154517.348">def join(list):
    import string
    return string.join(list, ", ")
</t>
<t tx="ekr.20040630154517.349">
class List(Text):
	&lt;&lt; class List declarations &gt;&gt;
	@others
</t>
<t tx="ekr.20040630154517.350">"OptionType for editing a list of values"

</t>
<t tx="ekr.20040630154517.351">def __init__(self, name, default):
    Text.__init__(self, name, join(default))
</t>
<t tx="ekr.20040630154517.352">def set(self, value):
    self._var.set(join(value))
</t>
<t tx="ekr.20040630154517.353">@ignore
@language python
&lt;&lt; printer declarations &gt;&gt;
@others
</t>
<t tx="ekr.20040630154517.354">#!/usr/bin/env python

# Copyright (c) 2001, MetaSlash Inc.  All rights reserved.

"Helper functions for printing out info about objects"


</t>
<t tx="ekr.20040630154517.355">def printFunction(spaces, prefix, func, className = None) :
    params = ''
    argcount = func.func_code.co_argcount
    defaultArgStart = argcount
    if func.func_defaults != None :
        defaultArgStart = argcount - len(func.func_defaults)
    for i in range(0, argcount) :
        arg = func.func_code.co_varnames[i]
        if i &gt;= defaultArgStart :
            arg = arg + " = %s" % str(func.func_defaults[i - defaultArgStart])
        params = params + "%s, " % arg
    params = "(%s)" % params[:-2]
    if className == None :
        className = ""
    else :
        className = className + "."
    print "%s%s%s%s%s" % (spaces, prefix, className, func.func_name, params)
</t>
<t tx="ekr.20040630154517.356">def module(module) :
    print "Module: ", module.moduleName
    if module.module == None :
        return

    print "  Imports:  ", module.modules.keys()
    print "  Variables:", module.variables.keys()
    print ""
    for function in module.functions.values() :
        printFunction("  ", "Function:  ", function.function)
    print ""
    for c in module.classes.values() :
        for method in c.methods.values() :
            if method != None :
                printFunction("  ", "", method.function, c.name)
        print ""
</t>
<t tx="ekr.20040630154517.357">def attrs(object) :
    for attr in dir(object) :
        print " %s: %s" % (attr, `getattr(object, attr)`)
</t>
<t tx="ekr.20040630154517.358">@ignore
@language python
&lt;&lt; python declarations &gt;&gt;
@others

BUILTIN_ATTRS = { types.StringType : dir(''),
                  types.TypeType : dir(type(type)),
                  types.ListType : dir([]),
                  types.DictType : dir({}),
                  types.FunctionType : dir(_setupBuiltinAttrs),
                  types.BuiltinFunctionType : dir(len),
                  types.BuiltinMethodType : dir([].append),
                  types.ClassType : dir(Stack.Item),
                  types.UnboundMethodType : dir(Stack.Item.__init__),
                  types.LambdaType : dir(lambda: None),
                  types.SliceType : dir(slice(0)),
                }

# have to setup the rest this way to support different versions of Python
_setupBuiltinAttrs()

PENDING_DEPRECATED_MODULES = { 'string': None, 'types': None,
                             }
DEPRECATED_MODULES = { 'audioop': None, 'FCNTL': 'fcntl', 'gopherlib': None,
                       'macfs': 'Carbon.File or Carbon.Folder',
                       'posixfile': 'fcntl', 'pre': None, 'regsub': 're',
                       'statcache': 'os.stat()',
                       'stringold': None, 'tzparse': None,
                       'TERMIOS': 'termios', 'whrandom':'random',
                       'xmllib': 'xml.sax',

                       # C Modules
                       'mpz': None, 'pcre': None, 'pypcre': None,
                       'rgbimg': None, 'strop': None, 'xreadlines': 'file',
                     }
DEPRECATED_ATTRS = { 'array.read': None, 'array.write': None,
                     'operator.isCallable': None,
                     'operator.sequenceIncludes': None,
                     'pty.master_open': None, 'pty.slave_open': None,
                     'random.stdgamma': 'random.gammavariate',
                     'rfc822.AddrlistClass': 'rfc822.AddressList',
                     'string.atof': None, 'string.atoi': None,
                     'string.atol': None, 'string.zfill': None,
                     'sys.exc_traceback': None, 'sys.exit_thread': None,
                     'tempfile.mktemp': None, 'tempfile.template': None,
                   }

# FIXME: can't check these right now, maybe later
DEPRECATED_METHODS = {
                       'email.Message.get_type': 'email.Message.get_content_type',
                       'email.Message.get_subtype': 'email.Message.get_content_subtype',
                       'email.Message.get_main_type': 'email.Message.get_content_maintype',
                       'htmllib.HTMLParser.do_nextid': None,
                       'pstats.Stats.ignore': None,
                       'random.Random.cunifvariate': None,
                       'random.Random.stdgamma': 'Random.gammavariate',
                     }

_OS_AND_POSIX_FUNCS = { 'tempnam': None, 'tmpnam': None }
SECURITY_FUNCS = { 'os' : _OS_AND_POSIX_FUNCS, 'posix': _OS_AND_POSIX_FUNCS }

SPECIAL_METHODS = {
    '__call__': None,                   # any number &gt; 1
    '__cmp__': 2,
    '__coerce__': 2,
    '__contains__': 2,
    '__del__': 1,
    '__hash__': 1,
    '__iter__': 1,
    '__len__': 1,
    '__new__': None,			# new-style class constructor
    '__nonzero__': 1,
    '__reduce__': 1,

    '__hex__': 1,
    '__oct__': 1,
    '__repr__': 1,
    '__str__': 1,

    '__invert__': 1,	'__neg__': 1,	'__pos__': 1,     '__abs__': 1,     
    '__complex__': 1,	'__int__': 1,	'__long__': 1,    '__float__': 1,

    '__eq__': 2,	'__ne__': 2,
    '__ge__': 2,	'__gt__': 2,
    '__le__': 2,	'__lt__': 2,

    '__getattribute__': 2,	# only in new-style classes
    '__getattr__': 2,		'__setattr__': 3,	'__delattr__': 2,
    '__getitem__': 2,		'__setitem__': 3,	'__delitem__': 2,
    '__getslice__': 3,		'__setslice__': 4,	'__delslice__': 3,
    # getslice is deprecated

    '__add__': 2,	'__radd__': 2,		'__iadd__': 2,    
    '__sub__': 2,	'__rsub__': 2,		'__isub__': 2,
    '__mul__': 2,	'__rmul__': 2,		'__imul__': 2,    
    '__div__': 2,	'__rdiv__': 2,		'__idiv__': 2,    
    '__pow__': 2,	'__rpow__': 2,		'__ipow__': 2,    # 2 or 3
    '__truediv__': 2,	'__rtruediv__': 2,	'__itruediv__': 2,	
    '__floordiv__': 2,	'__rfloordiv__': 2,	'__ifloordiv__': 2,	
    '__mod__': 2,	'__rmod__': 2,		'__imod__': 2,    
    '__divmod__': 2,	'__rdivmod__': 2,	# no inplace op for divmod()

    '__lshift__': 2,	'__rlshift__': 2,	'__ilshift__': 2,
    '__rshift__': 2,	'__rrshift__': 2,	'__irshift__': 2, 

    '__and__': 2,	'__rand__': 2,		'__iand__': 2,
    '__xor__': 2,	'__rxor__': 2,		'__ixor__': 2,
    '__or__': 2,	'__ror__': 2,		'__ior__': 2,

    # these are related to pickling 
    '__getstate__': 1,		'__setstate__': 2,
    '__copy__': 1,		'__deepcopy__': 2,
    '__getinitargs__': 1,	
    }
</t>
<t tx="ekr.20040630154517.359">#!/usr/bin/env python

# Copyright (c) 2001-2004, MetaSlash Inc.  All rights reserved.

"""
Setup a lot of info about Python builtin types, functions, methods, etc.
"""

import types
import sys

from pychecker import utils
from pychecker import Stack
from pychecker import Warning


BOOL = types.IntType
#                    name   (type,  args: min, max, kwArgs?
GLOBAL_FUNC_INFO = { '__import__': (types.ModuleType, 1, 4),
                     'abs': (Stack.TYPE_UNKNOWN, 1, 1),
                     'apply': (Stack.TYPE_UNKNOWN, 2, 3),
                     'buffer': (types.BufferType, 1, 3),
                     'callable': (BOOL, 1, 1),
                     'chr': (types.StringType, 1, 1),
                     'cmp': (types.IntType, 2, 2),
                     'coerce': ([ types.NoneType, types.TupleType ], 2, 2),
                     'compile': (types.CodeType, 3, 3),
                     'complex': (types.ComplexType, 1, 2, ['real', 'imag']),
                     'delattr': (types.NoneType, 2, 2),
                     'dir': (types.ListType, 0, 1),
                     'divmod': (types.TupleType, 2, 2),
                     'eval': (Stack.TYPE_UNKNOWN, 1, 3),
                     'execfile': (types.NoneType, 1, 3),
                     'filter': (types.ListType, 2, 2),
                     'float': (types.FloatType, 1, 1),
                     'getattr': (Stack.TYPE_UNKNOWN, 2, 3),
                     'globals': (types.DictType, 0, 0),
                     'hasattr': (BOOL, 2, 2),
                     'hash': (types.IntType, 1, 1),
                     'hex': (types.StringType, 1, 1),
                     'id': (types.IntType, 1, 1),
                     'input': (Stack.TYPE_UNKNOWN, 0, 1),
                     'int': (types.IntType, 1, 2, ['x']),
                     'intern': (types.StringType, 1, 1),
                     'isinstance': (BOOL, 2, 2),
                     'issubclass': (BOOL, 2, 2),
                     'len': (types.IntType, 1, 1),
                     'list': (types.ListType, 1, 1, ['sequence']),
                     'locals': (types.DictType, 0, 0),
                     'long': (types.LongType, 1, 2, ['x']),
                     'map': (types.ListType, 2, None),
                     'max': (Stack.TYPE_UNKNOWN, 1, None),
                     'min': (Stack.TYPE_UNKNOWN, 1, None),
                     'oct': (types.StringType, 1, 1),
                     'open': (types.FileType, 1, 3, ['name', 'mode', 'buffering']),
                     'ord': (types.IntType, 1, 1),
                     'pow': (Stack.TYPE_UNKNOWN, 2, 3),
                     'range': (types.ListType, 1, 3),
                     'raw_input': (types.StringType, 0, 1),
                     'reduce': (Stack.TYPE_UNKNOWN, 2, 3),
                     'reload': (types.ModuleType, 1, 1),
                     'repr': (types.StringType, 1, 1),
                     'round': (types.FloatType, 1, 2),
                     'setattr': (types.NoneType, 3, 3),
                     'slice': (types.SliceType, 1, 3),
                     'str': (types.StringType, 1, 1),
                     'tuple': (types.TupleType, 1, 1),
                     'type': (types.TypeType, 1, 1),
                     'vars': (types.DictType, 0, 1),
                     'xrange': (types.ListType, 1, 3),
                   }

if hasattr(types, 'UnicodeType') :
    GLOBAL_FUNC_INFO['unichr'] = (types.UnicodeType, 1, 1)
    GLOBAL_FUNC_INFO['unicode'] = (types.UnicodeType, 1, 3, ['string', 'encoding', 'errors'])

if utils.pythonVersion() &gt;= utils.PYTHON_2_2 :
    GLOBAL_FUNC_INFO['compile'] = (types.CodeType, 3, 5)
    GLOBAL_FUNC_INFO['dict'] = (types.DictType, 0, 1, ['items'])
    GLOBAL_FUNC_INFO['file'] = GLOBAL_FUNC_INFO['open']
    GLOBAL_FUNC_INFO['float'] = (types.FloatType, 0, 1, ['x'])
    GLOBAL_FUNC_INFO['int'] = (types.IntType, 0, 2, ['x'])
    GLOBAL_FUNC_INFO['list'] = (types.ListType, 0, 1, ['sequence'])
    GLOBAL_FUNC_INFO['long'] = (types.LongType, 0, 2, ['x'])
    GLOBAL_FUNC_INFO['str'] = (types.StringType, 0, 1, ['object'])
    # FIXME: type doesn't take 2 args, only 1 or 3
    GLOBAL_FUNC_INFO['type'] = (types.TypeType, 1, 3, ['name', 'bases', 'dict'])
    GLOBAL_FUNC_INFO['tuple'] = (types.TupleType, 0, 1, ['sequence'])

    GLOBAL_FUNC_INFO['classmethod'] = (types.MethodType, 1, 1)
    GLOBAL_FUNC_INFO['iter'] = (Stack.TYPE_UNKNOWN, 1, 2)
    GLOBAL_FUNC_INFO['property'] = (Stack.TYPE_UNKNOWN, 0, 4, ['fget', 'fset', 'fdel', 'doc'])
    GLOBAL_FUNC_INFO['super'] = (Stack.TYPE_UNKNOWN, 1, 2)
    GLOBAL_FUNC_INFO['staticmethod'] = (types.MethodType, 1, 1)
    GLOBAL_FUNC_INFO['unicode'] = (types.UnicodeType, 0, 3, ['string', 'encoding', 'errors'])

    GLOBAL_FUNC_INFO['bool'] = (BOOL, 1, 1, ['x'])

</t>
<t tx="ekr.20040630154517.360">def tryAddGlobal(name, *args):
    if globals().has_key(name):
        GLOBAL_FUNC_INFO[name] = args
</t>
<t tx="ekr.20040630154517.361">tryAddGlobal('zip', types.ListType, 1, None)
tryAddGlobal('enumerate', types.TupleType, 1, 1, ['sequence'])
# sum() could also return float/long
tryAddGlobal('sum', types.IntType, 1, 2, ['start'])
# reversed() always returns an iterator  (FIXME: support iterator)
tryAddGlobal('reversed', Stack.TYPE_UNKNOWN, 1, 1)

_STRING_METHODS = { 'capitalize': (types.StringType, 0, 0),
                    'center': (types.StringType, 1, 1),
                    'count': (types.IntType, 1, 1),
                    'encode': (types.StringType, 0, 2),
                    'endswith': (BOOL, 1, 3),
                    'expandtabs': (types.StringType, 0, 1),
                    'find': (types.IntType, 1, 3),
                    'index': (types.IntType, 1, 3),
                    'isalnum': (BOOL, 0, 0),
                    'isalpha': (BOOL, 0, 0),
                    'isdigit': (BOOL, 0, 0),
                    'islower': (BOOL, 0, 0),
                    'isspace': (BOOL, 0, 0),
                    'istitle': (BOOL, 0, 0),
                    'isupper': (BOOL, 0, 0),
                    'join': (types.StringType, 1, 1),
                    'ljust': (types.StringType, 1, 1),
                    'lower': (types.StringType, 0, 0),
                    'lstrip': (types.StringType, 0, 0),
                    'replace': (types.StringType, 2, 3),
                    'rfind': (types.IntType, 1, 3),
                    'rindex': (types.IntType, 1, 3),
                    'rjust': (types.StringType, 1, 1),
                    'rstrip': (types.StringType, 0, 0),
                    'split': (types.ListType, 0, 2),
                    'splitlines': (types.ListType, 0, 1),
                    'startswith': (BOOL, 1, 3),
                    'strip': (types.StringType, 0, 0),
                    'swapcase': (types.StringType, 0, 0),
                    'title': (types.StringType, 0, 0),
                    'translate': (types.StringType, 1, 2),
                    'upper': (types.StringType, 0, 0),
                  }

if utils.pythonVersion() &gt;= utils.PYTHON_2_2 :
    _STRING_METHODS['decode'] = (types.UnicodeType, 0, 2)

BUILTIN_METHODS = { types.DictType :
                    { 'clear': (types.NoneType, 0, 0),
                      'copy': (types.DictType, 0, 0),
                      'get': (Stack.TYPE_UNKNOWN, 1, 2),
                      'has_key': (BOOL, 1, 1),
                      'items': (types.ListType, 0, 0),
                      'keys': (types.ListType, 0, 0),
                      'popitem': (types.TupleType, 0, 0),
                      'setdefault': (Stack.TYPE_UNKNOWN, 1, 2),
                      'update': (types.NoneType, 1, 1),
                      'values': (types.ListType, 0, 0),
                    },
                    types.ListType :
                    { 'append': (types.NoneType, 1, 1),
                      'count': (types.IntType, 1, 1),
                      'extend': (types.NoneType, 1, 1),
                      'index': (types.IntType, 1, 1),
                      'insert': (types.NoneType, 2, 2),
                      'pop': (Stack.TYPE_UNKNOWN, 0, 1),
                      'remove': (types.NoneType, 1, 1),
                      'reverse': (types.NoneType, 0, 0),
                      'sort': (types.NoneType, 0, 1),
                    },
                    types.FileType :
                    { 'close': (types.NoneType, 0, 0),
                      'fileno': (types.IntType, 0, 0),
                      'flush': (types.NoneType, 0, 0),
                      'isatty': (BOOL, 0, 0),
                      'read': (types.StringType, 0, 1),
                      'readinto': (types.NoneType, 1, 1),
                      'readline': (types.StringType, 0, 1),
                      'readlines': (types.ListType, 0, 1),
                      'seek': (types.NoneType, 1, 2),
                      'tell': (types.IntType, 0, 0),
                      'truncate': (types.NoneType, 0, 1),
                      'write': (types.NoneType, 1, 1),
                      'writelines': (types.NoneType, 1, 1),
                      'xreadlines': (types.ListType, 0, 0),
                    },
                  }

if hasattr({}, 'pop'):
    BUILTIN_METHODS[types.DictType]['pop'] = (Stack.TYPE_UNKNOWN, 1, 1)

def _setupBuiltinMethods() :
    if utils.pythonVersion() &gt;= utils.PYTHON_2_2 :
        PY22_DICT_METHODS = { 'iteritems': (types.ListType, 0, 0),
                              'iterkeys': (types.ListType, 0, 0),
                              'itervalues': (types.ListType, 0, 0),
                            }

        BUILTIN_METHODS[types.DictType].update(PY22_DICT_METHODS)

    try :
        BUILTIN_METHODS[types.ComplexType] = \
                                  { 'conjugate': (types.ComplexType, 0, 0), }
    except AttributeError :
        pass

    if len(dir('')) &gt; 0 :
        BUILTIN_METHODS[types.StringType] = _STRING_METHODS

    try :
        BUILTIN_METHODS[types.UnicodeType] = _STRING_METHODS
    except AttributeError :
        pass
</t>
<t tx="ekr.20040630154517.362">_setupBuiltinMethods()

MUTABLE_TYPES = (types.ListType, types.DictType, types.InstanceType,)

# identifiers which will become a keyword in a future version
FUTURE_KEYWORDS = { 'yield': '2.2' }

METHODLESS_OBJECTS = { types.NoneType : None, types.IntType : None,
                       types.LongType : None, types.FloatType : None,
                       types.BufferType : None, types.TupleType : None,
                       types.EllipsisType : None,
                     }

def _setupBuiltinAttrs() :
    w = Warning.Warning('', 0, '')
    BUILTIN_ATTRS[types.MethodType] = dir(w.__init__)
    del w

    if utils.pythonVersion() &gt;= utils.PYTHON_2_2 :
        # FIXME: I'm sure more types need to be added here
        BUILTIN_ATTRS[types.StringType] = dir(''.__class__)
        BUILTIN_ATTRS[types.ListType] = dir([].__class__)
        BUILTIN_ATTRS[types.DictType] = dir({}.__class__)

    try :
        import warnings
        _MSG = "xrange object's 'start', 'stop' and 'step' attributes are deprecated"
        warnings.filterwarnings('ignore', _MSG)
        del warnings, _MSG
    except (ImportError, AssertionError):
        pass
    BUILTIN_ATTRS[types.XRangeType] = dir(xrange(0))

    try: BUILTIN_ATTRS[types.ComplexType] = dir(complex(0, 1))
    except: pass

    try: BUILTIN_ATTRS[types.UnicodeType] = dir(unicode(''))
    except: pass

    try: BUILTIN_ATTRS[types.CodeType] = dir(_setupBuiltinAttrs.func_code)
    except: pass

    try: BUILTIN_ATTRS[types.FileType] = dir(sys.__stdin__)
    except: pass

    try:
        raise TypeError
    except TypeError :
        try:
            tb = sys.exc_info()[2]
            BUILTIN_ATTRS[types.TracebackType] = dir(tb)
            BUILTIN_ATTRS[types.FrameType] = dir(tb.tb_frame)
        except:
            pass
        tb = None
</t>
<t tx="ekr.20040630154517.363">@ignore
@language python
&lt;&lt; Stack declarations &gt;&gt;
@others
</t>
<t tx="ekr.20040630154517.364">#!/usr/bin/env python

# Copyright (c) 2001-2002, MetaSlash Inc.  All rights reserved.

"""
Module to hold manipulation of elements on the stack.
"""

import types


DATA_UNKNOWN = "-unknown-"
LOCALS = 'locals'

# These should really be defined by subclasses
TYPE_UNKNOWN = "-unknown-"
TYPE_FUNC_RETURN = "-return-value-"
TYPE_ATTRIBUTE = "-attribute-"
TYPE_COMPARISON = "-comparison-"
TYPE_GLOBAL = "-global-"
TYPE_EXCEPT = "-except-"

</t>
<t tx="ekr.20040630154517.365">class Item :
	&lt;&lt; class Item declarations &gt;&gt;
	@others
</t>
<t tx="ekr.20040630154517.366">"Representation of data on the stack"

</t>
<t tx="ekr.20040630154517.367">def __init__(self, data, dataType, const = 0, length = 0) :
    self.data = data
    self.type = dataType
    self.const = const
    self.length = length
    self.is_really_string = 0
</t>
<t tx="ekr.20040630154517.368">def __str__(self) :
    if type(self.data) == types.TupleType :
        value = '('
        for item in self.data :
            value = value + str(item) + ', '
        # strip off the ', ' for multiple items
        if len(self.data) &gt; 1 :
            value = value[:-2]
        return value + ')'
    return str(self.data)
</t>
<t tx="ekr.20040630154517.369">def __repr__(self):
    return 'Stack Item: (%s, %s, %d)' % (self.data, self.type, self.const)
</t>
<t tx="ekr.20040630154517.370">def isNone(self) :
    return (self.type != TYPE_UNKNOWN and self.data is None or
            (self.data == 'None' and not self.const))
</t>
<t tx="ekr.20040630154517.371">def isImplicitNone(self) :
    return self.data is None and self.const
</t>
<t tx="ekr.20040630154517.372">def isMethodCall(self, c, methodArgName):
    return self.type == TYPE_ATTRIBUTE and c != None and \
           len(self.data) == 2 and self.data[0] == methodArgName
</t>
<t tx="ekr.20040630154517.373">def isLocals(self) :
    return self.type == types.DictType and self.data == LOCALS
</t>
<t tx="ekr.20040630154517.374">def setStringType(self, value = types.StringType):
    self.is_really_string = value == types.StringType
</t>
<t tx="ekr.20040630154517.375">def getType(self, typeMap) :
    if self.type != types.StringType or self.is_really_string:
        return self.type
    if self.const :
        return type(self.data)
    if type(self.data) == types.StringType :
        localTypes = typeMap.get(self.data, [])
        if len(localTypes) == 1 :
            return localTypes[0]
    return TYPE_UNKNOWN
</t>
<t tx="ekr.20040630154517.376">def getName(self) :
    if self.type == TYPE_ATTRIBUTE and type(self.data) != types.StringType:
        strValue = ""
        # convert the tuple into a string ('self', 'data') -&gt; self.data
        for item in self.data :
            strValue = '%s.%s' % (strValue, str(item))
        return strValue[1:]
    return str(self.data)
</t>
<t tx="ekr.20040630154517.377">def addAttribute(self, attr) :
    if type(self.data) == types.TupleType :
        self.data = self.data + (attr,)
    else :
        self.data = (self.data, attr)
    self.type = TYPE_ATTRIBUTE
</t>
<t tx="ekr.20040630154517.378">def makeDict(values = (), const = 1) :
    values = tuple(values)
    if not values:
        values = ('&lt;on-stack&gt;',)
    return Item(values, types.DictType, const, len(values))
</t>
<t tx="ekr.20040630154517.379">def makeTuple(values = (), const = 1) :
    return Item(tuple(values), types.TupleType, const, len(values))
</t>
<t tx="ekr.20040630154517.380">def makeList(values = [], const = 1) :
    return Item(values, types.ListType, const, len(values))
</t>
<t tx="ekr.20040630154517.381">def makeFuncReturnValue(stackValue, argCount) :
    data = DATA_UNKNOWN
    # vars() without params == locals()
    if stackValue.type == TYPE_GLOBAL and \
       (stackValue.data == LOCALS or
        (argCount == 0 and stackValue.data == 'vars')) :
        data = LOCALS
    return Item(data, TYPE_FUNC_RETURN)
</t>
<t tx="ekr.20040630154517.382">def makeComparison(stackItems, comparison) :
    return Item((stackItems[0], comparison, stackItems[1]), TYPE_COMPARISON)
</t>
<t tx="ekr.20040630154517.383">@ignore
@language python
&lt;&lt; utils declarations &gt;&gt;
@others
</t>
<t tx="ekr.20040630154517.384">#!/usr/bin/env python

# Copyright (c) 2001-2004, MetaSlash Inc.  All rights reserved.

"""
Print out warnings from Python source files.
"""

import sys
import string
import copy

from pychecker import msgs
from pychecker import Config
from pychecker.Warning import Warning


VAR_ARGS_BITS = 8
MAX_ARGS_MASK = ((1 &lt;&lt; VAR_ARGS_BITS) - 1)

INIT = '__init__'
LAMBDA = '&lt;lambda&gt;'

# number of instructions to check backwards if it was a return
BACK_RETURN_INDEX = 4


_cfg = []

</t>
<t tx="ekr.20040630154517.385">def cfg() :
    return _cfg[-1]
</t>
<t tx="ekr.20040630154517.386">def initConfig(cfg) :
    _cfg.append(cfg)
</t>
<t tx="ekr.20040630154517.387">def pushConfig() :
    newCfg = copy.copy(cfg())
    _cfg.append(newCfg)
</t>
<t tx="ekr.20040630154517.388">def popConfig() :
    del _cfg[-1]
</t>
<t tx="ekr.20040630154517.389">def shouldUpdateArgs(operand) :
    return operand == Config.CHECKER_VAR
</t>
<t tx="ekr.20040630154517.390">def updateCheckerArgs(argStr, func, lastLineNum, warnings) :
    try :
        argList = string.split(argStr)
        # don't require long options to start w/--, we can add that for them
        for i in range(0, len(argList)) :
            if argList[i][0] != '-' :
                argList[i] = '--' + argList[i]

        cfg().processArgs(argList)
        return 1
    except Config.UsageError, detail :
        warn = Warning(func, lastLineNum, msgs.INVALID_CHECKER_ARGS % detail)
        warnings.append(warn)
        return 0
</t>
<t tx="ekr.20040630154517.391">def debug(*args) :
    if cfg().debug: print args
</t>
<t tx="ekr.20040630154517.392">PYTHON_1_5 = 0x10502
PYTHON_2_0 = 0x20000
PYTHON_2_1 = 0x20100
PYTHON_2_2 = 0x20200
PYTHON_2_3 = 0x20300
PYTHON_2_4 = 0x20400

def pythonVersion() :
    return sys.hexversion &gt;&gt; 8
</t>
<t tx="ekr.20040630154517.393">def startswith(s, substr) :
    "Ugh, supporting python 1.5 is a pain"
    return s[0:len(substr)] == substr
</t>
<t tx="ekr.20040630154517.394">def endswith(s, substr) :
    "Ugh, supporting python 1.5 is a pain"
    return s[-len(substr):] == substr
</t>
<t tx="ekr.20040630154517.395"># generic method that can be slapped into any class, thus the self parameter
def std_repr(self) :
    return "&lt;%s at 0x%x: %s&gt;" % (self.__class__.__name__, id(self), str(self))
</t>
<t tx="ekr.20040630154517.396">@ignore
@language python
&lt;&lt; warn declarations &gt;&gt;
@others

if 0:
    # if you want to test w/psyco, include this
    import psyco
    psyco.bind(_checkCode)
</t>
<t tx="ekr.20040630154517.397">#!/usr/bin/env python

# Copyright (c) 2001-2002, MetaSlash Inc.  All rights reserved.

"""
Print out warnings from Python source files.
"""

import os.path
import sys
import string
import types
import traceback
import imp

from pychecker import OP
from pychecker import Stack
from pychecker import function
from pychecker import python

from pychecker import msgs
from pychecker import utils
from pychecker import CodeChecks
from pychecker.Warning import Warning


</t>
<t tx="ekr.20040630154517.398">def cfg() :
    return utils.cfg()
</t>
<t tx="ekr.20040630154517.399">def _checkSelfArg(method, warnings) :
    """Return a Warning if there is no self parameter or
       the first parameter to a method is not self."""

    if not cfg().methodArgName:
        return

    code = method.function.func_code
    err = None
    if method.isStaticMethod():
        if code.co_argcount &gt; 0 and cfg().methodArgName == code.co_varnames[0]:
            err = msgs.SELF_IS_ARG % 'staticmethod'
    elif code.co_argcount &lt; 1: 
        err = msgs.NO_METHOD_ARGS % cfg().methodArgName
    else:
        if method.isClassMethod():
            if code.co_varnames[0] not in cfg().classmethodArgNames:
                err = msgs.SELF_NOT_FIRST_ARG % \
                      (cfg().classmethodArgNames, 'class')
        elif code.co_varnames[0] != cfg().methodArgName:
            err = msgs.SELF_NOT_FIRST_ARG % (cfg().methodArgName, '')

    if err is not None :
        warnings.append(Warning(code, code, err))
</t>
<t tx="ekr.20040630154517.400">def _checkNoSelfArg(func, warnings) :
    "Return a Warning if there is a self parameter to a function."

    code = func.function.func_code
    if code.co_argcount &gt; 0 and cfg().methodArgName in code.co_varnames:
        warnings.append(Warning(code, code, msgs.SELF_IS_ARG % 'function'))
</t>
<t tx="ekr.20040630154517.401">def _checkSubclass(c1, c2):
    try:
        return issubclass(c1.classObject, c2.classObject)
    except (TypeError, AttributeError):
        return 0
</t>
<t tx="ekr.20040630154517.402">_IGNORE_RETURN_TYPES = ( Stack.TYPE_FUNC_RETURN, Stack.TYPE_ATTRIBUTE,
                         Stack.TYPE_GLOBAL, Stack.TYPE_COMPARISON,
                         Stack.TYPE_UNKNOWN)

def _checkReturnWarnings(code) :
    is_getattr = code.func_code.co_name in ('__getattr__', '__getattribute__')
    if is_getattr :
        for line, retval, dummy in code.returnValues :
            if retval.isNone() :
                err = msgs.DONT_RETURN_NONE % code.func_code.co_name
                code.addWarning(err, line+1)

    # there must be at least 2 real return values to check for consistency
    returnValuesLen = len(code.returnValues)
    if returnValuesLen &lt; 2 :
        return

    # if the last return is implicit, check if there are non None returns
    lastReturn = code.returnValues[-1]
    if not code.starts_and_ends_with_finally and \
       cfg().checkImplicitReturns and lastReturn[1].isImplicitNone() :
        for line, retval, dummy in code.returnValues[:-1] :
            if not retval.isNone() :
                code.addWarning(msgs.IMPLICIT_AND_EXPLICIT_RETURNS,
                                lastReturn[0]+1)
                break

    # __get*__ funcs can return different types, don't warn about inconsistency
    if utils.startswith(code.func_code.co_name, '__get') and \
       utils.endswith(code.func_code.co_name, '__') :
        return

    returnType, returnData = None, None
    for line, value, dummy in code.returnValues :
        if not value.isNone() :
            valueType = value.getType(code.typeMap)
            if returnType is None and valueType not in _IGNORE_RETURN_TYPES :
                returnData = value
                returnType = valueType
                continue

            # always ignore None, None can be returned w/any other type
            # FIXME: if we stored func return values, we could do better
            if returnType is not None and not value.isNone() and \
               valueType not in _IGNORE_RETURN_TYPES and \
               returnData.type not in _IGNORE_RETURN_TYPES :
                ok = returnType in (type(value.data), valueType)
                if ok :
                    if returnType == types.TupleType :
                        # FIXME: this isn't perfect, if len == 0
                        # the length can really be 0 OR unknown
                        # we shouldn't check the lengths for equality
                        # ONLY IF one of the lengths is truly unknown
                        if returnData.length &gt; 0 and value.length &gt; 0:
                            ok = returnData.length == value.length
                else :
                    ok = _checkSubclass(returnType, valueType) or \
                         _checkSubclass(valueType, returnType)
                if not ok :
                    code.addWarning(msgs.INCONSISTENT_RETURN_TYPE, line)
</t>
<t tx="ekr.20040630154517.403">def _checkComplex(code, maxValue, value, func, err) :
    if maxValue and value &gt; maxValue :
        line = func.function.func_code.co_firstlineno
        code.addWarning(err % (func.function.__name__, value), line)
</t>
<t tx="ekr.20040630154517.404">def _checkCode(code, codeSource) :
    while code.index &lt; code.maxCode :
        op, oparg, operand = code.popNextOp()
        dispatch_func = CodeChecks.DISPATCH[op]
        if dispatch_func is not None :
            dispatch_func(oparg, operand, codeSource, code)
</t>
<t tx="ekr.20040630154517.405">def _name_unused(var) :
    if var in cfg().unusedNames :
        return 0
    for name in cfg().unusedNames :
        if name != '_' and utils.startswith(var, name) :
            return 0
    return 1
</t>
<t tx="ekr.20040630154517.406">def _checkUnusedParam(var, line, func, code) :
    if line is not None and line == 0 and _name_unused(var) :
        if ((cfg().ignoreSelfUnused or var != cfg().methodArgName) and
            (cfg().varArgumentsUsed or func.varArgName() != var)) :
            code.addWarning(msgs.UNUSED_PARAMETER % var, code.func_code)
</t>
<t tx="ekr.20040630154517.407">def _handleNestedCode(func_code, code, codeSource):
    nested = not (codeSource.main or codeSource.in_class)
    if func_code.co_name == utils.LAMBDA or nested:
        utils.debug(' handling nested code')
        varnames = None
        if nested and func_code.co_name != utils.LAMBDA:
            varnames = func_code.co_varnames + \
                     codeSource.calling_code[-1].function.func_code.co_varnames
        code.init(function.create_fake(func_code.co_name, func_code, {},
                                       varnames))
        _checkCode(code, codeSource)
</t>
<t tx="ekr.20040630154517.408">def _findUnreachableCode(code) :
    # code after RETURN or RAISE is unreachable unless there's a branch to it
    unreachable = {}
    terminals = code.returnValues[:-1] + code.raiseValues
    terminals.sort(lambda a, b: cmp(a[2], b[2]))
    for line, dummy, i in terminals :
        if not code.branches.has_key(i) :
            unreachable[i] = line

    # find the index of the last return
    lastLine, lastItem, lastIndex = code.returnValues[-1]
    if len(code.returnValues) &gt;= 2 :
        lastIndex = code.returnValues[-2][2]
    if code.raiseValues :
        lastIndex = max(lastIndex, code.raiseValues[-1][2])

    # remove last return if it's unreachable AND implicit
    if unreachable.get(lastIndex) == lastLine and lastItem.isImplicitNone() :
        del code.returnValues[-1]
        del unreachable[lastIndex]

    if cfg().unreachableCode :
        for index in unreachable.keys() :
            try :
                if not OP.JUMP_FORWARD(ord(code.bytes[index])) :
                    code.addWarning(msgs.CODE_UNREACHABLE, unreachable[index])
            except IndexError :
                pass
</t>
<t tx="ekr.20040630154517.409">def _checkFunction(module, func, c = None, main = 0, in_class = 0) :
    "Return a list of Warnings found in a function/method."

    # always push a new config object, so we can pop at end of function
    utils.pushConfig()

    code = CodeChecks.Code()
    code.init(func)
    if main:
        for key in func.function.func_globals.keys():
            code.unusedLocals[key] = -1
    codeSource = CodeChecks.CodeSource(module, func, c, main, in_class, code)
    try :
        _checkCode(code, codeSource)

        # handle lambdas
        codeSource.calling_code.append(func)
        for func_code in code.codeObjects.values() :
            _handleNestedCode(func_code, code, codeSource)
        del codeSource.calling_code[-1]

        if not in_class :
            _findUnreachableCode(code)

    except (SystemExit, KeyboardInterrupt) :
        exc_type, exc_value, exc_tb = sys.exc_info()
        raise exc_type, exc_value
    except :
        exc_type, exc_value, exc_tb = sys.exc_info()
        exc_list = traceback.format_exception(exc_type, exc_value, exc_tb)
        for index in range(0, len(exc_list)) :
            exc_list[index] = string.replace(exc_list[index], "\n", "\n\t")
        code.addWarning(msgs.CHECKER_BROKEN % string.join(exc_list, ""))

    if cfg().checkReturnValues :
        _checkReturnWarnings(code)

    if cfg().localVariablesUsed :
        for var, line in code.unusedLocals.items() :
            if line is not None and line &gt; 0 and _name_unused(var) :
                code.addWarning(msgs.UNUSED_LOCAL % var, line)

    if cfg().argumentsUsed :
        op = code.getFirstOp()
        if not (OP.RAISE_VARARGS(op) or OP.RETURN_VALUE(op)) :
            for var, line in code.unusedLocals.items() :
                _checkUnusedParam(var, line, func, code)

    # Check code complexity:
    #   loops should be counted as one branch, but there are typically 3
    #   branches in byte code to setup a loop, so subtract off 2/3's of them
    #    / 2 to approximate real branches
    branches = (len(code.branches.keys()) - (2 * code.loops)) / 2
    lines = (code.getLineNum() - code.func_code.co_firstlineno)
    returns = len(code.returnValues)
    if not main and not in_class :
        args = code.func_code.co_argcount
        locals = len(code.func_code.co_varnames) - args
        _checkComplex(code, cfg().maxArgs, args, func, msgs.TOO_MANY_ARGS)
        _checkComplex(code, cfg().maxLocals, locals, func, msgs.TOO_MANY_LOCALS)
        _checkComplex(code, cfg().maxLines, lines, func, msgs.FUNC_TOO_LONG)
    _checkComplex(code, cfg().maxReturns, returns, func, msgs.TOO_MANY_RETURNS)
    _checkComplex(code, cfg().maxBranches, branches, func, msgs.TOO_MANY_BRANCHES)

    if not (main or in_class) :
        utils.popConfig()
    func.returnValues = code.returnValues
    return (code.warnings, code.globalRefs, code.functionsCalled,
            code.codeObjects.values(), code.returnValues)
</t>
<t tx="ekr.20040630154517.410">def _getUnused(module, globalRefs, dict, msg, filterPrefix = None) :
    "Return a list of warnings for unused globals"

    warnings = []
    for ref in dict.keys() :
        check = not filterPrefix or utils.startswith(ref, filterPrefix)
        if check and globalRefs.get(ref) == None :
            lineInfo = module.moduleLineNums.get(ref)
            if lineInfo:
                warnings.append(Warning(lineInfo[0], lineInfo[1], msg % ref))
    return warnings
</t>
<t tx="ekr.20040630154517.411">def _get_func_info(method) :
    try:
        fc = getattr(method.im_func, 'func_code', None)
        if fc is not None :
            return fc.co_filename, fc.co_firstlineno
    except AttributeError:
        # if the object derives from any object in 2.2,
        # the builtin methods are wrapper_descriptors and
        # have no im_func attr
        pass
    return None, None
</t>
<t tx="ekr.20040630154517.412">_DOT_INIT = '.' + utils.INIT

def _baseInitCalled(classInitInfo, base, functionsCalled) :
    baseInit = getattr(base, utils.INIT, None)
    if baseInit is None or _get_func_info(baseInit) == classInitInfo :
        return 1

    initName = str(base) + _DOT_INIT
    if functionsCalled.has_key(initName) :
        return 1

    # ok, do this the hard way, there may be aliases, so check here
    names = string.split(initName, '.')
    try:
        # i think this can raise an exception if the module is a library (.so)
        obj = sys.modules[names[0]]
    except KeyError:
        return 1
    for i in range(1, len(names)) :
        obj = getattr(obj, names[i], None)
        if obj is None:
            return 0
        if functionsCalled.has_key(string.join(names[i:], '.')) :
            return 1

    return 0
</t>
<t tx="ekr.20040630154517.413">def _checkBaseClassInit(moduleFilename, c, func_code, funcInfo) :
    """Return a list of warnings that occur
       for each base class whose __init__() is not called"""

    warnings = []
    functionsCalled, _, returnValues = funcInfo
    for line, stackItem, dummy in returnValues :
        if stackItem.data != None :
            if not stackItem.isNone() or cfg().returnNoneFromInit :
                warn = Warning(moduleFilename, line, msgs.RETURN_FROM_INIT)
                warnings.append(warn)

    classInit = getattr(c.classObject, utils.INIT, None)
    if cfg().baseClassInitted and classInit is not None :
        classInitInfo = _get_func_info(classInit)
        for base in c.classObject.__bases__ :
            if not _baseInitCalled(classInitInfo, base, functionsCalled) :
                warn = Warning(moduleFilename, func_code,
                               msgs.BASE_CLASS_NOT_INIT % str(base))
                warnings.append(warn)
    return warnings
</t>
<t tx="ekr.20040630154517.414">def _checkOverridenMethods(func, baseClasses, warnings) :
    for baseClass in baseClasses :
        if func.func_name != utils.INIT and \
           not function.same_signature(func, baseClass) :
            err = msgs.METHOD_SIGNATURE_MISMATCH % (func.func_name, str(baseClass))
            warnings.append(Warning(func.func_code, func.func_code, err))
            break
</t>
<t tx="ekr.20040630154517.415">def _updateFunctionWarnings(module, func, c, warnings, globalRefs,
                            main = 0, in_class = 0) :
    "Update function warnings and global references"

    newWarnings, newGlobalRefs, funcs, codeObjects, returnValues = \
                 _checkFunction(module, func, c, main, in_class)
    warnings.extend(newWarnings)
    globalRefs.update(newGlobalRefs)

    return funcs, codeObjects, returnValues
</t>
<t tx="ekr.20040630154517.416">def getBlackList(moduleList) :
    blacklist = []
    for badBoy in moduleList :
        if badBoy[-3:] == ".py":
            badBoy = badBoy[0:-3]
        try :
            file, path, flags = imp.find_module(badBoy)
            if file :
                file.close()
                blacklist.append(path)
        except ImportError :
            pass
    return blacklist
</t>
<t tx="ekr.20040630154517.417">def getStandardLibrary() :
    if cfg().ignoreStandardLibrary :
        try :
            from distutils import sysconfig

            std_lib = sysconfig.get_python_lib()
            path = os.path.split(std_lib)
            if path[1] == 'site-packages' :
                std_lib = path[0]
            return std_lib
        except ImportError :
            return None
</t>
<t tx="ekr.20040630154517.418">def normalize_path(path):
    return os.path.normpath(os.path.normcase(path))
</t>
<t tx="ekr.20040630154517.419">def removeWarnings(warnings, blacklist, std_lib) :
    if std_lib is not None:
        std_lib = normalize_path(std_lib)
    for index in range(len(warnings)-1, -1, -1) :
        filename = normalize_path(warnings[index].file)
        if filename in blacklist or (std_lib is not None and
                                     utils.startswith(filename, std_lib)) :
            del warnings[index]

    return warnings
</t>
<t tx="ekr.20040630154517.420">

class _SuppressionError(Exception) :
	&lt;&lt; class _SuppressionError declarations &gt;&gt;
</t>
<t tx="ekr.20040630154517.421">pass

</t>
<t tx="ekr.20040630154517.422">def _updateSuppressions(suppress, warnings) :
    if not utils.updateCheckerArgs(suppress, 'suppressions', 0, warnings) :
        utils.popConfig()
        raise _SuppressionError
</t>
<t tx="ekr.20040630154517.423">def getSuppression(name, suppressions, warnings) :
    try :
        utils.pushConfig()

        suppress = suppressions[0].get(name, None)
        if suppress is not None :
            _updateSuppressions(suppress, warnings)

        regexList = suppressions[1].keys()
        regexList.sort()
        for regex in regexList :
            match = regex.match(name)
            if match and match.group() == name :
                suppress = 1
                _updateSuppressions(suppressions[1][regex], warnings)

        if not suppress :
            utils.popConfig()

        return suppress
    except _SuppressionError :
        return None
</t>
<t tx="ekr.20040630154517.424">def _findFunctionWarnings(module, globalRefs, warnings, suppressions) :
    for func in module.functions.values() :
        func_code = func.function.func_code
        utils.debug("function:", func_code)

        name = '%s.%s' % (module.moduleName, func.function.__name__)
        suppress = getSuppression(name, suppressions, warnings)
        if cfg().noDocFunc and func.function.__doc__ == None :
            err = msgs.NO_FUNC_DOC % func.function.__name__
            warnings.append(Warning(module.filename(), func_code, err))

        _checkNoSelfArg(func, warnings)
        _updateFunctionWarnings(module, func, None, warnings, globalRefs)
        if suppress is not None :
            utils.popConfig()
</t>
<t tx="ekr.20040630154517.425">def _getModuleFromFilename(module, filename):
    if module.filename() != filename:
        for m in module.modules.values():
            if m.filename() == filename:
                return m
    return module
</t>
<t tx="ekr.20040630154517.426"># Create object for non-2.2 interpreters, any class object will do
try:
    if object: pass
except NameError:
    object = _SuppressionError

# Create property for pre-2.2 interpreters
try :
    if property: pass
except NameError:
    property = None

def _findClassWarnings(module, c, class_code,
                       globalRefs, warnings, suppressions) :
    try:
        className = str(c.classObject)
    except TypeError:
        # goofy __getattr__
        return
    classSuppress = getSuppression(className, suppressions, warnings)
    baseClasses = c.allBaseClasses()
    for base in baseClasses :
        baseModule = str(base)
        if '.' in baseModule :
            # make sure we handle import x.y.z
            packages = string.split(baseModule, '.')
            baseModuleDir = string.join(packages[:-1], '.')
            globalRefs[baseModuleDir] = baseModule

    # handle class variables
    if class_code is not None :
        func = function.create_fake(c.name, class_code)
        _updateFunctionWarnings(module, func, c, warnings, globalRefs, 0, 1)

    filename = module.filename()
    func_code = None
    for method in c.methods.values() :
        if method == None :
            continue
        func_code = method.function.func_code
        utils.debug("method:", func_code)

        try:
            name = str(c.classObject) + '.' + method.function.func_name
        except AttributeError:
            # func_name may not exist
            continue
        methodSuppress = getSuppression(name, suppressions, warnings)

        if cfg().checkSpecialMethods:
            funcname = method.function.func_name
            if funcname[:2] == '__' == funcname[-2:] and \
               funcname != '__init__':
                err = None
                argCount = python.SPECIAL_METHODS.get(funcname, -1)
                if argCount != -1:
                    # if the args are None, it can be any # of args
                    if argCount is not None:
                        minArgs = maxArgs = argCount
                        err = CodeChecks.getFunctionArgErr(funcname,
                                     func_code.co_argcount, minArgs, maxArgs)
                else:
                    err = msgs.NOT_SPECIAL_METHOD % funcname

                if err is not None:
                    warnings.append(Warning(filename, func_code, err))
                
        if cfg().checkOverridenMethods :
            _checkOverridenMethods(method.function, baseClasses, warnings)

        if cfg().noDocFunc and method.function.__doc__ == None :
            err = msgs.NO_FUNC_DOC % method.function.__name__
            warnings.append(Warning(filename, func_code, err))

        _checkSelfArg(method, warnings)
        tmpModule = _getModuleFromFilename(module, func_code.co_filename)
        funcInfo = _updateFunctionWarnings(tmpModule, method, c, warnings, globalRefs)
        if func_code.co_name == utils.INIT :
            if utils.INIT in dir(c.classObject) :
                warns = _checkBaseClassInit(filename, c, func_code, funcInfo)
                warnings.extend(warns)
            elif cfg().initDefinedInSubclass :
                err = msgs.NO_INIT_IN_SUBCLASS % c.name
                warnings.append(Warning(filename, c.getFirstLine(), err))
        if methodSuppress is not None :
            utils.popConfig()

    if c.memberRefs and cfg().membersUsed :
        memberList = c.memberRefs.keys()
        memberList.sort()
        err = msgs.UNUSED_MEMBERS % (string.join(memberList, ', '), c.name)
        warnings.append(Warning(filename, c.getFirstLine(), err))

    try:
        newStyleClass = issubclass(c.classObject, object)
    except TypeError:
        # FIXME: perhaps this should warn b/c it may be a class???
        newStyleClass = 0

    slots = c.statics.get('__slots__')
    if slots is not None and cfg().slots:
        lineNum = c.lineNums['__slots__']
        if not newStyleClass:
            err = msgs.USING_SLOTS_IN_CLASSIC_CLASS % c.name
            warnings.append(Warning(filename, lineNum, err))
        elif len(slots.data) == 0 and cfg().emptySlots:
            err = msgs.EMPTY_SLOTS % c.name
            warnings.append(Warning(filename, lineNum, err))

    if not newStyleClass and property is not None and cfg().classicProperties:
        for static in c.statics.keys():
            if type(getattr(c.classObject, static, None)) == property:
                err = msgs.USING_PROPERTIES_IN_CLASSIC_CLASS % (static, c.name)
                warnings.append(Warning(filename, c.lineNums[static], err))

    coerceMethod = c.methods.get('__coerce__')
    if newStyleClass and coerceMethod:
        lineNum = coerceMethod.function.func_code.co_firstlineno
        err = msgs.USING_COERCE_IN_NEW_CLASS % c.name
        warnings.append(Warning(filename, lineNum, err))

    gettroMethod = c.methods.get('__getattribute__')
    if not newStyleClass and gettroMethod:
        lineNum = gettroMethod.function.func_code.co_firstlineno
        err = msgs.USING_GETATTRIBUTE_IN_OLD_CLASS % c.name
        warnings.append(Warning(filename, lineNum, err))

    if cfg().noDocClass and c.classObject.__doc__ == None :
        method = c.methods.get(utils.INIT, None)
        if method != None :
            func_code = method.function.func_code
        # FIXME: check to make sure this is in our file,
        #        not a base class file???
        err = msgs.NO_CLASS_DOC % c.classObject.__name__
        warnings.append(Warning(filename, func_code, err))

    # we have to do this here, b/c checkFunction doesn't popConfig for classes
    # this allows us to have __pychecker__ apply to all methods
    # when defined at class scope
    if class_code is not None :
        utils.popConfig()

    if classSuppress is not None :
        utils.popConfig()
</t>
<t tx="ekr.20040630154517.427">def find(moduleList, initialCfg, suppressions = None) :
    "Return a list of warnings found in the module list"

    if suppressions is None :
        suppressions = {}, {}

    utils.initConfig(initialCfg)

    warnings = []
    for module in moduleList :
        if module.moduleName in cfg().blacklist :
            continue

        modSuppress = getSuppression(module.moduleName, suppressions, warnings)
        globalRefs, classCodes = {}, {}

        # main_code can be null if there was a syntax error
        if module.main_code != None :
            funcInfo = _updateFunctionWarnings(module, module.main_code,
                                               None, warnings, globalRefs, 1)
            for code in funcInfo[1] :
                classCodes[code.co_name] = code

        _findFunctionWarnings(module, globalRefs, warnings, suppressions)

        for c in module.classes.values() :
                _findClassWarnings(module, c, classCodes.get(c.name),
                                   globalRefs, warnings, suppressions)

        if cfg().noDocModule and \
           module.module != None and module.module.__doc__ == None :
            warnings.append(Warning(module.filename(), 1, msgs.NO_MODULE_DOC))

        if cfg().allVariablesUsed or cfg().privateVariableUsed :
            prefix = None
            if not cfg().allVariablesUsed :
                prefix = "_"
            for ignoreVar in cfg().variablesToIgnore + cfg().unusedNames :
                globalRefs[ignoreVar] = ignoreVar
            warnings.extend(_getUnused(module, globalRefs, module.variables,
                                       msgs.VAR_NOT_USED, prefix))
        if cfg().importUsed :
            if module.moduleName != utils.INIT or cfg().packageImportUsed :
                # always ignore readline module, if [raw_]input() is used
                if globalRefs.has_key('input') or \
                   globalRefs.has_key('raw_input'):
                    globalRefs['readline'] = 0
                warnings.extend(_getUnused(module, globalRefs, module.modules,
                                           msgs.IMPORT_NOT_USED))

        if module.main_code != None :
            utils.popConfig()
        if modSuppress is not None :
            utils.popConfig()

    std_lib = None
    if cfg().ignoreStandardLibrary :
        std_lib = getStandardLibrary()
    return removeWarnings(warnings, getBlackList(cfg().blacklist), std_lib)
</t>
<t tx="ekr.20040630154517.428">@ignore
@language python
&lt;&lt; Warning declarations &gt;&gt;
@others
</t>
<t tx="ekr.20040630154517.429">#!/usr/bin/env python

# Copyright (c) 2001, MetaSlash Inc.  All rights reserved.

"""
Warning class to hold info about each warning.
"""


</t>
<t tx="ekr.20040630154517.430">class Warning :
	&lt;&lt; class Warning declarations &gt;&gt;
	@others
</t>
<t tx="ekr.20040630154517.431">"Class which holds error information."

</t>
<t tx="ekr.20040630154517.432">def __init__(self, file, line, err) :
    if hasattr(file, "function") :
        file = file.function.func_code.co_filename
    elif hasattr(file, "co_filename") :
        file = file.co_filename
    elif hasattr(line, "co_filename") :
        file = line.co_filename
    if file[:2] == './' :
        file = file[2:]
    self.file = file

    if hasattr(line, "co_firstlineno") :
        line = line.co_firstlineno
    if line == None :
        line = 1
    self.line = line
    self.err = err
</t>
<t tx="ekr.20040630154517.433">def __cmp__(self, warn) :
    if warn == None :
        return 1
    if self.file != warn.file :
        return cmp(self.file, warn.file)
    if self.line != warn.line :
        return cmp(self.line, warn.line)
    return cmp(self.err, warn.err)
</t>
<t tx="ekr.20040630154517.434">def format(self) :
    return "%s:%d: %s" % (self.file, self.line, self.err)
</t>
<t tx="ekr.20040630154517.435">def output(self, stream) :
    stream.write(self.format() + "\n")
</t>
<t tx="ekr.20040630154517.436">@ignore
@language python
"""
Copyright (c) 2001, MetaSlash Inc.  All rights reserved.

PyChecker is a tool for finding common bugs in python source code.
It finds problems that are typically caught by a compiler for less
dynamic languages, like C and C++.  It is also similar to lint.

Contact Info:
  http://pychecker.sourceforge.net/
  pychecker-list@lists.sourceforge.net
"""

# A version # to check against in the main module (checker.py)
# this will allow us to check if there are two versions of checker
# in site-packages and local dir
MAIN_MODULE_VERSION = 1

</t>
<t tx="ekr.20040630154517.437"></t>
</tnodes>
</leo_file>
