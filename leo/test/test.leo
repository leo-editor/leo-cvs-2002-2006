<?xml version="1.0" encoding="UTF-8"?>
<leo_file>
<leo_header file_format="2" tnodes="0" max_tnode_index="2256" clone_windows="0"/>
<globals body_outline_ratio="0.50724637681159424">
	<global_window_position top="10" left="82" height="784" width="822"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences>
</preferences>
<find_panel_settings>
	<find_string></find_string>
	<change_string></change_string>
</find_panel_settings>
<vnodes>
<v t="edream.110203161858"><vh>Distribution checklist</vh>
<v t="edream.110203161858.5" tnodeList="edream.110203161858.5"><vh>@file-nosent c:\prog\leoCVS\.pycheckrc</vh></v>
<v t="edream.110203161858.1"><vh>@url http://www.python.org/pypi?:action=submit_form</vh></v>
</v>
<v t="edream.110203161858.2"><vh>Notes</vh>
<v t="edream.110203161858.3"><vh>Quote from Alex Martelli</vh></v>
<v t="edream.110203161858.4"><vh>How to get screenshots</vh></v>
<v t="edream.110203161858.103"><vh>Python related...</vh>
<v t="edream.110203161858.104"><vh>Assignment tests</vh></v>
<v t="edream.110203161858.105"><vh>alloc tests</vh></v>
<v t="edream.110203161858.106"><vh>Use xml.sax</vh></v>
<v t="edream.110203161858.107"><vh>New import</vh></v>
<v t="edream.110203161858.108"><vh>Singleton sequences</vh></v>
<v t="edream.112003031953"><vh>tuple unpacking test</vh></v>
</v>
</v>
<v t="edream.110203161858.6" a="E"><vh>Tests...</vh>
<v t="edream.110203161858.25" a="E"><vh>Body pane &amp; typing</vh>
<v t="edream.110203161858.26" a="V"><vh>@file c:\prog\test\wrap_test.txt</vh>
<v t="edream.110203161858.27"><vh>wrap node</vh></v>
<v t="edream.110203161858.28"><vh>nowrap node</vh></v>
</v>
</v>
<v t="edream.110203161858.29"><vh>Commands...</vh>
<v t="edream.110203161858.30"><vh>Read @file nodes</vh>
<v t="edream.110203161858.31"><vh>@file c:\prog\test\atFileTest.txt</vh>
<v t="edream.110203161858.32"><vh>Node 1</vh></v>
</v>
</v>
<v t="edream.110203161858.33"><vh>Write Missing @file nodes test</vh>
<v t="edream.110203161858.34"><vh>@file ../test/missing_test.txt</vh></v>
</v>
<v t="edream.110203161858.35"><vh>Go to line number test</vh>
<v t="edream.110203161858.36"><vh>@file c:\prog\test\goToLineNumber.txt</vh>
<v t="edream.110203161858.37"><vh>__init__</vh></v>
<v t="edream.110203161858.38"><vh>__init__</vh></v>
</v>
</v>
<v t="edream.110203161858.39" tnodeList="edream.110203161858.39,edream.110203161858.40,edream.110203161858.41,edream.110203161858.42"><vh>@file c:\prog\test\undoTest</vh>
<v t="edream.110203161858.40"><vh>&lt;&lt; ref 1 &gt;&gt;</vh></v>
<v t="edream.110203161858.41"><vh>node 1</vh></v>
<v t="edream.110203161858.42"><vh>node 2</vh></v>
</v>
<v t="edream.110203161858.43"><vh>Undo tests...</vh>
<v t="edream.110203161858.44"><vh>Simple</vh>
<v t="edream.110203161858.45"><vh>A</vh>
<v t="edream.110203161858.46"><vh>B</vh>
<v t="edream.110203161858.47"><vh>C</vh></v>
<v t="edream.110203161858.48"><vh>C2</vh></v>
</v>
</v>
</v>
<v t="edream.110203161858.49"><vh>extract commands</vh></v>
</v>
</v>
<v t="edream.110203161858.50"><vh>Dialog tests</vh>
<v t="edream.110203161858.51"><vh>Test askOk</vh></v>
<v t="edream.110203161858.52"><vh>Test aboutLeo</vh></v>
<v t="edream.110203161858.53"><vh>Test askLeoID</vh></v>
<v t="edream.110203161858.54"><vh>Test askOkCancelNumber</vh></v>
<v t="edream.110203161858.55"><vh>Test askOkCancel</vh></v>
<v t="edream.110203161858.56"><vh>Test askYesNo</vh></v>
<v t="edream.110203161858.57"><vh>Test askYesNoCancel</vh></v>
</v>
<v t="edream.110203161858.58"><vh>Directives...</vh>
<v t="edream.110203161858.59"><vh>@encoding test</vh>
<v t="edream.110203161858.60"><vh>@file c:\prog\test\encodingTest.txt</vh>
<v t="edream.110203161858.61"><vh>Umlaut in headline Ã«</vh></v>
</v>
</v>
<v t="edream.110203161858.62"><vh>@lineending and @encoding tests</vh></v>
<v t="edream.110203161858.63"><vh>@url file:///C:/prog/test/sortText.leo</vh></v>
<v t="edream.110203161858.86"><vh>tab width tests</vh>
<v t="edream.110203161858.87"><vh>2</vh></v>
<v t="edream.110203161858.88"><vh>4</vh></v>
<v t="edream.110203161858.89"><vh>6</vh></v>
<v t="edream.110203161858.90"><vh>8</vh></v>
</v>
</v>
<v t="edream.110203161858.64"><vh>Incremental colorizer tests</vh>
<v t="edream.110203161858.65"><vh>(Fixed syntax coloring bugs when language/comments change)</vh>
<v t="edream.110203161858.66"><vh>Comments</vh></v>
</v>
<v t="edream.110203161858.67"><vh>(Incremental Syntax Coloring)</vh>
<v t="edream.110203161858.68"><vh> Tests</vh>
<v t="edream.110203161858.69"><vh> Long text for tests</vh></v>
<v t="edream.110203161858.70"><vh>Dave Hein</vh>
<v t="edream.110203161858.71"><vh>Test</vh></v>
</v>
<v t="edream.110203161858.72"><vh>Dave Hein2</vh>
<v t="edream.110203161858.73"><vh>NewHeadline</vh></v>
</v>
<v t="edream.110203161858.74"><vh>Long test</vh></v>
<v t="edream.110203161858.75"><vh>problems</vh></v>
</v>
</v>
<v t="edream.110203161858.76"><vh>tests</vh></v>
<v t="edream.110203161858.77"><vh>@file c:\prog\test\tab_test.txt</vh></v>
</v>
<v t="edream.110203161858.78"><vh>Plugins...</vh>
<v t="edream.110203161858.79"><vh>@image Icons/Leoapp.GIF</vh></v>
<v t="edream.110203161858.80"><vh>Spell test </vh>
<v t="edream.110203161858.81"><vh>node two</vh></v>
<v t="edream.110203161858.82"><vh>node two no misspellings</vh></v>
</v>
<v t="edream.110203161858.83"><vh>Status line</vh>
<v t="edream.110203161858.84"><vh>put message</vh></v>
<v t="edream.110203161858.85"><vh>clear</vh></v>
</v>
<v t="edream.110203161858.96"><vh>Icon bar</vh>
<v t="edream.110203161858.97"><vh>add some buttons</vh></v>
<v t="edream.110203161858.98"><vh>add all gif files</vh></v>
<v t="edream.110203161858.99"><vh>clear</vh></v>
<v t="edream.110203161858.100"><vh>hide</vh></v>
<v t="edream.110203161858.101"><vh>configure</vh></v>
<v t="edream.110203161858.102"><vh>show (puts at bottom)</vh></v>
</v>
</v>
<v t="edream.110203161858.111"><vh>Test Files...</vh>
<v t="edream.110203161858.18" a=""><vh>&lt;&lt; ref &gt;&gt; (cloned)</vh></v>
<v t="edream.110203161858.112" tnodeList="edream.110203161858.112,edream.110203161858.113,edream.110203161858.113"><vh>@file c:\prog\test\atRawTest.txt</vh>
<v t="edream.110203161858.113"><vh>&lt;&lt; ref &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.114" tnodeList="edream.110203161858.114"><vh>@file c:\prog\test\delimsTest.txt</vh></v>
<v t="edream.110203161858.115" tnodeList="edream.110203161858.115,edream.110203161858.116,edream.110203161858.117,edream.110203161858.118,edream.110203161858.119,edream.110203161858.120,edream.110203161858.121,edream.110203161858.122,edream.110203161858.123,edream.110203161858.124,edream.110203161858.125,edream.110203161858.126,edream.110203161858.127,edream.110203161858.128,edream.110203161858.129,edream.110203161858.130,edream.110203161858.131,edream.110203161858.132,edream.110203161858.133,edream.110203161858.134,edream.110203161858.135,edream.110203161858.136,edream.110203161858.137,edream.110203161858.138,edream.110203161858.139,edream.110203161858.140,edream.110203161858.141,edream.110203161858.142"><vh>@file c:\prog\test\leoApp.py</vh>
<v t="edream.110203161858.116"><vh>app.__init__</vh>
<v t="edream.110203161858.117"><vh>&lt;&lt; define global constants &gt;&gt;</vh></v>
<v t="edream.110203161858.118"><vh>&lt;&lt; define global data structures &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.119"><vh>app.closeLeoWindow</vh></v>
<v t="edream.110203161858.120"><vh>app.destroyAllGlobalWindows</vh></v>
<v t="edream.110203161858.121"><vh>app.destroyAllOpenWithFiles</vh></v>
<v t="edream.110203161858.122"><vh>app.destroyAllWindowObjects</vh>
<v t="edream.110203161858.123"><vh>&lt;&lt; clear all vnodes and tnodes in the tree&gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.124"><vh>app.destroyOpenWithFilesForFrame</vh></v>
<v t="edream.110203161858.125"><vh>app.destroyOpenWithFileWithDict</vh></v>
<v t="edream.110203161858.126"><vh>app.destroyWindow</vh></v>
<v t="edream.110203161858.127"><vh>app.finishCreate</vh>
<v t="edream.110203161858.128"><vh>&lt;&lt; return false if not v2.1 or above &gt;&gt;</vh></v>
<v t="edream.110203161858.129"><vh>&lt;&lt; set loadDir &gt;&gt;</vh></v>
<v t="edream.110203161858.130"><vh>&lt;&lt; set the default Leo icon &gt;&gt;</vh>
<v t="edream.110203161858.131"><vh>&lt;&lt; set v834 if version is 8.3.4 or greater &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.132"><vh>&lt;&lt; set app.tkEncoding &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.133"><vh>app.finishQuit</vh></v>
<v t="edream.110203161858.134"><vh>app.get/setRealMenuName &amp; setRealMenuNamesFromTable</vh></v>
<v t="edream.110203161858.135"><vh>app.onQuit</vh></v>
<v t="edream.110203161858.136"><vh>app.setLeoID</vh>
<v t="edream.110203161858.137"><vh>&lt;&lt; return if we can set self.leoID from sys.leoID&gt;&gt;</vh></v>
<v t="edream.110203161858.138"><vh>&lt;&lt; return if we can set self.leoID from "leoID.txt" &gt;&gt;</vh></v>
<v t="edream.110203161858.139"><vh>&lt;&lt; put up a dialog requiring a valid id &gt;&gt;</vh></v>
<v t="edream.110203161858.140"><vh>&lt;&lt; attempt to create leoID.txt &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.141"><vh>app.setLog, lockLog, unlocklog</vh></v>
<v t="edream.110203161858.142"><vh>app.writeWaitingLog</vh></v>
</v>
<v t="edream.110203161858.143" tnodeList="edream.110203161858.143,edream.110203161858.144,edream.110203161858.145,edream.110203161858.146,edream.110203161858.148,edream.110203161858.149,edream.110203161858.150,edream.110203161858.151,edream.110203161858.152,edream.110203161858.153,edream.110203161858.154,edream.110203161858.155,edream.110203161858.156,edream.110203161858.157,edream.110203161858.158,edream.110203161858.159,edream.110203161858.160,edream.110203161858.161,edream.110203161858.162,edream.110203161858.163,edream.110203161858.164,edream.110203161858.165,edream.110203161858.166,edream.110203161858.167,edream.110203161858.168,edream.110203161858.169,edream.110203161858.170,edream.110203161858.172,edream.110203161858.173,edream.110203161858.174,edream.110203161858.175,edream.110203161858.176,edream.110203161858.177,edream.110203161858.178,edream.110203161858.179,edream.110203161858.180,edream.110203161858.181,edream.110203161858.182,edream.110203161858.183,edream.110203161858.184,edream.110203161858.186,edream.110203161858.187,edream.110203161858.188,edream.110203161858.189,edream.110203161858.190,edream.110203161858.191,edream.110203161858.192,edream.110203161858.193,edream.110203161858.194,edream.110203161858.195,edream.110203161858.196,edream.110203161858.197,edream.110203161858.198,edream.110203161858.199,edream.110203161858.200,edream.110203161858.201,edream.110203161858.202,edream.110203161858.203,edream.110203161858.204,edream.110203161858.205,edream.110203161858.207,edream.110203161858.208,edream.110203161858.209,edream.110203161858.210,edream.110203161858.213,edream.110203161858.215,edream.110203161858.216,edream.110203161858.217,edream.110203161858.218,edream.110203161858.219,edream.110203161858.220,edream.110203161858.211,edream.110203161858.212,edream.110203161858.214,edream.110203161858.221,edream.110203161858.222,edream.110203161858.225,edream.110203161858.226,edream.110203161858.224,edream.110203161858.223,edream.110203161858.227,edream.110203161858.228,edream.110203161858.206,edream.110203161858.230,edream.110203161858.231,edream.110203161858.232,edream.110203161858.233,edream.110203161858.234,edream.110203161858.235,edream.110203161858.236,edream.110203161858.237,edream.110203161858.238,edream.110203161858.239,edream.110203161858.240,edream.110203161858.242,edream.110203161858.243,edream.110203161858.244,edream.110203161858.245,edream.110203161858.247,edream.110203161858.248,edream.110203161858.249,edream.110203161858.250,edream.110203161858.251,edream.110203161858.252,edream.110203161858.257,edream.110203161858.258,edream.110203161858.259,edream.110203161858.254,edream.110203161858.253,edream.110203161858.255,edream.110203161858.256,edream.110203161858.260,edream.110203161858.261,edream.110203161858.262,edream.110203161858.263,edream.110203161858.264,edream.110203161858.265,edream.110203161858.268,edream.110203161858.269,edream.110203161858.270,edream.110203161858.271,edream.110203161858.272,edream.110203161858.273,edream.110203161858.274,edream.110203161858.275,edream.110203161858.276,edream.110203161858.277,edream.110203161858.278,edream.110203161858.279,edream.110203161858.280,edream.110203161858.270,edream.110203161858.281,edream.110203161858.273,edream.110203161858.282,edream.110203161858.283,edream.110203161858.285,edream.110203161858.286,edream.110203161858.287,edream.110203161858.288,edream.110203161858.289,edream.110203161858.290,edream.110203161858.291,edream.110203161858.292,edream.110203161858.293,edream.110203161858.294,edream.110203161858.295,edream.110203161858.296,edream.110203161858.297,edream.110203161858.298,edream.110203161858.299,edream.110203161858.300,edream.110203161858.301,edream.110203161858.302,edream.110203161858.303,edream.110203161858.304,edream.110203161858.307,edream.110203161858.305,edream.110203161858.306,edream.110203161858.308,edream.110203161858.309,edream.110203161858.310,edream.110203161858.311,edream.110203161858.312,edream.110203161858.313,edream.110203161858.314,edream.110203161858.315,edream.110203161858.316,edream.110203161858.317,edream.110203161858.319,edream.110203161858.320,edream.110203161858.321,edream.110203161858.322,edream.110203161858.323,edream.110203161858.324,edream.110203161858.325,edream.110203161858.326,edream.110203161858.328,edream.110203161858.329,edream.110203161858.330,edream.110203161858.331,edream.110203161858.332,edream.110203161858.333,edream.110203161858.334,edream.110203161858.335,edream.110203161858.337,edream.110203161858.338,edream.110203161858.339,edream.110203161858.340,edream.110203161858.341,edream.110203161858.342,edream.110203161858.344,edream.110203161858.345,edream.110203161858.346,edream.110203161858.347,edream.110203161858.348,edream.110203161858.350,edream.110203161858.351,edream.110203161858.352,edream.110203161858.353,edream.110203161858.354,edream.110203161858.355,edream.110203161858.356,edream.110203161858.357,edream.110203161858.358,edream.110203161858.359,edream.110203161858.361,edream.110203161858.362,edream.110203161858.363,edream.110203161858.364,edream.110203161858.365,edream.110203161858.366,edream.110203161858.367,edream.110203161858.368,edream.110203161858.369,edream.110203161858.372,edream.110203161858.373,edream.110203161858.374,edream.110203161858.375,edream.110203161858.376,edream.110203161858.377,edream.110203161858.378,edream.110203161858.379,edream.110203161858.380,edream.110203161858.381,edream.110203161858.382,edream.110203161858.383,edream.110203161858.384,edream.110203161858.385,edream.110203161858.386,edream.110203161858.387,edream.110203161858.388,edream.110203161858.390,edream.110203161858.391,edream.110203161858.392,edream.110203161858.393,edream.110203161858.394,edream.110203161858.396,edream.110203161858.397,edream.110203161858.398,edream.110203161858.399,edream.110203161858.400,edream.110203161858.401,edream.110203161858.403,edream.110203161858.404,edream.110203161858.405"><vh>@file c:\prog\test\leoAtFile.py </vh>
<v t="edream.110203161858.144"><vh>&lt;&lt; global atFile constants &gt;&gt;</vh></v>
<v t="edream.110203161858.145"><vh>&lt;&lt; class baseAtFile methods &gt;&gt;</vh>
<v t="edream.110203161858.146"><vh>atFile.__init__ &amp; initIvars</vh></v>
<v t="edream.110203161858.147"><vh>Reading</vh>
<v t="edream.110203161858.148"><vh> top_df.readAll</vh></v>
<v t="edream.110203161858.149"><vh>top_df.error</vh></v>
<v t="edream.110203161858.150"><vh>top_df.read</vh>
<v t="edream.110203161858.151"><vh>&lt;&lt; set fileName from root and importFileName &gt;&gt;</vh></v>
<v t="edream.110203161858.152"><vh>&lt;&lt; open file or return false &gt;&gt;</vh>
<v t="edream.110203161858.153"><vh>&lt;&lt; warn on read-only file &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.154"><vh>&lt;&lt; copy ivars to df &gt;&gt;</vh></v>
<v t="edream.110203161858.155"><vh>&lt;&lt; warn about non-empty unvisited nodes &gt;&gt;</vh></v>
<v t="edream.110203161858.156"><vh>&lt;&lt; copy all tempBodyStrings to tnodes &gt;&gt;</vh></v>
<v t="edream.110203161858.157"><vh>&lt;&lt; delete all tempBodyStrings &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.158"><vh>top_df.scanDefaultDirectory</vh>
<v t="edream.110203161858.159"><vh>&lt;&lt; Set path from @file node &gt;&gt;</vh></v>
<v t="edream.110203161858.160"><vh>&lt;&lt; handle @path &gt;&gt;</vh>
<v t="edream.110203161858.161"><vh>&lt;&lt; compute relative path from s[k:] &gt;&gt;</vh></v>
<v t="edream.110203161858.162"><vh>&lt;&lt; handle absolute path &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.163"><vh>&lt;&lt; Set current directory &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.164"><vh>top_df.scanHeader</vh>
<v t="edream.110203161858.165"><vh>&lt;&lt; skip any non @+leo lines &gt;&gt;</vh></v>
<v t="edream.110203161858.166"><vh>&lt;&lt; make sure we have @+leo &gt;&gt;</vh></v>
<v t="edream.110203161858.167"><vh>&lt;&lt; read optional version param &gt;&gt;</vh></v>
<v t="edream.110203161858.168"><vh>&lt;&lt; read optional encoding param &gt;&gt;</vh></v>
<v t="edream.110203161858.169"><vh>&lt;&lt; set the closing comment delim &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.170"><vh>top_df.readLine</vh></v>
</v>
<v t="edream.110203161858.171"><vh>Writing</vh>
<v t="edream.110203161858.172"><vh>top_df.writeAll</vh>
<v t="edream.110203161858.173"><vh>&lt;&lt; Clear all orphan bits &gt;&gt;</vh></v>
<v t="edream.110203161858.174"><vh>&lt;&lt; handle v's tree &gt;&gt;</vh></v>
<v t="edream.110203161858.175"><vh>&lt;&lt; say the command is finished &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.176"><vh>top_df.write, rawWrite, silentWrite</vh></v>
<v t="edream.110203161858.177"><vh>top_df.writeOld/NewDerivedFiles</vh></v>
<v t="edream.110203161858.178"><vh>top_df.writeMissing</vh>
<v t="edream.110203161858.179"><vh>&lt;&lt; set missing if the file does not exist &gt;&gt;</vh></v>
<v t="edream.110203161858.180"><vh>&lt;&lt; create df.outputFile &gt;&gt;</vh></v>
<v t="edream.110203161858.181"><vh>&lt;&lt; write the @file node &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="edream.110203161858.182"><vh>&lt;&lt; class baseOldDerivedFile methods &gt;&gt;</vh>
<v t="edream.110203161858.183"><vh> old_df.__init__&amp; initIvars</vh>
<v t="edream.110203161858.184"><vh>&lt;&lt; init atFile ivars &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.185"><vh>Reading (3.x)</vh>
<v t="edream.110203161858.186"><vh>old_df.readOpenFile</vh></v>
<v t="edream.110203161858.187"><vh>completeFirstDirectives</vh></v>
<v t="edream.110203161858.188"><vh>completeLastDirectives</vh></v>
<v t="edream.110203161858.189"><vh>createNthChild</vh>
<v t="edream.110203161858.190"><vh>&lt;&lt; check the headlines &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.191"><vh>handleLinesFollowingSentinel</vh>
<v t="edream.110203161858.192"><vh>&lt;&lt; remove the comment delims from s &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.193"><vh>readLine</vh></v>
<v t="edream.110203161858.194"><vh>readLinesToNextSentinel</vh></v>
<v t="edream.110203161858.195"><vh>scanDoc</vh>
<v t="edream.110203161858.196"><vh>&lt;&lt; Skip the opening sentinel &gt;&gt;</vh></v>
<v t="edream.110203161858.197"><vh>&lt;&lt; Skip an opening block delim &gt;&gt;</vh></v>
<v t="edream.110203161858.198"><vh>&lt;&lt; set kind, nextLine &gt;&gt;</vh></v>
<v t="edream.110203161858.199"><vh>&lt;&lt; Skip the leading stuff &gt;&gt;</vh></v>
<v t="edream.110203161858.200"><vh>&lt;&lt; Append s to out &gt;&gt;</vh></v>
<v t="edream.110203161858.201"><vh>&lt;&lt; Remove a closing block delim from out &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.202"><vh>scanText</vh>
<v t="edream.110203161858.203"><vh>&lt;&lt; put the next line into s &gt;&gt;</vh></v>
<v t="edream.110203161858.204"><vh>&lt;&lt; set kind, nextKind &gt;&gt;</vh></v>
<v t="edream.110203161858.205"><vh>&lt;&lt; Set lineIndent, linep and leading_ws &gt;&gt;</vh></v>
<v t="edream.110203161858.206"><vh>&lt;&lt; handle unexpected end of text &gt;&gt;</vh></v>
<v t="edream.110203161858.207"><vh>&lt;&lt; handle the line in s &gt;&gt;</vh>
<v t="edream.110203161858.208"><vh>&lt;&lt; append non-sentinel line &gt;&gt;</vh></v>
<v t="edream.110203161858.209"><vh>&lt;&lt; handle common sentinels &gt;&gt;</vh>
<v t="edream.110203161858.210"><vh>&lt;&lt; handle an ending sentinel &gt;&gt;</vh></v>
<v t="edream.110203161858.211"><vh>&lt;&lt; scan old ref &gt;&gt; (3.0)</vh></v>
<v t="edream.110203161858.212"><vh>&lt;&lt; scan @+at &gt;&gt;</vh></v>
<v t="edream.110203161858.213"><vh>&lt;&lt; scan @+body &gt;&gt;</vh></v>
<v t="edream.110203161858.214"><vh>&lt;&lt; scan @+doc &gt;&gt;</vh></v>
<v t="edream.110203161858.215"><vh>&lt;&lt; scan @+node &gt;&gt;</vh>
<v t="edream.110203161858.216"><vh>&lt;&lt; Set childIndex &gt;&gt;</vh></v>
<v t="edream.110203161858.217"><vh>&lt;&lt; Set cloneIndex &gt;&gt;</vh></v>
<v t="edream.110203161858.218"><vh>&lt;&lt; Set headline and ref &gt;&gt;</vh></v>
<v t="edream.110203161858.219"><vh>&lt;&lt; Check the filename in the sentinel &gt;&gt;</vh></v>
<v t="edream.110203161858.220"><vh>&lt;&lt; look for sentinels that may follow a reference &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.221"><vh>&lt;&lt; scan @+others &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.222"><vh>&lt;&lt; handle rare sentinels &gt;&gt;</vh>
<v t="edream.110203161858.223"><vh>&lt;&lt; scan @+leo &gt;&gt;</vh></v>
<v t="edream.110203161858.224"><vh>&lt;&lt; scan @@ &gt;&gt;</vh></v>
<v t="edream.110203161858.225"><vh>&lt;&lt; scan @comment &gt;&gt;</vh></v>
<v t="edream.110203161858.226"><vh>&lt;&lt; scan @delims &gt;&gt;</vh></v>
<v t="edream.110203161858.227"><vh>&lt;&lt; scan @verbatim &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.228"><vh>&lt;&lt; warn about unknown sentinel &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="edream.110203161858.229"><vh>Sentinels (3.x)</vh>
<v t="edream.110203161858.230"><vh>nodeSentinelText</vh>
<v t="edream.110203161858.231"><vh>&lt;&lt; remove comment delims from h if necessary &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.232"><vh>putCloseNodeSentinel</vh></v>
<v t="edream.110203161858.233"><vh>putCloseSentinels</vh></v>
<v t="edream.110203161858.234"><vh>putOpenLeoSentinel</vh></v>
<v t="edream.110203161858.235"><vh>putOpenNodeSentinel</vh></v>
<v t="edream.110203161858.236"><vh>putOpenSentinels</vh></v>
<v t="edream.110203161858.237"><vh>putSentinel (applies cweb hack)</vh></v>
<v t="edream.110203161858.238"><vh>sentinelKind</vh></v>
<v t="edream.110203161858.239"><vh>sentinelName</vh></v>
<v t="edream.110203161858.240"><vh>skipSentinelStart</vh></v>
</v>
<v t="edream.110203161858.241"><vh>Testing (3.x)</vh>
<v t="edream.110203161858.242"><vh>scanAll</vh></v>
<v t="edream.110203161858.243"><vh>scanFile</vh>
<v t="edream.110203161858.244"><vh>&lt;&lt; open file &gt;&gt;</vh></v>
<v t="edream.110203161858.245"><vh>&lt;&lt; Scan the file buffer  &gt;&gt;</vh></v>
</v>
</v>
<v t="edream.110203161858.246"><vh>Utilites (3.x)</vh>
<v t="edream.110203161858.247"><vh>directiveKind</vh></v>
<v t="edream.110203161858.248"><vh>error</vh></v>
<v t="edream.110203161858.249"><vh>readError</vh></v>
<v t="edream.110203161858.250"><vh>scanAllDirectives</vh>
<v t="edream.110203161858.251"><vh>&lt;&lt; Set ivars &gt;&gt;</vh></v>
<v t="edream.110203161858.252"><vh>&lt;&lt; Set path from @file node &gt;&gt;</vh></v>
<v t="edream.110203161858.253"><vh>&lt;&lt; Test for @comment and @language &gt;&gt;</vh></v>
<v t="edream.110203161858.254"><vh>&lt;&lt; Test for @encoding &gt;&gt;</vh></v>
<v t="edream.110203161858.255"><vh>&lt;&lt; Test for @header and @noheader &gt;&gt;</vh></v>
<v t="edream.110203161858.256"><vh>&lt;&lt; Test for @lineending &gt;&gt;</vh></v>
<v t="edream.110203161858.257"><vh>&lt;&lt; Test for @path &gt;&gt;</vh>
<v t="edream.110203161858.258"><vh>&lt;&lt; compute relative path from s[k:] &gt;&gt;</vh></v>
<v t="edream.110203161858.259"><vh>&lt;&lt; handle absolute path &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.260"><vh>&lt;&lt; Test for @pagewidth &gt;&gt;</vh></v>
<v t="edream.110203161858.261"><vh>&lt;&lt; Test for @tabwidth &gt;&gt;</vh></v>
<v t="edream.110203161858.262"><vh>&lt;&lt; Set current directory &gt;&gt;</vh></v>
<v t="edream.110203161858.263"><vh>&lt;&lt; Set comment Strings from delims &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.264"><vh>skipIndent</vh></v>
<v t="edream.110203161858.265"><vh>writeError</vh></v>
</v>
<v t="edream.110203161858.266"><vh>Writing (3.x)</vh>
<v t="edream.110203161858.267"><vh>Top level</vh>
<v t="edream.110203161858.268"><vh>old_df.rawWrite</vh>
<v t="edream.110203161858.269"><vh>&lt;&lt; write root's tree &gt;&gt;</vh>
<v t="edream.110203161858.270" a=""><vh>&lt;&lt; put all @first lines in root &gt;&gt;</vh></v>
<v t="edream.110203161858.271"><vh>&lt;&lt; put optional @comment sentinel lines &gt;&gt;</vh></v>
<v t="edream.110203161858.272"><vh>&lt;&lt; Write v's node &gt;&gt;</vh></v>
<v t="edream.110203161858.273" a=""><vh>&lt;&lt; put all @last lines in root &gt;&gt;</vh></v>
</v>
</v>
<v t="edream.110203161858.274"><vh>old_df.silentWrite</vh>
<v t="edream.110203161858.275"><vh>&lt;&lt; Write v's headline if it starts with @@ &gt;&gt;</vh></v>
<v t="edream.110203161858.276"><vh>&lt;&lt; Write v's body &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.277"><vh>old_df.write</vh>
<v t="edream.110203161858.278"><vh>&lt;&lt; initialize &gt;&gt;</vh></v>
<v t="edream.110203161858.279"><vh>&lt;&lt; open the file; return on error &gt;&gt;</vh></v>
<v t="edream.110203161858.280"><vh>&lt;&lt; write then entire @file tree &gt;&gt; (3.x)</vh>
<v t="edream.110203161858.270" a=""><vh>&lt;&lt; put all @first lines in root &gt;&gt;</vh></v>
<v t="edream.110203161858.281"><vh>&lt;&lt; write the derived file&gt;&gt;</vh></v>
<v t="edream.110203161858.273" a=""><vh>&lt;&lt; put all @last lines in root &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.282"><vh>&lt;&lt; Warn about @ignored and orphans  &gt;&gt;</vh></v>
<v t="edream.110203161858.283"><vh>&lt;&lt; finish writing &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.284"><vh>Top level write helpers</vh>
<v t="edream.110203161858.285"><vh>atFile.closeWriteFile</vh></v>
<v t="edream.110203161858.286"><vh>atFile.handleWriteException</vh></v>
<v t="edream.110203161858.287"><vh>atFile.openWriteFile</vh></v>
<v t="edream.110203161858.288"><vh>atFile.putInitialComment</vh></v>
<v t="edream.110203161858.289"><vh>atFile.replaceTargetFileIfDifferent</vh>
<v t="edream.110203161858.290"><vh>&lt;&lt; delete the output file &gt;&gt;</vh></v>
<v t="edream.110203161858.291"><vh>&lt;&lt; replace the target file with the output file &gt;&gt;</vh></v>
<v t="edream.110203161858.292"><vh>&lt;&lt; rename the output file to be the target file &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.293"><vh>atFile.outputStringWithLineEndings</vh></v>
</v>
</v>
<v t="edream.110203161858.294"><vh>putBodyPart</vh>
<v t="edream.110203161858.295"><vh>&lt;&lt; put code/doc parts and sentinels &gt;&gt;</vh>
<v t="edream.110203161858.296"><vh>&lt;&lt; initialize lookingForFirst/Last &amp; initialLastDirective &gt;&gt;</vh></v>
<v t="edream.110203161858.297"><vh>&lt;&lt; set lookingForFirst/Last &amp; initialLastDirective &gt;&gt;</vh></v>
<v t="edream.110203161858.298"><vh>&lt;&lt; handle misc directives &gt;&gt;</vh></v>
<v t="edream.110203161858.299"><vh>&lt;&lt; put out the last directives, if any &gt;&gt;</vh></v>
</v>
</v>
<v t="edream.110203161858.300"><vh>putDoc</vh></v>
<v t="edream.110203161858.301"><vh>putDocPart (3.x)</vh>
<v t="edream.110203161858.302"><vh>&lt;&lt; copy words, splitting the line if needed &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.303"><vh>putCodePart &amp; allies</vh>
<v t="edream.110203161858.304"><vh>&lt;&lt; handle the start of a line &gt;&gt;</vh>
<v t="edream.110203161858.305"><vh>&lt;&lt; handle @others &gt;&gt;</vh></v>
<v t="edream.110203161858.306"><vh>&lt;&lt; handle @raw &gt;&gt;</vh></v>
<v t="edream.110203161858.307"><vh>&lt;&lt; handle @end_raw &gt;&gt;</vh></v>
<v t="edream.110203161858.308"><vh>&lt;&lt; put @verbatim sentinel if necessary &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.309"><vh>&lt;&lt; put the line &gt;&gt;</vh>
<v t="edream.110203161858.310"><vh>&lt;&lt; put possible section reference &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.311"><vh>inAtOthers</vh></v>
<v t="edream.110203161858.312"><vh>isSectionName</vh></v>
<v t="edream.110203161858.313"><vh>putAtOthers</vh></v>
<v t="edream.110203161858.314"><vh>putAtOthersChild</vh></v>
<v t="edream.110203161858.315"><vh>putRef</vh>
<v t="edream.110203161858.316"><vh>&lt;&lt; Generate the expansion of the reference &gt;&gt;</vh>
<v t="edream.110203161858.317"><vh>&lt;&lt; Add @verbatimAfterRef sentinel if required &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="edream.110203161858.318"><vh>Writing Utils</vh>
<v t="edream.110203161858.319"><vh>putBuffered</vh></v>
<v t="edream.110203161858.320"><vh>os, onl, etc. (leoAtFile)</vh></v>
<v t="edream.110203161858.321"><vh>putDirective  (handles @delims)</vh>
<v t="edream.110203161858.322"><vh>&lt;&lt; handle @delims &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.323"><vh>putEmptyDirective (Dave Hein)</vh></v>
<v t="edream.110203161858.324"><vh>putIndent</vh></v>
</v>
</v>
</v>
<v t="edream.110203161858.325"><vh>&lt;&lt; class baseNewDerivedFile methods &gt;&gt;</vh>
<v t="edream.110203161858.326"><vh>newDerivedFile.__init__</vh></v>
<v t="edream.110203161858.327"><vh>Reading (4.x)</vh>
<v t="edream.110203161858.328"><vh>new_df.readOpenFile</vh></v>
<v t="edream.110203161858.329"><vh>findChild</vh></v>
<v t="edream.110203161858.330"><vh>scanText &amp; allies</vh>
<v t="edream.110203161858.331"><vh>&lt;&lt; init ivars for scanText &gt;&gt;</vh></v>
<v t="edream.110203161858.332"><vh>&lt;&lt; report unexpected end of text &gt;&gt;</vh></v>
<v t="edream.110203161858.333"><vh>readNormalLine</vh>
<v t="edream.110203161858.334"><vh>&lt;&lt; Skip the leading stuff &gt;&gt;</vh></v>
<v t="edream.110203161858.335"><vh>&lt;&lt; Append s to docOut &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.336"><vh>start sentinels</vh>
<v t="edream.110203161858.337"><vh>readStartAt, readStartDoc &amp; readStartDocLine</vh></v>
<v t="edream.110203161858.338"><vh>readStartLeo</vh></v>
<v t="edream.110203161858.339"><vh>readStartNode</vh>
<v t="edream.110203161858.340"><vh>&lt;&lt; Set headline, undoing the CWEB hack &gt;&gt;</vh></v>
<v t="edream.110203161858.341"><vh>&lt;&lt; Check the filename in the sentinel &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.342"><vh>readStartOthers</vh></v>
</v>
<v t="edream.110203161858.343"><vh>end sentinels</vh>
<v t="edream.110203161858.344"><vh>readEndAt &amp; readEndDoc</vh></v>
<v t="edream.110203161858.345"><vh>readEndLeo</vh></v>
<v t="edream.110203161858.346"><vh>readEndNode</vh></v>
<v t="edream.110203161858.347"><vh>readEndOthers</vh></v>
<v t="edream.110203161858.348"><vh>readLastDocLine</vh></v>
</v>
<v t="edream.110203161858.349"><vh>Unpaired sentinels</vh>
<v t="edream.110203161858.350"><vh>ignoreOldSentinel</vh></v>
<v t="edream.110203161858.351"><vh>readAfterRef</vh></v>
<v t="edream.110203161858.352"><vh>readComment</vh></v>
<v t="edream.110203161858.353"><vh>readDelims</vh></v>
<v t="edream.110203161858.354"><vh>readDirective</vh></v>
<v t="edream.110203161858.355"><vh>readNl</vh></v>
<v t="edream.110203161858.356"><vh>readNonl</vh></v>
<v t="edream.110203161858.357"><vh>readRef</vh></v>
<v t="edream.110203161858.358"><vh>readVerbatim</vh></v>
</v>
<v t="edream.110203161858.359"><vh>badEndSentinel, push/popSentinelStack</vh></v>
</v>
</v>
<v t="edream.110203161858.360"><vh>Sentinels (4.x)</vh>
<v t="edream.110203161858.361"><vh>nodeSentinelText</vh>
<v t="edream.110203161858.362"><vh>&lt;&lt; remove comment delims from h if necessary &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.363"><vh>putLeadInSentinel</vh></v>
<v t="edream.110203161858.364"><vh>putOpenLeoSentinel</vh></v>
<v t="edream.110203161858.365"><vh>putOpenNodeSentinel</vh></v>
<v t="edream.110203161858.366"><vh>putSentinel (applies cweb hack)</vh>
<v t="edream.110203161858.367"><vh>&lt;&lt; apply the cweb hack to s &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.368"><vh>skipSentinelStart</vh></v>
<v t="edream.110203161858.369"><vh>sentinelKind</vh></v>
</v>
<v t="edream.110203161858.370"><vh>Writing (4.x)</vh>
<v t="edream.110203161858.371"><vh>Top level</vh>
<v t="edream.110203161858.372"><vh>new_df.closeWriteFile</vh></v>
<v t="edream.110203161858.373"><vh>new_df.write</vh>
<v t="edream.110203161858.374"><vh>&lt;&lt; initialize &gt;&gt;</vh></v>
<v t="edream.110203161858.375"><vh>&lt;&lt; open the file; return on error &gt;&gt;</vh></v>
<v t="edream.110203161858.376"><vh>&lt;&lt; write then entire @file tree &gt;&gt; (4.x)</vh>
<v t="edream.110203161858.377"><vh>&lt;&lt; put all @first lines in root &gt;&gt;</vh></v>
<v t="edream.110203161858.378"><vh>&lt;&lt; put all @last lines in root &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.379"><vh>&lt;&lt; Warn about @ignored and orphans  &gt;&gt;</vh></v>
<v t="edream.110203161858.380"><vh>&lt;&lt; finish writing &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.381"><vh>new_df.rawWrite (needs testing)</vh>
<v t="edream.110203161858.382"><vh>&lt;&lt; write root's tree &gt;&gt;</vh>
<v t="edream.110203161858.383"><vh>&lt;&lt; put all @first lines in root &gt;&gt;</vh></v>
<v t="edream.110203161858.384"><vh>&lt;&lt; put optional @comment sentinel lines &gt;&gt;</vh></v>
<v t="edream.110203161858.385"><vh>&lt;&lt; Write v's node &gt;&gt;</vh></v>
<v t="edream.110203161858.386"><vh>&lt;&lt; put all @last lines in root &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="edream.110203161858.387"><vh>putBody</vh>
<v t="edream.110203161858.388"><vh>&lt;&lt; handle line at s[i]  &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.389"><vh>code lines...</vh>
<v t="edream.110203161858.390"><vh>inAtOthers</vh></v>
<v t="edream.110203161858.391"><vh>putAtOthersChild</vh></v>
<v t="edream.110203161858.392"><vh>putAtOthersLine</vh></v>
<v t="edream.110203161858.393"><vh>putCodeLine</vh></v>
<v t="edream.110203161858.394"><vh>putRefLine</vh></v>
</v>
<v t="edream.110203161858.395"><vh>doc lines... (write)</vh>
<v t="edream.110203161858.396"><vh>putBlankDocLine</vh></v>
<v t="edream.110203161858.397"><vh>putStartDocLine</vh></v>
<v t="edream.110203161858.398"><vh>putDocLine</vh>
<v t="edream.110203161858.399"><vh>&lt;&lt; append words to pending line, splitting the line if needed &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.400"><vh>putEndDocLine</vh></v>
<v t="edream.110203161858.401"><vh>putPending</vh></v>
</v>
<v t="edream.110203161858.402"><vh>Writing Utils...</vh>
<v t="edream.110203161858.403"><vh>hasSectionName</vh></v>
<v t="edream.110203161858.404"><vh>os, onl, etc.</vh></v>
<v t="edream.110203161858.405"><vh>directiveKind</vh></v>
</v>
</v>
</v>
</v>
<v t="edream.110203161858.406" tnodeList="edream.110203161858.406,edream.110203161858.407,edream.110203161858.408,edream.110203161858.409,edream.110203161858.410,edream.110203161858.411,edream.110203161858.412,edream.110203161858.413,edream.110203161858.414,edream.110203161858.415,edream.110203161858.416,edream.110203161858.417,edream.110203161858.418,edream.110203161858.419,edream.110203161858.420,edream.110203161858.421,edream.110203161858.422,edream.110203161858.423,edream.110203161858.424,edream.110203161858.425,edream.110203161858.426,edream.110203161858.427,edream.110203161858.428,edream.110203161858.429,edream.110203161858.430,edream.110203161858.431,edream.110203161858.432,edream.110203161858.433,edream.110203161858.434,edream.110203161858.435,edream.110203161858.436,edream.110203161858.437,edream.110203161858.438,edream.110203161858.439,edream.110203161858.440,edream.110203161858.441,edream.110203161858.443,edream.110203161858.444,edream.110203161858.445,edream.110203161858.446,edream.110203161858.447,edream.110203161858.448,edream.110203161858.449,edream.110203161858.450,edream.110203161858.451,edream.110203161858.452,edream.110203161858.453,edream.110203161858.454,edream.110203161858.455,edream.110203161858.456,edream.110203161858.457,edream.110203161858.460,edream.110203161858.461,edream.110203161858.458,edream.110203161858.459,edream.110203161858.462,edream.110203161858.463,edream.110203161858.464,edream.110203161858.465,edream.110203161858.466,edream.110203161858.467,edream.110203161858.468,edream.110203161858.469,edream.110203161858.470,edream.110203161858.471,edream.110203161858.472,edream.110203161858.474,edream.110203161858.475,edream.110203161858.476,edream.110203161858.477,edream.110203161858.478,edream.110203161858.480,edream.110203161858.479,edream.110203161858.481,edream.110203161858.482,edream.110203161858.483,edream.110203161858.485,edream.110203161858.487,edream.110203161858.488,edream.110203161858.489,edream.110203161858.490,edream.110203161858.491,edream.110203161858.492,edream.110203161858.493,edream.110203161858.494,edream.110203161858.495,edream.110203161858.496,edream.110203161858.497,edream.110203161858.498,edream.110203161858.499,edream.110203161858.500,edream.110203161858.501,edream.110203161858.502,edream.110203161858.503,edream.110203161858.504,edream.110203161858.505,edream.110203161858.506,edream.110203161858.507,edream.110203161858.508,edream.110203161858.509"><vh>@file c:\prog\test\leoColor.py</vh>
<v t="edream.110203161858.407"><vh>&lt;&lt; define leo keywords &gt;&gt;</vh></v>
<v t="edream.110203161858.408"><vh>&lt;&lt; define colorizer constants &gt;&gt;</vh></v>
<v t="edream.110203161858.409"><vh>&lt;&lt; define color panel data &gt;&gt;</vh></v>
<v t="edream.110203161858.410"><vh>class leoColorPanel</vh>
<v t="edream.110203161858.411"><vh>colorPanel.__init__</vh></v>
<v t="edream.110203161858.412"><vh>run</vh>
<v t="edream.110203161858.413"><vh>&lt;&lt; create color panel &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.414"><vh>showColorPicker</vh></v>
<v t="edream.110203161858.415"><vh>showColorName</vh></v>
<v t="edream.110203161858.416"><vh>colorPanel.onOk, onCancel, onRevert</vh></v>
<v t="edream.110203161858.417"><vh>update</vh></v>
</v>
<v t="edream.110203161858.418"><vh>class leoColorNamePanel</vh>
<v t="edream.110203161858.419"><vh>namePanel.__init__</vh></v>
<v t="edream.110203161858.420"><vh>getSelection</vh></v>
<v t="edream.110203161858.421"><vh>run</vh>
<v t="edream.110203161858.422"><vh>&lt;&lt; create color name panel &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.423"><vh>onOk, onCancel, onRevert, OnApply</vh></v>
<v t="edream.110203161858.424"><vh>select</vh></v>
</v>
<v t="edream.110203161858.425"><vh>class colorizer</vh>
<v t="edream.110203161858.426"><vh>&lt;&lt; define colorizer keywords &gt;&gt;</vh>
<v t="edream.110203161858.427"><vh>&lt;&lt; actionscript keywords &gt;&gt;</vh></v>
<v t="edream.110203161858.428"><vh>&lt;&lt; c keywords &gt;&gt;</vh></v>
<v t="edream.110203161858.429"><vh>&lt;&lt; html keywords &gt;&gt;</vh></v>
<v t="edream.110203161858.430"><vh>&lt;&lt; java keywords &gt;&gt;</vh></v>
<v t="edream.110203161858.431"><vh>&lt;&lt; latex keywords &gt;&gt;</vh></v>
<v t="edream.110203161858.432"><vh>&lt;&lt; pascal keywords &gt;&gt;</vh></v>
<v t="edream.110203161858.433"><vh>&lt;&lt; perl keywords &gt;&gt;</vh></v>
<v t="edream.110203161858.434"><vh>&lt;&lt; python keywords &gt;&gt;</vh></v>
<v t="edream.110203161858.435"><vh>&lt;&lt; tcl/tk keywords &gt;&gt;</vh></v>
<v t="edream.110203161858.436"><vh>&lt;&lt; php keywords &gt;&gt;</vh></v>
<v t="edream.110203161858.437"><vh>&lt;&lt; rebol keywords &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.438"><vh>color.__init__</vh>
<v t="edream.110203161858.439"><vh>&lt;&lt; ivars for communication between colorAllDirectives and its allies &gt;&gt;</vh></v>
<v t="edream.110203161858.440"><vh>&lt;&lt; define dispatch dicts &gt;&gt;</vh></v>
<v t="edream.110203161858.441"><vh>&lt;&lt; define fonts and data for wiki tags &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.442"><vh>color.callbacks...</vh>
<v t="edream.110203161858.443"><vh>OnHyperLinkControlClick</vh></v>
<v t="edream.110203161858.444"><vh>OnHyperLinkEnter</vh></v>
<v t="edream.110203161858.445"><vh>OnHyperLinkLeave</vh></v>
</v>
<v t="edream.110203161858.446"><vh>colorize &amp; recolor_range</vh></v>
<v t="edream.110203161858.447"><vh>colorizeAnyLanguage &amp; allies</vh>
<v t="edream.110203161858.448"><vh>&lt;&lt; initialize ivars &amp; tags &gt;&gt; colorizeAnyLanguage</vh>
<v t="edream.110203161858.449"><vh>&lt;&lt; configure tags &gt;&gt;</vh></v>
<v t="edream.110203161858.450"><vh>&lt;&lt; configure language-specific settings &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.451"><vh>&lt;&lt; all state ivars match &gt;&gt;</vh></v>
<v t="edream.110203161858.452"><vh>&lt;&lt; incrementally color the text &gt;&gt;</vh>
<v t="edream.110203161858.453"><vh>&lt;&lt; compute leading, middle &amp; trailing  lines &gt;&gt;</vh></v>
<v t="edream.110203161858.454"><vh>&lt;&lt; clear leading_lines if middle lines involve @color or @recolor  &gt;&gt;</vh></v>
<v t="edream.110203161858.455"><vh>&lt;&lt; initialize new states &gt;&gt;</vh></v>
<v t="edream.110203161858.456"><vh>&lt;&lt; colorize until the states match &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.457"><vh>&lt;&lt; non-incrementally color the text &gt;&gt;</vh></v>
<v t="edream.110203161858.458"><vh>&lt;&lt; update state ivars &gt;&gt;</vh></v>
<v t="edream.110203161858.459"><vh>&lt;&lt; set state ivars to "unknown" &gt;&gt;</vh></v>
<v t="edream.110203161858.460"><vh>&lt;&lt; completely recolor in two passes &gt;&gt;</vh>
<v t="edream.110203161858.461"><vh>&lt;&lt; kludge: insert a blank in s for every image in the line &gt;&gt;</vh></v>
</v>
</v>
<v t="edream.110203161858.462"><vh>colorizeLine &amp; allies</vh>
<v t="edream.110203161858.463"><vh>continueBlockComment</vh></v>
<v t="edream.110203161858.464"><vh>continueSingle/DoubleString</vh></v>
<v t="edream.110203161858.465"><vh>continueDocPart</vh>
<v t="edream.110203161858.466"><vh>&lt;&lt; handle cweb doc part &gt;&gt;</vh></v>
<v t="edream.110203161858.467"><vh>&lt;&lt; handle noweb doc part &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.468"><vh>continueNocolor</vh></v>
<v t="edream.110203161858.469"><vh>continueSingle/DoublePythonString</vh></v>
<v t="edream.110203161858.470"><vh>doAtKeyword: NOT for cweb keywords</vh></v>
<v t="edream.110203161858.471"><vh>doLatexLine</vh></v>
<v t="edream.110203161858.472"><vh>doNormalState</vh>
<v t="edream.110203161858.473"><vh>Valid regardless of latex mode</vh>
<v t="edream.110203161858.474"><vh>&lt;&lt; handle possible  keyword &gt;&gt;</vh>
<v t="edream.110203161858.475"><vh>&lt;&lt; handle possible latex keyword &gt;&gt;</vh></v>
<v t="edream.110203161858.476"><vh>&lt;&lt; handle possible html keyword &gt;&gt;</vh></v>
<v t="edream.110203161858.477"><vh>&lt;&lt; handle general keyword &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.478"><vh>&lt;&lt; handle at keyword &gt;&gt;</vh>
<v t="edream.110203161858.479"><vh>&lt;&lt; Handle cweb control word &gt;&gt;</vh></v>
<v t="edream.110203161858.480"><vh>&lt;&lt; handle cweb ref or def &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.481"><vh>&lt;&lt; handle single-line comment &gt;&gt;</vh></v>
<v t="edream.110203161858.482"><vh>&lt;&lt; start block comment &gt;&gt;</vh></v>
<v t="edream.110203161858.483"><vh>&lt;&lt; handle latex line &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.484"><vh>Vaid only in latex mode</vh>
<v t="edream.110203161858.485"><vh>&lt;&lt; handle latex normal character &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.486"><vh>Valid when not in latex_mode</vh>
<v t="edream.110203161858.487"><vh>&lt;&lt; handle string &gt;&gt;</vh></v>
<v t="edream.110203161858.488"><vh>&lt;&lt; handle C preprocessor line &gt;&gt;</vh></v>
<v t="edream.110203161858.489"><vh>&lt;&lt; handle special php keywords &gt;&gt;</vh></v>
<v t="edream.110203161858.490"><vh>&lt;&lt; handle blank &gt;&gt;</vh></v>
<v t="edream.110203161858.491"><vh>&lt;&lt; handle tab &gt;&gt;</vh></v>
<v t="edream.110203161858.492"><vh>&lt;&lt; handle normal character &gt;&gt;</vh></v>
</v>
</v>
<v t="edream.110203161858.493"><vh>doNowebSecRef</vh>
<v t="edream.110203161858.494"><vh>&lt;&lt; set the hyperlink &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.495"><vh>removeAllTags &amp; removeTagsFromLines</vh></v>
</v>
<v t="edream.110203161858.496"><vh>scanColorDirectives</vh>
<v t="edream.110203161858.497"><vh>&lt;&lt; Test for @comment or @language &gt;&gt;</vh></v>
<v t="edream.110203161858.498"><vh>&lt;&lt; Test for @root, @root-doc or @root-code &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.499"><vh>color.schedule</vh></v>
<v t="edream.110203161858.500"><vh>getCwebWord</vh></v>
<v t="edream.110203161858.501"><vh>removeAllImages</vh></v>
<v t="edream.110203161858.502"><vh>updateSyntaxColorer</vh></v>
<v t="edream.110203161858.503"><vh>useSyntaxColoring</vh></v>
<v t="edream.110203161858.504"><vh>Utils</vh>
<v t="edream.110203161858.505"><vh>index &amp; tag</vh></v>
<v t="edream.110203161858.506"><vh>setFirstLineState</vh></v>
<v t="edream.110203161858.507"><vh>skip_id</vh></v>
<v t="edream.110203161858.508"><vh>skip_python_string</vh></v>
<v t="edream.110203161858.509"><vh>skip_string</vh></v>
</v>
</v>
</v>
<v t="edream.110203161858.510" tnodeList="edream.110203161858.510,edream.110203161858.512,edream.110203161858.513,edream.110203161858.514,edream.110203161858.515,edream.110203161858.516,edream.110203161858.518,edream.110203161858.519,edream.110203161858.520,edream.110203161858.522,edream.110203161858.523,edream.110203161858.524,edream.110203161858.525,edream.110203161858.526,edream.110203161858.528,edream.110203161858.529,edream.110203161858.530,edream.110203161858.531,edream.110203161858.532,edream.110203161858.533,edream.110203161858.534,edream.110203161858.535,edream.110203161858.536,edream.110203161858.537,edream.110203161858.538,edream.110203161858.539,edream.110203161858.540,edream.110203161858.541,edream.110203161858.542,edream.110203161858.543,edream.110203161858.544,edream.110203161858.545,edream.110203161858.547,edream.110203161858.548,edream.110203161858.549,edream.110203161858.550,edream.110203161858.551,edream.110203161858.552,edream.110203161858.553,edream.110203161858.554,edream.110203161858.555,edream.110203161858.556,edream.110203161858.557,edream.110203161858.558,edream.110203161858.559,edream.110203161858.560,edream.110203161858.561,edream.110203161858.562,edream.110203161858.563,edream.110203161858.564,edream.110203161858.565,edream.110203161858.566,edream.110203161858.567,edream.110203161858.568,edream.110203161858.569,edream.110203161858.570,edream.110203161858.571,edream.110203161858.572,edream.110203161858.573,edream.110203161858.576,edream.110203161858.577,edream.110203161858.578,edream.110203161858.579,edream.110203161858.580,edream.110203161858.581,edream.110203161858.582,edream.110203161858.583,edream.110203161858.584,edream.110203161858.586,edream.110203161858.587,edream.110203161858.588,edream.110203161858.590,edream.110203161858.591,edream.110203161858.592,edream.110203161858.593,edream.110203161858.594,edream.110203161858.595,edream.110203161858.596,edream.110203161858.598,edream.110203161858.599,edream.110203161858.600,edream.110203161858.601,edream.110203161858.602,edream.110203161858.603,edream.110203161858.604,edream.110203161858.606,edream.110203161858.607,edream.110203161858.608,edream.110203161858.609,edream.110203161858.610,edream.110203161858.611,edream.110203161858.612,edream.110203161858.613,edream.110203161858.614,edream.110203161858.615,edream.110203161858.616,edream.110203161858.618,edream.110203161858.619,edream.110203161858.620,edream.110203161858.621,edream.110203161858.622,edream.110203161858.623,edream.110203161858.624,edream.110203161858.625,edream.110203161858.626,edream.110203161858.627,edream.110203161858.628,edream.110203161858.629,edream.110203161858.630,edream.110203161858.631,edream.110203161858.632,edream.110203161858.633,edream.110203161858.634,edream.110203161858.636,edream.110203161858.637,edream.110203161858.638,edream.110203161858.639,edream.110203161858.640,edream.110203161858.641,edream.110203161858.642,edream.110203161858.643,edream.110203161858.644,edream.110203161858.645"><vh>@file c:\prog\test\leoCommands.py</vh>
<v t="edream.110203161858.511"><vh>Birth &amp; death</vh>
<v t="edream.110203161858.512"><vh>c.__init__ &amp; initIvars</vh>
<v t="edream.110203161858.513"><vh>&lt;&lt; initialize ivars &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.514"><vh>c.__repr__ &amp; __str__</vh></v>
</v>
<v t="edream.110203161858.515"><vh>c.setIvarsFromFind</vh></v>
<v t="edream.110203161858.516"><vh>c.setIvarsFromPrefs</vh></v>
<v t="edream.110203161858.517"><vh>Cut &amp; Paste Outlines</vh>
<v t="edream.110203161858.518"><vh>cutOutline</vh></v>
<v t="edream.110203161858.519"><vh>copyOutline</vh></v>
<v t="edream.110203161858.520"><vh>pasteOutline</vh></v>
</v>
<v t="edream.110203161858.521"><vh>Drawing Utilities</vh>
<v t="edream.110203161858.522"><vh>beginUpdate</vh></v>
<v t="edream.110203161858.523"><vh>bringToFront</vh></v>
<v t="edream.110203161858.524"><vh>endUpdate</vh></v>
<v t="edream.110203161858.525"><vh>recolor</vh></v>
<v t="edream.110203161858.526"><vh>redraw &amp; repaint</vh></v>
</v>
<v t="edream.110203161858.527"><vh>Edit Body Text</vh>
<v t="edream.110203161858.528"><vh>convertAllBlanks</vh></v>
<v t="edream.110203161858.529"><vh>convertAllTabs</vh></v>
<v t="edream.110203161858.530"><vh>convertBlanks</vh></v>
<v t="edream.110203161858.531"><vh>convertTabs</vh></v>
<v t="edream.110203161858.532"><vh>createLastChildNode</vh></v>
<v t="edream.110203161858.533"><vh>dedentBody</vh></v>
<v t="edream.110203161858.534"><vh>extract</vh>
<v t="edream.110203161858.535"><vh>&lt;&lt; Set headline for extract &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.536"><vh>extractSection</vh>
<v t="edream.110203161858.537"><vh>&lt;&lt; Set headline for extractSection &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.538"><vh>extractSectionNames</vh>
<v t="edream.110203161858.539"><vh>&lt;&lt; Find the next section name &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.540"><vh>getBodyLines</vh></v>
<v t="edream.110203161858.541"><vh>getBodySelection</vh></v>
<v t="edream.110203161858.542"><vh>indentBody</vh></v>
<v t="edream.110203161858.543"><vh>reformatParagraph</vh>
<v t="edream.110203161858.544"><vh>&lt;&lt; Set the new insert at the start of the next paragraph &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.545"><vh>updateBodyPane (handles undo)</vh></v>
</v>
<v t="edream.110203161858.546"><vh>Enabling Menu Items (Commands)</vh>
<v t="edream.110203161858.547"><vh>canContractAllHeadlines</vh></v>
<v t="edream.110203161858.548"><vh>canContractAllSubheads</vh></v>
<v t="edream.110203161858.549"><vh>canContractParent</vh></v>
<v t="edream.110203161858.550"><vh>canContractSubheads</vh></v>
<v t="edream.110203161858.551"><vh>canCutOutline &amp; canDeleteHeadline</vh></v>
<v t="edream.110203161858.552"><vh>canDemote</vh></v>
<v t="edream.110203161858.553"><vh>canExpandAllHeadlines</vh></v>
<v t="edream.110203161858.554"><vh>canExpandAllSubheads</vh></v>
<v t="edream.110203161858.555"><vh>canExpandSubheads</vh></v>
<v t="edream.110203161858.556"><vh>canExtract, canExtractSection &amp; canExtractSectionNames</vh></v>
<v t="edream.110203161858.557"><vh>canFindMatchingBracket</vh></v>
<v t="edream.110203161858.558"><vh>canGoToNextDirtyHeadline</vh></v>
<v t="edream.110203161858.559"><vh>canGoToNextMarkedHeadline</vh></v>
<v t="edream.110203161858.560"><vh>canMarkChangedHeadline</vh></v>
<v t="edream.110203161858.561"><vh>canMarkChangedRoots</vh></v>
<v t="edream.110203161858.562"><vh>canMoveOutlineDown</vh></v>
<v t="edream.110203161858.563"><vh>canMoveOutlineLeft</vh></v>
<v t="edream.110203161858.564"><vh>canMoveOutlineRight</vh></v>
<v t="edream.110203161858.565"><vh>canMoveOutlineUp</vh></v>
<v t="edream.110203161858.566"><vh>canPasteOutline</vh></v>
<v t="edream.110203161858.567"><vh>canPromote</vh></v>
<v t="edream.110203161858.568"><vh>canRevert</vh></v>
<v t="edream.110203161858.569"><vh>canSelect....</vh></v>
<v t="edream.110203161858.570"><vh>canShiftBodyLeft/Right</vh></v>
<v t="edream.110203161858.571"><vh>canSortChildren, canSortSiblings</vh></v>
<v t="edream.110203161858.572"><vh>canUndo &amp; canRedo</vh></v>
<v t="edream.110203161858.573"><vh>canUnmarkAll</vh></v>
</v>
<v t="edream.110203161858.574"><vh>Expand &amp; Contract</vh>
<v t="edream.110203161858.575"><vh>Commands</vh>
<v t="edream.110203161858.576"><vh>contractAllHeadlines</vh></v>
<v t="edream.110203161858.577"><vh>contractNode</vh></v>
<v t="edream.110203161858.578"><vh>contractParent</vh></v>
<v t="edream.110203161858.579"><vh>expandAllHeadlines</vh></v>
<v t="edream.110203161858.580"><vh>expandAllSubheads</vh></v>
<v t="edream.110203161858.581"><vh>expandLevel1..9</vh></v>
<v t="edream.110203161858.582"><vh>expandNextLevel</vh></v>
<v t="edream.110203161858.583"><vh>expandNode</vh></v>
<v t="edream.110203161858.584"><vh>expandPrevLevel</vh></v>
</v>
<v t="edream.110203161858.585"><vh>Utilities</vh>
<v t="edream.110203161858.586"><vh>contractSubtree</vh></v>
<v t="edream.110203161858.587"><vh>expandSubtree</vh></v>
<v t="edream.110203161858.588"><vh>expandToLevel</vh></v>
</v>
</v>
<v t="edream.110203161858.589"><vh>Getters &amp; Setters</vh>
<v t="edream.110203161858.590"><vh>c.currentVnode</vh></v>
<v t="edream.110203161858.591"><vh>clearAllMarked</vh></v>
<v t="edream.110203161858.592"><vh>clearAllVisited</vh></v>
<v t="edream.110203161858.593"><vh>fileName</vh></v>
<v t="edream.110203161858.594"><vh>isChanged</vh></v>
<v t="edream.110203161858.595"><vh>rootVnode</vh></v>
<v t="edream.110203161858.596"><vh>setChanged</vh></v>
</v>
<v t="edream.110203161858.597"><vh>Insert, Delete &amp; Clone (Commands)</vh>
<v t="edream.110203161858.598"><vh>c.checkMoveWithParentWithWarning</vh></v>
<v t="edream.110203161858.599"><vh>c.deleteHeadline</vh></v>
<v t="edream.110203161858.600"><vh>c.insertHeadline</vh></v>
<v t="edream.110203161858.601"><vh>c.clone</vh></v>
<v t="edream.110203161858.602"><vh>initAllCloneBits (changed in 4.0)</vh></v>
<v t="edream.110203161858.603"><vh>c.initJoinedClonedBits (changed in 3.11.1)</vh></v>
<v t="edream.110203161858.604"><vh>validateOutline</vh></v>
</v>
<v t="edream.110203161858.605"><vh>Mark &amp; Unmark &amp; goto</vh>
<v t="edream.110203161858.606"><vh>goToNextDirtyHeadline</vh></v>
<v t="edream.110203161858.607"><vh>goToNextMarkedHeadline</vh></v>
<v t="edream.110203161858.608"><vh>goToNextClone</vh></v>
<v t="edream.110203161858.609"><vh>markChangedHeadlines</vh></v>
<v t="edream.110203161858.610"><vh>markChangedRoots</vh></v>
<v t="edream.110203161858.611"><vh>markAllAtFileNodesDirty</vh></v>
<v t="edream.110203161858.612"><vh>markAtFileNodesDirty</vh></v>
<v t="edream.110203161858.613"><vh>markClones</vh></v>
<v t="edream.110203161858.614"><vh>markHeadline</vh></v>
<v t="edream.110203161858.615"><vh>markSubheads</vh></v>
<v t="edream.110203161858.616"><vh>unmarkAll</vh></v>
</v>
<v t="edream.110203161858.617"><vh>Moving, Dragging, Promote, Demote, Sort (commands)</vh>
<v t="edream.110203161858.618"><vh>c.dragAfter</vh></v>
<v t="edream.110203161858.619"><vh>c.dragCloneToNthChildOf (changed in 3.11.1)</vh></v>
<v t="edream.110203161858.620"><vh>c.dragToNthChildOf</vh></v>
<v t="edream.110203161858.621"><vh>c.sortChildren, sortSiblings</vh>
<v t="edream.110203161858.622"><vh>&lt;&lt; Set the undo info for sortChildren &gt;&gt;</vh></v>
<v t="edream.110203161858.623"><vh>&lt;&lt; Set the undo info for sortSiblings &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.624"><vh>c.sortTopLevel</vh>
<v t="edream.110203161858.625"><vh>&lt;&lt; Set the undo info for sortTopLevel &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.626"><vh>demote</vh></v>
<v t="edream.110203161858.627"><vh>moveOutlineDown</vh>
<v t="edream.110203161858.628"><vh>&lt;&lt; Move v down &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.629"><vh>moveOutlineLeft</vh></v>
<v t="edream.110203161858.630"><vh>moveOutlineRight</vh></v>
<v t="edream.110203161858.631"><vh>moveOutlineUp</vh>
<v t="edream.110203161858.632"><vh>&lt;&lt; Move v up &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.633"><vh>promote</vh></v>
<v t="edream.110203161858.634"><vh>c.dragCloneAfter (changed in 3.11.1)</vh></v>
</v>
<v t="edream.110203161858.635"><vh>Selecting &amp; Updating (commands)</vh>
<v t="edream.110203161858.636"><vh>editVnode (calls tree.editLabel)</vh></v>
<v t="edream.110203161858.637"><vh>endEditing (calls tree.endEditLabel)</vh></v>
<v t="edream.110203161858.638"><vh>selectThreadBack</vh></v>
<v t="edream.110203161858.639"><vh>selectThreadNext</vh></v>
<v t="edream.110203161858.640"><vh>selectVisBack</vh></v>
<v t="edream.110203161858.641"><vh>selectVisNext</vh></v>
<v t="edream.110203161858.642"><vh>c.selectVnode (calls tree.select)</vh></v>
<v t="edream.110203161858.643"><vh>selectVnodeWithEditing</vh></v>
</v>
<v t="edream.110203161858.644"><vh>Syntax coloring interface</vh>
<v t="edream.110203161858.645"><vh>updateSyntaxColorer</vh></v>
</v>
</v>
<v t="edream.110203161858.646" tnodeList="edream.110203161858.646,edream.110203161858.647,edream.110203161858.648,edream.110203161858.649,edream.110203161858.650,edream.110203161858.651,edream.110203161858.652,edream.110203161858.653,edream.110203161858.654,edream.110203161858.655,edream.110203161858.656,edream.110203161858.657,edream.110203161858.658,edream.110203161858.659,edream.110203161858.660,edream.110203161858.662,edream.110203161858.663,edream.110203161858.664,edream.110203161858.665,edream.110203161858.666,edream.110203161858.667,edream.110203161858.668,edream.110203161858.669,edream.110203161858.670,edream.110203161858.671,edream.110203161858.672,edream.110203161858.673,edream.110203161858.674,edream.110203161858.675,edream.110203161858.676,edream.110203161858.677,edream.110203161858.678,edream.110203161858.679,edream.110203161858.680,edream.110203161858.681,edream.110203161858.683,edream.110203161858.684,edream.110203161858.685,edream.110203161858.686"><vh>@file c:\prog\test\leoCompare.py</vh>
<v t="edream.110203161858.647"><vh>choose</vh></v>
<v t="edream.110203161858.648"><vh>go</vh></v>
<v t="edream.110203161858.649"><vh>class leoCompare</vh>
<v t="edream.110203161858.650"><vh>compare.__init__</vh></v>
<v t="edream.110203161858.651"><vh>compare_directories (entry)</vh></v>
<v t="edream.110203161858.652"><vh>compare_files (entry)</vh></v>
<v t="edream.110203161858.653"><vh>compare_lines</vh></v>
<v t="edream.110203161858.654"><vh>compare_open_files</vh>
<v t="edream.110203161858.655"><vh>&lt;&lt; handle opening lines &gt;&gt;</vh></v>
<v t="edream.110203161858.656"><vh>&lt;&lt; ignore blank lines and/or sentinels &gt;&gt;</vh></v>
<v t="edream.110203161858.657"><vh>&lt;&lt; print matches and/or mismatches &gt;&gt;</vh></v>
<v t="edream.110203161858.658"><vh>&lt;&lt; warn if mismatch limit reached &gt;&gt;</vh></v>
<v t="edream.110203161858.659"><vh>&lt;&lt; handle reporting after at least one eof is seen &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.660"><vh>filecmp</vh></v>
<v t="edream.110203161858.661"><vh>utils...</vh>
<v t="edream.110203161858.662"><vh>doOpen</vh></v>
<v t="edream.110203161858.663"><vh>dump</vh></v>
<v t="edream.110203161858.664"><vh>dumpToEndOfFile</vh></v>
<v t="edream.110203161858.665"><vh>isLeoHeader &amp; isSentinel</vh></v>
<v t="edream.110203161858.666"><vh>openOutputFile (compare)</vh></v>
<v t="edream.110203161858.667"><vh>show</vh></v>
<v t="edream.110203161858.668"><vh>showIvars</vh></v>
</v>
</v>
<v t="edream.110203161858.669"><vh>class leoComparePanel</vh>
<v t="edream.110203161858.670"><vh>browser</vh></v>
<v t="edream.110203161858.671"><vh>comparePanel.__init__</vh></v>
<v t="edream.110203161858.672"><vh>finishCreate</vh></v>
<v t="edream.110203161858.673"><vh>run</vh>
<v t="edream.110203161858.674"><vh>&lt;&lt; create the organizer frames &gt;&gt;</vh></v>
<v t="edream.110203161858.675"><vh>&lt;&lt; create the browser rows &gt;&gt;</vh></v>
<v t="edream.110203161858.676"><vh>&lt;&lt; create the extension row &gt;&gt;</vh></v>
<v t="edream.110203161858.677"><vh>&lt;&lt; create the whitespace options frame &gt;&gt;</vh></v>
<v t="edream.110203161858.678"><vh>&lt;&lt; create the print options frame &gt;&gt;</vh></v>
<v t="edream.110203161858.679"><vh>&lt;&lt; create the compare buttons &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.680"><vh>show</vh></v>
<v t="edream.110203161858.681"><vh>setIvarsFromWidgets</vh></v>
<v t="edream.110203161858.682"><vh>Event handlers...</vh>
<v t="edream.110203161858.683"><vh>onBrowse...</vh></v>
<v t="edream.110203161858.684"><vh>onClose</vh></v>
<v t="edream.110203161858.685"><vh>onCompare...</vh></v>
<v t="edream.110203161858.686"><vh>onPrintMatchedLines</vh></v>
</v>
</v>
</v>
<v t="edream.110203161858.687" tnodeList="edream.110203161858.687,edream.110203161858.688,edream.110203161858.689,edream.110203161858.690,edream.110203161858.691,edream.110203161858.692,edream.110203161858.694,edream.110203161858.695,edream.110203161858.696,edream.110203161858.697,edream.110203161858.698,edream.110203161858.699,edream.110203161858.700,edream.110203161858.701,edream.110203161858.702,edream.110203161858.703,edream.110203161858.704,edream.110203161858.705,edream.110203161858.706,edream.110203161858.707,edream.110203161858.708,edream.110203161858.709,edream.110203161858.710,edream.110203161858.711,edream.110203161858.712,edream.110203161858.713,edream.110203161858.714,edream.110203161858.715,edream.110203161858.716"><vh>@file c:\prog\test\leoConfig.py</vh>
<v t="edream.110203161858.688"><vh>&lt;&lt; define defaultsDict &gt;&gt;</vh></v>
<v t="edream.110203161858.689"><vh>config.__init__</vh>
<v t="edream.110203161858.690"><vh>&lt;&lt; get the default font &gt;&gt;</vh></v>
<v t="edream.110203161858.691"><vh>&lt;&lt; initialize constant ivars, lists &amp; dicts &gt;&gt; (leoConfig)</vh></v>
<v t="edream.110203161858.692"><vh>&lt;&lt; initialize ivars that may be set by config options &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.693"><vh>getters/setters</vh>
<v t="edream.110203161858.694"><vh>get...FromDict &amp; setDict</vh></v>
<v t="edream.110203161858.695"><vh>get/setColors</vh></v>
<v t="edream.110203161858.696"><vh>get/setComparePref</vh></v>
<v t="edream.110203161858.697"><vh>get/setFindPref</vh></v>
<v t="edream.110203161858.698"><vh>get/setPref</vh></v>
<v t="edream.110203161858.699"><vh>get/setRecentFiles</vh></v>
<v t="edream.110203161858.700"><vh>get/setWindowPrefs</vh></v>
<v t="edream.110203161858.701"><vh>config.getFontFromParams</vh></v>
<v t="edream.110203161858.702"><vh>getShortcut</vh></v>
<v t="edream.110203161858.703"><vh>init/Boolean/ConfigParam</vh></v>
<v t="edream.110203161858.704"><vh>setCommandsFindIvars</vh></v>
<v t="edream.110203161858.705"><vh>setCommandsIvars</vh>
<v t="edream.110203161858.706"><vh>&lt;&lt; set prefs ivars &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.707"><vh>setConfigFindIvars</vh></v>
<v t="edream.110203161858.708"><vh>setConfigIvars</vh></v>
</v>
<v t="edream.110203161858.709"><vh>open</vh>
<v t="edream.110203161858.710"><vh>&lt;&lt; get config options &gt;&gt;</vh></v>
<v t="edream.110203161858.711"><vh>&lt;&lt; get recent files &gt;&gt;</vh></v>
<v t="edream.110203161858.712"><vh>&lt;&lt; convert find/change options to unicode &gt;&gt;</vh></v>
<v t="edream.110203161858.713"><vh>&lt;&lt; print options &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.714"><vh>update (config)</vh>
<v t="edream.110203161858.715"><vh>&lt;&lt; write recent files section &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.716"><vh>update_section</vh></v>
</v>
<v t="edream.110203161858.717" tnodeList="edream.110203161858.717,edream.110203161858.718,edream.110203161858.719,edream.110203161858.720,edream.110203161858.721,edream.110203161858.722,edream.110203161858.723,edream.110203161858.724,edream.110203161858.725,edream.110203161858.726,edream.110203161858.727,edream.110203161858.728,edream.110203161858.729,edream.110203161858.730,edream.110203161858.731,edream.110203161858.732,edream.110203161858.733,edream.110203161858.734,edream.110203161858.735,edream.110203161858.736,edream.110203161858.737,edream.110203161858.738,edream.110203161858.739,edream.110203161858.740,edream.110203161858.741,edream.110203161858.742,edream.110203161858.743,edream.110203161858.744,edream.110203161858.745,edream.110203161858.746,edream.110203161858.747,edream.110203161858.748,edream.110203161858.749,edream.110203161858.750,edream.110203161858.751,edream.110203161858.752,edream.110203161858.753,edream.110203161858.754,edream.110203161858.755,edream.110203161858.756,edream.110203161858.757,edream.110203161858.758,edream.110203161858.759,edream.110203161858.760,edream.110203161858.761,edream.110203161858.762,edream.110203161858.763,edream.110203161858.764,edream.110203161858.765,edream.110203161858.766"><vh>@file c:\prog\test\leoDialog.py</vh>
<v t="edream.110203161858.718"><vh> class leoDialog</vh>
<v t="edream.110203161858.719"><vh>__init__ (leoDialog)</vh></v>
<v t="edream.110203161858.720"><vh>cancelButton, noButton, okButton, yesButton</vh></v>
<v t="edream.110203161858.721"><vh>center</vh></v>
<v t="edream.110203161858.722"><vh>createButtons</vh></v>
<v t="edream.110203161858.723"><vh>createMessageFrame</vh></v>
<v t="edream.110203161858.724"><vh>createTopFrame</vh></v>
<v t="edream.110203161858.725"><vh>run</vh></v>
</v>
<v t="edream.110203161858.726"><vh>class aboutLeo</vh>
<v t="edream.110203161858.727"><vh>aboutLeo.__init__</vh></v>
<v t="edream.110203161858.728"><vh>aboutLeo.createFrame</vh></v>
<v t="edream.110203161858.729"><vh>onAboutLeoEmail</vh></v>
<v t="edream.110203161858.730"><vh>onAboutLeoUrl</vh></v>
<v t="edream.110203161858.731"><vh>setArrowCursor, setDefaultCursor</vh></v>
</v>
<v t="edream.110203161858.732"><vh>class askLeoID</vh>
<v t="edream.110203161858.733"><vh>askLeoID.__init__</vh></v>
<v t="edream.110203161858.734"><vh>askLeoID.createFrame</vh></v>
<v t="edream.110203161858.735"><vh>onCloseWindow</vh></v>
<v t="edream.110203161858.736"><vh>onButton</vh></v>
<v t="edream.110203161858.737"><vh>onKey</vh>
<v t="edream.110203161858.738"><vh>&lt;&lt; eliminate invalid characters &gt;&gt;</vh></v>
<v t="edream.110203161858.739"><vh>&lt;&lt; enable the ok button if there are 4 or more valid characters &gt;&gt;</vh></v>
</v>
</v>
<v t="edream.110203161858.740"><vh>class askOk</vh>
<v t="edream.110203161858.741"><vh>askOk.__init__</vh></v>
<v t="edream.110203161858.742"><vh>askOk.onKey</vh></v>
</v>
<v t="edream.110203161858.743"><vh>class askOkCancel</vh>
<v t="edream.110203161858.744"><vh>askOkCancel.__init__</vh></v>
<v t="edream.110203161858.745"><vh>askOkCancel.onKey</vh></v>
</v>
<v t="edream.110203161858.746"><vh>class askOkCancelNumber</vh>
<v t="edream.110203161858.747"><vh>askOKCancelNumber.__init__</vh></v>
<v t="edream.110203161858.748"><vh>askOKCancelNumber.createFrame</vh></v>
<v t="edream.110203161858.749"><vh>askOKCancelNumber.okButton, cancelButton</vh></v>
<v t="edream.110203161858.750"><vh>askOKCancelNumber.onKey</vh>
<v t="edream.110203161858.751"><vh>&lt;&lt; eliminate non-numbers &gt;&gt;</vh></v>
</v>
</v>
<v t="edream.110203161858.752"><vh>class askYesNo</vh>
<v t="edream.110203161858.753"><vh>askYesNo.__init__</vh></v>
<v t="edream.110203161858.754"><vh>askYesNo.onKey</vh></v>
</v>
<v t="edream.110203161858.755"><vh>class askYesNoCancel</vh>
<v t="edream.110203161858.756"><vh>askYesNoCancel.__init__</vh></v>
<v t="edream.110203161858.757"><vh>askYesNoCancel.onKey</vh></v>
<v t="edream.110203161858.758"><vh>askYesNoCancel.noButton &amp; yesButton</vh></v>
</v>
<v t="edream.110203161858.759"><vh>class listboxDialog</vh>
<v t="edream.110203161858.760"><vh>listboxDialog.__init__</vh></v>
<v t="edream.110203161858.761"><vh>addStdButtons</vh></v>
<v t="edream.110203161858.762"><vh>createFrame</vh></v>
<v t="edream.110203161858.763"><vh>destroy</vh></v>
<v t="edream.110203161858.764"><vh>hide</vh></v>
<v t="edream.110203161858.765"><vh>fillbox</vh></v>
<v t="edream.110203161858.766"><vh>go</vh></v>
</v>
</v>
<v t="edream.110203161858.767" tnodeList="edream.110203161858.767,edream.110203161858.768,edream.110203161858.770,edream.110203161858.771,edream.110203161858.772,edream.110203161858.773,edream.110203161858.776,edream.110203161858.777,edream.110203161858.778,edream.110203161858.779,edream.110203161858.780,edream.110203161858.781,edream.110203161858.782,edream.110203161858.783,edream.110203161858.784,edream.110203161858.785,edream.110203161858.786,edream.110203161858.787,edream.110203161858.788,edream.110203161858.789,edream.110203161858.790,edream.110203161858.791,edream.110203161858.792,edream.110203161858.793,edream.110203161858.794,edream.110203161858.796,edream.110203161858.795,edream.110203161858.797,edream.110203161858.798,edream.110203161858.799,edream.110203161858.800,edream.110203161858.801,edream.110203161858.802,edream.110203161858.803,edream.110203161858.804,edream.110203161858.805,edream.110203161858.806,edream.110203161858.807,edream.110203161858.808,edream.110203161858.809,edream.110203161858.810,edream.110203161858.811,edream.110203161858.810,edream.110203161858.812,edream.110203161858.813,edream.110203161858.815,edream.110203161858.816,edream.110203161858.818,edream.110203161858.819,edream.110203161858.820,edream.110203161858.821,edream.110203161858.822,edream.110203161858.823,edream.110203161858.824,edream.110203161858.825,edream.110203161858.826,edream.110203161858.827,edream.110203161858.828,edream.110203161858.829,edream.110203161858.830,edream.110203161858.831,edream.110203161858.832,edream.110203161858.833,edream.110203161858.834,edream.110203161858.835,edream.110203161858.836,edream.110203161858.837,edream.110203161858.838,edream.110203161858.839,edream.110203161858.840,edream.110203161858.841,edream.110203161858.842,edream.110203161858.843,edream.110203161858.844,edream.110203161858.845,edream.110203161858.846,edream.110203161858.847,edream.110203161858.848,edream.110203161858.849,edream.110203161858.850,edream.110203161858.851,edream.110203161858.852,edream.110203161858.853,edream.110203161858.852,edream.110203161858.853,edream.110203161858.854,edream.110203161858.855,edream.110203161858.856,edream.110203161858.857,edream.110203161858.858"><vh>@file c:\prog\test\leoFileCommands.py</vh>
<v t="edream.110203161858.768"><vh>leoFileCommands._init_</vh></v>
<v t="edream.110203161858.769"><vh>Reading</vh>
<v t="edream.110203161858.770"><vh>createVnode</vh></v>
<v t="edream.110203161858.771"><vh>finishPaste</vh>
<v t="edream.110203161858.772"><vh>&lt;&lt; Create join lists of all pasted vnodes &gt;&gt;</vh></v>
<v t="edream.110203161858.773"><vh>&lt;&lt; Recompute clone bits for pasted vnodes &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.774"><vh>get routines</vh>
<v t="edream.110203161858.775"><vh>get &amp; match (basic)(leoFileCommands)</vh>
<v t="edream.110203161858.776"><vh>get routines</vh></v>
<v t="edream.110203161858.777"><vh>match routines</vh></v>
</v>
<v t="edream.110203161858.778"><vh>getClipboardHeader</vh></v>
<v t="edream.110203161858.779"><vh>getCloneWindows</vh></v>
<v t="edream.110203161858.780"><vh>getEscapedString</vh></v>
<v t="edream.110203161858.781"><vh>getFindPanelSettings</vh>
<v t="edream.110203161858.782"><vh>&lt;&lt; Set defaults of all flags &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.783"><vh>getGlobals (changed for 4.0)</vh></v>
<v t="edream.110203161858.784"><vh>getLeoFile (calls setAllJoinLinks, initAllCloneBits)</vh>
<v t="edream.110203161858.785"><vh>&lt;&lt; warn on read-only files &gt;&gt;</vh></v>
<v t="edream.110203161858.786"><vh>&lt;&lt; scan all the xml elements &gt;&gt;</vh></v>
<v t="edream.110203161858.787"><vh>&lt;&lt; raise an alert &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.788"><vh>getLeoHeader</vh></v>
<v t="edream.110203161858.789"><vh>getLeoOutline (from clipboard)</vh></v>
<v t="edream.110203161858.790"><vh>getPosition</vh></v>
<v t="edream.110203161858.791"><vh>getPrefs</vh>
<v t="edream.110203161858.792"><vh>&lt;&lt; check for syntax coloring prefs &gt;&gt; (getPrefs)</vh></v>
</v>
<v t="edream.110203161858.793"><vh>getSize</vh></v>
<v t="edream.110203161858.794"><vh>getTnode</vh>
<v t="edream.110203161858.795"><vh>&lt;&lt; handle read from file &gt;&gt;</vh></v>
<v t="edream.110203161858.796"><vh>&lt;&lt; handle read from clipboard &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.797"><vh>getTnodes</vh></v>
<v t="edream.110203161858.798"><vh>getVnode</vh>
<v t="edream.110203161858.799"><vh>&lt;&lt; Handle vnode attribute bits  &gt;&gt;</vh></v>
<v t="edream.110203161858.800"><vh>&lt;&lt; Set the remembered status bits &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.801"><vh>getTnodeList (4.0)</vh></v>
<v t="edream.110203161858.802"><vh>getVnodes</vh></v>
<v t="edream.110203161858.803"><vh>getXmlStylesheetTag</vh></v>
<v t="edream.110203161858.804"><vh>getXmlVersionTag</vh></v>
<v t="edream.110203161858.805"><vh>skipWs</vh></v>
<v t="edream.110203161858.806"><vh>skipWsAndNl</vh></v>
</v>
<v t="edream.110203161858.807"><vh>newTnode</vh></v>
<v t="edream.110203161858.808"><vh>readAtFileNodes</vh></v>
<v t="edream.110203161858.809"><vh>fileCommands.readOutlineOnly</vh>
<v t="edream.110203161858.810" a=""><vh>&lt;&lt; Set the default directory &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.811"><vh>fileCommands.open</vh>
<v t="edream.110203161858.810" a=""><vh>&lt;&lt; Set the default directory &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.812"><vh>fileCommands.setAllJoinLinks</vh></v>
<v t="edream.110203161858.813"><vh>xmlUnescape</vh></v>
</v>
<v t="edream.110203161858.814"><vh>Writing</vh>
<v t="edream.110203161858.815"><vh>assignFileIndices</vh></v>
<v t="edream.110203161858.816"><vh>compactFileIndices</vh></v>
<v t="edream.110203161858.817"><vh>put routines</vh>
<v t="edream.110203161858.818"><vh>put (basic)(leoFileCommands)</vh></v>
<v t="edream.110203161858.819"><vh>putClipboardHeader</vh>
<v t="edream.110203161858.820"><vh>&lt;&lt; count the number of tnodes &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.821"><vh>putEscapedString</vh></v>
<v t="edream.110203161858.822"><vh>putFindSettings</vh>
<v t="edream.110203161858.823"><vh>&lt;&lt; put find settings that may exist in leoConfig.txt &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.824"><vh>putGlobals (changed for 4.0)</vh>
<v t="edream.110203161858.825"><vh>&lt;&lt; put the body/outline ratio &gt;&gt;</vh></v>
<v t="edream.110203161858.826"><vh>&lt;&lt; put the position of this frame &gt;&gt;</vh></v>
<v t="edream.110203161858.827"><vh>&lt;&lt; put the position of the log window &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.828"><vh>putHeader</vh></v>
<v t="edream.110203161858.829"><vh>putLeoOutline (to clipboard)</vh></v>
<v t="edream.110203161858.830"><vh>putPostlog</vh></v>
<v t="edream.110203161858.831"><vh>putPrefs</vh>
<v t="edream.110203161858.832"><vh>&lt;&lt; put prefs that may exist in leoConfig.txt &gt;&gt; (putPrefs)</vh>
<v t="edream.110203161858.833"><vh>&lt;&lt; put default directory &gt;&gt;</vh></v>
</v>
</v>
<v t="edream.110203161858.834"><vh>putProlog</vh>
<v t="edream.110203161858.835"><vh>&lt;&lt; Put the &lt;?xml...?&gt; line &gt;&gt;</vh></v>
<v t="edream.110203161858.836"><vh>&lt;&lt; Put the optional &lt;?xml-stylesheet...?&gt; line &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.837"><vh>putTnode</vh></v>
<v t="edream.110203161858.838"><vh>putTnodeList (4.0)</vh></v>
<v t="edream.110203161858.839"><vh>putTnodes</vh>
<v t="edream.110203161858.840"><vh>&lt;&lt; write only those tnodes that were referenced &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.841"><vh>putVnode (3.x and 4.x)</vh>
<v t="edream.110203161858.842"><vh>&lt;&lt; Put tnode index if this vnode has body text &gt;&gt;</vh></v>
<v t="edream.110203161858.843"><vh>&lt;&lt; Put attribute bits &gt;&gt;</vh></v>
<v t="edream.110203161858.844"><vh>&lt;&lt; write the head text &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.845"><vh>putVnodes</vh></v>
</v>
<v t="edream.110203161858.846"><vh>save</vh></v>
<v t="edream.110203161858.847"><vh>saveAs</vh></v>
<v t="edream.110203161858.848"><vh>saveTo</vh></v>
<v t="edream.110203161858.849"><vh>setDefaultDirectoryForNewFiles</vh></v>
<v t="edream.110203161858.850"><vh>write_LEO_file</vh>
<v t="edream.110203161858.851"><vh>&lt;&lt; create backup file &gt;&gt;</vh></v>
<v t="edream.110203161858.852"><vh>&lt;&lt; delete backup file &gt;&gt;</vh></v>
<v t="edream.110203161858.853"><vh>&lt;&lt; erase filename and rename backupName to fileName &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.854"><vh>writeAtFileNodes</vh></v>
<v t="edream.110203161858.855"><vh>writeDirtyAtFileNodes</vh></v>
<v t="edream.110203161858.856"><vh>writeMissingAtFileNodes</vh></v>
<v t="edream.110203161858.857"><vh>writeOutlineOnly</vh></v>
<v t="edream.110203161858.858"><vh>xmlEscape</vh></v>
</v>
</v>
<v t="edream.110203161858.859" tnodeList="edream.110203161858.859,edream.110203161858.860,edream.110203161858.861,edream.110203161858.862,edream.110203161858.863,edream.110203161858.864,edream.110203161858.865,edream.110203161858.866,edream.110203161858.867,edream.110203161858.868,edream.110203161858.869,edream.110203161858.871,edream.110203161858.870,edream.110203161858.872,edream.110203161858.873,edream.110203161858.874,edream.110203161858.875,edream.110203161858.877,edream.110203161858.878,edream.110203161858.879,edream.110203161858.880,edream.110203161858.881,edream.110203161858.882,edream.110203161858.883,edream.110203161858.884,edream.110203161858.885,edream.110203161858.886,edream.110203161858.887,edream.110203161858.889,edream.110203161858.890,edream.110203161858.891,edream.110203161858.892,edream.110203161858.893,edream.110203161858.894,edream.110203161858.895,edream.110203161858.896,edream.110203161858.897,edream.110203161858.898,edream.110203161858.899,edream.110203161858.900,edream.110203161858.901,edream.110203161858.902,edream.110203161858.903,edream.110203161858.905,edream.110203161858.906,edream.110203161858.907,edream.110203161858.908,edream.110203161858.909,edream.110203161858.910,edream.110203161858.911,edream.110203161858.912,edream.110203161858.913"><vh>@file c:\prog\test\leoFind.py</vh>
<v t="edream.110203161858.860"><vh>&lt;&lt; Theory of operation of find/change &gt;&gt;</vh></v>
<v t="edream.110203161858.861"><vh>class leoFindBase</vh>
<v t="edream.110203161858.862"><vh>findBase.__init__</vh></v>
<v t="edream.110203161858.863"><vh>onCloseWindow</vh></v>
<v t="edream.110203161858.864"><vh>resetWrap</vh></v>
<v t="edream.110203161858.865"><vh>OnReturnKey (no longer used)</vh></v>
</v>
<v t="edream.110203161858.866"><vh>class leoFind</vh>
<v t="edream.110203161858.867"><vh>find.__init__ (creates find panel)</vh>
<v t="edream.110203161858.868"><vh>&lt;&lt; Initialize the leoFind ivars &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.869"><vh>find.createFrame</vh>
<v t="edream.110203161858.870"><vh>&lt;&lt; Create four columns of radio and checkboxes &gt;&gt;</vh></v>
<v t="edream.110203161858.871"><vh>&lt;&lt; Create the Find and Change panes &gt;&gt;</vh></v>
<v t="edream.110203161858.872"><vh>&lt;&lt; Create two rows of buttons &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.873"><vh>find.init</vh>
<v t="edream.110203161858.874"><vh>&lt;&lt; set widgets &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.875"><vh>find.set_ivars</vh></v>
<v t="edream.110203161858.876"><vh>Top Level Commands</vh>
<v t="edream.110203161858.877"><vh>changeButton</vh></v>
<v t="edream.110203161858.878"><vh>changeAllButton</vh></v>
<v t="edream.110203161858.879"><vh>changeThenFindButton</vh></v>
<v t="edream.110203161858.880"><vh>findButton</vh></v>
<v t="edream.110203161858.881"><vh>findAllButton</vh></v>
<v t="edream.110203161858.882"><vh>changeCommand</vh></v>
<v t="edream.110203161858.883"><vh>changeThenFindCommandd</vh></v>
<v t="edream.110203161858.884"><vh>findNextCommand</vh></v>
<v t="edream.110203161858.885"><vh>fndPreviousCommand</vh></v>
<v t="edream.110203161858.886"><vh>setup_button</vh></v>
<v t="edream.110203161858.887"><vh>setup_command</vh></v>
</v>
<v t="edream.110203161858.888"><vh>Utilities</vh>
<v t="edream.110203161858.889"><vh>batchChange</vh>
<v t="edream.110203161858.890"><vh>&lt;&lt; set the undo head params &gt;&gt;</vh></v>
<v t="edream.110203161858.891"><vh>&lt;&lt; set the undo body typing params &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.892"><vh>change</vh></v>
<v t="edream.110203161858.893"><vh>changeAll</vh></v>
<v t="edream.110203161858.894"><vh>changeSelection</vh></v>
<v t="edream.110203161858.895"><vh>changeThenFind</vh></v>
<v t="edream.110203161858.896"><vh>findAll</vh></v>
<v t="edream.110203161858.897"><vh>findNext</vh></v>
<v t="edream.110203161858.898"><vh>findNextMatch</vh></v>
<v t="edream.110203161858.899"><vh>selectNextVnode</vh></v>
<v t="edream.110203161858.900"><vh>search</vh>
<v t="edream.110203161858.901"><vh>&lt;&lt; search again after getting stuck going backward &gt;&gt;</vh></v>
<v t="edream.110203161858.902"><vh>&lt;&lt; return if we are passed the wrap point &gt;&gt;</vh></v>
<v t="edream.110203161858.903"><vh>&lt;&lt; test for whole word match &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.904"><vh>Initializing &amp; finalizing &amp; selecting</vh>
<v t="edream.110203161858.905"><vh>checkArgs</vh></v>
<v t="edream.110203161858.906"><vh>initBatchCommands</vh></v>
<v t="edream.110203161858.907"><vh>initBatchText &amp; initNextText</vh></v>
<v t="edream.110203161858.908"><vh>initInHeadline</vh></v>
<v t="edream.110203161858.909"><vh>initInteractiveCommands</vh></v>
<v t="edream.110203161858.910"><vh>printLine</vh></v>
<v t="edream.110203161858.911"><vh>restore</vh></v>
<v t="edream.110203161858.912"><vh>save</vh></v>
<v t="edream.110203161858.913"><vh>showSuccess</vh></v>
</v>
</v>
</v>
</v>
<v t="edream.110203161858.914" tnodeList="edream.110203161858.914,edream.110203161858.916,edream.110203161858.917,edream.110203161858.918,edream.110203161858.919,edream.110203161858.920,edream.110203161858.921,edream.110203161858.922,edream.110203161858.924,edream.110203161858.925,edream.110203161858.926,edream.110203161858.927,edream.110203161858.928,edream.110203161858.930,edream.110203161858.931,edream.110203161858.933,edream.110203161858.934,edream.110203161858.935,edream.110203161858.936,edream.110203161858.937,edream.110203161858.938,edream.110203161858.939,edream.110203161858.940,edream.110203161858.941,edream.110203161858.942,edream.110203161858.943"><vh>@file c:\prog\test\leoFontPanel.py</vh>
<v t="edream.110203161858.915"><vh>Birth &amp; Death</vh>
<v t="edream.110203161858.916"><vh>fontPanel.__init__</vh></v>
<v t="edream.110203161858.917"><vh>create_outer</vh>
<v t="edream.110203161858.918"><vh>&lt;&lt; create the organizer frames &gt;&gt;</vh></v>
<v t="edream.110203161858.919"><vh>&lt;&lt; create the font pane &gt;&gt;</vh></v>
<v t="edream.110203161858.920"><vh>&lt;&lt; create the checkboxes &gt;&gt;</vh></v>
<v t="edream.110203161858.921"><vh>&lt;&lt; create the buttons &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.922"><vh>finishCreate</vh></v>
</v>
<v t="edream.110203161858.923"><vh>Buttons</vh>
<v t="edream.110203161858.924"><vh>onApply</vh></v>
<v t="edream.110203161858.925"><vh>onCancel</vh></v>
<v t="edream.110203161858.926"><vh>onOk</vh>
<v t="edream.110203161858.927"><vh>&lt;&lt; update the configuration settings &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.928"><vh>onRevert</vh></v>
</v>
<v t="edream.110203161858.929"><vh>Events</vh>
<v t="edream.110203161858.930"><vh>selectFont</vh></v>
<v t="edream.110203161858.931"><vh>onSizeEntryKey</vh></v>
</v>
<v t="edream.110203161858.932"><vh>Helpers</vh>
<v t="edream.110203161858.933"><vh>getActiveFont</vh></v>
<v t="edream.110203161858.934"><vh>getFontSettings</vh></v>
<v t="edream.110203161858.935"><vh>getImpliedFont</vh></v>
<v t="edream.110203161858.936"><vh>hide</vh></v>
<v t="edream.110203161858.937"><vh>revertIvars</vh></v>
<v t="edream.110203161858.938"><vh>run</vh></v>
<v t="edream.110203161858.939"><vh>setRevertVars</vh></v>
<v t="edream.110203161858.940"><vh>showSettings</vh></v>
<v t="edream.110203161858.941"><vh>update</vh>
<v t="edream.110203161858.942"><vh>&lt;&lt; insert the new text in the size box &gt;&gt;</vh></v>
<v t="edream.110203161858.943"><vh>&lt;&lt; set the fonts in all panes &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="edream.110203161858.944" tnodeList="edream.110203161858.944,edream.110203161858.946,edream.110203161858.947,edream.110203161858.948,edream.110203161858.949,edream.110203161858.950,edream.110203161858.951,edream.110203161858.952,edream.110203161858.953,edream.110203161858.954,edream.110203161858.955,edream.110203161858.956,edream.110203161858.957,edream.110203161858.958,edream.110203161858.960,edream.110203161858.961,edream.110203161858.962,edream.110203161858.963,edream.110203161858.964,edream.110203161858.965,edream.110203161858.966,edream.110203161858.967,edream.110203161858.968,edream.110203161858.969,edream.110203161858.970,edream.110203161858.972,edream.110203161858.973,edream.110203161858.974,edream.110203161858.975,edream.110203161858.976,edream.110203161858.977,edream.110203161858.978,edream.110203161858.979,edream.110203161858.980,edream.110203161858.981,edream.110203161858.983,edream.110203161858.984,edream.110203161858.985,edream.110203161858.986,edream.110203161858.987,edream.110203161858.988,edream.110203161858.989,edream.110203161858.990,edream.110203161858.991,edream.110203161858.993,edream.110203161858.997,edream.110203161858.994,edream.110203161858.995,edream.110203161858.996,edream.110203161858.998,edream.110203161858.999,edream.110203161858.1006,edream.110203161858.1007,edream.110203161858.1008,edream.110203161858.1009,edream.110203161858.1010,edream.110203161858.1011,edream.110203161858.1012,edream.110203161858.1013,edream.110203161858.1000,edream.110203161858.1001,edream.110203161858.1002,edream.110203161858.1003,edream.110203161858.1004,edream.110203161858.1005,edream.110203161858.1014,edream.110203161858.1015,edream.110203161858.1016,edream.110203161858.1017,edream.110203161858.1018,edream.110203161858.1019,edream.110203161858.1020,edream.110203161858.1021,edream.110203161858.1022,edream.110203161858.1023,edream.110203161858.1027,edream.110203161858.1028,edream.110203161858.1029,edream.110203161858.1030,edream.110203161858.1031,edream.110203161858.1032,edream.110203161858.1033,edream.110203161858.1034,edream.110203161858.1035,edream.110203161858.1036,edream.110203161858.1037,edream.110203161858.1038,edream.110203161858.1039,edream.110203161858.1040,edream.110203161858.1041,edream.110203161858.1042,edream.110203161858.1043,edream.110203161858.1044,edream.110203161858.1045,edream.110203161858.1046,edream.110203161858.1047,edream.110203161858.1049,edream.110203161858.1050,edream.110203161858.1051,edream.110203161858.1052,edream.110203161858.1054,edream.110203161858.1055,edream.110203161858.1056,edream.110203161858.1057,edream.110203161858.1058,edream.110203161858.1059,edream.110203161858.1061,edream.110203161858.1062,edream.110203161858.1064,edream.110203161858.1065,edream.110203161858.1066,edream.110203161858.1068,edream.110203161858.1069,edream.110203161858.1070,edream.110203161858.1072,edream.110203161858.1073,edream.110203161858.1074,edream.110203161858.1075,edream.110203161858.1076,edream.110203161858.1077,edream.110203161858.1078,edream.110203161858.1079,edream.110203161858.1080,edream.110203161858.1081,edream.110203161858.1082,edream.110203161858.1085,edream.110203161858.1086,edream.110203161858.1088,edream.110203161858.1089,edream.110203161858.1090,edream.110203161858.1091,edream.110203161858.1092,edream.110203161858.1093,edream.110203161858.1094,edream.110203161858.1095,edream.110203161858.1096,edream.110203161858.1097,edream.110203161858.1098,edream.110203161858.1099,edream.110203161858.1100,edream.110203161858.1101,edream.110203161858.1102,edream.110203161858.1103,edream.110203161858.1104,edream.110203161858.1105,edream.110203161858.1106,edream.110203161858.1107,edream.110203161858.1108,edream.110203161858.1109,edream.110203161858.1110,edream.110203161858.1111,edream.110203161858.1113,edream.110203161858.1114,edream.110203161858.1115,edream.110203161858.1116,edream.110203161858.1117,edream.110203161858.1118,edream.110203161858.1119,edream.110203161858.1120,edream.110203161858.1121,edream.110203161858.1122,edream.110203161858.1123,edream.110203161858.1125,edream.110203161858.1126,edream.110203161858.1127,edream.110203161858.1128,edream.110203161858.1130,edream.110203161858.1131,edream.110203161858.1132,edream.110203161858.1133,edream.110203161858.1134,edream.110203161858.1137,edream.110203161858.1138,edream.110203161858.1139,edream.110203161858.1140,edream.110203161858.1141,edream.110203161858.1142,edream.110203161858.1143,edream.110203161858.1146,edream.110203161858.1147,edream.110203161858.1148,edream.110203161858.1149,edream.110203161858.1150,edream.110203161858.1151,edream.110203161858.1152,edream.110203161858.1153,edream.110203161858.1154,edream.110203161858.1155,edream.110203161858.1156,edream.110203161858.1157,edream.110203161858.1159,edream.110203161858.1160,edream.110203161858.1161,edream.110203161858.1162,edream.110203161858.1163,edream.110203161858.1164,edream.110203161858.1165,edream.110203161858.1166,edream.110203161858.1167,edream.110203161858.1168,edream.110203161858.1170,edream.110203161858.1171,edream.110203161858.1172,edream.110203161858.1173,edream.110203161858.1174,edream.110203161858.1175,edream.110203161858.1176,edream.110203161858.1177,edream.110203161858.1178,edream.110203161858.1179,edream.110203161858.1180,edream.110203161858.1181,edream.110203161858.1182,edream.110203161858.1183,edream.110203161858.1184,edream.110203161858.1185,edream.110203161858.1187,edream.110203161858.1188,edream.110203161858.1189,edream.110203161858.1190,edream.110203161858.1191,edream.110203161858.1192,edream.110203161858.1193,edream.110203161858.1194,edream.110203161858.1195,edream.110203161858.1196,edream.110203161858.1197,edream.110203161858.1199,edream.110203161858.1200,edream.110203161858.1201,edream.110203161858.1202,edream.110203161858.1203,edream.110203161858.1204,edream.110203161858.1205,edream.110203161858.1206,edream.110203161858.1207,edream.110203161858.1208,edream.110203161858.1209,edream.110203161858.1210,edream.110203161858.1211,edream.110203161858.1212,edream.110203161858.1213,edream.110203161858.1214,edream.110203161858.1215,edream.110203161858.1216,edream.110203161858.1217,edream.110203161858.1218,edream.110203161858.1219,edream.110203161858.1220,edream.110203161858.1222,edream.110203161858.1223,edream.110203161858.1224,edream.110203161858.1225,edream.110203161858.1226,edream.110203161858.1227,edream.110203161858.1228,edream.110203161858.1229,edream.110203161858.1230,edream.110203161858.1231,edream.110203161858.1232,edream.110203161858.1233,edream.110203161858.1234,edream.110203161858.1235,edream.110203161858.1236,edream.110203161858.1237,edream.110203161858.1238,edream.110203161858.1239,edream.110203161858.1240"><vh>@file c:\prog\test\leoFrame.py</vh>
<v t="edream.110203161858.945"><vh>Birth &amp; Death</vh>
<v t="edream.110203161858.946"><vh>f.__init__</vh>
<v t="edream.110203161858.947"><vh>&lt;&lt; set the LeoFrame ivars &gt;&gt;</vh></v>
<v t="edream.110203161858.948"><vh>&lt;&lt; create the first tree node &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.949"><vh>f.__repr__</vh></v>
<v t="edream.110203161858.950"><vh>f.setWindowTitle</vh></v>
<v t="edream.110203161858.951"><vh>f.createLeoFrame</vh>
<v t="edream.110203161858.952"><vh>&lt;&lt; create both splitters &gt;&gt;</vh></v>
<v t="edream.110203161858.953"><vh>&lt;&lt; create the body pane &gt;&gt;</vh></v>
<v t="edream.110203161858.954"><vh>&lt;&lt; create the tree pane &gt;&gt;</vh></v>
<v t="edream.110203161858.955"><vh>&lt;&lt; create the log pane &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.956"><vh>frame.destroyAllPanels</vh></v>
<v t="edream.110203161858.957"><vh>frame.promptForSave</vh>
<v t="edream.110203161858.958"><vh>&lt;&lt; Put up a file save dialog to set mFileName &gt;&gt;</vh></v>
</v>
</v>
<v t="edream.110203161858.959"><vh>Configuration</vh>
<v t="edream.110203161858.960"><vh>f.configureBar</vh></v>
<v t="edream.110203161858.961"><vh>f.configureBarsFromConfig</vh></v>
<v t="edream.110203161858.962"><vh>f.reconfigureFromConfig</vh></v>
<v t="edream.110203161858.963"><vh>f.setBodyFontFromConfig</vh></v>
<v t="edream.110203161858.964"><vh>f.setInitialWindowGeometry</vh></v>
<v t="edream.110203161858.965"><vh>f.setLogFontFromConfig</vh></v>
<v t="edream.110203161858.966"><vh>f.setTabWidth</vh></v>
<v t="edream.110203161858.967"><vh>f.setTreeColorsFromConfig</vh></v>
<v t="edream.110203161858.968"><vh>f.setWrap</vh></v>
<v t="edream.110203161858.969"><vh>reconfigurePanes (use config bar_width)</vh></v>
</v>
<v t="edream.110203161858.970"><vh>Scrolling callbacks (frame)</vh></v>
<v t="edream.110203161858.971"><vh>Event handlers (Frame)</vh>
<v t="edream.110203161858.972"><vh>frame.OnCloseLeoEvent</vh></v>
<v t="edream.110203161858.973"><vh>frame.OnControlKeyUp/Down</vh></v>
<v t="edream.110203161858.974"><vh>frame.OnVisibility</vh></v>
<v t="edream.110203161858.975"><vh>OnActivateBody</vh></v>
<v t="edream.110203161858.976"><vh>OnActivateLeoEvent, OnDeactivateLeoEvent</vh></v>
<v t="edream.110203161858.977"><vh>OnActivateLog</vh></v>
<v t="edream.110203161858.978"><vh>OnActivateTree</vh></v>
<v t="edream.110203161858.979"><vh>OnBodyClick, OnBodyRClick (Events)</vh></v>
<v t="edream.110203161858.980"><vh>OnBodyDoubleClick (Events)</vh></v>
<v t="edream.110203161858.981"><vh>OnMouseWheel (Tomaz Ficko)</vh></v>
</v>
<v t="edream.110203161858.982"><vh>Icon area: convenience routines</vh>
<v t="edream.110203161858.983"><vh>createIconBar</vh></v>
<v t="edream.110203161858.984"><vh>hideIconBar</vh></v>
<v t="edream.110203161858.985"><vh>clearIconBar</vh></v>
<v t="edream.110203161858.986"><vh>showIconBar</vh></v>
<v t="edream.110203161858.987"><vh>addIconButton</vh>
<v t="edream.110203161858.988"><vh>&lt;&lt; create a picture &gt;&gt;</vh></v>
</v>
</v>
<v t="edream.110203161858.989"><vh>f.longFileName &amp; shortFileName</vh></v>
<v t="edream.110203161858.990"><vh>f.put, putnl</vh></v>
<v t="edream.110203161858.991"><vh>f.getFocus</vh></v>
<v t="edream.110203161858.992"><vh> Menus</vh>
<v t="edream.110203161858.993"><vh>canonicalizeShortcut</vh>
<v t="edream.110203161858.994"><vh>&lt;&lt; canonicalize the last field &gt;&gt;</vh>
<v t="edream.110203161858.995"><vh>&lt;&lt; define dict of Tk bind names &gt;&gt;</vh></v>
<v t="edream.110203161858.996"><vh>&lt;&lt; define dict of special names &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.997"><vh>&lt;&lt; set the last field, preserving case &gt;&gt;</vh></v>
<v t="edream.110203161858.998"><vh>&lt;&lt; synthesize the shortcuts from the information &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.999"><vh>createMenuBar</vh>
<v t="edream.110203161858.1000"><vh>&lt;&lt; create the edit menu &gt;&gt;</vh>
<v t="edream.110203161858.1001"><vh>&lt;&lt; create the first top-level edit entries &gt;&gt;</vh></v>
<v t="edream.110203161858.1002"><vh>&lt;&lt; create the edit body submenu &gt;&gt;</vh></v>
<v t="edream.110203161858.1003"><vh>&lt;&lt; create the edit headline submenu &gt;&gt;</vh></v>
<v t="edream.110203161858.1004"><vh>&lt;&lt; create the find submenu &gt;&gt;</vh></v>
<v t="edream.110203161858.1005"><vh>&lt;&lt; create the last top-level edit entries &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1006"><vh>&lt;&lt; create the file menu &gt;&gt;</vh>
<v t="edream.110203161858.1007"><vh>&lt;&lt; create the top-level file entries &gt;&gt;</vh></v>
<v t="edream.110203161858.1008"><vh>&lt;&lt; create the recent files submenu &gt;&gt;</vh></v>
<v t="edream.110203161858.1009"><vh>&lt;&lt; create the read/write submenu &gt;&gt;</vh></v>
<v t="edream.110203161858.1010"><vh>&lt;&lt; create the tangle submenu &gt;&gt;</vh></v>
<v t="edream.110203161858.1011"><vh>&lt;&lt; create the untangle submenu &gt;&gt;</vh></v>
<v t="edream.110203161858.1012"><vh>&lt;&lt; create the import submenu &gt;&gt;</vh></v>
<v t="edream.110203161858.1013"><vh>&lt;&lt; create the export submenu &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1014"><vh>&lt;&lt; create the outline menu &gt;&gt;</vh>
<v t="edream.110203161858.1015"><vh>&lt;&lt; create top-level outline menu &gt;&gt;</vh></v>
<v t="edream.110203161858.1016"><vh>&lt;&lt; create expand/contract submenu &gt;&gt;</vh></v>
<v t="edream.110203161858.1017"><vh>&lt;&lt; create move submenu &gt;&gt;</vh></v>
<v t="edream.110203161858.1018"><vh>&lt;&lt; create mark submenu &gt;&gt;</vh></v>
<v t="edream.110203161858.1019"><vh>&lt;&lt; create goto submenu &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1020"><vh>&lt;&lt; create the window menu &gt;&gt;</vh></v>
<v t="edream.110203161858.1021"><vh>&lt;&lt; create the help menu &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1022"><vh>frame.doCommand</vh></v>
<v t="edream.110203161858.1023"><vh>get/set/destroyMenu</vh></v>
<v t="edream.110203161858.1024"><vh>Menu Command Handlers</vh>
<v t="edream.110203161858.1025"><vh>File Menu</vh>
<v t="edream.110203161858.1026"><vh>top level</vh>
<v t="edream.110203161858.1027"><vh>OnNew</vh></v>
<v t="edream.110203161858.1028"><vh>frame.OnOpen</vh>
<v t="edream.110203161858.1029"><vh>&lt;&lt; Set closeFlag if the only open window is empty &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1030"><vh>frame.OnOpenWith and allies</vh>
<v t="edream.110203161858.1031"><vh>&lt;&lt; set ext based on the present language &gt;&gt;</vh></v>
<v t="edream.110203161858.1032"><vh>&lt;&lt; create or reopen temp file, testing for conflicting changes &gt;&gt;</vh>
<v t="edream.110203161858.1033"><vh>&lt;&lt;set dict and path if a temp file already refers to v.t &gt;&gt;</vh></v>
<v t="edream.110203161858.1034"><vh>&lt;&lt; create or recreate temp file as needed &gt;&gt;</vh>
<v t="edream.110203161858.1035"><vh>&lt;&lt; Raise dialog about conflict and set result &gt;&gt;</vh></v>
</v>
</v>
<v t="edream.110203161858.1036"><vh>&lt;&lt; execute a command to open path in external editor &gt;&gt;</vh></v>
<v t="edream.110203161858.1037"><vh>frame.createOpenWithTempFile</vh>
<v t="edream.110203161858.1038"><vh>&lt;&lt; remove previous entry from a.openWithFiles if it exists &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1039"><vh>frame.openWithTempFilePath</vh></v>
</v>
<v t="edream.110203161858.1040"><vh>frame.OpenWithFileName</vh></v>
<v t="edream.110203161858.1041"><vh>frame.OnClose</vh></v>
<v t="edream.110203161858.1042"><vh>OnSave</vh></v>
<v t="edream.110203161858.1043"><vh>OnSaveAs</vh></v>
<v t="edream.110203161858.1044"><vh>OnSaveTo</vh></v>
<v t="edream.110203161858.1045"><vh>frame.OnRevert</vh></v>
<v t="edream.110203161858.1046"><vh>frame.OnQuit</vh></v>
<v t="edream.110203161858.1047"><vh>frame.updateRecentFiles</vh></v>
</v>
<v t="edream.110203161858.1048"><vh>Recent Files submenu &amp; allies</vh>
<v t="edream.110203161858.1049"><vh>OnClearRecentFiles</vh></v>
<v t="edream.110203161858.1050"><vh>frame.OnOpenRecentFile</vh>
<v t="edream.110203161858.1051"><vh>&lt;&lt; Set closeFlag if the only open window is empty &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1052"><vh>createRecentFilesMenuItems</vh></v>
</v>
<v t="edream.110203161858.1053"><vh>Read/Write submenu</vh>
<v t="edream.110203161858.1054"><vh>fileCommands.OnReadOutlineOnly</vh></v>
<v t="edream.110203161858.1055"><vh>OnReadAtFileNodes</vh></v>
<v t="edream.110203161858.1056"><vh>OnWriteDirtyAtFileNodes</vh></v>
<v t="edream.110203161858.1057"><vh>OnWriteMissingAtFileNodes</vh></v>
<v t="edream.110203161858.1058"><vh>OnWriteOutlineOnly</vh></v>
<v t="edream.110203161858.1059"><vh>OnWriteAtFileNodes</vh></v>
<v t="edream.110203161858.1060"><vh>4.0 Commands</vh>
<v t="edream.110203161858.1061"><vh>OnImportDerivedFile</vh></v>
<v t="edream.110203161858.1062"><vh>OnWriteNew/OldDerivedFiles</vh></v>
</v>
</v>
<v t="edream.110203161858.1063"><vh>Tangle submenu</vh>
<v t="edream.110203161858.1064"><vh>OnTangleAll</vh></v>
<v t="edream.110203161858.1065"><vh>OnTangleMarked</vh></v>
<v t="edream.110203161858.1066"><vh>OnTangle</vh></v>
</v>
<v t="edream.110203161858.1067"><vh>Untangle submenu</vh>
<v t="edream.110203161858.1068"><vh>OnUntangleAll</vh></v>
<v t="edream.110203161858.1069"><vh>OnUntangleMarked</vh></v>
<v t="edream.110203161858.1070"><vh>OnUntangle</vh></v>
</v>
<v t="edream.110203161858.1071"><vh>Import&amp;Export submenu</vh>
<v t="edream.110203161858.1072"><vh>OnExportHeadlines</vh></v>
<v t="edream.110203161858.1073"><vh>OnFlattenOutline</vh></v>
<v t="edream.110203161858.1074"><vh>OnImportAtRoot</vh></v>
<v t="edream.110203161858.1075"><vh>OnImportAtFile</vh></v>
<v t="edream.110203161858.1076"><vh>OnImportCWEBFiles</vh></v>
<v t="edream.110203161858.1077"><vh>OnImportFlattenedOutline</vh></v>
<v t="edream.110203161858.1078"><vh>OnImportNowebFiles</vh></v>
<v t="edream.110203161858.1079"><vh>OnOutlineToCWEB</vh></v>
<v t="edream.110203161858.1080"><vh>OnOutlineToNoweb</vh></v>
<v t="edream.110203161858.1081"><vh>OnRemoveSentinels</vh></v>
<v t="edream.110203161858.1082"><vh>OnWeave</vh></v>
</v>
</v>
<v t="edream.110203161858.1083"><vh>Edit Menu (change to handle log pane too)</vh>
<v t="edream.110203161858.1084"><vh>Edit top level</vh>
<v t="edream.110203161858.1085"><vh>OnUndo</vh></v>
<v t="edream.110203161858.1086"><vh>OnRedo</vh></v>
<v t="edream.110203161858.1087"><vh>Cut/Copy/Paste body text</vh>
<v t="edream.110203161858.1088"><vh>frame.OnCut, OnCutFrom Menu</vh></v>
<v t="edream.110203161858.1089"><vh>frame.OnCopy, OnCopyFromMenu</vh></v>
<v t="edream.110203161858.1090"><vh>frame.OnPaste, OnPasteNode, OnPasteFromMenu</vh></v>
</v>
<v t="edream.110203161858.1091"><vh>OnDelete</vh></v>
<v t="edream.110203161858.1092"><vh>OnExecuteScript</vh></v>
<v t="edream.110203161858.1093"><vh>OnGoToLineNumber &amp; allies</vh>
<v t="edream.110203161858.1094"><vh>&lt;&lt; set root to the nearest @file, @silentfile or @rawfile ancestor node &gt;&gt;</vh></v>
<v t="edream.110203161858.1095"><vh>&lt;&lt; read the file into lines &gt;&gt;</vh></v>
<v t="edream.110203161858.1096"><vh>&lt;&lt; get n, the line number, from a dialog &gt;&gt;</vh></v>
<v t="edream.110203161858.1097"><vh>&lt;&lt; count outline lines, setting v,n2,found &gt;&gt;</vh></v>
<v t="edream.110203161858.1098"><vh>&lt;&lt; set v to the node given by vnodeName and childIndex &gt;&gt;</vh></v>
<v t="edream.110203161858.1099"><vh>&lt;&lt; select v and make it visible &gt;&gt;</vh></v>
<v t="edream.110203161858.1100"><vh>&lt;&lt; put the cursor on line n2 of the body text &gt;&gt;</vh></v>
<v t="edream.110203161858.1101"><vh>convertLineToVnodeNameIndexLine</vh>
<v t="edream.110203161858.1102"><vh>&lt;&lt; set delim, leoLine from the @+leo line &gt;&gt;</vh></v>
<v t="edream.110203161858.1103"><vh>&lt;&lt; scan back to  @+node, setting offset,nodeSentinelLine &gt;&gt;</vh>
<v t="edream.110203161858.1104"><vh>&lt;&lt; handle delim while scanning backward &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1105"><vh>&lt;&lt; set vnodeName and childIndex from s &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1106"><vh>skipToMatchingNodeSentinel</vh></v>
</v>
<v t="edream.110203161858.1107"><vh>OnSelectAll</vh></v>
<v t="edream.110203161858.1108"><vh>OnFontPanel</vh></v>
<v t="edream.110203161858.1109"><vh>OnColorPanel</vh></v>
<v t="edream.110203161858.1110"><vh>OnViewAllCharacters</vh></v>
<v t="edream.110203161858.1111"><vh>OnPreferences</vh></v>
</v>
<v t="edream.110203161858.1112"><vh>Edit Body submenu</vh>
<v t="edream.110203161858.1113"><vh>OnConvertBlanks &amp; OnConvertAllBlanks</vh></v>
<v t="edream.110203161858.1114"><vh>OnConvertTabs &amp; OnConvertAllTabs</vh></v>
<v t="edream.110203161858.1115"><vh>OnDedent</vh></v>
<v t="edream.110203161858.1116"><vh>OnExtract</vh></v>
<v t="edream.110203161858.1117"><vh>OnExtractNames</vh></v>
<v t="edream.110203161858.1118"><vh>OnExtractSection</vh></v>
<v t="edream.110203161858.1119"><vh>OnFindMatchingBracket</vh>
<v t="edream.110203161858.1120"><vh>findMatchingBracket</vh></v>
</v>
<v t="edream.110203161858.1121"><vh>OnIndent</vh></v>
<v t="edream.110203161858.1122"><vh>OnInsertBody/HeadlineTime &amp; allies</vh>
<v t="edream.110203161858.1123"><vh>getTime</vh></v>
</v>
</v>
<v t="edream.110203161858.1124"><vh>Edit Headline submenu</vh>
<v t="edream.110203161858.1125"><vh>OnEditHeadline</vh></v>
<v t="edream.110203161858.1126"><vh>OnEndEditHeadline</vh></v>
<v t="edream.110203161858.1127"><vh>OnAbortEditHeadline</vh></v>
<v t="edream.110203161858.1128"><vh>OnToggleAngleBrackets</vh></v>
</v>
<v t="edream.110203161858.1129"><vh>Find submenu (frame methods)</vh>
<v t="edream.110203161858.1130"><vh>OnFindPanel</vh></v>
<v t="edream.110203161858.1131"><vh>OnFindNext</vh></v>
<v t="edream.110203161858.1132"><vh>OnFindPrevious</vh></v>
<v t="edream.110203161858.1133"><vh>OnReplace</vh></v>
<v t="edream.110203161858.1134"><vh>OnReplaceThenFind</vh></v>
</v>
</v>
<v t="edream.110203161858.1135"><vh>Outline Menu</vh>
<v t="edream.110203161858.1136"><vh>top level</vh>
<v t="edream.110203161858.1137"><vh>OnCutNode</vh></v>
<v t="edream.110203161858.1138"><vh>OnCopyNode</vh></v>
<v t="edream.110203161858.1139"><vh>OnPasteNodee</vh></v>
<v t="edream.110203161858.1140"><vh>OnDeleteNode</vh></v>
<v t="edream.110203161858.1141"><vh>OnInsertNode</vh></v>
<v t="edream.110203161858.1142"><vh>OnCloneNode</vh></v>
<v t="edream.110203161858.1143"><vh>OnSortChildren, OnSortSiblings</vh></v>
</v>
<v t="edream.110203161858.1144"><vh>Expand/Contract</vh>
<v t="edream.110203161858.1145"><vh>No longer used</vh>
<v t="edream.110203161858.1146"><vh>OnContractChildren (no longer used)</vh></v>
<v t="edream.110203161858.1147"><vh>OnContractAllChildren (no longer used)</vh></v>
<v t="edream.110203161858.1148"><vh>OnExpandAllChildren (no longer used)</vh></v>
<v t="edream.110203161858.1149"><vh>OnExpandChildren (no longer used)</vh></v>
</v>
<v t="edream.110203161858.1150"><vh>OnContractAll</vh></v>
<v t="edream.110203161858.1151"><vh>OnContractNode</vh></v>
<v t="edream.110203161858.1152"><vh>OnContractParent</vh></v>
<v t="edream.110203161858.1153"><vh>OnExpandAll</vh></v>
<v t="edream.110203161858.1154"><vh>OnExpandNextLevel</vh></v>
<v t="edream.110203161858.1155"><vh>OnExpandNode</vh></v>
<v t="edream.110203161858.1156"><vh>OnExpandPrevLevel</vh></v>
<v t="edream.110203161858.1157"><vh>OnExpandToLevel1..9</vh></v>
</v>
<v t="edream.110203161858.1158"><vh>Move/Select</vh>
<v t="edream.110203161858.1159"><vh>OnMoveDownwn</vh></v>
<v t="edream.110203161858.1160"><vh>OnMoveLeft</vh></v>
<v t="edream.110203161858.1161"><vh>OnMoveRight</vh></v>
<v t="edream.110203161858.1162"><vh>OnMoveUp</vh></v>
<v t="edream.110203161858.1163"><vh>OnPromote</vh></v>
<v t="edream.110203161858.1164"><vh>OnDemote</vh></v>
<v t="edream.110203161858.1165"><vh>OnGoPrevVisible</vh></v>
<v t="edream.110203161858.1166"><vh>OnGoNextVisible</vh></v>
<v t="edream.110203161858.1167"><vh>OnGoBack</vh></v>
<v t="edream.110203161858.1168"><vh>OnGoNext</vh></v>
</v>
<v t="edream.110203161858.1169"><vh>Mark/Goto</vh>
<v t="edream.110203161858.1170"><vh>OnGoPrevVisitedNode</vh></v>
<v t="edream.110203161858.1171"><vh>OnGoNextVisitedNode</vh></v>
<v t="edream.110203161858.1172"><vh>OnGoToFirstNode</vh></v>
<v t="edream.110203161858.1173"><vh>OnGoToLastNode</vh></v>
<v t="edream.110203161858.1174"><vh>OnGoToNextChanged</vh></v>
<v t="edream.110203161858.1175"><vh>OnGoToNextClone</vh></v>
<v t="edream.110203161858.1176"><vh>OnGoToNextMarked</vh></v>
<v t="edream.110203161858.1177"><vh>OnGoToNextSibling</vh></v>
<v t="edream.110203161858.1178"><vh>OnGoToParent</vh></v>
<v t="edream.110203161858.1179"><vh>OnGoToPrevSibling</vh></v>
<v t="edream.110203161858.1180"><vh>OnMark</vh></v>
<v t="edream.110203161858.1181"><vh>OnMarkChangedItems</vh></v>
<v t="edream.110203161858.1182"><vh>OnMarkChangedRoots</vh></v>
<v t="edream.110203161858.1183"><vh>OnMarkClones</vh></v>
<v t="edream.110203161858.1184"><vh>OnMarkSubheads</vh></v>
<v t="edream.110203161858.1185"><vh>OnUnmarkAll</vh></v>
</v>
</v>
<v t="edream.110203161858.1186"><vh>Window Menu</vh>
<v t="edream.110203161858.1187"><vh>OnEqualSizedPanes</vh></v>
<v t="edream.110203161858.1188"><vh>OnToggleActivePane</vh></v>
<v t="edream.110203161858.1189"><vh>OnToggleSplitDirection</vh></v>
<v t="edream.110203161858.1190"><vh>OnCascade</vh></v>
<v t="edream.110203161858.1191"><vh>OnMinimizeAll</vh></v>
<v t="edream.110203161858.1192"><vh>OnHideLogWindow</vh></v>
<v t="edream.110203161858.1193"><vh>OnOpenCompareWindow</vh></v>
<v t="edream.110203161858.1194"><vh>OnOpenPythonWindow (Dave Hein)</vh>
<v t="edream.110203161858.1195"><vh>&lt;&lt; open idle in Linux &gt;&gt;</vh></v>
<v t="edream.110203161858.1196"><vh>&lt;&lt; open idle in Windows &gt;&gt;</vh></v>
<v t="edream.110203161858.1197"><vh>leoPyShellMain</vh></v>
</v>
</v>
<v t="edream.110203161858.1198"><vh>Help Menu</vh>
<v t="edream.110203161858.1199"><vh>OnAbout (version number &amp; date)</vh></v>
<v t="edream.110203161858.1200"><vh>OnLeoDocumentation</vh></v>
<v t="edream.110203161858.1201"><vh>OnLeoHome</vh></v>
<v t="edream.110203161858.1202"><vh>OnLeoHelp</vh>
<v t="edream.110203161858.1203"><vh>showProgressBar</vh>
<v t="edream.110203161858.1204"><vh>&lt;&lt; create the scale widget &gt;&gt;</vh></v>
</v>
</v>
<v t="edream.110203161858.1205"><vh>OnLeoTutorial (version number)</vh></v>
<v t="edream.110203161858.1206"><vh>OnLeoConfig, OnApplyConfig</vh></v>
</v>
</v>
<v t="edream.110203161858.1207"><vh>Menu Convenience Routines</vh>
<v t="edream.110203161858.1208"><vh>createMenuEntries</vh>
<v t="edream.110203161858.1209"><vh>&lt;&lt; set name to the label for doCommand &gt;&gt;</vh></v>
<v t="edream.110203161858.1210"><vh>&lt;&lt; set accel to the shortcut for name &gt;&gt;</vh></v>
<v t="edream.110203161858.1211"><vh>&lt;&lt; set bind_shortcut and menu_shortcut using accel &gt;&gt;</vh></v>
<v t="edream.110203161858.1212"><vh>&lt;&lt; define callback function &gt;&gt;</vh></v>
<v t="edream.110203161858.1213"><vh>&lt;&lt; set realLabel, amp_index and menu_shortcut &gt;&gt;</vh></v>
<v t="edream.110203161858.1214"><vh>&lt;&lt; handle bind_shorcut &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1215"><vh>createMenuItemsFromTable</vh></v>
<v t="edream.110203161858.1216"><vh>createNewMenu</vh></v>
<v t="edream.110203161858.1217"><vh>createOpenWithMenuFromTable</vh></v>
<v t="edream.110203161858.1218"><vh>deleteMenu</vh></v>
<v t="edream.110203161858.1219"><vh>deleteMenuItem</vh></v>
<v t="edream.110203161858.1220"><vh>setRealMenuNamesFromTable</vh></v>
</v>
<v t="edream.110203161858.1221"><vh>Menu enablers (Frame)</vh>
<v t="edream.110203161858.1222"><vh>frame.OnMenuClick (enables and disables all menu items)</vh></v>
<v t="edream.110203161858.1223"><vh>hasSelection</vh></v>
<v t="edream.110203161858.1224"><vh>updateFileMenu</vh></v>
<v t="edream.110203161858.1225"><vh>updateEditMenu</vh></v>
<v t="edream.110203161858.1226"><vh>updateOutlineMenu</vh></v>
</v>
</v>
<v t="edream.110203161858.1227"><vh>Splitter stuff</vh>
<v t="edream.110203161858.1228"><vh>resizePanesToRatio</vh></v>
<v t="edream.110203161858.1229"><vh>bindBar</vh></v>
<v t="edream.110203161858.1230"><vh>createLeoSplitter</vh></v>
<v t="edream.110203161858.1231"><vh>divideAnySplitter</vh></v>
<v t="edream.110203161858.1232"><vh>divideLeoSplitter</vh></v>
<v t="edream.110203161858.1233"><vh>initialRatios</vh></v>
<v t="edream.110203161858.1234"><vh>onDrag...</vh></v>
<v t="edream.110203161858.1235"><vh>placeSplitter</vh></v>
</v>
<v t="edream.110203161858.1236"><vh>Status line: convenience routines</vh>
<v t="edream.110203161858.1237"><vh>createStatusLine</vh></v>
<v t="edream.110203161858.1238"><vh>clearStatusLine</vh></v>
<v t="edream.110203161858.1239"><vh>putStatusLine</vh></v>
<v t="edream.110203161858.1240"><vh>updateStatusRowCol()</vh></v>
</v>
</v>
<v t="edream.110203161858.1241" tnodeList="edream.110203161858.1241,edream.110203161858.1242,edream.110203161858.1244,edream.110203161858.1245,edream.110203161858.1246,edream.110203161858.1248,edream.110203161858.1247,edream.110203161858.1249,edream.110203161858.1250,edream.110203161858.1253,edream.110203161858.1254,edream.110203161858.1255,edream.110203161858.1256,edream.110203161858.1257,edream.110203161858.1258,edream.110203161858.1261,edream.110203161858.1262,edream.110203161858.1263,edream.110203161858.1264,edream.110203161858.1265,edream.110203161858.1266,edream.110203161858.1267,edream.110203161858.1268,edream.110203161858.1269,edream.110203161858.1270,edream.110203161858.1271,edream.110203161858.1272,edream.110203161858.1273,edream.110203161858.1274,edream.110203161858.1275,edream.110203161858.1276,edream.110203161858.1277,edream.110203161858.1278,edream.110203161858.1279,edream.110203161858.1280,edream.110203161858.1281,edream.110203161858.1282,edream.110203161858.1284,edream.110203161858.1285,edream.110203161858.1286,edream.110203161858.1287,edream.110203161858.1288,edream.110203161858.1289,edream.110203161858.1292,edream.110203161858.1293,edream.110203161858.1294,edream.110203161858.1295,edream.110203161858.1296,edream.110203161858.1297,edream.110203161858.1298,edream.110203161858.1299,edream.110203161858.1300,edream.110203161858.1301,edream.110203161858.1302,edream.110203161858.1303,edream.110203161858.1304,edream.110203161858.1305,edream.110203161858.1306,edream.110203161858.1307,edream.110203161858.1308,edream.110203161858.1309,edream.110203161858.1310,edream.110203161858.1312,edream.110203161858.1313,edream.110203161858.1314,edream.110203161858.1315,edream.110203161858.1316,edream.110203161858.1317,edream.110203161858.1318,edream.110203161858.1319,edream.110203161858.1320,edream.110203161858.1321,edream.110203161858.1322,edream.110203161858.1323,edream.110203161858.1324,edream.110203161858.1325,edream.110203161858.1326,edream.110203161858.1327,edream.110203161858.1328,edream.110203161858.1329,edream.110203161858.1330,edream.110203161858.1332,edream.110203161858.1333,edream.110203161858.1334,edream.110203161858.1335,edream.110203161858.1336,edream.110203161858.1337,edream.110203161858.1338,edream.110203161858.1339,edream.110203161858.1340,edream.110203161858.1342,edream.110203161858.1343,edream.110203161858.1344,edream.110203161858.1345,edream.110203161858.1347,edream.110203161858.1348,edream.110203161858.1349,edream.110203161858.1350,edream.110203161858.1351,edream.110203161858.1352,edream.110203161858.1353,edream.110203161858.1354,edream.110203161858.1355,edream.110203161858.1357,edream.110203161858.1359,edream.110203161858.1360,edream.110203161858.1361,edream.110203161858.1362,edream.110203161858.1363,edream.110203161858.1364,edream.110203161858.1365,edream.110203161858.1366,edream.110203161858.1367,edream.110203161858.1368,edream.110203161858.1369,edream.110203161858.1370,edream.110203161858.1371,edream.110203161858.1372,edream.110203161858.1373,edream.110203161858.1374,edream.110203161858.1375,edream.110203161858.1376,edream.110203161858.1377,edream.110203161858.1378,edream.110203161858.1379,edream.110203161858.1380,edream.110203161858.1381,edream.110203161858.1383,edream.110203161858.1384,edream.110203161858.1385,edream.110203161858.1386,edream.110203161858.1387,edream.110203161858.1388,edream.110203161858.1389,edream.110203161858.1390,edream.110203161858.1391,edream.110203161858.1392,edream.110203161858.1393,edream.110203161858.1394,edream.110203161858.1395,edream.110203161858.1396,edream.110203161858.1397,edream.110203161858.1398,edream.110203161858.1399,edream.110203161858.1400,edream.110203161858.1401,edream.110203161858.1402,edream.110203161858.1403,edream.110203161858.1405,edream.110203161858.1359,edream.110203161858.1406,edream.110203161858.1407,edream.110203161858.1408,edream.110203161858.1410,edream.110203161858.1411,edream.110203161858.1412,edream.110203161858.1413,edream.110203161858.1414,edream.110203161858.1415,edream.110203161858.1416,edream.110203161858.1417,edream.110203161858.1419,edream.110203161858.1420,edream.110203161858.1421,edream.110203161858.1422,edream.110203161858.1423,edream.110203161858.1424"><vh>@file c:\prog\test\leoGlobals.py</vh>
<v t="edream.110203161858.1242"><vh>&lt;&lt; define general constants &gt;&gt;</vh></v>
<v t="edream.110203161858.1243"><vh>Checking Leo Files...</vh>
<v t="edream.110203161858.1244"><vh>createTopologyList</vh></v>
<v t="edream.110203161858.1245"><vh>checkClones2Links</vh>
<v t="edream.110203161858.1246"><vh>&lt;&lt; clear statistics &gt;&gt;</vh></v>
<v t="edream.110203161858.1247"><vh>&lt;&lt; print statistics &gt;&gt;</vh></v>
<v t="edream.110203161858.1248"><vh>&lt;&lt; handle each item in v's join list &gt;&gt;</vh></v>
</v>
</v>
<v t="edream.110203161858.1249"><vh>CheckVersion (Dave Hein)</vh></v>
<v t="edream.110203161858.1250"><vh>class Bunch</vh></v>
<v t="edream.110203161858.1251"><vh>Commands, Dialogs, Directives, &amp; Menus...</vh>
<v t="edream.110203161858.1252"><vh>Dialog utils...</vh>
<v t="edream.110203161858.1253"><vh>attachLeoIcon &amp; allies</vh>
<v t="edream.110203161858.1254"><vh>createLeoIcon</vh></v>
<v t="edream.110203161858.1255"><vh>onVisibility</vh></v>
</v>
<v t="edream.110203161858.1256"><vh>get_window_info</vh></v>
<v t="edream.110203161858.1257"><vh>center_dialog</vh></v>
<v t="edream.110203161858.1258"><vh>create_labeled_frame</vh></v>
</v>
<v t="edream.110203161858.1259"><vh>Directive utils...</vh>
<v t="edream.110203161858.1260"><vh>@language and @comment directives (leoUtils)</vh>
<v t="edream.110203161858.1261"><vh>set_delims_from_language</vh></v>
<v t="edream.110203161858.1262"><vh>set_delims_from_string</vh></v>
<v t="edream.110203161858.1263"><vh>set_language</vh></v>
</v>
<v t="edream.110203161858.1264"><vh>findReference</vh></v>
<v t="edream.110203161858.1265"><vh>get_directives_dict &amp; globalDirectiveList</vh>
<v t="edream.110203161858.1266"><vh>&lt;&lt; set dict for @ directives &gt;&gt;</vh></v>
<v t="edream.110203161858.1267"><vh>&lt;&lt; set dict["root"] for noweb * chunks &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1268"><vh>getOutputNewline</vh></v>
<v t="edream.110203161858.1269"><vh>scanAtEncodingDirective</vh></v>
<v t="edream.110203161858.1270"><vh>scanAtLineendingDirective</vh></v>
<v t="edream.110203161858.1271"><vh>scanAtPagewidthDirective</vh></v>
<v t="edream.110203161858.1272"><vh>scanAtTabwidthDirective</vh></v>
<v t="edream.110203161858.1273"><vh>scanDirectives (utils)</vh>
<v t="edream.110203161858.1274"><vh>&lt;&lt; Set local vars &gt;&gt;</vh></v>
<v t="edream.110203161858.1275"><vh>&lt;&lt; Test for @comment and @language &gt;&gt;</vh></v>
<v t="edream.110203161858.1276"><vh>&lt;&lt; Test for @encoding &gt;&gt;</vh></v>
<v t="edream.110203161858.1277"><vh>&lt;&lt; Test for @lineending &gt;&gt;</vh></v>
<v t="edream.110203161858.1278"><vh>&lt;&lt; Test for @pagewidth &gt;&gt;</vh></v>
<v t="edream.110203161858.1279"><vh>&lt;&lt; Test for @path &gt;&gt;</vh>
<v t="edream.110203161858.1280"><vh>&lt;&lt; compute relative path from s[k:] &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1281"><vh>&lt;&lt; Test for @tabwidth &gt;&gt;</vh></v>
<v t="edream.110203161858.1282"><vh>&lt;&lt; Test for @wrap and @nowrap &gt;&gt;</vh></v>
</v>
</v>
<v t="edream.110203161858.1283"><vh>Menus...</vh>
<v t="edream.110203161858.1284"><vh>canonicalizeMenuName &amp; cononicalizeTranslatedMenuName</vh></v>
<v t="edream.110203161858.1285"><vh>enableMenu &amp; disableMenu &amp; setMenuLabel</vh></v>
</v>
<v t="edream.110203161858.1286"><vh>openWithFileName (leoGlobals)</vh></v>
<v t="edream.110203161858.1287"><vh>wrap_lines</vh>
<v t="edream.110203161858.1288"><vh>&lt;&lt; place blank and word on the present line &gt;&gt;</vh></v>
<v t="edream.110203161858.1289"><vh>&lt;&lt; place word on a new line &gt;&gt;</vh></v>
</v>
</v>
<v t="edream.110203161858.1290"><vh>Debugging, Dumping, Timing, Tracing &amp; Sherlock</vh>
<v t="edream.110203161858.1291"><vh>Files &amp; Directories...</vh>
<v t="edream.110203161858.1292"><vh>create_temp_name</vh></v>
<v t="edream.110203161858.1293"><vh>ensure_extension</vh></v>
<v t="edream.110203161858.1294"><vh>getBaseDirectory</vh></v>
<v t="edream.110203161858.1295"><vh>makeAllNonExistentDirectories</vh></v>
<v t="edream.110203161858.1296"><vh>readlineForceUnixNewline (Steven P. Schaefer)</vh></v>
<v t="edream.110203161858.1297"><vh>redirecting stderr and stdout</vh>
<v t="edream.110203161858.1298"><vh>&lt;&lt; redirectClass methods &gt;&gt;</vh></v>
<v t="edream.110203161858.1299"><vh>&lt;&lt; define convenience methods for redirecting streams &gt;&gt;</vh></v>
<v t="edream.110203161858.1300"><vh>&lt;&lt; test code &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1301"><vh>sanitize_filename</vh></v>
<v t="edream.110203161858.1302"><vh>shortFileName</vh></v>
<v t="edream.110203161858.1303"><vh>update_file_if_changed</vh></v>
<v t="edream.110203161858.1304"><vh>utils_rename</vh></v>
</v>
<v t="edream.110203161858.1305"><vh>Sherlock...</vh>
<v t="edream.110203161858.1306"><vh>init_sherlock</vh></v>
<v t="edream.110203161858.1307"><vh>get_Sherlock_args</vh></v>
<v t="edream.110203161858.1308"><vh>init_trace</vh></v>
<v t="edream.110203161858.1309"><vh>trace</vh></v>
<v t="edream.110203161858.1310"><vh>trace_tag</vh></v>
</v>
<v t="edream.110203161858.1311"><vh>Statistics</vh>
<v t="edream.110203161858.1312"><vh>clear_stats</vh></v>
<v t="edream.110203161858.1313"><vh>print_stats</vh></v>
<v t="edream.110203161858.1314"><vh>stat</vh></v>
</v>
<v t="edream.110203161858.1315"><vh>Timing</vh></v>
<v t="edream.110203161858.1316"><vh>alert</vh></v>
<v t="edream.110203161858.1317"><vh>angleBrackets &amp; virtual_event_name</vh></v>
<v t="edream.110203161858.1318"><vh>callerName</vh></v>
<v t="edream.110203161858.1319"><vh>dump</vh></v>
<v t="edream.110203161858.1320"><vh>es_error</vh></v>
<v t="edream.110203161858.1321"><vh>es_event_exception</vh></v>
<v t="edream.110203161858.1322"><vh>es_exception</vh></v>
<v t="edream.110203161858.1323"><vh>file/module/plugin_date</vh></v>
<v t="edream.110203161858.1324"><vh>funcToMethod</vh></v>
<v t="edream.110203161858.1325"><vh>get_line &amp; get_line_after</vh></v>
<v t="edream.110203161858.1326"><vh>pause</vh></v>
<v t="edream.110203161858.1327"><vh>printBindings</vh></v>
<v t="edream.110203161858.1328"><vh>printGlobals</vh></v>
<v t="edream.110203161858.1329"><vh>printLeoModules</vh></v>
</v>
<v t="edream.110203161858.1330"><vh>executeScript</vh></v>
<v t="edream.110203161858.1331"><vh>Focus (leoGlobals)</vh>
<v t="edream.110203161858.1332"><vh>get_focus</vh></v>
<v t="edream.110203161858.1333"><vh>set_focus</vh></v>
<v t="edream.110203161858.1334"><vh>force_focus</vh></v>
</v>
<v t="edream.110203161858.1335"><vh>Garbage Collection</vh>
<v t="edream.110203161858.1336"><vh>clearAllIvars</vh></v>
<v t="edream.110203161858.1337"><vh>collectGarbage</vh>
<v t="edream.110203161858.1338"><vh>&lt;&lt; make a list of the new objects &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1339"><vh>printGc</vh></v>
<v t="edream.110203161858.1340"><vh>printGcRefs</vh></v>
</v>
<v t="edream.110203161858.1341"><vh>Hooks &amp; plugins</vh>
<v t="edream.110203161858.1342"><vh>enableIdleTimeHook, disableIdleTimeHook, idleTimeHookHandler</vh></v>
<v t="edream.110203161858.1343"><vh>doHook</vh></v>
<v t="edream.110203161858.1344"><vh>plugin_signon</vh></v>
</v>
<v t="edream.110203161858.1345"><vh>importFromPath</vh></v>
<v t="edream.110203161858.1346"><vh>Lists...</vh>
<v t="edream.110203161858.1347"><vh>appendToList</vh></v>
<v t="edream.110203161858.1348"><vh>flattenList</vh></v>
<v t="edream.110203161858.1349"><vh>listToString</vh></v>
</v>
<v t="edream.110203161858.1350"><vh>makeDict</vh></v>
<v t="edream.110203161858.1351"><vh>Most common functions</vh>
<v t="edream.110203161858.1352"><vh>app, setApp</vh></v>
<v t="edream.110203161858.1353"><vh>choose</vh></v>
<v t="edream.110203161858.1354"><vh>es, enl, ecnl</vh></v>
<v t="edream.110203161858.1355"><vh>top</vh></v>
<v t="edream.110203161858.1356"><vh>trace is defined below</vh></v>
<v t="edream.110203161858.1357"><vh>windows</vh></v>
</v>
<v t="edream.110203161858.1358"><vh>Scanning, selection &amp; whitespace...</vh>
<v t="edream.110203161858.1359" a=""><vh>getindex</vh></v>
<v t="edream.110203161858.1360"><vh>scanAtFileOptions</vh>
<v t="edream.110203161858.1361"><vh>&lt;&lt; scan another @file option &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1362"><vh>scanAtRootOptions</vh>
<v t="edream.110203161858.1363"><vh>&lt;&lt; scan another @root option &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1364"><vh>scanError</vh></v>
<v t="edream.110203161858.1365"><vh>scanf</vh></v>
<v t="edream.110203161858.1366"><vh>Scanners: calling scanError</vh>
<v t="edream.110203161858.1367"><vh>skip_block_comment</vh></v>
<v t="edream.110203161858.1368"><vh>skip_braces</vh></v>
<v t="edream.110203161858.1369"><vh>skip_php_braces (Dave Hein)</vh></v>
<v t="edream.110203161858.1370"><vh>skip_parens</vh></v>
<v t="edream.110203161858.1371"><vh>skip_pascal_begin_end</vh></v>
<v t="edream.110203161858.1372"><vh>skip_pascal_block_comment</vh></v>
<v t="edream.110203161858.1373"><vh>skip_pascal_string : called by tangle</vh></v>
<v t="edream.110203161858.1374"><vh>skip_heredoc_string : called by php import (Dave Hein)</vh></v>
<v t="edream.110203161858.1375"><vh>skip_pp_directive</vh></v>
<v t="edream.110203161858.1376"><vh>skip_pp_if</vh></v>
<v t="edream.110203161858.1377"><vh>skip_pp_part</vh></v>
<v t="edream.110203161858.1378"><vh>skip_python_string</vh></v>
<v t="edream.110203161858.1379"><vh>skip_string : called by tangle</vh></v>
<v t="edream.110203161858.1380"><vh>skip_to_semicolon</vh></v>
<v t="edream.110203161858.1381"><vh>skip_typedef</vh></v>
</v>
<v t="edream.110203161858.1382"><vh>Scanners: no error messages</vh>
<v t="edream.110203161858.1383"><vh>escaped</vh></v>
<v t="edream.110203161858.1384"><vh>find_line_start</vh></v>
<v t="edream.110203161858.1385"><vh>find_on_line</vh></v>
<v t="edream.110203161858.1386"><vh>is_c_id</vh></v>
<v t="edream.110203161858.1387"><vh>is_nl</vh></v>
<v t="edream.110203161858.1388"><vh>is_special</vh></v>
<v t="edream.110203161858.1389"><vh>is_ws &amp; is_ws_or_nl</vh></v>
<v t="edream.110203161858.1390"><vh>match</vh></v>
<v t="edream.110203161858.1391"><vh>match_c_word</vh></v>
<v t="edream.110203161858.1392"><vh>match_ignoring_case</vh></v>
<v t="edream.110203161858.1393"><vh>match_word</vh></v>
<v t="edream.110203161858.1394"><vh>skip_blank_lines</vh></v>
<v t="edream.110203161858.1395"><vh>skip_c_id</vh></v>
<v t="edream.110203161858.1396"><vh>skip_line, skip_to_end_of_line</vh></v>
<v t="edream.110203161858.1397"><vh>skip_long</vh></v>
<v t="edream.110203161858.1398"><vh>skip_matching_delims</vh></v>
<v t="edream.110203161858.1399"><vh>skip_nl</vh></v>
<v t="edream.110203161858.1400"><vh>skip_non_ws</vh></v>
<v t="edream.110203161858.1401"><vh>skip_pascal_braces</vh></v>
<v t="edream.110203161858.1402"><vh>skip_to_char</vh></v>
<v t="edream.110203161858.1403"><vh>skip_ws, skip_ws_and_nl</vh></v>
</v>
<v t="edream.110203161858.1404"><vh>Tk.Text selection (utils)</vh>
<v t="edream.110203161858.1405"><vh>bound_paragraph</vh></v>
<v t="edream.110203161858.1359" a=""><vh>getindex</vh></v>
<v t="edream.110203161858.1406"><vh>getSelectedText</vh></v>
<v t="edream.110203161858.1407"><vh>getTextSelection</vh></v>
<v t="edream.110203161858.1408"><vh>setTextSelection</vh></v>
</v>
<v t="edream.110203161858.1409"><vh>Whitespace...</vh>
<v t="edream.110203161858.1410"><vh>computeLeadingWhitespace</vh></v>
<v t="edream.110203161858.1411"><vh>computeWidth</vh></v>
<v t="edream.110203161858.1412"><vh>get_leading_ws</vh></v>
<v t="edream.110203161858.1413"><vh>optimizeLeadingWhitespace</vh></v>
<v t="edream.110203161858.1414"><vh>removeLeadingWhitespace</vh></v>
<v t="edream.110203161858.1415"><vh>removeTrailingWs</vh></v>
<v t="edream.110203161858.1416"><vh>skip_leading_ws</vh></v>
<v t="edream.110203161858.1417"><vh>skip_leading_ws_with_indent</vh></v>
</v>
</v>
<v t="edream.110203161858.1418"><vh>Unicode utils...</vh>
<v t="edream.110203161858.1419"><vh>isValidEncoding</vh></v>
<v t="edream.110203161858.1420"><vh>reportBadChars</vh></v>
<v t="edream.110203161858.1421"><vh>toUnicode &amp; toEncodedString</vh></v>
<v t="edream.110203161858.1422"><vh>getpreferredencoding from 2.3a2</vh>
<v t="edream.110203161858.1423"><vh>&lt;&lt; define getpreferredencoding using _locale &gt;&gt;</vh></v>
<v t="edream.110203161858.1424"><vh>&lt;&lt; define getpreferredencoding for *nix &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="edream.110203161858.1425" tnodeList="edream.110203161858.1425,edream.110203161858.1427,edream.110203161858.1428,edream.110203161858.1426,edream.110203161858.1430,edream.110203161858.1431,edream.110203161858.1432,edream.110203161858.1433,edream.110203161858.1435,edream.110203161858.1436,edream.110203161858.1437,edream.110203161858.1438,edream.110203161858.1439,edream.110203161858.1440,edream.110203161858.1441,edream.110203161858.1442,edream.110203161858.1443,edream.110203161858.1445,edream.110203161858.1446,edream.110203161858.1447,edream.110203161858.1448,edream.110203161858.1449,edream.110203161858.1450,edream.110203161858.1451,edream.110203161858.1452,edream.110203161858.1453,edream.110203161858.1454,edream.110203161858.1455,edream.110203161858.1457,edream.110203161858.1458,edream.110203161858.1459,edream.110203161858.1460,edream.110203161858.1463,edream.110203161858.1464,edream.110203161858.1465,edream.110203161858.1466,edream.110203161858.1467,edream.110203161858.1467,edream.110203161858.1468,edream.110203161858.1469,edream.110203161858.1470,edream.110203161858.1471,edream.110203161858.1472,edream.110203161858.1473,edream.110203161858.1474,edream.110203161858.1475,edream.110203161858.1476,edream.110203161858.1477,edream.110203161858.1478,edream.110203161858.1479,edream.110203161858.1480,edream.110203161858.1481,edream.110203161858.1483,edream.110203161858.1482,edream.110203161858.1484,edream.110203161858.1485,edream.110203161858.1486,edream.110203161858.1487,edream.110203161858.1488,edream.110203161858.1497,edream.110203161858.1498,edream.110203161858.1499,edream.110203161858.1500,edream.110203161858.1489,edream.110203161858.1490,edream.110203161858.1491,edream.110203161858.1492,edream.110203161858.1493,edream.110203161858.1494,edream.110203161858.1495,edream.110203161858.1496,edream.110203161858.1501,edream.110203161858.1502,edream.110203161858.1503,edream.110203161858.1509,edream.110203161858.1510,edream.110203161858.1511,edream.110203161858.1512,edream.110203161858.1504,edream.110203161858.1505,edream.110203161858.1506,edream.110203161858.1507,edream.110203161858.1508,edream.110203161858.1501,edream.110203161858.1513,edream.110203161858.1514,edream.110203161858.1517,edream.110203161858.1518,edream.110203161858.1519,edream.110203161858.1515,edream.110203161858.1520,edream.110203161858.1516,edream.110203161858.1501,edream.110203161858.1522,edream.110203161858.1523,edream.110203161858.1524,edream.110203161858.1525,edream.110203161858.1526,edream.110203161858.1527,edream.110203161858.1526,edream.110203161858.1527,edream.110203161858.1528,edream.110203161858.1529,edream.110203161858.1530,edream.110203161858.1530,edream.110203161858.1531,edream.110203161858.1532,edream.110203161858.1533,edream.110203161858.1534,edream.110203161858.1535,edream.110203161858.1536,edream.110203161858.1537,edream.110203161858.1538,edream.110203161858.1539,edream.110203161858.1540,edream.110203161858.1541,edream.110203161858.1542,edream.110203161858.1543,edream.110203161858.1545,edream.110203161858.1546,edream.110203161858.1547,edream.110203161858.1548,edream.110203161858.1549,edream.110203161858.1550,edream.110203161858.1551,edream.110203161858.1552,edream.110203161858.1553,edream.110203161858.1554,edream.110203161858.1555,edream.110203161858.1556,edream.110203161858.1557,edream.110203161858.1558,edream.110203161858.1559"><vh>@file c:\prog\test\leoImport.py</vh>
<v t="edream.110203161858.1426"><vh>import.__init__</vh></v>
<v t="edream.110203161858.1427"><vh>&lt;&lt; scripts &gt;&gt;</vh>
<v t="edream.110203161858.1428"><vh>importFiles</vh></v>
</v>
<v t="edream.110203161858.1429"><vh>Import</vh>
<v t="edream.110203161858.1430"><vh>createOutline</vh>
<v t="edream.110203161858.1431"><vh>&lt;&lt; Read file into s &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1432"><vh>importFilesCommand</vh>
<v t="edream.110203161858.1433"><vh>&lt;&lt; Create a parent for two files having a common prefix &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1434"><vh>importFlattenedOutline &amp; allies</vh>
<v t="edream.110203161858.1435"><vh>convertMoreString/StringsToOutlineAfter</vh>
<v t="edream.110203161858.1436"><vh>&lt;&lt; Link a new vnode v into the outline &gt;&gt;</vh></v>
<v t="edream.110203161858.1437"><vh>&lt;&lt; Set the headline string, skipping over the leader &gt;&gt;</vh></v>
<v t="edream.110203161858.1438"><vh>&lt;&lt; Count the number of following body lines &gt;&gt;</vh></v>
<v t="edream.110203161858.1439"><vh>&lt;&lt; Add the lines to the body text of v &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1440"><vh>importFlattenedOutline</vh>
<v t="edream.110203161858.1441"><vh>&lt;&lt; Read the file into array &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1442"><vh>moreHeadlineLevel</vh></v>
<v t="edream.110203161858.1443"><vh>stringIs/stringsAreValidMoreFile</vh></v>
</v>
<v t="edream.110203161858.1444"><vh>importWebCommand &amp; allies</vh>
<v t="edream.110203161858.1445"><vh>createOutlineFromWeb</vh></v>
<v t="edream.110203161858.1446"><vh>importWebCommand</vh></v>
<v t="edream.110203161858.1447"><vh>findFunctionDef</vh></v>
<v t="edream.110203161858.1448"><vh>scanBodyForHeadline</vh>
<v t="edream.110203161858.1449"><vh>&lt;&lt; scan cweb body for headline &gt;&gt;</vh></v>
<v t="edream.110203161858.1450"><vh>&lt;&lt; scan noweb body for headline &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1451"><vh>scanWebFile (handles limbo)</vh>
<v t="edream.110203161858.1452"><vh>&lt;&lt; Create a symbol table of all section names &gt;&gt;</vh></v>
<v t="edream.110203161858.1453"><vh>&lt;&lt; Create nodes for limbo text and the root section &gt;&gt;</vh></v>
<v t="edream.110203161858.1454"><vh>&lt;&lt; Create a node for the next module &gt;&gt;</vh>
<v t="edream.110203161858.1455"><vh>&lt;&lt; Handle cweb @d, @f, @c and @p directives &gt;&gt;</vh></v>
</v>
</v>
<v t="edream.110203161858.1456"><vh>Symbol table</vh>
<v t="edream.110203161858.1457"><vh>cstCanonicalize</vh></v>
<v t="edream.110203161858.1458"><vh>cstDump</vh></v>
<v t="edream.110203161858.1459"><vh>cstEnter</vh></v>
<v t="edream.110203161858.1460"><vh>cstLookup</vh></v>
</v>
</v>
<v t="edream.110203161858.1461"><vh>Scanners for createOutline</vh>
<v t="edream.110203161858.1462"><vh>Python scanners</vh>
<v t="edream.110203161858.1463"><vh>scanPythonClass</vh>
<v t="edream.110203161858.1464"><vh>&lt;&lt; set classname and headline, or return i &gt;&gt;</vh></v>
<v t="edream.110203161858.1465"><vh>&lt;&lt; create class_vnode  &gt;&gt;</vh></v>
<v t="edream.110203161858.1466"><vh>&lt;&lt; create nodes for all defs of the class &gt;&gt;</vh>
<v t="edream.110203161858.1467"><vh>&lt;&lt; create parent_vnode &gt;&gt;</vh></v>
</v>
</v>
<v t="edream.110203161858.1468"><vh>scanPythonDef</vh>
<v t="edream.110203161858.1469"><vh>&lt;&lt; set headline or return i &gt;&gt;</vh></v>
<v t="edream.110203161858.1470"><vh>&lt;&lt; skip the Python def &gt;&gt;</vh></v>
<v t="edream.110203161858.1471"><vh>&lt;&lt; Create def node &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1472"><vh>scanPythonDecls</vh>
<v t="edream.110203161858.1473"><vh>&lt;&lt; break on def or class &gt;&gt;</vh></v>
<v t="edream.110203161858.1474"><vh>&lt;&lt; Create a child node for declarations &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1475"><vh>scanPythonText</vh>
<v t="edream.110203161858.1476"><vh>&lt;&lt; handle possible Python function or class &gt;&gt;</vh></v>
<v t="edream.110203161858.1477"><vh>&lt;&lt; Append a reference to the methods of this file &gt;&gt;</vh></v>
<v t="edream.110203161858.1478"><vh>&lt;&lt; Append any unused python text to the parent's body text &gt;&gt;</vh></v>
</v>
</v>
<v t="edream.110203161858.1479"><vh>scanPHPText (Dave Hein)</vh>
<v t="edream.110203161858.1480"><vh>&lt;&lt; Append file if not pure PHP &gt;&gt;</vh></v>
<v t="edream.110203161858.1481"><vh>&lt;&lt; define scanPHPText vars &gt;&gt;</vh></v>
<v t="edream.110203161858.1482"><vh>&lt;&lt; handle possible heredoc string &gt;&gt;</vh></v>
<v t="edream.110203161858.1483"><vh>&lt;&lt; handle possible PHP comments &gt;&gt;</vh></v>
<v t="edream.110203161858.1484"><vh>&lt;&lt; handle possible class or function &gt;&gt;</vh></v>
<v t="edream.110203161858.1485"><vh>&lt;&lt; handle end of class &gt;&gt;</vh></v>
<v t="edream.110203161858.1486"><vh>&lt;&lt; Append any unused text to the parent's body text &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1487"><vh>scanCText</vh>
<v t="edream.110203161858.1488"><vh>&lt;&lt; define scanCText vars &gt;&gt;</vh></v>
<v t="edream.110203161858.1489"><vh>&lt;&lt; handle # sign &gt;&gt;</vh>
<v t="edream.110203161858.1490"><vh>&lt;&lt; create a child node for all #include statements &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1491"><vh>&lt;&lt; handle open curly bracket in C &gt;&gt; (scans function)</vh>
<v t="edream.110203161858.1492"><vh>&lt;&lt; create a declaration node &gt;&gt;</vh></v>
<v t="edream.110203161858.1493"><vh>&lt;&lt; append C function/method reference to parent node &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1494"><vh>&lt;&lt; handle id, class, typedef, struct, union, namespace &gt;&gt;</vh>
<v t="edream.110203161858.1495"><vh>&lt;&lt; create children for the namespace &gt;&gt;</vh></v>
<v t="edream.110203161858.1496"><vh>&lt;&lt; test for operator keyword &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1497"><vh>&lt;&lt; handle possible C comments &gt;&gt;</vh></v>
<v t="edream.110203161858.1498"><vh>&lt;&lt; handle equal sign in C&gt;&gt;</vh></v>
<v t="edream.110203161858.1499"><vh>&lt;&lt; handle open paren in C &gt;&gt;</vh></v>
<v t="edream.110203161858.1500"><vh>&lt;&lt; handle semicolon in C &gt;&gt;</vh></v>
<v t="edream.110203161858.1501" a=""><vh>&lt;&lt; Append any unused text to the parent's body text &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1502"><vh>scanJavaText</vh>
<v t="edream.110203161858.1503"><vh>&lt;&lt; define scanJavaText vars &gt;&gt;</vh></v>
<v t="edream.110203161858.1504"><vh>&lt;&lt; handle open curly bracket in Java &gt;&gt;</vh>
<v t="edream.110203161858.1505"><vh>&lt;&lt; create a Java declaration node &gt;&gt;</vh></v>
<v t="edream.110203161858.1506"><vh>&lt;&lt; append Java method reference to parent node &gt;&gt;</vh></v>
<v t="edream.110203161858.1507"><vh>&lt;&lt; recursively scan the text &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1508"><vh>&lt;&lt; skip and remember the Java id &gt;&gt;</vh></v>
<v t="edream.110203161858.1509"><vh>&lt;&lt; handle possible Java comments &gt;&gt;</vh></v>
<v t="edream.110203161858.1510"><vh>&lt;&lt; handle equal sign in Java &gt;&gt;</vh></v>
<v t="edream.110203161858.1511"><vh>&lt;&lt; handle open paren in Java &gt;&gt;</vh></v>
<v t="edream.110203161858.1512"><vh>&lt;&lt; handle semicolon in Java &gt;&gt;</vh></v>
<v t="edream.110203161858.1501" a=""><vh>&lt;&lt; Append any unused text to the parent's body text &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1513"><vh>scanPascalText</vh>
<v t="edream.110203161858.1514"><vh>&lt;&lt; handle possible Pascal function &gt;&gt;</vh>
<v t="edream.110203161858.1515"><vh>&lt;&lt; create a child node for leading declarations &gt;&gt;</vh></v>
<v t="edream.110203161858.1516"><vh>&lt;&lt; create a child node for the function &gt;&gt;</vh></v>
<v t="edream.110203161858.1517"><vh>&lt;&lt; remember the function name, or continue &gt;&gt;</vh></v>
<v t="edream.110203161858.1518"><vh>&lt;&lt; skip the function definition, or continue &gt;&gt;</vh>
<v t="edream.110203161858.1519"><vh>&lt;&lt; skip past the semicolon &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1520"><vh>&lt;&lt; append noweb method reference to the parent node &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1501" a=""><vh>&lt;&lt; Append any unused text to the parent's body text &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="edream.110203161858.1521"><vh>Export</vh>
<v t="edream.110203161858.1522"><vh>convertCodePartToWeb</vh>
<v t="edream.110203161858.1523"><vh>&lt;&lt; put v's headline ref in head_ref&gt;&gt;</vh></v>
<v t="edream.110203161858.1524"><vh>&lt;&lt; put name following @root or @file in file_name &gt;&gt;</vh>
<v t="edream.110203161858.1525"><vh>&lt;&lt; Set file_name &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1526"><vh>&lt;&lt; append ref to file_name &gt;&gt;</vh></v>
<v t="edream.110203161858.1527"><vh>&lt;&lt; append head_ref &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1528"><vh>convertDocPartToWeb (handle @ %def)</vh></v>
<v t="edream.110203161858.1529"><vh>convertVnodeToWeb</vh>
<v t="edream.110203161858.1530"><vh>&lt;&lt; Supply a missing doc part &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1531"><vh>copyPart</vh></v>
<v t="edream.110203161858.1532"><vh>exportHeadlines</vh></v>
<v t="edream.110203161858.1533"><vh>flattenOutline</vh></v>
<v t="edream.110203161858.1534"><vh>outlineToWeb</vh></v>
<v t="edream.110203161858.1535"><vh>removeSentinelsCommand</vh>
<v t="edream.110203161858.1536"><vh>&lt;&lt; Read file into s &gt;&gt;</vh></v>
<v t="edream.110203161858.1537"><vh>&lt;&lt; set delims from the header line &gt;&gt;</vh></v>
<v t="edream.110203161858.1538"><vh>&lt;&lt; Write s into newFileName &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1539"><vh>removeSentinelLines</vh>
<v t="edream.110203161858.1540"><vh>&lt;&lt; handle possible sentinel &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1541"><vh>weave</vh>
<v t="edream.110203161858.1542"><vh>&lt;&lt; open filename to f, or return &gt;&gt;</vh></v>
<v t="edream.110203161858.1543"><vh>&lt;&lt; write the context of v to f &gt;&gt;</vh></v>
</v>
</v>
<v t="edream.110203161858.1544"><vh>Utilities</vh>
<v t="edream.110203161858.1545"><vh>createHeadline</vh></v>
<v t="edream.110203161858.1546"><vh>error</vh></v>
<v t="edream.110203161858.1547"><vh>getLeadingIndent</vh></v>
<v t="edream.110203161858.1548"><vh>isDocStart and isModuleStart</vh></v>
<v t="edream.110203161858.1549"><vh>massageBody</vh></v>
<v t="edream.110203161858.1550"><vh>massageComment</vh></v>
<v t="edream.110203161858.1551"><vh>massageWebBody</vh>
<v t="edream.110203161858.1552"><vh>&lt;&lt; Remove most newlines from @space and @* sections &gt;&gt;</vh></v>
<v t="edream.110203161858.1553"><vh>&lt;&lt; Replace abbreviated names with full names &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1554"><vh>setEncoding</vh></v>
<v t="edream.110203161858.1555"><vh>skipLeadingComments</vh>
<v t="edream.110203161858.1556"><vh>&lt;&lt; scan for C-style comments &gt;&gt;</vh></v>
<v t="edream.110203161858.1557"><vh>&lt;&lt; scan for Pascal comments &gt;&gt;</vh></v>
<v t="edream.110203161858.1558"><vh>&lt;&lt; scan for Python comments &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1559"><vh>undentBody</vh></v>
</v>
</v>
<v t="edream.110203161858.1560" tnodeList="edream.110203161858.1560,edream.110203161858.1562,edream.110203161858.1561,edream.110203161858.1563,edream.110203161858.1564,edream.110203161858.1565,edream.110203161858.1567,edream.110203161858.1568,edream.110203161858.1570,edream.110203161858.1571,edream.110203161858.1572,edream.110203161858.1575,edream.110203161858.1576,edream.110203161858.1577,edream.110203161858.1579,edream.110203161858.1580,edream.110203161858.1581,edream.110203161858.1582,edream.110203161858.1583,edream.110203161858.1584,edream.110203161858.1585,edream.110203161858.1586,edream.110203161858.1587,edream.110203161858.1588,edream.110203161858.1590,edream.110203161858.1591,edream.110203161858.1592,edream.110203161858.1593,edream.110203161858.1594,edream.110203161858.1595,edream.110203161858.1596,edream.110203161858.1597,edream.110203161858.1598,edream.110203161858.1599,edream.110203161858.1600,edream.110203161858.1601,edream.110203161858.1602,edream.110203161858.1603,edream.110203161858.1604,edream.110203161858.1606,edream.110203161858.1607,edream.110203161858.1608,edream.110203161858.1609,edream.110203161858.1610,edream.110203161858.1611,edream.110203161858.1612,edream.110203161858.1614,edream.110203161858.1615,edream.110203161858.1616,edream.110203161858.1619,edream.110203161858.1620,edream.110203161858.1621,edream.110203161858.1622,edream.110203161858.1623,edream.110203161858.1624,edream.110203161858.1626,edream.110203161858.1627,edream.110203161858.1628,edream.110203161858.1629,edream.110203161858.1630,edream.110203161858.1631,edream.110203161858.1632,edream.110203161858.1633,edream.110203161858.1634,edream.110203161858.1635,edream.110203161858.1636,edream.110203161858.1637,edream.110203161858.1638,edream.110203161858.1639,edream.110203161858.1640,edream.110203161858.1641,edream.110203161858.1642,edream.110203161858.1643,edream.110203161858.1646,edream.110203161858.1647,edream.110203161858.1648,edream.110203161858.1649,edream.110203161858.1650,edream.110203161858.1652,edream.110203161858.1653,edream.110203161858.1654,edream.110203161858.1655,edream.110203161858.1656,edream.110203161858.1657,edream.110203161858.1658,edream.110203161858.1659,edream.110203161858.1660,edream.110203161858.1661,edream.110203161858.1662,edream.110203161858.1663,edream.110203161858.1664,edream.110203161858.1665,edream.110203161858.1666,edream.110203161858.1667,edream.110203161858.1668,edream.110203161858.1669,edream.110203161858.1670,edream.110203161858.1671,edream.110203161858.1672,edream.110203161858.1674,edream.110203161858.1675,edream.110203161858.1676,edream.110203161858.1677,edream.110203161858.1678,edream.110203161858.1679,edream.110203161858.1680,edream.110203161858.1681,edream.110203161858.1682,edream.110203161858.1683,edream.110203161858.1686,edream.110203161858.1687,edream.110203161858.1688,edream.110203161858.1689,edream.110203161858.1690,edream.110203161858.1691,edream.110203161858.1692,edream.110203161858.1693,edream.110203161858.1694,edream.110203161858.1695,edream.110203161858.1696,edream.110203161858.1697,edream.110203161858.1698,edream.110203161858.1700,edream.110203161858.1701,edream.110203161858.1702,edream.110203161858.1703,edream.110203161858.1704,edream.110203161858.1705,edream.110203161858.1706,edream.110203161858.1707,edream.110203161858.1708,edream.110203161858.1709,edream.110203161858.1710,edream.110203161858.1711,edream.110203161858.1712,edream.110203161858.1713,edream.110203161858.1714,edream.110203161858.1715,edream.110203161858.1716,edream.110203161858.1717,edream.110203161858.1718,edream.110203161858.1719,edream.110203161858.1720,edream.110203161858.1721,edream.110203161858.1722,edream.110203161858.1723,edream.110203161858.1724,edream.110203161858.1725"><vh>@file c:\prog\test\leoNodes.py</vh>
<v t="edream.110203161858.1561"><vh>&lt;&lt; About clones &gt;&gt;</vh></v>
<v t="edream.110203161858.1562"><vh>&lt;&lt; About the vnode and tnode classes &gt;&gt;</vh></v>
<v t="edream.110203161858.1563"><vh>class tnode</vh>
<v t="edream.110203161858.1564"><vh>&lt;&lt; tnode constants &gt;&gt;</vh></v>
<v t="edream.110203161858.1565"><vh>t.__init__</vh></v>
<v t="edream.110203161858.1566"><vh>Getters</vh>
<v t="edream.110203161858.1567"><vh>hasBody</vh></v>
<v t="edream.110203161858.1568"><vh>loadBodyPaneFromTnode</vh></v>
<v t="edream.110203161858.1569"><vh>Status bits</vh>
<v t="edream.110203161858.1570"><vh>isDirty</vh></v>
<v t="edream.110203161858.1571"><vh>isRichTextBit</vh></v>
<v t="edream.110203161858.1572"><vh>isVisited</vh></v>
</v>
</v>
<v t="edream.110203161858.1573"><vh>Setters</vh>
<v t="edream.110203161858.1574"><vh>Setting body text</vh>
<v t="edream.110203161858.1575"><vh>saveBodyPaneToTnode</vh></v>
<v t="edream.110203161858.1576"><vh>setTnodeText</vh></v>
<v t="edream.110203161858.1577"><vh>setSelection</vh></v>
</v>
<v t="edream.110203161858.1578"><vh>Status bits</vh>
<v t="edream.110203161858.1579"><vh>clearDirty</vh></v>
<v t="edream.110203161858.1580"><vh>clearRichTextBit</vh></v>
<v t="edream.110203161858.1581"><vh>clearVisited</vh></v>
<v t="edream.110203161858.1582"><vh>setDirty</vh></v>
<v t="edream.110203161858.1583"><vh>setRichTextBit</vh></v>
<v t="edream.110203161858.1584"><vh>setVisited</vh></v>
</v>
<v t="edream.110203161858.1585"><vh>setCloneIndex</vh></v>
<v t="edream.110203161858.1586"><vh>setFileIndex</vh></v>
</v>
</v>
<v t="edream.110203161858.1587"><vh>class vnode</vh>
<v t="edream.110203161858.1588"><vh>&lt;&lt; vnode constants &gt;&gt;  ### Warning: changes meaning of visitedBit</vh></v>
<v t="edream.110203161858.1589"><vh>Birth &amp; death</vh>
<v t="edream.110203161858.1590"><vh>v.__cmp__ (not used)</vh></v>
<v t="edream.110203161858.1591"><vh>v.__init__</vh>
<v t="edream.110203161858.1592"><vh>&lt;&lt; initialize vnode data members &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1593"><vh>v.__repr__ &amp; v.__str__</vh></v>
</v>
<v t="edream.110203161858.1594"><vh>v.Callbacks (handles event hooks)</vh>
<v t="edream.110203161858.1595"><vh>OnBoxClick</vh></v>
<v t="edream.110203161858.1596"><vh>OnDrag</vh></v>
<v t="edream.110203161858.1597"><vh>v.OnEndDrag</vh></v>
<v t="edream.110203161858.1598"><vh>v.OnHeadlineClick &amp; OnHeadlineRightClick</vh></v>
<v t="edream.110203161858.1599"><vh>OnHeadlineKey</vh></v>
<v t="edream.110203161858.1600"><vh>OnHyperLinkControlClick</vh></v>
<v t="edream.110203161858.1601"><vh>OnHyperLinkEnter</vh></v>
<v t="edream.110203161858.1602"><vh>OnHyperLinkLeave</vh></v>
<v t="edream.110203161858.1603"><vh>OnIconClick &amp; OnIconRightClick</vh></v>
<v t="edream.110203161858.1604"><vh>OnIconDoubleClick</vh></v>
</v>
<v t="edream.110203161858.1605"><vh>Comparisons (vnode)</vh>
<v t="edream.110203161858.1606"><vh>afterHeadlineMatch</vh></v>
<v t="edream.110203161858.1607"><vh>at/../NodeName</vh></v>
<v t="edream.110203161858.1608"><vh>isAt/../Node</vh></v>
<v t="edream.110203161858.1609"><vh>isAnyAtFileNode &amp; isAnyAtFileNodeName</vh></v>
<v t="edream.110203161858.1610"><vh>isAtIgnoreNode</vh></v>
<v t="edream.110203161858.1611"><vh>isAtOthersNode</vh></v>
<v t="edream.110203161858.1612"><vh>matchHeadline</vh></v>
</v>
<v t="edream.110203161858.1613"><vh>File Conversion (vnode)</vh>
<v t="edream.110203161858.1614"><vh>convertTreeToString</vh></v>
<v t="edream.110203161858.1615"><vh>moreHead</vh></v>
<v t="edream.110203161858.1616"><vh>v.moreBody</vh></v>
</v>
<v t="edream.110203161858.1617"><vh>Getters</vh>
<v t="edream.110203161858.1618"><vh>Children</vh>
<v t="edream.110203161858.1619"><vh>childIndex</vh></v>
<v t="edream.110203161858.1620"><vh>firstChild</vh></v>
<v t="edream.110203161858.1621"><vh>hasChildren</vh></v>
<v t="edream.110203161858.1622"><vh>lastChild</vh></v>
<v t="edream.110203161858.1623"><vh>nthChild</vh></v>
<v t="edream.110203161858.1624"><vh>numberOfChildren (n)</vh></v>
</v>
<v t="edream.110203161858.1625"><vh>Status Bits</vh>
<v t="edream.110203161858.1626"><vh>isCloned</vh></v>
<v t="edream.110203161858.1627"><vh>isDirty</vh></v>
<v t="edream.110203161858.1628"><vh>isExpanded</vh></v>
<v t="edream.110203161858.1629"><vh>isMarked</vh></v>
<v t="edream.110203161858.1630"><vh>isOrphan</vh></v>
<v t="edream.110203161858.1631"><vh>isSelected</vh></v>
<v t="edream.110203161858.1632"><vh>isTopBitSet</vh></v>
<v t="edream.110203161858.1633"><vh>isVisible</vh></v>
<v t="edream.110203161858.1634"><vh>isVisited</vh></v>
<v t="edream.110203161858.1635"><vh>status</vh></v>
</v>
<v t="edream.110203161858.1636"><vh>bodyString</vh></v>
<v t="edream.110203161858.1637"><vh>currentVnode (vnode)</vh></v>
<v t="edream.110203161858.1638"><vh>edit_text</vh></v>
<v t="edream.110203161858.1639"><vh>findRoot</vh></v>
<v t="edream.110203161858.1640"><vh>headString &amp; cleanHeadString</vh></v>
<v t="edream.110203161858.1641"><vh>isAncestorOf</vh></v>
<v t="edream.110203161858.1642"><vh>isRoot</vh></v>
<v t="edream.110203161858.1643"><vh>v.exists</vh></v>
</v>
<v t="edream.110203161858.1644"><vh>Setters</vh>
<v t="edream.110203161858.1645"><vh>Head and body text</vh>
<v t="edream.110203161858.1646"><vh>appendStringToBody</vh></v>
<v t="edream.110203161858.1647"><vh>setBodyStringOrPane &amp; setBodyTextOrPane</vh></v>
<v t="edream.110203161858.1648"><vh>setHeadString &amp; initHeadString</vh></v>
<v t="edream.110203161858.1649"><vh>setHeadStringOrHeadline</vh></v>
</v>
<v t="edream.110203161858.1650"><vh>computeIcon &amp; setIcon</vh></v>
<v t="edream.110203161858.1651"><vh>Status bits</vh>
<v t="edream.110203161858.1652"><vh>clearAllVisited</vh></v>
<v t="edream.110203161858.1653"><vh>clearAllVisitedInTree</vh></v>
<v t="edream.110203161858.1654"><vh>clearClonedBit</vh></v>
<v t="edream.110203161858.1655"><vh>clearDirty &amp; clearDirtyJoined (redundant code)</vh></v>
<v t="edream.110203161858.1656"><vh>clearMarked</vh></v>
<v t="edream.110203161858.1657"><vh>clearOrphan</vh></v>
<v t="edream.110203161858.1658"><vh>clearVisited</vh></v>
<v t="edream.110203161858.1659"><vh>clearVisitedInTree</vh></v>
<v t="edream.110203161858.1660"><vh>contract &amp; expand &amp; initExpandedBit</vh></v>
<v t="edream.110203161858.1661"><vh>initStatus</vh></v>
<v t="edream.110203161858.1662"><vh>setAncestorsOfClonedNodesInTreeDirty</vh></v>
<v t="edream.110203161858.1663"><vh>setAncestorAtFileNodeDirty</vh></v>
<v t="edream.110203161858.1664"><vh>setClonedBit &amp; initClonedBit</vh></v>
<v t="edream.110203161858.1665"><vh>setDirty, setDirtyDeleted &amp; initDirtyBit (redundant code)</vh></v>
<v t="edream.110203161858.1666"><vh>setMarked &amp; initMarkedBit</vh></v>
<v t="edream.110203161858.1667"><vh>setOrphan</vh></v>
<v t="edream.110203161858.1668"><vh>setSelected (vnode, new)</vh></v>
<v t="edream.110203161858.1669"><vh>setVisited</vh></v>
</v>
<v t="edream.110203161858.1670"><vh>setSelection</vh></v>
<v t="edream.110203161858.1671"><vh>setT</vh></v>
<v t="edream.110203161858.1672"><vh>trimTrailingLines</vh></v>
</v>
<v t="edream.110203161858.1673"><vh>Tree Traversal (vnode)</vh>
<v t="edream.110203161858.1674"><vh>back</vh></v>
<v t="edream.110203161858.1675"><vh>lastNode</vh></v>
<v t="edream.110203161858.1676"><vh>level</vh></v>
<v t="edream.110203161858.1677"><vh>next</vh></v>
<v t="edream.110203161858.1678"><vh>nodeAfterTree</vh></v>
<v t="edream.110203161858.1679"><vh>parent</vh></v>
<v t="edream.110203161858.1680"><vh>threadBack</vh></v>
<v t="edream.110203161858.1681"><vh>threadNext</vh></v>
<v t="edream.110203161858.1682"><vh>visBack</vh></v>
<v t="edream.110203161858.1683"><vh>visNext</vh></v>
</v>
<v t="edream.110203161858.1684"><vh>Moving, Inserting, Deleting, Cloning, Sorting (vnode)</vh>
<v t="edream.110203161858.1685"><vh>Entry Points (vnode)</vh>
<v t="edream.110203161858.1686"><vh>doDelete</vh></v>
<v t="edream.110203161858.1687"><vh>insertAfter</vh></v>
<v t="edream.110203161858.1688"><vh>insertAsLastChild</vh></v>
<v t="edream.110203161858.1689"><vh>insertAsNthChild</vh></v>
<v t="edream.110203161858.1690"><vh>moveToRoot</vh></v>
<v t="edream.110203161858.1691"><vh>restoreOutlineFromDVnodes (test)</vh></v>
<v t="edream.110203161858.1692"><vh>v.clone</vh></v>
<v t="edream.110203161858.1693"><vh>v.linkAfter</vh></v>
<v t="edream.110203161858.1694"><vh>v.linkAsNthChild</vh></v>
<v t="edream.110203161858.1695"><vh>v.linkAsRoot</vh></v>
<v t="edream.110203161858.1696"><vh>v.moveAfter</vh></v>
<v t="edream.110203161858.1697"><vh>v.moveToNthChildOf</vh></v>
<v t="edream.110203161858.1698"><vh>v.sortChildren</vh></v>
</v>
<v t="edream.110203161858.1699"><vh>Helper functions</vh>
<v t="edream.110203161858.1700"><vh>v.addTreeToJoinLists (new in 3.12 beta 2)</vh></v>
<v t="edream.110203161858.1701"><vh>v.cloneTree</vh></v>
<v t="edream.110203161858.1702"><vh>v.copyCloneBitsTo</vh></v>
<v t="edream.110203161858.1703"><vh>v.copyTree</vh></v>
<v t="edream.110203161858.1704"><vh>v.copyTreeWithNewTnodes (new after 3.11.1) (not used at present)</vh></v>
<v t="edream.110203161858.1705"><vh>v.createDependents</vh></v>
<v t="edream.110203161858.1706"><vh>v.destroyDependents</vh></v>
<v t="edream.110203161858.1707"><vh>v.destroyTree (does nothing!)(Called only from destroy dependents)</vh></v>
<v t="edream.110203161858.1708"><vh>v.invalidOutline</vh></v>
<v t="edream.110203161858.1709"><vh>v.joinNodeTo (rewritten for 4.0)</vh></v>
<v t="edream.110203161858.1710"><vh>v.joinTreeTo</vh></v>
<v t="edream.110203161858.1711"><vh>v.shouldBeClone</vh></v>
<v t="edream.110203161858.1712"><vh>v.unjoinTree</vh></v>
<v t="edream.110203161858.1713"><vh>v.unlink</vh></v>
<v t="edream.110203161858.1714"><vh>validateOutlineWithParent</vh>
<v t="edream.110203161858.1715"><vh>&lt;&lt; validate parent ivar &gt;&gt;</vh></v>
<v t="edream.110203161858.1716"><vh>&lt;&lt; validate childIndex ivar &gt;&gt;</vh></v>
<v t="edream.110203161858.1717"><vh>&lt;&lt; validate x ivar &gt;&gt;</vh></v>
</v>
</v>
</v>
</v>
<v t="edream.110203161858.1718"><vh>class nodeIndices</vh>
<v t="edream.110203161858.1719"><vh>nodeIndices.__init__</vh></v>
<v t="edream.110203161858.1720"><vh>areEqual</vh></v>
<v t="edream.110203161858.1721"><vh>get/setDefaultId</vh></v>
<v t="edream.110203161858.1722"><vh>getNewIndex</vh></v>
<v t="edream.110203161858.1723"><vh>scanGnx</vh></v>
<v t="edream.110203161858.1724"><vh>setTimeString</vh></v>
<v t="edream.110203161858.1725"><vh>toString</vh></v>
</v>
</v>
<v t="edream.110203161858.1726" tnodeList="edream.110203161858.1726"><vh>@file c:\prog\test\leoPlugins.py</vh>
<v t="edream.110203161858.1727"><vh>loadHandlers</vh></v>
<v t="edream.110203161858.1728"><vh>doHandlersForTag</vh></v>
<v t="edream.110203161858.1729"><vh>registerHandler</vh></v>
<v t="edream.110203161858.1730"><vh>registerExclusiveHandler</vh></v>
<v t="edream.110203161858.1731"><vh>funcToMethod</vh></v>
</v>
<v t="edream.110203161858.1732" tnodeList="edream.110203161858.1732,edream.110203161858.1733,edream.110203161858.1734,edream.110203161858.1735,edream.110203161858.1736,edream.110203161858.1737,edream.110203161858.1738,edream.110203161858.1739,edream.110203161858.1740,edream.110203161858.1741,edream.110203161858.1743,edream.110203161858.1744,edream.110203161858.1745,edream.110203161858.1746,edream.110203161858.1747,edream.110203161858.1747"><vh>@file c:\prog\test\leoPrefs.py</vh>
<v t="edream.110203161858.1733"><vh>prefs.__init__</vh>
<v t="edream.110203161858.1734"><vh>&lt;&lt; Set ivars &gt;&gt;</vh></v>
<v t="edream.110203161858.1735"><vh>&lt;&lt; Create the Global Options frame &gt;&gt;</vh></v>
<v t="edream.110203161858.1736"><vh>&lt;&lt; Create the Tangle Options frame &gt;&gt;</vh></v>
<v t="edream.110203161858.1737"><vh>&lt;&lt; Create the Target Language frame &gt;&gt;</vh></v>
<v t="edream.110203161858.1738"><vh>&lt;&lt; Create the Ok, Cancel &amp; Revert buttons &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1739"><vh>prefs.init</vh>
<v t="edream.110203161858.1740"><vh>&lt;&lt; remember values for revert &gt;&gt;</vh></v>
<v t="edream.110203161858.1741"><vh>&lt;&lt; set widgets &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1742"><vh>Event handlers</vh>
<v t="edream.110203161858.1743"><vh>prefs.set_ivars &amp; idle_set_ivars &amp; print_ivars</vh>
<v t="edream.110203161858.1744"><vh>&lt;&lt; update ivars &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1745"><vh>set_lang</vh></v>
<v t="edream.110203161858.1746"><vh>prefs.onOK, onCancel, onRevert</vh>
<v t="edream.110203161858.1747"><vh>&lt;&lt; restore options &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="edream.110203161858.1748" tnodeList="edream.110203161858.1748,edream.110203161858.1749,edream.110203161858.1750,edream.110203161858.1752,edream.110203161858.1753,edream.110203161858.1754,edream.110203161858.1755,edream.110203161858.1756,edream.110203161858.1757,edream.110203161858.1758,edream.110203161858.1759,edream.110203161858.1760,edream.110203161858.1761,edream.110203161858.1762,edream.110203161858.1763,edream.110203161858.1764,edream.110203161858.1765,edream.110203161858.1766,edream.110203161858.1767,edream.110203161858.1768,edream.110203161858.1769,edream.110203161858.1770,edream.110203161858.1771,edream.110203161858.1772,edream.110203161858.1773,edream.110203161858.1774,edream.110203161858.1775,edream.110203161858.1776,edream.110203161858.1777,edream.110203161858.1778,edream.110203161858.1779,edream.110203161858.1780,edream.110203161858.1781,edream.110203161858.1782,edream.110203161858.1783,edream.110203161858.1784,edream.110203161858.1785,edream.110203161858.1786,edream.110203161858.1787,edream.110203161858.1788,edream.110203161858.1790,edream.110203161858.1789,edream.110203161858.1791,edream.110203161858.1792,edream.110203161858.1793,edream.110203161858.1794,edream.110203161858.1797,edream.110203161858.1798,edream.110203161858.1801,edream.110203161858.1800,edream.110203161858.1802,edream.110203161858.1803,edream.110203161858.1804,edream.110203161858.1799,edream.110203161858.1805,edream.110203161858.1806,edream.110203161858.1807,edream.110203161858.1808,edream.110203161858.1809,edream.110203161858.1810,edream.110203161858.1811,edream.110203161858.1813,edream.110203161858.1814,edream.110203161858.1815,edream.110203161858.1816,edream.110203161858.1817,edream.110203161858.1818,edream.110203161858.1819,edream.110203161858.1820,edream.110203161858.1821,edream.110203161858.1822,edream.110203161858.1823,edream.110203161858.1824,edream.110203161858.1825,edream.110203161858.1826,edream.110203161858.1827,edream.110203161858.1828,edream.110203161858.1829,edream.110203161858.1830,edream.110203161858.1831,edream.110203161858.1832,edream.110203161858.1833,edream.110203161858.1834,edream.110203161858.1835,edream.110203161858.1836,edream.110203161858.1837,edream.110203161858.1837,edream.110203161858.1838,edream.110203161858.1839,edream.110203161858.1840,edream.110203161858.1842,edream.110203161858.1843,edream.110203161858.1844,edream.110203161858.1845,edream.110203161858.1846,edream.110203161858.1847,edream.110203161858.1848,edream.110203161858.1849,edream.110203161858.1850,edream.110203161858.1852,edream.110203161858.1853,edream.110203161858.1854,edream.110203161858.1855,edream.110203161858.1856,edream.110203161858.1858,edream.110203161858.1859,edream.110203161858.1860,edream.110203161858.1861,edream.110203161858.1862,edream.110203161858.1859,edream.110203161858.1863,edream.110203161858.1864,edream.110203161858.1868,edream.110203161858.1870,edream.110203161858.1869,edream.110203161858.1866,edream.110203161858.1865,edream.110203161858.1867,edream.110203161858.1866,edream.110203161858.1871,edream.110203161858.1872,edream.110203161858.1866,edream.110203161858.1873,edream.110203161858.1874,edream.110203161858.1875,edream.110203161858.1876,edream.110203161858.1877,edream.110203161858.1878,edream.110203161858.1879,edream.110203161858.1880,edream.110203161858.1881,edream.110203161858.1882,edream.110203161858.1884,edream.110203161858.1885,edream.110203161858.1883,edream.110203161858.1886,edream.110203161858.1887,edream.110203161858.1888,edream.110203161858.1889,edream.110203161858.1890,edream.110203161858.1891,edream.110203161858.1892,edream.110203161858.1893,edream.110203161858.1894,edream.110203161858.1895,edream.110203161858.1896,edream.110203161858.1897,edream.110203161858.1898,edream.110203161858.1899,edream.110203161858.1900,edream.110203161858.1901,edream.110203161858.1902,edream.110203161858.1903,edream.110203161858.1904,edream.110203161858.1905,edream.110203161858.1906,edream.110203161858.1907,edream.110203161858.1908,edream.110203161858.1909,edream.110203161858.1910,edream.110203161858.1911,edream.110203161858.1912,edream.110203161858.1913,edream.110203161858.1914,edream.110203161858.1915,edream.110203161858.1916,edream.110203161858.1917,edream.110203161858.1918,edream.110203161858.1919,edream.110203161858.1920,edream.110203161858.1921,edream.110203161858.1922,edream.110203161858.1923,edream.110203161858.1924,edream.110203161858.1925,edream.110203161858.1926,edream.110203161858.1927,edream.110203161858.1928,edream.110203161858.1929,edream.110203161858.1930,edream.110203161858.1931,edream.110203161858.1932"><vh>@file c:\prog\test\leoTangle.py</vh>
<v t="edream.110203161858.1749"><vh>&lt;&lt; About Tangle and Untangle &gt;&gt;</vh></v>
<v t="edream.110203161858.1750"><vh>&lt;&lt; constants &amp; synonyms &gt;&gt;</vh></v>
<v t="edream.110203161858.1751"><vh>node classes</vh>
<v t="edream.110203161858.1752"><vh>class tst_node</vh>
<v t="edream.110203161858.1753"><vh>tst_node.__init__</vh></v>
<v t="edream.110203161858.1754"><vh>tst_node.__repr__</vh></v>
</v>
<v t="edream.110203161858.1755"><vh>class part_node</vh>
<v t="edream.110203161858.1756"><vh>part_node.__init__</vh></v>
<v t="edream.110203161858.1757"><vh>part_node.__repr__</vh></v>
</v>
<v t="edream.110203161858.1758"><vh>class ust_node</vh>
<v t="edream.110203161858.1759"><vh>ust_node.__init__</vh></v>
<v t="edream.110203161858.1760"><vh>ust_node.__repr__</vh></v>
</v>
<v t="edream.110203161858.1761"><vh>class def_node</vh>
<v t="edream.110203161858.1762"><vh>def_node.__init__</vh></v>
<v t="edream.110203161858.1763"><vh>def_node.__repr__</vh></v>
</v>
<v t="edream.110203161858.1764"><vh>class root_attributes (Stephen P. Schaefer)</vh>
<v t="edream.110203161858.1765"><vh>root_attributes.__init__</vh>
<v t="edream.110203161858.1766"><vh>&lt;&lt; trace the state &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1767"><vh>root_attributes.__repr__</vh></v>
</v>
</v>
<v t="edream.110203161858.1768"><vh>class tangleCommands methods</vh>
<v t="edream.110203161858.1769"><vh>tangle.__init__</vh></v>
<v t="edream.110203161858.1770"><vh>tangle.init_ivars &amp; init_directive_ivars</vh>
<v t="edream.110203161858.1771"><vh>&lt;&lt; init tangle ivars &gt;&gt;</vh></v>
<v t="edream.110203161858.1772"><vh>&lt;&lt; init untangle ivars &gt;&gt;</vh></v>
<v t="edream.110203161858.1773"><vh>&lt;&lt; init directive ivars &gt;&gt; (tangle)</vh></v>
</v>
<v t="edream.110203161858.1774"><vh>top level</vh>
<v t="edream.110203161858.1775"><vh>cleanup</vh>
<v t="edream.110203161858.1776"><vh>&lt;&lt; call tangle_done.run() or untangle_done.run() &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1777"><vh>initTangleCommand</vh></v>
<v t="edream.110203161858.1778"><vh>initUntangleCommand</vh></v>
<v t="edream.110203161858.1779"><vh>tangle</vh></v>
<v t="edream.110203161858.1780"><vh>tangleAll</vh></v>
<v t="edream.110203161858.1781"><vh>tangleMarked</vh></v>
<v t="edream.110203161858.1782"><vh>tanglePass1</vh></v>
<v t="edream.110203161858.1783"><vh>tanglePass2</vh></v>
<v t="edream.110203161858.1784"><vh>tangleTree (calls cleanup)</vh></v>
<v t="edream.110203161858.1785"><vh>untangle</vh></v>
<v t="edream.110203161858.1786"><vh>untangleAll</vh></v>
<v t="edream.110203161858.1787"><vh>untangleMarked</vh></v>
<v t="edream.110203161858.1788"><vh>untangleRoot (calls cleanup)</vh>
<v t="edream.110203161858.1789"><vh>&lt;&lt; return if @silent or unknown language &gt;&gt;</vh></v>
<v t="edream.110203161858.1790"><vh>&lt;&lt; Set path &amp; root_name to the file specified in the @root directive &gt;&gt;</vh></v>
<v t="edream.110203161858.1791"><vh>&lt;&lt; Read the file into file_buf  &gt;&gt;</vh></v>
<v t="edream.110203161858.1792"><vh>&lt;&lt; Pass 2:  Untangle the outline using the UST and a newly-created TST &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1793"><vh>untangleTree</vh>
<v t="edream.110203161858.1794"><vh>&lt;&lt; set end to the next root in the unit &gt;&gt;</vh></v>
</v>
</v>
<v t="edream.110203161858.1795"><vh>tangle</vh>
<v t="edream.110203161858.1796"><vh>Pass 1</vh>
<v t="edream.110203161858.1797"><vh>handle_newline</vh></v>
<v t="edream.110203161858.1798"><vh>skip_body</vh>
<v t="edream.110203161858.1799"><vh>The interface between tangle and untangle</vh>
<v t="edream.110203161858.1800"><vh>&lt;&lt; Define a section containing only an @doc part &gt;&gt;</vh></v>
<v t="edream.110203161858.1801"><vh>&lt;&lt; Define a section for a leading code part &gt;&gt;</vh></v>
<v t="edream.110203161858.1802"><vh>&lt;&lt; Scan and define a section definition &gt;&gt;</vh></v>
<v t="edream.110203161858.1803"><vh>&lt;&lt; Scan and define an @code defininition &gt;&gt;</vh></v>
<v t="edream.110203161858.1804"><vh>&lt;&lt; Scan and define a root section &gt;&gt;</vh></v>
</v>
</v>
<v t="edream.110203161858.1805"><vh>skip_code</vh>
<v t="edream.110203161858.1806"><vh>&lt;&lt; skip a noweb code section &gt;&gt;</vh>
<v t="edream.110203161858.1807"><vh>&lt;&lt; handle possible noweb section reference &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1808"><vh>&lt;&lt; skip a CWEB code section &gt;&gt;</vh>
<v t="edream.110203161858.1809"><vh>&lt;&lt; handle CWEB control code &gt;&gt;</vh></v>
</v>
</v>
<v t="edream.110203161858.1810"><vh>skip_doc</vh></v>
<v t="edream.110203161858.1811"><vh>skip_headline</vh></v>
</v>
<v t="edream.110203161858.1812"><vh>Pass 2</vh>
<v t="edream.110203161858.1813"><vh>oblank, oblanks, os, otab, otabs (Tangle)</vh></v>
<v t="edream.110203161858.1814"><vh>tangle.put_all_roots</vh>
<v t="edream.110203161858.1815"><vh>&lt;&lt;Get root specific attributes&gt;&gt;</vh></v>
<v t="edream.110203161858.1816"><vh>&lt;&lt;Put @first lines&gt;&gt;</vh></v>
<v t="edream.110203161858.1817"><vh>&lt;&lt;Write a banner at the start of the output file&gt;&gt;</vh></v>
<v t="edream.110203161858.1818"><vh>&lt;&lt; Erase the temporary file &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1819"><vh>put_code</vh>
<v t="edream.110203161858.1820"><vh>&lt;&lt;put possible section reference &gt;&gt;</vh></v>
<v t="edream.110203161858.1821"><vh>&lt;&lt; handle 2-character CWEB control codes &gt;&gt;</vh></v>
<v t="edream.110203161858.1822"><vh>&lt;&lt; handle noweb @ &lt; &lt; convention &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1823"><vh>put_doc</vh>
<v t="edream.110203161858.1824"><vh>&lt;&lt;put the doc part&gt;&gt;</vh>
<v t="edream.110203161858.1825"><vh>&lt;&lt;output or skip whitespace or newlines&gt;&gt;</vh></v>
<v t="edream.110203161858.1826"><vh>&lt;&lt;compute the width of the next word&gt;&gt;</vh></v>
<v t="edream.110203161858.1827"><vh>&lt;&lt;output next word&gt;&gt;</vh></v>
</v>
</v>
<v t="edream.110203161858.1828"><vh>put_leading_ws</vh></v>
<v t="edream.110203161858.1829"><vh>put_newline</vh>
<v t="edream.110203161858.1830"><vh>&lt;&lt; Output leading white space except for blank lines &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1831"><vh>put_part_node</vh></v>
<v t="edream.110203161858.1832"><vh>put_section</vh>
<v t="edream.110203161858.1833"><vh>&lt;&lt; Calculate the new value of tangle_indent &gt;&gt;</vh></v>
<v t="edream.110203161858.1834"><vh>&lt;&lt; Set 'newline_flag' if the line ends with the reference &gt;&gt;</vh></v>
<v t="edream.110203161858.1835"><vh>&lt;&lt;put all parts of the section definition&gt;&gt;</vh>
<v t="edream.110203161858.1836"><vh>&lt;&lt; Put the section name in a comment &gt;&gt;</vh>
<v t="edream.110203161858.1837"><vh>&lt;&lt; put ( n of m ) &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1838"><vh>&lt;&lt; Put the ending comment &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1839"><vh>&lt;&lt;Put a comment about the undefined section&gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1840"><vh>section_check</vh></v>
</v>
</v>
<v t="edream.110203161858.1841"><vh>tst</vh>
<v t="edream.110203161858.1842"><vh>st_check</vh></v>
<v t="edream.110203161858.1843"><vh>st_dump</vh></v>
<v t="edream.110203161858.1844"><vh>st_dump_node</vh></v>
<v t="edream.110203161858.1845"><vh>st_enter</vh>
<v t="edream.110203161858.1846"><vh>&lt;&lt;check for duplicate code definitions &gt;&gt;</vh></v>
<v t="edream.110203161858.1847"><vh>&lt;&lt;remember root node attributes&gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1848"><vh>st_enter_root_name</vh></v>
<v t="edream.110203161858.1849"><vh>st_enter_section_name</vh></v>
<v t="edream.110203161858.1850"><vh>st_lookup</vh></v>
</v>
<v t="edream.110203161858.1851"><vh>ust</vh>
<v t="edream.110203161858.1852"><vh>ust_dump</vh></v>
<v t="edream.110203161858.1853"><vh>ust_enter</vh>
<v t="edream.110203161858.1854"><vh>&lt;&lt; remove blank lines from the start and end of the text &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1855"><vh>ust_lookup</vh></v>
<v t="edream.110203161858.1856"><vh>ust_warn_about_orphans</vh></v>
</v>
<v t="edream.110203161858.1857"><vh>untangle</vh>
<v t="edream.110203161858.1858"><vh>compare_comments</vh>
<v t="edream.110203161858.1859" a=""><vh>&lt;&lt; Check both parts for @ comment conventions &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1860"><vh>massage_block_comment (no longer used)</vh></v>
<v t="edream.110203161858.1861"><vh>forgiving_compare</vh>
<v t="edream.110203161858.1862"><vh>&lt;&lt; Define forgiving_compare vars &gt;&gt;</vh></v>
<v t="edream.110203161858.1859" a=""><vh>&lt;&lt; Check both parts for @ comment conventions &gt;&gt;</vh></v>
<v t="edream.110203161858.1863"><vh>&lt;&lt; Compare non-critical newlines &gt;&gt;</vh></v>
<v t="edream.110203161858.1864"><vh>&lt;&lt; Compare non-critical whitespace &gt;&gt;</vh></v>
<v t="edream.110203161858.1865"><vh>&lt;&lt; Compare possible preprocessor directives &gt;&gt;</vh>
<v t="edream.110203161858.1866" a=""><vh>&lt;&lt; Compare single characters &gt;&gt;</vh></v>
<v t="edream.110203161858.1867"><vh>&lt;&lt; Compare preprocessor directives &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1868"><vh>&lt;&lt; Compare possible strings &gt;&gt;</vh>
<v t="edream.110203161858.1866" a=""><vh>&lt;&lt; Compare single characters &gt;&gt;</vh></v>
<v t="edream.110203161858.1869"><vh>&lt;&lt; Compare C strings &gt;&gt;</vh></v>
<v t="edream.110203161858.1870"><vh>&lt;&lt; Compare Pascal strings &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1871"><vh>&lt;&lt; Compare possible section references &gt;&gt;</vh></v>
<v t="edream.110203161858.1872"><vh>&lt;&lt; Compare comments or single characters &gt;&gt;</vh>
<v t="edream.110203161858.1866" a=""><vh>&lt;&lt; Compare single characters &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1873"><vh>&lt;&lt; Make sure both parts have ended &gt;&gt;</vh></v>
<v t="edream.110203161858.1874"><vh>&lt;&lt; Trace the mismatch &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1875"><vh>mismatch</vh></v>
<v t="edream.110203161858.1876"><vh>scan_derived_file (pass 1)</vh>
<v t="edream.110203161858.1877"><vh>&lt;&lt; set the private global matching vars &gt;&gt;</vh></v>
<v t="edream.110203161858.1878"><vh>&lt;&lt; Skip the header line output by tangle &gt;&gt;</vh></v>
<v t="edream.110203161858.1879"><vh>&lt;&lt; handle the start of a new line &gt;&gt;</vh></v>
<v t="edream.110203161858.1880"><vh>&lt;&lt; handle a sentinel line &gt;&gt;</vh>
<v t="edream.110203161858.1881"><vh>&lt;&lt; terminate the previous part of this section if it exists &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1882"><vh>&lt;&lt; copy the entire line &gt;&gt;</vh></v>
<v t="edream.110203161858.1883"><vh>&lt;&lt; copy a string &gt;&gt;</vh></v>
<v t="edream.110203161858.1884"><vh>&lt;&lt; copy a multi-line comment &gt;&gt;</vh></v>
<v t="edream.110203161858.1885"><vh>&lt;&lt; copy an alternate multi-line comment &gt;&gt;</vh></v>
<v t="edream.110203161858.1886"><vh>&lt;&lt; end all open sections &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1887"><vh>update_def (pass 2)</vh>
<v t="edream.110203161858.1888"><vh>&lt;&lt; Remove leading blank lines and comments from ucode &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1889"><vh>update_current_vnode</vh></v>
</v>
<v t="edream.110203161858.1890"><vh>utility methods</vh>
<v t="edream.110203161858.1891"><vh>compare_section_names</vh></v>
<v t="edream.110203161858.1892"><vh>copy</vh></v>
<v t="edream.110203161858.1893"><vh>error, pathError, warning</vh></v>
<v t="edream.110203161858.1894"><vh>is_end_of_directive</vh></v>
<v t="edream.110203161858.1895"><vh>is_end_of_string</vh></v>
<v t="edream.110203161858.1896"><vh>is_escaped</vh></v>
<v t="edream.110203161858.1897"><vh>is_section_name</vh></v>
<v t="edream.110203161858.1898"><vh>is_sentinel_line &amp; is_sentinel_line_with_data</vh>
<v t="edream.110203161858.1899"><vh>&lt;&lt; Initialize the return values  &gt;&gt;</vh></v>
<v t="edream.110203161858.1900"><vh>&lt;&lt; Make sure the line starts with start_sentinel &gt;&gt;</vh></v>
<v t="edream.110203161858.1901"><vh>&lt;&lt; Set end_flag if we have -- end -- &gt;&gt;</vh></v>
<v t="edream.110203161858.1902"><vh>&lt;&lt; Make sure we have a section reference &gt;&gt;</vh></v>
<v t="edream.110203161858.1903"><vh>&lt;&lt; Set part and of if they exist &gt;&gt;</vh></v>
<v t="edream.110203161858.1904"><vh>&lt;&lt; Set nl_flag to false if !newline exists &gt;&gt;</vh></v>
<v t="edream.110203161858.1905"><vh>&lt;&lt; Make sure the line ends with end_sentinel &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1906"><vh>push_new_def_node</vh></v>
<v t="edream.110203161858.1907"><vh>scan_short_val</vh></v>
<v t="edream.110203161858.1908"><vh>setRootFromHeadline</vh></v>
<v t="edream.110203161858.1909"><vh>setRootFromText</vh></v>
<v t="edream.110203161858.1910"><vh>skip_CWEB_section_name</vh></v>
<v t="edream.110203161858.1911"><vh>skip_noweb_section_name</vh></v>
<v t="edream.110203161858.1912"><vh>skip_section_name</vh></v>
<v t="edream.110203161858.1913"><vh>standardize_name</vh></v>
<v t="edream.110203161858.1914"><vh>tangle.scanAllDirectives</vh>
<v t="edream.110203161858.1915"><vh>&lt;&lt; Collect @first attributes &gt;&gt;</vh></v>
<v t="edream.110203161858.1916"><vh>&lt;&lt; Test for @comment and @language &gt;&gt;</vh></v>
<v t="edream.110203161858.1917"><vh>&lt;&lt; Test for @encoding &gt;&gt;</vh></v>
<v t="edream.110203161858.1918"><vh>&lt;&lt; Test for @lineending &gt;&gt;</vh></v>
<v t="edream.110203161858.1919"><vh>&lt;&lt; Test for print modes directives &gt;&gt;</vh></v>
<v t="edream.110203161858.1920"><vh>&lt;&lt; Test for @path &gt;&gt;</vh>
<v t="edream.110203161858.1921"><vh>&lt;&lt; compute dir and relative_path from s[k:] &gt;&gt;</vh></v>
<v t="edream.110203161858.1922"><vh>&lt;&lt; handle absolute @path &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1923"><vh>&lt;&lt; Test for @pagewidth &gt;&gt;</vh></v>
<v t="edream.110203161858.1924"><vh>&lt;&lt; Test for @root &gt;&gt;</vh></v>
<v t="edream.110203161858.1925"><vh>&lt;&lt; Test for @tabwidth &gt;&gt;</vh></v>
<v t="edream.110203161858.1926"><vh>&lt;&lt; Test for @header and @noheader &gt;&gt;</vh></v>
<v t="edream.110203161858.1927"><vh>&lt;&lt; Set self.tangle_directory &gt;&gt;</vh>
<v t="edream.110203161858.1928"><vh>&lt;&lt; handle absolute path &gt;&gt;</vh></v>
</v>
</v>
<v t="edream.110203161858.1929"><vh>token_type</vh>
<v t="edream.110203161858.1930"><vh>&lt;&lt; set token_type in noweb mode &gt;&gt;</vh></v>
<v t="edream.110203161858.1931"><vh>&lt;&lt; set token_type for CWEB mode &gt;&gt;</vh></v>
<v t="edream.110203161858.1932"><vh>&lt;&lt; set kind for directive &gt;&gt;</vh></v>
</v>
</v>
</v>
</v>
<v t="edream.110203161858.1933" tnodeList="edream.110203161858.1933,edream.110203161858.1934,edream.110203161858.1935,edream.110203161858.1936,edream.110203161858.1938,edream.110203161858.1939,edream.110203161858.1940,edream.110203161858.1942,edream.110203161858.1943,edream.110203161858.1944,edream.110203161858.1945,edream.110203161858.1947,edream.110203161858.1948,edream.110203161858.1949,edream.110203161858.1950,edream.110203161858.1951,edream.110203161858.1952,edream.110203161858.1953,edream.110203161858.1954,edream.110203161858.1955,edream.110203161858.1956,edream.110203161858.1957,edream.110203161858.1958,edream.110203161858.1959,edream.110203161858.1960,edream.110203161858.1961,edream.110203161858.1962,edream.110203161858.1963,edream.110203161858.1964,edream.110203161858.1965,edream.110203161858.1966,edream.110203161858.1967,edream.110203161858.1968,edream.110203161858.1969,edream.110203161858.1970,edream.110203161858.1971,edream.110203161858.1972,edream.110203161858.1973,edream.110203161858.1974,edream.110203161858.1975,edream.110203161858.1976,edream.110203161858.1977,edream.110203161858.1978,edream.110203161858.1979,edream.110203161858.1980,edream.110203161858.1981,edream.110203161858.1982,edream.110203161858.1983,edream.110203161858.1984,edream.110203161858.1985,edream.110203161858.1986,edream.110203161858.1987,edream.110203161858.1988,edream.110203161858.1989,edream.110203161858.1990,edream.110203161858.1991,edream.110203161858.1992,edream.110203161858.1993,edream.110203161858.1994,edream.110203161858.1995,edream.110203161858.1996,edream.110203161858.1997,edream.110203161858.1998,edream.110203161858.1999,edream.110203161858.2000,edream.110203161858.2001,edream.110203161858.2002,edream.110203161858.2003,edream.110203161858.2004,edream.110203161858.2005,edream.110203161858.2006,edream.110203161858.2007,edream.110203161858.2008,edream.110203161858.2009,edream.110203161858.2010,edream.110203161858.2011,edream.110203161858.2012,edream.110203161858.2013,edream.110203161858.2014,edream.110203161858.2016,edream.110203161858.2017,edream.110203161858.2018,edream.110203161858.2019,edream.110203161858.2020,edream.110203161858.2021,edream.110203161858.2023,edream.110203161858.2024,edream.110203161858.2025,edream.110203161858.2026,edream.110203161858.2027,edream.110203161858.2028,edream.110203161858.2029,edream.110203161858.2030,edream.110203161858.2031,edream.110203161858.2032,edream.110203161858.2033,edream.110203161858.2034,edream.110203161858.2035,edream.110203161858.2036,edream.110203161858.2037,edream.110203161858.2038,edream.110203161858.2039,edream.110203161858.2040,edream.110203161858.2041"><vh>@file c:\prog\test\leoTree.py</vh>
<v t="edream.110203161858.1934"><vh>&lt;&lt; about the tree classes &gt;&gt;</vh></v>
<v t="edream.110203161858.1935"><vh>&lt;&lt; About drawing and events &gt;&gt;</vh></v>
<v t="edream.110203161858.1936"><vh>&lt;&lt; drawing constants &gt;&gt;</vh></v>
<v t="edream.110203161858.1937"><vh>Birth &amp; death</vh>
<v t="edream.110203161858.1938"><vh>tree.__init__</vh></v>
<v t="edream.110203161858.1939"><vh>tree.deleteBindings</vh></v>
<v t="edream.110203161858.1940"><vh>tree.deleteWidgets</vh></v>
</v>
<v t="edream.110203161858.1941"><vh>Drawing</vh>
<v t="edream.110203161858.1942"><vh>About drawing and updating</vh></v>
<v t="edream.110203161858.1943"><vh>beginUpdate</vh></v>
<v t="edream.110203161858.1944"><vh>drawBox (tag_bind)</vh></v>
<v t="edream.110203161858.1945"><vh>drawIcon (tag_bind)</vh></v>
<v t="edream.110203161858.1946"><vh>Drawing routines (tree)...</vh>
<v t="edream.110203161858.1947"><vh>redraw</vh></v>
<v t="edream.110203161858.1948"><vh>force_redraw</vh></v>
<v t="edream.110203161858.1949"><vh>redraw_now</vh></v>
<v t="edream.110203161858.1950"><vh>idle_redraw</vh></v>
<v t="edream.110203161858.1951"><vh>idle_second_redraw</vh></v>
</v>
<v t="edream.110203161858.1952"><vh>drawNode &amp; force_draw_node</vh></v>
<v t="edream.110203161858.1953"><vh>drawText (bind)</vh>
<v t="edream.110203161858.1954"><vh>&lt;&lt; configure the text depending on state &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1955"><vh>drawTree</vh>
<v t="edream.110203161858.1956"><vh>&lt;&lt; draw vertical line &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1957"><vh>endUpdate</vh></v>
<v t="edream.110203161858.1958"><vh>headWidth</vh></v>
<v t="edream.110203161858.1959"><vh>inVisibleArea &amp; inExpandedVisibleArea</vh></v>
<v t="edream.110203161858.1960"><vh>lastVisible</vh></v>
<v t="edream.110203161858.1961"><vh>setLineHeight</vh></v>
<v t="edream.110203161858.1962"><vh>tree.getFont,setFont,setFontFromConfig</vh></v>
<v t="edream.110203161858.1963"><vh>tree.getIconImage</vh></v>
<v t="edream.110203161858.1964"><vh>tree.idle_scrollTo</vh></v>
<v t="edream.110203161858.1965"><vh>tree.numberOfVisibleNodes</vh></v>
<v t="edream.110203161858.1966"><vh>tree.recolor, recolor_now, recolor_range</vh></v>
<v t="edream.110203161858.1967"><vh>tree.yoffset</vh></v>
</v>
<v t="edream.110203161858.1968"><vh>Event handers (tree)</vh>
<v t="edream.110203161858.1969"><vh>OnActivate</vh>
<v t="edream.110203161858.1970"><vh>&lt;&lt; activate this window &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1971"><vh>OnBoxClick</vh></v>
<v t="edream.110203161858.1972"><vh>tree.OnDeactivate (caused double-click problem)</vh></v>
<v t="edream.110203161858.1973"><vh>tree.findVnodeWithIconId</vh></v>
<v t="edream.110203161858.1974"><vh>body key handlers (tree)</vh>
<v t="edream.110203161858.1975"><vh>idle_body_key</vh>
<v t="edream.110203161858.1976"><vh>&lt;&lt; set s to the widget text &gt;&gt;</vh></v>
<v t="edream.110203161858.1977"><vh>&lt;&lt; return if nothing has changed &gt;&gt;</vh></v>
<v t="edream.110203161858.1978"><vh>&lt;&lt; set removeTrailing &gt;&gt;</vh></v>
<v t="edream.110203161858.1979"><vh>&lt;&lt; Do auto indent &gt;&gt; (David McNab)</vh></v>
<v t="edream.110203161858.1980"><vh>&lt;&lt; convert tab to blanks &gt;&gt;</vh></v>
<v t="edream.110203161858.1981"><vh>&lt;&lt; set s to widget text, removing trailing newlines if necessary &gt;&gt;</vh></v>
<v t="edream.110203161858.1982"><vh>&lt;&lt; recolor the body &gt;&gt;</vh></v>
<v t="edream.110203161858.1983"><vh>&lt;&lt; redraw the screen if necessary &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1984"><vh>onBodyChanged</vh></v>
<v t="edream.110203161858.1985"><vh>OnBodyKey</vh></v>
<v t="edream.110203161858.1986"><vh>onBodyWillChange</vh></v>
</v>
<v t="edream.110203161858.1987"><vh>tree.OnContinueDrag</vh>
<v t="edream.110203161858.1988"><vh>&lt;&lt; continue dragging &gt;&gt;</vh>
<v t="edream.110203161858.1989"><vh>&lt;&lt; scroll the canvas as needed &gt;&gt;</vh></v>
</v>
</v>
<v t="edream.110203161858.1990"><vh>tree.OnCtontrolT</vh></v>
<v t="edream.110203161858.1991"><vh>tree.OnDrag</vh></v>
<v t="edream.110203161858.1992"><vh>tree.OnEndDrag</vh>
<v t="edream.110203161858.1993"><vh>&lt;&lt; set vdrag, childFlag &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.1994"><vh>headline key handlers (tree)</vh>
<v t="edream.110203161858.1995"><vh>onHeadChanged</vh></v>
<v t="edream.110203161858.1996"><vh>OnHeadlineKey</vh></v>
<v t="edream.110203161858.1997"><vh>idle_head_key</vh>
<v t="edream.110203161858.1998"><vh>&lt;&lt; set s to the widget text &gt;&gt;</vh></v>
<v t="edream.110203161858.1999"><vh>&lt;&lt; set head to vnode text &gt;&gt;</vh></v>
<v t="edream.110203161858.2000"><vh>&lt;&lt; update v and all nodes joined to v &gt;&gt;</vh></v>
<v t="edream.110203161858.2001"><vh>&lt;&lt; reconfigure v and all nodes joined to v &gt;&gt;</vh></v>
<v t="edream.110203161858.2002"><vh>&lt;&lt; update the screen &gt;&gt;</vh></v>
</v>
</v>
<v t="edream.110203161858.2003"><vh>tree.OnIconClick &amp; OnIconRightClick</vh></v>
<v t="edream.110203161858.2004"><vh>tree.OnIconDoubleClick (@url)</vh>
<v t="edream.110203161858.2005"><vh>&lt;&lt; stop the url after any whitespace  &gt;&gt;</vh></v>
<v t="edream.110203161858.2006"><vh>&lt;&lt; check the url; return if bad &gt;&gt;</vh></v>
<v t="edream.110203161858.2007"><vh>&lt;&lt; pass the url to the web browser &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.2008"><vh>tree.OnPopup &amp; allies</vh>
<v t="edream.110203161858.2009"><vh>OnPopupFocusLost</vh></v>
<v t="edream.110203161858.2010"><vh>createPopupMenu</vh>
<v t="edream.110203161858.2011"><vh>&lt;&lt; Create the menu table &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.2012"><vh>enablePopupMenuItems</vh>
<v t="edream.110203161858.2013"><vh>&lt;&lt; set isAtRoot and isAtFile if v's tree contains @root or @file nodes &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.2014"><vh>showPopupMenu</vh></v>
</v>
</v>
<v t="edream.110203161858.2015"><vh>Incremental drawing</vh>
<v t="edream.110203161858.2016"><vh>allocateNodes</vh></v>
<v t="edream.110203161858.2017"><vh>allocateNodesBeforeScrolling</vh></v>
<v t="edream.110203161858.2018"><vh>updateNode</vh></v>
<v t="edream.110203161858.2019"><vh>setVisibleAreaToFullCanvas</vh></v>
<v t="edream.110203161858.2020"><vh>setVisibleArea</vh></v>
<v t="edream.110203161858.2021"><vh>tree.updateTree</vh></v>
</v>
<v t="edream.110203161858.2022"><vh>Selecting &amp; editing (tree)</vh>
<v t="edream.110203161858.2023"><vh>abortEditLabelCommand</vh></v>
<v t="edream.110203161858.2024"><vh>dimEditLabel, undimEditLabel</vh></v>
<v t="edream.110203161858.2025"><vh>editLabel</vh></v>
<v t="edream.110203161858.2026"><vh>endEditLabel &amp; endEditLabelCommand</vh></v>
<v t="edream.110203161858.2027"><vh>tree.expandAllAncestors</vh></v>
<v t="edream.110203161858.2028"><vh>tree.scanForTabWidth</vh>
<v t="edream.110203161858.2029"><vh>&lt;&lt; set w and break on @tabwidth &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.2030"><vh>tree.select</vh>
<v t="edream.110203161858.2031"><vh>&lt;&lt; define vars and stop editing &gt;&gt;</vh></v>
<v t="edream.110203161858.2032"><vh>&lt;&lt; unselect the old node &gt;&gt;</vh></v>
<v t="edream.110203161858.2033"><vh>&lt;&lt; select the new node &gt;&gt;</vh></v>
<v t="edream.110203161858.2034"><vh>&lt;&lt; update c.beadList or c.beadPointer &gt;&gt;</vh></v>
<v t="edream.110203161858.2035"><vh>&lt;&lt; update c.visitedList &gt;&gt;</vh></v>
<v t="edream.110203161858.2036"><vh>&lt;&lt; set the current node and redraw &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.2037"><vh>tree.set...LabelState</vh>
<v t="edream.110203161858.2038"><vh>&lt;&lt; set editing headline colors &gt;&gt;</vh></v>
<v t="edream.110203161858.2039"><vh>&lt;&lt; set selected, disabled headline colors &gt;&gt;</vh></v>
<v t="edream.110203161858.2040"><vh>&lt;&lt; set unselected headline colors &gt;&gt;</vh></v>
</v>
</v>
<v t="edream.110203161858.2041"><vh>tree.moveUpDown</vh></v>
</v>
<v t="edream.110203161858.2042" tnodeList="edream.110203161858.2042,edream.110203161858.2043,edream.110203161858.2044,edream.110203161858.2045,edream.110203161858.2046,edream.110203161858.2048,edream.110203161858.2049,edream.110203161858.2050,edream.110203161858.2051,edream.110203161858.2052,edream.110203161858.2053,edream.110203161858.2054,edream.110203161858.2055,edream.110203161858.2056,edream.110203161858.2057,edream.110203161858.2058,edream.110203161858.2059,edream.110203161858.2060,edream.110203161858.2062,edream.110203161858.2061,edream.110203161858.2063,edream.110203161858.2064,edream.110203161858.2065,edream.110203161858.2066,edream.110203161858.2067,edream.110203161858.2068,edream.110203161858.2069,edream.110203161858.2070,edream.110203161858.2071,edream.110203161858.2072,edream.110203161858.2074,edream.110203161858.2073,edream.110203161858.2075,edream.110203161858.2076,edream.110203161858.2078,edream.110203161858.2079,edream.110203161858.2080,edream.110203161858.2081,edream.110203161858.2082,edream.110203161858.2083,edream.110203161858.2084,edream.110203161858.2085,edream.110203161858.2086,edream.110203161858.2087,edream.110203161858.2088,edream.110203161858.2089"><vh>@file c:\prog\test\leoUndo.py</vh>
<v t="edream.110203161858.2043"><vh>&lt;&lt; How Leo implements unlimited undo &gt;&gt;</vh></v>
<v t="edream.110203161858.2044"><vh>&lt;&lt; Define optional ivars &gt;&gt;</vh></v>
<v t="edream.110203161858.2045"><vh>undo.__init__ &amp; clearIvars</vh>
<v t="edream.110203161858.2046"><vh>clearIvars</vh></v>
</v>
<v t="edream.110203161858.2047"><vh>State routines...</vh>
<v t="edream.110203161858.2048"><vh>clearUndoState</vh></v>
<v t="edream.110203161858.2049"><vh>canRedo &amp; canUndo</vh></v>
<v t="edream.110203161858.2050"><vh>enableMenuItems</vh></v>
<v t="edream.110203161858.2051"><vh>getBead, peekBead, setBead</vh></v>
<v t="edream.110203161858.2052"><vh>redoMenuName, undoMenuName</vh></v>
<v t="edream.110203161858.2053"><vh>setRedoType, setUndoType</vh></v>
<v t="edream.110203161858.2054"><vh>setUndoParams</vh></v>
<v t="edream.110203161858.2055"><vh>setUndoTypingParams</vh>
<v t="edream.110203161858.2056"><vh>&lt;&lt; compute leading, middle &amp; trailing  lines &gt;&gt;</vh></v>
<v t="edream.110203161858.2057"><vh>&lt;&lt; save undo text info &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.2058"><vh>setUndoTypes</vh></v>
</v>
<v t="edream.110203161858.2059"><vh>u.redo</vh>
<v t="edream.110203161858.2060"><vh>&lt;&lt; redo clone cases &gt;&gt;</vh></v>
<v t="edream.110203161858.2061"><vh>&lt;&lt; redo delete cases &gt;&gt;</vh></v>
<v t="edream.110203161858.2062"><vh>&lt;&lt; redo insert cases &gt;&gt;</vh></v>
<v t="edream.110203161858.2063"><vh>&lt;&lt; redo move &amp; drag cases &gt;&gt;</vh></v>
<v t="edream.110203161858.2064"><vh>&lt;&lt; redo promote and demote cases &gt;&gt;</vh></v>
<v t="edream.110203161858.2065"><vh>&lt;&lt; redo replace cases &gt;&gt;</vh></v>
<v t="edream.110203161858.2066"><vh>&lt;&lt; redo sort cases &gt;&gt;</vh></v>
<v t="edream.110203161858.2067"><vh>&lt;&lt; redo typing cases &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.2068"><vh>u.undo</vh>
<v t="edream.110203161858.2069"><vh>&lt;&lt; undo clone cases &gt;&gt;</vh></v>
<v t="edream.110203161858.2070"><vh>&lt;&lt; undo delete cases &gt;&gt;</vh></v>
<v t="edream.110203161858.2071"><vh>&lt;&lt; undo insert cases &gt;&gt;</vh></v>
<v t="edream.110203161858.2072"><vh>&lt;&lt; undo move  &amp; drag cases &gt;&gt;</vh></v>
<v t="edream.110203161858.2073"><vh>&lt;&lt; undo replace cases &gt;&gt;</vh></v>
<v t="edream.110203161858.2074"><vh>&lt;&lt; undo promote and demote cases &gt;&gt;</vh></v>
<v t="edream.110203161858.2075"><vh>&lt;&lt; undo sort cases &gt;&gt;</vh></v>
<v t="edream.110203161858.2076"><vh>&lt;&lt; undo typing cases &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.2077"><vh>Undo helpers</vh>
<v t="edream.110203161858.2078"><vh>findSharedVnode</vh></v>
<v t="edream.110203161858.2079"><vh>undoDemote</vh></v>
<v t="edream.110203161858.2080"><vh>undoPromote</vh></v>
<v t="edream.110203161858.2081"><vh>undoReplace</vh></v>
<v t="edream.110203161858.2082"><vh>undoRedoText</vh>
<v t="edream.110203161858.2083"><vh>&lt;&lt; Incrementally update the Tk.Text widget &gt;&gt;</vh></v>
<v t="edream.110203161858.2084"><vh>&lt;&lt; Compute the result using v's body text &gt;&gt;</vh></v>
<v t="edream.110203161858.2085"><vh>&lt;&lt; Get textResult from the Tk.Text widget &gt;&gt;</vh></v>
<v t="edream.110203161858.2086"><vh>&lt;&lt; print mismatch trace &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.2087"><vh>undoSortChildren</vh></v>
<v t="edream.110203161858.2088"><vh>undoSortSiblings</vh></v>
<v t="edream.110203161858.2089"><vh>undoSortTopLevel</vh></v>
</v>
</v>
<v t="edream.110203161858.2093" tnodeList="edream.110203161858.2093,edream.110203161858.2094,edream.110203161858.2095,edream.110203161858.2096"><vh>@rawfile c:\prog\test\rawFile.txt </vh>
<v t="edream.110203161858.2094"><vh>node1</vh></v>
<v t="edream.110203161858.2095"><vh>@@ node2 headline  d</vh></v>
<v t="edream.110203161858.2096"><vh>node3</vh></v>
</v>
<v t="edream.110203161858.2097"><vh>@silentfile c:\prog\test\silentFile.txt </vh>
<v t="edream.110203161858.2098"><vh>node1</vh></v>
<v t="edream.110203161858.2099"><vh>@@ node2 headline  d</vh></v>
<v t="edream.110203161858.2100"><vh>node3</vh></v>
</v>
</v>
<v t="edream.110203161858.2101"><vh>Test of app.forceShutdown</vh></v>
<v t="edream.110203161858.7"><vh>~4.0 tests</vh>
<v t="edream.110203161858.8"><vh>unicode test for find all</vh>
<v t="edream.110203161858.9"><vh>a</vh></v>
<v t="edream.110203161858.10"><vh>Ã</vh></v>
</v>
<v t="edream.110203161858.11"><vh>Orphan test</vh>
<v t="edream.110203161858.12" tnodeList="edream.110203161858.12"><vh>@file orphanTest.txt</vh>
<v t="edream.110203161858.13"><vh>Orphan node</vh></v>
</v>
</v>
<v t="edream.110203161858.14"><vh>Test sentinelName</vh></v>
<v t="edream.110203161858.15"><vh>Test of report bad chars</vh></v>
<v t="edream.110203161858.16"><vh>Test of indentation</vh>
<v t="edream.110203161858.17" tnodeList="edream.110203161858.17,edream.110203161858.18,edream.110203161858.19,edream.110203161858.21,edream.110203161858.22,edream.110203161858.24,edream.110203161858.18"><vh>@file c:\prog\test\gnxText.txt</vh>
<v t="edream.110203161858.18" a=""><vh>&lt;&lt; ref &gt;&gt; (cloned)</vh></v>
<v t="edream.110203161858.19"><vh>&lt;&lt; ref2 &gt;&gt;</vh></v>
<v t="edream.110203161858.20"><vh>Organizer node</vh>
<v t="edream.110203161858.21"><vh>node 1</vh>
<v t="edream.110203161858.22"><vh>&lt;&lt; indented ref &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.23"><vh>empty node</vh></v>
</v>
<v t="edream.110203161858.24"><vh>Node 2</vh></v>
</v>
</v>
</v>
<v t="edream.110203161858.2105"><vh>~4.1 tests</vh>
<v t="edream.110203161858.2106"><vh>Extract tests</vh></v>
<v t="edream.110403110104"><vh>Extract tests2</vh></v>
<v t="edream.110203161858.2107"><vh>reformatParagraph test</vh></v>
<v t="edream.110203161858.2108" tnodeList="edream.110203161858.2108"><vh>@file c:\prog\test\UnicodeFileNames\Chineses\test.txt</vh></v>
<v t="edream.110203161858.2109"><vh>@last ?&gt; problems</vh>
<v t="edream.110203161858.2110" tnodeList="edream.110203161858.2110"><vh>@file c:\prog\test\atLastPHPTest.txt</vh></v>
</v>
<v t="edream.110203161858.2111"><vh>Dialog tests</vh>
<v t="edream.110203161858.2112"><vh>Test of app.gui.runAboutLeoDialog</vh></v>
<v t="edream.110203161858.2113"><vh>Test of app.gui.runAskOkDialog</vh></v>
<v t="edream.110203161858.2114"><vh>Test of app.gui.runAskOkCancelNumberDialog</vh></v>
<v t="edream.110203161858.2115"><vh>Test of app.gui.runAskYesNoDialog</vh></v>
<v t="edream.110203161858.2116"><vh>Test of app.gui.runAskYesNoCancelDialog</vh></v>
</v>
<v t="edream.110503093114"><vh>Binary file test</vh>
<v t="edream.110403171311" tnodeList="edream.110403171311"><vh>@file c:\prog\test\binaryText.txt</vh></v>
</v>
<v t="edream.110203161858.2117"><vh>@nonl in @doc parts</vh>
<v t="edream.110203161858.2118" tnodeList="edream.110203161858.2118"><vh>@file c:\prog\test\docTest.txt</vh></v>
</v>
</v>
</v>
<v t="edream.110203161858.2102"><vh>Scripts...</vh>
<v t="edream.110203161858.2103"><vh>Script to find which modules define names</vh></v>
<v t="edream.110203161858.2104"><vh>Script to compare 3.x and 4.x derived files</vh></v>
<v t="edream.110803170022"><vh>Count pages</vh></v>
<v t="edream.120203185502" tnodeList="edream.120203185502"><vh>PyUno script</vh></v>
</v>
<v t="edream.110203161858.2119"><vh>Unit Tests</vh>
<v t="edream.110203161858.2120"><vh>Bug reports</vh>
<v t="edream.110203161858.2121"><vh>Colorizer</vh>
<v t="edream.110203161858.2122"><vh> Report</vh></v>
</v>
</v>
<v t="edream.110203161858.2123"><vh>Test data</vh>
<v t="edream.110203161858.2124"><vh>tempNode</vh></v>
<v t="edream.110203161858.2125"><vh>colorizerTests</vh>
<v t="edream.110203161858.2126"><vh>Actionscript</vh></v>
<v t="edream.110203161858.2127"><vh>C</vh></v>
<v t="edream.110203161858.2128"><vh>CWEB</vh>
<v t="edream.110203161858.2129"><vh>&lt;&lt; section ref &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.2130"><vh>HTML1</vh></v>
<v t="edream.110203161858.2131"><vh>HTML2</vh></v>
<v t="edream.110203161858.2132"><vh>LaTex</vh></v>
<v t="edream.110203161858.2133"><vh>Mixed</vh></v>
<v t="edream.110203161858.2134"><vh>PHP</vh></v>
<v t="edream.110203161858.2135"><vh>Python1</vh></v>
<v t="edream.110203161858.2136"><vh>Python2</vh></v>
<v t="edream.110203161858.2137"><vh>Rebol</vh></v>
<v t="edream.110203161858.2138"><vh>wikiTest1</vh></v>
<v t="edream.110203161858.2139"><vh>wikiTest2</vh></v>
<v t="edream.110203161858.2140"><vh>wikiTest3</vh></v>
</v>
<v t="edream.110203161858.2141"><vh>editBodyTests</vh>
<v t="edream.110203161858.2142"><vh>dedentBody</vh>
<v t="edream.110203161858.2143"><vh>before</vh></v>
<v t="edream.110203161858.2144"><vh>after</vh></v>
</v>
<v t="edream.110203161858.2145"><vh>indentBody</vh>
<v t="edream.110203161858.2146"><vh>before</vh></v>
<v t="edream.110203161858.2147"><vh>after</vh></v>
</v>
</v>
<v t="edream.110203161858.2148"><vh>outlineTests</vh>
<v t="edream.110203161858.2149"><vh>moveOutlineDown</vh></v>
<v t="edream.110203161858.2150"><vh>moveOutlineLeft</vh></v>
<v t="edream.110203161858.2151"><vh>moveOutlineRight</vh></v>
<v t="edream.110203161858.2152"><vh>moveOutlineUp</vh></v>
</v>
<v t="edream.110903064653"><vh>testLeoFiles</vh>
<v t="edream.110903064653.1"><vh>c:\prog\leoCvs\leo\test\test.leo</vh></v>
<v t="edream.110903064653.2"><vh>c:\prog\leoCvs\leo\src\LeoPy.leo</vh></v>
<v t="edream.110903064653.3"><vh>c:\prog\leoCvs\leo\plugins\leoPlugins.leo</vh></v>
<v t="edream.110903064653.4"><vh>c:\prog\leoCvs\leo\doc\LeoDocs.leo</vh></v>
</v>
</v>
<v t="edream.110203161858.2153"><vh>Drivers</vh>
<v t="edream.110903064653.5"><vh>run testLeo tests</vh></v>
<v t="edream.110203161858.2154"><vh>run color tests</vh></v>
<v t="edream.110203161858.2155"><vh>run edit body tests</vh></v>
<v t="edream.110203161858.2156"><vh>run outline tests</vh></v>
</v>
</v>
<v t="edream.111803061611"><vh>4.1 beta 3 tests</vh>
<v t="edream.110903121744"><vh>Latex colorizer</vh></v>
<v t="edream.111103091713"><vh>Test of match brackets</vh></v>
<v t="edream.111303082913"><vh>Redirect script output</vh></v>
</v>
<v t="edream.112003103554"><vh>4.1 beta 4 tests</vh>
<v t="edream.111903143504" tnodeList="edream.111903143504,edream.111903143504.1,edream.111903144347"><vh>Handle Leo constructs when executing scripts</vh>
<v t="edream.111903144347" tnodeList="edream.111903144347"><vh>&lt;&lt; ref &gt;&gt;</vh></v>
<v t="edream.111903143504.1" tnodeList="edream.111903143504.1"><vh>more</vh></v>
</v>
<v t="edream.111803110909"><vh>Two refs on the same line</vh>
<v t="edream.111803110909.1" a="M" tnodeList="edream.111803110909.1,edream.111803110909.2,edream.111803110909.3,edream.111803110909.2,edream.111803110909.3"><vh>@file c:\prog\test\ref.txt</vh>
<v t="edream.111803110909.2"><vh>&lt;&lt; rhs &gt;&gt;</vh></v>
<v t="edream.111803110909.3"><vh>&lt;&lt; rhe &gt;&gt;</vh></v>
</v>
</v>
<v t="edream.112003090130" tnodeList="edream.112003090130,edream.112003090753"><vh>Script crash</vh>
<v t="edream.112003090753"><vh>test</vh></v>
</v>
<v t="edream.112003094004" a="M" tnodeList="edream.112003094004,edream.112003094004.1,edream.112003094004.1,edream.112003094004.1,edream.112003094004.1"><vh>Another test script</vh>
<v t="edream.112003094004.1"><vh>&lt;&lt; 2 &gt;&gt;</vh></v>
</v>
<v t="edream.110203161858.2090" tnodeList="edream.110203161858.2090,edream.110203161858.2091,edream.110203161858.2092"><vh>@nosentinelsfile c:\prog\test\nosentinelstest.txt</vh>
<v t="edream.110203161858.2091"><vh>&lt;&lt; ref &gt;&gt;</vh></v>
<v t="edream.110203161858.2092"><vh>others</vh></v>
</v>
</v>
<v t="edream.120303092653"><vh>4.1 beta 5 tests</vh>
<v t="edream.112203144347" tnodeList="edream.112203144347"><vh>@file ..\test\batchScript.py</vh></v>
<v t="edream.112303064255"><vh>Extract section test</vh></v>
<v t="edream.112303110337"><vh>Change all headlines/Undo test</vh>
<v t="edream.112303110337.1"><vh>a</vh></v>
<v t="edream.112303110337.2"><vh>Ba</vh></v>
<v t="edream.112303110337.3"><vh>Ca</vh></v>
</v>
<v t="edream.120203151550"><vh>@url file:../doc/LeoDocs.leo</vh></v>
<v t="edream.120303093019" tnodeList="edream.120303093019,edream.120303093527,edream.120303093527.1"><vh>@file c:\prog\test\atFirstLastTest.txt</vh>
<v t="edream.120303093527"><vh>&lt;&lt; ref &gt;&gt;</vh></v>
<v t="edream.120303093527.1"><vh>others</vh></v>
</v>
<v t="edream.120403143517" tnodeList="edream.120403143517"><vh>@file c:\prog\test\chineseèfolder\chineseètest.txt</vh></v>
</v>
<v t="edream.120603125057" a="E"><vh>4.1 beta 6 tests</vh>
<v t="edream.120603112201" a="E"><vh>clone-drag bug</vh>
<v t="edream.120603112201.1" a=""><vh>a</vh>
<v t="edream.120603112201.3"><vh>f</vh></v>
<v t="edream.120603112201.2"><vh>b</vh></v>
<v t="edream.120603113726"><vh>c</vh></v>
</v>
<v t="edream.120603112201.1" a=""><vh>a</vh>
<v t="edream.120603112201.3"><vh>f</vh></v>
<v t="edream.120603112201.2"><vh>b</vh></v>
<v t="edream.120603113726"><vh>c</vh></v>
</v>
</v>
<v t="edream.120603125159"><vh>ItemTemplate</vh>
<v t="edream.120603125159.1"><vh>&lt;&lt; html_body &gt;&gt;</vh>
<v t="edream.120603125159.2"><vh>&lt;&lt; head  &gt;&gt;</vh></v>
<v t="edream.120603125159.3"><vh>&lt;&lt; body &gt;&gt;</vh>
<v t="edream.120603125159.4"><vh>&lt;&lt; form &gt;&gt;</vh>
<v t="edream.120603125159.5"><vh>&lt;&lt; xsl_var_initialisation &gt;&gt;</vh></v>
<v t="edream.120603125159.6"><vh>&lt;&lt; status &gt;&gt;</vh></v>
<v t="edream.120603125159.7"><vh>&lt;&lt; tabs &gt;&gt;</vh></v>
<v t="edream.120603125159.8"><vh>&lt;&lt; policy_selector &gt;&gt;</vh>
<v t="edream.120603125159.9"><vh>&lt;&lt; policy_category &gt;&gt;</vh></v>
<v t="edream.120603125159.10"><vh>&lt;&lt; policy &gt;&gt;</vh></v>
</v>
<v t="edream.120603125159.11" a="M"><vh>&lt;&lt; table_container &gt;&gt;</vh>
<v t="edream.120603125159.12"><vh>&lt;&lt; dynamic_zone &gt;&gt;</vh>
<v t="edream.120603125159.13" a="M"><vh>&lt;&lt; date &gt;&gt;</vh>
<v t="edream.120603125159.14"><vh>&lt;&lt; date_error &gt;&gt;</vh></v>
<v t="edream.120603125159.15"><vh>&lt;&lt; from_date &gt;&gt;</vh></v>
<v t="edream.120603125159.16"><vh>&lt;&lt; to_date &gt;&gt;</vh></v>
<v t="edream.120603125159.17"><vh>&lt;&lt; taxpoint &gt;&gt;</vh></v>
<v t="edream.120603125159.18"><vh>&lt;&lt; calendar_jscript &gt;&gt;</vh></v>
</v>
<v t="edream.120603125159.19"><vh>&lt;&lt; quantity &gt;&gt;</vh>
<v t="edream.120603125159.20"><vh>&lt;&lt; item_quantity &gt;&gt;</vh></v>
<v t="edream.120603125159.21"><vh>&lt;&lt; person_quantity &gt;&gt;</vh></v>
</v>
<v t="edream.120603125159.22"><vh>&lt;&lt; employee &gt;&gt;</vh>
<v t="edream.120603125159.23"><vh>&lt;&lt; emp_titles &gt;&gt;</vh></v>
<v t="edream.120603125159.24"><vh>&lt;&lt; emp_records &gt;&gt;</vh></v>
<v t="edream.120603125159.25"><vh>&lt;&lt; emp_add_row &gt;&gt;</vh></v>
</v>
<v t="edream.120603125159.26"><vh>&lt;&lt; nonemployee &gt;&gt;</vh>
<v t="edream.120603125159.27"><vh>&lt;&lt; nonemp_titles &gt;&gt;</vh></v>
<v t="edream.120603125159.28"><vh>&lt;&lt; nonemp_records &gt;&gt;</vh></v>
<v t="edream.120603125159.29"><vh>&lt;&lt; nonemp_add_row &gt;&gt;</vh></v>
</v>
<v t="edream.120603125159.30"><vh>&lt;&lt; allowance &gt;&gt;</vh></v>
<v t="edream.120603125159.31"><vh>&lt;&lt; calc_explanation &gt;&gt;</vh></v>
<v t="edream.120603125159.32"><vh>&lt;&lt; home_value &gt;&gt;</vh>
<v t="edream.120603125159.33"><vh>&lt;&lt; hv_currency_label &gt;&gt;</vh></v>
<v t="edream.120603125159.34"><vh>&lt;&lt; hv_currency_value &gt;&gt;</vh></v>
<v t="edream.120603125159.35"><vh>&lt;&lt; hv_value_label &gt;&gt;</vh></v>
<v t="edream.120603125159.36"><vh>&lt;&lt; hv_value &gt;&gt;</vh></v>
</v>
<v t="edream.120603125159.37"><vh>&lt;&lt; foreign_value &gt;&gt;</vh>
<v t="edream.120603125159.38"><vh>&lt;&lt; fv_error &gt;&gt;</vh></v>
<v t="edream.120603125159.39"><vh>&lt;&lt; fv_currency_label &gt;&gt;</vh></v>
<v t="edream.120603125159.40"><vh>&lt;&lt; fv_currency_value &gt;&gt;</vh></v>
<v t="edream.120603125159.41"><vh>&lt;&lt; fv_exchange_rate_label &gt;&gt;</vh></v>
<v t="edream.120603125159.42"><vh>&lt;&lt; fv_exchange_rate_value &gt;&gt;</vh></v>
<v t="edream.120603125159.43"><vh>&lt;&lt; fv_value_label &gt;&gt;</vh></v>
<v t="edream.120603125159.44"><vh>&lt;&lt; fv_value &gt;&gt;</vh></v>
</v>
<v t="edream.120603125159.45"><vh>&lt;&lt; vat &gt;&gt;</vh>
<v t="edream.120603125159.46"><vh>&lt;&lt; vat_flag &gt;&gt;</vh></v>
<v t="edream.120603125159.47"><vh>&lt;&lt; vat_rate &gt;&gt;</vh></v>
<v t="edream.120603125159.48"><vh>&lt;&lt; vat_value &gt;&gt;</vh></v>
<v t="edream.120603125159.49"><vh>&lt;&lt; vat_reason&gt;&gt;</vh></v>
<v t="edream.120603125159.50"><vh>&lt;&lt; vat_comment &gt;&gt;</vh></v>
</v>
<v t="edream.120603125159.51"><vh>&lt;&lt; comment &gt;&gt;</vh></v>
<v t="edream.120603125159.52"><vh>&lt;&lt; supplier &gt;&gt;</vh>
<v t="edream.120603125159.53"><vh>&lt;&lt; preferred_supplier &gt;&gt;</vh></v>
<v t="edream.120603125159.54"><vh>&lt;&lt; other_supplier &gt;&gt;</vh></v>
</v>
<v t="edream.120603125159.55"><vh>&lt;&lt; user_defined &gt;&gt;</vh>
<v t="edream.120603125159.56"><vh>&lt;&lt; udf1 &gt;&gt;</vh></v>
<v t="edream.120603125159.57"><vh>&lt;&lt; udf2 &gt;&gt;</vh></v>
<v t="edream.120603125159.58"><vh>&lt;&lt; udf3 &gt;&gt;</vh></v>
<v t="edream.120603125159.59"><vh>&lt;&lt; udf4 &gt;&gt;</vh></v>
</v>
<v t="edream.120603125159.60"><vh>&lt;&lt; charge &gt;&gt;</vh>
<v t="edream.120603125159.61"><vh>&lt;&lt; charge_titles &gt;&gt;</vh></v>
<v t="edream.120603125159.62"><vh>&lt;&lt; charge_unallocated_row &gt;&gt;</vh></v>
<v t="edream.120603125159.63"><vh>&lt;&lt; charge_records &gt;&gt;</vh></v>
<v t="edream.120603125159.64"><vh>&lt;&lt; charge_add_row &gt;&gt;</vh></v>
</v>
<v t="edream.120603125159.65"><vh>&lt;&lt; buttons &gt;&gt;</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="edream.110203161858">@color

# **** Run this from test.leo ****

# Run pychecker from idle.
if 1:
	import pychecker.checker
	import leo
@nocolor
Documentation
	- Update readme.txt
	- Update LeoDocs.leo
	- Update web site.
Version numbers
	- Update version number in Help menu.
	- Update version number in setup.py (@ignore'd!!)
	** Make sure the top-level directory has no spaces in its name.
@color

if 1: # Save all files and tangle leoConfig.leo
	from leoGlobals import importFromPath
	preSetup = importFromPath("preSetup","c:\prog\leoCvs\leo")
	preSetup.setup()

if 1: # Replace config settings and create .zip file.
	import os
	os.system(r"c:\python22\python c:\prog\leoCvs\leo\setup.py sdist --formats=zip")

@nocolor
Create and test leosetup.exe.
	- Create leosetup.exe by right-clicking leo.nsi and choosing "compile with NSI (bz2)"
	- Test created leosetup.exe file.
	- test the files created in c:\program files\leo

@color
# **** Scan all folders &amp; files before uploading.
@nocolor

Create Release on SourceForge

Uploads
    - Upload leodocs.zip
	- Upload leosetup.exe
	- Upload leo-x-y.zip
	- Upload sbook.chm if it has been changed.
Announcements
	- Announce to SourceForge itself. USE ANNOUNCEMENT FORMAT, not readme format.
	- Announce to Leo's SourceForce site.
	- Announce to comp.lang.python
	- Announce to comp.programming.literate
	- Register Leo at http://www.python.org/pypi?:action=submit_form</t>
<t tx="edream.110203161858.1"></t>
<t tx="edream.110203161858.2"></t>
<t tx="edream.110203161858.3">@nocolor

Personally, I nominate timeit.py as THE outstanding enhancement of Python 2.3
-- I love many of the others (the performance improvement in particular), but
timeit.py is the one I find myself using all of the time -- seems to provide an
innocuous way for programmers' typical obsession with performance and
micro-optimization to discharge itself harmlessly, cleansing their souls to
choose idioms on the basis of clarity, maintainability and readability, as of
course SHOULD be done :-)</t>
<t tx="edream.110203161858.4">import ImageGrab,os # requires PIL 1.1.3 or later

path = os.path.join(app().loadDir,"../","test","screenshot.gif")

ImageGrab.grab().save(path)
</t>
<t tx="edream.110203161858.5"># Sample defaults file for PyChecker 0.8.13
# This file should be called:  .pycheckrc
# It should be placed in your home directory (value of $HOME).
# If $HOME is not set, it will look in the current directory.

# file = c:/prog/leoCVS/leo/src/leo.py

# bool: warnings for Doc Strings
noDocModule = 0
noDocClass = 0
noDocFunc = 0

# bool: when checking if class data members (attributes) are set
#       check all members or __init__() only
onlyCheckInitForMembers = 0

# bool: warn when all module variables are not used (including private vars)
allVariablesUsed = 0

# bool: produce warnings for each occurrence of a warning for global (xxx)
reportAllGlobals = 0

# bool: warn when private module variables are not used (_var)
privateVariableUsed = 1

# bool: warn when imports are not used
importUsed = 1

# bool: warn when import and from ... import are used for same module
mixImport = 0 # EKR

# bool: warn when imports are not used in __init__.py
packageImportUsed = 1

# bool: warn when a module reimports another module (import &amp; from/import)
moduleImportErrors = 0 # EKR

# bool: warn when modules import themselves
reimportSelf = 0 # EKR

# bool: warn when local variables are not used
localVariablesUsed = 1

# bool:  assume a, b, and c are used in this case:  a, b, c = func()
unusedLocalTuple = 0

# bool:  warn when class attributes (data members) are unused
membersUsed = 0

# bool: warn when Subclass.__init__ is not called in a subclass
baseClassInitted = 1

# bool: warn when Subclass needs to override methods that only throw exceptions
abstractClasses = 1

# bool: warn when __init__ is defined in a subclass
initDefinedInSubclass = 0

# bool: warn when __init__ returns None
returnNoneFromInit = 1

# bool: warn when code is not reachable
unreachableCode = 0

# bool: warn when a constant is used in a conditional statement (if '':)
constantConditions = 1

# bool: warn when 1 is used in a conditional statement, (if 1: while 1: etc)
constant1 = 0

# bool: warn when iterating over a string in a for loop
stringIteration = 1

# bool: warn when setting a variable to different types
inconsistentTypes = 0

# bool: warn when setting a tuple of variables to a non-sequence (a, b = None)
unpackNonSequence = 1

# bool: warn when setting a tuple of variables to the wrong length (a, b = 1,)
unpackLength = 1

# bool: warn when using strings exceptions or 
#       other classes not derived from Exception to raise/catch exceptions
badExceptions = 1

# bool: warn when statements appear to have no effect
noEffect = 1

# bool: warn when using (expr % 1), it has no effect on integers and strings
modulo1 = 1

# bool: warn if using (expr is const-literal), 
# doesn't always work on integers and strings
isLiteral = 0 # EKR

# bool: warn when using a deprecated module or function
deprecated = 1

# bool: warn when the class attribute does not exist
classAttrExists = 1

# bool: warn when calling an attribute not a method
callingAttribute = 0

# bool: warn when using named arguments: func(a=1, b=2), where def func(a, b):
#       def func2(a, b, **kw): doesn't generate a warning
namedArgs = 0 # EKR

# str: name of 'self' parameter
methodArgName = 'self'

# list of str: names of first parameter to classmethods
## classmethodArgNames = ['cls', 'klass']

# bool: warn when method/function arguments are unused
argumentsUsed = 1

# bool: ignore if self is unused in methods
ignoreSelfUnused = 0

# bool: warn if functions/classes/methods names are redefined in same scope
redefiningFunction = 1

# bool:  check if an overriden method has the same signature
#	 as base class method (__init__() methods are not checked)
checkOverridenMethods = 1

# bool:  check if a special (reserved) method has the correct signature
#	 and is known (these are methods that begin and end with __
## checkSpecialMethods = 1

# int: warnings for code complexity, max value before generating a warning
maxLines = 2000
maxBranches = 500
maxReturns = 100
maxArgs = 100
maxLocals = 250
maxReferences = 500

# bool:  ignore all warnings from standard library components
#	 (this includes anything under the standard library, eg, site-packages)
ignoreStandardLibrary = 1 # EKR

# list of strings: ignore unused locals/arguments if name is one of
unusedNames = [
	'_', 'empty', 'unused', 'dummy', 'event', 'commander',
	'c', 'i', 'j', 'k', 's',
	'tag', 'args', 'keys', 'keywords']

# list of strings: ignore warnings generated from these modules
blacklist = [
	'leoGlobals',
	'leoConfig',
	'leoFrame', 'leoMenu', 'leoGui', # Base classes have lots of unused params.
	'Tkinter', 'wxPython', 'gtk', 'GTK', 'GDK', ]

# list of strings: ignore global variables not used if name is one of
variablesToIgnore = [ '__all__', '__version__', '__copyright__', ]

# bool: print the PyChecker parse of modules, classes, etc.
printParse = 0

# bool: turn debugging of PyChecker on
debug = 0

# bool: check that attributes of objects exist
checkObjectAttrs = 1

# bool: various warnings about incorrect usage of __slots__
slots = 1

# bool: check if __slots__ is empty
emptySlots = 1

# bool: check for using properties in classic classes
classicProperties = 1

# bool: check for integer division (may be problem between Python versions)
intDivide = 1

# bool: check if local variables shadow a global variable with same name
shadows = 0 # EKR

# bool: check if input() is used, which is a security problem, use raw_input()
usesInput = 1

# bool: check if using a constant string to getattr()/setattr()
# Doesn't exist.
## constAttr = 1

# bool: check for using +variable, since it is almost always has no effect
unaryPositive = 1

# bool: check for modifying a parameter with a default value
#       (value must be: list, dict, instance)
#       modifying the value may have undesirable/unexpected side-effects
modifyDefaultValue = 1

# bool: check if the exec statement is used (possible security problem)
usesExec = 0

# bool: check consistent return values
checkReturnValues = 1

# bool: check if using implict and explicit return values
checkImplicitReturns = 1

# dict: suppress warnings, key is module.class.method or module.function
#	value is a string of command line arguments (can omit -- for long args)
#       { 'module1': 'no-namedargs maxlines=0',
#	  'module2.my_func': 'argsused',
#	  'module3.my_class': 'no-initreturn', }
if 1:
	suppressions = {}
else: # Doesn't work
	suppressions = {
		'leoFrame' : 'argumentsUsed=0',
		'leoGui' : 'argumentsUsed=0' }

# dict: suppress warnings where keys can be regular expressions
suppressionRegexs = {}</t>
<t tx="edream.110203161858.6">@ignore</t>
<t tx="edream.110203161858.7"></t>
<t tx="edream.110203161858.8"></t>
<t tx="edream.110203161858.9">def a</t>
<t tx="edream.110203161858.10">def Ã</t>
<t tx="edream.110203161858.11">@ignore</t>
<t tx="edream.110203161858.12">The child node should be an orpan.</t>
<t tx="edream.110203161858.13"></t>
<t tx="edream.110203161858.14">import leoAtFile,leoCommands

c = leoCommands.Commands(frame=None,fileName=None)
at = leoAtFile.atFile(c)
print at.new_df.sentinelName(leoAtFile.startAfterRef)</t>
<t tx="edream.110203161858.15">from leoGlobals import *

reportBadChars ("Ã«","ascii")
</t>
<t tx="edream.110203161858.16">@ignore</t>
<t tx="edream.110203161858.17">@first first line1
@first first line2
@pagewidth 40
@ Class to read and write @file nodes.

This code uses readline() to get each line rather than reading the entire file into a buffer.  This is more memory efficient and saves us from having to scan for the end of each line.  The result is cleaner and faster code.  This code also accumulates body text line-by-line rather than character-by-character, a much faster way.

w012345678901234567890123456789012345678901234567890123456789

and w012345678901234567890123456789012345678901234567890123456789 in the middle.

Trailing line.
@c

# gnxText.txt  2

before
&lt;&lt; ref &gt;&gt; afterref
middle
	&lt;&lt; ref2 &gt;&gt;
after
	@others
	beforref &lt;&lt; ref &gt;&gt;
after at-others
@last last line1
@last last line2
</t>
<t tx="edream.110203161858.18">ref line 1
ref line 2</t>
<t tx="edream.110203161858.19">ref2 line</t>
<t tx="edream.110203161858.20"></t>
<t tx="edream.110203161858.21">@ Doc part
doc part line 2
@c
	indented node 1 line 1
node 2 line 2
#@ should be a verbatim line.
	&lt;&lt; indented ref &gt;&gt;
after indented ref</t>
<t tx="edream.110203161858.22">indented ref line</t>
<t tx="edream.110203161858.23"></t>
<t tx="edream.110203161858.24">node 2 line 1
node 2 line 2
</t>
<t tx="edream.110203161858.25"></t>
<t tx="edream.110203161858.26">@others</t>
<t tx="edream.110203161858.27">@wrap

this should wrap aaaaaaaaaaaaaaaaaaa bbbbbbbbbbbbbbbbbbbbb cccccccccccccccccc ddddddddddddddddddd eeeeeeeeeeeeeeeeeeeeee ffffffffffffffffffff</t>
<t tx="edream.110203161858.28">@nowrap

this should NOT wrap aaaaaaaaaaaaaaaaaaa bbbbbbbbbbbbbbbbbbbbb cccccccccccccccccc ddddddddddddddddddd eeeeeeeeeeeeeeeeeeeeee ffffffffffffffffffff</t>
<t tx="edream.110203161858.29"></t>
<t tx="edream.110203161858.30">@ignore</t>
<t tx="edream.110203161858.31">@nocolor
This is a test file
@others</t>
<t tx="edream.110203161858.32">Node one text.  changed 2.</t>
<t tx="edream.110203161858.33">@ignore</t>
<t tx="edream.110203161858.34"></t>
<t tx="edream.110203161858.35"></t>
<t tx="edream.110203161858.36">@others</t>
<t tx="edream.110203161858.37">def __init__ (self):
	
	pass # line 9</t>
<t tx="edream.110203161858.38">def __init__ (self):
	
	pass # line 16</t>
<t tx="edream.110203161858.39">root line 1

&lt;&lt; ref 1 &gt;&gt;
after ref1 line 1
    after ref2 line 2 indented

@others

root last line.
</t>
<t tx="edream.110203161858.40">    ref 1 line 1</t>
<t tx="edream.110203161858.41">    node 1 line 1</t>
<t tx="edream.110203161858.42">    node 2 line 1</t>
<t tx="edream.110203161858.43">@ignore</t>
<t tx="edream.110203161858.44"></t>
<t tx="edream.110203161858.45"></t>
<t tx="edream.110203161858.46"># The following corrupts the outline: extract section, undo.

&lt;&lt; test &gt;&gt;
line 1
	line 2

	after
</t>
<t tx="edream.110203161858.47"># The following corrupts the outline: extract section, undo.

&lt;&lt; test &gt;&gt;
line 1
	line 2

	after

</t>
<t tx="edream.110203161858.48"></t>
<t tx="edream.110203161858.49">line 1
&lt;&lt; sec &gt;&gt;
	line s1
line 2
	indented</t>
<t tx="edream.110203161858.50"></t>
<t tx="edream.110203161858.51">from leoGlobals import *
import leoDialog

if 1: # passed
	print leoDialog.askOk(
		"My Test Dialog",
		"Please hit return to test this dialog.",
		text="whoopee",
		resizeable=false).run(modal=true)
	
if 1: # passed
	message = "leo.py requires Python 2.1 or higher"
	print leoDialog.askOk("Python version error",message=message,text="Exit").run(modal=true)
	
if 1: # passed
	fileName = "xyzzy"
	print leoDialog.askOk("Read-only ouline",
		"Warning: the outline: " + fileName + " is read-only.").run(modal=true)</t>
<t tx="edream.110203161858.52">from leoGlobals import *
import leoDialog

ver = "version 3.14159 "
build = "-3.8" 
version = "leo.py 4.0 alpha 2, Build " + build + ", June 13, 2003\n\n"
copyright = (
	"Copyright 1999-2003 by Edward K. Ream\n" +
	"All Rights Reserved\n" +
	"Leo is distributed under the Python License")
url = "http://webpages.charter.net/edreamleo/front.html"
email = "edreamleo@charter.net"

leoDialog.aboutLeo(version,copyright,url,email).run(modal=false)</t>
<t tx="edream.110203161858.53">import leoDialog

print leoDialog.askLeoID().run(modal=1)</t>
<t tx="edream.110203161858.54">import leoDialog

print leoDialog.askOkCancelNumber("Enter Line Number","Line number:").run(modal=1)
</t>
<t tx="edream.110203161858.55">import leoDialog

print leoDialog.askOkCancel("Proceed?",
	"Read @file Nodes is not undoable.\nProceed?").run(modal=1)</t>
<t tx="edream.110203161858.56">import leoDialog

if 1: # passed
	message = "Replace changed outline with external changes?"
	print leoDialog.askYesNo("Conflict!",message).run(modal=1)
	
if 1: # passed
	print leoDialog.askYesNo("Revert",
		"Revert to previous version of xyzzy?").run(modal=1)
		
if 1: # passed
	print leoDialog.askYesNo(
		"Download Tutorial?",
		"Download tutorial (sbooks.chm) from SourceForge?").run(modal=1)</t>
<t tx="edream.110203161858.57">import leoDialog

if 1: # passed
	print leoDialog.askYesNoCancel("Confirm",
		'Save changes to xyzzy before crashing?').run(modal=1)
		
if 1: # passed
	message = (
		"Conflicting changes in outline and temp file\n\n" +
		"Do you want to use the code in the outline or the temp file?\n\n")
	
	print leoDialog.askYesNoCancel(
		"Conflict!", message,
		yesMessage = "Outline",
		noMessage = "File",
		defaultButton = "Cancel").run(modal=1)</t>
<t tx="edream.110203161858.58"></t>
<t tx="edream.110203161858.59">@encoding iso-8859-1</t>
<t tx="edream.110203161858.60">@others

This is an umlaute Ã«</t>
<t tx="edream.110203161858.61"></t>
<t tx="edream.110203161858.62">@lineending nl         (the default, Linux)
@lineending cr         (Mac)
@lineending crlf       (Windows)
@lineending lf          (same as nl, not recommended)
@lineending platform (same as platform value for output_newline setting in leoConfig.txt)

@encoding utf-8</t>
<t tx="edream.110203161858.63"></t>
<t tx="edream.110203161858.64"></t>
<t tx="edream.110203161858.65">@ Enabling or disabling @language or @comment now recolors entire text.</t>
<t tx="edream.110203161858.66">@language c
 @comment /* */

/* comment */
# test</t>
<t tx="edream.110203161858.67">@ignore

@

We need both incremental and full syntax coloring...

We must do a _full_ recoloring when selecting any node, even for two cloned nodes, because the nodes may have different contexts.

Furthermore, at present undo must always do a full recoloring because setBodyStringOrPane just replaces the old text with the new, and that destroys all the coloring tags.  The only possible solution would be to do an "incremental update" in setBodyStringOrPane.  It would also be good to do that in tree.select.

The present code _is_ faster than the old code because it avoids redundant drawing.</t>
<t tx="edream.110203161858.68"></t>
<t tx="edream.110203161858.69"># This creates a free-floating copy of v's tree for undo.
# The copied trees must use different tnodes than the original.

def copyTree(self,root):

    c = self
    # Create the root vnode.
    result = v = leoNodes.vnode(c,root.t)
        # Copy the headline and icon values v.copyNode(root,v)
        # Copy the rest of tree.
        v.copyTree(root,v)
    # Replace all tnodes in v by copies.
    assert(v.nodeAfterTree() == None)
    while v:
        v.t = leoNodes.tnode(0, v.t.bodyString)
        v = v.threadNext()
    return result
    
# This creates a free-floating copy of v's tree for undo.
# The copied trees must use different tnodes than the original.

def copyTree(self,root):

    c = self
    # Create the root vnode.
    result = v = leoNodes.vnode(c,root.t)

	# Copy the headline and icon values
    v.copyNode(root,v)
    # Copy the rest of tree.
        v.copyTree(root,v)
    # Replace all tnodes in v by copies.
    assert(v.nodeAfterTree() == None)
    while v:
        v.t = leoNodes.tnode(0, v.t.bodyString)
        v = v.threadNext()
    return result</t>
<t tx="edream.110203161858.70">@language c</t>
<t tx="edream.110203161858.71">@
This is just a test
@c
aprocedure(
	a,
	b )
	{
	printf( "Hello, world\n" );
	return 0;
}

"/* testing */"
@#
bprocedure(
	a,
	b )
	{
	printf( "Hello, world\n" );
	return 0;
}

@#
cprocedure(
	a,
	b )
	{
	printf( "Hello, world\n" );
	return 0;
}

@#
dprocedure(
	a,
	b )
	{
	printf( "Hello, world\n" );
	return 0;
}

@#
int main()
{
  return 0
}</t>
<t tx="edream.110203161858.72">Here's another issue

Create a @file node[snip]

You should see the &lt;!-- test --&gt; in 'red' (comment color).

Now backspace over 'html' in the language directive and type 'xml'.  

The bug is that XML is not a valid Leo language but the comment is still 'red'.
If you go to another node and come back it changes back to black type.  Now
change the language back to 'html'.  It doesn't recolorize and the comment remains
black.

This is a nit, really.
</t>
<t tx="edream.110203161858.73">@language html
&lt;? xml version="1.0"&gt;
&lt;!-- test --&gt;
&lt;project name="Converter" default="dist"&gt;
&lt;/project&gt;</t>
<t tx="edream.110203161858.74">def colorizeAnyLanguage (self,v,body,language,flag):
	
	try:		
		self.incremental = 1
		&lt;&lt; initialize ivars &amp; tags &gt;&gt;
		if self.incremental:
			&lt;&lt; incrementally color the text &gt;&gt;
		else:
			self.removeAllTags()
			n = 1 # The Tk line number for indices, as in n.i
			for s in lines:
				state = self.colorizeLine(s,n,state)
				n += 1		
	except:
		es_exception()
def colorizeAnyLanguage (self,v,body,language,flag):
	
	try:
		self.incremental = 1
		&lt;&lt; initialize ivars &amp; tags &gt;&gt;
		if self.incremental:
			&lt;&lt; incrementally color the text &gt;&gt;
		else:
			self.removeAllTags()
			n = 1 # The Tk line number for indices, as in n.i
			for s in lines:
				state = self.colorizeLine(s,n,state)
				n += 1		
	except:
		es_exception()
def colorizeAnyLanguage (self,v,body,language,flag):
	
	try:
		self.incremental = 1
		&lt;&lt; initialize ivars &amp; tags &gt;&gt;
		if self.incremental:
			&lt;&lt; incrementally color the text &gt;&gt;
		else:
			self.removeAllTags()
			n = 1 # The Tk line number for indices, as in n.i
			for s in lines:
				state = self.colorizeLine(s,n,state)
				n += 1		
	except:
		es_exception()
def colorizeAnyLanguage (self,v,body,language,flag):
	
	try:
		self.incremental = 1
		&lt;&lt; initialize ivars &amp; tags &gt;&gt;
		if self.incremental:
			&lt;&lt; incrementally color the text &gt;&gt;
		else:
			self.removeAllTags()
			n = 1 # The Tk line number for indices, as in n.i
			for s in lines:
				state = self.colorizeLine(s,n,state)
				n += 1		
	except:
		es_exception()
def colorizeAnyLanguage (self,v,body,language,flag):
	
	try:
		self.incremental = 1
		&lt;&lt; initialize ivars &amp; tags &gt;&gt;
		if self.incremental:
			&lt;&lt; incrementally color the text &gt;&gt;
		else:
			self.removeAllTags()
			n = 1 # The Tk line number for indices, as in n.i
			for s in lines:
				state = self.colorizeLine(s,n,state)
				n += 1		
	except:
		es_exception()
def colorizeAnyLanguage (self,v,body,language,flag):
	
	try:
		self.incremental = 1
		&lt;&lt; initialize ivars &amp; tags &gt;&gt;
		if self.incremental:
			&lt;&lt; incrementally color the text &gt;&gt;
		else:
			self.removeAllTags()
			n = 1 # The Tk line number for indices, as in n.i
			for s in lines:
				state = self.colorizeLine(s,n,state)
				n += 1		
	except:
		es_exception()
def colorizeAnyLanguage (self,v,body,language,flag):
	
	try:
		self.incremental = 1
		&lt;&lt; initialize ivars &amp; tags &gt;&gt;
		if self.incremental:
			&lt;&lt; incrementally color the text &gt;&gt;
		else:
			self.removeAllTags()
			n = 1 # The Tk line number for indices, as in n.i
			for s in lines:
				state = self.colorizeLine(s,n,state)
				n += 1		
	except:
		es_exception()
def colorizeAnyLanguage (self,v,body,language,flag):
	
	try:
		self.incremental = 1
		&lt;&lt; initialize ivars &amp; tags &gt;&gt;
		if self.incremental:
			&lt;&lt; incrementally color the text &gt;&gt;
		else:
			self.removeAllTags()
			n = 1 # The Tk line number for indices, as in n.i
			for s in lines:
				state = self.colorizeLine(s,n,state)
				n += 1		
	except:
		es_exception()
def colorizeAnyLanguage (self,v,body,language,flag):
	
	try:
		self.incremental = 1
		&lt;&lt; initialize ivars &amp; tags &gt;&gt;
		if self.incremental:
			&lt;&lt; incrementally color the text &gt;&gt;
		else:
			self.removeAllTags()
			n = 1 # The Tk line number for indices, as in n.i
			for s in lines:
				state = self.colorizeLine(s,n,state)
				n += 1		
	except:
		es_exception()
def colorizeAnyLanguage (self,v,body,language,flag):
	
	try:
		self.incremental = 1
		&lt;&lt; initialize ivars &amp; tags &gt;&gt;
		if self.incremental:
			&lt;&lt; incrementally color the text &gt;&gt;
		else:
			self.removeAllTags()
			n = 1 # The Tk line number for indices, as in n.i
			for s in lines:
				state = self.colorizeLine(s,n,state)
				n += 1		
	except:
		es_exception()
def colorizeAnyLanguage (self,v,body,language,flag):
	
	try:
		self.incremental = 1
		&lt;&lt; initialize ivars &amp; tags &gt;&gt;
		if self.incremental:
			&lt;&lt; incrementally color the text &gt;&gt;
		else:
			self.removeAllTags()
			n = 1 # The Tk line number for indices, as in n.i
			for s in lines:
				state = self.colorizeLine(s,n,state)
				n += 1		
	except:
		es_exception()
def colorizeAnyLanguage (self,v,body,language,flag):
	
	try:
		self.incremental = 1
		&lt;&lt; initialize ivars &amp; tags &gt;&gt;
		if self.incremental:
			&lt;&lt; incrementally color the text &gt;&gt;
		else:
			self.removeAllTags()
			n = 1 # The Tk line number for indices, as in n.i
			for s in lines:
				state = self.colorizeLine(s,n,state)
				n += 1		
	except:
		es_exception()
def colorizeAnyLanguage (self,v,body,language,flag):
	
	try:
		self.incremental = 1
		&lt;&lt; initialize ivars &amp; tags &gt;&gt;
		if self.incremental:
			&lt;&lt; incrementally color the text &gt;&gt;
		else:
			self.removeAllTags()
			n = 1 # The Tk line number for indices, as in n.i
			for s in lines:
				state = self.colorizeLine(s,n,state)
				n += 1		
	except:
		es_exception()
def colorizeAnyLanguage (self,v,body,language,flag):
	
	try:
		self.incremental = 1
		&lt;&lt; initialize ivars &amp; tags &gt;&gt;
		if self.incremental:
			&lt;&lt; incrementally color the text &gt;&gt;
		else:
			self.removeAllTags()
			n = 1 # The Tk line number for indices, as in n.i
			for s in lines:
				state = self.colorizeLine(s,n,state)
				n += 1		
	except:
		es_exception()
def colorizeAnyLanguage (self,v,body,language,flag):
	
	try:
		self.incremental = 1
		&lt;&lt; initialize ivars &amp; tags &gt;&gt;
		if self.incremental:
			&lt;&lt; incrementally color the text &gt;&gt;
		else:
			self.removeAllTags()
			n = 1 # The Tk line number for indices, as in n.i
			for s in lines:
				state = self.colorizeLine(s,n,state)
				n += 1		
	except:
		es_exception()
def colorizeAnyLanguage (self,v,body,language,flag):
	
	try:
		self.incremental = 1
		&lt;&lt; initialize ivars &amp; tags &gt;&gt;
		if self.incremental:
			&lt;&lt; incrementally color the text &gt;&gt;
		else:
			self.removeAllTags()
			n = 1 # The Tk line number for indices, as in n.i
			for s in lines:
				state = self.colorizeLine(s,n,state)
				n += 1		
	except:
		es_exception()
def colorizeAnyLanguage (self,v,body,language,flag):
	
	try:
		self.incremental = 1
		&lt;&lt; initialize ivars &amp; tags &gt;&gt;
		if self.incremental:
			&lt;&lt; incrementally color the text &gt;&gt;
		else:
			self.removeAllTags()
			n = 1 # The Tk line number for indices, as in n.i
			for s in lines:
				state = self.colorizeLine(s,n,state)
				n += 1		
	except:
		es_exception()
def colorizeAnyLanguage (self,v,body,language,flag):
	
	try:
		self.incremental = 1
		&lt;&lt; initialize ivars &amp; tags &gt;&gt;
		if self.incremental:
			&lt;&lt; incrementally color the text &gt;&gt;
		else:
			self.removeAllTags()
			n = 1 # The Tk line number for indices, as in n.i
			for s in lines:
				state = self.colorizeLine(s,n,state)
				n += 1		
	except:
		es_exception()
def colorizeAnyLanguage (self,v,body,language,flag):
	
	try:
		self.incremental = 1
		&lt;&lt; initialize ivars &amp; tags &gt;&gt;
		if self.incremental:
			&lt;&lt; incrementally color the text &gt;&gt;
		else:
			self.removeAllTags()
			n = 1 # The Tk line number for indices, as in n.i
			for s in lines:
				state = self.colorizeLine(s,n,state)
				n += 1		
	except:
		es_exception()
def colorizeAnyLanguage (self,v,body,language,flag):
	
	try:
		self.incremental = 1
		&lt;&lt; initialize ivars &amp; tags &gt;&gt;
		if self.incremental:
			&lt;&lt; incrementally color the text &gt;&gt;
		else:
			self.removeAllTags()
			n = 1 # The Tk line number for indices, as in n.i
			for s in lines:
				state = self.colorizeLine(s,n,state)
				n += 1		
	except:
		es_exception()
def colorizeAnyLanguage (self,v,body,language,flag):
	
	try:
		self.incremental = 1
		&lt;&lt; initialize ivars &amp; tags &gt;&gt;
		if self.incremental:
			&lt;&lt; incrementally color the text &gt;&gt;
		else:
			self.removeAllTags()
			n = 1 # The Tk line number for indices, as in n.i
			for s in lines:
				state = self.colorizeLine(s,n,state)
				n += 1		
	except:
		es_exception()
def colorizeAnyLanguage (self,v,body,language,flag):
	
	try:
		self.incremental = 1
		&lt;&lt; initialize ivars &amp; tags &gt;&gt;
		if self.incremental:
			&lt;&lt; incrementally color the text &gt;&gt;
		else:
			self.removeAllTags()
			n = 1 # The Tk line number for indices, as in n.i
			for s in lines:
				state = self.colorizeLine(s,n,state)
				n += 1		
	except:
		es_exception()
def colorizeAnyLanguage (self,v,body,language,flag):
	
	try:
		self.incremental = 1
		&lt;&lt; initialize ivars &amp; tags &gt;&gt;
		if self.incremental:
			&lt;&lt; incrementally color the text &gt;&gt;
		else:
			self.removeAllTags()
			n = 1 # The Tk line number for indices, as in n.i
			for s in lines:
				state = self.colorizeLine(s,n,state)
				n += 1		
	except:
		es_exception()
def colorizeAnyLanguage (self,v,body,language,flag):
	
	try:
		self.incremental = 1
		&lt;&lt; initialize ivars &amp; tags &gt;&gt;
		if self.incremental:
			&lt;&lt; incrementally color the text &gt;&gt;
		else:
			self.removeAllTags()
			n = 1 # The Tk line number for indices, as in n.i
			for s in lines:
				state = self.colorizeLine(s,n,state)
				n += 1		
	except:
		es_exception()


</t>
<t tx="edream.110203161858.75">"""python
string"""d

'this\
is</t>
<t tx="edream.110203161858.76">@ignore
@ doc
@c
@language c
	@others

abc
for # comment
# pp
@q comment @&gt; after
// comment
&lt;!-- comment --&gt; after
/* java comment */
{ pascal comment }
% latex comment
xor php keyword
fblocked tcl keyword
synchronized java keyword
\acute latex keyword
alarm perl keyword

# Python single-line comment
// C single-line comment
xx /* C block comment */ yy
xxx """ triple string """ zzz
a 'string' b
c "string" d
// C keywords
switch, case
</t>
<t tx="edream.110203161858.77">----*---*---*---*---*---*
	.	.	.	.	.	
                        
.   ..  ... ....    .   
        .   ..</t>
<t tx="edream.110203161858.78"></t>
<t tx="edream.110203161858.79"></t>
<t tx="edream.110203161858.80">a b leoDialogs leoFind leoAtFile leoFileCommands leoGlobals modal end
line tooo changed 9
</t>
<t tx="edream.110203161858.81">this is another test.

hello there jkk this is werg
		
the cht sat on the marh
the cat was sitting phew, another day. by zz z z 
two initabc
</t>
<t tx="edream.110203161858.82">everything good.</t>
<t tx="edream.110203161858.83"></t>
<t tx="edream.110203161858.84">from leoGlobals import *
f = top().frame

f.clearStatusLine()

f.putStatusLine ("Hello")

for color in ("red","blue","yellow","green","orange"):
	f.putStatusLine (" %s " % (color),color=color)

f.putStatusLine(" World")</t>
<t tx="edream.110203161858.85">from leoGlobals import *
f = top().frame

f.clearStatusLine()
</t>
<t tx="edream.110203161858.86"></t>
<t tx="edream.110203161858.87">@tabwidth 2

a
	b
		c	d</t>
<t tx="edream.110203161858.88">@tabwidth 4

a
	b
		c	d</t>
<t tx="edream.110203161858.89">@tabwidth 6

a
	b
		c	d</t>
<t tx="edream.110203161858.90">@tabwidth 8

a
	b
		c	d</t>
<t tx="edream.110203161858.96"></t>
<t tx="edream.110203161858.97">from leoGlobals import *

top().frame.addIconButton(imagefile="../Icons/Leoapp.gif")

top().frame.addIconButton(text="hi")

top().frame.addIconButton(imagefile="../Icons/Leodoc.gif")</t>
<t tx="edream.110203161858.98">from leoGlobals import *
import glob,os

f = top().frame

pattern = "c:/prog/leoCVS/leo/Icons/*.gif"
files = glob.glob(pattern)
files.sort()

f.clearIconBar()
for file in files:
	f.addIconButton(imagefile=file,bg="lightBlue")</t>
<t tx="edream.110203161858.99">from leoGlobals import *

top().frame.clearIconBar()</t>
<t tx="edream.110203161858.100">from leoGlobals import *

top().frame.hideIconBar()</t>
<t tx="edream.110203161858.101">from leoGlobals import *

top().frame.iconFrame.configure(height="15m")</t>
<t tx="edream.110203161858.102">from leoGlobals import *

top().frame.showIconBar()</t>
<t tx="edream.110203161858.103"></t>
<t tx="edream.110203161858.104"># The output of this is 5 5 6
# This shows that o2 is merely an alias for o.

class obj:
	def __init__(self,n):
		self.n = n

o = obj(5) ; print o.n,
o2  = o    ; print o2.n,
o.n = 6    ; print o2.n</t>
<t tx="edream.110203161858.105">import gc,Tkinter

# gc.set_debug(gc.DEBUG_STATS)

lastObjectCount = 0

def printGarbage(s):
	global lastObjectCount
	n  = len(gc.garbage)
	n2 = len(gc.get_objects())
	fmt = "%8s garbage: %d, objects:%+6d =%6d"
	print fmt % (s,n,n2-lastObjectCount,n2)
	lastObjectCount = n2

gc.collect()
printGarbage("start 1")
# Create a canvas widget for experimentation.
top = Tkinter.Tk()
frame = Tkinter.Frame(top) ; frame.pack()
canvas = Tkinter.Canvas(frame) ; canvas.pack()
# Allocate and (try to) deallocate widgets in the canvas.
x,y = 10,10
printGarbage("start 2")
for i in xrange(5):
	t = Tkinter.Text(canvas)
	canvas.create_window(x,y,window=t)
	y += 40
	printGarbage(" loop 1")
	t.destroy()
	canvas.delete("all")
	gc.collect() # Nuts...
	printGarbage(" loop 2")
# See when objects are really freed.
top.destroy()
printGarbage("end 1") # Huh ???
gc.collect()
printGarbage("end 2")
top = frame = canvas = None
gc.collect()
printGarbage("end 3")</t>
<t tx="edream.110203161858.106">from leoGlobals import *
import gc,os,time,leoNodes
from xml.sax import saxutils, make_parser
from xml.sax.xmlreader import InputSource

path = os.path.join(app().loadDir,"../","test","test2.leo")
# path = os.path.join(app().loadDir,"LeoPy.leo")
path = os.path.normpath(path)

verbose = true
tnodes = vnodes = 0
start = None

def clean(s): return toEncodedString(s,"ascii")

class trace_parse(saxutils.XMLGenerator):
	lastContent = None
	def startDocument(self):
		if 0: # Doesn't smooth things out.
			gc.collect() 
		global start ; start = time.clock()
		if verbose:
			print ; print ; print '*' * 30 + " dump " + '*' * 30 ; print
			trace()
	def endDocument(self):
		global start ; print "total time" + "%6.3f" % (time.clock()-start)
		if verbose: trace()
	def startElement(self,name,attrs):
		global vnodes,tnodes
		self.lastContent = None
		if verbose:
			name = clean(name).strip()
			self.lastName = name
			a = []
			keys = attrs.keys()
			keys.sort()
			for key in keys:
				a.append("%s=%s" % (key,attrs.getValue(key)))
			if name not in (("vh"),):
				print
			if a:
				print '&lt;%s %s&gt;' % (name, string.join(a,' ')),
			else:
				print '&lt;%s&gt;' % name,
			# if name in (("t"),): print
		if name == "v":
			vnodes += 1 ; v = leoNodes.vnode(top(),leoNodes.tnode())
		elif name == "t":
			tnodes += 1 ; t = leoNodes.tnode()
	def endElement(self,name):
		name = clean(name).strip()
		if verbose:
			if self.lastContent and name not in (("vh"),):
				print
			print '&lt;/%s&gt;' % name,
		self.lastName = name
	def characters(self,content):
		self.lastContent = content = content.replace('\r','')
		if verbose and content.strip():
			if self.lastName != "vh": print
			print clean(content),
	def ignorableWhitespace(self):                trace()
	def processingInstruction (self,target,data): trace()
	def skippedEntity(self,name):                 trace(name)
	def startElementNS(self,name,qname,attrs):    trace(name)
	def endElementNS(self,name,qname):            trace(name)
	
try:
	f = None
	try:
		print path
		if 1: # not needed, and it works.
			source = InputSource(path)
			# source.setEncoding(app().tkEncoding)
		else:
			source = f = open(path)
		parser = make_parser()
		parser.setContentHandler(trace_parse())
		parser.parse(source)
		print "vnodes,tnodes:",`vnodes`,`tnodes`
	except: es_exception()
finally:
	if f: f.close()</t>
<t tx="edream.110203161858.107"># This shows that Python programs _could_ use .xpy files (xml files containing Leo/Python code).

from leoGlobals import *
import imp
import sys

old_import = __import__ # Get the global function

def leo_import(name,old_import,globals=None, locals=None, fromlist=None):
	try:
		mod = sys.modules.get(name)
		if mod:
			es("Leo import: module exists: " + name, color="blue")
		else:
			mod = old_import(name,globals,locals,fromlist)
			es("Leo import: " + name,color="blue")
	except ImportError:
		es("Leo import: not found: " + name,color="blue")
		mod = None
	return mod
		
m = leo_import("leoTest",__import__)
es(m,color="red")</t>
<t tx="edream.110203161858.108"># Empty tuples are constructed by an empty pair of parentheses.
# tuple with one item is constructed by following a value with a comma.
# Examples:

# empty = ()
# singleton = 'hello',    # &lt;-- note trailing comma

s = "abc",

for i in s:
	print `i`
	
s = {"x":1, "y":2},

for i in s:
	print `i`</t>
<t tx="edream.110203161858.111">@ignore

## @encoding iso-8859-1
# @comment /* */</t>
<t tx="edream.110203161858.112">root line 1
	&lt;&lt; ref &gt;&gt;
	root line 2
root line 3
		&lt;&lt; ref &gt;&gt;
root line 4</t>
<t tx="edream.110203161858.113">line 1
line 2
@raw
line 3
	indented line
		more indented
line 4
@end_raw
line 5
line 6</t>
<t tx="edream.110203161858.114">@language HTML
@delims /* */
&lt;script a3:scriptImplementation="Adobe" type="text/ecmascript"&gt;

  // Hi Mom!

@delims &lt;!-- --&gt;

&lt;/script&gt;</t>
<t tx="edream.110203161858.115">@first # -*- coding: utf-8 -*-
@language python

from leoGlobals import *
import leo,leoConfig,leoDialog,leoFind,leoNodes
import locale,os,sys,Tkinter

class LeoApp:

	"""A class representing the Leo application itself.
	
	Ivars of this class are Leo's global variables."""
	
	@others</t>
<t tx="edream.110203161858.116">def __init__(self, root):

	# These ivars are the global vars of this program.
	self.afterHandler = None
	self.commandName = None # The name of the command being executed.
	self.config = None # The leoConfig instance.
	self.globalWindows = []
	self.hasOpenWithMenu = false # True: open with plugin has been loaded.
	self.hookError = false # true: suppress further calls to hooks.
	self.hookFunction = None # Application wide hook function.
	self.idle_imported = false # true: we have done an import idle
	self.idleTimeDelay = 100 # Delay in msec between calls to "idle time" hook.
	self.idleTimeHook = false # true: the global idleTimeHookHandler will reshedule itself.
	self.killed = false # true: we are about to destroy the root window.
	self.loadDir = None # The directory from which Leo was loaded.
	self.log = None # The LeoFrame containing the present log.
	self.logIsLocked = false # true: no changes to log are allowed.
	self.logWaiting = [] # List of messages waiting to go to a log.
	self.menuWarningsGiven = false # true: supress warnings in menu code.
	self.nodeIndices = None # Singleton node indices instance.
	self.numberOfWindows = 0 # Number of opened windows.
	self.openWithFiles = [] # List of data used by Open With command.
	self.openWithFileNum = 0 # Used to generate temp file names for Open With command.
	self.openWithTable = None # The table passed to createOpenWithMenuFromTable.
	self.quitting = false # True if quitting.  Locks out some events.
	self.realMenuNameDict = {} # Contains translations of menu names and menu item names.
	self.root = root # The hidden main window
	self.trace_list = [] # "Sherlock" argument list for tracing().
	self.tkEncoding = "utf-8" # Set by finishCreate
	self.unicodeErrorGiven = false # true: suppres unicode tracebacks.
	self.windowList = [] # Global list of all frames.  Does not include hidden root window.

	# Global panels.  Destroyed when Leo ends.
	self.findFrame = None
	self.pythonFrame = None
	
	&lt;&lt; Define global constants &gt;&gt;
	&lt;&lt; Define global data structures &gt;&gt;</t>
<t tx="edream.110203161858.117">self.prolog_string = "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"

# New in leo.py 3.0
self.prolog_prefix_string = "&lt;?xml version=\"1.0\" encoding="
self.prolog_postfix_string = "?&gt;"

# leo.py 3.11
self.use_unicode = true # true: use new unicode logic.
</t>
<t tx="edream.110203161858.118"># Internally, lower case is used for all language names.
self.language_delims_dict = {
	"actionscript" : "// /* */", #jason 2003-07-03
	"c" : "// /* */", # C, C++ or objective C.
	"cweb" : "@q@ @&gt;", # Use the "cweb hack"
	"forth" : "_\\_ _(_ _)_", # Use the "REM hack"
	"fortran" : "C",
	"fortran90" : "!",
	"html" : "&lt;!-- --&gt;",
	"java" : "// /* */",
	"latex" : "%",
	"pascal" : "// { }",
	"perl" : "#",
	"perlpod" : "# __=pod__ __=cut__", # 9/25/02: The perlpod hack.
	"php" : "//",
	"plain" : "#", # We must pick something.
	"python" : "#",
	"rebol" : ";", #jason 2003-07-03
	"shell" : "#",  # shell scripts
	"tcltk" : "#",
	"unknown" : "#" } # Set when @comment is seen.
	
self.language_extension_dict = {
	"actionscript" : "as", #jason 2003-07-03
	"c" : "c", 
	"cweb" : "w",
	"forth" : "forth",
	"fortran" : "f",
	"fortran90" : "f",
	"html" : "html",
	"java" : "java",
	"latex" : "latex",
	"noweb" : "nw",
	"pascal" : "p",
	"perl" : "perl",
	"perlpod" : "perl", 
	"php" : "php",
	"plain" : "txt",
	"python" : "py",
	"rebol" : "r",  #jason 2003-07-03
	"shell" : "txt",
	"tex" : "tex",
	"tcltk" : "tcl",
	"unknown" : "txt" } # Set when @comment is seen.
</t>
<t tx="edream.110203161858.119">def closeLeoWindow (self,frame):
	
	"""Attempt to close a Leo window.
	
	Return false if the user veto's the close."""
	
	a = self ; c = frame.commands

	if c.changed:
		veto = frame.promptForSave()
		# print "veto",veto
		if veto: return false

	app().setLog(None) # no log until we reactive a window.
	
	doHook("close-frame",c=c) # This may remove frame from the window list.
	
	if frame in a.windowList:
		a.destroyWindow(frame)
	
	if a.windowList:
		# Pick a window to activate so we can set the log.
		w = a.windowList[0]
		w.top.deiconify()
		w.top.lift()
		a.setLog(w)
	else:
		a.finishQuit()

	return true # The window has been closed.
</t>
<t tx="edream.110203161858.120">def destroyAllGlobalWindows (self):
	
	for w in self.globalWindows:
		w.top.destroy()
		
	self.globalWindows = []
	
	self.findFrame = None
	self.pythonFrame = None
		
	doHook("destroy-all-global-windows")
</t>
<t tx="edream.110203161858.121">def destroyAllOpenWithFiles (self):

	"""Try to remove temp files created with the Open With command.  This may fail if the files are still open.
	
	We can't use es here because the log stream no longer exists."""
	
	a = self

	for dict in self.openWithFiles[:]: # 7/10/03.
		a.destroyOpenWithFileWithDict(dict)
		
	# Delete the list so the gc can recycle Leo windows!
	a.openWithFiles = []</t>
<t tx="edream.110203161858.122"># Objects must not be "destroyed" more than once; only this method calls destroy routines.

def destroyAllWindowObjects (self,frame):

	"""Clear all links to objects in a Leo window."""
	
	# print "app.destroyAllNodes", frame
	
	# Do this first.
	&lt;&lt; clear all vnodes and tnodes in the tree &gt;&gt;
	
	# Destroy all subcommanders.
	clearAllIvars(frame.commands.atFileCommands)
	clearAllIvars(frame.commands.fileCommands)
	clearAllIvars(frame.commands.importCommands)
	clearAllIvars(frame.commands.tangleCommands)
	clearAllIvars(frame.commands.undoer)
	
	# Destroy the commander.
	clearAllIvars(frame.commands)

	clearAllIvars(frame.tree.colorizer)
	clearAllIvars(frame.tree)
	
	# Finally, destroy the frame itself.
	frame.destroyAllPanels()
	clearAllIvars(frame)
	
	# Note: pointers to frame still exist in the caller!</t>
<t tx="edream.110203161858.123"># Using a dict here is essential for adequate speed.
vList = [] ; tDict = {}

v = frame.commands.rootVnode()
while v:
	vList.append(v)
	if v.t:
		key = id(v.t)
		if not tDict.has_key(key):
			tDict[key] = v.t
	v = v.threadNext()
	
for key in tDict.keys():
	clearAllIvars(tDict[key])

for v in vList:
	clearAllIvars(v)

vList = [] ; tList = [] # Remove these references immediately.</t>
<t tx="edream.110203161858.124">def destroyOpenWithFilesForFrame (self,frame):
	
	"""Close all "Open With" files associated with frame"""
	
	a = self
	
	# Make a copy of the list: it may change in the loop.
	openWithFiles = a.openWithFiles

	for dict in openWithFiles[:]: # 6/30/03
		c = dict.get("c")
		if c.frame == frame:
			a.destroyOpenWithFileWithDict(dict)
</t>
<t tx="edream.110203161858.125">def destroyOpenWithFileWithDict (self,dict):
	
	a = self
	
	path = dict.get("path")
	if path and os.path.exists(path):
		try:
			os.remove(path)
			print "deleting temp file:", shortFileName(path)
		except:
			print "can not delete temp file:", path
			
	# Remove dict from the list so the gc can recycle the Leo window!
	a.openWithFiles.remove(dict)</t>
<t tx="edream.110203161858.126">def destroyWindow (self,frame):
	
	a = self
	top = frame.top # Remember this.
		
	a.destroyOpenWithFilesForFrame(frame)
	
	# 8/27/03: Recycle only if more than one window open
	if len(a.windowList) &gt; 1:
		a.destroyAllWindowObjects(frame)

	a.windowList.remove(frame)

	top.destroy() # force the window to go away now.</t>
<t tx="edream.110203161858.127"># Called when the gApp global has been defined.

def finishCreate(self):

	a = self

	&lt;&lt; return false if not v2.1 or above &gt;&gt;
	&lt;&lt; set loadDir &gt;&gt;
	&lt;&lt; set the default Leo icon &gt;&gt;
	a.config = leoConfig.config()
	&lt;&lt; set app.tkEncoding &gt;&gt;

	# Create the global windows
	a.findFrame = leoFind.leoFind()
	a.findFrame.top.withdraw()
	a.globalWindows.append(a.findFrame)
	
	# New 4.0 stuff.
	if 0: # Not using leoID.txt would be more convenient for the user.
		a.setLeoID()
		a.nodeIndices = leoNodes.nodeIndices()

	return true # all went well.</t>
<t tx="edream.110203161858.128"># Python 2.1 support.

try:
	# 04-SEP-2002 DHEIN: simplify version check
	message = """
leo.py requires Python 2.1 or higher.

You may download Python 2.1 and Python 2.2 from http://python.org/download/
"""

	if not CheckVersion(sys.version, "2.1"):
		leoDialog.askOk("Python version error",message=message,text="Exit").run(modal=true)
		return false
except:
	print "exception getting version"
	import traceback
	traceback.print_exc()</t>
<t tx="edream.110203161858.129"># loadDir should be the directory that contains leo.py

try:
	a.loadDir = os.path.dirname(leo.__file__)
	if a.loadDir in (None,""):
		a.loadDir = os.getcwd()
	a.loadDir = os.path.abspath(a.loadDir)
except:
	# Emergency defaults.  Hopefully we will never have to use them.
	if sys.platform=="win32": # Windows
		a.loadDir = "c:\\prog\\LeoPy\\"
	else: # Linux, or whatever.
		a.loadDir = "LeoPy"
	print "Setting load directory to:", a.loadDir
</t>
<t tx="edream.110203161858.130">try: # 6/2/02: Try to set the default bitmap.
	bitmap_name = os.path.join(a.loadDir,"..","Icons","LeoApp.ico")
	bitmap = Tkinter.BitmapImage(bitmap_name)
except:
	print "exception creating bitmap"
	import traceback
	traceback.print_exc()

try:
	version = a.root.getvar("tk_patchLevel")
	# print "tcl version:", version
	&lt;&lt; set v834 if version is 8.3.4 or greater &gt;&gt;
except:
	print "exception getting version"
	import traceback
	traceback.print_exc()
	v834 = None # 6/18/02
	
if v834:
	try:
		if sys.platform=="win32": # Windows
			top.wm_iconbitmap(bitmap,default=1)
		else:
			top.wm_iconbitmap(bitmap)
	except:
		if 0: # Let's ignore this for now until I understand the issues better.
			es("exception setting bitmap")
			es_exception()</t>
<t tx="edream.110203161858.131"># 04-SEP-2002 DHEIN: simplify version check
# 04-SEP-2002 Stephen P. Schaefer: make sure v834 is set
v834 = CheckVersion(version, "8.3.4")
</t>
<t tx="edream.110203161858.132">@ According to Martin v. LÃ¶wis, getdefaultlocale() is broken, and cannot be fixed. The workaround is to copy the getpreferredencoding() function from locale.py in Python 2.3a2.  This function is now in leoGlobals.py.
@c

for (encoding,src) in (
	(a.config.tkEncoding,"config"),
	#(locale.getdefaultlocale()[1],"locale"),
	(getpreferredencoding(),"locale"),
	(sys.getdefaultencoding(),"sys"),
	("utf-8","default")):

	if isValidEncoding (encoding): # 3/22/03
		a.tkEncoding = encoding
		# print a.tkEncoding,src
		break
	elif encoding and len(encoding) &gt; 0:
		print "ignoring invalid " + src + " encoding: " + `encoding`

</t>
<t tx="edream.110203161858.133">def finishQuit(self):
	
	self.killed = true # Disable after events.
	
	if self.afterHandler != None:
		# print "finishQuit: cancelling",self.afterHandler
		self.root.after_cancel(self.afterHandler)
		self.afterHandler = None

	# Wait until everything is quiet before really quitting.
	doHook("end1")

	self.destroyAllGlobalWindows()
	
	self.destroyAllOpenWithFiles()

	if 0: # Works in Python 2.1 and 2.2.  Leaves Python window open.
		self.root.destroy()
		
	else: # Works in Python 2.3.  Closes Python window.
		self.root.quit()</t>
<t tx="edream.110203161858.134"># Returns the translation of a menu name or an item name.

def getRealMenuName (self,menuName):
	
	cmn = canonicalizeTranslatedMenuName(menuName)
	return self.realMenuNameDict.get(cmn,menuName)
	
def setRealMenuName (self,untrans,trans):
	
	cmn = canonicalizeTranslatedMenuName(untrans)
	self.realMenuNameDict[cmn] = trans

def setRealMenuNamesFromTable (self,table):

	for untrans,trans in table:
		self.setRealMenuName(untrans,trans)
</t>
<t tx="edream.110203161858.135">def onQuit (self):
	
	a = self
	
	a.quitting = true
	
	while a.windowList:
		w = a.windowList[0]
		if not a.closeLeoWindow(w):
			break

	a.quitting = false # If we get here the quit has been disabled.


</t>
<t tx="edream.110203161858.136">def setLeoID (self):
	
	a = self

	tag = ".leoID.txt"
	loadDir = a.loadDir
	configDir = a.config.configDir
	&lt;&lt; return if we can set self.leoID from sys.leoID &gt;&gt;
	&lt;&lt; return if we can set self.leoID from "leoID.txt" &gt;&gt;
	&lt;&lt; put up a dialog requiring a valid id &gt;&gt;
	&lt;&lt; attempt to create leoID.txt &gt;&gt;</t>
<t tx="edream.110203161858.137"># This would be set by in Python's sitecustomize.py file.
try:
	a.leoID = sys.leoID
	es("leoID = " + a.leoID, color="blue")
	return
except:
	a.leoID = None</t>
<t tx="edream.110203161858.138">for dir in (configDir,loadDir):
	try:
		fn = os.path.join(dir, tag)
		f = open(fn,'r')
		if f:
			s = f.readline()
			f.close()
			if s and len(s) &gt; 0:
				a.leoID = s
				es("leoID = " + a.leoID, color="blue")
				return
			else:
				es("empty " + tag + " in " + dir, color = "red")
	except:
		a.leoID = None
		
if configDir == loadDir:
	es(tag + " not found in " + loadDir, color="red")
else:
	es(tag + " not found in " + configDir + " or " + loadDir, color="red")

</t>
<t tx="edream.110203161858.139">a.leoID = leoDialog.askLeoID().run(modal=true)

es("leoID = " + `a.leoID`, color="blue")</t>
<t tx="edream.110203161858.140">for dir in (configDir,loadDir):
	try:
		# Look in configDir first.
		fn = os.path.join(dir, tag)
		f = open(fn,'w')
		if f:
			f.write(a.leoID)
			f.close()
			es("created leoID.txt in " + dir, color="red")
			return
	except: pass
	
if configDir == loadDir:
	es("can not create leoID.txt in " + loadDir, color="red")
else:
	es("can not create leoID.txt in " + configDir + " or " + loadDir, color="red")

</t>
<t tx="edream.110203161858.141">def setLog (self,log,tag=""):
	"""set the frame to which log messages will go"""
	
	# print "setLog:",tag,"locked:",self.logIsLocked,`log`
	if not self.logIsLocked:
		self.log = log
		
def lockLog(self):
	"""Disable changes to the log"""
	self.logIsLocked = true
	
def unlockLog(self):
	"""Enable changes to the log"""
	self.logIsLocked = false</t>
<t tx="edream.110203161858.142">def writeWaitingLog (self):

	if self.log:
		for s,color in self.logWaiting:
			es(s,color=color,newline=0) # The caller must write the newlines.
		self.logWaiting = []
</t>
<t tx="edream.110203161858.143">"""Classes to read and write @file nodes."""

@language python

from leoGlobals import *
import leoColor,leoNodes
import filecmp,os,os.path,time

&lt;&lt; global atFile constants &gt;&gt;

class baseAtFile:
	"""The base class for the top-level atFile subcommander."""
	&lt;&lt; class baseAtFile methods &gt;&gt;
	
class atFile (baseAtFile):
	pass # May be overridden in plugins.
	
class baseOldDerivedFile:
	"""The base class to read and write 3.x derived files."""
	&lt;&lt; class baseOldDerivedFile methods &gt;&gt;
	
class oldDerivedFile(baseOldDerivedFile):
	pass # May be overridden in plugins.
	
class baseNewDerivedFile(oldDerivedFile):
	"""The base class to read and write 4.x derived files."""
	&lt;&lt; class baseNewDerivedFile methods &gt;&gt;
	
class newDerivedFile(baseNewDerivedFile):
	pass # May be overridden in plugins.</t>
<t tx="edream.110203161858.144"># These constants must be global to this module because they are shared by several classes.

# The kind of at_directives.
noDirective		   =  1 # not an at-directive.
# not used      =  2
docDirective	   =  3 # @doc.
atDirective		   =  4 # @&lt;space&gt; or @&lt;newline&gt;
codeDirective	  =  5 # @code
cDirective		    =  6 # @c&lt;space&gt; or @c&lt;newline&gt;
othersDirective	=  7 # at-others
miscDirective	  =  8 # All other directives
rawDirective    =  9 # @raw
endRawDirective = 10 # @end_raw

# The kind of sentinel line.
noSentinel		 = 20 # Not a sentinel
# not used   = 21
endAt			 = 22 # @-at
endBody			 = 23 # @-body
endDoc			 = 24 # @-doc
endLeo			 = 25 # @-leo
endNode			 = 26 # @-node
endOthers		  = 27 # @-others

# not used     = 40
startAt			   = 41 # @+at
startBody		    = 42 # @+body
startDoc		     = 43 # @+doc
startLeo		     = 44 # @+leo
startNode		    = 45 # @+node
startOthers		  = 46 # @+others

startComment   = 60 # @comment
startDelims		  = 61 # @delims
startDirective	= 62 # @@
startRef		     = 63 # @&lt; &lt; ... &gt; &gt;
startVerbatim	 = 64 # @verbatim
startVerbatimAfterRef = 65 # @verbatimAfterRef (3.0 only)

# New in 4.0...
startAfterRef  = 70 # @afterref (4.0)
startNl        = 71 # @nl (4.0)
startNonl      = 72 # @nonl (4.0)
	
sentinelDict = {
	# Unpaired sentinels: 3.x and 4.x.
	"@comment" : startComment,
	"@delims" :  startDelims,
	"@verbatim": startVerbatim,
	# Unpaired sentinels: 3.x only.
	"@verbatimAfterRef": startVerbatimAfterRef,
	# Unpaired sentinels: 4.x only.
	"@afterref" : startAfterRef,
	"@nl"       : startNl,
	"@nonl"     : startNonl,
	# Paired sentinels: 3.x only.
	"@+body":   startBody,   "@-body":   endBody,
	# Paired sentinels: 3.x and 4.x.
	"@+at":     startAt,     "@-at":     endAt,
	"@+doc":    startDoc,    "@-doc":    endDoc,
	"@+leo":    startLeo,    "@-leo":    endLeo,
	"@+node":   startNode,   "@-node":   endNode,
	"@+others": startOthers, "@-others": endOthers }</t>
<t tx="edream.110203161858.145">@others</t>
<t tx="edream.110203161858.146">def __init__(self,theCommander):
	
	# trace("topLevelDerivedFile.__init__")
	
	at = self
	at.commands = theCommander
	at.fileCommands = self.commands.fileCommands
	
	# Create subcommanders to handler old and new format derived files.
	at.old_df = oldDerivedFile(theCommander)
	at.new_df = newDerivedFile(theCommander)
	
	at.initIvars()
	
def initIvars(self):
	
	at = self
	
	# Set by scanDefaultDirectory.
	at.default_directory = None
	at.errors = 0

	# Set by scanHeader when reading. Set by scanAllDirectives...
	self.encoding = app().config.default_derived_file_encoding
	at.endSentinelComment = None
	at.startSentinelComment = None</t>
<t tx="edream.110203161858.147"></t>
<t tx="edream.110203161858.148">def readAll(self,root,partialFlag=false):
	
	"""Scan vnodes, looking for @file nodes to read."""

	at = self ; c = at.commands
	c.endEditing() # Capture the current headline.
	anyRead = false
	at.initIvars()
	v = root
	if partialFlag: after = v.nodeAfterTree()
	else: after = None
	while v and v != after:
		if v.isAtIgnoreNode():
			v = v.nodeAfterTree()
		elif v.isAtFileNode() or v.isAtRawFileNode():
			anyRead = true
			if partialFlag:
				# We are forcing the read.
				at.read(v)
			else:
				# if v is an orphan, we don't expect to see a derived file,
				# and we shall read a derived file if it exists.
				wasOrphan = v.isOrphan()
				ok = at.read(v)
				if wasOrphan and not ok:
					# Remind the user to fix the problem.
					v.setDirty()
					c.setChanged(true)
			v = v.nodeAfterTree()
		else: v = v.threadNext()
	# Clear all orphan bits.
	v = root
	while v:
		v.clearOrphan()
		v = v.threadNext()
		
	if partialFlag and not anyRead:
		es("no @file nodes in the selected tree")</t>
<t tx="edream.110203161858.149">def error(self,message):

	es(message,color="red")
	print message
	self.errors += 1</t>
<t tx="edream.110203161858.150"># The caller has enclosed this code in beginUpdate/endUpdate.

def read(self,root,importFileName=None):
	
	"""Common read logic for any derived file."""
	
	at = self ; c = at.commands
	at.errors = 0
	at.scanDefaultDirectory(root)
	if at.errors: return
	&lt;&lt; set fileName from root and importFileName &gt;&gt;
	&lt;&lt; open file or return false &gt;&gt;
	es("reading: " + root.headString())
	firstLines,read_new = at.scanHeader(file,fileName)
	df = choose(read_new,at.new_df,at.old_df)
	&lt;&lt; copy ivars to df &gt;&gt;
	root.clearVisitedInTree()
	df.readOpenFile(root,file,fileName,firstLines)
	file.close()
	after = root.nodeAfterTree()
	&lt;&lt; warn about non-empty unvisited nodes &gt;&gt;
	if df.errors == 0:
		if not df.importing:
			&lt;&lt; copy all tempBodyStrings to tnodes &gt;&gt;
	&lt;&lt; delete all tempBodyStrings &gt;&gt;
	root.clearDirty()
	return df.errors == 0</t>
<t tx="edream.110203161858.151">if importFileName:
	fileName = importFileName
elif root.isAtFileNode():
	fileName = root.atFileNodeName()
else:
	fileName = root.atRawFileNodeName()
	
if not fileName:
	at.error("Missing file name.  Restoring @file tree from .leo file.")
	return false</t>
<t tx="edream.110203161858.152">fn = os.path.join(at.default_directory,fileName)
fn = os.path.normpath(fn)
fn = toUnicode(fn,"ascii")

try:
	file = open(fn,'r')
	if file:
		&lt;&lt; warn on read-only file &gt;&gt;
	else: return false
except:
	at.error("Can not open: " + '"@file ' + fn + '"')
	return false</t>
<t tx="edream.110203161858.153">try:
	read_only = not os.access(fn,os.W_OK)
	if read_only:
		es("read only: " + fn,color="red")
except:
	pass # os.access() may not exist on all platforms.</t>
<t tx="edream.110203161858.154">if importFileName:
	df.importing = true
	df.importRoot = c.currentVnode()
	
else:
	df.importing = false
	df.importRoot = None

# Set by scanHeader.
df.encoding = at.encoding
df.endSentinelComment = at.endSentinelComment
df.startSentinelComment = at.startSentinelComment

# Set other common ivars.
df.errors = 0
df.file = file
df.targetFileName = fileName
df.indent = 0
df.raw = false
df.root = root
df.root_seen = false
</t>
<t tx="edream.110203161858.155">v = root
while v and v != after:
	try: s = v.t.tempBodyString
	except: s = ""
	if s and not v.t.isVisited():
		at.error("Not in derived file:" + v.headString())
		v.t.setVisited() # One message is enough.
	v = v.threadNext()</t>
<t tx="edream.110203161858.156">v = root
while v and v != after:
	try: s = v.t.tempBodyString
	except: s = ""
	if s != v.bodyString():
		es("changed: " + v.headString(),color="blue")
		if 0: # For debugging.
			print ; print "changed: " + v.headString()
			print ; print "new:",`s`
			print ; print "old:",`v.bodyString()`
		v.setBodyStringOrPane(s)
		v.setDirty()
	v = v.threadNext()</t>
<t tx="edream.110203161858.157">v = root
while v and v != after:
	if hasattr(v.t,"tempBodyString"):
		delattr(v.t,"tempBodyString")
	v = v.threadNext()</t>
<t tx="edream.110203161858.158">def scanDefaultDirectory(self,v):
	
	"""Set default_directory ivar by looking for @path directives."""

	at = self ; c = at.commands
	at.default_directory = None
	&lt;&lt; Set path from @file node &gt;&gt;
	if at.default_directory:
		return

	while v:
		s = v.t.bodyString
		dict = get_directives_dict(s)
		if dict.has_key("path"):
			&lt;&lt; handle @path &gt;&gt;
			return
		v = v.parent()

	&lt;&lt; Set current directory &gt;&gt;
	if not at.default_directory:
		# This should never happen: c.openDirectory should be a good last resort.
		at.error("No absolute directory specified anywhere.")
		at.default_directory = ""</t>
<t tx="edream.110203161858.159"># An absolute path in an @file node over-rides everything else.
# A relative path gets appended to the relative path by the open logic.

# Bug fix: 10/16/02
if v.isAtFileNode():
	name = v.atFileNodeName()
elif v.isAtRawFileNode():
	name = v.atRawFileNodeName()
elif v.isAtNoSentinelsFileNode():
	name = v.atNoSentinelsFileNodeName()
else:
	name = ""

dir = choose(name,os.path.dirname(name),None)
if dir and os.path.isabs(dir):
	if os.path.exists(dir):
		at.default_directory = dir
	else:
		at.default_directory = makeAllNonExistentDirectories(dir)
		if not at.default_directory:
			at.error("Directory \"" + dir + "\" does not exist")</t>
<t tx="edream.110203161858.160"># We set the current director to a path so future writes will go to that directory.

k = dict["path"]
&lt;&lt; compute relative path from s[k:] &gt;&gt;

if path and len(path) &gt; 0:
	base = getBaseDirectory() # returns "" on error.
	path = os.path.join(base,path)
	if os.path.isabs(path):
		&lt;&lt; handle absolute path &gt;&gt;
	else:
		at.error("ignoring bad @path: " + path)
else:
	at.error("ignoring empty @path")</t>
<t tx="edream.110203161858.161">j = i = k + len("@path")
i = skip_to_end_of_line(s,i)
path = string.strip(s[j:i])

# Remove leading and trailing delims if they exist.
if len(path) &gt; 2 and (
	(path[0]=='&lt;' and path[-1] == '&gt;') or
	(path[0]=='"' and path[-1] == '"') ):
	path = path[1:-1]

path = path.strip()</t>
<t tx="edream.110203161858.162"># path is an absolute path.

if os.path.exists(path):
	at.default_directory = path
else:
	at.default_directory = makeAllNonExistentDirectories(path)
	if not at.default_directory:
		at.error("invalid @path: " + path)</t>
<t tx="edream.110203161858.163"># This code is executed if no valid absolute path was specified in the @file node or in an @path directive.

assert(not at.default_directory)

if c.frame :
	base = getBaseDirectory() # returns "" on error.
	for dir in (c.tangle_directory,c.frame.openDirectory,c.openDirectory):
		if dir and len(dir) &gt; 0:
			dir = os.path.join(base,dir)
			if os.path.isabs(dir): # Errors may result in relative or invalid path.
				if os.path.exists(dir):
					at.default_directory = dir ; break
				else:
					at.default_directory = makeAllNonExistentDirectories(dir)</t>
<t tx="edream.110203161858.164">def scanHeader(self,file,fileName):
	
	"""Scan the @+leo sentinel.
	
	Sets self.encoding, and self.start/endSentinelComment.
	
	Returns (firstLines,new_df) where:
	firstLines contains all @first lines,
	new_df is true if we are reading a new-format derived file."""
	
	at = self
	new_df = false # Set default.
	firstLines = [] # The lines before @+leo.
	version_tag = "-ver=" ; gnx_tag = "-gnx="
	tag = "@+leo" ; encoding_tag = "-encoding="
	valid = true
	&lt;&lt; skip any non @+leo lines &gt;&gt;
	&lt;&lt; make sure we have @+leo &gt;&gt;
	&lt;&lt; read optional version param &gt;&gt;
	&lt;&lt; read optional encoding param &gt;&gt;
	&lt;&lt; set the closing comment delim &gt;&gt;
	if not valid:
		at.error("Bad @+leo sentinel in " + fileName)
	return firstLines, new_df</t>
<t tx="edream.110203161858.165">@ Queue up the lines before the @+leo.  These will be used to add as parameters to the @first directives, if any.  Empty lines are ignored (because empty @first directives are ignored). NOTE: the function now returns a list of the lines before @+leo.

We can not call sentinelKind here because that depends on the comment delimiters we set here.  @first lines are written "verbatim", so nothing more needs to be done!
@c

s = at.readLine(file)
while len(s) &gt; 0:
	j = s.find(tag)
	if j != -1: break
	firstLines.append(s) # Queue the line
	s = at.readLine(file)
n = len(s)
valid = n &gt; 0
# s contains the tag
i = j = skip_ws(s,0)
# The opening comment delim is the initial non-whitespace.
# 7/8/02: The opening comment delim is the initial non-tag
while i &lt; n and not match(s,i,tag) and not is_nl(s,i):
	i += 1
if j &lt; i:
	at.startSentinelComment = s[j:i]
else: valid = false</t>
<t tx="edream.110203161858.166">@ REM hack: leading whitespace is significant before the @+leo.  We do this so that sentinelKind need not skip whitespace following self.startSentinelComment.  This is correct: we want to be as restrictive as possible about what is recognized as a sentinel.  This minimizes false matches.
@c

if 0:# 7/8/02: make leading whitespace significant.
	i = skip_ws(s,i)

if match(s,i,tag):
	i += len(tag)
else: valid = false</t>
<t tx="edream.110203161858.167">new_df = match(s,i,version_tag)

if new_df:
	# Skip to the next minus sign or end-of-line
	i += len(version_tag)
	j = i
	while i &lt; len(s) and not is_nl(s,i) and s[i] != '-':
		i += 1

	if j &lt; i:
		version = s[j:i]
	else:
		valid = false
</t>
<t tx="edream.110203161858.168"># Set the default encoding
at.encoding = app().config.default_derived_file_encoding

if match(s,i,encoding_tag):
	# Read optional encoding param, e.g., -encoding=utf-8,
	i += len(encoding_tag)
	# Skip to the next comma
	j = i
	while i &lt; len(s) and not is_nl(s,i) and s[i] not in (',','.'):
		i += 1
	if match(s,i,',') or match(s,i,'.'):
		encoding = s[j:i]
		i += 1
		# print "@+leo-encoding=",encoding
		if isValidEncoding(encoding):
			at.encoding = encoding
		else:
			print "bad encoding in derived file:",encoding
			es("bad encoding in derived file:",encoding)
	else:
		valid = false
</t>
<t tx="edream.110203161858.169"># The closing comment delim is the trailing non-whitespace.
i = j = skip_ws(s,i)
while i &lt; n and not is_ws(s[i]) and not is_nl(s,i):
	i += 1
at.endSentinelComment = s[j:i]</t>
<t tx="edream.110203161858.170">def readLine (self,file):

	"""Reads one line from file using the present encoding"""
	
	s = readlineForceUnixNewline(file)
	u = toUnicode(s,self.encoding)
	return u</t>
<t tx="edream.110203161858.171"></t>
<t tx="edream.110203161858.172">def writeAll(self,writeAtFileNodesFlag=false,writeDirtyAtFileNodesFlag=false):
	
	"""Write @file nodes in all or part of the outline"""

	at = self ; c = at.commands
	write_new = not app().config.write_old_format_derived_files
	df = choose(write_new,at.new_df,at.old_df)
	df.initIvars()
	writtenFiles = [] # Files that might be written again.

	if writeAtFileNodesFlag:
		# Write all nodes in the selected tree.
		v = c.currentVnode()
		after = v.nodeAfterTree()
	else:
		# Write dirty nodes in the entire outline.
		v = c.rootVnode()
		after = None

	&lt;&lt; Clear all orphan bits &gt;&gt;
	while v and v != after:
		# trace(`v`)
		if v.isAnyAtFileNode() or v.isAtIgnoreNode():
			&lt;&lt; handle v's tree &gt;&gt;
			v = v.nodeAfterTree()
		else:
			v = v.threadNext()

	&lt;&lt; say the command is finished &gt;&gt;</t>
<t tx="edream.110203161858.173">@ We must clear these bits because they may have been set on a previous write.  Calls to atFile::write may set the orphan bits in @file nodes.  If so, write_LEO_file will write the entire @file tree.
@c

v2 = v
while v2 and v2 != after:
	v2.clearOrphan()
	v2 = v2.threadNext()</t>
<t tx="edream.110203161858.174"># This code is a little tricky: @ignore not recognised in @silentfile nodes.

if v.isDirty() or writeAtFileNodesFlag or v.t in writtenFiles:

	if v.isAtSilentFileNode():
		at.silentWrite(v)
	elif v.isAtIgnoreNode():
		pass
	elif v.isAtRawFileNode():
		at.rawWrite(v)
	elif v.isAtNoSentinelsFileNode():
		at.write(v,nosentinels=true)
	elif v.isAtFileNode():
		at.write(v)

	if not v.isAtIgnoreNode():
		writtenFiles.append(v.t)</t>
<t tx="edream.110203161858.175">if writeAtFileNodesFlag or writeDirtyAtFileNodesFlag:
	if len(writtenFiles) &gt; 0:
		es("finished")
	elif writeAtFileNodesFlag:
		es("no @file nodes in the selected tree")
	else:
		es("no dirty @file nodes")</t>
<t tx="edream.110203161858.176">def rawWrite (self,v):
	
	at = self
	write_new = not app().config.write_old_format_derived_files
	df = choose(write_new,at.new_df,at.old_df)
	df.rawWrite(v)
	
def silentWrite (self,v):

	self.old_df.silentWrite(v) # No new_df.silentWrite method.
	
def write (self,v,nosentinels=false):
	
	at = self
	write_new = not app().config.write_old_format_derived_files
	df = choose(write_new,at.new_df,at.old_df)
	df.write(v,nosentinels)
	
</t>
<t tx="edream.110203161858.177">def writeOldDerivedFiles (self,v):
	
	self.writeDerivedFiles(v,write_old=true)

def writeNewDerivedFiles (self,v,nosentinels=false):

	self.writeDerivedFiles(v,write_old=false)
	
def writeDerivedFiles (self,v,write_old):
	
	a = app() ; config = a.config
	old = config.write_old_format_derived_files
	config.write_old_format_derived_files = write_old
	self.writeAll(writeAtFileNodesFlag=true)
	config.write_old_format_derived_files = old</t>
<t tx="edream.110203161858.178">def writeMissing(self,v):
	
	trace("old_df",v)

	at = self
	write_new = not app().config.write_old_format_derived_files
	df = choose(write_new,at.new_df,at.old_df)
	df.initIvars()
	writtenFiles = false
	after = v.nodeAfterTree()
	while v and v != after:
		if v.isAtSilentFileNode() or (v.isAnyAtFileNode() and not v.isAtIgnoreNode()):
			missing = false ; valid = true
			df.targetFileName = v.anyAtFileNodeName()
			&lt;&lt; set missing if the file does not exist &gt;&gt;
			if valid and missing:
				&lt;&lt; create df.outputFile &gt;&gt;
				if at.outputFile:
					&lt;&lt; write the @file node &gt;&gt;
			v = v.nodeAfterTree()
		elif v.isAtIgnoreNode():
			v = v.nodeAfterTree()
		else:
			v = v.threadNext()
	
	if writtenFiles &gt; 0:
		es("finished")
	else:
		es("no missing @file node in the selected tree")</t>
<t tx="edream.110203161858.179"># This is similar, but not the same as, the logic in openWriteFile.

valid = df.targetFileName and len(df.targetFileName) &gt; 0

if valid:
	try:
		# Creates missing directives if option is enabled.
		df.scanAllDirectives(v)
		valid = df.errors == 0
	except:
		es("exception in atFile.scanAllDirectives")
		es_exception()
		valid = false

if valid:
	try:
		fn = df.targetFileName
		df.shortFileName = fn # name to use in status messages.
		df.targetFileName = os.path.join(df.default_directory,fn)
		df.targetFileName = os.path.normpath(df.targetFileName)
		path = df.targetFileName # Look for the full name, not just the directory.
		valid = path and len(path) &gt; 0
		if valid:
			missing = not os.path.exists(path)
	except:
		es("exception creating path:" + fn)
		es_exception()
		valid = false</t>
<t tx="edream.110203161858.180">try:
	df.outputFileName = df.targetFileName + ".leotmp"
	df.outputFile = open(df.outputFileName,'wb')
	if df.outputFile == None:
		es("can not open " + df.outputFileName)
except:
	es("exception opening:" + df.outputFileName)
	es_exception()
	df.outputFile = None
</t>
<t tx="edream.110203161858.181">if v.isAtSilentFileNode():
	at.silentWrite(v)
elif v.isAtRawFileNode():
	at.rawWrite(v)
elif v.isAtNoSentinelsFileNode():
	at.write(v,nosentinels=true)
elif v.isAtFileNode():
	at.write(v)
else: assert(0)

writtenFiles = true
</t>
<t tx="edream.110203161858.182">@others</t>
<t tx="edream.110203161858.183">def __init__(self,theCommander): 

	# trace("oldDerivedFile.__init__")

	self.commands = theCommander # The commander for the current window.
	self.fileCommands = self.commands.fileCommands

	self.initIvars()

def initIvars(self):

	&lt;&lt; init atFile ivars &gt;&gt;
</t>
<t tx="edream.110203161858.184"># errors is the number of errors seen while reading and writing.
self.errors = 0

# Initialized by atFile.scanAllDirectives.
self.default_directory = None
self.page_width = None
self.tab_width  = None
self.startSentinelComment = None
self.endSentinelComment = None
self.language = None

@ The files used by the output routines.  When tangling, we first write to a temporary output file.  After tangling is temporary file.  Otherwise we delete the old target file and rename the temporary file to be the target file.
@c
self.shortFileName = "" # short version of file name used for messages.
self.targetFileName = u"" # EKR 1/21/03: now a unicode string
self.outputFileName = u"" # EKR 1/21/03: now a unicode string
self.outputFile = None # The temporary output file.

@ The indentation used when outputting section references or at-others sections.  We add the indentation of the line containing the at-node directive and restore the old value when the
expansion is complete.
@c
self.indent = 0  # The unit of indentation is spaces, not tabs.

# The root of tree being written.
self.root = None

# Ivars used to suppress newlines between sentinels.
self.suppress_newlines = true # true: enable suppression of newlines.
self.newline_pending = false # true: newline is pending on read or write.

# Support of output_newline option
self.output_newline = getOutputNewline()

# Support of @raw
self.raw = false # true: in @raw mode
self.sentinels = true # true: output sentinels while expanding refs.

# Enables tracing (debugging only).
self.trace = false

# The encoding used to convert from unicode to a byte stream.
self.encoding = app().config.default_derived_file_encoding

# For interface between 3.x and 4.x read code.
self.file = None
self.importing = false
self.importRoot = None</t>
<t tx="edream.110203161858.185"></t>
<t tx="edream.110203161858.186">def readOpenFile(self,root,file,fileName,firstLines):
	
	"""Read an open 3.x derived file."""
	
	trace("old_df",root)

	at = self ; c = at.commands

	# Scan the file buffer
	at.scanAllDirectives(root)
	lastLines = at.scanText(file,root,[],endLeo)
	root.t.setVisited() # Disable warning about set nodes.

	# Handle first and last lines.
	try: body = root.t.tempBodyString
	except: body = ""
	lines = body.split('\n')
	at.completeFirstDirectives(lines,firstLines)
	at.completeLastDirectives(lines,lastLines)
	s = '\n'.join(lines).replace('\r', '')
	## root.t.setTnodeText(s)
	root.t.tempBodyString = s</t>
<t tx="edream.110203161858.187"># 14-SEP-2002 DTHEIN: added for use by atFile.read()

# this function scans the lines in the list 'out' for @first directives
# and appends the corresponding line from 'firstLines' to each @first 
# directive found.  NOTE: the @first directives must be the very first
# lines in 'out'.
def completeFirstDirectives(self,out,firstLines):

	tag = "@first"
	foundAtFirstYet = 0
	outRange = range(len(out))
	j = 0
	for k in outRange:
		# skip leading whitespace lines
		if (not foundAtFirstYet) and (len(out[k].strip()) == 0): continue
		# quit if something other than @first directive
		i = 0
		if not match(out[k],i,tag): break;
		foundAtFirstYet = 1
		# quit if no leading lines to apply
		if j &gt;= len(firstLines): break
		# make the new @first directive
		#18-SEP-2002 DTHEIN: remove trailing newlines because they are inserted later
		# 21-SEP-2002 DTHEIN: no trailing whitespace on empty @first directive
		leadingLine = " " + firstLines[j]
		out[k] = tag + leadingLine.rstrip() ; j += 1
</t>
<t tx="edream.110203161858.188"># 14-SEP-2002 DTHEIN: added for use by atFile.read()

# this function scans the lines in the list 'out' for @last directives
# and appends the corresponding line from 'lastLines' to each @last 
# directive found.  NOTE: the @last directives must be the very last
# lines in 'out'.
def completeLastDirectives(self,out,lastLines):

	tag = "@last"
	foundAtLastYet = 0
	outRange = range(-1,-len(out),-1)
	j = -1
	for k in outRange:
		# skip trailing whitespace lines
		if (not foundAtLastYet) and (len(out[k].strip()) == 0): continue
		# quit if something other than @last directive
		i = 0
		if not match(out[k],i,tag): break;
		foundAtLastYet = 1
		# quit if no trailing lines to apply
		if j &lt; -len(lastLines): break
		# make the new @last directive
		#18-SEP-2002 DTHEIN: remove trailing newlines because they are inserted later
		# 21-SEP-2002 DTHEIN: no trailing whitespace on empty @last directive
		trailingLine = " " + lastLines[j]
		out[k] = tag + trailingLine.rstrip() ; j -= 1
</t>
<t tx="edream.110203161858.189">@ Sections appear in the derived file in reference order, not tree order.  Therefore, when we insert the nth child of the parent there is no guarantee that the previous n-1 children have already been inserted. And it won't work just to insert the nth child as the last child if there aren't n-1 previous siblings.  For example, if we insert the third child followed by the second child followed by the first child the second and third children will be out of order.

To ensure that nodes are placed in the correct location we create "dummy" children as needed as placeholders.  In the example above, we would insert two dummy children when inserting the third child.  When inserting the other two children we replace the previously inserted dummy child with the actual children.

vnode child indices are zero-based.  Here we use 1-based indices.

With the "mirroring" scheme it is a structure error if we ever have to create dummy vnodes.  Such structure errors cause a second pass to be made, with an empty root.  This second pass will generate other structure errors, which are ignored.
@c
def createNthChild(self,n,parent,headline):

	assert(n &gt; 0)

	# Create any needed dummy children.
	dummies = n - parent.numberOfChildren() - 1
	if dummies &gt; 0:
		if 0: # CVS produces to many errors for this to be useful.
			es("dummy created")
		self.errors += 1
	while dummies &gt; 0:
		dummies -= 1
		dummy = parent.insertAsLastChild(leoNodes.tnode())
		# The user should never see this headline.
		dummy.initHeadString("Dummy")

	if n &lt;= parent.numberOfChildren():
		&lt;&lt; check the headlines &gt;&gt;
	else:
		# This is using a dummy; we should already have bumped errors.
		result = parent.insertAsLastChild(leoNodes.tnode())
	result.initHeadString(headline)
	
	result.setVisited() # Suppress all other errors for this node.
	result.t.setVisited() # Suppress warnings about unvisited nodes.
	return result</t>
<t tx="edream.110203161858.190"># 1/24/03: A kludgy fix to the problem of headlines containing comment delims.

result = parent.nthChild(n-1)
resulthead = result.headString()

if headline.strip() != resulthead.strip():
	start = self.startSentinelComment
	end = self.endSentinelComment
	if end and len(end) &gt; 0:
		# 1/25/03: The kludgy fix.
		# Compare the headlines without the delims.
		h1 =   headline.replace(start,"").replace(end,"")
		h2 = resulthead.replace(start,"").replace(end,"")
		if h1.strip() == h2.strip():
			# 1/25/03: Another kludge: use the headline from the outline, not the derived file.
			headline = resulthead
		else:
			self.errors += 1
	else:
		self.errors += 1
</t>
<t tx="edream.110203161858.191">def handleLinesFollowingSentinel (self,lines,sentinel,comments = true):
	
	"""convert lines following a sentinel to a single line"""
	
	m = " following" + sentinel + " sentinel"
	start = self.startSentinelComment
	end   = self.endSentinelComment
	
	if len(lines) == 1: # The expected case.
		s = lines[0]
	elif len(lines) == 5:
		self.readError("potential cvs conflict" + m)
		s = lines[1]
		es("using " + s)
	else:
		self.readError("unexpected lines" + m)
		es(len(lines), " lines" + m)
		s = "bad " + sentinel
		if comments: s = start + ' ' + s

	if comments:
		&lt;&lt; remove the comment delims from s &gt;&gt;
		
	# Undo the cweb hack: undouble @ signs if the opening comment delim ends in '@'.
	if start[-1:] == '@':
		s = s.replace('@@','@')

	return s</t>
<t tx="edream.110203161858.192"># Remove the starting comment and the blank.
# 5/1/03: The starting comment now looks like a sentinel, to warn users from changing it.
comment = start + '@ '
if match(s,0,comment):
	s = s[len(comment):]
else:
	self.readError("expecting comment" + m)

# Remove the trailing comment.
if len(end) == 0:
	s = string.strip(s[:-1])
else:
	k = s.rfind(end)
	s = string.strip(s[:k]) # works even if k == -1</t>
<t tx="edream.110203161858.193">def readLine (self,file):
	"""Reads one line from file using the present encoding"""
	
	s = readlineForceUnixNewline(file)
	u = toUnicode(s,self.encoding)
	return u

</t>
<t tx="edream.110203161858.194"># We expect only a single line, and more may exist if cvs detects a conflict.
# We accept the first line even if it looks like a sentinel.
# 5/1/03: The starting comment now looks like a sentinel, to warn users from changing it.

def readLinesToNextSentinel (self,file):
	
	"""	read lines following multiline sentinels"""
	
	lines = []
	start = self.startSentinelComment + '@ '
	nextLine = self.readLine(file)
	while nextLine and len(nextLine) &gt; 0:
		if len(lines) == 0:
			lines.append(nextLine)
			nextLine = self.readLine(file)
		else:
			# 5/1/03: looser test then calling sentinelKind.
			s = nextLine ; i = skip_ws(s,0)
			if match(s,i,start):
				lines.append(nextLine)
				nextLine = self.readLine(file)
			else: break

	return nextLine,lines</t>
<t tx="edream.110203161858.195"># Scans the doc part and appends the text out.
# s,i point to the present line on entry.

def scanDoc(self,file,s,i,out,kind):

	endKind = choose(kind ==startDoc,endDoc,endAt)
	single = len(self.endSentinelComment) == 0
	&lt;&lt; Skip the opening sentinel &gt;&gt;
	&lt;&lt; Skip an opening block delim &gt;&gt;
	nextLine = None ; kind = noSentinel
	while len(s) &gt; 0:
		&lt;&lt; set kind, nextLine &gt;&gt;
		if kind == endKind: break
		&lt;&lt; Skip the leading stuff &gt;&gt;
		&lt;&lt; Append s to out &gt;&gt;
		if nextLine:
			s = nextLine ; nextLine = None
		else: s = self.readLine(file)
	if kind != endKind:
		self.readError("Missing " + self.sentinelName(endKind) + " sentinel")
	&lt;&lt; Remove a closing block delim from out &gt;&gt;</t>
<t tx="edream.110203161858.196">assert(match(s,i,choose(kind == startDoc, "+doc", "+at")))

out.append(choose(kind == startDoc, "@doc", "@"))
s = self.readLine(file)
</t>
<t tx="edream.110203161858.197">if not single:
	j = skip_ws(s,0)
	if match(s,j,self.startSentinelComment):
		s = self.readLine(file)</t>
<t tx="edream.110203161858.198">@ For non-sentinel lines we look ahead to see whether the next line is a sentinel.
@c

assert(nextLine==None)

kind = self.sentinelKind(s)

if kind == noSentinel:
	j = skip_ws(s,0)
	blankLine = s[j] == '\n'
	nextLine = self.readLine(file)
	nextKind = self.sentinelKind(nextLine)
	if blankLine and nextKind == endKind:
		kind = endKind # stop the scan now
</t>
<t tx="edream.110203161858.199"># Point i to the start of the real line.

if single: # Skip the opening comment delim and a blank.
	i = skip_ws(s,0)
	if match(s,i,self.startSentinelComment):
		i += len(self.startSentinelComment)
		if match(s,i," "): i += 1
else:
	i = self.skipIndent(s,0, self.indent)
</t>
<t tx="edream.110203161858.200"># Append the line with a newline if it is real

line = s[i:-1] # remove newline for rstrip.

if line == line.rstrip():
	# no trailing whitespace: the newline is real.
	out.append(line + '\n')
else:
	# trailing whitespace: the newline is not real.
	out.append(line)
</t>
<t tx="edream.110203161858.201"># This code will typically only be executed for HTML files.

if not single:

	delim = self.endSentinelComment
	n = len(delim)
	
	# Remove delim and possible a leading newline.
	s = string.join(out,"")
	s = s.rstrip()
	if s[-n:] == delim:
		s = s[:-n]
	if s[-1] == '\n':
		s = s[:-1]
		
	# Rewrite out in place.
	del out[:]
	out.append(s)
</t>
<t tx="edream.110203161858.202">@ This method is the read code.

scanText reads lines from the file until the given ending sentinel is found, and warns if any other ending sentinel is found instead.  It calls itself recursively to handle most nested sentinels.

@c
def scanText (self,file,v,out,endSentinelKind,nextLine=None):

	a = app() ; c = self.commands ; config = a.config
	lastLines = [] # The lines after @-leo
	lineIndent = 0 ; linep = 0 # Changed only for sentinels.
	while 1:
		&lt;&lt; put the next line into s &gt;&gt;
		&lt;&lt; set kind, nextKind &gt;&gt;
		if kind != noSentinel:
			&lt;&lt; set lineIndent, linep and leading_ws &gt;&gt;
			i = self.skipSentinelStart(s,0)
		&lt;&lt; handle the line in s &gt;&gt;
	&lt;&lt; handle unexpected end of text &gt;&gt;
	assert(len(s)==0 and nextLine==None) # We get here only if readline fails.
	return lastLines # We get here only if there are problems.</t>
<t tx="edream.110203161858.203">if nextLine:
	s = nextLine ; nextLine = None
else:
	s = self.readLine(file)
	if len(s) == 0: break

# trace(`s`)</t>
<t tx="edream.110203161858.204">@ For non-sentinel lines we look ahead to see whether the next line is a sentinel.  If so, the newline that ends a non-sentinel line belongs to the next sentinel.
@c

assert(nextLine==None)

kind = self.sentinelKind(s)

if kind == noSentinel:
	nextLine = self.readLine(file)
	nextKind = self.sentinelKind(nextLine)
else:
	nextLine = nextKind = None

# nextLine != None only if we have a non-sentinel line.
# Therefore, nextLine == None whenever scanText returns.</t>
<t tx="edream.110203161858.205">@ lineIndent is the total indentation on a sentinel line.  The first "self.indent" portion of that must be removed when recreating text.  leading_ws is the remainder of the leading whitespace.  linep points to the first "real" character of a line, the character following the "indent" whitespace.
@c

# Point linep past the first self.indent whitespace characters.
if self.raw: # 10/15/02
	linep =0
else:
	linep = self.skipIndent(s,0,self.indent)

# Set lineIndent to the total indentation on the line.
lineIndent = 0 ; i = 0
while i &lt; len(s):
	if s[i] == '\t': lineIndent += (abs(self.tab_width) - (lineIndent % abs(self.tab_width)))
	elif s[i] == ' ': lineIndent += 1
	else: break
	i += 1
# trace("lineIndent:" +`lineIndent` + ", " + `s`)

# Set leading_ws to the additional indentation on the line.
leading_ws = s[linep:i]</t>
<t tx="edream.110203161858.206"># Issue the error.
name = self.sentinelName(endSentinelKind)
self.readError("Unexpected end of file. Expecting " + name + "sentinel" )
</t>
<t tx="edream.110203161858.207">if kind == noSentinel:
	&lt;&lt; append non-sentinel line &gt;&gt;
&lt;&lt; handle common sentinels &gt;&gt;
&lt;&lt; handle rare sentinels &gt;&gt;
else:
	&lt;&lt; warn about unknown sentinel &gt;&gt;</t>
<t tx="edream.110203161858.208"># We don't output the trailing newline if the next line is a sentinel.
if self.raw: # 10/15/02
	i = 0
else:
	i = self.skipIndent(s,0,self.indent)

assert(nextLine != None)

if nextKind == noSentinel:
	line = s[i:]
	out.append(line)
else:
	line = s[i:-1] # don't output the newline
	out.append(line)
</t>
<t tx="edream.110203161858.209">elif kind in (endAt, endBody,endDoc,endLeo,endNode,endOthers):
		&lt;&lt; handle an ending sentinel &gt;&gt;
elif kind == startBody:
	&lt;&lt; scan @+body &gt;&gt;
elif kind == startNode:
	&lt;&lt; scan @+node &gt;&gt;
elif kind == startRef:
	&lt;&lt; scan old ref &gt;&gt;
elif kind == startAt:
	&lt;&lt; scan @+at &gt;&gt;
elif kind == startDoc:
	&lt;&lt; scan @+doc &gt;&gt;
elif kind == startOthers:
	&lt;&lt; scan @+others &gt;&gt;</t>
<t tx="edream.110203161858.210"># trace("end sentinel:", self.sentinelName(kind))

if kind == endSentinelKind:
	if kind == endLeo:
		# Ignore everything after @-leo.
		# Such lines were presumably written by @last.
		while 1:
			s = self.readLine(file)
			if len(s) == 0: break
			lastLines.append(s) # Capture all trailing lines, even if empty.
	elif kind == endBody:
		self.raw = false
	# nextLine != None only if we have a non-sentinel line.
	# Therefore, nextLine == None whenever scanText returns.
	assert(nextLine==None)
	return lastLines # End the call to scanText.
else:
	# Tell of the structure error.
	name = self.sentinelName(kind)
	expect = self.sentinelName(endSentinelKind)
	self.readError("Ignoring " + name + " sentinel.  Expecting " + expect)</t>
<t tx="edream.110203161858.211">@ The sentinel contains an @ followed by a section name in angle brackets.  This code is different from the code for the @@ sentinel: the expansion of the reference does not include a trailing newline.
@c

assert(match(s,i,"&lt;&lt;"))

if len(self.endSentinelComment) == 0:
	line = s[i:-1] # No trailing newline
else:
	k = s.find(self.endSentinelComment,i)
	line = s[i:k] # No trailing newline, whatever k is.
		
# 10/30/02: undo cweb hack here
start = self.startSentinelComment
if start and len(start) &gt; 0 and start[-1] == '@':
	line = line.replace('@@','@')

out.append(line)</t>
<t tx="edream.110203161858.212">assert(match(s,i,"+at"))
self.scanDoc(file,s,i,out,kind)</t>
<t tx="edream.110203161858.213">assert(match(s,i,"+body"))

child_out = [] ; child = v # Do not change out or v!
oldIndent = self.indent ; self.indent = lineIndent
self.scanText(file,child,child_out,endBody)

if 0:
	if child.isOrphan():
		self.readError("Replacing body text of orphan: " + child.headString())

# Set the body, removing cursed newlines.
# This must be done here, not in the @+node logic.
body = string.join(child_out, "")
body = body.replace('\r', '')
## child.t.setTnodeText(body)
child.t.tempBodyString = body
self.indent = oldIndent</t>
<t tx="edream.110203161858.214">assert(match(s,i,"+doc"))
self.scanDoc(file,s,i,out,kind)</t>
<t tx="edream.110203161858.215">assert(match(s,i,"+node:"))
i += 6

childIndex = 0 ; cloneIndex = 0
&lt;&lt; Set childIndex &gt;&gt;
&lt;&lt; Set cloneIndex &gt;&gt;
headline = ""
&lt;&lt; Set headline and ref &gt;&gt;

# print childIndex,headline

if childIndex == 0: # The root node.
	&lt;&lt; Check the filename in the sentinel &gt;&gt;
	# Put the text of the root node in the current node.
	self.scanText(file,v,out,endNode)
	v.t.setCloneIndex(cloneIndex)
	# if cloneIndex &gt; 0: trace("clone index:" + `cloneIndex` + ", " + `v`)
else:
	# NB: this call to createNthChild is the bottleneck!
	child = self.createNthChild(childIndex,v,headline)
	child.t.setCloneIndex(cloneIndex)
	# if cloneIndex &gt; 0: trace("clone index:" + `cloneIndex` + ", " + `child`)
	self.scanText(file,child,out,endNode)

&lt;&lt; look for sentinels that may follow a reference &gt;&gt;</t>
<t tx="edream.110203161858.216">i = skip_ws(s,i) ; j = i
while i &lt; len(s) and s[i] in string.digits:
	i += 1

if j == i:
	self.readError("Implicit child index in @+node")
	childIndex = 0
else:
	childIndex = int(s[j:i])

if match(s,i,':'):
	i += 1 # Skip the ":".
else:
	self.readError("Bad child index in @+node")</t>
<t tx="edream.110203161858.217">while i &lt; len(s) and s[i] != ':' and not is_nl(s,i):
	if match(s,i,"C="):
		# set cloneIndex from the C=nnn, field
		i += 2 ; j = i
		while i &lt; len(s) and s[i] in string.digits:
			i += 1
		if j &lt; i:
			cloneIndex = int(s[j:i])
	else: i += 1 # Ignore unknown status bits.

if match(s,i,":"):
	i += 1
else:
	self.readError("Bad attribute field in @+node")</t>
<t tx="edream.110203161858.218"># Set headline to the rest of the line.
# 6/22/03: don't strip leading whitespace.
if len(self.endSentinelComment) == 0:
	headline = s[i:-1].rstrip()
else:
	# 10/24/02: search from the right, not the left.
	k = s.rfind(self.endSentinelComment,i)
	headline = s[i:k].rstrip() # works if k == -1
	
# 10/23/02: The cweb hack: undouble @ signs if the opening comment delim ends in '@'.
if self.startSentinelComment[-1:] == '@':
	headline = headline.replace('@@','@')

# Set reference if it exists.
i = skip_ws(s,i)

if 0: # no longer used
	if match(s,i,"&lt;&lt;"):
		k = s.find("&gt;&gt;",i)
		if k != -1: ref = s[i:k+2]</t>
<t tx="edream.110203161858.219">h = headline.strip()

if h[:5] == "@file":
	i,junk,junk = scanAtFileOptions(h)
	fileName = string.strip(h[i:])
	if fileName != self.targetFileName:
		self.readError("File name in @node sentinel does not match file's name")
elif h[:8] == "@rawfile":
	fileName = string.strip(h[8:])
	if fileName != self.targetFileName:
		self.readError("File name in @node sentinel does not match file's name")
else:
	self.readError("Missing @file in root @node sentinel")
</t>
<t tx="edream.110203161858.220">s = self.readLine(file)
kind = self.sentinelKind(s)

if len(s) &gt; 1 and kind == startVerbatimAfterRef:
	s = self.readLine(file)
	# trace("verbatim:"+`s`)
	out.append(s)
elif len(s) &gt; 1 and self.sentinelKind(s) == noSentinel:
	out.append(s)
else:
	nextLine = s # Handle the sentinel or blank line later.
</t>
<t tx="edream.110203161858.221">assert(match(s,i,"+others"))

# Make sure that the generated at-others is properly indented.
out.append(leading_ws + "@others")

self.scanText(file,v,out,endOthers)</t>
<t tx="edream.110203161858.222">elif kind == startComment:
	&lt;&lt; scan @comment &gt;&gt;
elif kind == startDelims:
	&lt;&lt; scan @delims &gt;&gt;
elif kind == startDirective:
	&lt;&lt; scan @@ &gt;&gt;
elif kind == startLeo:
	&lt;&lt; scan @+leo &gt;&gt;
elif kind == startVerbatim:
	&lt;&lt; scan @verbatim &gt;&gt;</t>
<t tx="edream.110203161858.223">assert(match(s,i,"+leo"))
self.readError("Ignoring unexpected @+leo sentinel")</t>
<t tx="edream.110203161858.224"># The first '@' has already been eaten.
assert(match(s,i,"@"))

if match_word(s,i,"@raw"):
	self.raw = true
elif match_word(s,i,"@end_raw"):
	self.raw = false

e = self.endSentinelComment
s2 = s[i:]
if len(e) &gt; 0:
	k = s.rfind(e,i)
	if k != -1:
		s2 = s[i:k] + '\n'
	
start = self.startSentinelComment
if start and len(start) &gt; 0 and start[-1] == '@':
	s2 = s2.replace('@@','@')
out.append(s2)
# trace(`s2`)</t>
<t tx="edream.110203161858.225">assert(match(s,i,"comment"))

# We need do nothing more to ignore the comment line!
</t>
<t tx="edream.110203161858.226">assert(match(s,i-1,"@delims"));

# Skip the keyword and whitespace.
i0 = i-1
i = skip_ws(s,i-1+7)
	
# Get the first delim.
j = i
while i &lt; len(s) and not is_ws(s[i]) and not is_nl(s,i):
	i += 1

if j &lt; i:
	self.startSentinelComment = s[j:i]
	# print "delim1:", self.startSentinelComment

	# Get the optional second delim.
	j = i = skip_ws(s,i)
	while i &lt; len(s) and not is_ws(s[i]) and not is_nl(s,i):
		i += 1
	end = choose(j&lt;i,s[j:i],"")
	i2 = skip_ws(s,i)
	if end == self.endSentinelComment and (i2 &gt;= len(s) or is_nl(s,i2)):
		self.endSentinelComment = "" # Not really two params.
		line = s[i0:j]
		line = line.rstrip()
		out.append(line+'\n')
	else:
		self.endSentinelComment = end
		# print "delim2:",end
		line = s[i0:i]
		line = line.rstrip()
		out.append(line+'\n')
else:
	self.readError("Bad @delims")
	# Append the bad @delims line to the body text.
	out.append("@delims")</t>
<t tx="edream.110203161858.227">assert(match(s,i,"verbatim"))

# Skip the sentinel.
s = self.readLine(file) 

# Append the next line to the text.
i = self.skipIndent(s,0,self.indent)
out.append(s[i:])
</t>
<t tx="edream.110203161858.228">j = i
i = skip_line(s,i)
line = s[j:i]
self.readError("Unknown sentinel: " + line)</t>
<t tx="edream.110203161858.229"></t>
<t tx="edream.110203161858.230"># 4/5/03: config.write_clone_indices no longer used.

def nodeSentinelText(self,v):
	
	if v == self.root or not v.parent():
		index = 0
	else:
		index = v.childIndex() + 1

	h = v.headString()
	&lt;&lt; remove comment delims from h if necessary &gt;&gt;

	return str(index) + '::' + h</t>
<t tx="edream.110203161858.231">@ Bug fix 1/24/03:

If the present @language/@comment settings do not specify a single-line comment we remove all block comment delims from h.  This prevents headline text from interfering with the parsing of node sentinels.
@c

start = self.startSentinelComment
end = self.endSentinelComment

if end and len(end) &gt; 0:
	h = h.replace(start,"")
	h = h.replace(end,"")</t>
<t tx="edream.110203161858.232">def putCloseNodeSentinel(self,v):

	s = self.nodeSentinelText(v)
	self.putSentinel("@-node:" + s)</t>
<t tx="edream.110203161858.233">@ root is an ancestor of v, or root == v.  We call putCloseSentinel for v up to, but not including, root.
@c
def putCloseSentinels(self,root,v):

	self.putCloseNodeSentinel(v)
	while 1:
		v = v.parent()
		assert(v) # root must be an ancestor of v.
		if  v == root: break
		self.putCloseNodeSentinel(v)</t>
<t tx="edream.110203161858.234">@ This method is the same as putSentinel except we don't put an opening newline and leading whitespace.
@c
def putOpenLeoSentinel(self,s):
	
	if not self.sentinels:
		return # Handle @nosentinelsfile.

	self.os(self.startSentinelComment)
	self.os(s)
	encoding = self.encoding.lower()
	if encoding != "utf-8":
		self.os("-encoding=")
		self.os(encoding)
		self.os(".")
	self.os(self.endSentinelComment)
	if self.suppress_newlines: # 9/27/02
		self.newline_pending = true # Schedule a newline.
	else:
		self.onl() # End of sentinel.
</t>
<t tx="edream.110203161858.235">@ This method puts an open node sentinel for node v.
@c
def putOpenNodeSentinel(self,v):

	if v.isAtFileNode() and v != self.root:
		self.writeError("@file not valid in: " + v.headString())
		return
	
	s = self.nodeSentinelText(v)
	self.putSentinel("@+node:" + s)</t>
<t tx="edream.110203161858.236">@ root is an ancestor of v, or root == v.  We call putOpenNodeSentinel on all the descendents of root which are the ancestors of v.
@c
def putOpenSentinels(self,root,v):

	last = root
	while last != v:
		# Set node to v or the ancestor of v that is a child of last.
		node = v
		while node and node.parent() != last:
			node = node.parent()
		assert(node)
		self.putOpenNodeSentinel(node)
		last = node</t>
<t tx="edream.110203161858.237">@ All sentinels are eventually output by this method.

Sentinels include both the preceding and following newlines. This rule greatly simplies the code and has several important benefits:

1. Callers never have to generate newlines before or after sentinels.  Similarly, routines that expand code and doc parts never have to add "extra" newlines.
2. There is no need for a "no-newline" directive.  If text follows a section reference, it will appear just after the newline that ends sentinel at the end of the expansion of the reference.  If no significant text follows a reference, there will be two newlines following the ending sentinel.

The only exception is that no newline is required before the opening "leo" sentinel. The putLeoSentinel and isLeoSentinel routines handle this minor exception.
@c
def putSentinel(self,s):
	
	if not self.sentinels:
		return # Handle @nosentinelsfile.

	self.newline_pending = false # discard any pending newline.
	self.onl() ; self.putIndent(self.indent) # Start of sentinel.
	self.os(self.startSentinelComment)

	# 11/1/02: The cweb hack: if the opening comment delim ends in '@',
	# double all '@' signs except the first, which is "doubled" by the
	# trailing '@' in the opening comment delimiter.
	start = self.startSentinelComment
	if start and len(start) &gt; 0 and start[-1] == '@':
		assert(s and len(s)&gt;0 and s[0]=='@')
		s = s.replace('@','@@')[1:]

	self.os(s)
	self.os(self.endSentinelComment)
	if self.suppress_newlines:
		self.newline_pending = true # Schedule a newline.
	else:
		self.onl() # End of sentinel.</t>
<t tx="edream.110203161858.238">@ This method tells what kind of sentinel appears in line s.  Typically s will be an empty line before the actual sentinel, but it is also valid for s to be an actual sentinel line.

Returns (kind, s, emptyFlag), where emptyFlag is true if kind == noSentinel and s was an empty line on entry.
@c

def sentinelKind(self,s):

	# trace(s)
	i = skip_ws(s,0)
	if match(s,i,self.startSentinelComment): 
		i += len(self.startSentinelComment)
	else:
		return noSentinel

	# 10/30/02: locally undo cweb hack here
	start = self.startSentinelComment
	if start and len(start) &gt; 0 and start[-1] == '@':
		s = s[:i] + string.replace(s[i:],'@@','@')

	# Do not skip whitespace here!
	if match(s,i,"@&lt;&lt;"): return startRef
	if match(s,i,"@@"):   return startDirective
	if not match(s,i,'@'): return noSentinel
	j = i # start of lookup
	i += 1 # skip the at sign.
	if match(s,i,'+') or match(s,i,'-'):
		i += 1
	i = skip_c_id(s,i)
	key = s[j:i]
	if len(key) &gt; 0 and sentinelDict.has_key(key):
		# trace("found:",key)
		return sentinelDict[key]
	else:
		# trace("not found:",key)
		return noSentinel</t>
<t tx="edream.110203161858.239"># Returns the name of the sentinel for warnings.

sentinelNameDict = {
	noSentinel: "&lt;no sentinel&gt;",
	startAt:     "@+at",     endAt:     "@-at",
	startBody:   "@+body",   endBody:   "@-body",
	startDoc:    "@+doc",    endDoc:    "@-doc",
	startLeo:    "@+leo",    endLeo:    "@-leo",
	startNode:   "@+node",   endNode:   "@-node",
	startOthers: "@+others", endOthers: "@-others",
	startComment:   "@comment",
	startDelims:    "@delims",
	startDirective: "@@",
	startRef:       "@&lt;&lt;",
	startVerbatim:  "@verbatim",
	startVerbatimAfterRef: "@verbatimAfterRef" }

def sentinelName(self, kind):
	if atFile.sentinelNameDict.has_key(kind):
		return atFile.sentinelNameDict[kind]
	else:
		return "&lt;unknown sentinel!&gt;"</t>
<t tx="edream.110203161858.240">def skipSentinelStart(self,s,i):

	start = self.startSentinelComment
	assert(start and len(start)&gt;0)

	if is_nl(s,i): i = skip_nl(s,i)
	i = skip_ws(s,i)
	assert(match(s,i,start))
	i += len(start)
	# 7/8/02: Support for REM hack
	i = skip_ws(s,i)
	assert(i &lt; len(s) and s[i] == '@')
	return i + 1
</t>
<t tx="edream.110203161858.241"></t>
<t tx="edream.110203161858.242">def scanAll (self):

	c = self.commands ; v = c.rootVnode()
	while v:
		if v.isAtIgnoreNode():
			v = v.nodeAfterTree()
		elif v.isAtFileNode():
			self.scanFile(v)
			v = v.nodeAfterTree()
		else: v = v.threadNext()</t>
<t tx="edream.110203161858.243">def scanFile(self,root):

	es("scanning: " + root.headString())
	self.targetFileName = root.atFileNodeName()
	self.root = root
	self.errors = 0
	&lt;&lt; open file &gt;&gt;
	if self.errors &gt; 0: return 0
	&lt;&lt; Scan the file buffer &gt;&gt;
	return self.errors == 0</t>
<t tx="edream.110203161858.244">if len(self.targetFileName) == 0:
	self.readError("Missing file name")
else:
	try:
		file = open(self.targetFileName,'r')
	except:
		self.readError("Error reading file")
</t>
<t tx="edream.110203161858.245">self.indent = 0
out = []
self.scanHeader(file)
self.scanText(file,root,out,endLeo)
s = string.join(out, "")
root.setBodyStringOrPane(s)</t>
<t tx="edream.110203161858.246"></t>
<t tx="edream.110203161858.247"># Returns the kind of at-directive or noDirective.

def directiveKind(self,s,i):

	n = len(s)
	if i &gt;= n or s[i] != '@':
		return noDirective

	table = (
		("@c",cDirective),
		("@code",codeDirective),
		("@doc",docDirective),
		("@end_raw",endRawDirective),
		("@others",othersDirective),
		("@raw",rawDirective))

	# This code rarely gets executed, so simple code suffices.
	if i+1 &gt;= n or match(s,i,"@ ") or match(s,i,"@\t") or match(s,i,"@\n"):
		# 10/25/02: @space is not recognized in cweb mode.
		# 11/15/02: Noweb doc parts are _never_ scanned in cweb mode.
		return choose(self.language=="cweb",
			noDirective,atDirective)

	# 10/28/02: @c and @(nonalpha) are not recognized in cweb mode.
	# We treat @(nonalpha) separately because @ is in the colorizer table.
	if self.language=="cweb" and (
		match_word(s,i,"@c") or
		i+1&gt;= n or s[i+1] not in string.letters):
		return noDirective

	for name,directive in table:
		if match_word(s,i,name):
			return directive
	# 10/14/02: return miscDirective only for real directives.
	for name in leoColor.leoKeywords:
		if match_word(s,i,name):
			return miscDirective

	return noDirective</t>
<t tx="edream.110203161858.248">def error(self,message):

	es_error(message)
	self.errors += 1
</t>
<t tx="edream.110203161858.249">def readError(self,message):

	# This is useful now that we don't print the actual messages.
	if self.errors == 0:
		es_error("----- error reading @file " + self.targetFileName)
		self.error(message) # 9/10/02: we must increment self.errors!
		
	print message

	if 0: # CVS conflicts create too many messages.
		self.error(message)
	
	self.root.setOrphan()
	self.root.setDirty()</t>
<t tx="edream.110203161858.250">@ Once a directive is seen, no other related directives in nodes further up the tree have any effect.  For example, if an @color directive is seen in node v, no @color or @nocolor directives are examined in any ancestor of v.

This code is similar to Commands::scanAllDirectives, but it has been modified for use by the atFile class.
@c

def scanAllDirectives(self,v):
	
	"""Scan vnode v and v's ancestors looking for directives,
	setting corresponding atFile ivars.
	"""

	c = self.commands
	&lt;&lt; Set ivars &gt;&gt;
	&lt;&lt; Set path from @file node &gt;&gt;
	old = {}
	while v:
		s = v.t.bodyString
		dict = get_directives_dict(s)
		&lt;&lt; Test for @path &gt;&gt;
		&lt;&lt; Test for @encoding &gt;&gt;
		&lt;&lt; Test for @comment and @language &gt;&gt;
		&lt;&lt; Test for @header and @noheader &gt;&gt;
		&lt;&lt; Test for @lineending &gt;&gt;
		&lt;&lt; Test for @pagewidth &gt;&gt;
		&lt;&lt; Test for @tabwidth &gt;&gt;
		old.update(dict)
		v = v.parent()
	&lt;&lt; Set current directory &gt;&gt;
	&lt;&lt; Set comment Strings from delims &gt;&gt;</t>
<t tx="edream.110203161858.251">self.page_width = self.commands.page_width
self.tab_width  = self.commands.tab_width

self.default_directory = None # 8/2: will be set later.

delim1, delim2, delim3 = set_delims_from_language(c.target_language)
self.language = c.target_language

self.encoding = app().config.default_derived_file_encoding
self.output_newline = getOutputNewline() # 4/24/03: initialize from config settings.</t>
<t tx="edream.110203161858.252"># An absolute path in an @file node over-rides everything else.
# A relative path gets appended to the relative path by the open logic.

# Bug fix: 10/16/02
if v.isAtFileNode():
	name = v.atFileNodeName()
elif v.isAtRawFileNode():
	name = v.atRawFileNodeName()
elif v.isAtNoSentinelsFileNode():
	name = v.atNoSentinelsFileNodeName()
else:
	name = ""

dir = choose(name,os.path.dirname(name),None)
if dir and len(dir) &gt; 0 and os.path.isabs(dir):
	if os.path.exists(dir):
		self.default_directory = dir
	else: # 9/25/02
		self.default_directory = makeAllNonExistentDirectories(dir)
		if not self.default_directory:
			self.error("Directory \"" + dir + "\" does not exist")
			
</t>
<t tx="edream.110203161858.253"># 10/17/02: @language and @comment may coexist in @file trees.
# For this to be effective the @comment directive should follow the @language directive.

if not old.has_key("comment") and dict.has_key("comment"):
	k = dict["comment"]
	# 11/14/02: Similar to fix below.
	delim1, delim2, delim3 = set_delims_from_string(s[k:])

# Reversion fix: 12/06/02: We must use elif here, not if.
elif not old.has_key("language") and dict.has_key("language"):
	k = dict["language"]
	# 11/14/02: Fix bug reported by J.M.Gilligan.
	self.language,delim1,delim2,delim3 = set_language(s,k)</t>
<t tx="edream.110203161858.254">if not old.has_key("encoding") and dict.has_key("encoding"):
	
	e = scanAtEncodingDirective(s,dict)
	if e:
		self.encoding = e</t>
<t tx="edream.110203161858.255"># EKR: 10/10/02: perform the sames checks done by tangle.scanAllDirectives.
if dict.has_key("header") and dict.has_key("noheader"):
	es("conflicting @header and @noheader directives")</t>
<t tx="edream.110203161858.256">if not old.has_key("lineending") and dict.has_key("lineending"):
	
	lineending = scanAtLineendingDirective(s,dict)
	if lineending:
		self.output_newline = lineending
</t>
<t tx="edream.110203161858.257"># We set the current director to a path so future writes will go to that directory.

loadDir = app().loadDir

if not self.default_directory and not old.has_key("path") and dict.has_key("path"):

	k = dict["path"]
	&lt;&lt; compute relative path from s[k:] &gt;&gt;
	if path and len(path) &gt; 0:
		base = getBaseDirectory() # returns "" on error.
		path = os.path.join(base,path)
		if os.path.isabs(path):
			&lt;&lt; handle absolute path &gt;&gt;
		else:
			self.error("ignoring bad @path: " + path)
	else:
		self.error("ignoring empty @path")</t>
<t tx="edream.110203161858.258">j = i = k + len("@path")
i = skip_to_end_of_line(s,i)
path = string.strip(s[j:i])

# Remove leading and trailing delims if they exist.
if len(path) &gt; 2 and (
	(path[0]=='&lt;' and path[-1] == '&gt;') or
	(path[0]=='"' and path[-1] == '"') ):
	path = path[1:-1]
path = path.strip()

if 0: # 11/14/02: we want a _relative_ path, not an absolute path.
	path = os.path.join(loadDir,path)</t>
<t tx="edream.110203161858.259"># path is an absolute path.

if os.path.exists(path):
	self.default_directory = path
else: # 9/25/02
	self.default_directory = makeAllNonExistentDirectories(path)
	if not self.default_directory:
		self.error("invalid @path: " + path)
</t>
<t tx="edream.110203161858.260">if dict.has_key("pagewidth") and not old.has_key("pagewidth"):
	
	w = scanAtPagewidthDirective(s,dict,issue_error_flag=true)
	if w and w &gt; 0:
		self.page_width = w</t>
<t tx="edream.110203161858.261">if dict.has_key("tabwidth") and not old.has_key("tabwidth"):
	
	w = scanAtTabwidthDirective(s,dict,issue_error_flag=true)
	if w and w != 0:
		self.tab_width = w

</t>
<t tx="edream.110203161858.262"># This code is executed if no valid absolute path was specified in the @file node or in an @path directive.

if c.frame and not self.default_directory:
	base = getBaseDirectory() # returns "" on error.
	for dir in (c.tangle_directory,c.frame.openDirectory,c.openDirectory):
		if dir and len(dir) &gt; 0:
			dir = os.path.join(base,dir)
			if os.path.isabs(dir): # Errors may result in relative or invalid path.
				if os.path.exists(dir):
					self.default_directory = dir ; break
				else: # 9/25/02
					self.default_directory = makeAllNonExistentDirectories(dir)

if not self.default_directory:
	# This should never happen: c.openDirectory should be a good last resort.
	self.error("No absolute directory specified anywhere.")
	self.default_directory = ""</t>
<t tx="edream.110203161858.263"># Use single-line comments if we have a choice.
# 8/2/01: delim1,delim2,delim3 now correspond to line,start,end
if delim1:
	self.startSentinelComment = delim1
	self.endSentinelComment = "" # Must not be None.
elif delim2 and delim3:
	self.startSentinelComment = delim2
	self.endSentinelComment = delim3
else: # Emergency!
	# assert(0)
	es("Unknown language: using Python comment delimiters")
	es("c.target_language:"+`c.target_language`)
	es("delim1,delim2,delim3:" + `delim1`+":"+`delim2`+":"+`delim3`)
	self.startSentinelComment = "#" # This should never happen!
	self.endSentinelComment = ""</t>
<t tx="edream.110203161858.264"># Skip past whitespace equivalent to width spaces.

def skipIndent(self,s,i,width):

	ws = 0 ; n = len(s)
	while i &lt; n and ws &lt; width:
		if   s[i] == '\t': ws += (abs(self.tab_width) - (ws % abs(self.tab_width)))
		elif s[i] == ' ':  ws += 1
		else: break
		i += 1
	return i</t>
<t tx="edream.110203161858.265">def writeError(self,message):

	if self.errors == 0:
		es_error("errors writing: " + self.targetFileName)

	self.error(message)
	self.root.setOrphan()
	self.root.setDirty()</t>
<t tx="edream.110203161858.266"></t>
<t tx="edream.110203161858.267"></t>
<t tx="edream.110203161858.268">def rawWrite(self,root):

	trace("old_df",root)
	
	c = self.commands ; self.root = root
	self.errors = 0
	c.endEditing() # Capture the current headline.
	try:
		self.targetFileName = root.atRawFileNodeName()
		ok = self.openWriteFile(root)
		if not ok: return
		next = root.nodeAfterTree()
		&lt;&lt; write root's tree &gt;&gt;
		self.closeWriteFile()
		self.replaceTargetFileIfDifferent()
		root.clearOrphan() ; root.clearDirty()
	except:
		self.handleWriteException(root)
</t>
<t tx="edream.110203161858.269">next = root.nodeAfterTree()

if 0: # Clone indices are no longer used.
	self.updateCloneIndices(root, next)

&lt;&lt; put all @first lines in root &gt;&gt;
self.putOpenLeoSentinel("@+leo")
&lt;&lt; put optional @comment sentinel lines &gt;&gt;

v = root
while v and v != next:
	&lt;&lt; Write v's node &gt;&gt;
	v = v.threadNext()

self.putSentinel("@-leo")
&lt;&lt; put all @last lines in root &gt;&gt;</t>
<t tx="edream.110203161858.270">@ Write any @first lines.  These lines are also converted to @verbatim lines, so the read logic simply ignores lines preceding the @+leo sentinel.
@c

s = root.t.bodyString
tag = "@first"
i = 0
while match(s,i,tag):
	i += len(tag)
	i = skip_ws(s,i)
	j = i
	i = skip_to_end_of_line(s,i)
	# 21-SEP-2002 DTHEIN: write @first line, whether empty or not
	line = s[j:i]
	self.putBuffered(line) ; self.onl()
	i = skip_nl(s,i)</t>
<t tx="edream.110203161858.271">s2 = app().config.output_initial_comment
if s2:
	lines = string.split(s2,"\\n")
	for line in lines:
		line = line.replace("@date",time.asctime())
		if len(line)&gt; 0:
			self.putSentinel("@comment " + line)
</t>
<t tx="edream.110203161858.272">self.putOpenNodeSentinel(v)
	
s = v.bodyString()
if s and len(s) &gt; 0:
	self.putSentinel("@+body")
	if self.newline_pending:
		self.newline_pending = false
		self.onl()
	s = toEncodedString(s,self.encoding,reportErrors=true) # 3/7/03
	self.outputStringWithLineEndings(s)
	self.putSentinel("@-body")
	
self.putCloseNodeSentinel(v)
</t>
<t tx="edream.110203161858.273">@ Write any @last lines.  These lines are also converted to @verbatim lines, so the read logic simply ignores lines following the @-leo sentinel.
@c

tag = "@last"
lines = string.split(root.t.bodyString,'\n')
n = len(lines) ; j = k = n - 1
# Don't write an empty last line.
if j &gt;= 0 and len(lines[j])==0:
	j = k = n - 2
# Scan backwards for @last directives.
while j &gt;= 0:
	line = lines[j]
	if match(line,0,tag): j -= 1
	else: break
# Write the @last lines.
for line in lines[j+1:k+1]:
	i = len(tag) ; i = skip_ws(line,i)
	self.putBuffered(line[i:]) ; self.onl()</t>
<t tx="edream.110203161858.274">def silentWrite(self,root):

	trace("old_df",root)

	c = self.commands ; self.root = root
	self.errors = 0
	c.endEditing() # Capture the current headline.
	try:
		self.targetFileName = root.atSilentFileNodeName()
		ok = self.openWriteFile(root)
		if not ok: return
		next = root.nodeAfterTree()
		v = root
		while v and v != next:
			&lt;&lt; Write v's headline if it starts with @@ &gt;&gt;
			&lt;&lt; Write v's body &gt;&gt;
			v = v.threadNext()
		self.closeWriteFile()
		self.replaceTargetFileIfDifferent()
		root.clearOrphan() ; root.clearDirty()
	except:
		self.handleWriteException(root)</t>
<t tx="edream.110203161858.275">s = v.headString()
if match(s,0,"@@"):
	s = s[2:]
	if s and len(s) &gt; 0:
		s = toEncodedString(s,self.encoding,reportErrors=true) # 3/7/03
		self.outputFile.write(s)
</t>
<t tx="edream.110203161858.276">s = v.bodyString()
if s and len(s) &gt; 0:
	s = toEncodedString(s,self.encoding,reportErrors=true) # 3/7/03
	self.outputStringWithLineEndings(s)</t>
<t tx="edream.110203161858.277"># This is the entry point to the write code.  root should be an @file vnode.

def write(self,root,nosentinels=false):
	
	trace("old_df",root)
	
	# Remove any old tnodeList.
	if hasattr(root,"tnodeList"):
		trace("removing tnodeList for " + `root`)
		delattr(root,"tnodeList")

	c = self.commands
	self.sentinels = not nosentinels
	&lt;&lt; initialize &gt;&gt;
	try:
		&lt;&lt; open the file; return on error &gt;&gt;
		root.clearVisitedInTree()
		&lt;&lt; write then entire @file tree &gt;&gt;
		self.closeWriteFile()
		&lt;&lt; warn about @ignored and orphans &gt;&gt;
		&lt;&lt; finish writing &gt;&gt;
	except:
		self.handleWriteException()
</t>
<t tx="edream.110203161858.278">self.errors = 0 # 9/26/02
c.setIvarsFromPrefs()
self.root = root
self.raw = false
c.endEditing() # Capture the current headline.</t>
<t tx="edream.110203161858.279">if nosentinels:
	self.targetFileName = root.atNoSentinelsFileNodeName()
else:
	self.targetFileName = root.atFileNodeName()

ok = self.openWriteFile(root)
if not ok: return</t>
<t tx="edream.110203161858.280">next = root.nodeAfterTree()

&lt;&lt; put all @first lines in root &gt;&gt;
&lt;&lt; write the derived file &gt;&gt;
&lt;&lt; put all @last lines in root &gt;&gt;

root.setVisited()</t>
<t tx="edream.110203161858.281">tag1 = "@+leo"

self.putOpenLeoSentinel(tag1)
self.putInitialComment()
self.putOpenNodeSentinel(root)
self.putBodyPart(root)
self.putCloseNodeSentinel(root)
self.putSentinel("@-leo")</t>
<t tx="edream.110203161858.282"># 10/26/02: Always warn, even when language=="cweb"

next = root.nodeAfterTree()
v = root
while v and v != next:
	if not v.isVisited():
		self.writeError("Orphan node:  " + v.headString())
	if v.isAtIgnoreNode():
		self.writeError("@ignore node: " + v.headString())
	v = v.threadNext()
</t>
<t tx="edream.110203161858.283">@ We set the orphan and dirty flags if there are problems writing the file to force Commands::write_LEO_file to write the tree to the .leo file.
@c

if self.errors &gt; 0 or self.root.isOrphan():
	root.setOrphan()
	root.setDirty() # 2/9/02: make _sure_ we try to rewrite this file.
	os.remove(self.outputFileName) # Delete the temp file.
	es("Not written: " + self.outputFileName)
else:
	root.clearOrphan()
	root.clearDirty()
	self.replaceTargetFileIfDifferent()</t>
<t tx="edream.110203161858.284"></t>
<t tx="edream.110203161858.285">def closeWriteFile (self):
	
	if self.outputFile:
		if self.suppress_newlines and self.newline_pending:
			self.newline_pending = false
			self.onl() # Make sure file ends with a newline.
		self.outputFile.flush()
		self.outputFile.close()
		self.outputFile = None
</t>
<t tx="edream.110203161858.286">def handleWriteException (self,root=None):
	
	es("exception writing:" + self.targetFileName)
	es_exception()
	
	if self.outputFile:
		self.outputFile.flush()
		self.outputFile.close()
		self.outputFile = None
	
	if self.outputFileName != None:
		try: # Just delete the temp file.
			os.remove(self.outputFileName)
		except:
			es("exception deleting:" + self.outputFileName)
			es_exception()

	if root:
		# Make sure we try to rewrite this file.
		root.setOrphan()
		root.setDirty()</t>
<t tx="edream.110203161858.287"># Open files.  Set root.orphan and root.dirty flags and return on errors.

def openWriteFile (self,root):

	try:
		self.scanAllDirectives(root)
		valid = self.errors == 0
	except:
		es("exception in atFile.scanAllDirectives")
		es_exception()
		valid = false
	
	if valid:
		try:
			fn = self.targetFileName
			self.shortFileName = fn # name to use in status messages.
			self.targetFileName = os.path.join(self.default_directory,fn)
			self.targetFileName = os.path.normpath(self.targetFileName)
			path = os.path.dirname(self.targetFileName)
			if path and len(path) &gt; 0:
				valid = os.path.exists(path)
				if not valid:
					self.writeError("path does not exist: " + path)
			else:
				valid = false
		except:
			es("exception creating path:" + fn)
			es_exception()
			valid = false
	
	if valid:
		if os.path.exists(self.targetFileName):
			try:
				read_only = not os.access(self.targetFileName,os.W_OK)
				if read_only:
					es("read only: " + self.targetFileName)
					valid = false
			except:
				pass # os.access() may not exist on all platforms.
		
	if valid:
		try:
			self.outputFileName = self.targetFileName + ".tmp"
			self.outputFile = open(self.outputFileName,'wb')
			valid = self.outputFile != None
			if not valid:
				self.writeError("can not open " + self.outputFileName)
		except:
			es("exception opening:" + self.outputFileName)
			es_exception()
			valid = false
	
	if not valid:
		root.setOrphan()
		root.setDirty()
	
	return valid</t>
<t tx="edream.110203161858.288">def putInitialComment (self):
	
	s2 = app().config.output_initial_comment
	if s2:
		lines = string.split(s2,"\\n")
		for line in lines:
			line = line.replace("@date",time.asctime())
			if len(line)&gt; 0:
				self.putSentinel("@comment " + line)</t>
<t tx="edream.110203161858.289">def replaceTargetFileIfDifferent (self):
	
	assert(self.outputFile == None)
	
	if os.path.exists(self.targetFileName):
		if filecmp.cmp(self.outputFileName,self.targetFileName):
			&lt;&lt; delete the output file &gt;&gt;
		else:
			&lt;&lt; replace the target file with the output file &gt;&gt;
	else:
		&lt;&lt; rename the output file to be the target file &gt;&gt;
</t>
<t tx="edream.110203161858.290">try: # Just delete the temp file.
	os.remove(self.outputFileName)
except:
	es("exception deleting:" + self.outputFileName)
	es_exception()

es("unchanged: " + self.shortFileName)</t>
<t tx="edream.110203161858.291">try:
	# 10/6/02: retain the access mode of the previous file,
	# removing any setuid, setgid, and sticky bits.
	mode = (os.stat(self.targetFileName))[0] &amp; 0777
except:
	mode = None

try: # Replace target file with temp file.
	os.remove(self.targetFileName)
	try:
		utils_rename(self.outputFileName,self.targetFileName)
		if mode != None: # 10/3/02: retain the access mode of the previous file.
			try:
				os.chmod(self.targetFileName,mode)
			except:
				es("exception in os.chmod(%s)" % (self.targetFileName))
		es("writing: " + self.shortFileName)
	except:
		# 6/28/03
		self.writeError("exception renaming: %s to: %s" % (self.outputFileName,self.targetFileName))
		es_exception()
except:
	self.writeError("exception removing:" + self.targetFileName)
	es_exception()
	try: # Delete the temp file when the deleting the target file fails.
		os.remove(self.outputFileName)
	except:
		es("exception deleting:" + self.outputFileName)
		es_exception()</t>
<t tx="edream.110203161858.292">try:
	utils_rename(self.outputFileName,self.targetFileName)
	es("creating: " + self.targetFileName)
except:
	self.writeError("exception renaming:" + self.outputFileName +
		" to " + self.targetFileName)
	es_exception()</t>
<t tx="edream.110203161858.293"># Write the string s as-is except that we replace '\n' with the proper line ending.

def outputStringWithLineEndings (self,s):

	# Calling self.onl() runs afoul of queued newlines.
	self.os(s.replace('\n',self.output_newline))</t>
<t tx="edream.110203161858.294">def putBodyPart(self,v):
	
	""" Generate the body enclosed in sentinel lines."""

	# trace(`v`)
	s = v.t.bodyString
	i = skip_ws_and_nl(s, 0)
	if i &gt;= len(s): return

	s = removeTrailingWs(s) # don't use string.rstrip!
	self.putSentinel("@+body")
	&lt;&lt; put code/doc parts and sentinels &gt;&gt;
	self.putSentinel("@-body")</t>
<t tx="edream.110203161858.295">i = 0 ; n = len(s)
firstLastHack = 1

if firstLastHack:
	&lt;&lt; initialize lookingForFirst/Last &amp; initialLastDirective &gt;&gt;
while i &lt; n:
	kind = self.directiveKind(s,i)
	if firstLastHack:
		&lt;&lt; set lookingForFirst/Last &amp; initialLastDirective &gt;&gt;
	j = i
	if kind == docDirective or kind == atDirective:
		i = self.putDoc(s,i,kind)
	elif ( # 10/16/02
		kind == miscDirective or
		kind == rawDirective or
		kind == endRawDirective ):
		if firstLastHack:
			&lt;&lt; handle misc directives &gt;&gt;
		else:
			i = self.putDirective(s,i)
	elif kind == noDirective or kind == othersDirective:
		i = self.putCodePart(s,i,v)
	elif kind == cDirective or kind == codeDirective:
		i = self.putDirective(s,i)
		i = self.putCodePart(s,i,v)
	else: assert(false) # We must handle everything that directiveKind returns
	assert(n == len(s))
	assert(j &lt; i) # We must make progress.

if firstLastHack:
	&lt;&lt; put out the last directives, if any &gt;&gt;</t>
<t tx="edream.110203161858.296"># 14-SEP-2002 DTHEIN: If this is the root node, then handle all @first directives here
lookingForLast = 0
lookingForFirst = 0
initialLastDirective = -1
lastDirectiveCount = 0
if (v == self.root):
	lookingForLast = 1
	lookingForFirst = 1</t>
<t tx="edream.110203161858.297"># 14-SEP-2002 DTHEIN: If first directive isn't @first, then stop looking for @first
if lookingForFirst:
	if kind != miscDirective:
		lookingForFirst = 0
	elif not match_word(s,i,"@first"):
		lookingForFirst = 0

if lookingForLast:
	if initialLastDirective == -1:
		if (kind == miscDirective) and match_word(s,i,"@last"):
			# mark the point where the last directive was found
			initialLastDirective = i
	else:
		if (kind != miscDirective) or (not match_word(s,i,"@last")):
			# found something after @last, so process the @last directives
			# in 'ignore them' mode
			i, initialLastDirective = initialLastDirective, -1
			lastDirectiveCount = 0
			kind = self.directiveKind(s,i)</t>
<t tx="edream.110203161858.298">if lookingForFirst: # DTHEIN: can only be true if it is @first directive
	i = self.putEmptyDirective(s,i)
elif (initialLastDirective != -1) and match_word(s,i,"@last"):
	# DTHEIN: can only be here if lookingForLast is true
	# skip the last directive ... we'll output it at the end if it
	# is truly 'last'
	lastDirectiveCount += 1
	i = skip_line(s,i)
else:
	i = self.putDirective(s,i)</t>
<t tx="edream.110203161858.299"># 14-SEP-2002 DTHEIN
if initialLastDirective != -1:
	d = initialLastDirective
	for k in range(lastDirectiveCount):
		d = self.putEmptyDirective(s,d)</t>
<t tx="edream.110203161858.300">@ This method outputs a doc section terminated by @code or end-of-text.  All other interior directives become part of the doc part.
@c
def putDoc(self,s,i,kind):

	if kind == atDirective:
		i += 1 ; tag = "at"
	elif kind == docDirective:
		i += 4 ; tag = "doc"
	else: assert(false)
	# Set j to the end of the doc part.
	n = len(s) ; j = i
	while j &lt; n:
		j = skip_line(s, j)
		kind = self.directiveKind(s, j)
		if kind == codeDirective or kind == cDirective:
			break
	self.putSentinel("@+" + tag)
	self.putDocPart(s[i:j])
	self.putSentinel("@-" + tag)
	return j</t>
<t tx="edream.110203161858.301"># Puts a comment part in comments.
# Note: this routine is _never_ called in cweb mode,
# so noweb section references are _valid_ in cweb doc parts!

def putDocPart(self,s):

	# j = skip_line(s,0) ; trace(`s[:j]`)
	c = self.commands
	single = len(self.endSentinelComment) == 0
	if not single:
		self.putIndent(self.indent)
		self.os(self.startSentinelComment) ; self.onl()
	# Put all lines.
	i = 0 ; n = len(s)
	while i &lt; n:
		self.putIndent(self.indent)
		leading = self.indent
		if single:
			self.os(self.startSentinelComment) ; self.oblank()
			leading += len(self.startSentinelComment) + 1
		&lt;&lt; copy words, splitting the line if needed &gt;&gt;
	if not single:
		# This comment is like a sentinel.
		self.onl() ; self.putIndent(self.indent)
		self.os(self.endSentinelComment)
		self.onl() # Note: no trailing whitespace.</t>
<t tx="edream.110203161858.302">@ We remove trailing whitespace from lines that have _not_ been split so that a newline has been inserted by this routine if and only if it is preceded by whitespace.
@c

line = i # Start of the current line.
while i &lt; n:
	word = i # Start of the current word.
	# Skip the next word and trailing whitespace.
	i = skip_ws(s, i)
	while i &lt; n and not is_nl(s,i) and not is_ws(s[i]):
		i += 1
	i = skip_ws(s,i)
	# Output the line if no more is left.
	if i &lt; n and is_nl(s,i):
		break
	# Split the line before the current word if needed.
	lineLen = i - line
	if line == word or leading + lineLen &lt; self.page_width:
		word = i # Advance to the next word.
	else:
		# Write the line before the current word and insert a newline.
		theLine = s[line:word]
		self.os(theLine)
		self.onl() # This line must contain trailing whitespace.
		line = i = word  # Put word on the next line.
		break
# Remove trailing whitespace and output the remainder of the line.
theLine = string.rstrip(s[line:i]) # from right.
self.os(theLine)
if i &lt; n and is_nl(s,i):
	i = skip_nl(s,i)
	self.onl() # No inserted newline and no trailing whitespace.</t>
<t tx="edream.110203161858.303">@ This method expands a code part, terminated by any at-directive except at-others.  It expands references and at-others and outputs @verbatim sentinels as needed.
@c
def putCodePart(self,s,i,v):

	c = self.commands
	atOthersSeen = false # true: at-others has been expanded.
	while i &lt; len(s):
		&lt;&lt; handle the start of a line &gt;&gt;
		&lt;&lt; put the line &gt;&gt;

	# Raw code parts can only end at the end of body text.
	self.raw = false
	return i</t>
<t tx="edream.110203161858.304">@ The at-others directive is the only directive that is recognized following leading whitespace, so it is just a little tricky to recognize it.
@c

leading_nl = (s[i] == body_newline) # 9/27/02: look ahead before outputting newline.
if leading_nl:
	i = skip_nl(s,i)
	self.onl() # 10/15/02: simpler to do it here.

#leading_ws1 = i # 1/27/03
j,delta = skip_leading_ws_with_indent(s,i,self.tab_width)
#leading_ws2 = j # 1/27/03
kind1 = self.directiveKind(s,i)
kind2 = self.directiveKind(s,j)
if self.raw:
	if kind1 == endRawDirective:
		&lt;&lt; handle @end_raw &gt;&gt;
else:
	if kind1 == othersDirective or kind2 == othersDirective:
		&lt;&lt; handle @others &gt;&gt;
	elif kind1 == rawDirective:
		&lt;&lt; handle @raw &gt;&gt;
	elif kind1 == noDirective:
		&lt;&lt; put @verbatim sentinel if necessary &gt;&gt;
	else:
		break # all other directives terminate the code part.</t>
<t tx="edream.110203161858.305"># This skips all indent and delta whitespace, so putAtOthers must generate it all.

if 0: # 9/27/02: eliminates the newline preceeding the @+others sentinel.
	# This does not seem to be a good idea.
	i = skip_line(s,i) 
else:
	i = skip_to_end_of_line(s,i)

if atOthersSeen:
	self.writeError("@others already expanded in: " + v.headString())
else:
	atOthersSeen = true
	self.putAtOthers(v, delta)
	
	# 12/8/02: Skip the newline _after_ the @others.
	if not self.sentinels and is_nl(s,i):
		i = skip_nl(s,i)
</t>
<t tx="edream.110203161858.306">self.raw = true
self.putSentinel("@@raw")
i = skip_line(s,i)</t>
<t tx="edream.110203161858.307">self.raw = false
self.putSentinel("@@end_raw")
i = skip_line(s,i)</t>
<t tx="edream.110203161858.308">if match (s,i,self.startSentinelComment + '@'):
	self.putSentinel("@verbatim") # Bug fix (!!): 9/20/03</t>
<t tx="edream.110203161858.309">if not self.raw:
	# 12/8/02: Don't write trailing indentation if not writing sentinels.
	if self.sentinels or j &lt; len(s):
		self.putIndent(self.indent)

newlineSeen = false
# 12/8/02: we buffer characters here for two reasons:
# 1) to make traces easier to read and 2) to increase speed.
buf = i # Indicate the start of buffered characters.
while i &lt; len(s) and not newlineSeen:
	ch = s[i]
	if ch == body_newline:
		break
	elif ch == body_ignored_newline:
		i += 1
	elif ch == '&lt;' and not self.raw:
		&lt;&lt; put possible section reference &gt;&gt;
	else:
		i += 1
# Output any buffered characters.
self.putBuffered(s[buf:i])</t>
<t tx="edream.110203161858.310">isSection, j = self.isSectionName(s, i)

if isSection:
	# Output the buffered characters and clear the buffer.
	s2 = s[buf:i] ; buf = i
	# 7/9/03: don't output trailing indentation if we aren't generating sentinels.
	if not self.sentinels:
		while len(s2) and s2[-1] in (' ','\t'):
			s2 = s2[:-1]
	self.putBuffered(s2)
	# Output the expansion.
	name = s[i:j]
	j,newlineSeen = self.putRef(name,v,s,j,delta)
	assert(j &gt; i) # isSectionName must have made progress
	i = j ; buf = i
else:
	# This is _not_ an error.
	i += 1</t>
<t tx="edream.110203161858.311">@ Returns true if v should be included in the expansion of the at-others directive in the body text of v's parent.

7/30/02: v will not be included if it is a definition node or if its body text contains an @ignore directive. Previously, a "nested" @others directive would also inhibit the inclusion of v.
@c
def inAtOthers(self,v):

	# Return false if this has been expanded previously.
	if  v.isVisited(): return false
	# Return false if this is a definition node.
	h = v.headString()
	i = skip_ws(h,0)
	isSection, j = self.isSectionName(h,i)
	if isSection: return false
	# Return false if v's body contains an @ignore or at-others directive.
	if 1: # 7/29/02: New code.  Amazingly, this appears to work!
		return not v.isAtIgnoreNode()
	else: # old &amp; reliable code
		return not v.isAtIgnoreNode() and not v.isAtOthersNode()</t>
<t tx="edream.110203161858.312"># returns (flag, end). end is the index of the character after the section name.

def isSectionName(self,s,i):

	if not match(s,i,"&lt;&lt;"):
		return false, -1
	i = find_on_line(s,i,"&gt;&gt;")
	if i:
		return true, i + 2
	else:
		return false, -1</t>
<t tx="edream.110203161858.313">@ The at-others directive is recognized only at the start of the line.  This code must generate all leading whitespace for the opening sentinel.
@c
def putAtOthers(self,v,delta):

	self.indent += delta
	self.putSentinel("@+others")

	child = v.firstChild()
	while child:
		if self.inAtOthers( child ):
			self.putAtOthersChild( child )
		child = child.next()

	self.putSentinel("@-others")
	self.indent -= delta</t>
<t tx="edream.110203161858.314">def putAtOthersChild(self,v):
	
	# trace("%d %s" % (self.indent,`v`))
	self.putOpenNodeSentinel(v)
	
	# Insert the expansion of v.
	v.setVisited() # Make sure it is never expanded again.
	self.putBodyPart(v)

	# Insert expansions of all children.
	child = v.firstChild()
	while child:
		if self.inAtOthers( child ):
			self.putAtOthersChild( child )
		child = child.next()

	self.putCloseNodeSentinel(v)
</t>
<t tx="edream.110203161858.315">def putRef (self,name,v,s,i,delta):

	newlineSeen = false
	ref = findReference(name, v)
	if not ref:
		self.writeError("undefined section: " + name +
			"\n\treferenced from: " + v.headString())
		return i,newlineSeen

	# trace(self.indent,delta,s[i:])
	&lt;&lt; Generate the expansion of the reference &gt;&gt;

	# The newlineSeen allows the caller to break out of the loop.
	return i,newlineSeen</t>
<t tx="edream.110203161858.316"># Adjust indent here so sentinel looks better.
self.indent += delta

self.putSentinel("@" + name)
self.putOpenSentinels(v,ref)
self.putBodyPart(ref)
self.putCloseSentinels(v,ref)
&lt;&lt; Add @verbatimAfterRef sentinel if required &gt;&gt;

self.indent -= delta
ref.setVisited()</t>
<t tx="edream.110203161858.317">j = skip_ws(s,i)
if j &lt; len(s) and match(s,j,self.startSentinelComment + '@'):
	self.putSentinel("@verbatimAfterRef")
	# 9/27/02: Put the line immediately, before the @-node sentinel.
	k = skip_to_end_of_line(s,i)
	self.putBuffered(s[i:k])
	i = k ; newlineSeen = false</t>
<t tx="edream.110203161858.318"></t>
<t tx="edream.110203161858.319">def putBuffered (self,s):
	
	"""Put s, converting all tabs to blanks as necessary."""
	
	if s:
		w = self.tab_width
		if w &lt; 0:
			#trace(s)
			lines = s.split('\n')
			for i in xrange(len(lines)):
				line = lines[i]
				line2 = ""
				for j in xrange(len(line)):
					ch = line[j]
					if ch == '\t':
						w2 = computeWidth(s[:j],w)
						w3 = (abs(w) - (w2 % abs(w)))
						line2 += ' ' * w3
					else:
						line2 += ch
				lines[i] = line2
			s = string.join(lines,'\n')
		#trace(s)
		self.os(s)</t>
<t tx="edream.110203161858.320">def oblank(self):
	self.os(' ')

def oblanks(self,n):
	self.os(' ' * abs(n))

def onl(self):
	self.os(self.output_newline)

def os(self,s):
	if s is None or len(s) == 0: return
	if self.suppress_newlines and self.newline_pending:
		self.newline_pending = false
		s = self.output_newline + s
	if self.outputFile:
		try:
			s = toEncodedString(s,self.encoding,reportErrors=true)
			self.outputFile.write(s)
		except:
			es("exception writing:" + `s`)
			es_exception()

def otabs(self,n):
	self.os('\t' * abs(n))</t>
<t tx="edream.110203161858.321"># This method outputs s, a directive or reference, in a sentinel.

def putDirective(self,s,i):

	tag = "@delims"
	assert(i &lt; len(s) and s[i] == '@')
	k = i
	j = skip_to_end_of_line(s,i)
	directive = s[i:j]

	if match_word(s,k,tag):
		&lt;&lt; handle @delims &gt;&gt;
	else:
		self.putSentinel("@" + directive)

	i = skip_line(s,k)
	return i</t>
<t tx="edream.110203161858.322"># Put a space to protect the last delim.
self.putSentinel(directive + " ") # 10/23/02: put @delims, not @@delims

# Skip the keyword and whitespace.
j = i = skip_ws(s,k+len(tag))

# Get the first delim.
while i &lt; len(s) and not is_ws(s[i]) and not is_nl(s,i):
	i += 1
if j &lt; i:
	self.startSentinelComment = s[j:i]
	# Get the optional second delim.
	j = i = skip_ws(s,i)
	while i &lt; len(s) and not is_ws(s[i]) and not is_nl(s,i):
		i += 1
	self.endSentinelComment = choose(j&lt;i, s[j:i], "")
else:
	self.writeError("Bad @delims directive")</t>
<t tx="edream.110203161858.323"># 14-SEP-2002 DTHEIN
# added for use by putBodyPart()

# This method outputs the directive without the parameter text
def putEmptyDirective(self,s,i):

	assert(i &lt; len(s) and s[i] == '@')
	
	endOfLine = s.find('\n',i)
	# 21-SEP-2002 DTHEIN: if no '\n' then just use line length
	if endOfLine == -1:
		endOfLine = len(s)
	token = s[i:endOfLine].split()
	directive = token[0]
	self.putSentinel("@" + directive)

	i = skip_line(s,i)
	return i</t>
<t tx="edream.110203161858.324">def putIndent(self,n):
	
	"""Put tabs and spaces corresponding to n spaces, assuming that we are at the start of a line."""

	if n != 0:
		# trace(n)
		w = self.tab_width
		if w &gt; 1:
			q,r = divmod(n,w) 
			self.otabs(q) 
			self.oblanks(r)
		else:
			self.oblanks(n)</t>
<t tx="edream.110203161858.325">@others</t>
<t tx="edream.110203161858.326">def __init__(self,theCommander):
	
	"""Ctor for 4.x atFile class."""
	
	at = self
	
	# trace("newDerivedFile.__init__")

	# Initialize the base class.
	oldDerivedFile.__init__(self,theCommander) 

	# For 4.x reading &amp; writing...
	at.inCode = true
	## at.nodeIndices = app().nodeIndices

	# For 4.x writing...
	at.docKind = None
	at.pending = [] # Doc part that remains to be written.

	# For 4.x reading...
	at.docOut = [] # The doc part being accumulated.
	at.done = false # true when @-leo seen.
	at.endSentinelStack = []
	at.importing = false
	at.importRoot = None
	at.indent = 0 ; at.indentStack = []
	at.lastLines = [] # The lines after @-leo
	at.leadingWs = ""
	at.out = None ; at.outStack = []
	at.root_seen = false # true: root vnode has been handled in this file.
	at.tnodeList = [] ; at.tnodeListIndex = 0
	at.t = None ; at.tStack = []

	# The dispatch dictionary used by scanText.
	at.dispatch_dict = {
		# Plain line.
		noSentinel: at.readNormalLine,
		# Starting sentinels...
		startAt:     at.readStartAt,
		startDoc:    at.readStartDoc,
		startLeo:    at.readStartLeo,
		startNode:   at.readStartNode,
		startOthers: at.readStartOthers,
		# Ending sentinels...
		endAt:     at.readEndAt,
		endDoc:    at.readEndDoc,
		endLeo:    at.readEndLeo,
		endNode:   at.readEndNode,
		endOthers: at.readEndOthers,
		# Non-paired sentinels.
		startAfterRef:  at.readAfterRef,
		startComment:   at.readComment,
		startDelims:    at.readDelims,
		startDirective: at.readDirective,
		startNl:        at.readNl,
		startNonl:      at.readNonl,
		startRef:       at.readRef,
		startVerbatim:  at.readVerbatim,
		# Ignored 3.x sentinels
		endBody:               at.ignoreOldSentinel,
		startBody:             at.ignoreOldSentinel,
		startVerbatimAfterRef: at.ignoreOldSentinel }</t>
<t tx="edream.110203161858.327"></t>
<t tx="edream.110203161858.328">def readOpenFile(self,root,file,fileName,firstLines):
	
	"""Read an open 4.x derived file."""
	
	trace("new_df",root)

	at = self ; c = at.commands
	
	# Scan the 4.x file.
	at.scanAllDirectives(root)
	at.tnodeListIndex = 0
	lastLines = at.scanText(file,root)
	root.t.setVisited() # Disable warning about set nodes.
	
	# Handle first and last lines.
	try: body = root.t.tempBodyString
	except: body = ""
	lines = body.split('\n')
	at.completeFirstDirectives(lines,firstLines)
	at.completeLastDirectives(lines,lastLines)
	s = '\n'.join(lines).replace('\r', '')
	## root.t.setTnodeText(s)
	root.t.tempBodyString = s</t>
<t tx="edream.110203161858.329">def findChild (self,headline):
	
	"""Return the next tnode in the at.tnodeList."""

	at = self ; c = at.commands ; fc = c.fileCommands

	if at.importing:
		moveRight = c.currentVnode() == at.importRoot
		c.insertHeadline() # op_name="Insert Outline"
		if moveRight:
			c.moveOutlineRight()
		v = c.currentVnode()
		v.initHeadString(headline)
		t.setVisited() # Supress warning about unvisited node.
		return v.t

	if not hasattr(at.root,"tnodeList"):
		at.readError("no tnodeList for " + `at.root`)
		trace("no tnodeList for ",at.root)
		return None
		
	if at.tnodeListIndex &gt;= len(at.root.tnodeList):
		at.readError("bad tnodeList index: %d, %s" % (at.tnodeListIndex,`at.root`))
		trace("bad tnodeList index",at.tnodeListIndex,len(at.root.tnodeList),at.root)
		return None
		
	t = at.root.tnodeList[at.tnodeListIndex]
	assert(t)
	at.tnodeListIndex += 1

	# Check the headline.
	v = t.joinList[0]
	if headline.strip() == v.headString().strip():
		# trace(t)
		t.setVisited() # Supress warning about unvisited node.
		return t
	else:
		at.readError(
			"Mismatched headline.\nExpecting: %s\ngot: %s" %
			(headline,v.headString()))
		trace("Mismatched headline",headline,v.headString())
		trace(at.tnodeListIndex,len(at.root.tnodeList))
		return None
</t>
<t tx="edream.110203161858.330">def scanText (self,file,v):
	
	"""The new 4.x read code.."""

	at = self
	&lt;&lt; init ivars for scanText &gt;&gt;
	while at.errors == 0 and not at.done:
		s = at.readLine(file)
		if len(s) == 0: break
		kind = at.sentinelKind(s)
		# trace(at.sentinelName(kind),`s`)
		if kind == noSentinel:
			i = 0
		else:
			i = at.skipSentinelStart(s,0)
		func = at.dispatch_dict[kind]
		func(s,i)

	if at.errors == 0 and not at.done:
		&lt;&lt; report unexpected end of text &gt;&gt;

	return at.lastLines</t>
<t tx="edream.110203161858.331"># Unstacked ivars...
at.done = false
at.inCode = true
at.lastLines = [] # The lines after @-leo
at.leadingWs = ""
at.indent = 0 # Changed only for sentinels.
at.rootSeen = false

# Stacked ivars...
at.endSentinelStack = [endLeo] # We have already handled the @+leo sentinel.
at.out = [] ; at.outStack = []
at.t = v.t ; at.tStack = []

if 0: # Useful for debugging.
	if hasattr(v,"tnodeList"):
		trace("len(v.tnodeList)",len(v.tnodeList),v)
	else:
		trace("no tnodeList",v)</t>
<t tx="edream.110203161858.332">assert(at.endSentinelStack)

at.readError(
	"Unexpected end of file. Expecting %s sentinel" %
	at.sentinelName(at.endSentinelStack[-1]))</t>
<t tx="edream.110203161858.333">def readNormalLine (self,s,i):

	at = self
	
	if at.inCode:
		if not at.raw:
			s = removeLeadingWhitespace(s,at.indent,at.tab_width)
		# trace(`s`)
		at.out.append(s)
	else:
		&lt;&lt; Skip the leading stuff &gt;&gt;
		&lt;&lt; Append s to docOut &gt;&gt;</t>
<t tx="edream.110203161858.334">if len(at.endSentinelComment) == 0:
	# Skip the single comment delim and a blank.
	i = skip_ws(s,0)
	if match(s,i,at.startSentinelComment):
		i += len(at.startSentinelComment)
		if match(s,i," "): i += 1
else:
	i = at.skipIndent(s,0,at.indent)

</t>
<t tx="edream.110203161858.335">line = s[i:-1] # remove newline for rstrip.

if line == line.rstrip():
	# no trailing whitespace: the newline is real.
	at.docOut.append(line + '\n')
else:
	# trailing whitespace: the newline is fake.
	at.docOut.append(line)</t>
<t tx="edream.110203161858.336"></t>
<t tx="edream.110203161858.337">def readStartAt (self,s,i):
	
	"""Read an @+at sentinel."""
	
	at = self ; assert(match(s,i,"+at"))
	i += 3 ; j = skip_ws(s,i) ; ws = s[i:j]
	at.docOut = ['@' + ws + '\n'] # This newline may be removed by a following @nonl
	at.inCode = false
	at.endSentinelStack.append(endAt)
	
def readStartDoc (self,s,i):
	
	"""Read an @+doc sentinel."""

	at = self ; assert(match(s,i,"+doc"))
	i += 4 ; j = skip_ws(s,i) ; ws = s[i:j]
	at.docOut = ["@doc" + ws + '\n'] # This newline may be removed by a following @nonl
	at.inCode = false
	at.endSentinelStack.append(endDoc)</t>
<t tx="edream.110203161858.338">def readStartLeo (self,s,i):
	
	"""Read an unexpected @+leo sentinel."""

	at = self
	assert(match(s,i,"+leo"))
	at.readError("Ignoring unexpected @+leo sentinel")</t>
<t tx="edream.110203161858.339">def readStartNode (self,s,i):
	
	"""Read an @node sentinel."""
	
	at = self ; assert(match(s,i,"+node:"))
	i += 6
	
	&lt;&lt; Set headline, undoing the CWEB hack &gt;&gt;
	if not at.root_seen:
		at.root_seen = true
		&lt;&lt; Check the filename in the sentinel &gt;&gt;

	i,newIndent = skip_leading_ws_with_indent(s,0,at.tab_width)
	at.indentStack.append(at.indent) ; at.indent = newIndent
	
	at.outStack.append(at.out) ; at.out = []
	at.tStack.append(at.t) ; at.t = at.findChild(headline)
	
	at.endSentinelStack.append(endNode)</t>
<t tx="edream.110203161858.340"># Set headline to the rest of the line.
# Don't strip leading whitespace."

if len(at.endSentinelComment) == 0:
	headline = s[i:-1].rstrip()
else:
	k = s.rfind(at.endSentinelComment,i)
	headline = s[i:k].rstrip() # works if k == -1

# Undo the CWEB hack: undouble @ signs if the opening comment delim ends in '@'.
if at.startSentinelComment[-1:] == '@':
	headline = headline.replace('@@','@')</t>
<t tx="edream.110203161858.341">h = headline.strip()

if h[:5] == "@file":
	i,junk,junk = scanAtFileOptions(h)
	fileName = string.strip(h[i:])
	if fileName != at.targetFileName:
		at.readError("File name in @node sentinel does not match file's name")
elif h[:8] == "@rawfile":
	fileName = string.strip(h[8:])
	if fileName != at.targetFileName:
		at.readError("File name in @node sentinel does not match file's name")
else:
	at.readError("Missing @file in root @node sentinel")</t>
<t tx="edream.110203161858.342">def readStartOthers (self,s,i):
	
	"""Read an @+others sentinel."""

	at = self
	j = skip_ws(s,i)
	leadingWs = s[i:j]
	if leadingWs:
		assert(match(s,j,"@+others"))
	else:
		assert(match(s,j,"+others"))

	# Make sure that the generated at-others is properly indented.
	at.out.append(leadingWs + "@others\n")
	
	at.endSentinelStack.append(endOthers)</t>
<t tx="edream.110203161858.343"></t>
<t tx="edream.110203161858.344">def readEndAt (self,s,i):
	
	"""Read an @-at sentinel."""

	at = self
	at.readLastDocLine("@")
	at.popSentinelStack(endAt)
	at.inCode = true
		
def readEndDoc (self,s,i):
	
	"""Read an @-doc sentinel."""

	at = self
	at.readLastDocLine("@doc")
	at.popSentinelStack(endDoc)
	at.inCode = true</t>
<t tx="edream.110203161858.345">def readEndLeo (self,s,i):
	
	"""Read an @-leo sentinel."""
	
	at = self

	# Ignore everything after @-leo.
	# Such lines were presumably written by @last.
	while 1:
		s = at.readLine(at.file)
		if len(s) == 0: break
		at.lastLines.append(s) # Capture all trailing lines, even if empty.

	at.done = true</t>
<t tx="edream.110203161858.346">def readEndNode (self,s,i):
	
	"""Handle end-of-node processing for @-others and @-ref sentinels."""

	at = self
	
	# End raw mode.
	at.raw = false
	
	# Set the temporary body text.
	s = ''.join(at.out)
	if s:
		# trace(`at.t`,`s`)
		if at.importing:
			at.t.bodyString = s
		else:
			at.t.tempBodyString = s
			
	# Indicate that the tnode has been set in the derived file.
	at.t.setVisited()

	# End the previous node sentinel.
	at.indent = at.indentStack.pop()
	at.out = at.outStack.pop()
	at.t = at.tStack.pop()

	at.popSentinelStack(endNode)</t>
<t tx="edream.110203161858.347">def readEndOthers (self,s,i):
	
	"""Read an @-others sentinel."""
	
	at = self
	at.popSentinelStack(endOthers)</t>
<t tx="edream.110203161858.348">def readLastDocLine (self,tag):
	
	at = self
	end = at.endSentinelComment
	start = at.startSentinelComment
	s = ''.join(at.docOut)
	
	# Remove the @doc or @space.  We'll add it back at the end.
	if match(s,0,tag):
		s = s[len(tag):]
	else:
		at.readError("Missing start of doc part")
		return

	if end:
		# Remove opening block delim.
		if match(s,0,start):
			s = s[len(start):]
		else:
			at.readError("Missing open block comment")
			return
			
		# Remove trailing newline.
		if s[-1] == '\n':
			s = s[:-1]
	
		# Remove closing block delim.
		if s[-len(end):] == end:
			s = s[:-len(end)]
		else:
			at.readError("Missing close block comment")
			return

	at.out.append(tag + s)
	at.docOut = []</t>
<t tx="edream.110203161858.349"></t>
<t tx="edream.110203161858.350">def  ignoreOldSentinel (self,s,i):
	
	"""Ignore an 3.x sentinel."""
	
	es("Ignoring 3.x sentinel: " + s.strip(), color="blue")</t>
<t tx="edream.110203161858.351">def  readAfterRef (self,s,i):
	
	"""Read an @afterref sentinel."""
	
	at = self
	assert(match(s,i,"afterref"))
	
	# Append the next line to the text.
	s = at.readLine(at.file)
	at.out.append(s)</t>
<t tx="edream.110203161858.352">def readComment (self,s,i):
	
	"""Read an @comment sentinel."""

	assert(match(s,i,"comment"))

	# Just ignore the comment line!
</t>
<t tx="edream.110203161858.353">def readDelims (self,s,i):
	
	"""Read an @delims sentinel."""
	
	at = self
	assert(match(s,i-1,"@delims"));

	# Skip the keyword and whitespace.
	i0 = i-1
	i = skip_ws(s,i-1+7)
		
	# Get the first delim.
	j = i
	while i &lt; len(s) and not is_ws(s[i]) and not is_nl(s,i):
		i += 1
	
	if j &lt; i:
		at.startSentinelComment = s[j:i]
		# print "delim1:", at.startSentinelComment
	
		# Get the optional second delim.
		j = i = skip_ws(s,i)
		while i &lt; len(s) and not is_ws(s[i]) and not is_nl(s,i):
			i += 1
		end = choose(j&lt;i,s[j:i],"")
		i2 = skip_ws(s,i)
		if end == at.endSentinelComment and (i2 &gt;= len(s) or is_nl(s,i2)):
			at.endSentinelComment = "" # Not really two params.
			line = s[i0:j]
			line = line.rstrip()
			at.out.append(line+'\n')
		else:
			at.endSentinelComment = end
			# print "delim2:",end
			line = s[i0:i]
			line = line.rstrip()
			at.out.append(line+'\n')
	else:
		at.readError("Bad @delims")
		# Append the bad @delims line to the body text.
		at.out.append("@delims")</t>
<t tx="edream.110203161858.354">def readDirective (self,s,i):
	
	"""Read an @@sentinel."""
	
	at = self
	assert(match(s,i,"@")) # The first '@' has already been eaten.
	
	if match_word(s,i,"@raw"):
		at.raw = true
	elif match_word(s,i,"@end_raw"):
		at.raw = false
	
	e = at.endSentinelComment
	s2 = s[i:]
	if len(e) &gt; 0:
		k = s.rfind(e,i)
		if k != -1:
			s2 = s[i:k] + '\n'
		
	start = at.startSentinelComment
	if start and len(start) &gt; 0 and start[-1] == '@':
		s2 = s2.replace('@@','@')

	at.out.append(s2)</t>
<t tx="edream.110203161858.355">def readNl (self,s,i):
	
	"""Handle an @nonl sentinel."""
	
	at = self
	assert(match(s,i,"nl"))
	
	if at.inCode:
		at.out.append('\n')
	else:
		at.docOut.append('\n')</t>
<t tx="edream.110203161858.356">def readNonl (self,s,i):
	
	"""Handle an @nonl sentinel."""
	
	at = self
	assert(match(s,i,"nonl"))
	
	if at.inCode:
		s = ''.join(at.out)
		if s and s[-1] == '\n':
			at.out = [s[:-1]]
		else:
			trace("out:",`s`)
			at.readError("unexpected @nonl directive in code part")	
	else:
		s = ''.join(at.pending)
		if s:
			if s and s[-1] == '\n':
				at.pending = [s[:-1]]
			else:
				trace("docOut:",`s`)
				at.readError("unexpected @nonl directive in pending doc part")
		else:
			s = ''.join(at.docOut)
			if s and s[-1] == '\n':
				at.docOut = [s[:-1]]
			else:
				trace("docOut:",`s`)
				at.readError("unexpected @nonl directive in doc part")</t>
<t tx="edream.110203161858.357">@ The sentinel contains an @ followed by a section name in angle brackets.  This code is different from the code for the @@ sentinel: the expansion of the reference does not include a trailing newline.
@c

def readRef (self,s,i):
	
	"""Handle an @&lt;&lt; sentinel."""
	
	at = self
	j = skip_ws(s,i)
	assert(match(s,j,"&lt;&lt;"))
	
	if len(at.endSentinelComment) == 0:
		line = s[i:-1] # No trailing newline
	else:
		k = s.find(at.endSentinelComment,i)
		line = s[i:k] # No trailing newline, whatever k is.
			
	# Undo the cweb hack.
	start = at.startSentinelComment
	if start and len(start) &gt; 0 and start[-1] == '@':
		line = line.replace('@@','@')

	at.out.append(line)</t>
<t tx="edream.110203161858.358">def readVerbatim (self,s,i):
	
	"""Read an @verbatim sentinel."""
	
	at = self
	assert(match(s,i,"verbatim"))
	
	# Append the next line to the text.
	s = at.readLine(at.file) 
	i = at.skipIndent(s,0,at.indent)
	at.out.append(s[i:])</t>
<t tx="edream.110203161858.359">def badEndSentinel (self,expectedKind):
	
	"""Handle a mismatched ending sentinel."""

	at = self
	assert(at.endSentinelStack)
	at.readError("Ignoring %s sentinel.  Expecting %s" %
		(at.sentinelName(at.endSentinelStack[-1]),
		 at.sentinelName(expectedKind)))
		 
def popSentinelStack (self,expectedKind):
	
	"""Pop an entry from endSentinelStack and check it."""
	
	at = self
	if at.endSentinelStack and at.endSentinelStack[-1] == expectedKind:
		at.endSentinelStack.pop()
	else:
		at.badEndSentinel(expectedKind)</t>
<t tx="edream.110203161858.360"></t>
<t tx="edream.110203161858.361">def nodeSentinelText(self,v):
	
	"""Return the text of a @+node or @-node sentinel for v."""
	
	at = self ; t = v.t ; h = v.headString()
	&lt;&lt; remove comment delims from h if necessary &gt;&gt;
	return h</t>
<t tx="edream.110203161858.362">@ Bug fix 1/24/03:

If the present @language/@comment settings do not specify a single-line comment we remove all block comment delims from h.  This prevents headline text from interfering with the parsing of node sentinels.
@c

start = at.startSentinelComment
end = at.endSentinelComment

if end and len(end) &gt; 0:
	h = h.replace(start,"")
	h = h.replace(end,"")</t>
<t tx="edream.110203161858.363">def putLeadInSentinel (self,s,i,j,delta):
	
	"""Generate @nonl sentinels as needed to ensure a newline before a group of sentinels.
	
	Set at.leadingWs as needed for @+others and @+&lt;&lt; sentinels.

	i points at the start of a line.
	j points at @others or a section reference.
	delta is the change in at.indent that is about to happen and hasn't happened yet."""

	at = self
	at.leadingWs = "" # Set the default.
	if i == j:
		return # The @others or ref starts a line.

	k = skip_ws(s,i)
	if j == k:
		# Only whitespace before the @others or ref.
		if 1: # new code
			at.leadingWs = s[i:j] # Remember the leading whitespace, including its spelling.
		else:
			# The @ws sentinel contributs the _delta_ of the whitespace that precedes it.
			at.putIndent(at.indent) ; at.os(s[i:j]) # Put the whitespace, preserving its spelling.
			oldIndent = at.indent ; at.indent = 0 # Put the @ws sentinel with no more leading whitespace.
			at.putSentinel("@ws",putLeadingNewlineFlag=false)
			at.indent = oldIndent
	else:
		at.os(s[k:j]) ; at.onl()
		at.indent += delta # Align the @nonl with the following line.
		at.putSentinel("@nonl")
		at.indent -= delta # Let the caller set at.indent permanently.</t>
<t tx="edream.110203161858.364">def putOpenLeoSentinel(self,s):
	
	"""Write @+leo sentinel."""

	at = self
	
	if not at.sentinels:
		return # Handle @nosentinelsfile.

	encoding = at.encoding.lower()
	if encoding != "utf-8":
		s = s + "-encoding=%s." % (encoding)
	
	at.putSentinel(s)</t>
<t tx="edream.110203161858.365">def putOpenNodeSentinel(self,v):
	
	"""Write @+node sentinel for v."""
	
	at = self

	if v.isAtFileNode() and v != at.root:
		at.writeError("@file not valid in: " + v.headString())
		return
	
	s = at.nodeSentinelText(v)
	at.putSentinel("@+node:" + s)

	# Append the n'th tnode to the root's tnode list.

	# trace("%3d %3d" % (len(at.root.tnodeList),v.t.fileIndex),v)
	at.root.tnodeList.append(v.t)</t>
<t tx="edream.110203161858.366"># This method outputs all sentinels.

def putSentinel(self,s,putLeadingNewlineFlag=false):

	"Write a sentinel whose text is s, applying the CWEB hack if needed."
	
	at = self

	if not at.sentinels:
		return # Handle @file-nosent

	if putLeadingNewlineFlag:
		at.onl()
	at.putIndent(at.indent)
	at.os(at.startSentinelComment)
	&lt;&lt; apply the cweb hack to s &gt;&gt;
	at.os(s)
	if at.endSentinelComment:
		at.os(at.endSentinelComment)
	at.onl()</t>
<t tx="edream.110203161858.367">@ The cweb hack:

If the opening comment delim ends in '@', double all '@' signs except the first, which is "doubled" by the trailing '@' in the opening comment delimiter.
@c

start = at.startSentinelComment
if start and start[-1] == '@':
	assert(s and s[0]=='@')
	s = s.replace('@','@@')[1:]</t>
<t tx="edream.110203161858.368">def skipSentinelStart(self,s,i):
	
	"""Skip the start of a sentinel."""

	start = self.startSentinelComment
	assert(start and len(start)&gt;0)

	i = skip_ws(s,i)
	assert(match(s,i,start))
	i += len(start)

	# 7/8/02: Support for REM hack
	i = skip_ws(s,i)
	assert(i &lt; len(s) and s[i] == '@')
	return i + 1
</t>
<t tx="edream.110203161858.369">def sentinelKind(self,s):
	
	"""Return the kind of sentinel at s."""
	
	at = self

	i = skip_ws(s,0)
	if match(s,i,at.startSentinelComment): 
		i += len(at.startSentinelComment)
	else:
		return noSentinel

	# Locally undo cweb hack here
	start = at.startSentinelComment
	if start and len(start) &gt; 0 and start[-1] == '@':
		s = s[:i] + string.replace(s[i:],'@@','@')
		
	# 4.0: Look ahead for @[ws]@others and @[ws]&lt;&lt;
	if match(s,i,"@"):
		j = skip_ws(s,i+1)
		if j &gt; i+1:
			# trace(`ws`,`s`)
			if match(s,j,"@+others"):
				return startOthers
			elif match(s,j,"&lt;&lt;"):
				return startRef
			else:
				# No other sentinels allow whitespace following the '@'
				return noSentinel

	# Do not skip whitespace here!
	if match(s,i,"@&lt;&lt;"): return startRef
	if match(s,i,"@@"):   return startDirective
	if not match(s,i,'@'): return noSentinel
	j = i # start of lookup
	i += 1 # skip the at sign.
	if match(s,i,'+') or match(s,i,'-'):
		i += 1
	i = skip_c_id(s,i)
	key = s[j:i]
	if len(key) &gt; 0 and sentinelDict.has_key(key):
		return sentinelDict[key]
	else:
		return noSentinel</t>
<t tx="edream.110203161858.370"></t>
<t tx="edream.110203161858.371"></t>
<t tx="edream.110203161858.372"># 4.0: Don't use newline-pending logic.

def closeWriteFile (self):
	
	at = self
	if at.outputFile:
		at.outputFile.flush()
		at.outputFile.close()
		at.outputFile = None</t>
<t tx="edream.110203161858.373"># This is the entry point to the write code.  root should be an @file vnode.

def write(self,root,nosentinels=false):
	
	"""Write a 4.x derived file."""
	
	trace("new_df",root)

	at = self ; c = at.commands
	at.sentinels = not nosentinels
	&lt;&lt; initialize &gt;&gt;
	try:
		&lt;&lt; open the file; return on error &gt;&gt;
		&lt;&lt; write then entire @file tree &gt;&gt;
		at.closeWriteFile()
		if 0: ### Not yet
			&lt;&lt; warn about @ignored and orphans &gt;&gt;
		&lt;&lt; finish writing &gt;&gt;
	except:
		at.handleWriteException()</t>
<t tx="edream.110203161858.374">at.errors = 0
c.setIvarsFromPrefs()
at.root = root
at.root.tnodeList = []
at.raw = false
c.endEditing() # Capture the current headline.</t>
<t tx="edream.110203161858.375">if nosentinels:
	at.targetFileName = root.atNoSentinelsFileNodeName()
else:
	at.targetFileName = root.atFileNodeName()

ok = at.openWriteFile(root)
if not ok: return</t>
<t tx="edream.110203161858.376"># unvisited nodes will be orphans, except in cweb trees.
root.clearVisitedInTree()
next = root.nodeAfterTree()

&lt;&lt; put all @first lines in root &gt;&gt;

# Put the main part of the file.
at.putOpenLeoSentinel("@+leo-ver=4")
at.putInitialComment()
at.putBody(root)
at.putSentinel("@-leo")
root.setVisited()

&lt;&lt; put all @last lines in root &gt;&gt;


</t>
<t tx="edream.110203161858.377">@ Write any @first lines.  These lines are also converted to @verbatim lines, so the read logic simply ignores lines preceding the @+leo sentinel.
@c

s = root.t.bodyString
tag = "@first"
i = 0
while match(s,i,tag):
	i += len(tag)
	i = skip_ws(s,i)
	j = i
	i = skip_to_end_of_line(s,i)
	# Write @first line, whether empty or not
	line = s[j:i]
	self.os(line) ; self.onl()
	i = skip_nl(s,i)</t>
<t tx="edream.110203161858.378">@ Write any @last lines.  These lines are also converted to @verbatim lines, so the read logic simply ignores lines following the @-leo sentinel.
@c

tag = "@last"
lines = string.split(root.t.bodyString,'\n')
n = len(lines) ; j = k = n - 1
# Don't write an empty last line.
if j &gt;= 0 and len(lines[j])==0:
	j = k = n - 2
# Scan backwards for @last directives.
while j &gt;= 0:
	line = lines[j]
	if match(line,0,tag): j -= 1
	else: break
# Write the @last lines.
for line in lines[j+1:k+1]:
	i = len(tag) ; i = skip_ws(line,i)
	self.os(line[i:]) ; self.onl()</t>
<t tx="edream.110203161858.379"># 10/26/02: Always warn, even when language=="cweb"

next = root.nodeAfterTree()
v = root
while v and v != next:
	if not v.isVisited():
		at.writeError("Orphan node:  " + v.headString())
	if v.isAtIgnoreNode():
		at.writeError("@ignore node: " + v.headString())
	v = v.threadNext()
</t>
<t tx="edream.110203161858.380">@ We set the orphan and dirty flags if there are problems writing the file to force Commands::write_LEO_file to write the tree to the .leo file.
@c

if at.errors &gt; 0 or at.root.isOrphan():
	root.setOrphan()
	root.setDirty() # 2/9/02: make _sure_ we try to rewrite this file.
	os.remove(at.outputFileName) # Delete the temp file.
	es("Not written: " + at.outputFileName)
else:
	root.clearOrphan()
	root.clearDirty()
	at.replaceTargetFileIfDifferent()</t>
<t tx="edream.110203161858.381">def rawWrite(self,root):

	trace("new_df",root)

	at = self
	c = at.commands ; at.root = root
	at.errors = 0
	c.endEditing() # Capture the current headline.
	try:
		at.targetFileName = root.atRawFileNodeName()
		ok = at.openWriteFile(root)
		if not ok: return
		next = root.nodeAfterTree()
		&lt;&lt; write root's tree &gt;&gt;
		at.closeWriteFile()
		at.replaceTargetFileIfDifferent()
		root.clearOrphan() ; root.clearDirty()
	except:
		at.handleWriteException(root)</t>
<t tx="edream.110203161858.382">next = root.nodeAfterTree()

&lt;&lt; put all @first lines in root &gt;&gt;
at.putOpenLeoSentinel()
&lt;&lt; put optional @comment sentinel lines &gt;&gt;

v = root
while v and v != next:
	&lt;&lt; Write v's node &gt;&gt;
	v = v.threadNext()

at.putSentinel()
&lt;&lt; put all @last lines in root &gt;&gt;</t>
<t tx="edream.110203161858.383">@ Write any @first lines.  These lines are also converted to @verbatim lines, so the read logic simply ignores lines preceding the @+leo sentinel.
@c

s = root.t.bodyString
tag = "@first"
i = 0
while match(s,i,tag):
	i += len(tag)
	i = skip_ws(s,i)
	j = i
	i = skip_to_end_of_line(s,i)
	# Write @first line, whether empty or not
	line = s[j:i]
	at.putBuffered(line) ; at.onl()
	i = skip_nl(s,i)</t>
<t tx="edream.110203161858.384">s2 = app().config.output_initial_comment
if s2:
	lines = string.split(s2,"\\n")
	for line in lines:
		line = line.replace("@date",time.asctime())
		if len(line)&gt; 0:
			at.putSentinel("@comment " + line)
</t>
<t tx="edream.110203161858.385">at.putOpenNodeSentinel(v)

s = v.bodyString()
if s and len(s) &gt; 0:
	
	s = toEncodedString(s,at.encoding,reportErrors=true) # 3/7/03
	at.outputStringWithLineEndings(s)
	
at.putCloseNodeSentinel(v)
</t>
<t tx="edream.110203161858.386">@ Write any @last lines.  These lines are also converted to @verbatim lines, so the read logic simply ignores lines following the @-leo sentinel.
@c

tag = "@last"
lines = string.split(root.t.bodyString,'\n')
n = len(lines) ; j = k = n - 1
# Don't write an empty last line.
if j &gt;= 0 and len(lines[j])==0:
	j = k = n - 2
# Scan backwards for @last directives.
while j &gt;= 0:
	line = lines[j]
	if match(line,0,tag): j -= 1
	else: break
# Write the @last lines.
for line in lines[j+1:k+1]:
	i = len(tag) ; i = skip_ws(line,i)
	at.putBuffered(line[i:]) ; at.onl()</t>
<t tx="edream.110203161858.387">def putBody(self,v):
	
	""" Generate the body enclosed in sentinel lines."""

	at = self ; s = v.bodyString()
	if not s: return

	inCode = true
	
	# Make _sure_ all lines end in a newline.
	# If we add a trailing newline, we'll generate an @nonl sentinel below.
	trailingNewlineFlag = s and s[-1] == '\n'
	if not trailingNewlineFlag:
		s = s + '\n'
	
	at.putOpenNodeSentinel(v)
	i = 0
	while i &lt; len(s):
		next_i = skip_line(s,i)
		assert(next_i &gt; i)
		kind = at.directiveKind(s,i)
		&lt;&lt; handle line at s[i] &gt;&gt;
		i = next_i
	if not inCode:
		at.putEndDocLine()
	if not trailingNewlineFlag:
		at.putSentinel("@nonl")
	at.putCloseNodeSentinel(v)</t>
<t tx="edream.110203161858.388">if kind == noDirective:
	if inCode:
		hasRef,n1,n2 = at.findSectionName(s,i)
		if hasRef and not at.raw:
			at.putRefLine(s,i,n1,n2,v)
		else:
			at.putCodeLine(s,i)
	else:
		at.putDocLine(s,i)
elif kind in (docDirective,atDirective):
	assert(not at.pending)
	at.putStartDocLine(s,i,kind)
	inCode = false
elif kind in (cDirective,codeDirective):
	# Only @c and @code end a doc part.
	if not inCode:
		at.putEndDocLine() 
	at.putDirective(s,i)
	inCode = true
elif kind == othersDirective:
	inCode = true
	at.putAtOthersLine(s,i,v)
elif kind == rawDirective:
	at.raw = true
	at.putSentinel("@@raw")
elif kind == endRawDirective:
	at.raw = false
	at.putSentinel("@@end_raw")
	i = skip_line(s,i)
elif kind == miscDirective:
	at.putDirective(s,i)
else:
	assert(not "unknown directive")</t>
<t tx="edream.110203161858.389"></t>
<t tx="edream.110203161858.390">def inAtOthers(self,v):
	
	"""Returns true if v should be included in the expansion of the at-others directive
	
	in the body text of v's parent."""

	# Return false if this has been expanded previously.
	if  v.isVisited():
		# trace("previously visited",v)
		return false
	
	# Return false if this is a definition node.
	h = v.headString() ; i = skip_ws(h,0)
	isSection,junk = self.isSectionName(h,i)
	if isSection:
		# trace("is section",v)
		return false

	# Return false if v's body contains an @ignore directive.
	if v.isAtIgnoreNode():
		# trace("is @ignore",v)
		return false
	else:
		# trace("ok",v)
		return true</t>
<t tx="edream.110203161858.391">def putAtOthersChild(self,v):

	v.setVisited() # Make sure v is never expanded again.
	self.putBody(v) # Insert the expansion of v.

	# Insert expansions of all children.
	child = v.firstChild()
	while child:
		if self.inAtOthers( child ):
			self.putAtOthersChild( child )
		child = child.next()
</t>
<t tx="edream.110203161858.392">def putAtOthersLine (self,s,i,v):
	
	"""Put the expansion of @others."""
	
	at = self
	j,delta = skip_leading_ws_with_indent(s,i,at.tab_width)
	at.putLeadInSentinel(s,i,j,delta)

	at.indent += delta
	if at.leadingWs:
		at.putSentinel("@" + at.leadingWs + "@+others")
	else:
		at.putSentinel("@+others")
	
	child = v.firstChild()
	while child:
		if at.inAtOthers(child):
			at.putAtOthersChild(child)
		child = child.next()

	at.putSentinel("@-others")
	at.indent -= delta</t>
<t tx="edream.110203161858.393">def putCodeLine (self,s,i):
	
	"""Put a normal code line."""
	
	at = self
	
	# Put @verbatim sentinel if required.
	k = skip_ws(s,i)
	if match(s,k,self.startSentinelComment + '@'):
		self.putSentinel("@verbatim")

	j = skip_line(s,i)
	at.putIndent(at.indent)
	line = s[i:j]
	# trace(`line`)
	at.os(line)</t>
<t tx="edream.110203161858.394">def putRefLine(self,s,i,n1,n2,v):
	
	"""Put a reference at s[n1:n2+2] from v."""
	
	at = self ; name = s[n1:n2+2]

	ref = findReference(name,v)
	if not ref:
		at.writeError(
			"undefined section: %s\n\treferenced from: %s" %
			( name,v.headString()))
		return
	
	# Expand the ref.
	j,delta = skip_leading_ws_with_indent(s,i,at.tab_width)
	at.putLeadInSentinel(s,i,n1,delta)
	at.indent += delta
	if at.leadingWs:
		at.putSentinel("@" + at.leadingWs + name)
	else:
		at.putSentinel("@" + name)
	at.putBody(ref)
	at.indent -= delta
	
	# Handle whatever follows the ref.
	j = skip_ws(s,n2+2)
	if j &lt; len(s) and s[j] != '\n':
		i = skip_to_end_of_line(s,i)
		after = s[n2+2:i]
		at.putSentinel("@afterref")
		at.os(after) ; at.onl()
	else:
		# Temporarily readjust delta to make @nl look better.
		at.indent += delta
		at.putSentinel("@nl")
		at.indent -= delta</t>
<t tx="edream.110203161858.395"></t>
<t tx="edream.110203161858.396">def putBlankDocLine (self):
	
	at = self
	
	at.putPending(split=false)

	if not at.endSentinelComment:
		at.putIndent(at.indent)
		at.os(at.startSentinelComment) ; at.oblank()

	at.onl()</t>
<t tx="edream.110203161858.397">def putStartDocLine (self,s,i,kind):
	
	"""Write the start of a doc part."""
	
	at = self ; at.docKind = kind
	
	sentinel = choose(kind == docDirective,"@+doc","@+at")
	directive = choose(kind == docDirective,"@doc","@")
	
	# Skip past the directive.
	i += len(directive)
	
	# Get the trailing whitespace.
	j = skip_ws(s,i)
	ws = s[i:j]
	
	# Put the opening @+doc or @-doc sentinel, including trailing whitespace.
	at.putSentinel(sentinel + ws)

	# Put the opening comment.
	if at.endSentinelComment:
		at.putIndent(at.indent)
		at.os(at.startSentinelComment) ; at.onl()

	# Put an @nonl sentinel if there is significant text following @doc or @.
	if not is_nl(s,j):
		at.putSentinel("@nonl")
		at.putDocLine(s,j)

	if 0: # old code
		# put the opening @+doc or @-doc sentinel, including trailing whitespace.
		sentinel = choose(kind == docDirective,"@+doc","@+at")
		at.putSentinel(sentinel)
		
		# Put the opening comment.
		if at.endSentinelComment:
			at.putIndent(at.indent)
			at.os(at.startSentinelComment) ; at.onl()
	
		# Skip past the directive
		directive = choose(kind == docDirective,"@doc","@")
		i += len(directive)
		
		# 9/21/03: Looking ahead here helps preserve intended whitespace.
		if match(s,i,' ') or match(s,i,'\t'):
			i += 1
		j = skip_ws(s,i)
		
		# Put an @nonl sentinel if there is significant text following @doc or @.
		if not is_nl(s,j):
			at.putSentinel("@nonl")
			at.putDocLine(s,i)</t>
<t tx="edream.110203161858.398">def putDocLine (self,s,i):
	
	"""Handle one line of a doc part.
	
	Output complete lines and split long lines and queue pending lines.
	Inserted newlines are always preceded by whitespace."""
	
	at = self
	j = skip_line(s,i)
	s = s[i:j]
	# trace(`s`)

	if at.endSentinelComment:
		leading = at.indent
	else:
		leading = at.indent + len(at.startSentinelComment) + 1

	if not s or s[0] == '\n':
		# A blank line.
		at.putBlankDocLine()
	else:
		&lt;&lt; append words to pending line, splitting the line if needed &gt;&gt;</t>
<t tx="edream.110203161858.399">@ All inserted newlines are preceeded by whitespace:
we remove trailing whitespace from lines that have not been split.
@c

i = 0
while i &lt; len(s):

	# Scan to the next word.
	word1 = i # Start of the current word.
	word2 = i = skip_ws(s,i)
	while i &lt; len(s) and s[i] not in (' ','\t'):
		i += 1
	word3 = i = skip_ws(s,i)
	# trace(s[word1:i])
	
	if leading + word3 - word1 + len(''.join(at.pending)) &gt;= at.page_width:
		if at.pending:
			# trace("splitting long line.")
			# Ouput the pending line, and start a new line.
			at.putPending(split=true)
			at.pending = [s[word2:word3]]
		else:
			# Output a long word on a line by itself.
			# trace("long word:",s[word2:word3])
			at.pending = [s[word2:word3]]
			at.putPending(split=true)
	else:
		# Append the entire word to the pending line.
		# trace("appending",s[word1:word3])
		at.pending.append(s[word1:word3])
			
# Output the remaining line: no more is left.
at.putPending(split=false)</t>
<t tx="edream.110203161858.400">def putEndDocLine (self):
	
	"""Write the conclusion of a doc part."""
	
	at = self
	
	at.putPending(split=false)
	
	# Put the closing delimiter if we are using block comments.
	if at.endSentinelComment:
		at.putIndent(at.indent)
		at.os(at.endSentinelComment)
		at.onl() # Note: no trailing whitespace.

	sentinel = choose(at.docKind == docDirective,"@-doc","@-at")
	at.putSentinel(sentinel)</t>
<t tx="edream.110203161858.401">def putPending (self,split):
	
	"""Write the pending part of a doc part.
	
	We retain trailing whitespace iff the split flag is true."""
	
	at = self ; s = ''.join(at.pending) ; at.pending = []
	
	# trace("split",`s`)
	
	# Remove trailing newline temporarily.  We'll add it back later.
	if s and s[-1] == '\n':
		s = s[:-1]

	if not split:
		s = s.rstrip()
		if not s:
			return

	at.putIndent(at.indent)

	if not at.endSentinelComment:
		at.os(at.startSentinelComment) ; at.oblank()

	at.os(s) ; at.onl()</t>
<t tx="edream.110203161858.402"></t>
<t tx="edream.110203161858.403">def findSectionName(self,s,i):
	
	end = s.find('\n',i)
	if end == -1:
		n1 = s.find("&lt;&lt;",i)
		n2 = s.find("&gt;&gt;",i)
	else:
		n1 = s.find("&lt;&lt;",i,end)
		n2 = s.find("&gt;&gt;",i,end)

	return -1 &lt; n1 &lt; n2, n1, n2</t>
<t tx="edream.110203161858.404">def oblank(self):
	self.os(' ')

def oblanks(self,n):
	self.os(' ' * abs(n))

def onl(self):
	self.os(self.output_newline)
	
def os (self,s):
	if s and self.outputFile:
		try:
			s = toEncodedString(s,self.encoding,reportErrors=true)
			self.outputFile.write(s)
		except:
			es("exception writing:" + `s`)
			es_exception()

def otabs(self,n):
	self.os('\t' * abs(n))</t>
<t tx="edream.110203161858.405"># Returns the kind of at-directive or noDirective.

def directiveKind(self,s,i):

	at = self
	n = len(s)
	if i &gt;= n or s[i] != '@':
		j = skip_ws(s,i)
		if match_word(s,j,"@others"):
			return othersDirective
		else:
			return noDirective

	table = (
		("@c",cDirective),
		("@code",codeDirective),
		("@doc",docDirective),
		("@end_raw",endRawDirective),
		("@others",othersDirective),
		("@raw",rawDirective))

	# This code rarely gets executed, so simple code suffices.
	if i+1 &gt;= n or match(s,i,"@ ") or match(s,i,"@\t") or match(s,i,"@\n"):
		# 10/25/02: @space is not recognized in cweb mode.
		# 11/15/02: Noweb doc parts are _never_ scanned in cweb mode.
		return choose(at.language=="cweb",
			noDirective,atDirective)

	# 10/28/02: @c and @(nonalpha) are not recognized in cweb mode.
	# We treat @(nonalpha) separately because @ is in the colorizer table.
	if at.language=="cweb" and (
		match_word(s,i,"@c") or
		i+1&gt;= n or s[i+1] not in string.letters):
		return noDirective

	for name,directive in table:
		if match_word(s,i,name):
			return directive

	# 10/14/02: return miscDirective only for real directives.
	for name in leoColor.leoKeywords:
		if match_word(s,i,name):
			return miscDirective

	return noDirective</t>
<t tx="edream.110203161858.406">@language python

# Syntax coloring routines for Leo.py

from leoGlobals import *
import string,Tkinter,tkColorChooser

&lt;&lt; define leo keywords &gt;&gt;
&lt;&lt; define colorizer constants &gt;&gt;
&lt;&lt; define color panel data &gt;&gt;

@others</t>
<t tx="edream.110203161858.407"># leoKeywords is used by directivesKind, so it should be a module-level symbol.

# leoKeywords must be a list so that plugins may alter it.

leoKeywords = [
	"@","@c","@code","@color","@comment",
	"@delims","@doc","@encoding","@end_raw",
	"@first","@header","@ignore",
	"@language","@last","@lineending",
	"@nocolor","@noheader","@nowrap","@others",
	"@pagewidth","@path","@quiet","@raw","@root","@root-code","@root-doc",
	"@silent","@tabwidth","@terse",
	"@unit","@verbose","@wrap" ]</t>
<t tx="edream.110203161858.408"># These defaults are sure to exist.
default_colors_dict = {
	# tag name      :(     option name,           default color),
	"comment"       :("comment_color",               "red"),
	"cwebName"      :("cweb_section_name_color",     "red"),
	"pp"             :("directive_color",             "blue"),
	"docPart"        :("doc_part_color",              "red"),
	"keyword"        :("keyword_color",               "blue"),
	"leoKeyword"     :("leo_keyword_color",           "blue"),
	"link"           :("section_name_color",          "red"),
	"nameBrackets"   :("section_name_brackets_color", "blue"),
	"string"         :("string_color",                "#00aa00"), # Used by IDLE.
	"name"           :("undefined_section_name_color","red"),
	"latexBackground":("latex_background_color","white") }</t>
<t tx="edream.110203161858.409">colorPanelData = (
	#Dialog name,                option name,         default color),
	("Brackets",          "section_name_brackets_color", "blue"),
	("Comments",          "comment_color",               "red"),
	("CWEB section names","cweb_section_name_color",     "red"),
	("Directives",        "directive_color",             "blue"),
	("Doc parts",         "doc_part_color",              "red"),
	("Keywords" ,         "keyword_color",               "blue"),
	("Leo Keywords",      "leo_keyword_color",           "blue"),
	("Section Names",     "section_name_color",          "red"),
	("Strings",           "string_color",   "#00aa00"), # Used by IDLE.
	("Undefined Names",   "undefined_section_name_color","red") )

colorNamesList = (
	"gray60", "gray70", "gray80", "gray85", "gray90", "gray95",
	"snow1", "snow2", "snow3", "snow4", "seashell1", "seashell2",
	"seashell3", "seashell4", "AntiqueWhite1", "AntiqueWhite2", "AntiqueWhite3",
	"AntiqueWhite4", "bisque1", "bisque2", "bisque3", "bisque4", "PeachPuff1",
	"PeachPuff2", "PeachPuff3", "PeachPuff4", "NavajoWhite1", "NavajoWhite2",
	"NavajoWhite3", "NavajoWhite4", "LemonChiffon1", "LemonChiffon2",
	"LemonChiffon3", "LemonChiffon4", "cornsilk1", "cornsilk2", "cornsilk3",
	"cornsilk4", "ivory1", "ivory2", "ivory3", "ivory4", "honeydew1", "honeydew2",
	"honeydew3", "honeydew4", "LavenderBlush1", "LavenderBlush2",
	"LavenderBlush3", "LavenderBlush4", "MistyRose1", "MistyRose2",
	"MistyRose3", "MistyRose4", "azure1", "azure2", "azure3", "azure4",
	"SlateBlue1", "SlateBlue2", "SlateBlue3", "SlateBlue4", "RoyalBlue1",
	"RoyalBlue2", "RoyalBlue3", "RoyalBlue4", "blue1", "blue2", "blue3", "blue4",
	"DodgerBlue1", "DodgerBlue2", "DodgerBlue3", "DodgerBlue4", "SteelBlue1",
	"SteelBlue2", "SteelBlue3", "SteelBlue4", "DeepSkyBlue1", "DeepSkyBlue2",
	"DeepSkyBlue3", "DeepSkyBlue4", "SkyBlue1", "SkyBlue2", "SkyBlue3",
	"SkyBlue4", "LightSkyBlue1", "LightSkyBlue2", "LightSkyBlue3",
	"LightSkyBlue4", "SlateGray1", "SlateGray2", "SlateGray3", "SlateGray4",
	"LightSteelBlue1", "LightSteelBlue2", "LightSteelBlue3",
	"LightSteelBlue4", "LightBlue1", "LightBlue2", "LightBlue3",
	"LightBlue4", "LightCyan1", "LightCyan2", "LightCyan3", "LightCyan4",
	"PaleTurquoise1", "PaleTurquoise2", "PaleTurquoise3", "PaleTurquoise4",
	"CadetBlue1", "CadetBlue2", "CadetBlue3", "CadetBlue4", "turquoise1",
	"turquoise2", "turquoise3", "turquoise4", "cyan1", "cyan2", "cyan3", "cyan4",
	"DarkSlateGray1", "DarkSlateGray2", "DarkSlateGray3",
	"DarkSlateGray4", "aquamarine1", "aquamarine2", "aquamarine3",
	"aquamarine4", "DarkSeaGreen1", "DarkSeaGreen2", "DarkSeaGreen3",
	"DarkSeaGreen4", "SeaGreen1", "SeaGreen2", "SeaGreen3", "SeaGreen4",
	"PaleGreen1", "PaleGreen2", "PaleGreen3", "PaleGreen4", "SpringGreen1",
	"SpringGreen2", "SpringGreen3", "SpringGreen4", "green1", "green2",
	"green3", "green4", "chartreuse1", "chartreuse2", "chartreuse3",
	"chartreuse4", "OliveDrab1", "OliveDrab2", "OliveDrab3", "OliveDrab4",
	"DarkOliveGreen1", "DarkOliveGreen2", "DarkOliveGreen3",
	"DarkOliveGreen4", "khaki1", "khaki2", "khaki3", "khaki4",
	"LightGoldenrod1", "LightGoldenrod2", "LightGoldenrod3",
	"LightGoldenrod4", "LightYellow1", "LightYellow2", "LightYellow3",
	"LightYellow4", "yellow1", "yellow2", "yellow3", "yellow4", "gold1", "gold2",
	"gold3", "gold4", "goldenrod1", "goldenrod2", "goldenrod3", "goldenrod4",
	"DarkGoldenrod1", "DarkGoldenrod2", "DarkGoldenrod3", "DarkGoldenrod4",
	"RosyBrown1", "RosyBrown2", "RosyBrown3", "RosyBrown4", "IndianRed1",
	"IndianRed2", "IndianRed3", "IndianRed4", "sienna1", "sienna2", "sienna3",
	"sienna4", "burlywood1", "burlywood2", "burlywood3", "burlywood4", "wheat1",
	"wheat2", "wheat3", "wheat4", "tan1", "tan2", "tan3", "tan4", "chocolate1",
	"chocolate2", "chocolate3", "chocolate4", "firebrick1", "firebrick2",
	"firebrick3", "firebrick4", "brown1", "brown2", "brown3", "brown4", "salmon1",
	"salmon2", "salmon3", "salmon4", "LightSalmon1", "LightSalmon2",
	"LightSalmon3", "LightSalmon4", "orange1", "orange2", "orange3", "orange4",
	"DarkOrange1", "DarkOrange2", "DarkOrange3", "DarkOrange4", "coral1",
	"coral2", "coral3", "coral4", "tomato1", "tomato2", "tomato3", "tomato4",
	"OrangeRed1", "OrangeRed2", "OrangeRed3", "OrangeRed4", "red1", "red2", "red3",
	"red4", "DeepPink1", "DeepPink2", "DeepPink3", "DeepPink4", "HotPink1",
	"HotPink2", "HotPink3", "HotPink4", "pink1", "pink2", "pink3", "pink4",
	"LightPink1", "LightPink2", "LightPink3", "LightPink4", "PaleVioletRed1",
	"PaleVioletRed2", "PaleVioletRed3", "PaleVioletRed4", "maroon1",
	"maroon2", "maroon3", "maroon4", "VioletRed1", "VioletRed2", "VioletRed3",
	"VioletRed4", "magenta1", "magenta2", "magenta3", "magenta4", "orchid1",
	"orchid2", "orchid3", "orchid4", "plum1", "plum2", "plum3", "plum4",
	"MediumOrchid1", "MediumOrchid2", "MediumOrchid3", "MediumOrchid4",
	"DarkOrchid1", "DarkOrchid2", "DarkOrchid3", "DarkOrchid4", "purple1",
	"purple2", "purple3", "purple4", "MediumPurple1", "MediumPurple2",
	"MediumPurple3", "MediumPurple4", "thistle1", "thistle2", "thistle3",
	"thistle4" )
</t>
<t tx="edream.110203161858.410">class baseLeoColorPanel:
	"""The base class for Leo's color panel."""
	@others
	
class leoColorPanel (baseLeoColorPanel):
	"""A class that creates Leo's color picker panel."""
	pass

</t>
<t tx="edream.110203161858.411">def __init__ (self,c):
	
	self.commands = c
	self.frame = c.frame
	# Set by run.
	self.top = None
	# Options provisionally set by callback.
	self.changed_options = []
	# For communication with callback.
	self.buttons = {}
	self.nameButtons = {}
	self.option_names = {}
	# Save colors for revert.  onOk alters this.
	self.revertColors = {}
	config = app().config
	for name,option_name,default_color in colorPanelData:
		self.revertColors[option_name] = config.getColorsPref(option_name)</t>
<t tx="edream.110203161858.412">def run (self):
	
	c = self.commands ; Tk = Tkinter
	config = app().config
	
	self.top = top = Tk.Toplevel(app().root)
	top.title("Syntax colors for " + shortFileName(c.frame.title))
	top.protocol("WM_DELETE_WINDOW", self.onOk)
	attachLeoIcon(top)

	&lt;&lt; create color panel &gt;&gt;
	center_dialog(top) # Do this _after_ building the dialog!
	top.resizable(0,0)
	
	# We are associated with a commander, so
	# There is no need to make this a modal dialog.
	if 0:
		top.grab_set() # Make the dialog a modal dialog.
		top.focus_set() # Get all keystrokes.</t>
<t tx="edream.110203161858.413">outer = Tk.Frame(top,bd=2,relief="groove")
outer.pack(anchor="n",pady=2,ipady=1,expand=1,fill="x")

# Create all the rows.
for name,option_name,default_color in colorPanelData:
	# Get the color.
	option_color = config.getColorsPref(option_name)
	color = choose(option_color,option_color,default_color)
	# Create the row.
	f = Tk.Frame(outer,bd=2)
	f.pack()
	
	lab=Tk.Label(f,text=name,width=17,anchor="e")

	b1 = Tk.Button(f,text="",state="disabled",bg=color,width=4)
	self.buttons[name]=b1 # For callback.
	self.option_names[name]=option_name # For callback.
	
	b2 = Tk.Button(f,width=12,text=option_color)
	self.nameButtons[name]=b2
	
	# 9/15/02: Added self=self to remove Python 2.1 warning.
	callback = lambda name=name,self=self:self.showColorPicker(name)
	b3 = Tk.Button(f,text="Color Picker...",command=callback)

	# 9/15/02: Added self=self to remove Python 2.1 warning.
	callback = lambda name=name,color=color,self=self:self.showColorName(name,color)
	b4 = Tk.Button(f,text="Color Name...",command=callback)

	lab.pack(side="left",padx=3)
	b1.pack (side="left",padx=3)
	b2.pack (side="left",padx=3)
	b3.pack (side="left",padx=3)
	b4.pack (side="left",padx=3)
	
# Create the Ok, Cancel &amp; Revert buttons
f = Tk.Frame(outer,bd=2)
f.pack()
b = Tk.Button(f,width=6,text="OK",command=self.onOk)
b.pack(side="left",padx=4)
b = Tk.Button(f,width=6,text="Cancel",command=self.onCancel)
b.pack(side="left",padx=4,expand=1,fill="x")
b = Tk.Button(f,width=6,text="Revert",command=self.onRevert)
b.pack(side="right",padx=4)</t>
<t tx="edream.110203161858.414">def showColorPicker (self,name):
	
	option_name = self.option_names[name]
	color = app().config.getColorsPref(option_name)
	rgb,val = tkColorChooser.askcolor(color=color)
	if val != None:
		self.update(name,val)</t>
<t tx="edream.110203161858.415">def showColorName (self,name,color):
	
	np = leoColorNamePanel(self,name,color)
	np.run(name,color)</t>
<t tx="edream.110203161858.416">def onOk (self):
	# Update the revert colors
	config = app().config
	for name in self.changed_options:
		option_name = self.option_names[name]
		self.revertColors[option_name] = config.getColorsPref(option_name)
	self.changed_options = []
	if 1: # Hide the window, preserving its position.
		self.top.withdraw()
	else: # works.
		self.commands.frame.colorPanel = None
		self.top.destroy()
	
def onCancel (self):
	self.onRevert()
	if 1: # Hide the window, preserving its position.
		self.top.withdraw()
	else: # works.
		self.commands.frame.colorPanel = None
		self.top.destroy()
	
def onRevert (self):
	config = app().config
	for name in self.changed_options:
		option_name = self.option_names[name]
		old_val = self.revertColors[option_name]
		# Update the current settings.
		config.setColorsPref(option_name,old_val)
		# Update the buttons.
		b = self.buttons[name]
		b.configure(bg=old_val)
		b = self.nameButtons[name]
		b.configure(text=`old_val`)
	self.changed_options = []
	self.commands.recolor()</t>
<t tx="edream.110203161858.417">def update (self,name,val):
	
	config = app().config
	# es(str(name) + " = " + str(val))
	
	# Put the new color in the button.
	b = self.buttons[name]
	b.configure(bg=val)
	option_name = self.option_names[name]
	
	# Put the new color name or value in the name button.
	b = self.nameButtons[name]
	b.configure(text=str(val))
	
	# Save the changed option names for revert and cancel.
	if name not in self.changed_options:
		self.changed_options.append(name)

	# Set the new value and recolor.
	config.setColorsPref(option_name,val)
	self.commands.recolor()</t>
<t tx="edream.110203161858.418">class baseLeoColorNamePanel:
	"""The base class for Leo's color name picker panel."""
	@others
	
class leoColorNamePanel(baseLeoColorNamePanel):
	"""A class that creates Leo's color name picker panel."""
	pass</t>
<t tx="edream.110203161858.419">def __init__ (self, colorPanel, name, color):
	
	self.colorPanel = colorPanel
	self.name = name
	self.color = color
	self.revertColor = color</t>
<t tx="edream.110203161858.420">def getSelection (self):

	box = self.box ; color = None
	
	# Get the family name if possible, or font otherwise.
	items = box.curselection()

	if len(items)&gt; 0:
		try: # This shouldn't fail now.
			items = map(int, items)
			color = box.get(items[0])
		except:
			es("unexpected exception")
			es_exception()

	if not color:
		color = self.color
	return color</t>
<t tx="edream.110203161858.421">def run (self,name,color):
	
	assert(name==self.name)
	assert(color==self.color)
	self.revertColor = color
	
	Tk = Tkinter
	config = app().config

	self.top = top = Tk.Toplevel(app().root)
	top.title("Color names for " + '"' + name + '"')
	top.protocol("WM_DELETE_WINDOW", self.onOk)

	&lt;&lt; create color name panel &gt;&gt;
	self.select(color)
	
	center_dialog(top) # Do this _after_ building the dialog!
	# top.resizable(0,0)
	
	# This must be a modal dialog.
	top.grab_set()
	top.focus_set() # Get all keystrokes.</t>
<t tx="edream.110203161858.422"># Create organizer frames
outer = Tk.Frame(top,bd=2,relief="groove")
outer.pack(fill="both",expand=1)

upper = Tk.Frame(outer)
upper.pack(fill="both",expand=1)

# A kludge to give vertical space to the listbox!
spacer = Tk.Frame(upper) 
spacer.pack(side="right",pady="2i") 

lower = Tk.Frame(outer)
# padx=20 gives more room to the Listbox!
lower.pack(padx=40) # Not expanding centers the buttons.

# Create and populate the listbox.
self.box = box = Tk.Listbox(upper) # height doesn't seem to work.
box.bind("&lt;Double-Button-1&gt;", self.onApply)

if color not in colorNamesList:
	box.insert(0,color)
	
names = list(colorNamesList) # It's actually a tuple.
names.sort()
for name in names:
	box.insert("end",name)

bar = Tk.Scrollbar(box)
bar.pack(side="right", fill="y")
box.pack(padx=2,pady=2,expand=1,fill="both")

bar.config(command=box.yview)
box.config(yscrollcommand=bar.set)
	
# Create the row of buttons.
for text,command in (
	("OK",self.onOk),
	("Cancel",self.onCancel),
	("Revert",self.onRevert),
	("Apply",self.onApply) ):
		
	b = Tk.Button(lower,text=text,command=command)
	b.pack(side="left",pady=6,padx=4)</t>
<t tx="edream.110203161858.423">def onApply (self,event=None):
	self.color = color = self.getSelection()
	self.colorPanel.update(self.name,color)

def onOk (self):
	color = self.getSelection()
	self.colorPanel.update(self.name,color)
	self.top.destroy()
	
def onCancel (self):
	self.onRevert()
	self.top.destroy()
	
def onRevert (self):
	self.color = color = self.revertColor
	self.select(self.color)
	self.colorPanel.update(self.name,color)</t>
<t tx="edream.110203161858.424">def select (self,color):

	# trace(color)

	# The name should be on the list!
	box = self.box
	for i in xrange(0,box.size()):
		item = box.get(i)
		if color == item:
			box.select_clear(0,"end")
			box.select_set(i)
			box.see(i)
			return

	# trace("not found:" + `color`)</t>
<t tx="edream.110203161858.425">class baseColorizer:
	"""The base class for Leo's syntax colorer."""
	&lt;&lt; define colorizer keywords &gt;&gt;
	@others
	
class colorizer (baseColorizer):
	"""Leo's syntax colorer class"""
	pass</t>
<t tx="edream.110203161858.426">&lt;&lt; actionscript keywords &gt;&gt;
&lt;&lt; c keywords &gt;&gt;
cweb_keywords = c_keywords
&lt;&lt; html keywords &gt;&gt;
&lt;&lt; java keywords &gt;&gt;
&lt;&lt; latex keywords &gt;&gt;
&lt;&lt; pascal keywords &gt;&gt;
&lt;&lt; perl keywords &gt;&gt;
perlpod_keywords = perl_keywords
&lt;&lt; python keywords &gt;&gt;
&lt;&lt; tcl/tk keywords &gt;&gt;
&lt;&lt; php keywords &gt;&gt;
&lt;&lt; rebol keywords &gt;&gt;
</t>
<t tx="edream.110203161858.427">actionscript_keywords = (
#Jason 2003-07-03 
#Actionscript keywords for Leo adapted from UltraEdit syntax highlighting
"break", "call", "continue", "delete", "do", "else", "false", "for", "function", "goto", "if", "in", "new", "null", "return", "true", "typeof", "undefined", "var", "void", "while", "with", "#include", "catch", "constructor", "prototype", "this", "try", "_parent", "_root", "__proto__", "ASnative", "abs", "acos", "appendChild", "asfunction", "asin", "atan", "atan2", "attachMovie", "attachSound", "attributes", "BACKSPACE", "CAPSLOCK", "CONTROL", "ceil", "charAt", "charCodeAt", "childNodes", "chr", "cloneNode", "close", "concat", "connect", "cos", "createElement", "createTextNode", "DELETEKEY", "DOWN", "docTypeDecl", "duplicateMovieClip", "END", "ENTER", "ESCAPE", "enterFrame", "entry", "equal", "eval", "evaluate", "exp", "firstChild", "floor", "fromCharCode", "fscommand", "getAscii", "getBeginIndex", "getBounds", "getBytesLoaded", "getBytesTotal", "getCaretIndex", "getCode", "getDate", "getDay", "getEndIndex", "getFocus", "getFullYear", "getHours", "getMilliseconds", "getMinutes", "getMonth", "getPan", "getProperty", "getRGB", "getSeconds", "getTime", "getTimer", "getTimezoneOffset", "getTransform", "getURL", "getUTCDate", "getUTCDay", "getUTCFullYear", "getUTCHours", "getUTCMilliseconds", "getUTCMinutes", "getUTCMonth", "getUTCSeconds", "getVersion", "getVolume", "getYear", "globalToLocal", "gotoAndPlay", "gotoAndStop", "HOME", "haschildNodes", "hide", "hitTest", "INSERT", "Infinity", "ifFrameLoaded", "ignoreWhite", "indexOf", "insertBefore", "int", "isDown", "isFinite", "isNaN", "isToggled", "join", "keycode", "keyDown", "keyUp", "LEFT", "LN10", "LN2", "LOG10E", "LOG2E", "lastChild", "lastIndexOf", "length", "load", "loaded", "loadMovie", "loadMovieNum", "loadVariables", "loadVariablesNum", "localToGlobal", "log", "MAX_VALUE", "MIN_VALUE", "max", "maxscroll", "mbchr", "mblength", "mbord", "mbsubstring", "min", "NEGATIVE_INFINITY", "NaN", "newline", "nextFrame", "nextScene", "nextSibling", "nodeName", "nodeType", "nodeValue", "on", "onClipEvent", "onClose", "onConnect", "onData", "onLoad", "onXML", "ord", "PGDN", "PGUP", "PI", "POSITIVE_INFINITY", "parentNode", "parseFloat", "parseInt", "parseXML", "play", "pop", "pow", "press", "prevFrame", "previousSibling", "prevScene", "print", "printAsBitmap", "printAsBitmapNum", "printNum", "push", "RIGHT", "random", "release", "removeMovieClip", "removeNode", "reverse", "round", "SPACE", "SQRT1_2", "SQRT2", "scroll", "send", "sendAndLoad", "set", "setDate", "setFocus", "setFullYear", "setHours", "setMilliseconds", "setMinutes", "setMonth", "setPan", "setProperty", "setRGB", "setSeconds", "setSelection", "setTime", "setTransform", "setUTCDate", "setUTCFullYear", "setUTCHours", "setUTCMilliseconds", "setUTCMinutes", "setUTCMonth", "setUTCSeconds", "setVolume", "setYear", "shift", "show", "sin", "slice", "sort", "start", "startDrag", "status", "stop", "stopAllSounds", "stopDrag", "substr", "substring", "swapDepths", "splice", "split", "sqrt", "TAB", "tan", "targetPath", "tellTarget", "toggleHighQuality", "toLowerCase", "toString", "toUpperCase", "trace", "UP", "UTC", "unescape", "unloadMovie", "unLoadMovieNum", "unshift", "updateAfterEvent", "valueOf", "xmlDecl", "_alpha", "_currentframe", "_droptarget", "_focusrect", "_framesloaded", "_height", "_highquality", "_name", "_quality", "_rotation", "_soundbuftime", "_target", "_totalframes", "_url", "_visible", "_width", "_x", "_xmouse", "_xscale", "_y", "_ymouse", "_yscale", "and", "add", "eq", "ge", "gt", "le", "lt", "ne", "not", "or", "Array", "Boolean", "Color", "Date", "Key", "Math", "MovieClip", "Mouse", "Number", "Object", "Selection", "Sound", "String", "XML", "XMLSocket"
)</t>
<t tx="edream.110203161858.428">c_keywords = (
	# C keywords
	"auto","break","case","char","continue",
	"default","do","double","else","enum","extern",
	"float","for","goto","if","int","long","register","return",
	"short","signed","sizeof","static","struct","switch",
	"typedef","union","unsigned","void","volatile","while",
	# C++ keywords
	"asm","bool","catch","class","const_cast",
	"delete","dynamic_cast","explicit","false","friend",
	"inline","mutable","namespace","new","operator",
	"private","protected","public","reinterpret_cast","static_cast",
	"template","this","throw","true","try",
	"typeid","typename","using","virtual","wchar_t")</t>
<t tx="edream.110203161858.429"># No longer used by syntax colorer.
html_keywords = ()

if 0: # Not used at present.
	unused_keywords = (
		# html constructs.
		"a","body","cf",
		"h1","h2","h3","h4","h5","h6",
		"head","html","hr",
		"i","img","li","lu","meta",
		"p","title","ul",
		# Common tags
		"caption","col","colgroup",
		"table","tbody","td","tfoot","th","thead","tr",
		"script","style")

	html_specials = ( "&lt;%","%&gt;" )</t>
<t tx="edream.110203161858.430">java_keywords = (
	"abstract","boolean","break","byte","byvalue",
	"case","cast","catch","char","class","const","continue",
	"default","do","double","else","extends",
	"false","final","finally","float","for","future",
	"generic","goto","if","implements","import","inner",
	"instanceof","int","interface","long","native",
	"new","null","operator","outer",
	"package","private","protected","public","rest","return",
	"short","static","super","switch","synchronized",
	"this","throw","transient","true","try",
	"var","void","volatile","while")</t>
<t tx="edream.110203161858.431">#If you see two idenitical words, with minor capitalization differences
#DO NOT ASSUME that they are the same word. For example \vert produces
#a single vertical line and \Vert produces a double vertical line
#Marcus A. Martin.

latex_keywords = (
	#special keyworlds
	"\\@", "\\(", "\\)", "\\{", "\\}",
	#A
	"\\acute", "\\addcontentsline", "\\addtocontents", "\\addtocounter", "\\address",
	"\\addtolength", "\\addvspace", "\\AE", "\\ae", "\\aleph", "\\alph", "\\angle",
	"\\appendix", 
	"\\approx",	"\\arabic", "\\arccos", "\\arcsin", "\\arctan", "\\ast", "\\author",
	#B
	"\\b", "\\backmatter", "\\backslash", "\\bar", "\\baselineskip", "\\baselinestretch",
	"\\begin", "\\beta", "\\bezier", "\\bf", "\\bfseries", "\\bibitem", "\\bigcap", 
	"\\bigcup", "\\bigodot", "\\bigoplus", "\\bigotimes", "\\bigskip", "\\biguplus", 
	"\\bigvee", "\\bigwedge",	"\\bmod", "\\boldmath", "\\Box", "\\breve", "\\bullet",
	#C
	"\\c", "\\cal", "\\caption", "\\cdot", "\\cdots", "\\centering", "\\chapter", 
	"\\check", "\\chi", "\\circ", "\\circle", "\\cite", "\\cleardoublepage", "\\clearpage", 
	"\\cline",	"\\closing", "\\clubsuit", "\\coprod", "\\copywright", "\\cos", "\\cosh", 
	"\\cot", "\\coth",	"csc",
	#D
	"\\d", "\\dag", "\\dashbox", "\\date", "\\ddag", "\\ddot", "\\ddots", "\\decl", 
	"\\deg", "\\Delta", 
	"\\delta", "\\depthits", "\\det", 
	"\\DH", "\\dh", "\\Diamond", "\\diamondsuit", "\\dim", "\\div", "\\DJ", "\\dj", 
	"\\documentclass", "\\documentstyle", 
	"\\dot", "\\dotfil", "\\downarrow",
	#E
	"\\ell", "\\em", "\\emph", "\\end", "\\enlargethispage", "\\ensuremath", 
	"\\enumi", "\\enuii", "\\enumiii", "\\enuiv", "\\epsilon", "\\equation", "\\equiv",	
	"\\eta", "\\example", "\\exists", "\\exp",
	#F
	"\\fbox", "\\figure", "\\flat", "\\flushbottom", "\\fnsymbol", "\\footnote", 
	"\\footnotemark", "\\fotenotesize", 
	"\\footnotetext", "\\forall", "\\frac", "\\frame", "\\framebox", "\\frenchspacing", 
	"\\frontmatter",
	#G
	"\\Gamma", "\\gamma", "\\gcd", "\\geq", "\\gg", "\\grave", "\\guillemotleft", 
	"\\guillemotright",	"\\guilsinglleft", "\\guilsinglright",
	#H
	"\\H", "\\hat", "\\hbar", "\\heartsuit", "\\heightits", "\\hfill", "\\hline", "\\hom",
	"\\hrulefill",	"\\hspace", "\\huge",	"\\Huge",	"\\hyphenation"
	#I
	"\\Im", "\\imath", "\\include", "includeonly", "indent", "\\index", "\\inf", "\\infty", 
	"\\input", "\\int", "\\iota",	"\\it", "\\item", "\\itshape",
	#J
	"\\jmath", "\\Join",
	#K
	"\\k", "\\kappa", "\\ker", "\\kill",
	#L
	"\\label", "\\Lambda", "\\lambda", "\\langle", "\\large", "\\Large", "\\LARGE", 
	"\\LaTeX", "\\LaTeXe", 
	"\\ldots", "\\leadsto", "\\left", "\\Leftarrow", "\\leftarrow", "\\lefteqn", "\\leq",
	"\\lg", "\\lhd", "\\lim", "\\liminf", "\\limsup", "\\line", 	"\\linebreak", 
	"\\linethickness", "\\linewidth",	"\\listfiles",
	"\\ll", "\\ln", "\\location", "\\log", "\\Longleftarrow", "\\longleftarrow", 
	"\\Longrightarrow",	"longrightarrow",
	#M
	"\\mainmatter", "\\makebox", "\\makeglossary", "\\makeindex","\\maketitle", "\\markboth", "\\markright",
	"\\mathbf", "\\mathcal", "\\mathit", "\\mathnormal", "\\mathop",
	"\\mathrm", "\\mathsf", "\\mathtt", "\\max", "\\mbox", "\\mdseries", "\\medskip",
	"\\mho", "\\min", "\\mp", "\\mpfootnote", "\\mu", "\\multicolumn", "\\multiput",
	#N
	"\\nabla", "\\natural", "\\nearrow", "\\neq", "\\newcommand", "\\newcounter", 
	"\\newenvironment", "\\newfont",
	"\\newlength",	"\\newline", "\\newpage", "\\newsavebox", "\\newtheorem", "\\NG", "\\ng",
	"\\nocite", "\\noindent", "\\nolinbreak", "\\nopagebreak", "\\normalsize",
	"\\not", "\\nu", "nwarrow",
	#O
	"\\Omega", "\\omega", "\\onecolumn", "\\oint", "\\opening", "\\oval", 
	"\\overbrace", "\\overline",
	#P
	"\\P", "\\page", "\\pagebreak", "\\pagenumbering", "\\pageref", "\\pagestyle", 
	"\\par", "\\parbox",	"\\paragraph", "\\parindent", "\\parskip", "\\part", 
	"\\partial", "\\per", "\\Phi", 	"\\phi",	"\\Pi", "\\pi", "\\pm", 
	"\\pmod", "\\pounds", "\\prime", "\\printindex", "\\prod", "\\propto", "\\protext", 
	"\\providecomamnd", "\\Psi",	"\\psi", "\\put",
	#Q
	"\\qbezier", "\\quoteblbase", "\\quotesinglbase",
	#R
	"\\r", "\\raggedbottom", "\\raggedleft", "\\raggedright", "\\raisebox", "\\rangle", 
	"\\Re", "\\ref", 	"\\renewcommand", "\\renewenvironment", "\\rhd", "\\rho", "\\right", 
	"\\Rightarrow",	"\\rightarrow", "\\rm", "\\rmfamily",
	"\\Roman", "\\roman", "\\rule", 
	#S
	"\\s", "\\samepage", "\\savebox", "\\sbox", "\\sc", "\\scriptsize", "\\scshape", 
	"\\searrow",	"\\sec", "\\section",
	"\\setcounter", "\\setlength", "\\settowidth", "\\settodepth", "\\settoheight", 
	"\\settowidth", "\\sf", "\\sffamily", "\\sharp", "\\shortstack", "\\Sigma", "\\sigma", 
	"\\signature", "\\sim", "\\simeq", "\\sin", "\\sinh", "\\sl", "\\SLiTeX",
	"\\slshape", "\\small", "\\smallskip", "\\spadesuit", "\\sqrt", "\\sqsubset",	
	"\\sqsupset", "\\SS",
	"\\stackrel", "\\star", "\\subsection", "\\subset", 
	"\\subsubsection", "\\sum", "\\sup", "\\supressfloats", "\\surd", "\\swarrow",
	#T
	"\\t", "\\table", "\\tableofcontents", "\\tabularnewline", "\\tan", "\\tanh", 
	"\\tau", "\\telephone",	"\\TeX", "\\textbf",
	"\\textbullet", "\\textcircled", "\\textcompworkmark",	"\\textemdash", 
	"\\textendash", "\\textexclamdown", "\\textheight", "\\textquestiondown", 
	"\\textquoteblleft", "\\textquoteblright", "\\textquoteleft",
	"\\textperiod", "\\textquotebl", "\\textquoteright", "\\textmd", "\\textit", "\\textrm", 
	"\\textsc", "\\textsl", "\\textsf", "\\textsuperscript", "\\texttt", "\\textup",
	"\\textvisiblespace", "\\textwidth", "\\TH", "\\th", "\\thanks", "\\thebibligraphy",
	"\\Theta", "theta", 
	"\\tilde", "\\thinlines", 
	"\\thispagestyle", "\\times", "\\tiny", "\\title",	"\\today", "\\totalheightits", 
	"\\triangle", "\\tt", 
	"\\ttfamily", "\\twocoloumn", "\\typeout", "\\typein",
	#U
	"\\u", "\\underbrace", "\\underline", "\\unitlength", "\\unlhd", "\\unrhd", "\\Uparrow",
	"\\uparrow",	"\\updownarrow", "\\upshape", "\\Upsilon", "\\upsilon", "\\usebox",	
	"\\usecounter", "\\usepackage", 
	#V
	"\\v", "\\value", "\\varepsilon", "\\varphi", "\\varpi", "\\varrho", "\\varsigma", 
	"\\vartheta", "\\vdots", "\\vec", "\\vector", "\\verb", "\\Vert", "\\vert", 	"\\vfill",
	"\\vline", "\\vphantom", "\\vspace",
	#W
	"\\widehat", "\\widetilde", "\\widthits", "\\wp",
	#X
	"\\Xi", "\\xi",
	#Z
	"\\zeta" )</t>
<t tx="edream.110203161858.432">pascal_keywords = (
	"and","array","as","begin",
	"case","const","class","constructor","cdecl"
	"div","do","downto","destructor","dispid","dynamic",
	"else","end","except","external",
	"false","file","for","forward","function","finally",
	"goto","if","in","is","label","library",
	"mod","message","nil","not","nodefault""of","or","on",
	"procedure","program","packed","pascal",
	"private","protected","public","published",
	"record","repeat","raise","read","register",
	"set","string","shl","shr","stdcall",
	"then","to","true","type","try","until","unit","uses",
	"var","virtual","while","with","xor"
	# object pascal
	"asm","absolute","abstract","assembler","at","automated",
	"finalization",
	"implementation","inherited","initialization","inline","interface",
	"object","override","resident","resourcestring",
	"threadvar",
	# limited contexts
	"exports","property","default","write","stored","index","name" )</t>
<t tx="edream.110203161858.433">perl_keywords = (
	"continue","do","else","elsif","format","for","format","for","foreach",
	"if","local","package","sub","tr","unless","until","while","y",
	# Comparison operators
	"cmp","eq","ge","gt","le","lt","ne",
	# Matching ooperators
	"m","s",
	# Unary functions
	"alarm","caller","chdir","cos","chroot","exit","eval","exp",
	"getpgrp","getprotobyname","gethostbyname","getnetbyname","gmtime",
	"hex","int","length","localtime","log","ord","oct",
	"require","reset","rand","rmdir","readlink",
	"scalar","sin","sleep","sqrt","srand","umask",
	# Transfer ops
	"next","last","redo","go","dump",
	# File operations...
	"select","open",
	# FL ops
	"binmode","close","closedir","eof",
	"fileno","getc","getpeername","getsockname","lstat",
	"readdir","rewinddir","stat","tell","telldir","write",
	# FL2 ops
	"bind","connect","flock","listen","opendir",
	"seekdir","shutdown","truncate",
	# FL32 ops
	"accept","pipe",
	# FL3 ops
	"fcntl","getsockopt","ioctl","read",
	"seek","send","sysread","syswrite",
	# FL4 &amp; FL5 ops
	"recv","setsocket","socket","socketpair",
	# Array operations
	"pop","shift","split","delete",
	# FLIST ops
	"sprintf","grep","join","pack",
	# LVAL ops
	"chop","defined","study","undef",
	# f0 ops
	"endhostent","endnetent","endservent","endprotoent",
	"endpwent","endgrent","fork",
	"getgrent","gethostent","getlogin","getnetent","getppid",
	"getprotoent","getpwent","getservent",
	"setgrent","setpwent","time","times","wait","wantarray",
	# f1 ops
	"getgrgid","getgrnam","getprotobynumber","getpwnam","getpwuid",
	"sethostent","setnetent","setprotoent","setservent",
	# f2 ops
	"atan2","crypt",
	"gethostbyaddr","getnetbyaddr","getpriority","getservbyname","getservbyport",
	"index","link","mkdir","msgget","rename",
	"semop","setpgrp","symlink","unpack","waitpid",
	# f2 or 3 ops
	"index","rindex","substr",
	# f3 ops
	"msgctl","msgsnd","semget","setpriority","shmctl","shmget","vec",
	# f4 &amp; f5 ops
	"semctl","shmread","shmwrite","msgrcv",
	# Assoc ops
	"dbmclose","each","keys","values",
	# List ops
	"chmod","chown","die","exec","kill",
	"print","printf","return","reverse",
	"sort","system","syscall","unlink","utime","warn")</t>
<t tx="edream.110203161858.434">python_keywords = (
	"and",       "del",       "for",       "is",        "raise",    
	"assert",    "elif",      "from",      "lambda",    "return",   
	"break",     "else",      "global",    "not",       "try",      
	"class",     "except",    "if",        "or",        "yield",   
	"continue",  "exec",      "import",    "pass",      "while",
	"def",       "finally",   "in",        "print")</t>
<t tx="edream.110203161858.435">tcltk_keywords = ( # Only the tcl keywords are here.
	"after",     "append",    "array",
	"bgerror",   "binary",    "break",
	"catch",     "cd",        "clock",
	"close",     "concat",    "continue",
	"dde",
	"encoding",  "eof",       "eval",
	"exec",      "exit",      "expr",
	"fblocked",  "fconfigure","fcopy",     "file",      "fileevent",
	"filename",  "flush",     "for",       "foreach",   "format",
	"gets",      "glob",      "global",
	"history",
	"if",        "incr",      "info",      "interp",
	"join",
	"lappend",   "lindex",    "linsert",   "list",      "llength",
	"load",      "lrange",    "lreplace",  "lsearch",   "lsort",
	"memory",    "msgcat",
	"namespace",
	"open",
	"package",   "parray",    "pid",
	"proc",      "puts",      "pwd",
	"read",      "regexp",    "registry",   "regsub",
	"rename",    "resource",  "return",
	"scan",      "seek",      "set",        "socket",   "source",
	"split",     "string",    "subst",      "switch",
	"tell",      "time",      "trace",
	"unknown",   "unset",     "update",     "uplevel",   "upvar",
	"variable",  "vwait",
	"while" )</t>
<t tx="edream.110203161858.436">php_keywords = ( # 08-SEP-2002 DTHEIN
	"__CLASS__", "__FILE__", "__FUNCTION__", "__LINE__",
	"and", "as", "break",
	"case", "cfunction", "class", "const", "continue",
	"declare", "default", "do",
	"else", "elseif", "enddeclare", "endfor", "endforeach",
	"endif", "endswitch",  "endwhile", "eval", "extends",
	"for", "foreach", "function", "global", "if",
	"new", "old_function", "or", "static", "switch",
	"use", "var", "while", "xor" )
	
# The following are supposed to be followed by ()
php_paren_keywords = (
	"array", "die", "echo", "empty", "exit",
	"include", "include_once", "isset", "list",
	"print", "require", "require_once", "return",
	"unset" )
	
# The following are handled by special case code:
# "&lt;?php", "?&gt;"
</t>
<t tx="edream.110203161858.437">rebol_keywords = (
#Jason 2003-07-03 
#based on UltraEdit syntax highlighting
"about", "abs", "absolute", "add", "alert", "alias", "all", "alter", "and", "and~", "any", "append", "arccosine", "arcsine", "arctangent", "array", "ask", "at",  
"back", "bind", "boot-prefs", "break", "browse", "build-port", "build-tag",  
"call", "caret-to-offset", "catch", "center-face", "change", "change-dir", "charset", "checksum", "choose", "clean-path", "clear", "clear-fields", "close", "comment", "complement", "compose", "compress", "confirm", "continue-post", "context", "copy", "cosine", "create-request", "crypt", "cvs-date", "cvs-version",  
"debase", "decode-cgi", "decode-url", "decompress", "deflag-face", "dehex", "delete", "demo", "desktop", "detab", "dh-compute-key", "dh-generate-key", "dh-make-key", "difference", "dirize", "disarm", "dispatch", "divide", "do", "do-boot", "do-events", "do-face", "do-face-alt", "does", "dsa-generate-key", "dsa-make-key", "dsa-make-signature", "dsa-verify-signature",  
"echo", "editor", "either", "else", "emailer", "enbase", "entab", "exclude", "exit", "exp", "extract", 
"fifth", "find", "find-key-face", "find-window", "flag-face", "first", "flash", "focus", "for", "forall", "foreach", "forever", "form", "forskip", "fourth", "free", "func", "function",  
"get", "get-modes", "get-net-info", "get-style",  
"halt", "has", "head", "help", "hide", "hide-popup",  
"if", "import-email", "in", "inform", "input", "insert", "insert-event-func", "intersect", 
"join", 
"last", "launch", "launch-thru", "layout", "license", "list-dir", "load", "load-image", "load-prefs", "load-thru", "log-10", "log-2", "log-e", "loop", "lowercase",  
"make", "make-dir", "make-face", "max", "maximum", "maximum-of", "min", "minimum", "minimum-of", "mold", "multiply",  
"negate", "net-error", "next", "not", "now",  
"offset-to-caret", "open", "open-events", "or", "or~", 
"parse", "parse-email-addrs", "parse-header", "parse-header-date", "parse-xml", "path-thru", "pick", "poke", "power", "prin", "print", "probe", "protect", "protect-system",  
"q", "query", "quit",  
"random", "read", "read-io", "read-net", "read-thru", "reboot", "recycle", "reduce", "reform", "rejoin", "remainder", "remold", "remove", "remove-event-func", "rename", "repeat", "repend", "replace", "request", "request-color", "request-date", "request-download", "request-file", "request-list", "request-pass", "request-text", "resend", "return", "reverse", "rsa-encrypt", "rsa-generate-key", "rsa-make-key", 
"save", "save-prefs", "save-user", "scroll-para", "second", "secure", "select", "send", "send-and-check", "set", "set-modes", "set-font", "set-net", "set-para", "set-style", "set-user", "set-user-name", "show", "show-popup", "sine", "size-text", "skip", "sort", "source", "split-path", "square-root", "stylize", "subtract", "switch",  
"tail", "tangent", "textinfo", "third", "throw", "throw-on-error", "to", "to-binary", "to-bitset", "to-block", "to-char", "to-date", "to-decimal", "to-email", "to-event", "to-file", "to-get-word", "to-hash", "to-hex", "to-idate", "to-image", "to-integer", "to-issue", "to-list", "to-lit-path", "to-lit-word", "to-local-file", "to-logic", "to-money", "to-none", "to-pair", "to-paren", "to-path", "to-rebol-file", "to-refinement", "to-set-path", "to-set-word", "to-string", "to-tag", "to-time", "to-tuple", "to-url", "to-word", "trace", "trim", "try",  
"unfocus", "union", "unique", "uninstall", "unprotect", "unset", "until", "unview", "update", "upgrade", "uppercase", "usage", "use",  
"vbug", "view", "view-install", "view-prefs",  
"wait", "what", "what-dir", "while", "write", "write-io",  
"xor", "xor~",  
"action!", "any-block!", "any-function!", "any-string!", "any-type!", "any-word!",  
"binary!", "bitset!", "block!",  
"char!",  
"datatype!", "date!", "decimal!", 
"email!", "error!", "event!",  
"file!", "function!",  
"get-word!",  
"hash!",  
"image!", "integer!", "issue!",  
"library!", "list!", "lit-path!", "lit-word!", "logic!",  
"money!",  
"native!", "none!", "number!",  
"object!", "op!",  
"pair!", "paren!", "path!", "port!",  
"refinement!", "routine!",  
"series!", "set-path!", "set-word!", "string!", "struct!", "symbol!",  
"tag!", "time!", "tuple!",  
"unset!", "url!",  
"word!",  
"any-block?", "any-function?", "any-string?", "any-type?", "any-word?",  
"binary?", "bitset?", "block?",  
"char?", "connected?", "crypt-strength?", 
"datatype?", "date?", "decimal?", "dir?",  
"email?", "empty?", "equal?", "error?", "even?", "event?", "exists?", "exists-key?",
"file?", "flag-face?", "found?", "function?",  
"get-word?", "greater-or-equal?", "greater?",  
"hash?", "head?",  
"image?", "in-window?", "index?", "info?", "input?", "inside?", "integer?", "issue?",  
"length?", "lesser-or-equal?", "lesser?", "library?", "link-app?", "link?", "list?", "lit-path?", "lit-word?", "logic?",  
"modified?", "money?",  
"native?", "negative?", "none?", "not-equal?", "number?",  
"object?", "odd?", "offset?", "op?", "outside?",  
"pair?", "paren?", "path?", "port?", "positive?",  
"refinement?", "routine?",  
"same?", "screen-offset?", "script?", "series?", "set-path?", "set-word?", "size?", "span?", "strict-equal?", "strict-not-equal?", "string?", "struct?",  
"tag?", "tail?", "time?", "tuple?", "type?",  
"unset?", "url?",  
"value?", "view?", 
"within?", "word?",  
"zero?"
)</t>
<t tx="edream.110203161858.438">def disable (self):

	print "disabling all syntax coloring"
	self.enabled=false

def __init__(self, commands):

	self.commands = commands
	self.count = 0 # how many times this has been called.
	self.use_hyperlinks = false # true: use hyperlinks and underline "live" links.
	self.enabled = true # true: syntax coloring enabled
	self.showInvisibles = false # true: show "invisible" characters.
	self.comment_string = None # Set by scanColorDirectives on @comment
	# For incremental coloring.
	self.tags = (
		"blank","comment","cwebName","docPart","keyword","leoKeyword",
		"latexModeBackground","latexModeKeyword",
		"latexBackground","latexKeyword",
		"link","name","nameBrackets","pp","string","tab",
		"elide","bold","bolditalic","italic") # new for wiki styling.
	self.color_pass = 0
	self.incremental = false
	self.redoColoring = false
	self.redoingColoring = false
	self.sel = None
	self.lines = []
	self.states = []
	self.last_flag = "unknown"
	self.last_language = "unknown"
	self.last_comment = "unknown"
	# For use of external markup routines.
	self.last_markup = "unknown" 
	self.markup_string = "unknown"
	&lt;&lt; ivars for communication between colorAllDirectives and its allies &gt;&gt;
	&lt;&lt; define dispatch dicts &gt;&gt;
	&lt;&lt; define fonts and data for wiki tags &gt;&gt;</t>
<t tx="edream.110203161858.439"># Copies of arguments.
self.v = None
self.body = None
self.language = None
self.flag = None
self.line_index = 0

# Others.
self.single_comment_start = None
self.block_comment_start = None
self.block_comment_end = None
self.has_string = None
self.string_delims = ("'",'"')
self.has_pp_directives = None
self.keywords = None
self.lb = None
self.rb = None
self.rootMode = None # None, "code" or "doc"

config = app().config
self.latex_cweb_docs     = config.getBoolColorsPref("color_cweb_doc_parts_with_latex")
self.latex_cweb_comments = config.getBoolColorsPref("color_cweb_comments_with_latex")
# print "docs,comments",`self.latex_cweb_docs`,`self.latex_cweb_comments`</t>
<t tx="edream.110203161858.440">self.state_dict = {
	"blockComment" : self.continueBlockComment,
	"doubleString" : self.continueDoubleString, # 1/25/03
	"nocolor"      : self.continueNocolor,
	"normal"       : self.doNormalState,
	"singleString" : self.continueSingleString,  # 1/25/03
	"string3s"     : self.continueSinglePythonString,
	"string3d"     : self.continueDoublePythonString,
	"doc"          : self.continueDocPart }
	
# Eventually all entries in these dicts will be entered dynamically
# under the control of the XML description of the present language.

if 0: # not ready yet.

	self.dict1 = { # 1-character patterns.
		'"' : self.doString,
		"'" : self.doString,
		'@' : self.doPossibleLeoKeyword,
		' ' : self.doBlank,
		'\t': self.doTab }

	self.dict2 = {} # 2-character patterns
	
	# Searching this list might be very slow!
	mutli_list = [] # Multiple character patterns.
	
	# Enter single-character patterns...
	if self.has_pp_directives:
		dict1 ["#"] = self.doPPDirective
				
	for ch in string.letters:
		dict1 [ch] = self.doPossibleKeyword
	dict1 ['_'] = self.doPossibleKeyword
	
	if self.language == "latex":
		dict1 ['\\'] = self.doPossibleKeyword
		
	if self.language == "php":
		dict1 ['&lt;'] = self.doSpecialPHPKeyword
		dict1 ['?'] = self.doSpecialPHPKeyword
	
	# Enter potentially multi-character patterns.  (or should this be just 2-character patterns)
	if self.language == "cweb":
		dict2 ["@("] = self.doPossibleSectionRefOrDef
	else:
		dict2 ["&lt;&lt;"] = self.doPossibleSectionRefOrDef
		
	if self.single_comment_start:
		n = len(self.single_comment_start)
		if n == 1:
			dict1 [self.single_comment_start] = self.doSingleCommentLine
		elif n == 2:
			dict2 [self.single_comment_start] = self.doSingleCommentLine
		else:
			mutli_list.append((self.single_comment_start,self.doSingleCommentLine),)
	
	if self.block_comment_start:
		n = len(self.block_comment_start)
		if n == 1:
			dict1 [self.block_comment_start] = self.doBlockComment
		elif n == 2:
			ddict2 [self.block_comment_start] = self.doBlockComment
		else:
			mutli_list.append((self.block_comment_start,self.doBlockComment),)</t>
<t tx="edream.110203161858.441">self.bold_font = config.getFontFromParams(
	"body_text_font_family", "body_text_font_size",
	"body_text_font_slant",  "body_text_font_weight")

self.bold_font.configure(weight="bold")

self.italic_font = config.getFontFromParams(
	"body_text_font_family", "body_text_font_size",
	"body_text_font_slant",  "body_text_font_weight")
	
self.italic_font.configure(slant="italic")
	
self.bolditalic_font = config.getFontFromParams(
	"body_text_font_family", "body_text_font_size",
	"body_text_font_slant",  "body_text_font_weight")
	
self.bolditalic_font.configure(weight="bold",slant="italic")

self.color_tags_list = []
self.image_references = []
</t>
<t tx="edream.110203161858.442"></t>
<t tx="edream.110203161858.443">def OnHyperLinkControlClick (self,v):

	pass</t>
<t tx="edream.110203161858.444">def OnHyperLinkEnter (self,v):

	pass # trace(`v` + ", " + `v.tagName`)</t>
<t tx="edream.110203161858.445">def OnHyperLinkLeave (self,v):

	pass # trace(`v`)</t>
<t tx="edream.110203161858.446"># The main colorizer entry point.

def colorize(self,v,body,incremental=false):

	if self.enabled:
		# print "colorize:incremental",incremental
		self.incremental=incremental
		self.updateSyntaxColorer(v)
		self.colorizeAnyLanguage(v,body)
		
# Called from incremental undo code.
# Colorizes the lines between the leading and trailing lines.
		
def recolor_range(self,v,body,leading,trailing):
	
	if self.enabled:
		# print "recolor_range:leading,trailing",leading,trailing
		self.incremental=true
		self.updateSyntaxColorer(v)
		self.colorizeAnyLanguage(v,body,leading=leading,trailing=trailing)
</t>
<t tx="edream.110203161858.447">def colorizeAnyLanguage (self,v,body,leading=None,trailing=None):
	
	"""Color the body pane either incrementally or non-incrementally"""
	
	#trace(`v`)
	try:
		&lt;&lt; initialize ivars &amp; tags &gt;&gt;
		doHook("init-color-markup",colorer=self,v=self.v)
		self.color_pass = 0
		if self.incremental and (
			&lt;&lt; all state ivars match &gt;&gt; ):
			&lt;&lt; incrementally color the text &gt;&gt;
		else:
			&lt;&lt; non-incrementally color the text &gt;&gt;
		if self.redoColoring:
			&lt;&lt; completely recolor in two passes &gt;&gt;
		&lt;&lt; update state ivars &gt;&gt;
		return "ok" # for testing.
	except:
		&lt;&lt; set state ivars to "unknown" &gt;&gt;
		if self.commands:
			es_exception()
		else:
			import traceback
			traceback.print_exc()
		return "error" # for testing.</t>
<t tx="edream.110203161858.448"># Add any newly-added user keywords.
for d in globalDirectiveList:
	name = '@' + d
	if name not in leoKeywords:
		leoKeywords.append(name)

# Copy the arguments.
self.v = v
self.body = body
s = body.get("1.0","end")
self.sel = sel = body.index("insert") # get the location of the insert point
start, end = string.split(sel,'.')
start = int(start)

# trace(`self.language`)
# trace(`self.count` + `self.v`)
# trace(`body.tag_names()`)

if not self.incremental:
	self.removeAllTags()
	self.removeAllImages()

self.redoColoring = false
self.redoingColoring = false

&lt;&lt; configure tags &gt;&gt;
&lt;&lt; configure language-specific settings &gt;&gt;

self.hyperCount = 0 # Number of hypertext tags
self.count += 1
lines = string.split(s,'\n')</t>
<t tx="edream.110203161858.449">config = app().config
assert(config)

for name in default_colors_dict.keys(): # Python 2.1 support.
	option_name,default_color = default_colors_dict[name]
	option_color = config.getColorsPref(option_name)
	color = choose(option_color,option_color,default_color)
	# Must use foreground, not fg.
	try:
		body.tag_config(name, foreground=color)
	except: # Recover after a user error.
		body.tag_config(name, foreground=default_color)

underline_undefined = config.getBoolColorsPref("underline_undefined_section_names")
use_hyperlinks      = config.getBoolColorsPref("use_hyperlinks")
self.use_hyperlinks = use_hyperlinks

# underline=var doesn't seem to work.
if 0: # use_hyperlinks: # Use the same coloring, even when hyperlinks are in effect.
	body.tag_config("link",underline=1) # defined
	body.tag_config("name",underline=0) # undefined
else:
	body.tag_config("link",underline=0)
	if underline_undefined:
		body.tag_config("name",underline=1)
	else:
		body.tag_config("name",underline=0)
		
# 8/4/02: we only create tags for whitespace when showing invisibles.
if self.showInvisibles:
	for name,option_name,default_color in (
		("blank","show_invisibles_space_background_color","Gray90"),
		("tab",  "show_invisibles_tab_background_color",  "Gray80")):
		option_color = config.getColorsPref(option_name)
		color = choose(option_color,option_color,default_color)
		try:
			body.tag_config(name,background=color)
		except: # Recover after a user error.
			body.tag_config(name,background=default_color)
	
# 11/15/02: Colors for latex characters.  Should be user options...

if 1: # Alas, the selection doesn't show if a background color is specified.
	body.tag_configure("latexModeBackground",foreground="black")
	body.tag_configure("latexModeKeyword",foreground="blue")
	body.tag_configure("latexBackground",foreground="black")
	body.tag_configure("latexKeyword",foreground="blue")
else: # Looks cool, and good for debugging.
	body.tag_configure("latexModeBackground",foreground="black",background="seashell1")
	body.tag_configure("latexModeKeyword",foreground="blue",background="seashell1")
	body.tag_configure("latexBackground",foreground="black",background="white")
	body.tag_configure("latexKeyword",foreground="blue",background="white")
	
# Tags for wiki coloring.
if self.showInvisibles:
	body.tag_configure("elide",background="yellow")
else:
	body.tag_configure("elide",elide="1")
body.tag_configure("bold",font=self.bold_font)
body.tag_configure("italic",font=self.italic_font)
body.tag_configure("bolditalic",font=self.bolditalic_font)
for name in self.color_tags_list:
	self.body.tag_configure(name,foreground=name)</t>
<t tx="edream.110203161858.450"># Define has_string, keywords, single_comment_start, block_comment_start, block_comment_end.

if self.language == "cweb": # Use C comments, not cweb sentinel comments.
	delim1,delim2,delim3 = set_delims_from_language("c")
elif self.comment_string:
	delim1,delim2,delim3 = set_delims_from_string(self.comment_string)
elif self.language == "plain": # 1/30/03
	delim1,delim2,delim3 = None,None,None
else:
	delim1,delim2,delim3 = set_delims_from_language(self.language)

self.single_comment_start = delim1
self.block_comment_start = delim2
self.block_comment_end = delim3

# A strong case can be made for making this code as fast as possible.
# Whether this is compatible with general language descriptions remains to be seen.
self.has_string = self.language != "plain"
if self.language == "plain":
	self.string_delims = ()
elif self.language == "html":
	self.string_delims = ('"')
else:
	self.string_delims = ("'",'"')
self.has_pp_directives = self.language in ("c","cweb","latex")

# The list of languages for which keywords exist.
# Eventually we might just use language_delims_dict.keys()
languages = [
	"actionscript","c","cweb","html","java","latex",
	"pascal","perl","perlpod","php","python","rebol","tcltk"]

self.keywords = []
if self.language == "cweb":
	for i in self.c_keywords:
		self.keywords.append(i)
	for i in self.cweb_keywords:
		self.keywords.append(i)
else:
	for name in languages:
		if self.language==name: 
			# trace("setting keywords for",name)
			self.keywords = getattr(self, name + "_keywords")

# Color plain text unless we are under the control of @nocolor.
# state = choose(self.flag,"normal","nocolor")
state = self.setFirstLineState()

if 1: # 10/25/02: we color both kinds of references in cweb mode.
	self.lb = "&lt;&lt;"
	self.rb = "&gt;&gt;"
else:
	self.lb = choose(self.language == "cweb","@&lt;","&lt;&lt;")
	self.rb = choose(self.language == "cweb","@&gt;","&gt;&gt;")</t>
<t tx="edream.110203161858.451">self.flag == self.last_flag and
self.last_language == self.language and
self.comment_string == self.last_comment and
self.markup_string == self.last_markup</t>
<t tx="edream.110203161858.452">@  Each line has a starting state.  The starting state for the first line is always "normal".

We need remember only self.lines and self.states between colorizing.  It is not necessary to know where the text comes from, only what the previous text was!  We must always colorize everything when changing nodes, even if all lines match, because the context may be different.

We compute the range of lines to be recolored by comparing leading lines and trailing lines of old and new text.  All other lines (the middle lines) must be colorized, as well as any trailing lines whose states may have changed as the result of changes to the middle lines.
@c

# trace("incremental")

# 6/30/03: make a copies of everything
old_lines = self.lines[:]
old_states = self.states[:]
new_lines = lines[:]
new_states = []

new_len = len(new_lines)
old_len = len(old_lines)

if new_len == 0:
	self.states = []
	self.lines = []
	return

# Bug fix: 11/21/02: must test against None.
if leading != None and trailing != None:
	# print "leading,trailing:",leading,trailing
	leading_lines = leading
	trailing_lines = trailing
else:
	&lt;&lt; compute leading, middle &amp; trailing lines &gt;&gt;
	
middle_lines = new_len - leading_lines - trailing_lines
# print "middle lines", middle_lines

&lt;&lt; clear leading_lines if middle lines involve @color or @recolor  &gt;&gt;
&lt;&lt; initialize new states &gt;&gt;
&lt;&lt; colorize until the states match &gt;&gt;</t>
<t tx="edream.110203161858.453">@ The leading lines are the leading matching lines.  The trailing lines are the trailing matching lines.  The middle lines are all other new lines.  We will color at least all the middle lines.  There may be no middle lines if we delete lines.
@c

min_len = min(old_len,new_len)

i = 0
while i &lt; min_len:
	if old_lines[i] != new_lines[i]:
		break
	i += 1
leading_lines = i

if leading_lines == new_len:
	# All lines match, and we must color _everything_.
	# (several routine delete, then insert the text again,
	# deleting all tags in the process).
	# print "recolor all"
	leading_lines = trailing_lines = 0
else:
	i = 0
	while i &lt; min_len - leading_lines:
		if old_lines[old_len-i-1] != new_lines[new_len-i-1]:
			break
		i += 1
	trailing_lines = i
</t>
<t tx="edream.110203161858.454">@ 11/19/02: Changing @color or @nocolor directives requires we recolor all leading states as well.
@c

if trailing_lines == 0:
	m1 = new_lines[leading_lines:]
	m2 = old_lines[leading_lines:]
else:
	m1 = new_lines[leading_lines:-trailing_lines]
	m2 = old_lines[leading_lines:-trailing_lines]
m1.extend(m2) # m1 now contains all old and new middle lines.
if m1:
	for s in m1:
		i = skip_ws(s,0)
		if match_word(s,i,"@color") or match_word(s,i,"@nocolor"):
			leading_lines = 0
			break
</t>
<t tx="edream.110203161858.455"># Copy the leading states from the old to the new lines.
i = 0
while i &lt; leading_lines and i &lt; old_len: # 12/8/02
	new_states.append(old_states[i])
	i += 1
	
# We know the starting state of the first middle line!
if middle_lines &gt; 0 and i &lt; old_len:
	new_states.append(old_states[i])
	i += 1
	
# Set the state of all other middle lines to "unknown".
first_trailing_line = new_len - trailing_lines
while i &lt; first_trailing_line:
	new_states.append("unknown")
	i += 1

# Copy the trailing states from the old to the new lines.
j = old_len - trailing_lines
while j &lt; old_len and j &lt; len(old_states):
	new_states.append(old_states[j])
	j += 1
	i += 1 # for the assert below.

while j &lt; len(old_states):
	new_states.append("unknown")
	j += 1
	i += 1 # for the assert below.
	
# A crucial assertion.  If it fails we won't handle continued states properly.
assert(i == new_len)
	# Step 1 writes leading_lines lines
	# Step 2 writes (new_len - trailing_lines - leading_lines) lines.
	# Step 3 writes trailing_lines lines.

# print "i:", i
if 0:
	for i in xrange(len(new_lines)):
		print new_states[i],new_lines[i]</t>
<t tx="edream.110203161858.456"># Colorize until the states match.
# All middle lines have "unknown" state, so they will all be colored.

# Start in the state _after_ the last leading line, which may be unknown.
i = leading_lines
while i &gt; 0:
	if i &lt; old_len and i &lt; new_len:
		state = new_states[i]
		assert(state!="unknown")
		break
	else:
		i -= 1

if i == 0:
	# Color plain text unless we are under the control of @nocolor.
	# state = choose(self.flag,"normal","nocolor")
	state = self.setFirstLineState()
	new_states[0] = state

# The new_states[] will be "unknown" unless the lines match,
# so we do not need to compare lines here.
while i &lt; new_len:
	self.line_index = i + 1
	state = self.colorizeLine(new_lines[i],state)
	i += 1
	# Set the state of the _next_ line.
	if i &lt; new_len and state != new_states[i]:
		new_states[i] = state
	else: break
	
# Update the ivars
self.states = new_states
self.lines = new_lines</t>
<t tx="edream.110203161858.457"># trace("non-incremental")

self.line_index = 1 # The Tk line number for indices, as in n.i
for s in lines:
	state = self.colorizeLine(s,state)
	self.line_index += 1
</t>
<t tx="edream.110203161858.458">self.last_flag = self.flag
self.last_language = self.language
self.last_comment = self.comment_string
self.last_markup = self.markup_string</t>
<t tx="edream.110203161858.459">self.last_flag = "unknown"
self.last_language = "unknown"
self.last_comment = "unknown"</t>
<t tx="edream.110203161858.460"># This code is executed only if graphics characters will be inserted by user markup code.

# Pass 1:  Insert all graphics characters.

self.removeAllImages()
s = self.body.get("1.0","end")
lines = s.split('\n')

self.color_pass = 1
self.line_index = 1
state = self.setFirstLineState()
for s in lines:
	state = self.colorizeLine(s,state)
	self.line_index += 1

# Pass 2: Insert one blank for each previously inserted graphic.

self.color_pass = 2
self.line_index = 1
state = self.setFirstLineState()
for s in lines:
	&lt;&lt; kludge: insert a blank in s for every image in the line &gt;&gt;
	state = self.colorizeLine(s,state)
	self.line_index += 1
</t>
<t tx="edream.110203161858.461">@ A spectacular kludge.

Images take up a real index, yet the get routine does not return any character for them!
In order to keep the colorer in synch, we must insert dummy blanks in s at the positions corresponding to each image.
@c

inserted = 0

for photo,image,line_index,i in self.image_references:
	if self.line_index == line_index:
		n = i+inserted ; 	inserted += 1
		s = s[:n] + ' ' + s[n:]
</t>
<t tx="edream.110203161858.462">def colorizeLine (self,s,state):

	# print "line,inc,state,s:",self.line_index,self.incremental,state,s

	if self.incremental:
		self.removeTagsFromLine()

	i = 0
	while i &lt; len(s):
		self.progress = i
		func = self.state_dict[state]
		i,state = func(s,i)

	return state</t>
<t tx="edream.110203161858.463">def continueBlockComment (self,s,i):
	
	j = s.find(self.block_comment_end,i)

	if j == -1:
		j = len(s) # The entire line is part of the block comment.
		if self.language=="cweb":
			self.doLatexLine(s,i,j)
		else:
			if not doHook("color-optional-markup",
				colorer=self,v=self.v,s=s,i=i,j=j,colortag="comment"):
				self.tag("comment",i,j)
		return j,"blockComment" # skip the rest of the line.

	else:
		# End the block comment.
		k = len(self.block_comment_end)
		if self.language=="cweb" and self.latex_cweb_comments:
			self.doLatexLine(s,i,j)
			self.tag("comment",j,j+k)
		else:
			if not doHook("color-optional-markup",
				colorer=self,v=self.v,s=s,i=i,j=j+k,colortag="comment"):
				self.tag("comment",i,j+k)
		i = j + k
		return i,"normal"</t>
<t tx="edream.110203161858.464">def continueDoubleString (self,s,i):
	return self.continueString(s,i,'"',"doubleString")
	
def continueSingleString (self,s,i):
	return self.continueString(s,i,"'","singleString")

# Similar to skip_string.
def continueString (self,s,i,delim,continueState):
	# trace(delim + s[i:])
	continueFlag = choose(self.language=="html",true,false)
	j = i
	while i &lt; len(s) and s[i] != delim:
		if s[i:] == "\\":
			i = len(s) ; continueFlag = true ; break
		elif s[i] == "\\":
			i += 2
		else:
			i += 1
	if i &gt;= len(s):
		i = len(s)
	elif s[i] == delim:
		i += 1 ; continueFlag = false
	self.tag("string",j,i)
	state = choose(continueFlag,continueState,"normal")
	return i,state</t>
<t tx="edream.110203161858.465">def continueDocPart (self,s,i):
	
	state = "doc"
	if self.language == "cweb":
		&lt;&lt; handle cweb doc part &gt;&gt;
	else:
		&lt;&lt; handle noweb doc part &gt;&gt;
	return i,state</t>
<t tx="edream.110203161858.466">word = self.getCwebWord(s,i)
if word and len(word) &gt; 0:
	j = i + len(word)
	if word in ("@&lt;","@(","@c","@d","@f","@p"):
		state = "normal" # end the doc part and rescan
	else:
		# The control code does not end the doc part.
		self.tag("keyword",i,j)
		i = j
		if word in ("@^","@.","@:","@="): # Ended by "@&gt;"
			j = s.find("@&gt;",i)
			if j &gt; -1:
				self.tag("cwebName",i,j)
				self.tag("nameBrackets",j,j+2)
				i = j + 2
elif match(s,i,self.lb):
	j = self.doNowebSecRef(s,i)
	if j == i + 2: # not a section ref.
		self.tag("docPart",i,j)
	i = j
elif self.latex_cweb_docs:
	# Everything up to the next "@" is latex colored.
	j = s.find("@",i+1)
	if j == -1: j = len(s)
	self.doLatexLine(s,i,j)
	i = j
else:
	# Everthing up to the next "@" is in the doc part.
	j = s.find("@",i+1)
	if j == -1: j = len(s)
	self.tag("docPart",i,j)
	i = j</t>
<t tx="edream.110203161858.467">if i == 0 and match(s,i,"&lt;&lt;"):
	# Possible section definition line.
	return i,"normal" # rescan the line.

if i == 0 and s[i] == '@':
	j = self.skip_id(s,i+1,chars='-')
	word = s[i:j]
	word = word.lower()
else:
	word = ""

if word in ["@c","@code","@unit","@root","@root-code","@root-doc","@color","@nocolor"]:
	# End of the doc part.
	self.body.tag_remove("docPart",self.index(i),self.index(j))
	self.tag("leoKeyword",i,j)
	i = j ; state = "normal"
else:
	# The entire line is in the doc part.
	j = len(s)
	if not doHook("color-optional-markup",
		colorer=self,v=self.v,s=s,i=i,j=j,colortag="docPart"):
		self.tag("docPart",i,j)
	i = j # skip the rest of the line.
</t>
<t tx="edream.110203161858.468">def continueNocolor (self,s,i):

	if i == 0 and s[i] == '@':
		j = self.skip_id(s,i+1)
		word = s[i:j]
		word = word.lower()
	else:
		word = ""
	
	if word == "@color" and self.language != "plain":
		# End of the nocolor part.
		self.tag("leoKeyword",0,j)
		return i,"normal"
	else:
		# The entire line is in the nocolor part.
		# Add tags for blanks and tabs to make "Show Invisibles" work.
		for ch in s[i:]:
			if ch == ' ':
				self.tag("blank",i,i+1)
			elif ch == '\t':
				self.tag("tab",i,i+1)
			i += 1
		return i,"nocolor"</t>
<t tx="edream.110203161858.469">def continueDoublePythonString (self,s,i):
	j = s.find('"""',i)
	return self.continuePythonString(s,i,j,"string3d")

def continueSinglePythonString (self,s,i):
	j = s.find("'''",i)
	return self.continuePythonString(s,i,j,"string3s")

def continuePythonString (self,s,i,j,continueState):

	if j == -1: # The entire line is part of the triple-quoted string.
		j = len(s)
		if continueState == "string3d":
			if not doHook("color-optional-markup",
				colorer=self,v=self.v,s=s,i=i,j=j,colortag="string"):
				self.tag("string",i,j)
		else:
			self.tag("string",i,j)
		return j,continueState # skip the rest of the line.

	else: # End the string
		if continueState == "string3d":
			if not doHook("color-optional-markup",
				colorer=self,v=self.v,s=s,i=i,j=j,colortag="string"):
				self.tag("string",i,j+3)
			else:
				self.tag("string",i,j+3)
		else:
			self.tag("string",i,j+3)
		return j+3,"normal"</t>
<t tx="edream.110203161858.470"># Handles non-cweb keyword.

def doAtKeyword (self,s,i):

	j = self.skip_id(s,i+1,chars="-") # to handle @root-code, @root-doc
	word = s[i:j]
	word = word.lower()
	if i != 0 and word != "@others":
		word = "" # can't be a Leo keyword, even if it looks like it.
	
	# 7/8/02: don't color doc parts in plain text.
	if self.language != "plain" and (word == "@" or word == "@doc"):
		# at-space is a Leo keyword.
		self.tag("leoKeyword",i,j)
		k = len(s) # Everything on the line is in the doc part.
		if not doHook("color-optional-markup",
			colorer=self,v=self.v,s=s,i=j,j=k,colortag="docPart"):
			self.tag("docPart",j,k)
		return k,"doc"
	elif word == "@nocolor":
		# Nothing on the line is colored.
		self.tag("leoKeyword",i,j)
		return j,"nocolor"
	elif word in leoKeywords:
		self.tag("leoKeyword",i,j)
		return j,"normal"
	else:
		return j,"normal"</t>
<t tx="edream.110203161858.471"># Colorize the line from i to j.

def doLatexLine (self,s,i,j):

	while i &lt; j:
		if match(s,i,"\\"):
			k = self.skip_id(s,i+1)
			word = s[i:k]
			if word in self.latex_keywords:
				self.tag("latexModeKeyword",i,k)
			i = k
		else:
			self.tag("latexModeBackground",i,i+1)
			i += 1</t>
<t tx="edream.110203161858.472">## To do: rewrite using dynamically generated tables.

def doNormalState (self,s,i):

	ch = s[i] ; state = "normal"

	if ch in string.letters or ch == '_' or (
		(ch == '\\' and self.language=="latex") or
		(ch in '/&amp;&lt;&gt;' and self. language=="html")):
		&lt;&lt; handle possible keyword &gt;&gt;
	elif match(s,i,self.lb):
		i = self.doNowebSecRef(s,i)
	elif ch == '@':
		&lt;&lt; handle at keyword &gt;&gt;
	elif match(s,i,self.single_comment_start):
		&lt;&lt; handle single-line comment &gt;&gt;
	elif match(s,i,self.block_comment_start):
		&lt;&lt; start block comment &gt;&gt;
	elif ch == '%' and self.language=="cweb":
		&lt;&lt; handle latex line &gt;&gt;
	elif self.language=="latex":
		&lt;&lt; handle latex normal character &gt;&gt;
	# ---- From here on self.language != "latex" -----
	elif ch in self.string_delims:
		&lt;&lt; handle string &gt;&gt;
	elif ch == '#' and self.has_pp_directives:
		&lt;&lt; handle C preprocessor line &gt;&gt;
	elif self.language == "php" and (match(s,i,"&lt;") or match(s,i,"?")):
		&lt;&lt; handle special php keywords &gt;&gt;
	elif ch == ' ':
		&lt;&lt; handle blank &gt;&gt;
	elif ch == '\t':
		&lt;&lt; handle tab &gt;&gt;
	else:
		&lt;&lt; handle normal character &gt;&gt;

	assert(self.progress &lt; i)
	return i,state
</t>
<t tx="edream.110203161858.473"></t>
<t tx="edream.110203161858.474">if self.language == "latex":
	&lt;&lt; handle possible latex keyword &gt;&gt;
elif self.language == "html":
	&lt;&lt; handle possible html keyword &gt;&gt;
else:
	&lt;&lt; handle general keyword &gt;&gt;
i = j</t>
<t tx="edream.110203161858.475">if match(s,i,"\\"):
	j = self.skip_id(s,i+1)
	word = s[i:j]
	if word in self.latex_keywords:
		self.tag("latexKeyword",i,j)
	else:
		self.tag("latexBackground",i,j)
else:
	self.tag("latexBackground",i,i+1)
	j = i + 1 # skip the character.</t>
<t tx="edream.110203161858.476">if match(s,i,"&lt;!---") or match(s,i,"&lt;!--"):
	if match(s,i,"&lt;!---"): k = 5
	else: k = 4
	self.tag("comment",i,i+k)
	j = i + k ; state = "blockComment"
elif match(s,i,"&lt;"):
	if match(s,i,"&lt;/"): k = 2
	else: k = 1
	j = self.skip_id(s,i+k)
	self.tag("keyword",i,j)
elif match(s,i,"&amp;"):
	j = self.skip_id(s,i+1,';')
	self.tag("keyword",i,j)
elif match(s,i,"/&gt;"):
	j = i + 2
	self.tag("keyword",i,j)
elif match(s,i,"&gt;"):
	j = i + 1
	self.tag("keyword",i,j)
else:
	j = i + 1
</t>
<t tx="edream.110203161858.477">if self.language == "rebol":
	j = self.skip_id(s,i+1,chars="-~!?")
else:
	j = self.skip_id(s,i)
word = s[i:j]
if word in self.keywords:
	self.tag("keyword",i,j)
elif self.language == "php":
	if word in self.php_paren_keywords and match(s,j,"()"):
		self.tag("keyword",i,j+2)
		j += 2
</t>
<t tx="edream.110203161858.478">if self.language == "cweb":
	if match(s,i,"@(") or match(s,i,"@&lt;"):
		&lt;&lt; handle cweb ref or def &gt;&gt;
	else:
		word = self.getCwebWord(s,i)
		if word:
			&lt;&lt; Handle cweb control word &gt;&gt;
		else:
			i,state = self.doAtKeyword(s,i)
else:
	i,state = self.doAtKeyword(s,i)</t>
<t tx="edream.110203161858.479"># Color and skip the word.
assert(self.language=="cweb")

j = i + len(word)
self.tag("keyword",i,j)
i = j

if word in ("@ ","@\t","@\n","@*","@**"):
	state = "doc"
elif word in ("@&lt;","@(","@c","@d","@f","@p"):
	state = "normal"
elif word in ("@^","@.","@:","@="): # Ended by "@&gt;"
	j = s.find("@&gt;",i)
	if j &gt; -1:
		self.tag("cwebName",i,j)
		self.tag("nameBrackets",j,j+2)
		i = j + 2</t>
<t tx="edream.110203161858.480">self.tag("nameBrackets",i,i+2)

# See if the line contains the right name bracket.
j = s.find("@&gt;=",i+2)
k = choose(j==-1,2,3)
if j == -1:
	j = s.find("@&gt;",i+2)

if j == -1:
	i += 2
else:
	self.tag("cwebName",i+2,j)
	self.tag("nameBrackets",j,j+k)
	i = j + k
</t>
<t tx="edream.110203161858.481"># print "single-line comment i,s:",i,s

if self.language == "cweb" and self.latex_cweb_comments:
	j = i + len(self.single_comment_start)
	self.tag("comment",i,j)
	self.doLatexLine(s,j,len(s))
	i = len(s)
else:
	j = len(s)
	if not doHook("color-optional-markup",
		colorer=self,v=self.v,s=s,i=i,j=j,colortag="comment"):
		self.tag("comment",i,j)
	i = j</t>
<t tx="edream.110203161858.482">k = len(self.block_comment_start)

if not doHook("color-optional-markup",
	colorer=self,v=self.v,s=s,i=i,j=i+k,colortag="comment"):
	self.tag("comment",i,i+k)

i += k ; state = "blockComment"</t>
<t tx="edream.110203161858.483">self.tag("keyword",i,i+1)
i += 1 # Skip the %
self.doLatexLine(s,i,len(s))
i = len(s)</t>
<t tx="edream.110203161858.484"></t>
<t tx="edream.110203161858.485">if self.language=="cweb":
	self.tag("latexModeBackground",i,i+1)
else:
	self.tag("latexBackground",i,i+1)
i += 1</t>
<t tx="edream.110203161858.486"></t>
<t tx="edream.110203161858.487">if self.language == "python":

	delim = s[i:i+3]
	j, state = self.skip_python_string(s,i)
	if delim == '"""':
		# Only handle wiki items in """ strings.
		if not doHook("color-optional-markup",
			colorer=self,v=self.v,s=s,i=i,j=j,colortag="string"):
			self.tag("string",i,j)
	else:
		self.tag("string",i,j)
	i = j

else:
	j, state = self.skip_string(s,i)
	self.tag("string",i,j)
	i = j
</t>
<t tx="edream.110203161858.488"># 10/17/02: recognize comments in preprocessor lines.
j = i
while i &lt; len(s):
	if match(s,i,self.single_comment_start) or match(s,i,self.block_comment_start):
		break
	else: i += 1

self.tag("pp",j,i)</t>
<t tx="edream.110203161858.489">if match(s,i,"&lt;?php"):
	self.tag("keyword",i,i+5)
	i += 5
elif match(s,i,"?&gt;"):
	self.tag("keyword",i,i+2)
	i += 2
else:
	i += 1
</t>
<t tx="edream.110203161858.490">if self.showInvisibles:
	self.tag("blank",i,i+1)
i += 1</t>
<t tx="edream.110203161858.491">if self.showInvisibles:
	self.tag("tab",i,i+1)
#print "tab",i,self.body.cget("tabs"),self.body.tag_config("tab")
i += 1</t>
<t tx="edream.110203161858.492"># self.tag("normal",i,i+1)
i += 1</t>
<t tx="edream.110203161858.493">def doNowebSecRef (self,s,i):

	self.tag("nameBrackets",i,i+2)
	
	# See if the line contains the right name bracket.
	j = s.find(self.rb+"=",i+2)
	k = choose(j==-1,2,3)
	if j == -1:
		j = s.find(self.rb,i+2)
	if j == -1:
		return i + 2
	else:
		searchName = self.body.get(self.index(i),self.index(j+k)) # includes brackets
		ref = findReference(searchName,self.v)
		if ref:
			self.tag("link",i+2,j)
			if self.use_hyperlinks:
				&lt;&lt; set the hyperlink &gt;&gt;
		elif k == 3: # a section definition
			self.tag("link",i+2,j)
		else:
			self.tag("name",i+2,j)
		self.tag("nameBrackets",j,j+k)
		return j + k</t>
<t tx="edream.110203161858.494"># Set the bindings to vnode callbacks.
# Create the tag.
# Create the tag name.
tagName = "hyper" + `self.hyperCount`
self.hyperCount += 1
self.body.tag_delete(tagName)
self.tag(tagName,i+2,j)
ref.tagName = tagName
self.body.tag_bind(tagName,"&lt;Control-1&gt;",ref.OnHyperLinkControlClick)
self.body.tag_bind(tagName,"&lt;Any-Enter&gt;",ref.OnHyperLinkEnter)
self.body.tag_bind(tagName,"&lt;Any-Leave&gt;",ref.OnHyperLinkLeave)</t>
<t tx="edream.110203161858.495">def removeAllTags (self):
	
	# Warning: the following DOES NOT WORK: self.body.tag_delete(self.tags)
	for tag in self.tags:
		self.body.tag_delete(tag)

	for tag in self.color_tags_list:
		self.body.tag_delete(tag)
	
def removeTagsFromLine (self):
	
	# print "removeTagsFromLine",self.line_index
	for tag in self.tags:
		self.body.tag_remove(tag,self.index(0),self.index("end"))
		
	for tag in self.color_tags_list:
		self.body.tag_remove(tag,self.index(0),self.index("end"))</t>
<t tx="edream.110203161858.496">def scanColorDirectives(self,v):
	
	"""Scan vnode v and v's ancestors looking for @color and @nocolor directives,
	setting corresponding colorizer ivars.
	"""

	c = self.commands
	if c == None:
		return # self.commands may be None for testing.

	language = c.target_language
	self.language = language # 2/2/03
	self.comment_string = None
	self.rootMode = None # None, "code" or "doc"
	while v:
		s = v.t.bodyString
		dict = get_directives_dict(s)
		&lt;&lt; Test for @comment or @language &gt;&gt;
		&lt;&lt; Test for @root, @root-doc or @root-code &gt;&gt;
		v = v.parent()
	return self.language # For use by external routines.
</t>
<t tx="edream.110203161858.497"># 10/17/02: @comment and @language may coexist in the same node.

if dict.has_key("comment"):
	k = dict["comment"]
	self.comment_string = s[k:]

if dict.has_key("language"):
	i = dict["language"]
	language,junk,junk,junk = set_language(s,i)
	self.language = language # 2/2/03

if dict.has_key("comment") or dict.has_key("language"):
	break</t>
<t tx="edream.110203161858.498">if dict.has_key("root") and not self.rootMode:

	k = dict["root"]
	if match_word(s,k,"@root-code"):
		self.rootMode = "code"
	elif match_word(s,k,"@root-doc"):
		self.rootMode = "doc"
	else:
		doc = app().config.at_root_bodies_start_in_doc_mode
		self.rootMode = choose(doc,"doc","code")
</t>
<t tx="edream.110203161858.499">def schedule(self,v,body,incremental=0):

	if self.enabled:
		self.incremental=incremental
		body.after_idle(self.idle_colorize,v,body)
		
def idle_colorize(self,v,body):

	# trace(`v` + ", " + `body`)
	if v and body and self.enabled:
		self.colorize(v,body,self.incremental)</t>
<t tx="edream.110203161858.500">def getCwebWord (self,s,i):
	
	# trace(get_line(s,i))
	if not match(s,i,"@"):
		return None
	
	ch1 = ch2 = word = None
	if i + 1 &lt; len(s): ch1 = s[i+1]
	if i + 2 &lt; len(s): ch2 = s[i+2]

	if match(s,i,"@**"):
		word = "@**"
	elif not ch1:
		word = "@"
	elif not ch2:
		word = s[i:i+2]
	elif (
		(ch1 in string.letters and not ch2 in string.letters) or # single-letter control code
		ch1 not in string.letters # non-letter control code
	):
		word = s[i:i+2]
		
	# if word: trace(`word`)
		
	return word</t>
<t tx="edream.110203161858.501">def removeAllImages (self):
	
	for photo,image,line_index,i in self.image_references:
		try:
			index = self.body.index(image)
			# print "removing image at: ", `index`
			self.body.delete(index)
		except:
			pass # The image may have been deleted earlier.
	
	self.image_references = []</t>
<t tx="edream.110203161858.502"># self.flag is true unless an unambiguous @nocolor is seen.

def updateSyntaxColorer (self,v):
	
	self.flag = self.useSyntaxColoring(v)
	self.scanColorDirectives(v)
</t>
<t tx="edream.110203161858.503"># Return true if v unless v is unambiguously under the control of @nocolor.

def useSyntaxColoring (self,v):

	first = v ; val = true
	while v:
		s = v.t.bodyString
		dict = get_directives_dict(s)
		no_color = dict.has_key("nocolor")
		color = dict.has_key("color")
		# trace(`dict` + ", " + `v`)
		# A color anywhere in the target enables coloring.
		if color and v == first:
			val = true ; break
		# Otherwise, the @nocolor specification must be unambiguous.
		elif no_color and not color:
			val = false ; break
		elif color and not no_color:
			val = true ; break
		else:
			v = v.parent()
	# trace("useSyntaxColoring",`val`)
	return val</t>
<t tx="edream.110203161858.504">@ These methods are like the corresponding functions in leoGlobals.py except they issue no error messages.
</t>
<t tx="edream.110203161858.505">def index (self,i):
	
	return "%s.%s" % (self.line_index,i)
		
def tag (self,name,i,j):

	self.body.tag_add(name,self.index(i),self.index(j))</t>
<t tx="edream.110203161858.506">def setFirstLineState (self):
	
	if self.flag:
		if self.rootMode:
			state = choose(self.rootMode=="code","normal","doc")
		else:
			state = "normal"
	else:
		state = "nocolor"

	return state</t>
<t tx="edream.110203161858.507">def skip_id(self,s,i,chars=None):

	n = len(s)
	while i &lt; n:
		ch = s[i]
		if ch in string.letters or ch in string.digits or ch == '_':
			i += 1
		elif chars and ch in chars:
			i += 1
		else: break
	return i
</t>
<t tx="edream.110203161858.508">def skip_python_string(self,s,i):

	delim = s[i:i+3]
	if delim == "'''" or delim == '"""':
		k = s.find(delim,i+3)
		if k == -1:
			return len(s),choose(delim=="'''","string3s","string3d")
		else:
			return k+3, "normal"
	else:
		return self.skip_string(s,i)</t>
<t tx="edream.110203161858.509">def skip_string(self,s,i):

	delim = s[i] ; i += 1
	assert(delim == '"' or delim == "'")
	n = len(s)
	while i &lt; n and s[i] != delim:
		if s[i:] == "\\":
			return n,choose(delim=="'","singleString","doubleString")
		elif s[i] == '\\' :
			i += 2
		else: i += 1

	if i &gt;= n:
		if self.language=="html":
			return n,"doubleString"
		else:
			return n, "normal"
	elif s[i] == delim:
		i += 1
	return i,"normal"
</t>
<t tx="edream.110203161858.510">@language python

from leoGlobals import *

# Import the subcommanders.
import leoAtFile,leoFileCommands,leoImport,leoNodes,leoTangle,leoUndo

class baseCommands:
	"""The base class for Leo's main commander."""
	@others

class Commands (baseCommands):
	"""A class that implements most of Leo's commands."""
	pass</t>
<t tx="edream.110203161858.511"></t>
<t tx="edream.110203161858.512">def __init__(self,frame):

	# trace("__init__", "c.__init__")
	self.frame = frame
	self.initIvars(frame)

	# initialize the sub-commanders
	self.fileCommands = leoFileCommands.fileCommands(self)
	self.atFileCommands = leoAtFile.atFile(self)
	self.importCommands = leoImport.leoImportCommands(self)
	self.tangleCommands = leoTangle.tangleCommands(self)
	self.undoer = leoUndo.undoer(self)

def initIvars(self, frame):
	&lt;&lt; initialize ivars &gt;&gt;</t>
<t tx="edream.110203161858.513"># per-document info...
self.hookFunction = None
self.openDirectory = None # 7/2/02

self.expansionLevel = 0  # The expansion level of this outline.
self.expansionNode = None # The last node we expanded or contracted.
self.changed = false # true if any data has been changed since the last save.
self.loading = false # true if we are loading a file: disables c.setChanged()

# copies of frame info
self.body = frame.body
self.log = frame.log
self.tree = frame.tree
self.canvas = frame.canvas

# For tangle/untangle
self.tangle_errrors = 0

# Global options
self.page_width = 132
self.tab_width = 4
self.tangle_batch_flag = false
self.untangle_batch_flag = false
# Default Tangle options
self.tangle_directory = ""
self.use_header_flag = false
self.output_doc_flag = false
# Default Target Language
self.target_language = "python" # 8/11/02: Required if leoConfig.txt does not exist.

self.setIvarsFromFind()

# New in 3.12
# These are defined here, and updated by the tree.select()
self.beadList = [] # list of vnodes for the Back and Forward commands.
self.beadPointer = -1 # present item in the list.
self.visitedList = [] # list of vnodes for the Nodes dialog.</t>
<t tx="edream.110203161858.514">def __repr__ (self):
	
	try:
		return "Commander: " + self.frame.mFileName
	except:
		return "Commander: bad mFileName"
		
__str__ = __repr__
</t>
<t tx="edream.110203161858.515"># This should be called whenever we need to use find values:
# i.e., before reading or writing

def setIvarsFromFind (self):

	c = self ; find = app().findFrame
	if find:
		find.set_ivars(c)
</t>
<t tx="edream.110203161858.516">@ This should be called whenever we need to use preference:
i.e., before reading, writing, tangling, untangling.

7/2/02: We no longer need this now that the Prefs dialog is modal.
@c

def setIvarsFromPrefs (self):

	pass</t>
<t tx="edream.110203161858.517"></t>
<t tx="edream.110203161858.518">def cutOutline(self):

	c = self
	if c.canDeleteHeadline():
		c.copyOutline()
		c.deleteHeadline("Cut Node")
		c.recolor()</t>
<t tx="edream.110203161858.519">def copyOutline(self):

	c = self
	c.endEditing()
	c.fileCommands.assignFileIndices() # Revert to 3.11.1 code.
	s = c.fileCommands.putLeoOutline()
	# trace(`s`)
	app().root.clipboard_clear()
	app().root.clipboard_append(s)
	# Copying an outline has no undo consequences.
</t>
<t tx="edream.110203161858.520">@ To cut and paste between apps, just copy into an empty body first, then copy to Leo's clipboard.
@c

def pasteOutline(self):

	a = app() ; c = self ; current = c.currentVnode()
	
	try:
		s = a.root.selection_get(selection="CLIPBOARD")
	except:
		s = None # This should never happen.

	if not s or not c.canPasteOutline(s):
		return # This should never happen.

	isLeo = match(s,0,a.prolog_prefix_string)

	# trace(`s`)
	if isLeo:
		v = c.fileCommands.getLeoOutline(s)
	else:
		v = c.importCommands.convertMoreStringToOutlineAfter(s,current)
	if v:
		c.endEditing()
		c.beginUpdate()
		if 1: # inside update...
			v.createDependents()# To handle effects of clones.
			c.validateOutline()
			c.selectVnode(v)
			v.setDirty()
			c.setChanged(true)
			# paste as first child if back is expanded.
			back = v.back()
			if back and back.isExpanded():
				v.moveToNthChildOf(back,0)
			c.undoer.setUndoParams("Paste Node",v)
		c.endUpdate()
		c.recolor()
	else:
		es("The clipboard is not a valid " + choose(isLeo,"Leo","MORE") + " file")</t>
<t tx="edream.110203161858.521"></t>
<t tx="edream.110203161858.522">def beginUpdate(self):

	self.tree.beginUpdate()
	
BeginUpdate = beginUpdate # Compatibility with old scripts</t>
<t tx="edream.110203161858.523">def bringToFront(self):

	self.frame.top.deiconify()

BringToFront = bringToFront # Compatibility with old scripts</t>
<t tx="edream.110203161858.524">def endUpdate(self, flag=true):
	
	self.tree.endUpdate(flag)
	
EndUpdate = endUpdate # Compatibility with old scripts</t>
<t tx="edream.110203161858.525">def recolor(self):

	tree = self.tree
	tree.recolor(tree.currentVnode)</t>
<t tx="edream.110203161858.526">def redraw(self):

	self.tree.redraw()
	
# Compatibility with old scripts
Redraw = redraw 
repaint = redraw
Repaint = redraw</t>
<t tx="edream.110203161858.527"></t>
<t tx="edream.110203161858.528">def convertAllBlanks (self):
	
	c = self ; v = current = c.currentVnode()
	next = v.nodeAfterTree()
	dict = scanDirectives(c)
	tabWidth  = dict.get("tabwidth")
	# Create copy for undo.
	v_copy = v.copyTree()
	oldText = c.body.get("1.0","end") # 7/11/03
	oldSel = getTextSelection(c.body) # 7/11/03
	anyChanged = false
	while v and v != next:
		if v == current:
			if c.convertBlanks():
				anyChanged = true # 7/11/03
		else:
			result = [] ; changed = false
			text = v.t.bodyString
			lines = string.split(text, '\n')
			for line in lines:
				s = optimizeLeadingWhitespace(line,tabWidth)
				if s != line:
					changed = true ; anyChanged = true
				result.append(s)
			if changed:
				result = string.join(result,'\n')
				v.t.setTnodeText(result)
		v.setDirty()
		v = v.threadNext()
	if anyChanged:
		newText = c.body.get("1.0","end") # 7/11/03
		newSel = getTextSelection(c.body) # 7/11/03
		c.undoer.setUndoParams("Convert All Blanks",
			current,select=current,oldTree=v_copy,
			oldText=oldText,newText=newText,
			oldSel=oldSel,newSel=newSel)
	else:
		es("nothing changed")</t>
<t tx="edream.110203161858.529">def convertAllTabs (self):

	c = self ; v = current = c.currentVnode()
	next = v.nodeAfterTree()
	dict = scanDirectives(c)
	tabWidth  = dict.get("tabwidth")
	# Create copy for undo.
	v_copy = v.copyTree()
	oldText = c.body.get("1.0","end") # 7/11/03
	oldSel = getTextSelection(c.body) # 7/11/03
	anyChanged = false
	while v and v != next:
		if v == current:
			if self.convertTabs():
				anyChanged = true # 7/11/03
		else:
			result = [] ; changed = false
			text = v.t.bodyString
			lines = string.split(text, '\n')
			for line in lines:
				i,w = skip_leading_ws_with_indent(line,0,tabWidth)
				s = computeLeadingWhitespace(w,-abs(tabWidth)) + line[i:] # use negative width.
				if s != line:
					changed = true ; anyChanged = true
				result.append(s)
			if changed:
				result = string.join(result,'\n')
				v.t.setTnodeText(result)
		v.setDirty()
		v = v.threadNext()
	if anyChanged:
		newText = c.body.get("1.0","end") # 7/11/03
		newSel = getTextSelection(c.body) # 7/11/03
		c.undoer.setUndoParams("Convert All Tabs",
			current,select=current,oldTree=v_copy,
			oldText=oldText,newText=newText,
			oldSel=oldSel,newSel=newSel)
	else:
		es("nothing changed")</t>
<t tx="edream.110203161858.530">def convertBlanks (self):

	c = self ; v = current = c.currentVnode()
	head,lines,tail,oldSel,oldYview = c.getBodyLines()
	result = [] ; changed = false

	# DTHEIN 3-NOV-2002: use the relative @tabwidth, not the global one
	dict = scanDirectives(c)
	tabWidth  = dict.get("tabwidth")

	if 0: # DTHEIN 3-NOV-2002: don't use the global @tabwidth
		for line in lines:
			s = optimizeLeadingWhitespace(line,c.tab_width)
			if s != line: changed = true
			result.append(s)
	else: # DTHEIN 3-NOV-2002: use relative @tabwidth (tabWidth)
		for line in lines:
			s = optimizeLeadingWhitespace(line,tabWidth)
			if s != line: changed = true
			result.append(s)

	if changed:
		result = string.join(result,'\n')
		c.updateBodyPane(head,result,tail,"Convert Blanks",oldSel,oldYview) # Handles undo
		setTextSelection(c.body,"1.0","1.0")
		
	return changed
</t>
<t tx="edream.110203161858.531">def convertTabs (self):

	c = self
	head,lines,tail,oldSel,oldYview = self.getBodyLines()
	result = [] ; changed = false
	
	# DTHEIN 3-NOV-2002: use the relative @tabwidth, not the global one
	dict = scanDirectives(c)
	tabWidth  = dict.get("tabwidth")

	if 0: # DTHEIN 3-NOV-2002: don't use the global @tabwidth
		for line in lines:
			i,w = skip_leading_ws_with_indent(line,0,c.tab_width)
			s = computeLeadingWhitespace(w,-abs(c.tab_width)) + line[i:] # use negative width.
			if s != line: changed = true
			result.append(s)
	else: # DTHEIN 3-NOV-2002: use the relative @tabwidth (tabWidth)
		for line in lines:
			i,w = skip_leading_ws_with_indent(line,0,tabWidth)
			s = computeLeadingWhitespace(w,-abs(tabWidth)) + line[i:] # use negative width.
			if s != line: changed = true
			result.append(s)

	if changed:
		result = string.join(result,'\n')
		c.updateBodyPane(head,result,tail,"Convert Tabs",oldSel,oldYview) # Handles undo
		setTextSelection(c.body,"1.0","1.0")
		
	return changed</t>
<t tx="edream.110203161858.532">def createLastChildNode (self,parent,headline,body):
	
	c = self
	if body and len(body) &gt; 0:
		body = string.rstrip(body)
	if not body or len(body) == 0:
		body = ""
	v = parent.insertAsLastChild()
	v.initHeadString(headline)
	v.t.setTnodeText(body)
	v.createDependents() # To handle effects of clones.
	v.setDirty()
	c.validateOutline()</t>
<t tx="edream.110203161858.533">def dedentBody (self):

	c = self
	head,lines,tail,oldSel,oldYview = self.getBodyLines()
	result = [] ; changed = false
	for line in lines:
		i, width = skip_leading_ws_with_indent(line,0,c.tab_width)
		s = computeLeadingWhitespace(width-abs(c.tab_width),c.tab_width) + line[i:]
		if s != line: changed = true
		result.append(s)
	if changed:
		result = string.join(result,'\n')
		c.updateBodyPane(head,result,tail,"Undent",oldSel,oldYview)</t>
<t tx="edream.110203161858.534">def extract(self):

	c = self ; current = v = c.currentVnode()
	head,lines,tail,oldSel,oldYview = self.getBodyLines()
	if not lines: return
	headline = lines[0] ; del lines[0]
	junk, ws = skip_leading_ws_with_indent(headline,0,c.tab_width)
	# Create copy for undo.
	v_copy = v.copyTree()
	oldText = c.body.get("1.0","end") # 7/11/03
	oldSel = getTextSelection(c.body) # 7/11/03
	&lt;&lt; Set headline for extract &gt;&gt;
	# Remove leading whitespace from all body lines.
	result = []
	for line in lines:
		# Remove the whitespace on the first line
		line = removeLeadingWhitespace(line,ws,c.tab_width)
		result.append(line)
	# Create a new node from lines.
	body = string.join(result,'\n')
	if head and len(head) &gt; 0:
		head = string.rstrip(head)
	c.beginUpdate()
	if 1: # update range...
		c.createLastChildNode(v,headline,body)
		undoType =  "Can't Undo" # 12/8/02: None enables further undoes, but there are bugs now.
		c.updateBodyPane(head,None,tail,undoType,oldSel,oldYview)
		newText = c.body.get("1.0","end") # 7/11/03
		newSel = getTextSelection(c.body) # 7/11/03
		c.undoer.setUndoParams("Extract",
			v,select=current,oldTree=v_copy,
			oldText=oldText,newText=newText,
			oldSel=oldSel,newSel=newSel)
	c.endUpdate()</t>
<t tx="edream.110203161858.535">headline = string.strip(headline)
while len(headline) &gt; 0 and headline[0] == '/':
	headline = headline[1:]
headline = string.strip(headline)</t>
<t tx="edream.110203161858.536">def extractSection(self):

	c = self ; current = v = c.currentVnode()
	head,lines,tail,oldSel,oldYview = self.getBodyLines()
	if not lines: return
	headline = lines[0] ; del lines[0]
	junk, ws = skip_leading_ws_with_indent(headline,0,c.tab_width)
	line1 = "\n" + headline
	# Create copy for undo.
	v_copy = v.copyTree()
	# trace("v:     " + `v`)
	# trace("v_copy:" + `v_copy`)
	oldText = c.body.get("1.0","end") # 7/11/03
	oldSel = getTextSelection(c.body) # 7/11/03
	&lt;&lt; Set headline for extractSection &gt;&gt;
	# Remove leading whitespace from all body lines.
	result = []
	for line in lines:
		# Remove the whitespace on the first line
		line = removeLeadingWhitespace(line,ws,c.tab_width)
		result.append(line)
	# Create a new node from lines.
	body = string.join(result,'\n')
	if head and len(head) &gt; 0:
		head = string.rstrip(head)
	c.beginUpdate()
	if 1: # update range...
		c.createLastChildNode(v,headline,body)
		undoType = None # Set undo params later.
		c.updateBodyPane(head,line1,tail,undoType,oldSel,oldYview)
		newText = c.body.get("1.0","end") # 7/11/03
		newSel = getTextSelection(c.body) # 7/11/03
		c.undoer.setUndoParams("Extract Section",v,
			select=current,oldTree=v_copy,
			oldText=oldText,newText=newText,
			oldSel=oldSel,newSel=newSel)
	c.endUpdate()</t>
<t tx="edream.110203161858.537">while len(headline) &gt; 0 and headline[0] == '/':
	headline = headline[1:]
headline = string.strip(headline)

# Make sure we have a @&lt; or &lt;&lt;
if headline[0:2] != '&lt;&lt;' and headline[0:2] != '@&lt;': return</t>
<t tx="edream.110203161858.538">def extractSectionNames(self):

	c = self ; current = v = c.currentVnode()
	head,lines,tail,oldSel,oldYview = self.getBodyLines()
	if not lines: return
	# Create copy for undo.
	v_copy = v.copyTree()
	# No change to body or selection of this node.
	oldText = newText = c.body.get("1.0","end") # 7/11/03
	i, j = oldSel = newSel = self.getBodySelection()
	c.beginUpdate()
	if 1: # update range...
		for s in lines:
			&lt;&lt; Find the next section name &gt;&gt;
			if name: self.createLastChildNode(v,name,None)
		c.selectVnode(v)
		c.validateOutline()
	c.endUpdate()
	# No change to body or selection
	c.undoer.setUndoParams("Extract Names",
		v,select=current,oldTree=v_copy,
		oldText=oldText,newText=newText,
		oldSel=oldSel,newSel=newSel)
	# Restore the selection.
	setTextSelection(c.body,i,j)
	set_focus(c,c.body)</t>
<t tx="edream.110203161858.539">head1 = string.find(s,"&lt;&lt;")
if head1 &gt; -1:
	head2 = string.find(s,"&gt;&gt;",head1)
else:
	head1 = string.find(s,"@&lt;")
	if head1 &gt; -1:
		head2 = string.find(s,"@&gt;",head1)
		
if head1 == -1 or head2 == -1 or head1 &gt; head2:
	name = None
else:
	name = s[head1:head2+2]</t>
<t tx="edream.110203161858.540">def getBodyLines (self):
	
	c = self
	oldYview = c.frame.body.yview()
	i, j = oldSel = getTextSelection(c.body)
	# if selection was made from back to front, then i and j are reversed
	if i and j and i != j: # 7/7/03
		# Convert all lines containing any part of the selection.
		if c.body.compare(i,"&gt;",j): i,j = j,i
		i = c.body.index(i + "linestart")
		# 12-SEP-2002 DTHEIN: don't include following line in selection
		endSel = j # position of last character of selection
		trailingNewline = ""
		line,col = j.split(".")
		if col == "0":  # DTHEIN: selection ends at start of next line
			endSel = c.body.index(j + "- 1 chars")
			trailingNewline = '\n'
		else: # DTHEIN: selection ends in the midst of a line
			endSel = c.body.index(j + "lineend")
			j = endSel
		head = c.body.get("1.0",i)
		tail = c.body.get(j,"end")
	else: # Convert the entire text.
		i = "1.0" ; j = "end" ; head = tail = ""
		endSel = c.body.index(j + "- 1 chars") # 14-SEP-2002 DTHEIN
		trailingNewline = ""
	if i == endSel:
		head = tail = None ; lines = []
	else:
		lines = c.body.get(i,endSel)
		lines = string.split(lines, '\n')
		lines[-1] += trailingNewline # DTHEIN: add newline if needed
	return head,lines,tail,oldSel,oldYview</t>
<t tx="edream.110203161858.541">def getBodySelection (self):

	c = self
	i, j = getTextSelection(c.body)
	if i and j and c.body.compare(i,"&gt;",j):
		i,j = j,i
	return i, j</t>
<t tx="edream.110203161858.542">def indentBody (self):

	c = self
	head,lines,tail,oldSel,oldYview = self.getBodyLines()
	result = [] ; changed = false
	for line in lines:
		i, width = skip_leading_ws_with_indent(line,0,c.tab_width)
		s = computeLeadingWhitespace(width+abs(c.tab_width),c.tab_width) + line[i:]
		if s != line: changed = true
		result.append(s)
	if changed:
		result = string.join(result,'\n')
		c.updateBodyPane(head,result,tail,"Indent",oldSel,oldYview)</t>
<t tx="edream.110203161858.543">def reformatParagraph(self):
	"""Reformat a text paragraph in a Tk.Text widget

Wraps the concatenated text to present page width setting.
Leading tabs are sized to present tab width setting.
First and second line of original text is used to determine leading whitespace
in reformatted text.  Hanging indentation is honored.

Paragraph is bound by start of body, end of body, blank lines, and lines
starting with "@".  Paragraph is selected by position of current insertion
cursor."""

	c = self ; body = c.frame.body
	x = body.index("current")
	head,lines,tail,oldSel,oldYview = self.getBodyLines()
	result = []

	dict = scanDirectives(c)
	pageWidth = dict.get("pagewidth")
	tabWidth  = dict.get("tabwidth")
	# trace(`tabWidth`+","+`pageWidth`)

	# If active selection, then don't attempt a reformat.
	selStart, selEnd = getTextSelection(body)
	if selStart != selEnd: return

	# Find the paragraph range.
	data = bound_paragraph(body)
	if data:
		start, end, endsWithNL = data
		firstLine = int(float(start)) - 1 # subtract 1 to get on zero basis
		lastLine = int(float(end)) - 1
	else: return
	
	# Compute the leading whitespace.
	indents = [0,0] ; leading_ws = ["",""] # Bug fix: 11/16/02
	for i in (0,1):
		if firstLine + i &lt; len(lines):
			# Use the original, non-optimized leading whitespace.
			leading_ws[i] = ws = get_leading_ws(lines[firstLine+i])
			indents[i] = computeWidth(ws,tabWidth)
	indents[1] = max(indents)
	# 11/17/02: Bug fix suggested by D.T.Hein.
	if 1 == (lastLine - firstLine):
		leading_ws[1] = leading_ws[0]

	# Put the leading unchanged lines.
	for i in range(0,firstLine):
		result.append(lines[i])
		
	# Wrap the lines, decreasing the page width by indent.
	wrapped_lines = wrap_lines(
		lines[firstLine:lastLine],
		pageWidth-indents[1],
		pageWidth-indents[0])
	lineCount = len(wrapped_lines)
		
	i = 0
	for line in wrapped_lines:
		result.append(leading_ws[i] + line)
		if i &lt; 1: i += 1

	# Put the trailing unchanged lines.
	for i in range(lastLine,len(lines)):
		result.append(lines[i])

	# Replace the text if it changed.
	for i in range(firstLine,lineCount+firstLine):
		if i &gt;= lastLine or lines[i] != result[i]:
			result = string.join(result,'\n')
			c.updateBodyPane(head,result,tail,"Reformat Paragraph",oldSel,oldYview) # Handles undo
			break

	&lt;&lt; Set the new insert at the start of the next paragraph &gt;&gt;

	# Make sure we can see the new cursor.
	body.see("insert-5l")
</t>
<t tx="edream.110203161858.544">lastLine = firstLine + lineCount
if not endsWithNL:
	insPos = str(lastLine) + ".0lineend"
else:
	endPos = body.index("end")
	endLine = int(float(endPos))
	lastLine += 1
	insPos = str(lastLine) + ".0"
	while lastLine &lt; endLine:
		s = body.get(insPos,insPos + "lineend")
		if s and (0 &lt; len(s)) and not s.isspace():
			break;
		lastLine += 1
		insPos = str(lastLine) + ".0"
setTextSelection(body,insPos,insPos)</t>
<t tx="edream.110203161858.545">def updateBodyPane (self,head,middle,tail,undoType,oldSel,oldYview):
	
	c = self ; v = c.currentVnode()
	# trace(v)
	# Update the text and set start, end.
	c.body.delete("1.0","end")
	# The caller must do rstrip.head if appropriate.
	if head and len(head) &gt; 0:
		c.body.insert("end",head)
		start = c.body.index("end-1c")
	else: start = "1.0"
	if middle and len(middle) &gt; 0:
		c.body.insert("end",middle)
		end = c.body.index("end-1c")
	else: end = start
	if tail and len(tail) &gt; 0:
		tail = string.rstrip(tail)
	if tail and len(tail) &gt; 0:
		c.body.insert("end",tail)
	# Activate the body key handler by hand.
	c.tree.onBodyChanged(v,undoType,oldSel=oldSel,oldYview=oldYview)
	# Update the changed mark.
	if not c.isChanged():
		c.setChanged(true)
	# Update the icon.
	c.beginUpdate()
	if not v.isDirty():
		v.setDirty()
	c.endUpdate()
	# Update the selection.
	# trace(`start` + "," + `end`)
	setTextSelection(c.body,start,end)
	if oldYview:
		first,last=oldYview
		c.body.yview("moveto",first)
	else:
		c.body.see("insert")
	set_focus(c,c.body)
	c.recolor() # 7/5/02</t>
<t tx="edream.110203161858.546"></t>
<t tx="edream.110203161858.547">def canContractAllHeadlines (self):

	c = self ; v = c.rootVnode()
	if not v: return false
	while v:
		if v.isExpanded():
			return true
		v = v.threadNext()
	return false</t>
<t tx="edream.110203161858.548">def canContractAllSubheads (self):

	c = self
	v = c.currentVnode()
	if not v: return false
	next = v.nodeAfterTree()
	v = v.threadNext()
	while v and v != next:
		if v.isExpanded():
			return true
		v = v.threadNext()
	return false</t>
<t tx="edream.110203161858.549">def canContractParent (self):

	c = self ; v = c.currentVnode()
	return v.parent() != None</t>
<t tx="edream.110203161858.550">def canContractSubheads (self):

	c = self ; v = c.currentVnode()
	if not v: return false
	v = v.firstChild()
	while v:
		if v.isExpanded():
			return true
		v = v.next()
	return false</t>
<t tx="edream.110203161858.551">def canDeleteHeadline (self):

	c = self ; v = c.currentVnode()
	if not v: return false
	if v.parent(): # v is below the top level.
		return true
	else: # v is at the top level.  We can not delete the last node.
		return v.threadBack() or v.next()

canCutOutline = canDeleteHeadline</t>
<t tx="edream.110203161858.552">def canDemote (self):

	c = self
	v = c.currentVnode()
	if not v: return false
	return v.next() != None</t>
<t tx="edream.110203161858.553">def canExpandAllHeadlines (self):

	c = self ; v = c.rootVnode()
	if not v: return false
	while v:
		if not v.isExpanded():
			return true
		v = v.threadNext()
	return false</t>
<t tx="edream.110203161858.554">def canExpandAllSubheads (self):

	c = self
	v = c.currentVnode()
	if not v: return false
	next = v.nodeAfterTree()
	v = v.threadNext()
	while v and v != next:
		if not v.isExpanded():
			return true
		v = v.threadNext()
	return false</t>
<t tx="edream.110203161858.555">def canExpandSubheads (self):

	c = self ; v = c.currentVnode()
	if not v: return false
	v = v.firstChild()
	while v:
		if not v.isExpanded():
			return true
		v = v.next()
	return false</t>
<t tx="edream.110203161858.556">def canExtract (self):

	c = self
	if c.body:
		i, j = getTextSelection(c.body)
		return i and j and c.body.compare(i, "!=", j)
	else:
		return false

canExtractSection = canExtract
canExtractSectionNames = canExtract</t>
<t tx="edream.110203161858.557">def canFindMatchingBracket (self):
	
	c = self ; body = c.body
	brackets = "()[]{}"
	c1 = body.get("insert -1c")
	c2 = body.get("insert")
	# Bug fix: 2/11/03
	return (c1 and c1 in brackets) or (c2 and c2 in brackets)</t>
<t tx="edream.110203161858.558">def canGoToNextDirtyHeadline (self):

	c = self ; current = c.currentVnode()
	if not current: return false

	v = c.rootVnode()
	while v:
		if v.isDirty()and v != current:
			return true
		v = v.threadNext()
	return false</t>
<t tx="edream.110203161858.559">def canGoToNextMarkedHeadline (self):

	c = self ; current = c.currentVnode()
	if not current: return false

	v = c.rootVnode()
	while v:
		if v.isMarked()and v != current:
			return true
		v = v.threadNext()
	return false</t>
<t tx="edream.110203161858.560">def canMarkChangedHeadlines (self):

	c = self ; v = c.rootVnode()
	while v:
		if v.isDirty():
			return true
		v = v.threadNext()
	return false</t>
<t tx="edream.110203161858.561">def canMarkChangedRoots (self):

	c = self ; v = c.rootVnode()
	while v:
		if v.isDirty():
			return true
		v = v.threadNext()
	return false</t>
<t tx="edream.110203161858.562">def canMoveOutlineDown (self):

	c = self
	if 1: # The permissive way
		current = c.currentVnode()
		if not current: return false
		v = current.visNext()
		while v and current.isAncestorOf(v):
			v = v.visNext()
		return v != None
	else: # The MORE way.
		return c.currentVnode().next() != None</t>
<t tx="edream.110203161858.563">def canMoveOutlineLeft (self):

	c = self ; v = c.currentVnode()
	if 0: # Old code: assumes multiple leftmost nodes.
		return v and v.parent()
	else: # Can't move a child of the root left.
		return v and v.parent() and v.parent().parent()</t>
<t tx="edream.110203161858.564">def canMoveOutlineRight (self):

	c = self ; v = c.currentVnode()
	return v and v.back()</t>
<t tx="edream.110203161858.565">def canMoveOutlineUp (self):

	c = self ; v = c.currentVnode()
	if 1: # The permissive way.
		return v and v.visBack()
	else: # The MORE way.
		return v and v.back()</t>
<t tx="edream.110203161858.566">def canPasteOutline (self,s=None):

	a = app() ; c = self
	if s == None:
		try:
			s = a.root.selection_get(selection="CLIPBOARD")
		except:
			return false

	# trace(s)
	if match(s,0,a.prolog_prefix_string):
		return true
	elif len(s) &gt; 0:
		return c.importCommands.stringIsValidMoreFile(s)
	else:
		return false</t>
<t tx="edream.110203161858.567">def canPromote (self):

	c = self ; v = c.currentVnode()
	return v and v.hasChildren()</t>
<t tx="edream.110203161858.568">def canRevert (self):

	# c.mFileName will be "untitled" for unsaved files.
	c = self
	return (c.frame and c.frame.mFileName and
		len(c.frame.mFileName) &gt; 0 and c.isChanged())</t>
<t tx="edream.110203161858.569"># 7/29/02: The shortcuts for these commands are now unique.

def canSelectThreadBack (self):
	v = self.currentVnode()
	return v and v.threadBack()
	
def canSelectThreadNext (self):
	v = self.currentVnode()
	return v and v.threadNext()

def canSelectVisBack (self):
	v = self.currentVnode()
	return v and v.visBack()
	
def canSelectVisNext (self):
	v = self.currentVnode()
	return v and v.visNext()</t>
<t tx="edream.110203161858.570">def canShiftBodyLeft (self):

	c = self
	if c.body:
		s = c.body.GetValue()
		return len(s) &gt; 0
	else:
		return false
		
def canShiftBodyRight (self):

	c = self
	if c.body:
		s = c.body.GetValue()
		return len(s) &gt; 0
	else:
		return false</t>
<t tx="edream.110203161858.571">def canSortChildren (self):

	c = self ; v = c.currentVnode()
	return v and v.hasChildren()
	
def canSortSiblings (self):

	c = self ; v = c.currentVnode()
	return v.next() or v.back()</t>
<t tx="edream.110203161858.572">def canUndo (self):

	c = self
	return c.undoer.canUndo()
	
def canRedo (self):

	c = self
	return c.undoer.canRedo()</t>
<t tx="edream.110203161858.573"># Returns true if any node is marked.

def canUnmarkAll (self):

	c = self ; v = c.rootVnode()
	while v:
		if v.isMarked():
			return true
		v = v.threadNext()
	return false</t>
<t tx="edream.110203161858.574"></t>
<t tx="edream.110203161858.575"></t>
<t tx="edream.110203161858.576">def contractAllHeadlines (self):

	c = self ; current = c.currentVnode()
	v = c.rootVnode()
	c.beginUpdate()

	while v:
		c.contractSubtree(v)
		v = v.next()

	if not current.isVisible():
		# 1/31/03: Select the topmost ancestor of the presently selected node.
		v = current
		while v and v.parent():
			v = v.parent()
		c.selectVnode(v)

	c.endUpdate()
	c.expansionLevel = 1 # Reset expansion level.</t>
<t tx="edream.110203161858.577">def contractNode (self):
	
	c = self ; v = c.currentVnode()
	
	c.beginUpdate()
	v.contract()
	c.endUpdate()
</t>
<t tx="edream.110203161858.578">def contractParent (self):
	
	c = self ; v = c.currentVnode()
	parent = v.parent()
	if not parent: return
	
	c.beginUpdate()
	c.selectVnode(parent)
	parent.contract()
	c.endUpdate()</t>
<t tx="edream.110203161858.579">def expandAllHeadlines(self):

	c = self ; v = root = c.rootVnode()
	c.beginUpdate()
	while v:
		c.expandSubtree(v)
		v = v.next()
	c.selectVnode(root)
	c.endUpdate()
	c.expansionLevel = 0 # Reset expansion level.</t>
<t tx="edream.110203161858.580">def expandAllSubheads (self):

	c = self ; v = c.currentVnode()
	if not v: return

	child = v.firstChild()
	c.beginUpdate()
	c.expandSubtree(v)
	while child:
		c.expandSubtree(child)
		child = child.next()
	c.selectVnode(v)
	c.endUpdate()</t>
<t tx="edream.110203161858.581">def expandLevel1 (self): self.expandToLevel(1)
def expandLevel2 (self): self.expandToLevel(2)
def expandLevel3 (self): self.expandToLevel(3)
def expandLevel4 (self): self.expandToLevel(4)
def expandLevel5 (self): self.expandToLevel(5)
def expandLevel6 (self): self.expandToLevel(6)
def expandLevel7 (self): self.expandToLevel(7)
def expandLevel8 (self): self.expandToLevel(8)
def expandLevel9 (self): self.expandToLevel(9)
</t>
<t tx="edream.110203161858.582">def expandNextLevel (self):

	c = self ; v = c.currentVnode()
	
	# 1/31/02: Expansion levels are now local to a particular tree.
	if c.expansionNode != v:
		c.expansionLevel = 1
		c.expansionNode = v
		
	self.expandToLevel(c.expansionLevel + 1)
</t>
<t tx="edream.110203161858.583">def expandNode (self):
	
	c = self ; v = c.currentVnode()
	
	c.beginUpdate()
	v.expand()
	c.endUpdate()

</t>
<t tx="edream.110203161858.584">def expandPrevLevel (self):

	c = self ; v = c.currentVnode()
	
	# 1/31/02: Expansion levels are now local to a particular tree.
	if c.expansionNode != v:
		c.expansionLevel = 1
		c.expansionNode = v
		
	self.expandToLevel(max(1,c.expansionLevel - 1))
</t>
<t tx="edream.110203161858.585"></t>
<t tx="edream.110203161858.586">def contractSubtree (self,v):

	last = v.lastNode()
	while v and v != last:
		v.contract()
		v = v.threadNext()</t>
<t tx="edream.110203161858.587">def expandSubtree (self,v):

	c = self
	last = v.lastNode()
	while v and v != last:
		v.expand()
		v = v.threadNext()
	c.tree.redraw()</t>
<t tx="edream.110203161858.588">def expandToLevel (self,level):

	c = self
	c.beginUpdate()
	if 1: # 1/31/03: The expansion is local to the present node.
		v = c.currentVnode() ; n = v.level()
		after = v.nodeAfterTree()
		while v and v != after:
			if v.level() - n + 1 &lt; level:
				v.expand()
			else:
				v.contract()
			v = v.threadNext()
	else: # The expansion is global
		# Start the recursion.
		# First contract everything.
		c.contractAllHeadlines()
		v = c.rootVnode()
		while v:
			c.expandTreeToLevelFromLevel(v,level,1)
			v = v.next()
	c.expansionLevel = level
	c.expansionNode = c.currentVnode()
	c.endUpdate()</t>
<t tx="edream.110203161858.589"></t>
<t tx="edream.110203161858.590"># Compatibility with scripts

def currentVnode (self):

	return self.tree.currentVnode
</t>
<t tx="edream.110203161858.591">def clearAllMarked (self):

	c = self ; v = c.rootVnode()
	while v:
		v.clearMarked()
		v = v.threadNext()</t>
<t tx="edream.110203161858.592">def clearAllVisited (self):

	c = self ; v = c.rootVnode()
	c.beginUpdate()
	while v:
		# tick("clearAllVisited loop")
		v.clearVisited()
		if v.t:
			v.t.clearVisited()
		v = v.threadNext()
	c.endUpdate(false) # never redraw the tree.</t>
<t tx="edream.110203161858.593"># Compatibility with scripts

def fileName (self):

	return self.frame.mFileName
</t>
<t tx="edream.110203161858.594">def isChanged (self):

	return self.changed</t>
<t tx="edream.110203161858.595"># Compatibility with scripts

def rootVnode (self):

	return self.tree.rootVnode
</t>
<t tx="edream.110203161858.596">def setChanged (self,changedFlag):

	c = self
	if not c.frame: return
	# Clear all dirty bits _before_ setting the caption.
	# 9/15/01 Clear all dirty bits except orphaned @file nodes
	if not changedFlag:
		v = c.rootVnode()
		while v:
			if v.isDirty() and not (v.isAtFileNode() or v.isAtRawFileNode()):
				v.clearDirtyJoined()
			v = v.threadNext()
	# Update all derived changed markers.
	c.changed = changedFlag
	s = c.frame.top.title()
	if len(s) &gt; 2 and not c.loading: # don't update while loading.
		if changedFlag:
			# import traceback ; traceback.print_stack()
			if s [0] != '*': c.frame.top.title("* " + s)
		else:
			if s[0:2]=="* ": c.frame.top.title(s[2:])


</t>
<t tx="edream.110203161858.597"></t>
<t tx="edream.110203161858.598"># Returns false if any node of tree is a clone of parent or any of parents ancestors.

def checkMoveWithParentWithWarning (self,root,parent,warningFlag):

	clone_message = "Illegal move or drag: no clone may contain a clone of itself"
	drag_message  = "Illegal drag: Can't drag a node into its own tree"

	# 10/25/02: Create dictionaries for faster checking.
	parents = {} ; clones = {}
	while parent:
		parents [parent.t] = parent.t
		if parent.isCloned():
			clones [parent.t] = parent.t
		parent = parent.parent()
	
	# 10/25/02: Scan the tree only once.
	v = root ; next = root.nodeAfterTree()
	while v and v != next:
		ct = clones.get(v.t)
		if ct != None and ct == v.t:
			if warningFlag:
				alert(clone_message)
			return false
		v = v.threadNext()

	pt = parents.get(root.t)
	if pt == None:
		return true
	else:
		if warningFlag:
			alert(drag_message)
		return false
</t>
<t tx="edream.110203161858.599"># Deletes the current vnode and dependent nodes. Does nothing if the outline would become empty.

def deleteHeadline (self,op_name="Delete Outline"):

	c = self ; v = c.currentVnode()
	if not v: return
	vBack = v.visBack()
	# Bug fix: 1/18/00: if vBack is NULL we are at the top level,
	# the next node should be v.next(), _not_ v.visNext();
	if vBack: newNode = vBack
	else: newNode = v.next()
	if not newNode: return
	c.endEditing()# Make sure we capture the headline for Undo.
	c.beginUpdate()
	v.setDirtyDeleted() # 8/3/02: Mark @file nodes dirty for all clones in subtree.
	# Reinsert v after back, or as the first child of parent, or as the root.
	c.undoer.setUndoParams(op_name,v,select=newNode)
	v.doDelete(newNode) # doDelete destroys dependents.
	c.setChanged(true)
	c.endUpdate()
	c.validateOutline()</t>
<t tx="edream.110203161858.600"># Inserts a vnode after the current vnode.  All details are handled by the vnode class.

def insertHeadline (self,op_name="Insert Outline"):

	c = self ; current = c.currentVnode()
	if not current: return

	c.beginUpdate()
	if 1: # inside update...
		if current.hasChildren() and current.isExpanded():
			v = current.insertAsNthChild(0)
		else:
			v = current.insertAfter()
		c.undoer.setUndoParams(op_name,v,select=current)
		v.createDependents() # To handle effects of clones.
		c.selectVnode(v)
		c.editVnode(v)
		v.setDirty() # Essential in Leo2.
		c.setChanged(true)
	c.endUpdate()</t>
<t tx="edream.110203161858.601">def clone (self):

	c = self ; v = c.currentVnode()
	if not v: return
	c.beginUpdate()
	clone = v.clone(v)
	clone.setDirty() # essential in Leo2
	c.setChanged(true)
	if c.validateOutline():
		c.selectVnode(clone)
		c.undoer.setUndoParams("Clone",clone)
	c.endUpdate() # updates all icons</t>
<t tx="edream.110203161858.602">def initAllCloneBits (self):
	
	"""Initialize all clone bits in the entire outline"""
	# trace()

	c=self
	c.clearAllVisited()
	v = self.tree.rootVnode
	c.beginUpdate()
	while v:
		if not v.t.isVisited():
			v.t.setVisited() # Inhibit visits to all joined nodes.
			c.initJoinedCloneBits(v)
		v = v.threadNext()
	c.endUpdate()
</t>
<t tx="edream.110203161858.603"># Initializes all clone bits in the all nodes joined to v.

def initJoinedCloneBits (self,v):

	c = self
	c.beginUpdate()
	mark = v.shouldBeClone()
	if mark:
		# Set clone bit in v and all joined nodes.
		v.setClonedBit()
		for v2 in v.t.joinList:
			v2.setClonedBit()
	else:
		# Set clone bit in v and all joined nodes.
		v.clearClonedBit()
		for v2 in v.t.joinList:
			v2.clearClonedBit()
	c.endUpdate()
</t>
<t tx="edream.110203161858.604"># Makes sure all nodes are valid.

def validateOutline (self):

	c = self ; root = c.rootVnode()
	if root:
		return root.validateOutlineWithParent(None)
	else:
		return true</t>
<t tx="edream.110203161858.605"></t>
<t tx="edream.110203161858.606">def goToNextDirtyHeadline (self):

	c = self ; current = c.currentVnode()
	if not current: return

	v = current.threadNext()
	while v and not v.isDirty():
		v = v.threadNext()
	if not v:
		v = c.rootVnode()
		while v and not v.isDirty():
			v = v.threadNext()
	if v:
		c.selectVnode(v)</t>
<t tx="edream.110203161858.607">def goToNextMarkedHeadline(self):

	c = self ; current = c.currentVnode()
	if not current: return

	v = current.threadNext()
	while v and not v.isMarked():
		v = v.threadNext()
	if v:
		c.beginUpdate()
		c.endEditing()
		c.selectVnode(v)
		c.endUpdate()</t>
<t tx="edream.110203161858.608">def goToNextClone(self):

	c = self ; current = c.currentVnode()
	if not current: return
	if not current.isCloned(): return

	v = current.threadNext()
	while v and v.t != current.t:
		v = v.threadNext()
		
	if not v:
		# Wrap around.
		v = c.rootVnode()
		while v and v != current and v.t != current.t:
			v = v.threadNext()

	if v:
		c.beginUpdate()
		c.endEditing()
		c.selectVnode(v)
		c.endUpdate()</t>
<t tx="edream.110203161858.609">def markChangedHeadlines (self):

	c = self ; v = c.rootVnode()
	c.beginUpdate()
	while v:
		if v.isDirty()and not v.isMarked():
			v.setMarked()
			c.setChanged(true)
		v = v.threadNext()
	c.endUpdate()</t>
<t tx="edream.110203161858.610">def markChangedRoots (self):

	c = self ; v = c.rootVnode()
	c.beginUpdate()
	while v:
		if v.isDirty()and not v.isMarked():
			s = v.bodyString()
			flag, i = is_special(s,0,"@root")
			if flag:
				v.setMarked()
				c.setChanged(true)
		v = v.threadNext()
	c.endUpdate()</t>
<t tx="edream.110203161858.611">def markAllAtFileNodesDirty (self):

	c = self ; v = c.rootVnode()
	c.beginUpdate()
	while v:
		if v.isAtFileNode()and not v.isDirty():
			v.setDirty()
			v = v.nodeAfterTree()
		else: v = v.threadNext()
	c.endUpdate()</t>
<t tx="edream.110203161858.612">def markAtFileNodesDirty (self):

	c = self
	v = c.currentVnode()
	if not v: return
	after = v.nodeAfterTree()
	c.beginUpdate()
	while v and v != after:
		if v.isAtFileNode() and not v.isDirty():
			v.setDirty()
			v = v.nodeAfterTree()
		else: v = v.threadNext()
	c.endUpdate()</t>
<t tx="edream.110203161858.613">def markClones (self):

	c = self ; current = v = c.currentVnode()
	if not v: return
	if not v.isCloned(): return
	
	v = c.rootVnode()
	c.beginUpdate()
	while v:
		if v.t == current.t:
			v.setMarked()
		v = v.threadNext()
	c.endUpdate()</t>
<t tx="edream.110203161858.614">def markHeadline (self):

	c = self ; v = c.currentVnode()
	if not v: return

	c.beginUpdate()
	if v.isMarked():
		v.clearMarked()
	else:
		v.setMarked()
		v.setDirty()
		c.setChanged(true)
	c.endUpdate()</t>
<t tx="edream.110203161858.615">def markSubheads(self):

	c = self ; v = c.currentVnode()
	if not v: return

	child = v.firstChild()
	c.beginUpdate()
	while child:
		if not child.isMarked():
			child.setMarked()
			child.setDirty()
			c.setChanged(true)
		child = child.next()
	c.endUpdate()</t>
<t tx="edream.110203161858.616">def unmarkAll(self):

	c = self ; v = c.rootVnode()
	c.beginUpdate()
	while v:
		if v.isMarked():
			v.clearMarked()
			v.setDirty()
			c.setChanged(true)
		v = v.threadNext()
	c.endUpdate()</t>
<t tx="edream.110203161858.617"></t>
<t tx="edream.110203161858.618">def dragAfter(self,v,after):

	# es("dragAfter")
	c = self
	if not c.checkMoveWithParentWithWarning(v,after.parent(),true): return
	# Remember both the before state and the after state for undo/redo
	oldBack = v.back()
	oldParent = v.parent()
	oldN = v.childIndex()
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		v.setDirty()
		v.moveAfter(after)
		c.undoer.setUndoParams("Drag",v,
			oldBack=oldBack,oldParent=oldParent,oldN=oldN)
		v.setDirty()
		c.selectVnode(v)
		c.setChanged(true)
	c.endUpdate()
	c.updateSyntaxColorer(v) # Dragging can change syntax coloring.</t>
<t tx="edream.110203161858.619">def dragCloneToNthChildOf (self,v,parent,n):

	c = self
	c.beginUpdate()
	# trace("v,parent,n:"+v.headString()+","+parent.headString()+","+`n`)
	clone = v.clone(v) # Creates clone &amp; dependents, does not set undo.
	if not c.checkMoveWithParentWithWarning(clone,parent,true):
		clone.doDelete(v) # Destroys clone &amp; dependents. Makes v the current node.
		c.endUpdate(false) # Nothing has changed.
		return
	# Remember both the before state and the after state for undo/redo
	oldBack = v.back()
	oldParent = v.parent()
	oldN = v.childIndex()
	c.endEditing()
	clone.setDirty()
	clone.moveToNthChildOf(parent,n)
	c.initJoinedCloneBits(clone) # Bug fix: 4/29/03
	c.undoer.setUndoParams("Drag &amp; Clone",clone,
		oldBack=oldBack,oldParent=oldParent,oldN=oldN,oldV=v)
	clone.setDirty()
	c.selectVnode(clone)
	c.setChanged(true)
	c.endUpdate()
	c.updateSyntaxColorer(clone) # Dragging can change syntax coloring.</t>
<t tx="edream.110203161858.620">def dragToNthChildOf(self,v,parent,n):

	# es("dragToNthChildOf")
	c = self
	if not c.checkMoveWithParentWithWarning(v,parent,true): return
	# Remember both the before state and the after state for undo/redo
	oldBack = v.back()
	oldParent = v.parent()
	oldN = v.childIndex()
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		v.setDirty()
		v.moveToNthChildOf(parent,n)
		c.undoer.setUndoParams("Drag",v,
			oldBack=oldBack,oldParent=oldParent,oldN=oldN)
		v.setDirty()
		c.selectVnode(v)
		c.setChanged(true)
	c.endUpdate()
	c.updateSyntaxColorer(v) # Dragging can change syntax coloring.</t>
<t tx="edream.110203161858.621">def sortChildren(self):

	c = self ; v = c.currentVnode()
	if not v or not v.hasChildren(): return
	&lt;&lt; Set the undo info for sortChildren &gt;&gt;
	c.beginUpdate()
	c.endEditing()
	v.sortChildren()
	v.setDirty()
	c.setChanged(true)
	c.endUpdate()
	
def sortSiblings (self):
	
	c = self ; v = c.currentVnode()
	if not v: return
	parent = v.parent()
	if not parent:
		c.sortTopLevel()
	else:
		&lt;&lt; Set the undo info for sortSiblings &gt;&gt;
		c.beginUpdate()
		c.endEditing()
		parent.sortChildren()
		parent.setDirty()
		c.setChanged(true)
		c.endUpdate()</t>
<t tx="edream.110203161858.622"># Get the present list of children.
children = []
child = v.firstChild()
while child:
	children.append(child)
	child = child.next()
c.undoer.setUndoParams("Sort Children",v,sort=children)</t>
<t tx="edream.110203161858.623"># Get the present list of siblings.
sibs = []
sib = parent.firstChild()
while sib:
	sibs.append(sib)
	sib = sib.next()
c.undoer.setUndoParams("Sort Siblings",v,sort=sibs)</t>
<t tx="edream.110203161858.624">def sortTopLevel (self):
	
	# Create a list of vnode, headline tuples
	c = self ; v = root = c.rootVnode()
	if not v: return
	&lt;&lt; Set the undo info for sortTopLevel &gt;&gt;
	pairs = []
	while v:
		pairs.append((v.headString().lower(), v))
		v = v.next()
	# Sort the list on the headlines.
	pairs.sort()
	sortedNodes = pairs
	# Move the nodes
	c.beginUpdate()
	h,v = sortedNodes[0]
	if v != root:
		v.moveToRoot(oldRoot=root)
	for h,next in sortedNodes[1:]:
		next.moveAfter(v)
		v = next
	c.endUpdate()</t>
<t tx="edream.110203161858.625"># Get the present list of children.
sibs = []
sib = c.rootVnode()
while sib:
	sibs.append(sib)
	sib = sib.next()
c.undoer.setUndoParams("Sort Top Level",v,sort=sibs)</t>
<t tx="edream.110203161858.626">def demote(self):

	c = self ; v = c.currentVnode()
	if not v or not v.next(): return
	last = v.lastChild() # EKR: 3/19/03
	# Make sure all the moves will be valid.
	child = v.next()
	while child:
		if not c.checkMoveWithParentWithWarning(child,v,true):
			return
		child = child.next()
	c.beginUpdate()
	if 1: # update range...
		c.mInhibitOnTreeChanged = true
		c.endEditing()
		while v.next():
			child = v.next()
			child.moveToNthChildOf(v,v.numberOfChildren())
		v.expand()
		c.selectVnode(v)
		v.setDirty()
		c.setChanged(true)
		c.mInhibitOnTreeChanged = false
		c.initAllCloneBits() # 7/6/02
	c.endUpdate()
	c.undoer.setUndoParams("Demote",v,lastChild=last)
	c.updateSyntaxColorer(v) # Moving can change syntax coloring.</t>
<t tx="edream.110203161858.627">@ Moving down is more tricky than moving up; we can't move v to be a child of itself.  An important optimization:  we don't have to call checkMoveWithParentWithWarning() if the parent of the moved node remains the same.
@c

def moveOutlineDown(self):

	c = self
	v = c.currentVnode()
	if not v: return
	# Set next to the node after which v will be moved.
	next = v.visNext()
	while next and v.isAncestorOf(next):
		next = next.visNext()
	if not next: return
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		v.setDirty()
		&lt;&lt; Move v down &gt;&gt;
		v.setDirty() # This second call is essential.
		c.selectVnode(v)# 4/23/01
		c.setChanged(true)
	c.endUpdate()
	c.updateSyntaxColorer(v) # Moving can change syntax coloring.</t>
<t tx="edream.110203161858.628"># Remember both the before state and the after state for undo/redo
oldBack = v.back()
oldParent = v.parent()
oldN = v.childIndex()

if next.hasChildren() and next.isExpanded():
	# Attempt to move v to the first child of next.
	if c.checkMoveWithParentWithWarning(v,next,true):
		v.moveToNthChildOf(next,0)
		c.undoer.setUndoParams("Move Down",v,
			oldBack=oldBack,oldParent=oldParent,oldN=oldN)
else:
	# Attempt to move v after next.
	if c.checkMoveWithParentWithWarning(v,next.parent(),true):
		v.moveAfter(next)
		c.undoer.setUndoParams("Move Down",v,
			oldBack=oldBack,oldParent=oldParent,oldN=oldN)</t>
<t tx="edream.110203161858.629">def moveOutlineLeft(self):
	
	# clear_stats() ; # stat()
	c = self
	v = c.currentVnode()
	if not v: return
	parent = v.parent()
	if not parent: return
	# Remember both the before state and the after state for undo/redo
	oldBack = v.back()
	oldParent = v.parent()
	oldN = v.childIndex()
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		v.setDirty()
		v.moveAfter(parent)
		c.undoer.setUndoParams("Move Left",v,
			oldBack=oldBack,oldParent=oldParent,oldN=oldN)
		v.setDirty()
		c.selectVnode(v)
		c.setChanged(true)
	c.endUpdate()
	c.updateSyntaxColorer(v) # Moving can change syntax coloring.
	# print_stats()</t>
<t tx="edream.110203161858.630">def moveOutlineRight(self):
	
	# clear_stats() ; # stat()
	c = self
	v = c.currentVnode()
	if not v: return
	back = v.back()
	if not back: return
	if not c.checkMoveWithParentWithWarning(v,back,true): return
	# Remember both the before state and the after state for undo/redo
	oldBack = v.back()
	oldParent = v.parent()
	oldN = v.childIndex()
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		v.setDirty()
		n = back.numberOfChildren()
		v.moveToNthChildOf(back,n)
		c.undoer.setUndoParams("Move Right",v,
			oldBack=oldBack,oldParent=oldParent,oldN=oldN)
		v.setDirty()
		c.selectVnode(v)
		c.setChanged(true)
		c.initJoinedCloneBits(v) # 7/6/02
	c.endUpdate()
	c.updateSyntaxColorer(v) # Moving can change syntax coloring.
	# print_stats()</t>
<t tx="edream.110203161858.631">def moveOutlineUp(self):

	c = self
	v = c.currentVnode()
	if not v: return
	back = v.visBack()
	if not back: return
	back2 = back.visBack()
	c = self
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		v.setDirty()
		&lt;&lt; Move v up &gt;&gt;
		v.setDirty()
		c.selectVnode(v)
		c.setChanged(true)
	c.endUpdate()
	c.updateSyntaxColorer(v) # Moving can change syntax coloring.</t>
<t tx="edream.110203161858.632"># Remember both the before state and the after state for undo/redo
oldBack = v.back()
oldParent = v.parent()
oldN = v.childIndex()

if not back2:
	# v will be the new root node
	v.moveToRoot(c.tree.rootVnode) # 3/16/02, 5/17/02
	c.undoer.setUndoParams("Move Up",v,
		oldBack=oldBack,oldParent=oldParent,oldN=oldN)
elif back2.hasChildren() and back2.isExpanded():
	if c.checkMoveWithParentWithWarning(v,back2,true):
		v.moveToNthChildOf(back2,0)
		c.undoer.setUndoParams("Move Up",v,
			oldBack=oldBack,oldParent=oldParent,oldN=oldN)
elif c.checkMoveWithParentWithWarning(v,back2.parent(),true):
	# Insert after back2.
	v.moveAfter(back2)
	c.undoer.setUndoParams("Move Up",v,
		oldBack=oldBack,oldParent=oldParent,oldN=oldN)</t>
<t tx="edream.110203161858.633">def promote(self):

	c = self
	v = c.currentVnode()
	if not v or not v.hasChildren(): return
	last = v.lastChild() # EKR: 3/19/03
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		after = v
		while v.hasChildren():
			child = v.firstChild()
			child.moveAfter(after)
			after = child
		v.setDirty()
		c.setChanged(true)
		c.selectVnode(v)
	c.endUpdate()
	c.undoer.setUndoParams("Promote",v,lastChild=last)
	c.updateSyntaxColorer(v) # Moving can change syntax coloring.</t>
<t tx="edream.110203161858.634">def dragCloneAfter (self,v,after):

	c = self
	c.beginUpdate()
	clone = v.clone(v) # Creates clone &amp; dependents, does not set undo.
	# trace("v,after:"+v.headString()+","+after.headString())
	if not c.checkMoveWithParentWithWarning(clone,after.parent(),true):
		trace("invalid clone move")
		clone.doDelete(v) # Destroys clone &amp; dependents. Makes v the current node.
		c.endUpdate(false) # Nothing has changed.
		return
	# Remember both the before state and the after state for undo/redo
	oldBack = v.back()
	oldParent = v.parent()
	oldN = v.childIndex()
	c.endEditing()
	clone.setDirty()
	clone.moveAfter(after)
	c.initJoinedCloneBits(clone) # Bug fix: 4/29/03
	c.undoer.setUndoParams("Drag &amp; Clone",clone,
		oldBack=oldBack,oldParent=oldParent,oldN=oldN,oldV=v)
	clone.setDirty()
	c.selectVnode(clone)
	c.setChanged(true)
	c.endUpdate()
	c.updateSyntaxColorer(clone) # Dragging can change syntax coloring.</t>
<t tx="edream.110203161858.635"></t>
<t tx="edream.110203161858.636"># Selects v: sets the focus to v and edits v.

def editVnode(self,v):

	c = self
	# trace(v)
	if v:
		c.selectVnode(v)
		c.tree.editLabel(v)</t>
<t tx="edream.110203161858.637"># Ends the editing in the outline.

def endEditing(self):

	self.tree.endEditLabel()
</t>
<t tx="edream.110203161858.638">def selectThreadBack(self):

	c = self ; current = c.currentVnode()
	if not current: return
	
	v = current.threadBack()
	if v:
		c.beginUpdate()
		c.selectVnode(v)
		c.endUpdate()
</t>
<t tx="edream.110203161858.639">def selectThreadNext(self):

	c = self ; current = c.currentVnode()
	if not current: return

	v = current.threadNext()
	if v:
		c.beginUpdate()
		c.selectVnode(v)
		c.endUpdate()</t>
<t tx="edream.110203161858.640"># This has an up arrow for a control key.

def selectVisBack(self):

	c = self ; current = c.currentVnode()
	if not current: return

	v = current.visBack()
	if v:
		c.beginUpdate()
		c.selectVnode(v)
		c.endUpdate()</t>
<t tx="edream.110203161858.641">def selectVisNext(self):

	c = self ; current = c.currentVnode()
	if not current: return
	
	v = current.visNext()
	if v:
		c.beginUpdate()
		c.selectVnode(v)
		c.endUpdate()
</t>
<t tx="edream.110203161858.642"># This is called inside commands to select a new vnode.

def selectVnode(self,v,updateBeadList=true):

	# All updating and "synching" of nodes are now done in the event handlers!
	c = self
	c.tree.endEditLabel()
	c.tree.select(v,updateBeadList)
	# trace(v)
	set_focus(c,c.body)
	self.editing = false</t>
<t tx="edream.110203161858.643"># Selects the given node and enables editing of the headline if editFlag is true.

def selectVnodeWithEditing(self,v,editFlag):

	c = self
	if editFlag:
		c.editVnode(v)
	else:
		c.selectVnode(v)
</t>
<t tx="edream.110203161858.644">@ These routines provide a convenient interface to the syntax colorer.
</t>
<t tx="edream.110203161858.645">def updateSyntaxColorer(self,v):

	self.tree.colorizer.updateSyntaxColorer(v)
</t>
<t tx="edream.110203161858.646">@language python

# The code for Leo's Compare Panel and the compare class.

from leoGlobals import *
import difflib,filecmp,os,string
import Tkinter,tkFileDialog

@others

if __name__ == "__main__":
	pass</t>
<t tx="edream.110203161858.647">def choose(cond, a, b): # warning: evaluates all arguments

	if cond: return a
	else: return b
</t>
<t tx="edream.110203161858.648">def go ():

	cmp = leoCompare(
		commands = None,
		
		appendOutput = true,

		ignoreBlankLines = true,
		ignoreFirstLine1 = false,
		ignoreFirstLine2 = false,
		ignoreInteriorWhitespace = false,
		ignoreLeadingWhitespace = true,
		ignoreSentinelLines = false,
		
		limitCount = 9, # Zero means don't stop.
		limitToExtension = ".py",  # For directory compares.
		makeWhitespaceVisible = true,
		
		printBothMatches = false,
		printMatches = false,
		printMismatches = true,
		printTrailingMismatches = false,

		outputFileName = None)

	if 1: # Compare all files in Tangle test directories

		path1 = "c:\\prog\\test\\tangleTest\\"
		path2 = "c:\\prog\\test\\tangleTestCB\\"
		cmp.compare_directories(path1,path2)

	else: # Compare two files.

		name1 = "c:\\prog\\test\\compare1.txt"
		name2 = "c:\\prog\\test\\compare2.txt"
		cmp.compare_files(name1,name2)</t>
<t tx="edream.110203161858.649">class baseLeoCompare:
	"""The base class for Leo's compare code."""
	@others
	
class leoCompare (baseLeoCompare):
	"""A class containing Leo's compare code."""
	pass</t>
<t tx="edream.110203161858.650"># All these ivars are known to the leoComparePanel class.

def __init__ (self,

	# Keyword arguments are much convenient and more clear for scripts.
	commands = None,
	
	appendOutput = false,

	ignoreBlankLines = true,
	ignoreFirstLine1 = false,
	ignoreFirstLine2 = false,
	ignoreInteriorWhitespace = false,
	ignoreLeadingWhitespace = true,
	ignoreSentinelLines = false,

	limitCount = 0, # Zero means don't stop.
	limitToExtension = ".py",  # For directory compares.
	makeWhitespaceVisible = true,

	printBothMatches = false,
	printMatches = false,
	printMismatches = true,
	printTrailingMismatches = false,

	outputFileName = None ):
		
	# It is more convenient for the leoComparePanel to set these directly.
	self.commands = commands
	
	self.appendOutput = appendOutput

	self.ignoreBlankLines = ignoreBlankLines
	self.ignoreFirstLine1 = ignoreFirstLine1
	self.ignoreFirstLine2 = ignoreFirstLine2
	self.ignoreInteriorWhitespace = ignoreInteriorWhitespace
	self.ignoreLeadingWhitespace = ignoreLeadingWhitespace
	self.ignoreSentinelLines = ignoreSentinelLines

	self.limitCount = limitCount
	self.limitToExtension = limitToExtension

	self.printBothMatches = printBothMatches
	self.printMatches = printMatches
	self.printMismatches = printMismatches
	self.printTrailingMismatches = printTrailingMismatches
	
	# For communication between methods...
	self.outputFileName = outputFileName
	self.fileName1 = None 
	self.fileName2 = None
	# Open files...
	self.outputFile = None</t>
<t tx="edream.110203161858.651"># We ignore the filename portion of path1 and path2 if it exists.

def compare_directories (self,path1,path2):
	
	# Ignore everything except the directory name.
	dir1 = os.path.dirname(path1)
	dir2 = os.path.dirname(path2)
	dir1 = os.path.normpath(dir1)
	dir2 = os.path.normpath(dir2)
	
	if dir1 == dir2:
		self.show("Directory names are identical.\nPlease pick distinct directories.")
		return
		
	try:
		list1 = os.listdir(dir1)
	except:
		self.show("invalid directory:" + dir1)
		return
	try:
		list2 = os.listdir(dir2)
	except:
		self.show("invalid directory:" + dir2)
		return
		
	if self.outputFileName:
		self.openOutputFile()
	ok = self.outputFileName == None or self.outputFile
	if not ok:
		return

	# Create files and files2, the lists of files to be compared.
	files1 = []
	files2 = []
	for f in list1:
		junk, ext = os.path.splitext(f)
		if self.limitToExtension:
			if ext == self.limitToExtension:
				files1.append(f)
		else:
			files1.append(f)
	for f in list2:
		junk, ext = os.path.splitext(f)
		if self.limitToExtension:
			if ext == self.limitToExtension:
				files2.append(f)
		else:
			files2.append(f)

	# Compare the files and set the yes, no and fail lists.
	yes = [] ; no = [] ; fail = []
	for f1 in files1:
		head,f2 = os.path.split(f1)
		if f2 in files2:
			try:
				name1 = os.path.join(dir1,f1)
				name2 = os.path.join(dir2,f2)
				val = filecmp.cmp(name1,name2,0)
				if val: yes.append(f1)
				else:    no.append(f1)
			except:
				self.show("exception in filecmp.cmp")
				es_exception()
				fail.append(f1)
		else:
			fail.append(f1)
	
	# Print the results.
	for kind, files in (
		("----- matches --------",yes),
		("----- mismatches -----",no),
		("----- not found ------",fail)):
		self.show(kind)
		for f in files:
			self.show(f)
	
	if self.outputFile:
		self.outputFile.close()
		self.outputFile = None</t>
<t tx="edream.110203161858.652">def compare_files (self, name1, name2):
	
	if name1 == name2:
		self.show("File names are identical.\nPlease pick distinct files.")
		return

	f1 = f2 = None
	try:
		f1 = self.doOpen(name1)
		f2 = self.doOpen(name2)
		if self.outputFileName:
			self.openOutputFile()
		ok = self.outputFileName == None or self.outputFile
		ok = choose(ok and ok != 0,1,0)
		if f1 and f2 and ok: # Don't compare if there is an error opening the output file.
			self.compare_open_files(f1,f2,name1,name2)
	except:
		self.show("exception comparing files")
		es_exception()
	try:
		if f1: f1.close()
		if f2: f2.close()
		if self.outputFile:
			self.outputFile.close() ; self.outputFile = None
	except:
		self.show("exception closing files")
		es_exception()</t>
<t tx="edream.110203161858.653">def compare_lines (self,s1,s2):
	
	if self.ignoreLeadingWhitespace:
		s1 = string.lstrip(s1)
		s2 = string.lstrip(s2)

	if self.ignoreInteriorWhitespace:
		k1 = skip_ws(s1,0)
		k2 = skip_ws(s2,0)
		ws1 = s1[:k1]
		ws2 = s2[:k2]
		tail1 = s1[k1:]
		tail2 = s2[k2:]
		tail1 = string.replace(tail1," ","")
		tail1 = string.replace(tail1,"\t","")
		tail2 = string.replace(tail2," ","")
		tail2 = string.replace(tail2,"\t","")
		s1 = ws1 + tail1
		s2 = ws2 + tail2

	return s1 == s2</t>
<t tx="edream.110203161858.654">def compare_open_files (self, f1, f2, name1, name2):

	# self.show("compare_open_files")
	lines1 = 0 ; lines2 = 0 ; mismatches = 0 ; printTrailing = true
	sentinelComment1 = sentinelComment2 = None
	if self.openOutputFile():
		self.show("1: " + name1)
		self.show("2: " + name2)
		self.show("")
	s1 = s2 = None
	&lt;&lt; handle opening lines &gt;&gt;
	while 1:
		if s1 == None:
			s1 = readlineForceUnixNewline(f1) ; lines1 += 1
		if s2 == None:
			s2 = readlineForceUnixNewline(f2) ; lines2 += 1
		&lt;&lt; ignore blank lines and/or sentinels &gt;&gt;
		n1 = len(s1) ; n2 = len(s2)
		if n1==0 and n2 != 0: self.show("1.eof***:")
		if n2==0 and n1 != 0: self.show("2.eof***:")
		if n1==0 or n2==0: break
		match = self.compare_lines(s1,s2)
		if not match: mismatches += 1
		&lt;&lt; print matches and/or mismatches &gt;&gt;
		&lt;&lt; warn if mismatch limit reached &gt;&gt;
		s1 = s2 = None # force a read of both lines.
	&lt;&lt; handle reporting after at least one eof is seen &gt;&gt;</t>
<t tx="edream.110203161858.655">if self.ignoreSentinelLines:
	
	s1 = readlineForceUnixNewline(f1) ; lines1 += 1
	s2 = readlineForceUnixNewline(f2) ; lines2 += 1
	# Note: isLeoHeader may return None.
	sentinelComment1 = self.isLeoHeader(s1)
	sentinelComment2 = self.isLeoHeader(s2)
	if not sentinelComment1: self.show("no @+leo line for " + name1)
	if not sentinelComment2: self.show("no @+leo line for " + name2)
		
if self.ignoreFirstLine1:
	if s1 == None:
		readlineForceUnixNewline(f1) ; lines1 += 1
	s1 = None

if self.ignoreFirstLine2:
	if s2 == None:
		readlineForceUnixNewline(f2) ; lines2 += 1
	s2 = None</t>
<t tx="edream.110203161858.656"># Completely empty strings denotes end-of-file.
if s1 and len(s1) &gt; 0:
	if self.ignoreBlankLines and len(string.strip(s1)) == 0:
		s1 = None ; continue
		
	if self.ignoreSentinelLines and sentinelComment1 and self.isSentinel(s1,sentinelComment1):
		s1 = None ; continue

if s2 and len(s2) &gt; 0:
	if self.ignoreBlankLines and len(string.strip(s2)) == 0:
		s2 = None ; continue

	if self.ignoreSentinelLines and sentinelComment2 and self.isSentinel(s2,sentinelComment2):
		s2 = None ; continue
</t>
<t tx="edream.110203161858.657">if self.limitCount == 0 or mismatches &lt;= self.limitCount:

	if match and self.printMatches:
		
		if self.printBothMatches:
			self.dump(string.rjust("1." + `lines1`,6) + ' :',s1)
			self.dump(string.rjust("2." + `lines2`,6) + ' :',s2)
		else:
			self.dump(string.rjust(       `lines1`,6) + ' :',s1)
	
	if not match and self.printMismatches:
		
		self.dump(string.rjust("1." + `lines1`,6) + '*:',s1)
		self.dump(string.rjust("2." + `lines2`,6) + '*:',s2)</t>
<t tx="edream.110203161858.658">if self.limitCount &gt; 0 and mismatches &gt;= self.limitCount:
	
	if printTrailing:
		self.show("")
		self.show("limit count reached")
		self.show("")
		printTrailing = false</t>
<t tx="edream.110203161858.659">if n1 &gt; 0: 
	lines1 += self.dumpToEndOfFile("1.",f1,s1,lines1,printTrailing)
	
if n2 &gt; 0:
	lines2 += self.dumpToEndOfFile("2.",f2,s2,lines2,printTrailing)

self.show("")
self.show("lines1:" + `lines1`)
self.show("lines2:" + `lines2`)
self.show("mismatches:" + `mismatches`)</t>
<t tx="edream.110203161858.660">def filecmp (self,f1,f2):

	val = filecmp.cmp(f1,f2)
	if 1:
		if val: self.show("equal")
		else:   self.show("*** not equal")
	else:
		self.show("filecmp.cmp returns:")
		if val: self.show(`val` + " (equal)")
		else:   self.show(`val` + " (not equal)")
	return val</t>
<t tx="edream.110203161858.661"></t>
<t tx="edream.110203161858.662">def doOpen (self,name):

	try:
		f = open(name,'r')
		return f
	except:
		self.show("can not open:" + '"' + name + '"')
		return None</t>
<t tx="edream.110203161858.663">def dump (self,tag,s):

	cmp = self ; out = tag

	for ch in s[:-1]: # don't print the newline
	
		if cmp.makeWhitespaceVisible:
			if ch == '\t':
				out += "[" ; out += "t" ; out += "]"
			elif ch == ' ':
				out += "[" ; out += " " ; out += "]"
			else: out += ch
		else:
			if 1:
				out += ch
			else: # I don't know why I thought this was a good idea ;-)
				if ch == '\t' or ch == ' ':
					out += ' '
				else:
					out += ch

	self.show(out)</t>
<t tx="edream.110203161858.664">def dumpToEndOfFile (self,tag,f,s,line,printTrailing):

	trailingLines = 0
	while 1:
		if not s:
			s = readlineForceUnixNewline(f)
		if len(s) == 0: break
		trailingLines += 1
		if self.printTrailingMismatches and printTrailing:
			tag2 = string.rjust(tag + `line`,6) + "+:"
			self.dump(tag2,s)
		s = None

	self.show(tag + `trailingLines` + " trailing lines")
	return trailingLines</t>
<t tx="edream.110203161858.665">@ These methods are based on atFile.scanHeader().  They are simpler because we only care about the starting sentinel comment: any line starting with the starting sentinel comment is presumed to be a sentinel line.
@c

def isLeoHeader (self,s):

	tag = "@+leo"
	j = string.find(s,tag)
	if j &gt; 0:
		i = skip_ws(s,0)
		if i &lt; j: return s[i:j]
		else: return None
	else: return None
		
def isSentinel (self,s,sentinelComment):

	i = skip_ws(s,0)
	return match(s,i,sentinelComment)</t>
<t tx="edream.110203161858.666">def openOutputFile (self):
	
	if self.outputFileName == None:
		return
	dir,name = os.path.split(self.outputFileName)
	if len(dir) == 0:
		self.show("empty output directory")
		return
	if len(name) == 0:
		self.show("empty output file name")
		return
	if not os.path.exists(dir):
		self.show("output directory not found: " + dir)
	else:
		try:
			if self.appendOutput:
				self.show("appending to " + self.outputFileName)
				self.outputFile = open(self.outputFileName,"ab")
			else:
				self.show("writing to " + self.outputFileName)
				self.outputFile = open(self.outputFileName,"wb")
		except:
			self.outputFile = None
			self.show("exception opening output file")
			es_exception()</t>
<t tx="edream.110203161858.667">def show (self,s):
	
	# print s
	if self.outputFile:
		self.outputFile.write(s + '\n')
	elif self.commands:
		es(s)
	else:
		print s
		print</t>
<t tx="edream.110203161858.668">def showIvars (self):
	
	self.show("fileName1:"        + `self.fileName1`)
	self.show("fileName2:"        + `self.fileName2`)
	self.show("outputFileName:"   + `self.outputFileName`)
	self.show("limitToExtension:" + `self.limitToExtension`)
	self.show("")

	self.show("ignoreBlankLines:"         + `self.ignoreBlankLines`)
	self.show("ignoreFirstLine1:"         + `self.ignoreFirstLine1`)
	self.show("ignoreFirstLine2:"         + `self.ignoreFirstLine2`)
	self.show("ignoreInteriorWhitespace:" + `self.ignoreInteriorWhitespace`)
	self.show("ignoreLeadingWhitespace:"  + `self.ignoreLeadingWhitespace`)
	self.show("ignoreSentinelLines:"      + `self.ignoreSentinelLines`)
	self.show("")
	
	self.show("limitCount:"              + `self.limitCount`)
	self.show("printMatches:"            + `self.printMatches`)
	self.show("printMismatches:"         + `self.printMismatches`)
	self.show("printTrailingMismatches:" + `self.printTrailingMismatches`)</t>
<t tx="edream.110203161858.669">class baseLeoComparePanel:
	"""The base class for Leo's compare panel."""
	@others
	
class leoComparePanel (baseLeoComparePanel):
	"""A class that creates Leo's compare panel."""
	pass
</t>
<t tx="edream.110203161858.670">def browser (self,n):
	
	types = [
		("C/C++ files","*.c"),
		("C/C++ files","*.cpp"),
		("C/C++ files","*.h"),
		("C/C++ files","*.hpp"),
		("Java files","*.java"),
		("Pascal files","*.pas"),
		("Python files","*.py"),
		("Text files","*.txt"),
		("All files","*") ]

	fileName = tkFileDialog.askopenfilename(
		title="Choose compare file" + n,
		filetypes=types,
		defaultextension=".txt")
		
	if fileName and len(fileName) &gt; 0:
		# The dialog also warns about this, so this may never happen.
		if not os.path.exists(fileName):
			self.show("not found: " + fileName)
			fileName = None
	else: fileName = None
		
	return fileName</t>
<t tx="edream.110203161858.671">def __init__ (self,c,cmp):

	Tk = Tkinter
	self.commands = c
	self.cmp = cmp
	
	# Ivars pointing to Tk elements.
	self.browseEntries = []
	self.extensionEntry = None
	self.countEntry = None
	self.printButtons = []
	
	# No corresponding cmp ivar.
	self.useOutputFileVar = Tk.IntVar()
	
	# These all correspond to ivars in leoCompare.
	self.appendOutputVar             = Tk.IntVar()

	self.ignoreBlankLinesVar         = Tk.IntVar()
	self.ignoreFirstLine1Var         = Tk.IntVar()
	self.ignoreFirstLine2Var         = Tk.IntVar()
	self.ignoreInteriorWhitespaceVar = Tk.IntVar()
	self.ignoreLeadingWhitespaceVar  = Tk.IntVar()
	self.ignoreSentinelLinesVar      = Tk.IntVar()

	self.limitToExtensionVar         = Tk.IntVar()
	self.makeWhitespaceVisibleVar    = Tk.IntVar()
	
	self.printBothMatchesVar         = Tk.IntVar()
	self.printMatchesVar             = Tk.IntVar()
	self.printMismatchesVar          = Tk.IntVar()
	self.printTrailingMismatchesVar  = Tk.IntVar()
	self.stopAfterMismatchVar        = Tk.IntVar()
	
	# These ivars are set from Entry widgets.
	self.limitCount = 0
	self.limitToExtension = None 
	if 0: # we just use the cmp ivars.
		self.pathName1 = None
		self.pathName2 = None
		self.outputFileName = None
	
	# The default file name in the "output file name" browsers.
	self.defaultOutputFileName = "CompareResults.txt"</t>
<t tx="edream.110203161858.672"># Initialize ivars from config parameters.

def finishCreate (self):

	config = app().config
	
	# File names.
	for i,option in (
		(0,"compare_file_1"),
		(1,"compare_file_2"),
		(2,"output_file") ):
			
		name = config.getComparePref(option)
		if name and len(name) &gt; 0:
			e = self.browseEntries[i]
			e.delete(0,"end")
			e.insert(0,name)
			
	name = config.getComparePref("output_file")
	b = choose(name and len(name) &gt; 0,1,0)
	self.useOutputFileVar.set(b)

	# File options.
	b = config.getBoolComparePref("ignore_first_line_of_file_1")
	if b == None: b = 0
	self.ignoreFirstLine1Var.set(b)
	
	b = config.getBoolComparePref("ignore_first_line_of_file_2")
	if b == None: b = 0
	self.ignoreFirstLine2Var.set(b)
	
	b = config.getBoolComparePref("append_output_to_output_file")
	if b == None: b = 0
	self.appendOutputVar.set(b)

	ext = config.getComparePref("limit_directory_search_extension")
	b = ext and len(ext) &gt; 0
	b = choose(b and b != 0,1,0)
	self.limitToExtensionVar.set(b)
	if b:
		e = self.extensionEntry
		e.delete(0,"end")
		e.insert(0,ext)
		
	# Print options.
	b = config.getBoolComparePref("print_both_lines_for_matches")
	if b == None: b = 0
	self.printBothMatchesVar.set(b)
	
	b = config.getBoolComparePref("print_matching_lines")
	if b == None: b = 0
	self.printMatchesVar.set(b)
	
	b = config.getBoolComparePref("print_mismatching_lines")
	if b == None: b = 0
	self.printMismatchesVar.set(b)
	
	b = config.getBoolComparePref("print_trailing_lines")
	if b == None: b = 0
	self.printTrailingMismatchesVar.set(b)
	
	n = config.getIntComparePref("limit_count")
	b = n and n &gt; 0
	b = choose(b and b != 0,1,0)
	self.stopAfterMismatchVar.set(b)
	if b:
		e = self.countEntry
		e.delete(0,"end")
		e.insert(0,`n`)

	# Whitespace options.
	b = config.getBoolComparePref("ignore_blank_lines")
	if b == None: b = 1 # unusual default.
	self.ignoreBlankLinesVar.set(b)
	
	b = config.getBoolComparePref("ignore_interior_whitespace")
	if b == None: b = 0
	self.ignoreInteriorWhitespaceVar.set(b)
	
	b = config.getBoolComparePref("ignore_leading_whitespace")
	if b == None: b = 0
	self.ignoreLeadingWhitespaceVar.set(b)
	
	b = config.getBoolComparePref("ignore_sentinel_lines")
	if b == None: b = 0
	self.ignoreSentinelLinesVar.set(b)
	
	b = config.getBoolComparePref("make_whitespace_visible")
	if b == None: b = 0
	self.makeWhitespaceVisibleVar.set(b)</t>
<t tx="edream.110203161858.673">def run (self):

	import leoApp, leoCommands

	c = self.commands ; cmp = self.cmp ; Tk = Tkinter
	self.top = top = Tk.Toplevel(app().root)
	top.title("Leo Compare files and directories")
	top.protocol("WM_DELETE_WINDOW", self.onClose)
	&lt;&lt; create the organizer frames &gt;&gt;
	&lt;&lt; create the browser rows &gt;&gt;
	&lt;&lt; create the extension row &gt;&gt;
	&lt;&lt; create the whitespace options frame &gt;&gt;
	&lt;&lt; create the print options frame &gt;&gt;
	&lt;&lt; create the compare buttons &gt;&gt;
	center_dialog(top) # Do this _after_ building the dialog!
	top.resizable(0,0)
	self.finishCreate()</t>
<t tx="edream.110203161858.674">outer = Tk.Frame(top, bd=2,relief="groove")
outer.pack(pady=4)

row1 = Tk.Frame(outer)
row1.pack(pady=4)

row2 = Tk.Frame(outer)
row2.pack(pady=4)

row3 = Tk.Frame(outer)
row3.pack(pady=4)

row4 = Tk.Frame(outer)
row4.pack(pady=4,expand=1,fill="x") # for left justification.

options = Tk.Frame(outer)
options.pack(pady=4)

ws = Tk.Frame(options)
ws.pack(side="left",padx=4)

pr = Tk.Frame(options)
pr.pack(side="right",padx=4)

lower = Tk.Frame(outer)
lower.pack(pady=6)</t>
<t tx="edream.110203161858.675">for row,text,text2,command,var in (
	(row1,"Compare path 1:","Ignore first line",self.onBrowse1,self.ignoreFirstLine1Var),
	(row2,"Compare path 2:","Ignore first line",self.onBrowse2,self.ignoreFirstLine2Var),
	(row3,"Output file:",   "Use output file",  self.onBrowse3,self.useOutputFileVar) ):

	lab = Tk.Label(row,anchor="e",text=text,width=13)
	lab.pack(side="left",padx=4)
	
	e = Tk.Entry(row)
	e.pack(side="left",padx=2)
	self.browseEntries.append(e)
	
	b = Tk.Button(row,text="browse...",command=command)
	b.pack(side="left",padx=6)

	b = Tk.Checkbutton(row,text=text2,anchor="w",variable=var,width=15)
	b.pack(side="left")</t>
<t tx="edream.110203161858.676">b = Tk.Checkbutton(row4,anchor="w",var=self.limitToExtensionVar,
	text="Limit directory compares to type:")
b.pack(side="left",padx=4)

self.extensionEntry = e = Tk.Entry(row4,width=6)
e.pack(side="left",padx=2)

b = Tk.Checkbutton(row4,anchor="w",var=self.appendOutputVar,
	text="Append output to output file")
b.pack(side="left",padx=4)</t>
<t tx="edream.110203161858.677">w,f = create_labeled_frame(ws,caption="Whitespace options",relief="groove")
	
for text,var in (
	("Ignore Leo sentinel lines", self.ignoreSentinelLinesVar),
	("Ignore blank lines",        self.ignoreBlankLinesVar),
	("Ignore leading whitespace", self.ignoreLeadingWhitespaceVar),
	("Ignore interior whitespace",self.ignoreInteriorWhitespaceVar),
	("Make whitespace visible",   self.makeWhitespaceVisibleVar) ):
	
	b = Tk.Checkbutton(f,text=text,variable=var)
	b.pack(side="top",anchor="w")
	
spacer = Tk.Frame(f)
spacer.pack(padx="1i")</t>
<t tx="edream.110203161858.678">w,f = create_labeled_frame(pr,caption="Print options",relief="groove")

row = Tk.Frame(f)
row.pack(expand=1,fill="x")

b = Tk.Checkbutton(row,text="Stop after",variable=self.stopAfterMismatchVar)
b.pack(side="left",anchor="w")

self.countEntry = e = Tk.Entry(row,width=4)
e.pack(side="left",padx=2)
e.insert(01,"1")

lab = Tk.Label(row,text="mismatches")
lab.pack(side="left",padx=2)

for padx,text,var in (    
	(0,  "Print matched lines",           self.printMatchesVar),
	(20, "Show both matching lines",      self.printBothMatchesVar),
	(0,  "Print mismatched lines",        self.printMismatchesVar),
	(0,  "Print unmatched trailing lines",self.printTrailingMismatchesVar) ):
	
	b = Tk.Checkbutton(f,text=text,variable=var)
	b.pack(side="top",anchor="w",padx=padx)
	self.printButtons.append(b)
	
# To enable or disable the "Print both matching lines" button.
b = self.printButtons[0]
b.configure(command=self.onPrintMatchedLines)

spacer = Tk.Frame(f)
spacer.pack(padx="1i")</t>
<t tx="edream.110203161858.679">for text,command in (
	("Compare files",      self.onCompareFiles),
	("Compare directories",self.onCompareDirectories) ):
	
	b = Tk.Button(lower,text=text,command=command,width=18)
	b.pack(side="left",padx=6)</t>
<t tx="edream.110203161858.680">def show (self,s):
	
	self.cmp.show(s)</t>
<t tx="edream.110203161858.681">def setIvarsFromWidgets (self):

	cmp = self.cmp
	
	# File paths. cmp checks for valid file name.
	e = self.browseEntries[0]
	cmp.fileName1 = e.get()
	
	e = self.browseEntries[1]
	cmp.fileName2 = e.get()

	# Ignore first line settings.
	cmp.ignoreFirstLine1 = self.ignoreFirstLine1Var.get()
	cmp.ignoreFirstLine2 = self.ignoreFirstLine2Var.get()
	
	# Output file.  cmp checks for valid file name.
	if self.useOutputFileVar.get():
		e = self.browseEntries[2]
		name = e.get()
		if name != None and len(name) == 0:
			name = None
		cmp.outputFileName = name
	else:
		cmp.outputFileName = None

	# Extension settings.
	if self.limitToExtensionVar.get():
		cmp.limitToExtension = self.extensionEntry.get()
		if len(cmp.limitToExtension) == 0:
			cmp.limitToExtension = None
	else:
		cmp.limitToExtension = None
		
	cmp.appendOutput = self.appendOutputVar.get()
	
	# Whitespace options.
	cmp.ignoreBlankLines         = self.ignoreBlankLinesVar.get()
	cmp.ignoreInteriorWhitespace = self.ignoreInteriorWhitespaceVar.get()
	cmp.ignoreLeadingWhitespace  = self.ignoreLeadingWhitespaceVar.get()
	cmp.ignoreSentinelLines      = self.ignoreSentinelLinesVar.get()
	cmp.makeWhitespaceVisible    = self.makeWhitespaceVisibleVar.get()
	
	# Print options.
	cmp.printMatches            = self.printMatchesVar.get()
	cmp.printMismatches         = self.printMismatchesVar.get()
	cmp.printTrailingMismatches = self.printTrailingMismatchesVar.get()
	
	if cmp.printMatches:
		cmp.printBothMatches = self.printBothMatchesVar.get()
	else:
		cmp.printBothMatches = false
	
	if self.stopAfterMismatchVar.get():
		try:
			count = self.countEntry.get()
			cmp.limitCount = int(count)
		except: cmp.limitCount = 0
	else:
		cmp.limitCount = 0</t>
<t tx="edream.110203161858.682"></t>
<t tx="edream.110203161858.683">def onBrowse1 (self):
	
	fileName = self.browser("1")
	if fileName:
		e = self.browseEntries[0]
		e.delete(0,"end")
		e.insert(0,fileName)
	self.top.deiconify()
	
def onBrowse2 (self):
	
	fileName = self.browser("2")
	if fileName:
		e = self.browseEntries[1]
		e.delete(0,"end")
		e.insert(0,fileName)
	self.top.deiconify()
	
def onBrowse3 (self): # Get the name of the output file.

	fileName = tkFileDialog.asksaveasfilename(
		initialfile = self.defaultOutputFileName,
		title="Set output file",
		filetypes=[("Text files", "*.txt")],
		defaultextension=".txt")
		
	if fileName and len(fileName) &gt; 0:
		self.defaultOutputFileName = fileName
		self.useOutputFileVar.set(1) # The user will expect this.
		e = self.browseEntries[2]
		e.delete(0,"end")
		e.insert(0,fileName)</t>
<t tx="edream.110203161858.684">def onClose (self):
	
	self.top.withdraw()</t>
<t tx="edream.110203161858.685">def onCompareDirectories (self):

	cmp = self.cmp
	self.setIvarsFromWidgets()
	cmp.compare_directories(cmp.fileName1,cmp.fileName2)

def onCompareFiles (self):

	cmp = self.cmp
	self.setIvarsFromWidgets()
	cmp.compare_files(cmp.fileName1,cmp.fileName2)</t>
<t tx="edream.110203161858.686">def onPrintMatchedLines (self):
	
	v = self.printMatchesVar.get()
	b = self.printButtons[1]
	state = choose(v,"normal","disabled")
	b.configure(state=state)</t>
<t tx="edream.110203161858.687">@language python

from leoGlobals import *
import leoFind
import ConfigParser,exceptions,os,string,sys,tkFont

class baseConfig:
	"""The base class for Leo's configuration handler."""
	&lt;&lt; define defaultsDict &gt;&gt;
	@others
	
class config (baseConfig):
	"""A class to manage configuration settings."""
	pass</t>
<t tx="edream.110203161858.688">@ This contains only the "interesting" defaults.
Ints and bools default to 0, floats to 0.0 and strings to "".
@c

defaultBodyFontSize = choose(sys.platform=="win32",9,12)

defaultsDict = {
	# compare options...
	"ignore_blank_lines" : 1,
	"limit_count" : 9,
	"print_mismatching_lines" : 1,
	"print_trailing_lines" : 1,
	# find/change options...
	"search_body" : 1,
	"whole_word" : 1,
	# Prefs panel.
	"default_target_language" : "Python",
	"tab_width" : 4,
	"page_width" : 132,
	"output_doc_chunks" : 1,
	"tangle_outputs_header" : 1,
	# Syntax coloring options...
	# Defaults for colors are handled by leoColor.py.
	"color_directives_in_plain_text" : 1,
	"underline_undefined_section_names" : 1,
	# Window options...
	"body_pane_wraps" : 1,
	"body_text_font_family" : "Courier",
	"body_text_font_size" : defaultBodyFontSize,
	"body_text_font_slant" : "roman",
	"body_text_font_weight" : "normal",
	"headline_text_font_size" : 12,
	"headline_text_font_slant" : "roman",
	"headline_text_font_weight" : "normal",
	"log_text_font_size" : 12,
	"log_text_font_slant" : "roman",
	"log_text_font_weight" : "normal",
	"initial_window_height" : 600, # 7/24/03: In pixels.
	"initial_window_width" :  800, # 7/24/03: In pixels.
	"initial_window_left" : 10,
	"initial_window_top" : 10,
	"initial_splitter_orientation" : "vertical",
	"initial_vertical_ratio" : 0.5,
	"initial_horizontal_ratio" : 0.3,
	"initial_horizontal_secondary_ratio" : 0.5,
	"initial_vertical_secondary_ratio" : 0.7,
	"outline_pane_scrolls_horizontally" : 0,
	"split_bar_color" : "LightSteelBlue2",
	"split_bar_relief" : "groove",
	"split_bar_width" : 7 }</t>
<t tx="edream.110203161858.689">def __init__ (self):
	
	&lt;&lt; get the default font &gt;&gt;
	self.init()

def init (self):

	try:
		self.configDir = sys.leo_config_directory
	except:
		self.configDir = os.path.join(app().loadDir,"..","config")
	self.configFileName = os.path.join(self.configDir,"leoConfig.txt")
	self.configsExist = false # True when we successfully open leoConfig.txt.
	
	&lt;&lt; initialize constant ivars, lists &amp; dicts &gt;&gt;
	&lt;&lt; initialize ivars that may be set by config options &gt;&gt;

	self.open() # read and process the configuration file.</t>
<t tx="edream.110203161858.690"># Get the default font from a new text widget.
# This should only be done once.

t = Tkinter.Text()
fn = t.cget("font")
font = tkFont.Font(font=fn)
self.defaultFont = font
self.defaultFontFamily = font.cget("family")
</t>
<t tx="edream.110203161858.691"># Names of sections.
self.configSection = "config options"
self.compareSection = "compare options"
self.findSection = "find/change options"
self.keysSection = "keyboard shortcuts"
self.prefsSection = "prefs panel options"
self.recentFilesSection = "recent files"
self.colorsSection = "syntax coloring options"
self.windowSection = "window options"

# List of recent files.
self.recentFiles = []

# Section dictionaries
self.compareDict = {}
self.configDict = {} # 10/11/02: we use a dict even for ivars.
self.findDict = {}
self.keysDict = {}
self.prefsDict = {}
self.colorsDict = {}
self.windowDict = {}

# Associations of sections and dictionaries.
self.sectionInfo = (
	(self.configSection,self.configDict),
	(self.compareSection,self.compareDict),
	(self.findSection,self.findDict),
	(self.keysSection,self.keysDict),
	(self.prefsSection,self.prefsDict),
	(self.recentFilesSection,None),
	(self.colorsSection,self.colorsDict),
	(self.windowSection,self.windowDict) )</t>
<t tx="edream.110203161858.692"># 10/11/02: Defaults are specified only here.

self.config = None # The current instance of ConfigParser
self.at_root_bodies_start_in_doc_mode = true # For compatibility with previous versions.
self.output_initial_comment = "" # "" or None for compatibility with previous versions.
self.output_newline = "nl"
self.create_nonexistent_directories = false
self.default_derived_file_encoding = "utf-8"
self.load_derived_files_immediately = 0
self.new_leo_file_encoding = "UTF-8" # Upper case for compatibility with previous versions.
self.read_only = true # Make sure we don't alter an illegal leoConfig.txt file!
self.relative_path_base_directory = "!"
self.remove_sentinels_extension = ".txt"
self.save_clears_undo_buffer = false
self.stylesheet = None
self.thin_at_file_trees = 0
self.tkEncoding = None # Defaults to None so it doesn't override better defaults.
self.use_plugins = false # Should never be true here!
self.write_old_format_derived_files = false</t>
<t tx="edream.110203161858.693"></t>
<t tx="edream.110203161858.694">def getBoolFromDict (self,name,dict):
	val = self.getIntFromDict(name,dict)
	if val and val != None and val != 0: val = 1
	return val

def getFloatFromDict (self,name,dict):
	val = self.getFromDict(name,dict)
	if val:
		try: val = float(val)
		except: val = None
	return val

def getFromDict (self,name,dict):
	val = dict.get(name)
	if val == "ignore":
		val = None
	elif val == None:
		val = self.defaultsDict.get(name)
	return val

def getIntFromDict (self,name,dict):
	val = self.getFromDict(name,dict)
	if val:
		try: val = int(val)
		except: val = None
	return val

def setDict (self,name,val,dict):
	dict [name] = val
		
getStringFromDict = getFromDict
</t>
<t tx="edream.110203161858.695">def getBoolColorsPref (self,name):
	return self.getBoolFromDict(name,self.colorsDict)
	
# Basic getters and setters.

def getColorsPref (self,name):
	return self.getFromDict(name,self.colorsDict)

def setColorsPref (self,name,val):
	self.setDict(name,val,self.colorsDict)
	
getStringColorsPref = getColorsPref</t>
<t tx="edream.110203161858.696">def getBoolComparePref (self,name):
	return self.getBoolFromDict(name,self.compareDict)
	
def getIntComparePref (self,name):
	return self.getIntFromDict(name,self.compareDict)

# Basic getters and setters.

def getComparePref (self,name):
	return self.getFromDict(name,self.compareDict)

def setComparePref (self,name,val):
	self.setDict(name,val,self.compareDict)
	
getStringComparePref = getComparePref</t>
<t tx="edream.110203161858.697">def getBoolFindPref (self,name):
	return self.getBoolFromDict(name,self.findDict)

# Basic getters and setters.

def getFindPref (self,name):
	return self.getFromDict(name,self.findDict)

def setFindPref (self,name,val):
	self.setDict(name,val,self.findDict)
	
getStringFindPref = getFindPref</t>
<t tx="edream.110203161858.698">def getBoolPref (self,name):
	return self.getBoolFromDict(name,self.prefsDict)

def getIntPref (self,name):
	return self.getIntFromDict(name,self.prefsDict)
	
# Basic getters and setters.

def getPref (self,name):
	return self.getFromDict(name,self.prefsDict)

def setPref (self,name,val):
	self.setDict(name,val,self.prefsDict)
	
getStringPref = getPref</t>
<t tx="edream.110203161858.699">def getRecentFiles (self):
	
	return self.recentFiles

def setRecentFiles (self,files):
	
	self.recentFiles = files
</t>
<t tx="edream.110203161858.700">def getBoolWindowPref (self,name):
	return self.getBoolFromDict(name,self.windowDict)
	
def getFloatWindowPref (self,name):
	return self.getFloatFromDict(name,self.windowDict)
	
def getIntWindowPref (self,name):
	return self.getIntFromDict(name,self.windowDict)
	
# Basic getters and setters.

def getWindowPref (self,name):
	return self.getFromDict(name,self.windowDict)

def setWindowPref (self,name,val):
	self.setDict(name,val,self.windowDict)
	
getStringWindowPref = getWindowPref</t>
<t tx="edream.110203161858.701">@ A convenience method that computes a font from font parameters.
Arguments are the names of settings to be use.
We return None if there is no family setting so we can use system default fonts.
We default to size=12, slant="roman", weight="normal"
@c

def getFontFromParams(self,family,size,slant,weight):
	
	tag = "getFont..." ; family_name = family

	family = self.getWindowPref(family)
	if not family or family == "":
		# print tag,"using default"
		family = self.defaultFontFamily
		
	size = self.getIntWindowPref(size)
	if not size or size == 0: size = 12
	
	slant = self.getWindowPref(slant)
	if not slant or slant == "": slant = "roman"
	
	weight = self.getWindowPref(weight)
	if not weight or weight == "": weight = "normal"
	
	try:
		font = tkFont.Font(family=family,size=size,slant=slant,weight=weight)
	except:
		es("exception setting font from " + `family_name`)
		es("family,size,slant,weight:"+
			`family`+':'+`size`+':'+`slant`+':'+`weight`)
		es_exception()
		return self.defaultFont
	#print family_name,family,size,slant,weight
	#print "actual_name:",font.cget("family")
	return font</t>
<t tx="edream.110203161858.702">def getShortcut (self,name):
	
	val = self.keysDict.get(name)
	
	# 7/19/03: Return "None" if the setting is "None"
	# This allows settings to disable a default shortcut.
	return val</t>
<t tx="edream.110203161858.703">def initConfigParam (self,name,defaultVal):
	try:
		val = self.config.get(self.configSection,name,raw=1) # 2/4/03
	except:
		val = defaultVal
	return val

def initBooleanConfigParam (self,name,defaultVal):
	try:
		val = self.config.getboolean(self.configSection,name)
	except:
		val = defaultVal
	return val
</t>
<t tx="edream.110203161858.704"># Sets ivars of c that can be overridden by leoConfig.txt

def setCommandsFindIvars (self,c):

	config = self ; findFrame = app().findFrame

	# N.B.: separate c.ivars are much more convenient than a dict.
	for s in findFrame.intKeys:
		val = config.getBoolFindPref(s)
		if val: 
			setattr(c,s+"_flag",val)
			# trace(s+"_flag",val)
			
	val = config.getStringFindPref("change_string")
	if val: c.change_text = val
	
	val = config.getStringFindPref("find_string")
	if val: c.find_text = val

	app().findFrame.init(c)</t>
<t tx="edream.110203161858.705"># Sets ivars of c that can be overridden by leoConfig.txt

def setCommandsIvars (self,c):

	config = self ; a = app()
	&lt;&lt; set prefs ivars &gt;&gt;</t>
<t tx="edream.110203161858.706">val = config.getIntPref("tab_width")
if val:
	c.tab_width = val
	if 0: # 9/20/02: don't actually redraw.
		c.frame.setTabWidth(c.tab_width)

val = config.getIntPref("page_width")
if val: c.page_width = val

val = config.getIntPref("run_tangle_done.py")
if val: c.tangle_batch_flag = val

val = config.getIntPref("run_untangle_done.py")
if val: c.untangle_batch_flag = val

val = config.getIntPref("output_doc_chunks")
if val: c.output_doc_flag = val

val = config.getIntPref("tangle_outputs_header")
if val: c.use_header_flag = val

val = config.getPref("default_tangle_directory")
if val: c.tangle_directory = val

val = config.getPref("find_string")
if val: c.tangle_directory = val

c.target_language = "python" # default
val = config.getPref("default_target_language")
if val:
	try:
		val = string.lower(val)
		val = string.replace(val,"/","")
		if a.language_delims_dict.get(val):
			c.target_language = val
		
	except: pass</t>
<t tx="edream.110203161858.707"># Sets config ivars from c.

def setConfigFindIvars (self,c):
	
	findFrame = app().findFrame

	# N.B.: separate c.ivars are much more convenient than a dict.
	for s in findFrame.intKeys:
		val = getattr(c,s+"_flag")
		# trace(val,s+"_flag")
		self.setFindPref(s,val)
	
	self.setFindPref("change_string",c.change_text)
	self.setFindPref("find_string",c.find_text)</t>
<t tx="edream.110203161858.708"># Sets config ivars from c.

def setConfigIvars (self,c):
	
	a = app()
	
	
	if c.target_language and a.language_delims_dict.get(c.target_language):
		language = c.target_language
	else:
		language = "plain"
	self.setPref("default_tangle_directory",c.tangle_directory)
	self.setPref("default_target_language",language)
	self.setPref("output_doc_chunks",`c.output_doc_flag`)
	self.setPref("page_width",`c.page_width`)
	self.setPref("run_tangle_done.py",`c.tangle_batch_flag`)
	self.setPref("run_untangle_done.py",`c.untangle_batch_flag`)
	self.setPref("tab_width",`c.tab_width`)
	self.setPref("tangle_outputs_header",`c.use_header_flag`)
	
	self.setFindPref("batch",`c.batch_flag`)
	self.setFindPref("ignore_case",`c.ignore_case_flag`)
	self.setFindPref("mark_changes",`c.mark_changes_flag`)
	self.setFindPref("mark_finds",`c.mark_finds_flag`)
	self.setFindPref("pattern_match",`c.pattern_match_flag`)
	self.setFindPref("reverse",`c.reverse_flag`)
	self.setFindPref("search_body",`c.search_body_flag`)
	self.setFindPref("search_headline",`c.search_headline_flag`)
	self.setFindPref("suboutline_only",`c.suboutline_only_flag`)
	self.setFindPref("wrap",`c.wrap_flag`)
	self.setFindPref("whole_word",`c.whole_word_flag`)
	
	self.setFindPref("change_string",c.change_text)
	self.setFindPref("find_string",c.find_text)</t>
<t tx="edream.110203161858.709">def open (self):
	
	config = ConfigParser.ConfigParser()
	self.config = config
	try:
		cf = open(self.configFileName)
		config.readfp(cf)
		&lt;&lt; get config options &gt;&gt;
		&lt;&lt; get recent files &gt;&gt;
		for section, dict in self.sectionInfo:
			if dict != None:
				try:
					for opt in config.options(section):
						dict[string.lower(opt)]=config.get(section,opt,raw=1) # 2/4/03
				except: pass
		&lt;&lt; convert find/change options to unicode &gt;&gt;
		&lt;&lt; print options &gt;&gt;
		cf.close()
		self.configsExist = true
	except IOError:
		pass
	except:
		es("Exception opening " + self.configFileName)
		es_exception()
		pass
	self.config = None</t>
<t tx="edream.110203161858.710">@ Rewritten 10/11/02 as follows:

1. We call initConfigParam and initBooleanConfigParam to get the values.

The general purpose code will enter all these values into configDict.  This allows update() to write the configuration section without special case code.  configDict is not accessible by the user.  Rather, for greater speed the user access these values via the ivars of this class.

2. We pass the ivars themselves as params so that default initialization is done in the ctor, as would normally be expected.
@c

self.at_root_bodies_start_in_doc_mode = self.initBooleanConfigParam(
	"at_root_bodies_start_in_doc_mode",self.at_root_bodies_start_in_doc_mode)
	
self.create_nonexistent_directories = self.initBooleanConfigParam(
	"create_nonexistent_directories",self.create_nonexistent_directories)
	
encoding = self.initConfigParam(
	"default_derived_file_encoding",self.default_derived_file_encoding)

if isValidEncoding(encoding):
	self.default_derived_file_encoding = encoding
else:
	es("bad default_derived_file_encoding: " + encoding)
	
self.load_derived_files_immediately = self.initBooleanConfigParam(
	"load_derived_files_immediately",self.load_derived_files_immediately)
	
encoding = self.initConfigParam(
	"new_leo_file_encoding",
	self.new_leo_file_encoding)

if isValidEncoding(encoding):
	self.new_leo_file_encoding = encoding
else:
	es("bad new_leo_file_encoding: " + encoding)

self.output_initial_comment = self.initConfigParam(
	"output_initial_comment",self.output_initial_comment)

self.output_newline = self.initConfigParam(
	"output_newline",self.output_newline)

self.read_only = self.initBooleanConfigParam(
	"read_only",self.read_only)

self.relative_path_base_directory = self.initConfigParam(
	"relative_path_base_directory",self.relative_path_base_directory)
	
self.remove_sentinels_extension = self.initConfigParam(
	"remove_sentinels_extension",self.remove_sentinels_extension)

self.save_clears_undo_buffer = self.initBooleanConfigParam(
	"save_clears_undo_buffer",self.save_clears_undo_buffer)
	
self.stylesheet = self.initConfigParam(
	"stylesheet",self.stylesheet)
	
self.thin_at_file_trees = self.initBooleanConfigParam(
	"thin_at_file_trees",self.thin_at_file_trees)
	
encoding = self.initConfigParam(
	"tk_encoding",self.tkEncoding)
	
if encoding and len(encoding) &gt; 0: # May be None.
	if isValidEncoding(encoding):
		self.tkEncoding = encoding
	else:
		es("bad tk_encoding: " + encoding)
	
self.use_plugins = self.initBooleanConfigParam(
	"use_plugins",self.use_plugins)
	
self.write_old_format_derived_files = self.initBooleanConfigParam(
	"write_old_format_derived_files",self.write_old_format_derived_files)</t>
<t tx="edream.110203161858.711">section = self.recentFilesSection

if 0: # elegant, but may be a security hole.
	self.recentFiles = eval(config.get(section,"recentFiles",raw=1)) # 2/4/03
else: # easier to read in the config file.
	try:
		for i in xrange(10):
			self.recentFiles.append(config.get(section,"file" + `i`,raw=1)) # 2/4/03
	except: pass</t>
<t tx="edream.110203161858.712">find = self.findDict.get("find_string")
if find:
	# Leo always writes utf-8 encoding, but users may not.
	find = toUnicode(find,"utf-8")
	self.findDict["find_string"] = find

change = self.findDict.get("change_string")
if change:
	# Leo always writes utf-8 encoding, but users may not.
	change = toUnicode(change,"utf-8")
	self.findDict["change_string"] = change
</t>
<t tx="edream.110203161858.713">if 0:
	print "\n\ncolorsDict:\n" ,self.colorsDict
	print "\n\ncompareDict:\n",self.compareDict
	print "\n\nfindDict:\n"   ,self.findDict
	print "\n\nprefsDict:\n"  ,self.prefsDict
	print "\n\nwindowDict:\n" ,self.windowDict
if 0:
	print "\n\nkeysDict:\n\n"
	for i in self.keysDict.items():
		print i
if 0:
	print "\n\nwindowDict:\n\n"
	for i in self.windowDict.keys():
		print i</t>
<t tx="edream.110203161858.714"># Rewrites the entire config file from ivars.
# This is called when a .leo file is written and when the preferences panel changes.

def update (self):
	
	# Do nothing if the file does not exist, or if read_only.
	if self.read_only:
		# print "Read only config file"
		return
	if not os.path.exists(self.configFileName):
		# print "No config file"
		return
	
	config = ConfigParser.ConfigParser()
	self.config = config
	try:
		# 9/1/02: apparently Linux requires w+ and XP requires w.
		mode = choose(sys.platform=="win32","wb","wb+")
		cf = open(self.configFileName,mode)
		config.readfp(cf)
		&lt;&lt; write recent files section &gt;&gt;
		for section,dict in self.sectionInfo:
			if dict:
				self.update_section(config,section,dict)
		config.write(cf)
		cf.flush()
		cf.close()
	except:
		es("exception writing: " + self.configFileName)
		es_exception()
	self.config = None</t>
<t tx="edream.110203161858.715">section = self.recentFilesSection
files = self.recentFiles

if config.has_section(section):
	config.remove_section(section)
config.add_section(section)

if 0: # elegant, but may be a security hole.
	config.set(section,"recentFiles",files)
else: # easier to read in the config file.
	for i in xrange(len(files)):
		config.set(section, "file"+`i`, files[i])</t>
<t tx="edream.110203161858.716">def update_section (self,config,section,dict):
	
	if config.has_section(section):
		config.remove_section(section)
	config.add_section(section)
	
	keys = dict.keys()
	keys.sort() # Not effective.
	for name in keys:
		val = dict [name]
		val = toEncodedString(val,"utf-8")
		config.set(section,name,val)
</t>
<t tx="edream.110203161858.717">@language python

import leoDialog
from leoGlobals import *
import string,Tkinter

Tk = Tkinter

@others</t>
<t tx="edream.110203161858.718">class baseLeoDialog:
	"""The base class for all Leo dialogs"""
	@others
	
class leoDialog (baseLeoDialog):
	"""A base class for all Leo dialogs that may be overridden by plugins."""
	pass
</t>
<t tx="edream.110203161858.719">def __init__(self,title="",resizeable=true):
	
	"""Constructor for base leoDialog class."""
	
	self.answer = None # Value returned from run()
	self.resizeable = resizeable
	self.title = title
	self.modal = None
	
	self.buttonsFrame = None # Frame to hold typical dialog buttons.
	self.defaultButtonCommand = None  # Command to call when user closes the window by clicking the close box.
	self.frame = None # The outermost frame in self.top.
	self.root = None # app().root
	self.top = None # The toplevel Tk widget.
	self.focus_widget = None # The widget to get the first focus.</t>
<t tx="edream.110203161858.720">def cancelButton(self):
	
	"""Do default click action in cancel button."""
	
	self.answer="cancel"
	self.top.destroy()
	
def noButton(self):
	
	"""Do default click action in no button."""
	
	self.answer="no"
	self.top.destroy()
	
def okButton(self):
	
	"""Do default click action in ok button."""
	
	self.answer="ok"
	self.top.destroy()

def yesButton(self):
	
	"""Do default click action in yes button."""

	self.answer="yes"
	self.top.destroy()</t>
<t tx="edream.110203161858.721">def center(self):
	
	"""Center any leoDialog."""
	
	center_dialog(self.top)
</t>
<t tx="edream.110203161858.722">def createButtons (self,buttons):
	
	"""Create a row of buttons.
	
	buttons is a list of dictionaries containing the properties of each button."""
	
	assert(self.frame)
	self.buttonsFrame = f = Tk.Frame(self.top)
	f.pack(side="top",padx=30)

	# Buttons is a list of dictionaries, with an empty dictionary at the end if there is only one entry.
	buttonList = []
	for d in buttons:
		text = d.get("text","&lt;missing button name&gt;")
		isDefault = d.get("default",false)
		underline = d.get("underline",0)
		command = d.get("command",None)
		bd = choose(isDefault,4,2)

		b = Tk.Button(f,width=6,text=text,bd=bd,underline=underline,command=command)
		b.pack(side="left",padx=5,pady=10)
		buttonList.append(b)
		
		if isDefault and command:
			self.defaultButtonCommand = command
		
	return buttonList</t>
<t tx="edream.110203161858.723">def createMessageFrame (self,message):
	
	"""Create a frame containing a Tk.Label widget."""

	label = Tk.Label(self.frame,text=message)
	label.pack(pady=10)
</t>
<t tx="edream.110203161858.724">def createTopFrame(self):
	
	"""Create the Tk.Toplevel widget for a leoDialog."""
	
	self.root = app().root

	self.top = Tk.Toplevel(self.root)
	attachLeoIcon(self.top)

	self.top.title(self.title)

	if not self.resizeable:
		self.top.resizable(0,0) # neither height or width is resizable.

	self.frame = Tk.Frame(self.top)
	self.frame.pack(side="top",expand=1,fill="both")</t>
<t tx="edream.110203161858.725">def run (self,modal):
	
	"""Run a leoDialog."""

	self.modal = modal
	
	self.center() # Do this after all packing complete.

	if self.modal:
		self.top.grab_set() # Make the dialog a modal dialog.
		if self.focus_widget == None:
			self.focus_widget = self.top
		self.focus_widget.focus_set() # Get all keystrokes.	
		self.root.wait_window(self.top)
		return self.answer
	else:
		self.root.wait_window(self.top)
		return None</t>
<t tx="edream.110203161858.726">class aboutLeo (leoDialog):
	"""A class that creates the About Leo dialog."""
	@others
</t>
<t tx="edream.110203161858.727">def __init__ (self,version,copyright,url,email):
	
	"""Create an About Leo dialog."""

	leoDialog.__init__(self,"About Leo",resizeable=true) # Initialize the base class.
	
	self.copyright = copyright
	self.email = email
	self.url = url
	self.version = version

	self.createTopFrame()
	self.createFrame()
</t>
<t tx="edream.110203161858.728">def createFrame (self):
	
	"""Create the frame for an About Leo dialog."""
	
	frame = self.frame
	copyright = self.copyright ; email = self.email
	url = self.url ; version = self.version
	
	# Calculate the approximate height &amp; width. (There are bugs in Tk here.)
	lines = string.split(copyright,'\n')
	height = len(lines) + 8 # Add lines for version,url,email,spacing.
	width = 0
	for line in lines:
		width = max(width,len(line))
	width = max(width,len(url))
	width += 10 # 9/9/02

	frame.pack(padx=6,pady=4)
	
	self.text = text = Tk.Text(frame,height=height,width=width,bd=0,bg=frame.cget("background"))
	text.pack(pady=10)
	
	try:
		bitmap_name = os.path.join(app().loadDir,"..","Icons","Leoapp.GIF") # 5/12/03
		image = Tkinter.PhotoImage(file=bitmap_name)
		text.image_create("1.0",image=image,padx=10)
	except:
		es("exception getting icon")
		es_exception()

	text.insert("end",version,"version")
	text.insert("end",copyright,"copyright")
	text.insert("end",'\n')
	text.insert("end",url,"url") # Add "url" tag.
	text.insert("end",'\n')
	text.insert("end",email,"email") # Add "email" tag.
	
	text.tag_config("version",justify="center")
	text.tag_config("copyright",justify="center",spacing1="3")
	
	text.tag_config("url",underline=1,justify="center",spacing1="10")
	text.tag_bind("url","&lt;Button-1&gt;",self.onAboutLeoUrl)
	text.tag_bind("url","&lt;Enter&gt;",self.setArrowCursor)
	text.tag_bind("url","&lt;Leave&gt;",self.setDefaultCursor)

	text.tag_config("email",underline=1,justify="center",spacing1="10")
	text.tag_bind("email","&lt;Button-1&gt;",self.onAboutLeoEmail)
	text.tag_bind("email","&lt;Enter&gt;",self.setArrowCursor)
	text.tag_bind("email","&lt;Leave&gt;",self.setDefaultCursor)

	text.configure(state="disabled")</t>
<t tx="edream.110203161858.729">def onAboutLeoEmail(self,event=None):
	
	"""Handle clicks in the email link in an About Leo dialog."""
	
	try:
		import webbrowser
		webbrowser.open("mailto:" + self.email)
	except:
		es("not found: " + self.email)</t>
<t tx="edream.110203161858.730">def onAboutLeoUrl(self,event=None):
	
	"""Handle clicks in the url link in an About Leo dialog."""

	try:
		import webbrowser
		webbrowser.open(self.url)
	except:
		es("not found: " + self.url)</t>
<t tx="edream.110203161858.731">def setArrowCursor (self,event=None):
	
	"""Set the cursor to an arrow in an About Leo dialog."""
	
	self.text.configure(cursor="arrow")
	
def setDefaultCursor (self,event=None):
	
	"""Set the cursor to the default cursor in an About Leo dialog."""
	
	self.text.configure(cursor="xterm")</t>
<t tx="edream.110203161858.732">class askLeoID (leoDialog):
	
	"""A class to create and run a dialog that asks for Id for gnx's."""
	
	@others</t>
<t tx="edream.110203161858.733">def __init__(self):
	
	"""Create the Leo Id dialog."""
	
	leoDialog.__init__(self,"Enter unique id",resizeable=false) # Initialize the base class.
	self.id_entry = None
	self.answer = None

	self.createTopFrame()
	self.top.protocol("WM_DELETE_WINDOW", self.onCloseWindow)
	self.top.bind("&lt;Key&gt;", self.onKey)
	
	message = (
		"leoID.txt not found\n\n" +
		"Please enter an id that identifies you uniquely.\n" +
		"Your cvs login name is a good choice.\n\n" +
		"Your id must contain only letters and numbers\n" +
		"and must be at least 4 characters in length.")
	self.createFrame(message)
	self.focus_widget = self.id_entry

	buttons = {"text":"OK","command":self.onButton,"default":true}, # Singleton tuple.
	buttonList = self.createButtons(buttons)
	self.ok_button = buttonList[0]</t>
<t tx="edream.110203161858.734">def createFrame(self,message):
	
	"""Create the frame for the Leo Id dialog."""
	
	f = self.frame

	label = Tk.Label(f,text=message)
	label.pack(pady=10)

	self.id_entry = text = Tk.Entry(f,width=20)
	text.pack()</t>
<t tx="edream.110203161858.735">def onCloseWindow (self):
	
	"""Prevent the Leo Id dialog from closing by ignoring close events."""

	pass</t>
<t tx="edream.110203161858.736">def onButton(self):
	
	"""Handle clicks in the Leo Id close button."""

	s = self.id_entry.get().strip()
	if len(s) &lt; 4:  # Require at least 4 characters in an id.
		return

	self.answer = s
	self.top.destroy() # terminates wait_window</t>
<t tx="edream.110203161858.737">def onKey(self,event):
	
	"""Handle keystrokes in the Leo Id dialog."""
	
	&lt;&lt; eliminate invalid characters &gt;&gt;
	&lt;&lt; enable the ok button if there are 4 or more valid characters &gt;&gt;
	
	ch = event.char.lower()
	if ch in ('\n','\r'):
		self.onButton()
	return "break"

</t>
<t tx="edream.110203161858.738">e = self.id_entry
s = e.get().strip()
i = 0 ; ok = true
while i &lt; len(s):
	ch = s[i]
	if ch not in string.letters and ch not in string.digits:
		e.delete(`i`)
		s = e.get()
		ok = false
	else:
		i += 1
if not ok: return</t>
<t tx="edream.110203161858.739">e = self.id_entry
b = self.ok_button

if len(e.get().strip()) &gt;= 4:
	b.configure(state="normal")
else:
	b.configure(state="disabled")</t>
<t tx="edream.110203161858.740">class askOk(leoDialog):
	"""A class that creates a dialog with a single OK button."""
	@others</t>
<t tx="edream.110203161858.741">def __init__ (self,title,message=None,text="Ok",resizeable=false):

	"""Create a dialog with one button"""

	leoDialog.__init__(self,title,resizeable) # Initialize the base class.
	self.text = text
	self.createTopFrame()
	self.top.bind("&lt;Key&gt;", self.onKey)

	if message:
		self.createMessageFrame(message)

	buttons = {"text":text,"command":self.okButton,"default":true}, # Singleton tuple.
	self.createButtons(buttons)</t>
<t tx="edream.110203161858.742">def onKey(self,event):
	
	"""Handle Key events in askOk dialogs."""

	ch = event.char.lower()

	if ch in (self.text[0].lower(),'\n','\r'):
		self.okButton()

	return "break"
</t>
<t tx="edream.110203161858.743">class askOkCancel (leoDialog):
	"""A class that creates a dialog with two buttons: Ok and Cancel."""
	@others</t>
<t tx="edream.110203161858.744">def __init__ (self,title,message=None,resizeable=false):
	
	"""Create a dialog having Ok and Cancel buttons."""

	leoDialog.__init__(self,title,resizeable) # Initialize the base class.
	self.createTopFrame()
	self.top.bind("&lt;Key&gt;",self.onKey)

	if message:
		self.createMessageFrame(message)
		
	buttons = (
		{"text":"Ok",    "command":self.okButton,     "default":true},
		{"text":"Cancel","command":self.cancelButton} )
	self.createButtons(buttons)
</t>
<t tx="edream.110203161858.745">def onKey(self,event):
	
	"""Handle keystrokes in a dialog having Ok and Cancel buttons."""

	ch = event.char.lower()
	if ch in ('o','\n','\r'):
		self.okButton()
	elif ch == 'c':
		self.cancelButton()

	return "break"</t>
<t tx="edream.110203161858.746">class  askOkCancelNumber (leoDialog):
	"""Create and run a modal dialog to get a number."""
	@others
</t>
<t tx="edream.110203161858.747">def __init__ (self,title,message):
	
	"""Create a number dialog"""

	leoDialog.__init__(self,title,resizeable=false) # Initialize the base class.
	self.answer = -1
	self.number_entry = None

	self.createTopFrame()
	self.top.bind("&lt;Key&gt;", self.onKey)

	self.createFrame(message)
	self.focus_widget = self.number_entry

	buttons = (
			{"text":"Ok",    "command":self.okButton,     "default":true},
			{"text":"Cancel","command":self.cancelButton} )
	buttonList = self.createButtons(buttons)
	self.ok_button = buttonList[0] # Override the default kind of Ok button.</t>
<t tx="edream.110203161858.748">def createFrame (self,message):
	
	"""Create the frame for a number dialog."""
	
	f = self.frame
	
	lab = Tk.Label(f,text=message)
	lab.pack(pady=10,side="left")
	
	self.number_entry = t = Tk.Entry(f,width=20)
	t.pack(side="left")</t>
<t tx="edream.110203161858.749">def okButton(self):
	
	"""Handle clicks in the ok button of a number dialog."""

	s = self.number_entry.get().strip()

	try:
		self.answer=int(s)
	except:
		self.answer=-1 # Cancel the operation.

	self.top.destroy()
	
def cancelButton(self):
	
	"""Handle clicks in the cancel button of a number dialog."""

	self.answer=-1
	self.top.destroy()</t>
<t tx="edream.110203161858.750">def onKey (self,event):
	
	&lt;&lt; eliminate non-numbers &gt;&gt;

	ch = event.char.lower()

	if ch in ('o','\n','\r'):
		self.okButton()
	elif ch == 'c':
		self.cancelButton()

	return "break"</t>
<t tx="edream.110203161858.751">e = self.number_entry
s = e.get().strip()

i = 0
while i &lt; len(s):
	ch = s[i]
	if ch not in string.digits:
		e.delete(`i`)
		s = e.get()
	else:
		i += 1</t>
<t tx="edream.110203161858.752">class askYesNo (leoDialog):
	"""A class that creates a dialog with two buttons: Yes and No."""
	@others

</t>
<t tx="edream.110203161858.753">def __init__ (self,title,message=None,resizeable=false):
	
	"""Create a dialog having yes and no buttons."""

	leoDialog.__init__(self,title,resizeable) # Initialize the base class.
	self.createTopFrame()
	self.top.bind("&lt;Key&gt;",self.onKey)

	if message:
		self.createMessageFrame(message)
		
	buttons = (
		{"text":"Yes","command":self.yesButton,  "default":true},
		{"text":"No", "command":self.noButton} )
	self.createButtons(buttons)
</t>
<t tx="edream.110203161858.754">def onKey(self,event):
	
	"""Handle keystroke events in dialogs having yes and no buttons."""

	ch = event.char.lower()

	if ch in ('y','\n','\r'):
		self.yesButton()
	elif ch == 'n':
		self.noButton()

	return "break"</t>
<t tx="edream.110203161858.755">class askYesNoCancel(leoDialog):
	
	"""A class to create and run dialogs having three buttons.
	
	By default, these buttons are labeled Yes, No and Cancel."""
	
	@others
</t>
<t tx="edream.110203161858.756">def __init__ (self,title,
	message=None,
	yesMessage="Yes",
	noMessage="No",
	defaultButton="Yes",
	resizeable=false):
		
	"""Create a dialog having three buttons."""

	leoDialog.__init__(self,title,resizeable) # Initialize the base class.
	self.yesMessage,self.noMessage = yesMessage,noMessage
	self.defaultButton = defaultButton

	self.createTopFrame()
	self.top.bind("&lt;Key&gt;",self.onKey)

	if message:
		self.createMessageFrame(message)
		
	buttons = (
		{"text":yesMessage,"command":self.yesButton,   "default":yesMessage==defaultButton},
		{"text":noMessage, "command":self.noButton,    "default":noMessage==defaultButton},
		{"text":"Cancel",  "command":self.cancelButton,"default":"Cancel"==defaultButton} )
	self.createButtons(buttons)

</t>
<t tx="edream.110203161858.757">def onKey(self,event):
	
	"""Handle keystrokes in dialogs with three buttons."""

	ch = event.char.lower()
	
	if ch in ('\n','\r'):
		ch = self.defaultButton[0].lower()

	if ch == self.yesMessage[0].lower():
		self.yesButton()
	elif ch == self.noMessage[0].lower():
		self.noButton()
	elif ch == 'c':
		self.cancelButton()

	return "break"</t>
<t tx="edream.110203161858.758">def noButton(self):
	
	"""Handle clicks in the 'no' (second) button in a dialog with three buttons."""
	
	self.answer=self.noMessage.lower()
	self.top.destroy()
	
def yesButton(self):
	
	"""Handle clicks in the 'yes' (first) button in a dialog with three buttons."""
	
	self.answer=self.yesMessage.lower()
	self.top.destroy()
</t>
<t tx="edream.110203161858.759">class listBoxDialog (leoDialog):
	"""A base class for dialogs containing a Tk Listbox"""
	@others</t>
<t tx="edream.110203161858.760">def __init__ (self,c,title,label):
	
	"""Constructor for the base listboxDialog class."""
	
	leoDialog.__init__(self,title,resizeable=true) # Initialize the base class.
	self.createTopFrame()
	self.top.protocol("WM_DELETE_WINDOW", self.destroy)

	# Initialize common ivars.
	self.c = c
	self.label = label
	self.vnodeList = []
	self.vnodeList = []
	self.buttonFrame = None
	
	# Fill in the frame.
	self.createFrame()
	self.fillbox()
	
	# Make the common bindings after creating self.box.
	
	self.box.bind("&lt;Double-Button-1&gt;",self.go)
</t>
<t tx="edream.110203161858.761">def addStdButtons (self,frame):
	
	"""Add stanadard buttons to a listBox dialog."""
	
	# Create the ok and cancel buttons.
	self.ok = ok = Tk.Button(frame,text="Go",width=6,command=self.go)
	self.hide = hide = Tk.Button(frame,text="Hide",width=6,command=self.hide)

	ok.pack(side="left",pady=2,padx=5)
	hide.pack(side="left",pady=2,padx=5)</t>
<t tx="edream.110203161858.762">def createFrame(self):
	
	"""Create the essentials of a listBoxDialog frame
	
	Subclasses will add buttons to self.buttonFrame"""
	
	self.outerFrame = f = Tk.Frame(self.frame)
	f.pack(expand=1,fill="both")
	
	if self.label:
		labf = Tk.Frame(f)
		labf.pack(pady=2)
		lab = Tk.Label(labf,text=self.label)
		lab.pack()
	
	f2 = Tk.Frame(f)
	f2.pack(expand=1,fill="both")
	
	self.box = box = Tk.Listbox(f2,height=20,width=30)
	box.pack(side="left",expand=1,fill="both")
	
	bar = Tk.Scrollbar(f2)
	bar.pack(side="left", fill="y")
	
	bar.config(command=box.yview)
	box.config(yscrollcommand=bar.set)</t>
<t tx="edream.110203161858.763">def destroy (self,event=None):
	
	"""Hide, do not destroy, a listboxDialog window
	
	subclasses may override to really destroy the window"""
	
	self.top.withdraw() # Don't allow this window to be destroyed.
</t>
<t tx="edream.110203161858.764">def hide (self):
	
	"""Hide a list box dialog."""
	
	self.top.withdraw()</t>
<t tx="edream.110203161858.765">def fillbox(self,event=None):
	
	"""Fill a listbox from information.
	
	Overridden by subclasses"""
	
	pass</t>
<t tx="edream.110203161858.766">def go(self,event=None):
	
	"""Handle clicks in the "go" button in a list box dialog."""
	
	c = self.c ; box = self.box
	
	# Work around an old Python bug.  Convert strings to ints.
	items = box.curselection()
	try:
		items = map(int, items)
	except ValueError: pass

	if items:
		n = items[0]
		v = self.vnodeList[n]
		c.beginUpdate()
		c.tree.expandAllAncestors(v)
		c.selectVnode(v,updateBeadList=true) # A case could be made for updateBeadList=false
		c.endUpdate()
		c.tree.idle_scrollTo(v)
</t>
<t tx="edream.110203161858.767">@language python

from leoGlobals import *
import leoDialog,leoNodes
import os,os.path,time

@ The list of language names that are written differently from the names in language_delims_dict in leoGlobals.py.  This is needed for compatibility with the borland version of Leo.

We convert from names in xml_language_names to names in language_delims_dict by converting the name to lowercase and by removing slashes.
@c

xml_language_names = (
	"CWEB","C","HTML","Java","LaTeX",
	"Pascal","PerlPod","Perl","Plain","Python","tcl/tk")

class BadLeoFile(Exception):
	def __init__(self, message):
		self.message = message
		Exception.__init__(self,message) # 4/26/03: initialize the base class.
	def __str__(self):
		return "Bad Leo File:" + self.message

class baseFileCommands:
	"""A base class for the fileCommands subcommander."""
	@others
	
class fileCommands (baseFileCommands):
	"""A class creating the fileCommands subcommander."""
	pass</t>
<t tx="edream.110203161858.768">def __init__(self,commands):

	# trace("__init__", "fileCommands.__init__")
	self.commands = commands
	self.frame = commands.frame
	self.initIvars()

def initIvars(self):

	# General
	self.maxTnodeIndex = 0
	self.numberOfTnodes = 0
	self.topVnode = None
	self.mFileName = ""
	self.fileDate = -1
	self.leo_file_encoding = app().config.new_leo_file_encoding
	# For reading
	self.fileFormatNumber = 0
	self.ratio = 0.5
	self.fileBuffer = None ; self.fileIndex = 0
	# For writing
	self.read_only = false
	self.outputFile = None # File for normal writing
	self.outputString = None # String for pasting
	self.openDirectory = None
	self.usingClipboard = false
	# New in 3.12
	self.a = app()
	self.copiedTree = None
	self.tnodesDict = {}
</t>
<t tx="edream.110203161858.769"></t>
<t tx="edream.110203161858.770">def createVnode(self,parent,back,tref,headline):
	
	# trace(`headline` + ", parent:" + `parent` + ", back:" + `back`)
	v = None ; c = self.commands
	# Shared tnodes are placed in the file even if empty.
	if tref == -1:
		t = leoNodes.tnode()
	else:
		t = self.tnodesDict.get(tref)
		if not t:
			t = self.newTnode(tref)
	if back: # create v after back.
		v = back.insertAfter(t)
	elif parent: # create v as the parent's first child.
		v = parent.insertAsNthChild(0,t)
	else: # create a root vnode
		v = leoNodes.vnode(c,t)
		v.moveToRoot()
		c.tree.rootVnode = v
	v.initHeadString(headline,encoding=self.leo_file_encoding)
	return v</t>
<t tx="edream.110203161858.771"># This method finishes pasting the outline from the clipboard.
def finishPaste(self):

	c=self.commands
	current = c.currentVnode()
	after = current.nodeAfterTree()
	c.beginUpdate()
	if 1: # inside update...
		if 0: # Warning: this will only join pasted clones, and is very dangerous.
			&lt;&lt; Create join lists of all pasted vnodes &gt;&gt;
		&lt;&lt; Recompute clone bits for pasted vnodes &gt;&gt;
		self.compactFileIndices()
		c.selectVnode(current)
	c.endUpdate()
	return current</t>
<t tx="edream.110203161858.772">v = c.currentVnode()

while v and v != after:
	if v not in v.t.joinList:
		v.t.joinList.append(v)
	v = v.threadNext()
</t>
<t tx="edream.110203161858.773">@ This must be done after the join lists have been created.  The saved clone bit is unreliable for pasted nodes.
@c

v = c.currentVnode()
while v and v != after:
	v.initClonedBit(v.shouldBeClone())
	v.clearDirty()
	v = v.threadNext()</t>
<t tx="edream.110203161858.774"></t>
<t tx="edream.110203161858.775"></t>
<t tx="edream.110203161858.776">def getBool (self):
	self.skipWs() # guarantees at least one more character.
	ch = self.fileBuffer[self.fileIndex]
	if ch == '0':
		self.fileIndex += 1 ; return false
	elif ch == '1':
		self.fileIndex += 1 ; return true
	else:
		raise BadLeoFile("expecting bool constant")
		
def getDqBool (self):
	self.getDquote() ; val = self.getBool() ; self.getDquote()
	return val
	
def getDqString (self): # 7/10/02
	self.getDquote()
	i = self.fileIndex
	self.fileIndex = j = string.find(self.fileBuffer,'"',i)
	if j == -1: raise BadLeoFile("unterminated double quoted string")
	s = self.fileBuffer[i:j]
	self.getDquote()
	return s

def getDouble (self):
	self.skipWs()
	i = self.fileIndex ; buf = self.fileBuffer
	floatChars = string.digits + 'e' + 'E' + '.' + '+' + '-'
	n = len(buf)
	while i &lt; n and buf[i] in floatChars:
		i += 1
	if i == self.fileIndex:
		raise BadLeoFile("expecting float constant")
	val = float(buf[self.fileIndex:i])
	self.fileIndex = i
	return val

def getDquote (self):
	self.getTag('"')
	
def getIndex (self):
	val = self.getLong()
	if val &lt; 0: raise BadLeoFile("expecting index")
	return val
	
def getLong (self):
	self.skipWs() # guarantees at least one more character.
	i = self.fileIndex
	if self.fileBuffer[i] == '-':
		i += 1
	n = len(self.fileBuffer)
	while i &lt; n and self.fileBuffer[i] in string.digits:
		i += 1
	if i == self.fileIndex:
		raise BadLeoFile("expecting int constant")
	val = int(self.fileBuffer[self.fileIndex:i])
	self.fileIndex = i
	return val
		
def getStringToTag (self,tag):
	buf = self.fileBuffer
	blen = len(buf) ; tlen = len(tag)
	i = j = self.fileIndex
	while i &lt; blen:
		if tag == buf[i:i+tlen]:
			self.fileIndex = i
			return buf[j:i]
		else: i += 1
	raise BadLeoFile("expecting string terminated by " + tag)
	return ""
	
# Look ahead for collapsed tag: tag may or may not end in "&gt;"
# Skips tag and /&gt; if found, otherwise does not alter index.
def getOpenTag (self,tag):
	if tag[-1] == "&gt;":
		# Only the tag itself or a collapsed tag are valid.
		if self.matchTag(tag):
			return false # Not a collapsed tag.
		elif self.matchTag(tag[:-1]):
			# It must be a collapsed tag.
			self.skipWs()
			if self.matchTag("/&gt;"):
				return true
		print "getOpenTag(", tag, ") failed:"
		raise BadLeoFile("expecting" + tag)
	else:
		# The tag need not be followed by "/&gt;"
		if self.matchTag(tag):
			old_index = self.fileIndex
			self.skipWs()
			if self.matchTag("/&gt;"):
				return true
			else:
				self.fileIndex = old_index
				return false
		else:
			print "getOpenTag(", tag, ") failed:"
			raise BadLeoFile("expecting" + tag)
	
# 11/24/02: Look ahead for closing /&gt;
# Return true if found.
def getTag (self,tag):
	if self.matchTag(tag):
		return
	else:
		print "getTag(", tag, ") failed:"
		raise BadLeoFile("expecting" + tag)
</t>
<t tx="edream.110203161858.777">def matchChar (self,ch):
	self.skipWs() # guarantees at least one more character.
	if ch == self.fileBuffer[self.fileIndex]:
		self.fileIndex += 1 ; return true
	else: return false

# Warning: does not check for end-of-word,
# so caller must match prefixes first.
def matchTag (self,tag):
	self.skipWsAndNl() # guarantees at least one more character.
	i = self.fileIndex
	if tag == self.fileBuffer[i:i+len(tag)]:
		self.fileIndex += len(tag)
		return true
	else:
		return false

def matchTagWordIgnoringCase (self,tag):
	self.skipWsAndNl() # guarantees at least one more character.
	i = self.fileIndex
	tag = string.lower(tag)
	j = skip_c_id(self.fileBuffer,i)
	word = self.fileBuffer[i:j]
	word = string.lower(word)
	if tag == word:
		self.fileIndex += len(tag)
		return true
	else:
		return false
</t>
<t tx="edream.110203161858.778">def getClipboardHeader (self):

	if self.getOpenTag("&lt;leo_header"):
		return # 11/24/02

	while 1:
		if self.matchTag("file_format="):
			self.getDquote() ; self.fileFormatNumber = self.getLong() ; self.getDquote()
		elif self.matchTag("tnodes="):
			self.getDquote() ; self.getLong() ; self.getDquote() # no longer used
		elif self.matchTag("max_tnode_index="):
			self.getDquote() ; self.getLong() ; self.getDquote() # no longer used
		else:
			self.getTag("/&gt;")
			break</t>
<t tx="edream.110203161858.779"># For compatibility with old file formats.

def getCloneWindows (self):

	if not self.matchTag("&lt;clone_windows&gt;"):
		return

	while self.matchTag("&lt;clone_window vtag=\"V"):
		self.getLong() ; self.getDquote() ; self.getTag("&gt;")
		if not self.getOpenTag("&lt;global_window_position"):
			self.getTag("&lt;global_window_position")
			self.getPosition()
			self.getTag("/&gt;")
		self.getTag("&lt;/clone_window&gt;")
	self.getTag("&lt;/clone_windows&gt;")</t>
<t tx="edream.110203161858.780">def getEscapedString (self):

	# The next '&lt;' begins the ending tag.
	i = self.fileIndex
	self.fileIndex = j = string.find(self.fileBuffer,'&lt;',i)
	if j == -1:
		raise BadLeoFile("unterminated escaped string")
	else:
		# Allocates memory
		return self.xmlUnescape(self.fileBuffer[i:j])</t>
<t tx="edream.110203161858.781">def getFindPanelSettings (self):

	c = self.commands ; config = app().config ; findFrame = app().findFrame
	&lt;&lt; Set defaults of all flags &gt;&gt;
	if not self.getOpenTag("&lt;find_panel_settings"):
		while 1:
			if   self.matchTag("batch="): c.batch_flag = self.getDqBool()
			elif self.matchTag("wrap="): c.wrap_flag = self.getDqBool()
			elif self.matchTag("whole_word="): c.whole_word_flag = self.getDqBool()
			elif self.matchTag("ignore_case="): c.ignore_case_flag = self.getDqBool()
			elif self.matchTag("pattern_match="): c.pattern_match_flag = self.getDqBool()
			elif self.matchTag("search_headline="): c.search_headline_flag = self.getDqBool()
			elif self.matchTag("search_body="): c.search_body_flag = self.getDqBool()
			elif self.matchTag("suboutline_only="): c.suboutline_only_flag = self.getDqBool()
			elif self.matchTag("mark_changes="): c.mark_changes_flag = self.getDqBool()
			elif self.matchTag("mark_finds="): c.mark_finds_flag = self.getDqBool()
			elif self.matchTag("reverse="): c.reverse_flag = self.getDqBool()
			elif self.matchTag("node_only="): c.node_only_flag = self.getDqBool()
			else: break
					
		self.getTag("&gt;")
		#
		self.getTag("&lt;find_string&gt;")
		c.find_text = self.getEscapedString()
		self.getTag("&lt;/find_string&gt;")
		#
		self.getTag("&lt;change_string&gt;")
		c.change_text = self.getEscapedString()
		self.getTag("&lt;/change_string&gt;")
		#
		self.getTag("&lt;/find_panel_settings&gt;")
	
	# Override .leo file's preferences if settings are in leoConfig.txt.
	config.setCommandsFindIvars(c)
	# Update the settings immediately.
	app().findFrame.init(c)</t>
<t tx="edream.110203161858.782">for var in findFrame.intKeys:
	attr = "%s_flag" % (var)
	setattr(c,attr,false)
</t>
<t tx="edream.110203161858.783">def getGlobals (self):

	if self.getOpenTag("&lt;globals"):
		return

	self.getTag("body_outline_ratio=\"")
	self.ratio = self.getDouble() ; self.getDquote() ; self.getTag("&gt;")

	self.getTag("&lt;global_window_position")
	y,x,h,w = self.getPosition() ; self.getTag("/&gt;")
	# print ("y,x,h,w:" + `y` + "," + `x` + "," + `h` + "," + `w`)
	
	# Bug fix: 7/15/02: use max, not min!!!
	y = max(y,0) ; x = max(x,0)
	geom = "%dx%d%+d%+d" % (w,h,x,y)
	self.frame.top.geometry(geom)
	# 7/15/02: Redraw the window before writing into it.
	self.frame.top.deiconify()
	self.frame.top.lift()
	self.frame.top.update()

	self.getTag("&lt;global_log_window_position")
	self.getPosition() ;
	self.getTag("/&gt;") # no longer used.

	self.getTag("&lt;/globals&gt;")</t>
<t tx="edream.110203161858.784"># The caller should enclose this in begin/endUpdate.

def getLeoFile (self,frame,fileName,atFileNodesFlag=true):

	c=self.commands
	&lt;&lt; warn on read-only files &gt;&gt;
	self.mFileName = frame.mFileName
	self.tnodesDict = {}
	ok = true
	try:
		c.tree.initing = true # inhibit endEditLabel from marking the file changed.
		## import time ; start = time.clock()
		&lt;&lt; scan all the xml elements &gt;&gt;
		## print "read time" + "%6.3f" % (time.clock()-start)
	except BadLeoFile, message:
		&lt;&lt; raise an alert &gt;&gt;
		ok = false
	if ok and atFileNodesFlag:
		c.atFileCommands.readAll(c.rootVnode(),partialFlag=false)
	if not c.tree.currentVnode:
		c.tree.currentVnode = c.tree.rootVnode
	self.setAllJoinLinks() # 5/3/03
	c.initAllCloneBits() # 5/3/03
	c.selectVnode(c.tree.currentVnode) # load body pane
	c.tree.initing = false # Enable changes in endEditLabel
	self.tnodesDict = {}
	return ok, self.ratio</t>
<t tx="edream.110203161858.785">try:
	self.read_only = false
	self.read_only = not os.access(fileName,os.W_OK)
	if self.read_only:
		es("read only: " + fileName,color="red")
		leoDialog.askOk("Read-only ouline",
			"Warning: the outline: " + fileName + " is read-only.").run(modal=true)
except:
	if 0: # testing only: access may not exist on all platforms.
		es("exception getting file access")
		es_exception()</t>
<t tx="edream.110203161858.786">self.getXmlVersionTag()
self.getXmlStylesheetTag()
self.getTag("&lt;leo_file&gt;")
self.getLeoHeader()
self.getGlobals()
self.getPrefs()
self.getFindPanelSettings()

# Causes window to appear.
c.frame.resizePanesToRatio(c.frame.ratio,c.frame.secondary_ratio) 
es("reading: " + fileName)

self.getVnodes()
self.getTnodes()
self.getCloneWindows()
self.getTag("&lt;/leo_file&gt;")</t>
<t tx="edream.110203161858.787"># All other exceptions are Leo bugs.

# es_exception()
alert(self.mFileName + " is not a valid Leo file: " + `message`)</t>
<t tx="edream.110203161858.788">def getLeoHeader (self):

	# Set defaults.
	self.maxTnodeIndex = 0
	self.numberOfTnodes = 0
	if self.getOpenTag("&lt;leo_header"):
		return

	# New in version 1.7: attributes may appear in any order.
	while 1:
		if self.matchTag("file_format="):
			self.getDquote() ; self.fileFormatNumber = self.getLong() ; self.getDquote()
		elif self.matchTag("tnodes="):
			self.getDquote() ; self.numberOfTnodes = self.getLong() ; self.getDquote()
		elif self.matchTag("max_tnode_index="):
			self.getDquote() ; self.maxTnodeIndex = self.getLong() ; self.getDquote()
		elif self.matchTag("clone_windows="):
			self.getDquote() ; self.getLong() ; self.getDquote() # no longer used.
		else:
			self.getTag("/&gt;")
			break</t>
<t tx="edream.110203161858.789"># This method reads a Leo outline from string s in clipboard format.
def getLeoOutline (self,s):

	self.usingClipboard = true
	self.fileBuffer = s ; self.fileIndex = 0
	self.tnodesDict = {}

	try:
		self.getXmlVersionTag() # leo.py 3.0
		self.getXmlStylesheetTag() # 10/25/02
		self.getTag("&lt;leo_file&gt;")
		self.getClipboardHeader()
		self.getVnodes()
		self.getTnodes()
		self.getTag("&lt;/leo_file&gt;")
		v = self.finishPaste()
	except BadLeoFile:
		v = None

	# Clean up.
	self.fileBuffer = None ; self.fileIndex = 0
	self.usingClipboard = false
	self.tnodesDict = {}
	return v</t>
<t tx="edream.110203161858.790">def getPosition (self):

	top = left = height = width = 0
	# New in version 1.7: attributes may appear in any order.
	while 1:
		if self.matchTag("top=\""):
			top = self.getLong() ; self.getDquote()
		elif self.matchTag("left=\""):
			left = self.getLong() ; self.getDquote()
		elif self.matchTag("height=\""):
			height = self.getLong() ; self.getDquote()
		elif self.matchTag("width=\""):
			width = self.getLong() ; self.getDquote()
		else: break
	return top, left, height, width</t>
<t tx="edream.110203161858.791">def getPrefs (self):

	a = app() ; c = self.commands ; config = a.config
	
	if self.getOpenTag("&lt;preferences"):
		return

	while 1:
		if self.matchTag("allow_rich_text="):
			self.getDquote() ; self.getBool() ; self.getDquote() #ignored
		elif self.matchTag("tab_width="):
			self.getDquote() ; c.tab_width = self.getLong() ; self.getDquote()
		elif self.matchTag("page_width="):
			self.getDquote() ; c.page_width = self.getLong() ; self.getDquote()
		elif self.matchTag("tangle_bat="):
			self.getDquote() ; c.tangle_batch_flag = self.getBool() ; self.getDquote()
		elif self.matchTag("untangle_bat="):
			self.getDquote() ; c.untangle_batch_flag = self.getBool() ; self.getDquote()
		# New in version 0.10
		elif self.matchTag("output_doc_chunks="):
			self.getDquote() ; c.output_doc_flag = self.getBool() ; self.getDquote()
		elif self.matchTag("noweb_flag="):
			# New in version 0.19: Ignore this flag.
			self.getDquote() ; self.getBool() ; self.getDquote()
		elif self.matchTag("extended_noweb_flag="):
			# New in version 0.19: Ignore this flag.
			self.getDquote() ; self.getBool() ; self.getDquote()
		elif self.matchTag("defaultTargetLanguage="):
			# New in version 0.15
			self.getDquote()
			&lt;&lt; check for syntax coloring prefs &gt;&gt;
		elif self.matchTag("use_header_flag="):
			self.getDquote() ; c.use_header_flag = self.getBool() ; self.getDquote()
		else: break
	self.getTag("&gt;")
	while 1:
		if self.matchTag("&lt;defaultDirectory&gt;"):
			# New in version 0.16.
			c.tangle_directory = self.getEscapedString()
			self.getTag("&lt;/defaultDirectory&gt;")
			if not os.path.exists(c.tangle_directory):
				es("default tangle directory not found:" + c.tangle_directory)
		elif self.matchTag("&lt;TSyntaxMemo_options&gt;"):
			self.getEscapedString() # ignored
			self.getTag("&lt;/TSyntaxMemo_options&gt;")
		else: break
	self.getTag("&lt;/preferences&gt;")
	
	# Override .leo file's preferences if settings are in leoConfig.txt.
	if config.configsExist:
		config.setCommandsIvars(c)</t>
<t tx="edream.110203161858.792"># Must match longer tags before short prefixes.

language = "c" # default

for name in a.language_delims_dict.keys():
	if self.matchTagWordIgnoringCase(name):
		s = string.lower(name)
		language = string.replace(name,"/","")
		self.getDquote()
		break

c.target_language = language</t>
<t tx="edream.110203161858.793">def getSize (self):

	# New in version 1.7: attributes may appear in any order.
	height = 0 ; width = 0
	while 1:
		if self.matchTag("height=\""):
			height = self.getLong() ; self.getDquote()
		elif self.matchTag("width=\""):
			width = self.getLong() ; self.getDquote()
		else: break
	return height, width</t>
<t tx="edream.110203161858.794">def getTnode (self):

	# we have already matched &lt;t.
	index = -1
	# New in version 1.7: attributes may appear in any order.
	while 1:
		if self.matchTag("tx=\"T"):
			index = self.getIndex() ; self.getDquote()
			# if self.usingClipboard: trace(index)
		elif self.matchTag("rtf=\"1\""): pass # ignored
		elif self.matchTag("rtf=\"0\""): pass # ignored
		else: break
	self.getTag("&gt;")
	t = self.tnodesDict.get(index)
	if t:
		if self.usingClipboard:
			&lt;&lt; handle read from clipboard &gt;&gt;
		else:
			&lt;&lt; handle read from file &gt;&gt;
	else:
		es("no tnode with index: " + `index` + ".  The text will be discarded")
	self.getTag("&lt;/t&gt;")</t>
<t tx="edream.110203161858.795">s = self.getEscapedString()
t.setTnodeText(s,encoding=self.leo_file_encoding)</t>
<t tx="edream.110203161858.796">if t:
	s = self.getEscapedString()
	t.setTnodeText(s,encoding=self.leo_file_encoding)
	# trace(`index`,`len(s)`)</t>
<t tx="edream.110203161858.797">def getTnodes (self):

	# A slight change: we require a tnode element.  But Leo always writes this.
	if self.getOpenTag("&lt;tnodes&gt;"):
		return
		
	while self.matchTag("&lt;t"):
		self.getTnode()
	self.getTag("&lt;/tnodes&gt;")
</t>
<t tx="edream.110203161858.798">def getVnode (self,parent,back):

	# trace("parent:" + `parent` + ", back:" + `back`)
	c = self.commands
	setCurrent = setExpanded = setMarked = setOrphan = setTop = false
	tref = -1 ; headline = "" ; tnodeList = None
	# we have already matched &lt;v.
	while 1:
		if self.matchTag("a=\""):
			&lt;&lt; Handle vnode attribute bits &gt;&gt;
		elif self.matchTag("t=\"T"):
			tref = self.getIndex() ; self.getDquote()
		elif self.matchTag("vtag=\"V"):
			self.getIndex() ; self.getDquote() # ignored
		elif self.matchTag("tnodeList=\""):
			tnodeList = self.getTnodeList() # New for 4.0
		else: break
	self.getTag("&gt;")
	# Headlines are optional.
	if self.matchTag("&lt;vh&gt;"):
		headline = self.getEscapedString() ; self.getTag("&lt;/vh&gt;")
	# Link v into the outline using parent and back.
	v = self.createVnode(parent,back,tref,headline)
	if tnodeList:
		v.tnodeList = tnodeList # New for 4.0
		# trace("%4d" % len(tnodeList),v)
	&lt;&lt; Set the remembered status bits &gt;&gt;
	# Recursively create all nested nodes.
	parent = v ; back = None
	while self.matchTag("&lt;v"):
		back = self.getVnode(parent,back)
	# End this vnode.
	self.getTag("&lt;/v&gt;")
	return v</t>
<t tx="edream.110203161858.799"># The a=" has already been seen.
while 1:
	if   self.matchChar('C'): pass # Not used: clone bits are recomputed later.
	elif self.matchChar('D'): pass # Not used.
	elif self.matchChar('E'): setExpanded = true
	elif self.matchChar('M'): setMarked = true
	elif self.matchChar('O'): setOrphan = true
	elif self.matchChar('T'): setTop = true
	elif self.matchChar('V'): setCurrent = true
	else: break
self.getDquote()</t>
<t tx="edream.110203161858.800">if setCurrent:
	c.tree.currentVnode = v

if setExpanded:
	v.initExpandedBit()

if setMarked:
	v.setMarked()

if setOrphan:
	v.setOrphan()

if setTop:
	c.mTopVnode = v  # Not used at present.
</t>
<t tx="edream.110203161858.801">def getTnodeList (self):

	"""Parse a list of tnode indices terminated by a double quote."""

	fc = self ; 
	
	if fc.matchChar('"'):
		return []

	indexList = []
	while 1:
		index = fc.getIndex()
		indexList.append(index)
		if fc.matchChar('"'):
			break
		else:
			fc.getTag(',')
			
	# Resolve all indices.
	tnodeList = []
	for index in indexList:
		t = fc.tnodesDict.get(index)
		if t == None:
			# Not an error: create a new tnode and put it in fc.tnodesDict.
			t = self.newTnode(index)
		tnodeList.append(t)
	return tnodeList</t>
<t tx="edream.110203161858.802">def getVnodes (self):

	c=self.commands
	if  self.usingClipboard:
		# Paste after the current vnode.
		back = c.currentVnode() ; parent = back.parent()
	else:
		back = None ; parent = None

	if self.getOpenTag("&lt;vnodes&gt;"):
		return

	while self.matchTag("&lt;v"):
		back = self.getVnode(parent,back)

	self.getTag("&lt;/vnodes&gt;")</t>
<t tx="edream.110203161858.803">@ Parses the optional xml stylesheet string, and sets the corresponding config option.

For example, given: &lt;?xml_stylesheet s?&gt;
the config option is s.
@c

def getXmlStylesheetTag (self):
	
	c = self.commands
	tag = "&lt;?xml-stylesheet "

	if self.matchTag(tag):
		s = self.getStringToTag("?&gt;")
		# print "reading:", tag + s + "?&gt;"
		c.frame.stylesheet = s
		self.getTag("?&gt;")
</t>
<t tx="edream.110203161858.804"># Parses the encoding string, and sets self.leo_file_encoding.

def getXmlVersionTag (self):
	
	a = app() ; config = a.config

	self.getTag(a.prolog_prefix_string)
	encoding = self.getDqString()
	self.getTag(a.prolog_postfix_string)

	if isValidEncoding(encoding):
		self.leo_file_encoding = encoding
	else:
		es("invalid encoding in .leo file: " + encoding)
</t>
<t tx="edream.110203161858.805">def skipWs (self):

	while self.fileIndex &lt; len(self.fileBuffer):
		ch = self.fileBuffer[self.fileIndex]
		if ch == ' ' or ch == '\t':
			self.fileIndex += 1
		else: break

	# The caller is entitled to get the next character.
	if  self.fileIndex &gt;= len(self.fileBuffer):
		raise BadLeoFile("")</t>
<t tx="edream.110203161858.806">def skipWsAndNl (self):

	while self.fileIndex &lt; len(self.fileBuffer):
		ch = self.fileBuffer[self.fileIndex]
		if ch == ' ' or ch == '\t' or ch == '\r' or ch == '\n':
			self.fileIndex += 1
		else: break

	# The caller is entitled to get the next character.
	if  self.fileIndex &gt;= len(self.fileBuffer):
		raise BadLeoFile("")</t>
<t tx="edream.110203161858.807">def newTnode(self,index):

	if self.tnodesDict.has_key(index):
		es("bad tnode index: " + `index` + ". Using empty text.")
		return leoNodes.tnode()
	else:
		t = leoNodes.tnode()
		t.setFileIndex(index)
		self.tnodesDict[index] = t
		return t</t>
<t tx="edream.110203161858.808">def readAtFileNodes (self):

	c = self.commands ; current = c.currentVnode()
	c.atFileCommands.readAll(current,partialFlag=true)
	self.setAllJoinLinks(current) # 5/3/03
	c.initAllCloneBits() # 5/3/03
	c.redraw() # 4/4/03
	
	# 7/8/03: force an update of the body pane.
	current.setBodyStringOrPane(current.bodyString())
	c.tree.onBodyChanged(current,undoType=None)</t>
<t tx="edream.110203161858.809">def readOutlineOnly (self,file,fileName):

	c=self.commands
	# Read the entire file into the buffer
	self.fileBuffer = file.read() ; file.close()
	self.fileIndex = 0
	&lt;&lt; Set the default directory &gt;&gt;
	c.beginUpdate()
	ok, ratio = self.getLeoFile(self.frame,fileName,atFileNodesFlag=false)
	c.endUpdate()
	c.frame.top.deiconify()
	c.setChanged(false)
	vflag,junk,secondary_ratio = self.frame.initialRatios()
	c.frame.resizePanesToRatio(ratio,secondary_ratio)
	# This should be done after the pane size has been set.
	if 0: # This can not be done at present.
		if self.topVnode:
			c.tree.scrollTo(self.topVnode)
			c.tree.Refresh()
	# delete the file buffer
	self.fileBuffer = ""
	return ok</t>
<t tx="edream.110203161858.810">@ The most natural default directory is the directory containing the .leo file that we are about to open.  If the user has specified the "Default Directory" preference that will over-ride what we are about to set.
@c

dir = os.path.dirname(fileName) 
if len(dir) &gt; 0:
	c.openDirectory = dir</t>
<t tx="edream.110203161858.811">def open(self,file,fileName):

	c=self.commands
	# Read the entire file into the buffer
	# t = getTime()
	self.fileBuffer = file.read() ; file.close()
	self.fileIndex = 0
	&lt;&lt; Set the default directory &gt;&gt;
	# esDiffTime("open:read all", t)

	c.beginUpdate()
	if 1: # inside update...
		c.loading = true # disable c.changed
		ok, ratio = self.getLeoFile(self.frame,fileName,atFileNodesFlag=true)
		c.loading = false # reenable c.changed
		c.setChanged(false)
		if 0: # This can't be done directly.
			# This should be done after the pane size has been set.
			top = c.tree.topVnode
			if top: c.tree.scrollTo(top)
	c.endUpdate()
	# delete the file buffer
	self.fileBuffer = ""
	# esDiffTime("open: exit",t)
	return ok</t>
<t tx="edream.110203161858.812">def setAllJoinLinks (self,root=None):
	
	"""Update all join links in the tree"""
	
	# trace(root)

	if root: # Only update the subtree.
		v = root # 6/3/03
		after = root.nodeAfterTree()
		while v and v != after:
			if v not in v.t.joinList:
				v.t.joinList.append(v)
			v = v.threadNext()
	else: # Update everything.
		v = self.commands.rootVnode()
		while v:
			if v not in v.t.joinList:
				v.t.joinList.append(v)
			v = v.threadNext()</t>
<t tx="edream.110203161858.813">def xmlUnescape(self,s):

	if s:
		s = string.replace(s, '\r', '')
		s = string.replace(s, "&amp;lt;", '&lt;')
		s = string.replace(s, "&amp;gt;", '&gt;')
		s = string.replace(s, "&amp;amp;", '&amp;')
	return s</t>
<t tx="edream.110203161858.814"></t>
<t tx="edream.110203161858.815">def assignFileIndices (self,root=None):
	
	"""Assign a file index to all tnodes"""
	
	c=self.commands
	
	if root == None:
		root = c.rootVnode()
	v = root
	while v:
		t = v.t

		# 8/28/99.  Write shared tnodes even if they are empty.
		if t.hasBody() or len(v.t.joinList) &gt; 0:
			if t.fileIndex == 0:
				self.maxTnodeIndex += 1
				t.setFileIndex(self.maxTnodeIndex)
		else:
			t.setFileIndex(0)
			
		# if self.usingClipboard: trace(t.fileIndex)
		v = v.threadNext()</t>
<t tx="edream.110203161858.816">def compactFileIndices (self):
	
	"""Assign a file index to all tnodes, compacting all file indices"""
	
	c = self.commands ; root = c.rootVnode()
	
	v = root
	self.maxTnodeIndex = 0
	while v: # Clear all indices.
		v.t.setFileIndex(0)
		v = v.threadNext()

	v = c.rootVnode()
	while v: # Set indices for all tnodes that will be written.
		t = v.t
		if t.hasBody() or len(v.t.joinList) &gt; 0: # Write shared tnodes even if they are empty.
			if t.fileIndex == 0:
				self.maxTnodeIndex += 1
				t.setFileIndex(self.maxTnodeIndex)
		v = v.threadNext()</t>
<t tx="edream.110203161858.817"></t>
<t tx="edream.110203161858.818"># All output eventually comes here.
def put (self,s):
	if s and len(s) &gt; 0:
		if self.outputFile:
			s = toEncodedString(s,self.leo_file_encoding,reportErrors=true)
			self.outputFile.write(s)
		elif self.outputString != None: # Write to a string
			self.outputString += s

def put_dquote (self):
	self.put('"')
		
def put_dquoted_bool (self,b):
	if b: self.put('"1"')
	else: self.put('"0"')
		
def put_flag (self,a,b):
	if a:
		self.put(" ") ; self.put(b) ; self.put('="1"')
		
def put_in_dquotes (self,a):
	self.put('"')
	if a: self.put(a) # will always be true if we use backquotes.
	else: self.put('0')
	self.put('"')

def put_nl (self):
	self.put("\n")
	
def put_tab (self):
	self.put("\t")
	
def put_tabs (self,n):
	while n &gt; 0:
		self.put("\t")
		n -= 1</t>
<t tx="edream.110203161858.819">def putClipboardHeader (self):

	tnodes = 0
	&lt;&lt; count the number of tnodes &gt;&gt;
	self.put('&lt;leo_header file_format="1" tnodes=')
	self.put_in_dquotes(`tnodes`)
	self.put(" max_tnode_index=")
	self.put_in_dquotes(`tnodes`)
	self.put("/&gt;") ; self.put_nl()</t>
<t tx="edream.110203161858.820">c=self.commands
c.clearAllVisited()

# Count the vnode and tnodes.
v = c.currentVnode()
after = v.nodeAfterTree()
while v and v != after:
	t = v.t
	if t and not t.isVisited() and (t.hasBody() or len(v.t.joinList) &gt; 0):
		t.setVisited()
		tnodes += 1
	v = v.threadNext()</t>
<t tx="edream.110203161858.821">@ Surprisingly, the call to xmlEscape here is _much_ faster than calling put for each characters of s.
@c

def putEscapedString (self,s):

	if s and len(s) &gt; 0:
		self.put(self.xmlEscape(s))</t>
<t tx="edream.110203161858.822">def putFindSettings (self):

	c = self.commands ; config = app().config

	self.put("&lt;find_panel_settings")
	
	&lt;&lt; put find settings that may exist in leoConfig.txt &gt;&gt;
	
	self.put("&lt;/find_panel_settings&gt;") ; self.put_nl()</t>
<t tx="edream.110203161858.823">if config.configsExist and not config.read_only: # 8/6/02
	pass # config.update has already been called.
else:
	self.put_flag(c.batch_flag,"batch")
	self.put_flag(c.ignore_case_flag,"ignore_case")
	self.put_flag(c.mark_changes_flag,"mark_changes")
	self.put_flag(c.mark_finds_flag,"mark_finds")
	self.put_flag(c.pattern_match_flag,"pattern_match")
	self.put_flag(c.reverse_flag,"reverse")
	self.put_flag(c.search_headline_flag,"search_headline")
	self.put_flag(c.search_body_flag,"search_body")
	self.put_flag(c.suboutline_only_flag,"suboutline_only")
	self.put_flag(c.whole_word_flag,"whole_word")
	self.put_flag(c.wrap_flag,"wrap")
	self.put_flag(c.node_only_flag,"node_only")

self.put("&gt;") ; self.put_nl()

if config.configsExist and not config.read_only: # 8/6/02
	self.put_tab()
	self.put("&lt;find_string&gt;&lt;/find_string&gt;") ; self.put_nl()
else:
	self.put_tab()
	self.put("&lt;find_string&gt;") ; self.putEscapedString(c.find_text)
	self.put("&lt;/find_string&gt;") ; self.put_nl()

if config.configsExist and not config.read_only: # 8/6/02
	self.put_tab()
	self.put("&lt;change_string&gt;&lt;/change_string&gt;") ; self.put_nl()
else:
	self.put_tab()
	self.put("&lt;change_string&gt;") ; self.putEscapedString(c.change_text)
	self.put("&lt;/change_string&gt;") ; self.put_nl()</t>
<t tx="edream.110203161858.824">def putGlobals (self):

	c=self.commands
	self.put("&lt;globals")
	&lt;&lt; put the body/outline ratio &gt;&gt;
	self.put("&gt;") ; self.put_nl()
	&lt;&lt; put the position of this frame &gt;&gt;
	&lt;&lt; put the position of the log window &gt;&gt;

	self.put("&lt;/globals&gt;") ; self.put_nl()</t>
<t tx="edream.110203161858.825"># Puts an innumerate number of digits

self.put(" body_outline_ratio=") ; self.put_in_dquotes(`c.frame.ratio`)</t>
<t tx="edream.110203161858.826">width,height,left,top = get_window_info(self.frame.top)
#print ("t,l,h,w:" + `top` + ":" + `left` + ":" + `height` + ":" + `width`)

self.put_tab()
self.put("&lt;global_window_position")
self.put(" top=") ; self.put_in_dquotes(`top`)
self.put(" left=") ; self.put_in_dquotes(`left`)
self.put(" height=") ; self.put_in_dquotes(`height`)
self.put(" width=") ; self.put_in_dquotes(`width`)
self.put("/&gt;") ; self.put_nl()</t>
<t tx="edream.110203161858.827">top = left = height = width = 0 # no longer used
self.put_tab()
self.put("&lt;global_log_window_position")
self.put(" top=") ; self.put_in_dquotes(`top`)
self.put(" left=") ; self.put_in_dquotes(`left`)
self.put(" height=") ; self.put_in_dquotes(`height`)
self.put(" width=") ; self.put_in_dquotes(`width`)
self.put("/&gt;") ; self.put_nl()</t>
<t tx="edream.110203161858.828">def putHeader (self):

	tnodes = 0 ; clone_windows = 0 # Always zero in Leo2.

	self.put("&lt;leo_header")
	self.put(" file_format=") ; self.put_in_dquotes("2")
	self.put(" tnodes=") ; self.put_in_dquotes(`tnodes`)
	self.put(" max_tnode_index=") ; self.put_in_dquotes(`self.maxTnodeIndex`)
	self.put(" clone_windows=") ; self.put_in_dquotes(`clone_windows`)
	self.put("/&gt;") ; self.put_nl()</t>
<t tx="edream.110203161858.829"># Writes a Leo outline to s in a format suitable for pasting to the clipboard.

def putLeoOutline (self):

	self.outputString = "" ; self.outputFile = None
	self.usingClipboard = true
	self.assignFileIndices() # 6/11/03: Must do this for 3.x code.
	self.putProlog()
	self.putClipboardHeader()
	self.putVnodes()
	self.putTnodes()
	self.putPostlog()
	s = self.outputString
	self.outputString = None
	self.usingClipboard = false
	return s</t>
<t tx="edream.110203161858.830">def putPostlog (self):

	self.put("&lt;/leo_file&gt;") ; self.put_nl()</t>
<t tx="edream.110203161858.831">def putPrefs (self):

	c = self.commands ; config = app().config

	self.put("&lt;preferences")
	self.put(" allow_rich_text=") ; self.put_dquoted_bool(0) # no longer used
	
	&lt;&lt; put prefs that may exist in leoConfig.txt &gt;&gt;
	
	self.put("&lt;/preferences&gt;") ; self.put_nl()</t>
<t tx="edream.110203161858.832">language = c.target_language
for name in xml_language_names:
	s = string.lower(name)
	s = string.replace(s,"/","")
	if s == language:
		language = name ; break

if config.configsExist and not config.read_only: # 8/6/02
	pass # config.update has already been called.
else:
	self.put(" tab_width=") ; self.put_in_dquotes(`c.tab_width`)
	self.put(" page_width=") ; self.put_in_dquotes(`c.page_width`)
	self.put(" tangle_bat=") ; self.put_dquoted_bool(c.tangle_batch_flag)
	self.put(" untangle_bat=") ; self.put_dquoted_bool(c.untangle_batch_flag)
	self.put(" output_doc_chunks=") ; self.put_dquoted_bool(c.output_doc_flag)
	self.put(" use_header_flag=") ; self.put_dquoted_bool(c.use_header_flag)
	self.put(" defaultTargetLanguage=") ; self.put_in_dquotes(language) # 10/11/02: fix reversion.

self.put("&gt;") ; self.put_nl()
# New in version 0.16
&lt;&lt; put default directory &gt;&gt;</t>
<t tx="edream.110203161858.833">if config.configsExist:
	pass # Has been done earlier.
elif len(c.tangle_directory) &gt; 0:
	self.put_tab()
	self.put("&lt;defaultDirectory&gt;")
	self.putEscapedString(c.tangle_directory)
	self.put("&lt;/defaultDirectory&gt;")
	self.put_nl()</t>
<t tx="edream.110203161858.834">def putProlog (self):

	a = app() ; c = self.commands ; config = a.config

	&lt;&lt; Put the &lt;?xml...?&gt; line &gt;&gt;
	&lt;&lt; Put the optional &lt;?xml-stylesheet...?&gt; line &gt;&gt;

	self.put("&lt;leo_file&gt;") ; self.put_nl()</t>
<t tx="edream.110203161858.835"># 1/22/03: use self.leo_file_encoding encoding.
self.put(a.prolog_prefix_string)
self.put_dquote() ; self.put(self.leo_file_encoding) ; self.put_dquote()
self.put(a.prolog_postfix_string) ; self.put_nl()</t>
<t tx="edream.110203161858.836">if config.stylesheet or c.frame.stylesheet:
	
	# The stylesheet in the .leo file takes precedence over the default stylesheet.
	if c.frame.stylesheet:
		s = c.frame.stylesheet
	else:
		s = config.stylesheet
		
	tag = "&lt;?xml-stylesheet "
	# print "writing:", tag + s + "?&gt;"
	self.put(tag) ; self.put(s) ; self.put("?&gt;") ; self.put_nl()
</t>
<t tx="edream.110203161858.837">def putTnode (self,t):
	
	# if self.usingClipboard: trace(t.fileIndex)

	self.put("&lt;t")
	self.put(" tx=") ; self.put_in_dquotes("T" + `t.fileIndex`)
	self.put("&gt;")

	if t.bodyString and len(t.bodyString) &gt; 0:
		self.putEscapedString(t.bodyString)

	self.put("&lt;/t&gt;") ; self.put_nl()</t>
<t tx="edream.110203161858.838">def putTnodeList (self,v):
	
	"""Put the optional tnodeList attribute of a vnode."""

	fc = self
	if v.tnodeList:
		trace("%4d" % len(v.tnodeList),v)
		fc.put(" tnodeList=") ; fc.put_dquote()
		s = ','.join([str(t.fileIndex) for t in v.tnodeList])
		fc.put(s) ; fc.put_dquote()</t>
<t tx="edream.110203161858.839">def putTnodes (self):
	
	"""Puts all tnodes as required for copy or save commands"""

	c=self.commands
	if self.usingClipboard: # write the current tree.
		v = c.currentVnode() ; after = v.nodeAfterTree()
	else: # write everything
		v = c.rootVnode() ; after = None

	self.put("&lt;tnodes&gt;") ; self.put_nl()
	&lt;&lt; write only those tnodes that were referenced &gt;&gt;
	self.put("&lt;/tnodes&gt;") ; self.put_nl()</t>
<t tx="edream.110203161858.840"># Populate tnodes
tnodes = {}
while v and v != after:
	index = v.t.fileIndex
	if index &gt; 0 and not tnodes.has_key(index):
		tnodes[index] = v.t
	v = v.threadNext()

# Put all tnodes in index order.
keys = tnodes.keys() ; keys.sort()
for index in keys:
	t = tnodes[index]
	assert(t)
	# Write only those tnodes whose vnodes were written.
	if t.isVisited(): self.putTnode(t)</t>
<t tx="edream.110203161858.841">@ This writes full headline and body text for all vnodes, even orphan and @ignored nodes.  This allows all Leo outlines to be used as backup files.
@c

def putVnode (self,v,topVnode):

	fc = self ; c = fc.commands
	fc.put("&lt;v")
	&lt;&lt; Put tnode index if this vnode has body text &gt;&gt;
	&lt;&lt; Put attribute bits &gt;&gt;
	if hasattr(v,"tnodeList") and len(v.tnodeList) &gt; 0:
		fc.putTnodeList(v) # New in 4.0
	fc.put("&gt;")
	&lt;&lt; write the head text &gt;&gt;
	child = v.firstChild()
	if child:
		fc.put_nl()
		while child:
			fc.putVnode(child,topVnode)
			child = child.next()
	fc.put("&lt;/v&gt;") ; fc.put_nl()</t>
<t tx="edream.110203161858.842">t = v.t
if t and (t.hasBody() or len(v.t.joinList) &gt; 0):
	if t.fileIndex &gt; 0:
		fc.put(" t=") ; fc.put_in_dquotes("T" + `t.fileIndex`)
		v.t.setVisited() # Indicate we wrote the body text.
	else:
		es("error writing file(bad vnode)!")
		es("try using the Save To command")</t>
<t tx="edream.110203161858.843">current = c.currentVnode()
top = topVnode
if ( v.isCloned() or v.isExpanded() or v.isMarked() or
	v == current or v == top ):
	fc.put(" a=") ; fc.put_dquote()
	if v.isCloned(): fc.put("C")
	if v.isExpanded(): fc.put("E")
	if v.isMarked(): fc.put("M")
	if v.isOrphan(): fc.put("O")
	if v == top: fc.put("T")
	if v == current: fc.put("V")
	fc.put_dquote()</t>
<t tx="edream.110203161858.844">headString = v.headString()
if len(headString) &gt; 0:
	fc.put("&lt;vh&gt;")
	fc.putEscapedString(headString)
	fc.put("&lt;/vh&gt;")</t>
<t tx="edream.110203161858.845">@ This method puts all vnodes by starting the recursion.  putVnode will write all vnodes in the order in which they appear in the outline.
@c
def putVnodes (self):

	c=self.commands
	c.clearAllVisited()

	self.put("&lt;vnodes&gt;") ; self.put_nl()
	if self.usingClipboard:
		self.putVnode(
			c.currentVnode(), # Write only current tree.
			None) # Don't write top vnode status bit.
	else: 
		v = c.rootVnode()
		while v:
			self.putVnode(
				v, # Write the next top-level node.
				c.tree.topVnode) # Write the top-vnode status bit.
			v = v.next()
	self.put("&lt;/vnodes&gt;") ; self.put_nl()</t>
<t tx="edream.110203161858.846">def save(self,fileName):

	c = self.commands ; v = c.currentVnode()

	if not doHook("save1",c=c,v=v,fileName=fileName):
		c.beginUpdate()
		c.endEditing()# Set the current headline text.
		self.compactFileIndices()
		self.setDefaultDirectoryForNewFiles(fileName)
		if self.write_LEO_file(fileName,false): # outlineOnlyFlag
			c.setChanged(false) # Clears all dirty bits.
			es("saved: " + shortFileName(fileName))
			if app().config.save_clears_undo_buffer:
				es("clearing undo")
				c.undoer.clearUndoState()
		c.endUpdate()
	doHook("save2",c=c,v=v,fileName=fileName)</t>
<t tx="edream.110203161858.847">def saveAs(self,fileName):

	c = self.commands ; v = c.currentVnode()

	if not doHook("save1",c=c,v=v,fileName=fileName):
		c.beginUpdate()
		c.endEditing() # Set the current headline text.
		self.compactFileIndices()
		self.setDefaultDirectoryForNewFiles(fileName)
		if self.write_LEO_file(fileName,false): # outlineOnlyFlag
			c.setChanged(false) # Clears all dirty bits.
			es("saved: " + shortFileName(fileName))
		c.endUpdate()
	doHook("save2",c=c,v=v,fileName=fileName)
</t>
<t tx="edream.110203161858.848">def saveTo (self,fileName):

	c = self.commands ; v = c.currentVnode()

	if not doHook("save1",c=c,v=v,fileName=fileName):
		c.beginUpdate()
		c.endEditing()# Set the current headline text.
		self.compactFileIndices()
		self.setDefaultDirectoryForNewFiles(fileName)
		if self.write_LEO_file(fileName,false): # outlineOnlyFlag
			es("saved: " + shortFileName(fileName))
		c.endUpdate()
	doHook("save2",c=c,v=v,fileName=fileName)
</t>
<t tx="edream.110203161858.849">def setDefaultDirectoryForNewFiles (self,fileName):
	
	"""Set c.openDirectory for new files for the benefit of leoAtFile.scanAllDirectives."""
	
	c = self.commands

	if not c.openDirectory or len(c.openDirectory) == 0:
		dir = os.path.dirname(fileName)
		if len(dir) &gt; 0 and os.path.isabs(dir) and os.path.exists(dir):
			c.openDirectory = dir</t>
<t tx="edream.110203161858.850">def write_LEO_file(self,fileName,outlineOnlyFlag):

	c=self.commands ; config = app().config

	if not outlineOnlyFlag:
		try:
			# Leo2: write all @file nodes and set orphan bits.
			at = c.atFileCommands
			at.writeAll()
		except:
			es_error("exception writing derived files")
			es_exception()
			return false
			
	if self.read_only:
		es_error("read only: " + fileName)
		return false

	try:
		&lt;&lt; create backup file &gt;&gt;
		self.mFileName = fileName
		self.outputFile = open(fileName, 'wb') # 9/18/02
		if not self.outputFile:
			es("can not open " + fileName)
			&lt;&lt; delete backup file &gt;&gt;
			return false
		
		# 8/6/02: Update leoConfig.txt completely here.
		c.setIvarsFromFind()
		config.setConfigFindIvars(c)
		c.setIvarsFromPrefs()
		config.setCommandsIvars(c)
		config.update()
		
		self.putProlog()
		self.putHeader()
		self.putGlobals()
		self.putPrefs()
		self.putFindSettings()
		self.putVnodes()
		self.putTnodes()
		self.putPostlog()
		# raise BadLeoFile # testing
	except:
		es("exception writing: " + fileName)
		es_exception() 
		if self.outputFile:
			try:
				self.outputFile.close()
				self.outputFile = None
			except:
				es("exception closing: " + fileName)
				es_exception()
		&lt;&lt; erase filename and rename backupName to fileName &gt;&gt;
		return false

	if self.outputFile:
		try:
			self.outputFile.close()
			self.outputFile = None
		except:
			es("exception closing: " + fileName)
			es_exception()
		&lt;&lt; delete backup file &gt;&gt;
		return true
	else: # This probably will never happen because errors should raise exceptions.
		&lt;&lt; erase filename and rename backupName to fileName &gt;&gt;
		return false</t>
<t tx="edream.110203161858.851"># rename fileName to fileName.bak if fileName exists.
if os.path.exists(fileName):
	try:
		backupName = os.path.join(app().loadDir,fileName)
		backupName = fileName + ".bak"
		if os.path.exists(backupName):
			os.unlink(backupName)
		# os.rename(fileName,backupName)
		utils_rename(fileName,backupName)
	except:
		es("exception creating " + backupName)
		es_exception()
		backupName = None
else:
	backupName = None</t>
<t tx="edream.110203161858.852">if backupName and os.path.exists(backupName):
	try:
		os.unlink(backupName)
	except:
		es("exception deleting " + backupName)
		es_exception()
</t>
<t tx="edream.110203161858.853">es("error writing " + fileName)

if fileName and os.path.exists(fileName):
	try:
		os.unlink(fileName)
	except:
		es("exception deleting " + fileName)
		es_exception()
		
if backupName:
	es("restoring " + fileName + " from " + backupName)
	try:
		# os.rename(backupName, fileName)
		utils_rename(backupName, fileName)
	except:
		es("exception renaming " + backupName + " to " + fileName)
		es_exception()
</t>
<t tx="edream.110203161858.854">def writeAtFileNodes (self):
	
	c = self.commands

	c.atFileCommands.writeAll(writeAtFileNodesFlag=true)
	
	if not app().config.write_old_format_derived_files:
		es("auto-saving outline",color="blue")
		c.frame.OnSave() # Must be done to preserve tnodeList.</t>
<t tx="edream.110203161858.855">def writeDirtyAtFileNodes (self): # fileCommands

	"""The Write Dirty @file Nodes command"""

	self.commands.atFileCommands.writeAll(writeDirtyAtFileNodesFlag=true)</t>
<t tx="edream.110203161858.856">def writeMissingAtFileNodes (self):

	c = self.commands ; v = c.currentVnode()
	if v:
		at = c.atFileCommands
		at.writeMissing(v)</t>
<t tx="edream.110203161858.857">def writeOutlineOnly (self):

	c=self.commands
	c.endEditing()
	self.compactFileIndices()
	self.write_LEO_file(self.mFileName,true) # outlineOnlyFlag</t>
<t tx="edream.110203161858.858"># Surprisingly, this is a time critical routine.

def xmlEscape(self,s):

	assert(s and len(s) &gt; 0) # check is made in putEscapedString
	s = string.replace(s, '\r', '')
	s = string.replace(s, '&amp;', "&amp;amp;")
	s = string.replace(s, '&lt;', "&amp;lt;")
	s = string.replace(s, '&gt;', "&amp;gt;")
	return s</t>
<t tx="edream.110203161858.859">@language python

&lt;&lt; Theory of operation of find/change &gt;&gt;

from leoGlobals import *
import leoDialog
import string,sys,Tkinter,types
Tk=Tkinter

@others</t>
<t tx="edream.110203161858.860">@ The find and change commands are tricky; there are many details that must be handled properly. This documentation describes the leo.py code. Previous versions of Leo used an inferior scheme.  The following principles govern the leoFind class:

1.	Find and Change commands initialize themselves using only the state of the present Leo window. In particular, the Find class must not save internal state information from one invocation to the next. This means that when the user changes the nodes, or selects new text in headline or body text, those changes will affect the next invocation of any Find or Change command. Failure to follow this principle caused all kinds of problems in the Borland and Macintosh codes. There is one exception to this rule: we must remember where interactive wrapped searches start. This principle simplifies the code because most ivars do not persist. However, each command must ensure that the Leo window is left in a state suitable for restarting the incremental (interactive) Find and Change commands. Details of initialization are discussed below.

2. The Find and Change commands must not change the state of the outline or body pane during execution. That would cause severe flashing and slow down the commands a great deal. In particular, c.selectVnode and c.editVnode methods must not be called while looking for matches.

3. When incremental Find or Change commands succeed they must leave the Leo window in the proper state to execute another incremental command. We restore the Leo window as it was on entry whenever an incremental search fails and after any Find All and Change All command.

Initialization involves setting the self.c, self.v, self.in_headline, self.wrapping and self.s_text ivars. Setting self.in_headline is tricky; we must be sure to retain the state of the outline pane until initialization is complete. Initializing the Find All and Change All commands is much easier because such initialization does not depend on the state of the Leo window.

Using Tk.Text widgets for both headlines and body text results in a huge simplification of the code. Indeed, the searching code does not know whether it is searching headline or body text. The search code knows only that self.s_text is a Tk.Text widget that contains the text to be searched or changed and the insert and sel Tk attributes of self.search_text indicate the range of text to be searched. Searching headline and body text simultaneously is complicated. The selectNextVnode() method handles the many details involved by setting self.s_text and its insert and sel attributes.
</t>
<t tx="edream.110203161858.861">class leoFindBase (leoDialog.leoDialog):
	"""The base class for Leo's Find panel."""
	@others</t>
<t tx="edream.110203161858.862">def __init__(self,title,resizeable=false):

	leoDialog.leoDialog.__init__(self,title,resizeable)
	self.createTopFrame()
	self.top.protocol("WM_DELETE_WINDOW", self.onCloseWindow)</t>
<t tx="edream.110203161858.863">def onCloseWindow(self):

	self.top.withdraw()</t>
<t tx="edream.110203161858.864">def resetWrap (self,event=None):

	self.wrapVnode = None
	self.onlyVnode = None</t>
<t tx="edream.110203161858.865">def OnReturnKey (self,event):
	
	# Remove the newly inserted newline from the search &amp; change strings.
	for text in (self.find_text,self.change_text):
		ch = text.get("insert - 1c")
		if ch in ('\r','\n'):
			text.delete("insert - 1c")

	# Do the default command.
	self.findNextCommand(top())
	return "break"</t>
<t tx="edream.110203161858.866">class leoFind (leoFindBase):
	"""A class that implements Leo's find commands."""
	@others</t>
<t tx="edream.110203161858.867">def __init__(self):
	
	leoFindBase.__init__(self,"Leo Find/Change",resizeable=false)

	&lt;&lt; Initialize the leoFind ivars &gt;&gt;
	
	self.createFrame()</t>
<t tx="edream.110203161858.868">self.dict = {}

# Order is important for compatibility with 3.x.  Sheesh.
self.intKeys = [
	"batch", "wrap", "whole_word", "ignore_case", "node_only",
	"pattern_match", "search_headline", "search_body",
	"suboutline_only", "mark_changes", "mark_finds", "reverse"]
self.newIntKeys = ["script_change"]
self.newStringKeys = ["radio-find-type", "radio-search-scope"]
# self.stringKeys = ["change_text","find_text"]

for key in self.intKeys:
	self.dict[key] = Tk.IntVar()
for key in self.newIntKeys:
	self.dict[key] = Tk.IntVar()
for key in self.newStringKeys:
	self.dict[key] = Tk.StringVar()
	
# The c.x_flag ivars contain the user preferences.
# These are updated just before executing any find/change command.

# Ivars containing internal state...
self.commands = None # The commander for this search.
self.v = None # The vnode being searched.  Never saved between searches!
self.in_headline = false # true: searching headline text.
self.wrapping = false # true: wrapping is enabled. _not_ the same as c.wrap_flag for batch searches.
self.s_text = Tk.Text() # Used by find.search()

@ Initializing a wrapped search is tricky.  The search() method will fail if v==wrapVnode and pos &gt;= wrapPos.  selectNextVnode() will fail if v == wrapVnode.  We set wrapPos on entry, before the first search.  We set wrapVnode in selectNextVnode after the first search fails.  We also set wrapVnode on exit if the first search suceeds.
@c
self.wrapVnode = None # The start of wrapped searches: persists between calls.
self.onlyVnode = None # The starting node for suboutline-only searches.
self.wrapPos = None # The starting position of the wrapped search: persists between calls.</t>
<t tx="edream.110203161858.869">def createFrame (self):
	
	# Create the find panel...
	outer = Tk.Frame(self.frame,relief="groove",bd=2)
	outer.pack(padx=2,pady=2)

	&lt;&lt; Create the Find and Change panes &gt;&gt;
	&lt;&lt; Create four columns of radio and checkboxes &gt;&gt;
	&lt;&lt; Create two rows of buttons &gt;&gt;
	
	self.find_text.bind  ("&lt;1&gt;", self.resetWrap)
	self.change_text.bind("&lt;1&gt;", self.resetWrap)
	self.find_text.bind  ("&lt;Key&gt;", self.resetWrap)
	self.change_text.bind("&lt;Key&gt;", self.resetWrap)
</t>
<t tx="edream.110203161858.870">columnsFrame = Tk.Frame(outer,relief="groove",bd=2)
columnsFrame.pack(anchor="e",expand=1,padx="7m",pady="2m") # Don't fill.

numberOfColumns = 4 # Number of columns
columns = [] ; radioLists = [] ; checkLists = []
for i in xrange(numberOfColumns):
	columns.append(Tk.Frame(columnsFrame,bd=1))
	radioLists.append([])
	checkLists.append([])

for i in xrange(numberOfColumns):
	columns[i].pack(side="left",padx="1m") # fill="y" Aligns to top. padx expands columns.

radioLists[0] = [
	(self.dict["radio-find-type"],"Plain Search","plain-search"),  
	(self.dict["radio-find-type"],"Pattern Match Search","pattern-search"),
	(self.dict["radio-find-type"],"Script Search",None)] #"script-search")]
checkLists[0] = [
	("Script Change",None)] # self.dict["script_change"]),]
checkLists[1] = [
	("Whole Word",  self.dict["whole_word"]),
	("Ignore Case", self.dict["ignore_case"]),
	("Wrap Around", self.dict["wrap"]),
	("Reverse",     self.dict["reverse"])]
radioLists[2] = [
	(self.dict["radio-search-scope"],"Entire Outline","entire-outine"),
	(self.dict["radio-search-scope"],"Suboutline Only","suboutline-only"),  
	(self.dict["radio-search-scope"],"Node Only","snode-only"),           
	(self.dict["radio-search-scope"],"Selection Only",None)] # "selected-text-only")]
checkLists[2] = []
checkLists[3] = [
	("Search Headline Text", self.dict["search_headline"]),
	("Search Body Text",     self.dict["search_body"]),
	("Mark Finds",           self.dict["mark_finds"]),
	("Mark Changes",         self.dict["mark_changes"])]

for i in xrange(numberOfColumns):
	for var,name,val in radioLists[i]:
		box = Tk.Radiobutton(columns[i],anchor="w",text=name,variable=var,value=val)
		box.pack(fill="x")
		box.bind("&lt;1&gt;", self.resetWrap)
		if val == None: box.configure(state="disabled")
	for name, var in checkLists[i]:
		box = Tk.Checkbutton(columns[i],anchor="w",text=name,variable=var)
		box.pack(fill="x")
		box.bind("&lt;1&gt;", self.resetWrap)
		if var == None: box.configure(state="disabled")</t>
<t tx="edream.110203161858.871">fc = Tk.Frame(outer, bd="1m")
fc.pack(anchor="n", fill="x", expand=1)

# Removed unused height/width params: using fractions causes problems in some locales!
fpane = Tk.Frame(fc, bd=1)
cpane = Tk.Frame(fc, bd=1)

fpane.pack(anchor="n", expand=1, fill="x")
cpane.pack(anchor="s", expand=1, fill="x")

# Create the labels and text fields...
flab = Tk.Label(fpane, width=8, text="Find:")
clab = Tk.Label(cpane, width=8, text="Change:")

# Use bigger boxes for scripts.
self.find_text   = ftxt = Tk.Text(fpane, height=10, width=80)
self.change_text = ctxt = Tk.Text(cpane, height=10, width=80)

fBar = Tk.Scrollbar(fpane,name='findBar')
cBar = Tk.Scrollbar(cpane,name='changeBar')

# Add scrollbars.
for bar,txt in ((fBar,ftxt),(cBar,ctxt)):
	txt['yscrollcommand'] = bar.set
	bar['command'] = txt.yview
	bar.pack(side="right", fill="y")

flab.pack(side="left")
clab.pack(side="left")
ctxt.pack(side="right", expand=1, fill="both")
ftxt.pack(side="right", expand=1, fill="both")</t>
<t tx="edream.110203161858.872"># Create the button panes
buttons  = Tk.Frame(outer,bd=1)
buttons2 = Tk.Frame(outer,bd=1)
buttons.pack (anchor="n",expand=1,fill="x")
buttons2.pack(anchor="n",expand=1,fill="x")

# Create the first row of buttons
findButton=Tk.Button(buttons,width=8,text="Find",command=self.findButton)
contextBox=Tk.Checkbutton(buttons,anchor="w",text="Show Context",variable=self.dict["batch"])
findAllButton=Tk.Button(buttons,width=8,text="Find All",command=self.findAllButton)

findButton.pack   (pady="1m",padx="25m",side="left")
contextBox.pack   (pady="1m",          side="left",expand=1)
findAllButton.pack(pady="1m",padx="25m",side="right",fill="x",)

# Create the second row of buttons
changeButton    =Tk.Button(buttons2,width=8,text="Change",command=self.changeButton)
changeFindButton=Tk.Button(buttons2,        text="Change, Then Find",command=self.changeThenFindButton)
changeAllButton =Tk.Button(buttons2,width=8,text="Change All",command=self.changeAllButton)

changeButton.pack    (pady="1m",padx="25m",side="left")
changeFindButton.pack(pady="1m",          side="left",expand=1)
changeAllButton.pack (pady="1m",padx="25m",side="right")</t>
<t tx="edream.110203161858.873">def init (self,c):

	# N.B.: separate c.ivars are much more convenient than a dict.
	for key in self.intKeys:
		val = getattr(c, key + "_flag")
		self.dict[key].set(val)
		# trace(key,val)

	&lt;&lt; set widgets &gt;&gt;
	
	# Set radio buttons from ivars.
	val = self.dict["pattern_match"].get()
	self.dict["radio-find-type"].set(
		choose(val,"pattern-search","plain-search"))

	val = self.dict["suboutline_only"].get()
	self.dict["radio-search-scope"].set(
		choose(val,"suboutline-only","entire-outine"))</t>
<t tx="edream.110203161858.874">self.find_text.delete("1.0","end")
self.find_text.insert("end",c.find_text)

self.change_text.delete("1.0","end")
self.change_text.insert("end",c.change_text)</t>
<t tx="edream.110203161858.875">def set_ivars (self,c):
	
	# N.B.: separate c.ivars are much more convenient than a dict.
	for key in self.intKeys:
		val = self.dict[key].get()
		setattr(c, key + "_flag", val)
		# trace(key,val)

	# Set ivars from radio buttons.
	c.pattern_match_flag   = self.dict["radio-find-type"].get()    == "pattern-search"
	c.suboutline_only_flag = self.dict["radio-search-scope"].get() == "suboutline-only"

	s = self.find_text.get("1.0","end - 1c") # Remove trailing newline
	s = toUnicode(s,app().tkEncoding) # 2/25/03
	c.find_text = s

	s = self.change_text.get("1.0","end - 1c") # Remove trailing newline
	s = toUnicode(s,app().tkEncoding) # 2/25/03
	c.change_text = s</t>
<t tx="edream.110203161858.876"></t>
<t tx="edream.110203161858.877">
# The user has pushed the "Change" button from the find panel.

def changeButton(self):

	self.setup_button()
	self.change()</t>
<t tx="edream.110203161858.878"># The user has pushed the "Change All" button from the find panel.

def changeAllButton(self):

	c = self.setup_button()
	c.clearAllVisited() # Clear visited for context reporting.
	self.changeAll()</t>
<t tx="edream.110203161858.879"># The user has pushed the "Change Then Find" button from the find panel.

def changeThenFindButton(self):

	self.setup_button()
	self.changeThenFind()</t>
<t tx="edream.110203161858.880"># The user has pushed the "Find" button from the find panel.

def findButton(self):

	self.setup_button()
	self.findNext()</t>
<t tx="edream.110203161858.881"># The user has pushed the "Find All" button from the find panel.

def findAllButton(self):

	c = self.setup_button()
	c.clearAllVisited() # Clear visited for context reporting.
	self.findAll()</t>
<t tx="edream.110203161858.882"># The user has selected the "Replace" menu item.

def changeCommand(self,c):

	self.setup_command(c)
	self.change()</t>
<t tx="edream.110203161858.883"># The user has pushed the "Change Then Find" button from the Find menu.

def changeThenFindCommand(self,c):

	self.setup_command(c)
	self.changeThenFind()</t>
<t tx="edream.110203161858.884"># The user has selected the "Find Next" menu item.

def findNextCommand(self,c):

	self.setup_command(c)
	self.findNext()</t>
<t tx="edream.110203161858.885"># The user has selected the "Find Previous" menu item.

def findPreviousCommand(self,c):

	self.setup_command(c)
	c.reverse_flag = not c.reverse_flag
	self.findNext()
	c.reverse_flag = not c.reverse_flag</t>
<t tx="edream.110203161858.886"># Initializes a search when a button is pressed in the Find panel.

def setup_button(self):

	self.commands = c = app().log.commands
	self.v = c.currentVnode()
	assert(c)
	c.bringToFront()
	if 0: # We _must_ retain the editing status for incremental searches!
		c.endEditing()
	c.setIvarsFromFind()
	return c</t>
<t tx="edream.110203161858.887"># Initializes a search when a command is invoked from the menu.

def setup_command(self,c):

	self.commands = c
	self.v = c.currentVnode()
	if 0: # We _must_ retain the editing status for incremental searches!
		c.endEditing()
	c.setIvarsFromFind()</t>
<t tx="edream.110203161858.888"></t>
<t tx="edream.110203161858.889">@ This routine performs a single batch change operation, updating the head or body string of v and leaving the result in s_text.  We update the c.body if we are changing the body text of c.currentVnode().

s_text contains the found text on entry and contains the changed text on exit.  pos and pos2 indicate the selection.  The selection will never be empty. NB: we can not assume that self.v is visible.
@c

def batchChange (self,pos1,pos2,count):

	c = self.commands ; v = self.v ; st = self.s_text
	# Replace the selection with c.change_text
	# s = st.get("1.0","end") ; trace("entry:" + `s`)
	if st.compare(pos1, "&gt;", pos2):
		pos1,pos2=pos2,pos1
	st.delete(pos1,pos2)
	st.insert(pos1,c.change_text)
	s = st.get("1.0","end")
	# Update the selection.
	insert=choose(c.reverse_flag,pos1,pos1+'+'+`len(c.change_text)`+'c')
	st.tag_remove("sel","1.0","end")
	st.mark_set("insert",insert)
	# trace("result:" + `insert` + ", " + `s`)
	# Update the node
	if self.in_headline:
		&lt;&lt; set the undo head params &gt;&gt;
		v.initHeadString(s)
	else:
		&lt;&lt; set the undo body typing params &gt;&gt;
		v.setBodyStringOrPane(s)
	# Set mark, changed and dirty bits.
	if c.mark_changes_flag:
		v.setMarked()
	if not c.isChanged():
		c.setChanged(true)
	v.setDirty()</t>
<t tx="edream.110203161858.890">sel = None
if len(s) &gt; 0 and s[-1]=='\n': s = s[:-1]
if s != v.headString():
	if count == 1:
		c.undoer.setUndoParams("Change All",v) # Tag the start of the Change all.
	c.undoer.setUndoTypingParams(v,"Change Headline",v.bodyString(),s,sel,sel)</t>
<t tx="edream.110203161858.891">sel = c.body.index("insert")
if len(s) &gt; 0 and s[-1]=='\n': s = s[:-1]
if s != v.bodyString():
	if count == 1:
		c.undoer.setUndoParams("Change All",v) # Tag the start of the Change all.
	c.undoer.setUndoTypingParams(v,"Change",v.bodyString(),s,sel,sel)</t>
<t tx="edream.110203161858.892">def change(self):

	if self.checkArgs():
		self.initInHeadline()
		self.changeSelection()</t>
<t tx="edream.110203161858.893">def changeAll(self):

	c = self.commands ; st = self.s_text
	if not self.checkArgs():
		return
	self.initInHeadline()
	data = self.save()
	self.initBatchCommands()
	count = 0
	c.beginUpdate()
	while 1:
		pos1, pos2 = self.findNextMatch()
		if pos1:
			count += 1
			self.batchChange(pos1,pos2,count)
			line = st.get(pos1 + " linestart", pos1 + " lineend")
			self.printLine(line,allFlag=true)
		else: break
	c.endUpdate() # self.restore
	# Make sure the headline and body text are updated.
	v = c.currentVnode()
	c.tree.onHeadChanged(v)
	c.tree.onBodyChanged(v,"Can't Undo")
	if count &gt; 0:
		# A change was made.  Tag the end of the Change All command.
		c.undoer.setUndoParams("Change All",v)
	es("changed: " + `count`)
	self.restore(data)</t>
<t tx="edream.110203161858.894"># Replace selection with c.change_text.
# If no selection, insert c.change_text at the cursor.

def changeSelection(self):
	
	c = self.commands ; v = self.v
	# trace(`self.in_headline`)
	t = choose(self.in_headline,v.edit_text(),c.body)
	oldSel = sel = t.tag_ranges("sel")
	if len(sel) == 2:
		start,end = sel
		if start == end:
			sel = None
	if len(sel) != 2:
		es("No text selected")
		return false
	# trace(`sel` + ", " + `c.change_text`)
	# Replace the selection
	start,end = oldSel
	t.delete(start,end)
	t.insert(start,c.change_text)
	# 2/7/02: Also update s_text in case we find another match on the same line.
	self.s_text.delete(start,end)
	self.s_text.insert(start,c.change_text)
	# Update the selection for the next match.
	setTextSelection(t,start,start + "+" + `len(c.change_text)` + "c")
	newSel = getTextSelection(t)
	set_focus(c,t)

	c.beginUpdate()
	if c.mark_changes_flag:
		v.setMarked()
		c.tree.drawIcon(v,v.iconx,v.icony) # redraw only the icon.
	# update node, undo status, dirty flag, changed mark &amp; recolor
	if self.in_headline:
		c.tree.idle_head_key(v)
	else:
		c.tree.onBodyChanged(v,"Change",oldSel=oldSel,newSel=newSel)
	c.endUpdate(false) # No redraws here: they would destroy the headline selection.
	# trace(c.body.index("insert")+":"+c.body.get("insert linestart","insert lineend"))
	return true</t>
<t tx="edream.110203161858.895">def changeThenFind(self):

	if not self.checkArgs():
		return

	self.initInHeadline()
	if self.changeSelection():
		self.findNext(false) # don't reinitialize</t>
<t tx="edream.110203161858.896">def findAll(self):

	c = self.commands ; st = self.s_text
	if not self.checkArgs():
		return
	self.initInHeadline()
	data = self.save()
	self.initBatchCommands()
	count = 0
	c.beginUpdate()
	while 1:
		pos, newpos = self.findNextMatch()
		if pos:
			count += 1
			line = st.get(pos + " linestart", pos + " lineend")
			self.printLine(line,allFlag=true)
		else: break
	c.endUpdate()
	es("found: " + `count`)
	self.restore(data)</t>
<t tx="edream.110203161858.897">def findNext(self,initFlag = true):

	c = self.commands
	if not self.checkArgs():
		return
		
	if initFlag:
		self.initInHeadline()
		data = self.save()
		self.initInteractiveCommands()
	else:
		data = self.save()
	
	c.beginUpdate()
	pos, newpos = self.findNextMatch()
	c.endUpdate(false) # Inhibit redraws so that headline remains selected.
	
	if pos:
		self.showSuccess(pos,newpos)
	else:
		if self.wrapping:
			es("end of wrapped search")
		else:
			es("not found: " + "'" + c.find_text + "'")
		self.restore(data)</t>
<t tx="edream.110203161858.898"># Resumes the search where it left off.
# The caller must call set_first_incremental_search or set_first_batch_search.

def findNextMatch(self):

	c = self.commands

	if not c.search_headline_flag and not c.search_body_flag:
		return None, None

	if len(c.find_text) == 0:
		return None, None
		
	v = self.v
	while v:
		pos, newpos = self.search()
		if pos:
			if c.mark_finds_flag:
				v.setMarked()
				c.tree.drawIcon(v,v.iconx,v.icony) # redraw only the icon.
			return pos, newpos
		elif c.node_only_flag:
			# We are only searching one node.
			return None,None
		else:
			v = self.v = self.selectNextVnode()
	return None, None</t>
<t tx="edream.110203161858.899"># Selects the next node to be searched.

def selectNextVnode(self):

	c = self.commands ; v = self.v
	# trace(`v`)
	
	# Start suboutline only searches.
	if c.suboutline_only_flag and not self.onlyVnode:
		self.onlyVnode = v

	# Start wrapped searches.
	if self.wrapping and not self.wrapVnode:
		assert(self.wrapPos != None)
		self.wrapVnode = v

	if self.in_headline and c.search_body_flag:
		# just switch to body pane.
		self.in_headline = false
		self.initNextText()
		# trace(`v`)
		return v

	if c.reverse_flag:
		v = v.threadBack()
	else:
		v = v.threadNext()

	# Wrap if needed.
	if not v and self.wrapping and not c.suboutline_only_flag:
		v = c.rootVnode()
		if c.reverse_flag:
			# Set search_v to the last node of the tree.
			while v and v.next():
				v = v.next()
			if v: v = v.lastNode()

	# End wrapped searches.
	if self.wrapping and v and v == self.wrapVnode:
		# trace("ending wrapped search")
		v = None ; self.resetWrap()
		
	# End suboutline only searches.
	if (c.suboutline_only_flag and self.onlyVnode and v and
		(v == self.onlyVnode or not self.onlyVnode.isAncestorOf(v))):
		# trace("end outline-only")
		v = None ; self.onlyVnode = None

	self.v = v # used in initNextText().
	if v: # select v and set the search point within v.
		self.in_headline = c.search_headline_flag
		self.initNextText()
	return v</t>
<t tx="edream.110203161858.900">@ Searches the present headline or body text for c.find_text and returns true if found.
c.whole_word_flag, c.ignore_case_flag, and c.pattern_match_flag control the search.
@c

def search (self):

	c = self.commands ; v = self.v ; t = self.s_text
	assert(c and t and v)
	index = t.index("insert")
	stopindex = choose(c.reverse_flag,"1.0","end")
	while 1:
		# trace(`index`+":"+`stopindex`+":"+t.get(index+" linestart",index+" lineend"))
		pos = t.search(c.find_text,index,
			stopindex=stopindex,backwards=c.reverse_flag,
			regexp=c.pattern_match_flag,nocase=c.ignore_case_flag)
		if not pos:
			return None, None
		newpos = pos + "+" + `len(c.find_text)` + "c"
		if c.reverse_flag and t.compare(newpos,"==",index): # 10/3/02
			&lt;&lt; search again after getting stuck going backward &gt;&gt;
		# trace(`pos`+":"+`newpos`)
		&lt;&lt; return if we are passed the wrap point &gt;&gt;
		if c.whole_word_flag:
			index = t.index(choose(c.reverse_flag,pos,newpos))
			&lt;&lt; test for whole word match &gt;&gt;
			if not pos: continue
		# trace("found:" + `pos` + ":" + `newpos` + ":" + `v`)
		# set the insertion point.
		setTextSelection(t,pos,newpos)
		t.mark_set("insert",choose(c.reverse_flag,pos,newpos))
		return pos, newpos</t>
<t tx="edream.110203161858.901"># print "stuck"
index = newpos + "-" + `len(c.find_text)` + "c"
pos = t.search(c.find_text,index,
	stopindex=stopindex,backwards=c.reverse_flag,
	regexp=c.pattern_match_flag,nocase=c.ignore_case_flag)

if not pos:
	return None, None
newpos = pos + "+" + `len(c.find_text)` + "c"</t>
<t tx="edream.110203161858.902">if self.wrapping and self.wrapPos and self.wrapVnode and self.v == self.wrapVnode:
	if c.reverse_flag and t.compare(pos, "&lt;", self.wrapPos):
		# trace("wrap done")
		return None, None
	if not c.reverse_flag and t.compare(newpos, "&gt;", self.wrapPos):
		return None, None</t>
<t tx="edream.110203161858.903"># Set pos to None if word characters preceed or follow the selection.

before = t.get(pos + "-1c", pos)
first  = t.get(pos)
last   = t.get(newpos)
after  = t.get(newpos, newpos + "+1c")
# print before, first, last, after

if before and is_c_id(before) and first and is_c_id(first):
	pos = None
if after  and is_c_id(after)  and last  and is_c_id(last):
	pos = None</t>
<t tx="edream.110203161858.904"></t>
<t tx="edream.110203161858.905">def checkArgs (self):

	c = self.commands 
	val = true
	if not c.search_headline_flag and not c.search_body_flag:
		es("not searching headline or body")
		val = false
	if len(c.find_text) == 0:
		es("empty find patttern")
		val = false
	return val</t>
<t tx="edream.110203161858.906"># Initializes for the Find All and Change All commands.

def initBatchCommands (self):

	c = self.commands
	self.in_headline = c.search_headline_flag # Search headlines first.

	# Select the first node.
	if c.suboutline_only_flag:
		self.v = c.currentVnode()
	else:
		v = c.rootVnode()
		if c.reverse_flag:
			while v and v.next():
				v = v.next()
			v = v.lastNode()
		self.v = v
	
	# Set the insert point.
	self.initBatchText()</t>
<t tx="edream.110203161858.907">@ Returns s_text with "insert" point set properly for batch searches.
@c

def initBatchText(self):
	c = self.commands ; v = self.v ; st = self.s_text	
	s = choose(self.in_headline,v.headString(), v.bodyString())
	st.delete("1.0","end")
	st.insert("end",s)
	st.mark_set("insert",choose(c.reverse_flag,"end","1.0"))
	self.wrapping = false # Only interactive commands allow wrapping.
	return st

# Call this routine when moving to the next node when a search fails.
# Same as above except we don't reset wrapping flag.
def initNextText(self):
	c = self.commands ; v = self.v ; st = self.s_text	
	s = choose(self.in_headline,v.headString(), v.bodyString())
	st.delete("1.0","end")
	st.insert("end",s)
	st.mark_set("insert",choose(c.reverse_flag,"end","1.0"))
	return st</t>
<t tx="edream.110203161858.908"># Guesses which pane to start in for incremental searches and changes.
# This must not alter the current "insert" or "sel" marks.

def initInHeadline (self):

	c = self.commands ; v = self.v
	
	if c.search_headline_flag and c.search_body_flag:
		# Do not change this line without careful thought and extensive testing!
		self.in_headline = (v == c.tree.editVnode)
	else:
		self.in_headline = c.search_headline_flag</t>
<t tx="edream.110203161858.909"># For incremental searches

def initInteractiveCommands(self):

	c = self.commands ; v = self.v
	
	if self.in_headline:
		t = v.edit_text()
		c.tree.editVnode = v
		pos = t.index("insert")
		# trace(`pos` + ":" + `self.in_headline` + ":" + `v==c.tree.editVnode` + ":" + `v`)
	else:
		t = c.body
		pos = t.index("insert")

	st = self.initNextText()
	set_focus(c,t)
	st.mark_set("insert",pos)
	self.wrapping = c.wrap_flag
	if c.wrap_flag and self.wrapVnode == None:
		self.wrapPos = pos
		# Do not set self.wrapVnode here: that must be done after the first search.</t>
<t tx="edream.110203161858.910">def printLine (self,line,allFlag=false):

	c = self.commands
	both = c.search_body_flag and c.search_headline_flag
	context = c.batch_flag # "batch" now indicates context

	if allFlag and both and context:
		es(`self.v`)
		type = choose(self.in_headline,"head: ","body: ")
		es(type + line)
	elif allFlag and context and not self.v.isVisited():
		# We only need to print the context once.
		es(`self.v`)
		es(line)
		self.v.setVisited()
	else:
		es(line)</t>
<t tx="edream.110203161858.911"># Restores the screen after a search fails

def restore (self,data):

	c = self.commands
	in_headline,v,t,insert,start,end = data
	# trace(`insert` + ":" + `start` + ":" + `end`)
	# Don't try to reedit headline.
	c.selectVnode(v) 
	if not in_headline:
		if 0: # Looks bad.
			if start and end:
				setTextSelection(t,start,end)
		else: # Looks good and provides clear indication of failure or termination.
			t.tag_remove("sel","1.0","end")
		t.mark_set("insert",insert)
		t.see("insert")
		set_focus(c,t)</t>
<t tx="edream.110203161858.912">def save (self):

	c = self.commands ; v = self.v
	t = choose(self.in_headline,v.edit_text(),c.body)
	insert = t.index("insert")
	sel = t.tag_ranges("sel")
	if len(sel) == 2:
		start,end = sel
	else:
		start,end = None,None
	return (self.in_headline,v,t,insert,start,end)</t>
<t tx="edream.110203161858.913">@ This is used for displaying the final result.  It returns self.dummy_vnode, v.edit_text() or c.body with "insert" and "sel" points set properly.
@c

def showSuccess(self,pos,newpos):

	c = self.commands ; v = self.v
	
	c.beginUpdate() # Prevent all redraws except c.tree.redraw_now()
	if 1: # range of update...
		c.selectVnode(v)
		c.tree.redraw_now() # Redraw now so selections are not destroyed.
		# Select the found vnode again after redraw.
		if self.in_headline:
			c.editVnode(v)
			c.tree.setNormalLabelState(v)
			assert(v.edit_text())
		else:
			c.selectVnode(v)
	c.endUpdate(false) # Do not draw again!

	t = choose(self.in_headline,v.edit_text(),c.body)
	# trace(`self.in_headline` + "," + `t`)
	insert = choose(c.reverse_flag,pos,newpos)
	t.mark_set("insert",insert)
	setTextSelection(t,pos,newpos)
	if not self.in_headline:
		t.see(insert)
	set_focus(c,t)
	if c.wrap_flag and not self.wrapVnode:
		self.wrapVnode = self.v</t>
<t tx="edream.110203161858.914">@language python

from leoGlobals import *
import exceptions,sys,string,Tkinter,tkFont

class baseLeoFontPanel:
	"""The base class for Leo's font panel."""
	@others
	
class leoFontPanel (baseLeoFontPanel):
	"""A class that creates Leo's font panel."""
	pass</t>
<t tx="edream.110203161858.915"></t>
<t tx="edream.110203161858.916">def __init__ (self,c):
	
	Tk = Tkinter
	self.commands = c
	self.frame = c.frame
	self.default_font = "Courier"
	self.last_selected_font = None
	self.setRevertVars()
	# Variables to track values of style checkboxes.
	self.sizeVar = Tk.IntVar()
	self.boldVar = Tk.IntVar()
	self.italVar = Tk.IntVar()
	# Variables to track values of pane checkboxes.
	self.bodyVar = Tk.IntVar()
	self.logVar = Tk.IntVar()
	self.treeVar = Tk.IntVar()
	# Slots for callbacks
	self.listBoxIndex = 0
	self.family_list_box = None
	self.size_entry = None
	self.example_entry = None
	self.outer = None</t>
<t tx="edream.110203161858.917">def create_outer(self):

	Tk = Tkinter
	top = self.top
	&lt;&lt; Create the organizer frames &gt;&gt;
	&lt;&lt; create the font pane &gt;&gt;
	&lt;&lt; create the checkboxes &gt;&gt;
	&lt;&lt; create the buttons &gt;&gt;</t>
<t tx="edream.110203161858.918">self.outer = outer = Tk.Frame(top,bd=2,relief="groove",width="8i")
outer.pack(padx=2,pady=2,expand=1,fill="both")

upper = Tk.Frame(outer)
upper.pack(fill="both",expand=1)

lt = Tk.Frame(upper)
lt.pack(side="left",fill="both",expand=1)

rt = Tk.Frame(upper)
rt.pack(side="right",anchor="n",padx=4) # Not filling or expanding centers contents.

# Not filling or expanding centers contents.
# padx=20 gives more room to the Listbox in the lt frame!
lower = Tk.Frame(outer)
lower.pack(side="top",anchor="w",padx=20)</t>
<t tx="edream.110203161858.919"># Create the list box and its scrollbar.
self.family_list_box = box = Tk.Listbox(lt,height=7)

# Fill the listbox to set the width.
names = tkFont.families()
names = list(names)
names.sort()
for name in names:
	box.insert("end", name)

box.pack(padx=4,pady=4,fill="both",expand=1)
box.bind("&lt;Double-Button-1&gt;", self.update)

bar = Tk.Scrollbar(box)
bar.pack(side="right", fill="y")

bar.config(command=box.yview)
box.config(yscrollcommand=bar.set)</t>
<t tx="edream.110203161858.920"># Create the style checkboxes.
for text,var in (
	("Bold",self.boldVar),
	("Italic",self.italVar)):

	b = Tk.Checkbutton(rt,text=text,variable=var)
	b.pack(side="top",anchor="w")

# Create the size label and entry widget.
row = Tk.Frame(rt)
row.pack(side="top")

lab = Tk.Label(row,text="Size:")
lab.pack(side="left")

self.size_entry = e = Tk.Entry(row,width=4)
e.pack(side="left")
e.bind("&lt;Key&gt;",self.onSizeEntryKey)

# Create the pane checkboxes.
for text,var in (
	("Body",   self.bodyVar),
	("Outline",self.treeVar,),
	("Log",    self.logVar)):

	b = Tk.Checkbutton(rt,text=text,variable=var)
	b.pack(side="top",anchor="w")</t>
<t tx="edream.110203161858.921">for name,command in (
	("Apply",self.onApply),
	("OK",self.onOk),
	("Cancel",self.onCancel),
	("Revert",self.onRevert)):
		
	b = Tk.Button(lower,width=7,text=name,command=command)
	b.pack(side="left",anchor="w",pady=6,padx=4,expand=0)</t>
<t tx="edream.110203161858.922">def finishCreate (self):
	
	# self.commands.frame.top.resizable(0,0)
	
	# These do not get changed when reverted.
	self.bodyVar.set(1)
	self.logVar.set(0)
	self.treeVar.set(0)
	
	# All other vars do change when reverted.
	self.revertIvars()
	self.update()</t>
<t tx="edream.110203161858.923"></t>
<t tx="edream.110203161858.924">def onApply (self):
	
	self.update()
</t>
<t tx="edream.110203161858.925">def onCancel (self):

	c = self.commands
	self.onRevert()
	self.showSettings()
	self.hide()</t>
<t tx="edream.110203161858.926">def onOk (self):

	c = self.commands
	self.showSettings()
	
	&lt;&lt; update the configuration settings &gt;&gt;

	self.setRevertVars()
	self.hide()</t>
<t tx="edream.110203161858.927">set = app().config.setWindowPref

fn = c.body.cget("font")
font = tkFont.Font(font=fn)
name,size,slant,weight = self.getFontSettings(font)
set("body_text_font_family",name)
set("body_text_font_size",size)
set("body_text_font_slant",slant)
set("body_text_font_weight",weight)
	
fn = c.log.cget("font")
font = tkFont.Font(font=fn)
name,size,slant,weight = self.getFontSettings(font)
set("log_text_font_family",name)
set("log_text_font_size",size)
set("log_text_font_slant",slant)
set("log_text_font_weight",weight)
	
font = c.tree.getFont()
name,size,slant,weight = self.getFontSettings(font)
set("headline_text_font_family",name)
set("headline_text_font_size",size)
set("headline_text_font_slant",slant)
set("headline_text_font_weight",weight)</t>
<t tx="edream.110203161858.928">def onRevert (self):

	c = self.commands
	c.body.configure(font=self.revertBodyFont)
	c.log.configure (font=self.revertLogFont)
	c.tree.setFont  (font=self.revertTreeFont)
	c.redraw()
	self.revertIvars()
	# Don't call update here.</t>
<t tx="edream.110203161858.929"></t>
<t tx="edream.110203161858.930">def selectFont (self,font):
	
	box = self.family_list_box
	
	# All selections come here.
	self.last_selected_font = font

	# The name should be on the list!
	name, size, slant, weight = self.getFontSettings(font)
	for i in xrange(0,box.size()):
		item = box.get(i)
		if name == item:
			box.select_clear(0,"end")
			box.select_set(i)
			box.see(i)
			self.last_selected_font = font
			# trace(name)
			return
	# print "not found:" + name</t>
<t tx="edream.110203161858.931">def onSizeEntryKey (self,event=None):
	
	self.size_entry.after_idle(self.idle_entry_key)
	
def idle_entry_key (self):
	
	size = self.size_entry.get() # Doesn't work until idle time.
	try:
		size = int(size)
		self.sizeVar.set(size)
	except: # The user typed an invalid number.
		return</t>
<t tx="edream.110203161858.932"></t>
<t tx="edream.110203161858.933">@ Returns a font corresponding to present visual state of the font panel.  As a benign side effect, this routine selects the font in the list box.

Alas, the selection in the list box may have been cleared.  In that case, we must figure out what it should be. We recreate the family name (and only the family name!) from self.last_selected_font, or in an emergency the font returned from getImpliedFont().
@c

def getActiveFont (self):

	box = self.family_list_box
	family = font = None

	# Get the family name if possible, or font otherwise.
	items = box.curselection()
	if len(items) == 0:
		# Nothing selected.
		if self.last_selected_font:
			font =self.last_selected_font
		else:
			font = self.getImpliedFont()
	else:
		try: # This shouldn't fail now.
			items = map(int, items)
			family = box.get(items[0])
		except:
			es("unexpected exception")
			es_exception()
			font = self.getImpliedFont()
	# At this point we either have family or font.
	assert(font or family)
	if not family:
		# Extract the family from the computed font.
		family,junk,junk,junk = self.getFontSettings(font)
	# At last we have a valid family name!
	# Get all other font settings from the font panel.
	bold = self.boldVar.get()
	ital = self.italVar.get()
	size = self.sizeVar.get()
	# trace(`size`)
	slant=choose(ital,"italic","roman")
	weight=choose(bold,"bold","normal")
	# Compute the font from all the settings.
	font = tkFont.Font(family=family,size=size,slant=slant,weight=weight)
	self.selectFont(font)
	return font</t>
<t tx="edream.110203161858.934">def getFontSettings (self, font):

	name   = font.cget("family")
	size   = font.cget("size")
	slant  = font.cget("slant")
	weight = font.cget("weight")

	return name, size, slant, weight</t>
<t tx="edream.110203161858.935"># If a single pane's checkbox is checked, select that pane's present font.
# Otherwise, select the present font of some checked pane, it doesn't much matter which.
# If none are check, select the body pane's present font.

def getImpliedFont (self):

	c = self.commands

	body = self.bodyVar.get()
	log  = self.logVar.get()
	tree = self.treeVar.get()
	
	fn = c.body.cget("font")
	bodyFont = tkFont.Font(font=fn)
	fn = c.log.cget("font")
	logFont = tkFont.Font(font=fn)
	treeFont = c.tree.getFont()
	
	if log and not body and not tree:
		font = logFont
	elif tree and not body and not log:
		font = treeFont
	elif body: font = bodyFont
	elif tree: font = treeFont
	elif log:  font = logFont # Exercise for the reader: prove this case will never happen.
	else:      font = bodyFont
	return font</t>
<t tx="edream.110203161858.936">def hide (self):
	
	"""Hide the font panel."""
	
	c = self.commands
	
	# c.frame.top.resizable(1,1)
	
	if 1: # Hide the window, preserving its position.
		self.top.withdraw()
	else: # works.
		c.frame.fontPanel=None
		self.top.destroy()</t>
<t tx="edream.110203161858.937">def revertIvars (self):
	
	c = self.commands
	# Revert the fonts themselves in the various panes.
	font = self.revertBodyFont
	c.body.configure(font=font)
	font = self.revertLogFont
	c.log.configure(font=font)
	font = self.revertTreeFont
	c.tree.setFont(font=font)
	# Revert the setting of the items in the font panel
	self.last_selected_font = None # Use the font for the selected panes.
	font = self.getImpliedFont()
	self.selectFont(font)
	try:
		name, size, slant, weight = self.getFontSettings(font)
		size=int(size)
	except: pass
	self.sizeVar.set(size)
	self.boldVar.set(choose(weight=="bold",1,0))
	self.italVar.set(choose(slant=="italic",1,0))
	
	e = self.size_entry
	e.delete(0,"end")
	e.insert(0,`size`)</t>
<t tx="edream.110203161858.938">def run (self):
	
	Tk = Tkinter ; c = self.commands
	self.top = top = Tk.Toplevel(app().root)
	attachLeoIcon(top)
	top.title("Fonts for " + shortFileName(c.frame.title))
	top.protocol("WM_DELETE_WINDOW", self.onOk)
	self.create_outer()
	
	# This must be done _after_ the dialog has been built!
	w,h,x,y = center_dialog(top)
	top.wm_minsize(height=h,width=w)
	
	# Finish up after the dialog is frozen.
	self.outer.after_idle(self.finishCreate)

	if 0: # The pane now looks decent when resized!
		top.resizable(0,0)

	# Bring up the dialog.
	if 0: # It need not be modal: it will go away if the owning window closes!
		top.grab_set()
		top.focus_set() # Get all keystrokes.</t>
<t tx="edream.110203161858.939">def setRevertVars (self):
	
	c = self.commands
	
	# Variables for revert.
	fn = c.body.cget("font")
	self.revertBodyFont = tkFont.Font(font=fn)
	
	fn = c.log.cget("font")
	self.revertLogFont = tkFont.Font(font=fn)
	
	self.revertTreeFont = c.tree.getFont()</t>
<t tx="edream.110203161858.940"># Write all settings to the log panel.
# Note that just after a revert all three setting may be different.

def showSettings (self):
	c = self.commands
	es("---------------")
	# Body pane.
	fn = c.body.cget("font")
	font = tkFont.Font(font=fn)
	name,size,slant,weight = self.getFontSettings(font)
	es("body font:" + name + "," + `size` + "," + slant + "," + weight)
	# Log pane.
	fn = c.log.cget("font")
	font = tkFont.Font(font=fn)
	name,size,slant,weight = self.getFontSettings(font)
	es("log font:" + name + "," + `size` + "," + slant + "," + weight)
	# Tree pane.
	font = c.tree.getFont()
	name,size,slant,weight = self.getFontSettings(font)
	es("headline font:" + name + "," + `size` + "," + slant + "," + weight)</t>
<t tx="edream.110203161858.941">def update (self,event=None):
	
	"""Update the body text to show the present settings."""
	
	c = self.commands
	size = self.sizeVar.get()
	&lt;&lt; insert the new text in the size box &gt;&gt;
	activeFont = self.getActiveFont()
	bodyChecked = self.bodyVar.get()
	logChecked = self.logVar.get()
	treeChecked = self.treeVar.get()

	if not bodyChecked and not logChecked and not treeChecked:
		es("no pane selected")
		return
	

	# c.frame.body.configure(setgrid=0) # Disable body resizes.
	c.beginUpdate()
	&lt;&lt; set the fonts in all panes &gt;&gt;
	c.endUpdate()
	# c.frame.body.configure(setgrid=1) # Enable body resizes.

	self.top.deiconify()
	self.top.lift()</t>
<t tx="edream.110203161858.942">e = self.size_entry
e.delete(0,"end")
e.insert(0,`size`)</t>
<t tx="edream.110203161858.943">font = choose(bodyChecked,activeFont,self.revertBodyFont)
c.body.configure(font=font)

font = choose(logChecked,activeFont,self.revertLogFont)
c.log.configure(font=font)

font = choose(treeChecked,activeFont,self.revertTreeFont)
c.tree.setFont(font=font)</t>
<t tx="edream.110203161858.944"># To do: Use config params for window height, width and bar color, relief and width.

@language python

__pychecker__ = 'argumentsused=0' # Pychecker param.

from leoGlobals import *
import leoColor,leoCommands,leoCompare,leoDialog,leoFontPanel,leoNodes,leoPlugins,leoPrefs,leoTree
import os,string,sys,Tkinter,tkFileDialog,tkFont
import tempfile

Tk = Tkinter

class baseLeoFrame:
	"""A base class for Leo's main frame class."""
	instances = 0
	@others

class LeoFrame (baseLeoFrame):
	"""A class that represents a Leo window."""
	pass
</t>
<t tx="edream.110203161858.945"></t>
<t tx="edream.110203161858.946">def __init__(self, title = None):

	Tk = Tkinter
	LeoFrame.instances += 1
	&lt;&lt; set the LeoFrame ivars &gt;&gt;
	self.top = top = Tk.Toplevel()
	if 0: # No longer needed now that Leo never creates more than one Leo frame on startup.
		top.withdraw()
	attachLeoIcon(top)
	
	if sys.platform=="win32":
		self.hwnd = top.frame()
		# trace("__init__", "frame.__init__: self.hwnd:" + `self.hwnd`)

	top.title(title)
	top.minsize(30,10) # In grid units. This doesn't work as I expect.
	
	c = None # Make sure we don't mess with c yet.
	self.createLeoFrame(top)
	self.commands = c = leoCommands.Commands(self)
	self.tree = leoTree.leoTree(self.commands, self.canvas)
	c.tree = self.tree
	self.setTabWidth(c.tab_width)
	&lt;&lt; create the first tree node &gt;&gt;
	v = c.currentVnode()
	if not doHook("menu1",c=c,v=v):
		self.createMenuBar(top)
	app().setLog(self,"frame.__init__") # the LeoFrame containing the log
	app().windowList.append(self)
	# Sign on.
	color = app().config.getWindowPref("log_error_color")
	es("Leo Log Window...",color=color)
	es("Leo 4.0 alpha 1, ",newline=0)
	n1,n2,n3,junk,junk=sys.version_info
	ver1 = "Python %d.%d.%d" % (n1,n2,n3)
	ver2 = ", Tk " + self.top.getvar("tk_patchLevel")
	es(ver1 + ver2) ; enl()
	
	self.top.protocol("WM_DELETE_WINDOW", self.OnCloseLeoEvent)
	self.top.bind("&lt;Button-1&gt;", self.OnActivateLeoEvent)
	
	self.top.bind("&lt;Activate&gt;", self.OnActivateLeoEvent) # Doesn't work on windows.
	self.top.bind("&lt;Deactivate&gt;", self.OnDeactivateLeoEvent) # Doesn't work on windows.

	self.top.bind("&lt;Control-KeyPress&gt;",self.OnControlKeyDown)
	self.top.bind("&lt;Control-KeyRelease&gt;",self.OnControlKeyUp)
	
	self.tree.canvas.bind("&lt;Button-1&gt;", self.OnActivateTree)
	self.log.bind("&lt;Button-1&gt;", self.OnActivateLog)
	
	self.body.bind("&lt;Button-1&gt;", self.OnBodyClick) # 2/8/03
	self.body.bind("&lt;Button-3&gt;", self.OnBodyRClick) # 2/8/03
	self.body.bind("&lt;Double-Button-1&gt;", self.OnBodyDoubleClick)
	self.body.bind("&lt;Key&gt;", self.tree.OnBodyKey)

	self.body.bind(virtual_event_name("Cut"), self.OnCut)
	self.body.bind(virtual_event_name("Copy"), self.OnCopy)
	self.body.bind(virtual_event_name("Paste"), self.OnPaste)
	
	# print_bindings("body",self.body)
	
	# Handle mouse wheel in the outline pane.
	if sys.platform == "linux2": # This crashes tcl83.dll
		self.tree.canvas.bind("&lt;MouseWheel&gt;", self.OnMouseWheel)
		
	# Remove the initially selected node from the list.
	c.beadPointer = -1
	c.beadList = []
	c.visitedList = []
	doHook("after-create-leo-frame",c=c)</t>
<t tx="edream.110203161858.947"># Set title and fileName
if title:
	self.mFileName = title
	title = self.setWindowTitle(title)
else:
	title = "untitled"
	n = app().numberOfWindows
	if n &gt; 0: title += `n`
	app().numberOfWindows = n+1
	self.mFileName = ""
	
self.stylesheet = None # The contents of &lt;?xml-stylesheet...?&gt; line.

# These are set the first time a panel is opened.
# The panel remains open (perhaps hidden) until this frame is closed.
self.colorPanel = None 
self.fontPanel = None 
self.prefsPanel = None
self.comparePanel = None
	
self.outlineToNowebDefaultFileName = "noweb.nw" # For Outline To Noweb dialog.
self.title=title # Title of window, not including dirty mark
self.saved=false # True if ever saved
self.startupWindow=false # True if initially opened window
self.openDirectory = ""
self.es_newlines = 0 # newline count for this log stream

self.splitVerticalFlag,self.ratio,self.secondary_ratio = self.initialRatios()

# Created in createLeoFrame and its allies.
self.commands = None
self.tree = None
self.f1 = self.f2 = None
self.log = None  ; self.logBar = None
self.body = None ; self.bodyBar = None ; self.bodyXBar = None
self.canvas = None ; self.treeBar = None
self.splitter1 = self.splitter2 = None
self.icon = None
self.outerFrame = None # 5/20/02
self.iconFrame = None # 5/20/02
self.statusFrame = None # 5/20/02
self.statusText = None # 5/20/02
self.statusLabel = None # 5/20/02

self.menus = {} # Menu dictionary.
self.menuShortcuts = None # List of menu shortcuts for warnings.

# Used by event handlers...
self.redrawCount = 0
self.draggedItem = None
self.recentFiles = [] # List of recent files
self.controlKeyIsDown = false # For control-drags

# Colors of log pane.
self.logColorTags = [] # list of color names used as tags in log window.
self.statusColorTags = [] # list of color names used as tags in status window.

# Previous row and column shown in the status area.
self.lastStatusRow = self.lastStatusCol = 0
self.tab_width = 0 # The tab width in effect in this pane.</t>
<t tx="edream.110203161858.948">t = leoNodes.tnode()
v = leoNodes.vnode(c,t)
v.initHeadString("NewHeadline")
v.moveToRoot()

c.beginUpdate()
c.tree.redraw()
c.tree.canvas.focus_get()
c.editVnode(v)
c.endUpdate(false)</t>
<t tx="edream.110203161858.949">def __repr__ (self):

	return "&lt;leoFrame: %s&gt;" % (self.title)
</t>
<t tx="edream.110203161858.950">def setWindowTitle (self,fileName):
	
	path,fn = os.path.split(fileName)
	if path and len(path) &gt; 0:
		title = fn + " in " + path
	else:
		title = fn
	return title</t>
<t tx="edream.110203161858.951">def createLeoFrame (self,top):

	Tk = Tkinter ; config = app().config
	
	self.outerFrame = outerFrame = Tk.Frame(top)
	self.outerFrame.pack(expand=1,fill="both")

	self.createIconBar()
	&lt;&lt; create both splitters &gt;&gt;
	&lt;&lt; create the body pane &gt;&gt;
	&lt;&lt; create the tree pane &gt;&gt;
	&lt;&lt; create the log pane &gt;&gt;
	self.reconfigurePanes()
	
	self.createStatusLine()
	self.putStatusLine("Welcome to Leo")
</t>
<t tx="edream.110203161858.952"># Splitter 1 is the main splitter containing splitter2 and the body pane.
f1,bar1,split1Pane1,split1Pane2 = self.createLeoSplitter(outerFrame, self.splitVerticalFlag)
self.f1,self.bar1 = f1,bar1
self.split1Pane1,self.split1Pane2 = split1Pane1,split1Pane2
# Splitter 2 is the secondary splitter containing the tree and log panes.
f2,bar2,split2Pane1,split2Pane2 = self.createLeoSplitter(split1Pane1, not self.splitVerticalFlag)
self.f2,self.bar2 = f2,bar2
self.split2Pane1,self.split2Pane2 = split2Pane1,split2Pane2</t>
<t tx="edream.110203161858.953"># A light selectbackground value is needed to make syntax coloring look good.
wrap = config.getBoolWindowPref('body_pane_wraps')
wrap = choose(wrap,"word","none")

# Setgrid=1 cause severe problems with the font panel.
self.body = body = Tk.Text(split1Pane2,name='body',
	bd=2,bg="white",relief="flat",
	setgrid=0,wrap=wrap, selectbackground="Gray80") 
self.setBodyFontFromConfig()

self.bodyBar = bodyBar = Tk.Scrollbar(split1Pane2,name='bodyBar')
body['yscrollcommand'] = bodyBar.set
bodyBar['command'] = body.yview
bodyBar.pack(side="right", fill="y")

# 8/30/03: Always create the horizontal bar.
self.bodyXBar = bodyXBar = Tk.Scrollbar(
	split1Pane2,name='bodyXBar',orient="horizontal")
body['xscrollcommand'] = bodyXBar.set
bodyXBar['command'] = body.xview

if wrap == "none":
	bodyXBar.pack(side="bottom", fill="x")
	
body.pack(expand=1, fill="both")</t>
<t tx="edream.110203161858.954">scrolls = config.getBoolWindowPref('outline_pane_scrolls_horizontally')
scrolls = choose(scrolls,1,0)

self.canvas = tree = Tk.Canvas(split2Pane1,name="tree",
	bd=0,bg="white",relief="flat")
	
self.setTreeColorsFromConfig()

# The font is set in the tree code.

# These do nothing...
# selectborderwidth=0,selectforeground="white",selectbackground="white")
self.treeBar = treeBar = Tk.Scrollbar(split2Pane1,name="treeBar")

# Bind mouse wheel event to canvas
if sys.platform != "win32": # Works on 98, crashes on XP.
	self.canvas.bind("&lt;MouseWheel&gt;", self.OnMouseWheel)
	
tree['yscrollcommand'] = self.setCallback
treeBar['command']     = self.yviewCallback

treeBar.pack(side="right", fill="y")
if scrolls: 
	treeXBar = Tk.Scrollbar( 
		split2Pane1,name='treeXBar',orient="horizontal") 
	tree['xscrollcommand'] = treeXBar.set 
	treeXBar['command'] = tree.xview 
	treeXBar.pack(side="bottom", fill="x")
tree.pack(expand=1,fill="both")</t>
<t tx="edream.110203161858.955">wrap = config.getBoolWindowPref('log_pane_wraps')
wrap = choose(wrap,"word","none")

self.log = log = Tk.Text(split2Pane2,name="log",
	setgrid=0,wrap=wrap,bd=2,bg="white",relief="flat")
	
self.setLogFontFromConfig()

self.logBar = logBar = Tk.Scrollbar(split2Pane2,name="logBar")

log['yscrollcommand'] = logBar.set
logBar['command'] = log.yview

logBar.pack(side="right", fill="y")
# rr 8/14/02 added horizontal elevator 
if wrap == "none": 
	logXBar = Tk.Scrollbar( 
		split2Pane2,name='logXBar',orient="horizontal") 
	log['xscrollcommand'] = logXBar.set 
	logXBar['command'] = log.xview 
	logXBar.pack(side="bottom", fill="x")
log.pack(expand=1, fill="both")</t>
<t tx="edream.110203161858.956">def destroyAllPanels (self):
	
	"""Destroy all panels attached to this frame."""
	
	panels = (self.comparePanel, self.colorPanel, self.fontPanel, self.prefsPanel)

	for panel in panels:
		if panel:
			panel.top.destroy()
			
	self.comparePanel = None
	self.colorPanel = None
	self.fontPanel = None
	self.prefsPanel = None</t>
<t tx="edream.110203161858.957">def promptForSave (self):
	
	"""Prompt the user to save changes.
	
	Return true if the user vetos the quit or save operation."""
	
	c = self.commands
	name = choose(self.mFileName, self.mFileName, self.title)
	type = choose(app().quitting, "quitting?", "closing?")
	
	answer = leoDialog.askYesNoCancel("Confirm",
		'Save changes to %s before %s' % (name,type)).run(modal=true)
		
	# print answer	
	if answer == "cancel":
		return true # Veto.
	elif answer == "no":
		return false # Don't save and don't veto.
	else:
		if not self.mFileName:
			&lt;&lt; Put up a file save dialog to set mFileName &gt;&gt;
		if self.mFileName:
			# print "saving", self.mFileName
			c.fileCommands.save(self.mFileName)
			return false # Don't veto.
		else:
			return true # Veto.</t>
<t tx="edream.110203161858.958"># Make sure we never pass None to the ctor.
if not self.title:
	self.title = ""
	
self.mFileName = tkFileDialog.asksaveasfilename(
	initialfile = self.mFileName,
	title="Save",
	filetypes=[("Leo files", "*.leo")],
	defaultextension=".leo")
</t>
<t tx="edream.110203161858.959"></t>
<t tx="edream.110203161858.960">def configureBar (self, bar, verticalFlag):
	
	config = app().config

	# Get configuration settings.
	w = config.getWindowPref("split_bar_width")
	if not w or w &lt; 1: w = 7
	relief = config.getWindowPref("split_bar_relief")
	if not relief: relief = "flat"
	color = config.getWindowPref("split_bar_color")
	if not color: color = "LightSteelBlue2"

	try:
		if verticalFlag:
			# Panes arranged vertically; horizontal splitter bar
			bar.configure(relief=relief,height=w,bg=color,cursor="sb_v_double_arrow")
		else:
			# Panes arranged horizontally; vertical splitter bar
			bar.configure(relief=relief,width=w,bg=color,cursor="sb_h_double_arrow")
	except: # Could be a user error. Use all defaults
		es("exception in user configuration for splitbar")
		es_exception()
		if verticalFlag:
			# Panes arranged vertically; horizontal splitter bar
			bar.configure(height=7,cursor="sb_v_double_arrow")
		else:
			# Panes arranged horizontally; vertical splitter bar
			bar.configure(width=7,cursor="sb_h_double_arrow")</t>
<t tx="edream.110203161858.961">def configureBarsFromConfig (self):
	
	config = app().config

	w = config.getWindowPref("split_bar_width")
	if not w or w &lt; 1: w = 7
	
	relief = config.getWindowPref("split_bar_relief")
	if not relief or relief == "": relief = "flat"

	color = config.getWindowPref("split_bar_color")
	if not color or color == "": color = "LightSteelBlue2"

	if self.splitVerticalFlag:
		bar1,bar2=self.bar1,self.bar2
	else:
		bar1,bar2=self.bar2,self.bar1
		
	try:
		bar1.configure(relief=relief,height=w,bg=color)
		bar2.configure(relief=relief,width=w,bg=color)
	except: # Could be a user error.
		es("exception in user configuration for splitbar")
		es_exception()</t>
<t tx="edream.110203161858.962">def reconfigureFromConfig (self):
	
	f = self ; c = f.commands
	
	# Not ready yet: just reset the width and color.
	# We need self.bar1 and self.bar2 ivars.
	# self.reconfigureBar(...)
	
	# The calls to redraw are workarounds for an apparent Tk bug.
	# Without them the text settings get applied to the wrong widget!
	# Moreover, only this order seems to work on Windows XP...
	f.tree.setFontFromConfig()
	f.setTreeColorsFromConfig()
	f.configureBarsFromConfig()
	c.redraw()
	f.setBodyFontFromConfig()
	f.setTabWidth(c.tab_width)
	c.redraw()
	f.setLogFontFromConfig()
	c.redraw()</t>
<t tx="edream.110203161858.963">def setBodyFontFromConfig (self):
	
	config = app().config ; body = self.body
	#print "body",self.body
	
	font = config.getFontFromParams(
		"body_text_font_family", "body_text_font_size",
		"body_text_font_slant",  "body_text_font_weight")

	body.configure(font=font)
	
	bg = config.getWindowPref("body_text_background_color")
	if bg:
		try: body.configure(bg=bg)
		except: pass
	
	fg = config.getWindowPref("body_text_foreground_color")
	if fg:
		try: body.configure(fg=fg)
		except: pass
		
	# 1/24/03: Gareth McCaughan
	bg = config.getWindowPref("body_insertion_cursor_color")
	if bg:
		try: body.configure(insertbackground=bg)
		except: pass
		
	if sys.platform != "win32": # Maybe a Windows bug.
		fg = config.getWindowPref("body_cursor_foreground_color")
		bg = config.getWindowPref("body_cursor_background_color")
		# print fg, bg
		if fg and bg:
			cursor="xterm" + " " + fg + " " + bg
			try: body.configure(cursor=cursor)
			except:
				import traceback
				traceback.print_exc()</t>
<t tx="edream.110203161858.964">def setInitialWindowGeometry(self):
	
	"""Set the position and size of the frame to config params."""
	
	config = app().config

	h = config.getIntWindowPref("initial_window_height")
	w = config.getIntWindowPref("initial_window_width")
	x = config.getIntWindowPref("initial_window_left")
	y = config.getIntWindowPref("initial_window_top")
	# print h,w,x,y
	
	if h == None or h &lt; 5: h = 5
	if w == None or w &lt; 5: w = 10
	y = max(y,0) ; x = max(x,0)

	self.top.geometry("%dx%d%+d%+d" % (w,h,x,y))</t>
<t tx="edream.110203161858.965">def setLogFontFromConfig (self):

	log = self.log ; config = app().config
	#print "log",self.log

	font = config.getFontFromParams(
		"log_text_font_family", "log_text_font_size",
		"log_text_font_slant",  "log_text_font_weight")
	
	log.configure(font=font)

	bg = config.getWindowPref("log_text_background_color")
	if bg:
		try: log.configure(bg=bg)
		except: pass
	
	fg = config.getWindowPref("log_text_foreground_color")
	if fg:
		try: log.configure(fg=fg)
		except: pass

</t>
<t tx="edream.110203161858.966">def setTabWidth (self, w):
	
	try: # This can fail when called from scripts
		# Use the present font for computations.
		font = self.body.cget("font")
		root = app().root # 4/3/03: must specify root so idle window will work properly.
		font = tkFont.Font(root=root,font=font)
		tabw = font.measure(" " * abs(w)) # 7/2/02
		# tablist = `tabw` + ' ' + `2*tabw`
		self.body.configure(tabs=tabw)
		self.tab_width = w
		# print "frame.setTabWidth:" + `w` + "," + `tabw`
	except:
		es_exception()
		pass
</t>
<t tx="edream.110203161858.967">def setTreeColorsFromConfig (self):
	
	config = app().config ; tree = self.tree

	bg = config.getWindowPref("outline_pane_background_color")
	if bg:
		try: self.canvas.configure(bg=bg)
		except: pass
</t>
<t tx="edream.110203161858.968">def setWrap (self,v):
	
	c = self.commands
	dict = scanDirectives(c,v)
	if dict != None:
		# 8/30/03: Add scroll bars if we aren't wrapping.
		wrap = dict.get("wrap")
		if wrap:
			self.body.configure(wrap="word")
			self.bodyXBar.pack_forget()
		else:
			self.body.configure(wrap="none")
			self.bodyXBar.pack(side="bottom",fill="x")
</t>
<t tx="edream.110203161858.969">def reconfigurePanes (self):
	
	border = app().config.getIntWindowPref('additional_body_text_border')
	if border == None: border = 0
	
	# The body pane needs a _much_ bigger border when tiling horizontally.
	border = choose(self.splitVerticalFlag,2+border,6+border)
	self.body.configure(bd=border)
	
	# The log pane needs a slightly bigger border when tiling vertically.
	border = choose(self.splitVerticalFlag,4,2) 
	self.log.configure(bd=border)</t>
<t tx="edream.110203161858.970">def setCallback (self,*args,**keys):
	
	"""Callback to adjust the scrollbar.
	
	Args is a tuple of two floats describing the fraction of the visible area."""

	# if self.tree.trace: print "setCallback:",self.tree.redrawCount,`args`

	apply(self.treeBar.set,args,keys)

	if self.tree.allocateOnlyVisibleNodes:
		self.tree.setVisibleArea(args)
		
def yviewCallback (self,*args,**keys):
	
	"""Tell the canvas to scroll"""
	
	# if self.tree.trace: print "vyiewCallback",`args`,`keys`

	if self.tree.allocateOnlyVisibleNodes:
		self.tree.allocateNodesBeforeScrolling(args)

	apply(self.canvas.yview,args,keys)
	
	
</t>
<t tx="edream.110203161858.971"></t>
<t tx="edream.110203161858.972"># Called from quit logic and when user closes the window.
# Returns true if the close happened.

def OnCloseLeoEvent(self):

	app().closeLeoWindow(self)</t>
<t tx="edream.110203161858.973">def OnControlKeyDown (self,event=None):
	
	self.controlKeyIsDown = true
	
def OnControlKeyUp (self,event=None):

	self.controlKeyIsDown = false
</t>
<t tx="edream.110203161858.974"># Handle the "visibility" event and attempt to attach the Leo icon.
# This code must be executed whenever the window is redrawn.

def OnVisibility (self,event):

	if self.icon and event.widget is self.top:

		# print "OnVisibility"
		self.icon.attach(self.top)</t>
<t tx="edream.110203161858.975">def OnActivateBody (self,event=None):

	try:
		c = self.commands ; v = c.currentVnode()
		app().setLog(self,"OnActivateBody")
		self.tree.OnDeactivate()
		set_focus(c,c.body)
	except:
		es_event_exception("activate body")


</t>
<t tx="edream.110203161858.976">def OnActivateLeoEvent(self,event=None):

	try:
		app().setLog(self,"OnActivateLeoEvent")
	except:
		es_event_exception("activate Leo")

def OnDeactivateLeoEvent(self,event=None):

	try:
		app().setLog(None,"OnDeactivateLeoEvent")
	except:
		es_event_exception("deactivate Leo")</t>
<t tx="edream.110203161858.977">def OnActivateLog (self,event=None):

	try:
		app().setLog(self,"OnActivateLog")
		self.tree.OnDeactivate()
	except:
		es_event_exception("activate log")</t>
<t tx="edream.110203161858.978">def OnActivateTree (self,event=None):

	try:
		c = self.commands
		app().setLog(self,"OnActivateTree")
		self.tree.undimEditLabel()
		set_focus(c,c.frame.body) # 7/12/03
	except:
		es_event_exception("activate tree")
</t>
<t tx="edream.110203161858.979">def OnBodyClick (self,event=None):

	try:
		c = self.commands ; v = c.currentVnode()
		if not doHook("bodyclick1",c=c,v=v,event=event):
			self.OnActivateBody(event=event)
		doHook("bodyclick2",c=c,v=v,event=event)
	except:
		es_event_exception("bodyclick")

def OnBodyRClick(self,event=None):
	
	try:
		c = self.commands ; v = c.currentVnode()
		if not doHook("bodyrclick1",c=c,v=v,event=event):
			pass # By default Leo does nothing.
		doHook("bodyrclick2",c=c,v=v,event=event)
	except:
		es_event_exception("iconrclick")</t>
<t tx="edream.110203161858.980">def OnBodyDoubleClick (self,event=None):

	try:
		c = self.commands ; v = c.currentVnode()
		if not doHook("bodydclick1",c=c,v=v,event=event):
			if event: # 8/4/02: prevent wandering insertion point.
				index = "@%d,%d" % (event.x, event.y) # Find where we clicked
			body = self.body
			start = body.index(index + " wordstart")
			end = body.index(index + " wordend")
			setTextSelection(self.body,start,end)
		doHook("bodydclick1",c=c,v=v,event=event)
	except:
		es_event_exception("bodydclick")

	return "break" # Inhibit all further event processing.</t>
<t tx="edream.110203161858.981"># Contributed by Tomaz Ficko.  This works on some systems.
# On XP it causes a crash in tcl83.dll.  Clearly a Tk bug.

def OnMouseWheel(self, event=None):

	try:
		if event.delta &lt; 1:
			self.canvas.yview(Tkinter.SCROLL, 1, Tkinter.UNITS)
		else:
			self.canvas.yview(Tkinter.SCROLL, -1, Tkinter.UNITS)
	except:
		es_event_exception("scroll wheel")

	return "break"</t>
<t tx="edream.110203161858.982"></t>
<t tx="edream.110203161858.983">def createIconBar (self):
	
	"""Create an empty icon bar in the packer's present position"""

	if not self.iconFrame:
		self.iconFrame = Tk.Frame(self.outerFrame,height="5m",bd=2,relief="groove")
		self.iconFrame.pack(fill="x",pady=2)</t>
<t tx="edream.110203161858.984">def hideIconBar (self):
	
	"""Hide the icon bar by unpacking it.
	
	A later call to showIconBar will repack it in a new location."""
	
	if self.iconFrame:
		self.iconFrame.pack_forget()
</t>
<t tx="edream.110203161858.985">def clearIconBar(self):
	
	"""Destroy all the widgets in the icon bar"""
	
	a = app() ; f = self.iconFrame
	if not f: return
	
	for slave in f.pack_slaves():
		slave.destroy()

	f.configure(height="5m") # The default height.
	a.iconWidgetCount = 0
	a. iconImageRefs = []
</t>
<t tx="edream.110203161858.986">def showIconBar(self):
	
	"""Show the icon bar by repacking it"""

	self.iconFrame.pack(fill="x",pady=2)</t>
<t tx="edream.110203161858.987">def addIconButton(self,text=None,imagefile=None,image=None,command=None,bg=None):
	
	"""Add a button containing text or a picture to the icon bar.
	
	Pictures take precedence over text"""
	
	a = app() ; f = self.iconFrame
	if not imagefile and not image and not text: return

	# First define n.	
	try:
		a.iconWidgetCount += 1
		n = a.iconWidgetCount
	except:
		n = a.iconWidgetCount = 1

	if not command:
		def command(n=n):
			print "command for widget %s" % (n)

	if imagefile or image:
		&lt;&lt; create a picture &gt;&gt;
	elif text:
		w = min(6,len(text))
		b = Tk.Button(f,text=text,width=w,relief="groove",bd=2,command=command)
		b.pack(side="left", fill="y")
		return b
		
	return None</t>
<t tx="edream.110203161858.988">try:
	if imagefile:
		# Create the image.  Throws an exception if file not found
		imagefile = os.path.join(app().loadDir,imagefile)
		imagefile = os.path.normpath(imagefile)
		image = Tkinter.PhotoImage(master=app().root,file=imagefile)
		
		# Must keep a reference to the image!
		try:
			refs = a.iconImageRefs
		except:
			refs = a.iconImageRefs = []
	
		refs.append((imagefile,image),)
	
	if not bg:
		bg = f.cget("bg")

	b = Tk.Button(f,image=image,relief="flat",bd=0,command=command,bg=bg)
	b.pack(side="left",fill="y")
	return b
	
except:
	es_exception()
	return None</t>
<t tx="edream.110203161858.989">def longFileName (self):
	return self.mFileName
	
def shortFileName (self):
	return shortFileName(self.mFileName)</t>
<t tx="edream.110203161858.990"># All output to the log stream eventually comes here.

def put (self,s,color=None):
	# print `app().quitting`,`self.log`
	if app().quitting: return
	if self.log:
		if type(s) == type(u""): # 3/18/03
			s = toEncodedString(s,app().tkEncoding)
		if color:
			if color not in self.logColorTags:
				self.logColorTags.append(color)
				self.log.tag_config(color,foreground=color)
			self.log.insert("end",s)
			self.log.tag_add(color,"end-%dc" % (len(s)+1),"end-1c")
			if "black" not in self.logColorTags:
				self.logColorTags.append("black")
				self.log.tag_config("black",foreground="black")
			self.log.tag_add("black","end")
		else:
			self.log.insert("end",s)
		self.log.see("end")
		self.log.update_idletasks()
	else:
		app().logWaiting.append((s,color),) # 2/25/03
		print "Null log"
		if type(s) == type(u""): # 3/18/03
			s = toEncodedString(s,"ascii")
		print s

def putnl (self):
	if app().quitting: return
	if self.log:
		self.log.insert("end",'\n')
		self.log.see("end")
		self.log.update_idletasks()
	else:
		app().logWaiting.append(('\n',"black"),) # 6/28/03
		print "Null log"
		print</t>
<t tx="edream.110203161858.991">def getFocus(self):
	
	"""Returns the widget that has focus, or body if None."""

	f = self.top.focus_displayof()
	if f:
		return f
	else:
		return self.body</t>
<t tx="edream.110203161858.992"></t>
<t tx="edream.110203161858.993">@ This code "canonicalizes" both the shortcuts that appear in menus and the arguments to bind, mostly ignoring case and the order in which special keys are specified in leoConfig.txt.

For example, Ctrl+Shift+a is the same as Shift+Control+A.  Either may appear in leoConfig.txt.  Each generates Shift+Ctrl-A in the menu and Control+A as the argument to bind.

Returns (bind_shortcut, menu_shortcut)
@c

def canonicalizeShortcut (self,shortcut):
	
	if shortcut == None or len(shortcut) == 0:
		return None,None
	s = shortcut.strip().lower()
	has_alt   = s.find("alt") &gt;= 0
	has_ctrl  = s.find("control") &gt;= 0 or s.find("ctrl") &gt;= 0
	has_shift = s.find("shift") &gt;= 0   or s.find("shft") &gt;= 0
	&lt;&lt; set the last field, preserving case &gt;&gt;
	&lt;&lt; canonicalize the last field &gt;&gt;
	&lt;&lt; synthesize the shortcuts from the information &gt;&gt;
	# print shortcut,bind_shortcut,menu_shortcut
	return bind_shortcut,menu_shortcut</t>
<t tx="edream.110203161858.994">bind_last = menu_last = last
if len(last) == 1:
	ch = last[0]
	if ch in string.letters:
		menu_last = string.upper(last)
		if has_shift:
			bind_last = string.upper(last)
		else:
			bind_last = string.lower(last)
	elif ch in string.digits:
		bind_last = "Key-" + ch # 1-5 refer to mouse buttons, not keys.
	else:
		&lt;&lt; define dict of Tk bind names &gt;&gt;
		if ch in dict.keys():
			bind_last = dict[ch]
elif len(last) &gt; 0:
	&lt;&lt; define dict of special names &gt;&gt;
	last2 = string.lower(last)
	if last2 in dict.keys():
		bind_last,menu_last = dict[last2]</t>
<t tx="edream.110203161858.995"># These are defined at http://tcl.activestate.com/man/tcl8.4/TkCmd/keysyms.htm.
dict = {
	"!" : "exclam",
	'"' : "quotedbl",
	"#" : "numbersign",
	"$" : "dollar",
	"%" : "percent",
	"&amp;" : "ampersand",
	"'" : "quoteright",
	"(" : "parenleft",
	")" : "parenright",
	"*" : "asterisk",
	"+" : "plus",
	"," : "comma",
	"-" : "minus",
	"." : "period",
	"/" : "slash",
	":" : "colon",
	";" : "semicolon",
	"&lt;" : "less",
	"=" : "equal",
	"&gt;" : "greater",
	"?" : "question",
	"@" : "at",
	"[" : "bracketleft",
	"\\": "backslash",
	"]" : "bracketright",
	"^" : "asciicircum",
	"_" : "underscore",
	"`" : "quoteleft",
	"{" : "braceleft",
	"|" : "bar",
	"}" : "braceright",
	"~" : "asciitilde" }</t>
<t tx="edream.110203161858.996"># These keys are simply made-up names.  The menu_bind values are known to Tk.
# Case is not significant in the keys.

dict = {
	"bksp"    : ("BackSpace","BkSp"),
	"esc"     : ("Escape","Esc"),
	# Arrow keys...
	"dnarrow" : ("Down", "DnArrow"),
	"ltarrow" : ("Left", "LtArrow"),
	"rtarrow" : ("Right","RtArrow"),
	"uparrow" : ("Up",   "UpArrow"),
	# Page up/down keys...
	"pageup"  : ("Prior","PgUp"),
	"pagedn"  : ("Next", "PgDn")
}

@  The following are not translated, so what appears in the menu is the same as what is passed to Tk.  Case is significant.

Note: the Tk documentation states that not all of these may be available on all platforms.

F1,F2,F3,F4,F5,F6,F7,F8,F9,F10,
BackSpace, Break, Clear, Delete, Escape, Linefeed, Return, Tab,
Down, Left, Right, Up,
Begin, End, Home, Next, Prior,
Num_Lock, Pause, Scroll_Lock, Sys_Req,
KP_Add, KP_Decimal, KP_Divide, KP_Enter, KP_Equal,
KP_Multiply, KP_Separator,KP_Space, KP_Subtract, KP_Tab,
KP_F1,KP_F2,KP_F3,KP_F4,
KP_0,KP_1,KP_2,KP_3,KP_4,KP_5,KP_6,KP_7,KP_8,KP_9
</t>
<t tx="edream.110203161858.997">s2 = shortcut
s2 = string.strip(s2)

# Replace all minus signs by plus signs, except a trailing minus:
if len(s2) &gt; 0 and s2[-1] == "-":
	s2 = string.replace(s2,"-","+")
	s2 = s2[:-1] + "-"
else:
	s2 = string.replace(s2,"-","+")

fields = string.split(s2,"+")
if fields == None or len(fields) == 0:
	if not app().menuWarningsGiven:
		print "bad shortcut specifier:", s
	return None,None

last = fields[-1]
if last == None or len(last) == 0:
	if not app().menuWarningsGiven:
		print "bad shortcut specifier:", s
	return None,None</t>
<t tx="edream.110203161858.998">bind_head = menu_head = ""

if has_shift:
	menu_head = "Shift+"
	if len(last) &gt; 1 or (len(last)==1 and last[0] not in string.letters):
		bind_head = "Shift-"
	# else: print "no shift: last:", `last`

if has_alt:
	bind_head = bind_head + "Alt-"
	menu_head = menu_head + "Alt+"

if has_ctrl:
	bind_head = bind_head + "Control-"
	menu_head = menu_head + "Ctrl+"
	
bind_shortcut = "&lt;" + bind_head + bind_last + "&gt;"
menu_shortcut = menu_head + menu_last</t>
<t tx="edream.110203161858.999">def createMenuBar(self, top):

	c = self.commands
	Tk = Tkinter
	topMenu = Tk.Menu(top,postcommand=self.OnMenuClick)
	self.setMenu("top",topMenu)
	self.menuShortcuts = []
	# To do: use Meta rathter than Control for accelerators for Unix
	&lt;&lt; create the file menu &gt;&gt;
	&lt;&lt; create the edit menu &gt;&gt;
	&lt;&lt; create the outline menu &gt;&gt;
	doHook("create-optional-menus",c=c)
	&lt;&lt; create the window menu &gt;&gt;
	&lt;&lt; create the help menu &gt;&gt;
	top.config(menu=topMenu) # Display the menu.
	app().menuWarningsGiven = true
</t>
<t tx="edream.110203161858.1000">editMenu = self.createNewMenu("&amp;Edit")
&lt;&lt; create the first top-level edit entries &gt;&gt;
&lt;&lt; create the edit body submenu &gt;&gt;
&lt;&lt; create the edit headline submenu &gt;&gt;
&lt;&lt; create the find submenu &gt;&gt;
&lt;&lt; create the last top-level edit entries &gt;&gt;
</t>
<t tx="edream.110203161858.1001">table = (
	("Can't Undo","Ctrl+Z",self.OnUndo), # &amp;U reserved for Undo
	("Can't Redo","Shift+Ctrl+Z",self.OnRedo), # &amp;R reserved for Redo
	("-",None,None),
	("Cu&amp;t","Ctrl+X",self.OnCutFromMenu), 
	("Cop&amp;y","Ctrl+C",self.OnCopyFromMenu),
	("&amp;Paste","Ctrl+V",self.OnPasteFromMenu),
	("&amp;Delete",None,self.OnDelete),
	("Select &amp;All","Ctrl+A",self.OnSelectAll),
	("-",None,None))

self.createMenuEntries(editMenu,table)
</t>
<t tx="edream.110203161858.1002">editBodyMenu = self.createNewMenu("Edit &amp;Body...","Edit")

table = (
	("Extract &amp;Section","Shift+Ctrl+E",self.OnExtractSection),
	("Extract &amp;Names","Shift+Ctrl+N",self.OnExtractNames),
	("&amp;Extract","Shift+Ctrl+D",self.OnExtract),
	("-",None,None),
	("Convert All B&amp;lanks",None,self.OnConvertAllBlanks),
	("Convert All T&amp;abs",None,self.OnConvertAllTabs),
	("Convert &amp;Blanks","Shift+Ctrl+B",self.OnConvertBlanks),
	("Convert &amp;Tabs","Shift+Ctrl+J",self.OnConvertTabs),
	("Insert Body Time/&amp;Date","Shift+Ctrl+G",self.OnInsertBodyTime),
	("&amp;Reformat Paragraph","Shift+Ctrl+P",self.OnReformatParagraph),
	("-",None,None),
	("&amp;Indent","Ctrl+]",self.OnIndent),
	("&amp;Unindent","Ctrl+[",self.OnDedent),
	("&amp;Match Brackets","Ctrl+K",self.OnFindMatchingBracket))
	
self.createMenuEntries(editBodyMenu,table)

</t>
<t tx="edream.110203161858.1003">editHeadlineMenu = self.createNewMenu("Edit &amp;Headline...","Edit")

table = (
	("Edit &amp;Headline","Ctrl+H",self.OnEditHeadline),
	("&amp;End Edit Headline","Escape",self.OnEndEditHeadline),
	("&amp;Abort Edit Headline","Shift-Escape",self.OnAbortEditHeadline),
	("Insert Headline Time/&amp;Date","Shift+Ctrl+H",self.OnInsertHeadlineTime))
	
	# 5/16/03 EKR: I dislike this command.
	#("Toggle Angle Brackets","Ctrl+B",self.OnToggleAngleBrackets)
	
self.createMenuEntries(editHeadlineMenu,table)

</t>
<t tx="edream.110203161858.1004">findMenu = self.createNewMenu("&amp;Find...","Edit")

table = (
	("&amp;Find Panel","Ctrl+F",self.OnFindPanel),
	("-",None,None),
	("Find &amp;Next","F3",self.OnFindNext),
	("Find &amp;Previous","F4",self.OnFindPrevious),
	("&amp;Replace","Ctrl+=",self.OnReplace),
	("Replace, &amp;Then Find","Ctrl+-",self.OnReplaceThenFind))

self.createMenuEntries(findMenu,table)
</t>
<t tx="edream.110203161858.1005">label = choose(c.tree.colorizer.showInvisibles,"Hide In&amp;visibles","Show In&amp;visibles")

table = (
	("&amp;Go To Line Number","Alt+G",self.OnGoToLineNumber),
	("&amp;Execute Script","Alt+Shift+E",self.OnExecuteScript),
	("Set Fon&amp;t...","Shift+Alt+T",self.OnFontPanel),
	("Set &amp;Colors...","Shift+Alt+C",self.OnColorPanel),
	(label,"Alt+V",self.OnViewAllCharacters),
	("-",None,None),
	("Prefere&amp;nces","Ctrl+Y",self.OnPreferences))

self.createMenuEntries(editMenu,table)</t>
<t tx="edream.110203161858.1006">fileMenu = self.createNewMenu("&amp;File")
&lt;&lt; create the top-level file entries &gt;&gt;
&lt;&lt; create the recent files submenu &gt;&gt;
fileMenu.add_separator()
&lt;&lt; create the read/write submenu &gt;&gt;
&lt;&lt; create the tangle submenu &gt;&gt;
&lt;&lt; create the untangle submenu &gt;&gt;
&lt;&lt; create the import submenu &gt;&gt;
&lt;&lt; create the export submenu &gt;&gt;
fileMenu.add_separator()
# Create the last entries.
exitTable = (("E&amp;xit","Ctrl-Q",self.OnQuit),)
self.createMenuEntries(fileMenu,exitTable)

</t>
<t tx="edream.110203161858.1007">@ leo.py will probably never have a Print command.  Instead, export text files that may be formatted and printed as desired.
@c

table = (
	("&amp;New","Ctrl+N",self.OnNew),
	("&amp;Open...","Ctrl+O",self.OnOpen))
self.createMenuEntries(fileMenu,table)

# 7/1/03: Create a new menu rather than call OnOpenWith.
self.createNewMenu("Open &amp;With...","File")

table = (
	("-",None,None),
	("&amp;Close","Ctrl+W",self.OnClose),
	("&amp;Save","Ctrl+S",self.OnSave),
	("Save &amp;As","Shift+Ctrl+S",self.OnSaveAs),
	("Save To",None,self.OnSaveTo), # &amp;Tangle
	("Re&amp;vert To Saved",None,self.OnRevert)) # &amp;Read/Write
self.createMenuEntries(fileMenu,table)</t>
<t tx="edream.110203161858.1008">recentFilesMenu = self.createNewMenu("Recent &amp;Files...","File")
self.recentFiles = app().config.getRecentFiles()
self.createRecentFilesMenuItems()

table = (("Clear Recent Files",None,self.OnClearRecentFiles),)
self.createMenuEntries(fileMenu,table)</t>
<t tx="edream.110203161858.1009">readWriteMenu = self.createNewMenu("&amp;Read/Write...","File")

table = (
		("&amp;Read Outline Only","Shift+Ctrl+R",self.OnReadOutlineOnly),
		("Read @file &amp;Nodes",None,self.OnReadAtFileNodes),
		("-",None,None),
		("Write &amp;Dirty @file Nodes","Shift+Ctrl+Q",self.OnWriteDirtyAtFileNodes),
		("Write &amp;Missing @file Nodes",None,self.OnWriteMissingAtFileNodes),
		("Write &amp;Outline Only",None,self.OnWriteOutlineOnly),
		("&amp;Write @file Nodes","Shift+Ctrl+W",self.OnWriteAtFileNodes),
		("-",None,None),
		("Write 4.x Derived Files",None,self.OnWriteNewDerivedFiles),
		("Write 3.x Derived Files",None,self.OnWriteOldDerivedFiles))

self.createMenuEntries(readWriteMenu,table)</t>
<t tx="edream.110203161858.1010">tangleMenu = self.createNewMenu("&amp;Tangle...","File")

table = (
	("Tangle &amp;All","Shift+Ctrl+A",self.OnTangleAll),
	("Tangle &amp;Marked","Shift+Ctrl+M",self.OnTangleMarked),
	("&amp;Tangle","Shift+Ctrl+T",self.OnTangle))

self.createMenuEntries(tangleMenu,table)

</t>
<t tx="edream.110203161858.1011">untangleMenu = self.createNewMenu("&amp;Untangle...","File")

table = (
	("Untangle &amp;All",None,self.OnUntangleAll),
	("Untangle &amp;Marked",None,self.OnUntangleMarked),
	("&amp;Untangle","Shift+Ctrl+U",self.OnUntangle))
	
self.createMenuEntries(untangleMenu,table)

</t>
<t tx="edream.110203161858.1012">importMenu = self.createNewMenu("&amp;Import...","File")

table = (
	("Import To @&amp;file","Shift+Ctrl+F",self.OnImportAtFile),
	("Import To @&amp;root",None,self.OnImportAtRoot),
	("Import &amp;CWEB Files",None,self.OnImportCWEBFiles),
	("Import &amp;noweb Files",None,self.OnImportNowebFiles),
	("Import Flattened &amp;Outline",None,self.OnImportFlattenedOutline),
	("-",None,None),
	("Import 4.0 Derived File",None,self.OnImportDerivedFile))

self.createMenuEntries(importMenu,table)

</t>
<t tx="edream.110203161858.1013">exportMenu = self.createNewMenu("&amp;Export...","File")

table = [
	("Export &amp;Headlines",None,self.OnExportHeadlines),
	("Outline To &amp;CWEB",None,self.OnOutlineToCWEB),
	("Outline To &amp;Noweb",None,self.OnOutlineToNoweb),
	("&amp;Flatten Outline",None,self.OnFlattenOutline),
	("&amp;Remove Sentinels",None,self.OnRemoveSentinels),
	("&amp;Weave",None,self.OnWeave)]

self.createMenuEntries(exportMenu,table)
</t>
<t tx="edream.110203161858.1014">outlineMenu = self.createNewMenu("&amp;Outline")
&lt;&lt; create top-level outline menu &gt;&gt;
&lt;&lt; create expand/contract submenu &gt;&gt;
&lt;&lt; create move submenu &gt;&gt;
&lt;&lt; create mark submenu &gt;&gt;
&lt;&lt; create goto submenu &gt;&gt;</t>
<t tx="edream.110203161858.1015">table = (
	("C&amp;ut Node","Shift+Ctrl+X",self.OnCutNode),
	("C&amp;opy Node","Shift+Ctrl+C",self.OnCopyNode),
	("&amp;Paste Node","Shift+Ctrl+V",self.OnPasteNode),
	("&amp;Delete Node","Shift+Ctrl+BkSp",self.OnDeleteNode),
	("-",None,None),
	("&amp;Insert Node","Ctrl+I",self.OnInsertNode),
	("&amp;Clone Node","Ctrl+`",self.OnCloneNode),
	("Sort C&amp;hildren",None,self.OnSortChildren),
	("&amp;Sort Siblings","Alt-A",self.OnSortSiblings),
	("-",None,None))

self.createMenuEntries(outlineMenu,table)</t>
<t tx="edream.110203161858.1016">expandMenu = self.createNewMenu("&amp;Expand/Contract...","Outline")

table = (
	("&amp;Contract All","Alt+-",self.OnContractAll),
	("Contract &amp;Node","Alt+[",self.OnContractNode),
	("Contract &amp;Parent","Alt+0",self.OnContractParent),
	("-",None,None),
	("Expand P&amp;rev Level","Alt+.",self.OnExpandPrevLevel),
	("Expand N&amp;ext Level","Alt+=",self.OnExpandNextLevel),
	("-",None,None),
	("Expand To Level &amp;1","Alt+1",self.OnExpandToLevel1),
	("Expand To Level &amp;2","Alt+2",self.OnExpandToLevel2),
	("Expand To Level &amp;3","Alt+3",self.OnExpandToLevel3),
	("Expand To Level &amp;4","Alt+4",self.OnExpandToLevel4),
	("Expand To Level &amp;5","Alt+5",self.OnExpandToLevel5),
	("Expand To Level &amp;6","Alt+6",self.OnExpandToLevel6),
	("Expand To Level &amp;7","Alt+7",self.OnExpandToLevel7),
	("Expand To Level &amp;8","Alt+8",self.OnExpandToLevel8),
	# ("Expand To Level &amp;9","Alt+9",self.OnExpandToLevel9),
	("-",None,None),
	("Expand &amp;All","Alt+9",self.OnExpandAll),
	("Expand N&amp;ode","Alt+]",self.OnExpandNode))


self.createMenuEntries(expandMenu,table)</t>
<t tx="edream.110203161858.1017">moveSelectMenu = self.createNewMenu("&amp;Move...","Outline")

table = (
	("Move &amp;Down", "Ctrl+D",self.OnMoveDown),
	("Move &amp;Left", "Ctrl+L",self.OnMoveLeft),
	("Move &amp;Right","Ctrl+R",self.OnMoveRight),
	("Move &amp;Up",   "Ctrl+U",self.OnMoveUp),
	("-",None,None),
	("&amp;Promote","Ctrl+{",self.OnPromote),
	("&amp;Demote", "Ctrl+}",self.OnDemote))
	
self.createMenuEntries(moveSelectMenu,table)
</t>
<t tx="edream.110203161858.1018">markMenu = self.createNewMenu("M&amp;ark/Unmark...","Outline")

table = (
	("&amp;Mark","Ctrl-M",self.OnMark),
	("Mark &amp;Subheads","Alt+S",self.OnMarkSubheads),
	("Mark Changed &amp;Items","Alt+C",self.OnMarkChangedItems),
	("Mark Changed &amp;Roots","Alt+R",self.OnMarkChangedRoots),
	("Mark &amp;Clones","Alt+K",self.OnMarkClones),
	("&amp;Unmark All","Alt+U",self.OnUnmarkAll))
	
self.createMenuEntries(markMenu,table)
</t>
<t tx="edream.110203161858.1019">gotoMenu = self.createNewMenu("&amp;Go To...","Outline")

table = (
	("Go Back",None,self.OnGoPrevVisitedNode), # Usually use buttons for this.
	("Go Forward",None,self.OnGoNextVisitedNode),
	("-",None,None),
	("Go To Next &amp;Marked","Alt+M",self.OnGoToNextMarked),
	("Go To Next C&amp;hanged","Alt+D",self.OnGoToNextChanged),
	("Go To Next &amp;Clone","Alt+N",self.OnGoToNextClone),
	("-",None,None),
	("Go To &amp;First Node","Alt+Shift+G",self.OnGoToFirstNode),
	("Go To &amp;Last Node","Alt+Shift+H",self.OnGoToLastNode),
	("Go To &amp;Parent","Alt+Shift+P",self.OnGoToParent),
	("Go To P&amp;rev Sibling","Alt+Shift+R",self.OnGoToPrevSibling),
	("Go To Next &amp;Sibling","Alt+Shift+S",self.OnGoToNextSibling),
	("-",None,None),
	("Go To Prev V&amp;isible","Alt-UpArrow",self.OnGoPrevVisible),
	("Go To Next &amp;Visible","Alt-DnArrow",self.OnGoNextVisible),
	("Go To Prev Node","Alt-Shift+UpArrow",self.OnGoBack),
	("Go To Next Node","Alt-Shift-DnArrow",self.OnGoNext))
	
self.createMenuEntries(gotoMenu,table)
</t>
<t tx="edream.110203161858.1020">windowMenu = self.createNewMenu("&amp;Window")

table = (
	("&amp;Equal Sized Panes","Ctrl-E",self.OnEqualSizedPanes),
	("Toggle &amp;Active Pane","Ctrl-T",self.OnToggleActivePane),
	("Toggle &amp;Split Direction",None,self.OnToggleSplitDirection),
	("-",None,None),
	("Casca&amp;de",None,self.OnCascade),
	("&amp;Minimize All",None,self.OnMinimizeAll),
	("-",None,None),
	("Open &amp;Compare Window",None,self.OnOpenCompareWindow))
	
	# 
	# ("Open &amp;Python Window","Alt+P",self.OnOpenPythonWindow))

self.createMenuEntries(windowMenu,table)
</t>
<t tx="edream.110203161858.1021">helpMenu = self.createNewMenu("&amp;Help")

table = (
	("&amp;About Leo...",None,self.OnAbout),
	("Online &amp;Home Page",None,self.OnLeoHome),
	("-",None,None),
	("Open Online &amp;Tutorial",None,self.OnLeoTutorial))

self.createMenuEntries(helpMenu,table)

if sys.platform=="win32":
	table = (("Open &amp;Offline Tutorial",None,self.OnLeoHelp),)
	self.createMenuEntries(helpMenu,table)

table = (
	("Open Leo&amp;Docs.leo",None,self.OnLeoDocumentation),
	("-",None,None),
	("Open Leo&amp;Config.leo",None,self.OnLeoConfig),
	("Apply &amp;Settings",None,self.OnApplyConfig))

self.createMenuEntries(helpMenu,table)</t>
<t tx="edream.110203161858.1022">@ Executes the given command, invoking hooks and catching exceptions.
Command handlers no longer need to return "break".  Yippee!

The code assumes that the "command1" hook has completely handled the command if doHook("command1") returns false.  This provides a very simple mechanism for overriding commands.
@c

def doCommand (self,command,label,event=None):
	
	# A horrible kludge: set app().log to cover for a possibly missing activate event.
	app().setLog(self,"doCommand")

	if label == "cantredo": label = "redo"
	if label == "cantundo": label = "undo"
	app().commandName = label
	c = self.commands ; v = c.currentVnode() # 2/8/03
	if not doHook("command1",c=c,v=v,label=label):
		try:
			command(event)
		except:
			es("exception executing command")
			print "exception executing command"
			es_exception()
	
	doHook("command2",c=c,v=v,label=label)
			
	return "break" # Inhibit all other handlers.
</t>
<t tx="edream.110203161858.1023">def getMenu (self,menuName):

	cmn = canonicalizeMenuName(menuName)
	return self.menus.get(cmn)
	
def setMenu (self,menuName,menu):
	
	cmn = canonicalizeMenuName(menuName)
	self.menus [cmn] = menu
	
def destroyMenu (self,menuName):
	
	cmn = canonicalizeMenuName(menuName)
	del self.menus[cmn]
</t>
<t tx="edream.110203161858.1024"></t>
<t tx="edream.110203161858.1025"></t>
<t tx="edream.110203161858.1026"></t>
<t tx="edream.110203161858.1027">def OnNew (self,event=None):

	config = app().config
	frame = LeoFrame() # Create another Leo window.
	top = frame.top
	
	# 5/16/03: Needed for hooks.
	doHook("new",old_c=self,new_c=frame.commands)
	
	# Use the config params to set the size and location of the window.
	frame.setInitialWindowGeometry()

	if 0:
		# Set the size of the new window.
		h = config.getIntWindowPref("initial_window_height")
		w = config.getIntWindowPref("initial_window_width")
		x = config.getIntWindowPref("initial_window_left")
		y = config.getIntWindowPref("initial_window_top")
		# print h,w,x,y
		if h == None or h &lt; 5: h = 5
		if w == None or w &lt; 5: w = 10
		y = max(y,0) ; x = max(x,0)
		geom = "%dx%d%+d%+d" % (w,h,x,y)
		top.geometry(geom)

	top.deiconify()
	top.lift()
	frame.resizePanesToRatio(frame.ratio,frame.secondary_ratio) # Resize the _new_ frame.
	c = frame.commands # Use the commander of the _new_ frame.
	c.beginUpdate()
	if 1: # within update
		t = leoNodes.tnode()
		v = leoNodes.vnode(c,t)
		v.initHeadString("NewHeadline")
		v.moveToRoot()
		c.editVnode(v)
	c.endUpdate()
	
	set_focus(c,frame.body)</t>
<t tx="edream.110203161858.1028">def OnOpen(self,event=None):

	c = self.commands
	&lt;&lt; Set closeFlag if the only open window is empty &gt;&gt;
	# trace(`closeFlag`)

	fileName = tkFileDialog.askopenfilename(
		title="Open",
		filetypes=[("Leo files", "*.leo"), ("All files", "*")],
		defaultextension=".leo")

	if fileName and len(fileName) &gt; 0:
		ok, frame = self.OpenWithFileName(fileName)
		if ok and closeFlag:
			app().destroyWindow(self)</t>
<t tx="edream.110203161858.1029">@ If this is the only open window was opened when the app started, and the window has never been written to or saved, then we will automatically close that window if this open command completes successfully.
@c
	
closeFlag = (
	self.startupWindow==true and # The window was open on startup
	c.changed==false and self.saved==false and # The window has never been changed
	app().numberOfWindows == 1) # Only one untitled window has ever been opened
</t>
<t tx="edream.110203161858.1030">@ This routine handles the items in the Open With... menu.
These items can only be created by createOpenWithMenuFromTable().
Typically this would be done from the "open2" hook.
@c

def OnOpenWith(self,data=None):
	
	a = app() ; c = self.commands ; v = c.currentVnode()
	if not data or len(data) != 3: return # 6/22/03
	try:
		# print "OnOpenWith:",`data`
		openType,arg,ext=data
		if not doHook("openwith1",c=c,v=v,openType=openType,arg=arg,ext=ext):
			&lt;&lt; set ext based on the present language &gt;&gt;
			&lt;&lt; create or reopen temp file, testing for conflicting changes &gt;&gt;
			&lt;&lt; execute a command to open path in external editor &gt;&gt;
		doHook("openwith2",c=c,v=v,openType=openType,arg=arg,ext=ext)
	except:
		es("exception in OnOpenWith")
		es_exception()

	return "break"</t>
<t tx="edream.110203161858.1031">if not ext:
	dict = scanDirectives(c)
	language = dict.get("language")
	ext = a.language_extension_dict.get(language)
	# print language,ext
	if ext == None:
		ext = "txt"
	
if ext[0] != ".":
	ext = "."+ext
	
# print "ext",`ext`</t>
<t tx="edream.110203161858.1032">dict = None ; path = None
&lt;&lt; set dict and path if a temp file already refers to v.t &gt;&gt;
if path:
	&lt;&lt; create or recreate temp file as needed &gt;&gt;
else:
	path = self.createOpenWithTempFile(v,ext)

if not path:
	return # An error has occured.</t>
<t tx="edream.110203161858.1033">searchPath = self.openWithTempFilePath(v,ext)

if os.path.exists(searchPath):
	for dict in a.openWithFiles:
		if v.t == dict.get("v") and searchPath == dict.get("path"):
			path = searchPath
			break
</t>
<t tx="edream.110203161858.1034">@ We test for changes in both v and the temp file:

- If only v's body text has changed, we recreate the temp file.
- If only the temp file has changed, do nothing here.
- If both have changed we must prompt the user to see which code to use.
@c

encoding = dict.get("encoding")
old_body = dict.get("body")
new_body = v.bodyString()
new_body = toEncodedString(new_body,encoding,reportErrors=true)

old_time = dict.get("time")
try:
	new_time=os.path.getmtime(path)
except:
	new_time=None
	
body_changed = old_body != new_body
temp_changed = old_time != new_time

if body_changed and temp_changed:
	&lt;&lt; Raise dialog about conflict and set result &gt;&gt;
	if result == "cancel": return
	rewrite = result == "outline"
else:
	rewrite = body_changed
		
if rewrite:
	path = self.createOpenWithTempFile(v,ext)
else:
	es("reopening: " + shortFileName(path),color="blue")</t>
<t tx="edream.110203161858.1035">message = (
	"Conflicting changes in outline and temp file\n\n" +
	"Do you want to use the code in the outline or the temp file?\n\n")

result = leoDialog.askYesNoCancel(
	"Conflict!", message,
	yesMessage = "Outline",
	noMessage = "File",
	defaultButton = "Cancel").run(modal=1)

</t>
<t tx="edream.110203161858.1036">try:
	if arg == None: arg = ""
	shortPath = path # shortFileName(path)
	if openType == "os.system":
		command  = "os.system("+arg+shortPath+")"
		os.system(arg+path)
	elif openType == "os.startfile":
		command    = "os.startfile("+arg+shortPath+")"
		os.startfile(arg+path)
	elif openType == "exec":
		command    = "exec("+arg+shortPath+")"
		exec arg+path in {} # 12/11/02
	elif openType == "os.spawnl":
		filename = os.path.basename(arg)
		command = "os.spawnl("+arg+","+filename+','+ shortPath+")"
		apply(os.spawnl,(os.P_NOWAIT,arg,filename,path))
	elif openType == "os.spawnv":
		filename = os.path.basename(arg)
		command = "os.spawnv("+arg+",("+filename+','+ shortPath+"))"
		apply(os.spawnl,(os.P_NOWAIT,arg,(filename,path)))
	else:
		command="bad command:"+str(openType)
	# This seems a bit redundant.
	# es(command)
except:
	es("exception executing: "+command)
	es_exception()</t>
<t tx="edream.110203161858.1037">def createOpenWithTempFile (self, v, ext):
	
	c = self.commands ; a = app()
	path = self.openWithTempFilePath(v,ext)
	try:
		if os.path.exists(path):
			es("recreating:  " + shortFileName(path),color="red")
		else:
			es("creating:  " + shortFileName(path),color="blue")
		file = open(path,"w")
		# 3/7/03: convert s to whatever encoding is in effect.
		s = v.bodyString()
		dict = scanDirectives(self.commands,v=v)
		encoding = dict.get("encoding",None)
		if encoding == None:
			encoding = a.config.default_derived_file_encoding
		s = toEncodedString(s,encoding,reportErrors=true) 
		file.write(s)
		file.flush()
		file.close()
		try:    time=os.path.getmtime(path)
		except: time=None
		# es("time: " + str(time))
		# 4/22/03: add body and encoding entries to dict for later comparisons.
		dict = {"body":s, "c":c, "encoding":encoding, "f":file, "path":path, "time":time, "v":v}
		&lt;&lt; remove previous entry from a.openWithFiles if it exists &gt;&gt; # 4/22/03
		a.openWithFiles.append(dict)
		return path
	except:
		file = None
		es("exception creating temp file",color="red")
		es_exception()
		return None</t>
<t tx="edream.110203161858.1038">for d in a.openWithFiles[:]: # 6/30/03
	v2 = d.get("v")
	if v.t == v2.t:
		print "removing previous entry in a.openWithFiles for",v
		a.openWithFiles.remove(d)</t>
<t tx="edream.110203161858.1039">def openWithTempFilePath (self,v,ext):
	
	"""Return the path to the temp file corresponding to v and ext."""

	name = "LeoTemp_" + str(id(v.t)) + '_' + sanitize_filename(v.headString()) + ext
	td = os.path.abspath(tempfile.gettempdir())
	path = os.path.join(td,name)
	
	# print "openWithTempFilePath",path
	return path</t>
<t tx="edream.110203161858.1040">def OpenWithFileName(self,fileName):
	
	return openWithFileName(fileName,self.commands)</t>
<t tx="edream.110203161858.1041">def OnClose(self,event=None):
	
	"""Handle the File-Close command."""
	
	app().closeLeoWindow(self)</t>
<t tx="edream.110203161858.1042">def OnSave(self,event=None):

	c = self.commands
	
	# Make sure we never pass None to the ctor.
	if not self.mFileName:
		self.title = ""
		self.mFileName = ""

	if self.mFileName != "":
		c.fileCommands.save(self.mFileName)
		c.setChanged(false)
		return

	fileName = tkFileDialog.asksaveasfilename(
		initialfile = self.mFileName,
		title="Save",
		filetypes=[("Leo files", "*.leo")],
		defaultextension=".leo")

	if len(fileName) &gt; 0:
		# 7/2/02: don't change mFileName until the dialog has suceeded.
		self.mFileName = ensure_extension(fileName, ".leo")
		self.title = self.mFileName
		self.top.title(self.setWindowTitle(self.mFileName)) # 3/25/03
		c.fileCommands.save(self.mFileName)
		self.updateRecentFiles(self.mFileName)</t>
<t tx="edream.110203161858.1043">def OnSaveAs(self,event=None):

	# Make sure we never pass None to the ctor.
	if not self.mFileName:
		self.title = ""
		
	fileName = tkFileDialog.asksaveasfilename(
		initialfile = self.mFileName,
		title="Save As",
		filetypes=[("Leo files", "*.leo")],
		defaultextension=".leo")

	if len(fileName) &gt; 0:
		# 7/2/02: don't change mFileName until the dialog has suceeded.
		self.mFileName = ensure_extension(fileName, ".leo")
		self.title = self.mFileName
		self.top.title(self.setWindowTitle(self.mFileName)) # 3/25/03
		self.commands.fileCommands.saveAs(self.mFileName)
		self.updateRecentFiles(self.mFileName)</t>
<t tx="edream.110203161858.1044">def OnSaveTo(self,event=None):

	# Make sure we never pass None to the ctor.
	if not self.mFileName:
		self.title = ""

	# set local fileName, _not_ self.mFileName
	fileName = tkFileDialog.asksaveasfilename(
		initialfile = self.mFileName,
		title="Save To",
		filetypes=[("Leo files", "*.leo")],
		defaultextension=".leo")

	if len(fileName) &gt; 0:
		fileName = ensure_extension(fileName, ".leo")
		self.commands.fileCommands.saveTo(fileName)
		self.updateRecentFiles(self.mFileName)
</t>
<t tx="edream.110203161858.1045">def OnRevert(self,event=None):
	
	a = app()

	# Make sure the user wants to Revert.
	if not self.mFileName:
		self.mFileName = ""
	if len(self.mFileName)==0:
		return

	reply = leoDialog.askYesNo("Revert",
		"Revert to previous version of " + self.mFileName + "?").run(modal=true)

	if reply=="no":
		return

	# Kludge: rename this frame so OpenWithFileName won't think it is open.
	fileName = self.mFileName ; self.mFileName = ""

	# Create a new frame before deleting this frame.
	ok, frame = self.OpenWithFileName(fileName)
	if ok:
		frame.top.deiconify()
		app().destroyWindow(self)
	else:
		self.mFileName = fileName
</t>
<t tx="edream.110203161858.1046">def OnQuit(self,event=None):
	
	app().onQuit()</t>
<t tx="edream.110203161858.1047">def updateRecentFiles (self, fileName):
	
	if not fileName or len(fileName) == 0:
		return
	
	# Update the recent files list in all windows.
	normFileName = os.path.normcase(fileName)
	
	for frame in app().windowList:
		# Remove all versions of the file name.
		for name in frame.recentFiles:
			name2 = os.path.normcase(name)
			name2 = os.path.normpath(name2)
			if normFileName == name2:
				frame.recentFiles.remove(name)
		frame.recentFiles.insert(0,fileName)
		# Recreate the Recent Files menu.
		frame.createRecentFilesMenuItems()
		
	# Update the config file.
	app().config.setRecentFiles(frame.recentFiles)
	app().config.update()</t>
<t tx="edream.110203161858.1048"></t>
<t tx="edream.110203161858.1049">def OnClearRecentFiles (self,event=None):
	
	"""Clear the recent files list, then add the present file."""
	
	f = self
	
	recentFilesMenu = f.getMenu("Recent Files...")
	recentFilesMenu.delete(0,len(f.recentFiles))
	f.recentFiles = []
	f.createRecentFilesMenuItems()
	f.updateRecentFiles(f.mFileName)</t>
<t tx="edream.110203161858.1050">def OnOpenRecentFile(self,name=None):
	
	c = self.commands ; v = c.currentVnode()
	&lt;&lt; Set closeFlag if the only open window is empty &gt;&gt;
	if not name:
		return

	fileName = name
	if not doHook("recentfiles1",c=c,v=v,fileName=fileName,closeFlag=closeFlag):
		ok, frame = self.OpenWithFileName(fileName)
		if ok and closeFlag:
			app().destroyWindow(self)
			app().setLog(frame,"OnOpenRecentFile") # Sets the log stream for es()

	doHook("recentfiles2",c=c,v=v,fileName=fileName,closeFlag=closeFlag)</t>
<t tx="edream.110203161858.1051">@ If this is the only open window was opened when the app started, and the window has never been written to or saved, then we will automatically close that window if this open command completes successfully.
@c
	
closeFlag = (
	self.startupWindow==true and # The window was open on startup
	c.changed==false and self.saved==false and # The window has never been changed
	app().numberOfWindows == 1) # Only one untitled window has ever been opened
</t>
<t tx="edream.110203161858.1052">def createRecentFilesMenuItems (self):
	
	f = self
	recentFilesMenu = f.getMenu("Recent Files...")
	recentFilesMenu.delete(0,len(f.recentFiles))
	i = 1
	for name in f.recentFiles:
		callback = lambda f=f,name=name:f.OnOpenRecentFile(name)
		label = "%d %s" % (i,self.setWindowTitle(name))
		recentFilesMenu.add_command(label=label,command=callback,underline=0)
		i += 1</t>
<t tx="edream.110203161858.1053"></t>
<t tx="edream.110203161858.1054">def OnReadOutlineOnly (self,event=None):

	fileName = tkFileDialog.askopenfilename(
		title="Read Outline Only",
		filetypes=[("Leo files", "*.leo"), ("All files", "*")],
		defaultextension=".leo")

	if not fileName or len(fileName) == 0:
		return
		
	try: # 11/18/02
		file = open(fileName,'r')
		frame = LeoFrame(fileName)
		frame.top.deiconify()
		frame.top.lift()
		app().root.update() # Force a screen redraw immediately.
		frame.commands.fileCommands.readOutlineOnly(file,fileName) # closes file.
	except:
		es("can not open:" + fileName)</t>
<t tx="edream.110203161858.1055">def OnReadAtFileNodes (self,event=None):

	c = self.commands

	if 0: # highly annoying during testing.
		answer = leoDialog.askOkCancel("Proceed?",
			"Read @file Nodes is not undoable." +
			"\nProceed?").run(modal=true)
	else:
		answer = "ok"

	if answer=="ok":
		c.fileCommands.readAtFileNodes()
		c.undoer.clearUndoState()</t>
<t tx="edream.110203161858.1056">def OnWriteDirtyAtFileNodes (self,event=None):

	self.commands.fileCommands.writeDirtyAtFileNodes()
</t>
<t tx="edream.110203161858.1057">def OnWriteMissingAtFileNodes (self,event=None):

	self.commands.fileCommands.writeMissingAtFileNodes()
</t>
<t tx="edream.110203161858.1058">def OnWriteOutlineOnly (self,event=None):

	self.commands.fileCommands.writeOutlineOnly()
</t>
<t tx="edream.110203161858.1059">def OnWriteAtFileNodes (self,event=None):

	self.commands.fileCommands.writeAtFileNodes()
</t>
<t tx="edream.110203161858.1060"></t>
<t tx="edream.110203161858.1061">def OnImportDerivedFile (self,event=None):
	
	"""Create a new outline from a 4.0 derived file."""
	
	frame = self ; c = frame.commands ; v = c.currentVnode()
	at = c.atFileCommands
	
	if not v.isAtFileNode():
		es("not an @file node",color="blue")
		return
	else:
		name = v.atFileNodeName()

	trace(name)
	
	c.beginUpdate()
	
	c.insertHeadline() # op_name="Import Derived File" (was "Insert Outline")
	c.moveOutlineLeft()
	v = c.currentVnode()
	v.initHeadString("Imported @file " + name)

	at.read(v,importFileName=name)

	c.endUpdate()</t>
<t tx="edream.110203161858.1062">def OnWriteNewDerivedFiles (self,event=None):
	
	c = self.commands ; v = c.currentVnode()

	c.atFileCommands.writeNewDerivedFiles(v)
	es("auto-saving outline",color="blue")
	self.OnSave() # Must be done to preserve tnodeList.
	
def OnWriteOldDerivedFiles (self,event=None):
	
	c = self.commands ; v = c.currentVnode()

	c.atFileCommands.writeOldDerivedFiles(v)
	es("auto-saving outline",color="blue")
	self.OnSave() # Must be done to clear tnodeList.</t>
<t tx="edream.110203161858.1063"></t>
<t tx="edream.110203161858.1064">def OnTangleAll(self,event=None):

	self.commands.tangleCommands.tangleAll()
</t>
<t tx="edream.110203161858.1065">def OnTangleMarked(self,event=None):

	self.commands.tangleCommands.tangleMarked()
</t>
<t tx="edream.110203161858.1066">def OnTangle (self,event=None):

	self.commands.tangleCommands.tangle()
</t>
<t tx="edream.110203161858.1067"></t>
<t tx="edream.110203161858.1068">def OnUntangleAll(self,event=None):

	c = self.commands
	c.tangleCommands.untangleAll()
	c.undoer.clearUndoState()
</t>
<t tx="edream.110203161858.1069">def OnUntangleMarked(self,event=None):

	c = self.commands
	self.commands.tangleCommands.untangleMarked()
	c.undoer.clearUndoState()
</t>
<t tx="edream.110203161858.1070">def OnUntangle(self,event=None):

	c = self.commands
	self.commands.tangleCommands.untangle()
	c.undoer.clearUndoState()
</t>
<t tx="edream.110203161858.1071"></t>
<t tx="edream.110203161858.1072">def OnExportHeadlines (self,event=None):
	
	filetypes = [("Text files", "*.txt"),("All files", "*")]

	fileName = tkFileDialog.asksaveasfilename(
		title="Export Headlines",filetypes=filetypes,
		initialfile="headlines.txt",defaultextension=".txt")

	if fileName and len(fileName) &gt; 0:
		self.commands.importCommands.exportHeadlines(fileName)
</t>
<t tx="edream.110203161858.1073">def OnFlattenOutline (self,event=None):
	
	filetypes = [("Text files", "*.txt"),("All files", "*")]

	fileName = tkFileDialog.asksaveasfilename(
		title="Flatten Outline",filetypes=filetypes,
		initialfile="flat.txt",defaultextension=".txt")

	if fileName and len(fileName) &gt; 0:
		c = self.commands
		c.importCommands.flattenOutline(fileName)
</t>
<t tx="edream.110203161858.1074">def OnImportAtRoot (self,event=None):
	
	types = [
		("All files","*"),
		("C/C++ files","*.c"),
		("C/C++ files","*.cpp"),
		("C/C++ files","*.h"),
		("C/C++ files","*.hpp"),
		("Java files","*.java"),
		("Pascal files","*.pas"),
		("Python files","*.py") ]

	fileName = tkFileDialog.askopenfilename(
		title="Import To @root",filetypes=types)
	if fileName and len(fileName) &gt; 0:
		c = self.commands
		paths = [fileName] # alas, askopenfilename returns only a single name.
		c.importCommands.importFilesCommand (paths,"@root")
</t>
<t tx="edream.110203161858.1075">def OnImportAtFile (self,event=None):
	
	types = [
		("All files","*"),
		("C/C++ files","*.c"),
		("C/C++ files","*.cpp"),
		("C/C++ files","*.h"),
		("C/C++ files","*.hpp"),
		("Java files","*.java"),
		("Pascal files","*.pas"),
		("Python files","*.py") ]
			
	fileName = tkFileDialog.askopenfilename(
		title="Import To @file",filetypes=types)
	if fileName and len(fileName) &gt; 0:
		c = self.commands
		paths = [fileName] # alas, askopenfilename returns only a single name.
		c.importCommands.importFilesCommand (paths,"@file")
</t>
<t tx="edream.110203161858.1076">def OnImportCWEBFiles (self,event=None):
	
	filetypes = [
		("CWEB files", "*.w"),
		("Text files", "*.txt"),
		("All files", "*")]

	fileName = tkFileDialog.askopenfilename(
		title="Import CWEB Files",filetypes=filetypes,
		defaultextension=".w")
	if fileName and len(fileName) &gt; 0:
		c = self.commands
		paths = [fileName] # alas, askopenfilename returns only a single name.
		c.importCommands.importWebCommand(paths,"cweb")
</t>
<t tx="edream.110203161858.1077">def OnImportFlattenedOutline (self,event=None):
	
	types = [("Text files","*.txt"), ("All files","*")]
		
	fileName = tkFileDialog.askopenfilename(
		title="Import MORE Text",
		filetypes=types,
		defaultextension=".py")
	if fileName and len(fileName) &gt; 0:
		c = self.commands
		paths = [fileName] # alas, askopenfilename returns only a single name.
		c.importCommands.importFlattenedOutline(paths)
</t>
<t tx="edream.110203161858.1078">def OnImportNowebFiles (self,event=None):
	
	filetypes = [
		("Noweb files", "*.nw"),
		("Text files", "*.txt"),
		("All files", "*")]

	fileName = tkFileDialog.askopenfilename(
		title="Import Noweb Files",filetypes=filetypes,
		defaultextension=".nw")
	if fileName and len(fileName) &gt; 0:
		c = self.commands
		paths = [fileName] # alas, askopenfilename returns only a single name.
		c.importCommands.importWebCommand(paths,"noweb")
</t>
<t tx="edream.110203161858.1079">def OnOutlineToCWEB (self,event=None):
	
	filetypes=[
		("CWEB files", "*.w"),
		("Text files", "*.txt"),
		("All files", "*")]

	fileName = tkFileDialog.asksaveasfilename(
		title="Outline To CWEB",filetypes=filetypes,
		initialfile="cweb.w",defaultextension=".w")

	if fileName and len(fileName) &gt; 0:
		c = self.commands
		c.importCommands.outlineToWeb(fileName,"cweb")
</t>
<t tx="edream.110203161858.1080">def OnOutlineToNoweb (self,event=None):
	
	filetypes=[
		("Noweb files", "*.nw"),
		("Text files", "*.txt"),
		("All files", "*")]

	fileName = tkFileDialog.asksaveasfilename(
		title="Outline To Noweb",filetypes=filetypes,
		initialfile=self.outlineToNowebDefaultFileName,defaultextension=".nw")

	if fileName and len(fileName) &gt; 0:
		c = self.commands
		c.importCommands.outlineToWeb(fileName,"noweb")
		self.outlineToNowebDefaultFileName = fileName
</t>
<t tx="edream.110203161858.1081">def OnRemoveSentinels (self,event=None):
	
	types = [
		("All files","*"),
		("C/C++ files","*.c"),
		("C/C++ files","*.cpp"),
		("C/C++ files","*.h"),
		("C/C++ files","*.hpp"),
		("Java files","*.java"),
		("Pascal files","*.pas"),
		("Python files","*.py") ]
		
	fileName = tkFileDialog.askopenfilename(
		title="Remove Sentinels",filetypes=types)

	if fileName and len(fileName) &gt; 0:
		c = self.commands
		# alas, askopenfilename returns only a single name.
		c.importCommands.removeSentinelsCommand (fileName)
</t>
<t tx="edream.110203161858.1082">def OnWeave (self,event=None):
	
	filetypes = [("Text files", "*.txt"),("All files", "*")]

	fileName = tkFileDialog.asksaveasfilename(
		title="Weave",filetypes=filetypes,
		initialfile="weave.txt",defaultextension=".txt")

	if fileName and len(fileName) &gt; 0:
		c = self.commands
		c.importCommands.weave(fileName)
</t>
<t tx="edream.110203161858.1083"></t>
<t tx="edream.110203161858.1084"></t>
<t tx="edream.110203161858.1085">def OnUndo(self,event=None):

	self.commands.undoer.undo()
</t>
<t tx="edream.110203161858.1086">def OnRedo(self,event=None):

	self.commands.undoer.redo()
</t>
<t tx="edream.110203161858.1087"></t>
<t tx="edream.110203161858.1088">def OnCut (self,event=None):

	# Activate the body key handler by hand.
	c = self.commands ; v = c.currentVnode()
	self.commands.tree.onBodyWillChange(v,"Cut")

def OnCutFromMenu (self,event=None):

	w = self.getFocus()
	w.event_generate(virtual_event_name("Cut"))
	
	# 11/2/02: Make sure the event sticks.
	c = self.commands ; v = c.currentVnode()
	c.tree.onHeadChanged(v) # Works even if it wasn't the headline that changed.
</t>
<t tx="edream.110203161858.1089">def OnCopy (self,event=None):

	# Copy never changes dirty bits or syntax coloring.
	pass
	
def OnCopyFromMenu (self,event=None):

	# trace()
	w = self.getFocus()
	w.event_generate(virtual_event_name("Copy"))
</t>
<t tx="edream.110203161858.1090">def OnPaste (self,event=None):

	# Activate the body key handler by hand.
	c = self.commands ; v = c.currentVnode()
	self.commands.tree.onBodyWillChange(v,"Paste")
	
def OnPasteNode (self,event=None):

	# trace(`event`)
	pass
	
def OnPasteFromMenu (self,event=None):

	w = self.getFocus()
	w.event_generate(virtual_event_name("Paste"))
	
	# 10/23/02: Make sure the event sticks.
	c = self.commands ; v = c.currentVnode()
	c.tree.onHeadChanged(v) # Works even if it wasn't the headline that changed.
</t>
<t tx="edream.110203161858.1091">def OnDelete(self,event=None):

	c = self.commands ; v = c.currentVnode()
	first, last = oldSel = getTextSelection(self.body)
	if first and last and first != last:
		self.body.delete(first,last)
		c.tree.onBodyChanged(v,"Delete",oldSel=oldSel)
</t>
<t tx="edream.110203161858.1092">@ This executes body text as a Python script.  We execute the selected text, or the entire body text if no text is selected.
@c

def OnExecuteScript(self,event=None,v=None):
	
	c = self.commands ; body = self.body ; s = None
	if v == None:
		v = c.currentVnode() 

	# Assume any selected body text is a script.
	start,end = getTextSelection(body)
	if start and end and start != end:
		s = body.get(start,end)
	else:
		s = body.get("1.0","end")
	if s == None:
		s = ""
		
	s = s.strip()
	if s and len(s) &gt; 0:
		s += '\n' # Make sure we end the script properly.
		try:
			# 12/11/02: Use {} to get a pristine environment!
			exec s in {}
		except:
			es("exception executing script")
			es_exception(full=false)
	else:
		es("no script selected")</t>
<t tx="edream.110203161858.1093">def OnGoToLineNumber (self,event=None):

	c = self.commands
	&lt;&lt; set root to the nearest @file, @silentfile or @rawfile ancestor node &gt;&gt;
	&lt;&lt; read the file into lines &gt;&gt;
	&lt;&lt; get n, the line number, from a dialog &gt;&gt;
	# trace("n:"+`n`)
	if n==1:
		v = root ; n2 = 1 ; found = true
	elif n &gt;= len(lines):
		v = root ; found = false
		n2 = v.bodyString().count('\n')
	elif root.isAtSilentFileNode():
		&lt;&lt; count outline lines, setting v,n2,found &gt;&gt;
	else:
		# To do: choose a "suitable line" for searching.
		vnodeName,childIndex,n2 = self.convertLineToVnodeNameIndexLine(lines,n,root)
		found = true
		if not vnodeName:
			es("invalid derived file: " + fileName)
			return
		&lt;&lt; set v to the node given by vnodeName and childIndex &gt;&gt;
	# To do: search for the "suitable line".
	&lt;&lt; select v and make it visible &gt;&gt;
	&lt;&lt; put the cursor on line n2 of the body text &gt;&gt;</t>
<t tx="edream.110203161858.1094">v = c.currentVnode()
fileName = None
while v and not fileName:
	if v.isAtFileNode():
		fileName = v.atFileNodeName()
	elif v.isAtSilentFileNode():
		fileName = v.atSilentFileNodeName()
	elif v.isAtRawFileNode():
		fileName = v.atRawFileNodeName()
	else:
		v = v.parent()

root = v
if not root:
	es("no @file node found") ; return</t>
<t tx="edream.110203161858.1095"># 1/26/03: calculate the full path.
d = scanDirectives(c)
path = d.get("path")
fileName = os.path.join(path,fileName)

try:
	file=open(fileName)
	lines = file.readlines()
	file.close()
except:
	es("not found: " + fileName)
	return
	
</t>
<t tx="edream.110203161858.1096">import leoDialog

d = leoDialog.askOkCancelNumber("Enter Line Number","Line number:")
n = d.run(modal=true)
if n == -1:
	return</t>
<t tx="edream.110203161858.1097">v = lastv = root ; after = root.nodeAfterTree()
prev = 0 ; found = false
while v and v != after:
	lastv = v
	s = v.bodyString()
	lines = s.count('\n')
	if len(s) &gt; 0 and s[-1] != '\n':
		lines += 1
	# print lines,prev,v
	if prev + lines &gt;= n:
		found = true ; break
	prev += lines
	v = v.threadNext()

v = lastv
n2 = max(1,n-prev)</t>
<t tx="edream.110203161858.1098">after = root.nodeAfterTree()
while v and v != after:
	if v.matchHeadline(vnodeName):
		if childIndex == 0 or v.childIndex() + 1 == childIndex:
			break
	v = v.threadNext()

if not v or v == after:
	es("not found: %s" % vnodeName )
	return</t>
<t tx="edream.110203161858.1099">c.beginUpdate()
c.tree.expandAllAncestors(v)
c.selectVnode(v)
c.endUpdate()</t>
<t tx="edream.110203161858.1100">if found:
	c.frame.body.mark_set("insert",str(n2)+".0 linestart")
else:
	c.frame.body.mark_set("insert","end-1c")
	es("%d lines" % len(lines), color="blue")</t>
<t tx="edream.110203161858.1101">@ We count "real" lines in the derived files, ignoring all sentinels that do not arise from source lines.  When the indicated line is found, we scan backwards for an @+body line, get the vnode's name from that line and set v to the indicated vnode.  This will fail if vnode names have been changed, and that can't be helped.

Returns (vnodeName,offset)

vnodeName: the name found in the previous @+body sentinel.
offset: the offset within v of the desired line.
@c

def convertLineToVnodeNameIndexLine (self,lines,n,root):
	
	"""Convert a line number n to a vnode name, child index and line number."""
	
	childIndex = 0
	&lt;&lt; set delim, leoLine from the @+leo line &gt;&gt;
	if not delim:
		es("bad @+leo sentinel")
		return None,None
	&lt;&lt; scan back to @+node, setting offset,nodeSentinelLine &gt;&gt;
	if nodeSentinelLine == -1:
		# The line precedes the first @+node sentinel
		# trace("before first line")
		return root.headString(),0,1
	s = lines[nodeSentinelLine]
	# trace(s)
	&lt;&lt; set vnodeName and childIndex from s &gt;&gt;
	# trace("childIndex,offset",childIndex,offset,vnodeName)
	return vnodeName,childIndex,offset</t>
<t tx="edream.110203161858.1102"># Find the @+leo line.
tag = "@+leo"
i = 0 
while i &lt; len(lines) and lines[i].find(tag)==-1:
	i += 1
leoLine = i # Index of the line containing the leo sentinel
# trace("leoLine:"+`leoLine`)

delim = None # All sentinels start with this.
if leoLine &lt; len(lines):
	# The opening comment delim is the initial non-whitespace.
	s = lines[leoLine]
	i = skip_ws(s,0)
	j = s.find(tag)
	delim = s[i:j]
	if len(delim)==0:
		delim=None
	else:
		delim += '@'</t>
<t tx="edream.110203161858.1103">offset = 0 # This is essentially the Tk line number.
nodeSentinelLine = -1
line = n - 1
while line &gt;= 0:
	s = lines[line]
	# trace(`s`)
	i = skip_ws(s,0)
	if match(s,i,delim):
		&lt;&lt; handle delim while scanning backward &gt;&gt;
	else:
		offset += 1 # Assume the line is real.  A dubious assumption.
	line -= 1</t>
<t tx="edream.110203161858.1104">if line == n:
	es("line "+str(n)+" is a sentinel line")
i += len(delim)

if match(s,i,"-node"):
	# The end of a nested section.
	line = self.skipToMatchingNodeSentinel(lines,line,delim)
elif match(s,i,"+node"):
	nodeSentinelLine = line
	break
elif match(s,i,"&lt;&lt;") or match(s,i,"@first"):
	offset += 1 # Count these as a "real" lines.</t>
<t tx="edream.110203161858.1105"># vnode name is everything following the third ':'

# trace("last body:"+`s`)
vnodeName = None
i = 0 ; colons = 0
while i &lt; len(s) and colons &lt; 3:
	if s[i] == ':':
		colons += 1
		if colons == 1 and i+1 &lt; len(s) and s[i+1] in string.digits:
			junk,childIndex = skip_long(s,i+1)
	i += 1

vnodeName = s[i:].strip()
# trace("vnodeName:"+`vnodeName`)

if len(vnodeName) == 0:
	vnodeName = None
if not vnodeName:
	es("bad @+node sentinel")</t>
<t tx="edream.110203161858.1106">def skipToMatchingNodeSentinel (self,lines,n,delim):
	
	s = lines[n]
	i = skip_ws(s,0)
	assert(match(s,i,delim))
	i += len(delim)
	if match(s,i,"+node"):
		start="+node" ; end="-node" ; delta=1
	else:
		assert(match(s,i,"-node"))
		start="-node" ; end="+node" ; delta=-1
	# Scan to matching @+-node delim.
	n += delta ; level = 0
	while 0 &lt;= n &lt; len(lines):
		s = lines[n] ; i = skip_ws(s,0)
		if match(s,i,delim):
			i += len(delim)
			if match(s,i,start):
				level += 1
			elif match(s,i,end):
				if level == 0: break
				else: level -= 1
		n += delta # bug fix: 1/30/02
		
	# trace(n)
	return n</t>
<t tx="edream.110203161858.1107">def OnSelectAll(self,event=None):

	setTextSelection(self.body,"1.0","end")
</t>
<t tx="edream.110203161858.1108">def OnFontPanel(self,event=None):

	if self.fontPanel:
		# trace()
		self.fontPanel.top.deiconify()
		self.fontPanel.top.lift()
	else:
		self.fontPanel = fp =  leoFontPanel.leoFontPanel(self.commands)
		fp.run()
</t>
<t tx="edream.110203161858.1109">def OnColorPanel(self,event=None):
	
	if self.colorPanel:
		# trace()
		self.colorPanel.top.deiconify()
		self.colorPanel.top.lift()
	else:
		self.colorPanel = cp = leoColor.leoColorPanel(self.commands)
		cp.run()

</t>
<t tx="edream.110203161858.1110">def OnViewAllCharacters (self, event=None):

	c = self.commands ; v = c.currentVnode() ; colorizer = c.tree.colorizer
	colorizer.showInvisibles = choose(colorizer.showInvisibles,0,1)
	# print `colorizer.showInvisibles`

	# It is much easier to change the menu name here than in the menu updater.
	menu = self.getMenu("Edit")
	if colorizer.showInvisibles:
		setMenuLabel(menu,"Show Invisibles","Hide Invisibles")
	else:
		setMenuLabel(menu,"Hide Invisibles","Show Invisibles")

	c.tree.recolor_now(v)
</t>
<t tx="edream.110203161858.1111">def OnPreferences(self,event=None):
	
	c = self.commands
	if self.prefsPanel:
		# trace()
		self.prefsPanel.top.deiconify()
		self.prefsPanel.top.lift()
	else:
		self.prefsPanel = prefs = leoPrefs.LeoPrefs(c)
		top = prefs.top
		center_dialog(top)

		if 0: # No need to make this modal
			top.grab_set() # Make the dialog a modal dialog.
			top.focus_set() # Get all keystrokes.
			app().root.wait_window(top)
</t>
<t tx="edream.110203161858.1112"></t>
<t tx="edream.110203161858.1113">def OnConvertBlanks(self,event=None):

	self.commands.convertBlanks()

	
def OnConvertAllBlanks(self,event=None):

	self.commands.convertAllBlanks()
</t>
<t tx="edream.110203161858.1114">def OnConvertTabs(self,event=None):

	self.commands.convertTabs()
	
def OnConvertAllTabs(self,event=None):

	self.commands.convertAllTabs()

def OnReformatParagraph(self,event=None):
	
	self.commands.reformatParagraph()
</t>
<t tx="edream.110203161858.1115">def OnDedent (self,event=None):

	self.commands.dedentBody()
</t>
<t tx="edream.110203161858.1116">def OnExtract(self,event=None):

	self.commands.extract()
</t>
<t tx="edream.110203161858.1117">def OnExtractNames(self,event=None):

	self.commands.extractSectionNames()
</t>
<t tx="edream.110203161858.1118">def OnExtractSection(self,event=None):

	self.commands.extractSection()
</t>
<t tx="edream.110203161858.1119">def OnFindMatchingBracket (self,event=None):
	
	c = self ; body = c.body
	brackets = "()[]{}&lt;&gt;"
	ch1=body.get("insert -1c")
	ch2=body.get("insert")

	# Prefer to match the character to the left of the cursor.
	if ch1 in brackets:
		ch = ch1 ; index = body.index("insert -1c")
	elif ch2 in brackets:
		ch = ch2 ; index = body.index("insert")
	else:
		return
	
	index2 = self.findMatchingBracket(ch,body,index)
	if index2:
		if body.compare(index,"&lt;=",index2):
			setTextSelection(self.body,index,index2+"+1c")
		else:
			setTextSelection(self.body,index2,index+"+1c")
		body.mark_set("insert",index2+"+1c")
		body.see(index2+"+1c")
	else:
		es("unmatched " + `ch`)
</t>
<t tx="edream.110203161858.1120"># Test  unmatched())
def findMatchingBracket(self,ch,body,index):

	open_brackets  = "([{&lt;"
	close_brackets = ")]}&gt;"
	brackets = open_brackets + close_brackets
	matching_brackets = close_brackets + open_brackets
	forward = ch in open_brackets
	# Find the character matching the initial bracket.
	for n in xrange(len(brackets)):
		if ch == brackets[n]:
			match_ch = matching_brackets[n]
			break
	level = 0
	while 1:
		if (forward and body.compare(index, "&gt;=", "end")):
			return None
		if (not forward and body.compare(index,"&lt;=","1.0")):
			return None
		ch2 = body.get(index)
		if ch2 == ch: level += 1
		if ch2 == match_ch:
			level -= 1
			if level &lt;= 0:
				return index
		index = index + choose(forward,"+1c","-1c")
		index = body.index(index)
	return 0 # unreachable: keeps pychecker happy.
# Test  (
# ([(x){y}]))
# Test  ((x)(unmatched</t>
<t tx="edream.110203161858.1121">def OnIndent(self,event=None):

	self.commands.indentBody()
</t>
<t tx="edream.110203161858.1122">def OnInsertBodyTime (self,event=None):
	
	c = self.commands ; v = c.currentVnode()
	sel1,sel2 = oldSel = getTextSelection(c.body)
	if sel1 and sel2 and sel1 != sel2: # 7/7/03
		c.body.delete(sel1,sel2)
	c.body.insert("insert",self.getTime(body=true))
	c.tree.onBodyChanged(v,"Typing",oldSel=oldSel)
	
def OnInsertHeadlineTime (self,event=None):

	c = self.commands ; v = c.currentVnode()
	s = v.headString() # Remember the old value.

	if v.edit_text():
		sel1,sel2 = getTextSelection(v.edit_text())
		if sel1 and sel2 and sel1 != sel2: # 7/7/03
			v.edit_text().delete(sel1,sel2)
		v.edit_text().insert("insert",self.getTime(body=false))
		c.tree.idle_head_key(v)
		
	# A kludge to get around not knowing whether we are editing or not.
	if s.strip() == v.headString().strip():
		es("Edit headline to append date/time")</t>
<t tx="edream.110203161858.1123">def getTime (self,body=true):
	
	import time
	
	config = app().config
	default_format =  "%m/%d/%Y %H:%M:%S" # E.g., 1/30/2003 8:31:55
	
	# Try to get the format string from leoConfig.txt.
	if body:
		format = config.getWindowPref("body_time_format_string")
		gmt = config.getBoolWindowPref("body_gmt_time")
	else:
		format = config.getWindowPref("headline_time_format_string")
		gmt = config.getBoolWindowPref("headline_gmt_time")

	if format == None:
		format = default_format

	try:
		if gmt:
			s = time.strftime(format,time.gmtime())
		else:
			s = time.strftime(format,time.localtime())
	except:
		es_exception() # Probably a bad format string in leoConfig.txt.
		s = time.strftime(default_format,time.gmtime())
	return s
</t>
<t tx="edream.110203161858.1124"></t>
<t tx="edream.110203161858.1125">def OnEditHeadline(self,event=None):

	tree = self.commands.tree
	tree.editLabel(tree.currentVnode)</t>
<t tx="edream.110203161858.1126">def OnEndEditHeadline(self,event=None):
	
	tree = self.commands.tree
	tree.endEditLabelCommand()
</t>
<t tx="edream.110203161858.1127">def OnAbortEditHeadline(self,event=None):
	
	tree = self.commands.tree
	tree.abortEditLabelCommand()
</t>
<t tx="edream.110203161858.1128">def OnToggleAngleBrackets (self,event=None):
	
	c = self.commands ; v = c.currentVnode()
	s = v.headString().strip()
	if (s[0:2] == "&lt;&lt;"
		or s[-2:] == "&gt;&gt;"): # Must be on separate line.
		if s[0:2] == "&lt;&lt;": s = s[2:]
		if s[-2:] == "&gt;&gt;": s = s[:-2]
		s = s.strip()
	else:
		s = angleBrackets(' ' + s + ' ')
	
	c.tree.editLabel(v)
	if v.edit_text():
		v.edit_text().delete("1.0","end")
		v.edit_text().insert("1.0",s)
		c.tree.onHeadChanged(v)
</t>
<t tx="edream.110203161858.1129"></t>
<t tx="edream.110203161858.1130">def OnFindPanel(self,event=None):

	c = self.commands

	find = app().findFrame
	# 15-SEP-2002 DTHEIN: call withdraw() to force findFrame to top after 
	#                     opening multiple Leo files.
	find.top.withdraw()
	find.top.deiconify()
	find.top.lift()
	
	t = find.find_text
	set_focus(c,t)
	setTextSelection (t,"1.0","end") # Thanks Rich.
	find.commands = self
</t>
<t tx="edream.110203161858.1131">def OnFindNext(self,event=None):

	c = self.commands
	app().findFrame.findNextCommand(c)
</t>
<t tx="edream.110203161858.1132">def OnFindPrevious(self,event=None):

	c = self.commands
	app().findFrame.findPreviousCommand(c)
</t>
<t tx="edream.110203161858.1133">def OnReplace(self,event=None):

	c = self.commands
	app().findFrame.changeCommand(c)
</t>
<t tx="edream.110203161858.1134">def OnReplaceThenFind(self,event=None):

	c = self.commands
	app().findFrame.changeThenFindCommand(c)
</t>
<t tx="edream.110203161858.1135"></t>
<t tx="edream.110203161858.1136"></t>
<t tx="edream.110203161858.1137">def OnCutNode(self,event=None):

	self.commands.cutOutline()
</t>
<t tx="edream.110203161858.1138">def OnCopyNode(self,event=None):

	self.commands.copyOutline()
</t>
<t tx="edream.110203161858.1139">def OnPasteNode(self,event=None):

	self.commands.pasteOutline()
</t>
<t tx="edream.110203161858.1140">def OnDeleteNode(self,event=None):

	self.commands.deleteHeadline()
</t>
<t tx="edream.110203161858.1141">def OnInsertNode(self,event=None):

	self.commands.insertHeadline()</t>
<t tx="edream.110203161858.1142">def OnCloneNode(self,event=None):

	self.commands.clone()
</t>
<t tx="edream.110203161858.1143">def OnSortChildren(self,event=None):

	self.commands.sortChildren()
	
def OnSortSiblings(self,event=None):

	self.commands.sortSiblings()</t>
<t tx="edream.110203161858.1144"></t>
<t tx="edream.110203161858.1145"></t>
<t tx="edream.110203161858.1146">def OnContractChildren(self,event=None):

	self.commands.contractSubheads()
</t>
<t tx="edream.110203161858.1147">def OnContractAllChildren(self,event=None):

	self.commands.contractAllSubheads()
</t>
<t tx="edream.110203161858.1148">def OnExpandAllChildren(self,event=None):

	self.commands.expandAllSubheads()
</t>
<t tx="edream.110203161858.1149">def OnExpandChildren(self,event=None):

	self.commands.expandSubheads()
</t>
<t tx="edream.110203161858.1150">def OnContractAll(self,event=None):

	self.commands.contractAllHeadlines()
</t>
<t tx="edream.110203161858.1151">def OnContractNode(self,event=None):

	self.commands.contractNode()
</t>
<t tx="edream.110203161858.1152">def OnContractParent(self,event=None):

	self.commands.contractParent()
</t>
<t tx="edream.110203161858.1153">def OnExpandAll(self,event=None):

	self.commands.expandAllHeadlines()
</t>
<t tx="edream.110203161858.1154">def OnExpandNextLevel(self,event=None):

	self.commands.expandNextLevel()
</t>
<t tx="edream.110203161858.1155">def OnExpandNode(self,event=None):

	self.commands.expandNode()
</t>
<t tx="edream.110203161858.1156">def OnExpandPrevLevel(self,event=None):

	self.commands.expandPrevLevel()
</t>
<t tx="edream.110203161858.1157">def OnExpandToLevel1(self,event=None): self.commands.expandLevel1()
def OnExpandToLevel2(self,event=None): self.commands.expandLevel2()
def OnExpandToLevel3(self,event=None): self.commands.expandLevel3()
def OnExpandToLevel4(self,event=None): self.commands.expandLevel4()
def OnExpandToLevel5(self,event=None): self.commands.expandLevel5()
def OnExpandToLevel6(self,event=None): self.commands.expandLevel6()
def OnExpandToLevel7(self,event=None): self.commands.expandLevel7()
def OnExpandToLevel8(self,event=None): self.commands.expandLevel8()
def OnExpandToLevel9(self,event=None): self.commands.expandLevel9()
</t>
<t tx="edream.110203161858.1158"></t>
<t tx="edream.110203161858.1159">def OnMoveDown(self,event=None):

	self.commands.moveOutlineDown()
</t>
<t tx="edream.110203161858.1160">def OnMoveLeft(self,event=None):

	self.commands.moveOutlineLeft()
</t>
<t tx="edream.110203161858.1161">def OnMoveRight(self,event=None):

	self.commands.moveOutlineRight()
</t>
<t tx="edream.110203161858.1162">def OnMoveUp(self,event=None):

	self.commands.moveOutlineUp()
</t>
<t tx="edream.110203161858.1163">def OnPromote(self,event=None):

	self.commands.promote()
</t>
<t tx="edream.110203161858.1164">def OnDemote(self,event=None):

	self.commands.demote()
</t>
<t tx="edream.110203161858.1165">def OnGoPrevVisible(self,event=None):

	self.commands.selectVisBack()
</t>
<t tx="edream.110203161858.1166">def OnGoNextVisible(self,event=None):

	self.commands.selectVisNext()
</t>
<t tx="edream.110203161858.1167">def OnGoBack(self,event=None):

	self.commands.selectThreadBack()
</t>
<t tx="edream.110203161858.1168">def OnGoNext(self,event=None):

	self.commands.selectThreadNext()
</t>
<t tx="edream.110203161858.1169"></t>
<t tx="edream.110203161858.1170">def OnGoPrevVisitedNode(self,event=None):
	
	c = self.commands

	while c.beadPointer &gt; 0:
		c.beadPointer -= 1
		v = c.beadList[c.beadPointer]
		if v.exists(c):
			c.beginUpdate()
			c.tree.expandAllAncestors(v)
			c.selectVnode(v,updateBeadList=false)
			c.endUpdate()
			c.tree.idle_scrollTo(v)
			return
</t>
<t tx="edream.110203161858.1171">def OnGoNextVisitedNode(self,event=None):
	
	c = self.commands

	while c.beadPointer + 1 &lt; len(c.beadList):
		c.beadPointer += 1
		v = c.beadList[c.beadPointer]
		if v.exists(c):
			c.beginUpdate()
			c.tree.expandAllAncestors(v)
			c.selectVnode(v,updateBeadList=false)
			c.endUpdate()
			c.tree.idle_scrollTo(v)
			return</t>
<t tx="edream.110203161858.1172">def OnGoToFirstNode(self,event=None):
	
	c = self.commands
	v = c.rootVnode()
	if v:
		c.beginUpdate()
		c.selectVnode(v)
		c.endUpdate()</t>
<t tx="edream.110203161858.1173">def OnGoToLastNode(self,event=None):
	
	c = self.commands
	v = c.rootVnode()
	while v and v.threadNext():
		v = v.threadNext()
	if v:
		c.beginUpdate()
		c.tree.expandAllAncestors(v)
		c.selectVnode(v)
		c.endUpdate()
</t>
<t tx="edream.110203161858.1174">def OnGoToNextChanged(self,event=None):

	self.commands.goToNextDirtyHeadline()
</t>
<t tx="edream.110203161858.1175">def OnGoToNextClone(self,event=None):

	self.commands.goToNextClone()
</t>
<t tx="edream.110203161858.1176">def OnGoToNextMarked(self,event=None):

	self.commands.goToNextMarkedHeadline()
</t>
<t tx="edream.110203161858.1177">def OnGoToNextSibling(self,event=None):
	
	c = self.commands
	v = c.currentVnode()
	if not v: return
	next = v.next()
	if next:
		c.beginUpdate()
		c.selectVnode(next)
		c.endUpdate()</t>
<t tx="edream.110203161858.1178">def OnGoToParent(self,event=None):
	
	c = self.commands
	v = c.currentVnode()
	if not v: return
	p = v.parent()
	if p:
		c.beginUpdate()
		c.selectVnode(p)
		c.endUpdate()
</t>
<t tx="edream.110203161858.1179">def OnGoToPrevSibling(self,event=None):
	
	c = self.commands
	v = c.currentVnode()
	if not v: return
	back = v.back()
	if back:
		c.beginUpdate()
		c.selectVnode(back)
		c.endUpdate()
</t>
<t tx="edream.110203161858.1180">def OnMark(self,event=None):

	self.commands.markHeadline()
</t>
<t tx="edream.110203161858.1181">def OnMarkChangedItems(self,event=None):

	self.commands.markChangedHeadlines()
</t>
<t tx="edream.110203161858.1182">def OnMarkChangedRoots(self,event=None):

	self.commands.markChangedRoots()
</t>
<t tx="edream.110203161858.1183">def OnMarkClones(self,event=None):

	self.commands.markClones()
</t>
<t tx="edream.110203161858.1184">def OnMarkSubheads(self,event=None):

	self.commands.markSubheads()
</t>
<t tx="edream.110203161858.1185">def OnUnmarkAll(self,event=None):

	self.commands.unmarkAll()
</t>
<t tx="edream.110203161858.1186"></t>
<t tx="edream.110203161858.1187">def OnEqualSizedPanes(self,event=None):

	frame = self

	frame.resizePanesToRatio(0.5,frame.secondary_ratio)
</t>
<t tx="edream.110203161858.1188">def OnToggleActivePane (self,event=None):

	# trace(`event`)
	c = self.commands

	if self.getFocus() == self.body:
		set_focus(c,self.canvas)
	else:
		set_focus(c,self.body)</t>
<t tx="edream.110203161858.1189"># The key invariant: self.splitVerticalFlag tells the alignment of the main splitter.

def OnToggleSplitDirection(self,event=None):
	# Abbreviations.
	frame = self
	bar1 = self.bar1 ; bar2 = self.bar2
	split1Pane1,split1Pane2 = self.split1Pane1,self.split1Pane2
	split2Pane1,split2Pane2 = self.split2Pane1,self.split2Pane2
	# Switch directions.
	verticalFlag = self.splitVerticalFlag = not self.splitVerticalFlag
	orientation = choose(verticalFlag,"vertical","horizontal")
	app().config.setWindowPref("initial_splitter_orientation",orientation)
	# Reconfigure the bars.
	bar1.place_forget()
	bar2.place_forget()
	self.configureBar(bar1,verticalFlag)
	self.configureBar(bar2,not verticalFlag)
	# Make the initial placements again.
	self.placeSplitter(bar1,split1Pane1,split1Pane2,verticalFlag)
	self.placeSplitter(bar2,split2Pane1,split2Pane2,not verticalFlag)
	# Adjust the log and body panes to give more room around the bars.
	self.reconfigurePanes()
	# Redraw with an appropriate ratio.
	vflag,ratio,secondary_ratio = frame.initialRatios()
	self.resizePanesToRatio(ratio,secondary_ratio)</t>
<t tx="edream.110203161858.1190">def OnCascade(self,event=None):
	
	c = self ; x,y,delta = 10,10,10
	for frame in app().windowList:
		top = frame.top
		# Compute w,h
		top.update_idletasks() # Required to get proper info.
		geom = top.geometry() # geom = "WidthxHeight+XOffset+YOffset"
		dim,junkx,junky = string.split(geom,'+')
		w,h = string.split(dim,'x')
		w,h = int(w),int(h)
		# Set new x,y and old w,h
		frame.top.geometry("%dx%d%+d%+d" % (w,h,x,y))
		# Compute the new offsets.
		x += 30 ; y += 30
		if x &gt; 200:
			x = 10 + delta ; y = 40 + delta
			delta += 10
</t>
<t tx="edream.110203161858.1191">def OnMinimizeAll(self,event=None):

	self.minimize(app().findFrame)
	self.minimize(app().pythonFrame)
	for frame in app().windowList:
		self.minimize(frame)
	
def minimize(self, frame):

	if frame and frame.top.state() == "normal":
		frame.top.iconify()</t>
<t tx="edream.110203161858.1192">def OnHideLogWindow (self):
	
	c = self.commands ; frame = c.frame
	frame.divideLeoSplitter2(0.99, not frame.splitVerticalFlag)</t>
<t tx="edream.110203161858.1193">def OnOpenCompareWindow (self,event=None):
	
	c = self.commands
	cp = self.comparePanel
	
	if cp:
		cp.top.deiconify()
		cp.top.lift()
	else:
		cmp = leoCompare.leoCompare(c)
		self.comparePanel = cp =  leoCompare.leoComparePanel(c,cmp)
		cp.run()</t>
<t tx="edream.110203161858.1194">def OnOpenPythonWindow(self,event=None):

	if sys.platform == "linux2":
		&lt;&lt; open idle in Linux &gt;&gt;
	else:
		&lt;&lt; open idle in Windows &gt;&gt;
</t>
<t tx="edream.110203161858.1195"># 09-SEP-2002 DHEIN: Open Python window under linux

try:
	pathToLeo = os.path.join(app().loadDir,"leo.py")
	sys.argv = [pathToLeo]
	from idlelib import idle
	if app().idle_imported:
		reload(idle)
	app().idle_imported = true
except:
	try:
		es("idlelib could not be imported.")
		es("Probably IDLE is not installed.")
		es("Run Tools/idle/setup.py to build idlelib.")
		es("Can not import idle")
		es_exception() # This can fail!!
	except: pass
</t>
<t tx="edream.110203161858.1196">try:
	executable_dir = os.path.dirname(sys.executable)
	idle_dir=os.path.join(executable_dir,"Tools","idle")
	if idle_dir not in sys.path:
		sys.path.append(idle_dir)
	# Initialize argv: the -t option sets the title of the Idle interp window.
	# pathToLeo = os.path.join(app().loadDir,"leo.py")
	sys.argv = ["leo","-t","leo"]
	import PyShell
	if app().idle_imported:
		reload(idle)
		app().idle_imported = true
	if 1: # Mostly works, but causes problems when opening other .leo files.
		PyShell.main()
	else: # Doesn't work: destroys all of Leo when Idle closes.
		self.leoPyShellMain()
except:
	try:
		es("Can not import idle")
		es("Please add " + `idle_dir` + " to sys.path")
		es_exception() # This can fail!!
	except: pass</t>
<t tx="edream.110203161858.1197">@ The key parts of Pyshell.main(), but using Leo's root window instead of a new Tk root window.

This does _not_ work.  Using Leo's root window means that Idle will shut down Leo without warning when the Idle window is closed!
@c

def leoPyShellMain(self):
	
	import PyShell
	root = app().root
	PyShell.fixwordbreaks(root)
	flist = PyShell.PyShellFileList(root)
	shell = PyShell.PyShell(flist)
	flist.pyshell = shell
	shell.begin()</t>
<t tx="edream.110203161858.1198"></t>
<t tx="edream.110203161858.1199">def OnAbout(self,event=None):
	
	# Don't use triple-quoted strings or continued strings here.
	# Doing so would add unwanted leading tabs.
	ver = "$Revision$" # CVS will update this.
	build = ver[10:-1] # Strip off "$Reversion" and "$"
	version = "leo.py 4.0 alpha 1, Build " + build + ", July 25, 2003\n\n"
	copyright = (
		"Copyright 1999-2003 by Edward K. Ream\n" +
		"All Rights Reserved\n" +
		"Leo is distributed under the Python License")
	url = "http://webpages.charter.net/edreamleo/front.html"
	email = "edreamleo@charter.net"

	import leoDialog
	leoDialog.aboutLeo(version,copyright,url,email).run(modal=false)
</t>
<t tx="edream.110203161858.1200">def OnLeoDocumentation (self,event=None):

	fileName = os.path.join(app().loadDir,"..","doc","LeoDocs.leo")
	try:
		self.OpenWithFileName(fileName)
	except:
		es("not found: LeoDocs.leo")
</t>
<t tx="edream.110203161858.1201">def OnLeoHome (self,event=None):
	
	import webbrowser

	url = "http://webpages.charter.net/edreamleo/front.html"
	try:
		webbrowser.open_new(url)
	except:
		es("not found: " + url)</t>
<t tx="edream.110203161858.1202">def OnLeoHelp (self,event=None):
	
	file = os.path.join(app().loadDir,"..","doc","sbooks.chm")
	if os.path.exists(file):
		os.startfile(file)
	else:
		answer = leoDialog.askYesNo(
			"Download Tutorial?",
			"Download tutorial (sbooks.chm) from SourceForge?").run(modal=true)

		if answer == "yes":
			try:
				if 0: # Download directly.  (showProgressBar needs a lot of work)
					url = "http://umn.dl.sourceforge.net/sourceforge/leo/sbooks.chm"
					import urllib
					self.scale = None
					urllib.urlretrieve(url,file,self.showProgressBar)
					if self.scale:
						self.scale.destroy()
						self.scale = None
				else:
					url = "http://prdownloads.sourceforge.net/leo/sbooks.chm?download"
					import webbrowser
					os.chdir(app().loadDir)
					webbrowser.open_new(url)
			except:
				es("exception dowloading sbooks.chm")
				es_exception()</t>
<t tx="edream.110203161858.1203">def showProgressBar (self,count,size,total):

	# trace("count,size,total:" + `count` + "," + `size` + "," + `total`)
	if self.scale == None:
		&lt;&lt; create the scale widget &gt;&gt;
	self.scale.set(count*size)
	self.scale.update_idletasks()</t>
<t tx="edream.110203161858.1204">Tk = Tkinter
top = Tk.Toplevel()
top.title("Download progress")
self.scale = scale = Tk.Scale(top,state="normal",orient="horizontal",from_=0,to=total)
scale.pack()
top.lift()</t>
<t tx="edream.110203161858.1205">def OnLeoTutorial (self,event=None):
	
	import webbrowser

	if 1: # new url
		url = "http://www.3dtree.com/ev/e/sbooks/leo/sbframetoc_ie.htm"
	else:
		url = "http://www.evisa.com/e/sbooks/leo/sbframetoc_ie.htm"
	try:
		webbrowser.open_new(url)
	except:
		es("not found: " + url)</t>
<t tx="edream.110203161858.1206">def OnLeoConfig (self,event=None):

	# 4/21/03 new code suggested by fBechmann@web.de
	loadDir = app().loadDir
	configDir = app().config.configDir
	# Look in configDir first.
	fileName = os.path.join(configDir, "leoConfig.leo")
	ok, frame = self.OpenWithFileName(fileName)
	if not ok:
		if configDir == loadDir:
			es("leoConfig.leo not found in " + loadDir)
		else:
			# Look in loadDir second.
			fileName = os.path.join(loadDir,"leoConfig.leo")
			ok, frame = self.OpenWithFileName(fileName)
			if not ok:
				es("leoConfig.leo not found in " + configDir + " or " + loadDir)
	
def OnApplyConfig (self,event=None):

	app().config.init()
	self.commands.frame.reconfigureFromConfig()</t>
<t tx="edream.110203161858.1207">@ The following convenience routines make creating menus easier.

The Plugins section gives examples of how to use these routines to create custom menus and to add items to the Open With menu.
</t>
<t tx="edream.110203161858.1208">@ The old, non-user-configurable code bound shortcuts in createMenuBar.  The new user-configurable code binds shortcuts here.

Centralized tables of shortscuts no longer exist as they did in createAccelerators.  To check for duplicates, (possibly arising from leoConfig.txt) we add entries to a central dictionary here, and report duplicates if an entry for a canonicalized shortcut already exists.
@c

def createMenuEntries (self,menu,table,openWith=0):
	
	for label,accel,command in table:
		if label == None or command == None or label == "-":
			menu.add_separator()
		else:
			&lt;&lt; set name to the label for doCommand &gt;&gt;
			&lt;&lt; set accel to the shortcut for name &gt;&gt;
			&lt;&lt; set bind_shortcut and menu_shortcut using accel &gt;&gt;
			&lt;&lt; define callback function &gt;&gt;
			&lt;&lt; set realLabel, amp_index and menu_shortcut &gt;&gt;

			menu.add_command(label=realLabel,accelerator=menu_shortcut,
				command=callback,underline=amp_index)

			if bind_shortcut:
				&lt;&lt; handle bind_shorcut &gt;&gt;</t>
<t tx="edream.110203161858.1209">name = label.strip().lower()

# Remove special characters from command names.
name2 = ""
for ch in name:
	if ch in string.letters or ch in string.digits:
		name2 = name2 + ch
name = name2
</t>
<t tx="edream.110203161858.1210">config = app().config
accel2 = config.getShortcut(name)

# 7/19/03: Make sure "None" overrides the default shortcut.
if accel2 == None or len(accel2) == 0:
	pass # Use default shortcut, if any.
elif accel2.lower() == "none":
	accel = None # Remove the default shortcut.
else:
	accel = accel2 # Override the default shortcut.</t>
<t tx="edream.110203161858.1211">bind_shortcut,menu_shortcut = self.canonicalizeShortcut(accel)

# Kludge: disable the shortcuts for cut, copy, paste.
# This has already been bound in leoFrame.__init__
# 2/13/03: A _possible_ fix for the Linux control-v bug.

if sys.platform not in ("linux1","linux2"):
	if bind_shortcut in ("&lt;Control-c&gt;","&lt;Control-v&gt;","&lt;Control-x&gt;"):
		bind_shortcut = None</t>
<t tx="edream.110203161858.1212">@ Tkinter will call the callback function with:

	- one event argument if the user uses a menu shortcut.
	- no arguments otherwise.

Therefore, the first parameter must be event, and it must default to None.
@c

if openWith:
	def callback(event=None,self=self,data=command):
		# print "event",`event` ; print "self",`self` ; print "data",`data`
		return self.OnOpenWith(data=data)
		
else:
	def callback(event=None,self=self,command=command,label=name):
		# print "event",`event` ; print "self",`self` ; print "command",`command`
		return self.doCommand(command,label,event)</t>
<t tx="edream.110203161858.1213">realLabel = app().getRealMenuName(label)
amp_index = realLabel.find("&amp;")
realLabel = realLabel.replace("&amp;","")
if not menu_shortcut:
	menu_shortcut = ""</t>
<t tx="edream.110203161858.1214">if bind_shortcut in self.menuShortcuts:
	if not app().menuWarningsGiven:
		es("duplicate shortcut:", accel, bind_shortcut, label,color="red")
		print "duplicate shortcut:", accel, bind_shortcut, label
else:
	self.menuShortcuts.append(bind_shortcut)
	try:
		self.body.bind(bind_shortcut,callback)
		self.top.bind (bind_shortcut,callback)
	except: # could be a user error
		if not app().menuWarningsGiven:
			print "exception binding menu shortcut..."
			print bind_shortcut
			es_exception()
			app().menuWarningsGive = true</t>
<t tx="edream.110203161858.1215">def createMenuItemsFromTable (self,menuName,table,openWith=0):
	
	try:
		menu = self.getMenu(menuName)
		if menu == None:
			print "menu does not exist: ", menuName
			es("menu does not exist: " + `menuName`)
			return
		self.createMenuEntries(menu,table,openWith)
	except:
		print "exception creating items for ", menuName," menu"
		es("exception creating items for " + `menuName` + " menu")
		es_exception()</t>
<t tx="edream.110203161858.1216">def createNewMenu (self,menuName,parentName="top",before=None):
	
	import Tkinter
	from leoGlobals import app
	try:
		parent = self.getMenu(parentName)
		if parent == None:
			es("unknown parent menu: " + parentName)
			return None
			
		menu = self.getMenu(menuName)
		if menu:
			es("menu already exists: " + menuName,color="red")
		else:
			menu = Tkinter.Menu(parent,tearoff=0)
			self.setMenu(menuName,menu)
			label=app().getRealMenuName(menuName)
			amp_index = label.find("&amp;")
			label = label.replace("&amp;","")
			if before: # Insert the menu before the "before" menu.
				index_label=app().getRealMenuName(before)
				amp_index = index_label.find("&amp;")
				index_label = index_label.replace("&amp;","")
				index = parent.index(index_label)
				parent.insert_cascade(index=index,label=label,menu=menu,underline=amp_index)
			else:
				parent.add_cascade(label=label,menu=menu,underline=amp_index)
			return menu
	except:
		es("exception creating " + menuName + " menu")
		es_exception()
		return None</t>
<t tx="edream.110203161858.1217">@ Entries in the table passed to createOpenWithMenuFromTable are
tuples of the form (commandName,shortcut,data).

- command is one of "os.system", "os.startfile", "os.spawnl", "os.spawnv" or "exec".
- shortcut is a string describing a shortcut, just as for createMenuItemsFromTable.
- data is a tuple of the form (command,arg,ext).

Leo executes command(arg+path) where path is the full path to the temp file.
If ext is not None, the temp file has the given extension.
Otherwise, Leo computes an extension based on the @language directive in effect.
@c

def createOpenWithMenuFromTable (self,table):

	a = app()
	a.openWithTable = table # Override any previous table.
	# Delete the previous entry.
	parent = self.getMenu("File")
	label=a.getRealMenuName("Open &amp;With...")
	amp_index = label.find("&amp;")
	label = label.replace("&amp;","")
	try:
		index = parent.index(label)
		parent.delete(index)
	except:
		try:
			index = parent.index("Open With...")
			parent.delete(index)
		except: return
	# Create the "Open With..." menu.
	openWithMenu = Tkinter.Menu(parent,tearoff=0)
	self.setMenu("Open With...",openWithMenu)
	parent.insert_cascade(index,label=label,menu=openWithMenu,underline=amp_index)
	# Populate the "Open With..." menu.
	shortcut_table = []
	for triple in table:
		if len(triple) == 3: # 6/22/03
			shortcut_table.append(triple)
		else:
			es("createOpenWithMenuFromTable: invalid data",color="red")
			return
			
	# for i in shortcut_table: print i
	self.createMenuItemsFromTable("Open &amp;With...",shortcut_table,openWith=1)
</t>
<t tx="edream.110203161858.1218">def deleteMenu (self,menuName):

	try:
		menu = self.getMenu(menuName)
		if menu:
			menu.destroy()
			self.destroyMenu(menuName)
		else:
			es("can't delete menu: " + menuName)
	except:
		es("exception deleting " + menuName + " menu")
		es_exception()</t>
<t tx="edream.110203161858.1219"># Delete itemName from the menu whose name is menuName.
def deleteMenuItem (self,itemName,menuName="top"):

	from leoGlobals import app
	try:
		menu = self.getMenu(menuName)
		if menu:
			realItemName=app().getRealMenuName(itemName)
			menu.delete(realItemName)
		else:
			es("menu not found: " + menuName)
	except:
		es("exception deleting " + itemName + " from " + menuName + " menu")
		es_exception()</t>
<t tx="edream.110203161858.1220">def setRealMenuNamesFromTable (self,table):

	try:
		app().setRealMenuNamesFromTable(table)
	except:
		es("exception in setRealMenuNamesFromTable")
		es_exception()
</t>
<t tx="edream.110203161858.1221"></t>
<t tx="edream.110203161858.1222"># This is the Tk "postcommand" callback.  It should update all menu items.

def OnMenuClick (self):
	
	# A horrible kludge: set app().log to cover for a possibly missing activate event.
	app().setLog(self,"OnMenuClick")
	
	# Allow the user first crack at updating menus.
	c = self.commands ; v = c.currentVnode() # 2/8/03
	if not doHook("menu2",c=c,v=v):
		self.updateFileMenu()
		self.updateEditMenu()
		self.updateOutlineMenu()

</t>
<t tx="edream.110203161858.1223"># Returns true if text in the outline or body text is selected.

def hasSelection (self):

	if self.body:
		first, last = getTextSelection(self.body)
		return first != last
	else:
		return false</t>
<t tx="edream.110203161858.1224">def updateFileMenu (self):
	
	c = self.commands
	if not c: return

	try:
		menu = self.getMenu("File")
		enableMenu(menu,"Revert To Saved", c.canRevert())

		openWithMenu = self.getMenu("Open With...")
		enableMenu(menu,"Open With...", app().hasOpenWithMenu)
		
	except:
		es("exception updating File menu")
		es_exception()
</t>
<t tx="edream.110203161858.1225">def updateEditMenu (self):

	c = self.commands
	if not c: return
	try:
		# Top level Edit menu...
		menu = self.getMenu("Edit")
		c.undoer.enableMenuItems()
		if 0: # Always on for now.
			enableMenu(menu,"Cut",c.canCut())
			enableMenu(menu,"Copy",c.canCut())
			enableMenu(menu,"Paste",c.canPaste())
		if 0: # Always on for now.
			menu = self.getMenu("Find...")
			enableMenu(menu,"Find Next",c.canFind())
			flag = c.canReplace()
			enableMenu(menu,"Replace",flag)
			enableMenu(menu,"Replace, Then Find",flag)
		# Edit Body submenu...
		menu = self.getMenu("Edit Body...")
		enableMenu(menu,"Extract Section",c.canExtractSection())
		enableMenu(menu,"Extract Names",c.canExtractSectionNames())
		enableMenu(menu,"Extract",c.canExtract())
		enableMenu(menu,"Match Brackets",c.canFindMatchingBracket())
	except:
		es("exception updating Edit menu")
		es_exception()</t>
<t tx="edream.110203161858.1226">def updateOutlineMenu (self):

	c = self.commands ; v = c.currentVnode()
	if not c: return
	try:
		# Top level outline menu...
		menu = self.getMenu("Outline")
		enableMenu(menu,"Cut Node",c.canCutOutline())
		enableMenu(menu,"Delete Node",c.canDeleteHeadline())
		enableMenu(menu,"Paste Node",c.canPasteOutline())
		enableMenu(menu,"Sort Siblings",c.canSortSiblings())
		# Expand/Contract submenu...
		menu = self.getMenu("Expand/Contract...")
		hasChildren = v.hasChildren()
		isExpanded = v.isExpanded()
		enableMenu(menu,"Contract Parent",c.canContractParent())
		enableMenu(menu,"Contract Node",hasChildren and isExpanded)
		enableMenu(menu,"Expand Node",hasChildren and not isExpanded)
		enableMenu(menu,"Expand Prev Level",hasChildren and isExpanded)
		enableMenu(menu,"Expand Next Level",hasChildren)
		enableMenu(menu,"Expand To Level 1",hasChildren and isExpanded)
		for i in xrange(2,9):
			enableMenu(menu,"Expand To Level " + str(i), hasChildren)
		# Move submenu...
		menu = self.getMenu("Move...")
		enableMenu(menu,"Move Down",c.canMoveOutlineDown())
		enableMenu(menu,"Move Left",c.canMoveOutlineLeft())
		enableMenu(menu,"Move Right",c.canMoveOutlineRight())
		enableMenu(menu,"Move Up",c.canMoveOutlineUp())
		enableMenu(menu,"Promote",c.canPromote())
		enableMenu(menu,"Demote",c.canDemote())
		# Go To submenu
		menu = self.getMenu("Go To...")
		enableMenu(menu,"Go Back",c.beadPointer &gt; 1)
		enableMenu(menu,"Go Forward",c.beadPointer + 1 &lt; len(c.beadList))
		enableMenu(menu,"Go To Prev Visible",c.canSelectVisBack())
		enableMenu(menu,"Go To Next Visible",c.canSelectVisNext())
		enableMenu(menu,"Go To Next Marked",c.canGoToNextMarkedHeadline())
		enableMenu(menu,"Go To Next Changed",c.canGoToNextDirtyHeadline())
		enableMenu(menu,"Go To Next Clone",v.isCloned())
		enableMenu(menu,"Go To Prev Node",c.canSelectThreadBack())
		enableMenu(menu,"Go To Next Node",c.canSelectThreadNext())
		enableMenu(menu,"Go To Parent",v.parent() != None)
		enableMenu(menu,"Go To Prev Sibling",v.back() != None)
		enableMenu(menu,"Go To Next Sibling",v.next() != None)
		# Mark submenu
		menu = self.getMenu("Mark/Unmark...")
		label = choose(v and v.isMarked(),"Unmark","Mark")
		setMenuLabel(menu,0,label)
		enableMenu(menu,"Mark Subheads",(v and v.hasChildren()))
		enableMenu(menu,"Mark Changed Items",c.canMarkChangedHeadlines())
		enableMenu(menu,"Mark Changed Roots",c.canMarkChangedRoots())
		enableMenu(menu,"Mark Clones",v.isCloned())
	except:
		es("exception updating Outline menu")
		es_exception()</t>
<t tx="edream.110203161858.1227">@ The key invariants used throughout this code:

1. self.splitVerticalFlag tells the alignment of the main splitter and
2. not self.splitVerticalFlag tells the alignment of the secondary splitter.

Only the general-purpose divideAnySplitter routine doesn't know about these invariants.  So most of this code is specialized for Leo's window.  OTOH, creating a single splitter window would be much easier than this code.
</t>
<t tx="edream.110203161858.1228">def resizePanesToRatio(self,ratio,secondary_ratio):

	self.divideLeoSplitter(self.splitVerticalFlag, ratio)
	self.divideLeoSplitter(not self.splitVerticalFlag, secondary_ratio)
	# trace(`ratio`)
</t>
<t tx="edream.110203161858.1229">def bindBar (self, bar, verticalFlag):
	
	if verticalFlag == self.splitVerticalFlag:
		bar.bind("&lt;B1-Motion&gt;", self.onDragMainSplitBar)

	else:
		bar.bind("&lt;B1-Motion&gt;", self.onDragSecondarySplitBar)
</t>
<t tx="edream.110203161858.1230"># 5/20/03: Removed the ancient kludge for forcing the height &amp; width of f.
# The code in leoFileCommands.getGlobals now works!

def createLeoSplitter (self, parent, verticalFlag):
	
	"""Create a splitter window and panes into which the caller packs widgets.
	
	Returns (f, bar, pane1, pane2) """

	Tk = Tkinter
	
	# Create the frames.
	f = Tk.Frame(parent,bd=0,relief="flat")
	f.pack(expand=1,fill="both",pady=1)
	pane1 = Tk.Frame(f)
	pane2 = Tk.Frame(f)
	bar =   Tk.Frame(f,bd=2,relief="raised",bg="LightSteelBlue2")

	# Configure and place the frames.
	self.configureBar(bar,verticalFlag)
	self.bindBar(bar,verticalFlag)
	self.placeSplitter(bar,pane1,pane2,verticalFlag)

	return f, bar, pane1, pane2</t>
<t tx="edream.110203161858.1231"># This is the general-purpose placer for splitters.
# It is the only general-purpose splitter code in Leo.

def divideAnySplitter (self, frac, verticalFlag, bar, pane1, pane2):

	if verticalFlag:
		# Panes arranged vertically; horizontal splitter bar
		bar.place(rely=frac)
		pane1.place(relheight=frac)
		pane2.place(relheight=1-frac)
	else:
		# Panes arranged horizontally; vertical splitter bar
		bar.place(relx=frac)
		pane1.place(relwidth=frac)
		pane2.place(relwidth=1-frac)</t>
<t tx="edream.110203161858.1232"># Divides the main or secondary splitter, using the key invariant.
def divideLeoSplitter (self, verticalFlag, frac):
	if self.splitVerticalFlag == verticalFlag:
		self.divideLeoSplitter1(frac,verticalFlag)
		self.ratio = frac # Ratio of body pane to tree pane.
	else:
		self.divideLeoSplitter2(frac,verticalFlag)
		self.secondary_ratio = frac # Ratio of tree pane to log pane.

# Divides the main splitter.
def divideLeoSplitter1 (self, frac, verticalFlag): 
	self.divideAnySplitter(frac, verticalFlag,
		self.bar1, self.split1Pane1, self.split1Pane2)

# Divides the secondary splitter.
def divideLeoSplitter2 (self, frac, verticalFlag): 
	self.divideAnySplitter (frac, verticalFlag,
		self.bar2, self.split2Pane1, self.split2Pane2)</t>
<t tx="edream.110203161858.1233">def initialRatios (self):

	config = app().config
	s = config.getWindowPref("initial_splitter_orientation")
	verticalFlag = s == None or (s != "h" and s != "horizontal")

	if verticalFlag:
		r = config.getFloatWindowPref("initial_vertical_ratio")
		if r == None or r &lt; 0.0 or r &gt; 1.0: r = 0.5
		r2 = config.getFloatWindowPref("initial_vertical_secondary_ratio")
		if r2 == None or r2 &lt; 0.0 or r2 &gt; 1.0: r2 = 0.8
	else:
		r = config.getFloatWindowPref("initial_horizontal_ratio")
		if r == None or r &lt; 0.0 or r &gt; 1.0: r = 0.3
		r2 = config.getFloatWindowPref("initial_horizontal_secondary_ratio")
		if r2 == None or r2 &lt; 0.0 or r2 &gt; 1.0: r2 = 0.8

	# print (`r`,`r2`)
	return verticalFlag,r,r2</t>
<t tx="edream.110203161858.1234">def onDragMainSplitBar (self, event):
	self.onDragSplitterBar(event,self.splitVerticalFlag)

def onDragSecondarySplitBar (self, event):
	self.onDragSplitterBar(event,not self.splitVerticalFlag)

def onDragSplitterBar (self, event, verticalFlag):

	# x and y are the coordinates of the cursor relative to the bar, not the main window.
	bar = event.widget
	x = event.x
	y = event.y
	top = bar.winfo_toplevel()

	if verticalFlag:
		# Panes arranged vertically; horizontal splitter bar
		wRoot	= top.winfo_rooty()
		barRoot = bar.winfo_rooty()
		wMax	= top.winfo_height()
		offset = float(barRoot) + y - wRoot
	else:
		# Panes arranged horizontally; vertical splitter bar
		wRoot	= top.winfo_rootx()
		barRoot = bar.winfo_rootx()
		wMax	= top.winfo_width()
		offset = float(barRoot) + x - wRoot

	# Adjust the pixels, not the frac.
	if offset &lt; 3: offset = 3
	if offset &gt; wMax - 2: offset = wMax - 2
	# Redraw the splitter as the drag is occuring.
	frac = float(offset) / wMax
	# trace(`frac`)
	self.divideLeoSplitter(verticalFlag, frac)</t>
<t tx="edream.110203161858.1235">def placeSplitter (self,bar,pane1,pane2,verticalFlag):

	if verticalFlag:
		# Panes arranged vertically; horizontal splitter bar
		pane1.place(relx=0.5, rely =   0, anchor="n", relwidth=1.0, relheight=0.5)
		pane2.place(relx=0.5, rely = 1.0, anchor="s", relwidth=1.0, relheight=0.5)
		bar.place  (relx=0.5, rely = 0.5, anchor="c", relwidth=1.0)
	else:
		# Panes arranged horizontally; vertical splitter bar
		# adj gives tree pane more room when tiling vertically.
		adj = choose(verticalFlag != self.splitVerticalFlag,0.65,0.5)
		pane1.place(rely=0.5, relx =   0, anchor="w", relheight=1.0, relwidth=adj)
		pane2.place(rely=0.5, relx = 1.0, anchor="e", relheight=1.0, relwidth=1.0-adj)
		bar.place  (rely=0.5, relx = adj, anchor="c", relheight=1.0)</t>
<t tx="edream.110203161858.1236">@tabwidth 4
</t>
<t tx="edream.110203161858.1237">def createStatusLine (self):
	
	if self.statusFrame and self.statusLabel:
		return
	
	self.statusFrame = statusFrame = Tk.Frame(self.outerFrame,bd=2)
	statusFrame.pack(fill="x",pady=1)
	
	text = "line 0, col 0"
	width = len(text) + 4
	self.statusLabel = Tk.Label(statusFrame,text=text,width=width,anchor="w")
	self.statusLabel.pack(side="left",padx=1)
	
	bg = statusFrame.cget("background")
	self.statusText = Tk.Text(statusFrame,height=1,state="disabled",bg=bg,relief="groove")
	self.statusText.pack(side="left",expand=1,fill="x")
	
	def idleStatusUpdateCallback(tag,keywords):
		c=keywords.get("c")
		if c: c.frame.updateStatusRowCol()

	# Register an idle-time handler to update the row and column indicators.
	self.statusFrame.after_idle(self.updateStatusRowCol)</t>
<t tx="edream.110203161858.1238">def clearStatusLine (self):
	
	t = self.statusText
	t.configure(state="normal")
	t.delete("1.0","end")
	t.configure(state="disabled")
</t>
<t tx="edream.110203161858.1239">def putStatusLine (self,s,color=None):
	
	t = self.statusText ; tags = self.statusColorTags
	if not t: return

	t.configure(state="normal")
	
	if "black" not in self.logColorTags:
		tags.append("black")
		
	if color and color not in tags:
		tags.append(color)
		t.tag_config(color,foreground=color)

	if color:
		t.insert("end",s)
		t.tag_add(color,"end-%dc" % (len(s)+1),"end-1c")
		t.tag_config("black",foreground="black")
		t.tag_add("black","end")
	else:
		t.insert("end",s)
	
	t.configure(state="disabled")</t>
<t tx="edream.110203161858.1240">def updateStatusRowCol (self):
	
	c = self.commands ; body = self.body ; lab = self.statusLabel
	
	# New for Python 2.3: may be called during shutdown.
	if app().killed:
		return

	index = body.index("insert")
	row,col = getindex(body,index)
	if col &gt; 0:
		s = body.get("%d.0" % (row),index)
		col = computeWidth (s,self.tab_width)

	if row != self.lastStatusRow or col != self.lastStatusCol:
		s = "line %d, col %d " % (row,col)
		lab.configure(text=s)
		self.lastStatusRow = row
		self.lastStatusCol = col
		
	# Reschedule this routine 100 ms. later.
	# Don't use after_idle: it hangs Leo.
	self.statusFrame.after(100,self.updateStatusRowCol)</t>
<t tx="edream.110203161858.1241">@first # -*- coding: utf-8 -*-

# Global constants, variables and utility functions used throughout Leo.

@language python

import exceptions,os,re,string,sys,time,Tkinter,traceback,types

&lt;&lt; define general constants &gt;&gt;

@others</t>
<t tx="edream.110203161858.1242">body_newline = '\n'
body_ignored_newline = '\r'

try:
	true = True
	false = False
except:
	# print "True and False not defined"
	true = True = 1
	false = False = 0 # Better than None

assert(false!=None)</t>
<t tx="edream.110203161858.1243"></t>
<t tx="edream.110203161858.1244">def createTopologyList (c=None,root=None,useHeadlines=false):
	
	"""Creates a list describing a node and all its descendents"""
	
	if not c: c = top()
	if not root: root = c.rootVnode()
	v = root
	if useHeadlines:
		aList = [(v.numberOfChildren(),v.headString()),]
	else:
		aList = [v.numberOfChildren()]
	child = v.firstChild()
	while child:
		aList.append(createTopologyList(c,child,useHeadlines))
		child = child.next()
	return aList</t>
<t tx="edream.110203161858.1245">def checkClones2Links (c=None,verbose=false):
	
	if not c: c = top()
	
	c.clearAllVisited()
	v = c.rootVnode()
	&lt;&lt; clear statistics &gt;&gt;
	while v:
		if v.isCloned() and not v.t.isVisited():
			v.t.setVisited()
			&lt;&lt; handle each item in v's join list &gt;&gt;
		v = v.threadNext()
				
	&lt;&lt; print statistics &gt;&gt;</t>
<t tx="edream.110203161858.1246">targetsInDerivedFiles = []
multipleTargetsInDerivedFiles = []
clonesInNoDerivedFiles = []
clonedAtFileNodes = []
</t>
<t tx="edream.110203161858.1247">for name, theList in (
	("targetsInDerivedFiles:", targetsInDerivedFiles),
	("multipleTargetsInDerivedFiles:", multipleTargetsInDerivedFiles),
	("clonesInNoDerivedFiles:", clonesInNoDerivedFiles),
	("clonedAtFileNodes:", clonedAtFileNodes)):

	print ; print name, len(theList)

	if verbose:
		headlines = []
		for v in theList:
			headlines.append(v.cleanHeadString())
		headlines.sort()
		for h in headlines:
			print h</t>
<t tx="edream.110203161858.1248">if v.isAnyAtFileNode():
	clonedAtFileNodes.append(v)
else:
	anchors = 0 ; targets = 0
	for j in v.t.joinList:
		
		# See if j should be an anchor: i.e., whether it is in any @file node.
		p = j ; isAnchor = false
		while p:
			if p.isAnyAtFileNode():
				isAnchor = true
				break
			p = p.parent()
		if isAnchor: anchors += 1
		else: targets += 1

	if anchors == 1:
		targetsInDerivedFiles.append(v)
	elif anchors &gt; 1:
		multipleTargetsInDerivedFiles.append(v)
	else:
		clonesInNoDerivedFiles.append(v)</t>
<t tx="edream.110203161858.1249">@ CheckVersion() is a generic version checker.  Assumes a
version string of up to four parts, or tokens, with
leftmost token being most significant and each token
becoming less signficant in sequence to the right.

RETURN VALUE

1 if comparison is true
0 if comparison is false

PARAMETERS

version: the version string to be tested
againstVersion: the reference version string to be
              compared against
condition: can be any of "==", "!=", "&gt;=", "&lt;=", "&gt;", or "&lt;"
stringCompare: whether to test a token using only the
             leading integer of the token, or using the
             entire token string.  For example, a value
             of "0.0.1.0" means that we use the integer
             value of the first, second, and fourth
             tokens, but we use a string compare for the
             third version token.
delimiter: the character that separates the tokens in the
         version strings.

The comparison uses the precision of the version string
with the least number of tokens.  For example a test of
"8.4" against "8.3.3" would just compare the first two
tokens.

The version strings are limited to a maximum of 4 tokens.
@c

def CheckVersion( version, againstVersion, condition="&gt;=", stringCompare="0.0.0.0", delimiter='.' ):
	import sre  # Unicode-aware regular expressions
	#
	# tokenize the stringCompare flags
	compareFlag = string.split( stringCompare, '.' )
	#
	# tokenize the version strings
	testVersion = string.split( version, delimiter )
	testAgainst = string.split( againstVersion, delimiter )
	#
	# find the 'precision' of the comparison
	tokenCount = 4
	if tokenCount &gt; len(testAgainst):
		tokenCount = len(testAgainst)
	if tokenCount &gt; len(testVersion):
		tokenCount = len(testVersion)
	#
	# Apply the stringCompare flags
	justInteger = sre.compile("^[0-9]+")
	for i in range(tokenCount):
		if "0" == compareFlag[i]:
			m = justInteger.match( testVersion[i] )
			testVersion[i] = m.group()
			m = justInteger.match( testAgainst[i] )
			testAgainst[i] = m.group()
		elif "1" != compareFlag[i]:
			errMsg = "stringCompare argument must be of " +\
				 "the form \"x.x.x.x\" where each " +\
				 "'x' is either '0' or '1'."
			raise EnvironmentError,errMsg
	#
	# Compare the versions
	if condition == "&gt;=":
		for i in range(tokenCount):
			if testVersion[i] &lt; testAgainst[i]:
				return 0
			if testVersion[i] &gt; testAgainst[i]:
				return 1 # it was greater than
		return 1 # it was equal
	if condition == "&gt;":
		for i in range(tokenCount):
			if testVersion[i] &lt; testAgainst[i]:
				return 0
			if testVersion[i] &gt; testAgainst[i]:
				return 1 # it was greater than
		return 0 # it was equal
	if condition == "==":
		for i in range(tokenCount):
			if testVersion[i] != testAgainst[i]:
				return 0 # any token was not equal
		return 1 # every token was equal
	if condition == "!=":
		for i in range(tokenCount):
			if testVersion[i] != testAgainst[i]:
				return 1 # any token was not equal
		return 0 # every token was equal
	if condition == "&lt;":
		for i in range(tokenCount):
			if testVersion[i] &gt;= testAgainst[i]:
				return 0
			if testVersion[i] &lt; testAgainst[i]:
				return 1 # it was less than
		return 0 # it was equal
	if condition == "&lt;=":
		for i in range(tokenCount):
			if testVersion[i] &gt; testAgainst[i]:
				return 0
			if testVersion[i] &lt; testAgainst[i]:
				return 1 # it was less than
		return 1 # it was equal
	#
	# didn't find a condition that we expected.
	raise EnvironmentError,"condition must be one of '&gt;=', '&gt;', '==', '!=', '&lt;', or '&lt;='."
</t>
<t tx="edream.110203161858.1250"># From The Python Cookbook.

import operator

class Bunch:
	
	"""A class that represents a colection of things.
	
	Especially useful for representing a collection of related variables."""
	
	def __init__(self, **keywords):
		self.__dict__.update (keywords)

	def ivars(self):
		return self.__dict__.keys()
		
	def __setitem__ (self,key,value):
		return operator.setitem(self.__dict__,key,value)
		
	def __getitem__ (self,key):
		return operator.getitem(self.__dict__,key)
		
		
		
</t>
<t tx="edream.110203161858.1251"></t>
<t tx="edream.110203161858.1252"></t>
<t tx="edream.110203161858.1253">@ This code requires Fredrik Lundh's PIL and tkIcon packages:

Download PIL    from http://www.pythonware.com/downloads/index.htm#pil
Download tkIcon from http://www.effbot.org/downloads/#tkIcon

We wait until the window has been drawn once before attaching the icon in OnVisiblity.

Many thanks to Jonathan M. Gilligan for suggesting this code.
@c

leoIcon = None

def attachLeoIcon (w):
	try:
		import Image,_tkicon
		import tkIcon
		global leoIcon
		
		f = onVisibility
		callback = lambda event,w=w,f=f:f(w,event)
		w.bind("&lt;Visibility&gt;",callback)
		if not leoIcon:
			# Using a .gif rather than an .ico allows us to specify transparency.
			icon_file_name = os.path.join(app().loadDir,'..','Icons','LeoWin.gif')
			icon_file_name = os.path.normpath(icon_file_name)
			icon_image = Image.open(icon_file_name)
			if 1: # Doesn't resize.
				leoIcon = createLeoIcon(icon_image)
			else: # Assumes 64x64
				leoIcon = tkIcon.Icon(icon_image)
			
	except:
		# es_exception()
		leoIcon = None</t>
<t tx="edream.110203161858.1254"># This code is adapted from tkIcon.__init__
# Unlike the tkIcon code, this code does _not_ resize the icon file.

def createLeoIcon (icon):
	
	try:
		import Image,_tkicon
		import tkIcon
		
		i = icon ; m = None
		# create transparency mask
		if i.mode == "P":
			try:
				t = i.info["transparency"]
				m = i.point(lambda i, t=t: i==t, "1")
			except KeyError: pass
		elif i.mode == "RGBA":
			# get transparency layer
			m = i.split()[3].point(lambda i: i == 0, "1")
		if not m:
			m = Image.new("1", i.size, 0) # opaque
		# clear unused parts of the original image
		i = i.convert("RGB")
		i.paste((0, 0, 0), (0, 0), m)
		# create icon
		m = m.tostring("raw", ("1", 0, 1))
		c = i.tostring("raw", ("BGRX", 0, -1))
		return _tkicon.new(i.size, c, m)
	except:
		return None</t>
<t tx="edream.110203161858.1255"># Handle the "visibility" event and attempt to attach the Leo icon.
# This code must be executed whenever the window is redrawn.

def onVisibility (w,event):

	global leoIcon

	try:
		import Image,_tkicon
		import tkIcon
		if leoIcon and w and event and event.widget == w:
			if 1: # Allows us not to resize the icon.
				leoIcon.attach(w.winfo_id())
			else:
				leoIcon.attach(w)
	except: pass</t>
<t tx="edream.110203161858.1256"># WARNING: Call this routine _after_ creating a dialog.
# (This routine inhibits the grid and pack geometry managers.)

def get_window_info (top):
	
	top.update_idletasks() # Required to get proper info.

	# Get the information about top and the screen.
	geom = top.geometry() # geom = "WidthxHeight+XOffset+YOffset"
	dim,x,y = string.split(geom,'+')
	w,h = string.split(dim,'x')
	w,h,x,y = int(w),int(h),int(x),int(y)
	
	return w,h,x,y</t>
<t tx="edream.110203161858.1257"># Center the dialog on the screen.
# WARNING: Call this routine _after_ creating a dialog.
# (This routine inhibits the grid and pack geometry managers.)

def center_dialog(top):

	sw = top.winfo_screenwidth()
	sh = top.winfo_screenheight()
	w,h,x,y = get_window_info(top)
	
	# Set the new window coordinates, leaving w and h unchanged.
	x = (sw - w)/2
	y = (sh - h)/2
	top.geometry("%dx%d%+d%+d" % (w,h,x,y))
	
	return w,h,x,y</t>
<t tx="edream.110203161858.1258"># Returns frames w and f.
# Typically the caller would pack w into other frames, and pack content into f.

def create_labeled_frame (parent,
	caption=None,relief="groove",bd=2,padx=0,pady=0):
	
	Tk = Tkinter
	# Create w, the master frame.
	w = Tk.Frame(parent)
	w.grid(sticky="news")
	
	# Configure w as a grid with 5 rows and columns.
	# The middle of this grid will contain f, the expandable content area.
	w.columnconfigure(1,minsize=bd)
	w.columnconfigure(2,minsize=padx)
	w.columnconfigure(3,weight=1)
	w.columnconfigure(4,minsize=padx)
	w.columnconfigure(5,minsize=bd)
	
	w.rowconfigure(1,minsize=bd)
	w.rowconfigure(2,minsize=pady)
	w.rowconfigure(3,weight=1)
	w.rowconfigure(4,minsize=pady)
	w.rowconfigure(5,minsize=bd)

	# Create the border spanning all rows and columns.
	border = Tk.Frame(w,bd=bd,relief=relief) # padx=padx,pady=pady)
	border.grid(row=1,column=1,rowspan=5,columnspan=5,sticky="news")
	
	# Create the content frame, f, in the center of the grid.
	f = Tk.Frame(w,bd=bd)
	f.grid(row=3,column=3,sticky="news")
	
	# Add the caption.
	if caption and len(caption) &gt; 0:
		caption = Tk.Label(parent,text=caption,highlightthickness=0,bd=0)
		caption.tkraise(w)
		caption.grid(in_=w,row=0,column=2,rowspan=2,columnspan=3,padx=4,sticky="w")

	return w,f</t>
<t tx="edream.110203161858.1259"></t>
<t tx="edream.110203161858.1260"></t>
<t tx="edream.110203161858.1261"># Returns a tuple (single,start,end) of comment delims

def set_delims_from_language(language):
	
	a = app()
	
	val = a.language_delims_dict.get(language)
	if val:
		delim1,delim2,delim3 = set_delims_from_string(val)
		if delim2 and not delim3:
			return None,delim1,delim2
		else: # 0,1 or 3 params.
			return delim1,delim2,delim3
	else:
		return None, None, None # Indicate that no change should be made
</t>
<t tx="edream.110203161858.1262">@ Returns (delim1, delim2, delim2), the delims following the @comment directive.

This code can be called from @languge logic, in which case s can point at @comment
@c

def set_delims_from_string(s):
	
	# trace(`s`)

	# Skip an optional @comment
	tag = "@comment"
	i = 0
	if match_word(s,i,tag):
		i += len(tag)
		
	count = 0 ; delims = [None, None, None]
	while count &lt; 3 and i &lt; len(s):
		i = j = skip_ws(s,i)
		while i &lt; len(s) and not is_ws(s[i]) and not is_nl(s,i):
			i += 1
		if j == i: break
		delims[count] = s[j:i]
		count += 1
		
	# 'rr 09/25/02
	if count == 2: # delims[0] is always the single-line delim.
		delims[2] = delims[1]
		delims[1] = delims[0]
		delims[0] = None

	# 7/8/02: The "REM hack": replace underscores by blanks.
	# 9/25/02: The "perlpod hack": replace double underscores by newlines.
	for i in xrange(0,3):
		if delims[i]:
			delims[i] = string.replace(delims[i],"__",'\n') 
			delims[i] = string.replace(delims[i],'_',' ')

	return delims[0], delims[1], delims[2]</t>
<t tx="edream.110203161858.1263">def set_language(s,i,issue_errors_flag=false):
	
	"""Scan the @language directive that appears at s[i:].

	Returns (language, delim1, delim2, delim3)
	"""

	a = app()
	tag = "@language"
	# trace(`get_line(s,i)`)
	assert(i != None)
	assert(match_word(s,i,tag))
	i += len(tag) ; i = skip_ws(s, i)
	# Get the argument.
	j = i ; i = skip_c_id(s,i)
	# Allow tcl/tk.
	arg = string.lower(s[j:i])
	if a.language_delims_dict.get(arg):
		language = arg
		delim1, delim2, delim3 = set_delims_from_language(language)
		return language, delim1, delim2, delim3
	
	if issue_errors_flag:
		es("ignoring: " + get_line(s,i))

	return None, None, None, None,</t>
<t tx="edream.110203161858.1264">@ We search the descendents of v looking for the definition node matching name.
There should be exactly one such node (descendents of other definition nodes are not searched).
@c

def findReference(name,root):

	after = root.nodeAfterTree()
	v = root.firstChild()
	while v and v != after:
		if v.matchHeadline(name) and not v.isAtIgnoreNode():
			return v
		v = v.threadNext()
	return None
</t>
<t tx="edream.110203161858.1265">@ The caller passes [root_node] or None as the second arg.  This allows us to distinguish between None and [None].

5/17/03: globalDirectiveList is now visible externally so plugins may add to the list of directives.
@c

globalDirectiveList = [
	"color", "comment", "encoding", "header", "ignore",
	"language", "lineending", "nocolor", "noheader", "nowrap",
	"pagewidth", "path", "quiet", "root", "silent",
	"tabwidth", "terse", "unit", "verbose", "wrap"]

def get_directives_dict(s,root=None):
	
	"""Scans root for @directives found in globalDirectivesList
	Returns a dict containing pointers to the start of each directive"""

	if root: root_node = root[0]
	dict = {}
	i = 0 ; n = len(s)
	while i &lt; n:
		if s[i] == '@' and i+1 &lt; n:
			&lt;&lt; set dict for @ directives &gt;&gt;
		elif root and match(s,i,"&lt;&lt;"):
			&lt;&lt; set dict["root"] for noweb * chunks &gt;&gt;
		i = skip_line(s,i)
	return dict</t>
<t tx="edream.110203161858.1266">j = skip_c_id(s,i+1)
word = s[i+1:j]
if word in globalDirectiveList:
	dict [word] = i
</t>
<t tx="edream.110203161858.1267">@ The following looks for chunk definitions of the form &lt; &lt; * &gt; &gt; =. If found, we take this to be equivalent to @root filename if the headline has the form @root filename.
@c

i = skip_ws(s,i+2)
if i &lt; n and s[i] == '*' :
	i = skip_ws(s,i+1) # Skip the '*'
	if match(s,i,"&gt;&gt;="):
		# &lt; &lt; * &gt; &gt; = implies that @root should appear in the headline.
		i += 3
		if root_node:
			dict["root"]=0 # value not immportant
		else:
			es(angleBrackets("*") + "= requires @root in the headline")</t>
<t tx="edream.110203161858.1268">def getOutputNewline (lineending = None):
	
	"""Convert the name of a line ending to the line ending itself.
	Use the output_newline configuration option if no lineending is given.
	"""
	
	if lineending:
		s = lineending
	else:
		s = app().config.output_newline
	s = string.lower(s)
	if s in ( "nl","lf","platform"): s = '\n'
	elif s == "cr": s = '\r'
	elif s == "crlf": s = "\r\n"
	else: s = '\n' # Default for erroneous values.
	return s</t>
<t tx="edream.110203161858.1269">def scanAtEncodingDirective(s,dict):
	
	"""Scan the @encoding directive at s[dict["encoding"]:].

	Returns the encoding name or None if the encoding name is invalid.
	"""

	k = dict["encoding"]
	i = skip_to_end_of_line(s,k)
	j = len("@encoding")
	encoding = s[k+j:i].strip()
	if isValidEncoding(encoding):
		# trace(encoding)
		return encoding
	else:
		es("invalid @encoding:"+encoding,color="red")
		return None</t>
<t tx="edream.110203161858.1270">def scanAtLineendingDirective(s,dict):
	
	"""Scan the @lineending directive at s[dict["lineending"]:].

	Returns the actual lineending or None if the name of the lineending is invalid.
	"""

	k = dict["lineending"]
	i = skip_to_end_of_line(s,k)
	j = len("@lineending")
	j = skip_ws(s,j)
	e = s[k+j:i].strip()

	if e in ("cr","crlf","lf","nl","platform"):
		lineending = getOutputNewline(e)
		# trace(`e`,`lineending`)
		return lineending
	else:
		es("invalid @lineending directive:"+e,color="red")
		return None
</t>
<t tx="edream.110203161858.1271">def scanAtPagewidthDirective(s,dict,issue_error_flag=false):
	
	"""Scan the @pagewidth directive at s[dict["pagewidth"]:].

	Returns the value of the width or None if the width is invalid.
	"""
	
	k = dict["pagewidth"]
	j = i = k + len("@pagewidth")
	i, val = skip_long(s,i)
	if val != None and val &gt; 0:
		# trace(val)
		return val
	else:
		if issue_error_flag:
			j = skip_to_end_of_line(s,k)
			es("ignoring " + s[k:j],color="red")
		return None
</t>
<t tx="edream.110203161858.1272">def scanAtTabwidthDirective(s,dict,issue_error_flag=false):
	
	"""Scan the @tabwidth directive at s[dict["tabwidth"]:].

	Returns the value of the width or None if the width is invalid.
	"""
	
	k = dict["tabwidth"]
	j = i = k + len("@tabwidth")
	i, val = skip_long(s, i)
	if val != None and val != 0:
		# trace(`val`)
		return val
	else:
		if issue_error_flag:
			i = skip_to_end_of_line(s,k)
			es("Ignoring " + s[k:i],color="red")
		return None

</t>
<t tx="edream.110203161858.1273">@ A general-purpose routine that scans v and its ancestors for directives.  It returns a dict containing the settings in effect as the result of the @comment, @language, @lineending, @pagewidth, @path and @tabwidth directives.  This code does not check on the existence of paths, and issues no error messages.

Perhaps this routine should be the basis of atFile.scanAllDirectives and tangle.scanAllDirectives, but I am loath to make any further to these two already-infamous routines.  Also, this code does not check for @color and @nocolor directives: leoColor.useSyntaxColoring does that.
@c

def scanDirectives(c,v=None):
	
	"""Scan vnode v and v's ancestors looking for directives.

	Returns a dict containing the results, including defaults.
	"""

	if c == None or top() == None:
		return {} # 7/16/03: for unit tests.
	if v == None: v = c.currentVnode()
	a = app()
	# trace(`v`)
	&lt;&lt; Set local vars &gt;&gt;
	old = {}
	pluginsList = [] # 5/17/03: a list of items for use by plugins.
	while v:
		s = v.t.bodyString
		dict = get_directives_dict(s)
		&lt;&lt; Test for @comment and @language &gt;&gt;
		&lt;&lt; Test for @encoding &gt;&gt;
		&lt;&lt; Test for @lineending &gt;&gt;
		&lt;&lt; Test for @pagewidth &gt;&gt;
		&lt;&lt; Test for @path &gt;&gt;
		&lt;&lt; Test for @tabwidth &gt;&gt;
		&lt;&lt; Test for @wrap and @nowrap &gt;&gt;
		doHook("scan-directives",c=c,v=v,s=s,
			old_dict=old,dict=dict,pluginsList=pluginsList)
		old.update(dict)
		v = v.parent()

	if path == None: path = getBaseDirectory()

	return {
		"delims"    : (delim1,delim2,delim3),
		"encoding"  : encoding,
		"language"  : language,
		"lineending": lineending,
		"pagewidth" : page_width,
		"path"      : path,
		"tabwidth"  : tab_width,
		"pluginsList": pluginsList,
		"wrap"      : wrap }

</t>
<t tx="edream.110203161858.1274">loadDir = a.loadDir

page_width = c.page_width
tab_width  = c.tab_width
language = c.target_language
delim1, delim2, delim3 = set_delims_from_language(c.target_language)
path = None
encoding = None # 2/25/03: This must be none so that the caller can set a proper default.
lineending = getOutputNewline() # 4/24/03 initialize from config settings.
wrap = a.config.getBoolWindowPref("body_pane_wraps") # 7/7/03: this is a window pref.</t>
<t tx="edream.110203161858.1275"># @language and @comment may coexist in @file trees.
# For this to be effective the @comment directive should follow the @language directive.

if not old.has_key("comment") and dict.has_key("comment"):
	k = dict["comment"]
	delim1,delim2,delim3 = set_delims_from_string(s[k:])

# Reversion fix: 12/06/02: We must use elif here, not if.
elif not old.has_key("language") and dict.has_key("language"):
	k = dict["language"]
	language,delim1,delim2,delim3 = set_language(s,k)</t>
<t tx="edream.110203161858.1276">if not old.has_key("encoding") and dict.has_key("encoding"):
	
	e = scanAtEncodingDirective(s,dict)
	if e:
		encoding = e
</t>
<t tx="edream.110203161858.1277">if not old.has_key("lineending") and dict.has_key("lineending"):
	
	e = scanAtLineendingDirective(s,dict)
	if e:
		lineending = e
</t>
<t tx="edream.110203161858.1278">if dict.has_key("pagewidth") and not old.has_key("pagewidth"):
	
	w = scanAtPagewidthDirective(s,dict)
	if w and w &gt; 0:
		page_width = w</t>
<t tx="edream.110203161858.1279">if not path and not old.has_key("path") and dict.has_key("path"):

	k = dict["path"]
	&lt;&lt; compute relative path from s[k:] &gt;&gt;
	if path and len(path) &gt; 0:
		base = getBaseDirectory() # returns "" on error.
		path = os.path.join(base,path)</t>
<t tx="edream.110203161858.1280">j = i = k + len("@path")
i = skip_to_end_of_line(s,i)
path = string.strip(s[j:i])

# Remove leading and trailing delims if they exist.
if len(path) &gt; 2 and (
	(path[0]=='&lt;' and path[-1] == '&gt;') or
	(path[0]=='"' and path[-1] == '"') ):
	path = path[1:-1]

path = string.strip(path)
if 0: # 11/14/02: we want a _relative_ path, not an absolute path.
	path = os.path.join(loadDir,path)</t>
<t tx="edream.110203161858.1281">if dict.has_key("tabwidth") and not old.has_key("tabwidth"):
	
	w = scanAtTabwidthDirective(s,dict)
	if w and w &gt; 0:
		tab_width = w</t>
<t tx="edream.110203161858.1282">if not old.has_key("wrap") and not old.has_key("nowrap"):
	
	if dict.has_key("wrap"):
		wrap = true
	elif dict.has_key("nowrap"):
		wrap = false</t>
<t tx="edream.110203161858.1283"></t>
<t tx="edream.110203161858.1284">def canonicalizeMenuName (name):
	
	name = name.lower() ; newname = ""
	for ch in name:
		# if ch not in (' ','\t','\n','\r','&amp;'):
		if ch in string.letters:
			newname = newname+ch
	return newname
	
def canonicalizeTranslatedMenuName (name):
	
	name = name.lower() ; newname = ""
	for ch in name:
		if ch not in (' ','\t','\n','\r','&amp;'):
		# if ch in string.letters:
			newname = newname+ch
	return newname
</t>
<t tx="edream.110203161858.1285"># 11/17/02: Fail gracefully if the item name does not exist.
def enableMenu (menu,name,val):
	state = choose(val,"normal","disabled")
	try:
		menu.entryconfig(name,state=state)
	except:
		try:
			realName = app().getRealMenuName(name)
			realName = realName.replace("&amp;","")
			menu.entryconfig(realName,state=state)
		except:
			print "enableMenu menu,name,val:",menu,name,val
			es_exception()
			pass

def disableMenu (menu,name):
	try:
		menu.entryconfig(name,state="disabled")
	except: 
		try:
			realName = app().getRealMenuName(name)
			realName = realName.replace("&amp;","")
			menu.entryconfig(realName,state="disabled")
		except:
			print "disableMenu menu,name:",menu,name
			es_exception()
			pass

def setMenuLabel (menu,name,label,underline=-1):
	try:
		if type(name) == type(0):
			# "name" is actually an index into the menu.
			menu.entryconfig(name,label=label,underline=underline)
		else:
			# Bug fix: 2/16/03: use translated name.
			realName = app().getRealMenuName(name)
			realName = realName.replace("&amp;","")
			# Bug fix: 3/25/03" use tranlasted label.
			label = app().getRealMenuName(label)
			label = label.replace("&amp;","")
			menu.entryconfig(realName,label=label,underline=underline)
	except:
		print "setMenuLabel menu,name,label:",menu,name,label
		es_exception()
		pass</t>
<t tx="edream.110203161858.1286">def openWithFileName(fileName,old_c=None):
	
	"""Create a Leo Frame for the indicated fileName if the file exists."""
	
	from leoFrame import LeoFrame
	assert(app().config)

	if not fileName or len(fileName) == 0:
		return false, None

	# Create a full normalized path name.
	# Display the file name with case intact.
	fileName = os.path.join(os.getcwd(), fileName)
	fileName = os.path.normpath(fileName)
	oldFileName = fileName 
	fileName = os.path.normcase(fileName)

	# If the file is already open just bring its window to the front.
	list = app().windowList
	for frame in list:
		fn = os.path.normcase(frame.mFileName)
		fn = os.path.normpath(fn)
		if fileName == fn:
			frame.top.deiconify()
			app().setLog(frame,"OpenWithFileName")
			# es("This window already open")
			return true, frame
			
	fileName = oldFileName # Use the idiosyncratic file name.

	try:
		file = open(fileName,'r')
		if file:
			frame = LeoFrame(fileName)
			if not doHook("open1",
				old_c=old_c,new_c=frame.commands,fileName=fileName):
				app().setLog(frame,"OpenWithFileName") # 5/12/03
				app().lockLog() # 6/30/03
				frame.commands.fileCommands.open(file,fileName) # closes file.
				app().unlockLog() # 6/30/03
			frame.openDirectory=os.path.dirname(fileName)
			frame.updateRecentFiles(fileName)
			doHook("open2",
				old_c=old_c,new_c=frame.commands,fileName=fileName)
			return true, frame
		else:
			es("can not open" + fileName)
			return false, None
	except:
		es("exceptions opening" + fileName)
		es_exception()
		return false, None</t>
<t tx="edream.110203161858.1287">@ Returns a list of lines, consisting of the input lines wrapped to the given pageWidth.

Important note: this routine need not deal with leading whitespace.  Instead, the caller should simply reduce pageWidth by the width of leading whitespace wanted, then add that whitespace to the lines returned here.

The key to this code is the invarient that line never ends in whitespace.
@c
# DTHEIN 3-NOV-2002: handle indented first line (normal or hanging indent)

def wrap_lines (lines,pageWidth,firstLineWidth=None):
	
	if pageWidth &lt; 10:
		pageWidth = 10
		
	# DTHEIN 3-NOV-2002: First line is special
	if not firstLineWidth:
		firstLineWidth = pageWidth
	if firstLineWidth &lt; 10:
		firstLineWidth = 10
	outputLineWidth = firstLineWidth

	# trace(`lines`)
	result = [] # The lines of the result.
	line = "" # The line being formed.  It never ends in whitespace.
	for s in lines:
		i = 0
		while i &lt; len(s):
			assert(len(line) &lt; outputLineWidth)
			j = skip_ws(s,i)   # ;   ws = s[i:j]
			k = skip_non_ws(s,j) ; word = s[j:k]
			assert(k&gt;i)
			i = k
			if 1 + len(word) + len(line) &lt; outputLineWidth:
				if len(word) &gt; 0:
					&lt;&lt; place blank and word on the present line &gt;&gt;
				else: pass # discard the trailing whitespace.
			else:
				&lt;&lt; place word on a new line &gt;&gt;
	if len(line) &gt; 0:
		result.append(line)
	# trace(`result`)
	return result</t>
<t tx="edream.110203161858.1288">if len(line) == 0:
	# Just add the word to the start of the line.
	line = word
else:
	# Add the word, preceeded by a blank.
	line = string.join((line,' ',word),'')</t>
<t tx="edream.110203161858.1289"># End the previous line.
if len(line) &gt; 0:
	result.append(line)
	outputLineWidth = pageWidth # DTHEIN 3-NOV-2002: width for remaining lines
	
# Discard the whitespace and put the word on a new line.
line = word

# Careful: the word may be longer than pageWidth.
if len(line) &gt;= pageWidth:
	result.append(line)
	outputLineWidth = pageWidth # DTHEIN 3-NOV-2002: width for remaining lines
	line = ""
</t>
<t tx="edream.110203161858.1290"></t>
<t tx="edream.110203161858.1291"></t>
<t tx="edream.110203161858.1292"># Returns a temporary file name.

def create_temp_name ():

	import tempfile
	temp = tempfile.mktemp()
	# trace(`temp`)
	return temp</t>
<t tx="edream.110203161858.1293">def ensure_extension (name, ext):

	file, old_ext = os.path.splitext(name)
	if len(name) == 0:
		return name # don't add to an empty name.
	elif old_ext and old_ext == ext:
		return name
	else:
		return file + ext</t>
<t tx="edream.110203161858.1294"># Handles the conventions applying to the "relative_path_base_directory" configuration option.

def getBaseDirectory():

	base = app().config.relative_path_base_directory

	if base and base == "!":
		base = app().loadDir
	elif base and base == ".":
		base = top().openDirectory

	# trace(`base`)
	if base and len(base) &gt; 0 and os.path.isabs(base):
		return base # base need not exist yet.
	else:
		return "" # No relative base given.
</t>
<t tx="edream.110203161858.1295">@ This is a generalization of os.makedir.
It attempts to make all non-existent directories.
@c

def makeAllNonExistentDirectories (dir):

	if not app().config.create_nonexistent_directories:
		return None

	dir1 = dir = os.path.normpath(dir)
	# Split dir into all its component parts.
	paths = []
	while len(dir) &gt; 0:
		head,tail=os.path.split(dir)
		if len(tail) == 0:
			paths.append(head)
			break
		else:
			paths.append(tail)
			dir = head
	path = ""
	paths.reverse()
	for s in paths:
		path=os.path.join(path,s)
		if not os.path.exists(path):
			try:
				os.mkdir(path)
				es("created directory: "+path)
			except:
				es("exception creating directory: "+path)
				es_exception()
				return None
	return dir1 # All have been created.</t>
<t tx="edream.110203161858.1296">@ Stephen P. Schaefer 9/7/2002

The Unix readline() routine delivers "\r\n" line end strings verbatim, while the windows versions force the string to use the Unix convention of using only "\n".  This routine causes the Unix readline to do the same.
@c

def readlineForceUnixNewline(f):

	s = f.readline()
	if len(s) &gt;= 2 and s[-2] == "\r" and s[-1] == "\n":
		s = s[0:-2] + "\n"
	return s
</t>
<t tx="edream.110203161858.1297">class redirectClass:
	&lt;&lt; redirectClass methods &gt;&gt;

# Create two redirection objects, one for each stream.
redirectStdErrObj = redirectClass()
redirectStdOutObj = redirectClass()

&lt;&lt; define convenience methods for redirecting streams &gt;&gt;

if 0: # Test code: may be safely and conveniently executed in the child node.
	&lt;&lt; test code &gt;&gt;</t>
<t tx="edream.110203161858.1298"># To redirect stdout a class only needs to implement a write(self,s) method.
def __init__ (self):
	self.old = None
	
def isRedirected (self):
	return self.old != None
	
def flush(self, *args):
	return # 6/14/03:  For LeoN: just for compatibility.

def redirect (self,stdout=1):
	import sys
	if not self.old:
		if stdout:
			self.old,sys.stdout = sys.stdout,self
		else:
			self.old,sys.stderr = sys.stderr,self

def undirect (self,stdout=1):
	import sys
	if self.old:
		if stdout:
			sys.stdout,self.old = self.old,None
		else:
			sys.stderr,self.old = self.old,None

def write(self,s):
	if self.old:
		if app().log: app().log.put(s)
		else: self.old.write(s)
	else: print s # Typically will not happen.
</t>
<t tx="edream.110203161858.1299">
# Redirect streams to the current log window.
def redirectStderr():
	global redirectStdErrObj
	redirectStdErrObj.redirect(stdout=false)

def redirectStdout():
	global redirectStdOutObj
	redirectStdOutObj.redirect()

# Restore standard streams.
def restoreStderr():
	global redirectStdErrObj
	redirectStdErrObj.undirect(stdout=false)
	
def restoreStdout():
	global redirectStdOutObj
	redirectStdOutObj.undirect()
		
def stdErrIsRedirected():
	global redirectStdErrObj
	return redirectStdErrObj.isRedirected()
	
def stdOutIsRedirected():
	global redirectStdOutObj
	return redirectStdOutObj.isRedirected()</t>
<t tx="edream.110203161858.1300">from leoGlobals import stdErrIsRedirected,stdOutIsRedirected
print "stdout isRedirected:", stdOutIsRedirected()
print "stderr isRedirected:", stdErrIsRedirected()

from leoGlobals import redirectStderr,redirectStdout
redirectStderr()
redirectStdout()

from leoGlobals import stdErrIsRedirected,stdOutIsRedirected
print "stdout isRedirected:", stdOutIsRedirected()
print "stderr isRedirected:", stdErrIsRedirected()

from leoGlobals import restoreStderr
restoreStderr()

from leoGlobals import stdErrIsRedirected,stdOutIsRedirected
print "stdout isRedirected:", stdOutIsRedirected()
print "stderr isRedirected:", stdErrIsRedirected()

from leoGlobals import restoreStdout
restoreStdout()

from leoGlobals import stdErrIsRedirected,stdOutIsRedirected
print "stdout isRedirected:", stdOutIsRedirected()
print "stderr isRedirected:", stdErrIsRedirected()</t>
<t tx="edream.110203161858.1301">@ This prepares string s to be a valid file name:

- substitute '_' whitespace and characters used special path characters.
- eliminate all other non-alphabetic characters.
- strip leading and trailing whitespace.
- return at most 128 characters.
@c

def sanitize_filename(s):

	result = ""
	for ch in s.strip():
		if ch in string.letters:
			result += ch
		elif ch in string.whitespace: # Translate whitespace.
			result += '_'
		elif ch in ('.','\\','/',':'): # Translate special path characters.
			result += '_'
	while 1:
		n = len(result)
		result = result.replace('__','_')
		if len(result) == n:
			break
	result = result.strip()
	return result [:128]</t>
<t tx="edream.110203161858.1302">def shortFileName (fileName):
	
	return os.path.basename(fileName)</t>
<t tx="edream.110203161858.1303">@ This function compares two files. If they are different, we replace file_name with temp_name. Otherwise, we just delete temp_name.  Both files should be closed.
@c

def update_file_if_changed(file_name,temp_name):

	if os.path.exists(file_name):
		import filecmp
		if filecmp.cmp(temp_name, file_name):
			try: # Just delete the temp file.
				os.remove(temp_name)
			except: pass
			es("unchanged: " + file_name)
		else:
			try:
				# 10/6/02: retain the access mode of the previous file,
				# removing any setuid, setgid, and sticky bits.
				mode = (os.stat(file_name))[0] &amp; 0777
			except:
				mode = None
			try: # Replace file with temp file.
				os.remove(file_name)
				utils_rename(temp_name, file_name)
				if mode: # 10/3/02: retain the access mode of the previous file.
					os.chmod(file_name,mode)
				es("***updating: " + file_name)
			except:
				es("Rename failed: no file created!",color="red")
				es(`file_name` + " may be read-only or in use")
				es_exception()
	else:
		try:
			# os.rename(temp_name, file_name)
			utils_rename(temp_name, file_name)
			es("creating: " + file_name)
		except:
			es("rename failed: no file created!",color="red")
			es(`file_name` + " may be read-only or in use")
			es_exception()</t>
<t tx="edream.110203161858.1304">@ Platform-independent rename.

os.rename may fail on some Unix flavors if src and dst are on different filesystems.
@c

def utils_rename(src,dst):
	
	head,tail=os.path.split(dst)
	if head and len(head) &gt; 0:
		makeAllNonExistentDirectories(head)
	
	if sys.platform=="win32":
		os.rename(src,dst)
	else:
		from distutils.file_util import move_file
		move_file(src,dst)</t>
<t tx="edream.110203161858.1305">@ Starting with this release, you will see trace statements throughout the code.  The trace function is defined in leoGlobals.py; trace implements much of the functionality of my Sherlock tracing package.  Traces are more convenient than print statements for two reasons: 1) you don't need explicit trace names and 2) you can disable them without recompiling.

In the following examples, suppose that the call to trace appears in function f.

trace(string) prints string if tracing for f has been enabled.  For example, the following statment prints from s[i] to the end of the line if tracing for f has been enabled.

  j = skip_line(s,i) ; trace(s[i:j])

trace(function) exectutes the function if tracing for f has been enabled.  For example,

  trace(self.f2)

You enable and disable tracing by calling init_trace(args).  Examples:

  init_trace("+*")         # enable all traces
  init_trace("+a","+b")    # enable traces for a and b
  init_trace(("+a","+b"))  # enable traces for a and b
  init_trace("-a")         # disable tracing for a
  traces = init_trace("?") # return the list of enabled traces

If two arguments are supplied to trace, the first argument is the "tracepoint name" and the second argument is the "tracepoint action" as shown in the examples above.  If tracing for the tracepoint name is enabled, the tracepoint action is printed (if it is a string) or exectuted (if it is a function name).

"*" will not match an explicit tracepoint name that starts with a minus sign.  For example,

  trace_tag("-nocolor", self.disable_color)
</t>
<t tx="edream.110203161858.1306"># Called by startup code.
# Args are all the arguments on the command line.

def init_sherlock (args):
	
	init_trace(args,echo=0)
	# trace("argv", "sys.argv: " + `sys.argv`)</t>
<t tx="edream.110203161858.1307">@ It no args are given we attempt to get them from the "SherlockArgs" file.  If there are still no arguments we trace everything.  This default makes tracing much more useful in Python.
@c

def get_Sherlock_args (args):

	if not args or len(args)==0:
		try:
			f = open(os.path.join(app().loadDir,"SherlockArgs"))
			args = f.readlines()
			f.close()
		except: pass
	elif type(args[0]) == type(("1","2")):
		args = args[0] # strip away the outer tuple.

	# No args means trace everything.
	if not args or len(args)==0: args = ["+*"] 
	# print "get_Sherlock_args:", args
	return args</t>
<t tx="edream.110203161858.1308">def init_trace(args,echo=1):

	t = app().trace_list
	args = get_Sherlock_args(args)

	for arg in args:
		if arg[0] in string.letters: prefix = '+'
		else: prefix = arg[0] ; arg = arg[1:]
		
		if prefix == '?':
			print "trace list:", t
		elif prefix == '+' and not arg in t:
			t.append(string.lower(arg))
			if echo:
				print "enabling:", arg
		elif prefix == '-' and arg in t:
			t.remove(string.lower(arg))
			if echo:
				print "disabling:", arg
		else:
			print "ignoring:", prefix + arg</t>
<t tx="edream.110203161858.1309"># Convert all args to strings.
# Print if tracing for the presently executing function has been enabled.

def trace (*args,**keys):
	
	callers = keys.get("callers",false)

	s = ""
	for arg in args:
		if type(arg) != type(""):
			arg = repr(arg)
		if len(s) &gt; 0:
			s = s + " " + arg
		else:
			s = arg
	message = s
	try: # get the function name from the call stack.
		f1 = sys._getframe(1) # The stack frame, one level up.
		code1 = f1.f_code # The code object
		name = code1.co_name # The code name
	except: name = ""
	if name == "?":
		name = "&lt;unknown&gt;"

	if callers:
		import traceback
		traceback.print_stack()

	t = app().trace_list
	# tracepoint names starting with '-' must match exactly.
	minus = len(name) &gt; 0 and name[0] == '-'
	if minus: name = name[1:]
	if (not minus and '*' in t) or name.lower() in t:
		s = name + ": " + message
		if 1: print s
		else: es(s)
</t>
<t tx="edream.110203161858.1310"># Convert all args to strings.
# Print if tracing for name has been enabled.

def trace_tag (name, *args):
	
	s = ""
	for arg in args:
		if type(arg) != type(""):
			arg = repr(arg)
		if len(s) &gt; 0:
			s = s + ", " + arg
		else:
			s = arg
	message = s

	t = app().trace_list
	# tracepoint names starting with '-' must match exactly.
	minus = len(name) &gt; 0 and name[0] == '-'
	if minus: name = name[1:]
	if (not minus and '*' in t) or name.lower() in t:
		s = name + ": " + message
		if 1: print s
		else: es(s)
</t>
<t tx="edream.110203161858.1311"></t>
<t tx="edream.110203161858.1312">def clear_stats():
	
	app().stats = {}
</t>
<t tx="edream.110203161858.1313">def print_stats (name=None):
	
	if name:
		if type(name) != type(""):
			name = repr(name)
	else:
		name = callerName(n=2) # Get caller name 2 levels back.
	
	try:
		stats = app().stats
	except:
		print ; print "no statistics at", name ; print
		return
		
	items = stats.items()
	items.sort()
	print ; print "statistics at",name ; print
	for key,value in items:
		print key,value
		
	clear_stats()
</t>
<t tx="edream.110203161858.1314">def stat (name=None):

	"""Increments the statistic for name in app().stats
	The caller's name is used by default.
	"""
	
	if name:
		if type(name) != type(""):
			name = repr(name)
	else:
		name = callerName(n=2) # Get caller name 2 levels back.

	try:
		stats = app().stats
	except:
		app().stats = stats = {}

	stats[name] = 1 + stats.get(name,0)
</t>
<t tx="edream.110203161858.1315">@ pychecker bug: pychecker complains that there is no attribute time.clock
@c

def getTime():
	return time.clock()
	
def esDiffTime(message, start):
	es(message + ("%6.3f" % (time.clock()-start)))
	return time.clock()</t>
<t tx="edream.110203161858.1316">def alert(message):

	es(message)

	import tkMessageBox
	tkMessageBox.showwarning("Alert", message)
</t>
<t tx="edream.110203161858.1317"># Returns &lt; &lt; s &gt; &gt;

def angleBrackets(s):

	return ( "&lt;&lt;" + s +
		"&gt;&gt;") # must be on a separate line.

virtual_event_name = angleBrackets</t>
<t tx="edream.110203161858.1318">def callerName (n=1):

	try: # get the function name from the call stack.
		f1 = sys._getframe(n) # The stack frame, n levels up.
		code1 = f1.f_code # The code object
		return code1.co_name # The code name
	except:
		es_exception()
		return "&lt;no caller name&gt;"
</t>
<t tx="edream.110203161858.1319">def dump(s):
	
	out = ""
	for i in s:
		out += `ord(i)` + ","
	return out
		
def oldDump(s):

	out = ""
	for i in s:
		if i=='\n':
			out += "[" ; out += "n" ; out += "]"
		if i=='\t':
			out += "[" ; out += "t" ; out += "]"
		elif i==' ':
			out += "[" ; out += " " ; out += "]"
		else: out += i
	return out</t>
<t tx="edream.110203161858.1320">def es_error (s):
	
	config = app().config
	if config: # May not exist during initialization.
		color = config.getWindowPref("log_error_color")
		es(s,color=color)
	else:
		es(s)</t>
<t tx="edream.110203161858.1321">def es_event_exception (eventName,full=false):

	import traceback
	es("exception handling ", eventName, " event")
	typ,val,tb = sys.exc_info()
	if full:
		errList = traceback.format_exception(typ,val,tb)
	else:
		errList = traceback.format_exception_only(typ,val)
	for i in errList:
		es(i)
	traceback.print_exc()</t>
<t tx="edream.110203161858.1322">def es_exception (full=false):

	import traceback
	typ,val,tb = sys.exc_info()
	if full:
		errList = traceback.format_exception(typ,val,tb)
	else:
		errList = traceback.format_exception_only(typ,val)
	for i in errList:
		es_error(i)
	traceback.print_exc()</t>
<t tx="edream.110203161858.1323">def module_date (mod,format=None):
	file = os.path.join(app().loadDir,mod.__file__)
	root,ext = os.path.splitext(file) 
	return file_date(root + ".py",format=format)

def plugin_date (plugin_mod,format=None):
	file = os.path.join(app().loadDir,"..","plugins",plugin_mod.__file__)
	root,ext = os.path.splitext(file) 
	return file_date(root + ".py",format=format)

def file_date (file,format=None):
	if file and len(file)and os.path.exists(file):
		try:
			import time
			n = os.path.getmtime(file)
			if format == None:
				format = "%m/%d/%y %H:%M:%S"
			return time.strftime(format,time.gmtime(n))
		except: pass
	return ""
</t>
<t tx="edream.110203161858.1324">@ The following is taken from page 188 of the Python Cookbook.

The following method allows you to add a function as a method of any class.  That is, it converts the function to a method of the class.  The method just added is available instantly to all existing instances of the class, and to all instances created in the future.

The function's first argument should be self.

The newly created method has the same name as the function unless the optional name argument is supplied, in which case that name is used as the method name.
@c

def funcToMethod(f,theClass,name=None):
	setattr(theClass,name or f.__name__,f)
	# trace(`name`)</t>
<t tx="edream.110203161858.1325"># Very useful for tracing.

def get_line (s,i):

	nl = ""
	if is_nl(s,i):
		i = skip_nl(s,i)
		nl = "[nl]"
	j = find_line_start(s,i)
	k = skip_to_end_of_line(s,i)
	return nl + s[j:k]
	
def get_line_after (s,i):
	
	nl = ""
	if is_nl(s,i):
		i = skip_nl(s,i)
		nl = "[nl]"
	k = skip_to_end_of_line(s,i)
	return nl + s[i:k]
</t>
<t tx="edream.110203161858.1326">def pause (s):
	
	print s
	
	i = 0
	while i &lt; 1000000L:
		i += 1</t>
<t tx="edream.110203161858.1327">def print_bindings (name,window):

	bindings = window.bind()
	print
	print "Bindings for", name
	for b in bindings:
		print b</t>
<t tx="edream.110203161858.1328">def printGlobals(message=None):
	
	# Get the list of globals.
	globs = list(globals())
	globs.sort()
	
	# Print the list.
	if message:
		leader = "-" * 10
		print leader, ' ', message, ' ', leader
	for glob in globs:
		print glob</t>
<t tx="edream.110203161858.1329">def printLeoModules(message=None):
	
	# Create the list.
	mods = []
	for name in sys.modules.keys():
		if name and name[0:3] == "leo":
			mods.append(name)

	# Print the list.
	if message:
		leader = "-" * 10
		print leader, ' ', message, ' ', leader
	mods.sort()
	for m in mods:
		print m,
	print</t>
<t tx="edream.110203161858.1330">def executeScript (name):
	
	"""Execute a script whose short python file name is given"""
	
	mod_name,ext = os.path.splitext(name)
	file = None
	try:
		# This code is in effect an import or a reload.
		# This allows the user to modify scripts without leaving Leo.
		import imp
		file,filename,description = imp.find_module(mod_name)
		imp.load_module(mod_name,file,filename,description)
	except:
		es("Exception executing " + name,color="red")
		es_exception()

	if file:
		file.close()

</t>
<t tx="edream.110203161858.1331"></t>
<t tx="edream.110203161858.1332">def get_focus(top):
	
	"""Returns the widget that has focus, or body if None."""

	return top.focus_displayof()</t>
<t tx="edream.110203161858.1333">def set_focus(commands,widget):
	
	"""Set the focus of the widget in the given commander if it needs to be changed."""
	
	focus = commands.frame.top.focus_displayof()
	if focus != widget:
		# trace(`widget`)
		widget.focus_set()</t>
<t tx="edream.110203161858.1334">def force_focus(widget):
	
	focus = commands.frame.top.focus_displayof()
	if focus != widget:
		trace(widget)
		widget.focus_force() # Apparently it is not a good idea to call focus_force.</t>
<t tx="edream.110203161858.1335">lastObjectCount = 0
lastObjectsDict = {}
debugGC = false

# gc may not exist everywhere.
try: 
	import gc
	if 0:
		if debugGC:
			gc.set_debug(
				gc.DEBUG_STATS |# prints statistics.
				# gc.DEBUG_LEAK | # Same as all below.
				gc.DEBUG_COLLECTABLE |
				gc.DEBUG_UNCOLLECTABLE |
				gc.DEBUG_INSTANCES |
				gc.DEBUG_OBJECTS |
				gc.DEBUG_SAVEALL)
except:
	traceback.print_exc()

@others
</t>
<t tx="edream.110203161858.1336">def clearAllIvars (o):
	
	"""Clear all ivars of o, a member of some class."""
	
	o.__dict__.clear()
</t>
<t tx="edream.110203161858.1337">def collectGarbage(message=None):
	
	if not debugGC: return
	
	if not message:
		message = callerName(n=2)
	
	try: gc.collect()
	except: pass
	
	if 1:
		printGc(message)
	
	if 0: # This isn't needed unless we want to look at individual objects.
	
		&lt;&lt; make a list of the new objects &gt;&gt;
		print "%25s: %d new, %d total objects" % (message,len(newObjects),len(objects))
</t>
<t tx="edream.110203161858.1338"># WARNING: the id trick is not proper because newly allocated objects can have the same address as old objets.

global lastObjectsDict
objects = gc.get_objects()

newObjects = [o for o in objects if not lastObjectsDict.has_key(id(o))]

lastObjectsDict = {}
for o in objects:
	lastObjectsDict[id(o)]=o</t>
<t tx="edream.110203161858.1339">def printGc(message=None,onlyPrintChanges=false):
	
	if not debugGC: return None
	
	if not message:
		message = callerName(n=2)
	
	global lastObjectCount

	try:
		n = len(gc.garbage)
		n2 = len(gc.get_objects())
		delta = n2-lastObjectCount
		if not onlyPrintChanges or delta:
			if n:
				print "garbage: %d, objects: %+6d =%7d %s" % (n,delta,n2,message)
			else:
				print "objects: %+6d =%7d %s" % (n2-lastObjectCount,n2,message)

		lastObjectCount = n2
		return delta
	except:
		traceback.print_exc()
		return None</t>
<t tx="edream.110203161858.1340">def printGcRefs (verbose=true):

	import leoFrame

	refs = gc.get_referrers(app().windowList[0])
	print '-' * 30
	
	
	if verbose:
		print "refs of", app().windowList[0]
		for ref in refs:
			print type(ref)
			if 0:
				if type(ref) == type({}):
					keys = ref.keys()
					keys.sort()
					for key in keys:
						val = ref[key]
						if isinstance(val,leoFrame.LeoFrame):
							print key,ref[key]
	else:
		print "%d referers" % len(refs)</t>
<t tx="edream.110203161858.1341"></t>
<t tx="edream.110203161858.1342">@ Enables the "idle" hook.
After enableIdleTimeHook is called, Leo will call the "idle" hook
approximately every idleTimeDelay milliseconds.
@c
def enableIdleTimeHook(idleTimeDelay=100):
	app().idleTimeHook = true
	app().idleTimeDelay = idleTimeDelay # Delay in msec.
	app().root.after_idle(idleTimeHookHandler)
	
# Disables the "idle" hook.
def disableIdleTimeHook():
	app().idleTimeHook = false
	
# An internal routine used to dispatch the "idle" hook.
def idleTimeHookHandler(*args):
	
	a = app()
	# New for Python 2.3: may be called during shutdown.
	if a.killed:
		return
	c = top()
	if c: v = c.currentVnode()
	else: v = None
	doHook("idle",c=c,v=v)
	# Requeue this routine after 100 msec.
	# Faster requeues overload the system.
	if a.idleTimeHook:
		a.afterHandler = a.root.after(a.idleTimeDelay,idleTimeHookHandler)
	else:
		a.afterHandler = None</t>
<t tx="edream.110203161858.1343">@ This global function calls a hook routine.  Hooks are identified by the tag param.
Returns the value returned by the hook routine, or None if the there is an exception.

We look for a hook routine in three places:
1. top().hookFunction
2. app().hookFunction
3. leoPlugins.doPlugins()
We set app().hookError on all exceptions.  Scripts may reset app().hookError to try again.
@c

def doHook(tag,*args,**keywords):

	a = app() ; c = top() # c may be None during startup.
	
	if not a.config.use_plugins:
		return None
	elif a.hookError:
		return None
	elif c and c.hookFunction:
		try:
			return c.hookFunction(tag,keywords)
		except:
			es("exception in c.hookFunction for " + c.frame.top.title())
	elif a.hookFunction:
		try:
			return a.hookFunction(tag,keywords)
		except:
			es("exception in app().hookFunction")
	else:
		import leoPlugins
		try:
			a.hookFunction = leoPlugins.doPlugins
			return a.hookFunction(tag,keywords)
		except:
			a.hookFunction = None
			es("exception in plugin")

	# Handle all exceptions.
	es_exception()
	a.hookError = true # Supress this function.
	a.idleTimeHook = false # Supress idle-time hook
	return None # No return value</t>
<t tx="edream.110203161858.1344">def plugin_signon(module_name,verbose=false):
	
	exec("import %s ; m = %s" % (module_name,module_name))
	
	if verbose:
		es("...%s.py v%s: %s" % (
			m.__name__, m.__version__, plugin_date(m)))

		print m.__name__, m.__version__
		
	# Increment a global count.
	import leoPlugins
	leoPlugins.count += 1
</t>
<t tx="edream.110203161858.1345">def importFromPath (name,path):
	
	import imp

	try:
		file = None ; result = None
		try:
			fn = shortFileName(name)
			mod_name,ext = os.path.splitext(fn)
			path = os.path.normpath(path)
			data = imp.find_module(mod_name,[path]) # This can open the file.
			if data:
				file,pathname,description = data
				result = imp.load_module(mod_name,file,pathname,description)
		except:
			es_exception()

	# Bug fix: 6/12/03: Put no return statements before here!
	finally: 
		if file: file.close()

	return result</t>
<t tx="edream.110203161858.1346"></t>
<t tx="edream.110203161858.1347">def appendToList(out, s):

	for i in s:
		out.append(i)</t>
<t tx="edream.110203161858.1348">def flattenList (theList):

	result = []
	for item in theList:
		if type(item) == types.ListType:
			result.extend(flattenList(item))
		else:
			result.append(item)
	return result</t>
<t tx="edream.110203161858.1349">def listToString(theList):

	if list:
		theList = flattenList(theList)
		return string.join(theList,"")
	else:
		return ""</t>
<t tx="edream.110203161858.1350"># From the Python cookbook.

def makeDict(**keys):
	
	"""Returns a Python dictionary from using the optional keyword arguments."""

	return keys</t>
<t tx="edream.110203161858.1351"># These are guaranteed always to exist for scripts.
</t>
<t tx="edream.110203161858.1352"># *** Note *** the global statement makes sense only within functions!

gApp = None # Not needed, and keeps Pychecker happy.

def app():
	global gApp
	return gApp

def setApp(app):
	global gApp
	gApp = app</t>
<t tx="edream.110203161858.1353">def choose(cond, a, b): # warning: evaluates all arguments

	if cond: return a
	else: return b</t>
<t tx="edream.110203161858.1354">def ecnl():
	ecnls(1)

def ecnls(n):
	log = app().log
	if log:
		while log.es_newlines &lt; n:
			enl()

def enl():
	log = app().log
	if log:
		log.es_newlines += 1
		log.putnl()

def es(s,*args,**keys):
	newline = keys.get("newline",true)
	color = keys.get("color",None)
	if type(s) != type("") and type(s) != type(u""): # 1/20/03
		s = repr(s)
	for arg in args:
		if type(arg) != type("") and type(arg) != type(u""): # 1/20/03
			arg = repr(arg)
		s = s + ", " + arg
	a = app() ; log = a.log
	if log:
		# print s
		log.put(s,color=color)
		# 6/2/02: This logic will fail if log is None.
		for ch in s:
			if ch == '\n': log.es_newlines += 1
			else: log.es_newlines = 0
		if newline:
			ecnl() # only valid here
	elif newline:
		a.logWaiting.append((s+'\n',color),) # 2/16/03
		print s
	else:
		a.logWaiting.append((s,color),) # 2/16/03
		print s,</t>
<t tx="edream.110203161858.1355">@ frame.doCommand and frame.OnMenuClick now set app().log, so top() will be reliable after any command is executed.

Note 1: The value of top() may change during a new or open command, which may change the routine used to execute the "command1" and "command2" hooks.  This is not a bug, and hook routines must be aware of this fact.
@c

def top():
	
	"""Return the commander of the topmost window"""
	
	# Warning: may be called during startup or shutdown when nothing exists.
	try:
		return app().log.commands
	except:
		return None</t>
<t tx="edream.110203161858.1356"></t>
<t tx="edream.110203161858.1357">def windows():
	return app().windowList</t>
<t tx="edream.110203161858.1358"></t>
<t tx="edream.110203161858.1359">def getindex(text, index):
	
	"""Convert string index of the form line.col into a tuple of two ints."""
	
	return tuple(map(int,string.split(text.index(index), ".")))</t>
<t tx="edream.110203161858.1360">def scanAtFileOptions (h,err_flag=false):
	
	assert(match(h,0,"@file"))
	i = len("@file")
	atFileType = "@file"
	optionsList = []

	while match(h,i,'-'):
		&lt;&lt; scan another @file option &gt;&gt;
		
	# Convert atFileType to a list of options.
	for fileType,option in (
		("@silentfile","asis"),
		("@nosentinelsfile","nosent"),
		("@rawfile","noref")):
		if atFileType == fileType:
			optionsList.append(option)
			
	# trace(atFileType,optionsList)

	return i,atFileType,optionsList</t>
<t tx="edream.110203161858.1361">i += 1 ; err = -1

if match_word(h,i,"asis"):
	if atFileType == "@file":
		atFileType = "@silentfile"
	elif err_flag:
		es("using -asis option in:" + h)
elif match(h,i,"noref"): # Just match the prefix.
	if atFileType == "@file":
		atFileType = "@rawfile"
	elif atFileType == "@nosentinelsfile":
		atFileType = "@silentfile"
	elif err_flag:
		es("ignoring redundant -noref in:" + h)
elif match(h,i,"nosent"): # Just match the prefix.
	if atFileType == "@file":
		atFileType = "@nosentinelsfile"
	elif atFileType == "@rawfile":
		atFileType = "@silentfile"
	elif err_flag:
		es("ignoring redundant -nosent in:" + h)
else:
	for option in ("fat","new","now","old","thin","wait"):
		if match_word(h,i,option):
			optionsList.append(option)
	if len(option) == 0:
		err = i-1
# Scan to the next minus sign.
while i &lt; len(h) and h[i] not in (' ','\t','-'):
	i += 1
if err &gt; -1:
	es("unknown option:" + h[err:i] + " in " + h)</t>
<t tx="edream.110203161858.1362">def scanAtRootOptions (s,i,err_flag=false):
	
	assert(match(s,i,"@root"))
	i += len("@root")
	mode = None 
	while match(s,i,'-'):
		&lt;&lt; scan another @root option &gt;&gt;

	if mode == None:
		doc = app().config.at_root_bodies_start_in_doc_mode
		mode = choose(doc,"doc","code")
	return i,mode</t>
<t tx="edream.110203161858.1363">i += 1 ; err = -1

if match_word(s,i,"code"): # Just match the prefix.
	if not mode: mode = "code"
	elif err_flag: es("modes conflict in:" + get_line(s,i))
elif match(s,i,"doc"): # Just match the prefix.
	if not mode: mode = "doc"
	elif err_flag: es("modes conflict in:" + get_line(s,i))
else:
	err = i-1
	
# Scan to the next minus sign.
while i &lt; len(s) and s[i] not in (' ','\t','-'):
	i += 1

if err &gt; -1 and err_flag:
	es("unknown option:" + s[err:i] + " in " + get_line(s,i))</t>
<t tx="edream.110203161858.1364">@ It seems dubious to bump the Tangle error count here.  OTOH, it really doesn't hurt.
@c

def scanError(s):

	# Bump the error count in the tangle command.
	top().tangleCommands.errors += 1

	es(s)</t>
<t tx="edream.110203161858.1365"># A quick and dirty sscanf.  Understands only %s and %d.

def scanf (s,pat):
	import re
	count = pat.count("%s") + pat.count("%d")
	pat = pat.replace("%s","(\S+)")
	pat = pat.replace("%d","(\d+)")
	parts = re.split(pat,s)
	result = []
	for part in parts:
		if len(part) &gt; 0 and len(result) &lt; count:
			result.append(part)
	# trace("scanf returns:",result)
	return result
	
if 0: # testing
	from leoGlobals import trace
	scanf("1.0","%d.%d",)</t>
<t tx="edream.110203161858.1366">@ These scanners all call scanError() directly or indirectly, so they will call es() if they find an error.  scanError() also bumps commands.tangleCommands.errors, which is harmless if we aren't tangling, and useful if we are.

These routines are called by the Import routines and the Tangle routines.
</t>
<t tx="edream.110203161858.1367"># Scans past a block comment (an old_style C comment).

def skip_block_comment (s,i):

	assert(match(s,i,"/*"))
	j = i ; i += 2 ; n = len(s)
	
	k = string.find(s,"*/",i)
	if k == -1:
		scanError("Run on block comment: " + s[j:i])
		return n
	else: return k + 2</t>
<t tx="edream.110203161858.1368">@ Skips from the opening to the matching . If no matching is found i is set to len(s).

This code is called only from the import logic, so we are allowed to try some tricks.  In particular, we assume all braces are matched in #if blocks.
@c

def skip_braces(s,i):

	start = get_line(s,i)
	assert(match(s,i,'{'))
	level = 0 ; n = len(s)
	while i &lt; n:
		c = s[i]
		if c == '{':
			level += 1 ; i += 1
		elif c == '}':
			level -= 1
			if level &lt;= 0: return i
			i += 1
		elif c == '\'' or c == '"': i = skip_string(s,i)
		elif match(s,i,'//'): i = skip_to_end_of_line(s,i)
		elif match(s,i,'/*'): i = skip_block_comment(s,i)
		# 7/29/02: be more careful handling conditional code.
		elif match_word(s,i,"#if") or match_word(s,i,"#ifdef") or match_word(s,i,"#ifndef"):
			i,delta = skip_pp_if(s,i)
			level += delta
		else: i += 1
	return i</t>
<t tx="edream.110203161858.1369">@ 08-SEP-2002 DTHEIN: Added for PHP import support
Skips from the opening to the matching . If no matching is found i is set to len(s).

This code is called only from the import logic, and only for PHP imports.
@c

def skip_php_braces(s,i):

	start = get_line(s,i)
	assert(match(s,i,'{'))
	level = 0 ; n = len(s)
	while i &lt; n:
		c = s[i]
		if c == '{':
			level += 1 ; i += 1
		elif c == '}':
			level -= 1
			if level &lt;= 0: return i + 1
			i += 1
		elif c == '\'' or c == '"': i = skip_string(s,i)
		elif match(s,i,"&lt;&lt;&lt;"): i = skip_heredoc_string(s,i)
		elif match(s,i,'//') or match(s,i,'#'): i = skip_to_end_of_line(s,i)
		elif match(s,i,'/*'): i = skip_block_comment(s,i)
		else: i += 1
	return i
</t>
<t tx="edream.110203161858.1370">@ Skips from the opening ( to the matching ) . If no matching is found i is set to len(s)
@c

def skip_parens(s,i):
	level = 0 ; n = len(s)
	assert(match(s,i,'('))
	while i &lt; n:
		c = s[i]
		if c == '(':
			level += 1 ; i += 1
		elif c == ')':
			level -= 1
			if level &lt;= 0:  return i
			i += 1
		elif c == '\'' or c == '"': i = skip_string(s,i)
		elif match(s,i,"//"): i = skip_to_end_of_line(s,i)
		elif match(s,i,"/*"): i = skip_block_comment(s,i)
		else: i += 1
	return i</t>
<t tx="edream.110203161858.1371">@ Skips from begin to matching end.
If found, i points to the end. Otherwise, i &gt;= len(s)
The end keyword matches begin, case, class, record, and try.
@c

def skip_pascal_begin_end(s,i):

	assert(match_c_word(s,i,"begin"))
	i1 = i # for traces
	level = 1 ; i = skip_c_id(s,i) # Skip the opening begin.
	while i &lt; len(s):
		ch = s[i]
		if ch =='{' : i = skip_pascal_braces(s,i)
		elif ch =='"' or ch == '\'': i = skip_pascal_string(s,i)
		elif match(s,i,"//"): i = skip_line(s,i)
		elif match(s,i,"(*"): i = skip_pascal_block_comment(s,i)
		elif match_c_word(s,i,"end"):
			level -= 1 ;
			if level == 0:
				# lines = s[i1:i+3] ; trace('\n' + lines + '\n')
				return i
			else: i = skip_c_id(s,i)
		elif is_c_id(ch):
			j = i ; i = skip_c_id(s,i) ; name = s[j:i]
			if name in ["begin", "case", "class", "record", "try"]:
				level += 1
		else: i += 1
	# trace(`s[i1:i]`)
	return i</t>
<t tx="edream.110203161858.1372"># Scans past a pascal comment delimited by (* and *).

def skip_pascal_block_comment(s,i):
	
	j = i
	assert(match(s,i,"(*"))
	i = string.find(s,"*)",i)
	if i &gt; -1: return i + 2
	else:
		scanError("Run on comment" + s[j:i])
		return len(s)

#   n = len(s)
#   while i &lt; n:
#       if match(s,i,"*)"): return i + 2
#       i += 1
#   scanError("Run on comment" + s[j:i])
#   return i</t>
<t tx="edream.110203161858.1373">def skip_pascal_string(s,i):

	j = i ; delim = s[i] ; i += 1
	assert(delim == '"' or delim == '\'')

	while i &lt; len(s):
		if s[i] == delim:
			return i + 1
		else: i += 1

	scanError("Run on string: " + s[j:i])
	return i</t>
<t tx="edream.110203161858.1374">@ 08-SEP-2002 DTHEIN:  added function skip_heredoc_string
A heredoc string in PHP looks like:

  &lt;&lt;&lt;EOS
  This is my string.
  It is mine. I own it.
  No one else has it.
  EOS

It begins with &lt;&lt;&lt; plus a token (naming same as PHP variable names).
It ends with the token on a line by itself (must start in first position.

@c
def skip_heredoc_string(s,i):
	
	import re
	
	j = i
	assert(match(s,i,"&lt;&lt;&lt;"))
	m = re.match("\&lt;\&lt;\&lt;([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)", s[i:])
	if (None == m):
		i += 3
		return i

	# 14-SEP-2002 DTHEIN: needed to add \n to find word, not just string
	delim = m.group(1) + '\n' 
	
	i = skip_line(s,i) # 14-SEP-2002 DTHEIN: look after \n, not before
	n = len(s)
	while i &lt; n and not match(s,i,delim):
		i = skip_line(s,i) # 14-SEP-2002 DTHEIN: move past \n
		
	if i &gt;= n:
		scanError("Run on string: " + s[j:i])
	elif match(s,i,delim):
		i += len(delim)
	return i
</t>
<t tx="edream.110203161858.1375"># Now handles continuation lines and block comments.

def skip_pp_directive(s,i):

	while i &lt; len(s):
		if is_nl(s,i):
			if escaped(s,i): i = skip_nl(s,i)
			else: break
		elif match(s,i,"//"): i = skip_to_end_of_line(s,i)
		elif match(s,i,"/*"): i = skip_block_comment(s,i)
		else: i += 1
	return i</t>
<t tx="edream.110203161858.1376"># Skips an entire if or if def statement, including any nested statements.

def skip_pp_if(s,i):
	
	start_line = get_line(s,i) # used for error messages.
	# trace(start_line)

	assert(
		match_word(s,i,"#if") or
		match_word(s,i,"#ifdef") or
		match_word(s,i,"#ifndef"))

	i = skip_line(s,i)
	i,delta1 = skip_pp_part(s,i)
	i = skip_ws(s,i)
	if match_word(s,i,"#else"):
		i = skip_line(s,i)
		i = skip_ws(s,i)
		i,delta2 = skip_pp_part(s,i)
		if delta1 != delta2:
			es("#if and #else parts have different braces: " + start_line)
	i = skip_ws(s,i)
	if match_word(s,i,"#endif"):
		i = skip_line(s,i)
	else:
		es("no matching #endif: " + start_line)
		
	# trace(`delta1` + ":" + start_line)
	return i,delta1
</t>
<t tx="edream.110203161858.1377"># Skip to an #else or #endif.  The caller has eaten the #if, #ifdef, #ifndef or #else

def skip_pp_part(s,i):
		
	start_line = get_line(s,i) # used for error messages.
	# trace(start_line)
	
	delta = 0
	while i &lt; len(s):
		c = s[i]
		if 0:
			if c == '\n':
				trace(`delta` + ":" + get_line(s,i))
		if match_word(s,i,"#if") or match_word(s,i,"#ifdef") or match_word(s,i,"#ifndef"):
			i,delta1 = skip_pp_if(s,i)
			delta += delta1
		elif match_word(s,i,"#else") or match_word(s,i,"#endif"):
			return i,delta
		elif c == '\'' or c == '"': i = skip_string(s,i)
		elif c == '{':
			delta += 1 ; i += 1
		elif c == '}':
			delta -= 1 ; i += 1
		elif match(s,i,"//"): i = skip_line(s,i)
		elif match(s,i,"/*"): i = skip_block_comment(s,i)
		else: i += 1
	return i,delta</t>
<t tx="edream.110203161858.1378">def skip_python_string(s,i):

	if match(s,i,"'''") or match(s,i,'"""'):
		j = i ; delim = s[i]*3 ; i += 3
		k = string.find(s,delim,i)
		if k &gt; -1: return k+3
		scanError("Run on triple quoted string: " + s[j:i])
		return len(s)
	else:
		return skip_string(s,i)</t>
<t tx="edream.110203161858.1379">def skip_string(s,i):
	
	j = i ; delim = s[i] ; i += 1
	assert(delim == '"' or delim == '\'')
	n = len(s)
	while i &lt; n and s[i] != delim:
		if s[i] == '\\' : i += 2
		else: i += 1

	if i &gt;= n:
		scanError("Run on string: " + s[j:i])
	elif s[i] == delim:
		i += 1
	return i</t>
<t tx="edream.110203161858.1380"># Skips to the next semicolon that is not in a comment or a string.

def skip_to_semicolon(s,i):

	n = len(s)
	while i &lt; n:
		c = s[i]
		if c == ';': return i
		elif c == '\'' or c == '"' : i = skip_string(s,i)
		elif match(s,i,"//"): i = skip_to_end_of_line(s,i)
		elif match(s,i,"/*"): i = skip_block_comment(s,i)
		else: i += 1
	return i</t>
<t tx="edream.110203161858.1381">def skip_typedef(s,i):

	n = len(s)
	while i &lt; n and is_c_id(s[i]):
		i = skip_c_id(s,i)
		i = skip_ws_and_nl(s,i)
	if match(s,i,'{'):
		i = skip_braces(s,i)
		i = skip_to_semicolon(s,i)
	return i</t>
<t tx="edream.110203161858.1382"></t>
<t tx="edream.110203161858.1383"># Returns true if s[i] is preceded by an odd number of backslashes.

def escaped(s,i):

	count = 0
	while i-1 &gt;= 0 and s[i-1] == '\\':
		count += 1
		i -= 1
	return (count%2) == 1</t>
<t tx="edream.110203161858.1384">def find_line_start(s,i):

	# bug fix: 11/2/02: change i to i+1 in rfind
	i = string.rfind(s,'\n',0,i+1) # Finds the highest index in the range.
	if i == -1: return 0
	else: return i + 1</t>
<t tx="edream.110203161858.1385">def find_on_line(s,i,pattern):

	# j = skip_line(s,i) ; trace(`s[i:j]`)
	j = string.find(s,'\n',i)
	if j == -1: j = len(s)
	k = string.find(s,pattern,i,j)
	if k &gt; -1: return k
	else: return None</t>
<t tx="edream.110203161858.1386">def is_c_id(ch):

	return ch in string.letters or ch in string.digits or ch == '_'</t>
<t tx="edream.110203161858.1387">def is_nl(s,i):

	return i &lt; len(s) and (s[i] == '\n' or s[i] == '\r')</t>
<t tx="edream.110203161858.1388">@ Return true if the body text contains the @ directive.

We no longer require that the directive appear befor any @c directive or section definition.
@c

def is_special(s,i,directive):

	# j = skip_line(s,i) ; trace(`s[i:j]` + " : " + `directive`)
	assert (directive and directive [0] == '@' )

	# 10/23/02: all directives except @others must start the line.
	skip_flag = directive == "@others"
	while i &lt; len(s):
		if match_word(s,i,directive):
			return true, i
		else:
			i = skip_line(s,i)
			if skip_flag:
				i = skip_ws(s,i)
	return false, -1</t>
<t tx="edream.110203161858.1389">def is_ws(c):

	return c == '\t' or c == ' '
	
def is_ws_or_nl(s,i):

	return is_nl(s,i) or (i &lt; len(s) and is_ws(s[i]))</t>
<t tx="edream.110203161858.1390"># Warning: this code makes no assumptions about what follows pattern.

def match(s,i,pattern):

	return s and pattern and string.find(s,pattern,i,i+len(pattern)) == i</t>
<t tx="edream.110203161858.1391">def match_c_word (s,i,name):

	if name == None: return false
	n = len(name)
	if n == 0: return false
	return name == s[i:i+n] and (i+n == len(s) or not is_c_id(s[i+n]))</t>
<t tx="edream.110203161858.1392">def match_ignoring_case(s1,s2):

	if s1 == None or s2 == None: return false
	return string.lower(s1) == string.lower(s2)</t>
<t tx="edream.110203161858.1393">def match_word(s,i,pattern):

	if pattern == None: return false
	j = len(pattern)
	if j == 0: return false
	if string.find(s,pattern,i,i+j) != i:
		return false
	if i+j &gt;= len(s):
		return true
	c = s[i+j]
	return not (c in string.letters or c in string.digits or c == '_')</t>
<t tx="edream.110203161858.1394">def skip_blank_lines(s,i):

	while i &lt; len(s):
		if is_nl(s,i) :
			i = skip_nl(s,i)
		elif is_ws(s[i]):
			j = skip_ws(s,i)
			if is_nl(s,j):
				i = j
			else: break
		else: break
	return i</t>
<t tx="edream.110203161858.1395">def skip_c_id(s,i):

	n = len(s)
	while i &lt; n:
		c = s[i]
		if c in string.letters or c in string.digits or c == '_':
			i += 1
		else: break
	return i</t>
<t tx="edream.110203161858.1396">@ These methods skip to the next newline, regardless of whether the newline may be preceeded by a backslash. Consequently, they should be used only when we know that we are not in a preprocessor directive or string.
@c

def skip_line (s,i):

	i = string.find(s,'\n',i)
	if i == -1: return len(s)
	else: return i + 1
		
def skip_to_end_of_line (s,i):

	i = string.find(s,'\n',i)
	if i == -1: return len(s)
	else: return i</t>
<t tx="edream.110203161858.1397">def skip_long(s,i):
	
	"""Scan s[i:] for a valid int.
	Return (i, val) or (i, None) if s[i] does not point at a number.
	"""

	digits = string.digits
	val = 0
	i = skip_ws(s,i)
	n = len(s)
	if i &gt;= n or s[i] not in "+-" + digits:
		return i, None
	# Rewritten: 7/18/02.
	j = i
	if s[i] in '+-':    # whr allow sign if first digit
		i +=1
	while i &lt; n and s[i] in digits:
		i += 1
	try: # 4/24/03: There may be no digits, which would raise an exception.
		val = int(s[j:i])
		return i, val
	except:
		return i,None
</t>
<t tx="edream.110203161858.1398">def skip_matching_delims(s,i,delim1,delim2):
	
	assert(match(s,i,delim1))

	i += len(delim1)
	k = string.find(s,delim2,i)
	if k == -1:
		return len(s)
	else:
		return k + len(delim2)</t>
<t tx="edream.110203161858.1399">@ This function skips a single "logical" end-of-line character.  We need this function because different systems have different end-of-line conventions.
@c

def skip_nl (s,i):

	if match(s,i,"\r\n"): return i + 2
	elif match(s,i,'\n') or match(s,i,'\r'): return i + 1
	else: return i</t>
<t tx="edream.110203161858.1400">def skip_non_ws (s,i):

	n = len(s)
	while i &lt; n and not is_ws(s[i]):
		i += 1
	return i</t>
<t tx="edream.110203161858.1401"># Skips from the opening { to the matching }.

def skip_pascal_braces(s,i):

	# No constructs are recognized inside Pascal block comments!
	k = string.find(s,'}',i)
	if i == -1: return len(s)
	else: return k</t>
<t tx="edream.110203161858.1402">def skip_to_char(s,i,ch):
	
	j = string.find(s,ch,i)
	if j == -1:
		return len(s),s[i:]
	else:
		return j,s[i:j]
</t>
<t tx="edream.110203161858.1403">def skip_ws(s,i):

	n = len(s)
	while i &lt; n and is_ws(s[i]):
		i += 1
	return i
	
def skip_ws_and_nl(s,i):

	n = len(s)
	while i &lt; n and (is_ws(s[i]) or is_nl(s,i)):
		i += 1
	return i</t>
<t tx="edream.110203161858.1404"></t>
<t tx="edream.110203161858.1405">def bound_paragraph(t=None):
	"""Find the bounds of the text paragraph that contains the current cursor position.
	
t: a Tk.Text widget

Returns:
	None if the cursor is on a whitespace line or a delimeter line.
	Otherwise: (start,end,endsWithNL,wsFirst,wsSecond)

start: the paragraph starting position,
end: the paragraph ending position,
endsWithNL: true if the paragraph ends with a newline"""

	if not t: return None
	x=t.index("insert")
	
	# Return if the selected line is all whitespace or a Leo directive.
	s = t.get(x+"linestart",x+"lineend")
	if len(s)==0 or s.isspace() or s[0] == '@':
		return None 

	# Point start and end at the start and end of the selected line.
	start = t.index(x+"linestart")
	tmpLine = int(float(start))
	end = str(tmpLine + 1) + ".0"
	
	# EKR: This is needlessly complex.
	# It would be much easier to use a list of lines,
	# rather than asking TK to do so much work.

	# Set start to the start of the paragraph.
	while (tmpLine &gt; 1):
		tmpLine -= 1
		tmp = str(tmpLine) + ".0"
		s = t.get(tmp,tmp+"lineend")
		if len(s)==0 or s.isspace() or s[0] == '@':
			break
		start = tmp

	# Set end to the end of the paragraph.
	tmpLine = int(float(end))
	bodyEnd = t.index("end")

	while end != bodyEnd:
		end = str(tmpLine) + ".0"
		s = t.get(end,end+"lineend")
		if len(s)==0 or s.isspace() or s[0] == '@':
			break
		tmpLine += 1

	# do we insert a trailing NL?
	endsWithNL = len(t.get(end))

	return start, end, endsWithNL</t>
<t tx="edream.110203161858.1406"># t is a Tk.Text widget.  Returns the text of the selected range of t.

def getSelectedText (t):

	start, end = getTextSelection(t)
	if start and end and start != end: # 7/7/03
		return t.get(start,end)
	else:
		return None</t>
<t tx="edream.110203161858.1407">def getTextSelection (t):
	
	"""Return a tuple representing the selected range of t, a Tk.Text widget.
	
	Return a tuple giving the insertion point if no range of text is selected."""

	# To get the current selection
	sel = t.tag_ranges("sel")
	if len(sel) == 2:
		return sel
	else:
		# 7/1/03: Return the insertion point if there is no selected text.
		insert = t.index("insert")
		return insert,insert</t>
<t tx="edream.110203161858.1408">@ t is a Tk.Text widget.  start and end are positions.  Selects from start to end.
@c

def setTextSelection (t,start,end): 

	if not start or not end:
		return

	if t.compare(start, "&gt;", end):
		start,end = end,start
		
	t.tag_remove("sel","1.0",start)
	t.tag_add("sel",start,end)
	t.tag_remove("sel",end,"end")
	t.mark_set("insert",end)
</t>
<t tx="edream.110203161858.1409"></t>
<t tx="edream.110203161858.1410"># Returns optimized whitespace corresponding to width with the indicated tab_width.

def computeLeadingWhitespace (width, tab_width):

	if width &lt;= 0:
		return ""
	if tab_width &gt; 1:
		tabs   = width / tab_width
		blanks = width % tab_width
		return ('\t' * tabs) + (' ' * blanks)
	else: # 7/3/02: negative tab width always gets converted to blanks.
		return (' ' * width)</t>
<t tx="edream.110203161858.1411"># Returns the width of s, assuming s starts a line, with indicated tab_width.

def computeWidth (s, tab_width):
		
	w = 0
	for ch in s:
		if ch == '\t':
			w += (abs(tab_width) - (w % abs(tab_width)))
		else:
			w += 1
	return w</t>
<t tx="edream.110203161858.1412">def get_leading_ws(s):
	
	"""Returns the leading whitespace of 's'."""

	i = 0 ; n = len(s)
	while i &lt; n and s[i] in (' ','\t'):
		i += 1
	return s[0:i]
</t>
<t tx="edream.110203161858.1413"># Optimize leading whitespace in s with the given tab_width.

def optimizeLeadingWhitespace (line,tab_width):

	i, width = skip_leading_ws_with_indent(line,0,tab_width)
	s = computeLeadingWhitespace(width,tab_width) + line[i:]
	return s</t>
<t tx="edream.110203161858.1414"># Remove whitespace up to first_ws wide in s, given tab_width, the width of a tab.

def removeLeadingWhitespace (s,first_ws,tab_width):

	j = 0 ; ws = 0
	for ch in s:
		if ws &gt;= first_ws:
			break
		elif ch == ' ':
			j += 1 ; ws += 1
		elif ch == '\t':
			j += 1 ; ws += (abs(tab_width) - (ws % abs(tab_width)))
		else: break
	if j &gt; 0:
		s = s[j:]
	return s</t>
<t tx="edream.110203161858.1415"># Warning: string.rstrip also removes newlines!

def removeTrailingWs(s):

	j = len(s)-1
	while j &gt;= 0 and (s[j] == ' ' or s[j] == '\t'):
		j -= 1
	return s[:j+1]
</t>
<t tx="edream.110203161858.1416"># Skips leading up to width leading whitespace.

def skip_leading_ws(s,i,ws,tab_width):

	count = 0
	while count &lt; ws and i &lt; len(s):
		ch = s[i]
		if ch == ' ':
			count += 1
			i += 1
		elif ch == '\t':
			count += (abs(tab_width) - (count % abs(tab_width)))
			i += 1
		else: break

	return i</t>
<t tx="edream.110203161858.1417">@ Skips leading whitespace and returns (i, indent), where i points after the whitespace and indent is the width of the whitespace, assuming tab_width wide tabs.
@c

def skip_leading_ws_with_indent(s,i,tab_width):

	count = 0 ; n = len(s)
	while i &lt; n:
		ch = s[i]
		if ch == ' ':
			count += 1
			i += 1
		elif ch == '\t':
			count += (abs(tab_width) - (count % abs(tab_width)))
			i += 1
		else: break

	return i, count</t>
<t tx="edream.110203161858.1418"></t>
<t tx="edream.110203161858.1419">def isValidEncoding (encoding):
	
	try:
		if len(encoding) == 0:
			return false
		u = unicode("a",encoding)
		return true
	except:
		return false
</t>
<t tx="edream.110203161858.1420">def reportBadChars (s,encoding):
	
	errors = 0
	if type(s) == type(u""):
		for ch in s:
			try: ch.encode(encoding,"strict")
			except: errors += 1
		if errors:
			# import traceback ; traceback.print_stack()
			es("%d errors converting %s to %s" % 
				(errors, s.encode(encoding,"replace"),encoding))

	elif type(s) == type(""):
		for ch in s:
			try: unicode(ch,encoding,"strict")
			except: errors += 1
		if errors:
			es("%d errors converting %s from %s to unicode" % 
				(errors, s.encode(encoding,"replace"),encoding))</t>
<t tx="edream.110203161858.1421">def toUnicode (s,encoding,reportErrors=false):
	
	if type(s) == type(""):
		try:
			s = unicode(s,encoding,"strict")
		except:
			if reportErrors:
				reportBadChars(s,encoding)
			s = unicode(s,encoding,"replace")
	return s
	
def toEncodedString (s,encoding,reportErrors=false):

	if type(s) == type(u""):
		try:
			s = s.encode(encoding,"strict")
		except:
			if reportErrors:
				reportBadChars(s,encoding)
			s = s.encode(encoding,"replace")
	return s</t>
<t tx="edream.110203161858.1422">try:
	# Use Python's version of getpreferredencoding if it exists.
	# It is new in Python 2.3.
	import locale
	getpreferredencoding = locale.getpreferredencoding
except:
	# Use code copied from locale.py in Python 2.3alpha2.
	if sys.platform in ('win32', 'darwin', 'mac'):
		&lt;&lt; define getpreferredencoding using _locale &gt;&gt;
	else:
		&lt;&lt; define getpreferredencoding for *nix &gt;&gt;
</t>
<t tx="edream.110203161858.1423"># On Win32, this will return the ANSI code page
# On the Mac, it should return the system encoding;
# it might return "ascii" instead.

def getpreferredencoding(do_setlocale = true):
	"""Return the charset that the user is likely using."""
	try:
		import _locale
		return _locale._getdefaultlocale()[1]
	except:
		return None # Good enough for a.finishCreate.</t>
<t tx="edream.110203161858.1424"># On Unix, if CODESET is available, use that.
try:
	local.CODESET
except NameError:
	# Fall back to parsing environment variables :-(
	def getpreferredencoding(do_setlocale = true):
		"""Return the charset that the user is likely using,
		by looking at environment variables."""
		try:
			return locale.getdefaultlocale()[1]
		except:
			return None # Good enough for a.finishCreate.
else:
	def getpreferredencoding(do_setlocale = true):
		"""Return the charset that the user is likely using,
		according to the system configuration."""
		try:
			if do_setlocale:
				oldloc = locale.setlocale(LC_CTYPE)
				locale.setlocale(LC_CTYPE, "")
				result = locale.nl_langinfo(CODESET)
				locale.setlocale(LC_CTYPE, oldloc)
				return result
			else:
				return locale.nl_langinfo(CODESET)
		except:
			return None # Good enough for a.finishCreate.</t>
<t tx="edream.110203161858.1425">@language python

from leoGlobals import *

&lt;&lt; scripts &gt;&gt;

class baseLeoImportCommands:
	"""The base class for Leo's import commands."""
	@others
	
class leoImportCommands (baseLeoImportCommands):
	"""A class that implements Leo's import commands."""
	pass</t>
<t tx="edream.110203161858.1426">def __init__ (self,commands):

	self.commands = commands
	
	# Set by ImportFilesFommand.
	self.treeType = "@file" # "@root" or "@file"
	# Set by ImportWebCommand.
	self.webType = "@noweb" # "cweb" or "noweb"

	# Set by create_outline.
	self.fileName = None # The original file name, say x.cpp
	self.methodName = None # x, as in &lt; &lt; x methods &gt; &gt; =
	self.fileType = None # ".py", ".c", etc.
	self.rootLine = "" # Empty or @root + self.fileName

	# Support of output_newline option
	self.output_newline = getOutputNewline()
	
	# Used by Importers.
	self.web_st = []
	self.encoding = app().tkEncoding # 2/25/03: was "utf-8"
</t>
<t tx="edream.110203161858.1427">@others</t>
<t tx="edream.110203161858.1428"># An example of running this script:
#
# import leoImport
# leoImport.importFiles("c:/prog/test", ".py")

def importFiles (dir, type = None, kind = "@file"):
	
	import os

	# Check the params.
	if kind != "@file" and kind != "@root":
		es("kind must be @file or @root: " + `kind`)
		return
	if not os.path.exists(dir):
		es("directory does not exist: " + `dir`)
		return
	
	c = top() # Get the commander.
	
	try:
		files = os.listdir(dir)
		files2 = []
		for f in files:
			path = os.path.join(dir,f)
			if os.path.isfile(path):
				name, ext = os.path.splitext(f)
				if type == None or ext == type:
					files2.append(path)
		if len(files2) &gt; 0:
			c.importCommands.importFilesCommand(files2,kind)
	except:
		es("exception in importFiles script")
		es_exception()</t>
<t tx="edream.110203161858.1429"></t>
<t tx="edream.110203161858.1430">def createOutline (self,fileName,parent):

	c = self.commands ; current = c.currentVnode()
	junk, self.fileName = os.path.split(fileName) # junk/fileName
	self.methodName, ext = os.path.splitext(self.fileName) # methodName.fileType
	self.fileType = ext
	self.setEncoding()
	# trace(`self.fileName`) ; trace(`self.fileType`)
	# All file types except the following just get copied to the parent node.
	# Note: we should _not_ import header files using this code.
	ext = ext.lower()
	appendFileFlag = ext not in (
		".c", ".cpp", ".cxx", ".java", ".pas", ".py", ".pyw", ".php")
	&lt;&lt; Read file into s &gt;&gt;
	# Create the top-level headline.
	v = parent.insertAsLastChild()
	c.undoer.setUndoParams("Import",v,select=current)
	if self.treeType == "@file":
		v.initHeadString("@file " + self.fileName)
	else:
		v.initHeadString(self.fileName)
		
	self.rootLine = choose(self.treeType=="@file","","@root "+self.fileName+'\n')

	if appendFileFlag:
		v.setBodyStringOrPane("@ignore\n" + self.rootLine + s)
	elif ext in (".c", ".cpp", ".cxx"):
		self.scanCText(s,v)
	elif ext == ".java":
		self.scanJavaText(s,v,true) #outer level
	elif ext == ".pas":
		self.scanPascalText(s,v)
	elif ext in (".py", ".pyw"):
		self.scanPythonText(s,v)
	elif ext == ".php":
		self.scanPHPText(s,v) # 08-SEP-2002 DTHEIN
	else:
		es("createOutline: can't happen")
	return v</t>
<t tx="edream.110203161858.1431">try:
	file = open(fileName)
	s = file.read()
	s = toUnicode(s,self.encoding)
	file.close()
except:
	es("can not read " + fileName)
	es_exception()
	return None</t>
<t tx="edream.110203161858.1432">def importFilesCommand (self,files,treeType):

	c = self.commands
	if c == None: return
	v = current = c.currentVnode()
	if current == None: return
	if len(files) &lt; 1: return
	self.treeType = treeType
	c.beginUpdate()
	if 1: # range of update...
		if len(files) == 2:
			&lt;&lt; Create a parent for two files having a common prefix &gt;&gt;
		for i in xrange(len(files)):
			fileName = files[i]
			v = self.createOutline(fileName,current)
			if v: # 8/11/02: createOutline may fail.
				es("imported " + fileName)
				v.contract()
				v.setDirty()
				c.setChanged(true)
		c.validateOutline()
		current.expand()
	c.endUpdate()
	c.selectVnode(current)</t>
<t tx="edream.110203161858.1433">@ The two filenames have a common prefix everything before the last period is the same.  For example, x.h and x.cpp.
@c

name0 = files[0]
name1 = files[1]
prefix0, junk = os.path.splitext(name0)
prefix1, junk = os.path.splitext(name1)
if len(prefix0) &gt; 0 and prefix0 == prefix1:
	current = current.insertAsLastChild()
	junk, nameExt = os.path.split(prefix1)
	name,ext = os.path.splitext(prefix1)
	current.initHeadString(name)</t>
<t tx="edream.110203161858.1434"></t>
<t tx="edream.110203161858.1435"># Used by paste logic.

def convertMoreStringToOutlineAfter (self,s,firstVnode):
	s = string.replace(s,"\r","")
	strings = string.split(s,"\n")
	return self.convertMoreStringsToOutlineAfter(strings,firstVnode)

# Almost all the time spent in this command is spent here.

def convertMoreStringsToOutlineAfter (self,strings,firstVnode):

	c = self.commands
	if len(strings) == 0: return None
	if not self.stringsAreValidMoreFile(strings): return None
	c.beginUpdate()
	firstLevel, junk = self.moreHeadlineLevel(strings[0])
	lastLevel = -1 ; theRoot = lastVnode = None
	index = 0
	while index &lt; len(strings):
		progress = index
		s = strings[index]
		level, newFlag = self.moreHeadlineLevel(s)
		level -= firstLevel
		if level &gt;= 0:
			&lt;&lt; Link a new vnode v into the outline &gt;&gt;
			&lt;&lt; Set the headline string, skipping over the leader &gt;&gt;
			&lt;&lt; Count the number of following body lines &gt;&gt;
			&lt;&lt; Add the lines to the body text of v &gt;&gt;
			v.setDirty()
		else: index += 1
		assert progress &lt; index
	if theRoot:
		theRoot.setDirty()
		c.setChanged(true)
	c.endUpdate()
	return theRoot</t>
<t tx="edream.110203161858.1436">assert(level &gt;= 0)
if not lastVnode:
	theRoot = v = firstVnode.insertAfter()
elif level == lastLevel:
	v = lastVnode.insertAfter()
elif level == lastLevel + 1:
	v = lastVnode.insertAsNthChild(0)
else:
	assert(level &lt; lastLevel)
	while level &lt; lastLevel:
		lastLevel -= 1
		lastVnode = lastVnode.parent()
		assert(lastVnode)
		assert(lastLevel &gt;= 0)
	v = lastVnode.insertAfter()
lastVnode = v
lastLevel = level</t>
<t tx="edream.110203161858.1437">j = 0
while match(s,j,'\t'):
	j += 1
if match(s,j,"+ ") or match(s,j,"- "):
	j += 2

v.initHeadString(s[j:])</t>
<t tx="edream.110203161858.1438">bodyLines = 0
index += 1 # Skip the headline.
while index &lt; len(strings):
	s = strings[index]
	level, junk = self.moreHeadlineLevel(s)
	level -= firstLevel
	if level &gt;= 0:
		break
	# Remove first backslash of the body line.
	if match(s,0,'\\'):
		strings[index] = s[1:]
	bodyLines += 1
	index += 1</t>
<t tx="edream.110203161858.1439">if bodyLines &gt; 0:
	body = ""
	n = index - bodyLines
	while n &lt; index:
		body += strings[n]
		if n != index - 1:
			body += "\n"
		n += 1
	v.t.setTnodeText(body)</t>
<t tx="edream.110203161858.1440"># On entry,files contains at most one file to convert.
def importFlattenedOutline (self,files):

	c = self.commands ; current = c.currentVnode()
	if current == None: return
	if len(files) &lt; 1: return
	self.setEncoding()
	fileName = files[0]
	&lt;&lt; Read the file into array &gt;&gt;
	# Convert the string to an outline and insert it after the current node.
	newVnode = self.convertMoreStringsToOutlineAfter(array,current)
	if newVnode:
		c.undoer.setUndoParams("Import",newVnode,select=current)
		c.endEditing()
		c.validateOutline()
		c.editVnode(newVnode)
		newVnode.setDirty()
		c.setChanged(true)
	else:
		es(fileName + " is not a valid MORE file.")</t>
<t tx="edream.110203161858.1441">try:
	file = open(fileName)
	s = file.read()
	s = string.replace(s,"\r","")
	s = toUnicode(s,self.encoding)
	array = string.split(s,"\n")
	file.close()
except:
	es_exception()
	array = []</t>
<t tx="edream.110203161858.1442"># return the headline level of s,or -1 if the string is not a MORE headline.
def moreHeadlineLevel (self,s):

	level = 0 ; i = 0
	while match(s,i,'\t'):
		level += 1
		i += 1
	plusFlag = choose(match(s,i,"+"),true,false)
	if match(s,i,"+ ") or match(s,i,"- "):
		return level, plusFlag
	else:
		return -1, plusFlag</t>
<t tx="edream.110203161858.1443"># Used by paste logic.

def stringIsValidMoreFile (self,s):
	
	s = string.replace(s,"\r","")
	strings = string.split(s,"\n")
	return self.stringsAreValidMoreFile(strings)

def stringsAreValidMoreFile (self,strings):

	if len(strings) &lt; 1: return false
	level1, plusFlag = self.moreHeadlineLevel(strings[0])
	if level1 == -1: return false
	# Check the level of all headlines.
	i = 0 ; 	lastLevel = level1
	while i &lt; len(strings):
		s = strings[i] ; i += 1
		level, newFlag = self.moreHeadlineLevel(s)
		if level &gt; 0:
			if level &lt; level1 or level &gt; lastLevel + 1:
				return false # improper level.
			elif level &gt; lastLevel and plusFlag == false:
				return false # parent of this node has no children.
			elif level == lastLevel and plusFlag == true:
				return false # last node has missing child.
			else:
				lastLevel = level
				plusFlag = newFlag
	return true</t>
<t tx="edream.110203161858.1444"></t>
<t tx="edream.110203161858.1445">def createOutlineFromWeb (self,path,parent):

	c = self.commands ; current = c.currentVnode()
	junk, fileName = os.path.split(path)
	# Create the top-level headline.
	v = parent.insertAsLastChild()
	c.undoer.setUndoParams("Import",v,select=current)
	v.initHeadString(fileName)
	if self.webType=="cweb":
		v.setBodyStringOrPane("@ignore\n" + self.rootLine + "@language cweb")

	# Scan the file,creating one section for each function definition.
	self.scanWebFile(path,v)
	return v</t>
<t tx="edream.110203161858.1446">def importWebCommand (self,files,webType):

	c = self.commands ; current = c.currentVnode()
	if current == None: return
	if len(files) &lt; 1: return
	self.webType = webType
	c.beginUpdate()
	for i in xrange(len(files)):
		fileName = files[i]
		v = self.createOutlineFromWeb(fileName,current)
		v.contract()
		v.setDirty()
		c.setChanged(true)
	c.selectVnode(current)
	c.endUpdate()</t>
<t tx="edream.110203161858.1447">def findFunctionDef (self,s,i):
	
	# Look at the next non-blank line for a function name.
	i = skip_ws_and_nl(s,i)
	k = skip_line(s,i)
	name = None
	while i &lt; k:
		if is_c_id(s[i]):
			j = i ; i = skip_c_id(s,i) ; name = s[j:i]
		elif s[i] == '(':
			if name: return name
			else: break
		else: i += 1
	return None</t>
<t tx="edream.110203161858.1448">@ This method returns the proper headline text.

1. If s contains a section def, return the section ref.
2. cweb only: if s contains @c, return the function name following the @c.
3. cweb only: if s contains @d name, returns @d name.
4. Otherwise, returns "@"
@c

def scanBodyForHeadline (self,s):
	
	if self.webType == "cweb":
		&lt;&lt; scan cweb body for headline &gt;&gt;
	else:
		&lt;&lt; scan noweb body for headline &gt;&gt;
	return "@" # default.</t>
<t tx="edream.110203161858.1449">i = 0
while i &lt; len(s):
	i = skip_ws_and_nl(s,i)
	# line = get_line(s,i) ; trace(`line`)
	# Allow constructs such as @ @c, or @ @&lt;.
	if self.isDocStart(s,i):
		i += 2 ; i = skip_ws(s,i)
	if match(s,i,"@d") or match(s,i,"@f"):
		# Look for a macro name.
		directive = s[i:i+2]
		i = skip_ws(s,i+2) # skip the @d or @f
		if i &lt; len(s) and is_c_id(s[i]):
			j = i ; skip_c_id(s,i) ; return s[j:i]
		else: return directive
	elif match(s,i,"@c") or match(s,i,"@p"):
		# Look for a function def.
		name = self.findFunctionDef(s,i+2)
		return choose(name,name,"outer function")
	elif match(s,i,"@&lt;"):
		# Look for a section def.
		# A small bug: the section def must end on this line.
		j = i ; k = find_on_line(s,i,"@&gt;")
		if k &gt; -1 and (match(s,k+2,"+=") or match(s,k+2,"=")):
			return s[j:k+2] # return the section ref.
	i = skip_line(s,i)</t>
<t tx="edream.110203161858.1450">i = 0
while i &lt; len(s):
	i = skip_ws_and_nl(s,i)
	# line = get_line(s,i) ; trace(`line`)
	if match(s,i,"&lt;&lt;"):
		k = find_on_line(s,i,"&gt;&gt;=")
		if k &gt; -1:
			ref = s[i:k+2]
			name = string.strip(s[i+2:k])
			if name != "@others":
				return ref
	else:
		name = self.findFunctionDef(s,i)
		if name:
			return name
	i = skip_line(s,i)</t>
<t tx="edream.110203161858.1451">def scanWebFile (self,fileName,parent):

	type = self.webType
	lb = choose(type=="cweb","@&lt;","&lt;&lt;")
	rb = choose(type=="cweb","@&gt;","&gt;&gt;")

	try: # Read the file into s.
		f = open(fileName)
		s = f.read()
	except: s = None

	&lt;&lt; Create a symbol table of all section names &gt;&gt;
	&lt;&lt; Create nodes for limbo text and the root section &gt;&gt;
	while i &lt; len(s):
		progress = i
		&lt;&lt; Create a node for the next module &gt;&gt;
		assert(progress &lt; i)</t>
<t tx="edream.110203161858.1452">i = 0 ; 	self.web_st = []
while i &lt; len(s):
	i = skip_ws_and_nl(s,i)
	# line = get_line(s,i) ; trace(`line`)
	if self.isDocStart(s,i):
		if type == "cweb": i += 2
		else: i = skip_line(s,i)
	elif type == "cweb" and match(s,i,"@@"):
		i += 2
	elif match(s,i,lb):
		i += 2 ; j = i ; k = find_on_line(s,j,rb)
		if k &gt; -1: self.cstEnter(s[j:k])
	else: i += 1

# trace(self.cstDump())</t>
<t tx="edream.110203161858.1453">i = 0
while i &lt; len(s):
	i = skip_ws_and_nl(s,i)
	if self.isModuleStart(s,i) or match(s,i,lb):
		break
	else: i = skip_line(s,i)
	
j = skip_ws(s,0)
if j &lt; i:
	self.createHeadline(parent,"@ " + s[j:i],"Limbo")

j = i
if match(s,i,lb):
	while i &lt; len(s):
		i = skip_ws_and_nl(s,i)
		if self.isModuleStart(s,i):
			break
		else: i = skip_line(s,i)
	self.createHeadline(parent,s[j:i],angleBrackets(" @ "))
	
# trace(`get_line(s,i)`)</t>
<t tx="edream.110203161858.1454">if type=="cweb":
	assert(self.isModuleStart(s,i))
	start = i
	if self.isDocStart(s,i):
		i += 2
		while i &lt; len(s):
			i = skip_ws_and_nl(s,i)
			if self.isModuleStart(s,i): break
			else: i = skip_line(s,i)
	&lt;&lt; Handle cweb @d, @f, @c and @p directives &gt;&gt;
else:
	assert(self.isDocStart(s,i)) # isModuleStart == isDocStart for noweb.
	start = i ; i = skip_line(s,i)
	while i &lt; len(s):
		i = skip_ws_and_nl(s,i)
		if self.isDocStart(s,i): break
		else: i = skip_line(s,i)
	
body = s[start:i]
body = self.massageWebBody(body)
headline = self.scanBodyForHeadline(body)
self.createHeadline(parent,body,headline)</t>
<t tx="edream.110203161858.1455">if match(s,i,"@d") or match(s,i,"@f"):
	i += 2 ; i = skip_line(s,i)
	# Place all @d and @f directives in the same node.
	while i &lt; len(s):
		i = skip_ws_and_nl(s,i)
		if match(s,i,"@d") or match(s,i,"@f"): i = skip_line(s,i)
		else: break
	i = skip_ws_and_nl(s,i)
	
while i &lt; len(s) and not self.isModuleStart(s,i):
	i = skip_line(s,i)
	i = skip_ws_and_nl(s,i)

if match(s,i,"@c") or match(s,i,"@p"):
	i += 2 ; 
	while i &lt; len(s):
		i = skip_line(s,i)
		i = skip_ws_and_nl(s,i)
		if self.isModuleStart(s,i):
			break</t>
<t tx="edream.110203161858.1456"></t>
<t tx="edream.110203161858.1457">@ We canonicalize strings before looking them up, but strings are entered in the form they are first encountered.
@c

def cstCanonicalize (self,s,lower=true):
	
	if lower:
		s = string.lower(s)
	s = string.replace(s,"\t"," ")
	s = string.replace(s,"\r","")
	s = string.replace(s,"\n"," ")
	s = string.replace(s,"  "," ")
	s = string.strip(s)
	return s</t>
<t tx="edream.110203161858.1458">def cstDump (self):

	self.web_st.sort()
	s = "Web Symbol Table...\n\n"
	for name in self.web_st:
		s += name + "\n"
	return s</t>
<t tx="edream.110203161858.1459"># We only enter the section name into the symbol table if the ... convention is not used.

def cstEnter (self,s):

	# Don't enter names that end in "..."
	s = string.rstrip(s)
	if s.endswith("..."): return
	
	# Put the section name in the symbol table, retaining capitalization.
	lower = self.cstCanonicalize(s,true)  # do lower
	upper = self.cstCanonicalize(s,false) # don't lower.
	for name in self.web_st:
		if string.lower(name) == lower:
			return
	self.web_st.append(upper)</t>
<t tx="edream.110203161858.1460"># This method returns a string if the indicated string is a prefix of an entry in the web_st.

def cstLookup (self,target):
	
	# Do nothing if the ... convention is not used.
	target = string.strip(target)
	if not target.endswith("..."): return target
	# Canonicalize the target name, and remove the trailing "..."
	ctarget = target[:-3]
	ctarget = self.cstCanonicalize(ctarget)
	ctarget = string.strip(ctarget)
	found = false ; result = target
	for s in self.web_st:
		cs = self.cstCanonicalize(s)
		if cs[:len(ctarget)] == ctarget:
			if found:
				es("****** " + target + ": is also a prefix of: " + s)
			else:
				found = true ; result = s
				# es("replacing: " + target + " with: " + s)
	return result</t>
<t tx="edream.110203161858.1461"></t>
<t tx="edream.110203161858.1462"></t>
<t tx="edream.110203161858.1463">@ Creates a child node c of parent for the class, and children of c for each def in the class.
@c

def scanPythonClass (self,s,i,start,parent):

	# line = get_line(s,i) ; trace(`line`)
	classIndent = self.getLeadingIndent(s,i)
	&lt;&lt; set classname and headline, or return i &gt;&gt;
	i = skip_line(s,i) # Skip the class line.
	&lt;&lt; create class_vnode &gt;&gt;
	savedMethodName = self.methodName
	self.methodName = headline
	# Create a node for leading declarations of the class.
	i = self.scanPythonDecls(s,i,class_vnode,classIndent,indent_parent_ref_flag=true)
	&lt;&lt; create nodes for all defs of the class &gt;&gt;
	self.methodName = savedMethodName
	return i</t>
<t tx="edream.110203161858.1464"># Skip to the class name.
i = skip_ws(s,i)
i = skip_c_id(s,i) # skip "class"
i = skip_ws_and_nl(s,i)
if i &lt; len(s) and is_c_id(s[i]):
	j = i ; i = skip_c_id(s,i)
	classname = s[j:i]
	headline = "class " + classname
else:
	return i</t>
<t tx="edream.110203161858.1465"># Create the section name using the old value of self.methodName.
if  self.treeType == "@file":
	prefix = ""
else:
	prefix = angleBrackets(" " + self.methodName + " methods ") + "=\n\n"
	self.methodsSeen = true

# i points just after the class line.
body = s[start:i]
body = self.undentBody(body)
class_vnode = self.createHeadline(parent,prefix + body,headline)
</t>
<t tx="edream.110203161858.1466">indent =  self.getLeadingIndent(s,i)
start = i = skip_blank_lines(s,i)
parent_vnode = None # 7/6/02
while i &lt; len(s) and indent &gt; classIndent:
	progress = i
	if is_nl(s,i):
		j = skip_nl(s,i)
		indent = self.getLeadingIndent(s,j)
		if indent &gt; classIndent: i = j
		else: break
	elif match_c_word(s,i,"def"):
		if not parent_vnode:
			&lt;&lt; create parent_vnode &gt;&gt;
		i = start = self.scanPythonDef(s,i,start,parent_vnode)
		indent = self.getLeadingIndent(s,i)
	elif match_c_word(s,i,"class"):
		if not parent_vnode:
			&lt;&lt; create parent_vnode &gt;&gt;
		i = start = self.scanPythonClass(s,i,start,parent_vnode)
		indent = self.getLeadingIndent(s,i)
	elif s[i] == '#': i = skip_to_end_of_line(s,i)
	elif s[i] == '"' or s[i] == '\'': i = skip_python_string(s,i)
	else: i += 1
	assert(progress &lt; i)</t>
<t tx="edream.110203161858.1467"># This must be done after the declaration reference is generated.
if self.treeType == "@file":
	class_vnode.appendStringToBody("\t@others\n")
else:
	ref = angleBrackets(" class " + classname + " methods ")
	class_vnode.appendStringToBody("\t" + ref + "\n\n")
parent_vnode = class_vnode</t>
<t tx="edream.110203161858.1468">@ Creates a node of parent for the def.
@c

def scanPythonDef (self,s,i,start,parent):

	# line = get_line(s,i) ; trace(`line`)
	&lt;&lt; set headline or return i &gt;&gt;
	&lt;&lt; skip the Python def &gt;&gt;
	# Create the def node.
	savedMethodName = self.methodName
	self.methodName = headline
	&lt;&lt; Create def node &gt;&gt;
	self.methodName = savedMethodName
	return i</t>
<t tx="edream.110203161858.1469">i = skip_ws(s,i)
i = skip_c_id(s,i) # Skip the "def"
i = skip_ws_and_nl(s,i)
if i &lt; len(s) and is_c_id(s[i]):
	j = i ; i = skip_c_id(s,i)
	headline = s[j:i]
	# trace("headline:" + `headline`)
else: return i</t>
<t tx="edream.110203161858.1470"># Set defIndent to the indentation of the def line.
defIndent = self.getLeadingIndent(s,start)
i = skip_line(s,i) # Skip the def line.
indent = self.getLeadingIndent(s,i)
while i &lt; len(s) and indent &gt; defIndent:
	progress = i
	ch = s[i]
	if is_nl(s,i):
		i = skip_nl(s,i)
		indent = self.getLeadingIndent(s,i)
		if indent &lt;= defIndent:
			break
	elif ch == '#':
		i = skip_to_end_of_line(s,i) # 7/29/02
	elif ch == '"' or ch == '\'':
		i = skip_python_string(s,i)
	else: i += 1
	assert(progress &lt; i)</t>
<t tx="edream.110203161858.1471"># Create the prefix line for @root trees.
if self.treeType == "@file":
	prefix = ""
else:
	prefix = angleBrackets(" " + savedMethodName + " methods ") + "=\n\n"
	self.methodsSeen = true

# Create body.
start = skip_blank_lines(s,start)
body = s[start:i]
body = self.undentBody(body)

# Create the node.
self.createHeadline(parent,prefix + body,headline)

</t>
<t tx="edream.110203161858.1472">def scanPythonDecls (self,s,i,parent,indent,indent_parent_ref_flag=true):
	
	done = false ; start = i
	while not done and i &lt; len(s):
		progress = i
		# line = get_line(s,i) ; trace(`line`)
		ch = s[i]
		if ch == '\n':
			i = skip_nl(s,i)
			# 2/14/03: break on lesser indention.
			j = skip_ws(s,i)
			if not is_nl(s,j) and not match(s,j,"#"):
				lineIndent = self.getLeadingIndent(s,i)
				if lineIndent &lt;= indent:
					break
		elif ch == '#': i = skip_to_end_of_line(s,i)
		elif ch == '"' or ch == '\'':
			i = skip_python_string(s,i)
		elif is_c_id(ch):
			&lt;&lt; break on def or class &gt;&gt;
		else: i += 1
		assert(progress &lt; i)
	j = skip_blank_lines(s,start)
	if is_nl(s,j): j = skip_nl(s,j)
	if j &lt; i:
		&lt;&lt; Create a child node for declarations &gt;&gt;
	return i</t>
<t tx="edream.110203161858.1473">if match_c_word(s,i,"def") or match_c_word(s,i,"class"):
	i = find_line_start(s,i)
	done = true
	break
else:
	i = skip_c_id(s,i)</t>
<t tx="edream.110203161858.1474">headline = ref = angleBrackets(" " + self.methodName + " declarations ")
leading_tab = choose(indent_parent_ref_flag,"\t","")

# Append the reference to the parent's body.
parent.appendStringToBody(leading_tab + ref + "\n") # 7/6/02

# Create the node for the decls.
body = self.undentBody(s[j:i])
if self.treeType == "@root":
	body = "@code\n\n" + body
self.createHeadline(parent,body,headline)</t>
<t tx="edream.110203161858.1475">@ This code creates a child of parent for each Python function definition seen.  See the comments for scanCText for what the text looks like.
@c

def scanPythonText (self,s,parent):

	decls_seen = false ; start = i = 0
	self.methodsSeen = false
	while i &lt; len(s):
		progress = i
		# line = get_line(s,i) ; trace(`line`)
		ch = s[i]
		if ch == '\n' or ch == '\r': i = skip_nl(s,i)
		elif ch == '#': i = skip_to_end_of_line(s,i)
		elif ch == '"' or ch == '\'': i = skip_python_string(s,i)
		elif is_c_id(ch):
			&lt;&lt; handle possible Python function or class &gt;&gt;
		else: i += 1
		assert(progress &lt; i)
	if not decls_seen: # 2/17/03
		parent.appendStringToBody("@ignore\n" + self.rootLine + "@language python\n")
	&lt;&lt; Append a reference to the methods of this file &gt;&gt;
	&lt;&lt; Append any unused python text to the parent's body text &gt;&gt;</t>
<t tx="edream.110203161858.1476">if match_c_word(s,i,"def") or match_word(s,i,"class"):
	isDef = match_c_word(s,i,"def")
	if not decls_seen:
		parent.appendStringToBody("@ignore\n" + self.rootLine + "@language python\n")
		i = start = self.scanPythonDecls(s,start,parent,-1,indent_parent_ref_flag=false)
		decls_seen = true
		if self.treeType == "@file": # 7/29/02
			parent.appendStringToBody("@others\n") # 7/29/02
	if isDef:
		i = start = self.scanPythonDef(s,i,start,parent)
	else:
		i = start = self.scanPythonClass(s,i,start,parent)
else:
	i = skip_c_id(s,i)</t>
<t tx="edream.110203161858.1477">if self.treeType == "@root" and self.methodsSeen:
	parent.appendStringToBody(
		angleBrackets(" " + self.methodName + " methods ") + "\n\n")</t>
<t tx="edream.110203161858.1478"># Do nothing if only whitespace is left.
i = start ; i = skip_ws_and_nl(s,i)
if i &lt; len(s):
	parent.appendStringToBody(s[start:])</t>
<t tx="edream.110203161858.1479">@ 08-SEP-2002 DTHEIN: Added for PHP import support
Creates a child of parent for each class and function definition seen.

PHP uses both # and // as line comments, and /* */ as block comments
@c
def scanPHPText (self,s,parent):
	import re
	&lt;&lt; Append file if not pure PHP &gt;&gt;

	&lt;&lt; define scanPHPText vars &gt;&gt;
	# 14-SEP-2002 DTHEIN: Make leading &lt;?php use the @first directive
	parent.appendStringToBody("@first ")	
	parent.appendStringToBody(s[:startOfCode])
	scan_start = i = startOfCode
	while i &lt; endOfCode:
		# line = get_line(s,i) ; trace(`line`)
		ch = s[i]
		# These cases skip tokens.
		if ch == '/' or ch == '#':
			&lt;&lt; handle possible PHP comments &gt;&gt;
		elif ch == '&lt;':
			&lt;&lt; handle possible heredoc string &gt;&gt;
		elif ch == '"' or ch == '\'':
			i = skip_string(s,i)
		# These cases help determine where functions start.
		# FIXME: probably want to capture 'var's as class member data
		elif ch == 'f' or ch =='c':
			&lt;&lt; handle possible class or function &gt;&gt;
		elif class_start and (ch == '}'):
			&lt;&lt; handle end of class &gt;&gt;
		else: i += 1
	&lt;&lt; Append any unused text to the parent's body text &gt;&gt;
	# 14-SEP-2002 DTHEIN: Make leading &lt;?php use the @first directive
	parent.appendStringToBody("@last ")	
	parent.appendStringToBody(s[endOfCode:])</t>
<t tx="edream.110203161858.1480"># If the file does not begin with &lt;?php or end with ?&gt; then
# it is simply appended like a generic import would do.
s.strip() #remove inadvertent whitespace
if not s.startswith("&lt;?php") \
or not (s.endswith("?&gt;") or s.endswith("?&gt;\n") or s.endswith("?&gt;\r\n")):
	es("File seems to be mixed HTML and PHP; importing as plain text file.")
	parent.setBodyStringOrPane("@ignore\n" + self.rootLine + s)
	return</t>
<t tx="edream.110203161858.1481">scan_start = 0
class_start = 0
function_start = 0
c = self.commands
i = 0
class_body = ""
class_node = ""
phpClassName = re.compile("class\s+([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)")
phpFunctionName = re.compile("function\s+([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)")

# 14-SEP-2002 DTHEIN: added these 2 variables to allow use of @first/last
startOfCode = s.find("\n") + 1 # this should be the line containing the initial &lt;?php
endOfCode = s.rfind("?&gt;") # this should be the line containing the last ?&gt;
</t>
<t tx="edream.110203161858.1482">if match(s,i,"&lt;&lt;&lt;"):
	i = skip_heredoc_string(s,i)
else:
	i += 1
</t>
<t tx="edream.110203161858.1483">if match(s,i,"//"):
	i = skip_line(s,i)
elif match(s,i,"#"):
	i = skip_line(s,i)
elif match(s,i,"/*"):
	i = skip_block_comment(s,i)
else:
	i += 1</t>
<t tx="edream.110203161858.1484">@ In PHP, all functions are typeless and start with the keyword "function;  all classes start with the keyword class.

Functions can be nested, but we don't handle that right now (I don't think it is a common practice anyway).
@c
if match(s,i,"function "):
	#we want to make the function a subnode of either the @file node or a class node
	# 1. get the function name
	# 2. make a reference in the parent
	# 3. create the child node, and dump the function in it.
	function_start = i
	m = phpFunctionName.match(s[i:])
	if (None == m): # function keyword without function name
		i += len("function ")
	else:
		headline = angleBrackets(" function " + m.group(1) + " ")
		# find the end of the function
		openingBrace = s.find('{',i)
		function_end = skip_php_braces(s,openingBrace)
		function_end = skip_to_end_of_line(s,function_end - 1) + 1 # include the line end
		# Insert skipped text into parent's body.
		if class_start:
			class_body += s[scan_start:function_start]
		else:
			parent.appendStringToBody(s[scan_start:function_start])
		# Append the headline to the parent's body.
		if class_start:
			class_body += (headline + "\n")
		else:
			parent.appendStringToBody(headline + "\n")
		# Backup to capture leading whitespace (for undent purposes)
		while (function_start &gt; 0) and (s[function_start - 1] in [" ", "\t"]):
			function_start -= 1
		# Get the body and undent it
		function_body = s[function_start:function_end]
		function_body = self.undentBody(function_body)
		if self.treeType != "@file":
			function_body = "@code\n\n" + function_body
		# Create the new node
		if class_start:
			self.createHeadline(class_node,function_body,headline)
		else:
			self.createHeadline(parent,function_body,headline)
		i = function_end
		scan_start = i
		function_end = 0
		function_start = 0 #done with this function
		function_body = ""
		
elif match(s,i,"class "):
	# we want to make the class a subnode of the @file node
	# 1. get the class name
	# 2. make a reference in the parent
	# 3. create the child node and dump the function in it
	class_start = i
	class_body = ""
	m = phpClassName.match(s[i:])
	if (None == m): # class keyword without class name
		i += len("class ")
	else:
		# Insert skipped text into parent's body.
		parent.appendStringToBody(s[scan_start:class_start])
		# create the headline name
		headline = angleBrackets(" class " + m.group(1) + " ")
		# find the place to start looking for methods (functions)
		openingBrace = s.find('{',i)
		# find the end of the class
		class_end = skip_php_braces(s,openingBrace)
		class_end = skip_to_end_of_line(s,class_end - 1) + 1 # include the line end
		# Append the headline to the parent's body.
		parent.appendStringToBody(headline + "\n")
		# Backup to capture leading whitespace (for undent purposes)
		while (class_start &gt; 0) and (s[class_start - 1] in [" ", "\t"]):
			class_start -= 1
		scan_start = class_start
		# Create the new node
		class_node = self.createHeadline(parent,"",headline)
		i = openingBrace
	
else:
	i += 1</t>
<t tx="edream.110203161858.1485"># Capture the rest of the body
class_body += s[scan_start:class_end]
# insert the class node's body
if self.treeType != "@file":
	class_body = "@code\n\n" + class_body
class_body = self.undentBody(class_body)
class_node.appendStringToBody(class_body)
# reset the indices
i = class_end
scan_start = i
class_end = 0
class_start = 0 #done with this class
class_body=""
</t>
<t tx="edream.110203161858.1486">parent.appendStringToBody(s[scan_start:endOfCode])
</t>
<t tx="edream.110203161858.1487"># Creates a child of parent for each C function definition seen.

def scanCText (self,s,parent):

	&lt;&lt; define scanCText vars &gt;&gt;
	while i &lt; len(s):
		# line = get_line(s,i) ; trace(`line`)
		ch = s[i]
		# These cases skip tokens.
		if ch == '/':
			&lt;&lt; handle possible C comments &gt;&gt;
		elif ch == '"' or ch == '\'':
			i = skip_string(s,i)
		# These cases help determine where functions start.
		elif ch == '=':
			&lt;&lt; handle equal sign in C &gt;&gt;
		elif ch == '(':
			&lt;&lt; handle open paren in C &gt;&gt;
		elif ch == ';':
			&lt;&lt; handle semicolon in C &gt;&gt;
		# These cases and the default case can create child nodes.
		elif ch == '#':
			&lt;&lt; handle # sign &gt;&gt;
		elif ch == '{':
			&lt;&lt; handle open curly bracket in C &gt;&gt;
		elif is_c_id(ch):
			&lt;&lt; handle id, class, typedef, struct, union, namespace &gt;&gt;
		else: i += 1
	&lt;&lt; Append any unused text to the parent's body text &gt;&gt;</t>
<t tx="edream.110203161858.1488">c = self.commands
include_seen = method_seen = false
methodKind = choose(self.fileType==".c","functions","methods")
lparen = None   # Non-null if '(' seen at outer level.
scan_start = function_start = 0
name = None
i = 0</t>
<t tx="edream.110203161858.1489"># if statements may contain function definitions.
i += 1  # Skip the '#'
if not include_seen and match_c_word(s,i,"include"):
	include_seen = true
	&lt;&lt; create a child node for all #include statements &gt;&gt;
else:
	j = i
	i = skip_pp_directive(s,i)</t>
<t tx="edream.110203161858.1490"># Scan back to the start of the line.
include_start = i = find_line_start(s,i)

# Scan to the next line that is neither blank nor and #include.
i = skip_pp_directive(s,i)
i = skip_nl(s,i)
include_end = i
while i &lt; len(s):
	i = skip_ws_and_nl(s,i)
	if match_c_word(s,i,"#include"):
		i = skip_pp_directive(s,i)
		i = skip_nl(s,i)
		include_end = i
	elif i + 2 &lt; len(s) and s[i] == '\\':
		# Handle possible comment.
		if s[i+1] == '\\':
			i = skip_to_end_of_line(s,i)
		elif s[i+1] == '*':
			i = skip_block_comment(s,i + 2)
		else:
			i = include_end ; break
	else:
		i = include_end ; break
		

headline = angleBrackets(" " + self.methodName + " #includes ")
body = s[include_start:include_end]
body = self.undentBody(body)
prefix = choose(self.treeType == "@file","","@code\n\n")
self.createHeadline(parent,prefix + body,headline)
parent.appendStringToBody("@ignore\n" + self.rootLine + "@language c\n")

# Append any previous text to the parent's body.
save_ip = i ; i = scan_start
while i &lt; include_start and is_ws_or_nl(s,i):
	i += 1
if i &lt; include_start:
	parent.appendStringToBody(s[i:include_start])
scan_start = function_start = i = save_ip
# Append the headline to the parent's body.
parent.appendStringToBody(headline + "\n")</t>
<t tx="edream.110203161858.1491">j = i = skip_braces(s,i) # Skip all inner blocks.

# This may fail if #if's contain unmatched curly braces.
if (match(s,i,'}') and lparen and name and function_start):
	# Point i _after_ the last character of the function.
	i += 1
	if is_nl(s,i):
		i = skip_nl(s,i)
	function_end = i
	if method_seen:
		# Include everything after the last function.
		function_start = scan_start 
	else:
		&lt;&lt; create a declaration node &gt;&gt;
		&lt;&lt; append C function/method reference to parent node &gt;&gt;
	headline = name
	body = s[function_start:function_end]
	body = self.massageBody(body,"functions")
	self.createHeadline(parent,body,headline)
	
	method_seen = true
	scan_start = function_start = i # Set the start of the _next_ function.
	lparen = None
else:
	i += 1</t>
<t tx="edream.110203161858.1492">save_ip = i
i = scan_start
while i &lt; function_start and is_ws_or_nl(s,i):
	i += 1
if i &lt; function_start:
	headline = angleBrackets(" " + self.methodName + " declarations ")
	# Append the headline to the parent's body.
	parent.appendStringToBody(headline + "\n")
	decls = s[scan_start:function_start]
	decls = self.undentBody(decls)
	if self.treeType == "@file":
		body = decls
	else:
		body = "@code\n\n" + decls
	self.createHeadline(parent,body,headline)
i = save_ip
scan_start = i</t>
<t tx="edream.110203161858.1493">if self.treeType == "@file":
	parent.appendStringToBody("@others\n")
else:
	cweb = c.target_language == "cweb"
	lb = choose(cweb,"@&lt;","&lt;&lt;")
	rb = choose(cweb,"@&gt;","&gt;&gt;")
	parent.appendStringToBody(
		lb + " " + self.methodName + " " + methodKind + " " + rb + "\n")</t>
<t tx="edream.110203161858.1494">if match_c_word(s,i,"typedef"):
	i = skip_typedef(s,i)
	lparen = None
elif match_c_word(s,i,"struct"):
	i = skip_typedef(s,i)
	# lparen = None ;  # This can appear in an argument list.
elif match_c_word(s,i,"union"):
	i = skip_typedef(s,i)
	# lparen = None ;  # This can appear in an argument list.
elif match_c_word(s,i,"namespace"):
	&lt;&lt; create children for the namespace &gt;&gt;
# elif match_c_word(s,i,"class"):
	# &lt; &lt; create children for the class &gt; &gt;
else:
	# Remember the last name before an open parenthesis.
	if lparen == None:
		j = i ; i = skip_c_id(s,i) ; name = s[j:i]
	else:
		i = skip_c_id(s,i)
	&lt;&lt; test for operator keyword &gt;&gt;</t>
<t tx="edream.110203161858.1495">@ Namesspaces change the self.moduleName and recursively call self function with a text covering only the range of the namespace. This effectively changes the definition line of any created child nodes. The namespace is written to the top level.
@c

# skip the "namespace" keyword.
i += len("namespace")
i = skip_ws_and_nl(s,i)
# Skip the namespace name.
namespace_name_start = i
namespace_name_end = None
if i &lt; len(s) and is_c_id(s[i]):
	i = skip_c_id(s,i)
	namespace_name_end = i - 1
else: namespace_name_start = None
# Skip the '{'
i = skip_ws_and_nl(s,i)
if match(s,i,'{') and namespace_name_start:
	inner_ip = i + 1
	i = skip_braces(s,i)
	if match(s,i,'}'):
		# Append everything so far to the body.
		if inner_ip &gt; scan_start:
			parent.appendStringToBody(s[scan_start:inner_ip])
		# Save and change self.moduleName to namespaceName
		savedMethodName = self.methodName
		namespaceName = s[namespace_name_start:namespace_name_end]
		self.methodName = "namespace " + namespaceName
		# Recursively call this function .
		self.scanCText(s[inner_ip:],parent)
		# Restore self.moduleName and continue scanning.
		self.methodName = savedMethodName
		scan_start = function_start = i</t>
<t tx="edream.110203161858.1496"># We treat a C++ a construct such as operator + as a function name.
if match(name,0,"operator"):
	j = i
	i = skip_ws(s,i) # Don't allow newline in headline.
	if (i &lt; len(s) and not is_c_id(s[i]) and
		s[i]!=' ' and s[i]!='\n' and s[i]!='\r'):
		while (i &lt; len(s) and not is_c_id(s[i]) and
			s[i]!=' ' and s[i]!='\n' and s[i] != '\r'):
			i += 1
		name = s[j:i] # extend the name.</t>
<t tx="edream.110203161858.1497">if match(s,i,"//"):
	i = skip_line(s,i)
elif match(s,i,"/*"):
	i = skip_block_comment(s,i)
else:
	i += 1</t>
<t tx="edream.110203161858.1498">@ We can not be seeing a function definition when we find an equal sign at the top level. Equal signs inside parentheses are handled by the open paren logic.
@c

i += 1 # skip the '='
function_start = None # We can't be in a function.
lparen = None   # We have not seen an argument list yet.
if match(s,i,'='):
	i = skip_braces(s,i)</t>
<t tx="edream.110203161858.1499">lparen = i
# This will skip any equal signs inside the paren.
i = skip_parens(s,i)
if match(s,i,')'):
	i += 1
	i = skip_ws_and_nl(s,i)
	if match(s,i,';'):
		lparen = None # not a function definition.
else: lparen = None</t>
<t tx="edream.110203161858.1500">@ A semicolon signals the end of a declaration, thereby potentially starting the _next_ function defintion.   Declarations end a function definition unless we have already seen a parenthesis, in which case we are seeing an old-style function definition.
@c

i += 1 # skip the semicolon.
if lparen == None:
	function_start = i + 1 # The semicolon ends the declaration.</t>
<t tx="edream.110203161858.1501"># Used by C, Java and Pascal parsers.
# Do nothing if only whitespace is left.

i = skip_ws_and_nl(s,scan_start)
if i &lt; len(s):
	parent.appendStringToBody(s[scan_start:])</t>
<t tx="edream.110203161858.1502"># Creates a child of parent for each Java function definition seen.

def scanJavaText (self,s,parent,outerFlag): # true if at outer level.

	&lt;&lt; define scanJavaText vars &gt;&gt;
	# if not outerFlag: trace("inner:" + `s`)
	while i &lt; len(s):
		# trace(`get_line(s,i)`)
		ch = s[i]
		# These cases skip tokens.
		if ch == '/':
			&lt;&lt; handle possible Java comments &gt;&gt;
		elif ch == '"' or ch == '\'': i = skip_string(s,i)
		# These cases help determine where functions start.
		elif ch == '=':
			&lt;&lt; handle equal sign in Java &gt;&gt;
		elif ch == '(':
			&lt;&lt; handle open paren in Java &gt;&gt;
		elif ch == ';':
			&lt;&lt; handle semicolon in Java &gt;&gt;
			class_seen = false
		# These cases can create child nodes.
		elif ch == '{':
			&lt;&lt; handle open curly bracket in Java &gt;&gt;
		elif is_c_id(s[i]):
			&lt;&lt; skip and remember the Java id &gt;&gt;
		else: i += 1
	&lt;&lt; Append any unused text to the parent's body text &gt;&gt;</t>
<t tx="edream.110203161858.1503">method_seen = false
class_seen = false # true: class keyword seen at outer level.
interface_seen = false # true: interface keyword seen at outer level.
lparen = None  # not None if '(' seen at outer level.
scan_start = 0
name = None
function_start = 0 # choose(outerFlag, None, 0)
i = 0</t>
<t tx="edream.110203161858.1504">brace_ip1 = i
i = skip_braces(s,i) # Skip all inner blocks.
brace_ip2 = i

if not match (s,i,'}'):
	es("unmatched '{'")
elif not name:
	i += 1
elif (outerFlag and (class_seen or interface_seen)) or (not outerFlag and lparen):
	# trace("starting:"+name)
	# trace("outerFlag:"+`outerFlag`)
	# trace("lparen:"`lparen`)
	# trace("class_seen:"+`class_seen`)
	# trace("scan_start:"+get_line_after(s,scan_start))
	# trace("func_start:"+get_line_after(s,function_start))
	# trace("s:"+get_line(s,i))

	# Point i _after_ the last character of the method.
	i += 1
	if is_nl(s,i):
		i = skip_nl(s,i)
	function_end = i
	headline = name
	if outerFlag:
		leader = "" ; decl_leader = ""
		if class_seen:
			headline = "class " + headline
			methodKind = "classes"
		else:
			headline = "interface " + headline
			methodKind = "interfaces"
	else:
		leader = "\t" # Indent only inner references.
		decl_leader = "\n"  # Declaration leader for inner references.
		methodKind = "methods"
	if method_seen:
		# Include everything after the last fucntion.
		function_start = scan_start
	else:
		&lt;&lt; create a Java declaration node &gt;&gt;
		&lt;&lt; append Java method reference to parent node &gt;&gt;
	if outerFlag: # Create a class.
		# Backtrack so we remove leading whitespace.
		function_start = find_line_start(s,function_start)
		body = s[function_start:brace_ip1+1]
		body = self.massageBody(body,methodKind)
		v = self.createHeadline(parent,body,headline)
		&lt;&lt; recursively scan the text &gt;&gt;
		# Append the brace to the parent.
		v.appendStringToBody("}")
		i = brace_ip2 + 1 # Start after the closing brace.
	else: # Create a method.
		# Backtrack so we remove leading whitespace.
		function_start = find_line_start(s,function_start)
		body = s[function_start:function_end]
		body = self.massageBody(body,methodKind)
		self.createHeadline(parent,body,headline)
		i = function_end
	method_seen = true
	scan_start = function_start = i # Set the start of the _next_ function.
	lparen = None ; class_seen = false
else: i += 1</t>
<t tx="edream.110203161858.1505">save_ip = i
i = scan_start
while i &lt; function_start and is_ws_or_nl(s,i):
	i += 1
	
if outerFlag:
	parent.appendStringToBody("@ignore\n" + self.rootLine + "@language java\n")

if i &lt; function_start:
	decl_headline = angleBrackets(" " + self.methodName + " declarations ")

	# Append the headline to the parent's body.
	parent.appendStringToBody(decl_leader + leader + decl_headline + "\n")
	scan_start = find_line_start(s,scan_start) # Backtrack so we remove leading whitespace.
	decls = s[scan_start:function_start]
	decls = self.undentBody(decls)
	body = choose(self.treeType == "@file",decls,"@code\n\n" + decls)
	self.createHeadline(parent,body,decl_headline)

i = save_ip
scan_start = i</t>
<t tx="edream.110203161858.1506">if self.treeType == "@file":
	if outerFlag:
		parent.appendStringToBody("\n@others\n")
	else:
		parent.appendStringToBody("\n\t@others\n")
else:
	kind = choose(outerFlag,"classes","methods")
	ref_name = angleBrackets(" " + self.methodName + " " + kind + " ")
	parent.appendStringToBody(leader + ref_name + "\n")</t>
<t tx="edream.110203161858.1507"># These mark the points in the present function.
# trace("recursive scan:" + `get_line(s,brace_ip1+ 1)`)
oldMethodName = self.methodName
self.methodName = headline
self.scanJavaText(s[brace_ip1+1:brace_ip2], # Don't include either brace.
	v,false) # inner level
self.methodName = oldMethodName
</t>
<t tx="edream.110203161858.1508">if match_c_word(s,i,"class") or match_c_word(s,i,"interface"):
	if match_c_word(s,i,"class"):
		class_seen = true
	else:
		interface_seen = true
	i = skip_c_id(s,i) # Skip the class or interface keyword.
	i = skip_ws_and_nl(s,i)
	if i &lt; len(s) and is_c_id(s[i]):
		# Remember the class or interface name.
		j = i ; i = skip_c_id(s,i) ; name = s[j:i]
else:
	j = i ; i = skip_c_id(s,i)
	if not lparen and not class_seen:
		name = s[j:i] # Remember the name.</t>
<t tx="edream.110203161858.1509">if match(s,i,"//"):
	i = skip_line(s,i)
elif match(s,i,"/*"):
	i = skip_block_comment(s,i)
else:
	i += 1</t>
<t tx="edream.110203161858.1510">@ We can not be seeing a function definition when we find an equal sign at the top level. Equal signs inside parentheses are handled by the open paren logic.
@c

i += 1 # skip the '='
function_start = 0 # 3/23/03: (bug fix: was None) We can't be in a function.
lparen = None   # We have not seen an argument list yet.
if match(s,i,'='):
	i = skip_braces(s,i)</t>
<t tx="edream.110203161858.1511">lparen = i
# This will skip any equal signs inside the paren.
i = skip_parens(s,i)
if match(s,i,')'):
	i += 1
	i = skip_ws_and_nl(s,i)
	if match(s,i,';'):
		lparen = None # not a function definition.
else: lparen = None</t>
<t tx="edream.110203161858.1512">@ A semicolon signals the end of a declaration, thereby potentially starting the _next_ function defintion.   Declarations end a function definition unless we have already seen a parenthesis, in which case we are seeing an old-style function definition.
@c

i += 1 # skip the semicolon.
if lparen == None:
	function_start = i + 1 # The semicolon ends the declaration.</t>
<t tx="edream.110203161858.1513"># Creates a child of parent for each Pascal function definition seen.

def scanPascalText (self,s,parent):

	method_seen = false ; methodKind = "methods"
	scan_start = function_start = i = 0
	name = None
	while i &lt; len(s):
		# line = get_line(s,i) ; trace(`line`)
		ch = s[i]
		if ch == '{': i = skip_pascal_braces(s,i)
		elif ch == '"' or ch == '\'': i = skip_pascal_string(s,i)
		elif match(s,i,"//"): i = skip_to_end_of_line(s,i)
		elif match(s,i,"(*"): i = skip_pascal_block_comment(s,i)
		elif is_c_id(s[i]):
			&lt;&lt; handle possible Pascal function &gt;&gt;
		else: i += 1
	&lt;&lt; Append any unused text to the parent's body text &gt;&gt;</t>
<t tx="edream.110203161858.1514">if match_c_word(s,i,"begin"):
	i = skip_pascal_begin_end(s,i)
	if match_c_word(s,i,"end"):
		i = skip_c_id(s,i)
elif (match_c_word(s,i,"function")  or match_c_word(s,i,"procedure") or
	match_c_word(s,i,"constructor") or match_c_word(s,i,"destructor")):

	# line = get_line(s,i) ; trace(`line`)
	
	start = i
	i = skip_c_id(s,i)
	i = skip_ws_and_nl(s,i)
	&lt;&lt; remember the function name, or continue &gt;&gt;
	&lt;&lt; skip the function definition, or continue &gt;&gt;
	if not method_seen:
		method_seen = true
		&lt;&lt; create a child node for leading declarations &gt;&gt;
		&lt;&lt; append noweb method reference to the parent node &gt;&gt;
		function_start = start
	else: function_start = scan_start
	&lt;&lt; create a child node for the function &gt;&gt;
else: i = skip_c_id(s,i)</t>
<t tx="edream.110203161858.1515">save_ip = i
i = scan_start
while i &lt; start and is_ws_or_nl(s,i):
	i += 1
if i &lt; start:
	parent.appendStringToBody("@ignore\n" + self.rootLine + "@language pascal\n")
	headline = angleBrackets(self.methodName + " declarations ")
	# Append the headline to the parent's body.
	parent.appendStringToBody(headline + "\n")
	if self.treeType == "@file":
		body = s[scan_start:start]
	else:
		body = "@code\n\n" + s[scan_start:start]
	body = self.undentBody(body)
	self.createHeadline(parent,body,headline)
i = save_ip
scan_start = i</t>
<t tx="edream.110203161858.1516"># Point i _after_ the last character of the function.
i = skip_ws(s,i)
if is_nl(s,i):
	i = skip_nl(s,i)
function_end = i
headline = name
body = s[function_start:function_end]
body = self.massageBody(body,methodKind)
self.createHeadline(parent,body,headline)
scan_start = i</t>
<t tx="edream.110203161858.1517">if i &lt; len(s) and is_c_id(s[i]):
	j = i ; i = skip_c_id(s,i)
	while i + 1 &lt; len(s) and s[i] == '.' and is_c_id(s[i+1]):
		i += 1 ; j = i
		i = skip_c_id(s,i)
	name = s[j:i]
else: continue</t>
<t tx="edream.110203161858.1518">&lt;&lt; skip past the semicolon &gt;&gt;

if not match_c_word(s,i,"begin"):
	continue
# Skip to the matching end.
i = skip_pascal_begin_end(s,i)
if match_c_word(s,i,"end"):
	i = skip_c_id(s,i)
	i = skip_ws_and_nl(s,i)
	if match(s,i,';'):
		i += 1
	i = skip_ws(s,i)
	if is_nl(s,i):
		i = skip_nl(s,i)
else: continue</t>
<t tx="edream.110203161858.1519">while i &lt; len(s) and s[i] != ';':
	# The paremeter list may contain "inner" semicolons.
	if s[i] == '(':
		i = skip_parens(s,i)
		if match(s,i,')'):
			i += 1
		else: break
	else: i += 1
if match(s,i,';'):
	i += 1
i = skip_ws_and_nl(s,i)

if match_c_word(s,i,"var"):
	# Skip to the next begin.
	i = skip_c_id(s,i)
	done = false
	while i &lt; len(s) and not done:
		ch = s[i]
		if ch == '{': i = skip_pascal_braces(s,i)
		elif match(s,i,"//"): i = skip_to_end_of_line(s,i)
		elif match(s,i,"(*"): i = skip_pascal_block_comment(s,i)
		elif is_c_id(ch):
			if match_c_word(s,i,"begin"): done = true
			else: i = skip_c_id(s,i)
		elif ch == '"' or ch == '\'': i = skip_pascal_string(s,i)
		else: i += 1</t>
<t tx="edream.110203161858.1520"># Append the headline to the parent's body.
if self.treeType == "@file":
	parent.appendStringToBody("@others\n")
else:
	parent.appendStringToBody(
		angleBrackets(" " + self.methodName + " methods ") + "\n")</t>
<t tx="edream.110203161858.1521"></t>
<t tx="edream.110203161858.1522">@ Headlines not containing a section reference are ignored in noweb and generate index index in cweb.
@c

def convertCodePartToWeb (self,s,i,v,result):

	# line = get_line(s,i) ; trace(`line`)
	c = self.commands ; nl = self.output_newline
	lb = choose(self.webType=="cweb","@&lt;","&lt;&lt;")
	rb = choose(self.webType=="cweb","@&gt;","&gt;&gt;")
	h = string.strip(v.headString())
	&lt;&lt; put v's headline ref in head_ref &gt;&gt;
	&lt;&lt; put name following @root or @file in file_name &gt;&gt;
	if match_word(s,i,"@root"):
		i = skip_line(s,i)
		&lt;&lt; append ref to file_name &gt;&gt;
	elif match_word(s,i,"@c") or match_word(s,i,"@code"):
		i = skip_line(s,i)
		&lt;&lt; append head_ref &gt;&gt;
	elif match_word(h,0,"@file"):
		# Only do this if nothing else matches.
		&lt;&lt; append ref to file_name &gt;&gt;
		i = skip_line(s,i) # 4/28/02
	else:
		&lt;&lt; append head_ref &gt;&gt;
	i,result = self.copyPart(s,i,result)
	return i, string.strip(result) + nl
	
@ %defs a b c
</t>
<t tx="edream.110203161858.1523">@ We look for either noweb or cweb brackets. head_ref does not include these brackets.
@c

head_ref = None
j = 0
if match(h,j,"&lt;&lt;"):
	k = string.find(h,"&gt;&gt;",j)
elif match(h,j,"&lt;@"):
	k = string.find(h,"@&gt;",j)
else:
	k = -1

if k &gt; -1:
	head_ref = string.strip(h[j+2:k])
	if len(head_ref) == 0:
		head_ref = None</t>
<t tx="edream.110203161858.1524">if match(h,0,"@file") or match(h,0,"@root"):
	line = h[5:]
	line = string.strip(line)
	&lt;&lt; set file_name &gt;&gt;
else:
	file_name = line = None
</t>
<t tx="edream.110203161858.1525"># set j &amp; k so line[j:k] is the file name.
# trace(`line`)

if match(line,0,"&lt;"):
	j = 1 ; k = string.find(line,"&gt;",1)
elif match(line,0,'"'):
	j = 1 ; k = string.find(line,'"',1)
else:
	j = 0 ; k = string.find(line," ",0)
if k == -1:
	k = len(line)

file_name = string.strip(line[j:k])
if file_name and len(file_name) == 0:
	file_name = None</t>
<t tx="edream.110203161858.1526">if self.webType == "cweb":
	if not file_name:
		result += "@&lt;root@&gt;=" + nl
	else:
		result += "@(" + file_name + "@&gt;" + nl # @(...@&gt; denotes a file.
else:
	if not file_name:
		file_name = "*"
	result += lb + file_name + rb + "=" + nl
</t>
<t tx="edream.110203161858.1527">if self.webType == "cweb":
	if not head_ref:
		result += "@^" + h + "@&gt;" + nl # Convert the headline to an index entry.
		result += "@c" + nl # @c denotes a new section.
	else: 
		escaped_head_ref = string.replace(head_ref,"@","@@")
		result += "@&lt;" + escaped_head_ref + "@&gt;=" + nl
else:
	if not head_ref:
		if v == c.currentVnode():
			head_ref = choose(file_name,file_name,"*")
		else:
			head_ref = "@others"

	result += lb + head_ref + rb + "=" + nl</t>
<t tx="edream.110203161858.1528">def convertDocPartToWeb (self,s,i,result):
	
	nl = self.output_newline

	# line = get_line(s,i) ; trace(`line`)
	if match_word(s,i,"@doc"):
		i = skip_line(s,i)
	elif match(s,i,"@ ") or match(s,i,"@\t") or match(s,i,"@*"):
		i += 2
	elif match(s,i,"@\n"):
		i += 1
	i = skip_ws_and_nl(s,i)
	i, result2 = self.copyPart(s,i,"")
	if len(result2) &gt; 0:
		# Break lines after periods.
		result2 = string.replace(result2,".  ","." + nl)
		result2 = string.replace(result2,". ","." + nl)
		result += nl+"@"+nl+string.strip(result2)+nl+nl
	else:
		# All nodes should start with '@', even if the doc part is empty.
		result += choose(self.webType=="cweb",nl+"@ ",nl+"@"+nl)
	return i, result</t>
<t tx="edream.110203161858.1529">@ This code converts a vnode to noweb text as follows:

Convert @doc to @
Convert @root or @code to &lt;&lt; name &gt;&gt;=, assuming the headline contains &lt;&lt; name &gt;&gt;
Ignore other directives
Format doc parts so they fit in pagewidth columns.
Output code parts as is.
@c

def convertVnodeToWeb (self,v):

	if not v: return ""
	startInCode = not app().config.at_root_bodies_start_in_doc_mode
	nl = self.output_newline
	s = v.bodyString()
	lb = choose(self.webType=="cweb","@&lt;","&lt;&lt;")
	i = 0 ; result = "" ; docSeen = false
	while i &lt; len(s):
		progress = i
		# line = get_line(s,i) ; trace(`line`)
		i = skip_ws_and_nl(s,i)
		if self.isDocStart(s,i) or match_word(s,i,"@doc"):
			i,result = self.convertDocPartToWeb(s,i,result)
			docSeen = true
		elif (match_word(s,i,"@code") or match_word(s,i,"@root") or
			match_word(s,i,"@c") or match(s,i,lb)):
			&lt;&lt; Supply a missing doc part &gt;&gt;
			i,result = self.convertCodePartToWeb(s,i,v,result)
		elif self.treeType == "@file" or startInCode:
			&lt;&lt; Supply a missing doc part &gt;&gt;
			i,result = self.convertCodePartToWeb(s,i,v,result)
		else:
			i,result = self.convertDocPartToWeb(s,i,result)
			docSeen = true
		assert(progress &lt; i)
	result = string.strip(result)
	if len(result) &gt; 0:
		result += nl
	return result</t>
<t tx="edream.110203161858.1530">if not docSeen:
	docSeen = true
	result += choose(self.webType=="cweb",nl+"@ ",nl+"@"+nl)</t>
<t tx="edream.110203161858.1531"># Copies characters to result until the end of the present section is seen.

def copyPart (self,s,i,result):

	# line = get_line(s,i) ; trace(`line`)
	lb = choose(self.webType=="cweb","@&lt;","&lt;&lt;")
	rb = choose(self.webType=="cweb","@&gt;","&gt;&gt;")
	type = self.webType
	while i &lt; len(s):
		progress = j = i # We should be at the start of a line here.
		# line = get_line(s,i) ; trace(`line`)
		i = skip_nl(s,i) ; i = skip_ws(s,i)
		if self.isDocStart(s,i):
			return i, result
		if (match_word(s,i,"@doc") or
			match_word(s,i,"@c") or
			match_word(s,i,"@root") or
			match_word(s,i,"@code")): # 2/25/03
			return i, result
		elif (match(s,i,"&lt;&lt;") and # must be on separate lines.
			find_on_line(s,i,"&gt;&gt;=") &gt; -1):
			return i, result
		else:
			# Copy the entire line, escaping '@' and
			# Converting @others to &lt; &lt; @ others &gt; &gt;
			i = skip_line(s,j) ; line = s[j:i]
			if type == "cweb":
				line = string.replace(line,"@","@@")
			else:
				j = skip_ws(line,0)
				if match(line,j,"@others"):
					line = string.replace(line,"@others",lb + "@others" + rb)
				elif match(line,0,"@"):
					# Special case: do not escape @ %defs.
					k = skip_ws(line,1)
					if not match(line,k,"%defs"):
						line = "@" + line
			result += line
		assert(progress &lt; i)
	return i, string.rstrip(result)</t>
<t tx="edream.110203161858.1532">def exportHeadlines (self,fileName):
	
	c = self.commands ; v = c.currentVnode()
	nl = self.output_newline
	if not v: return
	self.setEncoding()
	after = v.nodeAfterTree()
	firstLevel = v.level()
	try:
		mode = app().config.output_newline
		mode = choose(mode=="platform",'w','wb')
		file = open(fileName,mode)
		while v and v != after:
			head = v.moreHead(firstLevel,useVerticalBar=true)
			head = toEncodedString(head,self.encoding,reportErrors=true)
			file.write(head + nl)
			v = v.threadNext()
		file.close()
	except:
		es("exception while exporting headlines")
		es_exception()</t>
<t tx="edream.110203161858.1533">def flattenOutline (self,fileName):

	c = self.commands ; v = c.currentVnode()
	nl = self.output_newline
	if not v: return
	self.setEncoding()
	after = v.nodeAfterTree()
	firstLevel = v.level()
	try:
		# 10/14/02: support for output_newline setting.
		mode = app().config.output_newline
		mode = choose(mode=="platform",'w','wb')
		file = open(fileName,mode)
		while v and v != after:
			head = v.moreHead(firstLevel)
			head = toEncodedString(head,self.encoding,reportErrors=true)
			file.write(head + nl)
			body = v.moreBody() # Inserts escapes.
			if len(body) &gt; 0:
				body = toEncodedString(body,self.encoding,reportErrors=true)
				file.write(body + nl)
			v = v.threadNext()
		file.close()
	except:
		es("exception while flattening outline")
		es_exception()</t>
<t tx="edream.110203161858.1534">def outlineToWeb (self,fileName,webType):

	c = self.commands ; v = c.currentVnode()
	nl = self.output_newline
	if v == None: return
	self.setEncoding()
	self.webType = webType
	after = v.nodeAfterTree()
	try: # This can fail if the file is open by another app.
		# 10/14/02: support for output_newline setting.
		mode = app().config.output_newline
		mode = choose(mode=="platform",'w','wb')
		file = open(fileName,mode)
		self.treeType = "@file"
		# Set self.treeType to @root if v or an ancestor is an @root node.
		while v:
			flag, junk = is_special(v.bodyString(),0,"@root")
			if flag:
				self.treeType = "@root" ; break
			else: v = v.parent()
		v = c.currentVnode()
		while v and v != after:
			s = self.convertVnodeToWeb(v)
			if len(s) &gt; 0:
				s = toEncodedString(s,self.encoding,reportErrors=true)
				file.write(s)
				if s[-1] != '\n':
					file.write(nl)
			v = v.threadNext()
		file.close()
	except:
		es("exception in Outline To noweb command")
		es_exception()</t>
<t tx="edream.110203161858.1535">def removeSentinelsCommand (self,fileName):

	self.setEncoding()
	path, self.fileName = os.path.split(fileName) # path/fileName
	# trace(`self.fileName`)
	&lt;&lt; Read file into s &gt;&gt;
	valid = true
	line_delim = start_delim = end_delim = None
	&lt;&lt; set delims from the header line &gt;&gt;
	if valid == false:
		es("invalid @+leo sentinel in " + fileName)
	else:
		if 0:
			trace("line:"+`line_delim`+","+
				"start:"+`start_delim`+","+
				"end:"+`end_delim`)
		s = self.removeSentinelLines(s,line_delim,start_delim,end_delim)
		ext = app().config.remove_sentinels_extension
		if ext == None or len(ext) == 0:
			ext = ".txt"
		if ext[0] == '.':
			newFileName = os.path.join(path,fileName+ext)
		else:
			head,ext2 = os.path.splitext(fileName) 
			newFileName = os.path.join(path,head+ext+ext2)
		# newFileName = os.path.join(path,fileName+".txt") # 8/4/02: use txt, not tmp.
		&lt;&lt; Write s into newFileName &gt;&gt;</t>
<t tx="edream.110203161858.1536">try:
	file = open(fileName)
	s = file.read()
	s = toUnicode(s,self.encoding)
	file.close()
except:
	es("exception while reading " + fileName)
	es_exception()
	return</t>
<t tx="edream.110203161858.1537">@ This code is similar to atFile::scanHeader.
@c

tag = "@+leo"
# Skip any non @+leo lines.
i = 0
while i &lt; len(s) and not find_on_line(s,i,tag):
	i = skip_line(s,i)
# We should be at the @+leo line.
i = j = skip_ws(s,i)
# The opening comment delim is the initial non-whitespace.
while i &lt; len(s) and not match(s,i,tag) and not is_ws(s[i]) and not is_nl(s,i):
	i += 1
if j &lt; i: line_delim = s[j:i]
else: valid = false
# Make sure we have @+leo
i = skip_ws(s,i)
if match(s,i,tag): i += len(tag)
else: valid = false
# The closing comment delim is the trailing non-whitespace.
i = j = skip_ws(s,i)
while i &lt; len(s) and not is_ws(s[i]) and not is_nl(s,i):
	i += 1
if j &lt; i:
	start_delim = line_delim
	end_delim = s[j:i]
	line_delim = None</t>
<t tx="edream.110203161858.1538">try:
	# 10/14/02: support for output_newline setting.
	mode = app().config.output_newline
	mode = choose(mode=="platform",'w','wb')
	file = open(newFileName,mode)
	s = toEncodedString(s,self.encoding,reportErrors=true)
	file.write(s)
	file.close()
	es("creating: " + newFileName)
except:
	es("exception creating: " + newFileName)
	es_exception()</t>
<t tx="edream.110203161858.1539">@ Properly removes all sentinel lines in s.  Only leading single-line comments may be sentinels.

line_delim, start_delim and end_delim are the comment delimiters.
@c

def removeSentinelLines(self,s,line_delim,start_delim,end_delim):

	i = 0 ; result = "" ; first = true
	while i &lt; len(s):
		start = i # The start of the next syntax element.
		if first or is_nl(s,i):
			first = false
			&lt;&lt; handle possible sentinel &gt;&gt;
		elif match(s,i,line_delim):
			i = skip_to_end_of_line(s,i)
		elif match(s,i,start_delim):
			i = skip_matching_delims(s,i,start_delim,end_delim)
		elif match(s,i,"'") or match(s,i,'"'):
			i = skip_string(s,i)
		else:
			i += 1
		assert(i==0 or start&lt;i)
		result += s[start:i]
	return result</t>
<t tx="edream.110203161858.1540">i = skip_nl(s,i)
i = skip_ws(s,i)

if line_delim:
	if match(s,i,line_delim):
		j = i + len(line_delim)
		i = skip_to_end_of_line(s,i)
		if match(s,j,"@"):
			continue # Remove the sentinel.
elif start_delim:
	if match(s,i,start_delim):
		j = i + len(start_delim)
		i = skip_matching_delims(s,i,start_delim,end_delim)
		if match(s,j,"@"):
			continue # Remove the sentinel.</t>
<t tx="edream.110203161858.1541">def weave (self,filename):
	
	c = self.commands ; v = c.currentVnode()
	nl = self.output_newline
	if not v: return
	self.setEncoding()
	&lt;&lt; open filename to f, or return &gt;&gt;
	after = v.nodeAfterTree()
	while v and v != after:
		s = v.bodyString()
		s2 = string.strip(s)
		if s2 and len(s2) &gt; 0:
			f.write("-" * 60) ; f.write(nl)
			&lt;&lt; write the context of v to f &gt;&gt;
			f.write("-" * 60) ; f.write(nl)
			s = toEncodedString(s,self.encoding,reportErrors=true) # 2/25/03
			f.write(string.rstrip(s) + nl)
		v = v.threadNext()
	f.flush()
	f.close()</t>
<t tx="edream.110203161858.1542">try:
	# 10/14/02: support for output_newline setting.
	mode = app().config.output_newline
	mode = choose(mode=="platform",'w','wb')
	f = open(filename,mode)
	if not f: return
except:
	es("exception opening:" + filename)
	es_exception()
	return</t>
<t tx="edream.110203161858.1543"># write the headlines of v, v's parent and v's grandparent.
context = [] ; v2 = v
for i in xrange(3):
	if not v2: break
	context.append(v2.headString())
	v2 = v2.parent()

context.reverse()
indent = ""
for line in context:
	f.write(indent)
	indent += '\t'
	line = toEncodedString(line,self.encoding,reportErrors=true)
	f.write(line)
	f.write(nl)
</t>
<t tx="edream.110203161858.1544"></t>
<t tx="edream.110203161858.1545">def createHeadline (self,parent,body,headline):

	# trace("parent,headline:" + `parent` + ":" + `headline`)
	# Create the vnode.
	v = parent.insertAsLastChild()
	v.initHeadString(headline,self.encoding)
	# Set the body.
	if len(body) &gt; 0:
		v.setBodyStringOrPane(body,self.encoding)
	return v</t>
<t tx="edream.110203161858.1546">def error (self,s): es(s)</t>
<t tx="edream.110203161858.1547">@ This code returns the leading whitespace of a line, ignoring blank and comment lines.
@c

def getLeadingIndent (self,s,i):

	c = self.commands
	i = find_line_start(s,i)
	while i &lt; len(s):
		# trace(`get_line(s,i)`)
		j = skip_ws(s,i) # Bug fix: 2/14/03
		if is_nl(s,j) or match(s,j,"#"): # Bug fix: 2/14/03
			i = skip_line(s,i) # ignore blank lines and comment lines.
		else:
			i, width = skip_leading_ws_with_indent(s,i,c.tab_width)
			# trace("returns:" + `width`)
			return width
	# trace("returns:0")
	return 0</t>
<t tx="edream.110203161858.1548"># The start of a document part or module in a noweb or cweb file.
# Exporters may have to test for @doc as well.

def isDocStart (self,s,i):
	
	if not match(s,i,"@"):
		return false

	j = skip_ws(s,i+1)
	if match(s,j,"%defs"):
		return false
	elif self.webType == "cweb" and match(s,i,"@*"):
		return true
	else:
		return match(s,i,"@ ") or match(s,i,"@\t") or match(s,i,"@\n")

def isModuleStart (self,s,i):

	if self.isDocStart(s,i):
		return true
	else:
		return self.webType == "cweb" and (
			match(s,i,"@c") or match(s,i,"@p") or
			match(s,i,"@d") or match(s,i,"@f"))
</t>
<t tx="edream.110203161858.1549">def massageBody (self,s,methodKind):
	
	# trace(`s`)
	# trace(`get_line(s,0)`)
	c = self.commands
	if self.treeType == "@file":
		if self.fileType == ".py": # 7/31/02: was "py"
			return self.undentBody(s)
		else:
			newBody, comment = self.skipLeadingComments(s)
			newBody = self.undentBody(newBody)
			newLine = choose(is_nl(newBody,0),"\n","\n\n")
			if len(comment) &gt; 0:
				return comment + "\n@c" + newLine + newBody
			else:
				return newBody
	else:
		# Inserts &lt; &lt; self.methodName methodKind &gt; &gt; =
		cweb = self.fileType == "c" and not c.use_noweb_flag
		lb = choose(cweb,"@&lt;","&lt;&lt;")
		rb = choose(cweb,"@&gt;=","&gt;&gt;=")
		intro = lb + " " + self.methodName + " " + methodKind + " " + rb
		if self.fileType == ".py": # 7/31/02: was "py"
			newBody = self.undentBody(s)
			newLine = choose(is_nl(newBody,0),"\n","\n\n")
			return intro + newLine + newBody
		else:
			newBody, comment = self.skipLeadingComments(s)
			newBody = self.undentBody(newBody)
			newLine = choose(is_nl(newBody,0),"\n","\n\n")
			if len(comment) &gt; 0:
				return comment + "\n" + intro + newLine + newBody
			else:
				return intro + newLine + newBody</t>
<t tx="edream.110203161858.1550">@ Returns s with all runs of whitespace and newlines converted to a single blank.  It also removes leading and trailing whitespace.
@c

def massageComment (self,s):

	# trace(`get_line(s,0)`)
	s = string.strip(s)
	s = string.replace(s,"\n"," ")
	s = string.replace(s,"\r"," ")
	s = string.replace(s,"\t"," ")
	s = string.replace(s,"  "," ")
	s = string.strip(s)
	return s</t>
<t tx="edream.110203161858.1551">def massageWebBody (self,s):

	type = self.webType
	lb = choose(type=="cweb","@&lt;","&lt;&lt;")
	rb = choose(type=="cweb","@&gt;","&gt;&gt;")
	&lt;&lt; Remove most newlines from @space and @* sections &gt;&gt;
	&lt;&lt; Replace abbreviated names with full names &gt;&gt;
	s = string.rstrip(s)
	return s</t>
<t tx="edream.110203161858.1552">i = 0
while i &lt; len(s):
	i = skip_ws_and_nl(s,i)
	if self.isDocStart(s,i):
		# Scan to end of the doc part.
		if match(s,i,"@ %def"):
			# Don't remove the newline following %def
			i = skip_line(s,i) ; start = end = i
		else:
			start = end = i ; i += 2
		while i &lt; len(s):
			i = skip_ws_and_nl(s,i)
			if self.isModuleStart(s,i) or match(s,i,lb):
				end = i ; break
			elif type == "cweb": i += 1
			else: i = skip_to_end_of_line(s,i)
		# Remove newlines from start to end.
		doc = s[start:end]
		doc = string.replace(doc,"\n"," ")
		doc = string.replace(doc,"\r","")
		doc = string.strip(doc)
		if doc and len(doc) &gt; 0:
			if doc == "@":
				doc = choose(self.webType=="cweb", "@ ","@\n")
			else:
				doc += "\n\n"
			# trace("new doc:" + `doc`)
			s = s[:start] + doc + s[end:]
			i = start + len(doc)
	else: i = skip_line(s,i)</t>
<t tx="edream.110203161858.1553">i = 0
while i &lt; len(s):
	# trace(`get_line(s,i)`)
	if match(s,i,lb):
		i += 2 ; j = i ; k = find_on_line(s,j,rb)
		if k &gt; -1:
			name = s[j:k]
			name2 = self.cstLookup(name)
			if name != name2:
				# Replace name by name2 in s.
				# trace("replacing:" + `name` + ", by:" + `name2`)
				s = s[:j] + name2 + s[k:]
				i = j + len(name2)
	i = skip_line(s,i)</t>
<t tx="edream.110203161858.1554">def setEncoding (self):
	
	# scanDirectives checks the encoding: may return None.
	dict = scanDirectives(self.commands)
	encoding = dict.get("encoding")
	if encoding and isValidEncoding(encoding):
		self.encoding = encoding
	else:
		self.encoding = app().tkEncoding # 2/25/03

	# print self.encoding
</t>
<t tx="edream.110203161858.1555">@ This skips all leading comments in s, returning the remaining body text and the massaged comment text.
Returns (body, comment)
@c

def skipLeadingComments (self,s):

	# trace(`get_line(s,0)`)
	s_original = s
	s = string.lstrip(s)
	i = 0 ; comment = ""
	if self.fileType in [".c", ".cpp"]: # 11/2/02: don't mess with java comments.
		&lt;&lt; scan for C-style comments &gt;&gt;
	elif self.fileType == ".pas":
		&lt;&lt; scan for Pascal comments &gt;&gt;
	elif self.fileType == ".py":
		&lt;&lt; scan for Python comments &gt;&gt;
	comment = string.strip(comment)
	if len(comment) == 0:
		return s_original, "" # Bug fix: 11/2/02: don't skip leading whitespace!
	elif self.treeType == "@file":
		return s[i:], "@ " + comment
	else:
		return s[i:], "@ " + comment + "\n"</t>
<t tx="edream.110203161858.1556">while i &lt; len(s):
	if match(s,i,"//"): # Handle a C++ comment.
		while match(s,i,'/'):
			i += 1
		j = i ; i = skip_line(s,i)
		comment = comment + self.massageComment(s[j:i]) + "\n"
		# 8/2/02: Preserve leading whitespace for undentBody
		i = skip_ws(s,i)
		i = skip_blank_lines(s,i)
	elif match(s,i,"/*"): # Handle a block C comment.
		j = i + 2 ; i = skip_block_comment (s,i)
		k = choose(match(s,i-2,"*/"),i-2,i)
		if self.fileType == ".java":
			# 8/2/02: a hack: add leading whitespace then remove it.
			comment = self.undentBody(comment)
			comment2 = ' ' * 2 + s[j:k]
			comment2 = self.undentBody(comment2)
			comment = comment + comment2 + "\n"
		else:
			comment = comment + self.massageComment(s[j:k]) + "\n"
		# 8/2/02: Preserve leading whitespace for undentBody
		i = skip_ws(s,i)
		i = skip_blank_lines(s,i)
	else: break</t>
<t tx="edream.110203161858.1557">while i &lt; len(s):
	if match(s,i,"//"): # Handle a Pascal line comment.
		while match(s,i,'/'):
			i += 1
		j = i ; i = skip_line(s,i)
		comment = comment + self.massageComment(s[j:i]) + "\n"
		# 8/2/02: Preserve leading whitespace for undentBody
		i = skip_ws(s,i)
		i = skip_blank_lines(s,i)
	elif match(s,i,'(*'):
		j = i + 1 ; i = skip_pascal_block_comment(s,i)
		comment = comment + self.massageComment(s[j:i]) + "\n"
		# 8/2/02: Preserve leading whitespace for undentBody
		i = skip_ws(s,i)
		i = skip_blank_lines(s,i)
	else: break</t>
<t tx="edream.110203161858.1558">while i &lt; len(s) and match(s,i,'#'):
	j = i + 1 ; i = skip_line(s,i)
	comment = self.undentBody(comment)
	comment = comment + self.massageComment(s[j:i]) + "\n"
	# 8/2/02: Preserve leading whitespace for undentBody
	i = skip_ws(s,i)
	i = skip_blank_lines(s,i)</t>
<t tx="edream.110203161858.1559">@ Removes extra leading indentation from all lines.  We look at the first line to determine how much leading whitespace to delete.
@c

def undentBody (self,s):

	# trace(`s`)
	c = self.commands
	i = 0 ; result = ""
	# Copy an @code line as is.
	if match(s,i,"@code"):
		j = i ; i = skip_line(s,i) # don't use get_line: it is only for dumping.
		result += s[j:i]
	# Calculate the amount to be removed from each line.
	undent = self.getLeadingIndent(s,i)
	if undent == 0: return s
	while i &lt; len(s):
		j = i ; i = skip_line(s,i) # don't use get_line: it is only for dumping.
		line = s[j:i]
		# trace(`line`)
		line = removeLeadingWhitespace(line,undent,c.tab_width)
		result += line
	return result</t>
<t tx="edream.110203161858.1560">@language python

&lt;&lt; About the vnode and tnode classes &gt;&gt;
&lt;&lt; About clones &gt;&gt;

from leoGlobals import *
import time,types

@others</t>
<t tx="edream.110203161858.1561">@ This is the design document for clones in Leo. It covers all important aspects of clones. Clones are inherently complex, and this paper will include several different definitions of clones and related concepts.

The following is a definition of clones from the user's point of view.

Definition 1

A clone node is a copy of a node that changes when the original changes. Changes to the children, grandchildren, etc. of a node are simultaneously made to the corresponding nodes contained in all cloned nodes. Clones are marked by a small clone arrow by its leader character.

As we shall see, this definition glosses over a number of complications. Note that all cloned nodes (including the original node) are equivalent. There is no such thing as a "master" node from which all clones are derived. When the penultimate cloned node is deleted, the remaining node becomes an ordinary node again.

Internally, the clone arrow is represented by a clone bit in the status field of the vnode. The Clone Node command sets the clone bits of the original and cloned vnodes when it creates the clone. Setting and clearing clone bits properly when nodes are inserted, deleted or moved, is non-trivial. We need the following machinery to do the job properly.

Two vnodes are joined if a) they share the same tnode (body text) and b) changes to any subtree of either joined vnodes are made to the corresponding nodes in all joined nodes.  For example, Definition 1 defines clones as joined nodes that are marked with a clone arrow.  Leo links all vnodes joined to each other in a circular list, called the join list. For any vnode n, let J(n) denote the join list of n, that is, the set of all vnodes joined to n. Again, maintaining the join lists in an outline is non-trivial.

The concept of structurally similar nodes provides an effective way of determining when two joined nodes should also have their cloned bit set.  Two joined nodes are structurally similar if a) their parents are distinct but joined and b) they are both the nth child of their (distinct) parents.  We can define cloned nodes using the concept of structurally similar nodes as follows:

Definition 2

Clones are joined vnodes such that at least two of the vnodes of J(n) are not structurally similar to each other. Non-cloned vnodes are vnodes such that all of the vnodes of J(n) are structurally similar. In particular, n is a non-cloned vnode if J(n) is empty.

Leo ensures that definitions 1 and 2 are consistent. Definition 1 says that changes to the children, grandchildren, etc. of a node are simultaneously made to the corresponding nodes contained in all cloned nodes. Making "corresponding changes" to the non-cloned descendents of all cloned nodes insures that the non-cloned joined nodes will be structurally similar. On the other hand, cloned nodes are never structurally similar. They are created as siblings, so they have the same parent with different "child indices."  To see how this works in practice, let's look at some examples.

Example 1

+ root
	+ a' (1)
	+ a' (2)

This example shows the simplest possible clone. A prime (') indicates a cloned node.  Node a in position (1) has just been cloned to produce a' in position (2). Clearly, these two cloned nodes are not structurally similar because their parents are not distinct and they occupy different positions relative to their common parent.

Example 2

If we add a node b to either a' node we get the following tree:

+ root
	+ a'
		+ b
	+ a'
		+ b

The b nodes are structurally similar because the a' nodes are joined and each b node is the first child of its parent.

Example 3

If we now clone either b, we will get:

+ root
	+ a'
		+ b' (1)
		+ b' (2)
	+ a'
		+ b' (1)
		+ b' (2)

All b' nodes must be clones because the nodes marked (1) are not structurally similar to the nodes marked (2).

Dependent nodes are nodes created or destroyed when corresponding linked nodes are created or destroyed in another tree. For example, going from example 1 to example 2 above, adding node b to either node a' causes another (dependent) node to be created as the ancestor of the other node a'. Similarly, going from example 2 to example 1, deleting node b from either node a' causes the other (dependent) node b to be deleted from the other node a'.  Cloned nodes may also be dependent nodes. In Example 3, all the b' nodes are dependent on any of the other b' nodes.

We can now give simple rules for inserting and deleting dependent vnodes when other vnodes are created, moved or destroyed. For the purposes of this discussion, moving a node is handled exactly like deleting the node then inserting the node; we need not consider moving nodes further.  We insert a new node n as the nth child of a parent node p as follows. We insert n, then for every node pi linked to p, we insert a dependent node ni as the nth child of pi. Each ni is linked to n. Clearly, each ni is structurally similar to n.  Similarly, it is easy to delete a node n that is the nth child of a parent node p. We delete each dependent node ni that is the nth child of any node pi linked to p. We then delete n.  When inserting or deleting any vnode n we must update its join list, J(n). Updating the join list is easy because the join list is circular: the entire list is accessible from any of its members.

Inserting or deleting nodes can cause the clone bits of all joined nodes to change in non-trivial ways. To see the problems that can arise, consider deleting any of the b' nodes from Example 3. We would be left with the tree in Example 2. There are two remaining b nodes, each with the clone bit set. Unless we know that both b nodes are structurally similar, there would be no way to conclude that we should clear the clone bits in each node. In order to update clone links properly we could examine many special cases, but there is an easier way. Because of definition 2, we can define a shouldBeCloned function that checks J(n) to see whether all nodes of J(n) are structurally similar.

Leo's XML file format does not contain join lists. This makes it easy to change a Leo file "by hand." If join lists were a part of the file, as they are in the Mac version of Leo, corrupting a join list would corrupt the entire file. It is easy to recreate the join lists when reading a file using a dedicated field in the tnode.  This field is the head of a list of all vnodes that points to the tnode. After reading all nodes, Leo creates this list with one pass through the vnodes.  Leo then converts each list to a circular list with one additional pass through the tnodes.
</t>
<t tx="edream.110203161858.1562">@ The vnode and tnode classes represent most of the data contained in the outline. These classes are Leo's fundamental Model classes.

A vnode (visual node) represents a headline at a particular location on the screen. When a headline is cloned, vnodes must be copied. vnodes persist even if they are not drawn on the screen. Commanders call vnode routines to insert, delete and move headlines.

The vnode contains data associated with a headline, except the body text data which is contained in tnodes. A vnode contains headline text, a link to its tnode and other information. In leo.py, vnodes contain structure links: parent, firstChild, next and back ivars. To insert, delete, move or clone a vnode the vnode class just alters those links. The Commands class calls the leoTree class to redraw the outline pane whenever it changes. The leoTree class knows about these structure links; in effect, the leoTree and vnode classes work together. The implementation of vnodes is quite different in the Borland version of Leo. This does not affect the rest of the Leo. Indeed, vnodes are designed to shield Leo from such implementation details.

A tnode, (text node) represents body text: a tnode is shared by all vnodes that are clones of each other. In other words, tnodes are the unit of sharing of body text. The tnode class is more private than the vnode class. Most commanders deal only with vnodes, though there are exceptions.

Because leo.py has unlimited Undo commands, vnodes and tnodes can be deleted only when the window containing them is closed. Nodes are deleted indirectly.

Leo uses several kinds of node indices. Leo's XML file format uses tnode indices to indicate which tnodes (t elements) belong to which vnodes (v elements). Such indices are required. Even if we duplicated the body text of shared tnodes within the file, the file format would still need an unambiguous way to denote that tnodes are shared.

Present versions of Leo recompute these tnodes indices whenever Leo writes any .leo file. Earlier versions of Leo remembered tnode indices and rewrote the same indices whenever possible. Those versions of Leo recomputed indices when executing the Save As and Save To commands, so using these commands was a way of "compacting" indices. The main reason for not wanting to change tnode indices in .leo files was to reduce the number of changes reported by CVS and other Source Code Control Systems. I finally abandoned this goal in the interest of simplifying the code. Also, CVS will likely report many differences between two versions of the same .leo file, regardless of whether tnode indices are conserved.

A second kind of node index is the clone index used in @+node sentinels in files derived from @file trees. As with indices in .leo files, indices in derived files are required so that Leo can know unambiguously which nodes are cloned to each other.

It is imperative that clone indices be computed correctly, that is, that tnode @+node sentinels have the same index if and only if the corresponding vnodes are cloned. Early versions of leo.py had several bugs involving these clone indices. Such bugs are extremely serious because they corrupt the derived file and cause read errors when Leo reads the @file tree. Leo must guarantee that clone indices are always recomputed properly. This is not as simple as it might appear at first. In particular, Leo's commands must ensure that @file trees are marked dirty whenever any changed is made that affects cloned nodes within the tree. For example, a change made outside any @file tree may make several @file trees dirty if the change is made to a node with clones in those @file trees.
</t>
<t tx="edream.110203161858.1563">class baseTnode:
	"""The base class of the tnode class."""
	&lt;&lt; tnode constants &gt;&gt;
	@others
	
class tnode (baseTnode):
	"""A class that implements tnodes."""
	pass</t>
<t tx="edream.110203161858.1564">dirtyBit =		0x01
richTextBit =	0x02 # Determines whether we use &lt;bt&gt; or &lt;btr&gt; tags.
visitedBit =	0x04</t>
<t tx="edream.110203161858.1565"># All params have defaults, so t = tnode() is valid.

def __init__ (self,index=0,bodyString=None,headString=None):

	a = app()
	self.bodyString = choose(bodyString, bodyString, "")
	self.statusBits = 0 # status bits
	self.selectionStart = 0 # The start of the selected body text.
	self.selectionLength = 0 # The length of the selected body text.
	self.insertSpot = None # Location of previous insert point.
	self.scrollBarSpot = None # Previous value of scrollbar position.
	# For Pre-3.12 files.  These must always exist.
	self.fileIndex = index # The immutable file index for self tnode.
	self.cloneIndex = 0 # Zero for @file nodes
	# New in 3.12
	self.joinList = [] # vnodes on the same joinlist are updated together.
	self.headString = headString</t>
<t tx="edream.110203161858.1566"></t>
<t tx="edream.110203161858.1567">def hasBody (self):

	return self.bodyString and len(self.bodyString) &gt; 0</t>
<t tx="edream.110203161858.1568">def loadBodyPaneFromTnode(self, body):

	s = self.bodyString
	if s and len(s) &gt; 0:
		body.delete(1,"end")
		body.insert(1,s)
	else:
		body.delete(1,"end")</t>
<t tx="edream.110203161858.1569"></t>
<t tx="edream.110203161858.1570">def isDirty (self):

	return (self.statusBits &amp; self.dirtyBit) != 0</t>
<t tx="edream.110203161858.1571">def isRichTextBit (self):

	return (self.statusBits &amp; self.richTextBit) != 0</t>
<t tx="edream.110203161858.1572">def isVisited (self):

	return (self.statusBits &amp; self.visitedBit) != 0</t>
<t tx="edream.110203161858.1573"></t>
<t tx="edream.110203161858.1574"></t>
<t tx="edream.110203161858.1575">def saveBodyPaneToTnode (self,body): # No need for an encoding param.

	self.setTnodeText(body.GetValue()) # 1/20/03

	# Set the selection.
	i,j = body.GetSelection()
	if i &gt; j:
		i,j = j,i
	self.selectionStart = i
	self.selectionLength = j - i
</t>
<t tx="edream.110203161858.1576"># This sets the text in the tnode from the given string.

def setTnodeText (self,s,encoding="utf-8"):
	
	s = toUnicode(s,encoding,reportErrors=true)
	self.bodyString = s
</t>
<t tx="edream.110203161858.1577">def setSelection (self, start, length):

	self.selectionStart = start
	self.selectionLength = length</t>
<t tx="edream.110203161858.1578"></t>
<t tx="edream.110203161858.1579">def clearDirty (self):

	self.statusBits &amp;= ~ self.dirtyBit</t>
<t tx="edream.110203161858.1580">def clearRichTextBit (self):

	self.statusBits &amp;= ~ self.richTextBit</t>
<t tx="edream.110203161858.1581">def clearVisited (self):

	self.statusBits &amp;= ~ self.visitedBit</t>
<t tx="edream.110203161858.1582">def setDirty (self):

	self.statusBits |= self.dirtyBit</t>
<t tx="edream.110203161858.1583">def setRichTextBit (self):

	self.statusBits |= self.richTextBit</t>
<t tx="edream.110203161858.1584">def setVisited (self):

	self.statusBits |= self.visitedBit</t>
<t tx="edream.110203161858.1585">def setCloneIndex (self, index):

	self.cloneIndex = index</t>
<t tx="edream.110203161858.1586">def setFileIndex (self, index):

	self.fileIndex = index</t>
<t tx="edream.110203161858.1587">class baseVnode:
	"""The base class of the vnode class."""
	&lt;&lt; vnode constants &gt;&gt;
	@others
	
class vnode (baseVnode):
	"""A class that implements vnodes."""
	pass</t>
<t tx="edream.110203161858.1588"># Define the meaning of status bits in new vnodes.

# Archived...
clonedBit	  = 0x01 # true: vnode has clone mark.
# not used	 = 0x02
expandedBit = 0x04 # true: vnode is expanded.
markedBit	  = 0x08 # true: vnode is marked
orphanBit	  = 0x10 # true: vnode saved in .leo file, not derived file.
selectedBit = 0x20 # true: vnode is current vnode.
topBit		    = 0x40 # true: vnode was top vnode when saved.

# Not archived...
dirtyBit    =	0x060
richTextBit =	0x080 # Determines whether we use &lt;bt&gt; or &lt;btr&gt; tags.
visitedBit	 = 0x100
</t>
<t tx="edream.110203161858.1589"></t>
<t tx="edream.110203161858.1590">if 0: # not used
	def __cmp__(self,other):
		
		trace(`self` + "," + `other`)
		return not (self is other) # Must return 0, 1 or -1</t>
<t tx="edream.110203161858.1591">def __init__ (self,commands,t):

	a = app()
	assert(t)
	
	# commands may be None for testing.
	# assert(commands)

	&lt;&lt; initialize vnode data members &gt;&gt;
</t>
<t tx="edream.110203161858.1592">self.commands = commands # The commander for this vnode.
self.t = t # The tnode, i.e., the body text.
self.statusBits = 0 # status bits

# Structure links
self.mParent = self.mFirstChild = self.mNext = self.mBack = None

# To be moved to vxnodes...

self.iconVal = -1 # The icon index.  -1 forces an update of icon.
self.iconx, self.icony = 0,0 # Coords of icon so icon can be redrawn separately.</t>
<t tx="edream.110203161858.1593">def __repr__ (self):
	
	if self.t:
		return "&lt;vnode %d:%s&gt;" % (id(self),`self.t.headString`)
	else:
		return "&lt;vnode %d:NULL tnode&gt;" % (id(self))
		
__str__ = __repr__
</t>
<t tx="edream.110203161858.1594">@ These callbacks are vnode methods so we can pass the vnode back to the tree class.
</t>
<t tx="edream.110203161858.1595"># Called when the box is clicked.

def OnBoxClick(self,event=None):

	try:
		v = self ; c = v.commands
		if not doHook("boxclick1",c=c,v=v,event=event):
			self.commands.tree.OnBoxClick(self)
		doHook("boxclick2",c=c,v=v,event=event)
	except:
		es_event_exception("boxclick")</t>
<t tx="edream.110203161858.1596">def OnDrag(self,event=None):
	
	# trace()
	
	try:
		v = self ; c = v.commands
		if c.frame.tree.dragging:
			if not doHook("dragging1",c=c,v=v,event=event):
				self.commands.tree.OnDrag(self,event)
			doHook("dragging2",c=c,v=v,event=event)
		else:
			if not doHook("drag1",c=c,v=v,event=event):
				self.commands.tree.OnDrag(self,event)
			doHook("drag2",c=c,v=v,event=event)
	except:
		es_event_exception("drag")</t>
<t tx="edream.110203161858.1597">def OnEndDrag(self,event=None):
	
	"""Vnode end-drag handler."""
	
	# trace()

	try:
		v = self ; c = v.commands
		# 7/10/03: Always call tree.OnEndDrag, regardless of state.
		if not doHook("enddrag1",c=c,v=v,event=event):
			self.commands.tree.OnEndDrag(self,event)
		doHook("enddrag2",c=c,v=v,event=event)
	except:
		es_event_exception("enddrag")</t>
<t tx="edream.110203161858.1598">def OnHeadlineClick(self,event=None):
	try:
		v = self ; c = v.commands
		if not doHook("headclick1",c=c,v=v,event=event):
			self.commands.tree.OnActivate(self)
		doHook("headclick2",c=c,v=v,event=event)
	except:
		es_event_exception("headclick")
	
def OnHeadlineRightClick(self,event=None):
	try:
		v = self ; c = v.commands
		if not doHook("headrclick1",c=c,v=v,event=event):
			self.commands.tree.OnActivate(self)
			self.commands.tree.OnPopup(self,event)
		doHook("headrclick2",c=c,v=v,event=event)
	except:
		es_event_exception("headrclick")</t>
<t tx="edream.110203161858.1599">def OnHeadlineKey (self,event=None):

	try:
		v = self ; c = v.commands
		if not doHook("headkey1",c=c,v=v,event=event):
			self.commands.tree.OnHeadlineKey(self,event)
		doHook("headkey2",c=c,v=v,event=event)
	except:
		es_event_exception("headkey")</t>
<t tx="edream.110203161858.1600">def OnHyperLinkControlClick (self,event):

	try:
		v = self ; c = v.commands
		if not doHook("hypercclick1",c=c,v=v,event=event):
			c.beginUpdate()
			c.selectVnode(v)
			c.endUpdate()
			c.body.mark_set("insert","1.0")
		doHook("hypercclick2",c=c,v=v,event=event)
	except:
		es_event_exception("hypercclick")</t>
<t tx="edream.110203161858.1601">def OnHyperLinkEnter (self,event=None):

	try:
		v = self ; c = v.commands
		if not doHook("hyperenter1",c=c,v=v,event=event):
			if 0: # This works, and isn't very useful.
				c.body.tag_config(v.tagName,background="green")
		doHook("hyperenter2",c=c,v=v,event=event)
	except:
		es_event_exception("hyperenter")</t>
<t tx="edream.110203161858.1602">def OnHyperLinkLeave (self,event=None):

	try:
		v = self ; c = v.commands
		if not doHook("hyperleave1",c=c,v=v,event=event):
			if 0: # This works, and isn't very useful.
				c.body.tag_config(v.tagName,background="white")
		doHook("hyperleave2",c=c,v=v,event=event)
	except:
		es_event_exception("hyperleave")</t>
<t tx="edream.110203161858.1603">def OnIconClick(self,event=None):
	try:
		v = self ; c = v.commands
		if not doHook("iconclick1",c=c,v=v,event=event):
			self.commands.tree.OnIconClick(self,event)
		doHook("iconclick2",c=c,v=v,event=event)
	except:
		es_event_exception("iconclick")
	
def OnIconRightClick(self,event=None):
	try:
		v = self ; c = v.commands
		if not doHook("iconrclick1",c=c,v=v,event=event):
			self.commands.tree.OnIconRightClick(self,event)
		doHook("iconrclick2",c=c,v=v,event=event)
	except:
		es_event_exception("iconrclick")
</t>
<t tx="edream.110203161858.1604">def OnIconDoubleClick(self,event=None):

	try:
		v = self ; c = v.commands
		if not doHook("icondclick1",c=c,v=v,event=event):
			self.commands.tree.OnIconDoubleClick(self)
		doHook("icondclick2",c=c,v=v,event=event)
	except:
		es_event_exception("icondclick")
</t>
<t tx="edream.110203161858.1605"></t>
<t tx="edream.110203161858.1606"># 12/03/02: We now handle @file options here.

def afterHeadlineMatch(self,s):
	
	h = self.headString()

	if s != "@file" and match_word(h,0,s):
		# No options are valid.
		return string.strip(h[len(s):])
	elif match(h,0,"@file"):
		i,atFileType,junk = scanAtFileOptions(h)
		if s == atFileType:
			# print "s,h:",s,h
			return string.strip(h[i:])
		else: return ""
	else: return ""
</t>
<t tx="edream.110203161858.1607">@ Returns the filename following @file or @rawfile, in the receivers's headline, or the empty string if the receiver is not an @file node.
@c

def atFileNodeName (self):
	return self.afterHeadlineMatch("@file")
	
def atNoSentinelsFileNodeName (self):
	return self.afterHeadlineMatch("@nosentinelsfile")
	
def atRawFileNodeName (self):
	return self.afterHeadlineMatch("@rawfile")
	
def atSilentFileNodeName (self):
	return self.afterHeadlineMatch("@silentfile")
</t>
<t tx="edream.110203161858.1608"># Returns true if the receiver's headline starts with @file.
def isAtFileNode (self):
	s = self.atFileNodeName()
	return len(s) &gt; 0
	
# Returns true if the receiver's headline starts with @rawfile.
def isAtNoSentinelsFileNode (self):
	s = self.atNoSentinelsFileNodeName()
	return len(s) &gt; 0
	
# Returns true if the receiver's headline starts with @rawfile.
def isAtRawFileNode (self):
	s = self.atRawFileNodeName()
	return len(s) &gt; 0

# Returns true if the receiver's headline starts with @silentfile.
def isAtSilentFileNode (self):
	s = self.atSilentFileNodeName()
	return len(s) &gt; 0
</t>
<t tx="edream.110203161858.1609">def isAnyAtFileNode (self):

	return (
		self.isAtFileNode() or
		self.isAtNoSentinelsFileNode() or
		self.isAtRawFileNode() or
		self.isAtSilentFileNode())
		
def anyAtFileNodeName (self):

	if self.isAtFileNode():
		return self.atFileNodeName()
	elif self.isAtNoSentinelsFileNode():
		return self.atNoSentinelsFileNodeName()
	elif self.isAtRawFileNode():
		return self.atRawFileNodeName()
	elif self.isAtSilentFileNode():
		return self.atSilentFileNodeName()
	else:
		return ""
</t>
<t tx="edream.110203161858.1610">@ Returns true if the receiver contains @ignore in its body at the start of a line.
@c

def isAtIgnoreNode (self):

	flag, i = is_special(self.t.bodyString, 0, "@ignore")
	return flag</t>
<t tx="edream.110203161858.1611">@ Returns true if the receiver contains @others in its body at the start of a line.
@c

def isAtOthersNode (self):

	flag, i = is_special(self.t.bodyString,0,"@others")
	return flag</t>
<t tx="edream.110203161858.1612">@ Returns true if the headline matches the pattern ignoring whitespace and case.  The headline may contain characters following the successfully matched pattern.
@c

def matchHeadline (self,pattern):

	h = string.lower(self.headString())
	h = string.replace(h,' ','')
	h = string.replace(h,'\t','')

	p = string.lower(pattern)
	p = string.replace(p,' ','')
	p = string.replace(p,'\t','')

	# ignore characters in the headline following the match
	return p == h[0:len(p)]</t>
<t tx="edream.110203161858.1613"></t>
<t tx="edream.110203161858.1614"># Converts the outline to a string in "MORE" format

def convertTreeToString (self):

	v = self
	level1 = v.level()
	after = v.nodeAfterTree()
	s = ""
	while v and v != after:
		s += v.moreHead(level1) + "\n"
		body = v.moreBody()
		if len(body) &gt; 0:
			s += body + "\n"
		v = v.threadNext()
	return s</t>
<t tx="edream.110203161858.1615"># Returns the headline string in MORE format.

def moreHead (self, firstLevel,useVerticalBar=false):

	v = self
	level = self.level() - firstLevel
	if level &gt; 0: s = "\t" * level
	else: s = ""
	s += choose(v.hasChildren(), "+ ", "- ")
	s += v.headString()
	return s</t>
<t tx="edream.110203161858.1616">@ Returns the body string in MORE format.  It inserts a backslash before any leading plus, minus or backslash.

+ test line
- test line
\ test line
test line +
test line -
test line \

More lines...
@c

def moreBody (self):

	v = self ; list = []
	
	if 1: # new code: only escape the first non-blank character of the line.
		s =  v.t.bodyString ; result = []
		lines = string.split(s,'\n')
		for s in lines:
			i = skip_ws(s,0)
			if i &lt; len(s):
				ch = s[i]
				if ch == '+' or ch == '-' or ch == '\\':
					s = s[:i] + '\\' + s[i:]
			result.append(s)
		return string.join(result,'\n')

	else: # pre 3.1 code.
		for ch in v.t.bodyString:
			if ch == '+' or ch == '-' or ch == '\\':
				list.append('\\')
			list.append(ch)
		return string.join(list,'')</t>
<t tx="edream.110203161858.1617"></t>
<t tx="edream.110203161858.1618"></t>
<t tx="edream.110203161858.1619"># childIndex and nthChild are zero-based.

def childIndex (self):

	parent=self.parent()
	if not parent: return 0

	child = parent.firstChild()
	n = 0
	while child:
		if child == self: return n
		n += 1 ; child = child.next()
	assert(false)</t>
<t tx="edream.110203161858.1620"># Compatibility routine for scripts

def firstChild (self):

	return self.mFirstChild</t>
<t tx="edream.110203161858.1621">def hasChildren (self):

	return self.firstChild() != None</t>
<t tx="edream.110203161858.1622"># Compatibility routine for scripts

def lastChild (self):

	child = self.firstChild()
	while child and child.next():
		child = child.next()
	return child</t>
<t tx="edream.110203161858.1623"># childIndex and nthChild are zero-based.

def nthChild (self, n):

	child = self.firstChild()
	if not child: return None
	while n &gt; 0 and child:
		n -= 1
		child = child.next()
	return child</t>
<t tx="edream.110203161858.1624">def numberOfChildren (self):

	n = 0
	child = self.firstChild()
	while child:
		n += 1
		child = child.next()
	return n</t>
<t tx="edream.110203161858.1625"></t>
<t tx="edream.110203161858.1626">def isCloned (self):

	return ( self.statusBits &amp; vnode.clonedBit ) != 0</t>
<t tx="edream.110203161858.1627">def isDirty (self):

	return self.t.isDirty()</t>
<t tx="edream.110203161858.1628">def isExpanded (self):

	return ( self.statusBits &amp; self.expandedBit ) != 0</t>
<t tx="edream.110203161858.1629">def isMarked (self):

	return ( self.statusBits &amp; vnode.markedBit ) != 0</t>
<t tx="edream.110203161858.1630">def isOrphan (self):

	return ( self.statusBits &amp; vnode.orphanBit ) != 0</t>
<t tx="edream.110203161858.1631">def isSelected (self):

	return ( self.statusBits &amp; vnode.selectedBit ) != 0</t>
<t tx="edream.110203161858.1632">def isTopBitSet (self):

	return ( self.statusBits &amp; self.topBit ) != 0</t>
<t tx="edream.110203161858.1633"># Returns true if all parents are expanded.

def isVisible (self):

	v = self.parent()
	while v:
		if not v.isExpanded():
			return false
		v = v.parent()
	return true</t>
<t tx="edream.110203161858.1634">def isVisited (self):

	return ( self.statusBits &amp; vnode.visitedBit ) != 0</t>
<t tx="edream.110203161858.1635">def status (self):

	return self.statusBits</t>
<t tx="edream.110203161858.1636"># Compatibility routine for scripts

def bodyString (self):

	return self.t.bodyString</t>
<t tx="edream.110203161858.1637"># Compatibility routine for scripts

def currentVnode (self):

	return self.commands.tree.currentVnode</t>
<t tx="edream.110203161858.1638">def edit_text (self):
	
	return self.commands.tree.edit_text_dict.get(self)</t>
<t tx="edream.110203161858.1639"># Compatibility routine for scripts

def findRoot (self):

	return self.commands.tree.rootVnode
</t>
<t tx="edream.110203161858.1640">def headString (self):

	if self.t.headString:
		return self.t.headString
	else:
		return ""
		
def cleanHeadString (self):
	
	s = self.headString()
	s = toEncodedString(s,"ascii") # Replaces non-ascii characters by '?'
	return s</t>
<t tx="edream.110203161858.1641">def isAncestorOf (self, v):

	if not v:
		return false
	v = v.parent()
	while v:
		if v == self:
			return true
		v = v.parent()
	return false</t>
<t tx="edream.110203161858.1642">def isRoot (self):

	return not self.parent() and not self.back()</t>
<t tx="edream.110203161858.1643">def exists(self,c):
	
	"""Return true if v exists in c's tree"""
	
	v = self ; c = v.commands
	
	# This code must be fast.
	root = c.rootVnode()
	while v:
		if v == root:
			return true
		p = v.parent()
		if p:
			v = p
		else:
			v = v.back()
		
	return false</t>
<t tx="edream.110203161858.1644"></t>
<t tx="edream.110203161858.1645"></t>
<t tx="edream.110203161858.1646">def appendStringToBody (self,s,encoding="utf-8"):

	if len(s) == 0: return
	body = self.t.bodyString + s
	self.setBodyStringOrPane(body,encoding)
</t>
<t tx="edream.110203161858.1647">def setBodyStringOrPane (self,s,encoding="utf-8"):

	v = self ; c = v.commands
	if not c or not v: return
	
	s = toUnicode(s,encoding)
	if v == c.currentVnode():
		# This code destoys all tags, so we must recolor.
		c.frame.body.delete("1.0","end")
		c.frame.body.insert("1.0",s) # Replace the body text with s.
		c.recolor()
		
	# Keep the body text in the tnode up-to-date.
	if v.t.bodyString != s:
		v.t.setTnodeText(s)
		v.t.setSelection(0,0)
		v.setDirty()
		if not c.isChanged():
			c.setChanged(true)

setBodyTextOrPane = setBodyStringOrPane # Compatibility with old scripts</t>
<t tx="edream.110203161858.1648">def setHeadString (self,s,encoding="utf-8"):

	self.initHeadString(s,encoding) # 6/28/03
	self.setDirty()

def initHeadString (self,s,encoding="utf-8"):

	s = toUnicode(s,encoding,reportErrors=true)
	self.t.headString = s
</t>
<t tx="edream.110203161858.1649"># Compatibility routine for scripts

def setHeadStringOrHeadline (self,s,encoding="utf-8"):

	c = self.commands
	c.endEditing()
	self.setHeadString(s,encoding)
</t>
<t tx="edream.110203161858.1650">def computeIcon (self):

	val = 0 ; v = self
	if v.t.hasBody(): val += 1
	if v.isMarked(): val += 2
	if v.isCloned(): val += 4
	if v.isDirty(): val += 8
	return val
	
def setIcon (self):

	pass # Compatibility routine for old scripts</t>
<t tx="edream.110203161858.1651"></t>
<t tx="edream.110203161858.1652"># Compatibility routine for scripts

def clearAllVisited (self):
	
	self.commands.clearAllVisited()
</t>
<t tx="edream.110203161858.1653">def clearAllVisitedInTree (self):

	v = self ; c = v.commands
	after = v.nodeAfterTree()
	
	c.beginUpdate()
	while v and v != after:
		v.clearVisited()
		v.t.clearVisited()
		v = v.threadNext()
	c.endUpdate()
</t>
<t tx="edream.110203161858.1654">def clearClonedBit (self):

	self.statusBits &amp;= ~ self.clonedBit</t>
<t tx="edream.110203161858.1655">def clearDirty (self):

	v = self
	v.t.clearDirty()

def clearDirtyJoined (self):

	# trace()
	v = self ; c = v.commands
	c.beginUpdate()
	v.t.clearDirty()
	c.endUpdate() # recomputes all icons</t>
<t tx="edream.110203161858.1656">def clearMarked (self):

	self.statusBits &amp;= ~ self.markedBit
	doHook("clear-mark",c=self.commands,v=self)</t>
<t tx="edream.110203161858.1657">def clearOrphan (self):

	self.statusBits &amp;= ~ self.orphanBit</t>
<t tx="edream.110203161858.1658">def clearVisited (self):

	self.statusBits &amp;= ~ self.visitedBit</t>
<t tx="edream.110203161858.1659">def clearVisitedInTree (self):

	after = self.nodeAfterTree()
	v = self
	while v and v != after:
		v.clearVisited()
		v = v.threadNext()</t>
<t tx="edream.110203161858.1660">def contract(self):

	self.statusBits &amp;= ~ self.expandedBit

def expand(self):

	self.statusBits |= self.expandedBit

def initExpandedBit (self):

	self.statusBits |= self.expandedBit</t>
<t tx="edream.110203161858.1661">def initStatus (self, status):

	self.statusBits = status</t>
<t tx="edream.110203161858.1662">@ This is called from the key-event handler, so we must not force a redraw of the screen here. We avoid redraw in most cases by passing redraw_flag to the caller.

This marks v dirty and all cloned nodes in v's tree.

2/1/03: I don't see how this can possibly be correct.
Why is it needed?? If it is needed, what about undo??
@c
def setAncestorsOfClonedNodesInTreeDirty(self):

	# Look up the tree for an ancestor @file node.
	v = self ; redraw_flag = false
	
	if v == None:
		return redraw_flag
		
	flag = v.setAncestorAtFileNodeDirty()
	if flag: redraw_flag = true
		
	next = v.nodeAfterTree()
	v = v.threadNext()
	while v and v != next:
		if v.isCloned() and not v.isDirty():
			flag = v.setAncestorAtFileNodeDirty()
			if flag: redraw_flag = true
			for v2 in v.t.joinList:
				if v2 != v:
					flag = v2.setAncestorAtFileNodeDirty()
					if flag: redraw_flag = true
		v = v.threadNext()

	return redraw_flag</t>
<t tx="edream.110203161858.1663">@ This is called from the key-event handler, so we must not force a redraw of the screen here. We avoid redraw in most cases by passing redraw_flag to c.endUpdate().

This is called from v.setDirty, so we avoid further calls to v.setDirty here.  The caller, that is, v.setDirty itself, handles all clones.

@c
def setAncestorAtFileNodeDirty(self):

	# Look up the tree for an ancestor @file node.
	v = self ; c = v.commands
	redraw_flag = false
	c.beginUpdate()
	while v:
		if not v.isDirty() and v.isAnyAtFileNode():
			redraw_flag = true
			v.t.setDirty() # Do not call v.setDirty here!
		v = v.parent()
	c.endUpdate(redraw_flag) # A crucial optimization: does nothing if inside nested begin/endUpdate.
	return redraw_flag # Allow caller to do the same optimization.</t>
<t tx="edream.110203161858.1664">def setClonedBit (self):

	self.statusBits |= self.clonedBit

def initClonedBit (self, val):

	if val:
		self.statusBits |= self.clonedBit
	else:
		self.statusBits &amp;= ~ self.clonedBit</t>
<t tx="edream.110203161858.1665">@ v.setDirty now ensures that all cloned nodes are marked dirty and that all ancestor @file nodes are marked dirty.  It is much safer to do it this way.

v.setDirtyDeleted is used only when a node is deleted.  (And why is it even needed????)
@c

def setDirty (self):

	v = self ; c = v.commands
	# trace(`v`)
	changed = false
	c.beginUpdate()
	if not v.t.isDirty():
		v.t.setDirty()
		changed = true
	# This must _always_ be called, even if v is already dirty.
	if v.setAncestorAtFileNodeDirty():
		changed = true
	for v2 in v.t.joinList:
		if v2 != v:
			assert(v2.t.isDirty())
			# Again, must always be called.
			if v2.setAncestorAtFileNodeDirty():
				changed = true
	c.endUpdate(changed)
	return changed
	
def setDirtyDeleted (self):
	
	self.setDirty()
	return
	
	## This code is bizarre and unnecessary.

	v = self ; c = v.commands
	# trace(`v`)
	changed = false
	c.beginUpdate()
	if not v.t.isDirty():
		v.t.setDirty()
		changed = true
	# This must _always_ be called, even if v is already dirty.
	if v.setAncestorsOfClonedNodesInTreeDirty():
		changed = true
	for v2 in v.t.joinList:
		if v2 != v:
			assert(v2.t.isDirty())
			# Again, must always be called.
			if v2.setAncestorsOfClonedNodesInTreeDirty():
				changed = true
	c.endUpdate(changed)
	return changed

def initDirtyBit (self):
	self.t.setDirty()</t>
<t tx="edream.110203161858.1666">def setMarked (self):

	self.statusBits |= self.markedBit
	doHook("set-mark",c=self.commands,v=self)

def initMarkedBit (self):

	self.statusBits |= self.markedBit</t>
<t tx="edream.110203161858.1667">def setOrphan (self):

	self.statusBits |= self.orphanBit</t>
<t tx="edream.110203161858.1668"># This only sets the selected bit.

def setSelected (self):

	self.statusBits |= self.selectedBit</t>
<t tx="edream.110203161858.1669"># Compatibility routine for scripts

def setVisited (self):

	self.statusBits |= self.visitedBit</t>
<t tx="edream.110203161858.1670">def setSelection (self, start, length):

	self.t.setSelection ( start, length )</t>
<t tx="edream.110203161858.1671">def setT (self, t):

	if t != self:
		del self.t
		self.t = t</t>
<t tx="edream.110203161858.1672">@ This trims trailing blank lines from a node.  It is surprising difficult to do this during Untangle.
@c

def trimTrailingLines (self):

	v = self
	body = v.bodyString()
	# trace(`body`)
	lines = string.split(body,'\n')
	i = len(lines) - 1 ; changed = false
	while i &gt;= 0:
		line = lines[i]
		j = skip_ws(line,0)
		if j + 1 == len(line):
			del lines[i]
			i -= 1 ; changed = true
		else: break
	if changed:
		body = string.join(body,'') + '\n' # Add back one last newline.
		# trace(`body`)
		v.setBodyStringOrPane(body)
		# Don't set the dirty bit: it would just be annoying.</t>
<t tx="edream.110203161858.1673"></t>
<t tx="edream.110203161858.1674"># Compatibility routine for scripts

def back (self):

	return self.mBack</t>
<t tx="edream.110203161858.1675">def lastNode (self):

	v = self
	level = self.level()
	result = None

	while v:
		result = v
		v = v.threadNext()
		if not v or v.level() &lt;= level:
			break

	return result</t>
<t tx="edream.110203161858.1676">@ This function returns the indentation level of the receiver. The root nodes have level 0, their children have level 1, and so on.
@c

def level (self):

	level = 0 ; parent = self.parent()
	while parent:
		level += 1
		parent = parent.parent()
	return level</t>
<t tx="edream.110203161858.1677"># Compatibility routine for scripts

def next (self):

	return self.mNext</t>
<t tx="edream.110203161858.1678"># Returns the vnode following the tree whose root is the receiver.

def nodeAfterTree (self):

	next = self.next()
	p = self.parent()

	while not next and p:
		next = p.next()
		p = p.parent()

	return next</t>
<t tx="edream.110203161858.1679"># Compatibility routine for scripts

def parent (self):

	return self.mParent</t>
<t tx="edream.110203161858.1680">def threadBack (self):
	
	"""Returns the previous element of the outline, or None if at the start of the outline"""

	back = self.back()
	if back:
		lastChild = back.lastChild()
		if lastChild:
			return lastChild.lastNode()
		else:
			return back
	else:
		return self.parent()</t>
<t tx="edream.110203161858.1681">def threadNext (self):

	"""Returns node following the receiver in "threadNext" order"""

	# stat()
	v = self
	if v.firstChild():
		return v.firstChild()
	elif v.next():
		return v.next()
	else:
		p = v.parent()
		while p:
			if p.next():
				return p.next()
			p = p.parent()
		return None</t>
<t tx="edream.110203161858.1682">def visBack (self):

	v = self.threadBack()
	while v and not v.isVisible():
		v = v.threadBack()
	return v</t>
<t tx="edream.110203161858.1683">def visNext (self):

	v = self.threadNext()
	while v and not v.isVisible():
		v = v.threadNext()
	return v</t>
<t tx="edream.110203161858.1684"></t>
<t tx="edream.110203161858.1685"></t>
<t tx="edream.110203161858.1686">@ This is the main delete routine.  It deletes the receiver's entire tree from the screen.  Because of the undo command we never actually delete vnodes or tnodes.
@c

def doDelete (self, newVnode):

	"""Unlinks the receiver, but does not destroy it. May be undone"""

	v = self ; c = v.commands
	v.setDirty() # 1/30/02: mark @file nodes dirty!
	v.destroyDependents()
	v.unjoinTree()
	v.unlink()
	# Bug fix: 1/18/99: we must set the currentVnode here!
	c.selectVnode(newVnode)
	# Update all clone bits.
	c.initAllCloneBits()
	return self # We no longer need dvnodes: vnodes contain all needed info.</t>
<t tx="edream.110203161858.1687">def insertAfter (self,t=None):

	"""Inserts a new vnode after the receiver"""

	if not t:
		t = tnode(headString="NewHeadline")
	v = vnode(self.commands,t)
	v.iconVal = 0
	v.linkAfter(self)
	return v</t>
<t tx="edream.110203161858.1688">def insertAsLastChild (self,t=None):

	"""Inserts a new vnode as the last child of the receiver"""

	n = self.numberOfChildren()
	if not t:
		t = tnode(headString="NewHeadline")
	return self.insertAsNthChild(n,t)</t>
<t tx="edream.110203161858.1689">def insertAsNthChild (self,n,t=None):

	"""Inserts a new node as the the nth child of the receiver.
	The receiver must have at least n-1 children"""
	
	# trace(`n` + `self`)
	if not t:
		t = tnode(headString="NewHeadline")
	v = vnode(self.commands,t)
	v.iconVal = 0
	v.linkAsNthChild(self,n)
	return v</t>
<t tx="edream.110203161858.1690">def moveToRoot (self, oldRoot = None):

	"""Moves the receiver to the root position"""

	v = self
	v.destroyDependents()
	v.unlink()
	v.linkAsRoot(oldRoot)
	v.createDependents()</t>
<t tx="edream.110203161858.1691"># Restores (relinks) the dv tree in the position described by back and parent.

def restoreOutlineFromDVnodes (self, dv, parent, back):

	if back:
		dv.linkAfter(back)
	elif parent:
		dv.linkAsNthChild(parent, 0)
	else:
		dv.linkAsRoot()
	return dv</t>
<t tx="edream.110203161858.1692"># Creates a clone of back and insert it as the next sibling of back.

def clone (self,back):
	
	clone = self.cloneTree(back)
	clone.createDependents()

	# Set the clone bit in all nodes joined to back.
	clone.setClonedBit()
	back.setClonedBit()
	for v in back.t.joinList:
		v.setClonedBit()

	return clone</t>
<t tx="edream.110203161858.1693"># Links the receiver after v.

def linkAfter (self,v):

	# stat()
	self.mParent = v.mParent
	self.mBack = v
	self.mNext = v.mNext
	v.mNext = self
	if self.mNext:
		self.mNext.mBack = self</t>
<t tx="edream.110203161858.1694">def linkAsNthChild (self, p, n):

	"""Links the receiver as the n'th child of p"""

	v = self
	# stat() ; # trace(`v` + ", " + `p` + ", " + `n`)
	v.mParent = p
	if n == 0:
		v.mBack = None
		v.mNext = p.mFirstChild
		if p.mFirstChild:
			p.mFirstChild.mBack = v
		p.mFirstChild = v
	else:
		prev = p.nthChild(n-1) # zero based
		assert(prev)
		v.mBack = prev
		v.mNext = prev.mNext
		prev.mNext = v
		if v.mNext:
			v.mNext.mBack = v</t>
<t tx="edream.110203161858.1695">@ Bug fix: 5/27/02.  We link in the rest of the tree only when oldRoot != None.  Otherwise, we are calling this routine from init code and we want to start with a pristine tree.
@c
def linkAsRoot(self, oldRoot = None):

	v = self ; c = v.commands ; tree = c.tree
	# stat() ; # trace(`v`)
	# Bug fix 3/16/02:
	# Clear all links except the child link.
	# This allows a node with children to be moved up properly to the root position.
	# v.mFirstChild = None
	v.mParent = None
	v.mBack = None
	# 5/27/02
	if oldRoot: oldRoot.mBack = v
	v.mNext = oldRoot
	tree.rootVnode = v
</t>
<t tx="edream.110203161858.1696"># Used by scripts

def moveAfter (self,a):

	"""Moves the receiver after a"""

	v = self ; c = self.commands
	v.destroyDependents()
	v.unlink()
	v.linkAfter(a)
	v.createDependents()
	
	# 5/27/02: Moving a node after another node can create a new root node.
	if not a.parent() and not a.back():
		c.tree.rootVnode = a</t>
<t tx="edream.110203161858.1697"># Compatibility routine for scripts

def moveToNthChildOf (self, p, n):

	"""Moves the receiver to the nth child of p"""

	v = self ; c = self.commands

	v.destroyDependents()
	v.unlink()
	v.linkAsNthChild(p, n)
	v.createDependents()
	
	# 5/27/02: Moving a node can create a new root node.
	if not p.parent() and not p.back():
		c.tree.rootVnode = p</t>
<t tx="edream.110203161858.1698">def sortChildren (self):

	# Create a list of (headline,vnode) tuples
	v = self ; pairs = []
	child = v.firstChild()
	if not child: return
	while child:
		pairs.append((string.lower(child.headString()), child))
		child = child.next()
	# Sort the list on the headlines.
	pairs.sort()
	# Move the children.
	index = 0
	for headline,child in pairs:
		child.moveToNthChildOf(v,index)
		index += 1</t>
<t tx="edream.110203161858.1699"></t>
<t tx="edream.110203161858.1700">def addTreeToJoinLists (self):
	
	"""Add each v of v's entire tree to v.t.joinList."""
	
	v = self ; after = v.nodeAfterTree()
	
	while v and v != after:
		if not v in v.t.joinList:
			v.t.joinList.append(v)
		v = v.threadNext()</t>
<t tx="edream.110203161858.1701">def cloneTree (self, oldTree):
	
	"""Create a cloned tree after oldTree."""

	# Create a new tree following oldTree.
	newTree = oldTree.copyTree()
	newTree.linkAfter(oldTree)
	# Join the trees and copy clone bits.
	oldTree.joinTreeTo(newTree)
	oldTree.copyCloneBitsTo(newTree)
	return newTree</t>
<t tx="edream.110203161858.1702"># This methods propagates clone bits from the receiver's tree to tree2.

def copyCloneBitsTo (self, tree2):

	tree1 = self
	assert(tree2)
	# Set the bit in the root.
	if tree1.isCloned():
		tree2.setClonedBit()
	else:
		tree2.clearClonedBit()
	# Recursively set the bits in all subtrees.
	child1 = tree1.firstChild()
	child2 = tree2.firstChild()
	while child1:
		assert(child2)
		if child1.isCloned():
			child2.setClonedBit()
		else:
			child2.clearClonedBit()
		child1 = child1.next()
		child2 = child2.next()
	assert(child2 == None)</t>
<t tx="edream.110203161858.1703"># Rewritten 7/11/03.

def copyTree (self):
	
	"""Returns a free-standing copy of a vnode and all its descendents.
	
	The new tree uses the same tnodes as the old,
	but the new vnodes are _not_ joined to the old nodes.
	That is, the new vnodes v do not appear on v.t.joinList."""
	
	c = self.commands ; old_v = self
	
	# trace(self)
	
	# Copy all fields of the root.
	new_v = vnode(c,old_v.t)
	new_v.t.headString = old_v.t.headString
	new_v.iconVal = old_v.iconVal
	assert(new_v not in new_v.t.joinList)

	# Recursively copy and link all children.
	old_child = old_v.firstChild()
	n = 0
	while old_child:
		new_child = old_child.copyTree()
		new_child.linkAsNthChild(new_v,n)
		assert(new_child not in new_child.t.joinList)
		n += 1
		old_child = old_child.next()
		
	return new_v
</t>
<t tx="edream.110203161858.1704">def copyTreeWithNewTnodes (self):
	
	"""Return a copy of self with all new tnodes"""
	
	c = self.commands
	# trace(`self`)
	
	# Create the root node.
	old_v = self
	new_v = vnode(c,tnode())
	new_v.t.headString = old_v.t.headString
	new_v.t.bodyString = old_v.t.bodyString
	
	# Recursively create all descendents.
	old_child = old_v.firstChild() ; n = 0
	while old_child:
		new_child = old_child.copyTreeWithNewTnodes()
		new_child.linkAsNthChild (new_v, n)
		n += 1
		old_child = old_child.next()
		
	# Return the root of the new tree.
	return new_v</t>
<t tx="edream.110203161858.1705"># This method creates all nodes that depend on the receiver.
def createDependents (self):

	v = self ; t = v.t ; parent = v.parent()
	if not parent: return

	# Copy v as the nth child of all nodes joined to parent.
	n = v.childIndex()
	
	# 7/11/03: work on copy of join list.
	joinList = parent.t.joinList[:]
	if parent in joinList:
		joinList.remove(parent)

	for p in joinList:
		# trace(n,p)
		copy = v.copyTree()
		copy.linkAsNthChild(p,n)
		v.joinTreeTo(copy)</t>
<t tx="edream.110203161858.1706"># Destroys all dependent vnodes and tree nodes associated with the receiver.

def destroyDependents (self):
	
	"""Destroy the nth child of all nodes joined to the receiver's parent.."""

	parent = self.parent()
	if not parent:
		# trace("no parent",self)
		return

	n = self.childIndex()
	
	# 7/11/03: work on copy of join list.
	joinList = parent.t.joinList[:]
	if parent in joinList:
		joinList.remove(parent)
	#trace(parent,joinList)

	for join in joinList:
		# trace(n,join)
		child = join.nthChild(n)
		if child:
			child.unjoinTree()
			child.unlink()
			child.destroyTree()</t>
<t tx="edream.110203161858.1707">@ This method destroys (irrevocably deletes) a vnode tree.

This code should be called only when it is no longer possible to undo a previous delete.  It is always valid to destroy dependent trees.
@c

def destroyTree (self):

	pass</t>
<t tx="edream.110203161858.1708">def invalidOutline (self, message):

	s = "invalid outline: " + message + "\n"
	parent = self.parent()

	if parent:
		s += `parent`
	else:
		s += `self`

	alert ( s )</t>
<t tx="edream.110203161858.1709">def joinNodeTo (self, v2):
	
	"""Add self or v2 to their common join list"""

	v1 = self
	assert(v1.t==v2.t)
	j = v1.t.joinList
	
	if v1 not in j:
		j.append(v1)
		
	if v2 not in j:
		j.append(v2)</t>
<t tx="edream.110203161858.1710">@ This function joins all nodes in the receiver and tree2.  This code makes no assumptions about the two trees, and some or all of the nodes may already have been joined.  The assert's guarantee that both trees have the same topology.
@c

def joinTreeTo (self, tree2):

	tree1 = self
	assert(tree2)
	# Join the roots.
	tree1.joinNodeTo ( tree2 )
	# Recursively join all subtrees.
	child1 = tree1.firstChild()
	child2 = tree2.firstChild()
	while child1:
		assert(child2)
		child1.joinTreeTo(child2)
		child1 = child1.next()
		child2 = child2.next()
	assert(child2 == None)</t>
<t tx="edream.110203161858.1711">@ The receiver is a clone if and only it is structurally _dissimilar_ to a node joined to it.

Structurally _similar_ joined nodes have non-null, distinct and joined parents, and have the same child indices.
@c

def shouldBeClone (self):
	
	"""Returns True if the receiver should be a clone"""
	p = self.parent()
	n = self.childIndex()

	for v in self.t.joinList:
		if v != self:
			vp = v.parent()
			# self and v are structurally dissimilar if...
			if( (not p or not vp) or  # they are at the top level, or
				vp == p or  # have the same parent, or
				p.t != vp.t or  # have unjoined parents, or
				(v.childIndex() != n)): # have different child indices.

				# trace("true",v)
				return true

	# The receiver is structurally similar to all nodes joined to it.
	# trace("false",v)
	return false</t>
<t tx="edream.110203161858.1712">def unjoinTree (self):

	"""Remove all v and all its descendents v from v.t.joinList."""

	v = self
	after = self.nodeAfterTree()
	while v and v != after:
		if v in v.t.joinList:
			v.t.joinList.remove(v)
		v = v.threadNext()</t>
<t tx="edream.110203161858.1713">def unlink (self):

	"""Unlinks the receiver from the tree before moving or deleting.
	
	The mFistChild link is not affected in the receiver."""

	v = self ; c = v.commands ; tree = c.tree

	# stat() # trace(`v.mParent`+", child:"+`v.mFirstChild`+", back:"+`v.mBack`+", next:"+`v.mNext`)
	
	# Special case the root
	if v == tree.rootVnode:
		if not v.mNext: return # Should never happen.
		tree.rootVnode = v.mNext

	# Clear the links in other nodes
	if v.mBack:
		v.mBack.mNext = v.mNext
	if v.mNext:
		v.mNext.mBack = v.mBack
	if v.mParent and v == v.mParent.mFirstChild:
		v.mParent.mFirstChild = v.mNext

	# Clear the links in this node
	v.mParent = v.mNext = v.mBack = None</t>
<t tx="edream.110203161858.1714"># This routine checks the structure of the receiver's tree.

def validateOutlineWithParent (self, p):

	result = true # optimists get only unpleasant surprises.
	parent = self.parent()
	childIndex = self.childIndex()
	&lt;&lt; validate parent ivar &gt;&gt;
	&lt;&lt; validate childIndex ivar &gt;&gt;
	&lt;&lt; validate x ivar &gt;&gt;

	# Recursively validate all the children.
	child = self.firstChild()
	while child:
		r = child.validateOutlineWithParent ( self )
		if not r: result = false
		child = child.next()
	return result</t>
<t tx="edream.110203161858.1715">if parent != p:
	self.invalidOutline ( "Invalid parent link: " + parent.description() )</t>
<t tx="edream.110203161858.1716">if p:
	if childIndex &lt; 0:
		self.invalidOutline ( "missing childIndex" + childIndex )
	elif childIndex &gt;= p.numberOfChildren():
		self.invalidOutline ( "missing children entry for index: " + childIndex )
elif childIndex &lt; 0:
	self.invalidOutline ( "negative childIndex" + childIndex )</t>
<t tx="edream.110203161858.1717">if not self.t and p:
	self.invalidOutline ( "Empty t" )</t>
<t tx="edream.110203161858.1718"># Indices are Python dicts containing 'id','loc','time' and 'n' keys.

class nodeIndices:
	
	"""A class to implement global node indices (gnx's)."""
	
	@others</t>
<t tx="edream.110203161858.1719">def __init__ (self):
	
	"""ctor for nodeIndices class"""
	
	self.userId = app().leoID # 5/1/03: This never changes.
	self.defaultId = app().leoID # This probably will change.
	self.lastIndex = None
	self.timeString = None</t>
<t tx="edream.110203161858.1720">def areEqual (self,gnx1,gnx2):
	
	"""Return True if all fields of gnx1 and gnx2 are equal"""

	id1,time1,n1 = gnx1
	id2,time2,n2 = gnx2
	return id1==id2 and time1==time2 and n1==n2</t>
<t tx="edream.110203161858.1721"># These are used by the fileCommands read/write code.

def getDefaultId (self):
	
	"""Return the id to be used by default in all gnx's"""
	return self.defaultId
	
def setDefaultId (self,id):
	
	"""Set the id to be used by default in all gnx's"""
	self.defaultId = id
</t>
<t tx="edream.110203161858.1722">def getNewIndex (self):
	
	"""Create a new gnx using self.timeString and self.lastIndex"""
	
	id = self.userId # Bug fix 5/1/03: always use the user's id for new ids!
	t = self.timeString
	assert(t)
	n = None

	# Set n if id and time match the previous index.
	last = self.lastIndex
	if last:
		lastId,lastTime,lastN = last
		if id==lastId and t==lastTime:
			if lastN == None: n = 1
			else: n = lastN + 1

	d = (id,t,n)
	self.lastIndex = d
	# trace(d)
	return d</t>
<t tx="edream.110203161858.1723">def scanGnx (self,s,i):
	
	"""Create a gnx from its string representation"""

	if len(s) &gt; 0 and s[-1] == '\n':
		s = s[:-1]

	id,t,n=None,None,None
	i,id = skip_to_char(s,i,'.')
	if match(s,i,'.'):
		i,t = skip_to_char(s,i+1,'.')
		if match(s,i,'.'):
			i,n = skip_to_char(s,i+1,'.')
	# Use self.defaultId for missing id entries.
	if id == None or len(id) == 0:
		id = self.defaultId
	# Convert n to int.
	if n:
		try: n = int(n)
		except: pass
	d = (id,t,n)

	return d</t>
<t tx="edream.110203161858.1724">def setTimestamp (self):

	"""Set the timestamp string to be used by getNewIndex until further notice"""

	self.timeString = time.strftime(
		"%m%d%y%H%M%S",  # compact timestamp is best
		time.localtime())</t>
<t tx="edream.110203161858.1725">def toString (self,index,removeDefaultId=false):
	
	"""Convert a gnx (a tuple) to its string representation"""

	id,t,n = index

	if removeDefaultId and id == self.defaultId:
		id = ""

	if n == None:
		return "%s.%s" % (id,t)
	else:
		return "%s.%s.%d" % (id,t,n)</t>
<t tx="edream.110203161858.1726">"""Install and run Leo plugins.

On startup:
- doPlugins() calls loadHandlers() to import all
  mod_XXXX.py files in the Leo directory.

- Imported files should register hook handlers using the
  registerHandler and registerExclusiveHandler functions.
  Only one "exclusive" function is allowed per hook.

After startup:
- doPlugins() calls doHandlersForTag() to handle the hook.
- The first non-None return is sent back to Leo.
"""

from leoGlobals import *

handlers = {}
count = 0 ; examined = 0

def doPlugins(tag,keywords):
	if tag == "start1":
		loadHandlers()
	return doHandlersForTag(tag,keywords)
		
@others</t>
<t tx="edream.110203161858.1727"></t>
<t tx="edream.110203161858.1728"></t>
<t tx="edream.110203161858.1729"></t>
<t tx="edream.110203161858.1730"></t>
<t tx="edream.110203161858.1731"></t>
<t tx="edream.110203161858.1732">@language python

from leoGlobals import *
import string,Tkinter

# Public constants used for defaults when leoConfig.txt can not be read.
default_page_width = 132
default_tab_width = 4
default_target_language = "python"
default_default_directory = None

ivars = [
	"tangle_batch_flag", "untangle_batch_flag",
	"use_header_flag", "output_doc_flag",
	"tangle_directory", "page_width", "tab_width",
	"target_language" ]

class baseLeoPrefs:
	"""The base class of Leo's preferences panel."""
	@others
	
class LeoPrefs (baseLeoPrefs):
	"""A class that creates Leo's preferenes panel."""
	pass</t>
<t tx="edream.110203161858.1733">def __init__ (self,c):

	Tk = Tkinter
	&lt;&lt; set ivars &gt;&gt;
	self.commands = c
	self.top = top = Tk.Toplevel()
	c.frame.prefsPanel = self
	head,tail = os.path.split(c.frame.title)
	self.top.title("Prefs for " + tail)
	
	# Create the outer frame
	outer = Tk.Frame(top,bd=2,relief="groove")
	outer.pack(fill="both",expand=1,padx=2,pady=2)
	&lt;&lt; Create the Global Options frame &gt;&gt;
	&lt;&lt; Create the Tangle Options frame &gt;&gt;
	&lt;&lt; Create the Target Language frame &gt;&gt;
	&lt;&lt; Create the Ok, Cancel &amp; Revert buttons &gt;&gt;
	center_dialog(top) # Do this _after_ building the dialog!
	top.resizable(0,0) # neither height or width is resizable.
	self.top.protocol("WM_DELETE_WINDOW", self.onCancel) # 1/31/03
	self.init(c)
	# es("Prefs.__init__")</t>
<t tx="edream.110203161858.1734"># These ivars have the same names as the corresponding ivars in commands class.

# Global options
self.page_width = default_page_width
self.tab_width = default_tab_width
self.tangle_batch_flag = 0
self.untangle_batch_flag = 0

self.replace_tabs_var = Tk.IntVar() # 1/30/03
self.tangle_batch_var = Tk.IntVar()
self.untangle_batch_var = Tk.IntVar()

# Default Tangle options
self.tangle_directory = ""
self.use_header_flag = 0
self.output_doc_flag = 0

self.use_header_var = Tk.IntVar()
self.output_doc_var = Tk.IntVar()

# Default Target Language
self.target_language = default_target_language
self.lang_var = Tk.StringVar()</t>
<t tx="edream.110203161858.1735"># Frame and title
w,glob = create_labeled_frame (outer,caption="Global Options")
w.pack(padx=2,pady=2,expand=1,fill="x")

# Page width &amp; page width
f = Tk.Frame(glob)
f.pack(anchor="w", pady="1m", expand=1, fill="x")

lab = Tk.Label(f, anchor="w", padx="1m", text="Page width:")
self.pageWidthText = txt = Tk.Text(f, height=1, width=4)
lab.pack(side="left")
txt.pack(side="left")
txt.bind("&lt;Key&gt;", self.idle_set_ivars)

lab2 = Tk.Label(f, padx="1m", text="Tab width:")
self.tabWidthText = txt2 = Tk.Text(f, height=1, width=4)
lab2.pack(side="left")
txt2.pack(side="left")
txt2.bind("&lt;Key&gt;", self.idle_set_ivars)

# Batch Checkbuttons...
self.replaceTabsBox = replaceBox = Tk.Checkbutton(glob,anchor="w",
	text="Replace tabs with spaces",
	variable=self.replace_tabs_var,command=self.idle_set_ivars)
self.doneBox = doneBox = Tk.Checkbutton(glob,anchor="w",
	text="Run tangle_done.py after Tangle",
	variable=self.tangle_batch_var,command=self.idle_set_ivars)
self.unBox = unBox = Tk.Checkbutton(glob,anchor="w",
	text="Run untangle_done.py after Untangle",
	variable=self.untangle_batch_var,command=self.idle_set_ivars)

for box in (replaceBox, doneBox, unBox):
	box.pack(fill="x")</t>
<t tx="edream.110203161858.1736"># Frame and title
w,tangle = create_labeled_frame (outer,caption="Default Options")
w.pack(padx=2,pady=2,expand=1,fill="x")

# Label and text
lab3 = Tk.Label(tangle, anchor="w", text="Default tangle directory")
self.tangleDirectoryText = txt3 = Tk.Text(tangle, height=1, width=30)
txt3.bind("&lt;Key&gt;", self.idle_set_ivars) # Capture the change immediately
lab3.pack(            padx="1m", pady="1m", fill="x")
txt3.pack(anchor="w", padx="1m", pady="1m", fill="x")

# Checkbuttons
self.headerBox = header = Tk.Checkbutton(tangle,anchor="w",
	text="Tangle outputs header line",
	variable=self.use_header_var,command=self.idle_set_ivars)
self.docBox = doc = Tk.Checkbutton(tangle,anchor="w",
	text="Tangle outputs document chunks",
	variable=self.output_doc_var,command=self.idle_set_ivars)
header.pack(fill="x")
doc.pack(fill="x")</t>
<t tx="edream.110203161858.1737"># Frame and title
w,target = create_labeled_frame (outer,caption="Default Target Language")
w.pack(padx=2,pady=2,expand=1,fill="x")

# Frames for two columns of radio buttons
lt = Tk.Frame(target)
rt = Tk.Frame(target)
lt.pack(side="left")
rt.pack(side="right")

# Left column of radio buttons.
left_data = [
	("ActionScript", "actionscript"),
	("C/C++","c"),
	("CWEB", "cweb"),
	("HTML", "html"),
	("Java", "java"),
	("LaTeX", "latex"),
	("Pascal", "pascal")]

for text,value in left_data:
	button = Tk.Radiobutton(lt,anchor="w",text=text,
		variable=self.lang_var,value=value,command=self.set_lang)
	button.pack(fill="x") 
	
# Right column of radio buttons.
right_data = [
	("Perl", "perl"),
	("Perl+POD", "perlpod"),
	("PHP", "php"),
	("Plain Text", "plain"),
	("Python", "python"),
	("Rebol", "rebol"),
	("tcl/tk", "tcltk")]
	
for text,value in right_data:
	button = Tk.Radiobutton(rt,anchor="w",text=text,
		variable=self.lang_var,value=value,command=self.set_lang)
	button.pack(fill="x")
</t>
<t tx="edream.110203161858.1738">buttons = Tk.Frame(outer)
buttons.pack(padx=2,pady=2,expand=1,fill="x")

okButton = Tk.Button(buttons,text="OK",width=7,command=self.onOK)
cancelButton = Tk.Button(buttons,text="Cancel",width=7,command=self.onCancel)
revertButton = Tk.Button(buttons,text="Revert",width=7,command=self.onRevert)

okButton.pack(side="left",pady=7,expand=1)
cancelButton.pack(side="left",pady=7,expand=0)
revertButton.pack(side="left",pady=7,expand=1)</t>
<t tx="edream.110203161858.1739"># Initializes prefs ivars and widgets from c's ivars.

def init(self,c):

	self.commands = c
	#trace(`c.tab_width`)

	for var in ivars:
		val = getattr(c,var)
		setattr(self,var,val)
		# trace(val,var)

	&lt;&lt; remember values for revert &gt;&gt;
	&lt;&lt; set widgets &gt;&gt;
	# print "init" ; print self.print_ivars()</t>
<t tx="edream.110203161858.1740"># Global options
self.revert_tangle_batch_flag = c.tangle_batch_flag
self.revert_untangle_batch_flag = c.untangle_batch_flag
self.revert_page_width = c.page_width
self.revert_tab_width = c.tab_width
# Default Tangle Options
self.revert_tangle_directory = c.tangle_directory
self.revert_output_doc_flag = c.output_doc_flag
self.revert_use_header_flag = c.use_header_flag
# Default Target Language
if c.target_language == None: # 7/29/02
	c.target_language = "python"
self.revert_target_language = c.target_language</t>
<t tx="edream.110203161858.1741"># Global options
self.replace_tabs_var.set(choose(c.tab_width&lt;0,1,0)) # 1/30/03
self.tangle_batch_var.set(c.tangle_batch_flag)
self.untangle_batch_var.set(c.untangle_batch_flag)
self.pageWidthText.delete("1.0","end")
self.pageWidthText.insert("end",`c.page_width`)
self.tabWidthText.delete("1.0","end")
self.tabWidthText.insert("end",`abs(c.tab_width)`) # 1/30/03
# Default Tangle Options
self.tangleDirectoryText.delete("1.0","end")
self.tangleDirectoryText.insert("end",c.tangle_directory)
self.output_doc_var.set(c.output_doc_flag)
self.use_header_var.set(c.use_header_flag)
# Default Target Language
if c.target_language == None:
	c.target_language = "python" # 7/29/02
self.lang_var.set(c.target_language)</t>
<t tx="edream.110203161858.1742"></t>
<t tx="edream.110203161858.1743"># These event handlers get executed when the user types in the prefs panel.

def set_ivars (self,c):

	&lt;&lt; update ivars &gt;&gt;
	for var in ivars:
		val = getattr(self,var)
		setattr(c,var,val)
		
	c.frame.setTabWidth(c.tab_width)
	# self.print_ivars()

def idle_set_ivars (self, event=None):
	
	c = top() ; v = c.currentVnode()
	self.top.after_idle(self.set_ivars,c)
	c.tree.recolor(v)
	# print self.print_ivars()
	
def print_ivars (self):
	
	for var in ivars:
		trace(var, getattr(self,var))</t>
<t tx="edream.110203161858.1744"># Global options
w = self.pageWidthText.get("1.0","end")
w = string.strip(w)
try:
	self.page_width = abs(int(w))
except:
	self.page_width = default_page_width
	
w = self.tabWidthText.get("1.0","end")
w = string.strip(w)
try:
	self.tab_width = abs(int(w))
	if self.replace_tabs_var.get(): # 1/30/03
		self.tab_width = - abs(self.tab_width)
	# print self.tab_width
except:
	self.tab_width = default_tab_width

self.tangle_batch_flag = self.tangle_batch_var.get()
self.untangle_batch_flag = self.untangle_batch_var.get()

# Default Tangle options
dir = self.tangleDirectoryText.get("1.0","end")
self.tangle_directory = string.strip(dir)

self.use_header_flag = self.use_header_var.get()
self.output_doc_flag = self.output_doc_var.get()

# Default Target Language
self.target_language = self.lang_var.get()
</t>
<t tx="edream.110203161858.1745"># This event handler gets executed when the user choose a new default language.

def set_lang (self):
	
	c = top() ; v = c.currentVnode()
	language = self.lang_var.get()
	c.target_language = self.target_language = language
	c.tree.recolor(v)
	# print "set_lang",language</t>
<t tx="edream.110203161858.1746">def onOK (self):
	app().config.setConfigIvars(self.commands)
	app().config.update()
	if 1: # Hide the window, preserving its position.
		self.top.withdraw()
	else: # works.
		self.commands.frame.prefsPanel = None
		self.top.destroy()
	
def onCancel (self):
	c = self.commands
	&lt;&lt; restore options &gt;&gt;
	self.init(c)
	self.set_ivars(c)
	if 1: # Hide the window, preserving its position.
		self.top.withdraw()
	else: # works.
		self.commands.frame.prefsPanel = None
		self.top.destroy()

def onRevert (self):
	c = self.commands
	&lt;&lt; restore options &gt;&gt;
	self.init(c)
	self.set_ivars(c)</t>
<t tx="edream.110203161858.1747"># Global options
c.tangle_batch_flag = self.revert_tangle_batch_flag
c.untangle_batch_flag = self.revert_untangle_batch_flag
c.page_width = self.revert_page_width
c.tab_width = self.revert_tab_width

# Default Tangle Options
c.tangle_directory = self.revert_tangle_directory
c.output_doc_flag = self.revert_output_doc_flag
c.use_header_flag = self.revert_use_header_flag

# Default Target Language
c.target_language = self.revert_target_language</t>
<t tx="edream.110203161858.1748">@language python

# Tangle and Untangle.

from leoGlobals import *
import os,string

&lt;&lt; about Tangle and Untangle &gt;&gt;
&lt;&lt; constants &amp; synonyms &gt;&gt;

@others</t>
<t tx="edream.110203161858.1749">@ The Tangle command translates the selected @root tree into one or more well-formatted C source files. The outline should contain directives, sections references and section definitions, as described in Chapter 4. The Untangle command is essentially the reverse of the Tangle command. The Tangle command creates a derived file from an @root tree; the Untangle command incorporates changes made to derived files back into the @root tree.

The Tangle command operates in two passes. The first pass discovers the complete definitions of all sections and places these definitions in a symbol table. The first pass also makes a list of root sections. Definitions can appear in any order, so we must scan the entire input file to know whether any particular definition has been completed.

Tangle's second pass creates one file for each @root node. Tangle rescans each section in the list of roots, copying the root text to the output and replacing each section reference by the section's definition. This is a recursive process because any definition may contain other references. We can not allow a section to be defined in terms of itself, either directly or indirectly. We check for such illegally recursive definitions in pass 2 using the section stack class.  Tangle indicates where sections begin and end using comment lines called sentinel lines.  The this part of the appendix discusses the format of the sentinels output by the Tangle command.

The key design principle of the Tangle command is this: Tangle must output newlines in a context-free manner. That is, Tangle must never output conditional newlines, either directly or indirectly. Without this rule Untangle could not determine whether to skip or copy newlines.

The Tangle command increases the indentation level of a section expansion the minimum necessary to align the section expansion with the surrounding code. In essence, this scheme aligns all section expansions with the line of code in which the reference to the section occurs. In some cases, several nested sections expansions will have the same indentation level. This can occur, for example, when a section reference in an outline occurs at the left margin of the outline.

This scheme is probably better than more obvious schemes that indent more "consistently." Such schemes would produce too much indentation for deeply nested outlines. The present scheme is clear enough and avoids indentation wherever possible, yet indents sections adequately. End sentinel lines make this scheme work by making clear where the expansion of one section ends and the expansion of a containing section resumes.

Tangle increases indentation if the section reference does not start a line. Untangle is aware of this hack and adjusts accordingly. This extra indentation handles several common code idioms, which otherwise would create under-indented code. In short, Tangle produces highly readable, given the necessity of preserving newlines for Untangle.

Untangle is inherently complex.  It must do a perfect job of updating the outline, especially whitespace, from expansions of section definitions created by the Tangle command.  Such expansions need not be identical because they may have been generated at different levels of indentation.  The Untangle command can not assume that all expansions of a section will be identical in the derived file; within the derived file, the programmer may have made incompatible changes to two different expansions of the same section. Untangle must check to see that all expansions of a section are "equivalent".  As an added complication, derived files do not contain all the information found in @root trees.  @root trees may contain headlines that generate no code at all.  Also, an outline may define a section in several ways: with an @c or @code directive or with a section definition line.  To be useful, Untangle must handle all these complications flawlessly. The appendix discusses the various conventions used in the sentinels output by the Tangle command.  These conventions allow the Untangle command to recreate whitespace correctly.

Untangle operates in two passes. The first pass finds definitions in the derived file and enters them into the Untangle Symbol Table, or UST.   Definitions often include references to other sections, so definitions often include nested definitions of referenced sections. The first pass of Untangle uses a definition stack to keep track of nested definitions. The top of the stack represents the definition following the latest reference, except for the very first entry pushed on the stack, which represents the code in the outline that contains the @root directive. The stack never becomes empty because of the entry for the @root section. All definitions of a section should match--otherwise there is an inconsistent definition. This pass uses a forgiving compare routine that ignores differences that do not affect the meaning of a program.

Untangle's second pass enters definitions from the outline into the Tangle Symbol Table, or TST. The second pass simultaneously updates all sections in the outline whose definition in the TST does not match the definition in the UST.  The central coding insight of the Untangle command is that the second pass of Untangle is almost identical to the first pass of Tangle! That is, Tangle and Untangle share key parts of code, namely the skip_body() method and its allies.  Just when skip_body() enters a definition into the symbol table, all the information is present that Untangle needs to update that definition.
</t>
<t tx="edream.110203161858.1750"># Synonyms for multiple_parts_flag.
allow_multiple_parts = 1
disallow_multiple_parts = 2
unused_parts_flag = 3

# Synonyms for is_root_flag to st_enter.
is_root_name = 1 ; not_root_name = 0

# Synonyms for scanAllDirectives
report_errors = 1 ; dont_report_errors = 0
require_path = 1 ; done_require_path = 0

# Constants...
max_errors = 20

@ All these must be defined together, because they form a single enumeration.  Some of these are used by utility functions.
@c

if 1: # A single enum...

	# Used by token_type().
	plain_line = 1 # all other lines
	at_at	     = 2 # double-at sign.
	at_chapter = 3 # @chapter
	# at_c       = 4 # @c in noweb mode
	at_code	   = 5 # @code, or @c or @p in CWEB mode.
	at_doc	    = 6 # @doc
	at_other   = 7 # all other @directives
	at_root	   = 8 # @root or noweb * sections
	at_section = 9 # @section
	# at_space   = 10 # @space
	at_web	    = 11 # any CWEB control code, except at_at.
	
	# Returned by self.skip_section_name() and allies and used by token_type.
	bad_section_name = 12  # &lt; &lt; with no matching &gt; &gt;
	section_ref	 = 13  # &lt; &lt; name &gt; &gt;
	section_def	 = 14  # &lt; &lt; name &gt; &gt; =
	
	# Returned by is_sentinal_line.
	non_sentinel_line   = 15
	start_sentinel_line = 16
	end_sentinel_line   = 17
	
	# Stephen P. Schaefer 9/13/2002
	# add support for @first
	at_last    = 18
</t>
<t tx="edream.110203161858.1751"></t>
<t tx="edream.110203161858.1752">class tst_node:
	@others</t>
<t tx="edream.110203161858.1753">def __init__ (self,name,root_flag):

	# trace("tst_node.__init__" + `name`)
	self.name = name
	self.is_root = root_flag
	self.referenced = false
	self.parts = []</t>
<t tx="edream.110203161858.1754">def __repr__ (self):

	return "tst_node:" + self.name</t>
<t tx="edream.110203161858.1755">class part_node:
	@others</t>
<t tx="edream.110203161858.1756">def __init__ (self,name,code,doc,is_root,is_dirty):

	# trace("part_node.__init__" + `name`)
	self.name = name # Section or file name.
	self.code = code # The code text.
	self.doc = doc # The doc text.
	self.is_dirty = is_dirty # true: vnode for body text is dirty.
	self.is_root = is_root # true: name is a root name.</t>
<t tx="edream.110203161858.1757">def __repr__ (self):

	return "part_node:" + self.name</t>
<t tx="edream.110203161858.1758">class ust_node:
	@others</t>
<t tx="edream.110203161858.1759">@ The text has been masssaged so that 1) it contains no leading indentation and 2) all code arising from section references have been replaced by the reference line itself.  Text for all copies of the same part can differ only in non-critical white space.
@c

def __init__ (self,name,code,part,of,nl_flag,update_flag):

	# trace("ust_node.__init__", `name` +":"+ `part`)
	self.name = name # section name
	self.parts = {} # parts dict
	self.code = code # code text
	self.part = part # n in "(part n of m)" or zero.
	self.of = of  # m in "(part n of m)" or zero.
	self.nl_flag = nl_flag  # true: section starts with a newline.
	self.update_flag = update_flag # true: section corresponds to a section in the outline.</t>
<t tx="edream.110203161858.1760">def __repr__ (self):

	return "ust_node:" + self.name</t>
<t tx="edream.110203161858.1761">class def_node:
	@others</t>
<t tx="edream.110203161858.1762">@ The text has been masssaged so that 1) it contains no leading indentation and 2) all code arising from section references have been replaced by the reference line itself.  Text for all copies of the same part can differ only in non-critical white space.
@c

def __init__ (self,name,indent,part,of,nl_flag,code):

	if 0:
		trace("def_node.__init__",
			"name:" + name + ", part:" + `part` + ", of:" + `of` + ", indent:" + `indent`)
	self.name = name
	self.indent = indent
	self.code = code
	if self.code == None: self.code = ""
	self.part = part
	self.of = of
	self.nl_flag = nl_flag</t>
<t tx="edream.110203161858.1763">def __repr__ (self):

	return "def_node:" + self.name</t>
<t tx="edream.110203161858.1764">@doc Stephen P. Schaefer, 9/2/2002
Collect the root node specific attributes in an
easy-to-use container.
@code
class root_attributes:
	@others</t>
<t tx="edream.110203161858.1765">@ Stephen P. Schaefer, 9/2/2002
Keep track of the attributes of a root node
@c

def __init__ (self, tangle_state):

	if 0:
		&lt;&lt; trace the state &gt;&gt;
	self.language = tangle_state.language
	self.single_comment_string = tangle_state.single_comment_string
	self.start_comment_string = tangle_state.start_comment_string
	self.end_comment_string = tangle_state.end_comment_string
	self.use_header_flag = tangle_state.use_header_flag
	self.print_mode = tangle_state.print_mode
	
	# of all the state variables, this one isn't set in tangleCommands.__init__
	# peculiar
	try:
		self.path = tangle_state.path
	except AttributeError:
		self.path = None
	
	self.page_width = tangle_state.page_width
	self.tab_width = tangle_state.tab_width
	self.first_lines = tangle_state.first_lines # Stephen P. Schaefer 9/13/2002</t>
<t tx="edream.110203161858.1766">try:
	if tangle_state.path: pass
except AttributeError:
	tangle_state.path = None
	
trace("def_root_attribute.__init__",
	"language:" + tangle_state.language +
	", single_comment_string: " + tangle_state.single_comment_string +
	", start_comment_string: " + tangle_state.start_comment_string +
	", end_comment_string: " + tangle_state.end_comment_string +
	", use_header_flag: " + choose(tangle_state.use_header_flag, "true", "false") +
	", print_mode: " + tangle_state.print_mode +
	", path: " + choose(tangle_state.path, tangle_state.path, "") +
	", page_width: " + tangle_state.page_width +
	", tab_width: " + tangle_state.tab_width +
	# Stephen P. Schaefer 9/13/2002
	", first_lines: " + tangle_state.first_lines)</t>
<t tx="edream.110203161858.1767">def __repr__ (self):

	return ("root_attributes: language: " + self.language +
		", single_comment_string: " + self.single_comment_string +
		", start_comment_string: " +	self.start_comment_string +
		", end_comment_string: " +	self.end_comment_string +
		", use_header_flag: " + choose(self.use_header_flag, "true", "false") +
		", print_mode: " + self.print_mode +
		", path: " + self.path +
		", page_width: " + self.page_width +
		", tab_width: " + self.tab_width +
		# Stephen P. Schaefer 9/13/2002
		", first_lines: " + self.first_lines)
</t>
<t tx="edream.110203161858.1768">class baseTangleCommands:
	"""The base class for Leo's tangle and untangle commands."""
	@others
	
class tangleCommands (baseTangleCommands):
	"""A class that implements Leo' tangle and untangle commands."""
	pass</t>
<t tx="edream.110203161858.1769">def __init__ (self,commands):

	self.commands = commands
	self.init_ivars()</t>
<t tx="edream.110203161858.1770"># Called by __init__

def init_ivars(self):

	c = self.commands
	&lt;&lt; init tangle ivars &gt;&gt;
	&lt;&lt; init untangle ivars &gt;&gt;
	
# Called by scanAllDirectives

def init_directive_ivars (self):

	c = self.commands
	&lt;&lt; init directive ivars &gt;&gt;</t>
<t tx="edream.110203161858.1771"># Various flags and counts...

self.errors = 0 # The number of errors seen.
self.tangling = true # true if tangling, false if untangling.
self.path_warning_given = false # true: suppress duplicate warnings.
self.tangle_indent = 0 # Level of indentation during pass 2, in spaces.
self.file_name = c.frame.mFileName # The file name (was a bridge function)
self.v = None # vnode being processed.
self.output_file = None # The file descriptor of the output file.
self.start_mode = "doc" # "code" or "doc".  Use "doc" for compatibility.
self.tangle_default_directory = None # Default directory set by scanAllDirectives.

@ Symbol tables: the TST (Tangle Symbol Table) contains all section names in the outline. The UST (Untangle Symbol Table) contains all sections defined in the derived file.
@c
self.tst = {}
self.ust = {}

# The section stack for Tangle and the definition stack for Untangle.
self.section_stack = []
self.def_stack = []

@ The list of all roots. The symbol table routines add roots to self list during pass 1. Pass 2 uses self list to generate code for all roots.
@c
self.root_list = []

# The delimiters for comments created by the @comment directive.
self.single_comment_string = "//"  # present comment delimiters.
self.start_comment_string = "/*"
self.end_comment_string = "*/"
self.sentinel = None

# The filename following @root in a headline.
# The code that checks for &lt; &lt; * &gt; &gt; = uses these globals.
self.root = None
self.root_name = None

# Formerly the "tangle private globals"
# These save state during tangling and untangling.
# It is possible that these will be removed...
if 1:
	self.head_root = None
	self.code = None
	self.doc = None
	self.header_name = None
	self.header = None
	self.section_name = None

@ The following records whether we have seen an @code directive in a body text.
If so, an @code represents &lt; &lt; header name &gt; &gt; = and it is valid to continue a section definition.
@c
self.code_seen = false # true if @code seen in body text.

# Support of output_newline option
self.output_newline = getOutputNewline()</t>
<t tx="edream.110203161858.1772">@ Untangle vars used while comparing.
@c
self.line_comment = self.comment = self.comment_end = None
self.comment2 = self.comment2_end = None
self.string1 = self.string2 = self.verbatim = None
self.message = None # forgiving compare message.</t>
<t tx="edream.110203161858.1773">if 0: # not used in this version of Leo
	self.allow_rich_text = default_allow_rich_text
	self.extended_noweb_flag = default_extended_noweb_flag
	self.target_language = default_target_language # uses c.target_lanuage instead
	
# Global options
self.page_width = c.page_width
self.tab_width = c.tab_width
self.tangle_batch_flag = c.tangle_batch_flag
self.untangle_batch_flag = c.untangle_batch_flag

# Default tangle options.
self.tangle_directory = None # Initialized by scanAllDirectives
self.output_doc_flag = c.output_doc_flag
self.use_header_flag = c.use_header_flag

# Default tangle language
self.language = c.target_language
delim1,delim2,delim3 = set_delims_from_language(self.language)
# print `delim1`,`delim2`,`delim3`

# 8/1/02: this now works as expected.
self.single_comment_string = delim1
self.start_comment_string = delim2
self.end_comment_string = delim3

# Abbreviations for self.language.
# Warning: these must also be initialized in tangle.scanAllDirectives.
if 1: # 10/30/02: Don't change the code, just ignore @language cweb.
	self.use_cweb_flag = false
	self.raw_cweb_flag = self.language == "cweb" # A new ivar.
else:
	self.use_cweb_flag = self.language == "cweb"
	self.raw_cweb_flag = false # was never used before.

self.use_noweb_flag = not self.use_cweb_flag

# Set only from directives.
self.print_mode = "verbose"

# Stephen P. Schaefer 9/13/2002
# support @first directive
self.first_lines = ""
self.encoding = app().config.default_derived_file_encoding # 2/21/03
self.output_newline = getOutputNewline() # 4/24/03: initialize from config settings.</t>
<t tx="edream.110203161858.1774">@ Only top-level drivers initialize ivars.
</t>
<t tx="edream.110203161858.1775"># This code is called from tangleTree and untangleTree.

def cleanup (self):
	
	if self.errors == 0:
		&lt;&lt; call tangle_done.run() or untangle_done.run() &gt;&gt;

	# Reinitialize the symbol tables and lists.
	self.tst = {}
	self.ust = {}
	self.root_list = []
	self.def_stack = []</t>
<t tx="edream.110203161858.1776"># Create a list of root names:
root_names = []
dir = self.tangle_directory # Bug fix: 12/04/02
if not dir: dir = ""
for section in self.root_list:
	for part in section.parts:
		if part.is_root:
			root_names.append(os.path.join(dir,part.name))

if self.tangling and self.tangle_batch_flag:
	try:
		import tangle_done
		tangle_done.run(root_names)
	except:
		es("Can not execute tangle_done.run()")
		es_exception()
if not self.tangling and self.untangle_batch_flag:
	try:
		import untangle_done
		untangle_done.run(root_names)
	except:
		es("Can not execute tangle_done.run()")
		es_exception()</t>
<t tx="edream.110203161858.1777">def initTangleCommand (self):

	c = self.commands
	c.endEditing()
	
	es("Tangling...")
	c.setIvarsFromPrefs()
	self.init_ivars()
	self.tangling = true</t>
<t tx="edream.110203161858.1778">def initUntangleCommand (self):

	c = self.commands
	c.endEditing()
	
	es("Untangling...")
	c.setIvarsFromPrefs()
	self.init_ivars()
	self.tangling = false</t>
<t tx="edream.110203161858.1779">def tangle(self):

	c = self.commands ; v = c.currentVnode()
	self.initTangleCommand()
	self.tangleTree(v,report_errors)
	es("Tangle complete")</t>
<t tx="edream.110203161858.1780">def tangleAll(self):

	c = self.commands ; v = c.rootVnode()
	self.initTangleCommand()
	has_roots = false

	while v:
		ok = self.tangleTree(v,dont_report_errors)
		if ok: has_roots = true
		if self.path_warning_given:
			break # Fatal error.
		v = v.next()

	if not has_roots:
		self.warning("----- The outline contains no roots")
	elif self.errors &gt; 0 and not self.path_warning_given:
		self.warning("----- Tangle halted because of errors")
	else:
		es("Tangle complete")</t>
<t tx="edream.110203161858.1781">def tangleMarked(self):

	c = self.commands ; v = c.rootVnode()
	c.clearAllVisited() # No roots have been tangled yet.
	self.initTangleCommand()
	any_marked = false

	while v:
		is_ignore, i = is_special(v.bodyString(),0,"@ignore")
		# Only tangle marked and unvisited nodes.
		if is_ignore:
			v = v.nodeAfterTree()
		elif v.isMarked():
			ok = self.tangleTree(v,dont_report_errors)
			if ok: any_marked = true
			if self.path_warning_given:
				break # Fatal error.
			v = v.nodeAfterTree()
		else: v = v.threadNext()

	if not any_marked:
		self.warning("----- The outline contains no marked roots")
	elif self.errors &gt; 0 and not self.path_warning_given:
		self.warning("----- Tangle halted because of errors")
	else:
		es("Tangle complete")</t>
<t tx="edream.110203161858.1782">@ This is the main routine of pass 1. It traverses the tree whose root is given, handling each headline and associated body text.
@c

def tanglePass1(self,v):

	next = v.nodeAfterTree()
	
	while v and v != next:
		self.v = v
		self.setRootFromHeadline(v)
		dict = get_directives_dict(v.bodyString(),[self.head_root])
		is_ignore = dict.has_key("ignore")
		if is_ignore:
			v = v.nodeAfterTree()
			continue
		# This must be called after root_name has been set.
		if self.tangling:
			self.scanAllDirectives(v,require_path,report_errors) # calls init_directive_ivars.
		# Scan the headline and body text.
		self.skip_headline(v)
		self.skip_body(v)
		v = v.threadNext()
		if self.errors &gt;= max_errors:
			self.warning("----- Halting Tangle: too many errors")
			break

	if self.tangling:
		self.st_check()
		# trace(self.st_dump(verbose_flag=true))</t>
<t tx="edream.110203161858.1783"># At this point v is the root of the tree that has been tangled.

def tanglePass2(self):

	self.v = None # self.v is not valid in pass 2.

	if self.errors &gt; 0:
		self.warning("----- No file written because of errors")
	elif self.root_list == None:
		self.warning("----- The outline contains no roots")
	else:
		self.put_all_roots() # pass 2 top level function.</t>
<t tx="edream.110203161858.1784">@ This funtion tangles all nodes in the tree whose root is v. It reports on its results if report_flag is true.

This function is called only from the top level, so there is no need to initialize globals.
@c

def tangleTree(self,v,report_flag):

	assert(v)
	any_root_flag = false
	next = v.nodeAfterTree()
	self.path_warning_given = false

	while v and v != next:
		self.setRootFromHeadline(v)
		dict = get_directives_dict(v.bodyString(),[self.head_root])
		is_ignore = dict.has_key("ignore")
		is_root = dict.has_key("root")
		is_unit = dict.has_key("unit")
		if is_ignore:
			v = v.nodeAfterTree()
		elif not is_root and not is_unit:
			v = v.threadNext()
		else:
			self.tanglePass1(v) # sets self.v
			if self.root_list and self.tangling:
				any_root_flag = true
				self.tanglePass2() # self.v invalid in pass 2.
			self.cleanup()
			v = v.nodeAfterTree()
			if self.path_warning_given: break # Fatal error.

	if self.tangling and report_flag and not any_root_flag:
		# This is done by Untangle if we are untangling.
		self.warning("----- The outline contains no roots")
	return any_root_flag</t>
<t tx="edream.110203161858.1785">def untangle(self):

	c = self.commands ; v = c.currentVnode()
	self.initUntangleCommand()
	
	c.beginUpdate()
	self.untangleTree(v,report_errors)
	c.endUpdate()
	es("Untangle complete")</t>
<t tx="edream.110203161858.1786">def untangleAll(self):

	c = self.commands ; v = c.rootVnode()
	self.initUntangleCommand()
	has_roots = false

	c.beginUpdate()
	while v:
		ok = self.untangleTree(v,false)
		if ok: has_roots = true
		v = v.next()
	c.endUpdate()
	
	if not has_roots:
		self.warning("----- The outline contains no roots")
	elif self.errors &gt; 0:
		self.warning("----- Untangle command halted because of errors")
	else:
		es("Untangle complete")</t>
<t tx="edream.110203161858.1787">def untangleMarked(self):

	c = self.commands ; v = c.rootVnode()
	self.initUntangleCommand()
	marked_flag = false

	c.beginUpdate()
	while v:
		if v.isMarked():
			ok = self.untangleTree(v,dont_report_errors)
			if ok: marked_flag = true
			if self.errors &gt; 0: break
			v = v.nodeAfterTree()
		else: v = v.threadNext()
	c.endUpdate()

	if not marked_flag:
		self.warning("----- The outline contains no marked roots")
	elif self.errors &gt; 0:
		self.warning("----- Untangle command halted because of errors")
	else:
		es("Untangle complete")</t>
<t tx="edream.110203161858.1788">@ This method untangles the derived files in a vnode known to contain at least one @root directive. The work is done in two passes. The first pass creates the UST by scanning the derived file. The second pass updates the outline using the UST and a TST that is created during the pass.

We assume that all sections from root to end are contained in the derived file, and we attempt to update all such sections. The begin/end params indicate the range of nodes to be scanned when building the TST.
@c

def untangleRoot(self,root,begin,end):

	# trace("root,begin,end:" + `root` + `begin` + `end`)
	&lt;&lt; Set path &amp; root_name to the file specified in the @root directive &gt;&gt;
	&lt;&lt; return if @silent or unknown language &gt;&gt;
	&lt;&lt; Read the file into file_buf &gt;&gt;
	es("@root " + path)
	# Pass 1: Scan the C file, creating the UST
	self.scan_derived_file(file_buf)
	# trace(self.ust_dump())
	if self.errors == 0:
		&lt;&lt; Pass 2: Untangle the outline using the UST and a newly-created TST &gt;&gt;
	self.cleanup()</t>
<t tx="edream.110203161858.1789">if self.language == "unknown":
	es("**Unknown language for " + path)
	return

if self.print_mode in ("quiet","silent"):
	es("@" + self.print_mode +  " inhibits untangle for " + path)
	return
</t>
<t tx="edream.110203161858.1790">s = root.bodyString()
i = 0
while i &lt; len(s):
	code, junk = self.token_type(s,i,report_errors)
	if code == at_root:
		# token_type sets root_name unless there is a syntax error.
		if self.root_name: path = self.root_name
		break
	else: i = skip_line(s,i)
	
if not self.root_name:
	# A bad @root command.  token_type has already given an error.
	self.cleanup()
	return</t>
<t tx="edream.110203161858.1791">f = None
try:
	path = os.path.join(self.tangle_directory,path)
	f = open(path)
	if f:
		file_buf = f.read()
		file_buf = string.replace(file_buf,body_ignored_newline,'')
except:
	if f: f.close()
	es("error reading: " + path)
	es_exception()
	self.cleanup()
	return</t>
<t tx="edream.110203161858.1792">@ This code untangles the root and all its siblings. We don't call tangleTree here because we must handle all siblings.  tanglePass1 handles an entire tree.  It also handles @ignore.
@c

v = begin
while v and v != end:
	self.tanglePass1(v)
	if self.errors != 0:
		break
	v = v.nodeAfterTree()

self.ust_warn_about_orphans()</t>
<t tx="edream.110203161858.1793"># This funtion is called when the user selects any "Untangle" command.

def untangleTree(self,v,report_flag):

	# trace(`v`)
	c = self.commands
	any_root_flag = false
	afterEntireTree = v.nodeAfterTree()
	# Initialize these globals here: they can't be cleared later.
	self.head_root = None
	self.errors = 0
	c.clearAllVisited() # Used by untangle code.

	while v and v != afterEntireTree and self.errors == 0:
		self.setRootFromHeadline(v)
		dict = get_directives_dict(v.bodyString(),[self.head_root])
		ignore = dict.has_key("ignore")
		root = dict.has_key("root")
		unit = dict.has_key("unit")
		if ignore:
			v = v.nodeAfterTree()
		elif unit:
			# Expand the context to the @unit directive.
			unitNode = v   # 9/27/99
			afterUnit = v.nodeAfterTree()
			v = v.threadNext()
			while v and v != afterUnit and self.errors == 0:
				self.setRootFromHeadline(v)
				dict = get_directives_dict(v.bodyString(),[self.head_root])
				root = dict.has_key("root")
				if root:
					any_root_flag = true
					end = None
					&lt;&lt; set end to the next root in the unit &gt;&gt;
					# trace("end:" + `end`)
					self.scanAllDirectives(v,require_path,report_errors)
					self.untangleRoot(v,unitNode,afterUnit)
					v = end
				else: v = v.threadNext()
		elif root:
			# Limit the range of the @root to its own tree.
			afterRoot = v.nodeAfterTree()
			any_root_flag = true
			self.scanAllDirectives(v,require_path,report_errors)
			self.untangleRoot(v,v,afterRoot) # 9/27/99
			v = afterRoot
		else:
			v = v.threadNext()
	if report_flag:
		if not any_root_flag:
			self.warning("----- The outline contains no roots")
		elif self.errors &gt; 0:
			self.warning("----- Untangle command halted because of errors")
	return any_root_flag</t>
<t tx="edream.110203161858.1794">@ The untangle_root function will untangle an entire tree by calling untangleTree, so the following code ensures that the next @root node will not be an offspring of v.
@c

end = v.threadNext()
while end and end != afterUnit:
	flag, i = is_special(end.bodyString(),0,"@root")
	if flag and not v.isAncestorOf(end):
		break
	end = end.threadNext()
</t>
<t tx="edream.110203161858.1795"></t>
<t tx="edream.110203161858.1796"></t>
<t tx="edream.110203161858.1797">@ This method handles newline processing while skipping a code section. It sets 'done' if the line contains an @directive or section definition that terminates the present code section. On entry: i should point to the first character of a line.  This routine scans past a line only if it could not contain a section reference.

Returns (i, done)
@c

def handle_newline(self,s,i):

	j = i ; done = false
	kind, end = self.token_type(s,i,dont_report_errors)
	# token_type will not skip whitespace in noweb mode.
	i = skip_ws(s,i)
	# trace(`kind` + "," + `get_line(s,i)`)

	if kind == plain_line:
		pass
	elif (kind == at_code or kind == at_doc or
		kind == at_root or kind == section_def):
		i = j ; done = true # Terminate this code section and rescan.
	elif kind == section_ref:
		# Enter the reference.
		ref = s[i:end]
		self.st_enter_section_name(ref,None,None,unused_parts_flag)
	# DTHEIN 13-OCT-2002: @first directives are OK in code sections
	elif (kind == at_other) and match_word(s,j,"@first"):
		pass
	elif kind == at_other or kind == at_chapter or kind == at_section:
		# We expect to see only @doc,@c or @root directives
		# while scanning a code section.
		i = skip_to_end_of_line(s,i)
		if 0: # 12/03/02: no longer needed
			self.error("directive not valid here: " + s[j:i])
	elif kind == bad_section_name:
		if self.use_cweb_flag:
			i = skip_to_end_of_line(s,i)
	elif kind == at_web or kind == at_at:
		i += 2 # Skip a CWEB control code.
	else: assert(false)

	return i, done</t>
<t tx="edream.110203161858.1798"># This method handles all the body text.

def skip_body (self,v):

	# trace(`v`)
	s = v.bodyString()
	code_seen = false ; code = doc = None ; i = 0
	anyChanged = false
	
	if self.start_mode == "code":
		j = skip_blank_lines(s,i)
		i,code = self.skip_code(s,j)
		if code:
			&lt;&lt; Define a section for a leading code part &gt;&gt;

	if not code:
		i,doc = self.skip_doc(s,i) # Start in doc section by default.
		if i &gt;= len(s) and doc:
			&lt;&lt; Define a section containing only an @doc part &gt;&gt;

	while i &lt; len(s):
		progress = i # progress indicator
		# line = get_line(s,i) ; trace(`line`)
		kind, end = self.token_type(s,i,report_errors)
		# if is_nl(s,i): i = skip_nl(s,i)
		i = skip_ws(s,i)
		if kind == section_def:
			&lt;&lt; Scan and define a section definition &gt;&gt;
		elif kind == at_code:
			if self.use_cweb_flag:
				i += 2 # Skip the at-c or at-p
			else:
				i = skip_line(s,i)
			&lt;&lt; Scan and define an @code defininition &gt;&gt;
		elif kind == at_root:
			i = skip_line(s,i)
			&lt;&lt; Scan and define a root section &gt;&gt;
		elif kind == at_doc:
			if self.use_cweb_flag:
				i += 2 # Skip the at-space
			else:
				i = skip_line(s,i)
			i, doc = self.skip_doc(s,i)
		elif kind == at_chapter or kind == at_section:
			i = skip_line(s,i)
			i, doc = self.skip_doc(s,i)
		else:
			i = skip_line(s,i)
		assert(progress &lt; i) # we must make progress!
	# 3/4/02: Only call v.trimTrailingLines if we have changed its body.
	if anyChanged:
		v.trimTrailingLines()</t>
<t tx="edream.110203161858.1799">@ The following subsections contain the interface between the Tangle and Untangle commands.  This interface is an important hack, and allows Untangle to avoid duplicating the logic in skip_tree and its allies.

The aha is this: just at the time the Tangle command enters a definition into the symbol table, all the information is present that Untangle needs to update that definition.

To get whitespace exactly right we retain the outline's leading whitespace and remove leading whitespace from the updated definition.
</t>
<t tx="edream.110203161858.1800">@ It's valid for an @doc directive to appear under a headline that does not contain a section name.  In that case, no section is defined.
@c

if self.header_name:
	# Tangle code.
	flag = choose(code_seen,allow_multiple_parts,disallow_multiple_parts)
	part = self.st_enter_section_name(self.header_name,code,doc,flag)
	# Untangle code.
	if not self.tangling: 
		# Untangle no longer updates doc parts.
		# 12/03/02: Mark the part as having been updated to suppress warning.
		junk,junk = self.ust_lookup(self.header_name,
			part,not_root_name,true) # set update flag

doc = None</t>
<t tx="edream.110203161858.1801">if self.header_name:
	# Tangle code.
	flag = choose(code_seen,allow_multiple_parts,disallow_multiple_parts)
	part = self.st_enter_section_name(self.header_name,code,doc,flag)
	# Untangle code.
	if not self.tangling: 
		head = s[:j] ; tail = s[i:]
		s,i,changed = self.update_def(self.header,part,head,code,tail,not_root_name)
		if changed: anyChanged = true
	code_seen = true
	code = doc = None</t>
<t tx="edream.110203161858.1802"># We enter the code part and any preceding doc part into the symbol table.

# Skip the section definition line.
k = i ; i, kind, junk = self.skip_section_name(s,i)
section_name = s[k:i]
# trace(`section_name`)
assert(kind == section_def)
i = skip_to_end_of_line(s,i)

# Tangle code: enter the section name even if the code part is empty.
j = skip_blank_lines(s,i)
i, code = self.skip_code(s,j)
flag = choose(kind==section_def,allow_multiple_parts,disallow_multiple_parts)
part = self.st_enter_section_name(section_name,code,doc,flag)
		
if not self.tangling: # Untangle code.
	head = s[:j] ; tail = s[i:]
	s,i,changed = self.update_def(section_name,part,head,code,tail,not_root_name)
	if changed: anyChanged = true
	
code = doc = None</t>
<t tx="edream.110203161858.1803"># All @c or @code directives denote &lt; &lt; headline_name &gt; &gt; =
if self.header_name:

	# Tangle code.
	j = skip_blank_lines(s,i)
	i, code = self.skip_code(s,j)
	flag = choose(code_seen,allow_multiple_parts,disallow_multiple_parts)
	part = self.st_enter_section_name(self.header_name,code,doc,flag)
	if not self.tangling: # Untangle code.
		head = s[:j] ; tail = s[i:]
		s,i,changed = self.update_def(self.header,part,head,code,tail,not_root_name)
		if changed: anyChanged = true
else:
	self.error("@c expects the headline: " + self.header + " to contain a section name")

code_seen = true
code = doc = None</t>
<t tx="edream.110203161858.1804"># We save the file name in case another @root ends the code section.
old_root_name = self.root_name

# Tangle code.
j = skip_blank_lines(s,i)
k, code = self.skip_code(s,j)

# Stephen Schaefer, 9/2/02, later
# st_enter_root_name relies on scanAllDirectives to have set
# the root attributes, such as language, *_comment_string,
# use_header_flag, etc.
self.st_enter_root_name(old_root_name,code,doc)

if not self.tangling: # Untangle code.
	part = 1 # Use 1 for root part.
	head = s[:j] ; tail = s[k:]
	s,i,changed = self.update_def(old_root_name,part,head,code,tail,is_root_name)
	if changed: anyChanged = true
	
code = doc = None</t>
<t tx="edream.110203161858.1805">@ This method skips an entire code section. The caller is responsible for entering the completed section into the symbol table. On entry, i points at the line following the @directive or section definition that starts a code section. We skip code until we see the end of the body text or the next @ directive or section defintion that starts a code or doc part.
@c

def skip_code(self,s,i):

	# trace(`get_line(s,i)`)
	code1 = i
	nl_i = i # For error messages
	done = false # true when end of code part seen.
	if self.use_noweb_flag:
		&lt;&lt; skip a noweb code section &gt;&gt;
	else:
		&lt;&lt; skip a CWEB code section &gt;&gt;
	code = s[code1:i]
	# trace(returns: + `code`)
	return i,code</t>
<t tx="edream.110203161858.1806">@ This code handles the following escape conventions: double at-sign at the start of a line and at-&lt;&lt; and at.&gt;.
@c

i, done = self.handle_newline(s,i)
while not done and i &lt; len(s):
	ch = s[i]
	if is_nl(s,i):
		nl_i = i = skip_nl(s,i)
		i, done = self.handle_newline(s,i)
	elif ch == '@' and (match(s,i+1,"&lt;&lt;") or # must be on different lines
		match(s,i+1,"&gt;&gt;")):
		i += 3 # skip the noweb escape sequence.
	elif ch == '&lt;':
		&lt;&lt; handle possible noweb section reference &gt;&gt;
	else: i += 1</t>
<t tx="edream.110203161858.1807">j, kind, end = self.is_section_name(s,i)
if kind == section_def:
	k = skip_to_end_of_line(s,i)
	# We are in the middle of a line.
	i += 1
	self.error("chunk definition not valid here\n" + s[nl_i:k])
elif kind == bad_section_name:
	i += 1 # This is not an error.  Just skip the '&lt;'.
else:
	assert(kind == section_ref)
	# Enter the reference into the symbol table.
	name = s[i:end]
	self.st_enter_section_name(name,None,None,unused_parts_flag)
	i = end</t>
<t tx="edream.110203161858.1808"># This code is simple because CWEB control codes are valid anywhere.

while not done and i &lt; len(s):
	if s[i] == '@':
		&lt;&lt; handle CWEB control code &gt;&gt;
	else: i += 1</t>
<t tx="edream.110203161858.1809">j, kind, end = self.is_section_name(s,i)

if kind == section_def:
	done = true
elif kind == bad_section_name:
	i += 2 # Any other control code.
else:
	assert(kind == section_ref)
	# Enter the reference into the symbol table.
	name = s[i:j]
	self.st_enter_section_name(name,None,None,unused_parts_flag)
	i = j</t>
<t tx="edream.110203161858.1810">def skip_doc(self,s,i):

	# trace(`get_line(s,i)`)
	# Skip @space, @*, @doc, @chapter and @section directives.
	doc1 = i
	while i &lt; len(s):
		if is_nl(s,i):
			doc1 = i = skip_nl(s,i)
		elif match(s,i,"@ ") or match(s,i,"@\t") or match(s,i,"@*"):
			i = skip_ws(s,i+2) ; doc1 = i
		elif match(s,i,"@\n"):
			i += 1 ; doc1 = i
		elif (match_word(s,i,"@doc") or
			  match_word(s,i,"@chapter") or
			  match_word(s,i,"@section")):
			doc1 = i = skip_line(s,i)
		else: break

	while i &lt; len(s):
		kind, end = self.token_type(s,i,dont_report_errors)
		if kind == at_code or kind == at_root or kind == section_def:
			break
		i = skip_line(s,i)

	doc = s[doc1:i]
	# trace(doc)
	return i, doc</t>
<t tx="edream.110203161858.1811">@ This function sets ivars that keep track of the indentation level. We also remember where the next line starts because it is assumed to be the first line of a documentation section.

A headline can contain a leading section name.  If it does, we substitute the section name if we see an @c directive in the body text.
@c

def skip_headline(self,v):

	# trace(`v`)
	self.header = s = v.headString()
	# Set self.header_name.
	j = i = skip_ws(s,0)
	i, kind, end = self.is_section_name(s,i)
	if kind == bad_section_name:
		self.header_name = None
	else:
		self.header_name = s[j:end]</t>
<t tx="edream.110203161858.1812"></t>
<t tx="edream.110203161858.1813">def oblank (self):
	self.oblanks(1)

def oblanks (self,n):
	if abs(n) &gt; 0:
		self.output_file.write(' ' * abs(n))
		
def onl(self):
	# 3/18/03: Don't mess with body_ignored_newline.
	# self.os(self.output_newline)
	s = self.output_newline
	s = toEncodedString(s,self.encoding,reportErrors=true)
	self.output_file.write(s)

def os (self,s):
	s = string.replace(s,body_ignored_newline,body_newline)
	s = toEncodedString(s,self.encoding,reportErrors=true)
	self.output_file.write(s)

def otab (self):
	self.otabs(1)

def otabs (self,n):
	if abs(n) &gt; 0:
		self.output_file.write('\t' * abs(n))</t>
<t tx="edream.110203161858.1814">@ This is the top level method of the second pass. It creates a separate C file for each @root directive in the outline. As will be seen later,the file is actually written only if the new version of the file is different from the old version,or if the file did not exist previously. If changed_only_flag FLAG is true only changed roots are actually written.
@c

def put_all_roots(self):

	c = self.commands ; outline_name = c.frame.mFileName

	for section in self.root_list:
	
		# trace(`section.name`)
		file_name = os.path.join(self.tangle_directory,section.name)
		file_name = os.path.normpath(file_name)
		temp_name = create_temp_name()
		if not temp_name:
			es("Can not create temp file")
			break
		# Set the output_file global.
		# Use "text" mode for platform-specific newlines.
		mode = app().config.output_newline
		mode = choose(mode=="platform",'w','wb')
		try:
			self.output_file = open(temp_name,mode)
			if not self.output_file:
				es("Can not create: " + temp_name)
				break
		except:
			es("Can not create: " + temp_name)
			break
		&lt;&lt;Get root specific attributes&gt;&gt;
		&lt;&lt;Put @first lines&gt;&gt;
		if self.use_header_flag and self.print_mode == "verbose":
			&lt;&lt; Write a banner at the start of the output file &gt;&gt;
		for part in section.parts:
			if part.is_root:
				self.tangle_indent = 0 # Initialize global.
				self.put_part_node(part,false) # output first lws
		self.onl() # Make sure the file ends with a cr/lf
		self.output_file.close()
		self.output_file = None
		if self.errors == 0:
			update_file_if_changed(file_name,temp_name)
		else:
			es("unchanged:  " + file_name)
			&lt;&lt; Erase the temporary file &gt;&gt;</t>
<t tx="edream.110203161858.1815"># Stephen Schaefer, 9/2/02
# Retrieve the full complement of state for the root node
self.language = section.root_attributes.language
self.single_comment_string = section.root_attributes.single_comment_string
self.start_comment_string = section.root_attributes.start_comment_string
self.end_comment_string = section.root_attributes.end_comment_string
self.use_header_flag = section.root_attributes.use_header_flag
self.print_mode = section.root_attributes.print_mode
self.path = section.root_attributes.path
self.page_width = section.root_attributes.page_width
self.tab_width = section.root_attributes.tab_width
# Stephen P. Schaefer, 9/13/2002
self.first_lines = section.root_attributes.first_lines</t>
<t tx="edream.110203161858.1816"># Stephen P. Schaefer 9/13/2002
if self.first_lines:
	self.os(self.first_lines)</t>
<t tx="edream.110203161858.1817">if self.single_comment_string:
	self.os(self.single_comment_string)
	self.os(" Created by Leo from: ")
	self.os(outline_name)
	self.onl() ; self.onl()
elif self.start_comment_string and self.end_comment_string:
	self.os(self.start_comment_string)
	self.os(" Created by Leo from: ")
	self.os(outline_name)
	self.oblank() ; self.os(self.end_comment_string)
	self.onl() ; self.onl()
</t>
<t tx="edream.110203161858.1818">try: # Just delete the temp file.
	os.remove(temp_name)
except: pass
</t>
<t tx="edream.110203161858.1819">@ This method outputs a code section, expanding section references by their definition. We should see no @directives or section definitions that would end the code section.

Most of the differences bewteen noweb mode and CWEB mode are handled by token_type(called from put_newline). Here, the only difference is that noweb handles double-@ signs only at the start of a line.
@c

def put_code(self,s,no_first_lws_flag):

	# trace(`get_line(s,0)`)
	i = 0
	if i &lt; len(s):
		i = self.put_newline(s,i,no_first_lws_flag)
		# Double @ is valid in both noweb and CWEB modes here.
		if match(s,i,"@@"):
			self.os('@') ; i += 2
	while i &lt; len(s):
		progress = i
		ch = s[i]
		if (match(s,i,"&lt;&lt;") and self.use_noweb_flag or
			match(s,i,"@&lt;") and self.use_cweb_flag):
			&lt;&lt; put possible section reference &gt;&gt;
		elif ch == '@': # We are in the middle of a line.
			if self.use_cweb_flag:
				&lt;&lt; handle 2-character CWEB control codes &gt;&gt;
			else:
				&lt;&lt; handle noweb @ &lt; &lt; convention &gt;&gt;
		elif ch == body_ignored_newline:
			i += 1
		elif ch == body_newline:
			i += 1 ; self.onl()
			i = self.put_newline(s,i,false) # Put full lws
			if self.use_cweb_flag and match(s,i,"@@"):
				self.os('@') ; i += 2
		else: self.os(s[i]) ; i += 1
		assert(progress &lt; i)</t>
<t tx="edream.110203161858.1820">j, kind, name_end = self.is_section_name(s,i)
if kind == section_def:
	# We are in the middle of a code section
	self.error(
		"Should never happen:\n" +
		"section definition while putting a section reference: " +
		s[i:j])
	i += 1
elif kind == bad_section_name:
	self.os(s[i]) ; i += 1 # This is not an error.
else:
	assert(kind == section_ref)
	name = s[i:name_end]
	self.put_section(s,i,name,name_end)
	i = j</t>
<t tx="edream.110203161858.1821">if match(s,i,"@@"):
	# Handle double @ sign.
	self.os('@') ; i += 2
else:
	i += 1 # skip the @.
	if i+1 &gt;= len(s) or is_ws_or_nl(s,i):
		# A control code: at-backslash is not a valid CWEB control code.
		# We are in CWEB mode, so we can output C block comments.
		self.os("/*@" + s[i] + "*/") ; i += 1
	else:
		self.os("@") # The at sign is not part of a control code.</t>
<t tx="edream.110203161858.1822">@ The user must ensure that neither @ &lt; &lt; nor @ &gt; &gt; occurs in comments or strings. However, it is valid for @ &lt; &lt; or @ &gt; &gt; to appear in the doc chunk or in a single-line comment.
@c

if match(s,i,"@&lt;&lt;"):
	self.os("/*@*/&lt;&lt;") ; i += 3

elif match(s,i,"@&gt;&gt;"):
	self.os("/*@*/&gt;&gt;") ; i += 3
	
else: self.os("@") ; i += 1</t>
<t tx="edream.110203161858.1823"># This method outputs a doc section within a block comment.

def put_doc(self,s):

	# trace(`get_line(s,0)`)
	width = self.page_width
	words = 0 ; word_width = 0 ; line_width = 0
	# 8/1/02: can't use choose here!
	if self.single_comment_string == None: single_w = 0
	else: single_w = len(self.single_comment_string)
	# Make sure we put at least 20 characters on a line.
	if width - max(0,self.tangle_indent) &lt; 20:
		width = max(0,self.tangle_indent) + 20
	# Skip Initial white space in the doc part.
	i = skip_ws_and_nl(s,0)
	if i &lt; len(s) and (self.print_mode == "verbose" or self.print_mode == "quiet"):
		use_block_comment = self.start_comment_string and self.end_comment_string
		use_single_comment = not use_block_comment and self.single_comment_string
		# javadoc_comment = use_block_comment and self.start_comment_string == "/**"
		if use_block_comment or use_single_comment:
			if 0: # The section name ends in an self.onl().
				self.onl()
			self.put_leading_ws(self.tangle_indent)
			if use_block_comment:
				self.os(self.start_comment_string)
			&lt;&lt; put the doc part &gt;&gt;
			self.onl()
			self.put_leading_ws(self.tangle_indent)
			if use_block_comment:
				self.os(self.end_comment_string)
			self.onl()
		else: self.onl()</t>
<t tx="edream.110203161858.1824">@ This code fills and outputs each line of a doc part. It keeps track of whether the next word will fit on a line,and starts a new line if needed.
@c

if use_single_comment:
	# New code: 5/31/00
	self.os(self.single_comment_string) ; self.otab()
	line_width =(single_w / abs(self.tab_width) + 1) * abs(self.tab_width)
else:
	line_width = abs(self.tab_width)
	self.onl() ; self.otab()
self.put_leading_ws(self.tangle_indent)
line_width += max(0,self.tangle_indent)
words = 0 ; word_width = 0
while i &lt; len(s):
	&lt;&lt;output or skip whitespace or newlines&gt;&gt;
	if i &gt;= len(s):
		break
	&lt;&lt;compute the width of the next word&gt;&gt;
	if words == 0 or line_width + word_width &lt; width:
		words += 1
		&lt;&lt;output next word&gt;&gt;
		line_width += word_width
	else:
		# 11-SEP-2002 DTHEIN: Fixed linewrapping bug in
		# tab-then-comment sequencing
		self.onl()
		if use_single_comment:
			self.os(self.single_comment_string) ; self.otab()
			line_width = (single_w / abs(self.tab_width) + 1) * abs(self.tab_width)
		else:
			self.otab()
			line_width = abs(self.tab_width)
		words = 0
		self.put_leading_ws(self.tangle_indent)
		# tangle_indent is in spaces.
		line_width += max(0,self.tangle_indent)
</t>
<t tx="edream.110203161858.1825">@ This outputs whitespace if it fits, and ignores it otherwise, and starts a new line if a newline is seen. The effect of self code is that we never start a line with whitespace that was originally at the end of a line.
@c

while is_ws_or_nl(s,i):
	ch = s[i]
	if ch == '\t':
		pad = abs(self.tab_width) - (line_width % abs(self.tab_width))
		line_width += pad
		if line_width &lt; width: self.otab()
		i += 1
	elif ch == ' ':
		line_width += 1
		if line_width &lt; width: self.os(ch)
		i += 1
	else:
		assert(is_nl(s,i))
		self.onl()
		if use_single_comment:
			# New code: 5/31/00
			self.os(self.single_comment_string) ; self.otab()
			line_width = (single_w / abs(self.tab_width) + 1) * abs(self.tab_width)
		else:
			self.otab()
			line_width = abs(self.tab_width)
		i = skip_nl(s,i)
		words = 0
		self.put_leading_ws(self.tangle_indent)
		# tangle_indent is in spaces.
		line_width += max(0,self.tangle_indent)
</t>
<t tx="edream.110203161858.1826">j = i ; word_width = 0
while j &lt; len(s) and not is_ws_or_nl(s,j):
	word_width += 1
	j += 1</t>
<t tx="edream.110203161858.1827">while i &lt; len(s) and not is_ws_or_nl(s,i):
	self.os(s[i])
	i += 1</t>
<t tx="edream.110203161858.1828"># Puts tabs and spaces corresponding to n spaces, assuming that we are at the start of a line.

def put_leading_ws(self,n):

	# trace("tab_width:" + `self.tab_width` + ", indent:" + `indent`)
	w = self.tab_width

	if w &gt; 1:
		q,r = divmod(n,w) 
		self.otabs(q) 
		self.oblanks(r) 
	else:
		self.oblanks(n)
</t>
<t tx="edream.110203161858.1829">@ This method handles scanning when putting the start of a new line. Unlike the corresponding method in pass one, this method doesn't need to set a done flag in the caller because the caller already knows where the code section ends.
@c

def put_newline(self,s,i,no_first_lws_flag):

	kind, end = self.token_type(s,i,dont_report_errors)
	&lt;&lt; Output leading white space except for blank lines &gt;&gt;
	if i &gt;= len(s):
		return i
	elif kind == at_web or kind == at_at:
		i += 2 # Allow the line to be scanned.
	elif kind == at_doc or kind == at_code:
		if self.use_cweb_flag:
			i += 2
	else:
		# These should have set limit in pass 1.
		assert(kind != section_def and kind != at_chapter and kind != at_section)
	return i</t>
<t tx="edream.110203161858.1830">j = i ; i = skip_ws(s,i)
if i &lt; len(s) and not is_nl(s,i):
	# Conditionally output the leading previous leading whitespace.
	if not no_first_lws_flag:
		self.put_leading_ws(self.tangle_indent)
	# Always output the leading whitespace of _this_ line.
	k, width = skip_leading_ws_with_indent(s,j,self.tab_width)
	self.put_leading_ws(width)</t>
<t tx="edream.110203161858.1831"># This method outputs one part of a section definition.

def put_part_node(self,part,no_first_lws_flag):

	if 0:
		if part: name = part.name # can't use choose.
		else: name = "&lt;NULL part&gt;"
		trace(`name`)

	if part.doc and self.output_doc_flag and self.print_mode != "silent" and part.doc:
		self.put_doc(part.doc)

	if part.code:
		self.put_code(part.code,no_first_lws_flag)</t>
<t tx="edream.110203161858.1832">@ This method outputs the definition of a section and all sections referenced from the section. name is the section's name. This code checks for recursive definitions by calling section_check(). We can not allow section x to expand to code containing another call to section x, either directly or indirectly.
@c

def put_section(self,s,i,name,name_end):

	j = skip_line(s,i)
	# trace("indent:" + `self.tangle_indent`  + ", " + `s[i:j]`)
	outer_old_indent = self.tangle_indent
	trailing_ws_indent = 0 # Set below.
	inner_old_indent = 0 # Set below.
	newline_flag = false  # True if the line ends with the reference.
	assert(match(name,0,"&lt;&lt;") or match(name,0,"@&lt;"))
	&lt;&lt; Calculate the new value of tangle_indent &gt;&gt;
	&lt;&lt; Set 'newline_flag' if the line ends with the reference &gt;&gt;
	section = self.st_lookup(name,not_root_name)
	if section and section.parts:
		# Expand the section only if we are not already expanding it.
		if self.section_check(name):
			self.section_stack.append(name)
			&lt;&lt; put all parts of the section definition &gt;&gt;
			self.section_stack.pop()
	else:
		&lt;&lt; Put a comment about the undefined section &gt;&gt;
	if not newline_flag:
		self.put_leading_ws(trailing_ws_indent)
	self.tangle_indent = outer_old_indent
	return i, name_end</t>
<t tx="edream.110203161858.1833"># Find the start of the line containing the reference.
j = i
while j &gt; 0 and not is_nl(s,j):
	j -= 1
if is_nl(s,j):
	j = skip_nl(s,j)

# Bump the indentation
j, width = skip_leading_ws_with_indent(s,j,self.tab_width)
self.tangle_indent += width
# trace("leading ws:" + `width` + " + new indent:" + `self.tangle_indent`)

# 4/27/01: Force no trailing whitespace in @silent mode.
if self.print_mode == "silent":
	trailing_ws_indent = 0
else:
	trailing_ws_indent = self.tangle_indent

# Increase the indentation if the section reference does not immediately follow
# the leading white space.  4/3/01: Make no adjustment in @silent mode.
if (j &lt; len(s) and self.print_mode != "silent" and
		((self.use_noweb_flag and s[j] != '&lt;') or
		(self.use_cweb_flag and s[j] != '@'))):
	self.tangle_indent += abs(self.tab_width)</t>
<t tx="edream.110203161858.1834">if self.print_mode != "silent":
	i = name_end
	i = skip_ws(s,i)
	newline_flag = (i &gt;= len(s) or is_nl(s,i))</t>
<t tx="edream.110203161858.1835">@ This section outputs each part of a section definition. We first count how many parts there are so that the code can output a comment saying 'part x of y'.
@c

# Output each part of the section.
sections = len(section.parts)
count = 0
for part in section.parts:
	count += 1
	# In @silent mode, there is no sentinel line to "use up" the previously output
	# leading whitespace.  We set the flag to tell put_part_node and put_code
	# not to call put_newline at the start of the first code part of the definition.
	no_first_leading_ws_flag = (count == 1 and self.print_mode == "silent")
	inner_old_indent = self.tangle_indent
	# 4/3/01: @silent inhibits newlines after section expansion.
	if self.print_mode != "silent":
		&lt;&lt; Put the section name in a comment &gt;&gt;
	self.put_part_node(part,no_first_leading_ws_flag)
	# 4/3/01: @silent inhibits newlines after section expansion.
	if count == sections and (self.print_mode != "silent" and self.print_mode != "quiet"):
		&lt;&lt; Put the ending comment &gt;&gt;
	# Restore the old indent.
	self.tangle_indent = inner_old_indent</t>
<t tx="edream.110203161858.1836">if count &gt; 1:
	self.onl()
	self.put_leading_ws(self.tangle_indent)
	
# Don't print trailing whitespace
name = string.rstrip(name)
if self.single_comment_string:
	self.os(self.single_comment_string) ; self.oblank() ; self.os(name)
	&lt;&lt; put (n of m) &gt;&gt;
else:
	assert(
		self.start_comment_string and len(self.start_comment_string) &gt; 0 and
		self.end_comment_string and len(self.end_comment_string)&gt; 0)
	self.os(self.start_comment_string) ; self.oblank() ; self.os(name)
	&lt;&lt; put (n of m) &gt;&gt;
	self.oblank() ; self.os(self.end_comment_string)

self.onl() # Always output a newline.</t>
<t tx="edream.110203161858.1837">if sections &gt; 1:
	self.oblank()
	self.os("(" + `count` + " of " + `sections` + ")")</t>
<t tx="edream.110203161858.1838">@ We do not produce an ending comment unless we are ending the last part of the section,and the comment is clearer if we don't say(n of m).
@c

self.onl() ; self.put_leading_ws(self.tangle_indent)
#  Don't print trailing whitespace
while name_end &gt; 0 and is_ws(s[name_end-1]):
	name_end -= 1

if self.single_comment_string:
	self.os(self.single_comment_string) ; self.oblank()
	self.os("-- end -- ") ; self.os(name)
else:
	self.os(self.start_comment_string) ; self.oblank()
	self.os("-- end -- ") ; self.os(name)
	self.oblank() ; self.os(self.end_comment_string)
	
@ The following code sets a flag for untangle.

If something follows the section reference we must add a newline, otherwise the "something" would become part of the comment.  Any whitespace following the (!newline) should follow the section defintion when Untangled.
@c

if not newline_flag:
	self.os(" (!newline)") # LeoCB puts the leading blank, so we must do so too.
	# Put the whitespace following the reference.
	while name_end &lt; len(s) and is_ws(s[name_end]):
		self.os(s[name_end])
		name_end += 1
	self.onl() # We must supply the newline!</t>
<t tx="edream.110203161858.1839">self.onl() ; self.put_leading_ws(self.tangle_indent)

if self.print_mode != "silent":
	if self.single_comment_string:
		self.os(self.single_comment_string)
		self.os(" undefined section: ") ; self.os(name) ; self.onl()
	else:
		self.os(self.start_comment_string)
		self.os(" undefined section: ") ; self.os(name)
		self.oblank() ; self.os(self.end_comment_string) ; self.onl()

self.error("Undefined section: " + name)</t>
<t tx="edream.110203161858.1840">@ We can not allow a section to be defined in terms of itself, either directly or indirectly.

We push an entry on the section stack whenever beginning to expand a section and pop the section stack at the end of each section.  This method checks whether the given name appears in the stack. If so, the section is defined in terms of itself.
@c

def section_check (self,name):

	if name in self.section_stack:
		s = "Invalid recursive reference of " + name + "\n"
		for n in self.section_stack:
			s += "called from: " + n + "\n"
		self.error(s)
		return false
	return true</t>
<t tx="edream.110203161858.1841"></t>
<t tx="edream.110203161858.1842">@ This function checks the given symbol table for defined but never referenced sections.
@c

def st_check(self):

	keys = self.tst.keys()
	keys.sort()
	# trace(`keys`)
	for name in keys:
		section = self.tst[name]
		if not section.referenced:
			es(	' ' * 4 + "Warning: " +
				choose(self.use_noweb_flag,"&lt;&lt; ","@&lt; ") +
				section.name +
				choose(self.use_noweb_flag," &gt;&gt;"," @&gt;") +
				" has been defined but not used.")</t>
<t tx="edream.110203161858.1843"># Dumps the given symbol table in a readable format.

def st_dump(self,verbose_flag=true):
	
	s = "\ndump of symbol table...\n"
	keys = self.tst.keys()
	keys.sort()
	for name in keys:
		section = self.tst[name]
		if verbose_flag:
			s += self.st_dump_node(section)
		else:
			type = choose(len(section.parts)&gt;0,"  ","un")
			s += ("\n" + type + "defined:[" + section.name + "]")
	return s</t>
<t tx="edream.110203161858.1844"># Dumps each part of a section's definition.

def st_dump_node(self,section):

	s = ("\nsection: " + section.name +
		", referenced:" + `section.referenced` +
		", is root:" + `section.is_root`)
	
	if len(section.parts) &gt; 0:
		s += "\n----- parts of " + angleBrackets(section.name)
		n = 1 # part list is in numeric order
		for part in section.parts:
			s += "\n----- Part " + `n`
			n += 1
			s += "\ndoc:  [" + `part.doc`  + "]"
			s += "\ncode: [" + `part.code` + "]"
		s += "\n----- end of partList\n"
	return s</t>
<t tx="edream.110203161858.1845">@ Enters names and their associated code and doc parts into the given symbol table.
`is_dirty` is used only when entering root names.
@c

def st_enter(self,name,code,doc,multiple_parts_flag,is_root_flag):
	
	# trace(`name`)
	section = self.st_lookup(name,is_root_flag)
	assert(section)
	if doc:
		doc = string.rstrip(doc) # remove trailing lines.
	if code:
		if self.print_mode != "silent": # @silent supresses newline processing.
			i = skip_blank_lines(code,0) # remove leading lines.
			if i &gt; 0: code = code[i:] 
			if code and len(code) &gt; 0: code = string.rstrip(code) # remove trailing lines.
		if len(code) == 0: code = None
	if code:
		&lt;&lt; check for duplicate code definitions &gt;&gt;
	if code or doc:
		part = part_node(name,code,doc,is_root_flag,false) # not dirty
		section.parts.append(part)
	else: # A reference
		section.referenced = true
	if is_root_flag:
		self.root_list.append(section)
		section.referenced = true # Mark the root as referenced.
		&lt;&lt;remember root node attributes&gt;&gt;
	# Stephen Schaefer, 9/2/02
	return len(section.parts) # part number
</t>
<t tx="edream.110203161858.1846">for part in section.parts:

	if part.code and multiple_parts_flag == disallow_multiple_parts:
		# Give the message only for non-empty parts.
		self.error("Multiple parts not allowed for " + name)
		return 0 # part number

	if self.tangling and code and code == part.code:
		es("Warning: possible duplicate definition of: &lt;&lt;" +
			section.name + "&gt;&gt;")</t>
<t tx="edream.110203161858.1847"># Stephen Schaefer, 9/2/02
# remember the language and comment characteristics
section.root_attributes = root_attributes(self)</t>
<t tx="edream.110203161858.1848"># Enters a root name into the given symbol table.

def st_enter_root_name(self,name,code,doc):
	
	# assert(code)
	if name: # User errors can result in an empty @root name.
		self.st_enter(name,code,doc,disallow_multiple_parts,is_root_name)</t>
<t tx="edream.110203161858.1849">@ This function enters a section name into the given symbol table.
The code and doc pointers are None for references.
@c

def st_enter_section_name(self,name,code,doc,multiple_parts_flag):
	
	return self.st_enter(name,code,doc,multiple_parts_flag,not_root_name)</t>
<t tx="edream.110203161858.1850">@ This function looks up name in the symbol table and creates a tst_node for it if it does not exist.
@c

def st_lookup(self,name,is_root_flag):

	if is_root_flag:
		key = name
	else:
		key = self.standardize_name(name)

	if self.tst.has_key(key):
		section = self.tst[key]
		# trace("found:" + key)
		return section
	else:
		# trace("not found:" + key)
		section = tst_node(key,is_root_flag)
		self.tst [key] = section
		return section</t>
<t tx="edream.110203161858.1851"></t>
<t tx="edream.110203161858.1852">def ust_dump (self):

	s = "\n---------- Untangle Symbol Table ----------"
	keys = self.ust.keys()
	keys.sort()
	for name in keys:
		section = self.ust[name]
		s += "\n\n" + section.name
		for part in section.parts.values():
			assert(part.of == section.of)
			s += "\n----- part " + `part.part` + " of " + `part.of` + " -----\n"
			s += `get_line(part.code,0)`
	s += "\n--------------------"
	return s</t>
<t tx="edream.110203161858.1853">@ This routine enters names and their code parts into the given table. The 'part' and 'of' parameters are taken from the "(part n of m)" portion of the line that introduces the section definition in the C code.

If no part numbers are given the caller should set the 'part' and 'of' parameters to zero.  The caller is reponsible for checking for duplicate parts.

This function handles names scanned from a source file; the corresponding st_enter routine handles names scanned from outlines.
@c

def ust_enter (self,name,part,of,code,nl_flag,is_root_flag):

	if not is_root_flag:
		name = self.standardize_name(name)
	&lt;&lt; remove blank lines from the start and end of the text &gt;&gt;
	u = ust_node(name,code,part,of,nl_flag,false) # update_flag
	if not self.ust.has_key(name):
		self.ust[name] = u
	section = self.ust[name]
	section.parts[part]=u # Parts may be defined in any order.
	# trace("section name: [" + name + "](" + `part` + " of " + `of` + ")..."+`get_line(code,0)`)</t>
<t tx="edream.110203161858.1854">i = skip_blank_lines(code,0)
if i &gt; 0:
	code = code[i:]
	code = string.rstrip(code)
</t>
<t tx="edream.110203161858.1855"># Searches the given table for a part matching the name and part number.

def ust_lookup (self,name,part_number,is_root_flag,update_flag):
	
	# trace(`name` + ":" + `part_number`)
	
	if not is_root_flag:
		name = self.standardize_name(name)

	if part_number == 0: part_number = 1 # A hack: zero indicates the first part.
	if self.ust.has_key(name):
		section = self.ust[name]
		if section.parts.has_key(part_number):
			part = section.parts[part_number]
			if update_flag: part.update_flag = true
			# trace("found:" + name + " (" + `part_number` + ")...\n" + `get_line(part.code,0)`)
			return part, true

	# trace("not found:" + name + " (" + `part_number` + ")...\n")
	return None, false</t>
<t tx="edream.110203161858.1856">@ This function issues a warning about any sections in the derived file for which no corresponding section has been seen in the outline.
@c

def ust_warn_about_orphans (self):

	for section in self.ust.values():
		# trace(`section`)
		for part in section.parts.values():
			assert(part.of == section.of)
			if not part.update_flag:
				es("Warning: " +
					choose(self.use_noweb_flag,"&lt;&lt; ","@&lt; ") +
					part.name +
					choose(self.use_noweb_flag," &gt;&gt;"," @&gt;") +
					" is not in the outline")
				break # One warning per section is enough.</t>
<t tx="edream.110203161858.1857"></t>
<t tx="edream.110203161858.1858">@ This function compares the interior of comments and returns true if they are identical except for whitespace or newlines. It is up to the caller to eliminate the opening and closing delimiters from the text to be compared.
@c

def compare_comments (self,s1,s2):

	tot_len = 0
	if self.comment: tot_len += len(self.comment)
	if self.comment_end: tot_len += len(self.comment_end)
	CWEB_flag = (self.language == "c" and not self.use_noweb_flag)
	
	p1, p2 = 0, 0
	while p1 &lt; len(s1) and p2 &lt; len(s2):
		p1 = skip_ws_and_nl(s1,p1)
		p2 = skip_ws_and_nl(s2,p2)
		if self.comment and self.comment_end:
			&lt;&lt; Check both parts for @ comment conventions &gt;&gt;
		if p1 &gt;= len(s1) or p2 &gt;= len(s2):
			break
		if s1[p1] != s2[p2]:
			return false
		p1 += 1 ; p2 += 1
	p1 = skip_ws_and_nl(s1,p1)
	p2 = skip_ws_and_nl(s2,p2)
	return p1 == len(s1) and p2 == len(s2)
</t>
<t tx="edream.110203161858.1859">@ This code is used in forgiving_compare()and in compare_comments().

In noweb mode we allow / * @ * /  (without the spaces)to be equal to @.
In CWEB mode we allow / * @ ? * / (without the spaces)to be equal to @?.
at-backslash is not a valid CWEB control code, so we don't have to equate
/ * @ \\ * / with at-backslash.

We must be careful not to run afoul of this very convention here!
@c

if p1 &lt; len(s1) and s1[p1] == '@':
	if match(s2,p2,self.comment + '@' + self.comment_end):
		p1 += 1
		p2 += tot_len + 1
		continue
	elif (CWEB_flag and s1[p1] == '@' and p1 + 1 &lt; len(s1) and
		match(s2,p2,self.comment + '@' + s1[p1+1])):
		p1 += 2
		p2 += tot_len + 2
		continue
elif p2 &lt; len(s2) and s2[p2] == '@':
	if match(s1,p1,self.comment + '@' + self.comment_end):
		p2 += 1
		p1 += tot_len + 1
		continue
	elif (CWEB_flag and s1[p1] == '@' and p1 + 1 &lt; len(s1) and
		match(s1,p1,self.comment + '@' + s2[p2+1])):
		p2 += 2
		p1 += tot_len + 2
		continue
</t>
<t tx="edream.110203161858.1860">@ This function is called to massage an @doc part in the ust. We call this routine only after a mismatch in @doc parts is found between the ust and tst. On entry, the parameters point to the inside of a block C comment: the opening and closing delimiters are not part of the text handled by self routine.

This code removes newlines that may have been inserted by the Tangle command in a block comment. Tangle may break lines differently in different expansions, but line breaks are ignored by forgiving_compare() and doc_compare() within block C comments.

We count the leading whitespace from the first non-blank line and remove this much whitespace from all lines. We also remove singleton newlines and replace sequences of two or more newlines by a single newline.
@c

def massage_block_comment (self,s):

	c = self.commands
	newlines = 0  # Consecutive newlines seen.
	i = skip_blank_lines(s,0)
	# Copy the first line and set n
	i, n = skip_leading_ws_with_indent(s,i,c.tab_width)
	j = i ; i = skip_to_end_of_line(s,i)
	result = s[j:i]
	while i &lt; len(s):
		assert(is_nl(s,i))
		newlines += 1
		# Replace the first newline with a blank.
		result += ' ' ; i += 1
		while i &lt; len(s) and is_nl(s,i):
			i += 1 # skip the newline.
		j = i ; i = skip_ws(s,i)
		if is_nl(s,i)and newlines &gt; 1:
			# Skip blank lines.
			while is_nl(s,i):
				i += 1
		else:
			# Skip the leading whitespace.
			i = j # back track
			i = skip_leading_ws(s,i,n,c.tab_width)
			newlines = 0
			# Copy the rest of the line.
			j = i ; i = skip_to_end_of_line(s,i)
			result += s[j:i]
	return result
</t>
<t tx="edream.110203161858.1861">@ This is the "forgiving compare" function.  It compares two texts and returns true if they are identical except for comments or non-critical whitespace.  Whitespace inside strings or preprocessor directives must match exactly.
@c

def forgiving_compare (self,name,part,s1,s2):

	if 0:
		trace(`name`+":"+`part`+
			  "\n1:"+`get_line(s1,0)`+
			  "\n2:"+ `get_line(s2,0)`)
	s1 = toUnicode(s1,self.encoding) # 4/4/03
	s2 = toUnicode(s2,self.encoding) # 4/4/03
	&lt;&lt; Define forgiving_compare vars &gt;&gt;
	p1 = skip_ws_and_nl(s1,0) 
	p2 = skip_ws_and_nl(s2,0)
	result = true
	while result and p1 &lt; len(s1) and p2 &lt; len(s2):
		first1 = p1 ; first2 = p2
		if self.comment and self.comment_end:
			&lt;&lt; Check both parts for @ comment conventions &gt;&gt;
		ch1 = s1[p1]
		if ch1 == '\r' or ch1 == '\n':
			&lt;&lt; Compare non-critical newlines &gt;&gt;
		elif ch1 ==  ' ' or ch1 == '\t':
			&lt;&lt; Compare non-critical whitespace &gt;&gt;
		elif ch1 == '\'' or ch1 == '"':
			&lt;&lt; Compare possible strings &gt;&gt;
		elif ch1 == '#':
			&lt;&lt; Compare possible preprocessor directives &gt;&gt;
		elif ch1 == '&lt;' or ch1 == '@':
			&lt;&lt; Compare possible section references &gt;&gt;
		else:
			&lt;&lt; Compare comments or single characters &gt;&gt;
	&lt;&lt; Make sure both parts have ended &gt;&gt;
	if not result:
		&lt;&lt; trace the mismatch &gt;&gt;
	return result</t>
<t tx="edream.110203161858.1862"># scan_derived_file has set the ivars describing comment delims.
first1 = first2 = 0

tot_len = 0
if self.comment: tot_len += len(self.comment)
if self.comment_end: tot_len += len(self.comment_end)

CWEB_flag = (self.language == "c" and not self.use_noweb_flag)</t>
<t tx="edream.110203161858.1863">p1 = skip_ws_and_nl(s1,p1)
p2 = skip_ws_and_nl(s2,p2)
</t>
<t tx="edream.110203161858.1864">p1 = skip_ws(s1,p1)
p2 = skip_ws(s2,p2)</t>
<t tx="edream.110203161858.1865">if self.language == "c":
	&lt;&lt; compare preprocessor directives &gt;&gt;
else:
	&lt;&lt; compare single characters &gt;&gt;
</t>
<t tx="edream.110203161858.1866">assert(p1 &lt; len(s1) and p2 &lt; len(s2))
result = s1[p1] == s2[p2]
p1 += 1 ; p2 += 1
if not result: self.mismatch("Mismatched single characters")</t>
<t tx="edream.110203161858.1867"># We cannot assume that newlines are single characters.

result = s1[p1] == s2[p2]
p1 += 1 ; p2 += 1
while result and p1 &lt; len(s1) and p2 &lt; len(s2):
	if is_nl(s1,p1):
		result = is_nl(s2,p2)
		if not result or self.is_end_of_directive(s1,p1):
			break
		p1 = skip_nl(s1,p1)
		p2 = skip_nl(s2,p2)
	else:
		result = s1[p1] == s2[p2]
		p1 += 1 ; p2 += 1
if not result:
	self.mismatch("Mismatched preprocessor directives")</t>
<t tx="edream.110203161858.1868"># This code implicitly assumes that string1_len == string2_len == 1.
# The match test ensures that the language actually supports strings.

if (match(s1,p1,self.string1) or match(s1,p1,self.string2)) and s1[p1] == s2[p2]:

	if self.language == "pascal":
		&lt;&lt; Compare Pascal strings &gt;&gt;
	else:
		&lt;&lt; Compare C strings &gt;&gt;
	if not result:
		self.mismatch("Mismatched strings")
else:
	&lt;&lt; Compare single characters &gt;&gt;</t>
<t tx="edream.110203161858.1869">delim = s1[p1]
result = s1[p1] == s2[p2]
p1 += 1 ; p2 += 1

while result and p1 &lt; len(s1) and p2 &lt; len(s2):
	if s1[p1] == delim and self.is_end_of_string(s1,p1,delim):
		result =(s2[p2] == delim and self.is_end_of_string(s2,p2,delim))
		p1 += 1 ; p2 += 1
		break
	elif is_nl(s1,p1) and is_nl(s2,p2):
		p1 = skip_nl(s1,p1)
		p2 = skip_nl(s2,p2)
	else:
		result = s1[p1] == s2[p2]
		p1 += 1 ; p2 += 1
</t>
<t tx="edream.110203161858.1870">@ We assume the Pascal string is on a single line so the problems with cr/lf do not concern us.
@c

first1 = p1 ; first2 = p2
p1 = skip_pascal_string(s1,p1)
p2 = skip_pascal_string(s2,p2)
result = s1[first1,p1] == s2[first2,p2]
</t>
<t tx="edream.110203161858.1871">if s1[p1] == '@' and CWEB_flag:  start_ref = "@&lt;"
elif s1[p1] == '&lt;' and not CWEB_flag:  start_ref = "&lt;&lt;"
else: start_ref = None

# Tangling may insert newlines.
p2 = skip_ws_and_nl(s2,p2)

junk, kind1, junk2 = self.is_section_name(s1,p1)
junk, kind2, junk2 = self.is_section_name(s2,p2)

if start_ref and (kind1 != bad_section_name or kind2 != bad_section_name):
	result = self.compare_section_names(s1[p1:],s2[p2:])
	if result:
		p1, junk1, junk2 = self.skip_section_name(s1,p1)
		p2, junk1, junk2 = self.skip_section_name(s2,p2)
	else: self.mismatch("Mismatched section names")
else:
	# Neither p1 nor p2 points at a section name.
	result = s1[p1] == s2[p2]
	p1 += 1 ; p2 += 1
	if not result:
		self.mismatch("Mismatch at '@' or '&lt;'")</t>
<t tx="edream.110203161858.1872">if match(s1,p1,self.sentinel) and match(s2,p2,self.sentinel):
	first1 = p1 ; first2 = p2
	p1 = skip_to_end_of_line(s1,p1)
	p2 = skip_to_end_of_line(s2,p2)
	result = self.compare_comments(s1[first1:p1],s2[first2:p2])
	if not result:
		self.mismatch("Mismatched sentinel comments")
elif match(s1,p1,self.line_comment) and match(s2,p2,self.line_comment):
	first1 = p1 ; first2 = p2
	p1 = skip_to_end_of_line(s1,p1)
	p2 = skip_to_end_of_line(s2,p2)
	result = self.compare_comments(s1[first1:p1],s2[first2:p2])
	if not result:
		self.mismatch("Mismatched single-line comments")
elif match(s1,p1,self.comment) and match(s2,p2,self.comment):
	while (p1 &lt; len(s1) and p2 &lt; len(s2) and
		not match(s1,p1,self.comment_end) and not match(s2,p2,self.comment_end)):
		# ws doesn't have to match exactly either!
		if is_nl(s1,p1)or is_ws(s1[p1]):
			p1 = skip_ws_and_nl(s1,p1)
		else: p1 += 1
		if is_nl(s2,p2)or is_ws(s2[p2]):
			p2 = skip_ws_and_nl(s2,p2)
		else: p2 += 1
	p1 = skip_ws_and_nl(s1,p1)
	p2 = skip_ws_and_nl(s2,p2)
	if match(s1,p1,self.comment_end) and match(s2,p2,self.comment_end):
		first1 = p1 ; first2 = p2
		p1 += len(self.comment_end)
		p2 += len(self.comment_end)
		result = self.compare_comments(s1[first1:p1],s2[first2:p2])
	else: result = false
	if not result:
		self.mismatch("Mismatched block comments")
elif match(s1,p1,self.comment2) and match(s2,p2,self.comment2):
	while (p1 &lt; len(s1) and p2 &lt; len(s2) and
		not match(s1,p1,self.comment2_end) and not match(s2,p2,self.comment2_end)):
		# ws doesn't have to match exactly either!
		if  is_nl(s1,p1)or is_ws(s1[p1]):
			p1 = skip_ws_and_nl(s1,p1)
		else: p1 += 1
		if is_nl(s2,p2)or is_ws(s2[p2]):
			p2 = skip_ws_and_nl(s2,p2)
		else: p2 += 1
	p1 = skip_ws_and_nl(s1,p1)
	p2 = skip_ws_and_nl(s2,p2)
	if match(s1,p1,self.comment2_end) and match(s2,p2,self.comment2_end):
		first1 = p1 ; first2 = p2
		p1 += len(self.comment2_end)
		p2 += len(self.comment2_end)
		result = self.compare_comments(s1[first1:p1],s2[first2:p2])
	else: result = false
	if not result:
		self.mismatch("Mismatched alternalte block comments")
else:
	&lt;&lt; Compare single characters &gt;&gt;</t>
<t tx="edream.110203161858.1873">if result:
	p1 = skip_ws_and_nl(s1,p1)
	p2 = skip_ws_and_nl(s2,p2)
	result = p1 &gt;= len(s1) and p2 &gt;= len(s2)
	if not result:
		# Show the ends of both parts.
		p1 = len(s1)
		p2 = len(s2)
		self.mismatch("One part ends before the other.")</t>
<t tx="edream.110203161858.1874">if 0:
	trace(self.message +
		"\nPart " + `part` + ", section " + name +
		"\n1:" + get_line(s1,p1) +
		"\n2:" + get_line(s2,p2) )</t>
<t tx="edream.110203161858.1875">def mismatch (self,message):

	self.message = message</t>
<t tx="edream.110203161858.1876">@ This function scans an entire derived file in s, discovering section or part definitions.

This is the easiest place to delete leading whitespace from each line: we simply don't copy it.  We also ignore leading blank lines and trailing blank lines.  The resulting definition must compare equal using the "forgiving" compare to any other definitions of that section or part.

We use a stack to handle nested expansions.  The outermost level of expansion corresponds to the @root directive that created the file.  When the stack is popped, the indent variable is restored.

self.root_name is the name of the file mentioned in the @root directive.

The caller has deleted all body_ignored_newlines from the text.
@c

def scan_derived_file (self,s):

	c = self.commands
	self.def_stack = []
	&lt;&lt; set the private global matching vars &gt;&gt;
	line_indent = 0  # The indentation to use if we see a section reference.
	# indent is the leading whitespace to be deleted.
	i, indent = skip_leading_ws_with_indent(s,0,self.tab_width)
	&lt;&lt; Skip the header line output by tangle &gt;&gt;
	# The top level of the stack represents the root.
	self.push_new_def_node(self.root_name,indent,1,1,true)
	while i &lt; len(s):
		ch = s[i]
		if ch == body_ignored_newline:
			i += 1 # ignore
		elif ch == body_newline:
			&lt;&lt; handle the start of a new line &gt;&gt;
		elif match(s,i,self.sentinel) and self.is_sentinel_line(s,i):
			&lt;&lt; handle a sentinel line  &gt;&gt;
		elif match(s,i,self.line_comment) or match(s,i,self.verbatim):
			&lt;&lt; copy the entire line &gt;&gt;
		elif match(s,i,self.comment):
			&lt;&lt; copy a multi-line comment &gt;&gt;
		elif match(s,i,self.comment2):
			&lt;&lt; copy an alternate multi-line comment &gt;&gt;
		elif match(s,i,self.string1) or match(s,i,self.string2):
			&lt;&lt; copy a string &gt;&gt;
		else:
			self.copy(ch) ; i += 1
	&lt;&lt; end all open sections &gt;&gt;</t>
<t tx="edream.110203161858.1877"># Set defaults from the public globals set by the @comment command.
if self.single_comment_string:
	self.sentinel = self.single_comment_string
	self.sentinel_end = None
elif self.end_comment_string:
	self.sentinel = self.start_comment_string
	self.sentinel_end = self.end_comment_string
else:
	self.sentinel = self.sentinel_end = None
	
if 0:
	trace("single,start,end,sentinel:"+
		`self.single_comment_string` +":"+ `self.start_comment_string` +":"+
		`self.end_comment_string` +":"+ `self.sentinel`)

# Set defaults.  See set_delims_from_langauge.
self.line_comment = self.single_comment_string
self.comment = self.start_comment_string
self.comment_end = self.end_comment_string
self.comment2 = self.comment2_end = None
self.string1 = "\""
self.string2 = "'"
self.verbatim = None

# Set special cases.
if self.language == "plain":
	self.string1 = self.string2 = None # This is debatable.
	self.line_comment = None
if self.language == "pascal":
	self.comment2 = "(*" ; self.comment2_end = "*)"
if self.language == "latex": # 3/10/03: Joo-won Jung
	self.string1 = self.string2 = None # This is debatable.
</t>
<t tx="edream.110203161858.1878">if self.sentinel or self.comment:
	line = choose(self.sentinel,self.sentinel,self.comment) + " Created by Leo from" 
	if match(s,i,line):
		# Even a block comment will end on the first line.
		i = skip_to_end_of_line(s,i)</t>
<t tx="edream.110203161858.1879">self.copy(ch) ; i += 1 # This works because we have one-character newlines.

# Set line_indent, used only if we see a section reference.
junk, line_indent = skip_leading_ws_with_indent(s,i,c.tab_width)
i = skip_leading_ws(s,i,indent,c.tab_width) # skip indent leading white space.</t>
<t tx="edream.110203161858.1880">@ This is the place to eliminate the proper amount of whitespace from the start of each line. We do this by setting the 'indent' variable to the leading whitespace of the first _non-blank_ line following the opening sentinel.

Tangle increases the indentation by one tab if the section reference is not the first non-whitespace item on the line,so self code must do the same.
@c

# trace(`get_line(s,i)`)
result,junk,kind,name,part,of,end,nl_flag = self.is_sentinel_line_with_data(s,i)
assert(result==true)
&lt;&lt; terminate the previous part of this section if it exists &gt;&gt;

if kind == start_sentinel_line:
	indent = line_indent
	# Increase line_indent by one tab width if the
	# the section reference does not start the line.
	j = i - 1
	while j &gt;= 0:
		if is_nl(s,j):
			break
		elif not is_ws(s[j]):
			indent += abs(self.tab_width) ; break
		j -= 1
	# copy the section reference to the _present_ section,
	# but only if this is the first part of the section.
	if part &lt; 2: self.copy(name)
	# Skip to the first character of the new section definition.
	i = skip_to_end_of_line(s,i)
	# Start the new section.
	self.push_new_def_node(name,indent,part,of,nl_flag)
else:
	assert(kind == end_sentinel_line)
	# Skip the sentinel line.
	i = skip_to_end_of_line(s,i)
	# Skip a newline only if it was added after(!newline)
	if not nl_flag:
		i = skip_ws(s,i)
		i = skip_nl(s,i)
		i = skip_ws(s,i)
		# Copy any whitespace following the (!newline)
		while end and is_ws(s[end]):
			self.copy(s[end])
			end += 1
	# Restore the old indentation level.
	if len(self.def_stack) &gt; 0:
		indent = self.def_stack[-1].indent</t>
<t tx="edream.110203161858.1881">@ We have just seen a sentinel line. Any kind of sentinel line will terminate a previous part of the present definition. For end sentinel lines, the present section name must match the name on the top of the stack.
@c

if len(self.def_stack) &gt; 0:
	dn = self.def_stack[-1]
	if self.compare_section_names(name,dn.name):
		dn = self.def_stack.pop()
		if len(dn.code) &gt; 0:
			thePart, found = self.ust_lookup(name,dn.part,false,false) # not root, not update
			# Check for incompatible previous definition.
			if found and not self.forgiving_compare(name,dn.part,dn.code,thePart.code):
				self.error("Incompatible definitions of " + name)
			elif not found:
				self.ust_enter(name,dn.part,dn.of,dn.code,dn.nl_flag,false) # not root
	elif kind == end_sentinel_line:
		self.error("Missing sentinel line for: " + name)</t>
<t tx="edream.110203161858.1882">j = i ; i = skip_to_end_of_line(s,i)
self.copy(s[j:i])
</t>
<t tx="edream.110203161858.1883">j = i
if self.language == "pascal":
	i = skip_pascal_string(s,i)
else:
	i = skip_string(s,i)
self.copy(s[j:i])</t>
<t tx="edream.110203161858.1884">assert(self.comment_end)

# Scan for the ending delimiter.
j = i ; i += len(self.comment)
while i &lt; len(s) and not match(s,i,self.comment_end):
	i += 1
if match(s,i,self.comment_end):
	i += len(self.comment_end)
self.copy(s[j:i])</t>
<t tx="edream.110203161858.1885">assert(self.comment2_end)
j = i
# Scan for the ending delimiter.
i += len(self.comment2)
while i &lt; len(s) and not match(s,i,self.comment2_end):
	i += 1
if match(s,i,self.comment2_end):
	i += len(self.comment2)
self.copy(s[j:i])</t>
<t tx="edream.110203161858.1886">dn= None
while len(self.def_stack) &gt; 0:
	dn = self.def_stack.pop()
	if len(self.def_stack) &gt; 0:
		self.error("Unterminated section: " + dn.name)
if dn:
	# Terminate the root setcion.
	i = len(s)
	if dn.code and len(dn.code) &gt; 0:
		self.ust_enter(dn.name,dn.part,dn.of,dn.code,dn.nl_flag,true) # is_root_flag
	else:
		self.error("Missing root part")
else:
	self.error("Missing root section")</t>
<t tx="edream.110203161858.1887">@ This function handles the actual updating of section definitions in the web.  Only code parts are updated, never doc parts.

During pass 2 of Untangle, skip_body() calls this routine when it discovers the definition of a section in the outline.  We look up the name in the ust. If an entry exists, we compare the code (the code part of an outline node) with the code part in the ust. We update the code part if necessary.

We use the forgiving_compare() to compare code parts. It's not possible to change only trivial whitespace using Untangle because forgiving_compare() ignores trivial whitespace.
@c

# Major change: 2/23/01: Untangle never updates doc parts.

def update_def (self,name,part_number,head,code,tail,is_root_flag): # Doc parts are never updated!

	# trace(`name` + ":" + `part_number` + ":" + `code`)
	v = self.v ; body = v.bodyString()
	if not head: head = ""
	if not tail: tail = ""
	if not code: code = ""
	false_ret = head + code + tail, len(head) + len(code), false
	part, found = self.ust_lookup(name,part_number,is_root_flag,true) # Set update
	if not found:
		return false_ret  # Not an error.
	ucode = toUnicode(part.code,self.encoding) # 4/4/03
	&lt;&lt; Remove leading blank lines and comments from ucode &gt;&gt;
	# trace(`ucode`)
	if not ucode or len(ucode) == 0:
		return false_ret # Not an error.
	if code and self.forgiving_compare(name,part,code,ucode):
		return false_ret # Not an error.
	# Update the body.
	es("***Updating: " + v.headString())
	i = skip_blank_lines(ucode,0)
	ucode = ucode[i:]
	ucode = string.rstrip(ucode)
	# Add the trailing whitespace of code to ucode.
	code2 = string.rstrip(code)
	trail_ws = code[len(code2):]
	ucode = ucode + trail_ws
	body = head + ucode + tail
	self.update_current_vnode(body)
	if 0:
		trace("head:" + `head`)
		trace("ucode:" + `ucode`)
		trace("tail:" + `tail`)
	return body, len(head) + len(ucode),true
</t>
<t tx="edream.110203161858.1888">@ We assume that any leading comments came from an @doc part.  This isn't always valid and this code will eliminate such leading comments.  This is a defect in Untangle; it can hardly be avoided.
@c

i = skip_blank_lines(ucode,0)
j = skip_ws(ucode,i)
# trace("comment,end,single:"+`self.comment`+":"+`self.comment_end`+":"+`self.line_comment`)

if self.comment and self.comment_end:
	if ucode and match(ucode,j,self.comment):
		# Skip to the end of the block comment.
		i = j + len(self.comment)
		i = string.find(ucode,self.comment_end,i)
		if i == -1: ucode = None # An unreported problem in the user code.
		else:
			i += len(self.comment_end)
			i = skip_blank_lines(ucode,i)
elif self.line_comment:
	while ucode and match(ucode,j,self.line_comment):
		i = skip_line(ucode,i)
		i = skip_blank_lines(ucode,i)
		j = skip_ws(ucode,i)
# Only the value of ucode matters here.
if ucode: ucode = ucode[i:]</t>
<t tx="edream.110203161858.1889">@ This function is called from within the Untangle logic to update the body text of self.v.
@c

def update_current_vnode (self,s):

	c = self.commands ; v = self.v
	assert(self.v)
	v.setBodyStringOrPane(s)

	c.beginUpdate()
	c.setChanged(true)
	v.setDirty()
	v.setMarked()
	c.endUpdate()</t>
<t tx="edream.110203161858.1890">@ These utilities deal with tangle ivars, so they should be methods.
</t>
<t tx="edream.110203161858.1891"># Compares section names or root names.
# Arbitrary text may follow the section name on the same line.

def compare_section_names (self,s1,s2):

	# trace(`get_line(s1,0)` + ":" + `get_line(s2,0)`)
	if match(s1,0,"&lt;&lt;") or match(s1,0,"@&lt;"):
		# Use a forgiving compare of the two section names.
		delim = choose(self.use_cweb_flag,"@&gt;","&gt;&gt;")
		i1 = i2 = 0
		while i1 &lt; len(s1) and i2 &lt; len(s2):
			ch1 = s1[i1] ; ch2 = s2[i2]
			if is_ws(ch1) and is_ws(ch2):
				i1 = skip_ws(s1,i1)
				i2 = skip_ws(s2,i2)
			elif match(s1,i1,delim) and match(s2,i2,delim):
				return true
			elif string.lower(ch1) == string.lower(ch2):
				i1 += 1 ; i2 += 1
			else: return false
		return false
	else: # A root name.
		return s1 == s2</t>
<t tx="edream.110203161858.1892">def copy (self, s):

	assert(len(self.def_stack) &gt; 0)
	dn = self.def_stack[-1] # Add the code at the top of the stack.
	dn.code += s</t>
<t tx="edream.110203161858.1893">def error (self,s):
	self.errors += 1
	es_error(s)
	
def pathError (self,s):
	if not self.path_warning_given:
		self.path_warning_given = true
		self.error(s)
	
def warning (self,s):
	es_error(s)
</t>
<t tx="edream.110203161858.1894"># This function returns true if we are at the end of preprocessor directive.

def is_end_of_directive (self,s,i):

	return is_nl(s,i) and not self.is_escaped(s,i)</t>
<t tx="edream.110203161858.1895">def is_end_of_string (self,s,i,delim):

	return i &lt; len(s) and s[i] == delim and not self.is_escaped(s,i)</t>
<t tx="edream.110203161858.1896"># This function returns true if the s[i] is preceded by an odd number of back slashes.

def is_escaped (self,s,i):

	back_slashes = 0 ; i -= 1
	while i &gt;= 0 and s[i] == '\\':
		back_slashes += 1
		i -= 1
	return (back_slashes &amp; 1) == 1
</t>
<t tx="edream.110203161858.1897">def is_section_name(self,s,i):

	kind = bad_section_name ; end = -1

	if self.use_cweb_flag :
		if match(s,i,"@&lt;"):
			i, kind, end = self.skip_cweb_section_name(s,i)
	elif match(s,i,"&lt;&lt;"):
		i, kind, end = self.skip_noweb_section_name(s,i)

	# trace(`kind` + ":" + `get_line(s,end)`)
	return i, kind, end</t>
<t tx="edream.110203161858.1898">@ This function returns true if i points to a line a sentinel line of one of the following forms:

start_sentinel &lt;&lt;section name&gt;&gt; end_sentinel
start_sentinel &lt;&lt;section name&gt;&gt; (n of m) end_sentinel
start_sentinel -- end -- &lt;&lt;section name&gt;&gt; end_sentinel
start_sentinel -- end -- &lt;&lt;section name&gt;&gt; (n of m) end_sentinel

start_sentinel: the string that signals the start of sentinel lines\
end_sentinel:   the string that signals the endof sentinel lines.

end_sentinel may be None,indicating that sentinel lines end with a newline.

Any of these forms may end with (!newline), indicating that the section reference was not followed by a newline in the orignal text.  We set nl_flag to false if such a string is seen. The name argument contains the section name.

The valid values of kind param are:

non_sentinel_line,   # not a sentinel line.
start_sentinel_line, #   /// &lt;section name&gt; or /// &lt;section name&gt;(n of m)
end_sentinel_line  //  /// -- end -- &lt;section name&gt; or /// -- end -- &lt;section name&gt;(n of m).
@c
def is_sentinel_line (self,s,i):

	result,i,kind,name,part,of,end,nl_flag = self.is_sentinel_line_with_data(s,i)
	return result

def is_sentinel_line_with_data (self,s,i):

	start_sentinel = self.sentinel
	end_sentinel = self.sentinel_end
	&lt;&lt; Initialize the return values &gt;&gt;
	&lt;&lt; Make sure the line starts with start_sentinel &gt;&gt;
	&lt;&lt; Set end_flag if we have -- end -- &gt;&gt;
	&lt;&lt; Make sure we have a section reference &gt;&gt;
	&lt;&lt; Set part and of if they exist &gt;&gt;
	&lt;&lt; Set nl_flag to false if !newline exists &gt;&gt;
	&lt;&lt; Make sure the line ends with end_sentinel &gt;&gt;
	kind = choose(end_flag,end_sentinel_line,start_sentinel_line)
	return true,i,kind,name,part,of,end,nl_flag</t>
<t tx="edream.110203161858.1899">name = end = None
part = of = 1
kind = non_sentinel_line
nl_flag = true
false_data = (false,i,kind,name,part,of,end,nl_flag)
</t>
<t tx="edream.110203161858.1900">if is_nl(s,i): i = skip_nl(s,i)
i = skip_ws(s,i)

# 4/18/00: We now require an exact match of the sentinel.
if match(s,i,start_sentinel):
	i += len(start_sentinel)
else:
	return false_data</t>
<t tx="edream.110203161858.1901"># If i points to "-- end --", this code skips it and sets end_flag.

end_flag = false
i = skip_ws(s,i)
if match(s,i,"--"):
	while i &lt; len(s) and s[i] == '-':
		i += 1
	i = skip_ws(s,i)
	if not match(s,i,"end"):
		return false_data # Not a valid sentinel line.
	i += 3 ; i = skip_ws(s,i)
	if not match(s,i,"--"):
		return false_data # Not a valid sentinel line.
	while i &lt; len(s) and s[i] == '-':
		i += 1
	end_flag = true</t>
<t tx="edream.110203161858.1902">i = skip_ws(s,i)

if (self.use_noweb_flag and match(s,i,"&lt;&lt;") or
	self.use_cweb_flag  and match(s,i,"@&lt;") ):

	j = i ; i, kind, end = self.skip_section_name(s,i)
	if kind != section_ref:
		return false_data
	name = s[j:i]
else:
	return false_data</t>
<t tx="edream.110203161858.1903"># This code handles (m of n), if it exists.
i = skip_ws(s,i)
if match(s,i,'('):
	j = i
	i += 1 ; i = skip_ws(s,i)
	i, part = self.scan_short_val(s,i)
	if part == -1:
		i = j # back out of the scanning for the number.
		part = 1
	else:
		i = skip_ws(s,i)
		if not match(s,i,"of"):
			return false_data
		i += 2 ; i = skip_ws(s,i)
		i, of = self.scan_short_val(s,i)
		if of == -1:
			return false_data
		i = skip_ws(s,i)
		if match(s,i,')'):
			i += 1 # Skip the paren and do _not_ return.
		else:
			return false_data</t>
<t tx="edream.110203161858.1904">line = "(!newline)"
i = skip_ws(s,i)
if match(s,i,line):
	i += len(line)
	nl_flag = false
</t>
<t tx="edream.110203161858.1905">i = skip_ws(s,i)
if end_sentinel:
	# Make sure the line ends with the end sentinel.
	if match(s,i,end_sentinel):
		i += len(end_sentinel)
	else:
		return false_data

end = i # Show the start of the whitespace.
i = skip_ws(s,i)
if i &lt; len(s) and not is_nl(s,i):
	return false_data</t>
<t tx="edream.110203161858.1906"># This function pushes a new def_node on the top of the section stack.

def push_new_def_node (self,name,indent,part,of,nl_flag):
		
	# trace(`name` + ":" + `part`)
	node = def_node(name,indent,part,of,nl_flag,None)
	self.def_stack.append(node)</t>
<t tx="edream.110203161858.1907"># This function scans a positive integer.
# returns (i,val), where val == -1 if there is an error.

def scan_short_val (self,s,i):

	if i &gt;= len(s) or s[i] not in string.digits:
		return i, -1

	j = i
	while i &lt; len(s) and s[i] in string.digits:
		i += 1

	val = int(s[j:i])
	# trace(s[j:i] + ":" + `val`)
	return i, val</t>
<t tx="edream.110203161858.1908">def setRootFromHeadline (self,v):

	# trace(`v`)
	s = v.headString()

	if s[0:5] == "@root":
		i,self.start_mode = scanAtRootOptions(s,0)
		i = skip_ws(s,i)

		if i &lt; len(s): # Non-empty file name.
			# self.root_name must be set later by token_type().
			self.root = s[i:]</t>
<t tx="edream.110203161858.1909">@ This code skips the file name used in @root directives.  i points after the @root directive.

File names may be enclosed in &lt; and &gt; characters, or in double quotes.  If a file name is not enclosed be these delimiters it continues until the next newline.
@c
def setRootFromText(self,s,err_flag):
	
	# trace(`s`)
	self.root_name = None
	i,self.start_mode = scanAtRootOptions(s,0)
	i = skip_ws(s,i)
	
	if i &gt;= len(s): return i
	# Allow &lt;&gt; or "" as delimiters, or a bare file name.
	if s[i] == '"':
		i += 1 ; delim = '"'
	elif s[i] == '&lt;':
		i += 1 ; delim = '&gt;'
	else: delim = body_newline

	root1 = i # The name does not include the delimiter.
	while i &lt; len(s) and s[i] != delim and not is_nl(s,i):
		i += 1
	root2 = i

	if delim != body_newline and not match(s,i,delim):
		if err_flag:
			scanError("bad filename in @root " + s[:i])
	else:
		self.root_name = string.strip(s[root1:root2])
	return i</t>
<t tx="edream.110203161858.1910">@ This function skips past a section name that starts with @&lt; and ends with @&gt;. This code also skips any = following the section name.

Returns (i, kind, end), where kind is:

	bad_section_name:  @ &lt; with no matching @ &gt;
	section_ref: @ &lt; name @ &gt;
	section_def: @ &lt; name @ &gt; =

Unlike noweb, bad section names generate errors.
@c

def skip_cweb_section_name(self,s,i):
	
	j = i # Used for error message.
	kind = bad_section_name ; end = -1
	runon = false ; empty_name = true
	assert(s[i:i+2]=="@&lt;")
	i += 2
	while i &lt; len(s):
		if match(s,i,"@&gt;="):
			i += 3 ; end = i-1 ; kind = section_def ; break
		elif match(s,i,"@&gt;"):
			i += 2 ; end = i ; kind = section_ref ; break
		elif match(s,i,"@&lt;"):
			runon = true ; break
		elif match(s,i,"@@"): i += 2
		elif is_ws_or_nl(s,i): i += 1
		else:
			i += 1 ; empty_name = false

	if empty_name:
		scanError("empty CWEB section name: " + s[j:i])
		return i, bad_section_name, -1
	elif i &gt;= len(s) or runon:
		scanError("Run on CWEB section name: " + s[j:i])
		return i, bad_section_name, -1
	else:
		return i, kind, end</t>
<t tx="edream.110203161858.1911">@ This function skips past a section name that starts with &lt; &lt; and might end with &gt; &gt; or &gt; &gt; =. The entire section name must appear on the same line.

Note: this code no longer supports extended noweb mode.

Returns (i, kind, end),
	end indicates the end of the section name itself (not counting the =).
	kind is one of:
		bad_section_name: "no matching "&gt;&gt;" or "&gt;&gt;"  This is _not_ a user error!
		section_ref: &lt; &lt; name &gt; &gt;
		section_def: &lt; &lt; name &gt; &gt; =
		at_root:     &lt; &lt; * &gt; &gt; =
@c
def skip_noweb_section_name(self,s,i):
	
	assert(match(s,i,"&lt;&lt;"))
	i += 2
	j = i # Return this value if no section name found.
	kind = bad_section_name ; end = -1 ; empty_name = true

	# Scan for the end of the section name.
	while i &lt; len(s) and not is_nl(s,i):
		if match(s,i,"&gt;&gt;="):
			i += 3 ; end = i - 1 ; kind = section_def ; break
		elif match(s,i,"&gt;&gt;"):
			i += 2 ; end = i ; kind = section_ref ; break
		elif is_ws_or_nl(s,i):
			i += 1
		elif empty_name and s[i] == '*':
			empty_name = false
			i = skip_ws(s,i+1) # skip the '*'
			if match(s,i,"&gt;&gt;="):
				i += 3 ; end = i - 1 ; kind = at_root ; break
		else:
			i += 1 ; empty_name = false

	if empty_name:
		kind = bad_section_name
	if kind == bad_section_name:
		i = j
	return i, kind, end</t>
<t tx="edream.110203161858.1912"># Returns a tuple (i, kind, end)

def skip_section_name(self,s,i):

	if self.use_noweb_flag:
		return self.skip_noweb_section_name(s,i)
	else:
		return self.skip_cweb_section_name(s,i)</t>
<t tx="edream.110203161858.1913">@ This code removes leading and trailing brackets, converts white space to a single blank and converts to lower case.
@c

def standardize_name (self,name):

	# Convert to lowercase.
	name = string.lower(name)
	# Convert whitespace to a single space.
	name = string.replace(name,'\t',' ')
	name = string.replace(name,'  ',' ')
	# Remove leading '&lt;'
	i = 0 ; n = len(name)
	while i &lt; n and name[i] == '&lt;':
		i += 1
	j = i
	# Find the first '&gt;'
	while i &lt; n and name [i] != '&gt;':
		i += 1
	name = string.strip(name[j:i])
	# trace(`name`)
	return name</t>
<t tx="edream.110203161858.1914">@ Once a directive is seen, related directives in ancesors have no effect.  For example, if an @color directive is seen in node x, no @color or @nocolor directives are examined in any ancestor of x.
@c

def scanAllDirectives(self,v,require_path_flag,issue_error_flag):
	
	"""Scan vnode v and v's ancestors looking for directives,
	setting corresponding tangle ivars and globals.
	"""

	c = self.commands
	# trace(`v`)
	old = {} ; print_mode_changed = false
	self.init_directive_ivars()
	if v:
		s = v.bodyString()
		&lt;&lt; Collect @first attributes &gt;&gt;
	while v:
		s = v.bodyString()
		dict = get_directives_dict(s)
		# trace("dict:" + `dict`, ", " + `v`)
		&lt;&lt; Test for @comment and @language &gt;&gt;
		&lt;&lt; Test for @encoding &gt;&gt;
		&lt;&lt; Test for @lineending &gt;&gt;
		&lt;&lt; Test for print modes directives &gt;&gt;
		&lt;&lt; Test for @path &gt;&gt;
		&lt;&lt; Test for @pagewidth &gt;&gt;
		&lt;&lt; Test for @root &gt;&gt;
		&lt;&lt; Test for @tabwidth &gt;&gt;
		&lt;&lt; Test for @header and @noheader &gt;&gt;
		old.update(dict)
		v = v.parent()
	&lt;&lt; Set self.tangle_directory &gt;&gt;</t>
<t tx="edream.110203161858.1915">@ Stephen P. Schaefer 9/13/2002: Add support for @first.
Unlike other root attributes, does *NOT* inherit from parent nodes.
@c
tag = "@first"
sizeString = len(s) # DTHEIN 13-OCT-2002: use to detect end-of-string
i = 0
while 1:
	# DTHEIN 13-OCT-2002: directives must start at beginning of a line
	if not match_word(s,i,tag):
		i = skip_line(s,i)
	else:
		i = i + len(tag)
		j = i = skip_ws(s,i)
		i = skip_to_end_of_line(s,i)
		if i&gt;j:
			self.first_lines += s[j:i] + '\n'
		i = skip_nl(s,i)
	if i &gt;= sizeString:  # DTHEIN 13-OCT-2002: get out when end of string reached
		break

</t>
<t tx="edream.110203161858.1916">if old.has_key("comment") or old.has_key("language"):
	 pass # Do nothing more.

elif dict.has_key("comment"):

	i = dict["comment"]
	delim1,delim2,delim3 = set_delims_from_string(s[i:])
	if delim1 or delim2:
		self.single_comment_string = delim1
		self.start_comment_string = delim2
		self.end_comment_string = delim3
		# @comment effectively disables Untangle.
		self.language = "unknown"
	else:
		if issue_error_flag:
			es("ignoring: " + s[i:])

elif dict.has_key("language"):

	i = dict["language"]
	language,delim1,delim2,delim3 = set_language(s,i)
	self.language = language
	self.single_comment_string = delim1
	self.start_comment_string = delim2
	self.end_comment_string = delim3
	if 0:
		trace(`self.single_comment_string` + "," +
			`self.start_comment_string` + "," +
			`self.end_comment_string`)
		
	# 10/30/02: These ivars must be updated here!
	# trace(`self.language`)
	self.use_noweb_flag = true
	self.use_cweb_flag = false # Only raw cweb mode is ever used.
	self.raw_cweb_flag = self.language == "cweb" # A new ivar.
</t>
<t tx="edream.110203161858.1917">if not old.has_key("encoding") and dict.has_key("encoding"):
	
	e = scanAtEncodingDirective(s,dict)
	if e:
		self.encoding = e
</t>
<t tx="edream.110203161858.1918">if not old.has_key("lineending") and dict.has_key("lineending"):
	
	lineending = scanAtLineendingDirective(s,dict)
	if lineending:
		self.output_newline = lineending
</t>
<t tx="edream.110203161858.1919">@ It is valid to have more than one of these directives in the same body text: the more verbose directive takes precedence.
@c

if not print_mode_changed:
	for name in ("verbose","terse","quiet","silent"):
		if dict.has_key(name):
			self.print_mode = name
			print_mode_changed = true
			break
</t>
<t tx="edream.110203161858.1920">if require_path_flag and not old.has_key("path") and dict.has_key("path"):

	k = dict["path"]
	&lt;&lt; compute dir and relative_path from s[k:] &gt;&gt;
	if len(dir) &gt; 0:
		base = getBaseDirectory() # May return "".
		if dir and len(dir) &gt; 0:
			dir = os.path.join(base,dir)
			if os.path.isabs(dir):
				&lt;&lt; handle absolute @path &gt;&gt;
			elif issue_error_flag and not self.path_warning_given:
				self.path_warning_given = true # supress future warnings
				self.error("ignoring relative path in @path:" + dir)
	elif issue_error_flag and not self.path_warning_given:
		self.path_warning_given = true # supress future warnings
		self.error("ignoring empty @path")
</t>
<t tx="edream.110203161858.1921">j = i = k + len("@path")
i = skip_to_end_of_line(s,i)
path = string.strip(s[j:i])

# Remove leading and trailing delims if they exist.
if len(path) &gt; 2 and (
	(path[0]=='&lt;' and path[-1] == '&gt;') or
	(path[0]=='"' and path[-1] == '"') ):
	path = path[1:-1]

dir = relative_path = string.strip(path)
if 0: # 11/14/02: we want a _relative_ path, not an absolute path.
	dir = os.path.join(app().loadDir,dir)

# trace("dir: " + dir)</t>
<t tx="edream.110203161858.1922">if os.path.exists(dir):
	self.tangle_directory = dir
else: # 11/19/02
	self.tangle_directory = makeAllNonExistentDirectories(dir)
	if not self.tangle_directory:
		if issue_error_flag and not self.path_warning_given:
			self.path_warning_given = true # supress future warnings
			self.error("@path directory does not exist: " + dir)
			if base and len(base) &gt; 0:
				es("relative_path_base_directory: " + base)
			if relative_path and len(relative_path) &gt; 0:
				es("relative path in @path directive: " + relative_path)</t>
<t tx="edream.110203161858.1923">if not old.has_key("pagewidth") and dict.has_key("pagewidth"):
	
	w = scanAtPagewidthDirective(s,dict,issue_error_flag)
	if w and w &gt; 0:
		self.page_width = w</t>
<t tx="edream.110203161858.1924">@ 10/27/02: new code:  self.root may not be defined here, so any relative directory specified in the @root node will have no effect unless we have this code.

@c
if self.root_name == None and dict.has_key("root"):

	i = dict["root"]
	# i += len("@root")
	self.setRootFromText(s[i:],issue_error_flag)</t>
<t tx="edream.110203161858.1925">if not old.has_key("tabwidth") and dict.has_key("tabwidth"):
	
	w = scanAtTabwidthDirective(s,dict,issue_error_flag)
	if w and w != 0:
		self.tab_width = w
</t>
<t tx="edream.110203161858.1926">if old.has_key("header") or old.has_key("noheader"):
	pass # Do nothing more.
	
elif dict.has_key("header") and dict.has_key("noheader"):
	if issue_error_flag:
		es("conflicting @header and @noheader directives")

elif dict.has_key("header"):
	self.use_header_flag = true

elif dict.has_key("noheader"):
	self.use_header_flag = false
</t>
<t tx="edream.110203161858.1927">@ This code sets self.tangle_directory if it has not already been set by an @path directive.

An absolute file name in an @root directive will override the directory set here.
A relative file name gets appended later to the default directory.
That is, the final file name will be os.path.join(self.tangle_directory,fileName)
@c

if c.frame and require_path_flag and not self.tangle_directory:
	if self.root_name and len(self.root_name) &gt; 0:
		root_dir = os.path.dirname(self.root_name)
	else:
		root_dir = None
	# print "root_dir:", root_dir

	table = ( # This is a precedence table.
		(root_dir,"@root"), 
		(c.tangle_directory,"default tangle"), # Probably should be eliminated.
		(c.frame.openDirectory,"open"))

	base = getBaseDirectory() # May return "".

	for dir2, kind in table:
		if dir2 and len(dir2) &gt; 0:
			# print "base,dir:",`base`,`dir`
			dir = os.path.join(base,dir2)
			if os.path.isabs(dir): # Errors may result in relative or invalid path.
				&lt;&lt; handle absolute path &gt;&gt;

if not self.tangle_directory and require_path_flag: # issue_error_flag:
	self.pathError("No absolute directory specified by @root, @path or Preferences.")
</t>
<t tx="edream.110203161858.1928">if os.path.exists(dir):
	if kind == "@root" and not os.path.isabs(root_dir):
		self.tangle_directory = base
	else:
		self.tangle_directory = dir 
	break
else: # 9/25/02
	self.tangle_directory = makeAllNonExistentDirectories(dir)
	if not self.tangle_directory:
		# 10/27/02: It is an error for this not to exist now.
		self.error("@root directory does not exist:" + dir)
		if base and len(base) &gt; 0:
			es("relative_path_base_directory: " + base)
		if dir2 and len(dir2) &gt; 0:
			es(kind + " directory: " + dir2)
</t>
<t tx="edream.110203161858.1929">@ This method returns a code indicating the apparent kind of token at the position i. The caller must determine whether section definiton tokens are valid.

returns (kind, end) and sets global root_name using setRootFromText().
@c

def token_type(self,s,i,err_flag):

	kind = plain_line ; end = -1
	if self.use_noweb_flag:
		&lt;&lt; set token_type in noweb mode &gt;&gt;
	else:
		&lt;&lt; set token_type for CWEB mode &gt;&gt;
	if kind == at_other :
		&lt;&lt; set kind for directive &gt;&gt;
	# trace(`kind` + ":" + `get_line(s,i)`)
	return kind, end</t>
<t tx="edream.110203161858.1930">if match(s,i,"&lt;&lt;"):
	i, kind, end = self.skip_section_name(s,i)
	if kind == bad_section_name:
		kind = plain_line # not an error.
	elif kind == at_root:
		if self.head_root:
			self.setRootFromText(self.head_root,err_flag)
		else:
			kind = bad_section_name # The warning has been given.
elif match(s,i,"@ ") or match(s,i,"@\t") or match(s,i,"@\n"):
	# 10/30/02: Only @doc starts a noweb doc part in raw cweb mode.
	kind = choose(self.raw_cweb_flag,plain_line,at_doc)
elif match(s,i,"@@"): kind = at_at
elif i &lt; len(s) and s[i] == '@': kind = at_other
else: kind = plain_line</t>
<t tx="edream.110203161858.1931">i = skip_ws(s,i)
if match(s,i,"@*") or match(s,i,"@ "): kind = at_doc
elif match(s,i,"@&lt;"): i, kind, end = self.skip_section_name(s,i)
elif match(s,i,"@@"): kind = at_at
elif match_word(s,i,"@c") or match_word(s,i,"@p"): kind = at_code
elif i &lt; len(s) and s[i] == '@':
	if   i + 1 &gt;= len(s): kind = at_doc
	elif i + 1 &lt; len(s) and s[i+1] not in string.letters:
		kind = at_web
	else: kind = at_other # Set kind later
else: kind = plain_line</t>
<t tx="edream.110203161858.1932"># This code will return at_other for any directive other than those listed.

if match_word(s,i,"@c"):
	# 10/30/02: Only @code starts a code section in raw cweb mode.
	kind = choose(self.raw_cweb_flag,plain_line,at_code)
else:
	for name, type in [
		("@chapter", at_chapter),
		("@code", at_code),
		("@doc", at_doc),
		("@root", at_root),
		("@section", at_section) ]:
		if match_word(s,i,name):
			kind = type ; break
		
if self.raw_cweb_flag and kind == at_other:
	# 10/30/02: Everything else is plain text in raw cweb mode.
	kind = plain_line

if kind == at_root:
	i = self.setRootFromText(s[i:],err_flag)</t>
<t tx="edream.110203161858.1933">@language python

&lt;&lt; about the tree classes &gt;&gt;

from leoGlobals import *
import leoColor
import os,string,Tkinter,tkFont,types

&lt;&lt; about drawing and events &gt;&gt;
&lt;&lt; drawing constants &gt;&gt;

class baseLeoTree:
	"""The base class of the Leo's tree class."""
	@others
	
class leoTree (baseLeoTree):
	"""A class that draws and handles events in an outline."""
	pass</t>
<t tx="edream.110203161858.1934">@ This class implements a tree control similar to Windows explorer.  The draw code is based on code found in Python's IDLE program.  Thank you Guido van Rossum!

The tree class knows about vnodes.  The vnode class could be split into a base class (say a treeItem class) containing the ivars known to the tree class, and a derived class containing everything else, including, e.g., the bodyString ivar.  I haven't chosen to split the vnode class this way because nothing would be gained in Leo.
</t>
<t tx="edream.110203161858.1935">@ Leo must redraw the outline pane when commands are executed and as the result of mouse and keyboard events.  The main challenges are eliminating flicker and handling events properly.  These topics are interrelated.

Eliminating flicker.  Leo must update the outline pane with minimum flicker.  Various versions of Leo have approached this problem in different ways.  The drawing code in leo.py is robust, flexible, relatively simple and should work in almost any conceivable environment.

Leo assumes that all code that changes the outline pane will be enclosed in matching calls to the c.beginUpdate and c.endUpdate  methods of the Commands class. c.beginUpdate() inhibits drawing until the matching c.endUpdate().  These calls may be nested; only the outermost call to c.endUpdate() calls c.redraw() to force a redraw of the outline pane.

In leo.py, code may call c.endUpdate(flag) instead of c.endUpdate().  Leo redraws the screen only if flag is true.  This allows code to suppress redrawing entirely when needed.  For example, study the idle_body_key event handler to see how Leo conditionally redraws the outline pane.

The leoTree class redraws all icons automatically when c.redraw() is called.  This is a major simplification compared to previous versions of Leo.  The entire machinery of drawing icons in the vnode class has been eliminated.  The v.computeIcon method tells what the icon should be.  The v.iconVal ivar that tells what the present icon is. The event handler simply compares these two values and sets redraw_flag if they don't match.

Handling events. Besides redrawing the screen, Leo must handle events or commands that change the text in the outline or body panes.  It is surprisingly difficult to ensure that headline and body text corresponds to the vnode and tnode corresponding to presently selected outline, and vice versa. For example, when the user selects a new headline in the outline pane, we must ensure that 1) the vnode and tnode of the previously selected node have up-to-date information and 2) the body pane is loaded from the correct data in the corresponding tnode.  Early versions of Leo attempted to satisfy these conditions when the user switched outline nodes.  Such attempts never worked well; there were too many special cases.  Later versions of Leo, including leo.py, use a much more direct approach.  The event handlers make sure that the vnode and tnode corresponding to the presently selected node are always kept up-to-date.  In particular, every keystroke in the body pane causes the presently selected tnode to be updated immediately.  There is no longer any need for the c.synchVnode method, though that method still exists for compatibility with old scripts.

The leoTree class contains all the event handlers for the body and outline panes.  The actual work is done in the idle_head_key and idle_body_key methods.  These routines are surprisingly complex; they must handle all the tasks mentioned above, as well as others. The idle_head_key and idle_body_key methods should not be called outside the leoTree class.  However, it often happens that code that handles user commands must simulate an event.  That is, the code needs to indicate that headline or body text has changed so that the screen may be redrawn properly.   The leoTree class defines the following simplified event handlers: onBodyChanged, onBodyWillChange, onBodyKey, onHeadChanged and onHeadlineKey.  Commanders and subcommanders call these event handlers to indicate that a command has changed, or will change, the headline or body text.  Calling event handlers rather than c.beginUpdate and c.endUpdate ensures that the outline pane is redrawn only when needed.
</t>
<t tx="edream.110203161858.1936">box_padding = 5 # extra padding between box and icon
box_width = 9 + box_padding
icon_width = 20
text_indent = 4 # extra padding between icon and tex
child_indent = 28 # was 20
hline_y = 7 # Vertical offset of horizontal line
root_left = 7 + box_width
root_top = 2
hiding = true # True if we don't reallocate items
line_height = 17 + 2 # To be replaced by Font height</t>
<t tx="edream.110203161858.1937"></t>
<t tx="edream.110203161858.1938">def __init__(self,commands,canvas):

	# Objects associated with this tree.
	self.colorizer = leoColor.colorizer(commands)
	self.commands = commands
	self.canvas = canvas
	self.rootVnode = None
	self.topVnode = None
	
	# Miscellaneous info.
	self.iconimages = {} # Image cache set by getIconImage().
	self.active = false # true if tree is active
	self.revertHeadline = None # Previous headline text for abortEditLabel.
	
	# Set self.font and self.fontName.
	self.setFontFromConfig()
	
	# Recycling bindings.
	self.bindings = [] # List of bindings to be unbound when redrawing.
	self.tagBindings = [] # List of tag bindings to be unbound when redrawing.
	self.icon_id_dict = {} # New in 3.12: keys are icon id's, values are vnodes.
	self.edit_text_dict = {} # New in 3.12: keys vnodes, values are edit_text (Tk.Text widgets)
	self.widgets = [] # Widgets that must be destroyed when redrawing.

	# Controlling redraws
	self.updateCount = 0 # self.redraw does nothing unless this is zero.
	self.redrawCount = 0 # For traces
	self.redrawScheduled = false # true if redraw scheduled.

	# Selection ivars.
	self.currentVnode = None # The presently selected vnode.
	self.editVnode = None # The vnode being edited.
	self.initing = false # true: opening file.
	
	# Drag and drop
	self.drag_v = None
	self.dragging = false # true: presently dragging.
	self.controlDrag = false # true: control was down when drag started.
	self.drag_id = None # To reset bindings after drag
	self.keyCount = 0 # For debugging.
	
	# 20-SEP-2002 DTHEIN: keep track of popup menu so we can handle
	#                     behavior better on Linux
	# Context menu
	self.popupMenu = None
	
	# Incremental redraws:
	self.allocateOnlyVisibleNodes = false # true: enable incremental redraws.
	self.trace = false # true enabling of various traces.
	self.prevMoveToFrac = None
	self.visibleArea = None
	self.expandedVisibleArea = None
	
	self.allocatedNodes = 0 # A crucial statistic.
		# Incremental drawing allocates visible nodes at most twice.
		# Non-incremetal drawing allocates all visible nodes once.
		
	if self.allocateOnlyVisibleNodes:
		self.commands.frame.bar1.bind("&lt;B1-ButtonRelease&gt;", self.redraw)</t>
<t tx="edream.110203161858.1939">def deleteBindings (self):
	
	"""Delete all tree bindings and all references to tree widgets."""
	
	# print "deleteBindings: %d, %d" % (len(self.tagBindings),len(self.bindings))

	count = 0
	# Unbind all the tag bindings.
	for id,id2,binding in self.tagBindings:
		self.canvas.tag_unbind(id,binding,id2)
		count += 1
	self.tagBindings = []
	# Unbind all the text bindings.
	for t,id,binding in self.bindings:
		t.unbind(binding,id)
		count += 1
	self.bindings = []
	# print("bindings freed:"+`count`)</t>
<t tx="edream.110203161858.1940"># canvas.delete("all") does _not_ delete the Tkinter objects associated with those objects!

def deleteWidgets (self):
	
	"""Delete all widgets in the canvas"""
	
	self.icon_id_dict = {} # Delete all references to icons.
	self.edit_text_dict = {} # Delete all references to Tk.Edit widgets.
		
	# Fixes a _huge_ memory leak.
	for w in self.widgets:
		w.destroy() 
	self.widgets = []</t>
<t tx="edream.110203161858.1941"></t>
<t tx="edream.110203161858.1942">@ About drawing and updating strategy.

This version of Leo draws the outline "by hand" using the Tk canvas widget.  Surprisingly, this is not only easy, but simplifies the vnode and Commands classes.

1.  Updating and redraw.  The tree.redraw() method is called automatically from the "outermost" call to tree.endUpdate.  Moreover, calling .tree.redraw() inside a tree.beginUpdate/tree.endUpdate pair does nothing.  c.redraw(), c.beginUpdate() and c.endUpdate() just call the corresponding tree methods.  Finally, beginUpdate()/endUpdate(false) can be used to suppress redrawing entirely.

Therefore, the Commands class never needs to worry about extra calls to tree.redraw() provided all code that draws to the tree is enclosed in a tree.beginUpdate/tree.endUpdate pair.  The tree.idle_body_key event handler manages redrawing "by hand" by maintaining a redraw_flag and then calling endUpdate(redraw_flag).

2.  The tree.redraw() method deletes all old canvas items and recomputes all data, including v.iconVal.  This means that v.doDelete need not actually delete vnodes for them to disappear from the screen.  Indeed, vnode are never actually deleted, only unlinked.  It would be valid for "dependent" vnodes to be deleted, but there really is no need to do so.
</t>
<t tx="edream.110203161858.1943">def beginUpdate (self):

	self.updateCount += 1</t>
<t tx="edream.110203161858.1944">def drawBox (self,v,x,y):
	
	y += 7 # draw the box at x, y+7

	iconname = choose(v.isExpanded(),"minusnode.gif", "plusnode.gif")
	image = self.getIconImage(iconname)
	id = self.canvas.create_image(x,y,image=image)

	id1 = self.canvas.tag_bind(id, "&lt;1&gt;", v.OnBoxClick)
	id2 = self.canvas.tag_bind(id, "&lt;Double-1&gt;", lambda x: None)
	
	# Remember the bindings so deleteBindings can delete them.
	self.tagBindings.append((id,id1,"&lt;1&gt;"),)
	self.tagBindings.append((id,id2,"&lt;Double-1&gt;"),)
</t>
<t tx="edream.110203161858.1945"># Draws icon for v at x,y

def drawIcon(self,v,x,y):

	v.iconx, v.icony = x,y
	y += 2 # draw icon at y + 2

	# Always recompute icon.
	val = v.iconVal = v.computeIcon()
	assert(0 &lt;= val &lt;= 15)
	
	# Compute the image name
	imagename = "box"
	if val &lt; 10: imagename += "0"
	imagename += `val`

	# Get the image
	image = self.getIconImage(imagename + ".GIF")
	id = self.canvas.create_image(x,y,anchor="nw",image=image)
	self.icon_id_dict[id] = v # Remember which vnode belongs to the icon.

	id1 = self.canvas.tag_bind(id,"&lt;1&gt;",v.OnIconClick)
	id2 = self.canvas.tag_bind(id,"&lt;Double-1&gt;",v.OnIconDoubleClick)
	id3 = self.canvas.tag_bind(id,"&lt;3&gt;",v.OnIconRightClick)
	
	# Remember the bindings so deleteBindings can delete them.
	self.tagBindings.append((id,id1,"&lt;1&gt;"),)
	self.tagBindings.append((id,id2,"&lt;Double-1&gt;"),)
	self.tagBindings.append((id,id3,"&lt;3&gt;"),)

	return 0 # dummy icon height</t>
<t tx="edream.110203161858.1946"></t>
<t tx="edream.110203161858.1947"># Calling redraw inside c.beginUpdate()/c.endUpdate() does nothing.
# This _is_ useful when a flag is passed to c.endUpdate.

def redraw (self,event=None):
	
	# trace()
	
	if self.updateCount == 0 and not self.redrawScheduled:
		self.redrawScheduled = true
		self.canvas.after_idle(self.idle_redraw)
		
</t>
<t tx="edream.110203161858.1948"># Schedules a redraw even if inside beginUpdate/endUpdate
def force_redraw (self):

	# trace()

	if not self.redrawScheduled:
		self.redrawScheduled = true
		self.canvas.after_idle(self.idle_redraw)</t>
<t tx="edream.110203161858.1949"># Redraws immediately: used by Find so a redraw doesn't mess up selections.
# It is up to the caller to ensure that no other redraws are pending.
def redraw_now (self):

	# trace()

	self.idle_redraw()</t>
<t tx="edream.110203161858.1950">def idle_redraw (self):
	
	self.redrawScheduled = false # 7/10/03: Always do this here.

	frame = self.commands.frame
	if frame not in app().windowList or app().quitting:
		# trace("no frame")
		return
		
	if self.drag_v:
		# trace("dragging",self.drag_v)
		return

	# trace()

	self.expandAllAncestors(self.currentVnode)
	oldcursor = self.canvas['cursor']
	self.canvas['cursor'] = "watch"
	self.allocatedNodes = 0
	if not doHook("redraw-entire-outline",c=self.commands):
		# Erase and redraw the entire tree.
		self.topVnode = None
		self.deleteBindings()
		self.canvas.delete("all")
		self.deleteWidgets()
		self.setVisibleAreaToFullCanvas()
		self.drawTree(self.rootVnode,root_left,root_top,0,0)
		# Set up the scroll region after the tree has been redrawn.
		x0, y0, x1, y1 = self.canvas.bbox("all")
		self.canvas.configure(scrollregion=(0, 0, x1, y1))
		# Do a scrolling operation after the scrollbar is redrawn
		self.canvas.after_idle(self.idle_scrollTo)
		if self.trace:
			self.redrawCount += 1
			print "idle_redraw allocated:",self.redrawCount, self.allocatedNodes
		doHook("after_redraw-outline",c=self.commands)

	self.canvas['cursor'] = oldcursor</t>
<t tx="edream.110203161858.1951">def idle_second_redraw (self):
	
	# trace()
		
	# Erase and redraw the entire tree the SECOND time.
	# This ensures that all visible nodes are allocated.
	self.topVnode = None
	args = self.canvas.yview()
	self.setVisibleArea(args)
	self.deleteBindings()
	self.canvas.delete("all")
	self.drawTree(self.rootVnode,root_left,root_top,0,0)
	
	if self.trace:
		print "idle_second_redraw allocated:",self.redrawCount, self.allocatedNodes</t>
<t tx="edream.110203161858.1952">def drawNode(self,v,x,y):

	"""Draw horizontal line from vertical line to icon"""

	self.canvas.create_line(x, y+7, x+box_width, y+7,tag="lines",fill="gray50") # stipple="gray25")

	if self.inVisibleArea(y):
		return self.force_draw_node(v,x,y)
	else:
		return self.line_height
	
def force_draw_node(self,v,x,y):

	self.allocatedNodes += 1
	if v.firstChild():
		self.drawBox(v,x,y)
	icon_height = self.drawIcon(v,x+box_width,y)
	text_height = self.drawText(v,x+box_width+icon_width,y)
	return max(icon_height, text_height)</t>
<t tx="edream.110203161858.1953"># draws text for v at x,y

def drawText(self,v,x,y):
	
	x += text_indent

	t = Tkinter.Text(self.canvas,
		font=self.font,bd=0,relief="flat",width=self.headWidth(v),height=1)
	self.edit_text_dict[v] = t # Remember which text widget belongs to v.
	
	# Remember the widget so deleteBindings can delete it.
	self.widgets.append(t) # Fixes a _huge_ memory leak.

	t.insert("end", v.headString())
	&lt;&lt; configure the text depending on state &gt;&gt;

	id1 = t.bind("&lt;1&gt;", v.OnHeadlineClick)
	id2 = t.bind("&lt;3&gt;", v.OnHeadlineRightClick) # 9/11/02.
	if 0: # 6/15/02: Bill Drissel objects to this binding.
		t.bind("&lt;Double-1&gt;", v.OnBoxClick)
	id3 = t.bind("&lt;Key&gt;", v.OnHeadlineKey)
	id4 = t.bind("&lt;Control-t&gt;",self.OnControlT)
		# 10/16/02: Stamp out the erroneous control-t binding.
		
	# Remember the bindings so deleteBindings can delete them.
	self.bindings.append((t,id1,"&lt;1&gt;"),)
	self.bindings.append((t,id2,"&lt;3&gt;"),)
	self.bindings.append((t,id3,"&lt;Key&gt;"),)
	self.bindings.append((t,id4,"&lt;Control-t&gt;"),)

	id = self.canvas.create_window(x,y,anchor="nw",window=t)
	self.canvas.tag_lower(id)

	return self.line_height</t>
<t tx="edream.110203161858.1954">if v == self.currentVnode:
	# trace("editVnode",self.editVnode)
	if v == self.editVnode:
		self.setNormalLabelState(v) # 7/7/03
	else:
		self.setDisabledLabelState(v) # selected, disabled
else:
	self.setUnselectedLabelState(v) # unselected</t>
<t tx="edream.110203161858.1955">def drawTree(self,v,x,y,h,level):
	
	# Recursive routine, stat() not useful.
	yfirst = ylast = y
	if level==0: yfirst += 10
	while v:
		# trace(`x` + ", " + `y` + ", " + `v`)
		h = self.drawNode(v,x,y)
		y += h ; ylast = y
		if v.isExpanded() and v.firstChild():
			y = self.drawTree(v.firstChild(),x+child_indent,y,h,level+1)
		v = v.next()
	&lt;&lt; draw vertical line &gt;&gt;
	return y</t>
<t tx="edream.110203161858.1956">id = self.canvas.create_line(
	x, yfirst-hline_y+4,
	x, ylast+hline_y-h,
	fill="gray50", # stipple="gray50"
	tag="lines")

self.canvas.tag_lower(id)</t>
<t tx="edream.110203161858.1957">def endUpdate (self, flag=true):

	assert(self.updateCount &gt; 0)
	self.updateCount -= 1
	if flag and self.updateCount == 0:
		self.redraw()</t>
<t tx="edream.110203161858.1958">@ Returns the proper width of the entry widget for the headline. This has been a problem.
@c

def headWidth(self,v):

	return max(10,5 + len(v.headString()))</t>
<t tx="edream.110203161858.1959">def inVisibleArea (self,y1):
	
	if self.allocateOnlyVisibleNodes:
		if self.visibleArea:
			vis1,vis2 = self.visibleArea
			y2 = y1 + self.line_height
			return y2 &gt;= vis1 and y1 &lt;= vis2
		else: return false
	else:
		return true # This forces all nodes to be allocated on all redraws.
		
def inExpandedVisibleArea (self,y1):
	
	if self.expandedVisibleArea:
		vis1,vis2 = self.expandedVisibleArea
		y2 = y1 + self.line_height
		return y2 &gt;= vis1 and y1 &lt;= vis2
	else:
		return false</t>
<t tx="edream.110203161858.1960"># Returns the last visible node of the screen.

def lastVisible (self):

	v = self.rootVnode
	while v:
		last = v
		if v.firstChild():
			if v.isExpanded():
				v = v.firstChild()
			else:
				v = v.nodeAfterTree()
		else:
			v = v.threadNext()
	return last</t>
<t tx="edream.110203161858.1961">def setLineHeight (self,font):
	
	try:
		metrics = font.metrics()
		linespace = metrics ["linespace"]
		self.line_height = linespace + 5 # Same as before for the default font on Windows.
		# print metrics
	except:
		self.line_height = line_height # was 17 + 2
		es("exception setting outline line height")
		es_exception()</t>
<t tx="edream.110203161858.1962">def getFont (self):

	return self.font
		
# Called by leoFontPanel.
def setFont (self, font=None, fontName=None):
	
	if fontName:
		self.fontName = fontName
		self.font = tkFont.Font(font=fontName)
	else:
		self.fontName = None
		self.font = font
		
	self.setLineHeight(self.font)
	
# Called by ctor and when config params are reloaded.
def setFontFromConfig (self):

	font = app().config.getFontFromParams(
		"headline_text_font_family", "headline_text_font_size",
		"headline_text_font_slant",  "headline_text_font_weight")

	self.setFont(font)</t>
<t tx="edream.110203161858.1963">def getIconImage (self, name):

	# Return the image from the cache if possible.
	if self.iconimages.has_key(name):
		return self.iconimages[name]
		
	try:
		fullname = os.path.join(app().loadDir,"..","Icons",name)
		fullname = os.path.normpath(fullname)
		image = Tkinter.PhotoImage(master=self.canvas, file=fullname)
		self.iconimages[name] = image
		return image
	except:
		es("Exception loading: " + fullname)
		es_exception()
		return None</t>
<t tx="edream.110203161858.1964">@ This scrolls the canvas so that v is in view.  This is done at idle time after a redraw so that treeBar.get() will return proper values.
@c

def idle_scrollTo(self,v=None):

	frame = self.commands.frame
	last = self.lastVisible()
	nextToLast = last.visBack()
	# print 'v,last',`v`,`last`
	if v == None:
		v = self.currentVnode
	h1 = self.yoffset(v)
	h2 = self.yoffset(last)
	if nextToLast: # 2/2/03: compute approximate line height.
		lineHeight = h2 - self.yoffset(nextToLast)
	else:
		lineHeight = 20 # A reasonable default.
	# Compute the fractions to scroll down/up.
	lo, hi = frame.treeBar.get()
	if h2 &gt; 0.1:
		frac = float(h1)/float(h2) # For scrolling down.
		frac2 = float(h1+lineHeight/2)/float(h2) # For scrolling up.
		frac2 = frac2 - (hi - lo)
	else:
		frac = frac2 = 0.0 # probably any value would work here.
	# 2/2/03: new logic for scrolling up.
	frac =  max(min(frac,1.0),0.0)
	frac2 = max(min(frac2,1.0),0.0)

	if frac &lt;= lo:
		if self.prevMoveToFrac != frac:
			self.prevMoveToFrac = frac
			self.canvas.yview("moveto",frac)
	elif frac2 + (hi - lo) &gt;= hi:
		if self.prevMoveToFrac != frac2:
			self.prevMoveToFrac = frac2
			self.canvas.yview("moveto",frac2)
			
	if self.allocateOnlyVisibleNodes:
		self.canvas.after_idle(self.idle_second_redraw)

	# print "%3d %3d %1.3f %1.3f %1.3f %1.3f" % (h1,h2,frac,frac2,lo,hi)</t>
<t tx="edream.110203161858.1965">def numberOfVisibleNodes(self):
	
	n = 0 ; v = self.rootVnode
	while v:
		n += 1
		v = v.visNext()
	return n</t>
<t tx="edream.110203161858.1966">def recolor(self,v,incremental=0):

	body = self.commands.frame.body
	
	if 0: # Do immediately
		self.colorizer.colorize(v,body,incremental)
	else: # Do at idle time
		self.colorizer.schedule(v,body,incremental)

def recolor_now(self,v,incremental=0):

	body = self.commands.frame.body
	self.colorizer.colorize(v,body,incremental)
	
def recolor_range(self,v,leading,trailing):

	body = self.commands.frame.body
	self.colorizer.recolor_range(v,body,leading,trailing)</t>
<t tx="edream.110203161858.1967">@ We can't just return icony because the tree hasn't been redrawn yet.  For the same reason we can't rely on any TK canvas methods here.
@c

def yoffset(self, v1):

	# if not v1.isVisible(): print "yoffset not visible:", `v1`
	root = self.rootVnode
	h, flag = self.yoffsetTree(root,v1)
	# flag can be false during initialization.
	# if not flag: print "yoffset fails:", h, `v1`
	return h

# Returns the visible height of the tree and all sibling trees, stopping at v1

def yoffsetTree(self,v,v1):

	h = 0
	while v:
		# print "yoffsetTree:", `v`
		if v == v1:
			return h, true
		h += self.line_height
		child = v.firstChild()
		if v.isExpanded() and child:
			h2, flag = self.yoffsetTree(child,v1)
			h += h2
			if flag: return h, true
		v = v.next()
	return h, false</t>
<t tx="edream.110203161858.1968">@ Important note: most hooks are created in the vnode callback routines, _not_ here.
</t>
<t tx="edream.110203161858.1969">def OnActivate (self,v,event=None):

	try:
		c = self.commands
		&lt;&lt; activate this window &gt;&gt;
	except:
		es_event_exception("activate tree")</t>
<t tx="edream.110203161858.1970">c = self.commands
# trace(`v`)

if v == self.currentVnode:
	if self.active:
		self.editLabel(v)
	else:
		self.undimEditLabel()
		set_focus(c,self.canvas) # Essential for proper editing.
else:
	self.select(v)
	if v.t.insertSpot != None: # 9/1/02
		c.body.mark_set("insert",v.t.insertSpot)
		c.body.see(v.t.insertSpot)
	else:
		c.body.mark_set("insert","1.0")
	set_focus(c,c.body)

self.active = true</t>
<t tx="edream.110203161858.1971"># Called on click in box and double-click in headline.

def OnBoxClick (self,v):

	# Note: "boxclick" hooks handled by vnode callback routine.
	c = self.commands

	if v.isExpanded():
		v.contract()
	else:
		v.expand()

	self.active = true
	self.select(v)
	set_focus(c,c.body) # 7/12/03
	self.redraw()</t>
<t tx="edream.110203161858.1972">def OnDeactivate (self,event=None):
	
	"""Deactivate the tree pane, dimming any headline being edited."""

	c = self.commands
	focus = get_focus(c.frame.top)

	# Bug fix: 7/13/03: Only do this as needed.
	# Doing this on every click would interfere with the double-clicking.
	if focus not in (c.frame.body, c.frame.log):
		try:
			# trace(focus)
			self.endEditLabel()
			self.dimEditLabel()
		except:
			es_event_exception("deactivate tree")</t>
<t tx="edream.110203161858.1973">def findVnodeWithIconId (self,id):
	
	# Due to an old bug, id may be a tuple.
	try:
		return self.icon_id_dict.get(id[0])
	except:
		return self.icon_id_dict.get(id)
</t>
<t tx="edream.110203161858.1974">@ The &lt;Key&gt; event generates the event before the body text is changed(!), so we register an idle-event handler to do the work later.

1/17/02: Rather than trying to figure out whether the control or alt keys are down, we always schedule the idle_handler.  The idle_handler sees if any change has, in fact, been made to the body text, and sets the changed and dirty bits only if so.  This is the clean and safe way.

2/19/02: We must distinguish between commands like "Find, Then Change", that call onBodyChanged, and commands like "Cut" and "Paste" that call onBodyWillChange.  The former commands have already changed the body text, and that change must be captured immediately.  The latter commands have not changed the body text, and that change may only be captured at idle time.
@c

@others</t>
<t tx="edream.110203161858.1975">def idle_body_key (self,v,oldSel,undoType,ch=None,oldYview=None,newSel=None,oldText=None):
	
	"""Update the body pane at idle time."""

	c = self.commands
	if not c or not v or v != c.currentVnode():
		return "break"
	if doHook("bodykey1",c=c,v=v,ch=ch,oldSel=oldSel,undoType=undoType):
		return "break" # The hook claims to have handled the event.
	body = v.bodyString()
	if not newSel:
		newSel = getTextSelection(c.body)
	if oldText != None:
		s = oldText
	else:
		&lt;&lt; set s to the widget text &gt;&gt;
	&lt;&lt; return if nothing has changed &gt;&gt;
	&lt;&lt; set removeTrailing &gt;&gt;
	if ch in ('\n','\r'):
		&lt;&lt; Do auto indent &gt;&gt;
	elif ch == '\t' and c.tab_width &lt; 0:
		&lt;&lt; convert tab to blanks &gt;&gt;
	&lt;&lt; set s to widget text, removing trailing newlines if necessary &gt;&gt;
	if undoType:
		c.undoer.setUndoTypingParams(v,undoType,body,s,oldSel,newSel,oldYview=oldYview)
	v.t.setTnodeText(s)
	v.t.insertSpot = c.body.index("insert")
	&lt;&lt; recolor the body &gt;&gt;
	if not c.changed:
		c.setChanged(true)
	&lt;&lt; redraw the screen if necessary &gt;&gt;
	doHook("bodykey2",c=c,v=v,ch=ch,oldSel=oldSel,undoType=undoType)
	return "break"</t>
<t tx="edream.110203161858.1976">s = c.body.get("1.0", "end")

if s == None:
	s = u""

if type(s) == type(""):
	s = toUnicode(s,app().tkEncoding) # 2/25/03
	# if len(ch) &gt; 0: print `s`</t>
<t tx="edream.110203161858.1977"># 6/22/03: Make sure we handle delete key properly.

if ch not in ('\n','\r',chr(8)):

	if s == body:
		return "break"
	
	# Do nothing for control characters.
	if (ch == None or len(ch) == 0) and body == s[:-1]:
		return "break"
	
# print `ch`,len(body),len(s)</t>
<t tx="edream.110203161858.1978">@ Tk will add a newline only if:
1. A real change has been made to the Tk.Text widget, and
2. the change did _not_ result in the widget already containing a newline.

It's not possible to tell, given the information available, what Tk has actually done. We need only make a reasonable guess here.   setUndoTypingParams stores the number of trailing newlines in each undo bead, so whatever we do here can be faithfully undone and redone.
@c
new = s ; old = body

if len(new) == 0 or new[-1] != '\n':
	# There is no newline to remove.  Probably will never happen.
	# trace("false: no newline to remove")
	removeTrailing = false
elif len(old) == 0:
	# Ambigous case.
	# trace("false: empty old")
	removeTrailing = ch != '\n' # false
elif old == new[:-1]:
	# A single trailing character has been added.
	# trace("false: only changed trailing.")
	removeTrailing = false
else:
	# The text didn't have a newline, and now it does.
	# Moveover, some other change has been made to the text,
	# So at worst we have misreprented the user's intentions slightly.
	# trace("true")
	removeTrailing = true
	
# trace(`ch`+","+`removeTrailing`)


</t>
<t tx="edream.110203161858.1979"># Do nothing if we are in @nocolor mode or if we are executing a Change command.
if self.colorizer.useSyntaxColoring(v) and undoType != "Change":
	# Get the previous line.
	s=c.body.get("insert linestart - 1 lines","insert linestart -1c")
	# Add the leading whitespace to the present line.
	junk,width = skip_leading_ws_with_indent(s,0,c.tab_width)
	if s and len(s) &gt; 0 and s[-1]==':':
		# For Python: increase auto-indent after colons.
		if self.colorizer.scanColorDirectives(v) == "python":
			width += abs(c.tab_width)
	if app().config.getBoolWindowPref("smart_auto_indent"):
		# Added Nov 18 by David McNab, david@rebirthing.co.nz
		# Determine if prev line has unclosed parens/brackets/braces
		brackets = [width]
		tabex = 0
		for i in range(0, len(s)):
			if s[i] == '\t':
				tabex += c.tab_width - 1
			if s[i] in '([{':
				brackets.append(i+tabex + 1)
			elif s[i] in '}])' and len(brackets) &gt; 1:
				brackets.pop()
		width = brackets.pop()
		# end patch by David McNab
	ws = computeLeadingWhitespace (width,c.tab_width)
	if ws and len(ws) &gt; 0:
		c.body.insert("insert", ws)
		removeTrailing = false # bug fix: 11/18</t>
<t tx="edream.110203161858.1980"># Do nothing if we are executing a Change command.
if undoType != "Change":
	
	# Get the characters preceeding the tab.
	prev=c.body.get("insert linestart","insert -1c")
	
	if 1: # 6/26/03: Convert tab no matter where it is.

		w = computeWidth(prev,c.tab_width)
		w2 = (abs(c.tab_width) - (w % abs(c.tab_width)))
		# print "prev w:" + `w` + ", prev chars:" + `prev`
		c.body.delete("insert -1c")
		c.body.insert("insert",' ' * w2)
	
	else: # Convert only leading tabs.
	
		# Get the characters preceeding the tab.
		prev=c.body.get("insert linestart","insert -1c")

		# Do nothing if there are non-whitespace in prev:
		all_ws = true
		for ch in prev:
			if ch != ' ' and ch != '\t':
				all_ws = false
		if all_ws:
			w = computeWidth(prev,c.tab_width)
			w2 = (abs(c.tab_width) - (w % abs(c.tab_width)))
			# print "prev w:" + `w` + ", prev chars:" + `prev`
			c.body.delete("insert -1c")
			c.body.insert("insert",' ' * w2)</t>
<t tx="edream.110203161858.1981">s = c.body.get("1.0", "end")
s = toUnicode(s,app().tkEncoding) #2/25/03
if len(s) &gt; 0 and s[-1] == '\n' and removeTrailing:
	s = s[:-1]</t>
<t tx="edream.110203161858.1982">self.scanForTabWidth(v)
incremental = undoType not in ("Cut","Paste")
self.recolor_now(v,incremental=incremental)</t>
<t tx="edream.110203161858.1983">redraw_flag = false

c.beginUpdate()

# Update dirty bits.
if not v.isDirty() and v.setDirty(): # Sets all cloned and @file dirty bits
	redraw_flag = true
	
# Update icons.
val = v.computeIcon()
if val != v.iconVal:
	v.iconVal = val
	redraw_flag = true

c.endUpdate(redraw_flag) # redraw only if necessary</t>
<t tx="edream.110203161858.1984"># Called by command handlers that have already changed the text.

def onBodyChanged (self,v,undoType,oldSel=None,oldYview=None,newSel=None,oldText=None):
	
	"""Handle a change to the body pane."""
	
	c = self.commands
	if not v:
		v = c.currentVnode()

	if not oldSel:
		oldSel = getTextSelection(c.body)

	self.idle_body_key(v,oldSel,undoType,oldYview=oldYview,newSel=newSel,oldText=oldText)
</t>
<t tx="edream.110203161858.1985">def OnBodyKey (self,event):
	
	"""Handle any key press event in the body pane."""

	c = self.commands ; v = c.currentVnode() ; ch = event.char
	oldSel = getTextSelection(c.body)
	
	if 0:
		self.keyCount += 1
		if ch and len(ch)&gt;0: print "%4d %s" % (self.keyCount,repr(ch))
		
	# We must execute this even if len(ch) &gt; 0 to delete spurious trailing newlines.
	self.commands.body.after_idle(self.idle_body_key,v,oldSel,"Typing",ch)</t>
<t tx="edream.110203161858.1986"># Called by command handlers that change the text just before idle time.

def onBodyWillChange (self,v,undoType,oldSel=None,oldYview=None):
	
	"""Queue the body changed idle handler."""
	
	c = self.commands
	if not v: v = c.currentVnode()
	if not oldSel:
		oldSel = getTextSelection(c.body)
	  
	self.commands.body.after_idle(self.idle_body_key,v,oldSel,undoType,oldYview)

</t>
<t tx="edream.110203161858.1987">def OnContinueDrag(self,v,event):

	try:
		&lt;&lt; continue dragging &gt;&gt;
	except:
		es_event_exception("continue drag")</t>
<t tx="edream.110203161858.1988"># trace(`v`)
assert(v == self.drag_v)

c = self.commands 
canvas = self.canvas
frame = self.commands.frame

if event:
	x,y = event.x,event.y
else:
	x,y = frame.top.winfo_pointerx(),frame.top.winfo_pointery()
	if x == -1 or y == -1: return # Stop the scrolling if we go outside the entire window.

canvas_x = canvas.canvasx(x)
canvas_y = canvas.canvasy(y)

id = self.canvas.find_closest(canvas_x,canvas_y)

# OnEndDrag() halts the scrolling by clearing self.drag_id when the mouse button goes up.
if self.drag_id: # This gets cleared by OnEndDrag()
	&lt;&lt; scroll the canvas as needed &gt;&gt;</t>
<t tx="edream.110203161858.1989"># Scroll the screen up or down one line if the cursor (y) is outside the canvas.
h = canvas.winfo_height()
if y &lt; 0 or y &gt; h:
	lo, hi = frame.treeBar.get()
	n = self.savedNumberOfVisibleNodes
	line_frac = 1.0 / float(n)
	frac = choose(y &lt; 0, lo - line_frac, lo + line_frac)
	frac = min(frac,1.0)
	frac = max(frac,0.0)
	# es("lo,hi,frac:" + `lo` + " " + `hi` + " " + `frac`)
	canvas.yview("moveto", frac)
	
	# Queue up another event to keep scrolling while the cursor is outside the canvas.
	lo, hi = frame.treeBar.get()
	if (y &lt; 0 and lo &gt; 0.1) or (y &gt; h and hi &lt; 0.9):
		canvas.after_idle(self.OnContinueDrag,v,None) # Don't propagate the event.</t>
<t tx="edream.110203161858.1990"># This works around an apparent Tk bug.

def OnControlT (self,event=None):

	# If we don't inhibit further processing the Tx.Text widget switches characters!
	return "break"</t>
<t tx="edream.110203161858.1991"># This precomputes numberOfVisibleNodes(), a significant optimization.
# We also indicate where findVnodeWithIconId() should start looking for tree id's.

def OnDrag(self,v,event):

	# Note: "drag" hooks handled by vnode callback routine.
	# trace(event)
	
	c = self.commands
	assert(v == self.drag_v)

	if not event:
		return

	if not self.dragging:
		# 11/25/02: Only do this once: greatly speeds drags.
		self.savedNumberOfVisibleNodes = self.numberOfVisibleNodes()
		self.dragging = true
		self.controlDrag = c.frame.controlKeyIsDown
		# 1/29/03: support this new option.
		flag = app().config.getBoolWindowPref("look_for_control_drag_on_mouse_down")
		if flag:
			if self.controlDrag:
				es("dragged node will be cloned")
			else:
				es("dragged node will be moved")
		self.canvas['cursor'] = "hand2" # "center_ptr"

	self.OnContinueDrag(v,event)</t>
<t tx="edream.110203161858.1992">def OnEndDrag(self,v,event):
	
	"""Tree end-of-drag handler called from vnode event handler."""
	
	# trace(v)
	
	# 7/10/03: Make sure we are still dragging.
	if not self.drag_v:
		return

	assert(v == self.drag_v)
	c = self.commands ; canvas = self.canvas

	if event:
		&lt;&lt; set vdrag, childFlag &gt;&gt;
		# 1/29/03: support for this new option.
		flag = app().config.getBoolWindowPref("look_for_control_drag_on_mouse_down")
		if not flag:
			self.controlDrag = c.frame.controlKeyIsDown
		if vdrag and vdrag != v:
			if self.controlDrag: # Clone v and move the clone.
				if childFlag:
					c.dragCloneToNthChildOf(v,vdrag,0)
				else:
					c.dragCloneAfter(v,vdrag)
			else: # Just drag v.
				if childFlag:
					c.dragToNthChildOf(v,vdrag,0)
				else:
					c.dragAfter(v,vdrag)
		else:
			if v and self.dragging:
				pass # es("not dragged: " + v.headString())
			if 0: # Don't undo the scrolling we just did!
				self.idle_scrollTo(v)
	
	# 1216/02: Reset the old cursor by brute force.
	self.canvas['cursor'] = "arrow"

	if self.drag_id:
		canvas.tag_unbind(self.drag_id , "&lt;B1-Motion&gt;")
		canvas.tag_unbind(self.drag_id , "&lt;Any-ButtonRelease-1&gt;")
		self.drag_id = None
		
	self.dragging = false
	self.drag_v = None</t>
<t tx="edream.110203161858.1993">x,y = event.x,event.y
canvas_x = canvas.canvasx(x)
canvas_y = canvas.canvasy(y)

id = self.canvas.find_closest(canvas_x,canvas_y)
vdrag = self.findVnodeWithIconId(id)
childFlag = vdrag and vdrag.hasChildren() and vdrag.isExpanded()</t>
<t tx="edream.110203161858.1994">@ The &lt;Key&gt; event generates the event before the headline text is changed(!), so we register an idle-event handler to do the work later.
@c

@others</t>
<t tx="edream.110203161858.1995">def onHeadChanged (self,v):
	
	"""Handle a change to headline text."""

	self.commands.body.after_idle(self.idle_head_key,v)


</t>
<t tx="edream.110203161858.1996">def OnHeadlineKey (self,v,event):
	
	"""Handle a key event in a headline."""

	ch = event.char
	self.commands.body.after_idle(self.idle_head_key,v,ch)

</t>
<t tx="edream.110203161858.1997">def idle_head_key (self,v,ch=None):
	
	"""Update headline text at idle time."""

	c = self.commands
	if not v or not v.edit_text() or v != c.currentVnode():
		return "break"
	if doHook("headkey1",c=c,v=v,ch=ch):
		return "break" # The hook claims to have handled the event.

	&lt;&lt; set s to the widget text &gt;&gt;
	&lt;&lt; set head to vnode text &gt;&gt;
	changed = s != head
	done = ch and (ch == '\r' or ch == '\n')
	if not changed and not done:
		return "break"
	if changed:
		c.undoer.setUndoParams("Change Headline",v,newText=s,oldText=head)
	index = v.edit_text().index("insert")
	if changed:
		&lt;&lt; update v and all nodes joined to v &gt;&gt;
	&lt;&lt; reconfigure v and all nodes joined to v &gt;&gt;
	&lt;&lt; update the screen &gt;&gt;

	doHook("headkey2",c=c,v=v,ch=ch)
	return "break"</t>
<t tx="edream.110203161858.1998">s = v.edit_text().get("1.0","end")
s = toUnicode(s,app().tkEncoding) # 2/25/03
if not s:
	s = u""
s = s.replace('\n','')
s = s.replace('\r','')
# trace(`s`)
</t>
<t tx="edream.110203161858.1999">head = v.headString()
if head == None:
	head = u""
head = toUnicode(head,"utf-8")
</t>
<t tx="edream.110203161858.2000">c.beginUpdate()

# Update changed bit.
if not c.changed:
	c.setChanged(true)

# Update all dirty bits.
v.setDirty()

# Update v.
v.initHeadString(s)
v.edit_text().delete("1.0","end")
v.edit_text().insert("end",s)
v.edit_text().mark_set("insert",index)

# Update all joined nodes.
for v2 in v.t.joinList:
	if v2 != v:
		v2.initHeadString(s)
		if v2.edit_text(): # v2 may not be visible
			v2.edit_text().delete("1.0","end")
			v2.edit_text().insert("end",s)

c.endUpdate(false) # do not redraw now.</t>
<t tx="edream.110203161858.2001"># Reconfigure v's headline.
if done:
	self.setDisabledLabelState(v)

v.edit_text().configure(width=self.headWidth(v))

# Reconfigure all joined headlines.
for v2 in v.t.joinList:
	if v2 != v:
		if v2.edit_text(): # v2 may not be visible
			v2.edit_text().configure(width=self.headWidth(v2))</t>
<t tx="edream.110203161858.2002">if done:
	c.beginUpdate()
	self.endEditLabel()
	c.endUpdate()

elif changed:
	# update v immediately.  Joined nodes are redrawn later by endEditLabel.
	# Redrawing the whole screen now messes up the cursor in the headline.
	self.drawIcon(v,v.iconx,v.icony) # just redraw the icon.</t>
<t tx="edream.110203161858.2003">def OnIconClick (self,v,event):

	# Note: "iconclick" hooks handled by vnode callback routine.

	canvas = self.canvas
	if event:
		canvas_x = canvas.canvasx(event.x)
		canvas_y = canvas.canvasy(event.y)
		id = canvas.find_closest(canvas_x,canvas_y)
		if id != None:
			try: id = id[0]
			except: pass
			# trace("drag_v",v)
			self.drag_v = v
			self.drag_id = id
			id4 = canvas.tag_bind(id,"&lt;B1-Motion&gt;", v.OnDrag)
			id5 = canvas.tag_bind(id,"&lt;Any-ButtonRelease-1&gt;", v.OnEndDrag)
			
			# Remember the bindings so deleteBindings can delete them.
			self.tagBindings.append((id,id4,"&lt;B1-Motion&gt;"),)
			self.tagBindings.append((id,id5,"&lt;Any-ButtonRelease-1&gt;"),)

	self.select(v)
	
def OnIconRightClick (self,v,event):

	self.select(v)</t>
<t tx="edream.110203161858.2004">def OnIconDoubleClick (self,v,event=None):

	# Note: "icondclick" hooks handled by vnode callback routine.

	c = self.commands
	s = v.headString().strip()
	if match_word(s,0,"@url"):
		if not doHook("@url1",c=c,v=v):
			url = s[4:].strip()
			&lt;&lt; stop the url after any whitespace &gt;&gt;
			&lt;&lt; check the url; return if bad &gt;&gt;
			&lt;&lt; pass the url to the web browser &gt;&gt;
		doHook("@url2",c=c,v=v)</t>
<t tx="edream.110203161858.2005"># For safety, the URL string should end at the first whitespace.

url = url.replace('\t',' ')
i = url.find(' ')
if i &gt; -1:
	if 0: # No need for a warning.  Assume everything else is a comment.
		es("ignoring characters after space in url:"+url[i:])
		es("use %20 instead of spaces")
	url = url[:i]
</t>
<t tx="edream.110203161858.2006">if not url or len(url) == 0:
	es("no url following @url")
	return
	
@ A valid url is (according to D.T.Hein):

3 or more lowercase alphas, followed by,
one ':', followed by,
one or more of: (excludes !"#;&lt;&gt;[\]^`|)
  $%&amp;'()*+,-./0-9:=?@A-Z_a-z{}~
followed by one of: (same as above, except no minus sign or comma).
  $%&amp;'()*+/0-9:=?@A-Z_a-z}~
@c

urlPattern = "[a-z]{3,}:[\$-:=?-Z_a-z{}~]+[\$-+\/-:=?-Z_a-z}~]"
import re
# 4/21/03: Add http:// if required.
if not re.match('^([a-z]{3,}:)',url):
	url = 'http://' + url
if not re.match(urlPattern,url):
	es("invalid url: "+url)
	return
</t>
<t tx="edream.110203161858.2007">@ Most browsers should handle the following urls:
  ftp://ftp.uu.net/public/whatever.
  http://localhost/MySiteUnderDevelopment/index.html
  file:///home/me/todolist.html
@c

try:
	import os
	import webbrowser
	os.chdir(app().loadDir)
	# print "url:",url
	webbrowser.open(url)
except:
	es("exception opening " + url)
	es_exception()</t>
<t tx="edream.110203161858.2008">def OnPopup (self,v,event):
	
	"""Handle right-clicks in the outline."""
	
	# Note: "headrclick" hooks handled by vnode callback routine.

	if event != None:
		c = self.commands
		if not doHook("create-popup-menu",c=c,v=v,event=event):
			self.createPopupMenu(v,event)
		if not doHook("enable-popup-menu-items",c=c,v=v,event=event):
			self.enablePopupMenuItems(v,event)
		if not doHook("show-popup-menu",c=c,v=v,event=event):
			self.showPopupMenu(v,event)

	return "break"</t>
<t tx="edream.110203161858.2009">@ On Linux we must do something special to make the popup menu "unpost" if the mouse is clicked elsewhere.  So we have to catch the &lt;FocusOut&gt; event and explicitly unpost.  In order to process the &lt;FocusOut&gt; event, we need to be able to find the reference to the popup window again, so this needs to be an attribute of the tree object; hence, "self.popupMenu".

Aside: though Tk tries to be muli-platform, the interaction with different window managers does cause small differences that will need to be compensated by system specific application code. :-(
@c

# 20-SEP-2002 DTHEIN: This event handler is only needed for Linux.

def OnPopupFocusLost(self,event=None):

	self.popupMenu.unpost()
	
</t>
<t tx="edream.110203161858.2010">def createPopupMenu (self,v,event):
	
	a = app() ; c = self.commands ; frame = c.frame
	
	# If we are going to recreate it, we had better destroy it.
	if self.popupMenu:
		self.popupMenu.destroy()
		self.popupMenu = None
	
	self.popupMenu = menu = Tkinter.Menu(app().root, tearoff=0)
	
	# Add the Open With entries if they exist.
	if a.openWithTable:
		frame.createMenuEntries(menu,a.openWithTable,openWith=1)
		table = (("-",None,None),)
		frame.createMenuEntries(menu,table)
		
	&lt;&lt; Create the menu table &gt;&gt;
	frame.createMenuEntries(menu,table)</t>
<t tx="edream.110203161858.2011">table = (
	("&amp;Read @file Nodes",None,frame.OnReadAtFileNodes),
	("&amp;Write @file Nodes",None,frame.OnWriteAtFileNodes),
	("-",None,None),
	("&amp;Tangle","Shift+Ctrl+T",frame.OnTangle),
	("&amp;Untangle","Shift+Ctrl+U",frame.OnUntangle),
	("-",None,None),
	("Toggle Angle &amp;Brackets","Ctrl+B",frame.OnToggleAngleBrackets),
	("-",None,None),
	("Cut Node","Shift+Ctrl+X",frame.OnCutNode),
	("Copy Node","Shift+Ctrl+C",frame.OnCopyNode),
	("&amp;Paste Node","Shift+Ctrl+V",frame.OnPasteNode),
	("&amp;Delete Node","Shift+Ctrl+BkSp",frame.OnDeleteNode),
	("-",None,None),
	("&amp;Insert Node","Ctrl+I",frame.OnInsertNode),
	("&amp;Clone Node","Ctrl+`",frame.OnCloneNode),
	("Sort C&amp;hildren",None,frame.OnSortChildren),
	("&amp;Sort Siblings","Alt-A",frame.OnSortSiblings),
	("-",None,None),
	("Contract Parent","Alt+0",frame.OnContractParent))</t>
<t tx="edream.110203161858.2012">def enablePopupMenuItems (self,v,event):
	
	"""Enable and disable items in the popup menu."""
	
	c = self.commands ; menu = self.popupMenu

	&lt;&lt; set isAtRoot and isAtFile if v's tree contains @root or @file nodes &gt;&gt;
	isAtFile = choose(isAtFile,1,0)
	isAtRoot = choose(isAtRoot,1,0)
	canContract = v.parent() != None
	canContract = choose(canContract,1,0)
	
	for name in ("Read @file Nodes", "Write @file Nodes"):
		enableMenu(menu,name,isAtFile)
	for name in ("Tangle", "Untangle"):
		enableMenu(menu,name,isAtRoot)
	
	enableMenu(menu,"Cut Node",c.canCutOutline())
	enableMenu(menu,"Delete Node",c.canDeleteHeadline())
	enableMenu(menu,"Paste Node",c.canPasteOutline())
	enableMenu(menu,"Sort Children",c.canSortChildren())
	enableMenu(menu,"Sort Siblings",c.canSortSiblings())
	enableMenu(menu,"Contract Parent",c.canContractParent())</t>
<t tx="edream.110203161858.2013">isAtFile = false ; isAtRoot = false
v2 = v ; next = v.nodeAfterTree()

while (not isAtFile or not isAtRoot) and v2 != None and v2 != next:
	if (
		v2.isAtFileNode() or
		v.isAtRawFileNode() or
		v.isAtSilentFileNode() or
		v.isAtNoSentinelsFileNode()):
		isAtFile = true

	isRoot, junk = is_special(v2.bodyString(),0,"@root")
	if isRoot:
		isAtRoot = true
	v2 = v2.threadNext()</t>
<t tx="edream.110203161858.2014">def showPopupMenu (self,v,event):
	
	"""Show a popup menu."""
	
	c = self.commands ; menu = self.popupMenu

	if sys.platform == "linux2": # 20-SEP-2002 DTHEIN: not needed for Windows
		menu.bind("&lt;FocusOut&gt;",self.OnPopupFocusLost)
	
	menu.post(event.x_root, event.y_root)

	# Make certain we have focus so we know when we lose it.
	# I think this is OK for all OSes.
	set_focus(c,menu)</t>
<t tx="edream.110203161858.2015"></t>
<t tx="edream.110203161858.2016">def allocateNodes(self,where,lines):
	
	"""Allocate Tk widgets in nodes that will become visible as the result of an upcoming scroll"""
	
	assert(where in ("above","below"))

	# print "allocateNodes: %d lines %s visible area" % (lines,where)
	
	# Expand the visible area: a little extra delta is safer.
	delta = lines * (self.line_height + 4)
	y1,y2 = self.visibleArea

	if where == "below":
		y2 += delta
	else:
		y1 = max(0.0,y1-delta)

	self.expandedVisibleArea=y1,y2
	# print "expandedArea:   %5.1f %5.1f" % (y1,y2)
	
	# Allocate all nodes in expanded visible area.
	self.updatedNodeCount = 0
	self.updateTree(self.rootVnode,root_left,root_top,0,0)
	# if self.updatedNodeCount: print "updatedNodeCount:", self.updatedNodeCount
</t>
<t tx="edream.110203161858.2017">def allocateNodesBeforeScrolling (self, args):
	
	"""Calculate the nodes that will become visible as the result of an upcoming scroll.

	args is the tuple passed to the Tk.Canvas.yview method"""

	if not self.allocateOnlyVisibleNodes: return

	# print "allocateNodesBeforeScrolling:",self.redrawCount,`args`

	assert(self.visibleArea)
	assert(len(args)==2 or len(args)==3)
	kind = args[0] ; n = args[1]
	lines = 2 # Update by 2 lines to account for rounding.
	if len(args) == 2:
		assert(kind=="moveto")
		frac1,frac2 = args
		if float(n) != frac1:
			where = choose(n&lt;frac1,"above","below")
			self.allocateNodes(where=where,lines=lines)
	else:
		assert(kind=="scroll")
		linesPerPage = self.canvas.winfo_height()/self.line_height + 2
		n = int(n) ; assert(abs(n)==1)
		where = choose(n == 1,"below","above")
		lines = choose(args[2] == "pages",linesPerPage,lines)
		self.allocateNodes(where=where,lines=lines)</t>
<t tx="edream.110203161858.2018">def updateNode (self,v,x,y):
	
	"""Draw a node that may have become visible as a result of a scrolling operation"""

	if self.inExpandedVisibleArea(y):
		# This check is a major optimization.
		if not v.edit_text():
			return self.force_draw_node(v,x,y)
		else:
			return self.line_height

	return self.line_height</t>
<t tx="edream.110203161858.2019">def setVisibleAreaToFullCanvas(self):
	
	if self.visibleArea:
		y1,y2 = self.visibleArea
		y2 = max(y2,y1 + self.canvas.winfo_height())
		self.visibleArea = y1,y2</t>
<t tx="edream.110203161858.2020">def setVisibleArea (self,args):

	r1,r2 = args
	r1,r2 = float(r1),float(r2)
	# print "scroll ratios:",r1,r2

	try:
		s = self.canvas.cget("scrollregion")
		x1,y1,x2,y2 = scanf(s,"%d %d %d %d")
		x1,y1,x2,y2 = int(x1),int(y1),int(x2),int(y2)
	except:
		self.visibleArea = None
		return
		
	scroll_h = y2-y1
	# print "height of scrollregion:", scroll_h

	vy1 = y1 + (scroll_h*r1)
	vy2 = y1 + (scroll_h*r2)
	self.visibleArea = vy1,vy2
	# print "setVisibleArea: %5.1f %5.1f" % (vy1,vy2)
</t>
<t tx="edream.110203161858.2021">def updateTree (self,v,x,y,h,level):

	yfirst = ylast = y
	if level==0: yfirst += 10
	while v:
		# trace(`x` + ", " + `y` + ", " + `v`)
		h = self.updateNode(v,x,y)
		y += h ; ylast = y
		if v.isExpanded() and v.firstChild():
			y = self.updateTree(v.firstChild(),x+child_indent,y,h,level+1)
		v = v.next()
	return y
</t>
<t tx="edream.110203161858.2022"></t>
<t tx="edream.110203161858.2023">def abortEditLabelCommand (self):
	
	v = self.currentVnode
	# trace(v)
	if self.revertHeadline and v.edit_text() and v == self.editVnode:
		
		# trace(`self.revertHeadline`)
		v.edit_text().delete("1.0","end")
		v.edit_text().insert("end",self.revertHeadline)
		self.idle_head_key(v) # Must be done immediately.
		self.revertHeadline = None
		self.select(v)
		if v and len(v.t.joinList) &gt; 0:
			# 3/26/03: changed redraw_now to force_redraw.
			self.force_redraw() # force a redraw of joined headlines.</t>
<t tx="edream.110203161858.2024"># Convenience methods so the caller doesn't have to know the present edit node.

def dimEditLabel (self):

	v = self.currentVnode
	self.setDisabledLabelState(v)

def undimEditLabel (self):

	v = self.currentVnode
	self.setSelectedLabelState(v)</t>
<t tx="edream.110203161858.2025"># Start editing v.edit_text()

def editLabel (self, v):

	# End any previous editing
	if self.editVnode and v != self.editVnode:
		self.endEditLabel()
		self.revertHeadline = None
		
	self.editVnode = v # 7/7/03.

	# Start editing
	if v and v.edit_text():
		# trace(`v`)
		self.setNormalLabelState(v)
		self.revertHeadline = v.headString()</t>
<t tx="edream.110203161858.2026"># End editing for self.editText

def endEditLabel (self):

	c = self.commands ; v = self.editVnode
	# trace(v)
	if v and v.edit_text():
		self.setUnselectedLabelState(v)
		self.editVnode = None
	if v: # Bug fix 10/9/02: also redraw ancestor headlines.
		# 3/26/03: changed redraw_now to force_redraw.
		self.force_redraw() # force a redraw of joined and ancestor headlines.
	set_focus(c,c.body) # 10/14/02
		
def endEditLabelCommand (self):

	c = self.commands ; v = self.editVnode
	# trace(v)
	if v and v.edit_text():
		self.select(v)
	if v: # Bug fix 10/9/02: also redraw ancestor headlines.
		# 3/26/03: changed redraw_now to force_redraw.
		self.force_redraw() # force a redraw of joined headlines.
	set_focus(c,c.body) # 10/14/02</t>
<t tx="edream.110203161858.2027">def expandAllAncestors (self,v):

	redraw_flag = false
	p = v.parent()
	while p:
		if not p.isExpanded():
			p.expand()
			redraw_flag = true
		p = p.parent()
	return redraw_flag</t>
<t tx="edream.110203161858.2028"># Similar to code in scanAllDirectives.

def scanForTabWidth (self, v):
	
	c = self.commands ; w = c.tab_width

	while v:
		s = v.t.bodyString
		dict = get_directives_dict(s)
		&lt;&lt; set w and break on @tabwidth &gt;&gt;
		v = v.parent()

	c.frame.setTabWidth(w)</t>
<t tx="edream.110203161858.2029">if dict.has_key("tabwidth"):
	
	val = scanAtTabwidthDirective(s,dict,issue_error_flag=false)
	if val and val != 0:
		w = val
		break</t>
<t tx="edream.110203161858.2030"># Warning: do not try to "optimize" this by returning if v==tree.currentVnode.

def select (self,v,updateBeadList=true):
	
	# trace(v)

	&lt;&lt; define vars and stop editing &gt;&gt;

	if not doHook("unselect1",c=c,new_v=v,old_v=old_v):
		&lt;&lt; unselect the old node &gt;&gt;
	else: old_body = u""

	doHook("unselect2",c=c,new_v=v,old_v=old_v)
	
	if not doHook("select1",c=c,new_v=v,old_v=old_v):
		&lt;&lt; select the new node &gt;&gt;
		if v and v != old_v: # 3/26/03: Suppress duplicate call.
			try: # may fail during initialization
				self.idle_scrollTo(v)
			except: pass
		&lt;&lt; update c.beadList or c.beadPointer &gt;&gt;
		&lt;&lt; update c.visitedList &gt;&gt;

	&lt;&lt; set the current node and redraw &gt;&gt;
	doHook("select2",c=c,new_v=v,old_v=old_v)
	doHook("select3",c=c,new_v=v,old_v=old_v)
</t>
<t tx="edream.110203161858.2031">c = self.commands ; frame = c.frame ; body = frame.body
old_v = c.currentVnode()

# Unselect any previous selected but unedited label.
self.endEditLabel()
old = self.currentVnode
self.setUnselectedLabelState(old)</t>
<t tx="edream.110203161858.2032"># Remember the position of the scrollbar before making any changes.
yview=body.yview()
insertSpot = c.body.index("insert")

# Remember the old body text
old_body = body.get("1.0","end")

if old and old != v and old.edit_text():
	old.t.scrollBarSpot = yview
	old.t.insertSpot = insertSpot
</t>
<t tx="edream.110203161858.2033">frame.setWrap(v)

# Delete only if necessary: this may reduce flicker slightly.
s = v.t.bodyString
s = toUnicode(s,"utf-8")
old_body = toUnicode(old_body,"utf-8")
if old_body != s:
	body.delete("1.0","end")
	body.insert("1.0",s)

# We must do a full recoloring: we may be changing context!
self.recolor_now(v)

if v and v.t.scrollBarSpot != None:
	first,last = v.t.scrollBarSpot
	body.yview("moveto",first)

if v.t.insertSpot != None: # 9/21/02: moved from c.selectVnode
	c.body.mark_set("insert",v.t.insertSpot)
	c.body.see(v.t.insertSpot)
else:
	c.body.mark_set("insert","1.0")</t>
<t tx="edream.110203161858.2034">if updateBeadList:
	if c.beadPointer &gt; -1:
		present_v = c.beadList[c.beadPointer]
	else:
		present_v = None
	
	if v != present_v:
		# Replace the tail of c.beadList by c and make c the present node.
		# print "updating c.beadList"
		c.beadPointer += 1
		c.beadList[c.beadPointer:] = []
		c.beadList.append(v)
</t>
<t tx="edream.110203161858.2035"># Make v the most recently visited node on the list.
if v in c.visitedList:
	c.visitedList.remove(v)
	
c.visitedList.insert(0,v)</t>
<t tx="edream.110203161858.2036">self.currentVnode = v
self.setSelectedLabelState(v)
self.scanForTabWidth(v) # 9/13/02 #GS I believe this should also get into the select1 hook
set_focus(c,c.body)
</t>
<t tx="edream.110203161858.2037">def setNormalLabelState (self,v): # selected, editing
	if v and v.edit_text():
		# trace(v)
		&lt;&lt; set editing headline colors &gt;&gt;
		v.edit_text().tag_remove("sel","1.0","end")
		v.edit_text().tag_add("sel","1.0","end")
		set_focus(self.commands,v.edit_text())

def setDisabledLabelState (self,v): # selected, disabled
	if v and v.edit_text():
		# trace(v)
		&lt;&lt; set selected, disabled headline colors &gt;&gt;

def setSelectedLabelState (self,v): # selected, not editing
	self.setDisabledLabelState(v)

def setUnselectedLabelState (self,v): # not selected.
	if v and v.edit_text():
		# trace(v)
		&lt;&lt; set unselected headline colors &gt;&gt;</t>
<t tx="edream.110203161858.2038">config = app().config
fg   = config.getWindowPref("headline_text_editing_foreground_color")
bg   = config.getWindowPref("headline_text_editing_background_color")
selfg = config.getWindowPref("headline_text_editing_selection_foreground_color")
selbg = config.getWindowPref("headline_text_editing_selection_background_color")

if not fg or not bg:
	fg,bg = "black","white"
	
try:
	if selfg and selbg:
		v.edit_text().configure(
			selectforeground=selfg,selectbackground=selbg,
			state="normal",highlightthickness=1,fg=fg,bg=bg)
	else:
		v.edit_text().configure(
			state="normal",highlightthickness=1,fg=fg,bg=bg)
except:
	es_exception()</t>
<t tx="edream.110203161858.2039">config = app().config
fg = config.getWindowPref("headline_text_selected_foreground_color")
bg = config.getWindowPref("headline_text_selected_background_color")

if not fg or not bg:
	fg,bg = "black","gray80"

try:
	v.edit_text().configure(
		state="disabled",highlightthickness=0,fg=fg,bg=bg)
except:
	es_exception()</t>
<t tx="edream.110203161858.2040">config = app().config
fg = config.getWindowPref("headline_text_unselected_foreground_color")
bg = config.getWindowPref("headline_text_unselected_background_color")

if not fg or not bg:
	fg,bg = "black","white"

try:
	v.edit_text().configure(
		state="disabled",highlightthickness=0,fg=fg,bg=bg)
except:
	es_exception()</t>
<t tx="edream.110203161858.2041">def OnUpKey   (self,event=None): return self.moveUpDown("up")
def OnDownKey (self,event=None): return self.moveUpDown("down")

def moveUpDown (self,upOrDown):
	c = self.commands ; body = c.frame.body
	# Make the insertion cursor visible so bbox won't return an empty list.
	body.see("insert")
	# Find the coordinates of the cursor and set the new height.
	# There may be roundoff errors because character postions may not match exactly.
	ins =  body.index("insert")
	lines,char = scanf(ins,"%d.%d")
	x,y,junk,textH = body.bbox("insert")
	bodyW,bodyH = body.winfo_width(),body.winfo_height()
	junk,maxy,junk,junk = body.bbox("@%d,%d" % (bodyW,bodyH))
	# Make sure y is within text boundaries.
	if upOrDown == "up":
		if y &lt;= textH:
			body.yview("scroll",-1,"units")
		else: y = max(y-textH,0)
	else:
		if y &gt;= maxy:
			body.yview("scroll",1,"units")
		else: y = min(y+textH,maxy)
	# Position the cursor on the proper side of the characters.
	newx,newy,width,junk = body.bbox("@%d,%d" % (x,y))
	if x &gt; newx + width/2:
		x = newx + width + 1
	result = body.index("@%d,%d" % (x,y))
	body.mark_set("insert",result)
	# trace("entry:  %s.%s" % (lines,char))
	# trace("result:",result)
	# trace("insert:",body.index("insert"))
	return "break" # Inhibit further bindings.</t>
<t tx="edream.110203161858.2042">@language python

# Undo manager for leo.py.

&lt;&lt; How Leo implements unlimited undo &gt;&gt;
&lt;&lt; Define optional ivars &gt;&gt;
from leoGlobals import *
import types

class baseUndoer:
	"""The base class of the undoer class."""
	@others
	
class undoer (baseUndoer):
	"""A class that implements unlimited undo and redo."""
	pass</t>
<t tx="edream.110203161858.2043">@ Only leo.py supports unlimited undo.  Unlimited undo is straightforward; it merely requires that all commands that affect the outline or body text must be undoable. In other words, everything that affects the outline or body text must be remembered.

We may think of all the actions that may be Undone or Redone as a string of beads (undo nodes). Undoing an operation moves backwards to the next bead; redoing an operation moves forwards to the next bead. A bead pointer points to the present bead. The bead pointer points in front of the first bead when Undo is disabled.  The bead pointer points at the last bead when Redo is disabled. An undo node is a Python dictionary containing all information needed to undo or redo the operation.

The Undo command uses the present bead to undo the action, then moves the bead pointer backwards. The Redo command uses the bead after the present bead to redo the action, then moves the bead pointer forwards. All undoable operations call setUndoParams() to create a new bead. The list of beads does not branch; all undoable operations (except the Undo and Redo commands themselves) delete any beads following the newly created bead.

I did not invent this model of unlimited undo.  I first came across it in the documentation for Apple's Yellow Box classes.
</t>
<t tx="edream.110203161858.2044">optionalIvars = (
	"lastChild",
	"parent","oldParent",
	"back","oldBack",
	"n","oldN","oldV",
	"oldText","newText",
	"oldSel","newSel",
	"sort","select",
	"oldTree",
	"yview",
	# For incremental undo typing...
	"leading","trailing",
	"oldMiddleLines","newMiddleLines",
	"oldNewlines","newNewlines")</t>
<t tx="edream.110203161858.2045">def __init__ (self,commands):
	
	u = self ; u.commands = commands
	
	# Ivars to transition to new undo scheme...
	
	u.debug = false # true: enable debugging code in new undo scheme.
	u.debug_print = false # true: enable print statements in debug code.
	u.new_undo = true # true: enable new debug code.
	
	# Statistics comparing old and new ways (only if u.debug is on).
	u.new_mem = 0
	u.old_mem = 0
	
	# State ivars...
	u.undoType = "Can't Undo"
	# Bug fix: 12/16/02: These must be set here, _not_ in clearUndoState.
	u.redoMenuLabel = "Can't Redo"
	u.undoMenuLabel = "Can't Undo"
	u.realRedoMenuLabel = "Can't Redo"
	u.realUndoMenuLabel = "Can't Undo"
	u.undoing = false # True if executing an Undo command.
	u.redoing = false # True if executing a Redo command.

	u.clearUndoState()</t>
<t tx="edream.110203161858.2046">def clearIvars (self):
	
	self.v = None # The node being operated upon for undo and redo.
	for ivar in optionalIvars:
		setattr(self,ivar,None)</t>
<t tx="edream.110203161858.2047"></t>
<t tx="edream.110203161858.2048">@ This method clears then entire Undo state.  All non-undoable commands should call this method.
@c

def clearUndoState (self):
	
	u = self
	
	if 0: # Bug fix: 12/16/02: setUndo/Redo type needs the old values.
		u.redoMenuLabel = "Can't Redo" 
		u.undoMenuLabel = "Can't Undo"
	
	if 0: # Wrong: set realLabel only when calling setMenuLabel.
		realLabel = app().getRealMenuName("Can't Redo")
		u.realRedoMenuLabel = realLabel.replace("&amp;","")
		realLabel = app().getRealMenuName("Can't Undo")
		u.realUndoMenuLabel = realLabel.replace("&amp;","")
		
	u.setRedoType("Can't Redo")
	u.setUndoType("Can't Undo")
	u.beads = [] # List of undo nodes.
	u.bead = -1 # Index of the present bead: -1:len(beads)
	u.clearIvars()</t>
<t tx="edream.110203161858.2049"># Translation does not affect these routines.

def canRedo (self):

	u = self
	return u.redoMenuLabel != "Can't Redo"

def canUndo (self):

	u = self
	return u.undoMenuLabel != "Can't Undo"
</t>
<t tx="edream.110203161858.2050">def enableMenuItems (self):

	u = self ; c = u.commands
	menu = c.frame.getMenu("Edit")

	enableMenu(menu,u.redoMenuLabel,u.canRedo())
	enableMenu(menu,u.undoMenuLabel,u.canUndo())
</t>
<t tx="edream.110203161858.2051">def getBead (self,n):
	
	u = self
	if n &lt; 0 or n &gt;= len(u.beads): return false
	d = u.beads[n]
	# trace(`n` + ":" + `len(u.beads)` + ":" + `d`)
	self.clearIvars()
	u.v = d["v"]
	u.undoType = d["undoType"]

	for ivar in optionalIvars:
		val = d.get(ivar,None)
		setattr(u,ivar,val)

	if not u.new_undo: # Recreate an "oldText" entry if necessary.
		if u.undoType == "Typing" and u.oldText == None:
			assert(n &gt; 0)
			old_d = u.beads[n-1]
			# The user will lose data if these asserts fail.
			assert(old_d["undoType"] == "Typing")
			assert(old_d["v"] == u.v)
			u.oldText = old_d["newText"]
			# trace(`u.oldText`)
	return d
	
def peekBead (self,n):
	
	u = self
	if n &lt; 0 or n &gt;= len(u.beads): return false
	d = u.beads[n]
	# trace(`n` + ":" + `len(u.beads)` + ":" + `d`)
	return d

def setBead (self,n,keywords=None):

	u = self ; d = {}
	d["undoType"]=u.undoType
	d["v"]=u.v
	# Only enter significant entries into the dictionary.
	# This is an important space optimization for typing.
	for ivar in optionalIvars:
		if getattr(u,ivar) != None:
			d[ivar] = getattr(u,ivar)
	# copy all significant keywords to d.
	if keywords:
		for key in keywords.keys():
			if keywords[key] != None:
				d[key] = keywords[key]
	# Clear the "oldText" entry if the previous entry was a "Typing" entry.
	# This optimization halves the space needed for Undo/Redo Typing.
	if not u.new_undo:
		if u.undoType == "Typing" and n &gt; 0:
			old_d = u.beads[n-1]
			if old_d["undoType"] == "Typing" and old_d["v"] == u.v:
				del d["oldText"] # We can recreate this entry from old_d["newText"]
				# trace(`u.oldText`)
	# trace(`d`)
	return d</t>
<t tx="edream.110203161858.2052">def redoMenuName (self,name):

	if name=="Can't Redo":
		return name
	else:
		return "Redo " + name

def undoMenuName (self,name):

	if name=="Can't Undo":
		return name
	else:
		return "Undo " + name</t>
<t tx="edream.110203161858.2053"># These routines update both the ivar and the menu label.
def setRedoType (self,type):
	u = self ; c = u.commands
	menu = c.frame.getMenu("Edit")
	name = u.redoMenuName(type)
	if name != u.redoMenuLabel:
		# Update menu using old name.
		realLabel = app().getRealMenuName(name)
		if realLabel == name:
			underline=choose(match(name,0,"Can't"),-1,0)
		else:
			underline = realLabel.find("&amp;")
		realLabel = realLabel.replace("&amp;","")
		setMenuLabel(menu,u.realRedoMenuLabel,realLabel,underline=underline)
		u.redoMenuLabel = name
		u.realRedoMenuLabel = realLabel

def setUndoType (self,type):
	u = self ; c = u.commands
	menu = c.frame.getMenu("Edit")
	name = u.undoMenuName(type)
	if name != u.undoMenuLabel:
		# Update menu using old name.
		realLabel = app().getRealMenuName(name)
		if realLabel == name:
			underline=choose(match(name,0,"Can't"),-1,0)
		else:
			underline = realLabel.find("&amp;")
		realLabel = realLabel.replace("&amp;","")
		setMenuLabel(menu,u.realUndoMenuLabel,realLabel,underline=underline)
		u.undoType = type
		u.undoMenuLabel = name
		u.realUndoMenuLabel = realLabel</t>
<t tx="edream.110203161858.2054">@ This routine saves enough information so an operation can be undone and redone.  We do nothing when called from the undo/redo logic because the Undo and Redo commands merely reset the bead pointer.
@c

def setUndoParams (self,undo_type,v,**keywords):

	u = self
	if u.redoing or u.undoing: return None
	if undo_type == None:
		return None
	if undo_type == "Can't Undo":
		u.clearUndoState()
		return None
	# trace(undo_type,v)
	# Set the type: set the menu labels later.
	u.undoType = undo_type
	# Calculate the standard derived information.
	u.v = v
	u.parent = v.parent()
	u.back = v.back()
	u.n = v.childIndex()
	# Push params on undo stack, clearing all forward entries.
	u.bead += 1
	d = u.setBead(u.bead,keywords)
	u.beads[u.bead:] = [d]
	# trace(`u.bead` + ":" + `len(u.beads)` + ":" + `keywords`)
	# Recalculate the menu labels.
	u.setUndoTypes()
	return d</t>
<t tx="edream.110203161858.2055">@ This routine saves enough information so a typing operation can be undone and redone.

We do nothing when called from the undo/redo logic because the Undo and Redo commands merely reset the bead pointer.
@c

def setUndoTypingParams (self,v,undo_type,oldText,newText,oldSel,newSel,oldYview=None):

	u = self ; c = u.commands
	if u.redoing or u.undoing: return None
	if undo_type == None:
		return None
	if undo_type == "Can't Undo":
		u.clearUndoState()
		return None
	if oldText == newText:
		# trace("no change")
		return None
	# Clear all optional params.
	for ivar in optionalIvars:
		setattr(u,ivar,None)
	# Set the params.
	u.undoType = undo_type
	u.v = v
	&lt;&lt; compute leading, middle &amp; trailing  lines &gt;&gt;
	&lt;&lt; save undo text info &gt;&gt;
	u.oldSel = oldSel ; u.newSel = newSel
	# 11/13/02: Remember the scrolling position.
	if oldYview:
		u.yview = oldYview
	else:
		u.yview = c.frame.body.yview()
	# Push params on undo stack, clearing all forward entries.
	u.bead += 1
	d = u.setBead(u.bead)
	u.beads[u.bead:] = [d]
	# trace(`u.bead` + ":" + `len(u.beads)`)
	u.setUndoTypes() # Recalculate the menu labels.
	return d
</t>
<t tx="edream.110203161858.2056">@ Incremental undo typing is similar to incremental syntax coloring.  We compute the number of leading and trailing lines that match, and save both the old and new middle lines.

NB: the number of old and new middle lines may be different.
@c

old_lines = string.split(oldText,'\n')
new_lines = string.split(newText,'\n')
new_len = len(new_lines)
old_len = len(old_lines)
min_len = min(old_len,new_len)

i = 0
while i &lt; min_len:
	if old_lines[i] != new_lines[i]:
		break
	i += 1
leading = i

if leading == new_len:
	# This happens when we remove lines from the end.
	# The new text is simply the leading lines from the old text.
	trailing = 0
else:
	i = 0
	while i &lt; min_len - leading:
		if old_lines[old_len-i-1] != new_lines[new_len-i-1]:
			break
		i += 1
	trailing = i
	
# NB: the number of old and new middle lines may be different.
if trailing == 0:
	old_middle_lines = old_lines[leading:]
	new_middle_lines = new_lines[leading:]
else:
	old_middle_lines = old_lines[leading:-trailing]
	new_middle_lines = new_lines[leading:-trailing]
	
# Remember how many trailing newlines in the old and new text.
i = len(oldText) - 1 ; old_newlines = 0
while i &gt;= 0 and oldText[i] == '\n':
	old_newlines += 1
	i -= 1

i = len(newText) - 1 ; new_newlines = 0
while i &gt;= 0 and newText[i] == '\n':
	new_newlines += 1
	i -= 1

if u.debug_print:
	trace()
	print "lead,trail",leading,trailing
	print "old mid,nls:",len(old_middle_lines),old_newlines,oldText
	print "new mid,nls:",len(new_middle_lines),new_newlines,newText
	#print "lead,trail:",leading,trailing
	#print "old mid:",old_middle_lines
	#print "new mid:",new_middle_lines
	print "---------------------"</t>
<t tx="edream.110203161858.2057">@ This is the start of the incremental undo algorithm.

We must save enough info to do _both_ of the following:

Undo: Given newText, recreate oldText.
Redo: Given oldText, recreate oldText.

The "given" texts for the undo and redo routines are simply v.bodyString().
@c

if u.new_undo:
	if u.debug:
		# Remember the complete text for comparisons...
		u.oldText = oldText
		u.newText = newText
		# Compute statistics comparing old and new ways...
		# The old doesn't often store the old text, so don't count it here.
		u.old_mem += len(newText)
		s1 = string.join(old_middle_lines,'\n')
		s2 = string.join(new_middle_lines,'\n')
		u.new_mem += len(s1) + len(s2)
	else:
		u.oldText = None
		u.newText = None
else:
	u.oldText = oldText
	u.newText = newText

self.leading = leading
self.trailing = trailing
self.oldMiddleLines = old_middle_lines
self.newMiddleLines = new_middle_lines
self.oldNewlines = old_newlines
self.newNewlines = new_newlines</t>
<t tx="edream.110203161858.2058">def setUndoTypes (self):
	
	u = self
	# trace(`u.bead` + ":" + `len(u.beads)`)

	# Set the undo type and undo menu label.
	d = u.peekBead(u.bead)
	if d:
		u.setUndoType(d["undoType"])
	else:
		u.setUndoType("Can't Undo")

	# Set only the redo menu label.
	d = u.peekBead(u.bead+1)
	if d:
		u.setRedoType(d["undoType"])
	else:
		u.setRedoType("Can't Redo")



</t>
<t tx="edream.110203161858.2059">def redo (self):
	
	# clear_stats() ; stat()
	u = self ; c = u.commands
	if not u.canRedo(): return
	if not u.getBead(u.bead+1): return
	current = c.currentVnode()
	if not current: return
	# trace(`u.bead+1` + ":" + `len(u.beads)` + ":" + `u.peekBead(u.bead+1)`)
	u.redoing = true
	redrawFlag = true
	c.beginUpdate()
	redoType = u.undoType # Use the type of the next bead.
	if 1: # range...
		&lt;&lt; redo clone cases &gt;&gt;
		&lt;&lt; redo insert cases &gt;&gt;
		&lt;&lt; redo delete cases &gt;&gt;
		&lt;&lt; redo move &amp; drag cases &gt;&gt;
		&lt;&lt; redo promote and demote cases &gt;&gt;
		&lt;&lt; redo replace cases &gt;&gt;
		&lt;&lt; redo sort cases &gt;&gt;
		&lt;&lt; redo typing cases &gt;&gt;
		else: trace("Unknown case: " + `redoType`)
		c.setChanged(true)
		if u.v: u.v.setDirty()
	c.endUpdate(redrawFlag) # 11/08/02
	u.redoing = false
	u.bead += 1
	u.setUndoTypes()
	# print_stats()</t>
<t tx="edream.110203161858.2060">if redoType in ("Clone","Drag &amp; Clone"):

	if u.back:
		u.v.linkAfter(u.back)
	elif u.parent:
		u.v.linkAsNthChild(u.parent,0)
	else:
		u.v.linkAsRoot()

	shared = u.findSharedVnode(u.v)
	if shared: u.v.joinTreeTo(shared)
	u.v.createDependents()
	c.initAllCloneBits()
	c.selectVnode(u.v)
</t>
<t tx="edream.110203161858.2061">elif redoType == "Delete Outline" or redoType == "Cut Node":

	c.selectVnode(u.v)
	c.deleteHeadline()</t>
<t tx="edream.110203161858.2062">elif redoType in ["Import", "Insert Outline", "Paste Node"]:

	if u.back:
		u.v.linkAfter(u.back)
	elif u.parent:
		u.v.linkAsNthChild(u.parent,0)
	else:
		u.v.linkAsRoot()

	shared = u.findSharedVnode(u.v)
	if shared: u.v.joinTreeTo(shared)
	u.v.createDependents()
	c.initAllCloneBits()
	c.selectVnode(u.v)</t>
<t tx="edream.110203161858.2063">elif redoType in ["Drag","Move Down","Move Left","Move Right","Move Up"]:

	if u.parent:
		u.v.moveToNthChildOf(u.parent,u.n)
	elif u.back:
		u.v.moveAfter(u.back)
	else:
		# 3/16/02: Moving up is the only case that can do this.
		parent = u.v.parent()
		u.v.moveToRoot(c.tree.rootVnode) # 5/27/02
		if parent: # We could assert(parent)
			parent.moveAfter(u.v)
	c.initJoinedCloneBits(u.v) # 7/6/02
	c.selectVnode(u.v)
	
elif redoType == "Drag":

	u.v.moveToNthChildOf(u.parent,u.n)
	c.initJoinedCloneBits(u.v) # 7/6/02
	c.selectVnode(u.v)</t>
<t tx="edream.110203161858.2064">elif redoType == "Demote":

	c.selectVnode(u.v)
	c.demote()
	
elif redoType == "Promote":

	c.selectVnode(u.v)
	c.promote()</t>
<t tx="edream.110203161858.2065">elif redoType in (
	"Convert All Blanks","Convert All Tabs",
	"Extract","Extract Names","Extract Section"):
	
	u.v = self.undoReplace(u.oldTree,u.v,u.newText)
	c.selectVnode(u.v) # Does full recolor.
	if u.newSel:
		start,end=u.newSel
		setTextSelection(c.frame.body,start,end)
	redrawFlag = redoType in ("Extract","Extract Names","Extract Section")
</t>
<t tx="edream.110203161858.2066">elif redoType == "Sort Children":

	c.selectVnode(u.v)
	c.sortChildren()

elif redoType == "Sort Siblings":

	c.selectVnode(u.v)
	c.sortSiblings()
	
elif redoType == "Sort Top Level":
	
	c.selectVnode(u.v)
	c.sortTopLevel()
	u.v = None # don't mark u.v dirty
</t>
<t tx="edream.110203161858.2067">elif redoType in ( "Typing",
	"Change","Convert Blanks","Convert Tabs","Cut",
	"Delete","Indent","Paste","Reformat Paragraph","Undent"):

	# trace(`redoType` + ":" + `u.v`)
	# selectVnode causes recoloring, so avoid if possible.
	if current != u.v:
		c.selectVnode(u.v) ## Optimize this away??
	self.undoRedoText(
		u.v,u.leading,u.trailing,
		u.newMiddleLines,u.oldMiddleLines,
		u.newNewlines,u.oldNewlines,
		tag="redo")
	
	if u.newSel:
		start,end=u.newSel
		setTextSelection (c.frame.body,start,end)
	if u.yview:
		first,last=u.yview
		c.body.yview("moveto",first)
	redrawFlag = (current != u.v)
		
elif redoType == "Change All":

	while 1:
		u.bead += 1
		d = u.getBead(u.bead+1)
		assert(d)
		redoType = u.undoType
		# trace(`redoType`)
		if redoType == "Change All":
			c.selectVnode(u.v)
			break
		elif redoType == "Change":
			u.v.t.setTnodeText(u.newText)
			u.v.setDirty()
		elif redoType == "Change Headline":
			u.v.initHeadString(u.newText)
		else: assert(false)

elif redoType == "Change Headline":
	
	# trace(`u.newText`)
	u.v.setHeadStringOrHeadline(u.newText)
	# Update all joined headlines.
	for v2 in u.v.t.joinList:
		if v2 != u.v:
			v2.setHeadString(u.newText)
	c.selectVnode(u.v)</t>
<t tx="edream.110203161858.2068">@ This function and its allies undo the operation described by the undo parmaters.
@c

def undo (self):
	
	# clear_stats() ; # stat()
	u = self ; c = u.commands
	if not u.canUndo(): return
	if not u.getBead(u.bead): return
	current = c.currentVnode()
	if not current: return
	# trace(`u.bead` + ":" + `len(u.beads)` + ":" + `u.peekBead(u.bead)`)
	c.endEditing()# Make sure we capture the headline for a redo.
	u.undoing = true
	c.beginUpdate()
	undoType = u.undoType
	redrawFlag = true
	if 1: # range...
		&lt;&lt; undo clone cases &gt;&gt;
		&lt;&lt; undo delete cases &gt;&gt;
		&lt;&lt; undo insert cases &gt;&gt;
		&lt;&lt; undo move &amp; drag cases &gt;&gt;
		&lt;&lt; undo promote and demote cases &gt;&gt;
		&lt;&lt; undo replace cases &gt;&gt;
		&lt;&lt; undo sort cases &gt;&gt;
		&lt;&lt; undo typing cases &gt;&gt;
		else: trace("Unknown case: " + `u.undoType`)
		c.setChanged(true)
		if u.v: u.v.setDirty()
	c.endUpdate(redrawFlag) # 11/9/02
	u.undoing = false
	u.bead -= 1
	u.setUndoTypes()
	# print_stats()</t>
<t tx="edream.110203161858.2069"># We can immediately delete the clone because clone() can recreate it using only v.

if undoType == "Clone":
	
	c.selectVnode(u.v)
	c.deleteHeadline()
	c.selectVnode(u.back)
	
elif undoType == "Drag &amp; Clone":
	
	c.selectVnode(u.v)
	c.deleteHeadline()
	c.selectVnode(u.oldV)</t>
<t tx="edream.110203161858.2070">@ Deleting a clone is _not_ the same as undoing a clone: the clone may have been moved, so there is no necessary relationship between the two nodes.
@c

elif undoType == "Delete Outline" or undoType == "Cut Node":
	
	if u.back:
		u.v.linkAfter(u.back)
	elif u.parent:
		u.v.linkAsNthChild(u.parent,0)
	else:
		u.v.linkAsRoot()
	shared = u.findSharedVnode(u.v)
	if shared: u.v.joinTreeTo(shared)
	u.v.createDependents()
	c.initAllCloneBits()
	c.selectVnode(u.v)</t>
<t tx="edream.110203161858.2071">elif undoType in ["Import", "Insert Outline", "Paste Node"]:
	
	c.selectVnode(u.v)
	c.deleteHeadline()
	if u.select:
		# trace("Insert/Paste:" + `u.select`)
		c.selectVnode(u.select)</t>
<t tx="edream.110203161858.2072">elif undoType in ["Drag", "Move Down","Move Left","Move Right","Move Up"]:

	if u.oldParent:
		u.v.moveToNthChildOf(u.oldParent,u.oldN)
	elif u.oldBack:
		u.v.moveAfter(u.oldBack)
	else:
		# 3/16/02: Moving up is the only case that can do this.
		parent = u.v.parent()
		u.v.moveToRoot(c.tree.rootVnode) # 5/27/02
		if parent: # We could assert(parent)
			parent.moveAfter(u.v)
	
	c.initJoinedCloneBits(u.v) # 7/6/02
	c.selectVnode(u.v)
</t>
<t tx="edream.110203161858.2073">elif undoType in (
	"Convert All Blanks","Convert All Tabs",
	"Extract","Extract Names","Extract Section"):
		
	u.v = self.undoReplace(u.v,u.oldTree,u.oldText)
	c.selectVnode(u.v) # Does full recolor.
	if u.oldSel:
		start,end=u.oldSel
		setTextSelection(c.frame.body,start,end)
	redrawFlag = true</t>
<t tx="edream.110203161858.2074">@ Promote and demote operations are the hard to undo, because they involve relinking a list of nodes. We pass the work off to routines dedicated to the task.
@c

elif undoType == "Demote":

	u.undoDemote()

elif undoType == "Promote":
	
	u.undoPromote()</t>
<t tx="edream.110203161858.2075">@ Sort operations are the hard to undo, because they involve relinking a list of nodes. We pass the work off to routines dedicated to the task.
@c

elif undoType == "Sort Children":
	
	u.undoSortChildren()

elif undoType == "Sort Siblings":
	
	u.undoSortSiblings()
	
elif undoType == "Sort Top Level":
	
	u.undoSortTopLevel()
	u.v = None # don't mark u.v dirty</t>
<t tx="edream.110203161858.2076">@ When making "large" changes to text, we simply save the old and new text for undo and redo.  This happens rarely, so the expense is minor.

But for typical typing situations, where we are typing a single character, saving both the old and new text wastes a huge amount of space and puts extreme stress on the garbage collector.  This in turn can cause big performance problems.
@c
	
elif undoType in ( "Typing",
	"Change","Convert Blanks","Convert Tabs","Cut",
	"Delete","Indent","Paste","Reformat Paragraph","Undent"):

	# trace(`undoType` + ":" + `u.v`)
	# selectVnode causes recoloring, so don't do this unless needed.
	if current != u.v:
		c.selectVnode(u.v) ## Optimize this away??
	self.undoRedoText(
		u.v,u.leading,u.trailing,
		u.oldMiddleLines,u.newMiddleLines,
		u.oldNewlines,u.newNewlines,
		tag="undo")
	if u.oldSel:
		start,end=u.oldSel
		setTextSelection (c.frame.body,start,end)
	if u.yview:
		first,last=u.yview
		c.body.yview("moveto",first)
	redrawFlag = (current != u.v)
		
elif undoType == "Change All":

	while 1:
		u.bead -= 1
		d = u.getBead(u.bead)
		assert(d)
		undoType = u.undoType
		# trace(`undoType`)
		if undoType == "Change All":
			c.selectVnode(u.v)
			break
		elif undoType == "Change":
			u.v.t.setTnodeText(u.oldText)
			u.v.setDirty()
		elif undoType == "Change Headline":
			u.v.initHeadString(u.oldText)
		else: assert(false)
		
elif undoType == "Change Headline":
	
	# trace(`u.oldText`)
	u.v.setHeadStringOrHeadline(u.oldText)
	# 9/24/02: update all joined headlines.
	for v2 in u.v.t.joinList:
		if v2 != u.v:
			v2.setHeadString(u.oldText)
	c.selectVnode(u.v)</t>
<t tx="edream.110203161858.2077"></t>
<t tx="edream.110203161858.2078">def findSharedVnode (self,target):

	u = self ; c = u.commands ; v = c.rootVnode()
	while v:
		if v != target and v.t == target.t:
			return v
		v = v.threadNext()
	return None</t>
<t tx="edream.110203161858.2079"># undoes the previous demote operation.
def undoDemote (self):

	u = self ; c = u.commands
	ins = v = u.v
	last = u.lastChild
	child = v.firstChild()
	assert(child)
	c.beginUpdate()
	# 3/19/03: do not undemote children up to last.
	if last:
		while child and child != last:
			child = child.next()
		if child:
			child = child.next()
	while child:
		next = child.next()
		child.moveAfter(ins)
		ins = child
		child = next
	c.selectVnode(v)
	c.endUpdate()</t>
<t tx="edream.110203161858.2080"># Undoes the previous promote operation.
def undoPromote (self):

	u = self ; c = u.commands
	v = v1 = u.v
	assert(v1)
	last = u.lastChild
	next = v.next()
	assert(next)
	c.beginUpdate()
	while next:
		v = next
		next = v.next()
		n = v1.numberOfChildren()
		v.moveToNthChildOf(v1,n)
		if v == last: break
	c.selectVnode(v1)
	c.endUpdate()</t>
<t tx="edream.110203161858.2081">@ This routine implements undo for any kind of operation, no matter how complex.  Just do:

	v_copy = v.copyTree(v)
	(make arbitrary changes to v's tree.)
	c.undoer.setUndoParams("Op Name",v,select=current,oldTree=v_copy)
@c

def undoReplace (self,new_v,old_v,text):
	
	"""Replace new_v with old_v during undo."""

	# trace("new_v:%s" % new_v)
	# trace("old_v:%s" % old_v)
	# trace("text:",text)
	assert(new_v and old_v)
	assert(text is not None)
	u = self ; c = u.commands
	joinList = new_v.t.joinList[:]
	if 0:
		trace("joinList")
		for j in joinList:
			print '\t',j
	assert(new_v in joinList)
	result = None
	for v in joinList:
		if v == new_v: result = copy = old_v
		else: copy = old_v.copyTree()
		# Remember how to link the new node.
		parent = v.parent()
		prev = v.back()
		next = v.next()
		n = v.childIndex()
		# Unlink the old tree.
		v.unjoinTree()
		v.unlink()
		# Link in the new tree.
		if parent: copy.linkAsNthChild(parent,n)
		elif prev: copy.linkAfter(prev)
		else:      copy.linkAsRoot(oldRoot=next)
		copy.addTreeToJoinLists()
		assert(copy in copy.t.joinList)

	assert(result == old_v)
	result.t.setTnodeText(text)
	result.setBodyStringOrPane(text)

	c.initAllCloneBits()
	return result</t>
<t tx="edream.110203161858.2082"># Handle text undo and redo.
# The terminology is for undo: converts _new_ text into _old_ text.

def undoRedoText (self,v,
	leading,trailing, # Number of matching leading &amp; trailing lines.
	oldMidLines,newMidLines, # Lists of unmatched lines.
	oldNewlines,newNewlines, # Number of trailing newlines.
	tag="undo"): # "undo" or "redo"

	u = self ; c = u.commands
	assert(v == c.currentVnode())

	&lt;&lt; Incrementally update the Tk.Text widget &gt;&gt;
	&lt;&lt; Compute the result using v's body text &gt;&gt;
	#trace(`v`)
	#trace("old:"+`v.bodyString()`)
	v.t.setTnodeText(result)
	#trace("new:"+`v.bodyString()`)
	&lt;&lt; Get textResult from the Tk.Text widget &gt;&gt;
	if textResult == result:
		# print "incremental undo:",leading,trailing
		c.tree.recolor_range(v,leading,trailing)
	else: # 11/19/02: # Rewrite the pane and do a full recolor.
		if u.debug_print:
			&lt;&lt; print mismatch trace &gt;&gt;
		# print "non-incremental undo"
		v.setBodyStringOrPane(result)
</t>
<t tx="edream.110203161858.2083"># Only update the changed lines.
mid_text = string.join(oldMidLines,'\n')
new_mid_len = len(newMidLines)
# Maybe this could be simplified, and it is good to treat the "end" with care.
if trailing == 0:
	c.frame.body.delete(str(1+leading)+".0","end")
	if leading &gt; 0:
		c.frame.body.insert("end",'\n')
	c.frame.body.insert("end",mid_text)
else:
	if new_mid_len &gt; 0:
		c.frame.body.delete(str(1+leading)+".0",
			str(leading+new_mid_len)+".0 lineend")
	elif leading &gt; 0:
		c.frame.body.insert(str(1+leading)+".0",'\n')
	c.frame.body.insert(str(1+leading)+".0",mid_text)
# Try to end the Tk.Text widget with oldNewlines newlines.
# This may be off by one, and we don't care because
# we never use body text to compute undo results!
s = c.frame.body.get("1.0","end")
s = toUnicode(s,app().tkEncoding) # 2/25/03
newlines = 0 ; i = len(s) - 1
while i &gt;= 0 and s[i] == '\n':
	newlines += 1 ; i -= 1
while newlines &gt; oldNewlines:
	c.frame.body.delete("end-1c")
	newlines -= 1
if oldNewlines &gt; newlines:
	c.frame.body.insert("end",'\n'*(oldNewlines-newlines))
</t>
<t tx="edream.110203161858.2084"># Recreate the text using the present body text.
body = v.bodyString()
body = toUnicode(body,"utf-8")
body_lines = body.split('\n')
s = []
if leading &gt; 0:
	s.extend(body_lines[:leading])
if len(oldMidLines) &gt; 0:
	s.extend(oldMidLines)
if trailing &gt; 0:
	s.extend(body_lines[-trailing:])
s = string.join(s,'\n')
# Remove trailing newlines in s.
while len(s) &gt; 0 and s[-1] == '\n':
	s = s[:-1]
# Add oldNewlines newlines.
if oldNewlines &gt; 0:
	s = s + '\n' * oldNewlines
result = s
if u.debug_print:
	print "body:  ",`body`
	print "result:",`result`</t>
<t tx="edream.110203161858.2085">textResult = c.frame.body.get("1.0","end")
textResult = toUnicode(textResult,app().tkEncoding) # 2/25/03

if textResult != result:
	# Remove the newline from textResult if that is the only difference.
	if len(textResult) &gt; 0 and textResult[:-1] == result:
		textResult = result</t>
<t tx="edream.110203161858.2086">print "undo mismatch"
print "expected:",`result`
print "actual  :",`textResult`
</t>
<t tx="edream.110203161858.2087">def undoSortChildren (self):

	u = self ; c = u.commands ; v = u.v
	assert(v)
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		index = 0
		for child in u.sort:
			child.moveToNthChildOf(v,index)
			index += 1
		v.setDirty()
		c.setChanged(true)
	c.endUpdate()</t>
<t tx="edream.110203161858.2088">def undoSortSiblings (self):
	
	u = self ; c = u.commands ; v = u.v
	parent = v.parent()
	assert(v and parent)
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		index = 0
		for sib in u.sort:
			sib.moveToNthChildOf(parent,index)
			index += 1
		parent.setDirty()
		c.setChanged(true)
	c.endUpdate()</t>
<t tx="edream.110203161858.2089">def undoSortTopLevel (self):
	
	u = self ; c = u.commands
	root = c.rootVnode()
	
	c.beginUpdate()
	c.endEditing()
	v = u.sort[0]
	v.moveToRoot(oldRoot=root)
	for next in u.sort[1:]:
		next.moveAfter(v)
		v = next
	c.setChanged(true)
	c.endUpdate()
</t>
<t tx="edream.110203161858.2090">line 1
	&lt;&lt; ref &gt;&gt; afterref
	@others
last line</t>
<t tx="edream.110203161858.2091">ref line 1
ref line 2
</t>
<t tx="edream.110203161858.2092">others line 1.
</t>
<t tx="edream.110203161858.2093"># Directives _are_ recognized only in the root of @silentfile or @rawfile trees.

# @language cweb
</t>
<t tx="edream.110203161858.2094">node 1 (no newline)
</t>
<t tx="edream.110203161858.2095">node 2, line1
node 2, line2 (newline)
</t>
<t tx="edream.110203161858.2096">node 3
</t>
<t tx="edream.110203161858.2097">@ Directives _are_ recognized only in the root of @silentfile or @rawfile trees.
</t>
<t tx="edream.110203161858.2098">node 1, line1
node 1, line2 (no newline)</t>
<t tx="edream.110203161858.2099">node 2, line1
node 2, line2 (newline)</t>
<t tx="edream.110203161858.2100">node 3, line1 (changed)
node 3, line2 (no newline)</t>
<t tx="edream.110203161858.2101"># Executing this script will close all windows immediately, even if they have been changed!

from leoGlobals import app
app.forceShutdown()</t>
<t tx="edream.110203161858.2102"></t>
<t tx="edream.110203161858.2103">import inspect,sys

def findGlobalId(name):

	"""A script to find a global id."""

	keys = sys.modules.keys()
	keys.sort()
	print
	found = 0
	for key in keys:
		mod = sys.modules[key]
		if mod:
			# print key
			if 1: # use inspect:
				names = [theName for (theName,value) in inspect.getmembers(mod)]
			else:
				names = mod.__dict__
			if name in names:
				print name,"in module", key
				found += 1
	print name,"in %d" % found,"modules"
			
findGlobalId("count")</t>
<t tx="edream.110203161858.2104">from leoGlobals import *

def compare(name):
	path1 = r"c:\prog\leoCvs\leo\src"
	path2 = r"c:\prog\test"
	f1 = open(path1 + '\\' + name)
	f2 = open(path2 + '\\' + name)
	lines1 = stripBlankAndCommentLines(f1.readlines())
	lines2 = stripBlankAndCommentLines(f2.readlines())
	f1.close() ; f2.close()
	print "%20s %4d %4d" % (name,len(lines1),len(lines2)),
	mismatches = 0 ; n1 = 0 ; n2 = 0
	while n1 &lt; len(lines1) and n2 &lt; len(lines2) and mismatches &lt; 3:
		if lines1[n1] != lines2[n2]:
			mismatches += 1
			print n1,lines1[n1] ; print n2,lines2[n2]
			if   n2+1 &lt; len(lines2) and lines1[n1] == lines2[n2+1]: n1 += 1
			elif n1+1 &lt; len(lines2) and lines2[n2] == lines1[n1+1]: n2 += 1
			else: n1 += 1 ; n2 += 1
		else: n1 += 1 ; n2 += 1
	print "mismatches:",mismatches

def stripBlankAndCommentLines(lines):
	n = 0
	while n &lt; len(lines):
		s = lines[n] ; i = skip_ws(s,0)
		if i == len(s) or match(s,i,'#') or match(s,i,'\n'):
			del lines[n]
		else: n += 1
	return lines
	
print ; print "comparing..."
if 1: # 9/19/03: all files pass
	compare("leo.py")
	compare("leoApp.py") #
	compare("leoAtFile.py")
	compare("leoColor.py")
	compare("leoCommands.py")
	compare("leoCompare.py")
	compare("leoConfig.py") #
	compare("leoDialog.py")
	compare("leoFileCommands.py")
	compare("leoFind.py")
	compare("leoFontPanel.py")
	compare("leoFrame.py") #
	compare("leoGlobals.py")
	compare("leoImport.py")
	compare("leoNodes.py")
	compare("leoPlugins.py")
	compare("leoPrefs.py")
	compare("leoTangle.py")
	compare("leoTree.py")
	compare("leoUndo.py")
print ; print "end of compare"</t>
<t tx="edream.110203161858.2105">@ignore</t>
<t tx="edream.110203161858.2106"># Make scrollbar visible.







line 1
&lt;&lt; sec1 &gt;&gt;
sec1
	sec1 indented
line after
&lt;&lt; sec 2 &gt;&gt;
final line.





# Make scrollbar visible.







</t>
<t tx="edream.110203161858.2107">@language plain
@pagewidth 72
@tabwidth 2

The intent of this tool is to provide 
an aid to memorization practice.  The 
tool is directed at memorization of 
prose or poetry, not music or 
mathematics.  It would probably not 
be useful for memorization of dialog.  The 
purpose of such memorization is 
to be able to recreate a chunk of 
text in your head or on paper, and perhaps verbally.

The steps might be as follows:

Wraps the concatenated text to present page width setting. Leading tabs are sized to present tab width setting.
First and second line of original text is used to determine leading whitespace
in reformatted text.  Hanging indentation is honored.</t>
<t tx="edream.110203161858.2108">test\u4e10test</t>
<t tx="edream.110203161858.2109"></t>
<t tx="edream.110203161858.2110">@first

middle line

@last</t>
<t tx="edream.110203161858.2111"></t>
<t tx="edream.110203161858.2112">from leoGlobals import app

version = "Leooooooo: 0.0.0.00000\n\n"
copyright = (
	"Copyright 1999-2003 by Edward K. Ream\n" +
	"All Rights Reserved\n" +
	"Leo is distributed under the Python License")
url = "http://webpages.charter.net/edreamleo/front.html"
email = "edreamleo@charter.net"

app.gui.runAboutLeoDialog(version,copyright,url,email)</t>
<t tx="edream.110203161858.2113">from leoGlobals import app

# app.gui.runAskOkDialog("Read-only ouline","Warning: the outline: xyzzy is read-only.")
	
app.gui.runAskOkDialog(
	"Python version error",
	message="oooooops\nBad Python version.  Requires v666 or later",
	text="Exit")
</t>
<t tx="edream.110203161858.2114">from leoGlobals import app

n = app.gui.runAskOkCancelNumberDialog("Enter Line Number","Line number:")
print n</t>
<t tx="edream.110203161858.2115">from leoGlobals import app 

if 0:
	reply = app.gui.runAskYesNoDialog("Revert",
		"Revert to previous version of xyzzy?")
		
	print reply
		
answer = app.gui.runAskYesNoDialog(
	"Download Tutorial?",
	"Download tutorial (sbooks.chm) from SourceForge?")
			
print answer</t>
<t tx="edream.110203161858.2116">from leoGlobals import app

if 1:
	answer = app.gui.runAskYesNoCancelDialog(
		"Confirm",'Save changes to xyzzy before crashing')
		
	print answer 

</t>
<t tx="edream.110203161858.2117">@ignore

# Not ready yet...</t>
<t tx="edream.110203161858.2118">@language c
#ifdef COMMENT /* LEO */
@comment /* */
#endif /* COMMENT */

(( Some code ))
@ -------------------------------------------------------------&gt; Input
@c</t>
<t tx="edream.110203161858.2119">@ To do:
	
- Unicode tests.
- File tests.
- Test that most (all?) commander methods can be run without crashing.</t>
<t tx="edream.110203161858.2120"></t>
<t tx="edream.110203161858.2121"></t>
<t tx="edream.110203161858.2122">Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=1745015
By: jmgilligan

For the most part, I can get cweb mode to color both the tex and the c code
appropriately by using @language.

I have run into a small problem, though:

@language latex
blah blah blah

works fine, but

@language latex
@!@^memory allocation@&gt;
blah blah blah

does not. This causes leo to color all subsequent latex text as leo doc parts.

The control sequence @! means underline the following term in the index. @^foo
bar@&gt; means put the term "foo bar" in the index with a reference to the current
location.
</t>
<t tx="edream.110203161858.2123"></t>
<t tx="edream.110203161858.2124"></t>
<t tx="edream.110203161858.2125">@color</t>
<t tx="edream.110203161858.2126">@language actionscript

break
call, continue
delete, do
else
false, for, function
goto
if, in
new, null
return
true, typeof
undefined
var, void, while, with
#include
catch, constructor
prototype
this, try
_parent, _root, __proto__
// Jeeze hasn't anyone ever heard of namespaces??
ASnative, abs, acos, appendChild, asfunction, asin, atan, atan2, attachMovie, attachSound, attributes
BACKSPACE
CAPSLOCK, CONTROL, ceil, charAt, charCodeAt, childNodes, chr, cloneNode, close, concat, connect, cos, createElement, createTextNode
DELETEKEY, DOWN, docTypeDecl, duplicateMovieClip
END, ENTER, ESCAPE, enterFrame, entry, equal, eval, evaluate, exp
firstChild, floor, fromCharCode, fscommand, getAscii
getBeginIndex, getBounds, getBytesLoaded, getBytesTotal, getCaretIndex, getCode, getDate, getDay, getEndIndex, getFocus, getFullYear, getHours, getMilliseconds, getMinutes, getMonth, getPan, getProperty, getRGB, getSeconds, getTime, getTimer, getTimezoneOffset, getTransform, getURL, getUTCDate, getUTCDay, getUTCFullYear, getUTCHours, getUTCMilliseconds, getUTCMinutes, getUTCMonth, getUTCSeconds, getVersion, getVolume, getYear, globalToLocal, gotoAndPlay, gotoAndStop
HOME, haschildNodes, hide, hitTest
INSERT, Infinity, ifFrameLoaded, ignoreWhite, indexOf, insertBefore, int, isDown, isFinite, isNaN, isToggled
join
keycode, keyDown, keyUp
LEFT, LN10, LN2, LOG10E, LOG2E, lastChild, lastIndexOf, length, load, loaded, loadMovie, loadMovieNum, loadVariables, loadVariablesNum, localToGlobal, log
MAX_VALUE, MIN_VALUE, max, maxscroll, mbchr, mblength, mbord, mbsubstring, min, 
NEGATIVE_INFINITY, NaN, newline, nextFrame, nextScene, nextSibling, nodeName, nodeType, nodeValue
on, onClipEvent, onClose, onConnect, onData, onLoad, onXML, ord
PGDN, PGUP, PI, POSITIVE_INFINITY, parentNode, parseFloat, parseInt, parseXML, play, pop, pow, press, prevFrame, previousSibling, prevScene, print, printAsBitmap, printAsBitmapNum, printNum, push
RIGHT, random, release, removeMovieClip, removeNode, reverse, round
SPACE, SQRT1_2, SQRT2, scroll, send, sendAndLoad, set, setDate, setFocus, setFullYear, setHours, setMilliseconds, setMinutes, setMonth, setPan, setProperty, setRGB, setSeconds, setSelection, setTime, setTransform, setUTCDate, setUTCFullYear, setUTCHours, setUTCMilliseconds, setUTCMinutes, setUTCMonth, setUTCSeconds, setVolume, setYear, shift, show, sin, slice, sort, start, startDrag, status, stop, stopAllSounds, stopDrag, substr, substring, swapDepths, splice, split, sqrt
TAB, tan, targetPath, tellTarget, toggleHighQuality, toLowerCase, toString, toUpperCase, trace
UP, UTC, unescape, unloadMovie, unLoadMovieNum, unshift, updateAfterEvent
valueOf
xmlDecl, _alpha
_currentframe
_droptarget
_focusrect, _framesloaded
_height, _highquality
_name
_quality
_rotation
_soundbuftime
_target, _totalframes
_url
_visible
_width
_x, _xmouse, _xscale
_y, _ymouse, _yscale
and, add, eq, ge, gt, le, lt, ne, not, or, Array, Boolean, Color, Date, Key, Math, MovieClip, Mouse, Number, Object, Selection, Sound, String, XML, XMLSocket</t>
<t tx="edream.110203161858.2127">@language c
@comment /* */

@
@c

#define WIPEOUT 0 /* 
                   * Causes database card number &amp; flags to be set to zero. 
                   * This is so I don't need an infinite supply of cards!
                   */
// Not colored (because of @language /* */)
#include "equ.h"
#include "cmn.h"
#include "ramdef.h"
#include "eeprom.h"
#include &lt;hpc_ram.h&gt;
#include &lt;rlydef.h&gt;</t>
<t tx="edream.110203161858.2128">@language cweb

% This is limbo in cweb mode... It should be in \LaTeX mode, not \c mode.
% The following should not be colorized: class,if,else.

@* this is a _cweb_ comment.  Code is written in \c.
"strings" should not be colorized.
It should be colored in \LaTeX mode.
The following are not keywords in latex mode: if, else, etc.
Noweb section referencs are _valid_ in cweb comments!
&lt;&lt; section ref &gt;&gt;
&lt;&lt; missing ref &gt;&gt;
@c

and this is C code. // It is colored in \LaTeX mode by default.
/* This is a C block comment.  It may also be colored in restricted \LaTeX mode. */

// Section refs are valid in code too, of course.
&lt;&lt; section ref &gt;&gt;
&lt;&lt; missing ref &gt;&gt;

\LaTeX and \c should not be colored.
if else, while, do // C keywords.</t>
<t tx="edream.110203161858.2129">&lt;&lt; section def &gt;&gt;=

	my \c code goes here // This is \LaTeX text
	/* This is also \LaTeX text */</t>
<t tx="edream.110203161858.2130">@language html

&lt;HTML&gt;
&lt;!-- Author: Edward K. Ream, edream@tds.net --&gt;
&lt;HEAD&gt;
  &lt;META NAME="GENERATOR" CONTENT="Microsoft FrontPage 4.0"&gt;
  &lt;TITLE&gt; Leo's Home Page &lt;/TITLE&gt;
  &lt;META NAME="description" CONTENT="This page describes Leo.
Leo adds powerful outlines to the noweb and CWEB literate programming languages."&gt;
  &lt;META NAME="keywords" CONTENT="LEO, LITERATE PROGRAMMING, OUTLINES, CWEB,
NOWEB, OUTLINES, EDWARD K. REAM, DONALD E. KNUTH, SILVIO LEVY, OPEN SOFTWARE"&gt;
&lt;/HEAD&gt;
&lt;!-- Last Modified: May 12, 2002 --&gt;
&lt;BODY BGCOLOR="#fffbdc"&gt;

&lt;H1 ALIGN=CENTER&gt;&lt;a NAME="top"&gt;&lt;/a&gt;&lt;IMG SRC="Blank.gif" width=
"32" height="32" ALIGN="BOTTOM" NATURALSIZEFLAG="3"&gt;&lt;IMG SRC="leo.gif" 
WIDTH="32" HEIGHT="32" ALIGN="BOTTOM" NATURALSIZEFLAG="3"&gt;&lt;a href="leo_TOC.html#top"&gt;&lt;IMG SRC=
"arrow_rt.gif" WIDTH="32" HEIGHT="32" ALIGN="BOTTOM" NATURALSIZEFLAG="3"&gt;&lt;/a&gt; &amp;nbsp;&lt;/H1&gt;

&lt;H1 ALIGN=CENTER&gt; Leo's Home Page&lt;/H1&gt;

&lt;p align="center"&gt;&lt;a href="http://www.python.org/"&gt;&lt;img border="0" src="PythonPowered.gif" width="110" height="44"&gt; &lt;/a&gt; &lt;A HREF="http://sourceforge.net/"&gt;&lt;IMG SRC="http://sourceforge.net/sflogo.php?group_id=3458&amp;type=1" NATURALSIZEFLAG="0" ALT="SourceForge Logo"&gt;&lt;/A&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;
&lt;A HREF="http://sourceforge.net/project/?group_id=3458"&gt;Leo at SourceForge&lt;/A&gt;&amp;nbsp;&amp;nbsp;
&lt;a href="icons.html"&gt;&lt;img border="0" src="LeoCodeGray.gif" width="77" height="42"&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;
&lt;a href="icons.html"&gt;&lt;img border="0" src="LeoProse.gif" width="81" height="42"&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;

&lt;H3&gt;&lt;A NAME="anchor127554"&gt;&lt;/A&gt;Summary&lt;/H3&gt;

&lt;UL&gt;
  &lt;LI&gt;Leo is a &lt;i&gt; programmer's editor&lt;/i&gt;  and a flexible &lt;i&gt;browser&lt;/i&gt; for
	projects, programs, classes or data. Leo clarifies design, coding, debugging, testing
  and maintenance.
  &lt;LI&gt;Leo is an &lt;i&gt;outlining editor&lt;/i&gt;. Outlines clarify the big picture while
	providing unlimited space for details.
  &lt;LI&gt;Leo
	is a &lt;a HREF="http://www.literateprogramming.com/"&gt;&lt;i&gt;literate
	programming&lt;/i&gt;&lt;/a&gt; tool, compatible with &lt;A HREF="http://www.eecs.harvard.edu/~nr/noweb/"&gt;noweb&lt;/A&gt;
	and &lt;a HREF="http://www-cs-faculty.stanford.edu/~knuth/cweb.html"&gt;CWEB&lt;/a&gt;.
	Leo enhances any text-based
programming language, from assembly language and C to Java, Python and XML.
  &lt;LI&gt;Leo is also a &lt;i&gt;data organizer&lt;/i&gt;. A single Leo outline can generate complex
	data spanning many different files.&amp;nbsp; Leo has been used to manage web sites.
  &lt;LI&gt;Leo is a &lt;i&gt; project manager&lt;/i&gt;. Leo provides multiple views
of a project within a single outline. Leo naturally represents tasks that remain
	up-to-date.
  &lt;LI&gt;Leo is fully &lt;i&gt; scriptable&lt;/i&gt; using &lt;A HREF="http://www.python.org/"&gt;Python&lt;/A&gt;
  and saves its files in &lt;A HREF="http://www.w3.org/XML/"&gt;XML&lt;/A&gt; format.
  &lt;LI&gt;Leo is &lt;i&gt;portable&lt;/i&gt;.&amp;nbsp; Leo.py is 100% pure Python and will run on
	any platform supporting &lt;A HREF="http://www.python.org/"&gt;Python&lt;/A&gt;
	and &lt;a href="http://tcl.activestate.com/"&gt;Tk/tcl&lt;/a&gt;, including Windows,
	Linux and MacOS X.&amp;nbsp; Leo.exe runs on any Windows platform.
  &lt;LI&gt;Leo is &lt;a href="http://www.opensource.org/"&gt; &lt;i&gt; Open Software&lt;/i&gt;&lt;/a&gt;, distributed under
	the &lt;a href="http://www.python.org/doc/Copyright.html"&gt; Python License&lt;/a&gt;.
&lt;/UL&gt;

&lt;H3&gt;More Information and downloads&lt;/H3&gt;

&lt;ul&gt;
  &lt;LI&gt;An excellent &lt;a href="http://www.3dtree.com/ev/e/sbooks/leo/sbframetoc_ie.htm"&gt;online
	tutorial&lt;/a&gt; and &lt;A HREF="http://www.jserv.com/jk_orr/xml/leo.htm"&gt;Leo resource
  page&lt;/A&gt;, both written by &lt;a href="http://www.jserv.com/jk_orr"&gt;Joe Orr&lt;/a&gt;.
  &lt;LI&gt;My brother's &lt;a href="SpeedReam.html"&gt;slashdot
	article about Leo&lt;/a&gt;, the best description about why Leo is special.
  &lt;LI&gt;&lt;A HREF="testimonials.html#anchor104391"&gt;What people are saying about Leo&lt;/A&gt;
  &lt;LI&gt;&lt;A HREF="leo_TOC.html#anchor964914"&gt;Complete users guide&lt;/A&gt;
	and
	&lt;A HREF="intro.html#anchor887874"&gt;tutorial introduction&lt;/A&gt;  with
  screen shots.
  &lt;li&gt;&lt;a href="FAQ.html"&gt;FAQ&lt;/a&gt; and &lt;a href="http://sourceforge.net/forum/?group_id=3458"&gt;help and discussion
	forums&lt;/a&gt;, preferable to &lt;A HREF="mailto:edream@tds.net"&gt;email&lt;/A&gt; so others may join
	in.&lt;/li&gt;
  &lt;li&gt;&lt;a href="icons.html"&gt;Icons&lt;/a&gt; for bragging about Leo.&lt;/li&gt;
&lt;/ul&gt;

&lt;a href="http://sourceforge.net/project/showfiles.php?group_id=3458"&gt;Download
	Leo&lt;/a&gt; from &lt;A HREF="http://sourceforge.net/project/?group_id=3458"&gt;Leo's SourceForge
site&lt;/A&gt;.

&lt;P ALIGN=left&gt;Leo's author is &lt;A HREF="http://personalpages.tds.net/~edream/index.html"&gt;Edward
  K. Ream&lt;/A&gt; email: &lt;A HREF="mailto:edream@tds.net"&gt;edream@tds.net&lt;/A&gt; voice: (608) 231-0766

&lt;HR ALIGN=LEFT&gt;

&lt;p align="center"&gt;

&lt;IMG SRC="Blank.gif" ALIGN="left" NATURALSIZEFLAG=
"3" width="34" height="34"&gt;&lt;IMG SRC="leo.gif" ALIGN="left" NATURALSIZEFLAG=
"3" width="32" height="32"&gt;&lt;a HREF="leo_TOC.html"&gt;&lt;IMG SRC="arrow_rt.gif" WIDTH="32"
HEIGHT="32" ALIGN="left" NATURALSIZEFLAG="3"&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;</t>
<t tx="edream.110203161858.2131">@language html

&lt;? xml version="1.0"&gt;
&lt;!-- test --&gt;
&lt;project name="Converter" default="dist"&gt;
&lt;/project&gt;"""</t>
<t tx="edream.110203161858.2132">@language latex

% This is a \LaTeX mode comment.

This is a test of \LaTeX mode.

@ blah blah blah
@c

\c and \LaTeX are latex keywords.

This is a keyword \% not the start of a comment.

More keywords: \@ and \( and \) and \{ and \}</t>
<t tx="edream.110203161858.2133">@ignore
@ doc
@c
@language c
	@others

abc
for # comment
# pp
@q comment @&gt; after
// comment
&lt;!-- comment --&gt; after
/* java comment */
{ pascal comment }
% latex comment
xor php keyword
fblocked tcl keyword
synchronized java keyword
\acute latex keyword
alarm perl keyword

# Python single-line comment
// C single-line comment
xx /* C block comment */ yy
xxx """ triple string """ zzz
a 'string' b
c "string" d
// C keywords
switch, case
</t>
<t tx="edream.110203161858.2134">@language php
@ doc
This is a doc part.
@c

and or
array
array()
this is a test.
__CLASS__
&lt;?php and or array() ?&gt;"""</t>
<t tx="edream.110203161858.2135">@language python

"""python
string"""d

'this\
is'''</t>
<t tx="edream.110203161858.2136">"""This creates a free-floating copy of v's tree for undo.
The copied trees must use different tnodes than the original."""
	
def copyTree(self,root):

	c = self
	# Create the root vnode.
	result = v = leoNodes.vnode(c,root.t)
	# Copy the headline and icon values v.copyNode(root,v)
	# Copy the rest of tree.
	v.copyTree(root,v)
	# Replace all tnodes in v by copies.
	assert(v.nodeAfterTree() == None)
	while v:
		v.t = leoNodes.tnode(0, v.t.bodyString)
		v = v.threadNext()
	return result</t>
<t tx="edream.110203161858.2137">@language rebol

; a comment
about abs absolute add alert alias all alter and and~ any append arccosine arcsine arctangent array ask at  
back bind boot-prefs break browse build-port build-tag  
call caret-to-offset catch center-face change change-dir charset checksum choose clean-path clear clear-fields close comment complement compose compress confirm continue-post context copy cosine create-request crypt cvs-date cvs-version  
debase decode-cgi decode-url decompress deflag-face dehex delete demo desktop detab dh-compute-key dh-generate-key dh-make-key difference dirize disarm dispatch divide do do-boot do-events do-face do-face-alt does dsa-generate-key dsa-make-key dsa-make-signature dsa-verify-signature  
echo editor either else emailer enbase entab exclude exit exp extract 
fifth find find-key-face find-window flag-face first flash focus for forall foreach forever form forskip fourth free func function  
get get-modes get-net-info get-style  
halt has head help hide hide-popup  
if import-email in inform input insert insert-event-func intersect 
join 
last launch launch-thru layout license list-dir load load-image load-prefs load-thru log-10 log-2 log-e loop lowercase  
make make-dir make-face max maximum maximum-of min minimum minimum-of mold multiply  
negate net-error next not now  
offset-to-caret open open-events or or~ 
parse parse-email-addrs parse-header parse-header-date parse-xml path-thru pick poke power prin print probe protect protect-system  
q query quit  
random read read-io read-net read-thru reboot recycle reduce reform rejoin remainder remold remove remove-event-func rename repeat repend replace request request-color request-date request-download request-file request-list request-pass request-text resend return reverse rsa-encrypt rsa-generate-key rsa-make-key 
save save-prefs save-user scroll-para second secure select send send-and-check set set-modes set-font set-net set-para set-style set-user set-user-name show show-popup sine size-text skip sort source split-path square-root stylize subtract switch  
tail tangent textinfo third throw throw-on-error to to-binary to-bitset to-block to-char to-date to-decimal to-email to-event to-file to-get-word to-hash to-hex to-idate to-image to-integer to-issue to-list to-lit-path to-lit-word to-local-file to-logic to-money to-none to-pair to-paren to-path to-rebol-file to-refinement to-set-path to-set-word to-string to-tag to-time to-tuple to-url to-word trace trim try  
unfocus union unique uninstall unprotect unset until unview update upgrade uppercase usage use  
vbug view view-install view-prefs  
wait what what-dir while write write-io  
xor xor~  
action! any-block! any-function! any-string! any-type! any-word!  
binary! bitset! block!  
char!  
datatype! date! decimal! 
email! error! event!  
file! function!  
get-word!  
hash!  
image! integer! issue!  
library! list! lit-path! lit-word! logic!  
money!  
native! none! number!  
object! op!  
pair! paren! path! port!  
refinement! routine!  
series! set-path! set-word! string! struct! symbol!  
tag! time! tuple!  
unset! url!  
word!  
any-block? any-function? any-string? any-type? any-word?  
binary? bitset? block?  
char? connected? crypt-strength? 
datatype? date? decimal? dir?  
email? empty? equal? error? even? event? exists? exists-key?
file? flag-face? found? function?  
get-word? greater-or-equal? greater?  
hash? head?  
image? in-window? index? info? input? inside? integer? issue?  
length? lesser-or-equal? lesser? library? link-app? link? list? lit-path? lit-word? logic?  
modified? money?  
native? negative? none? not-equal? number?  
object? odd? offset? op? outside?  
pair? paren? path? port? positive?  
refinement? routine?  
same? screen-offset? script? series? set-path? set-word? size? span? strict-equal? strict-not-equal? string? struct?  
tag? tail? time? tuple? type?  
unset? url?  
value? view? 
within? word?  
zero?</t>
<t tx="edream.110203161858.2138"># both color_markup &amp; add_directives plugins must be enabled.

@markup wiki
@language python

""" {picture file=../Icons/Leoapp.GIF}this """ # Problems with correct indexing following a graphic.

""" {picture file=../Icons/Leoapp.GIF}this """ # two copies work.

abc

""" {picture file=../Icons/Leodoc.GIF} """ # xyz

""" continued
string"""

@ ''ab'' __xxx__ ''wx'' __xyz__
@c

# /* ''ab'' __xxx__ ''wx'' __xyz__ */

# Test

""" ''' """ ''' """'''  # Leo handles the common cases correctly.

''' ''ab'' __xxx__ ''wx'' __xyz__ ''' # No wiki markup in ''' strings.

""" ''ab'' __xxx__ ''wx'' __xyz__ """

# ''ab'' __xxx__ ''wx'' __xyz__

""" ''y'' """

""" text~~#ff00ff:some text~~more text""

and if

from leoGlobals import * ; print app().loadDir</t>
<t tx="edream.110203161858.2139"># both color_markup &amp; add_directives plugins must be enabled.
@markup wiki

""" continued
string"""

@ ''ab'' __xxx__ ''wx'' __xyz__  __''bolditalic''__ and ''__italicbold__''
@c

# /* ''ab'' __xxx__ ''wx'' __xyz__ */

__abc__ 

# Test

""" ''' """ ''' """'''  # Leo handles the __b__ common cases correctly.

''' ''ab'' __xxx__ ''wx'' __xyz__ ''' # No wiki markup in ''' strings.

""" ''ab'' __xxx__ ''wx'' __xyz__ """

# ''ab'' __xxx__ ''wx'' __xyz__

""" ''y'' """

""" text~~#ee00ff:some text~~more text"""



and if

from leoGlobals import * ; print app().loadDir
</t>
<t tx="edream.110203161858.2140"># both color_markup &amp; add_directives plugins must be enabled.

@markup wiki

""" text~~red:some text~~more text"""

""" text~~#ee0ff:some text~~more text"""</t>
<t tx="edream.110203161858.2141">@ The names of child nodes are the names of commander methods to be called to do the test.

Each child node will in turn have two children: a "before" node and an "after" node.</t>
<t tx="edream.110203161858.2142"></t>
<t tx="edream.110203161858.2143">line 1
	line 2
	line 3
line 4</t>
<t tx="edream.110203161858.2144">line 1
line 2
line 3
line 4</t>
<t tx="edream.110203161858.2145"></t>
<t tx="edream.110203161858.2146">line 1
line 2
line 3
line 4</t>
<t tx="edream.110203161858.2147">line 1
	line 2
	line 3
line 4</t>
<t tx="edream.110203161858.2148">@ The names of child nodes are the names of commander methods to be called to do the test.

Each child node will in turn have two children: a "before" tree and an "after" tree.</t>
<t tx="edream.110203161858.2149"></t>
<t tx="edream.110203161858.2150"></t>
<t tx="edream.110203161858.2151"></t>
<t tx="edream.110203161858.2152"></t>
<t tx="edream.110203161858.2153">from leoGlobals import *
import unittest
import leoTest
reload(leoTest) # Allows us to rerun this script when leoTest.py changes.

mainSuite = unittest.makeSuite(unittest.TestCase)

colorSuite = leoTest.makeColorSuite("colorizerTests","tempNode")
mainSuite.addTest(colorSuite)
	
editBodySuite = leoTest.makeEditBodySuite("editBodyTests","tempNode")
mainSuite.addTest(editBodySuite)

testLeoFilesSuite = leoTest.makeTestLeoFilesSuite("cloneTestLeoFiles")
mainSuite.addTest(testLeoFilesSuite)

if 0: # not ready yet.
	outlineSuite = leoTest.makeOutlineSuite("outlineTests")
	mainSuite.addTest(outlineSuite)

runner = unittest.TextTestRunner()
runner.run(mainSuite)</t>
<t tx="edream.110203161858.2154">import unittest
import leoTest
reload(leoTest) # Allows us to rerun this script when leoTest.py changes.

suite = leoTest.makeColorSuite("colorizerTests","tempNode")
runner = unittest.TextTestRunner()
runner.run(suite)</t>
<t tx="edream.110203161858.2155">import unittest
import leoTest
reload(leoTest) # Allows us to rerun this script when leoTest.py changes.

suite = leoTest.makeEditBodySuite("editBodyTests","tempNode")
runner = unittest.TextTestRunner()
runner.run(suite)</t>
<t tx="edream.110203161858.2156">import unittest
import leoTest
reload(leoTest) # Allows us to rerun this script when leoTest.py changes.

suite = leoTest.makeOutlineSuite("outlineTests")
runner = unittest.TextTestRunner()
runner.run(suite)</t>
<t tx="edream.110403110104">line 1
&lt;&lt; sec1 &gt;&gt;
sec1
	sec1 indented
line after</t>
<t tx="edream.110403171311">if 1: # Executing this script inserts a 0x1a character into the body text. (Causes problems on read).

	from leoGlobals import *
	c = top() ; body = c.frame.body ;v = c.currentVnode()
	s = body.getAllText()
	s = s + chr(0x1a)
	print s
	v.setBodyStringOrPane(s)</t>
<t tx="edream.110503093114">@ignore</t>
<t tx="edream.110803170022">from leoGlobals import *
import leoTest

u = leoTest.testUtils()
nodes = 0 ; lines = 0
c = top()
c.clearAllVisited()
v = u.findNodeAnywhere(c,"Tests...")
after = v.nodeAfterTree()
trace(v,after)
while v and v != after:
	if not v.t.isVisited():
		v.t.setVisited()
		nodes += 1
		lines += len(splitLines(v.bodyString()))
	v = v.threadNext()
	
pages = ((nodes * 10) + lines) / 50
print "nodes,lines,pages",nodes,lines,pages
es("nodes,lines,pages",nodes,lines,pages)
</t>
<t tx="edream.110903064653"></t>
<t tx="edream.110903064653.1"></t>
<t tx="edream.110903064653.2"></t>
<t tx="edream.110903064653.3"></t>
<t tx="edream.110903064653.4"></t>
<t tx="edream.110903064653.5"># To do: use a null-gui to open the .leo files.

import unittest
import leoTest
reload(leoTest) # Allows us to rerun this script when leoTest.py changes.

suite = testLeoFilesSuite = leoTest.makeTestLeoFilesSuite("testLeoFiles")
runner = unittest.TextTestRunner()
runner.run(suite)</t>
<t tx="edream.110903121744">@language latex

Test \% test.</t>
<t tx="edream.111103091713">def abc(self)

{
	( ABC abc)
	
}
</t>
<t tx="edream.111303082913">from leoGlobals import *
print app.config.redirect_execute_script_output_to_log_pane
</t>
<t tx="edream.111803061611"></t>
<t tx="edream.111803110909">Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=2286887
By: nobody

If I have the following in the body text of some node

&lt;&lt; rhs &gt;&gt; October &lt;&lt; rhe &gt;&gt;

and the outline has as children of the node

node
   - &lt;&lt; rhs &gt;&gt;
   - &lt;&lt; rhe &gt;&gt;

4.0 and 4.1b2 give me the following error when trying to write the node to a
file:

errors writing: /filename
Orphan node:  &lt;&lt; rhe &gt;&gt;

This use of &lt;&lt; &gt;&gt; nodes worked prior to 4.0.

Thanks,

Steve
</t>
<t tx="edream.111803110909.1"># If I have the following in the body text of some node

before
	leading &lt;&lt; rhs &gt;&gt; October &lt;&lt; rhe &gt;&gt; trailing
after
	&lt;&lt; rhs &gt;&gt;  &lt;&lt;rhe&gt;&gt; trailing</t>
<t tx="edream.111803110909.2">rhs line</t>
<t tx="edream.111803110909.3">rhe line</t>
<t tx="edream.111903143504">@ print "ignored"
@c
@tabwidth 2
@color
from leoGlobals import *
es("hello",color="orange")

if 1:
	print ; print "hello"
@others
&lt;&lt; ref &gt;&gt;
print "goodbye"

if 0:
	from leoGlobals import app
	print ; print "pre-processed script..." ; print
	print app.scriptDict.get("script2")</t>
<t tx="edream.111903143504.1">print "more"</t>
<t tx="edream.111903144347">print "ref"</t>
<t tx="edream.112003031953">from leoGlobals import *
import sys

a = 99

# __import__(__name__).__dict__.update(dict(tuple))

def f():
	tup = (('a', 1,), ('b', 'two',))
	globals().update(dict(tup))
	print "-" * 20
	a,b = 5,6
	print `a`,`b`
	if 0:
		print globals().get("f")
		print globals().get(sys._getframe(0).f_code.co_name)
	
f()
print `a`,`b`
print globals().get(sys._getframe(0).f_code.co_name)
print __name__
print __import__(__name__)</t>
<t tx="edream.112003090130">import math

@tabwidth 6

if 1:
	@others
</t>
<t tx="edream.112003090753">class foo:
    def f(self, x):
        return x  * math.pi

c = foo()
print c.f(math.pi)</t>
<t tx="edream.112003094004">from leoGlobals import *

es( &lt;&lt;2&gt;&gt; + &lt;&lt;2&gt;&gt;, color="red")

print "script2"
print app.scriptDict["script2"]

es(&lt;&lt;2&gt;&gt;+&lt;&lt;2&gt;&gt;, color="blue")</t>
<t tx="edream.112003094004.1">2</t>
<t tx="edream.112003103554"></t>
<t tx="edream.112203144347"># Run this using:
# c:\python23\python c:\prog\leoCVS\leo\src\leo.py -script c:\prog\leoCVS\leo\test\batchScript.py

from leoGlobals import *

print "batchScript.py log:", app.log

disable = true

if disable:
	if app.batchMode:
		print "Disabling log from batchScript.py"
		app.log.disable()
	
path = r"c:\prog\leoCVS\leo\plugins\leoPlugins.leo"
es(path)
# trace(path)
flag,frame = openWithFileName(path)
print "batchScript.py log:", app.log

if disable:
	if app.batchMode:
		print "Enabling log from batchScript.py"
		app.log.enable()
		es(frame)
else:
	print "End of batchScript.py"</t>
<t tx="edream.112303064255">before
&lt;&lt; section &gt;&gt;
	sec line 1
		sec line 2 indented
	sec line 3
after</t>
<t tx="edream.112303110337"></t>
<t tx="edream.112303110337.1"></t>
<t tx="edream.112303110337.2"></t>
<t tx="edream.112303110337.3"></t>
<t tx="edream.120203151550"></t>
<t tx="edream.120203185502">import sys

sys.path.append(r"c:\Program Files\OpenOffice.org1.1.0\program")

# for p in sys.path: print p

import uno

# get the uno component context from the PyUNO runtime
localContext = uno.getComponentContext()

# create the UnoUrlResolver 
resolver = localContext.ServiceManager.createInstanceWithContext(
	"com.sun.star.bridge.UnoUrlResolver", localContext )

# connect to the running office 				
ctx = resolver.resolve(
	"uno:socket,host=localhost,port=2002;urp;StarOffice.ComponentContext" )
smgr = ctx.ServiceManager

# get the central desktop object
desktop = smgr.createInstanceWithContext( "com.sun.star.frame.Desktop",ctx)

# access the current writer document
model = desktop.getCurrentComponent()

# access the document's text property
text = model.Text

# create a cursor
cursor = text.createTextCursor()

# insert the text into the document
text.insertString( cursor, "Hello World", 0 )

# Do a nasty thing before exiting the python process. In case the
# last call is a oneway call (e.g. see idl-spec of insertString),
# it must be forced out of the remote-bridge caches before python
# exits the process. Otherwise, the oneway call may or may not reach
# the target object.
# I do this here by calling a cheap synchronous call (getPropertyValue).
ctx.ServiceManager</t>
<t tx="edream.120303092653"></t>
<t tx="edream.120303093019">@first &lt;?
@language php

&lt;&lt; ref &gt;&gt;

	middle line.
	another middle line.

@others
@last ?&gt;</t>
<t tx="edream.120303093527">ref line 1</t>
<t tx="edream.120303093527.1">others line 1</t>
<t tx="edream.120403143517">è</t>
<t tx="edream.120603112201"></t>
<t tx="edream.120603112201.1"></t>
<t tx="edream.120603112201.2"></t>
<t tx="edream.120603112201.3"></t>
<t tx="edream.120603113726"></t>
<t tx="edream.120603125057"></t>
<t tx="edream.120603125159">@ignore
@language html 
@root "c:\prog\test\bedellUntangleTest.html"
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:user="http://mycompany.com/mynamespace"&gt;
	&lt;xsl:import href="../../../Resources/system/ExtensionFunctions.xslt"/&gt;
	&lt;xsl:template match="/"&gt;
		&lt;!--&lt;xsl:value-of select="concat('7180=',user:EXF_Translate(21000))"/&gt;--&gt;
		&lt;&lt; html_body &gt;&gt;
	&lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</t>
<t tx="edream.120603125159.1">@code
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
	&lt;&lt; head &gt;&gt; 
	&lt;&lt; body &gt;&gt;
&lt;/html&gt;</t>
<t tx="edream.120603125159.2">@code
&lt;head&gt;
	&lt;title&gt;Item&lt;/title&gt;
	&lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/&gt;
	&lt;link href="../../../css/forms.css" rel="stylesheet" type="text/css"/&gt;
	&lt;link href="template.css" rel="stylesheet" type="text/css"/&gt;
	&lt;!-- VERY IMPORTANT to have explicit end script tags otherwise page will break --&gt;
	&lt;script language="JavaScript" src="../../../Js/Other/Calendar/calendar1.js" type="text/javascript"&gt;&lt;/script&gt;
	&lt;script language="JavaScript" src="../../../js/General/generic.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/head&gt;</t>
<t tx="edream.120603125159.3">@code
&lt;body bgcolor="#66CC99" text="#000000" link="#000000" vlink="#000000" alink="#000000" onLoad="REM_SetScrollPos()"&gt;
	&lt;&lt; form &gt;&gt;
&lt;/body&gt;</t>
<t tx="edream.120603125159.4">@code
&lt;form action="broker.asp" method="post" name="Item" id="Item"&gt;
	&lt;input name="formname" type="hidden" value="Item"/&gt;
	&lt;input name="Btn" type="hidden" value=""/&gt;
	&lt;input name="ScrollX" type="hidden" value="{/SESSION/FORM/ITEM[@group='Item' and @name='ScrollX']/@value}"/&gt;
	&lt;input name="ScrollY" type="hidden" value="{/SESSION/FORM/ITEM[@group='Item' and @name='ScrollY']/@value}"/&gt;
	&lt;input name="Action" type="hidden" value="{/SESSION/FORM/ITEM[@group='Item' and @name='Action']/@value}"/&gt;
	&lt;input name="ItemId" type="hidden" value="{/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value}"/&gt;
	&lt;input name="LineNo" type="hidden" value="{/SESSION/FORM/ITEM[@group='Item' and @name='LineNo']/@value}"/&gt;
	&lt;&lt; xsl_var_initialisation &gt;&gt;
	&lt;!-- ***************************************************************************************************************** --&gt;
	&lt;&lt; status &gt;&gt;
	&lt;&lt; tabs &gt;&gt;
	&lt;!-- ***************************************************************************************************************** --&gt;
	&lt;&lt; policy_selector &gt;&gt;
	&lt;&lt; table_container &gt;&gt;
&lt;/form&gt;</t>
<t tx="edream.120603125159.5">@code
&lt;xsl:variable name="SingleQuote"&gt;'&lt;/xsl:variable&gt;
&lt;xsl:variable name="Comma"&gt;,&lt;/xsl:variable&gt;</t>
<t tx="edream.120603125159.6">@code
&lt;div id="Status"&gt;
	&lt;div id="PageTitle" class="REM_FormTitle"&gt; Item&lt;/div&gt;
	&lt;!--
	&lt;div id="Error" class="REM_FormError"&gt;
		&lt;xsl:for-each select="/SESSION/ERROR/ITEM"&gt;
			&lt;xsl:value-of select="@message"/&gt;
		&lt;/xsl:for-each&gt;
	&lt;/div&gt;
	--&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.7">@code
&lt;div id="Tab" class="REM_BaseLine"&gt;
	&lt;div id="TabItem" class="REM_Tab"&gt;
		&lt;div id="TabItemText" class="REM_SelectedTabText"&gt;Item&lt;/div&gt;
	&lt;/div&gt;
	&lt;div id="TabPolicy" class="REM_Tab"&gt;
		&lt;div id="TabPolicyText"&gt;
			&lt;a href="../E_DisplayPolicy/initiate.asp" class="REM_NoSelectedTabText"&gt;Policy&lt;/a&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.8">@code
&lt;div id="PolicySelector"&gt;
	&lt;&lt; policy_category &gt;&gt;
	&lt;&lt; policy &gt;&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.9">@code
&lt;div id="PolicyCategory"&gt;
	&lt;select name="ExpenseCategory" size="1" class="REM_Ddlb" onchange="REM_ResetScrollPos();REM_SetButtonSubmit('ExpenseCategory')"&gt;
		&lt;option value=""&gt;--Select Expense Category--&lt;/option&gt;
		&lt;xsl:for-each select="/SESSION/RS_MSG/RSRS/LISTPOLICY/POLICY[CATEGORY/@default='Y']"&gt;
			&lt;xsl:choose&gt;
				&lt;xsl:when test="./CATEGORY/@id=/SESSION/FORM/ITEM[@group='Item' and @name='ExpenseCategory']/@value"&gt;
					&lt;option value="{./CATEGORY/@id}" selected="selected"&gt;
						&lt;xsl:value-of select="./CATEGORY"/&gt;
					&lt;/option&gt;
				&lt;/xsl:when&gt;
				&lt;xsl:otherwise&gt;
					&lt;option value="{./CATEGORY/@id}"&gt;
						&lt;xsl:value-of select="./CATEGORY"/&gt;
					&lt;/option&gt;
				&lt;/xsl:otherwise&gt;
			&lt;/xsl:choose&gt;
		&lt;/xsl:for-each&gt;
	&lt;/select&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.10">@code
&lt;div id="Policy"&gt;
	&lt;select name="ExpensePolicy" size="1" class="REM_Ddlb" onChange="REM_ResetScrollPos();REM_SetButtonSubmit('ExpensePolicy')"&gt;
		&lt;option value=""&gt;--Select Expense Policy--&lt;/option&gt;
		&lt;xsl:for-each select="/SESSION/RS_MSG/RSRS/LISTPOLICY/POLICY[CATEGORY/@id=/SESSION/FORM/ITEM[@group='Item' and @name='ExpenseCategory']/@value]"&gt;
			&lt;xsl:choose&gt;
				&lt;xsl:when test="./@id=/SESSION/FORM/ITEM[@group='Item' and @name='ExpensePolicy']/@value"&gt;
					&lt;option value="{./@id}" selected="selected"&gt;
						&lt;xsl:value-of select="concat(substring(./LOCATION,1,1),'---',./NAME)"/&gt;
					&lt;/option&gt;
				&lt;/xsl:when&gt;
				&lt;xsl:otherwise&gt;
					&lt;option value="{./@id}"&gt;
						&lt;xsl:value-of select="concat(substring(./LOCATION,1,1),'---',./NAME)"/&gt;
					&lt;/option&gt;
				&lt;/xsl:otherwise&gt;
			&lt;/xsl:choose&gt;
		&lt;/xsl:for-each&gt;
	&lt;/select&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.11">@code
&lt;!-- *****************************************************************************************************************--&gt;
&lt;div id="Base"&gt;
	&lt;table width="100%" border="0" cellspacing="0" cellpadding="0"&gt;
		&lt;&lt; dynamic_zone &gt;&gt;
	&lt;/table&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.12">@code
&lt;xsl:for-each select="/SESSION/RS_MSG/RSRS/LISTPOLICY/POLICY[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ExpensePolicy']/@value]/CONFIG/ITEM"&gt;
&lt;xsl:choose&gt;
&lt;xsl:when test="./@name='DA'"&gt;
	&lt;&lt; date &gt;&gt;
&lt;/xsl:when&gt;
&lt;!-- *****************************************************************************************************************--&gt;
&lt;xsl:when test="./@name='QU'"&gt;
	&lt;&lt; quantity &gt;&gt;
&lt;/xsl:when&gt;
&lt;!-- *****************************************************************************************************************--&gt;
&lt;xsl:when test="./@name='EM'"&gt;
	&lt;&lt; employee &gt;&gt;
&lt;/xsl:when&gt;
&lt;!-- *****************************************************************************************************************--&gt;
&lt;xsl:when test="./@name='NE'"&gt;
	&lt;&lt; nonemployee &gt;&gt;
&lt;/xsl:when&gt;
&lt;!-- *****************************************************************************************************************--&gt;
&lt;xsl:when test="./@name='AL'"&gt;
	&lt;&lt; allowance &gt;&gt;
&lt;/xsl:when&gt;
&lt;!-- *****************************************************************************************************************--&gt;
&lt;xsl:when test="./@name='CE'"&gt;
	&lt;&lt; calc_explanation &gt;&gt;
&lt;/xsl:when&gt;
&lt;!-- *****************************************************************************************************************--&gt;
&lt;xsl:when test="./@name='HV'"&gt;
	&lt;&lt; home_value &gt;&gt;
&lt;/xsl:when&gt;
&lt;!-- *****************************************************************************************************************--&gt;
&lt;xsl:when test="./@name='FV'"&gt;
	&lt;&lt; foreign_value &gt;&gt;
&lt;/xsl:when&gt;
&lt;!-- *****************************************************************************************************************--&gt;
&lt;xsl:when test="./@name='VA'"&gt;
	&lt;&lt; vat &gt;&gt;
&lt;/xsl:when&gt;
&lt;!-- *****************************************************************************************************************--&gt;
&lt;xsl:when test="./@name='CO'"&gt;
	&lt;&lt; comment &gt;&gt;
&lt;/xsl:when&gt;
&lt;!-- *****************************************************************************************************************--&gt;
&lt;xsl:when test="./@name='SU'"&gt;
	&lt;&lt; supplier &gt;&gt;
&lt;/xsl:when&gt;
&lt;!-- *****************************************************************************************************************--&gt;
&lt;xsl:when test="./@name='UD'"&gt;
	&lt;&lt; user_defined &gt;&gt;
&lt;/xsl:when&gt;
&lt;!-- *****************************************************************************************************************--&gt;
&lt;xsl:when test="./@name='CH'"&gt;
	&lt;&lt; charge &gt;&gt;
&lt;/xsl:when&gt;
&lt;/xsl:choose&gt;
&lt;/xsl:for-each&gt;
&lt;!-- *****************************************************************************************************************--&gt;
&lt;!-- *****************************************END OF DYNAMIC ZONE******************************************--&gt;
&lt;!-- *****************************************************************************************************************--&gt;
&lt;&lt; buttons &gt;&gt;</t>
<t tx="edream.120603125159.13">@code
&lt;tr&gt;
	&lt;td colspan="2"&gt;
		&lt;input name="Block" value="DA" type="hidden"/&gt;
		&lt;div id="Date" class="REM_CSSP_FreeFormBackground"&gt;
			&lt;&lt; date_error &gt;&gt;
			&lt;&lt; from_date &gt;&gt;
			&lt;&lt; to_date &gt;&gt;
			&lt;&lt; taxpoint &gt;&gt;
		&lt;/div&gt;
		&lt;&lt; calendar_jscript &gt;&gt;
	&lt;/td&gt;
&lt;/tr&gt;
&lt;!-- *****************************************************************************************************************--&gt;
&lt;tr&gt;
	&lt;td height="5px"/&gt;
&lt;/tr&gt;</t>
<t tx="edream.120603125159.14">@code
&lt;xsl:if test="count(/SESSION/ERROR/ITEM[@block='Date'])&amp;gt;0"&gt;
	&lt;div id="DateError" style="position:absolute; left:0px; top:14px; width:15px; height:13px; z-index:38"&gt;
	&lt;img src="../../../Img/red_exclaim_on_grey.gif" width="16" height="17"&gt;
		&lt;xsl:attribute name="alt"&gt;
			&lt;xsl:for-each select="/SESSION/ERROR/ITEM[@block='Date']"&gt;
				&lt;xsl:value-of select="@message"/&gt;
			&lt;/xsl:for-each&gt;
		&lt;/xsl:attribute&gt;
	&lt;/img&gt;
	&lt;/div&gt;
&lt;/xsl:if&gt;</t>
<t tx="edream.120603125159.15">@code
&lt;div id="FromDate"&gt;
	&lt;div id="FromDateLabel"&gt;
		&lt;p class="REM_FieldTitle"&gt;From:&lt;/p&gt;
	&lt;/div&gt;
	&lt;div id="FromDateValue"&gt;
		&lt;input name="FromDate" style="width:157px;height:19px" type="text" class="REM_FormTextboxGo" size="16" maxlength="20"&gt;
			&lt;xsl:attribute name="value"&gt;
				&lt;xsl:choose&gt;
					&lt;xsl:when test="/SESSION/FORM/ITEM[@group='Item' and @name='DataSource']/@value='Doc'"&gt;
						&lt;xsl:value-of select="/SESSION/DOC/CLAIM/ITEMS/ITEM[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value]/DATETIME/FROM"/&gt;
					&lt;/xsl:when&gt;
					&lt;xsl:otherwise&gt;
						&lt;xsl:value-of select="/SESSION/FORM/ITEM[@group='Item' and @name='FromDate']/@value"/&gt;
					&lt;/xsl:otherwise&gt;
				&lt;/xsl:choose&gt;
			&lt;/xsl:attribute&gt;
		&lt;/input&gt;
	&lt;/div&gt;
	&lt;div id="FromDateGo"&gt;
		&lt;a href="javascript:cal1.popup();"&gt;
			&lt;img src="../../../img/ddlb.gif" alt="Click Here to Pick up the date" border="0"/&gt;
		&lt;/a&gt;
	&lt;/div&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.16">@code
&lt;div id="ToDate"&gt;
	&lt;div id="ToDateLabel"&gt;
		&lt;p class="REM_FieldTitle"&gt;To:&lt;/p&gt;
	&lt;/div&gt;
	&lt;div id="ToDateValue"&gt;
		&lt;input name="ToDate" style="width:157px;height:19px" type="text" class="REM_FormTextboxGo" size="16" maxlength="20"&gt;
			&lt;xsl:attribute name="value"&gt;
				&lt;xsl:choose&gt;
					&lt;xsl:when test="/SESSION/FORM/ITEM[@group='Item' and @name='DataSource']/@value='Doc'"&gt;
						&lt;xsl:value-of select="/SESSION/DOC/CLAIM/ITEMS/ITEM[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value]/DATETIME/TO"/&gt;
					&lt;/xsl:when&gt;
					&lt;xsl:otherwise&gt;
						&lt;xsl:value-of select="/SESSION/FORM/ITEM[@group='Item' and @name='ToDate']/@value"/&gt;
					&lt;/xsl:otherwise&gt;
				&lt;/xsl:choose&gt;
			&lt;/xsl:attribute&gt;
		&lt;/input&gt;
	&lt;/div&gt;
	&lt;div id="ToDateGo"&gt;
		&lt;a href="javascript:cal2.popup();"&gt;
			&lt;img src="../../../img/ddlb.gif" alt="Click Here to Pick up the date" border="0"/&gt;
		&lt;/a&gt;
	&lt;/div&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.17">@code
&lt;div id="TaxPoint"&gt;
	&lt;div id="TaxPointLabel"&gt;
		&lt;p class="REM_FieldTitle"&gt;Date when Expense incurred:&lt;/p&gt;
	&lt;/div&gt;
	&lt;div id="TaxPointValue"&gt;
		&lt;input name="TaxPoint" style="width:157px;height:19px" type="text" class="REM_FormTextboxGo" size="16" maxlength="20"&gt;
			&lt;xsl:attribute name="value"&gt;
				&lt;xsl:choose&gt;
					&lt;xsl:when test="/SESSION/FORM/ITEM[@group='Item' and @name='DataSource']/@value='Doc'"&gt;
						&lt;xsl:value-of select="/SESSION/DOC/CLAIM/ITEMS/ITEM[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value]/DATETIME/TAXPOINT"/&gt;
					&lt;/xsl:when&gt;
					&lt;xsl:otherwise&gt;
						&lt;xsl:value-of select="/SESSION/FORM/ITEM[@group='Item' and @name='TaxPoint']/@value"/&gt;
					&lt;/xsl:otherwise&gt;
				&lt;/xsl:choose&gt;
			&lt;/xsl:attribute&gt;
		&lt;/input&gt;
	&lt;/div&gt;
	&lt;div id="TaxPointGo"&gt;
		&lt;a href="javascript:cal3.popup();"&gt;
			&lt;img src="../../../img/ddlb.gif" alt="Click Here to Pick up the date" border="0"/&gt;
		&lt;/a&gt;
	&lt;/div&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.18">@code
&lt;script language="JavaScript" type="text/javascript"&gt;
var cal1 = new calendar1(document.forms['Item'].elements['FromDate'],document.forms['Item'].elements['ToDate'],document.forms['Item'].elements['TaxPoint'],"20:00:00");  
cal1.year_scroll = true;
cal1.time_comp = false;
&lt;/script&gt;
&lt;script language="JavaScript" type="text/javascript"&gt;
var cal2 = new calendar1(document.forms['Item'].elements['ToDate'],"20:00:00");
cal2.year_scroll = true;
cal2.time_comp = false;
&lt;/script&gt;
&lt;script language="JavaScript" type="text/javascript"&gt;
var cal3 = new calendar1(document.forms['Item'].elements['TaxPoint'],"20:00:00");
cal3.year_scroll = true;
cal3.time_comp = false;
&lt;/script&gt;</t>
<t tx="edream.120603125159.19">@code									
&lt;tr&gt;
	&lt;td width="50%"&gt;
		&lt;input name="Block" value="QU" type="hidden"/&gt;
		&lt;&lt; item_quantity &gt;&gt;
	&lt;/td&gt;
	&lt;td width="50%" align="right"&gt;
		&lt;&lt; person_quantity &gt;&gt;
	&lt;/td&gt;
&lt;/tr&gt;
&lt;!-- *****************************************************************************************************************--&gt;
&lt;tr&gt;
	&lt;td colspan="2" height="5px"/&gt;
&lt;/tr&gt;</t>
<t tx="edream.120603125159.20">@code
&lt;div id="Quantity" class="REM_CSSP_FreeFormBackground"&gt;
	&lt;div id="QV"&gt;
		&lt;div id="QVLabel"&gt;
			&lt;p class="REM_FieldTitle"&gt;Quantity&lt;/p&gt;
		&lt;/div&gt;
		&lt;div id="QVValue"&gt;
			&lt;input name="Quantity" style="width:157px;height:19px" type="text" class="REM_FormTextboxGo" size="16" maxlength="20"&gt;
				&lt;xsl:attribute name="value"&gt;
					&lt;xsl:choose&gt;
						&lt;xsl:when test="/SESSION/FORM/ITEM[@group='Item' and @name='DataSource']/@value='Doc'"&gt;
							&lt;xsl:value-of select="/SESSION/DOC/CLAIM/ITEMS/ITEM[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value]/QUANTITY/QUANTITY"/&gt;
						&lt;/xsl:when&gt;
						&lt;xsl:otherwise&gt;
							&lt;xsl:value-of select="/SESSION/FORM/ITEM[@group='Item' and @name='Quantity']/@value"/&gt;
						&lt;/xsl:otherwise&gt;
					&lt;/xsl:choose&gt;
				&lt;/xsl:attribute&gt;
			&lt;/input&gt;
		&lt;/div&gt;
		&lt;div id="QVUnit"&gt;
			&lt;p class="REM_FieldTitle"&gt;
				&lt;xsl:value-of select="/SESSION/RS_MSG/RSRS/LISTPOLICY/POLICY[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value]/UOM"/&gt;
			&lt;/p&gt;
		&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.21">@code
&lt;div id="PersonQuantity" class="REM_CSSP_FreeFormBackground"&gt;
	&lt;div id="PQV"&gt;
		&lt;div id="PQVLabel"&gt;
			&lt;p class="REM_FieldTitle"&gt;No. of People&lt;/p&gt;
		&lt;/div&gt;
		&lt;div id="PQVValue"&gt;
			&lt;input name="PersonQuantity" style="width:157px;height:19px" type="text" class="REM_FormTextboxGo" size="16" maxlength="20"&gt;
				&lt;xsl:attribute name="value"&gt;
					&lt;xsl:choose&gt;
						&lt;xsl:when test="/SESSION/FORM/ITEM[@group='Item' and @name='DataSource']/@value='Doc'"&gt;
							&lt;xsl:value-of select="/SESSION/DOC/CLAIM/ITEMS/ITEM[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value]/QUANTITY_OF_PEOPLE/VALUE"/&gt;
						&lt;/xsl:when&gt;
						&lt;xsl:otherwise&gt;
							&lt;xsl:value-of select="/SESSION/FORM/ITEM[@group='Item' and @name='PersonQuantity']/@value"/&gt;
						&lt;/xsl:otherwise&gt;
					&lt;/xsl:choose&gt;
				&lt;/xsl:attribute&gt;
			&lt;/input&gt;
		&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.22">@code
&lt;tr&gt;
	&lt;td colspan="2"&gt;
		&lt;input name="Block" value="EM" type="hidden"/&gt;
		&lt;!-- &lt;div id="Employee"&gt; --&gt;
		&lt;table width="100%" border="0" cellpadding="3" cellspacing="0" class="TableItemBorder"&gt;
			&lt;tr valign="top" bordercolor="#CCFFCC" bgcolor="#D6D3CE"&gt;
				&lt;td colspan="5" bgcolor="#CCCCCC" class="REM_FieldTitle"&gt;
					&lt;table width="100%" border="0" cellpadding="2" cellspacing="0"&gt;
						&lt;&lt; emp_titles &gt;&gt;
						&lt;&lt; emp_records &gt;&gt;
						&lt;&lt; emp_add_row &gt;&gt;
					&lt;/table&gt;
				&lt;/td&gt;
			&lt;/tr&gt;
		&lt;/table&gt;
		&lt;!-- &lt;/div&gt; --&gt;
	&lt;/td&gt;
&lt;/tr&gt;
&lt;!-- *****************************************************************************************************************--&gt;
&lt;tr&gt;
	&lt;td colspan="2" height="5px"/&gt;
&lt;/tr&gt;</t>
<t tx="edream.120603125159.23">@code
&lt;tr&gt;
	&lt;td width="20%" height="15" valign="bottom" class="REM_FieldTitle"&gt;Employee(s):&lt;/td&gt;
	&lt;td width="15%" height="15" valign="bottom" class="REM_FieldTitle"&gt;Name:&lt;/td&gt;
	&lt;td width="45%" height="15" valign="bottom" class="REM_FieldTitle"&gt;Company:&lt;/td&gt;
	&lt;td width="20%" height="15" valign="bottom" class="REM_FieldTitle"&gt;Reason:&lt;/td&gt;
&lt;/tr&gt;</t>
<t tx="edream.120603125159.24">@code
&lt;xsl:for-each select="/SESSION/DOC/CLAIM/ITEMS/ITEM[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value]/EMPLOYEES/PERSON"&gt;
	&lt;xsl:choose&gt;
		&lt;xsl:when test="@action='delete'"&gt;
			&lt;xsl:text/&gt;
		&lt;/xsl:when&gt;
		&lt;xsl:otherwise&gt;
			&lt;tr&gt;
				&lt;td height="22" valign="middle" class="REM_ListValueBlock"&gt;
					&lt;input name="BtnEmployee" type="submit" class="REM_FormTextButtonFixed" value="Remove"&gt;
						&lt;xsl:attribute name="onClick"&gt;
							&lt;xsl:value-of select="concat('REM_GetScrollPos(0);REM_SetButtonLineNoSubmit(',$SingleQuote,@id,$SingleQuote,$Comma,$SingleQuote,'EmployeeRemove',$SingleQuote,')')"/&gt;
						&lt;/xsl:attribute&gt;
					&lt;/input&gt;
				&lt;/td&gt;
				&lt;td valign="middle" class="REM_ListValueBlock"&gt;
					&lt;xsl:value-of select="./NAME"/&gt;
				&lt;/td&gt;
				&lt;td valign="middle" class="REM_ListValueBlock"&gt;
					&lt;xsl:value-of select="./COMPANY"/&gt;
				&lt;/td&gt;
				&lt;td valign="middle" class="REM_ListValueBlock"&gt;
					&lt;xsl:value-of select="./REASON"/&gt;
				&lt;/td&gt;
			&lt;/tr&gt;
		&lt;/xsl:otherwise&gt;
	&lt;/xsl:choose&gt;
&lt;/xsl:for-each&gt;</t>
<t tx="edream.120603125159.25">@code
&lt;tr&gt;
	&lt;td height="22" valign="middle" class="REM_ListValueBlock"&gt;
		&lt;input name="BtnEmployee" type="submit" class="REM_FormTextButtonFixed" value="Add" onClick="REM_GetScrollPos(20);REM_SetButton('EmployeeAdd')"/&gt;
		&lt;input name="EmployeeId" type="hidden" value="{user:EXF_get_unique_id()}"/&gt;
	&lt;/td&gt;
	&lt;td valign="middle" class="REM_ListValueBlock"&gt;
		&lt;input name="EmployeeName" type="text" class="REM_FormTextboxList" value="" size="30" maxlength="30"&gt;
			&lt;xsl:attribute name="value"&gt;
				&lt;xsl:value-of select="/SESSION/FORM/ITEM[@group='Item' and @name='EmployeeName']/@value"/&gt;
			&lt;/xsl:attribute&gt;
		&lt;/input&gt;
	&lt;/td&gt;
	&lt;td valign="middle" class="REM_ListValueBlock"&gt;
		&lt;input name="EmployeeCompany" type="text" class="REM_FormTextboxList" value="" size="30" maxlength="30"&gt;
			&lt;xsl:attribute name="value"&gt;
				&lt;xsl:value-of select="/SESSION/FORM/ITEM[@group='Item' and @name='EmployeeCompany']/@value"/&gt;
			&lt;/xsl:attribute&gt;
		&lt;/input&gt;
	&lt;/td&gt;
	&lt;td valign="middle" class="REM_ListValueBlock"&gt;
		&lt;select name="EmployeeReason" class="REM_Ddlb"&gt;
			&lt;option value=""&gt;-- Please Select --&lt;/option&gt;
			&lt;xsl:for-each select="/SESSION/RS_MSG/RSRS/LISTREASON/REASON/ITEM"&gt;
				&lt;xsl:choose&gt;
					&lt;xsl:when test="./@name=/SESSION/FORM/ITEM[@group='Item' and @name='EmployeeReason']/@value"&gt;
						&lt;option value="{./@name}" selected="selected"&gt;
							&lt;xsl:value-of select="./@name"/&gt;
						&lt;/option&gt;
					&lt;/xsl:when&gt;
					&lt;xsl:otherwise&gt;
						&lt;option value="{./@name}"&gt;
							&lt;xsl:value-of select="./@name"/&gt;
						&lt;/option&gt;
					&lt;/xsl:otherwise&gt;
				&lt;/xsl:choose&gt;
			&lt;/xsl:for-each&gt;
		&lt;/select&gt;
	&lt;/td&gt;
&lt;/tr&gt;</t>
<t tx="edream.120603125159.26">@code
&lt;tr&gt;
	&lt;td colspan="2"&gt;
		&lt;input name="Block" value="NE" type="hidden"/&gt;
		&lt;!-- &lt;div id="NonEmployee"&gt; --&gt;
		&lt;table width="100%" border="0" cellpadding="3" cellspacing="0" class="TableItemBorder"&gt;
			&lt;tr valign="top" bordercolor="#CCFFCC" bgcolor="#D6D3CE"&gt;
				&lt;td colspan="5" bgcolor="#CCCCCC" class="REM_FieldTitle"&gt;
					&lt;table width="100%" border="0" cellpadding="2" cellspacing="0"&gt;
						&lt;&lt; nonemp_titles &gt;&gt;
						&lt;&lt; nonemp_records &gt;&gt;
						&lt;&lt; nonemp_add_row &gt;&gt;
					&lt;/table&gt;
				&lt;/td&gt;
			&lt;/tr&gt;
		&lt;/table&gt;
		&lt;!-- &lt;/div&gt; --&gt;
	&lt;/td&gt;
&lt;/tr&gt;
&lt;!-- *****************************************************************************************************************--&gt;
&lt;tr&gt;
	&lt;td colspan="2" height="5px"/&gt;
&lt;/tr&gt;</t>
<t tx="edream.120603125159.27">@code
&lt;tr&gt;
	&lt;td width="20%" height="15" valign="bottom" class="REM_FieldTitle"&gt;Non Employee(s):&lt;/td&gt;
	&lt;td width="15%" height="15" valign="bottom" class="REM_FieldTitle"&gt;Name:&lt;/td&gt;
	&lt;td width="45%" height="15" valign="bottom" class="REM_FieldTitle"&gt;Company:&lt;/td&gt;
	&lt;td width="20%" height="15" valign="bottom" class="REM_FieldTitle"&gt;Reason:&lt;/td&gt;
&lt;/tr&gt;</t>
<t tx="edream.120603125159.28">@code
&lt;xsl:for-each select="/SESSION/DOC/CLAIM/ITEMS/ITEM[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value]/NONEMPLOYEES/PERSON"&gt;
	&lt;xsl:choose&gt;
		&lt;xsl:when test="@action='delete'"&gt;
			&lt;xsl:text/&gt;
		&lt;/xsl:when&gt;
		&lt;xsl:otherwise&gt;
			&lt;tr&gt;
				&lt;td height="22" valign="middle" class="REM_ListValueBlock"&gt;
					&lt;input name="BtnNonEmployee" type="submit" class="REM_FormTextButtonFixed" value="Remove"&gt;
						&lt;xsl:attribute name="onClick"&gt;
							&lt;xsl:value-of select="concat('REM_GetScrollPos(0);REM_SetButtonLineNoSubmit(',$SingleQuote,@id,$SingleQuote,$Comma,$SingleQuote,'NonEmployeeRemove',$SingleQuote,')')"/&gt;
						&lt;/xsl:attribute&gt;
					&lt;/input&gt;
				&lt;/td&gt;
				&lt;td valign="middle" class="REM_ListValueBlock"&gt;
					&lt;xsl:value-of select="./NAME"/&gt;
				&lt;/td&gt;
				&lt;td valign="middle" class="REM_ListValueBlock"&gt;
					&lt;xsl:value-of select="./COMPANY"/&gt;
				&lt;/td&gt;
				&lt;td valign="middle" class="REM_ListValueBlock"&gt;
					&lt;xsl:value-of select="./REASON"/&gt;
				&lt;/td&gt;
			&lt;/tr&gt;
		&lt;/xsl:otherwise&gt;
	&lt;/xsl:choose&gt;
&lt;/xsl:for-each&gt;</t>
<t tx="edream.120603125159.29">@code
&lt;tr&gt;
	&lt;td height="22" valign="middle" class="REM_ListValueBlock"&gt;
		&lt;input name="BtnNonEmployee" type="submit" class="REM_FormTextButtonFixed" value="Add" onClick="REM_GetScrollPos(20);REM_SetButton('NonEmployeeAdd')"/&gt;
		&lt;input name="NonEmployeeId" type="hidden" value="{user:EXF_get_unique_id()}"/&gt;
	&lt;/td&gt;
	&lt;td valign="middle" class="REM_ListValueBlock"&gt;
		&lt;input name="NonEmployeeName" type="text" class="REM_FormTextboxList" size="30" maxlength="30"&gt;
			&lt;xsl:attribute name="value"&gt;
				&lt;xsl:value-of select="/SESSION/FORM/ITEM[@group='Item' and @name='NonEmployeeName']/@value"/&gt;
			&lt;/xsl:attribute&gt;
		&lt;/input&gt;
	&lt;/td&gt;
	&lt;td valign="middle" class="REM_ListValueBlock"&gt;
		&lt;input name="NonEmployeeCompany" type="text" class="REM_FormTextboxList" value="" size="30" maxlength="30"&gt;
			&lt;xsl:attribute name="value"&gt;
				&lt;xsl:value-of select="/SESSION/FORM/ITEM[@group='Item' and @name='NonEmployeeCompany']/@value"/&gt;
			&lt;/xsl:attribute&gt;
		&lt;/input&gt;
	&lt;/td&gt;
	&lt;td valign="middle" class="REM_ListValueBlock"&gt;
		&lt;select name="NonEmployeeReason" class="REM_Ddlb"&gt;
			&lt;option value=""&gt;-- Please Select --&lt;/option&gt;
			&lt;xsl:for-each select="/SESSION/RS_MSG/RSRS/LISTREASON/REASON/ITEM"&gt;
				&lt;xsl:choose&gt;
					&lt;xsl:when test="./@name=/SESSION/FORM/ITEM[@group='Item' and @name='NonEmployeeReason']/@value"&gt;
						&lt;option value="{./@name}" selected="selected"&gt;
							&lt;xsl:value-of select="./@name"/&gt;
						&lt;/option&gt;
					&lt;/xsl:when&gt;
					&lt;xsl:otherwise&gt;
						&lt;option value="{./@name}"&gt;
							&lt;xsl:value-of select="./@name"/&gt;
						&lt;/option&gt;
					&lt;/xsl:otherwise&gt;
				&lt;/xsl:choose&gt;
			&lt;/xsl:for-each&gt;
		&lt;/select&gt;
	&lt;/td&gt;
&lt;/tr&gt;</t>
<t tx="edream.120603125159.30">@code
&lt;tr&gt;
	&lt;td colspan="2"&gt;
		&lt;div id="Allowance" class="REM_CSSP_FreeFormBackground"&gt;
			&lt;div id="AllowanceControl"&gt;
				&lt;div id="AllowanceLabel"&gt;
					&lt;p class="REM_FieldTitle"&gt;Allowance&lt;/p&gt;
				&lt;/div&gt;
				&lt;div id="AllowanceValue" class="REM_FormTextboxReadOnly"&gt;
					&lt;xsl:value-of select="/SESSION/RS_MSG/RSRS/LISTPOLICY/POLICY[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ExpensePolicy']/@value]/ALLOWANCE_TERMS"/&gt;
				&lt;/div&gt;
			&lt;/div&gt;
		&lt;/div&gt;
	&lt;/td&gt;
&lt;/tr&gt;
&lt;!-- *****************************************************************************************************************--&gt;
&lt;tr&gt;
	&lt;td colspan="2" height="5px"/&gt;
&lt;/tr&gt;</t>
<t tx="edream.120603125159.31">@code
&lt;tr&gt;
	&lt;td colspan="2"&gt;
		&lt;div id="Explain" class="REM_CSSP_FreeFormBackground"&gt;
			&lt;div id="ExplainControl"&gt;
				&lt;div id="ExplainLabel"&gt;
					&lt;p class="REM_FieldTitle"&gt;Calculation Explanation &lt;/p&gt;
				&lt;/div&gt;
				&lt;div id="ExplainValue" class="REM_FormTextboxReadOnly"&gt;
					&lt;xsl:value-of select="/SESSION/DOC/CLAIM/ITEMS/ITEM[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value]/ITEMVALUE/CALC_EXPLANATION"/&gt;
				&lt;/div&gt;
			&lt;/div&gt;
		&lt;/div&gt;
	&lt;/td&gt;
&lt;/tr&gt;
&lt;!-- *****************************************************************************************************************--&gt;
&lt;tr&gt;
	&lt;td colspan="2" height="5px"/&gt;
&lt;/tr&gt;</t>
<t tx="edream.120603125159.32">@code
&lt;tr&gt;
	&lt;td colspan="2"&gt;
		&lt;input name="Block" value="HV" type="hidden"/&gt;
		&lt;div id="HomeValue" class="REM_CSSP_FreeFormBackground"&gt;
			&lt;div id="HVControl"&gt;
				&lt;&lt; hv_currency_label &gt;&gt;
				&lt;&lt; hv_currency_value &gt;&gt;
				&lt;&lt; hv_value_label &gt;&gt;
				&lt;&lt; hv_value &gt;&gt;
		  &lt;/div&gt;
		&lt;/div&gt;
	&lt;/td&gt;
&lt;/tr&gt;</t>
<t tx="edream.120603125159.33">@code
&lt;div id="HVCurrencyL"&gt;
	&lt;p class="REM_FieldTitle"&gt;Home Currency&lt;/p&gt;
	&lt;xsl:if test="count(/SESSION/ERROR/ITEM[@block='Value'])&amp;gt;0"&gt;
		&lt;img src="../../../Img/red_exclaim_on_white.gif" width="16" height="17"&gt;
			&lt;xsl:attribute name="alt"&gt;
				&lt;xsl:for-each select="/SESSION/ERROR/ITEM[@block='Value']"&gt;
					&lt;xsl:value-of select="@message"/&gt;
				&lt;/xsl:for-each&gt;
			&lt;/xsl:attribute&gt;
		&lt;/img&gt;
	&lt;/xsl:if&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.34">@code
&lt;div id="HVCurrencyV"&gt;
	&lt;input name="Currency" readonly="true" type="text" class="REM_FormTextbox" size="10" maxlength="10" value="{/SESSION/RS_MSG/RSRS/VIEWUSER/USER/CURRENCY}"/&gt;
	&lt;input name="SystemExchangeRate" type="hidden" size="10" maxlength="10" value="1"/&gt;
	&lt;input name="ExchangeRate" type="hidden" size="10" maxlength="10" value="1"/&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.35">@code
&lt;div id="HVValueL"&gt;
	&lt;p class="REM_FieldTitle"&gt;Gross Value&lt;/p&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.36">@code
&lt;div id="HVValueV"&gt;
	&lt;input name="ItemValue" type="text" class="REM_FormTextboxNumericSubTotal" size="10" maxlength="10" onblur="REM_GetScrollPos(0);REM_SetButtonSubmit('FormSave')"&gt;
		&lt;xsl:attribute name="value"&gt;
			&lt;xsl:choose&gt;
				&lt;xsl:when test="/SESSION/FORM/ITEM[@group='Item' and @name='DataSource']/@value='Doc'"&gt;
					&lt;xsl:value-of select="/SESSION/DOC/CLAIM/ITEMS/ITEM[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value]/ITEMVALUE/RECEIPT/GROSS_VALUE"/&gt;
				&lt;/xsl:when&gt;
				&lt;xsl:otherwise&gt;
					&lt;xsl:value-of select="/SESSION/FORM/ITEM[@group='Item' and @name='ItemValue']/@value"/&gt;
				&lt;/xsl:otherwise&gt;
			&lt;/xsl:choose&gt;
		&lt;/xsl:attribute&gt;
	&lt;/input&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.37">@code
&lt;tr&gt;
	&lt;td colspan="2"&gt;
		&lt;input name="Block" value="Value" type="hidden"/&gt;
		&lt;div id="ForeignValue" class="REM_CSSP_FreeFormBackground"&gt;
			&lt;div id="ForeignValueControl"&gt;
				&lt;&lt; fv_error &gt;&gt;
				&lt;&lt; fv_currency_label &gt;&gt;
				&lt;&lt; fv_currency_value &gt;&gt;
				&lt;&lt; fv_exchange_rate_label &gt;&gt;
				&lt;&lt; fv_exchange_rate_value &gt;&gt;
				&lt;&lt; fv_value_label &gt;&gt;
				&lt;&lt; fv_value &gt;&gt;
			&lt;/div&gt;
		&lt;/div&gt;
	&lt;/td&gt;
&lt;/tr&gt;
&lt;!-- *****************************************************************************************************************--&gt;
&lt;tr&gt;
	&lt;td colspan="2" height="5px"/&gt;
&lt;/tr&gt;</t>
<t tx="edream.120603125159.38">@code
&lt;xsl:if test="count(/SESSION/ERROR/ITEM[@block='Value'])&amp;gt;0"&gt;
	&lt;div id="FVError" style="position:absolute; left:0px; top:14px; width:15px; height:13px; z-index:38"&gt;
	&lt;img src="../../../Img/red_exclaim_on_grey.gif" width="16" height="17"&gt;
		&lt;xsl:attribute name="alt"&gt;
			&lt;xsl:for-each select="/SESSION/ERROR/ITEM[@block='Value']"&gt;
				&lt;xsl:value-of select="@message"/&gt;
			&lt;/xsl:for-each&gt;
		&lt;/xsl:attribute&gt;
	&lt;/img&gt;
	&lt;/div&gt;
&lt;/xsl:if&gt;</t>
<t tx="edream.120603125159.39">@code
&lt;div id="FVCurrencyL"&gt;
	&lt;p class="REM_FieldTitle"&gt;Foreign Currency&lt;/p&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.40">@code
&lt;div id="FVCurrencyV"&gt;
	&lt;div align="right"&gt;
		&lt;select name="Currency" class="REM_Ddlb" onchange="REM_SetButtonSubmit('Currency')"&gt;
			&lt;option value=""&gt;-- Please Select -- &lt;/option&gt;
			&lt;xsl:for-each select="/SESSION/RS_MSG/RSRS/LISTCURRENCY/CURRENCY"&gt;
				&lt;xsl:choose&gt;
					&lt;xsl:when test="/SESSION/FORM/ITEM[@group='Item' and @name='DataSource']/@value='Doc' and ./@id=/SESSION/DOC/CLAIM/ITEMS/ITEM[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value]/ITEMVALUE/RECEIPT/CURRENCY"&gt;
						&lt;option value="{./@id}" selected="selected"&gt;
							&lt;xsl:value-of select="concat(./NAME,' - ',./@id,' (',./HOME_XRATE,')')"/&gt;
						&lt;/option&gt;
					&lt;/xsl:when&gt;
					&lt;xsl:when test="/SESSION/FORM/ITEM[@group='Item' and @name='DataSource']/@value='Form' and ./@id=/SESSION/FORM/ITEM[@group='Item' and @name='Currency']/@value"&gt;
						&lt;option value="{./@id}" selected="selected"&gt;
							&lt;xsl:value-of select="concat(./NAME,' - ',./@id,' (',./HOME_XRATE,')')"/&gt;
						&lt;/option&gt;
					&lt;/xsl:when&gt;
					&lt;xsl:otherwise&gt;
						&lt;option value="{./@id}"&gt;
							&lt;xsl:value-of select="concat(./NAME,' - ',./@id,' (',./HOME_XRATE,')')"/&gt;
						&lt;/option&gt;
					&lt;/xsl:otherwise&gt;
				&lt;/xsl:choose&gt;
			&lt;/xsl:for-each&gt;
		&lt;/select&gt;
	&lt;/div&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.41">@code
&lt;div id="FVExchangeRateL"&gt;
	&lt;p class="REM_FieldTitle"&gt;Exchange Rate &lt;/p&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.42">@code
&lt;div id="FVExchangeRateV"&gt;
	&lt;input name="SystemExchangeRate" type="hidden" size="10" maxlength="10"&gt;
		&lt;xsl:attribute name="value"&gt;
			&lt;xsl:choose&gt;
				&lt;xsl:when test="/SESSION/FORM/ITEM[@group='Item' and @name='DataSource']/@value='Doc'"&gt;
					&lt;xsl:value-of select="/SESSION/DOC/CLAIM/ITEMS/ITEM[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value]/ITEMVALUE/RECEIPT/BASE_EXCHANGE_RATE"/&gt;
				&lt;/xsl:when&gt;
				&lt;xsl:otherwise&gt;
					&lt;xsl:value-of select="/SESSION/FORM/ITEM[@group='Item' and @name='SystemExchangeRate']/@value"/&gt;
				&lt;/xsl:otherwise&gt;
			&lt;/xsl:choose&gt;
		&lt;/xsl:attribute&gt;
	&lt;/input&gt;
	&lt;input name="ExchangeRate" type="text" class="REM_FormTextboxNumeric" size="10" maxlength="10"&gt;
		&lt;xsl:attribute name="value"&gt;
			&lt;xsl:choose&gt;
				&lt;xsl:when test="/SESSION/FORM/ITEM[@group='Item' and @name='DataSource']/@value='Doc'"&gt;
					&lt;xsl:value-of select="/SESSION/DOC/CLAIM/ITEMS/ITEM[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value]/ITEMVALUE/RECEIPT/EXCHANGE_RATE"/&gt;
				&lt;/xsl:when&gt;
				&lt;xsl:otherwise&gt;
					&lt;xsl:value-of select="/SESSION/FORM/ITEM[@group='Item' and @name='ExchangeRate']/@value"/&gt;
				&lt;/xsl:otherwise&gt;
			&lt;/xsl:choose&gt;
		&lt;/xsl:attribute&gt;
	&lt;/input&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.43">@code
&lt;div id="FVValueL"&gt;
	&lt;p class="REM_FieldTitle"&gt;Gross Value&lt;/p&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.44">@code
&lt;div id="FVValueV"&gt;
	&lt;input name="ItemValue" type="text" class="REM_FormTextboxNumericSubTotal" size="10" maxlength="10" onChange="REM_GetScrollPos(0);REM_SetButtonSubmit('FormSave')"&gt;
		&lt;xsl:attribute name="value"&gt;
			&lt;xsl:choose&gt;
				&lt;xsl:when test="/SESSION/FORM/ITEM[@group='Item' and @name='DataSource']/@value='Doc'"&gt;
					&lt;xsl:value-of select="/SESSION/DOC/CLAIM/ITEMS/ITEM[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value]/ITEMVALUE/RECEIPT/GROSS_VALUE"/&gt;
				&lt;/xsl:when&gt;
				&lt;xsl:otherwise&gt;
					&lt;xsl:value-of select="/SESSION/FORM/ITEM[@group='Item' and @name='ItemValue']/@value"/&gt;
				&lt;/xsl:otherwise&gt;
			&lt;/xsl:choose&gt;
		&lt;/xsl:attribute&gt;
	&lt;/input&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.45">@code
&lt;tr&gt;
	&lt;td colspan="2"&gt;
		&lt;input name="Block" value="VA" type="hidden"/&gt;
		&lt;div id="Vat" class="REM_CSSP_FreeFormBackground"&gt;
			&lt;div id="VatControl"&gt;
				&lt;&lt; vat_flag &gt;&gt;
				&lt;&lt; vat_rate &gt;&gt;
				&lt;&lt; vat_value &gt;&gt;
				&lt;&lt; vat_reason &gt;&gt;
				&lt;&lt; vat_comment &gt;&gt;
			&lt;/div&gt;
		&lt;/div&gt;
	&lt;/td&gt;
&lt;/tr&gt;
&lt;!-- *****************************************************************************************************************--&gt;
&lt;tr&gt;
	&lt;td colspan="2" height="5px"/&gt;
&lt;/tr&gt;</t>
<t tx="edream.120603125159.46">@code
&lt;div id="VTFlagL"&gt;
	&lt;p class="REM_FieldTitle"&gt;Do you have a Vat Receipt? &lt;/p&gt;
&lt;/div&gt;
&lt;div id="VTFlagV"&gt;
	&lt;select name="VatReceipt" class="REM_Ddlb" onchange="REM_GetScrollPos(0);REM_SetButtonSubmit('VatReceipt')"&gt;
		&lt;option value="0"&gt;-- Please Select --&lt;/option&gt;
		&lt;xsl:choose&gt;
			&lt;xsl:when test="/SESSION/FORM/ITEM[@group='Item' and @name='DataSource']/@value='Doc'"&gt;
				&lt;xsl:choose&gt;
					&lt;xsl:when test="/SESSION/DOC/CLAIM/ITEMS/ITEM[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value]/VAT/RECEIPT=1"&gt;
						&lt;option value="1" selected="selected"&gt;Yes&lt;/option&gt;
						&lt;option value="0"&gt;No&lt;/option&gt;
					&lt;/xsl:when&gt;
					&lt;xsl:when test="/SESSION/DOC/CLAIM/ITEMS/ITEM[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value]/VAT/RECEIPT=0"&gt;
						&lt;option value="1"&gt;Yes&lt;/option&gt;
						&lt;option value="0" selected="selected"&gt;No&lt;/option&gt;
					&lt;/xsl:when&gt;
					&lt;xsl:otherwise&gt;
						&lt;option value="1"&gt;Yes&lt;/option&gt;
						&lt;option value="0"&gt;No&lt;/option&gt;
					&lt;/xsl:otherwise&gt;
				&lt;/xsl:choose&gt;
			&lt;/xsl:when&gt;
			&lt;xsl:otherwise&gt;
				&lt;xsl:choose&gt;
					&lt;xsl:when test="/SESSION/FORM/ITEM[@group='Item' and @name='VatReceipt']/@value=1"&gt;
						&lt;option value="1" selected="selected"&gt;Yes&lt;/option&gt;
						&lt;option value="0"&gt;No&lt;/option&gt;
					&lt;/xsl:when&gt;
					&lt;xsl:when test="/SESSION/FORM/ITEM[@group='Item' and @name='VatReceipt']/@value=0"&gt;
						&lt;option value="1"&gt;Yes&lt;/option&gt;
						&lt;option value="0" selected="selected"&gt;No&lt;/option&gt;
					&lt;/xsl:when&gt;
					&lt;xsl:otherwise&gt;
						&lt;option value="1"&gt;Yes&lt;/option&gt;
						&lt;option value="0"&gt;No&lt;/option&gt;
					&lt;/xsl:otherwise&gt;
				&lt;/xsl:choose&gt;
			&lt;/xsl:otherwise&gt;
		&lt;/xsl:choose&gt;
	&lt;/select&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.47">@code
&lt;div id="VTRateL"&gt;
	&lt;p class="REM_FieldTitle"&gt;VAT Rate &lt;/p&gt;
&lt;/div&gt;
&lt;div id="VTRateV"&gt;
	&lt;input name="VatRate" readonly="true" type="text" class="REM_FormTextbox" size="10" maxlength="10" value="{/SESSION/RS_MSG/RSRS/LISTPOLICY/POLICY[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ExpensePolicy']/@value]/VAT/RATE}"/&gt;
&lt;/div&gt;
&lt;div id="VTRateL2"&gt;
	&lt;p class="REM_FieldTitle"&gt;%&lt;/p&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.48">@code
&lt;div id="VTValueL"&gt;
	&lt;p class="REM_FieldTitle"&gt;VAT Amount &lt;/p&gt;
&lt;/div&gt;
&lt;div id="VTValueV"&gt;
	&lt;input name="NetVatValue" type="text" class="REM_FormTextboxNumericSubTotal" size="10" maxlength="10"&gt;
		&lt;xsl:attribute name="value"&gt;
			&lt;xsl:choose&gt;
				&lt;xsl:when test="/SESSION/FORM/ITEM[@group='Item' and @name='DataSource']/@value='Doc'"&gt;
					&lt;xsl:value-of select="/SESSION/DOC/CLAIM/ITEMS/ITEM[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value]/VAT/VALUE"/&gt;
				&lt;/xsl:when&gt;
				&lt;xsl:otherwise&gt;
					&lt;xsl:value-of select="/SESSION/FORM/ITEM[@group='Item' and @name='NetVatValue']/@value"/&gt;
				&lt;/xsl:otherwise&gt;
			&lt;/xsl:choose&gt;
		&lt;/xsl:attribute&gt;
	&lt;/input&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.49">@code
&lt;div id="VTReasonL"&gt;
	&lt;p class="REM_FieldTitle"&gt;If No Receipt, then please explain why:&lt;/p&gt;
&lt;/div&gt;
&lt;div id="VTReasonV"&gt;
	&lt;!-- KEEP textarea end tag, otherwise page breaks --&gt;
	&lt;textarea name="VatReason" cols="139" rows="2" id="textarea3" class="REM_FormTextbox"&gt;
		&lt;xsl:choose&gt;
			&lt;xsl:when test="/SESSION/FORM/ITEM[@group='Item' and @name='DataSource']/@value='Doc'"&gt;
				&lt;xsl:value-of select="/SESSION/DOC/CLAIM/ITEMS/ITEM[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value]/VAT/REASON"/&gt;
			&lt;/xsl:when&gt;
			&lt;xsl:otherwise&gt;
				&lt;xsl:value-of select="/SESSION/FORM/ITEM[@group='Item' and @name='VatReason']/@value"/&gt;
			&lt;/xsl:otherwise&gt;
		&lt;/xsl:choose&gt;
	&lt;/textarea&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.50">@code
&lt;div id="VTCommentL"&gt;
	&lt;p class="REM_FieldTitle"&gt;Comment&lt;/p&gt;
&lt;/div&gt;
&lt;div id="VTCommentV" class="REM_FormTextboxReadOnly"&gt;
	&lt;xsl:value-of select="/SESSION/RS_MSG/RSRS/LISTPOLICY/POLICY[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ExpensePolicy']/@value]/VAT/COMMENTS"/&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.51">@code
&lt;tr&gt;
	&lt;td colspan="2" height="5px"&gt;
		&lt;input name="Block" value="CO" type="hidden"/&gt;
		&lt;div id="Comment" class="REM_CSSP_FreeFormBackground"&gt;
			&lt;div id="CommentControl"&gt;
				&lt;div id="CCommentV"&gt;
					&lt;!-- KEEP textarea end tag, otherwise page breaks --&gt;
					&lt;textarea name="Comment" cols="139" rows="3" class="REM_FormTextbox"&gt;
						&lt;xsl:choose&gt;
							&lt;xsl:when test="/SESSION/FORM/ITEM[@group='Item' and @name='DataSource']/@value='Doc'"&gt;
								&lt;xsl:value-of select="/SESSION/DOC/CLAIM/ITEMS/ITEM[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value]/COMMENT/VALUE"/&gt;
							&lt;/xsl:when&gt;
							&lt;xsl:otherwise&gt;
								&lt;xsl:value-of select="/SESSION/FORM/ITEM[@group='Item' and @name='Comment']/@value"/&gt;
							&lt;/xsl:otherwise&gt;
						&lt;/xsl:choose&gt;
					&lt;/textarea&gt;
					&lt;div align="right"/&gt;
			  &lt;/div&gt;
				&lt;div id="CCommentL"&gt;
					&lt;p class="REM_FieldTitle"&gt;Additional Comment:&lt;/p&gt;
			  &lt;/div&gt;
			&lt;/div&gt;
		&lt;/div&gt;
	&lt;/td&gt;
&lt;/tr&gt;
&lt;!-- *****************************************************************************************************************--&gt;
&lt;tr&gt;
	&lt;td colspan="2" height="5px"/&gt;
&lt;/tr&gt;</t>
<t tx="edream.120603125159.52">@code
&lt;tr&gt;
	&lt;td colspan="2"&gt;
		&lt;input name="Block" value="SU" type="hidden"/&gt;
		&lt;div id="Supplier" class="REM_CSSP_FreeFormBackground"&gt;
			&lt;div id="SControl"&gt;
				&lt;&lt; preferred_supplier &gt;&gt;
				&lt;&lt; other_supplier &gt;&gt;
			&lt;/div&gt;
		&lt;/div&gt;
	&lt;/td&gt;
&lt;/tr&gt;
&lt;!-- *****************************************************************************************************************--&gt;
&lt;tr&gt;
	&lt;td colspan="2" height="5px"/&gt;
&lt;/tr&gt;</t>
<t tx="edream.120603125159.53">@code
&lt;div id="SPreferredL"&gt;
	&lt;p class="REM_FieldTitle"&gt;Preferred Supplier &lt;/p&gt;
&lt;/div&gt;
&lt;div id="SPreferredV"&gt;
	&lt;select name="PreferredSupplier" class="REM_Ddlb"&gt;
		&lt;option value=""&gt;-- Please Select -- &lt;/option&gt;
		&lt;xsl:for-each select="/SESSION/RS_MSG/RSRS/LISTPOLICY/POLICY[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ExpensePolicy']/@value]/SUPPLIER/ITEM"&gt;
			&lt;xsl:choose&gt;
				&lt;xsl:when test="/SESSION/FORM/ITEM[@group='Item' and @name='DataSource']/@value='Doc' and ./@id=/SESSION/DOC/CLAIM/ITEMS/ITEM[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value]/SUPPLIER/ID"&gt;
					&lt;option value="{./@id}" selected="selected"&gt;
						&lt;xsl:value-of select="./@name"/&gt;
					&lt;/option&gt;
				&lt;/xsl:when&gt;
				&lt;xsl:when test="/SESSION/FORM/ITEM[@group='Item' and @name='DataSource']/@value='Form' and ./@id=/SESSION/FORM/ITEM[@group='Item' and @name='PreferredSupplier']/@value"&gt;
					&lt;option value="{./@id}" selected="selected"&gt;
						&lt;xsl:value-of select="./@name"/&gt;
					&lt;/option&gt;
				&lt;/xsl:when&gt;
				&lt;xsl:otherwise&gt;
					&lt;option value="{./@id}"&gt;
						&lt;xsl:value-of select="./@name"/&gt;
					&lt;/option&gt;
				&lt;/xsl:otherwise&gt;
			&lt;/xsl:choose&gt;
		&lt;/xsl:for-each&gt;
	&lt;/select&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.54">@code
&lt;div id="SOtherL"&gt;
	&lt;p class="REM_FieldTitle"&gt;Other Supplier &lt;/p&gt;
&lt;/div&gt;
&lt;div id="SOtherV"&gt;
	&lt;input name="OtherSupplier" style="width:157px;height:19px" type="text" class="REM_FormTextboxGo" size="16" maxlength="20"&gt;
		&lt;xsl:attribute name="value"&gt;
			&lt;xsl:choose&gt;
				&lt;xsl:when test="/SESSION/FORM/ITEM[@group='Item' and @name='DataSource']/@value='Doc'"&gt;
					&lt;xsl:value-of select="/SESSION/DOC/CLAIM/ITEMS/ITEM[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value]/SUPPLIER/OTHER"/&gt;
				&lt;/xsl:when&gt;
				&lt;xsl:otherwise&gt;
					&lt;xsl:value-of select="/SESSION/FORM/ITEM[@group='Item' and @name='OtherSupplier']/@value"/&gt;
				&lt;/xsl:otherwise&gt;
			&lt;/xsl:choose&gt;
		&lt;/xsl:attribute&gt;
	&lt;/input&gt;
&lt;/div&gt;</t>
<t tx="edream.120603125159.55">@code
&lt;tr&gt;
	&lt;td colspan="2"&gt;
		&lt;input name="Block" value="UD" type="hidden"/&gt;
		&lt;div id="UserDefined" class="REM_CSSP_FreeFormBackground"&gt;
			&lt;div id="UDControl"&gt;
				&lt;&lt; udf1 &gt;&gt;
				&lt;&lt; udf2 &gt;&gt;
				&lt;&lt; udf3 &gt;&gt;
				&lt;&lt; udf4 &gt;&gt;
			&lt;/div&gt;
		&lt;/div&gt;
	&lt;/td&gt;
&lt;/tr&gt;
&lt;!-- *****************************************************************************************************************--&gt;
&lt;tr&gt;
	&lt;td colspan="2" height="5px"/&gt;
&lt;/tr&gt;</t>
<t tx="edream.120603125159.56">@code
&lt;xsl:if test="string-length(/SESSION/RS_MSG/RSRS/LISTUSERDEFINED/FIELD[@id='0']/NAME) &amp;gt; 0"&gt;
	&lt;div id="UD1L"&gt;
		&lt;p class="REM_FieldTitle"&gt;
			&lt;xsl:value-of select="/SESSION/RS_MSG/RSRS/LISTUSERDEFINED/FIELD[@id='0']/NAME"/&gt;
		&lt;/p&gt;
	&lt;/div&gt;
	&lt;div id="UD1V"&gt;
		&lt;input name="UD1" type="text" class="REM_FormTextbox" size="10" maxlength="10"&gt;
			&lt;xsl:attribute name="value"&gt;
				&lt;xsl:choose&gt;
					&lt;xsl:when test="/SESSION/FORM/ITEM[@group='Item' and @name='DataSource']/@value='Doc'"&gt;
						&lt;xsl:value-of select="/SESSION/DOC/CLAIM/ITEMS/ITEM[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value]/USER_DEFINED/FIELD[@id ='0']/NAME"/&gt;
					&lt;/xsl:when&gt;
					&lt;xsl:otherwise&gt;
						&lt;xsl:value-of select="/SESSION/FORM/ITEM[@group='Item' and @name='UD1']/@value"/&gt;
					&lt;/xsl:otherwise&gt;
				&lt;/xsl:choose&gt;
			&lt;/xsl:attribute&gt;
		&lt;/input&gt;
	&lt;/div&gt;
&lt;/xsl:if&gt;</t>
<t tx="edream.120603125159.57">@code
&lt;xsl:if test="string-length(/SESSION/RS_MSG/RSRS/LISTUSERDEFINED/FIELD[@id='1']/NAME) &amp;gt; 0"&gt;
	&lt;div id="UD2L"&gt;
		&lt;p class="REM_FieldTitle"&gt;
			&lt;xsl:value-of select="/SESSION/RS_MSG/RSRS/LISTUSERDEFINED/FIELD[@id='1']/NAME"/&gt;
		&lt;/p&gt;
	&lt;/div&gt;
	&lt;div id="UD2V"&gt;
		&lt;input name="UD2" type="text" class="REM_FormTextbox" value="PRJ123" size="10" maxlength="10"&gt;
			&lt;xsl:attribute name="value"&gt;
				&lt;xsl:choose&gt;
					&lt;xsl:when test="/SESSION/FORM/ITEM[@group='Item' and @name='DataSource']/@value='Doc'"&gt;
						&lt;xsl:value-of select="/SESSION/DOC/CLAIM/ITEMS/ITEM[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value]/USER_DEFINED/FIELD[@id ='1']/NAME"/&gt;
					&lt;/xsl:when&gt;
					&lt;xsl:otherwise&gt;
						&lt;xsl:value-of select="/SESSION/FORM/ITEM[@group='Item' and @name='UD2']/@value"/&gt;
					&lt;/xsl:otherwise&gt;
				&lt;/xsl:choose&gt;
			&lt;/xsl:attribute&gt;
		&lt;/input&gt;
	&lt;/div&gt;
&lt;/xsl:if&gt;</t>
<t tx="edream.120603125159.58">@code
&lt;xsl:if test="string-length(/SESSION/RS_MSG/RSRS/LISTUSERDEFINED/FIELD[@id='2']/NAME) &amp;gt; 0"&gt;
	&lt;div id="UD3L"&gt;
		&lt;p class="REM_FieldTitle"&gt;
			&lt;xsl:value-of select="/SESSION/RS_MSG/RSRS/LISTUSERDEFINED/FIELD[@id='2']/NAME"/&gt;
		&lt;/p&gt;
	&lt;/div&gt;
	&lt;div id="UD3V"&gt;
		&lt;input name="UD3" type="text" class="REM_FormTextbox" value="" size="10" maxlength="10"&gt;
			&lt;xsl:attribute name="value"&gt;
				&lt;xsl:choose&gt;
					&lt;xsl:when test="/SESSION/FORM/ITEM[@group='Item' and @name='DataSource']/@value='Doc'"&gt;
						&lt;xsl:value-of select="/SESSION/DOC/CLAIM/ITEMS/ITEM[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value]/USER_DEFINED/FIELD[@id ='2']/NAME"/&gt;
					&lt;/xsl:when&gt;
					&lt;xsl:otherwise&gt;
						&lt;xsl:value-of select="/SESSION/FORM/ITEM[@group='Item' and @name='UD3']/@value"/&gt;
					&lt;/xsl:otherwise&gt;
				&lt;/xsl:choose&gt;
			&lt;/xsl:attribute&gt;
		&lt;/input&gt;
	&lt;/div&gt;
&lt;/xsl:if&gt;</t>
<t tx="edream.120603125159.59">@code
&lt;xsl:if test="string-length(/SESSION/RS_MSG/RSRS/LISTUSERDEFINED/FIELD[@id='3']/NAME) &amp;gt; 0"&gt;
	&lt;div id="UD4L"&gt;
		&lt;p class="REM_FieldTitle"&gt;
			&lt;xsl:value-of select="/SESSION/RS_MSG/RSRS/LISTUSERDEFINED/ITEM[@id='UD4']/@name"/&gt;
		&lt;/p&gt;
	&lt;/div&gt;
	&lt;div id="UD4V"&gt;
		&lt;input name="UD4" type="text" class="REM_FormTextbox" value="PRJ123" size="10" maxlength="10"&gt;
			&lt;xsl:attribute name="value"&gt;
				&lt;xsl:choose&gt;
					&lt;xsl:when test="/SESSION/FORM/ITEM[@group='Item' and @name='DataSource']/@value='Doc'"&gt;
						&lt;xsl:value-of select="/SESSION/DOC/CLAIM/ITEMS/ITEM[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value]/USER_DEFINED/FIELD[@id ='3']/NAME"/&gt;
					&lt;/xsl:when&gt;
					&lt;xsl:otherwise&gt;
						&lt;xsl:value-of select="/SESSION/FORM/ITEM[@group='Item' and @name='UD4']/@value"/&gt;
					&lt;/xsl:otherwise&gt;
				&lt;/xsl:choose&gt;
			&lt;/xsl:attribute&gt;
		&lt;/input&gt;
	&lt;/div&gt;
&lt;/xsl:if&gt;</t>
<t tx="edream.120603125159.60">@code
&lt;tr&gt;
	&lt;td colspan="2"&gt;
		&lt;input name="Block" value="CH" type="hidden"/&gt;
		&lt;!-- &lt;div id="Charge"&gt; --&gt;
		&lt;table width="100%" border="0" cellpadding="3" cellspacing="0" class="TableItemBorder"&gt;
			&lt;tr valign="top" bordercolor="#CCFFCC" bgcolor="#D6D3CE"&gt;
				&lt;td colspan="5" bgcolor="#CCCCCC" class="REM_FieldTitle"&gt;
					&lt;table width="100%" border="0" cellpadding="2" cellspacing="0"&gt;
						&lt;&lt; charge_titles &gt;&gt;
						&lt;&lt; charge_unallocated_row &gt;&gt;
						&lt;&lt; charge_records &gt;&gt;
						&lt;&lt; charge_add_row &gt;&gt;
					&lt;/table&gt;
				&lt;/td&gt;
			&lt;/tr&gt;
		&lt;/table&gt;
		&lt;!-- &lt;/div&gt; --&gt;
	&lt;/td&gt;
&lt;/tr&gt;</t>
<t tx="edream.120603125159.61">@code
&lt;tr&gt;
	&lt;td width="20%" height="15" valign="bottom" class="REM_FieldTitle"&gt;Charge:&lt;/td&gt;
	&lt;td width="15%" height="15" valign="bottom" class="REM_FieldTitle"&gt;Budget:&lt;/td&gt;
	&lt;td width="20%" height="15" valign="bottom" class="REM_FieldTitle"&gt;Allocation:&lt;/td&gt;
&lt;/tr&gt;</t>
<t tx="edream.120603125159.62">@code
&lt;tr&gt;
	&lt;td height="22" valign="middle" class="REM_ListValueBlock"&gt;
		&lt;xsl:text disable-output-escaping="yes"&gt;&amp;amp;&lt;/xsl:text&gt;nbsp; 
  &lt;/td&gt;
	&lt;td valign="middle" class="REM_ListValueBlock"&gt;Unallocated &lt;/td&gt;
	&lt;td align="right" valign="middle" class="REM_ListValueBlock"&gt;
		&lt;xsl:variable name="ItemId"&gt;
			&lt;xsl:value-of select="/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value"/&gt;
		&lt;/xsl:variable&gt;
		&lt;xsl:variable name="GrossTotal"&gt;
			&lt;xsl:value-of select="/SESSION/DOC/CLAIM/ITEMS/ITEM[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value]/ITEMVALUE/RECEIPT/GROSS_VALUE"/&gt;
		&lt;/xsl:variable&gt;
		&lt;xsl:variable name="AllocationTotal"&gt;
			&lt;xsl:value-of select="sum(/SESSION/DOC/CLAIM/ITEMS/ITEM[@id=$ItemId]/CHARGE/ITEM[@action!='delete']/ALLOCATION)"/&gt;
		&lt;/xsl:variable&gt;
		&lt;xsl:value-of select="$GrossTotal"/&gt;/
			&lt;xsl:value-of select=" $AllocationTotal"/&gt;/
			&lt;xsl:value-of select="$GrossTotal - $AllocationTotal"/&gt;
	&lt;/td&gt;
&lt;/tr&gt;</t>
<t tx="edream.120603125159.63">@code
&lt;xsl:for-each select="/SESSION/DOC/CLAIM/ITEMS/ITEM[@id=/SESSION/FORM/ITEM[@group='Item' and @name='ItemId']/@value]/CHARGE/ITEM"&gt;
	&lt;xsl:choose&gt;
		&lt;xsl:when test="@action='delete'"&gt;
			&lt;xsl:text/&gt;
		&lt;/xsl:when&gt;
		&lt;xsl:otherwise&gt;
			&lt;tr&gt;
				&lt;td height="22" valign="middle" class="REM_ListValueBlock"&gt;
					&lt;input name="BtnCharge" type="submit" class="REM_FormTextButtonFixed" value="Remove"&gt;
						&lt;xsl:attribute name="onClick"&gt;
							&lt;xsl:value-of select="concat('REM_GetScrollPos(0);REM_SetButtonLineNoSubmit(',$SingleQuote,@id,$SingleQuote,$Comma,$SingleQuote,'ChargeRemove',$SingleQuote,')')"/&gt;
						&lt;/xsl:attribute&gt;
					&lt;/input&gt;
				&lt;/td&gt;
				&lt;td valign="middle" class="REM_ListValueBlock"&gt;
					&lt;xsl:value-of select="./BUDGET/DESC"/&gt;
				&lt;/td&gt;
				&lt;td align="right" valign="middle" class="REM_ListValueBlock"&gt;
					&lt;xsl:value-of select="./ALLOCATION"/&gt;
				&lt;/td&gt;
			&lt;/tr&gt;
		&lt;/xsl:otherwise&gt;
	&lt;/xsl:choose&gt;
&lt;/xsl:for-each&gt;</t>
<t tx="edream.120603125159.64">@code
&lt;tr&gt;
	&lt;td height="22" valign="middle" class="REM_ListValueBlock"&gt;
		&lt;input name="BtnCharge" type="submit" class="REM_FormTextButtonFixed" value="Add" onClick="REM_GetScrollPos(20);REM_SetButton('ChargeAdd')"/&gt;
		&lt;input name="ChargeId" type="hidden" value="{user:EXF_get_unique_id()}"/&gt;
		&lt;xsl:if test="count(/SESSION/ERROR/ITEM[@block='Charge'])&amp;gt;0"&gt;
			&lt;img src="../../../Img/red_exclaim_on_white.gif" width="16" height="17"&gt;
				&lt;xsl:attribute name="alt"&gt;
					&lt;xsl:for-each select="/SESSION/ERROR/ITEM[@block='Charge']"&gt;
						&lt;xsl:value-of select="@message"/&gt;
					&lt;/xsl:for-each&gt;
				&lt;/xsl:attribute&gt;
			&lt;/img&gt;
		&lt;/xsl:if&gt;
	&lt;/td&gt;
	&lt;td valign="middle" class="REM_ListValueBlock"&gt;
		&lt;select name="ChargeBudget" class="REM_Ddlb"&gt;
			&lt;option value=""&gt;-- Please Select --&lt;/option&gt;
			&lt;xsl:for-each select="/SESSION/RS_MSG/RSRS/LISTBUDGET/BUDGET"&gt;
				&lt;xsl:choose&gt;
					&lt;xsl:when test="@id=/SESSION/FORM/ITEM[@group='Item' and @name='ChargeBudget']/@value"&gt;
						&lt;option value="{@id}" selected="selected"&gt;
							&lt;xsl:value-of select="."/&gt;
						&lt;/option&gt;
					&lt;/xsl:when&gt;
					&lt;xsl:otherwise&gt;
						&lt;option value="{@id}"&gt;
							&lt;xsl:value-of select="."/&gt;
						&lt;/option&gt;
					&lt;/xsl:otherwise&gt;
				&lt;/xsl:choose&gt;
			&lt;/xsl:for-each&gt;
		&lt;/select&gt;
	&lt;/td&gt;
	&lt;td align="right" valign="middle" class="REM_ListValueBlock"&gt;
		&lt;input name="ChargeAllocation" type="text" class="REM_FormTextboxNumericSubTotal" size="10" maxlength="10"&gt;
			&lt;xsl:attribute name="value"&gt;
				&lt;xsl:value-of select="/SESSION/FORM/ITEM[@group='Item' and @name='ChargeAllocation']/@value"/&gt;
			&lt;/xsl:attribute&gt;
		&lt;/input&gt;
	&lt;/td&gt;
&lt;/tr&gt;</t>
<t tx="edream.120603125159.65">@code
&lt;tr&gt;
	&lt;td colspan="2" height="5px"/&gt;
&lt;/tr&gt;
&lt;!-- *****************************************************************************************************************--&gt;
&lt;tr&gt;
	&lt;td colspan="2"&gt;
		&lt;div id="Button" class="REM_BaseLineTopBottom"&gt;
			&lt;div id="ButtonDelete"&gt;
				&lt;input name="BtnDelete" type="submit" class="REM_FormTextButton" value="Delete" onClick="REM_SetButton('Delete')"/&gt;
			&lt;/div&gt;
			&lt;div id="ButtonSave"&gt;
				&lt;input name="BtnSave" type="submit" class="REM_FormTextButton" value="Save" onClick="REM_ResetScrollPos();REM_SetButton('Save')"/&gt;
			&lt;/div&gt;
			&lt;div id="ButtonCancel"&gt;
				&lt;input name="BtnCancel" type="submit" class="REM_FormTextButton" value="Cancel" onClick="REM_SetButton('Cancel')"/&gt;
			&lt;/div&gt;
		&lt;/div&gt;
	&lt;/td&gt;
&lt;/tr&gt;
&lt;!-- *****************************************************************************************************************--&gt;
&lt;tr&gt;
	&lt;td colspan="2" height="5px"/&gt;
&lt;/tr&gt;
&lt;!-- *****************************************************************************************************************--&gt;</t>
</tnodes>
</leo_file>
