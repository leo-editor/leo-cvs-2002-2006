#@+leo-ver=4-thin
#@+node:ekr.20040117181936:@thin ../doc/leoToDo.txt
#@+all
#@+node:ekr.20060206103355:To do 4.4b2
#@+node:ekr.20060116080040.2:activate-xxx-menu commands
These would be an alternative to XP Alt-f, Alt-E, etc.
#@+node:ekr.20060210133835:prototype of menu post commands
import tkFont
name = 'Outline'
menus = ('File','Edit','Outline','Plugins','Cmds','Window','Help')

# Compute the *approximate* x offsets of each menu.
offsets = {} ; n = 0
for z in menus:
    menu = c.frame.menu.getMenu(z)
    fontName = menu.cget('font')
    font = tkFont.Font(font=fontName)
    # print '%8s' % (z),menu.winfo_reqwidth(),menu.master,menu.winfo_x()
    offsets[z] = n
    # A total hack: sorta works on windows.
    n += font.measure(z+' '*4)+1 

top = c.frame.top
topx,topy = top.winfo_rootx(),top.winfo_rooty()
menu = c.frame.menu.getMenu(name)
menu.post(topx+offsets.get(name,0),topy)
#@nonl
#@-node:ekr.20060210133835:prototype of menu post commands
#@+node:ekr.20060210133835.1:computeMenuPositions
import tkFont

# To do: create self.menuList while creating menus.

def computeMenuPositions (self):
    
    menus = ('File','Edit','Outline','Plugins','Cmds','Window','Help')
    
    # Compute the *approximate* x offsets of each menu.
    d = {}
    n = 0
    for z in menus:
        menu = self.getMenu(z)
        fontName = menu.cget('font')
        font = tkFont.Font(font=fontName)
        # print '%8s' % (z),menu.winfo_reqwidth(),menu.master,menu.winfo_x()
        d [z] = n
        # A total hack: sorta works on windows.
        n += font.measure(z+' '*4)+1
        
    self.menuPositionsDict = d
#@nonl
#@-node:ekr.20060210133835.1:computeMenuPositions
#@-node:ekr.20060116080040.2:activate-xxx-menu commands
#@+node:ekr.20060122183914:Fix minor bugs 10
#@+node:ekr.20060210180603:Multiple pastes into find tab
#@-node:ekr.20060210180603:Multiple pastes into find tab
#@+node:ekr.20060206131908:pasteText (with empty text?) crashed when pasting into minibuffer
#@-node:ekr.20060206131908:pasteText (with empty text?) crashed when pasting into minibuffer
#@+node:ekr.20060122185244.2:Fix unindent command
unindent-region should do nothing if not in body pane, or it should work in all panes.
#@nonl
#@-node:ekr.20060122185244.2:Fix unindent command
#@+node:ekr.20060206113925:Make sure yield works with Python 2.2
@nocolor
http://sourceforge.net/forum/message.php?msg_id=3549737
By: nobody

\src\leoEditCommands.py:340: 
Warning: 'yield' will become a reserved keyword 

for python2.2 leoEditCommands.py needs
from __future__ import generators
#@nonl
#@-node:ekr.20060206113925:Make sure yield works with Python 2.2
#@+node:ekr.20060206113925.1:Fix problem with body_gmt_time setting
@nocolor
http://sourceforge.net/forum/message.php?msg_id=3549737

Warning: ignoring bool:body_gmt_time not string
There may be conflicting settings!
#@nonl
#@-node:ekr.20060206113925.1:Fix problem with body_gmt_time setting
#@+node:ekr.20060121101642:Make sure save updates the open directory
@nocolor

http://sourceforge.net/forum/message.php?msg_id=3534349
By: edcdave

Thanks for the tip. I did some further checking along this vein and found that
saving the Leo file is not sufficient - I have to exit the document and open
it again before the rst destination directory is set correctly.

While I was testing this, I encountered a problem with the delete key. But I'll
post it in another thread.

Thanks again,
Dave Harris
#@-node:ekr.20060121101642:Make sure save updates the open directory
#@+node:ekr.20050707085637:Suggestions from an emacs user 3
@nocolor
http://sourceforge.net/forum/message.php?msg_id=3237845
By: eichin

Finally, one comment from the talk that bothered me for a while and didn't click
until later - "emacs doesn't really have an outline mode".  This is true, at
face value - outline mode in fact is just some regexp and hiding kludging, powerful
in it's own way but not "deep".  However, the operations felt familiar, and
it wasn't until I went home and checked mail that I caught it -- *GNUS* is actually
surprisingly close in function set to an outliner.  Not in any immediately useful
way, but it both clarifies why I think emacs could work this way *and* possibly
clarifies why gnus users are so engaged by the interface :-)  Though that does
mean gnus might be a reasonable source of suggestions for key bindings...
#@nonl
#@+node:ekr.20060116082302.1:Use os.getenv('User") if it exists to get initial cvs name
On startup, it asked me for a unique id, "possibly your CVS username".
As a non-windows-user, that made no sense at all to me - at very least, it should
fill in os.getenv("USER") as a default, because it's right on non-windows systems,
isn't it?  (If it isn't, there's no explanation at that point that would tell
me otherwise, that's the value I used anyway...)  Just an out-of-box-experience
issue.
#@nonl
#@-node:ekr.20060116082302.1:Use os.getenv('User") if it exists to get initial cvs name
#@+node:ekr.20060116083043:Two help menus on the Mac
More mac nits: two HELP menus, one is empty; 
#@nonl
#@-node:ekr.20060116083043:Two help menus on the Mac
#@+node:ekr.20060116083043.1:Add context-menus on nodes or text
#@-node:ekr.20060116083043.1:Add context-menus on nodes or text
#@-node:ekr.20050707085637:Suggestions from an emacs user 3
#@+node:ekr.20060114055611:Fix sort-lines problems
- It should recolor the text.
- Does it not stick sometimes?
#@nonl
#@-node:ekr.20060114055611:Fix sort-lines problems
#@+node:ekr.20060124082357:Fix problem with view plugin
@nocolor

http://sourceforge.net/forum/message.php?msg_id=3538274
By: ktenney

The plugin to support @view nodes is not working
for me, when I doubleclick an @view node, the 
cursor changes to an hourglass a couple times, but
nothing happens in the body of the node.

I imported at_view.py into a node, named it
@button at_view.py, and added the following;

v = View(c)
v.icondclick2(None,None)    

This works as a button; clicking the button
when an @view node is selected updates the
node body.

Evidently the issue is with the hooking/calling
mech. not the plugin code itself.
#@nonl
#@-node:ekr.20060124082357:Fix problem with view plugin
#@-node:ekr.20060122183914:Fix minor bugs 10
#@+node:ekr.20060209053234:What's new in b2
@nocolor

Refer to 4.4b3 to do first list.

@color
#@nonl
#@+node:ekr.20060210111310:Unification of all calling sequences
@nocolor

The recent unification of the callling sequences of all commands, both legacy
and minibuffer, had the side effect of breaking some plugins. The new 'event'
arg was the culprit.

The new prefered way of calling c.openWith is:

c.openWith(data=data)

I've corrected all the affected plugins. In particular, the vim plugin works again.
#@nonl
#@-node:ekr.20060210111310:Unification of all calling sequences
#@+node:ekr.20060210105733:New debugging settings in leosettings.leo
#@-node:ekr.20060210105733:New debugging settings in leosettings.leo
#@+node:ekr.20060205170335.1:aproposFindCommands
def aproposFindCommands (self, event=None):
    
    c = self.c
    
    << define s >>

    # Remove indentation from s: a workaround of a Leo bug.
    s = g.adjustTripleString(s,c.tab_width)

    if not g.app.unitTesting:
        g.es_print(s)
#@nonl
#@+node:ekr.20060209082023.1:<< define s >>
s = '''
Important: all minibuffer search commands, with the exception of the isearch (incremental) commands, simply provide a minibuffer interface to Leo's legacy find commands.  This means that all the powerful features of Leo's legacy commands are available to the minibuffer search commands.

Note: all bindings shown are the default bindings for these commands.  You may change any of these bindings using @shortcut nodes in leoSettings.leo.

Settings

leoSettings.leo now contains several settings related to the Find tab:

- @bool show_only_find_tab_options = True

When True (recommended), the Find tab does not show the 'Find', 'Change', 'Change, Then Find', 'Find All' and 'Change All' buttons.

- @bool minibufferSearchesShowFindTab = True

When True, Leo shows the Find tab when executing most of the commands discussed below.  It's not necessary for it to be visible, but I think it provides good feedback about what search-with-present-options does.  YMMY.  When True, the sequence Control-F, Control-G is one way to show the Find Tab.

Basic find commands

- The open-find-tab command makes the Find tab visible.  The Find tab does **not** need to be visible to execute any search command discussed below.

- The hide-find-tab commands hides the Find tab, but retains all the present settings.

- The search-with-present-options command (Control-F) prompts for a search string.  Typing the <Return> key puts the search string in the Find tab and executes a search based on all the settings in the Find tab.   This command is my 'workhorse' search command.

Coming in 4.4b3: the search-with-present-options will copy the present value of the 'find' string in the Find tab to the minibuffer.  This will make Control-f <Return> equivalent to F3 (find-tab-find).

- The show-search-options command shows the present search options in the status line.  At present, this command also shows the Find tab.

Search again commands

- The find-tab-find command (F3) is the same as the search-with-present-options command, except that it uses the search string in the find-tab.  This is what I use as my default 'search again' command.

- Similarly, the find-tab-find-previous command (F2) repeats the command specified by the Find tab, but in reverse.

- The find-again command a combination of the search-with-present-options and find-tab-find command.  It is the same as the find-tab-find command if a search pattern other than '<find pattern here>' exists in the Find tab.  Otherwise, the find-again is the same as the search-with-present-options command.

Setting find options

- Several minibuffer commands toggle the checkboxes and radio buttons in the Find tab, and thus affect the operation of the search-with-present-options command. Some may want to bind these commands to keys. Others, will prefer to toggle options in a mode.


Here are the commands that toggle checkboxes: toggle-find-ignore-case-option, toggle-find-in-body-option, toggle-find-in-headline-option, toggle-find-mark-changes-option, toggle-find-mark-finds-option, toggle-find-regex-option, toggle-find-reverse-option, toggle-find-word-option, and toggle-find-wrap-around-option.

Here are the commands that set radio buttons: set-find-everywhere, set-find-node-only, and set-find-suboutline-only.

- The enter-find-options-mode (Ctrl-Shift-F) enters a mode in which you may change all checkboxes and radio buttons in the Find tab with plain keys.  As always, you can use the mode-help (Tab) command to see a list of key bindings in effect for the mode.

Search commands that set options as a side effect

The following commands set an option in the Find tab, then work exactly like the search-with-present-options command.

- The search-backward and search-forward commands set the 'Whole Word' checkbox to False.

- The word-search-backward and word-search-forward set the 'Whole Word' checkbox to True.

- The re-search-forward and re-search-backward set the 'Regexp' checkbox to True.

Find all commands

- The find-all command prints all matches in the log pane.

- The clone-find-all command replaces the previous 'Clone Find' checkbox.  It prints all matches in the log pane, and creates a node at the beginning of the outline containing clones of all nodes containing the 'find' string.  Only one clone is made of each node, regardless of how many clones the node has, or of how many matches are found in each node.

Note: the radio buttons in the Find tab (Entire Outline, Suboutline Only and Node only) control how much of the outline is affected by the find-all and clone-find-all commands.

Search and replace commands

The replace-string prompts for a search string.  Type <Return> to end the search string.  The command will then prompt for the replacement string.  Typing a second <Return> key will place both strings in the Find tab and executes a **find** command, that is, the search-with-present-options command.

So the only difference between the replace-string and search-with-present-options commands is that the replace-string command has the side effect of setting 'change' string in the Find tab.  However, this is an extremely useful side effect, because of the following commands...

- The find-tab-change command (Ctrl-=) replaces the selected text with the 'change' text in the Find tab.

- The find-tab-change-then-find (Ctrl--) replaces the selected text with the 'change' text in the Find tab, then executes the find command again.

The find-tab-find, find-tab-change and find-tab-change-then-find commands can simulate any kind of query-replace command.  **Important**: Leo presently has separate query-replace and query-replace-regex commands, but they are buggy and 'under-powered'.  Fixing these commands has low priority.

- The find-tab-change-all command changes all occurrences of the 'find' text with the 'change' text.  Important: the radio buttons in the Find tab (Entire Outline, Suboutline Only and Node only) control how much of the outline is affected by this command.

Incremental search commands

Leo's incremental search commands are completely separate from Leo's legacy search commands.  At present, incremental search commands do not cross node boundaries: they work only in the body text of single node.

Coming in Leo 4.4b3: the incremental commands will maintain a list of previous matches.  This allows for

a) support for backspace and
b) an incremental-search-again command.

Furthermore, this list makes it easy to detect the end of a wrapped incremental search.

Here is the list of incremental find commands: isearch-backward, isearch-backward-regexp, isearch-forward and
isearch-forward-regexp.'''
#@nonl
#@-node:ekr.20060209082023.1:<< define s >>
#@+node:ekr.20060205170552:test_apropos_find_commands
def test_apropos_find_commands (self):

    c.helpCommands.aproposFindCommands()
#@nonl
#@-node:ekr.20060205170552:test_apropos_find_commands
#@-node:ekr.20060205170335.1:aproposFindCommands
#@+node:ekr.20060206104722:Modes may inherit bindings
All key bindings specified with !mini pane specifier apply to all modes.
#@nonl
#@-node:ekr.20060206104722:Modes may inherit bindings
#@+node:ekr.20060209140942:New commands not in legacy Leo
Mouseless Leo has arrived.  Cvs now contains code to support the following commands, with the default bindings as shown:

#@+node:ekr.20060210131047:expand/contract/hide/fully-expand-pane
contract-log-pane       = Alt-Ctrl-RtArrow 
expand-body-pane        = Alt-Ctrl-UpArrow  
expand-log-pane         = Alt-Ctrl-LtArrow
expand-outline-pane     = Alt-Ctrl-DnArrow

contract-outline-pane   = None
contract-body-pane      = None

contract-pane           = Alt-Ctrl--
expand-pane             = Alt-Ctrl-+

hide-body-pane          = None
hide-log-pane           = None
hide-pane               = Alt-Ctrl--
hide-outline-pane       = None

fully-expand-body-pane      = None
fully-expand-log-pane       = None
fully-expand-pane           = Alt-Ctrl-+
fully-expand-outline-pane   = None

Notes:

- The expand commands increase or decrease the ratio between panes by 0.1.  The hide commands set the ratio to 0.0 or 1.0 as appropriate.

- The expand-pane and contract-pane commands expand or contract whatever pane has focus.

- There is a small asymmetry: expanding the outline pane contracts the *body* pane, not the log pane.  This asymmetry is a bit more noticable in the expand-pane and contract-pane commands.

- There are no bindings for the contract-body-pane and contract-outline-pane commands because these are equivalent to expand-outline_pane and expand-body-pane commands.

- For the 'split horizontally' orientation, it would be natural to change the bindings as follows:

contract-log-pane       = Alt-Ctrl-DnArrow
expand-body-pane        = Alt-Ctrl-LtArrow 
expand-log-pane         = Alt-Ctrl-UpArrow 
expand-outline-pane     = Alt-Ctrl-RtArrow
#@-node:ekr.20060210131047:expand/contract/hide/fully-expand-pane
#@+node:ekr.20060210131120:activate-xxx-menu (todo)
#@-node:ekr.20060210131120:activate-xxx-menu (todo)
#@+node:ekr.20060210131120.1:minibuffer find commands
#@-node:ekr.20060210131120.1:minibuffer find commands
#@-node:ekr.20060209140942:New commands not in legacy Leo
#@+node:ekr.20060209201859:How to design and use modes
#@-node:ekr.20060209201859:How to design and use modes
#@-node:ekr.20060209053234:What's new in b2
#@+node:ekr.20060210201454:Distribution
#@+node:ekr.20060211095145:What's new in Leo 4.4
#@-node:ekr.20060211095145:What's new in Leo 4.4
#@+node:ekr.20060210123709:Fix Alt-key issue on Linux
#@-node:ekr.20060210123709:Fix Alt-key issue on Linux
#@+node:ekr.20060210123709.1:Test on MacOS
#@-node:ekr.20060210123709.1:Test on MacOS
#@-node:ekr.20060210201454:Distribution
#@-node:ekr.20060206103355:To do 4.4b2
#@-all
#@nonl
#@-node:ekr.20040117181936:@thin ../doc/leoToDo.txt
#@-leo
