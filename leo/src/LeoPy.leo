<?xml version="1.0" encoding="UTF-8"?>
<leo_file>
<leo_header file_format="2" tnodes="0" max_tnode_index="4808" clone_windows="0"/>
<globals body_outline_ratio="0.498289623717">
	<global_window_position top="11" left="295" height="877" width="939"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences>
</preferences>
<find_panel_settings>
	<find_string></find_string>
	<change_string></change_string>
</find_panel_settings>
<vnodes>
<v t="EKR.20040430162943" a="ETV"><vh>Notes...</vh>
<v t="ekr.20031218072017"><vh>@file-thin ../doc/leoDiary.txt</vh></v>
<v t="ekr.20031218072017.329"><vh>@file-thin ../doc/leoNotes.txt</vh></v>
<v t="ekr.20040117181936"><vh>@file-thin ../doc/leoToDo.txt</vh></v>
<v t="EKR.20040429143933"><vh>@file-thin leoProjects.txt</vh></v>
</v>
<v t="ekr.20031218072017.2406" a="E"><vh>Code</vh>
<v t="EKR.20040502192606"><vh> Distribution &amp; version stuff</vh>
<v t="ekr.20031218072017.2581"><vh> Version stuff (update this for every release)</vh>
<v t="ekr.20031218072017.2582"><vh> version &amp; signon stuff</vh></v>
<v t="ekr.20031218072017.2571"><vh>&lt;&lt; setup info for setup.py &gt;&gt; UPDATE BY HAND (no spaces)</vh></v>
<v t="EKR.20040502190025"><vh>Update PKG-INFO.TXT and README.TXT in LeoDocs.leo</vh></v>
</v>
<v t="EKR.20040502190716"><vh>@file-thin ../dist/leo.nsi</vh></v>
<v t="EKR.20040502192936"><vh>Distribution scripts</vh>
<v t="ekr.20031218072017.2567"><vh>@file-thin ../preSetup.py</vh></v>
<v t="EKR.20040502193420"><vh>@file-thin ../setup.py</vh></v>
<v t="ekr.20031218072017.2576"><vh>@file-thin ../postSetup.py</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2415"><vh> Scripts</vh>
<v t="ekr.20040327103735.2"><vh>Script Tools (leoGlobals.py)</vh>
<v t="ekr.20031218072017.2418"><vh>g.initScriptFind (set up dialog)</vh></v>
<v t="ekr.20040321065415"><vh>g.findNodeInTree, findNodeAnywhere, findTopLevelNode</vh></v>
</v>
<v t="EKR.20040502195524"><vh>@file-thin ../scripts/leoScripts.txt</vh></v>
<v t="EKR.20040502195118"><vh>@file-thin ../scripts/leoFindScript.py</vh></v>
<v t="EKR.20040502194930"><vh>@file-thin ../scripts/tangle_done.py</vh></v>
<v t="ekr.20031218072017.2537"><vh>@file-thin ../scripts/untangle_done.py</vh></v>
<v t="ekr.20031218072017.2578"><vh>Linux scripts</vh>
<v t="ekr.20031218072017.2579"><vh>@file-thin ../install</vh></v>
<v t="ekr.20031218072017.2580"><vh>@file-thin ../uninstall</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2604"><vh>Core classes...</vh>
<v t="ekr.20031218072017.2605"><vh>@file-thin leo.py </vh></v>
<v t="ekr.20031218072017.2608"><vh>@file-thin leoApp.py</vh></v>
<v t="ekr.20031218072017.2620"><vh>@file-thin leoAtFile.py </vh></v>
<v t="ekr.20031218072017.2794"><vh>@file-thin leoColor.py</vh></v>
<v t="ekr.20031218072017.2810"><vh>@file-thin leoCommands.py</vh></v>
<v t="ekr.20031218072017.3001"><vh>@file-thin leoConfig.py</vh></v>
<v t="ekr.20031218072017.3018"><vh>@file-thin leoFileCommands.py</vh></v>
<v t="ekr.20031218072017.3052"><vh>@file-thin leoFind.py</vh></v>
<v t="ekr.20031218072017.3093"><vh>@file-thin leoGlobals.py</vh></v>
<v t="ekr.20031218072017.3206"><vh>@file-thin leoImport.py</vh></v>
<v t="ekr.20031218072017.3749"><vh>@file-thin leoMenu.py</vh></v>
<v t="ekr.20031218072017.3320"><vh>@file-thin leoNodes.py</vh></v>
<v t="ekr.20031218072017.3439"><vh>@file-thin leoPlugins.py</vh></v>
<v t="ekr.20031218072017.3446"><vh>@file-thin leoTangle.py</vh></v>
<v t="ekr.20031218072017.3603"><vh>@file-thin leoUndo.py</vh></v>
</v>
<v t="ekr.20031218072017.3625"><vh>Gui Base classes</vh>
<v t="ekr.20031218072017.3626"><vh>@file-thin leoColorPanel.py</vh></v>
<v t="ekr.20031218072017.3630"><vh>@file-thin leoCompare.py</vh></v>
<v t="ekr.20031218072017.3652"><vh>@file-thin leoFontPanel.py</vh></v>
<v t="ekr.20031218072017.3655"><vh>@file-thin leoFrame.py</vh></v>
<v t="ekr.20031218072017.3719"><vh>@file-thin leoGui.py</vh></v>
<v t="ekr.20031218072017.3748"><vh>@file-thin leoKeys.py</vh></v>
<v t="ekr.20031218072017.3812"><vh>@file-thin leoPrefs.py</vh></v>
</v>
<v t="ekr.20031218072017.3821"><vh>Gui Tkinter classes</vh>
<v t="ekr.20031218072017.3822"><vh>@file-thin leoTkinterColorPanels.py</vh></v>
<v t="ekr.20031218072017.3838"><vh>@file-thin leoTkinterComparePanel.py</vh></v>
<v t="ekr.20031218072017.3858"><vh>@file-thin leoTkinterDialog.py</vh></v>
<v t="ekr.20031218072017.3897"><vh>@file-thin leoTkinterFind.py</vh></v>
<v t="ekr.20031218072017.3909"><vh>@file-thin leoTkinterFontPanel.py</vh></v>
<v t="ekr.20031218072017.3939"><vh>@file-thin leoTkinterFrame.py</vh></v>
<v t="ekr.20031218072017.4047"><vh>@file-thin leoTkinterGui.py</vh></v>
<v t="ekr.20031218072017.4099"><vh>@file-thin leoTkinterKeys.py</vh></v>
<v t="ekr.20031218072017.4100"><vh>@file-thin leoTkinterMenu.py</vh></v>
<v t="ekr.20031218072017.4122"><vh>@file-thin leoTkinterPrefs.py</vh></v>
<v t="ekr.20031218072017.4138"><vh>@file-thin leoTkinterTree.py</vh></v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="EKR.20040430162943"></t>
<t tx="EKR.20040502190025"></t>
<t tx="EKR.20040502192606"></t>
<t tx="EKR.20040502192936"># See test.leo for how to invoke these scripts.</t>
<t tx="ekr.20031218072017.2406">@language python
@pagewidth 80

@ This section contains all the source code of leo.py.

Leo's code uses the following conventions throughout:

c:  a commander
ch: a character
d:  a dialog or a dict.
g:  the leoGlobal module.
i, j, k: indices into a string
lst: a list (Do _not_ use list, it is a Python global!)
p:  a position.
s:  a string
t:  a tnode or a text widget.
u:  an undoer
v:  a vnode

See the child of this node called "Overview of Code" for more documentation.</t>
<t tx="ekr.20031218072017.2415"></t>
<t tx="ekr.20031218072017.2418">def initScriptFind(findHeadline,changeHeadline=None,firstNode=None,
	script_search=true,script_change=true):
	
	import leoTest
	import leoGlobals as g
	from leoGlobals import true,false
	
	# Find the scripts.
	c = g.top() ; p = c.currentPosition()
	u = leoTest.testUtils()
	find_p = u.findNodeInTree(p,findHeadline)
	if find_p:
		find_text = find_p.bodyString()
	else:
		g.es("no Find script node",color="red")
		return
	if changeHeadline:
		change_p = u.findNodeInTree(p,changeHeadline)
	else:
		change_p = None
	if change_p:
		change_text = change_p.bodyString()
	else:
		change_text = ""
	# print find_p,change_p
	
	# Initialize the find panel.
	c.script_search_flag = script_search
	c.script_change_flag = script_change and change_text
	if script_search:
		c.find_text = find_text.strip() + "\n"
	else:
		c.find_text = find_text
	if script_change:
		c.change_text = change_text.strip() + "\n"
	else:
		c.change_text = change_text
	g.app.findFrame.init(c)
	c.findPanel()</t>
<t tx="ekr.20031218072017.2571">name="leo",
version="4.2-a1",
author="Edward K. Ream",
author_email="edream@tds.net",
url="http://personalpages.tds.net/~edream/front.html",
py_modules=modules, # leo*.py also included in manifest
description = "Leo: Literate Editor with Outlines",
licence="Python", # [sic], not license
platforms=["Windows, Linux, Macintosh"],
long_description =
"""Leo is an outline-oriented editor written in 100% pure Python.
Leo works on any platform that supports Python 2.2 or above and the Tk toolkit.
This version of Leo was developed with Python 2.3.3 and Tk 8.4.3.

Download Python from http://python.org/
Download tcl/Tk from http://tcl.activestate.com/software/tcltk/

Leo features a multi-window outlining editor with powerful outline commands,
support for literate programming features, syntax colorizing for many common
languages, unlimited Undo/Redo, an integrated Python shell(IDLE) window,
and many user options including user-definable colors and fonts and user-
definable shortcuts for all menu commands.

Leo a unique program editor, outline editor, literate programming tool,
data manager and project manager. Cloned outlines are a key enabling feature
that make possible multiple views of a project within a single Leo outline.
"""</t>
<t tx="ekr.20031218072017.2578">@color
@lineending nl
@language shell</t>
<t tx="ekr.20031218072017.2581">@ignore</t>
<t tx="ekr.20031218072017.2582">def getBuildNumber(self):
	c = self
	return c.ver[10:-1] # Strip off "(dollar)Revision" and the trailing "$"

def getSignOnLine (self):
	c = self
	return "Leo 4.2 alpha 1, build %s, April 14, 2004" % c.getBuildNumber()
	
def initVersion (self):
	c = self
	c.ver = "$Revision$" # CVS will update this.
	
def signOnWithVersion (self):

	c = self
	color = g.app.config.getWindowPref("log_error_color")
	signon = c.getSignOnLine()
	n1,n2,n3,junk,junk=sys.version_info
	tkLevel = c.frame.top.getvar("tk_patchLevel")
	
	g.es("Leo Log Window...",color=color)
	g.es(signon)
	g.es("Python %d.%d.%d, Tk %s, %s" % (n1,n2,n3,tkLevel,sys.platform))
	g.enl()</t>
<t tx="ekr.20031218072017.2604"></t>
<t tx="ekr.20031218072017.3625"></t>
<t tx="ekr.20031218072017.3821"></t>
<t tx="ekr.20040321065415">def findNodeInTree(p,headline):

	"""Search for a node in v's tree matching the given headline."""
	
	c = p.c
	for p in p.subtree_iter():
		if p.headString().strip() == headline.strip():
			return p.copy()
	return c.nullPosition()

def findNodeAnywhere(headline):
	
	c = g.top()
	for p in c.allNodes_iter():
		if p.headString().strip() == headline.strip():
			return p.copy()
	return c.nullPosition()
	
def findTopLevelNode(headline):
	
	c = g.top()
	for p in c.rootPosition().self_and_siblings_iter():
		if p.headString().strip() == headline.strip():
			return p.copy()
	return c.nullPosition()</t>
<t tx="ekr.20040327103735.2"></t>
</tnodes>
</leo_file>
