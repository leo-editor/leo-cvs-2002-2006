<?xml version="1.0" encoding="UTF-8"?>
<leo_file>
<leo_header file_format="2" tnodes="0" max_tnode_index="4806" clone_windows="0"/>
<globals body_outline_ratio="0.498289623717">
	<global_window_position top="11" left="295" height="877" width="939"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences>
</preferences>
<find_panel_settings>
	<find_string></find_string>
	<change_string></change_string>
</find_panel_settings>
<vnodes>
<v t="EKR.20040430162943"><vh>Notes...</vh>
<v t="ekr.20031218072017"><vh>@file-thin ../doc/leoDiary.txt</vh></v>
<v t="ekr.20031218072017.329"><vh>@file-thin ../doc/leoNotes.txt</vh></v>
<v t="ekr.20040117181936"><vh>@file-thin ../doc/leoToDo.txt</vh></v>
<v t="EKR.20040429143933"><vh>@file-thin leoProjects.txt</vh></v>
</v>
<v t="ekr.20031218072017.2406" a="TV"><vh>Code</vh>
<v t="EKR.20040502192606"><vh> Distribution &amp; version stuff</vh>
<v t="ekr.20031218072017.2581"><vh> Version stuff (update this for every release)</vh>
<v t="ekr.20031218072017.2582"><vh> version &amp; signon stuff</vh></v>
<v t="ekr.20031218072017.2571"><vh>&lt;&lt; setup info for setup.py &gt;&gt; UPDATE BY HAND (no spaces)</vh></v>
<v t="EKR.20040502190025"><vh>Update PKG-INFO.TXT and README.TXT in LeoDocs.leo</vh></v>
</v>
<v t="EKR.20040502190716"><vh>@file-thin ../dist/leo.nsi</vh></v>
<v t="EKR.20040502192936"><vh>Distribution scripts</vh>
<v t="ekr.20031218072017.2567"><vh>@file-thin ../preSetup.py</vh></v>
<v t="EKR.20040502193420"><vh>@file-thin ../setup.py</vh></v>
<v t="ekr.20031218072017.2576"><vh>@file-thin ../postSetup.py</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2415"><vh> Scripts</vh>
<v t="ekr.20040327103735.2"><vh>Script Tools (leoGlobals.py)</vh>
<v t="ekr.20031218072017.2418"><vh>g.initScriptFind (set up dialog)</vh></v>
<v t="ekr.20040321065415"><vh>g.findNodeInTree, findNodeAnywhere, findTopLevelNode</vh></v>
</v>
<v t="EKR.20040502195524"><vh>@file-thin ../scripts/leoScripts.txt</vh></v>
<v t="EKR.20040502195118"><vh>@file-thin ../scripts/leoFindScript.py</vh></v>
<v t="EKR.20040502194930"><vh>@file-thin ../scripts/tangle_done.py</vh></v>
<v t="ekr.20031218072017.2537"><vh>@file-thin ../scripts/untangle_done.py</vh></v>
<v t="ekr.20031218072017.2578"><vh>Linux scripts</vh>
<v t="ekr.20031218072017.2579"><vh>@file-thin ../install</vh></v>
<v t="ekr.20031218072017.2580"><vh>@file-thin ../uninstall</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2604"><vh>Core classes...</vh>
<v t="ekr.20031218072017.2605"><vh>@file-thin leo.py </vh></v>
<v t="ekr.20031218072017.2608"><vh>@file-thin leoApp.py</vh></v>
<v t="ekr.20031218072017.2620"><vh>@file-thin leoAtFile.py </vh></v>
<v t="ekr.20031218072017.2794"><vh>@file-thin leoColor.py</vh></v>
<v t="ekr.20031218072017.2810"><vh>@file-thin leoCommands.py</vh></v>
<v t="ekr.20031218072017.3001"><vh>@file-thin leoConfig.py</vh></v>
<v t="ekr.20031218072017.3018"><vh>@file-thin leoFileCommands.py</vh></v>
<v t="ekr.20031218072017.3052"><vh>@file-thin leoFind.py</vh></v>
<v t="ekr.20031218072017.3093"><vh>@file-thin leoGlobals.py</vh></v>
<v t="ekr.20031218072017.3206"><vh>@file-thin leoImport.py</vh></v>
<v t="ekr.20031218072017.3749"><vh>@file-thin leoMenu.py</vh></v>
<v t="ekr.20031218072017.3320"><vh>@file-thin leoNodes.py</vh></v>
<v t="ekr.20031218072017.3439"><vh>@file-thin leoPlugins.py</vh></v>
<v t="ekr.20031218072017.3446"><vh>@file-thin leoTangle.py</vh></v>
<v t="ekr.20031218072017.3603"><vh>@file-thin leoUndo.py</vh></v>
</v>
<v t="ekr.20031218072017.3625"><vh>Gui Base classes</vh>
<v t="ekr.20031218072017.3626"><vh>@file-thin leoColorPanel.py</vh></v>
<v t="ekr.20031218072017.3630"><vh>@file-thin leoCompare.py</vh></v>
<v t="ekr.20031218072017.3652"><vh>@file-thin leoFontPanel.py</vh></v>
<v t="ekr.20031218072017.3655"><vh>@file-thin leoFrame.py</vh></v>
<v t="ekr.20031218072017.3719"><vh>@file-thin leoGui.py</vh></v>
<v t="ekr.20031218072017.3748"><vh>@file-thin leoKeys.py</vh></v>
<v t="ekr.20031218072017.3812"><vh>@file-thin leoPrefs.py</vh></v>
</v>
<v t="ekr.20031218072017.3821"><vh>Gui Tkinter classes</vh>
<v t="ekr.20031218072017.3822"><vh>@file-thin leoTkinterColorPanels.py</vh></v>
<v t="ekr.20031218072017.3838"><vh>@file-thin leoTkinterComparePanel.py</vh></v>
<v t="ekr.20031218072017.3858"><vh>@file-thin leoTkinterDialog.py</vh></v>
<v t="ekr.20031218072017.3897"><vh>@file-thin leoTkinterFind.py</vh></v>
<v t="ekr.20031218072017.3909"><vh>@file-thin leoTkinterFontPanel.py</vh></v>
<v t="ekr.20031218072017.3939"><vh>@file-thin leoTkinterFrame.py</vh></v>
<v t="ekr.20031218072017.4047"><vh>@file-thin leoTkinterGui.py</vh></v>
<v t="ekr.20031218072017.4099"><vh>@file-thin leoTkinterKeys.py</vh></v>
<v t="ekr.20031218072017.4100"><vh>@file-thin leoTkinterMenu.py</vh></v>
<v t="ekr.20031218072017.4122"><vh>@file-thin leoTkinterPrefs.py</vh></v>
<v t="ekr.20031218072017.4138"><vh>@file-thin leoTkinterTree.py</vh></v>
</v>
</v>
<v t="EKR.20040503064147.2"><vh>Add -thin field to @+leo sentinel</vh></v>
</vnodes>
<tnodes>
<t tx="EKR.20040429143933">@ This part of the tree shows views of the outline related to specific projects or tasks.  I put such headlines in parentheses, and that is just my convention.

I create a new view by cloning headlines that relate to its task, and moving the cloned headlines under the task headline.  This greatly increases my focus.  Any changes made in a task view to clone headlines affect the other clones scattered throughout the outline.  In particular, all @file nodes containing changed clones become marked as dirty, so they will be written when the entire outline is saved.
@c

@language python
@all</t>
<t tx="EKR.20040430162943"></t>
<t tx="EKR.20040502190025"></t>
<t tx="EKR.20040502190716">@comment ;

; NSIS Script for Leo
; Version 1.0 of this script by Joe Orr, donated to public domain.
;
; How to create an installer for Leo using this script:
;	1. Install NSIS (from http://www.nullsoft.com)
;	2. Put the leo.nsi file in the directory containing the Leo program files.
;	3. Right-click on the leo.nsi file and choose "Compile"
;
; NOTE: this .NSI script is designed for NSIS v1.8+

&lt;&lt; installer settings &gt;&gt;
&lt;&lt; required files section &gt;&gt;
&lt;&lt; optional files section &gt;&gt;
&lt;&lt; file association &gt;&gt;
&lt;&lt; post install section &gt;&gt;
&lt;&lt; uninstall section &gt;&gt;

; eof</t>
<t tx="EKR.20040502192606"></t>
<t tx="EKR.20040502192936"># See test.leo for how to invoke these scripts.</t>
<t tx="EKR.20040502193420">@first #! /usr/bin/env python

import leoGlobals as g
from leoGlobals import true,false

from distutils.core import setup
import distutils,os,sys

@others

if 1: # Use this only for final distributions.
	if sys.argv[1] == "sdist":
		setDefaultParams()

# modules = generateModules()
modules = []

setup (
	&lt;&lt; setup info for setup.py &gt;&gt;
)

if sys.argv[1] == "sdist":
	print "setup complete"</t>
<t tx="EKR.20040502194930">@first #! /usr/bin/env python

# Example tangle_done.py file.
# Leo catches all exceptions thrown here; there is no need for try:except blocks.

@others</t>
<t tx="EKR.20040502195118"># This file contains functions for non-interactive searching.
# You might find these useful while running other scripts.

import leo, string, re

@others</t>
<t tx="EKR.20040502195524">@others</t>
<t tx="EKR.20040503064147.2"></t>
<t tx="ekr.20031218072017">@nocolor

Older diary entries are in LeoDocs.leo.

@others</t>
<t tx="ekr.20031218072017.329">@nocolor

This contains my notes for the Leo project.

@all</t>
<t tx="ekr.20031218072017.2406">@language python
@pagewidth 80

@ This section contains all the source code of leo.py.

Leo's code uses the following conventions throughout:

c:  a commander
ch: a character
d:  a dialog or a dict.
g:  the leoGlobal module.
i, j, k: indices into a string
lst: a list (Do _not_ use list, it is a Python global!)
p:  a position.
s:  a string
t:  a tnode or a text widget.
u:  an undoer
v:  a vnode

See the child of this node called "Overview of Code" for more documentation.</t>
<t tx="ekr.20031218072017.2415"></t>
<t tx="ekr.20031218072017.2418">def initScriptFind(findHeadline,changeHeadline=None,firstNode=None,
	script_search=true,script_change=true):
	
	import leoTest
	import leoGlobals as g
	from leoGlobals import true,false
	
	# Find the scripts.
	c = g.top() ; p = c.currentPosition()
	u = leoTest.testUtils()
	find_p = u.findNodeInTree(p,findHeadline)
	if find_p:
		find_text = find_p.bodyString()
	else:
		g.es("no Find script node",color="red")
		return
	if changeHeadline:
		change_p = u.findNodeInTree(p,changeHeadline)
	else:
		change_p = None
	if change_p:
		change_text = change_p.bodyString()
	else:
		change_text = ""
	# print find_p,change_p
	
	# Initialize the find panel.
	c.script_search_flag = script_search
	c.script_change_flag = script_change and change_text
	if script_search:
		c.find_text = find_text.strip() + "\n"
	else:
		c.find_text = find_text
	if script_change:
		c.change_text = change_text.strip() + "\n"
	else:
		c.change_text = change_text
	g.app.findFrame.init(c)
	c.findPanel()</t>
<t tx="ekr.20031218072017.2537">@first #! /usr/bin/env python

# Example untangle_done script

def run(root_list):

	print "untangle_done roots:", root_list</t>
<t tx="ekr.20031218072017.2567">@first #! /usr/bin/env python

""" Preprocess before executing setup.py. """

import leoGlobals as g
from leoGlobals import true,false

@others

def setup():
	saveAllLeoFiles()
	tangleLeoConfigDotLeo()
	print "preSetup complete"</t>
<t tx="ekr.20031218072017.2571">name="leo",
version="4.2-a1",
author="Edward K. Ream",
author_email="edream@tds.net",
url="http://personalpages.tds.net/~edream/front.html",
py_modules=modules, # leo*.py also included in manifest
description = "Leo: Literate Editor with Outlines",
licence="Python", # [sic], not license
platforms=["Windows, Linux, Macintosh"],
long_description =
"""Leo is an outline-oriented editor written in 100% pure Python.
Leo works on any platform that supports Python 2.2 or above and the Tk toolkit.
This version of Leo was developed with Python 2.3.3 and Tk 8.4.3.

Download Python from http://python.org/
Download tcl/Tk from http://tcl.activestate.com/software/tcltk/

Leo features a multi-window outlining editor with powerful outline commands,
support for literate programming features, syntax colorizing for many common
languages, unlimited Undo/Redo, an integrated Python shell(IDLE) window,
and many user options including user-definable colors and fonts and user-
definable shortcuts for all menu commands.

Leo a unique program editor, outline editor, literate programming tool,
data manager and project manager. Cloned outlines are a key enabling feature
that make possible multiple views of a project within a single Leo outline.
"""</t>
<t tx="ekr.20031218072017.2576">@first #! /usr/bin/env python

""" Postprocess after executing setup.py """

import leoGlobals as g
from leoGlobals import true,false

@others

def setup():
	if 1: # Use this only for final distributions.
		unsetDefaultParams()
	print "postSetup complete"</t>
<t tx="ekr.20031218072017.2578">@color
@lineending nl
@language shell</t>
<t tx="ekr.20031218072017.2579">#!/bin/sh

############################################
# This is a small install script to install
# leo on GNU/Linux. 
# Leo is Open Software and is distributed under the terms 
# of the Python License.  Please see:
# docs/LICENSE.TXT for details.
#
# This install script created by Frank Merenda 
# (fmerenda@yahoo.com)
#
# verison 1.0 - 06/30/2003
# - initial creation 
#
# 
# - minor changes to try and use a "prefix" directory
# - step 5 copies the src and config directories as 
# directories rather that file (this seems to prevent
# the need to remove ".." from the python scripts on RH9
# anyway.)
# - IMPORTANT NOTE: I did not understand step 6 so its
# commented out. Someone who knows leo better than I do
# should look at this.
# - Note: I'm a leo newbie so I don't know if this fixes plugin
# problems since I don't think I use them.
# David Holden (dh@iucr.org)
#   
#
############################################


################################
# Variables for usage in this script.
################################
LEO_PREFIX="/usr/local"
LEO_RUN_SCRIPT_SOURCE='./scripts/install/leo-script.txt'
LEO_RUN_SCRIPT_OUTPUT="${LEO_PREFIX}/bin/leo"
LEO_LIB_DIR="${LEO_PREFIX}/lib/leo"


echo ""
echo "Prefix directory set to \"$LEO_PREFIX\""

################################
# Step 1
# Verify the current user is root
################################
CURRENT_USER=$(whoami)

if [ "$CURRENT_USER" = "root" ] ; then
	echo ""
    echo Verified user is root
else
	echo ""
    echo You must be root to run this program
    exit 0;
fi    
   
################################
# Step 2
# Make the directory structure
################################
echo ""
echo Making directory structure $LEO_LIB_DIR

RESULTS=`mkdir -p $LEO_LIB_DIR 2&gt;&amp;1`
if [ $? -ne 0 ]; then
    echo Failure making directory $LEO_LIB_DIR!
    exit 0;
fi
   
################################
# Step 3
# Copy the files
################################
echo ""
echo Copying files.....

RESULTS=`cp -rp * $LEO_LIB_DIR/ 2&gt;&amp;1`
if [ $? -ne 0 ]; then
    echo Failure copying files to $LEO_LIB_DIR
    exit 0;
fi

###############################
# Step 4
# Clean up the duplicate files so it's not
# confusing to the user. These files
# Are copied directly to the main 
# directory. Assume you have permissions
# since you checked above.
###############################
rm -rf $LEO_LIB_DIR/src
rm -rf $LEO_LIB_DIR/config
   
###############################
# Step 5
# Don't make a liar out of me in step 4.
# Copy the files. that you just deleted....   
###############################
cp -rp src $LEO_LIB_DIR/.
cp -rp config $LEO_LIB_DIR/.

###############################
# Step 6
# Add in symbolic links to point to 
# leoConfig and LeoDocs.   
###############################
#mkdir -p /usr/lib/config 
#chmod 777 /usr/lib/config
#ln -sf /$LEO_LIB_DIR/leoConfig.leo /usr/lib/config/leoConfig.leo
#chmod 666 /$LEO_LIB_DIR/leoConfig.leo  
#
#ln -sf /$LEO_LIB_DIR/leoConfig.txt /usr/lib/config/leoConfig.txt
#chmod 666 /$LEO_LIB_DIR/leoConfig.txt  
#
#mkdir -p /usr/lib/doc
#ln -sf $LEO_LIB_DIR/doc/LeoDocs.leo /usr/lib/doc/LeoDocs.leo
#chmod 666 $LEO_LIB_DIR/doc/LeoDocs.leo 
   
################################
# Step 7
# Create the startup script
################################
echo ""
echo Creating startup script located at: $LEO_RUN_SCRIPT_OUTPUT

echo "python ${LEO_PREFIX}/lib/leo/src/leo.py \$1" &gt; $LEO_RUN_SCRIPT_OUTPUT

RESULTS=`chmod 755 $LEO_RUN_SCRIPT_OUTPUT`   
   
echo ""
echo "***** Leo installed successfully - "
echo "      make sure ${LEO_PREFIX}/bin is in your path then"
echo "      type 'leo filename.leo' to use it."   
echo "                                                 *****"
echo ""
exit 0;</t>
<t tx="ekr.20031218072017.2580">#!/bin/sh

############################################
# This is a small install script to install
# leo on GNU/Linux. 
# Leo is Open Software and is distributed under the terms 
# of the Python License.  Please see:
# docs/LICENSE.TXT for details.
#
# This install script created by Frank Merenda 
# (fmerenda@yahoo.com)
#
# verison 1.0 - 06/30/2003
# - initial creation 
#
# 
# - minor changes to try and use a "prefix" directory
# - step 5 copies the src and config directories as 
# directories rather that file (this seems to prevent
# the need to remove ".." from the python scripts on RH9
# anyway.)
# - IMPORTANT NOTE: I did not understand step 6 so its
# commented out. Someone who knows leo better than I do
# should look at this.
# - Note: I'm a leo newbie so I don't know if this fixes plugin
# problems since I don't think I use them.
# David Holden (dh@iucr.org)
#   
#
############################################


################################
# Variables for usage in this script.
################################
LEO_PREFIX="/usr/local"
LEO_RUN_SCRIPT_SOURCE='./scripts/install/leo-script.txt'
LEO_RUN_SCRIPT_OUTPUT="${LEO_PREFIX}/bin/leo"
LEO_LIB_DIR="${LEO_PREFIX}/lib/leo"

echo ""
echo "Prefix directory set to \"$LEO_PREFIX\""

################################
# Step 1
# show commands to remove leo
################################
echo ""
echo "To uninstall leo check the following \"rm\" commands
if they look ok execute them as root."

echo "
rm -fr $LEO_LIB_DIR
rm -f  $LEO_RUN_SCRIPT_OUTPUT

"</t>
<t tx="ekr.20031218072017.2581">@ignore</t>
<t tx="ekr.20031218072017.2582">def getBuildNumber(self):
	c = self
	return c.ver[10:-1] # Strip off "(dollar)Revision" and the trailing "$"

def getSignOnLine (self):
	c = self
	return "Leo 4.2 alpha 1, build %s, April 14, 2004" % c.getBuildNumber()
	
def initVersion (self):
	c = self
	c.ver = "$Revision$" # CVS will update this.
	
def signOnWithVersion (self):

	c = self
	color = g.app.config.getWindowPref("log_error_color")
	signon = c.getSignOnLine()
	n1,n2,n3,junk,junk=sys.version_info
	tkLevel = c.frame.top.getvar("tk_patchLevel")
	
	g.es("Leo Log Window...",color=color)
	g.es(signon)
	g.es("Python %d.%d.%d, Tk %s, %s" % (n1,n2,n3,tkLevel,sys.platform))
	g.enl()</t>
<t tx="ekr.20031218072017.2604"></t>
<t tx="ekr.20031218072017.2605">@first #! /usr/bin/env python

"""Entry point for Leo in Python."""

@language python

&lt;&lt; Import pychecker &gt;&gt;

# Warning: do not import any Leo modules here!
# Doing so would make g.app invalid in the imported files.

import os,string,sys

@others

if __name__ == "__main__":
	if len(sys.argv) &gt; 1:
		if sys.platform=="win32": # Windows
			fileName = string.join(sys.argv[1:],' ')
		else:
			fileName = sys.argv[1]
		run(fileName)
	else:
		run()



</t>
<t tx="ekr.20031218072017.2608">@first # -*- coding: utf-8 -*-

@language python

import leoGlobals as g
from leoGlobals import true,false

import os,sys

class LeoApp:

	"""A class representing the Leo application itself.
	
	Ivars of this class are Leo's global variables."""
	
	@others
</t>
<t tx="ekr.20031218072017.2620">"""Classes to read and write @file nodes."""

@language python

import leoGlobals as g
from leoGlobals import true,false

if g.app.config.use_psyco:
	# print "enabled psyco classes",__file__
	try: from psyco.classes import *
	except ImportError: pass

import leoColor,leoNodes
import filecmp,os,string,time

&lt;&lt; global atFile constants &gt;&gt;

class baseAtFile:
	"""The base class for the top-level atFile subcommander."""
	&lt;&lt; class baseAtFile methods &gt;&gt;
	
class atFile (baseAtFile):
	pass # May be overridden in plugins.
	
class baseOldDerivedFile:
	"""The base class to read and write 3.x derived files."""
	&lt;&lt; class baseOldDerivedFile methods &gt;&gt;
	
class oldDerivedFile(baseOldDerivedFile):
	pass # May be overridden in plugins.
	
class baseNewDerivedFile(oldDerivedFile):
	"""The base class to read and write 4.x derived files."""
	&lt;&lt; class baseNewDerivedFile methods &gt;&gt;

class newDerivedFile(baseNewDerivedFile):
	pass # May be overridden in plugins.
</t>
<t tx="ekr.20031218072017.2794">"""Syntax coloring routines for Leo."""

@language python

import leoGlobals as g
from leoGlobals import true,false

import re
import string

# php_re = re.compile("&lt;?(\s|=|[pP][hH][pP])")
php_re = re.compile("&lt;?(\s[pP][hH][pP])")

&lt;&lt; define leo keywords &gt;&gt;
&lt;&lt; define colorizer constants &gt;&gt;

@others</t>
<t tx="ekr.20031218072017.2810">@language python

import leoGlobals as g
from leoGlobals import true,false

if g.app.config.use_psyco:
	# print "enabled psyco classes",__file__
	try: from psyco.classes import *
	except ImportError: pass

import leoAtFile,leoFileCommands,leoImport,leoNodes,leoTangle,leoUndo
import os
import string
import sys
import tempfile

class baseCommands:
	"""The base class for Leo's main commander."""
	@others

class Commands (baseCommands):
	"""A class that implements most of Leo's commands."""
	pass</t>
<t tx="ekr.20031218072017.3001">@language python

import leoGlobals as g
from leoGlobals import true,false

import ConfigParser,exceptions,os,string,sys

class baseConfig:
	"""The base class for Leo's configuration handler."""
	&lt;&lt; define defaultsDict &gt;&gt;
	@others
	
class config (baseConfig):
	"""A class to manage configuration settings."""
	pass</t>
<t tx="ekr.20031218072017.3018">@language python

import leoGlobals as g
from leoGlobals import true,false

if g.app.config.use_psyco:
	# print "enabled psyco classes",__file__
	try: from psyco.classes import *
	except ImportError: pass

import leoNodes
import os,string,time

@ The list of language names that are written differently from the names in language_delims_dict in leoGlobals.py.  This is needed for compatibility with the borland version of Leo.

We convert from names in xml_language_names to names in language_delims_dict by converting the name to lowercase and by removing slashes.
@c

xml_language_names = (
	"CWEB","C","HTML","Java","LaTeX",
	"Pascal","PerlPod","Perl","Plain","Python","tcl/tk")

class BadLeoFile(Exception):
	def __init__(self, message):
		self.message = message
		Exception.__init__(self,message) # 4/26/03: initialize the base class.
	def __str__(self):
		return "Bad Leo File:" + self.message

class baseFileCommands:
	"""A base class for the fileCommands subcommander."""
	@others
	
class fileCommands (baseFileCommands):
	"""A class creating the fileCommands subcommander."""
	pass
</t>
<t tx="ekr.20031218072017.3052">@language python

import leoGlobals as g
from leoGlobals import true,false

&lt;&lt; Theory of operation of find/change &gt;&gt;

class leoFind:

	"""The base class for Leo's Find commands."""

	@others</t>
<t tx="ekr.20031218072017.3093">@first # -*- coding: utf-8 -*-

"""Global constants, variables and utility functions used throughout Leo."""

@language python

import leoGlobals as g # So code can use g below.
# true,false defined below.

import os,string,sys,time,traceback,types

&lt;&lt; define general constants &gt;&gt;

app = None # The singleton app object.

# Visible externally so plugins may add to the list of directives.

globalDirectiveList = [
	"color", "comment", "encoding", "header", "ignore",
	"language", "lineending", "nocolor", "noheader", "nowrap",
	"pagewidth", "path", "quiet", "root", "silent",
	"tabwidth", "terse", "unit", "verbose", "wrap"]

@others</t>
<t tx="ekr.20031218072017.3206">@language python

import leoGlobals as g
from leoGlobals import true,false

import string

class baseLeoImportCommands:
	"""The base class for Leo's import commands."""
	@others
	
class leoImportCommands (baseLeoImportCommands):
	"""A class that implements Leo's import commands."""
	pass</t>
<t tx="ekr.20031218072017.3320">@language python

&lt;&lt; About the vnode and tnode classes &gt;&gt;
&lt;&lt; About clones &gt;&gt;

import leoGlobals as g
from leoGlobals import true,false

if g.app.config.use_psyco:
	# print "enabled psyco classes",__file__
	try: from psyco.classes import *
	except ImportError: pass

import string,time,types

@others</t>
<t tx="ekr.20031218072017.3439">"""Install and run Leo plugins.

On startup:
- doPlugins() calls loadHandlers() to import all
  mod_XXXX.py files in the Leo directory.

- Imported files should register hook handlers using the
  registerHandler and registerExclusiveHandler functions.
  Only one "exclusive" function is allowed per hook.

After startup:
- doPlugins() calls doHandlersForTag() to handle the hook.
- The first non-None return is sent back to Leo.
"""

import leoGlobals as g
from leoGlobals import true,false

handlers = {}

def doPlugins(tag,keywords):
	if g.app.killed:
		return
	if tag == "start1":
		loadHandlers()
	return doHandlersForTag(tag,keywords)
		
@others</t>
<t tx="ekr.20031218072017.3446">@language python

# Tangle and Untangle.
import leoGlobals as g
from leoGlobals import true,false

import os,string

&lt;&lt; about Tangle and Untangle &gt;&gt;
&lt;&lt; constants &amp; synonyms &gt;&gt;

@others</t>
<t tx="ekr.20031218072017.3603">@language python

# Undo manager for leo.py.

&lt;&lt; How Leo implements unlimited undo &gt;&gt;
&lt;&lt; Define optional ivars &gt;&gt;

import leoGlobals as g
from leoGlobals import true,false

import string,types

@others</t>
<t tx="ekr.20031218072017.3625"></t>
<t tx="ekr.20031218072017.3626">import leoGlobals as g
from leoGlobals import true,false

class leoColorPanel:
	
	"""A base class to create Leo's color panel.
	
	Subclasses may create subsidiary panels."""
	
	&lt;&lt; define default color panel data &gt;&gt;

	@others</t>
<t tx="ekr.20031218072017.3630">@language python

"""Leo's base compare class."""

import leoGlobals as g
from leoGlobals import true,false

import difflib,filecmp,os,string

@others</t>
<t tx="ekr.20031218072017.3652">@language python

import leoGlobals as g
from leoGlobals import true,false

import sys,string
	
class leoFontPanel:
	
	"""The base class for Leo's font panel."""

	@others</t>
<t tx="ekr.20031218072017.3655">"""The base classes for all Leo Windows, their body, log and tree panes, key bindings and menus.

These classes should be overridden to create frames for a particular gui."""

import leoGlobals as g
from leoGlobals import true,false

import leoColor,leoMenu,leoNodes,leoUndo
import os,string,sys,time

&lt;&lt; About handling events &gt;&gt;

@others</t>
<t tx="ekr.20031218072017.3719">@first # -*- coding: utf-8 -*-

"""A module containing the base leoGui class.

This class and its subclasses hides the details of which gui is actually being used.
Leo's core calls this class to allocate all gui objects.

Plugins may define their own gui classes by setting g.app.gui."""

import leoGlobals as g
from leoGlobals import true,false

import leoFrame # for null gui.

@others</t>
<t tx="ekr.20031218072017.3748">"""Gui-independent keystroke handling for Leo."""

import leoGlobals as g
from leoGlobals import true,false</t>
<t tx="ekr.20031218072017.3749">"""Gui-independent menu handling for Leo."""

import leoGlobals as g
from leoGlobals import true,false

import string,sys

@others</t>
<t tx="ekr.20031218072017.3812">@language python

import leoGlobals as g
from leoGlobals import true,false

import string
	
class leoPrefs:
	
	&lt;&lt; define leoPrefs constants &gt;&gt;

	"""A base class that creates Leo's preferenes panel."""
	@others</t>
<t tx="ekr.20031218072017.3821"></t>
<t tx="ekr.20031218072017.3822">import leoGlobals as g
from leoGlobals import true,false

import leoColorPanel
import string,Tkinter,tkColorChooser

Tk = Tkinter

&lt;&lt; define gui-dependent color panel data &gt;&gt;

@others</t>
<t tx="ekr.20031218072017.3838">@language python

"""Leo's base compare class."""

import leoGlobals as g
from leoGlobals import true,false

import leoCompare
import Tkinter,tkFileDialog

Tk = Tkinter

class leoTkinterComparePanel (leoCompare.leoCompare):
	
	"""A class that creates Leo's compare panel."""

	@others</t>
<t tx="ekr.20031218072017.3858">@language python

import leoGlobals as g
from leoGlobals import true,false
import string,Tkinter

Tk = Tkinter

@others</t>
<t tx="ekr.20031218072017.3897">import leoGlobals as g
from leoGlobals import true,false

import leoFind, leoTkinterDialog
import string,sys,Tkinter,types

Tk=Tkinter

class leoTkinterFind (leoFind.leoFind,leoTkinterDialog.leoTkinterDialog):

	"""A class that implements Leo's tkinter find dialog."""

	@others</t>
<t tx="ekr.20031218072017.3909">@language python

import leoGlobals as g
from leoGlobals import true,false

import leoFontPanel
import Tkinter,tkFont
import sys,string

Tk = Tkinter

class leoTkinterFontPanel (leoFontPanel.leoFontPanel):
	
	"""A class to create and run a tkinter font panel."""

	@others</t>
<t tx="ekr.20031218072017.3939">@first # -*- coding: utf-8 -*-

# To do: Use config params for window height, width and bar color, relief and width.

@language python

import leoGlobals as g
from leoGlobals import true,false

import leoColor,leoFrame,leoNodes
import leoTkinterMenu,leoTkinterTree
import Tkinter,tkFont
import os,string,sys,time

Tk = Tkinter

@others
</t>
<t tx="ekr.20031218072017.4047">@first # -*- coding: utf-8 -*-

"""Leo's Tkinter Gui module."""

import leoGlobals as g
from leoGlobals import true,false

import leoGui
import leoTkinterColorPanels,leoTkinterComparePanel,leoTkinterDialog
import leoTkinterFind,leoTkinterFontPanel,leoTkinterFrame
import leoTkinterPrefs
import tkFont,Tkinter,tkFileDialog

import string,sys

Tk = Tkinter

class tkinterGui(leoGui.leoGui):
	
	"""A class encapulating all calls to tkinter."""
	
	@others</t>
<t tx="ekr.20031218072017.4099">"""Tkinter keystroke handling for Leo."""

import leoGlobals as g
from leoGlobals import true,false</t>
<t tx="ekr.20031218072017.4100">"""Tkinter menu handling for Leo."""

import leoGlobals as g
from leoGlobals import true,false

import leoMenu
import Tkinter

class leoTkinterMenu (leoMenu.leoMenu):
	"""A class that represents a Leo window."""
	@others</t>
<t tx="ekr.20031218072017.4122">@language python

import leoGlobals as g
from leoGlobals import true,false

import leoPrefs
import string,Tkinter
Tk = Tkinter

class leoTkinterPrefs (leoPrefs.leoPrefs):

	"""A class that creates Leo's preferenes panel."""

	@others</t>
<t tx="ekr.20031218072017.4138">@language python

&lt;&lt; about the tree classes &gt;&gt;

import leoGlobals as g
from leoGlobals import true,false

if g.app.config.use_psyco:
	# print "enabled psyco classes",__file__
	try: from psyco.classes import *
	except ImportError: pass

import leoFrame
import Tkinter,tkFont
import os,string,sys,types

&lt;&lt; about drawing &gt;&gt;
&lt;&lt; drawing constants &gt;&gt;

class leoTkinterTree (leoFrame.leoTree):
	
	callbacksInjected = false

	"""Leo tkinter tree class."""
	
	@others</t>
<t tx="ekr.20040117181936">@all</t>
<t tx="ekr.20040321065415">def findNodeInTree(p,headline):

	"""Search for a node in v's tree matching the given headline."""
	
	c = p.c
	for p in p.subtree_iter():
		if p.headString().strip() == headline.strip():
			return p.copy()
	return c.nullPosition()

def findNodeAnywhere(headline):
	
	c = g.top()
	for p in c.allNodes_iter():
		if p.headString().strip() == headline.strip():
			return p.copy()
	return c.nullPosition()
	
def findTopLevelNode(headline):
	
	c = g.top()
	for p in c.rootPosition().self_and_siblings_iter():
		if p.headString().strip() == headline.strip():
			return p.copy()
	return c.nullPosition()</t>
<t tx="ekr.20040327103735.2"></t>
</tnodes>
</leo_file>
