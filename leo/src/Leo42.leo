<?xml version="1.0" encoding="UTF-8"?>
<leo_file>
<leo_header file_format="2" tnodes="0" max_tnode_index="4411" clone_windows="0"/>
<globals body_outline_ratio="0.6618303571428571">
	<global_window_position top="12" left="272" height="896" width="975"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences>
</preferences>
<find_panel_settings>
	<find_string></find_string>
	<change_string></change_string>
</find_panel_settings>
<vnodes>
<v t="ekr.20031218072017"><vh> Diary</vh>
<v t="ekr.20040105070023"><vh>2004</vh>
<v t="ekr.20040305161150"><vh>March</vh>
<v t="ekr.20040312073921"><vh>3/12</vh>
<v t="ekr.20040312101356"><vh>Added c.allNodes_iter</vh></v>
<v t="ekr.20040312073921.1"><vh>Replaced porv by p</vh></v>
<v t="ekr.20040312073921.2"><vh>Removed g.sharedNodes ivar and related code</vh></v>
</v>
<v t="ekr.20040311080500"><vh>3/11</vh>
<v t="ekr.20040311110432.1"><vh>Got Save To command working</vh></v>
<v t="ekr.20040311080500.1"><vh>Added new iters</vh></v>
<v t="ekr.20040311075229"><vh>Added copy param to all position iterators</vh></v>
</v>
<v t="ekr.20040309045533"><vh>3/9 All calls to tag_bind must use a copy of position</vh></v>
<v t="ekr.20040306223950"><vh>3/6 Realized that position proxies are now efficient</vh></v>
<v t="ekr.20040305161150.1"><vh>3/4 Realized that iterators make the position class safe</vh></v>
<v t="ekr.20040305162910"><vh>3/5</vh>
<v t="ekr.20040305162910.1"><vh>Replaced x by g.x for all x in leoGlobals</vh></v>
<v t="ekr.20040305162910.2"><vh>Replaced app proxy class from leoGlobals by app global var</vh></v>
<v t="ekr.20040305161150.2"><vh>Replaced true,false by True,False</vh></v>
</v>
</v>
<v t="ekr.20040201113342"><vh>February 2004</vh>
<v t="ekr.20040216153243"><vh>2/16</vh>
<v t="ekr.20040212085815"><vh>Restored Toggle Angle Bracket command (without shortcut)</vh></v>
<v t="ekr.20040216153659"><vh>Changed Undo/Redo messages</vh></v>
</v>
<v t="ekr.20040201113342.1"><vh>2/1</vh>
<v t="ekr.20040201113342.2"><vh>Fixed bugs in Script-Find/change and improved documentation</vh></v>
</v>
</v>
<v t="ekr.20040105070023.1"><vh>January 2004</vh>
<v t="ekr.20040130183451"><vh>1/30</vh>
<v t="ekr.20040130160615"><vh>Added script to look for blanks preceding tabs in leading whitespace</vh></v>
<v t="ekr.20040130112427"><vh>Fixed several bugs</vh></v>
</v>
<v t="ekr.20040129154656"><vh>1/29</vh>
<v t="ekr.20040129154656.1"><vh>Only mark ancestor @file nodes dirty when creating,moving,changing nodes</vh></v>
<v t="ekr.20040129133809"><vh>fixed bugs: see 4.1 rc4 projects for details</vh></v>
</v>
<v t="ekr.20040126115428"><vh>1/26</vh>
<v t="ekr.20040126131801"><vh>Properly handle exceptions in commands</vh></v>
<v t="ekr.20040126121604"><vh>Eliminated control-v bug on various platforms</vh></v>
<v t="ekr.20040126115428.1"><vh>Added Dave Hein's Reformat Paragraph code.</vh></v>
<v t="ekr.20040126115428.2"><vh>Fixed Move Up bug involving clones</vh></v>
</v>
<v t="ekr.20040108131321"><vh>1/8</vh>
<v t="ekr.20040108153420"><vh>Esc hides the Find panel</vh></v>
<v t="ekr.20040108153420.1"><vh>Return in Find panel simuatest the Find button</vh></v>
<v t="ekr.20040108141927"><vh>Fixed huge performance bug in cut/copy nodes.</vh></v>
<v t="ekr.20040108134357"><vh>Improved sample code for batch mode in LeoDocs.leo</vh></v>
<v t="ekr.20040108133440"><vh>Removed a complex assert in colorizer</vh></v>
<v t="ekr.20040108131321.1"><vh>Change file extenstion for LaTeX files from .latext to .tex</vh></v>
</v>
<v t="ekr.20040106095934"><vh>1/6 Enable drawing after exceptions</vh></v>
<v t="ekr.20040105070023.2"><vh>1/5</vh>
<v t="ekr.20040105070023.3"><vh>Import now creates @root-code</vh></v>
<v t="ekr.20040105115534"><vh>Added sys.platform to signon message in log pane</vh></v>
<v t="ekr.20040105115534.1"><vh>Added test/test.leo to all distributions</vh></v>
<v t="ekr.20040105121411"><vh>Added LP link to Leo's site</vh></v>
</v>
</v>
</v>
<v t="ekr.20040105070023.4"><vh>2003</vh>
<v t="ekr.20031218072017.1"><vh>December 2003</vh>
<v t="ekr.20031219073155"><vh>12/19</vh>
<v t="ekr.20031219073155.1"><vh>Released 4.1 rc3</vh></v>
<v t="ekr.20031219082957"><vh>All unittests pass (but only with tkinterGui)</vh></v>
<v t="ekr.20031219074948"><vh>Added nullObject class to leoGlobals.py</vh></v>
<v t="ekr.20031219073155.2"><vh>Fixed serious problem reading 3.x files</vh></v>
</v>
<v t="ekr.20031218072017.2"><vh>12/18</vh>
<v t="ekr.20031218192539"><vh>Fixed crasher in 3.x version of scanText</vh></v>
<v t="ekr.20031218192539.1"><vh>Released 4.1 rc2</vh></v>
<v t="ekr.20031218072017.3"><vh>Added year to timestamp</vh></v>
<v t="ekr.20031218072017.4"><vh>Fixed bug in getInsertLines</vh></v>
</v>
<v t="ekr.20031218072017.5"><vh>12/17</vh>
<v t="ekr.20031218072017.6"><vh>Unittests for import don't alter test.leo</vh></v>
</v>
<v t="ekr.20031218072017.7"><vh>12/15</vh>
<v t="ekr.20031218072017.8"><vh>Supported default font sizes for all panes</vh></v>
<v t="ekr.20031218072017.9"><vh>Changed format of timestamps</vh></v>
<v t="ekr.20031218072017.10"><vh>Changed *.* to * in dialogs</vh></v>
<v t="ekr.20031218072017.11"><vh>Released 4.1 rc1</vh></v>
<v t="ekr.20031218072017.12"><vh>All unit tests now pass (import tests leave stuff behind)</vh></v>
<v t="ekr.20031218072017.13"><vh>Don't warn about missing path when writing scripts</vh></v>
<v t="ekr.20031218072017.14"><vh>Set default font size to None in leoConfig.txt.</vh></v>
</v>
<v t="ekr.20031218072017.15"><vh>12/13</vh>
<v t="ekr.20031218072017.16"><vh>Completed move code in leoTest.py</vh></v>
<v t="ekr.20031218072017.17"><vh>Moved encoding messages so they don't appear in batch mode</vh></v>
<v t="ekr.20031218072017.18"><vh>Autoclean outline on save &amp; executeScript does not set tnodeList</vh></v>
<v t="ekr.20031218072017.19"><vh>Patched scanPythonClass to put class docstrings in class nodes</vh></v>
</v>
<v t="ekr.20031218072017.20"><vh>12/11</vh>
<v t="ekr.20031218072017.21"><vh>Fixed big performance bug in removeSentinelLines</vh></v>
<v t="ekr.20031218072017.22"><vh>Call leoTest.fail in when import/export routines can't open a file</vh></v>
<v t="ekr.20031218072017.23"><vh>created unitTestGui class</vh></v>
</v>
<v t="ekr.20031218072017.24"><vh>12/09</vh>
<v t="ekr.20031218072017.25"><vh>Leo now allows @ignore nodes and orphan nodes in @file-nosent trees</vh></v>
<v t="ekr.20031218072017.26"><vh>Looked at report of import bug</vh></v>
</v>
<v t="ekr.20031218072017.27"><vh>12/08</vh>
<v t="ekr.20031218072017.28"><vh>Investigated &amp; fixed copy/paste bugs</vh></v>
</v>
<v t="ekr.20031218072017.29"><vh>12/07</vh>
<v t="ekr.20031218072017.30"><vh>Corrected counts when replacing tabs/blanks</vh></v>
<v t="ekr.20031218072017.31"><vh>Added file open dialog to Import Derived Files command</vh></v>
<v t="ekr.20031218072017.32"><vh>Made sure that Reformat Paragraph makes the new insertion point visible</vh></v>
<v t="ekr.20031218072017.33"><vh>Changed logControl to logCtrl</vh></v>
</v>
<v t="ekr.20031218072017.34"><vh>12/06</vh>
<v t="ekr.20031218072017.35"><vh>Fixed bug when untangling html</vh></v>
<v t="ekr.20031218072017.36"><vh>Fixed clone-dragging bug</vh></v>
<v t="ekr.20031218072017.37"><vh>Load plugins dynamically using pluginsManager.txt</vh></v>
</v>
<v t="ekr.20031218072017.38"><vh>12/05</vh>
<v t="ekr.20031218072017.39"><vh>Ran pychecker</vh></v>
</v>
<v t="ekr.20031218072017.40"><vh>12/04</vh>
<v t="ekr.20031218072017.41"><vh>Created and read paths with chinese characters in folder and file names</vh></v>
<v t="ekr.20031218072017.42"><vh>Fixed all remaining bugs (except duplicate tnode index)</vh></v>
</v>
<v t="ekr.20031218072017.43"><vh>12/03</vh>
<v t="ekr.20031218072017.44"><vh>Replaced c.OpenWithFileName by global openWithFileName</vh></v>
<v t="ekr.20031218072017.45"><vh>Fixed dangerous bug in Convert Blanks command</vh></v>
<v t="ekr.20031218072017.46"><vh>Added the mod_tempfname plugin</vh></v>
</v>
<v t="ekr.20031218072017.47"><vh>12/01</vh>
<v t="ekr.20031218072017.48"><vh>Update recent files in newLeoCommanderAndFrame</vh></v>
</v>
</v>
<v t="ekr.20031218072017.49"><vh>November 2003</vh>
<v t="ekr.20031218072017.50"><vh>11/23 Released 4.1 beta 5 to cvs only</vh>
<v t="ekr.20031218072017.51"><vh>Replaced app.batchLog with app.log</vh></v>
<v t="ekr.20031218072017.52"><vh>Fixed Undo Change All (in headlines) problem</vh></v>
<v t="ekr.20031218072017.53"><vh>Added defensive code to prevent crash in colorizer</vh></v>
<v t="ekr.20031218072017.54"><vh>Removed annoying Go To Line Number "error" message.</vh></v>
<v t="ekr.20031218072017.55"><vh>Fixed duplicate shortcut message when creating a popup menu</vh></v>
<v t="ekr.20031218072017.56"><vh>Made newTnode more robust</vh></v>
<v t="ekr.20031218072017.57"><vh>Fixed crashers in extract and extract section</vh></v>
<v t="ekr.20031218072017.58"><vh>Fixed bug in putRefLine</vh></v>
<v t="ekr.20031218072017.59"><vh>Tested --script from command line</vh></v>
</v>
<v t="ekr.20031218072017.60"><vh>11/22</vh>
<v t="ekr.20031218072017.61"><vh>Moved batch plugin into Leo's core.</vh></v>
<v t="ekr.20031218072017.62"><vh>Added nullUndoer class</vh></v>
<v t="ekr.20031218072017.63"><vh>Disabled Edit Body/Headline commands in batch mode</vh></v>
<v t="ekr.20031218072017.64"><vh>Added app.batchMode ivar</vh></v>
<v t="ekr.20031218072017.65"><vh>Added enable/disable methods to nullLog</vh></v>
<v t="ekr.20031218072017.66"><vh>Created  v.scriptSetBodyString</vh></v>
</v>
<v t="ekr.20031218072017.67"><vh>11/20 released 4.1 beta 4</vh>
<v t="ekr.20031218072017.68"><vh>created null frame,log,body,tree,menu,gui classes</vh></v>
</v>
<v t="ekr.20031218072017.69"><vh>11/19</vh>
<v t="ekr.20031218072017.70"><vh>Initialize write routines properly in Execute Script command</vh></v>
<v t="ekr.20031218072017.71"><vh>Leo now generates reference properly when more than one on the same line</vh></v>
<v t="ekr.20031218072017.72"><vh>Fixed several reorg bugs in leoPlugins.leo</vh></v>
<v t="ekr.20031218072017.73"><vh>Allow all Leo constructs in Execute Script command</vh></v>
<v t="ekr.20031218072017.74"><vh>Protected all tk code in leoPlugins.leo</vh></v>
<v t="ekr.20031218072017.75"><vh>Fixed reorg problem in the nav bar</vh></v>
<v t="ekr.20031218072017.76"><vh>Wrapped all calls to os.path</vh></v>
<v t="ekr.20031218072017.77"><vh>Convert doc sections to doc strings</vh></v>
</v>
<v t="ekr.20031218072017.78"><vh>11/18 released 4.1 beta 3</vh>
<v t="ekr.20031218072017.79"><vh>Fixed bug in initScriptFind</vh></v>
<v t="ekr.20031218072017.80"><vh>released 4.1b3</vh></v>
</v>
<v t="ekr.20031218072017.81"><vh>11/17</vh>
<v t="ekr.20031218072017.82"><vh>Fixed all problems reported by Pychecker</vh></v>
<v t="ekr.20031218072017.83"><vh>Fixed new crasher in batch change commands</vh></v>
<v t="ekr.20031218072017.84"><vh>Fixed new crasher in Show Invisibles command</vh></v>
<v t="ekr.20031218072017.85"><vh>Fixed (new?) unbounded recursion in Go To Next Clone command</vh></v>
<v t="ekr.20031218072017.86"><vh>Fixed (new?) crasher in Abort Edit Headline command</vh></v>
<v t="ekr.20031218072017.87"><vh>Fixed new crashers when opening popup menu</vh></v>
<v t="ekr.20031218072017.88"><vh>Fixed new crasher in Font panel</vh></v>
<v t="ekr.20031218072017.89"><vh>Import traceback only as needed</vh></v>
<v t="ekr.20031218072017.90"><vh>Fixed bug that caused new headlines not to be selected</vh></v>
<v t="ekr.20031218072017.91"><vh>getSelectionLines now returns the insertion line if no selection</vh></v>
<v t="ekr.20031218072017.92"><vh>Replaced c.body and c.log by c.frame.body &amp; c.frame.log</vh></v>
</v>
<v t="ekr.20031218072017.93"><vh>11/16</vh>
<v t="ekr.20031218072017.94"><vh>Reorg is now complete!</vh></v>
<v t="ekr.20031218072017.95"><vh>Moved menu utilities to leoMenu class</vh></v>
<v t="ekr.20031218072017.96"><vh>Removed all redirectors from frame to body</vh></v>
<v t="ekr.20031218072017.97"><vh>Simplified menu bindings</vh></v>
<v t="ekr.20031218072017.98"><vh>Fixed Find Matching Brackets command</vh></v>
</v>
<v t="ekr.20031218072017.99"><vh>11/15</vh>
<v t="ekr.20031218072017.100"><vh>Fixed problem with whole-word searches</vh></v>
<v t="ekr.20031218072017.101"><vh>Fixed problem with attaching icons to dialogs</vh></v>
<v t="ekr.20031218072017.102"><vh>Fixed crasher in Toggle Active Pane command</vh></v>
</v>
<v t="ekr.20031218072017.103"><vh>11/13</vh>
<v t="ekr.20031218072017.104"><vh>wx gui plugin now works again</vh></v>
<v t="ekr.20031218072017.105"><vh>Finished reorg</vh></v>
</v>
<v t="ekr.20031218072017.106"><vh>11/12</vh>
<v t="ekr.20031218072017.107"><vh>Created app.gui.utils class</vh></v>
<v t="ekr.20031218072017.108"><vh>Created base classes for color, compare, find, font &amp; prefs panels</vh></v>
<v t="ekr.20031218072017.109"><vh>Fixed Recent Files regression</vh></v>
</v>
<v t="ekr.20031218072017.110"><vh>11/10</vh>
<v t="ekr.20031218072017.111"><vh>Continued major reorg</vh></v>
<v t="ekr.20031218072017.112"><vh>Added redirection routines to leoFrame class</vh></v>
</v>
<v t="ekr.20031218072017.113"><vh>11/9</vh>
<v t="ekr.20031218072017.114"><vh>Reorganized the code to use leoMenu and leoTkinterMenu classes</vh></v>
<v t="ekr.20031218072017.115"><vh>Fixed LaTeX syntax coloring bug</vh></v>
<v t="ekr.20031218072017.116"><vh>Implemented a limited form of the Selection Only find/change commands</vh></v>
<v t="ekr.20031218072017.117"><vh>Created unit tests to run Check Outline command</vh></v>
</v>
<v t="ekr.20031218072017.118"><vh>11/8</vh>
<v t="ekr.20031218072017.119"><vh>Created Page Count script</vh></v>
</v>
<v t="ekr.20031218072017.120"><vh>11/7 4.1 beta 1 released</vh>
<v t="ekr.20031218072017.121"><vh>Fixed crasher in computeLoadDir</vh></v>
<v t="ekr.20031218072017.122"><vh>Fixed a real bug in the Change, Then Find command</vh></v>
<v t="ekr.20031218072017.123"><vh>Cleaned up Pychecker complaints</vh></v>
<v t="ekr.20031218072017.124"><vh>Released 4.1 beta 1</vh></v>
</v>
<v t="ekr.20031218072017.125"><vh>11/6</vh>
<v t="ekr.20031218072017.126"><vh>Create initScriptFind</vh></v>
<v t="ekr.20031218072017.127"><vh>Added support for undo</vh></v>
<v t="ekr.20031218072017.128"><vh>Yes, a script change checkbox IS a good idea</vh></v>
</v>
<v t="ekr.20031218072017.129"><vh>11/5</vh>
<v t="ekr.20031218072017.130"><vh>Got script search/change working (!!)</vh>
<v t="ekr.20031218072017.131"><vh>find script</vh></v>
</v>
<v t="ekr.20031218072017.132"><vh>Fixed Serious Undo Change All bug</vh></v>
<v t="ekr.20031218072017.133"><vh>Leo now ignores unknown prefs and find prefs</vh></v>
<v t="ekr.20031218072017.134"><vh>Leo now writes node_only find prefs</vh></v>
<v t="ekr.20031218072017.135"><vh>Fixed first node-only find bug</vh></v>
</v>
<v t="ekr.20031218072017.136"><vh>11/4</vh>
<v t="ekr.20031218072017.137"><vh>Fixed bug involving 0x1a characters in body text.</vh></v>
<v t="ekr.20031218072017.138"><vh>Added Check Outline command</vh></v>
<v t="ekr.20031218072017.139"><vh>Added Hoist/De-Hoist commands</vh></v>
</v>
<v t="ekr.20031218072017.140"><vh>11/3</vh>
<v t="ekr.20031218072017.141"><vh>Leo now does an auto-save only if files have actually been changed.</vh></v>
<v t="ekr.20031218072017.142"><vh>Changed all .leo files to use the -ko cvs option</vh></v>
</v>
<v t="ekr.20031218072017.143"><vh>11/2</vh>
<v t="ekr.20031218072017.144"><vh>Added use_gnx config setting</vh></v>
<v t="ekr.20031218072017.145"><vh>Converted to using gnx</vh></v>
</v>
</v>
<v t="ekr.20031218072017.146"><vh>October 2003</vh>
<v t="ekr.20031218072017.147"><vh>10/31</vh>
<v t="ekr.20031218072017.148"><vh>Added bindings to app.gui.root to catch all control keys</vh></v>
<v t="ekr.20031218072017.149"><vh>Added config_encoding setting</vh></v>
</v>
<v t="ekr.20031218072017.150"><vh>10/27</vh>
<v t="ekr.20031218072017.151"><vh>Colorizer now uses c.body routines</vh></v>
<v t="ekr.20031218072017.152"><vh>Replaced frame.top by frame in call to set_focus</vh></v>
<v t="ekr.20031218072017.153"><vh>Replace calls to after and after_idle by app.gui calls.</vh></v>
<v t="ekr.20031218072017.154"><vh>Removed app.root from all non-gui code</vh></v>
</v>
<v t="ekr.20031218072017.155"><vh>10/26 code reorg</vh>
<v t="ekr.20031218072017.156"><vh>Replaced all references to leoDialog by corresponding app.gui calls</vh></v>
<v t="ekr.20031218072017.157"><vh>Moved color panels into leoTkinterColorPanels.py</vh></v>
<v t="ekr.20031218072017.158"><vh>Replaced all direct references to color panels by corresponding appl.gui calls</vh></v>
<v t="ekr.20031218072017.159"><vh>Replaced all direct references to find panel by corresponding appl.gui calls</vh></v>
</v>
<v t="ekr.20031218072017.160"><vh>10/25</vh>
<v t="ekr.20031218072017.161"><vh>Made tnode indices immutable: fixed bad copy/paste bug</vh></v>
<v t="ekr.20031218072017.162"><vh>Fixed crasher with bad pattern match patterns</vh></v>
<v t="ekr.20031218072017.163"><vh>Fixed bug in Go To Line Number command</vh></v>
<v t="ekr.20031218072017.164"><vh>Disabled startup traces</vh></v>
<v t="ekr.20031218072017.165"><vh>Fixed plugin problems (now fixed in 4.0.2 and 4.1)</vh></v>
<v t="ekr.20031218072017.166"><vh>Cleaned up the reformatParagraph code</vh></v>
<v t="ekr.20031218072017.167"><vh>Removed kludge from setSelectionAreas</vh></v>
</v>
<v t="ekr.20031218072017.168"><vh>10/24</vh>
<v t="ekr.20031218072017.169"><vh>Completed new version of reformatParagraph</vh></v>
<v t="ekr.20031218072017.170"><vh>Rewrote findBoundParagraph using splitLines</vh></v>
<v t="ekr.20031218072017.171"><vh>Rewrote getInsertLines (leoTkinterBody)</vh></v>
<v t="ekr.20031218072017.172"><vh>Wrote splitLines &amp; joinLines utilities</vh></v>
<v t="ekr.20031218072017.173"><vh>Fixed problem with indent/undent</vh></v>
</v>
<v t="ekr.20031218072017.174"><vh>10/22</vh>
<v t="ekr.20031218072017.175"><vh>Fixed crasher in onOpenWithFileName</vh></v>
</v>
<v t="ekr.20031218072017.176"><vh>10/19</vh>
<v t="ekr.20031218072017.177"><vh>Made app.forceShutdown work in "idle" hook</vh></v>
<v t="ekr.20031218072017.178"><vh>Properly enable green back arrow in nav bar</vh></v>
</v>
<v t="ekr.20031218072017.179"><vh>10/17</vh>
<v t="ekr.20031218072017.180"><vh>Renamed .body to .bodyCtrl</vh></v>
<v t="ekr.20031218072017.181"><vh>Create leoTkinterLog  &amp; leoTkinterBody classes</vh></v>
<v t="ekr.20031218072017.182"><vh>Created frame.destroySelf routine</vh></v>
<v t="ekr.20031218072017.183"><vh>Eliminated all references to frame.top outside of LeoTkinterFrame class</vh></v>
<v t="ekr.20031218072017.184"><vh>tree.drawIcon now injects v.iconx and v.iconv ivars</vh></v>
<v t="ekr.20031218072017.185"><vh>Began gui reorg</vh></v>
<v t="ekr.20031218072017.186"><vh>4.0 final released</vh></v>
</v>
<v t="ekr.20031218072017.187"><vh>10/16</vh>
<v t="ekr.20031218072017.188"><vh>Created app.forceShutdown</vh></v>
<v t="ekr.20031218072017.189"><vh>Fixed more bugs in undoReplace: all undo tests now pass</vh></v>
</v>
<v t="ekr.20031218072017.190"><vh>10/15</vh>
<v t="ekr.20031218072017.191"><vh>Added several plugins and scripts to leoPlugins.leo</vh></v>
<v t="ekr.20031218072017.192"><vh>Removed "invalid @lineending directive" warning</vh></v>
<v t="ekr.20031218072017.193"><vh>Added support so plugins can force Leo to quit during startup</vh></v>
<v t="ekr.20031218072017.194"><vh>Fixed bug in removeSentinelsCommand</vh></v>
<v t="ekr.20031218072017.195"><vh>Improved Go To Line Number command</vh></v>
<v t="ekr.20031218072017.196"><vh>Improved confusing error message from Go To Line Number command</vh></v>
</v>
<v t="ekr.20031218072017.197"><vh>10/14</vh>
<v t="ekr.20031218072017.198"><vh>Added redirect_execute_script_output_to_log_pane setting</vh></v>
<v t="ekr.20031218072017.199"><vh>Speed up clone operation by calling initAllCloneBitsInTree</vh></v>
<v t="ekr.20031218072017.200"><vh>Several undo changes &amp; bug fixes</vh></v>
</v>
<v t="ekr.20031218072017.201"><vh>10/13 Released 4.0 beta 4</vh></v>
<v t="ekr.20031218072017.202"><vh>10/10</vh>
<v t="ekr.20031218072017.203"><vh>Added var or const prefixes when importing elisp</vh></v>
<v t="ekr.20031218072017.204"><vh>Added support for elisp colorising</vh></v>
<v t="ekr.20031218072017.205"><vh>Fixed bug in c.clone</vh></v>
<v t="ekr.20031218072017.206"><vh>Created hint messages for Extract Section &amp; Extract Section Names commands</vh></v>
<v t="ekr.20031218072017.207"><vh>changed string.letters to string.ascii_letters throughout</vh></v>
<v t="ekr.20031218072017.208"><vh>Fixed bug in bracket scanner</vh></v>
</v>
<v t="ekr.20031218072017.209"><vh>10/9 Released 4.0 beta 3</vh>
<v t="ekr.20031218072017.210"><vh>Added support for importing elisp (.el) files</vh></v>
<v t="ekr.20031218072017.211"><vh>Force a complete recolor after any cut/paste or corresponding undo/redo</vh></v>
<v t="ekr.20031218072017.212"><vh>Improved 4.0 version of Go To Line Number command</vh></v>
<v t="ekr.20031218072017.213"><vh>Released 4.0 beta 3</vh></v>
</v>
<v t="ekr.20031218072017.214"><vh>10/8</vh>
<v t="ekr.20031218072017.215"><vh>Fixed long-standing clone-mark bug</vh></v>
<v t="ekr.20031218072017.216"><vh>Added support for unknown tnode and vnode attributes</vh></v>
<v t="ekr.20031218072017.217"><vh>Fixed bug in gui destroy logic</vh></v>
<v t="ekr.20031218072017.218"><vh>Changed c.frame.mFileName to c.mFileName in plugins.leo</vh></v>
</v>
<v t="ekr.20031218072017.219"><vh>10/7</vh>
<v t="ekr.20031218072017.220"><vh>Fixed crash in sentinelName</vh></v>
<v t="ekr.20031218072017.221"><vh>Added __setattr__ method to leoProxy class</vh></v>
<v t="ekr.20031218072017.222"><vh>Reenabled orphans &amp; ignored test in new write logic</vh></v>
<v t="ekr.20031218072017.223"><vh>Cleaned up version code and added build number to signon</vh></v>
</v>
<v t="ekr.20031218072017.224"><vh>10/6</vh>
<v t="ekr.20031218072017.225"><vh>Converted the code to use newLeoCommanderAndFrame</vh></v>
<v t="ekr.20031218072017.226"><vh>Added better error message in setDefaultIcon</vh></v>
</v>
<v t="ekr.20031218072017.227"><vh>10/3 Released 4.0 beta 2</vh>
<v t="ekr.20031218072017.228"><vh>Released 4.0 beta 2</vh></v>
<v t="ekr.20031218072017.229"><vh>Fixed problem setting loadDir in startup logic</vh></v>
</v>
<v t="ekr.20031218072017.230"><vh>10/2</vh>
<v t="ekr.20031218072017.231"><vh>Still problems making Read @file Nodes undoable</vh></v>
<v t="ekr.20031218072017.232"><vh>Import Derived File command is now undoable</vh></v>
<v t="ekr.20031218072017.233"><vh>Moved Clear Recent Files menu item into Recent Files menu</vh></v>
<v t="ekr.20031218072017.234"><vh>Fixed bugs involving find params</vh></v>
<v t="ekr.20031218072017.235"><vh>Fixed Python Import bug</vh></v>
</v>
<v t="ekr.20031218072017.236"><vh>10/1</vh>
<v t="ekr.20031218072017.237"><vh>Added support for two new settings affecting drags</vh></v>
<v t="ekr.20031218072017.238"><vh>Marked changed nodes &amp; make the @file node and the outline dirty.</vh></v>
<v t="ekr.20031218072017.239"><vh>Fixed Go To Outline command so it doesn't crash: More work needed.</vh></v>
<v t="ekr.20031218072017.240"><vh>Ensured newlines before all sentinels in @rawfile</vh></v>
<v t="ekr.20031218072017.241"><vh>Fixed @rawfile write problem</vh></v>
</v>
</v>
<v t="ekr.20031218072017.242"><vh>Sept 2003</vh>
<v t="ekr.20031218072017.243"><vh>9/30</vh>
<v t="ekr.20031218072017.244"><vh>Removed unused v arg from writeOld/NewDerivedFiles</vh></v>
<v t="ekr.20031218072017.245"><vh>Removed unused nosentinels arg from writeNewDerivedFiles</vh></v>
<v t="ekr.20031218072017.246"><vh>Removed putLeadingNewlineFlag arg from putSentinel</vh></v>
<v t="ekr.20031218072017.247"><vh>Renamed new scanText to scanText4</vh></v>
<v t="ekr.20031218072017.248"><vh>Removed many Pychecker warnings</vh>
<v t="ekr.20031218072017.249"><vh>Details</vh></v>
</v>
<v t="ekr.20031218072017.250"><vh>Added better log message for Convert All Tabs/Blanks commands</vh></v>
<v t="ekr.20031218072017.251"><vh>Created leoProxy class and simplified the code</vh></v>
</v>
<v t="ekr.20031218072017.252"><vh>9/29</vh>
<v t="ekr.20031218072017.253"><vh>A "gotcha" re using global app var</vh></v>
<v t="ekr.20031218072017.254"><vh>Added crucial defensive checks in v.headString() and v.bodySting()</vh></v>
<v t="ekr.20031218072017.255"><vh>Fixed several more unicode bugs</vh></v>
<v t="ekr.20031218072017.256"><vh>Removed setApp function</vh></v>
</v>
<v t="ekr.20031218072017.257"><vh>9/28</vh>
<v t="ekr.20031218072017.258"><vh>Added many calls to toUnicode.  Marked with 9/28/03</vh></v>
<v t="ekr.20031218072017.259"><vh>trace now always prints arguments.</vh></v>
<v t="ekr.20031218072017.260"><vh>Rewrote icon code so it doesn't use PIL or tkIcon in Python 2.3</vh></v>
</v>
<v t="ekr.20031218072017.261"><vh>9/27 </vh>
<v t="ekr.20031218072017.262"><vh>Defined dialog and icons routines in tkinterGui and leoGui</vh></v>
<v t="ekr.20031218072017.263"><vh>Defined focus routines in tkinterGui and leoGui</vh></v>
<v t="ekr.20031218072017.264"><vh>Replaced app.runMainLoop with app.gui.runMainLoop</vh></v>
<v t="ekr.20031218072017.265"><vh>Created leoGui base class for tkinterGui class</vh></v>
<v t="ekr.20031218072017.266"><vh>Moved all gui startup logic into tkingerGui class</vh></v>
</v>
<v t="ekr.20031218072017.267"><vh>9/26 4.0 beta 1 released</vh>
<v t="ekr.20031218072017.268"><vh>changed default for config.write_old_format_derived_files</vh></v>
</v>
<v t="ekr.20031218072017.269"><vh>9/22</vh>
<v t="ekr.20031218072017.270"><vh>Changed leoConfig.txt so we write 3.x derived files if leoConfig.txt does not exist</vh></v>
<v t="ekr.20031218072017.271"><vh>writeAll and writeMissing now return a count of the written files</vh></v>
<v t="ekr.20031218072017.272"><vh>getLeoFile computes joinLists before reading derived files</vh></v>
<v t="ekr.20031218072017.273"><vh>Fixed putCode so @raw test passes</vh></v>
<v t="ekr.20031218072017.274"><vh>4.x code passes @delims test</vh></v>
</v>
<v t="ekr.20031218072017.275"><vh>9/21</vh>
<v t="ekr.20031218072017.276"><vh>Import derived file command now works for both 3.x and 4.x files</vh></v>
<v t="ekr.20031218072017.277"><vh>Test @file-nosent</vh></v>
<v t="ekr.20031218072017.278"><vh>Enclosed top-level read/write code in try/except</vh></v>
<v t="ekr.20031218072017.279"><vh>findChild now handles bad tnodeList indices without crashing</vh></v>
<v t="ekr.20031218072017.280"><vh>Fixed bugs in @+doc and @+at sentinels.</vh></v>
<v t="ekr.20031218072017.281"><vh>Removed Write 3.x Outline command</vh></v>
<v t="ekr.20031218072017.282"><vh>Auto-save on Write 3.x derived files.</vh></v>
<v t="ekr.20031218072017.283"><vh>Put section references only if not in raw mode</vh></v>
</v>
<v t="ekr.20031218072017.284"><vh>9/20 4.0 code works &amp; integrated with LeoPy.leo !!</vh>
<v t="ekr.20031218072017.285"><vh>Started merging of plugin code with leoAtFile.py</vh></v>
<v t="ekr.20031218072017.286"><vh>Fixed problems with @doc parts</vh></v>
<v t="ekr.20031218072017.287"><vh>Write @file Nodes does auto-save if we are writing new-format files</vh></v>
<v t="ekr.20031218072017.288"><vh>Changed Wirte 3.x/4x Derived File so they write multiple files</vh></v>
<v t="ekr.20031218072017.289"><vh>Fixed @last bug by using same code as in 3.x</vh></v>
<v t="ekr.20031218072017.290"><vh>Write 4.x Derived File command auto-saves outline</vh></v>
<v t="ekr.20031218072017.291"><vh>Fixed (?) @last newline bug</vh></v>
<v t="ekr.20031218072017.292"><vh>Removed all using_gnx ivars</vh></v>
<v t="ekr.20031218072017.293"><vh>Write code now clears tnodeList attribute before writing</vh></v>
<v t="ekr.20031218072017.294"><vh>Removed "not undoable" message from Read @file Nodes command</vh></v>
<v t="ekr.20031218072017.295"><vh>Removed app.use_gnx ivar</vh></v>
<v t="ekr.20031218072017.296"><vh>Set using_gnx in top_df.write_all</vh></v>
<v t="ekr.20031218072017.297"><vh>Created top_df.oldWrite and top_df.newWrite</vh></v>
<v t="ekr.20031218072017.298"><vh>Added test for unvisited nodes in read logic</vh></v>
</v>
<v t="ekr.20031218072017.299"><vh>9/19</vh>
<v t="ekr.20031218072017.300"><vh>Major reorganization of leoAtFile.py</vh></v>
<v t="ekr.20031218072017.301"><vh>Moved code from leoPlugins.leo to LeoPy.leo</vh></v>
<v t="ekr.20031218072017.302"><vh>Tested splitting very long doc words.</vh></v>
<v t="ekr.20031218072017.303"><vh>Removed @ws stuff</vh></v>
<v t="ekr.20031218072017.304"><vh>Fixed bug related to @last</vh></v>
<v t="ekr.20031218072017.305"><vh>Added Write 3.x Format Derived File command.</vh></v>
<v t="ekr.20031218072017.306"><vh>Added Clear Recent Files command</vh></v>
<v t="ekr.20031218072017.307"><vh>Added write_old_format_derived_files option</vh></v>
<v t="ekr.20031218072017.308"><vh>Removed @ws stuff</vh></v>
</v>
<v t="ekr.20031218072017.309"><vh>9/18</vh>
<v t="ekr.20031218072017.310"><vh>Fixed some (all?) problems with tnodeList</vh></v>
<v t="ekr.20031218072017.311"><vh>All files now pass the file-compare (semantic test)</vh></v>
<v t="ekr.20031218072017.312"><vh>Fixed @others bug</vh></v>
</v>
<v t="ekr.20031218072017.313"><vh>9/17</vh>
<v t="ekr.20031218072017.314"><vh>Wrote compare script</vh></v>
<v t="ekr.20031218072017.315"><vh>Wrote Import Derived File command</vh></v>
</v>
<v t="ekr.20031218072017.316"><vh>9/16</vh>
<v t="ekr.20031218072017.317"><vh>Changed how @ws sentinel works</vh></v>
<v t="ekr.20031218072017.318"><vh>Properly indent @nl sentinels</vh></v>
<v t="ekr.20031218072017.319"><vh>Fixed bugs in putting doc parts</vh></v>
<v t="ekr.20031218072017.320"><vh>Fixed bugs in readLastDocLine</vh></v>
</v>
<v t="ekr.20031218072017.321"><vh>9/14</vh>
<v t="ekr.20031218072017.322"><vh>Added ignoreOldSentinel to warn about 3.x sentinels</vh></v>
<v t="ekr.20031218072017.323"><vh>Milestone: first successful use of hidden machinery</vh></v>
<v t="ekr.20031218072017.324"><vh>Added support for tnodeList tag in fileCommands.getVnode</vh></v>
<v t="ekr.20031218072017.325"><vh>Rewrote createChild and renamed it to findChild</vh></v>
<v t="ekr.20031218072017.326"><vh>Added check to see whether read is the same as the write.</vh></v>
<v t="ekr.20031218072017.327"><vh>Added support for tnodeList</vh></v>
</v>
<v t="ekr.20031218072017.328"><vh>9/13 work on 4.0 read code</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.329"><vh> Notes</vh>
<v t="ekr.20031218072017.330"><vh> URL's</vh>
<v t="ekr.20031218072017.331"><vh>@url http://subversion.tigris.org/  SVN</vh></v>
<v t="ekr.20031218072017.332"><vh>Twisted url's</vh>
<v t="ekr.20031218072017.333"><vh>@url http://www-106.ibm.com/developerworks/linux/library/l-twist1.html</vh></v>
<v t="ekr.20031218072017.334"><vh>@url http://www-106.ibm.com/developerworks/linux/library/l-twist2.html</vh></v>
<v t="ekr.20031218072017.335"><vh>@url http://www-106.ibm.com/developerworks/linux/library/l-twist3.html</vh></v>
</v>
</v>
<v t="ekr.20031218072017.336"><vh>Annoucnements</vh>
<v t="ekr.20031218072017.337"><vh>Download statistics</vh></v>
<v t="ekr.20031218072017.338"><vh>Quotes of the month</vh>
<v t="ekr.20031218072017.339"><vh>November 2003</vh></v>
<v t="ekr.20031218072017.340"><vh>October 2003</vh></v>
</v>
<v t="ekr.20031218072017.341"><vh>FAQ for comp.prog.literate</vh></v>
<v t="ekr.20040217085322"><vh>ANN: Leo 4.1 final: An outlining editor</vh></v>
<v t="ekr.20031218072017.343"><vh>Previous announcements</vh>
<v t="ekr.20040203100534"><vh>ANN: Leo 4.1 rc4: An outlining editor</vh></v>
<v t="ekr.20031218072017.342"><vh>ANN: Leo 4.1 rc3: An outlining editor</vh></v>
<v t="ekr.20031218072017.344"><vh>ANN: Leo 4.1 beta 5: An outlining editor</vh></v>
<v t="ekr.20031218072017.345"><vh>4.0.x announcements</vh>
<v t="ekr.20031218072017.346"><vh>ANN: Leo 4.0.4: An outlining editor</vh></v>
<v t="ekr.20031218072017.347"><vh>ANN: Leo 4.0 final: An outlining editor</vh></v>
</v>
<v t="ekr.20031218072017.348"><vh>3.x announcements</vh>
<v t="ekr.20031218072017.349"><vh>ANN to comp.lang.python: ANN: Leo 3.3 outlining editor</vh></v>
<v t="ekr.20031218072017.350"><vh>ANN: Leo 3.5 (and 3.4) outlining editor</vh></v>
<v t="ekr.20031218072017.351"><vh>ANN: Leo 3.6 outlining editor</vh></v>
<v t="ekr.20031218072017.352"><vh>ANN: Leo 3.7 outlining editor</vh></v>
<v t="ekr.20031218072017.353"><vh>ANN: Leo 3.8 outlining editor</vh></v>
<v t="ekr.20031218072017.354"><vh>ANN: Leo 3.9 outlining editor</vh></v>
<v t="ekr.20031218072017.355"><vh>ANN: Leo 3.10 outlining editor</vh></v>
<v t="ekr.20031218072017.356"><vh>ANN: Leo 3.11b1 outlining editor</vh></v>
<v t="ekr.20031218072017.357"><vh>ANN: Leo 3.11b3 outlining editor</vh></v>
<v t="ekr.20031218072017.358"><vh>ANN: Leo 3.11b4 outlining editor</vh></v>
<v t="ekr.20031218072017.359"><vh>ANN: Leo 3.11 outlining editor</vh></v>
<v t="ekr.20031218072017.360"><vh>ANN: Leo 3.11.1 outlining editor</vh></v>
<v t="ekr.20031218072017.361"><vh>ANN: Leo 3.12 outlining editor</vh></v>
<v t="ekr.20031218072017.362"><vh>ANN: Leo 3.12 outlining editor (c.l.py)</vh></v>
</v>
</v>
</v>
<v t="ekr.20040117092727.1"><vh>Design notes</vh>
<v t="ekr.20040117092727.2"><vh>using zodb versions</vh></v>
<v t="ekr.20040117111232"><vh>svn links</vh></v>
</v>
<v t="ekr.20031218072017.363"><vh>Distribution checklist</vh>
<v t="ekr.20031218072017.364"><vh>Places to announce Leo</vh></v>
</v>
<v t="ekr.20031218072017.365"><vh>How to...</vh>
<v t="ekr.20031218072017.366"><vh>How to add and remove files from CVS repository</vh></v>
<v t="ekr.20031218072017.367"><vh>How to add support for a new language</vh>
<v t="ekr.20040206073310"><vh>Notes</vh></v>
<v t="ekr.20031218072017.368"><vh>&lt;&lt; define global data structures &gt;&gt; app</vh></v>
<v t="ekr.20031218072017.369"><vh>&lt;&lt; Create the Target Language frame &gt;&gt; frame</vh></v>
<v t="ekr.20031218072017.370"><vh>&lt;&lt; configure language-specific settings &gt;&gt; colorizer</vh></v>
<v t="ekr.20031218072017.371"><vh>&lt;&lt; define colorizer keywords &gt;&gt; colorizer</vh>
<v t="ekr.20031218072017.372"><vh>&lt;&lt; actionscript keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.373"><vh>&lt;&lt; c keywords &gt;&gt;</vh></v>
<v t="ekr.20040206072057"><vh>&lt;&lt; csharp keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.374"><vh>&lt;&lt; elisp keywords&gt;&gt;</vh></v>
<v t="ekr.20031218072017.375"><vh>&lt;&lt; html keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.376"><vh>&lt;&lt; java keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.377"><vh>&lt;&lt; latex keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.378"><vh>&lt;&lt; pascal keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.379"><vh>&lt;&lt; perl keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.380"><vh>&lt;&lt; php keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.381"><vh>&lt;&lt; python keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.382"><vh>&lt;&lt; rebol keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.383"><vh>&lt;&lt; tcl/tk keywords &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.384"><vh>How to export syntax colored code preserving colors</vh></v>
<v t="ekr.20031218072017.385"><vh>How to Increase environment space</vh></v>
<v t="ekr.20031218072017.386"><vh>How to remove cursed newlines: use binary mode</vh>
<v t="ekr.20031218072017.387"><vh>The solution</vh></v>
<v t="ekr.20031218072017.388"><vh>cursed newline answer</vh></v>
<v t="ekr.20031218072017.389"><vh>cursed newline answer 2</vh></v>
</v>
<v t="ekr.20031218072017.390"><vh>How to run Pychecker</vh></v>
<v t="ekr.20031218072017.391"><vh>How to use CVS branches</vh></v>
<v t="ekr.20031218072017.392"><vh>Python Notes &amp; HowTo's...</vh>
<v t="ekr.20031218072017.393"><vh>What's new for each version:</vh>
<v t="ekr.20031218072017.394"><vh>@url http://www.python.org/2.3/highlights.html</vh></v>
<v t="ekr.20031218072017.395"><vh>@url http://www.amk.ca/python/2.1/</vh></v>
<v t="ekr.20031218072017.396"><vh>@url http://www.amk.ca/python/2.0/</vh></v>
</v>
<v t="ekr.20031218072017.397"><vh>Default values &amp; keyword arguments</vh></v>
<v t="ekr.20031218072017.398"><vh>How to call any Python method from the C API</vh></v>
<v t="ekr.20031218072017.399"><vh>How to run Python programs easily on NT,2K,XP</vh>
<v t="ekr.20031218072017.400"><vh>setting the PATHEXT env var</vh></v>
<v t="ekr.20031218072017.401"><vh>Yet another Python .bat wrapper</vh></v>
</v>
</v>
</v>
<v t="ekr.20040125121407"><vh>Leo &amp; Emacs</vh>
<v t="ekr.20040125121407.1"><vh>comment</vh></v>
<v t="ekr.20040125121407.2"><vh>comment</vh></v>
<v t="ekr.20040125121407.3"><vh>comment</vh></v>
</v>
<v t="ekr.20031218072017.402"><vh>Leo and CVS</vh>
<v t="ekr.20031218072017.403"><vh>Initial post by Steven Schaefer</vh></v>
<v t="ekr.20040125105904"><vh>aegis: an alternative to cvs</vh></v>
</v>
<v t="ekr.20031218072017.404"><vh>LeoN, Zope &amp; collaboration info</vh>
<v t="ekr.20031218072017.405"><vh>Kent Tenny Notes</vh></v>
<v t="ekr.20031218072017.406"><vh>url's</vh>
<v t="ekr.20031218072017.407"><vh>@url http://24.243.129.68:8080/members/sandbox</vh></v>
<v t="ekr.20031218072017.408"><vh>@url http://www.zopelabs.com/cookbook</vh></v>
<v t="ekr.20031218072017.409"><vh>@url http://zwiki.org/FrontPage  Zope implementation of wiki</vh></v>
</v>
<v t="ekr.20031218072017.410"><vh>Collaboration &amp; Sharing</vh>
<v t="ekr.20031218072017.411"><vh>From Rodrigo</vh></v>
</v>
<v t="ekr.20031218072017.412"><vh>Zope</vh>
<v t="ekr.20031218072017.413"><vh>From Rodrigo re: Zope.</vh></v>
<v t="ekr.20031218072017.414"><vh>Clarification from Kent Tenny</vh></v>
<v t="ekr.20031218072017.415"><vh>From Rodrigo re: ip</vh></v>
<v t="ekr.20031218072017.416"><vh>Other servers</vh></v>
<v t="ekr.20031218072017.417"><vh>Is my ip public?</vh></v>
<v t="ekr.20031218072017.418"><vh>Back ends for storing/retrieving nodes: Paul Paterson</vh></v>
<v t="ekr.20031218072017.419"><vh>From Paul Paterson</vh></v>
</v>
<v t="ekr.20031218072017.420"><vh>Jabber</vh></v>
</v>
<v t="ekr.20040104162835.8"><vh>Mac notes: Dan Winkler</vh>
<v t="ekr.20040104162835.9"><vh>Porting notes</vh></v>
<v t="ekr.20040104162835.10"><vh>$Path, etc.</vh></v>
<v t="ekr.20040104162835.11"><vh>which python</vh></v>
<v t="ekr.20040104162835.12"><vh>get info</vh></v>
<v t="ekr.20040104162835.13"><vh>Fink &amp; aqua</vh></v>
<v t="ekr.20040104162835.14"><vh>Mac, Fink, etc.</vh></v>
<v t="ekr.20040104162835.15"><vh>Double clicking on Linux</vh></v>
<v t="ekr.20040104162835.16"><vh>Getting Leo on Fink Commander</vh></v>
</v>
<v t="ekr.20031218072017.421"><vh>Milestones</vh>
<v t="ekr.20031218072017.422"><vh>02/03/02 Leo 0.08 released</vh></v>
<v t="ekr.20031218072017.423"><vh>12/17/01 ** Leo 0.05 released</vh></v>
<v t="ekr.20031218072017.424"><vh>12/16/01 Leo becomes functional</vh></v>
<v t="ekr.20031218072017.425"><vh>12/13/01 Syntax coloring works</vh></v>
<v t="ekr.20031218072017.426"><vh>12/09/01 Tree now drawn properly</vh></v>
<v t="ekr.20031218072017.427"><vh>12/05/01 Tree works with Tkinter</vh></v>
<v t="ekr.20031218072017.428"><vh>11/10/01 ** began conversion to tk</vh></v>
<v t="ekr.20031218072017.429"><vh>10/26/01 First successful read of .leo file w/ @file nodes</vh></v>
<v t="ekr.20031218072017.430"><vh>9/29/01 c2py: Totally in love with Python</vh></v>
<v t="ekr.20031218072017.431"><vh>ca. 9/1/01 began work on wxPython version of Leo</vh></v>
</v>
<v t="ekr.20031218072017.432"><vh>Promo</vh>
<v t="ekr.20031218072017.433"><vh>Argument: what is Leo?</vh></v>
</v>
<v t="ekr.20040107090240"><vh>Research</vh>
<v t="ekr.20040107064101.5"><vh>Zope notes</vh>
<v t="ekr.20040107065006"><vh>posting</vh></v>
<v t="ekr.20040107064854"><vh>example Code</vh></v>
<v t="ekr.20040107080609.1"><vh>Zshell</vh></v>
<v t="ekr.20040107064854.1"><vh>@url http://zope.org/Products/StandaloneZODB</vh></v>
<v t="ekr.20040107064854.2"><vh>@url http://jace.seacrow.com/tech/zope/blug-zodb</vh></v>
</v>
<v t="ekr.20040107084614"><vh>Investigate cvn: subversion</vh></v>
</v>
<v t="ekr.20031218072017.434"><vh>Unused code</vh>
<v t="ekr.20031218072017.435"><vh>Batch Files</vh>
<v t="ekr.20031218072017.436"><vh>@silentfile bdist.bat</vh></v>
<v t="ekr.20031218072017.437"><vh>@silentfile go.bat</vh></v>
<v t="ekr.20031218072017.438"><vh>@silentfile help.bat</vh></v>
<v t="ekr.20031218072017.439"><vh>@silentfile sdist.bat</vh></v>
</v>
<v t="ekr.20031218072017.440"><vh>Destroy and __del__ methods</vh>
<v t="ekr.20031218072017.441"><vh>(Remove all __del__ methods !!)</vh>
<v t="ekr.20031218072017.442"><vh>Background</vh></v>
<v t="ekr.20031218072017.443"><vh>c.__del__</vh></v>
<v t="ekr.20031218072017.444"><vh>frame.__del__</vh></v>
<v t="ekr.20031218072017.445"><vh>t.__del__</vh></v>
<v t="ekr.20031218072017.446"><vh>v.__del__</vh></v>
<v t="ekr.20031218072017.447"><vh>tree.__del__</vh></v>
</v>
<v t="ekr.20031218072017.448"><vh>(Unused Destroy routines)</vh>
<v t="ekr.20031218072017.449"><vh>atFile.destroy</vh></v>
<v t="ekr.20031218072017.450"><vh>c.destroy</vh></v>
<v t="ekr.20031218072017.451"><vh>color.destroy</vh></v>
<v t="ekr.20031218072017.452"><vh>frame.destroy</vh></v>
<v t="ekr.20031218072017.453"><vh>import.destroy</vh></v>
<v t="ekr.20031218072017.454"><vh>leoFileCommands.destroy</vh></v>
<v t="ekr.20031218072017.455"><vh>t.destroy</vh></v>
<v t="ekr.20031218072017.456"><vh>tangle.destroy</vh></v>
<v t="ekr.20031218072017.457"><vh>tree.destroy</vh></v>
<v t="ekr.20031218072017.458"><vh>undo.destroy</vh></v>
<v t="ekr.20031218072017.459"><vh>v.destroy</vh></v>
<v t="ekr.20031218072017.460"><vh>&lt;&lt; destroy all vnodes and tnodes in the tree&gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.461"><vh>OnInsertGraphicFile</vh></v>
<v t="ekr.20031218072017.462"><vh>Scripts</vh>
<v t="ekr.20031218072017.463"><vh>Example scripts from scripts menu</vh>
<v t="ekr.20031218072017.464"><vh>show_cwd</vh></v>
<v t="ekr.20031218072017.465"><vh>importPythonFiles</vh></v>
<v t="ekr.20031218072017.466"><vh>importCwebFiles</vh></v>
</v>
<v t="ekr.20031218072017.467"><vh>Experimental distribution script</vh>
<v t="ekr.20031218072017.468"><vh> Test</vh></v>
<v t="ekr.20031218072017.469"><vh>@file distributeLeo.py</vh>
<v t="ekr.20031218072017.470"><vh>__init__</vh></v>
<v t="ekr.20031218072017.471"><vh>check</vh></v>
<v t="ekr.20031218072017.472"><vh>copyFile</vh></v>
<v t="ekr.20031218072017.473"><vh>create</vh></v>
<v t="ekr.20031218072017.474"><vh>createDir</vh></v>
<v t="ekr.20031218072017.475"><vh>createDistributionFolders</vh></v>
<v t="ekr.20031218072017.476"><vh>createFileLists</vh></v>
<v t="ekr.20031218072017.477"><vh>createZipFile</vh></v>
<v t="ekr.20031218072017.478"><vh>createTarGZFile</vh></v>
<v t="ekr.20031218072017.479"><vh>removeDir</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.480"><vh>test of Python's parser module</vh></v>
<v t="ekr.20031218072017.481"><vh>Tkinter stuff...</vh>
<v t="ekr.20031218072017.482"><vh>&lt;&lt; old code &gt;&gt; (from reformatParagraph)</vh>
<v t="ekr.20031218072017.483"><vh>&lt;&lt; Set the new insert at the start of the next paragraph &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.484"><vh>&lt;&lt; old code &gt;&gt; from getBodyLines</vh></v>
<v t="ekr.20031218072017.485"><vh>&lt;&lt; old code &gt;&gt; from updateBodyPane</vh></v>
<v t="ekr.20031218072017.486"><vh>bound_paragraph (TK stuff)</vh></v>
<v t="ekr.20031218072017.487"><vh>From leoTkinterBody</vh>
<v t="ekr.20031218072017.488"><vh>getCharAtIndex</vh></v>
<v t="ekr.20031218072017.489"><vh>getTextRange</vh></v>
</v>
<v t="ekr.20031218072017.490"><vh>getBodySelection</vh></v>
<v t="ekr.20031218072017.491"><vh>getSelectedText (no longer used)(leoGlobals.py)</vh></v>
<v t="ekr.20031218072017.492"><vh>Indices (leoTkinterBody)</vh>
<v t="ekr.20031218072017.493"><vh>compareIndices</vh></v>
<v t="ekr.20031218072017.494"><vh>convertXYToIndex</vh></v>
<v t="ekr.20031218072017.495"><vh>getInsertionPoint &amp; getBeforeInsertionPoint</vh></v>
<v t="ekr.20031218072017.496"><vh>getSelectionRange &amp; setSelectionRange</vh></v>
<v t="ekr.20031218072017.497"><vh>moveIndexbyChars/Lines</vh></v>
<v t="ekr.20031218072017.498"><vh>moveIndexToLineStart/End &amp; moveIndexToWordStart/End</vh></v>
</v>
<v t="ekr.20031218072017.499"><vh>InsertAt... &amp; replaceSelection (Replace all these by a single setBodyText routine)</vh></v>
<v t="ekr.20031218072017.500"><vh>v.Callbacks (handles event hooks)(to be eliminated)</vh>
<v t="ekr.20031218072017.501"><vh>OnBoxClick</vh></v>
<v t="ekr.20031218072017.502"><vh>OnDrag</vh></v>
<v t="ekr.20031218072017.503"><vh>v.OnEndDrag</vh></v>
<v t="ekr.20031218072017.504"><vh>v.OnHeadlineClick &amp; OnHeadlineRightClick</vh></v>
<v t="ekr.20031218072017.505"><vh>OnHeadlineKey</vh></v>
<v t="ekr.20031218072017.506"><vh>OnHyperLinkControlClick</vh></v>
<v t="ekr.20031218072017.507"><vh>OnHyperLinkEnter</vh></v>
<v t="ekr.20031218072017.508"><vh>OnHyperLinkLeave</vh></v>
<v t="ekr.20031218072017.509"><vh>OnIconClick &amp; OnIconRightClick</vh></v>
<v t="ekr.20031218072017.510"><vh>OnIconDoubleClick</vh></v>
</v>
</v>
<v t="ekr.20031218072017.511"><vh>leoFileCommands stuff...</vh>
<v t="ekr.20031218072017.512"><vh>compactFileIndices (old fileCommands code)</vh></v>
<v t="ekr.20031218072017.513"><vh>assignFileIndices (old fileCommands code)</vh></v>
<v t="ekr.20031218072017.514"><vh>Delete... (lfrom eoTkinterBody)</vh></v>
</v>
<v t="ekr.20031218072017.515"><vh>Reorg </vh>
<v t="ekr.20031218072017.516"><vh>leoDialog.py (no longer used)</vh>
<v t="ekr.20031218072017.517"><vh> class leoDialog</vh>
<v t="ekr.20031218072017.518"><vh>__init__ (leoDialog)</vh></v>
<v t="ekr.20031218072017.519"><vh>cancelButton, noButton, okButton, yesButton</vh></v>
<v t="ekr.20031218072017.520"><vh>center</vh></v>
<v t="ekr.20031218072017.521"><vh>createButtons</vh></v>
<v t="ekr.20031218072017.522"><vh>createMessageFrame</vh></v>
<v t="ekr.20031218072017.523"><vh>createTopFrame</vh></v>
<v t="ekr.20031218072017.524"><vh>run</vh></v>
</v>
<v t="ekr.20031218072017.525"><vh>class aboutLeo</vh>
<v t="ekr.20031218072017.526"><vh>aboutLeo.__init__</vh></v>
<v t="ekr.20031218072017.527"><vh>aboutLeo.createFrame</vh></v>
<v t="ekr.20031218072017.528"><vh>onAboutLeoEmail</vh></v>
<v t="ekr.20031218072017.529"><vh>onAboutLeoUrl</vh></v>
<v t="ekr.20031218072017.530"><vh>setArrowCursor, setDefaultCursor</vh></v>
</v>
<v t="ekr.20031218072017.531"><vh>class askOk</vh>
<v t="ekr.20031218072017.532"><vh>askOk.__init__</vh></v>
<v t="ekr.20031218072017.533"><vh>askOk.onKey</vh></v>
</v>
<v t="ekr.20031218072017.534"><vh>class askOkCancel</vh>
<v t="ekr.20031218072017.535"><vh>askOkCancel.__init__</vh></v>
<v t="ekr.20031218072017.536"><vh>askOkCancel.onKey</vh></v>
</v>
<v t="ekr.20031218072017.537"><vh>class askOkCancelNumber</vh>
<v t="ekr.20031218072017.538"><vh>askOKCancelNumber.__init__</vh></v>
<v t="ekr.20031218072017.539"><vh>askOKCancelNumber.createFrame</vh></v>
<v t="ekr.20031218072017.540"><vh>askOKCancelNumber.okButton, cancelButton</vh></v>
<v t="ekr.20031218072017.541"><vh>askOKCancelNumber.onKey</vh>
<v t="ekr.20031218072017.542"><vh>&lt;&lt; eliminate non-numbers &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.543"><vh>class askYesNo</vh>
<v t="ekr.20031218072017.544"><vh>askYesNo.__init__</vh></v>
<v t="ekr.20031218072017.545"><vh>askYesNo.onKey</vh></v>
</v>
<v t="ekr.20031218072017.546"><vh>class askYesNoCancel</vh>
<v t="ekr.20031218072017.547"><vh>askYesNoCancel.__init__</vh></v>
<v t="ekr.20031218072017.548"><vh>askYesNoCancel.onKey</vh></v>
<v t="ekr.20031218072017.549"><vh>askYesNoCancel.noButton &amp; yesButton</vh></v>
</v>
<v t="ekr.20031218072017.550"><vh>class listboxDialog</vh>
<v t="ekr.20031218072017.551"><vh>listboxDialog.__init__</vh></v>
<v t="ekr.20031218072017.552"><vh>addStdButtons</vh></v>
<v t="ekr.20031218072017.553"><vh>createFrame</vh></v>
<v t="ekr.20031218072017.554"><vh>destroy</vh></v>
<v t="ekr.20031218072017.555"><vh>hide</vh></v>
<v t="ekr.20031218072017.556"><vh>fillbox</vh></v>
<v t="ekr.20031218072017.557"><vh>go</vh></v>
</v>
</v>
<v t="ekr.20031218072017.558"><vh>Old frame code</vh>
<v t="ekr.20031218072017.559"><vh>File menu</vh>
<v t="ekr.20031218072017.560"><vh>OnWriteDirtyAtFileNodes</vh></v>
<v t="ekr.20031218072017.561"><vh>frame.OnQuit</vh></v>
<v t="ekr.20031218072017.562"><vh>OnWriteMissingAtFileNodes</vh></v>
<v t="ekr.20031218072017.563"><vh>OnWriteOutlineOnly</vh></v>
<v t="ekr.20031218072017.564"><vh>OnWriteAtFileNodes</vh></v>
</v>
<v t="ekr.20031218072017.565"><vh>Edit menu</vh>
<v t="ekr.20031218072017.566"><vh>OnUndo</vh></v>
<v t="ekr.20031218072017.567"><vh>OnRedo</vh></v>
<v t="ekr.20031218072017.568"><vh>OnSelectAll</vh></v>
<v t="ekr.20031218072017.569"><vh>OnConvertTabs &amp; OnConvertAllTabs</vh></v>
<v t="ekr.20031218072017.570"><vh>OnConvertBlanks &amp; OnConvertAllBlanks</vh></v>
<v t="ekr.20031218072017.571"><vh>OnDedent</vh></v>
<v t="ekr.20031218072017.572"><vh>OnIndent</vh></v>
<v t="ekr.20031218072017.573"><vh>OnEndEditHeadline</vh></v>
<v t="ekr.20031218072017.574"><vh>OnAbortEditHeadline</vh></v>
</v>
<v t="ekr.20031218072017.575"><vh>Outline menu</vh>
<v t="ekr.20031218072017.576"><vh>top...</vh>
<v t="ekr.20031218072017.577"><vh>OnCutNode</vh></v>
<v t="ekr.20031218072017.578"><vh>OnCopyNode</vh></v>
<v t="ekr.20031218072017.579"><vh>OnPasteNodee</vh></v>
<v t="ekr.20031218072017.580"><vh>OnDeleteNode</vh></v>
<v t="ekr.20031218072017.581"><vh>OnInsertNode</vh></v>
<v t="ekr.20031218072017.582"><vh>OnCloneNode</vh></v>
<v t="ekr.20031218072017.583"><vh>OnSortChildren, OnSortSiblings</vh></v>
<v t="ekr.20031218072017.584"><vh>f.OnHoist,OnDehoist</vh></v>
<v t="ekr.20031218072017.585"><vh>f.OnCheckOutline</vh></v>
</v>
<v t="ekr.20031218072017.586"><vh>No longer used</vh>
<v t="ekr.20031218072017.587"><vh>OnContractChildren (no longer used)</vh></v>
<v t="ekr.20031218072017.588"><vh>OnContractAllChildren (no longer used)</vh></v>
<v t="ekr.20031218072017.589"><vh>OnExpandAllChildren (no longer used)</vh></v>
<v t="ekr.20031218072017.590"><vh>OnExpandChildren (no longer used)</vh></v>
</v>
<v t="ekr.20031218072017.591"><vh>Expand/contract</vh>
<v t="ekr.20031218072017.592"><vh>OnContractAll</vh></v>
<v t="ekr.20031218072017.593"><vh>OnContractNode</vh></v>
<v t="ekr.20031218072017.594"><vh>OnContractParent</vh></v>
<v t="ekr.20031218072017.595"><vh>OnExpandAll</vh></v>
<v t="ekr.20031218072017.596"><vh>OnExpandNextLevel</vh></v>
<v t="ekr.20031218072017.597"><vh>OnExpandPrevLevel</vh></v>
<v t="ekr.20031218072017.598"><vh>OnExpandNode</vh></v>
<v t="ekr.20031218072017.599"><vh>OnExpandToLevel1..9</vh></v>
</v>
<v t="ekr.20031218072017.600"><vh>Move/Select</vh>
<v t="ekr.20031218072017.601"><vh>OnMoveDownwn</vh></v>
<v t="ekr.20031218072017.602"><vh>OnMoveLeft</vh></v>
<v t="ekr.20031218072017.603"><vh>OnMoveRight</vh></v>
<v t="ekr.20031218072017.604"><vh>OnMoveUp</vh></v>
<v t="ekr.20031218072017.605"><vh>OnPromote</vh></v>
<v t="ekr.20031218072017.606"><vh>OnDemote</vh></v>
<v t="ekr.20031218072017.607"><vh>OnGoPrevVisible</vh></v>
<v t="ekr.20031218072017.608"><vh>OnGoNextVisible</vh></v>
<v t="ekr.20031218072017.609"><vh>OnGoBack</vh></v>
<v t="ekr.20031218072017.610"><vh>OnGoNext</vh></v>
<v t="ekr.20031218072017.611"><vh>OnGoToNextChanged</vh></v>
<v t="ekr.20031218072017.612"><vh>OnGoToNextMarked</vh></v>
<v t="ekr.20031218072017.613"><vh>OnMark</vh></v>
<v t="ekr.20031218072017.614"><vh>OnMarkChangedItems</vh></v>
<v t="ekr.20031218072017.615"><vh>OnMarkChangedRoots</vh></v>
<v t="ekr.20031218072017.616"><vh>OnMarkClones</vh></v>
<v t="ekr.20031218072017.617"><vh>OnMarkSubheads</vh></v>
<v t="ekr.20031218072017.618"><vh>OnUnmarkAll</vh></v>
</v>
</v>
<v t="ekr.20031218072017.619"><vh>Window menu</vh>
<v t="ekr.20031218072017.620"><vh>OnToggleActivePane</vh></v>
</v>
</v>
<v t="ekr.20031218072017.621"><vh>Creating frames (from leoGui: no longer used)</vh></v>
<v t="ekr.20031218072017.622"><vh>Focus (leoGlobals)(No longer used)</vh></v>
<v t="ekr.20031218072017.623"><vh>Body edirection... (leoFrame)  REMOVED</vh>
<v t="ekr.20031218072017.624"><vh>Bounding box  (Tk spelling)</vh></v>
<v t="ekr.20031218072017.625"><vh>Color tags  (Tk spelling)</vh></v>
<v t="ekr.20031218072017.626"><vh>Configuration (Tk spelling)</vh></v>
<v t="ekr.20031218072017.627"><vh>Focus</vh></v>
<v t="ekr.20031218072017.628"><vh>Font</vh></v>
<v t="ekr.20031218072017.629"><vh>Height &amp; width info</vh></v>
<v t="ekr.20031218072017.630"><vh>Idle-time callback</vh></v>
<v t="ekr.20031218072017.631"><vh>Indices</vh></v>
<v t="ekr.20031218072017.632"><vh>Insert point</vh></v>
<v t="ekr.20031218072017.633"><vh>Menus</vh></v>
<v t="ekr.20031218072017.634"><vh>Selection</vh></v>
<v t="ekr.20031218072017.635"><vh>Text</vh>
<v t="ekr.20031218072017.636"><vh>delete...</vh></v>
<v t="ekr.20031218072017.637"><vh>get...</vh></v>
<v t="ekr.20031218072017.638"><vh>insert...</vh></v>
<v t="ekr.20031218072017.639"><vh>setSelectionAreas</vh></v>
</v>
<v t="ekr.20031218072017.640"><vh>Visibility &amp; scrolling</vh></v>
</v>
<v t="ekr.20031218072017.641"><vh>tkinter frame redirectors  REMOVED</vh>
<v t="ekr.20031218072017.642"><vh>Focus</vh></v>
</v>
<v t="ekr.20031218072017.643"><vh>Dialog utils... REMOVED</vh></v>
<v t="ekr.20031218072017.644"><vh>tree.recolor, recolor_now, recolor_range (REMOVED FROM TREE)</vh></v>
</v>
<v t="ekr.20031218072017.645"><vh>OpenWithFileName (no longer used)</vh></v>
<v t="ekr.20040117184516"><vh>Unused position code</vh>
<v t="ekr.20040117163122"><vh>getters: To be deleted: these will be replaced by __getattr__</vh>
<v t="ekr.20040117162509.1"><vh>Children</vh></v>
<v t="ekr.20040117162509.8"><vh>Status Bits</vh></v>
<v t="ekr.20040117163955.1"><vh>headline &amp; body text</vh></v>
<v t="ekr.20040117163606"><vh>Other getters</vh></v>
<v t="ekr.20040117162509.25"><vh>isRoot</vh></v>
</v>
<v t="ekr.20040117164346"><vh>setters: To be deleted: these will be replaced by __getattr__</vh>
<v t="ekr.20040117164357.1"><vh>Head and body text</vh></v>
<v t="ekr.20040117164357.7"><vh>computeIcon &amp; setIcon</vh></v>
<v t="ekr.20040117164357.8"><vh>Status bits</vh>
<v t="ekr.20040117164357.9"><vh>clearAllVisited</vh></v>
<v t="ekr.20040117164357.10"><vh>clearAllVisitedInTree</vh></v>
<v t="ekr.20040117164357.11"><vh>clearClonedBit</vh></v>
<v t="ekr.20040117164357.12"><vh>clearDirty &amp; clearDirtyJoined (redundant code)</vh></v>
<v t="ekr.20040117164357.13"><vh>clearMarked</vh></v>
<v t="ekr.20040117164357.14"><vh>clearOrphan</vh></v>
<v t="ekr.20040117164357.15"><vh>clearVisited</vh></v>
<v t="ekr.20040117164357.16"><vh>clearVisitedInTree</vh></v>
<v t="ekr.20040117164357.17"><vh>contract &amp; expand &amp; initExpandedBit</vh></v>
<v t="ekr.20040117164357.18"><vh>initStatus</vh></v>
<v t="ekr.20040117164357.19"><vh>setAncestorsOfClonedNodesInTreeDirty</vh></v>
<v t="ekr.20040117164357.20"><vh>setAncestorAtFileNodeDirty</vh></v>
<v t="ekr.20040117164357.21"><vh>setClonedBit &amp; initClonedBit</vh></v>
<v t="ekr.20040117164357.22"><vh>setDirty, setDirtyDeleted &amp; initDirtyBit (redundant code)</vh></v>
<v t="ekr.20040117164357.23"><vh>setMarked &amp; initMarkedBit</vh></v>
<v t="ekr.20040117164357.24"><vh>setOrphan</vh></v>
<v t="ekr.20040117164357.25"><vh>setSelected (vnode, new)</vh></v>
<v t="ekr.20040117164357.26"><vh>setVisited</vh></v>
</v>
<v t="ekr.20040117164357.27"><vh>setSelection</vh></v>
<v t="ekr.20040117164357.28"><vh>setT</vh></v>
<v t="ekr.20040117164357.29"><vh>trimTrailingLines</vh></v>
</v>
</v>
<v t="ekr.20040128174425"><vh>This code has now been made into a function</vh>
<v t="ekr.20031218072017.2329"><vh>&lt;&lt; Warn about @ignored and orphans  &gt;&gt; (3.x)</vh></v>
<v t="ekr.20031218072017.2120"><vh>&lt;&lt; Warn about @ignored and orphans  &gt;&gt; (4.x)</vh></v>
</v>
<v t="ekr.20040311143141"><vh>No longer used in 4.2</vh>
<v t="ekr.20040227214711.1"><vh>p.vnode getters (not used)</vh>
<v t="ekr.20040228094013.2"><vh>Easy: correspond to vnode and tnode ivars.</vh></v>
<v t="ekr.20040228094013.3"><vh>Complex</vh>
<v t="ekr.20040227221500"><vh>p.vThreadBack (slightly expensive, very complex)</vh></v>
<v t="ekr.20040227221500.1"><vh>p.vThreadNext</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2797"><vh>color.callbacks...</vh>
<v t="ekr.20031218072017.2798"><vh>OnHyperLinkControlClick</vh></v>
<v t="ekr.20031218072017.2799"><vh>OnHyperLinkEnter</vh></v>
<v t="ekr.20031218072017.2800"><vh>OnHyperLinkLeave</vh></v>
</v>
<v t="ekr.20031218072017.2221"><vh>hyperlink callbacks... (nullColorizer)</vh></v>
<v t="ekr.20031218072017.2005"><vh>fileCommands.setAllJoinLinks</vh></v>
<v t="ekr.20040303175026.23"><vh>position dummy methods:</vh></v>
<v t="ekr.20031218072017.3619"><vh>findSharedVnode</vh></v>
<v t="ekr.20040312081427"><vh>Scripts</vh>
<v t="ekr.20031218072017.3096"><vh>checkTopologyOfAllClones</vh></v>
<v t="ekr.20031218072017.1582"><vh>checkClones2Links</vh>
<v t="ekr.20031218072017.1583"><vh>&lt;&lt; clear statistics &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1584"><vh>&lt;&lt; print statistics &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1585"><vh>&lt;&lt; handle each item in v's join list &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20040312013017"><vh>From commands class</vh>
<v t="ekr.20031218072017.1763"><vh>c.initAllCloneBits &amp; c.initAllCloneBitsInTree</vh></v>
<v t="ekr.20031218072017.1764"><vh>c.initJoinedClonedBits</vh></v>
<v t="ekr.20040301213345"><vh> conversion routines for 4.2</vh>
<v t="ekr.20040301201418"><vh>c.convertTreeToSharedNodes (for conversion)</vh></v>
<v t="ekr.20040301213056"><vh>c.disableSaveCommands (for conversion)</vh></v>
</v>
</v>
<v t="ekr.20040311160938"><vh>From vnode class</vh>
<v t="ekr.20031218072017.3427"><vh>Helper functions (vnode) </vh>
<v t="ekr.20040301081957"><vh>Replaced by dummy routines in 4.2</vh>
<v t="ekr.20031218072017.3428"><vh>v.addTreeToJoinLists</vh></v>
<v t="ekr.20031218072017.3432"><vh>v.createDependents</vh></v>
<v t="ekr.20031218072017.3433"><vh>v.destroyDependents</vh></v>
<v t="ekr.20031218072017.3436"><vh>v.joinTreeTo</vh></v>
<v t="ekr.20031218072017.1648"><vh>v.unjoinTree</vh></v>
</v>
<v t="ekr.20040301081957.1"><vh>Deleted in 4.2: called only by vnode class.</vh>
<v t="ekr.20031218072017.3429"><vh>v.cloneTree</vh></v>
<v t="ekr.20031218072017.3430"><vh>v.copyCloneBitsTo</vh></v>
<v t="ekr.20031218072017.3431"><vh>v.copyTree</vh></v>
<v t="ekr.20031218072017.3434"><vh>v.destroyTree (does nothing!)</vh></v>
<v t="ekr.20031218072017.1647"><vh>v.joinNodeTo</vh></v>
<v t="ekr.20031218072017.3437"><vh>v.shouldBeClone</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3416"><vh>Moving, Inserting, Deleting, Cloning, Sorting (to position class)</vh>
<v t="ekr.20031218072017.3417"><vh>Entry Points (vnode)</vh>
<v t="ekr.20031218072017.3423"><vh>restoreOutlineFromDVnodes NOT USED</vh></v>
<v t="ekr.20031218072017.3424"><vh>v.clone</vh></v>
<v t="ekr.20031218072017.1574"><vh>v.copyTreeWithNewTnodes: used by unit tests</vh></v>
<v t="ekr.20031218072017.3418"><vh>v.doDelete</vh></v>
<v t="ekr.20031218072017.3420"><vh>v.insertAsLastChild</vh></v>
<v t="ekr.20031218072017.2354"><vh>v.moveAfter</vh></v>
<v t="ekr.20031218072017.1192"><vh>v.moveToNthChildOf</vh></v>
<v t="ekr.20031218072017.1191"><vh>v.sortChildren</vh></v>
<v t="ekr.20031218072017.818"><vh>validateOutlineWithParent</vh>
<v t="ekr.20031218072017.819"><vh>&lt;&lt; validate parent ivar &gt;&gt;</vh></v>
<v t="ekr.20031218072017.820"><vh>&lt;&lt; validate childIndex ivar &gt;&gt;</vh></v>
<v t="ekr.20031218072017.821"><vh>&lt;&lt; validate x ivar &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3435"><vh>v.invalidOutline</vh></v>
</v>
</v>
<v t="ekr.20040306214240.1"><vh>Not used in 4.2 (vnode)</vh>
<v t="ekr.20031218072017.2048"><vh>v.isAncestorOf</vh></v>
<v t="ekr.20031218072017.3382"><vh>v,isRoot</vh></v>
<v t="ekr.20031218072017.3383"><vh>v.exists</vh></v>
</v>
<v t="ekr.20031218072017.3405"><vh>Tree Traversal (to position class)</vh>
<v t="ekr.20031218072017.3407"><vh>lastNode</vh></v>
<v t="ekr.20031218072017.3408"><vh>level</vh></v>
<v t="ekr.20031218072017.3410"><vh>nodeAfterTree</vh></v>
<v t="ekr.20031218072017.3411"><vh>parent</vh></v>
<v t="ekr.20031218072017.3412"><vh>threadBack</vh></v>
<v t="ekr.20031218072017.3413"><vh>threadNext</vh></v>
<v t="ekr.20031218072017.3414"><vh>visBack</vh></v>
<v t="ekr.20031218072017.3415"><vh>visNext</vh></v>
</v>
<v t="ekr.20031218072017.3387"><vh>v.clearAllVisited</vh></v>
<v t="ekr.20040129153428"><vh>v.setAllAncestorAtFileNodesDirty</vh></v>
<v t="ekr.20031218072017.1186"><vh>v.setAncestorAtFileNodeDirty</vh></v>
<v t="ekr.20031218072017.1185"><vh>v.setAncestorsOfClonedNodesInTreeDirty</vh></v>
<v t="ekr.20031218072017.1187"><vh>v.setDirty, setDirtyDeleted &amp; initDirtyBit </vh></v>
<v t="ekr.20040309041436.2"><vh>vnode iterators not defined in 4.2</vh>
<v t="ekr.20040307073708.1"><vh>allNodes_iter</vh>
<v t="ekr.20040307073708.2"><vh>__init__ &amp; __iter__</vh></v>
<v t="ekr.20040307073708.3"><vh>next</vh></v>
</v>
<v t="ekr.20040307073708.4"><vh>subtree_iter</vh>
<v t="ekr.20040307073708.5"><vh>__init__ &amp; __iter__</vh></v>
<v t="ekr.20040307073708.6"><vh>next</vh></v>
</v>
<v t="ekr.20040307073708.10"><vh>parents_iter</vh>
<v t="ekr.20040307073708.11"><vh>__init__ &amp; __iter__</vh></v>
<v t="ekr.20040307073708.12"><vh>next</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
<v t="ekr.20040309144438"><vh>QOTM</vh></v>
<v t="ekr.20031218072017.646"><vh> To do...</vh>
<v t="ekr.20031218072017.647"><vh>  Tasks</vh></v>
<v t="ekr.20031218072017.648"><vh> Help wanted</vh>
<v t="ekr.20031218072017.649"><vh>Add more unit tests to leoTests.py</vh></v>
</v>
<v t="ekr.20031218072017.663"><vh> Known bugs: can't be fixed</vh>
<v t="ekr.20031218072017.664"><vh>Cut/paste bug on X windows (waiting for help)</vh>
<v t="ekr.20031218072017.665"><vh>(Cut &amp; Paste ) (Middle-button bug reported by Timo)</vh>
<v t="ekr.20031218072017.666"><vh> Paste bug report</vh></v>
<v t="ekr.20031218072017.667"><vh> Test</vh></v>
</v>
<v t="ekr.20031218072017.668"><vh>Automatic select &amp; Paste bug (Linux?)</vh></v>
</v>
<v t="ekr.20031218072017.669"><vh>Linux-only Bugs</vh>
<v t="ekr.20031218072017.670"><vh>Possible webbrowser bug</vh></v>
<v t="ekr.20031218072017.671"><vh>Fix horiz scrollbar bug when tiling horizontally</vh></v>
<v t="ekr.20031218072017.672"><vh>Control-V doesn't work on Linux</vh></v>
</v>
<v t="ekr.20031218072017.673"><vh>Tk bugs</vh>
<v t="ekr.20031218072017.674"><vh>Caps lock affects keyboard shortcuts on Windows</vh></v>
<v t="ekr.20031218072017.675"><vh>Tree problems</vh></v>
<v t="ekr.20031218072017.676"><vh>Control-T can't be overridden in canvas text.</vh></v>
<v t="ekr.20031218072017.677"><vh>(Alt-ctrl = Alt)</vh></v>
<v t="ekr.20031218072017.678"><vh>Report Tk bugs</vh>
<v t="ekr.20031218072017.679"><vh>Tk code</vh>
<v t="ekr.20031218072017.680"><vh>@file c:/prog/test/leoSplitter.tcl</vh>
<v t="ekr.20031218072017.681"><vh>go</vh></v>
<v t="ekr.20031218072017.682"><vh>createLeo</vh></v>
<v t="ekr.20031218072017.683"><vh>createMenus</vh></v>
<v t="ekr.20031218072017.684"><vh>createSplitter</vh>
<v t="ekr.20031218072017.685"><vh>createSplitter</vh></v>
<v t="ekr.20031218072017.686"><vh>onGrabSplitterBar</vh></v>
<v t="ekr.20031218072017.687"><vh>onDropSplitterBar</vh></v>
<v t="ekr.20031218072017.688"><vh>onDragSplitterBar</vh></v>
<v t="ekr.20031218072017.689"><vh>divideSplitter</vh></v>
</v>
<v t="ekr.20031218072017.690"><vh>createFindPanel</vh>
<v t="ekr.20031218072017.691"><vh>&lt;&lt; Create the Find and Change panes &gt;&gt;</vh></v>
<v t="ekr.20031218072017.692"><vh>&lt;&lt; Create two columns of checkboxes &gt;&gt;</vh></v>
<v t="ekr.20031218072017.693"><vh>&lt;&lt; Create two rows of buttons &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.694"><vh>createPrefsPanel</vh>
<v t="ekr.20031218072017.695"><vh>&lt;&lt; Create the Global Options frame &gt;&gt;</vh></v>
<v t="ekr.20031218072017.696"><vh>&lt;&lt; Create the Tangle Options frame &gt;&gt;</vh></v>
<v t="ekr.20031218072017.697"><vh>&lt;&lt; Create the Target Language frame &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.698"><vh>createColorPanel</vh></v>
<v t="ekr.20031218072017.699"><vh>createFontPanel</vh>
<v t="ekr.20031218072017.700"><vh>&lt;&lt; create family pane &gt;&gt;</vh></v>
<v t="ekr.20031218072017.701"><vh>&lt;&lt; create style pane &gt;&gt;</vh></v>
<v t="ekr.20031218072017.702"><vh>&lt;&lt; create buttons &gt;&gt;</vh></v>
<v t="ekr.20031218072017.703"><vh>&lt;&lt; create size pane &gt;&gt;</vh></v>
<v t="ekr.20031218072017.704"><vh>&lt;&lt; create sample pane &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.705"><vh>dkffontCreateFontPanel</vh>
<v t="ekr.20031218072017.706"><vh>get_accel</vh></v>
<v t="ekr.20031218072017.707"><vh>get_gap</vh></v>
<v t="ekr.20031218072017.708"><vh>list_families</vh></v>
</v>
<v t="ekr.20031218072017.709"><vh>createComparePanel</vh></v>
<v t="ekr.20031218072017.710"><vh>createWindowWithCursor</vh></v>
<v t="ekr.20031218072017.711"><vh>createWindowWithIcon</vh></v>
<v t="ekr.20031218072017.712"><vh>myFrame</vh></v>
<v t="ekr.20031218072017.713"><vh>tk labeled frames</vh></v>
</v>
<v t="ekr.20031218072017.714"><vh>tkBugs.tcl</vh>
<v t="ekr.20031218072017.715"><vh>@file c:/prog/test/tkBugs.tcl</vh>
<v t="ekr.20031218072017.716"><vh>canvasBug</vh></v>
<v t="ekr.20031218072017.717"><vh>bindBug</vh></v>
</v>
</v>
</v>
</v>
<v t="ekr.20031218072017.718"><vh>(tab bug)</vh>
<v t="ekr.20040117092727"><vh>This is definitely a Tk bug</vh></v>
<v t="ekr.20040118090055"><vh>Patch and bug report</vh></v>
<v t="ekr.20031218072017.719"><vh>Report</vh></v>
<v t="ekr.20040105070023.5"><vh>Report 2</vh></v>
<v t="ekr.20031218072017.720"><vh>Minimal test</vh></v>
<v t="ekr.20031218072017.721"><vh>Test File for Non Expanding Tabs</vh></v>
<v t="ekr.20031218072017.722"><vh>setTabWidth</vh></v>
</v>
</v>
<v t="ekr.20031218072017.723"><vh>Bugs: can't recreate</vh>
<v t="ekr.20031218072017.724"><vh>(Uppercase bug) (Can't recreate)</vh>
<v t="ekr.20031218072017.725"><vh>Report (I can't recreate this)</vh></v>
</v>
</v>
<v t="ekr.20031218072017.726"><vh>Put the setup stuff in the dist folder where they belong</vh></v>
<v t="ekr.20040129133809.8"><vh>top node not saved</vh>
<v t="ekr.20040130174232"><vh>What I did</vh></v>
<v t="ekr.20031218072017.1579"><vh>putVnodes</vh></v>
<v t="ekr.20031218072017.1566"><vh>getVnode changed for 4.2)</vh>
<v t="ekr.20031218072017.1567"><vh>&lt;&lt; Handle vnode attribute bits  &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1568"><vh>&lt;&lt; Set the remembered status bits &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1863"><vh>putVnode (3.x and 4.x)</vh>
<v t="ekr.20031218072017.1864"><vh>&lt;&lt; Put tnode index &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1865"><vh>&lt;&lt; Put attribute bits &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1866"><vh>&lt;&lt; write the head text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1867"><vh>&lt;&lt; put unknown vnode attributes &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2297"><vh>fileCommands.open</vh>
<v t="ekr.20031218072017.2298"><vh>&lt;&lt; Set the default directory &gt;&gt; in fileCommands.readOutlineOnly</vh></v>
</v>
<v t="ekr.20031218072017.3030"><vh>fileCommands.readOutlineOnly</vh>
<v t="ekr.20031218072017.2298"><vh>&lt;&lt; Set the default directory &gt;&gt; in fileCommands.readOutlineOnly</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.727"><vh> Things I'd like to see...</vh>
<v t="ekr.20031218072017.729"><vh>HTML rendering in standard Tk Text widget</vh></v>
<v t="ekr.20031218072017.730"><vh>Leo in Emacs</vh></v>
<v t="ekr.20031218072017.731"><vh>HTML plugin: opml</vh></v>
</v>
<v t="ekr.20031218072017.732"><vh>1. Major improvements</vh>
<v t="ekr.20031218072017.658"><vh>Resolve Conflicts command</vh>
<v t="ekr.20031218072017.659"><vh>Jonathon 1</vh></v>
<v t="ekr.20031218072017.660"><vh>Jonathan 2</vh></v>
<v t="ekr.20031218072017.661"><vh>Gil 1</vh></v>
<v t="ekr.20031218072017.662"><vh>Gil 2</vh></v>
</v>
<v t="ekr.20031218072017.737"><vh>Leo &amp; data bases</vh></v>
<v t="ekr.20040217152936"><vh>Shared tnode: see projects</vh></v>
<v t="ekr.20040217152936.1"><vh>Incremental drawing of outline pane: see projects</vh></v>
<v t="ekr.20040217153407"><vh>User customizeable tangling and untangling</vh>
<v t="ekr.20031218072017.805"><vh>Allow other section delims besides &lt;&lt; and &gt;&gt;</vh></v>
<v t="ekr.20031218072017.803"><vh>@template directive?</vh></v>
<v t="ekr.20031218072017.795"><vh>Metatags</vh></v>
</v>
<v t="ekr.20040217153407.1"><vh>Unify @root and @file:  make @file as flexible as @root</vh></v>
<v t="ekr.20040217153407.2"><vh>Other guis</vh>
<v t="ekr.20031218072017.811"><vh>Split panes (could be done in gui plugins)</vh></v>
</v>
<v t="ekr.20031218072017.739"><vh>Support @file-thin</vh></v>
</v>
<v t="ekr.20031218072017.738"><vh>2. Other improvements</vh>
<v t="ekr.20031218072017.740"><vh>Disallow writes outside a "top-level" folder</vh></v>
<v t="ekr.20031218072017.742"><vh>Show diffs of changed node in top_df.read</vh></v>
<v t="ekr.20031218072017.743"><vh>Note windows</vh></v>
<v t="ekr.20031218072017.745"><vh>@@first &lt;n&gt;</vh></v>
<v t="ekr.20031218072017.746"><vh>Minimizing/maximizing windows</vh></v>
<v t="ekr.20031218072017.747"><vh>Mutliple cut/paste buffers?</vh></v>
<v t="ekr.20031218072017.748"><vh>Import/Export to yaml</vh></v>
<v t="ekr.20031218072017.754"><vh>Open text files in text window</vh></v>
<v t="ekr.20031218072017.755"><vh>Delay converting tabs to spaces</vh></v>
<v t="ekr.20031218072017.756"><vh>More support for integrated debugging (bdb plugin?)</vh></v>
<v t="ekr.20031218072017.757"><vh>Calltips</vh>
<v t="ekr.20031218072017.758"><vh>Study for Tooltips/Auto-completion</vh>
<v t="ekr.20031218072017.759"><vh>Writing an Idle extension</vh></v>
<v t="ekr.20031218072017.760"><vh>config.txt</vh></v>
<v t="ekr.20031218072017.761"><vh>AutoExpand.py (idle extension)</vh>
<v t="ekr.20031218072017.762"><vh>&lt;&lt; decls &gt;&gt;</vh></v>
<v t="ekr.20031218072017.763"><vh>__init__</vh></v>
<v t="ekr.20031218072017.764"><vh>expand_word_event</vh></v>
<v t="ekr.20031218072017.765"><vh>getwords</vh></v>
<v t="ekr.20031218072017.766"><vh>getprevword</vh></v>
</v>
<v t="ekr.20031218072017.767"><vh>CallTips.py (idle extension)</vh>
<v t="ekr.20031218072017.768"><vh>&lt;&lt; class CallTips members &gt;&gt;</vh>
<v t="ekr.20031218072017.769"><vh> data members</vh></v>
<v t="ekr.20031218072017.770"><vh>__init__</vh></v>
<v t="ekr.20031218072017.771"><vh>close</vh></v>
<v t="ekr.20031218072017.772"><vh>_make_tk_calltip_window</vh></v>
<v t="ekr.20031218072017.773"><vh>_remove_calltip_window</vh></v>
<v t="ekr.20031218072017.774"><vh>paren_open_event</vh></v>
<v t="ekr.20031218072017.775"><vh>paren_close_event</vh></v>
<v t="ekr.20031218072017.776"><vh>check_calltip_cancel_event</vh></v>
<v t="ekr.20031218072017.777"><vh>calltip_cancel_event</vh></v>
<v t="ekr.20031218072017.778"><vh>get_object_at_cursor</vh></v>
</v>
<v t="ekr.20031218072017.779"><vh>_find_constructor</vh></v>
<v t="ekr.20031218072017.780"><vh>get_arg_text</vh>
<v t="ekr.20031218072017.781"><vh>&lt;&lt; set fob depending on the type of ob &gt;&gt;</vh></v>
<v t="ekr.20031218072017.782"><vh>&lt;&lt; get argText for functions and lambdas &gt;&gt;</vh></v>
<v t="ekr.20031218072017.783"><vh>&lt;&lt; append the docstring if it exists &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.784"><vh>Test code</vh></v>
</v>
</v>
<v t="ekr.20031218072017.785"><vh>Test</vh></v>
<v t="ekr.20031218072017.816"><vh>call tips to extend headlines</vh></v>
</v>
<v t="ekr.20040217154256"><vh>Autocompletion</vh>
<v t="ekr.20031218072017.798"><vh>@dictionary</vh></v>
</v>
<v t="ekr.20031218072017.809"><vh>regex replace</vh></v>
</v>
<v t="ekr.20031218072017.786"><vh>3. Minor improvements</vh>
<v t="ekr.20031218072017.787"><vh>Use @nocolor when no explicit @language is in effect ??</vh></v>
<v t="ekr.20031218072017.790"><vh>Import dialog improvements</vh></v>
<v t="ekr.20031218072017.791"><vh>automatic "tab nanny" and syntax checking of Python code</vh></v>
<v t="ekr.20031218072017.793"><vh>Keep right panes constant when tiling horizontally</vh></v>
<v t="ekr.20031218072017.796"><vh>More compare options</vh></v>
<v t="ekr.20031218072017.797"><vh>do @file http &amp; @file ftp</vh></v>
<v t="ekr.20031218072017.800"><vh>Enhancements to extract section</vh></v>
<v t="ekr.20031218072017.801"><vh>Zipped .leo files</vh></v>
</v>
<v t="ekr.20031218072017.802"><vh>4. Might do: don't count on it</vh>
<v t="ekr.20031218072017.804"><vh>Add slots to Leo classes</vh></v>
<v t="ekr.20031218072017.807"><vh>Put up file dialog on empty @url, etc.</vh></v>
<v t="ekr.20031218072017.808"><vh>Recording sessions and ways to create clones</vh></v>
<v t="ekr.20031218072017.810"><vh>Remote access Scott Powell</vh></v>
</v>
<v t="ekr.20031218072017.813"><vh>5. Can't do</vh>
<v t="ekr.20031218072017.814"><vh>Import multiple files</vh></v>
<v t="ekr.20031218072017.815"><vh>add mutex so only one copy of Leo will run</vh></v>
</v>
<v t="ekr.20031218072017.817"><vh>Unit Testing: Ongoing</vh>
<v t="ekr.20031218072017.818"><vh>validateOutlineWithParent</vh>
<v t="ekr.20031218072017.819"><vh>&lt;&lt; validate parent ivar &gt;&gt;</vh></v>
<v t="ekr.20031218072017.820"><vh>&lt;&lt; validate childIndex ivar &gt;&gt;</vh></v>
<v t="ekr.20031218072017.821"><vh>&lt;&lt; validate x ivar &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.822"><vh>createTopologyList</vh></v>
<v t="ekr.20031218072017.823"><vh>unittest urls</vh>
<v t="ekr.20031218072017.824"><vh>@url http://www.python.org/doc/current/lib/module-unittest.html</vh></v>
<v t="ekr.20031218072017.825"><vh>@url http://diveintopython.org/roman_divein.html</vh></v>
<v t="ekr.20031218072017.826"><vh>@folder-read-only c:/Python22/Lib/Test contains many test suites</vh></v>
</v>
</v>
<v t="ekr.20031218072017.827"><vh>To do: 4.3</vh>
<v t="ekr.20040220100517"><vh>To do first</vh></v>
<v t="ekr.20040227211451"><vh>To do soon</vh>
<v t="ekr.20040225061559"><vh>Look at older config files when reading config data the first time for a new install</vh></v>
<v t="ekr.20040225061559.1"><vh>Change message when derived file not found</vh></v>
<v t="ekr.20040226085005"><vh>Java tips</vh></v>
<v t="ekr.20040226092546"><vh>Saving .leo files with file compression</vh></v>
<v t="ekr.20040226094105"><vh>Put the scrollWheel workaround in the FAQ (or in the code??)</vh>
<v t="ekr.20040226094105.1"><vh>halw</vh></v>
<v t="ekr.20040226094105.2"><vh>djsg</vh></v>
<v t="ekr.20040226094105.3"><vh>The actual workaround</vh></v>
</v>
<v t="ekr.20040226100415"><vh>Why are gnx's not using 4-digit years?</vh></v>
<v t="ekr.20040226105601"><vh>Design for new config system (alpaha, etc.) Tom</vh>
<v t="ekr.20040227053137"><vh>More alpha stuff</vh></v>
</v>
<v t="ekr.20040226114127"><vh>Zope test</vh></v>
</v>
<v t="ekr.20040217090833"><vh>Change how Open with works?</vh></v>
<v t="ekr.20031218072017.753"><vh>Emacs comint-mode:  Execute script does this?</vh></v>
<v t="ekr.20040217152557"><vh>Defining features of 4.2</vh>
<v t="ekr.20031218072017.828"><vh>Rewrite the config manager</vh>
<v t="ekr.20031218072017.792"><vh>Double Click Node command</vh></v>
<v t="ekr.20040105080119"><vh>Search for settings in various places: Rodrigo</vh></v>
<v t="ekr.20040208112836"><vh>Specify shortcuts, ampersand bindings &amp; translations in the same place</vh></v>
<v t="ekr.20040212094034"><vh>Another comment</vh></v>
<v t="ekr.20040213060739"><vh>Config stuff</vh></v>
<v t="ekr.20040216153659.1"><vh>Find some way to translate all other Leo messages.</vh></v>
<v t="ekr.20031218072017.651"><vh>Suggestion from RodrigoB</vh></v>
<v t="ekr.20031218072017.652"><vh>Add settings menu</vh>
<v t="ekr.20031218072017.653"><vh>Notes</vh></v>
<v t="ekr.20031218072017.654"><vh>Cleanup prefs code?</vh></v>
</v>
<v t="ekr.20031218072017.655"><vh>multiple copies of leoConfig.txt</vh></v>
<v t="ekr.20031218072017.656"><vh>Different fonts for Linux/Mac</vh></v>
</v>
<v t="ekr.20031218072017.734"><vh>Rewrite colorizer to use jEdit language descriptionfiles</vh>
<v t="ekr.20031218072017.735"><vh>Option: case insensitive keywords</vh></v>
</v>
<v t="ekr.20040217153407.3"><vh>Emacs-style keystroke handling</vh>
<v t="ekr.20031218072017.806"><vh>Auto-completion (probably won't be done)</vh></v>
<v t="ekr.20031218072017.789"><vh>Delay body display so alt+arrow keys aren't slowed</vh></v>
<v t="ekr.20031218072017.749"><vh>Meta key</vh>
<v t="ekr.20031218072017.750"><vh>Comments</vh></v>
<v t="ekr.20031218072017.751"><vh>Request</vh></v>
<v t="ekr.20031218072017.752"><vh>From Brian Theado</vh></v>
</v>
</v>
<v t="ekr.20031218072017.830"><vh>Finish wx plugin &amp; improve how Leo uses indices</vh></v>
<v t="ekr.20040129080202"><vh>Mac/Linux  bugs</vh>
<v t="ekr.20040212094121"><vh>Fit window on screen command</vh></v>
<v t="ekr.20040105080119.1"><vh>Linux bug: paste does not work in find panel</vh></v>
<v t="ekr.20040105070616.2"><vh>Mac bugs</vh></v>
<v t="ekr.20040206080140"><vh>Make sure find panel goes to background</vh></v>
<v t="ekr.20040117112808.1"><vh>small bug in install script</vh></v>
<v t="ekr.20040117112213"><vh>config problem on Linux</vh></v>
<v t="ekr.20040115162445.1"><vh>Backspace problems on Linux</vh>
<v t="ekr.20040115162445.2"><vh>Dave Hein: fix</vh></v>
</v>
<v t="ekr.20040104162835.18"><vh>Bug: vpython and mac</vh></v>
<v t="ekr.20040207170503"><vh>double-paste in searchbox</vh></v>
</v>
</v>
<v t="ekr.20040130171643"><vh>Other features of 4.2</vh>
<v t="ekr.20040217153743"><vh>Most interesting</vh>
<v t="ekr.20040217164441"><vh>Support for multiple icons in outline pane</vh></v>
<v t="ekr.20040106122602"><vh>Install Leo in the site-packages directory</vh></v>
<v t="ekr.20031218072017.736"><vh>Use xml parser to read .leo files</vh></v>
<v t="ekr.20031218072017.853"><vh>More intelligent untangling of clones</vh></v>
<v t="ekr.20031218072017.856"><vh>context menu in body pane</vh></v>
<v t="ekr.20031218072017.733"><vh>Execute scripts like IDE's do</vh></v>
</v>
<v t="ekr.20040212082826"><vh>Others</vh>
<v t="ekr.20031218072017.794"><vh>LeoDocs.leo -&gt; html or latex</vh></v>
<v t="ekr.20031218072017.744"><vh>@tab, @notab (or make @tabwidth -n work again)</vh></v>
<v t="ekr.20040104200407"><vh>Add @language html when importing html files</vh></v>
<v t="ekr.20040105080119.4"><vh>put back"draw-outline-text-box" hook</vh></v>
<v t="ekr.20040107090747.1"><vh>Add @nocolor when importing text files</vh></v>
<v t="ekr.20040118101339.1"><vh>Plugins to add</vh>
<v t="ekr.20040130185920.1"><vh>Add incremental search to search plugin</vh></v>
<v t="ekr.20040125114744"><vh>Michael Dawson: Leo to docbook xml plugin</vh></v>
</v>
<v t="ekr.20040203075059"><vh>use pos linestart + 1 liness to go to next line??</vh></v>
<v t="ekr.20031218072017.852"><vh>Scroll improvement</vh></v>
<v t="ekr.20031218072017.833"><vh>Use @file extension by default if no @language</vh></v>
<v t="ekr.20031218072017.834"><vh>Secondary icons: use for marks?</vh></v>
<v t="ekr.20031218072017.835"><vh>(Use pywin extensions to improve cut/paste between apps)</vh>
<v t="ekr.20031218072017.836"><vh>updateEditMenu</vh>
<v t="ekr.20040130164211"><vh>&lt;&lt; enable cut/paste &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.837"><vh> tkinterGui.__init__</vh></v>
<v t="ekr.20031218072017.838"><vh>tkBody.createBindings</vh></v>
<v t="ekr.20031218072017.839"><vh>&lt;&lt; define editMenuTopTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.840"><vh>Cut/Copy/Paste body text</vh>
<v t="ekr.20031218072017.841"><vh>frame.OnCut, OnCutFrom Menu</vh></v>
<v t="ekr.20031218072017.842"><vh>frame.OnCopy, OnCopyFromMenu</vh></v>
<v t="ekr.20031218072017.843"><vh>frame.OnPaste, OnPasteNode, OnPasteFromMenu</vh></v>
</v>
<v t="ekr.20031218072017.844"><vh>Clipboard (tkGui)</vh>
<v t="ekr.20031218072017.845"><vh>replaceClipboardWith</vh></v>
<v t="ekr.20031218072017.846"><vh>getTextFromClipboard</vh></v>
</v>
</v>
<v t="ekr.20040106115311"><vh>Expanding the +- box</vh></v>
<v t="ekr.20040115163454"><vh>@killcolor directive</vh></v>
<v t="ekr.20040108153757"><vh>Make the find panel smaller</vh></v>
<v t="ekr.20031218072017.859"><vh>Should mouse up cancel a drag?</vh></v>
<v t="ekr.20040208095208"><vh>Mark Task &amp; Clone To Task commands</vh></v>
<v t="ekr.20040206075634.1"><vh>Colorizing additions</vh>
<v t="ekr.20040217154134"><vh>XML as a @language</vh></v>
<v t="ekr.20040117111755"><vh>css support</vh></v>
<v t="ekr.20040117113539.1"><vh>Coloring for Shell Scripts (Davide)</vh>
<v t="ekr.20040118101339.4"><vh>changes to add colorizer support to shell scripts</vh>
<v t="ekr.20040118101339.5"><vh>&lt;&lt; define global data structures &gt;&gt; app</vh></v>
<v t="ekr.20040118101339.6"><vh>&lt;&lt; Create the Target Language frame &gt;&gt; frame</vh></v>
<v t="ekr.20040118101339.7"><vh>&lt;&lt; configure language-specific settings &gt;&gt; colorizer</vh></v>
<v t="ekr.20040118101339.8"><vh>&lt;&lt; define colorizer keywords &gt;&gt; colorizer</vh>
<v t="ekr.20040118101339.9"><vh>&lt;&lt; actionscript keywords &gt;&gt;</vh></v>
<v t="ekr.20040118101339.10"><vh>&lt;&lt; c keywords &gt;&gt;</vh></v>
<v t="ekr.20040118101339.11"><vh>&lt;&lt; elisp keywords&gt;&gt;</vh></v>
<v t="ekr.20040118101339.12"><vh>&lt;&lt; html keywords &gt;&gt;</vh></v>
<v t="ekr.20040118101339.13"><vh>&lt;&lt; java keywords &gt;&gt;</vh></v>
<v t="ekr.20040118101339.14"><vh>&lt;&lt; latex keywords &gt;&gt;</vh></v>
<v t="ekr.20040118101339.15"><vh>&lt;&lt; pascal keywords &gt;&gt;</vh></v>
<v t="ekr.20040118101339.16"><vh>&lt;&lt; perl keywords &gt;&gt;</vh></v>
<v t="ekr.20040118101339.17"><vh>&lt;&lt; php keywords &gt;&gt;</vh></v>
<v t="ekr.20040118101339.18"><vh>&lt;&lt; python keywords &gt;&gt;</vh></v>
<v t="ekr.20040118101339.19"><vh>&lt;&lt; rebol keywords &gt;&gt;</vh></v>
<v t="ekr.20040118101339.20"><vh>&lt;&lt; tcl/tk keywords &gt;&gt;</vh></v>
<v t="ekr.20040118101339.21"><vh>&lt;&lt; shell keywords &gt;&gt;</vh></v>
</v>
<v t="ekr.20040118101339.22"><vh>&lt;&lt; handle single-line comment &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20040106145421"><vh>PHP syntax coloring</vh></v>
</v>
<v t="ekr.20040213051400"><vh>Restore drawing hooks</vh></v>
<v t="ekr.20040213090121"><vh>Insert at end</vh></v>
<v t="ekr.20040216153243.5"><vh>Select All in headline affects body text</vh>
<v t="ekr.20031218072017.839"><vh>&lt;&lt; define editMenuTopTable &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20040105064959"><vh>Possible bugs: can wait</vh>
<v t="ekr.20040115165036"><vh>bug in xml doc parts (hard to fix?)</vh>
<v t="ekr.20040115165036.1"><vh>Demo XML comment bug</vh></v>
<v t="ekr.20040115165036.3" tnodeList="ekr.20040115165036.3"><vh>@file xmlcommentbug.xml</vh></v>
<v t="ekr.20040115165036.4"><vh>xmlcommentbug.xml</vh></v>
</v>
<v t="ekr.20040125114453"><vh>Import bug?control-alt-f of python code misalloctes code (waiting for answer)</vh></v>
<v t="ekr.20040129080256.1"><vh>(Import bugs: fixed??)</vh>
<v t="ekr.20040125114612"><vh>Can't import extensionless file: works on Windows</vh></v>
<v t="ekr.20040105103517"><vh>Importing @file issues</vh>
<v t="ekr.20040129094501"><vh>Reports</vh>
<v t="ekr.20040129100453"><vh>Imported @files have an extra newline in the body</vh></v>
<v t="ekr.20040129100453.1"><vh>@last fails with multiple newlines</vh></v>
<v t="ekr.20040129100453.2"><vh>derived files with @last always end with a newline character</vh></v>
</v>
<v t="ekr.20040105103916"><vh>Fix?</vh></v>
<v t="ekr.20031218072017.3243"><vh>&lt;&lt; Append file if not pure PHP &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3242"><vh>scanPHPText (Dave Hein)</vh>
<v t="ekr.20031218072017.3243"><vh>&lt;&lt; Append file if not pure PHP &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3244"><vh>&lt;&lt; define scanPHPText vars &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3245"><vh>&lt;&lt; handle possible heredoc string &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3246"><vh>&lt;&lt; handle possible PHP comments &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3247"><vh>&lt;&lt; handle possible class or function &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3248"><vh>&lt;&lt; handle end of class &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3249"><vh>&lt;&lt; Append any unused text to the parent's body text &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20040129133809.5"><vh>Expand/contract may not work after drag (works for me)</vh></v>
</v>
<v t="ekr.20040218053305"><vh>Fix names of Leo windows</vh></v>
<v t="ekr.20040220110030"><vh>Change cursor when caps lock is down</vh></v>
</v>
<v t="ekr.20031218072017.855"><vh>Other: 4.4?</vh>
<v t="ekr.20031218072017.829"><vh>gui interface for plugins manager</vh></v>
<v t="ekr.20040124074218.3"><vh>pyGtk plugin</vh></v>
<v t="ekr.20031218072017.847"><vh>Cleanup</vh>
<v t="ekr.20031218072017.862"><vh>Add option to nullFrame class</vh></v>
<v t="ekr.20040124073801"><vh>Add nullConfig class?</vh></v>
<v t="ekr.20031218072017.848"><vh>Cleanup Pychecker stuff</vh></v>
<v t="ekr.20031218072017.849"><vh>Cleanup undo logic</vh></v>
</v>
<v t="ekr.20040216054459"><vh>@h @f @endh and @endf directives</vh></v>
</v>
<v t="ekr.20040206085827"><vh>5.0</vh>
<v t="ekr.20040130073846.1"><vh>Have all atFile write classes (except top?) have a common base class</vh></v>
<v t="ekr.20040130073846"><vh>Use only Python indices</vh>
<v t="ekr.20040105120208.1"><vh>Use string.find or re.find instead of tk.find</vh></v>
</v>
</v>
<v t="ekr.20040123102724"><vh>Requests</vh>
<v t="ekr.20040119170255"><vh>Syntax coloring for Python</vh>
<v t="ekr.20040123102724.1"><vh>links</vh></v>
<v t="ekr.20040119170255.1"><vh>description</vh></v>
<v t="ekr.20040119170255.2"><vh>code</vh>
<v t="ekr.20040119170255.3"><vh>test</vh></v>
<v t="ekr.20040119170255.4"><vh>class Parser</vh>
<v t="ekr.20040119170255.5"><vh>&lt;&lt; define constants &gt;&gt;</vh></v>
<v t="ekr.20040119170255.6"><vh>__init__</vh></v>
<v t="ekr.20040119170255.8"><vh>__call__</vh></v>
<v t="ekr.20040119170255.7"><vh>format</vh></v>
</v>
</v>
</v>
<v t="ekr.20040123102724.2"><vh>Template requests</vh>
<v t="ekr.20040123102724.3"><vh>daliuslt</vh></v>
<v t="ekr.20040123102724.4"><vh>Rich: @constant</vh></v>
<v t="ekr.20040123102724.5"><vh>paulpaterson</vh></v>
<v t="ekr.20040123102724.6"><vh>daliuslt</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.863"><vh>(Project Views)</vh>
<v t="ekr.20031218072017.864"><vh>  Reports</vh>
<v t="ekr.20031218072017.865"><vh>(Translation problems)</vh>
<v t="ekr.20031218072017.866"><vh> Report</vh></v>
<v t="ekr.20031218072017.867"><vh> Report 2</vh></v>
</v>
<v t="ekr.20031218072017.868"><vh>(Control-T switches letters in headlines)</vh></v>
</v>
<v t="ekr.20031218072017.869"><vh>  Tests</vh>
<v t="ekr.20031218072017.870"><vh> Open With...</vh>
<v t="ekr.20031218072017.871"><vh>(hook to check for conflicting Open With changes)</vh>
<v t="ekr.20031218072017.872"><vh> Request</vh></v>
<v t="ekr.20031218072017.873"><vh> Test</vh>
<v t="ekr.20031218072017.874"><vh>@file c:\prog\test\conflictText.txt</vh></v>
</v>
</v>
</v>
</v>
<v t="ekr.20031218072017.875"><vh> Abandoned &amp; Unfinished projects</vh>
<v t="ekr.20031218072017.876"><vh>Abandoned projects</vh>
<v t="ekr.20031218072017.953"><vh>(Precompute mThreadNext, and maybe mThreadBack)</vh>
<v t="ekr.20031218072017.954"><vh>STATISTICS for threadNext and threadBack</vh>
<v t="ekr.20031218072017.955"><vh>Result of running profiler</vh></v>
</v>
<v t="ekr.20031218072017.956"><vh>Code (copies: not the actual code: untested)</vh>
<v t="ekr.20031218072017.957"><vh>linkAfter (copy)</vh></v>
<v t="ekr.20031218072017.958"><vh>linkAsNthChild (copy)</vh></v>
<v t="ekr.20031218072017.959"><vh>linkAsRoot (copy)</vh></v>
<v t="ekr.20031218072017.960"><vh>unlink (copy)</vh></v>
<v t="ekr.20031218072017.961"><vh>unlinkThreadLinks</vh></v>
<v t="ekr.20031218072017.962"><vh>updateTheadLinks</vh></v>
<v t="ekr.20031218072017.963"><vh>threadBack &amp; computeThreadBack</vh></v>
<v t="ekr.20031218072017.964"><vh>threadNext &amp; computeThreadNext</vh></v>
<v t="ekr.20031218072017.965"><vh>computeLastNodeForThreadBack</vh></v>
</v>
</v>
<v t="ekr.20031218072017.966"><vh>(use mChildren array to represent children)</vh>
<v t="ekr.20031218072017.967"><vh>Children (vnode getters)  (untested code)</vh>
<v t="ekr.20031218072017.968"><vh>children (untested code)</vh></v>
<v t="ekr.20031218072017.969"><vh>childIndex (untested code)</vh></v>
<v t="ekr.20031218072017.970"><vh>firstChild (untested code)</vh></v>
<v t="ekr.20031218072017.971"><vh>hasChildren (untested code)</vh></v>
<v t="ekr.20031218072017.972"><vh>lastChild (untested code)</vh></v>
<v t="ekr.20031218072017.973"><vh>nthChild (untested code)</vh></v>
<v t="ekr.20031218072017.974"><vh>numberOfChildren (untested code)</vh></v>
</v>
<v t="ekr.20031218072017.975"><vh>Move/Link code</vh>
<v t="ekr.20031218072017.976"><vh>back (untested code)</vh></v>
<v t="ekr.20031218072017.977"><vh>next (untested code)</vh></v>
<v t="ekr.20031218072017.978"><vh>linkAsNthChild TO DO</vh></v>
<v t="ekr.20031218072017.979"><vh>linkAfter TO DO</vh></v>
<v t="ekr.20031218072017.980"><vh>unlink TO DO</vh></v>
<v t="ekr.20031218072017.981"><vh>linkAsRoot (untested code)</vh>
<v t="ekr.20031218072017.982"><vh>&lt;&lt; link v as the root vnode using c.frame.dummyChildren &gt;&gt;</vh></v>
<v t="ekr.20031218072017.983"><vh>&lt;&lt; link v as the root vnode using mBack, mNext &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1053"><vh>(vnode code to optimize moves)</vh>
<v t="ekr.20031218072017.1054"><vh>middleware</vh>
<v t="ekr.20031218072017.1055"><vh>create_dependent_trees</vh></v>
<v t="ekr.20031218072017.1056"><vh>destroy_dependent_trees (just unlinks them)</vh></v>
<v t="ekr.20031218072017.1057"><vh>move_dependent_trees_down</vh></v>
<v t="ekr.20031218072017.1058"><vh>move_dependent_trees_left</vh></v>
<v t="ekr.20031218072017.1059"><vh>move_dependent_trees_right</vh></v>
<v t="ekr.20031218072017.1060"><vh>move_dependent_trees_up</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.984"><vh>Unfinished projects</vh>
<v t="ekr.20031218072017.985"><vh>(Button class)</vh>
<v t="ekr.20031218072017.986"><vh>Notes to Edward</vh></v>
<v t="ekr.20031218072017.987"><vh>@file ButtonQ.py</vh>
<v t="ekr.20031218072017.988"><vh>__init__</vh>
<v t="ekr.20031218072017.989"><vh>&lt;&lt; get inputs to this method &gt;&gt;</vh></v>
<v t="ekr.20031218072017.990"><vh>&lt;&lt; see if there is an ampersand in the string. &gt;&gt;</vh>
<v t="ekr.20031218072017.991"><vh>&lt;&lt; handle an ampersand &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.992"><vh>&lt;&lt; make the button with the correct text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.993"><vh>&lt;&lt; bind the button &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.994"><vh>callback</vh></v>
</v>
</v>
<v t="ekr.20031218072017.995" a="M"><vh>(Incremental update of screen)</vh>
<v t="ekr.20031218072017.996"><vh>From Frame class</vh>
<v t="ekr.20031218072017.997"><vh>&lt;&lt; create the tree canvas &gt;&gt;</vh></v>
<v t="ekr.20031218072017.998"><vh>Scrolling callbacks (frame)</vh></v>
</v>
<v t="ekr.20031218072017.999"><vh>From Tree class</vh>
<v t="ekr.20031218072017.1000"><vh>drawBox (tag_bind)</vh></v>
<v t="ekr.20031218072017.1002"><vh>drawIcon (tag_bind)</vh></v>
<v t="ekr.20031218072017.1004"><vh>drawNode &amp; force_draw_node</vh></v>
<v t="ekr.20031218072017.1005"><vh>drawText (bind)</vh>
<v t="ekr.20031218072017.1006"><vh>&lt;&lt; configure the text depending on state &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1008"><vh>drawTree</vh>
<v t="ekr.20031218072017.1009"><vh>&lt;&lt; draw vertical line &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1010"><vh>inVisibleArea &amp; inExpandedVisibleArea</vh></v>
<v t="ekr.20031218072017.1011"><vh>Updating routines (tree)...</vh>
<v t="ekr.20031218072017.1012"><vh>redraw</vh></v>
<v t="ekr.20040106095546"><vh>tkTree.redrawAfterException</vh></v>
<v t="ekr.20031218072017.1013"><vh>force_redraw</vh></v>
<v t="ekr.20031218072017.1014"><vh>redraw_now</vh></v>
<v t="ekr.20031218072017.1015"><vh>idle_redraw</vh></v>
<v t="ekr.20031218072017.1016"><vh>idle_second_redraw</vh></v>
</v>
<v t="ekr.20031218072017.1017"><vh>tree.__init__</vh></v>
<v t="ekr.20031218072017.1018"><vh>tree.idle_scrollTo</vh></v>
<v t="ekr.20031218072017.1019"><vh>tree.select</vh>
<v t="ekr.20031218072017.1020"><vh>&lt;&lt; define vars and stop editing &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1021"><vh>&lt;&lt; unselect the old node &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1022"><vh>&lt;&lt; select the new node &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1023"><vh>&lt;&lt; update c.beadList or c.beadPointer &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1024"><vh>&lt;&lt; update c.visitedList &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1025"><vh>&lt;&lt; set the current node and redraw &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1026"><vh>Used only for incremental redraws</vh>
<v t="ekr.20031218072017.1027"><vh>allocateNodes</vh></v>
<v t="ekr.20031218072017.1028"><vh>allocateNodesBeforeScrolling</vh></v>
<v t="ekr.20031218072017.1029"><vh>setVisibleArea</vh></v>
<v t="ekr.20031218072017.1030"><vh>setVisibleAreaToFullCanvas</vh></v>
<v t="ekr.20031218072017.1031"><vh>tree.updateTree</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1032"><vh>(Syntax coloring a la jEdit) (do not delete)</vh>
<v t="ekr.20031218072017.1033"><vh>Ideas for dynamic code</vh></v>
<v t="ekr.20031218072017.1034"><vh>New data structures</vh></v>
<v t="ekr.20031218072017.1035"><vh>jEdit modes</vh>
<v t="ekr.20031218072017.1036"><vh>tex.xml</vh>
<v t="ekr.20031218072017.1037"><vh>&lt;&lt; general rules &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1038"><vh>&lt;&lt; math rules &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1039"><vh>python.xml</vh>
<v t="ekr.20031218072017.1040"><vh>&lt;&lt; remarks &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1041"><vh>&lt;&lt; comments &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1042"><vh>&lt;&lt; literals &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1043"><vh>&lt;&lt; operators &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1044"><vh>&lt;&lt; keywords &gt;&gt;</vh>
<v t="ekr.20031218072017.1045"><vh>&lt;&lt; reserved words &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1046"><vh>&lt;&lt; builtins &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1047"><vh>&lt;&lt; exceptions &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1048"><vh>&lt;&lt; types &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1049"><vh>jEdit docs</vh>
<v t="ekr.20031218072017.1050"><vh>The Preamble and MODE tag</vh></v>
<v t="ekr.20031218072017.1051"><vh>The PROPS Tag (Leo could ignore these)</vh></v>
<v t="ekr.20031218072017.1052"><vh>The RULES Tag</vh></v>
</v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1061"><vh> Command projects...</vh>
<v t="ekr.20031218072017.1062"><vh> File menu</vh>
<v t="ekr.20031218072017.1063"><vh>Open With</vh>
<v t="ekr.20031218072017.1064"><vh>(Warn on Open With conflicts)</vh>
<v t="ekr.20031218072017.1065"><vh>Report: Synchronization problem</vh></v>
<v t="ekr.20031218072017.1066"><vh>Reply</vh></v>
</v>
<v t="ekr.20031218072017.1067"><vh>(Hang in Open With)</vh>
<v t="ekr.20031218072017.1068"><vh>Report</vh></v>
<v t="ekr.20031218072017.1069"><vh>Report 2 (probably fixed)</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1070"><vh>Tangle/Untangle/Cweb/Noweb</vh>
<v t="ekr.20031218072017.1071"><vh>(cweb &amp; cweb hack)</vh>
<v t="ekr.20031218072017.1072"><vh>Original bug report</vh></v>
<v t="ekr.20031218072017.1073"><vh>cweb hack</vh>
<v t="ekr.20031218072017.1074"><vh>writing...</vh>
<v t="ekr.20031218072017.1075"><vh>putDirective  (handles @delims)</vh>
<v t="ekr.20031218072017.1076"><vh>&lt;&lt; handle @delims &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1077"><vh>putSentinel (applies cweb hack)</vh></v>
</v>
<v t="ekr.20031218072017.1078"><vh>reading...</vh>
<v t="ekr.20031218072017.1079"><vh>skipSentinelStart</vh></v>
<v t="ekr.20031218072017.1080"><vh>sentinelKind</vh></v>
<v t="ekr.20031218072017.1081"><vh>nodeSentinelText</vh>
<v t="ekr.20031218072017.1082"><vh>&lt;&lt; remove comment delims from h if necessary &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1083"><vh>&lt;&lt; Set headline and ref &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1084"><vh>&lt;&lt; scan old ref &gt;&gt; (3.0)</vh></v>
<v t="ekr.20031218072017.1085"><vh>&lt;&lt; scan @@ &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1086"><vh>directiveKind</vh></v>
</v>
<v t="ekr.20031218072017.1087"><vh>(tangle_done bug)</vh></v>
</v>
<v t="ekr.20031218072017.1088"><vh>Read/Write/Save</vh>
<v t="ekr.20031218072017.1089"><vh>(Write all cloned @file-nosent nodes with different paths)</vh>
<v t="ekr.20031218072017.1090"><vh>Notes</vh></v>
<v t="ekr.20031218072017.1091"><vh>Report &amp; reply</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1092"><vh> Edit menu</vh>
<v t="ekr.20031218072017.1093"><vh>(Reformat Paragraph)</vh>
<v t="ekr.20031218072017.1094"><vh>tests</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1095"><vh> Outline menu</vh>
<v t="ekr.20031218072017.1096"><vh>(Demote bugs)</vh></v>
<v t="ekr.20031218072017.1097"><vh>(fixed huge performance bug)</vh>
<v t="ekr.20031218072017.1098"><vh>tick statistics</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1099"><vh> Configuration, customization, plugins &amp; prefs</vh>
<v t="ekr.20031218072017.1100"><vh>(Preferences &amp; config settings)</vh>
<v t="ekr.20031218072017.1101"><vh>7/18 Changed precedence scheme for preferences</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1102"><vh> Directives</vh>
<v t="ekr.20031218072017.1103"><vh>(@first &amp; @last)</vh>
<v t="ekr.20031218072017.1104"><vh>theory of operation</vh></v>
</v>
<v t="ekr.20031218072017.1105"><vh>(@nosentinelsfile problems)</vh>
<v t="ekr.20031218072017.1106"><vh> Bug report &amp; resolution</vh></v>
</v>
<v t="ekr.20031218072017.1107"><vh>(@path changes)</vh></v>
<v t="ekr.20031218072017.1108"><vh>(Allow @comment after @language plain)</vh>
<v t="ekr.20031218072017.1109"><vh>Test</vh></v>
</v>
<v t="ekr.20031218072017.1110"><vh>(create_nonexistent_directories)</vh>
<v t="ekr.20031218072017.1111"><vh>Initial report</vh></v>
</v>
<v t="ekr.20031218072017.1112"><vh>(Nested @others directives )</vh>
<v t="ekr.20031218072017.1113"><vh>Proof that nested @others directives are valid</vh></v>
</v>
<v t="ekr.20031218072017.1114"><vh>(Options for @file &amp; @root)</vh>
<v t="ekr.20031218072017.1115"><vh>Tests</vh>
<v t="ekr.20031218072017.1116"><vh>@file-nosent c:\prog\test\filenosent.txt</vh>
<v t="ekr.20031218072017.1117"><vh>&lt;&lt; ref &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1118"><vh>@file-noref c:\prog\test\filenoref.txt</vh>
<v t="ekr.20031218072017.1119"><vh>&lt;&lt; ref &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1120"><vh>@file-asis c:\prog\test\fileasis.txt</vh>
<v t="ekr.20031218072017.1121"><vh>&lt;&lt; ref &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1122"><vh>(REM_ hack and perlpod hacks)</vh>
<v t="ekr.20031218072017.1123"><vh>perlpod test</vh>
<v t="ekr.20031218072017.1124"><vh>perlpod test</vh>
<v t="ekr.20031218072017.1125"><vh>&lt;&lt; ref &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1126"><vh>REM test</vh>
<v t="ekr.20031218072017.1127"><vh>@file c:/prog/test/remTest.txt</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1128"><vh>(Suppress @@ sentinel unless leading @ starts a directive)</vh>
<v t="ekr.20031218072017.1129"><vh>@file c:\prog\test\perltest.txt</vh></v>
<v t="ekr.20031218072017.1130"><vh>&lt;&lt; put @verbatim sentinel if necessary &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1086"><vh>directiveKind</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1131"><vh> Drawing</vh>
<v t="ekr.20031218072017.1132"><vh>(Scrollwheel) </vh></v>
<v t="ekr.20031218072017.1133"><vh>(Selecting scrolls partially visible headlines)</vh>
<v t="ekr.20031218072017.1134"><vh>Report</vh></v>
<v t="ekr.20031218072017.1018"><vh>tree.idle_scrollTo</vh></v>
<v t="ekr.20031218072017.1019"><vh>tree.select</vh>
<v t="ekr.20031218072017.1020"><vh>&lt;&lt; define vars and stop editing &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1021"><vh>&lt;&lt; unselect the old node &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1022"><vh>&lt;&lt; select the new node &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1023"><vh>&lt;&lt; update c.beadList or c.beadPointer &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1024"><vh>&lt;&lt; update c.visitedList &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1025"><vh>&lt;&lt; set the current node and redraw &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1135"><vh> Events &amp; Hooks &amp; Bindings</vh>
<v t="ekr.20031218072017.1136"><vh>(up-down arrows )</vh>
<v t="ekr.20031218072017.1137"><vh> Original proc moveUpDown</vh></v>
<v t="ekr.20031218072017.1138"><vh> New notes from Brian</vh></v>
<v t="ekr.20031218072017.1139"><vh> Request</vh></v>
<v t="ekr.20031218072017.1140"><vh> Test</vh></v>
<v t="ekr.20031218072017.1141"><vh>tree.moveUpDown</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1142"><vh> Files &amp; Directories</vh>
<v t="ekr.20031218072017.1143"><vh>( Open files in  "wb" mode )</vh>
<v t="ekr.20031218072017.1144"><vh>openOutputFile (compare)</vh></v>
<v t="ekr.20031218072017.1145"><vh>update (config)</vh>
<v t="ekr.20031218072017.1146"><vh>&lt;&lt; write recent files section &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1147"><vh>flattenOutline</vh></v>
<v t="ekr.20031218072017.1148"><vh>outlineToWeb</vh></v>
<v t="ekr.20031218072017.1149"><vh>&lt;&lt; Write s into newFileName &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1150"><vh>&lt;&lt; open filename to f, or return &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1151"><vh>tangle.put_all_roots</vh>
<v t="ekr.20031218072017.1152"><vh>&lt;&lt;Get root specific attributes&gt;&gt;</vh></v>
<v t="ekr.20031218072017.1153"><vh>&lt;&lt;Put @first lines&gt;&gt;</vh></v>
<v t="ekr.20031218072017.1154"><vh>&lt;&lt;Write a banner at the start of the output file&gt;&gt;</vh></v>
<v t="ekr.20031218072017.1155"><vh>&lt;&lt; Erase the temporary file &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1156"><vh>(@delims bug)</vh>
<v t="ekr.20031218072017.1157"><vh>initial report</vh></v>
<v t="ekr.20031218072017.1158"><vh>second report</vh>
<v t="ekr.20031218072017.1159"><vh>&lt;&lt;intro&gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1160"><vh>&lt;&lt; scan @delims &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1161"><vh>(Allowing collapsed XML tags)</vh>
<v t="ekr.20031218072017.1162"><vh>Bug report</vh></v>
</v>
<v t="ekr.20031218072017.1163"><vh>(assert 0 in putBodyPart)</vh>
<v t="ekr.20031218072017.1164"><vh>@file c:\prog\test\TestRoar.txt </vh>
<v t="ekr.20031218072017.1165"><vh>&lt;&lt; Raw ON &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1166"><vh>&lt;&lt; Raw OFF &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1167"><vh>&lt;&lt;Stuff&gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1086"><vh>directiveKind</vh></v>
<v t="ekr.20031218072017.1168"><vh>putBodyPart</vh>
<v t="ekr.20031218072017.1169"><vh>&lt;&lt; put code/doc parts and sentinels &gt;&gt;</vh>
<v t="ekr.20031218072017.1170"><vh>&lt;&lt; initialize lookingForFirst/Last &amp; initialLastDirective &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1171"><vh>&lt;&lt; set lookingForFirst/Last &amp; initialLastDirective &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1172"><vh>&lt;&lt; handle misc directives &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1173"><vh>&lt;&lt; put out the last directives, if any &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1174"><vh>(atFile read bug)</vh></v>
<v t="ekr.20031218072017.1175"><vh>(Block comment gets doubled in html)</vh>
<v t="ekr.20031218072017.1176"><vh>@file c:\prog\test\htmlTest.txt</vh></v>
<v t="ekr.20031218072017.1177"><vh>scanDoc</vh>
<v t="ekr.20031218072017.1178"><vh>&lt;&lt; Skip the opening sentinel &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1179"><vh>&lt;&lt; Skip an opening block delim &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1180"><vh>&lt;&lt; set kind, nextLine &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1181"><vh>&lt;&lt; Skip the leading stuff &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1182"><vh>&lt;&lt; Append s to out &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1183"><vh>&lt;&lt; Remove a closing block delim from out &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1184"><vh>(Deleting clones does not mark nodes dirty!)</vh>
<v t="ekr.20031218072017.1188"><vh>c.sortChildren, sortSiblings</vh>
<v t="ekr.20031218072017.1189"><vh>&lt;&lt; Set the undo info for sortChildren &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1190"><vh>&lt;&lt; Set the undo info for sortSiblings &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1191"><vh>v.sortChildren</vh></v>
<v t="ekr.20031218072017.1192"><vh>v.moveToNthChildOf</vh></v>
<v t="ekr.20031218072017.1193"><vh>c.deleteOutline</vh></v>
</v>
<v t="ekr.20031218072017.1194"><vh>(double @root bug)</vh>
<v t="ekr.20031218072017.1195"><vh>Assert fails</vh></v>
<v t="ekr.20031218072017.1196"><vh>double at-root test (assert fails)</vh></v>
</v>
<v t="ekr.20031218072017.1197"><vh>(Javadoc problem)</vh>
<v t="ekr.20031218072017.1198"><vh>Java test</vh>
<v t="ekr.20031218072017.1199"><vh>MemoryBuffer.java</vh>
<v t="ekr.20031218072017.1200"><vh>&lt;&lt; MemoryBuffer declarations &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1201"><vh>class MemoryBuffer</vh>
<v t="ekr.20031218072017.1202"><vh>&lt;&lt; class MemoryBuffer declarations &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1203"><vh>MemoryBuffer</vh></v>
<v t="ekr.20031218072017.1204"><vh>getHeight</vh></v>
<v t="ekr.20031218072017.1205"><vh>getWidth</vh></v>
<v t="ekr.20031218072017.1206"><vh>negotiateDimensions</vh></v>
</v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1208"><vh>(Partial path name problems)</vh>
<v t="ekr.20031218072017.1209"><vh> Tests</vh>
<v t="ekr.20031218072017.1210"><vh>@file Icons/test.txt</vh></v>
<v t="ekr.20031218072017.1211"><vh>@root Icons/test2.txt</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1212"><vh>(Read cloned @file nodes only once)</vh>
<v t="ekr.20031218072017.1213"><vh> multiple read test</vh>
<v t="ekr.20031218072017.1214"><vh>@file c:\prog\test\multiple.txt</vh></v>
<v t="ekr.20031218072017.1214"><vh>@file c:\prog\test\multiple.txt</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1215"><vh>(remarking bad @file nodes dirty)</vh></v>
<v t="ekr.20031218072017.1216"><vh>(remove blank lines)</vh>
<v t="ekr.20031218072017.1217"><vh>&lt;&lt; scan @+node &gt;&gt;</vh>
<v t="ekr.20031218072017.1218"><vh>&lt;&lt; Set childIndex &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1219"><vh>&lt;&lt; Set cloneIndex &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1083"><vh>&lt;&lt; Set headline and ref &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1220"><vh>&lt;&lt; Check the filename in the sentinel &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1221"><vh>&lt;&lt; look for sentinels that may follow a reference &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1222"><vh>putCodePart &amp; allies</vh>
<v t="ekr.20031218072017.1223"><vh>&lt;&lt; handle the start of a line &gt;&gt;</vh>
<v t="ekr.20031218072017.1224"><vh>&lt;&lt; handle @others &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1225"><vh>&lt;&lt; handle @raw &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1226"><vh>&lt;&lt; handle @end_raw &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1130"><vh>&lt;&lt; put @verbatim sentinel if necessary &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1227"><vh>&lt;&lt; put the line &gt;&gt;</vh>
<v t="ekr.20031218072017.1228"><vh>&lt;&lt; put possible section reference &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1229"><vh>inAtOthers</vh></v>
<v t="ekr.20031218072017.1230"><vh>isSectionName</vh></v>
<v t="ekr.20031218072017.1231"><vh>putAtOthers</vh></v>
<v t="ekr.20031218072017.1232"><vh>putAtOthersChild</vh></v>
<v t="ekr.20031218072017.1233"><vh>putRef</vh>
<v t="ekr.20031218072017.1234"><vh>&lt;&lt; Generate the expansion of the reference &gt;&gt;</vh>
<v t="ekr.20031218072017.1235"><vh>&lt;&lt; Add @verbatimAfterRef sentinel if required &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1236"><vh>os, onl, etc. (leoAtFile)</vh></v>
<v t="ekr.20031218072017.1080"><vh>sentinelKind</vh></v>
<v t="ekr.20031218072017.1077"><vh>putSentinel (applies cweb hack)</vh></v>
</v>
<v t="ekr.20031218072017.1237"><vh>(Restore access modes when writing)</vh>
<v t="ekr.20031218072017.1238"><vh>atFile</vh>
<v t="ekr.20031218072017.1239"><vh>&lt;&lt; Replace the target with the temp file if different &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1240"><vh>utils (for tangle)</vh>
<v t="ekr.20031218072017.1241"><vh>update_file_if_changed</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1242"><vh>(stylesheet element in .leo files)</vh>
<v t="ekr.20031218072017.1243"><vh>get &amp; match (basic)(leoFileCommands)</vh>
<v t="ekr.20031218072017.1244"><vh>get routines</vh></v>
<v t="ekr.20031218072017.1245"><vh>match routines</vh></v>
</v>
<v t="ekr.20031218072017.1246"><vh>putProlog</vh>
<v t="ekr.20031218072017.1247"><vh>&lt;&lt; Put the &lt;?xml...?&gt; line &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1248"><vh>&lt;&lt; Put the optional &lt;?xml-stylesheet...?&gt; line &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1249"><vh>getXmlStylesheetTag</vh></v>
</v>
<v t="ekr.20031218072017.1250"><vh>(subdirstest problems)</vh>
<v t="ekr.20031218072017.1251"><vh>From subdirtests.leo</vh>
<v t="ekr.20031218072017.1252"><vh>c:/prog/test/new does not exist</vh>
<v t="ekr.20031218072017.1253"><vh>@path new @root test1.txt</vh></v>
<v t="ekr.20031218072017.1254"><vh>@root new/test2.txt</vh></v>
</v>
<v t="ekr.20031218072017.1255"><vh>c:/prog/test does exist</vh>
<v t="ekr.20031218072017.1256"><vh>@path c:/prog/test @root test3.txt</vh></v>
<v t="ekr.20031218072017.1257"><vh>@root c:/prog/test/test4.txt</vh></v>
<v t="ekr.20031218072017.1258"><vh>@root test5.txt</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1259"><vh>setRootFromText</vh></v>
<v t="ekr.20031218072017.1260"><vh>get_directives_dict &amp; globalDirectiveList</vh>
<v t="ekr.20031218072017.1261"><vh>&lt;&lt; set dict for @ directives &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1262"><vh>&lt;&lt; set dict["root"] for noweb * chunks &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1263"><vh>utils_rename</vh></v>
<v t="ekr.20031218072017.1241"><vh>update_file_if_changed</vh></v>
<v t="ekr.20031218072017.1264"><vh>getBaseDirectory</vh></v>
</v>
<v t="ekr.20031218072017.1265"><vh>(@file-nosent buglett)</vh>
<v t="ekr.20031218072017.1266"><vh>report</vh></v>
<v t="ekr.20031218072017.1267"><vh>@file-nosent c:/prog/test/nosentIndentTest.txt</vh>
<v t="ekr.20031218072017.1268"><vh>&lt;&lt;ref&gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1269"><vh>Code...</vh>
<v t="ekr.20031218072017.1222"><vh>putCodePart &amp; allies</vh>
<v t="ekr.20031218072017.1223"><vh>&lt;&lt; handle the start of a line &gt;&gt;</vh>
<v t="ekr.20031218072017.1224"><vh>&lt;&lt; handle @others &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1225"><vh>&lt;&lt; handle @raw &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1226"><vh>&lt;&lt; handle @end_raw &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1130"><vh>&lt;&lt; put @verbatim sentinel if necessary &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1227"><vh>&lt;&lt; put the line &gt;&gt;</vh>
<v t="ekr.20031218072017.1228"><vh>&lt;&lt; put possible section reference &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1229"><vh>inAtOthers</vh></v>
<v t="ekr.20031218072017.1230"><vh>isSectionName</vh></v>
<v t="ekr.20031218072017.1231"><vh>putAtOthers</vh></v>
<v t="ekr.20031218072017.1232"><vh>putAtOthersChild</vh></v>
<v t="ekr.20031218072017.1233"><vh>putRef</vh>
<v t="ekr.20031218072017.1234"><vh>&lt;&lt; Generate the expansion of the reference &gt;&gt;</vh>
<v t="ekr.20031218072017.1235"><vh>&lt;&lt; Add @verbatimAfterRef sentinel if required &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1270"><vh>Writing (old)</vh>
<v t="ekr.20031218072017.1271"><vh>Top level</vh>
<v t="ekr.20031218072017.1272"><vh>atFile.rawWrite</vh>
<v t="ekr.20031218072017.1273"><vh>&lt;&lt; write root's tree &gt;&gt;</vh>
<v t="ekr.20031218072017.1274"><vh>&lt;&lt; put all @first lines in root &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1275"><vh>&lt;&lt; put optional @comment sentinel lines &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1276"><vh>&lt;&lt; Write v's node &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1277"><vh>&lt;&lt; put all @last lines in root &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1278"><vh>atFile.silentWrite</vh>
<v t="ekr.20031218072017.1279"><vh>&lt;&lt; Write v's headline if it starts with @@ &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1280"><vh>&lt;&lt; Write v's body &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1281"><vh>atFile.write</vh>
<v t="ekr.20031218072017.1282"><vh>&lt;&lt; initialize &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1283"><vh>&lt;&lt; open the file; return on error &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1284"><vh>&lt;&lt; write then entire @file tree &gt;&gt;</vh>
<v t="ekr.20031218072017.1274"><vh>&lt;&lt; put all @first lines in root &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1285"><vh>&lt;&lt; write the derived file&gt;&gt;</vh></v>
<v t="ekr.20031218072017.1277"><vh>&lt;&lt; put all @last lines in root &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1286"><vh>&lt;&lt; Warn about @ignored and orphans  &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1287"><vh>&lt;&lt; finish writing &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1288"><vh>atFile.writeAll</vh>
<v t="ekr.20031218072017.1289"><vh>&lt;&lt; Clear all orphan bits &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1290"><vh>&lt;&lt; handle v's tree &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1291"><vh>&lt;&lt; say the command is finished &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1292"><vh>atFile.writeMissing</vh>
<v t="ekr.20031218072017.1293"><vh>&lt;&lt; set missing if the file does not exist &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1294"><vh>&lt;&lt; create self.outputFile &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1295"><vh>&lt;&lt; write the @file node &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1296"><vh>Top level write helpers</vh>
<v t="ekr.20031218072017.1297"><vh>atFile.closeWriteFile</vh></v>
<v t="ekr.20031218072017.1298"><vh>atFile.handleWriteException</vh></v>
<v t="ekr.20031218072017.1299"><vh>atFile.openWriteFile</vh></v>
<v t="ekr.20031218072017.1300"><vh>atFile.putInitialComment</vh></v>
<v t="ekr.20031218072017.1301"><vh>atFile.replaceTargetFileIfDifferent</vh>
<v t="ekr.20031218072017.1302"><vh>&lt;&lt; delete the output file &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1303"><vh>&lt;&lt; replace the target file with the output file &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1304"><vh>&lt;&lt; rename the output file to be the target file &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1305"><vh>atFile.outputStringWithLineEndings</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1168"><vh>putBodyPart</vh>
<v t="ekr.20031218072017.1169"><vh>&lt;&lt; put code/doc parts and sentinels &gt;&gt;</vh>
<v t="ekr.20031218072017.1170"><vh>&lt;&lt; initialize lookingForFirst/Last &amp; initialLastDirective &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1171"><vh>&lt;&lt; set lookingForFirst/Last &amp; initialLastDirective &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1172"><vh>&lt;&lt; handle misc directives &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1173"><vh>&lt;&lt; put out the last directives, if any &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1306"><vh>putDoc</vh></v>
<v t="ekr.20031218072017.1307"><vh>putDocPart</vh>
<v t="ekr.20031218072017.1308"><vh>&lt;&lt; copy words, splitting the line if needed &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1222"><vh>putCodePart &amp; allies</vh>
<v t="ekr.20031218072017.1223"><vh>&lt;&lt; handle the start of a line &gt;&gt;</vh>
<v t="ekr.20031218072017.1224"><vh>&lt;&lt; handle @others &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1225"><vh>&lt;&lt; handle @raw &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1226"><vh>&lt;&lt; handle @end_raw &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1130"><vh>&lt;&lt; put @verbatim sentinel if necessary &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1227"><vh>&lt;&lt; put the line &gt;&gt;</vh>
<v t="ekr.20031218072017.1228"><vh>&lt;&lt; put possible section reference &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1229"><vh>inAtOthers</vh></v>
<v t="ekr.20031218072017.1230"><vh>isSectionName</vh></v>
<v t="ekr.20031218072017.1231"><vh>putAtOthers</vh></v>
<v t="ekr.20031218072017.1232"><vh>putAtOthersChild</vh></v>
<v t="ekr.20031218072017.1233"><vh>putRef</vh>
<v t="ekr.20031218072017.1234"><vh>&lt;&lt; Generate the expansion of the reference &gt;&gt;</vh>
<v t="ekr.20031218072017.1235"><vh>&lt;&lt; Add @verbatimAfterRef sentinel if required &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1309"><vh>Utils</vh>
<v t="ekr.20031218072017.1310"><vh>putBuffered</vh></v>
<v t="ekr.20031218072017.1236"><vh>os, onl, etc. (leoAtFile)</vh></v>
<v t="ekr.20031218072017.1075"><vh>putDirective  (handles @delims)</vh>
<v t="ekr.20031218072017.1076"><vh>&lt;&lt; handle @delims &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1311"><vh>putEmptyDirective (Dave Hein)</vh></v>
<v t="ekr.20031218072017.1312"><vh>putIndent</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1313"><vh>(Convenience routines for hooks)</vh>
<v t="ekr.20031218072017.1314"><vh>Convenience routines that enable and disable the "idle" hook</vh>
<v t="ekr.20031218072017.1315"><vh>enableIdleTimeHook, disableIdleTimeHook, idleTimeHookHandler</vh></v>
</v>
<v t="ekr.20031218072017.1316"><vh>Menu Convenience Routines (frame)</vh></v>
<v t="ekr.20031218072017.1317"><vh>file/module/plugin_date</vh></v>
<v t="ekr.20031218072017.1318"><vh>plugin_signon</vh></v>
</v>
<v t="ekr.20031218072017.1319"><vh>(Key handlers)</vh>
<v t="ekr.20031218072017.1320"><vh>body key handlers</vh>
<v t="ekr.20031218072017.1321"><vh>idle_body_key</vh>
<v t="ekr.20031218072017.1322"><vh>&lt;&lt; return if nothing has changed &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1323"><vh>&lt;&lt; set removeTrailing &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1324"><vh>&lt;&lt; Do auto indent &gt;&gt; (David McNab)</vh></v>
<v t="ekr.20031218072017.1325"><vh>&lt;&lt; convert tab to blanks &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1326"><vh>&lt;&lt; set s to widget text, removing trailing newlines if necessary &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1327"><vh>&lt;&lt; recolor the body &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1328"><vh>&lt;&lt; redraw the screen if necessary &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1329"><vh>onBodyChanged (called from core)</vh></v>
<v t="ekr.20031218072017.1330"><vh>onBodyKey</vh>
<v t="ekr.20040105223536"><vh>handleStatusLineKey</vh>
<v t="ekr.20040105223536.1"><vh>&lt;&lt; trace the key event &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1331"><vh>onBodyWillChange</vh></v>
</v>
<v t="ekr.20031218072017.1332"><vh>headline key handlers (tree)</vh>
<v t="ekr.20031218072017.1333"><vh>onHeadChanged</vh></v>
<v t="ekr.20031218072017.1334"><vh>OnHeadlineKey</vh></v>
<v t="ekr.20031218072017.1335"><vh>idle_head_key</vh>
<v t="ekr.20031218072017.1336"><vh>&lt;&lt; set s to the widget text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1337"><vh>&lt;&lt; set head to vnode text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1338"><vh>&lt;&lt; update v and all nodes joined to v &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1339"><vh>&lt;&lt; reconfigure v and all nodes joined to v &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1340"><vh>&lt;&lt; update the screen &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1341"><vh>(scanAllDirectives, scanDirectives, related utils)</vh>
<v t="ekr.20031218072017.1342"><vh>atFile.scanAllDirectives (calls writeError on errors)</vh>
<v t="ekr.20031218072017.1343"><vh>&lt;&lt; Set ivars &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1344"><vh>&lt;&lt; Set path from @file node &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1345"><vh>&lt;&lt; Test for @comment and @language &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1346"><vh>&lt;&lt; Test for @encoding &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1347"><vh>&lt;&lt; Test for @header and @noheader &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1348"><vh>&lt;&lt; Test for @lineending &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1349"><vh>&lt;&lt; Test for @path &gt;&gt;</vh>
<v t="ekr.20031218072017.1350"><vh>&lt;&lt; compute relative path from s[k:] &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1351"><vh>&lt;&lt; handle absolute path &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1352"><vh>&lt;&lt; Test for @pagewidth &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1353"><vh>&lt;&lt; Test for @tabwidth &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1354"><vh>&lt;&lt; Set current directory &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1355"><vh>&lt;&lt; Set comment Strings from delims &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1356"><vh>tangle.init_ivars &amp; init_directive_ivars</vh>
<v t="ekr.20031218072017.1357"><vh>&lt;&lt; init tangle ivars &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1358"><vh>&lt;&lt; init untangle ivars &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1359"><vh>&lt;&lt; init directive ivars &gt;&gt; (tangle)</vh></v>
</v>
<v t="ekr.20031218072017.1360"><vh>tangle.scanAllDirectives</vh>
<v t="ekr.20031218072017.1361"><vh>&lt;&lt; Collect @first attributes &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1362"><vh>&lt;&lt; Test for @comment and @language &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1363"><vh>&lt;&lt; Test for @encoding &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1364"><vh>&lt;&lt; Test for @lineending &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1365"><vh>&lt;&lt; Test for print modes directives &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1366"><vh>&lt;&lt; Test for @path &gt;&gt; in tangleScanAllDirectives</vh>
<v t="ekr.20031218072017.1367"><vh>&lt;&lt; compute dir and relative_path from s[k:] &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1368"><vh>&lt;&lt; handle absolute @path &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1369"><vh>&lt;&lt; Test for @pagewidth &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1370"><vh>&lt;&lt; Test for @root &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1371"><vh>&lt;&lt; Test for @tabwidth &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1372"><vh>&lt;&lt; Test for @header and @noheader &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1373"><vh>&lt;&lt; Set self.tangle_directory &gt;&gt;</vh>
<v t="ekr.20031218072017.1374"><vh>&lt;&lt; handle absolute path &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1375"><vh>scanForTabWidth</vh>
<v t="ekr.20031218072017.1376"><vh>&lt;&lt; set w and break on @tabwidth &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1377"><vh>scanColorDirectives</vh>
<v t="ekr.20031218072017.1378"><vh>&lt;&lt; Test for @comment or @language &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1379"><vh>&lt;&lt; Test for @root, @root-doc or @root-code &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1380"><vh>Directive utils...</vh>
<v t="ekr.20031218072017.1381"><vh>@language and @comment directives (leoUtils)</vh>
<v t="ekr.20031218072017.1382"><vh>set_delims_from_language</vh></v>
<v t="ekr.20031218072017.1383"><vh>set_delims_from_string</vh></v>
<v t="ekr.20031218072017.1384"><vh>set_language</vh></v>
</v>
<v t="ekr.20031218072017.1385"><vh>findReference</vh></v>
<v t="ekr.20031218072017.1260"><vh>get_directives_dict &amp; globalDirectiveList</vh>
<v t="ekr.20031218072017.1261"><vh>&lt;&lt; set dict for @ directives &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1262"><vh>&lt;&lt; set dict["root"] for noweb * chunks &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1386"><vh>getOutputNewline</vh></v>
<v t="ekr.20031218072017.1387"><vh>scanAtEncodingDirective</vh></v>
<v t="ekr.20031218072017.1388"><vh>scanAtLineendingDirective</vh></v>
<v t="ekr.20031218072017.1389"><vh>scanAtPagewidthDirective</vh></v>
<v t="ekr.20031218072017.1390"><vh>scanAtTabwidthDirective</vh></v>
<v t="ekr.20031218072017.1391"><vh>scanDirectives (utils)</vh>
<v t="ekr.20031218072017.1392"><vh>&lt;&lt; Set local vars &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1393"><vh>&lt;&lt; Test for @comment and @language &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1394"><vh>&lt;&lt; Test for @encoding &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1395"><vh>&lt;&lt; Test for @lineending &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1396"><vh>&lt;&lt; Test for @pagewidth &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1397"><vh>&lt;&lt; Test for @path &gt;&gt;</vh>
<v t="ekr.20031218072017.1398"><vh>&lt;&lt; compute relative path from s[k:] &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1399"><vh>&lt;&lt; Test for @tabwidth &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1400"><vh>&lt;&lt; Test for @wrap and @nowrap &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1401"><vh>Tests</vh>
<v t="ekr.20031218072017.1402"><vh>@rawfile c:\prog\test\rawFileTest.txt</vh>
<v t="ekr.20031218072017.1403"><vh>node 1</vh></v>
<v t="ekr.20031218072017.1404"><vh>node 2</vh></v>
</v>
<v t="ekr.20031218072017.1405"><vh>@silentfile c:\prog\test\silentFileTest.txt</vh></v>
<v t="ekr.20031218072017.1406"><vh>@root c:\prog\test\tangleTest.txt</vh>
<v t="ekr.20031218072017.1407"><vh>ref</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1408"><vh>(Unicode)</vh>
<v t="ekr.20031218072017.1409"><vh> Bug Reports</vh>
<v t="ekr.20031218072017.1410"><vh> Report</vh></v>
<v t="ekr.20031218072017.1411"><vh> Report 1 (not a problem)</vh></v>
<v t="ekr.20031218072017.1412"><vh> Report 2 (a problem)</vh></v>
<v t="ekr.20031218072017.1413"><vh>Report: not real?</vh></v>
</v>
<v t="ekr.20031218072017.1414"><vh> Code...</vh>
<v t="ekr.20031218072017.1415"><vh> App</vh>
<v t="ekr.20031218072017.1416"><vh>app.__init__</vh>
<v t="ekr.20031218072017.1417"><vh>&lt;&lt; define global constants &gt;&gt;</vh></v>
<v t="ekr.20031218072017.368"><vh>&lt;&lt; define global data structures &gt;&gt; app</vh></v>
</v>
<v t="ekr.20031218072017.1418"><vh>app.finishCreate</vh></v>
</v>
<v t="ekr.20031218072017.1419"><vh>Config</vh>
<v t="ekr.20031218072017.1420"><vh>update_section</vh></v>
<v t="ekr.20031218072017.1421"><vh>&lt;&lt; get config options &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1422"><vh>&lt;&lt; convert find/change options to unicode &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1423"><vh>Derived files</vh>
<v t="ekr.20031218072017.1424"><vh>atFile.__init__&amp; initIvars</vh></v>
<v t="ekr.20031218072017.1425"><vh>Reading (old)</vh>
<v t="ekr.20031218072017.1426"><vh>completeFirstDirectives (Dave Hein)</vh></v>
<v t="ekr.20031218072017.1427"><vh>completeLastDirectives (Dave Hein)</vh></v>
<v t="ekr.20031218072017.1428"><vh>createNthChild (3.0)</vh>
<v t="ekr.20031218072017.1429"><vh>&lt;&lt; check the headlines &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1430"><vh>handleLinesFollowingSentinel</vh>
<v t="ekr.20031218072017.1431"><vh>&lt;&lt; remove the comment delims from s &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1432"><vh>readLine</vh></v>
<v t="ekr.20031218072017.1433"><vh>readLinesToNextSentinel</vh></v>
<v t="ekr.20031218072017.1177"><vh>scanDoc</vh>
<v t="ekr.20031218072017.1178"><vh>&lt;&lt; Skip the opening sentinel &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1179"><vh>&lt;&lt; Skip an opening block delim &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1180"><vh>&lt;&lt; set kind, nextLine &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1181"><vh>&lt;&lt; Skip the leading stuff &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1182"><vh>&lt;&lt; Append s to out &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1183"><vh>&lt;&lt; Remove a closing block delim from out &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1434"><vh>scanHeader</vh>
<v t="ekr.20031218072017.1435"><vh>&lt;&lt; skip any non @+leo lines &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1436"><vh>&lt;&lt; make sure we have @+leo &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1437"><vh>&lt;&lt; read optional version param &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1438"><vh>&lt;&lt; read optional encoding param &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1439"><vh>&lt;&lt; set the closing comment delim &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1440"><vh>scanText</vh>
<v t="ekr.20031218072017.1441"><vh>&lt;&lt; put the next line into s &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1442"><vh>&lt;&lt; set kind, nextKind &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1443"><vh>&lt;&lt; Set lineIndent, linep and leading_ws &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1444"><vh>&lt;&lt; handle unexpected end of text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1445"><vh>&lt;&lt; handle the line in s &gt;&gt;</vh>
<v t="ekr.20031218072017.1446"><vh>&lt;&lt; append non-sentinel line &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1447"><vh>&lt;&lt; handle common sentinels &gt;&gt;</vh>
<v t="ekr.20031218072017.1448"><vh>&lt;&lt; handle an ending sentinel &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1084"><vh>&lt;&lt; scan old ref &gt;&gt; (3.0)</vh></v>
<v t="ekr.20031218072017.1449"><vh>&lt;&lt; scan @+at &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1450"><vh>&lt;&lt; scan @+body &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1451"><vh>&lt;&lt; scan @+doc &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1217"><vh>&lt;&lt; scan @+node &gt;&gt;</vh>
<v t="ekr.20031218072017.1218"><vh>&lt;&lt; Set childIndex &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1219"><vh>&lt;&lt; Set cloneIndex &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1083"><vh>&lt;&lt; Set headline and ref &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1220"><vh>&lt;&lt; Check the filename in the sentinel &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1221"><vh>&lt;&lt; look for sentinels that may follow a reference &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1452"><vh>&lt;&lt; scan @+others &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1453"><vh>&lt;&lt; handle rare sentinels &gt;&gt;</vh>
<v t="ekr.20031218072017.1454"><vh>&lt;&lt; scan @+leo &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1085"><vh>&lt;&lt; scan @@ &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1455"><vh>&lt;&lt; scan @comment &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1160"><vh>&lt;&lt; scan @delims &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1456"><vh>&lt;&lt; scan @verbatim &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1457"><vh>&lt;&lt; warn about unknown sentinel &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1270"><vh>Writing (old)</vh>
<v t="ekr.20031218072017.1271"><vh>Top level</vh>
<v t="ekr.20031218072017.1272"><vh>atFile.rawWrite</vh>
<v t="ekr.20031218072017.1273"><vh>&lt;&lt; write root's tree &gt;&gt;</vh>
<v t="ekr.20031218072017.1274"><vh>&lt;&lt; put all @first lines in root &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1275"><vh>&lt;&lt; put optional @comment sentinel lines &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1276"><vh>&lt;&lt; Write v's node &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1277"><vh>&lt;&lt; put all @last lines in root &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1278"><vh>atFile.silentWrite</vh>
<v t="ekr.20031218072017.1279"><vh>&lt;&lt; Write v's headline if it starts with @@ &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1280"><vh>&lt;&lt; Write v's body &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1281"><vh>atFile.write</vh>
<v t="ekr.20031218072017.1282"><vh>&lt;&lt; initialize &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1283"><vh>&lt;&lt; open the file; return on error &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1284"><vh>&lt;&lt; write then entire @file tree &gt;&gt;</vh>
<v t="ekr.20031218072017.1274"><vh>&lt;&lt; put all @first lines in root &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1285"><vh>&lt;&lt; write the derived file&gt;&gt;</vh></v>
<v t="ekr.20031218072017.1277"><vh>&lt;&lt; put all @last lines in root &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1286"><vh>&lt;&lt; Warn about @ignored and orphans  &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1287"><vh>&lt;&lt; finish writing &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1288"><vh>atFile.writeAll</vh>
<v t="ekr.20031218072017.1289"><vh>&lt;&lt; Clear all orphan bits &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1290"><vh>&lt;&lt; handle v's tree &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1291"><vh>&lt;&lt; say the command is finished &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1292"><vh>atFile.writeMissing</vh>
<v t="ekr.20031218072017.1293"><vh>&lt;&lt; set missing if the file does not exist &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1294"><vh>&lt;&lt; create self.outputFile &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1295"><vh>&lt;&lt; write the @file node &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1296"><vh>Top level write helpers</vh>
<v t="ekr.20031218072017.1297"><vh>atFile.closeWriteFile</vh></v>
<v t="ekr.20031218072017.1298"><vh>atFile.handleWriteException</vh></v>
<v t="ekr.20031218072017.1299"><vh>atFile.openWriteFile</vh></v>
<v t="ekr.20031218072017.1300"><vh>atFile.putInitialComment</vh></v>
<v t="ekr.20031218072017.1301"><vh>atFile.replaceTargetFileIfDifferent</vh>
<v t="ekr.20031218072017.1302"><vh>&lt;&lt; delete the output file &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1303"><vh>&lt;&lt; replace the target file with the output file &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1304"><vh>&lt;&lt; rename the output file to be the target file &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1305"><vh>atFile.outputStringWithLineEndings</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1168"><vh>putBodyPart</vh>
<v t="ekr.20031218072017.1169"><vh>&lt;&lt; put code/doc parts and sentinels &gt;&gt;</vh>
<v t="ekr.20031218072017.1170"><vh>&lt;&lt; initialize lookingForFirst/Last &amp; initialLastDirective &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1171"><vh>&lt;&lt; set lookingForFirst/Last &amp; initialLastDirective &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1172"><vh>&lt;&lt; handle misc directives &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1173"><vh>&lt;&lt; put out the last directives, if any &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1306"><vh>putDoc</vh></v>
<v t="ekr.20031218072017.1307"><vh>putDocPart</vh>
<v t="ekr.20031218072017.1308"><vh>&lt;&lt; copy words, splitting the line if needed &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1222"><vh>putCodePart &amp; allies</vh>
<v t="ekr.20031218072017.1223"><vh>&lt;&lt; handle the start of a line &gt;&gt;</vh>
<v t="ekr.20031218072017.1224"><vh>&lt;&lt; handle @others &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1225"><vh>&lt;&lt; handle @raw &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1226"><vh>&lt;&lt; handle @end_raw &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1130"><vh>&lt;&lt; put @verbatim sentinel if necessary &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1227"><vh>&lt;&lt; put the line &gt;&gt;</vh>
<v t="ekr.20031218072017.1228"><vh>&lt;&lt; put possible section reference &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1229"><vh>inAtOthers</vh></v>
<v t="ekr.20031218072017.1230"><vh>isSectionName</vh></v>
<v t="ekr.20031218072017.1231"><vh>putAtOthers</vh></v>
<v t="ekr.20031218072017.1232"><vh>putAtOthersChild</vh></v>
<v t="ekr.20031218072017.1233"><vh>putRef</vh>
<v t="ekr.20031218072017.1234"><vh>&lt;&lt; Generate the expansion of the reference &gt;&gt;</vh>
<v t="ekr.20031218072017.1235"><vh>&lt;&lt; Add @verbatimAfterRef sentinel if required &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1309"><vh>Utils</vh>
<v t="ekr.20031218072017.1310"><vh>putBuffered</vh></v>
<v t="ekr.20031218072017.1236"><vh>os, onl, etc. (leoAtFile)</vh></v>
<v t="ekr.20031218072017.1075"><vh>putDirective  (handles @delims)</vh>
<v t="ekr.20031218072017.1076"><vh>&lt;&lt; handle @delims &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1311"><vh>putEmptyDirective (Dave Hein)</vh></v>
<v t="ekr.20031218072017.1312"><vh>putIndent</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1434"><vh>scanHeader</vh>
<v t="ekr.20031218072017.1435"><vh>&lt;&lt; skip any non @+leo lines &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1436"><vh>&lt;&lt; make sure we have @+leo &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1437"><vh>&lt;&lt; read optional version param &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1438"><vh>&lt;&lt; read optional encoding param &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1439"><vh>&lt;&lt; set the closing comment delim &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1458"><vh>putOpenLeoSentinel</vh></v>
<v t="ekr.20031218072017.1236"><vh>os, onl, etc. (leoAtFile)</vh></v>
</v>
<v t="ekr.20031218072017.1459"><vh>Find</vh>
<v t="ekr.20031218072017.1460"><vh>find.set_ivars</vh></v>
</v>
<v t="ekr.20031218072017.1461"><vh>Import/Export</vh>
<v t="ekr.20031218072017.1462"><vh>exportHeadlines</vh></v>
<v t="ekr.20031218072017.1147"><vh>flattenOutline</vh></v>
<v t="ekr.20031218072017.1148"><vh>outlineToWeb</vh></v>
<v t="ekr.20031218072017.1463"><vh>setEncoding</vh></v>
<v t="ekr.20031218072017.1464"><vh>weave</vh>
<v t="ekr.20031218072017.1150"><vh>&lt;&lt; open filename to f, or return &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1465"><vh>&lt;&lt; write the context of p to f &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1466"><vh>Leo files</vh>
<v t="ekr.20031218072017.1467"><vh>Reading</vh>
<v t="ekr.20031218072017.1243"><vh>get &amp; match (basic)(leoFileCommands)</vh>
<v t="ekr.20031218072017.1244"><vh>get routines</vh></v>
<v t="ekr.20031218072017.1245"><vh>match routines</vh></v>
</v>
<v t="ekr.20031218072017.1468"><vh>getXmlVersionTag</vh></v>
</v>
<v t="ekr.20031218072017.1469"><vh>Writing</vh>
<v t="ekr.20031218072017.1470"><vh>put (basic)(leoFileCommands)</vh></v>
<v t="ekr.20031218072017.1246"><vh>putProlog</vh>
<v t="ekr.20031218072017.1247"><vh>&lt;&lt; Put the &lt;?xml...?&gt; line &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1248"><vh>&lt;&lt; Put the optional &lt;?xml-stylesheet...?&gt; line &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1471"><vh>Log</vh>
<v t="ekr.20031218072017.1472"><vh>log encoding</vh></v>
<v t="ekr.20031218072017.1473"><vh>tkLog.put &amp; putnl</vh></v>
<v t="ekr.20031218072017.1474"><vh>es, enl, ecnl</vh></v>
</v>
<v t="ekr.20031218072017.1475"><vh>Nodes</vh>
<v t="ekr.20031218072017.1476"><vh>vnode setters</vh>
<v t="ekr.20031218072017.1477"><vh>Head and body text</vh>
<v t="ekr.20031218072017.1478"><vh>appendStringToBody</vh></v>
<v t="ekr.20031218072017.1479"><vh>scriptSetBodyString</vh></v>
<v t="ekr.20031218072017.1480"><vh>setBodyStringOrPane &amp; setBodyTextOrPane</vh></v>
<v t="ekr.20031218072017.1481"><vh>setHeadString &amp; initHeadString</vh></v>
<v t="ekr.20031218072017.1482"><vh>setHeadStringOrHeadline</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1483"><vh>tnode setters</vh>
<v t="ekr.20031218072017.1484"><vh>Setting body text</vh>
<v t="ekr.20031218072017.1485"><vh>setTnodeText</vh></v>
<v t="ekr.20031218072017.1486"><vh>setSelection</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1487"><vh>Tangle</vh>
<v t="ekr.20031218072017.1488"><vh>oblank, oblanks, os, otab, otabs (Tangle)</vh></v>
</v>
<v t="ekr.20031218072017.1489"><vh>Undo...</vh>
<v t="ekr.20031218072017.1490"><vh>setUndoTypingParams</vh>
<v t="ekr.20031218072017.1491"><vh>&lt;&lt; compute leading, middle &amp; trailing  lines &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1492"><vh>&lt;&lt; save undo text info &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1493"><vh>undoRedoText</vh>
<v t="ekr.20031218072017.1494"><vh>&lt;&lt; Incrementally update the Tk.Text widget &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1495"><vh>&lt;&lt; Compute the result using v's body text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1496"><vh>&lt;&lt; Get textResult from the Tk.Text widget &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1497"><vh>&lt;&lt; print mismatch trace &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1498"><vh>Unicode utils...</vh>
<v t="ekr.20031218072017.1499"><vh>isUnicode</vh></v>
<v t="ekr.20031218072017.1500"><vh>isValidEncoding</vh></v>
<v t="ekr.20031218072017.1501"><vh>reportBadChars</vh></v>
<v t="ekr.20031218072017.1502"><vh>toUnicode &amp; toEncodedString</vh></v>
<v t="ekr.20031218072017.1503"><vh>getpreferredencoding from 2.3a2</vh>
<v t="ekr.20031218072017.1504"><vh>&lt;&lt; define getpreferredencoding using _locale &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1505"><vh>&lt;&lt; define getpreferredencoding for *nix &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1506"><vh> Notes...</vh>
<v t="ekr.20031218072017.1507"><vh>Code notes: big picture</vh></v>
<v t="ekr.20031218072017.1508"><vh>Code notes: encodings</vh></v>
<v t="ekr.20031218072017.1509"><vh>Unicode notes (from gil)</vh></v>
<v t="ekr.20031218072017.1510"><vh>Unicode design</vh>
<v t="ekr.20031218072017.1511"><vh>Unicode links</vh></v>
<v t="ekr.20031218072017.1512"><vh>unicode tests</vh></v>
<v t="ekr.20031218072017.1513"><vh>From  Martin v. Löwis (use unicode to interface with tk)</vh></v>
<v t="ekr.20031218072017.1514"><vh>Dave Hein</vh></v>
<v t="ekr.20031218072017.1515"><vh>Gil Schwartz</vh></v>
<v t="ekr.20031218072017.1516"><vh>Gil's long post</vh>
<v t="ekr.20031218072017.1517"><vh>Internal representation</vh></v>
<v t="ekr.20031218072017.1518"><vh>Encoding conversion points</vh></v>
<v t="ekr.20031218072017.1519"><vh>Encoding process &amp; error handling</vh></v>
<v t="ekr.20031218072017.1520"><vh>Programming considerations</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1521"><vh> Tests</vh>
<v t="ekr.20031218072017.1522"><vh>@file-asis c:\prog\test\asisTest.txt</vh></v>
<v t="ekr.20031218072017.1523"><vh>@file-nosent c:\prog\test\nosentTest.txt</vh></v>
<v t="ekr.20031218072017.1524"><vh>@file-noref c:\prog\test\norefTest.txt</vh></v>
</v>
<v t="ekr.20031218072017.1525"><vh> Tests</vh>
<v t="ekr.20031218072017.1526"><vh>Import/export tests</vh>
<v t="ekr.20031218072017.1527"><vh>test</vh>
<v t="ekr.20031218072017.1528"><vh>NewHeadlineë</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1529"><vh>@file c:/prog/test/unicodeTest.doc</vh>
<v t="ekr.20031218072017.1530"><vh>NewÖ</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1531"><vh>( Replace getdefaultlocale)</vh>
<v t="ekr.20031218072017.1532"><vh>About getdefaultlocale</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1533"><vh>3.x projects...</vh>
<v t="ekr.20031218072017.1534"><vh>3.11.1 projects</vh>
<v t="ekr.20031218072017.1535"><vh>(Control-dragging bug)</vh>
<v t="ekr.20031218072017.1536"><vh> Report</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1537"><vh>3.12 projects</vh>
<v t="ekr.20031218072017.1538"><vh>3.12 beta 1</vh>
<v t="ekr.20031218072017.1539"><vh>(@wrap and @nowrap directives)</vh>
<v t="ekr.20031218072017.1540"><vh>setWrap</vh></v>
<v t="ekr.20031218072017.1019"><vh>tree.select</vh>
<v t="ekr.20031218072017.1020"><vh>&lt;&lt; define vars and stop editing &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1021"><vh>&lt;&lt; unselect the old node &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1022"><vh>&lt;&lt; select the new node &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1023"><vh>&lt;&lt; update c.beadList or c.beadPointer &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1024"><vh>&lt;&lt; update c.visitedList &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1025"><vh>&lt;&lt; set the current node and redraw &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1541"><vh>(Added new panes to Leo windows)</vh></v>
<v t="ekr.20031218072017.1542"><vh>(Bugs when cutting/pasting trees)</vh>
<v t="ekr.20031218072017.1543"><vh>Reports</vh>
<v t="ekr.20031218072017.1544"><vh>Report 1 (fixed, I think)</vh></v>
<v t="ekr.20031218072017.1545"><vh>Report 2 (fixed, I think)</vh></v>
<v t="ekr.20031218072017.1546"><vh>Report 3</vh></v>
</v>
<v t="ekr.20031218072017.1547"><vh> Code...</vh>
<v t="ekr.20031218072017.1416"><vh>app.__init__</vh>
<v t="ekr.20031218072017.1417"><vh>&lt;&lt; define global constants &gt;&gt;</vh></v>
<v t="ekr.20031218072017.368"><vh>&lt;&lt; define global data structures &gt;&gt; app</vh></v>
</v>
<v t="ekr.20031218072017.1548"><vh>Cut &amp; Paste Outlines</vh>
<v t="ekr.20031218072017.1549"><vh>cutOutline</vh></v>
<v t="ekr.20031218072017.1550"><vh>copyOutline</vh></v>
<v t="ekr.20031218072017.1551"><vh>pasteOutline</vh></v>
</v>
<v t="ekr.20031218072017.1552"><vh>Reading</vh>
<v t="ekr.20031218072017.1553"><vh>getLeoFile</vh>
<v t="ekr.20031218072017.1554"><vh>&lt;&lt; warn on read-only files &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1555"><vh>&lt;&lt; scan all the xml elements &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1556"><vh>&lt;&lt; raise an alert &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1557"><vh>finishPaste</vh>
<v t="ekr.20031218072017.1558"><vh>&lt;&lt; reassign tnode indices and clear all clone links &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1559"><vh>getLeoOutline (from clipboard)</vh></v>
<v t="ekr.20031218072017.1560"><vh>getTnodes</vh></v>
<v t="ekr.20031218072017.1561"><vh>getTnode</vh>
<v t="ekr.20031218072017.1562"><vh>&lt;&lt; handle read from file &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1563"><vh>&lt;&lt; handle read from clipboard &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1564"><vh>&lt;&lt; handle unknown attributes &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1565"><vh>getVnodes</vh></v>
<v t="ekr.20031218072017.1566"><vh>getVnode changed for 4.2)</vh>
<v t="ekr.20031218072017.1567"><vh>&lt;&lt; Handle vnode attribute bits  &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1568"><vh>&lt;&lt; Set the remembered status bits &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1569"><vh>Writing</vh>
<v t="ekr.20031218072017.1570"><vh>assignFileIndices &amp; compactFileIndices</vh>
<v t="ekr.20031218072017.1571"><vh>&lt;&lt; assign missing gnx's, converting ints to gnx's &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1572"><vh>&lt;&lt; reassign all tnode indices &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1573"><vh>putLeoOutline (to clipboard)</vh></v>
<v t="ekr.20031218072017.1574"><vh>v.copyTreeWithNewTnodes: used by unit tests</vh></v>
<v t="ekr.20031218072017.1575"><vh>putTnodes</vh>
<v t="ekr.20031218072017.1576"><vh>&lt;&lt; write only those tnodes that were referenced &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1577"><vh>putTnode</vh>
<v t="ekr.20031218072017.1578"><vh>&lt;&lt; put unknown tnode attributes &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1579"><vh>putVnodes</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1587"><vh>(Fix memory leaks)</vh>
<v t="ekr.20031218072017.1588"><vh>Garbage Collection</vh>
<v t="ekr.20031218072017.1589"><vh>clearAllIvars</vh></v>
<v t="ekr.20031218072017.1590"><vh>collectGarbage</vh>
<v t="ekr.20031218072017.1591"><vh>&lt;&lt; make a list of the new objects &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1592"><vh>printGc</vh></v>
<v t="ekr.20031218072017.1593"><vh>printGcRefs</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1594"><vh>(Hooks and plugins for user directives)</vh>
<v t="ekr.20031218072017.1595"><vh>&lt;&lt; define leo keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1596"><vh>frame.doHook</vh></v>
<v t="ekr.20031218072017.1391"><vh>scanDirectives (utils)</vh>
<v t="ekr.20031218072017.1392"><vh>&lt;&lt; Set local vars &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1393"><vh>&lt;&lt; Test for @comment and @language &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1394"><vh>&lt;&lt; Test for @encoding &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1395"><vh>&lt;&lt; Test for @lineending &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1396"><vh>&lt;&lt; Test for @pagewidth &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1397"><vh>&lt;&lt; Test for @path &gt;&gt;</vh>
<v t="ekr.20031218072017.1398"><vh>&lt;&lt; compute relative path from s[k:] &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1399"><vh>&lt;&lt; Test for @tabwidth &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1400"><vh>&lt;&lt; Test for @wrap and @nowrap &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1597"><vh>@file ../plugins/add_directives.py</vh>
<v t="ekr.20031218072017.1598"><vh>addPluginDirectives</vh></v>
<v t="ekr.20031218072017.1599"><vh>scanPluginDirectives</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1600"><vh>(Hooks and plugins for user markup)</vh>
<v t="ekr.20031218072017.1601"><vh>Init &amp; Utils</vh>
<v t="ekr.20031218072017.1602"><vh>&lt;&lt; initialize ivars &amp; tags &gt;&gt; colorizeAnyLanguage</vh>
<v t="ekr.20031218072017.1603"><vh>&lt;&lt; configure tags &gt;&gt;</vh></v>
<v t="ekr.20031218072017.370"><vh>&lt;&lt; configure language-specific settings &gt;&gt; colorizer</vh></v>
</v>
<v t="ekr.20031218072017.1604"><vh>removeAllTags &amp; removeTagsFromLines</vh></v>
<v t="ekr.20031218072017.1605"><vh>color.__init__</vh>
<v t="ekr.20031218072017.1606"><vh>&lt;&lt; ivars for communication between colorAllDirectives and its allies &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1607"><vh>&lt;&lt; define dispatch dicts &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1608"><vh>&lt;&lt; define fonts and data for wiki tags &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1609"><vh>index &amp; tag</vh></v>
<v t="ekr.20031218072017.1610"><vh>skip_python_string</vh></v>
</v>
<v t="ekr.20031218072017.1611"><vh>Code containing "color-optional-markup" hook</vh>
<v t="ekr.20031218072017.1612"><vh>&lt;&lt; handle string &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1613"><vh>continueSingle/DoublePythonString</vh></v>
<v t="ekr.20031218072017.1614"><vh>continueDocPart</vh>
<v t="ekr.20031218072017.1615"><vh>&lt;&lt; handle cweb doc part &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1616"><vh>&lt;&lt; handle noweb doc part &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1617"><vh>&lt;&lt; handle single-line comment &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1618"><vh>continueBlockComment</vh></v>
<v t="ekr.20031218072017.1619"><vh>&lt;&lt; start block comment &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1620"><vh>doAtKeyword: NOT for cweb keywords</vh></v>
</v>
<v t="ekr.20031218072017.1621"><vh> Colorizing Test</vh></v>
</v>
<v t="ekr.20031218072017.1622"><vh>(Make window bigger when opening Leo from leo.py)</vh>
<v t="ekr.20031218072017.1623"><vh>new</vh></v>
<v t="ekr.20031218072017.1624"><vh>createFrame (leo.py)</vh></v>
<v t="ekr.20031218072017.1625"><vh>setInitialWindowGeometry</vh></v>
</v>
<v t="ekr.20031218072017.1626"><vh>(Nav plugin &amp; related stuff)</vh>
<v t="ekr.20031218072017.1019"><vh>tree.select</vh>
<v t="ekr.20031218072017.1020"><vh>&lt;&lt; define vars and stop editing &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1021"><vh>&lt;&lt; unselect the old node &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1022"><vh>&lt;&lt; select the new node &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1023"><vh>&lt;&lt; update c.beadList or c.beadPointer &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1024"><vh>&lt;&lt; update c.visitedList &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1025"><vh>&lt;&lt; set the current node and redraw &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1627"><vh>goPrevVisitedNode</vh></v>
<v t="ekr.20031218072017.1628"><vh>goNextVisitedNode</vh></v>
<v t="ekr.20031218072017.1629"><vh>fillbox (recent sections)</vh>
<v t="ekr.20031218072017.1630"><vh>&lt;&lt; reconstruct the contents of self.box &gt;&gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1631"><vh>(Open With problems)</vh>
<v t="ekr.20031218072017.1632"><vh>What I did</vh></v>
</v>
<v t="ekr.20031218072017.1633"><vh>(Problems with convert tabs to blanks)</vh></v>
<v t="ekr.20031218072017.1634"><vh>(Rewriting joinList code)</vh>
<v t="ekr.20031218072017.1635"><vh>  What I did</vh></v>
<v t="ekr.20031218072017.1636"><vh> Unused code</vh>
<v t="ekr.20031218072017.1637"><vh>setJoinList</vh></v>
<v t="ekr.20031218072017.1638"><vh>getJoinList</vh></v>
<v t="ekr.20031218072017.1639"><vh>setJoinHead</vh></v>
<v t="ekr.20031218072017.1640"><vh>isOnJoinListOf</vh></v>
<v t="ekr.20031218072017.1641"><vh>unjoinNode</vh></v>
<v t="ekr.20031218072017.1642"><vh>unused code from atFile.read</vh>
<v t="ekr.20031218072017.1643"><vh>atFile.joinTrees (NO LONGER USED)</vh></v>
<v t="ekr.20031218072017.1644"><vh>&lt;&lt; Handle clone bits &gt;&gt; (no longer used)</vh></v>
<v t="ekr.20031218072017.1645"><vh>&lt;&lt; Join cloned trees &gt;&gt; (no longer used)</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1646"><vh>Changed Code</vh>
<v t="ekr.20031218072017.1647"><vh>v.joinNodeTo</vh></v>
<v t="ekr.20031218072017.1648"><vh>v.unjoinTree</vh></v>
</v>
<v t="ekr.20031218072017.1649"><vh>Clone Tests (Sigh)</vh>
<v t="ekr.20031218072017.1650"><vh>AA</vh>
<v t="ekr.20031218072017.1651"><vh>BB</vh>
<v t="ekr.20031218072017.1652"><vh>E</vh></v>
<v t="ekr.20031218072017.1653"><vh>abc</vh></v>
</v>
<v t="ekr.20031218072017.1654"><vh>CC</vh></v>
</v>
<v t="ekr.20031218072017.1650"><vh>AA</vh>
<v t="ekr.20031218072017.1651"><vh>BB</vh>
<v t="ekr.20031218072017.1652"><vh>E</vh></v>
<v t="ekr.20031218072017.1653"><vh>abc</vh></v>
</v>
<v t="ekr.20031218072017.1654"><vh>CC</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1655"><vh>(Support for LeoN)</vh>
<v t="ekr.20031218072017.1656"><vh>&lt;&lt; redirectClass methods &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1657"><vh>runMainLoop</vh></v>
</v>
<v t="ekr.20031218072017.1658"><vh>(Using xml parser)</vh>
<v t="ekr.20031218072017.1659"><vh>characters</vh></v>
<v t="ekr.20031218072017.1660"><vh>endDocument</vh></v>
<v t="ekr.20031218072017.1661"><vh>endElement</vh></v>
<v t="ekr.20031218072017.1662"><vh>other methods</vh></v>
<v t="ekr.20031218072017.1663"><vh>startDocument</vh></v>
<v t="ekr.20031218072017.1664"><vh>startElement</vh></v>
</v>
<v t="ekr.20031218072017.1665"><vh>(Write Dirty @file Nodes command)</vh>
<v t="ekr.20031218072017.1666"><vh>writeDirtyAtFileNodes</vh></v>
<v t="ekr.20031218072017.1288"><vh>atFile.writeAll</vh>
<v t="ekr.20031218072017.1289"><vh>&lt;&lt; Clear all orphan bits &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1290"><vh>&lt;&lt; handle v's tree &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1291"><vh>&lt;&lt; say the command is finished &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1667"><vh>3.12 beta 2</vh>
<v t="ekr.20031218072017.1668"><vh>(Added apply button to Font panel)</vh></v>
<v t="ekr.20031218072017.1669"><vh>(Allow plugins to extend popup menus)</vh>
<v t="ekr.20031218072017.1670"><vh>Request</vh></v>
</v>
<v t="ekr.20031218072017.1671"><vh>(Copy lists in OpenWith code when deleting elements when looping on the list)</vh></v>
<v t="ekr.20031218072017.1672"><vh>(Double-clicking didn't work after creating new Leo window)</vh></v>
<v t="ekr.20031218072017.1673"><vh>(Fix cut/paste problem)(seems to work now)</vh></v>
<v t="ekr.20031218072017.1674"><vh>(Fixed bug importing upper case extensions)</vh></v>
<v t="ekr.20031218072017.1675"><vh>(Fixed bug that forced body_pane_wraps to 1)</vh></v>
<v t="ekr.20031218072017.1676"><vh>(Fixed colorizer exception when undoing paste)</vh>
<v t="ekr.20031218072017.1677"><vh>Traceback &amp; Report</vh></v>
</v>
<v t="ekr.20031218072017.1678"><vh>(Fixed crash on Open With: Shift-Control-O)</vh></v>
<v t="ekr.20031218072017.1679"><vh>(Fixed line-break bug with @nosent files)</vh>
<v t="ekr.20031218072017.1680"><vh>Report</vh></v>
</v>
<v t="ekr.20031218072017.1681"><vh>(Fixed missing log bug)</vh></v>
<v t="ekr.20031218072017.1682"><vh>(Fixed more dragging problems)</vh></v>
<v t="ekr.20031218072017.1683"><vh>(Fixed Nav button bug)</vh></v>
<v t="ekr.20031218072017.1684"><vh>(Fixed problem with destroying Leo windows)</vh></v>
<v t="ekr.20031218072017.1685"><vh>(Fixed refresh problem after Read @file Node)</vh></v>
<v t="ekr.20031218072017.1686"><vh>(Fixed Sort bug)</vh></v>
<v t="ekr.20031218072017.1687"><vh>(Fixed yet another bug in Open With logic)</vh></v>
<v t="ekr.20031218072017.1688"><vh>(Improved how headlines are highlighted)</vh></v>
<v t="ekr.20031218072017.1689"><vh>(Improved reportBadChars)</vh>
<v t="ekr.20031218072017.1690"><vh>Report</vh></v>
</v>
<v t="ekr.20031218072017.1691"><vh>(Reformat paragraph index error)</vh>
<v t="ekr.20031218072017.1692"><vh>Report</vh></v>
</v>
<v t="ekr.20031218072017.1693"><vh>(Removed c.copyTree and v.copyNode and rewrote v.copyTree)</vh></v>
<v t="ekr.20031218072017.1694"><vh>(Restore cursor after undo/redo)</vh></v>
<v t="ekr.20031218072017.1695"><vh>(Updated marks window dynamically)</vh></v>
<v t="ekr.20031218072017.1696"><vh>(Updated row/col when plugins not enabled)</vh></v>
</v>
<v t="ekr.20031218072017.1697"><vh>3.12 beta 3</vh>
<v t="ekr.20031218072017.1698"><vh>(create_nonexistent_directories bug? works for me)</vh>
<v t="ekr.20031218072017.1699"><vh>Report</vh></v>
<v t="ekr.20031218072017.1700"><vh>@file c:\prog\test\newdir\newdir2\createDir.txt</vh></v>
</v>
<v t="ekr.20031218072017.1701"><vh>(Fix undoReplace bug, removed c.copyTree and rewrite v.copyTree)</vh>
<v t="ekr.20031218072017.1702"><vh>Fix undo bug again?</vh></v>
<v t="ekr.20031218072017.1703"><vh>Routines that use undo replace</vh>
<v t="ekr.20031218072017.1704"><vh>convertAllBlanks</vh></v>
<v t="ekr.20031218072017.1705"><vh>convertAllTabs</vh></v>
<v t="ekr.20031218072017.1706"><vh>extract</vh>
<v t="ekr.20031218072017.1707"><vh>&lt;&lt; Set headline for extract &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1708"><vh>extractSection</vh>
<v t="ekr.20031218072017.1709"><vh>&lt;&lt; Set headline for extractSection &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1710"><vh>extractSectionNames</vh>
<v t="ekr.20031218072017.1711"><vh>&lt;&lt; Find the next section name &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1712"><vh>&lt;&lt; undo replace cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1713"><vh>&lt;&lt; redo replace cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1714"><vh>undoReplace</vh></v>
</v>
<v t="ekr.20031218072017.1715"><vh>(Replaced exec with getattr/setattr)</vh></v>
<v t="ekr.20031218072017.1716"><vh>(Use "file in directory" format for entries in Recent Files list)</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1717"><vh>3.12.1 projects</vh>
<v t="ekr.20031218072017.1718"><vh>(Fixed improper "No absolute directory specified anywhere" message)</vh>
<v t="ekr.20031218072017.1719"><vh>Report</vh></v>
<v t="ekr.20031218072017.1720"><vh>save</vh></v>
</v>
<v t="ekr.20031218072017.1721"><vh>(Fixed Shortcut Problems)</vh>
<v t="ekr.20031218072017.1722"><vh>getShortcut (config)</vh></v>
<v t="ekr.20031218072017.1723"><vh>createMenuEntries</vh>
<v t="ekr.20031218072017.1724"><vh>&lt;&lt; set name to the label for doCommand &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1725"><vh>&lt;&lt; set accel to the shortcut for name &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1726"><vh>&lt;&lt; set bind_shortcut and menu_shortcut using accel &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1727"><vh>&lt;&lt; define callback function &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1728"><vh>&lt;&lt; set realLabel, amp_index and menu_shortcut &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1729"><vh>&lt;&lt; handle bind_shorcut &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1730"><vh>(Add/delete scrollbars for @wrap and @nowrap)</vh>
<v t="ekr.20031218072017.1540"><vh>setWrap</vh></v>
</v>
<v t="ekr.20031218072017.1731"><vh>(Worked around shutdown problems with 2.3)</vh>
<v t="ekr.20031218072017.1596"><vh>frame.doHook</vh></v>
<v t="ekr.20031218072017.1732"><vh>app.finishQuit</vh></v>
<v t="ekr.20031218072017.1733"><vh>updateStatusRowCol</vh></v>
<v t="ekr.20031218072017.1315"><vh>enableIdleTimeHook, disableIdleTimeHook, idleTimeHookHandler</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1734"><vh>4.0.x projects</vh>
<v t="ekr.20031218072017.1735"><vh>4.0 Projects</vh>
<v t="ekr.20031218072017.1736"><vh>(4.0: bad tnodeList index following cut/paste of @root tree)</vh></v>
<v t="ekr.20031218072017.1737"><vh>(4.0: Connecting frames to gui)</vh></v>
<v t="ekr.20031218072017.1738"><vh>(4.0: icon code)</vh></v>
<v t="ekr.20031218072017.1739"><vh>(4.0: Last-minute fixes to write logic)</vh>
<v t="ekr.20031218072017.1740"><vh>Report</vh></v>
</v>
<v t="ekr.20031218072017.1741"><vh>(4.0: Rewrite frame/commander ctor logic)</vh></v>
<v t="ekr.20031218072017.1742"><vh>(4.0: Startup code)</vh></v>
<v t="ekr.20031218072017.1743"><vh>(4.0: Whitespace after @doc and @space)</vh>
<v t="ekr.20031218072017.1744"><vh>Report</vh></v>
<v t="ekr.20031218072017.1745"><vh>doc lines... (write)</vh>
<v t="ekr.20031218072017.1746"><vh>putBlankDocLine</vh></v>
<v t="ekr.20031218072017.1747"><vh>putStartDocLine</vh></v>
<v t="ekr.20031218072017.1748"><vh>putDocLine</vh>
<v t="ekr.20031218072017.1749"><vh>&lt;&lt; append words to pending line, splitting the line if needed &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1750"><vh>putEndDocLine</vh></v>
<v t="ekr.20031218072017.1751"><vh>putPending</vh></v>
</v>
<v t="ekr.20031218072017.1752"><vh>readStartAt &amp; readStartDoc</vh></v>
<v t="ekr.20031218072017.1753"><vh>readLastDocLine</vh>
<v t="ekr.20031218072017.1754"><vh>&lt;&lt; new code &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1755"><vh>&lt;&lt; old code &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1756"><vh>(Better hints for extract commands)</vh></v>
<v t="ekr.20031218072017.1757"><vh>(Clone mark bug)</vh>
<v t="ekr.20031218072017.1758"><vh>Report</vh></v>
<v t="ekr.20031218072017.1759"><vh>Insert, Delete &amp; Clone (Commands)</vh>
<v t="ekr.20031218072017.1760"><vh>c.checkMoveWithParentWithWarning</vh></v>
<v t="ekr.20031218072017.1193"><vh>c.deleteOutline</vh></v>
<v t="ekr.20031218072017.1761"><vh>c.insertHeadline</vh></v>
<v t="ekr.20031218072017.1762"><vh>c.clone</vh></v>
<v t="ekr.20031218072017.1765"><vh>c.validateOutline</vh></v>
</v>
<v t="ekr.20031218072017.1766"><vh>Move... (Commands)</vh>
<v t="ekr.20031218072017.1767"><vh>demote</vh></v>
<v t="ekr.20031218072017.1768"><vh>moveOutlineDown</vh>
<v t="ekr.20031218072017.1769"><vh>&lt;&lt; Move v down &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1770"><vh>moveOutlineLeft</vh></v>
<v t="ekr.20031218072017.1771"><vh>moveOutlineRight</vh></v>
<v t="ekr.20031218072017.1772"><vh>moveOutlineUp</vh>
<v t="ekr.20031218072017.1773"><vh>&lt;&lt; Move v up &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1774"><vh>promote</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1775"><vh>(Drag settings)</vh>
<v t="ekr.20031218072017.1776"><vh>tree.OnDrag</vh></v>
<v t="ekr.20031218072017.1777"><vh>tree.OnEndDrag</vh>
<v t="ekr.20031218072017.1778"><vh>&lt;&lt; set vdrag, childFlag &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1779"><vh>(Encoding problem in Open With)</vh></v>
<v t="ekr.20031218072017.1780"><vh>(Fixed clone bug)</vh></v>
<v t="ekr.20031218072017.1781"><vh>(Force a complete recolor after any cut/paste or corresponding undo/redo)</vh></v>
<v t="ekr.20031218072017.1782"><vh>(Forcing Leo to quit from a plugin)</vh></v>
<v t="ekr.20031218072017.1783"><vh>(Go To Line Number command)</vh>
<v t="ekr.20031218072017.1784"><vh>Notes</vh></v>
<v t="ekr.20031218072017.1785"><vh>Request: make Go To Line Number work with @file-nosent files</vh></v>
<v t="ekr.20031218072017.1786"><vh>tests</vh>
<v t="ekr.20031218072017.1787"><vh>@file c:\prog\test\lineTest.txt</vh>
<v t="ekr.20031218072017.1788"><vh>&lt;&lt; ref &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1789"><vh>@rawfile c:\prog\test\rawLineTest.txt</vh>
<v t="ekr.20031218072017.1790"><vh>&lt;&lt; ref &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1791"><vh>(Import elisp files)</vh></v>
<v t="ekr.20031218072017.1792"><vh>(Make sure @rawfile writes a newline before all sentinels)</vh></v>
<v t="ekr.20031218072017.1793"><vh>(Mark @file node dirty if the node has been changed when reading)</vh></v>
<v t="ekr.20031218072017.1794"><vh>(Problems matching parens)</vh></v>
<v t="ekr.20031218072017.1795"><vh>(Problems with settings)</vh></v>
<v t="ekr.20031218072017.1796"><vh>(Put Clear Recent Files in Recent Files menu</vh></v>
<v t="ekr.20031218072017.1797"><vh>(Python import bug)</vh></v>
<v t="ekr.20031218072017.1798"><vh>(Re-enabled python window)</vh></v>
<v t="ekr.20031218072017.1799"><vh>(Remove Sentinels: blank output)</vh></v>
<v t="ekr.20031218072017.1800"><vh>(Scrollwheel)</vh>
<v t="ekr.20031218072017.1801"><vh>f.__init__</vh>
<v t="ekr.20031218072017.1802"><vh>&lt;&lt; set the leoTkinterFrame ivars &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1015"><vh>idle_redraw</vh></v>
<v t="ekr.20031218072017.1803"><vh>OnMouseWheel (Tomaz Ficko)</vh></v>
</v>
<v t="ekr.20031218072017.1804"><vh>(Speed up clone operation by calling initAllCloneBitsInTree)</vh></v>
<v t="ekr.20031218072017.1805"><vh>(Support elisp colorizing)</vh></v>
<v t="ekr.20031218072017.1806"><vh>(Undo changes)</vh>
<v t="ekr.20031218072017.1807"><vh> Commands that should be undoable</vh>
<v t="ekr.20031218072017.1808"><vh>Import Derived Files</vh>
<v t="ekr.20031218072017.1809"><vh>importDerivedFile</vh></v>
<v t="ekr.20031218072017.1810"><vh>importDerivedFiles</vh></v>
<v t="ekr.20031218072017.1811"><vh>createImportedNode</vh></v>
<v t="ekr.20031218072017.1812"><vh>top_df.read</vh>
<v t="ekr.20031218072017.1813"><vh>&lt;&lt; set fileName from root and importFileName &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1814"><vh>&lt;&lt; open file or return false &gt;&gt;</vh>
<v t="ekr.20031218072017.1815"><vh>&lt;&lt; warn on read-only file &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1816"><vh>&lt;&lt; copy ivars to df &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1817"><vh>&lt;&lt; warn about non-empty unvisited nodes &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1818"><vh>&lt;&lt; copy all tempBodyStrings to tnodes &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1819"><vh>&lt;&lt; delete all tempBodyStrings &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1820"><vh>Edit Body Text</vh>
<v t="ekr.20031218072017.1704"><vh>convertAllBlanks</vh></v>
<v t="ekr.20031218072017.1705"><vh>convertAllTabs</vh></v>
<v t="ekr.20031218072017.1821"><vh>convertBlanks</vh></v>
<v t="ekr.20031218072017.1822"><vh>convertTabs</vh></v>
<v t="ekr.20031218072017.1823"><vh>createLastChildNode</vh></v>
<v t="ekr.20031218072017.1824"><vh>dedentBody</vh></v>
<v t="ekr.20031218072017.1706"><vh>extract</vh>
<v t="ekr.20031218072017.1707"><vh>&lt;&lt; Set headline for extract &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1708"><vh>extractSection</vh>
<v t="ekr.20031218072017.1709"><vh>&lt;&lt; Set headline for extractSection &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1710"><vh>extractSectionNames</vh>
<v t="ekr.20031218072017.1711"><vh>&lt;&lt; Find the next section name &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1825"><vh>findBoundParagraph</vh>
<v t="ekr.20031218072017.1826"><vh>&lt;&lt; trace head_lines, ins, tail_lines &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1827"><vh>findMatchingBracket</vh>
<v t="ekr.20031218072017.1828"><vh>findMatchingBracket</vh></v>
</v>
<v t="ekr.20031218072017.1829"><vh>getBodyLines</vh></v>
<v t="ekr.20031218072017.1830"><vh>indentBody</vh></v>
<v t="ekr.20031218072017.1831"><vh>insertBodyTime &amp; allies</vh>
<v t="ekr.20031218072017.1832"><vh>getTime</vh></v>
</v>
<v t="ekr.20031218072017.1833"><vh>reformatParagraph</vh>
<v t="ekr.20031218072017.1834"><vh>&lt;&lt; compute vars for reformatParagraph &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1835"><vh>&lt;&lt; compute the leading whitespace &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1836"><vh>&lt;&lt; compute the result of wrapping all lines &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1837"><vh>&lt;&lt; update the body, selection &amp; undo state &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1838"><vh>updateBodyPane (handles undo)</vh></v>
</v>
<v t="ekr.20031218072017.1839"><vh>readAtFileNodes</vh></v>
</v>
<v t="ekr.20031218072017.1840"><vh> Notes</vh>
<v t="ekr.20031218072017.1841"><vh>Crasher in undo replace</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1842"><vh>(Unicode problems in beta 3)</vh>
<v t="ekr.20031218072017.1843"><vh>test</vh></v>
<v t="ekr.20031218072017.1844"><vh>Problem 1: Typing in body pane</vh></v>
<v t="ekr.20031218072017.1845"><vh>Problem 2: the app.log should be cleared when switching windows</vh>
<v t="ekr.20031218072017.1846"><vh>Traceback: Opening leoConfig.leo</vh></v>
<v t="ekr.20031218072017.1624"><vh>createFrame (leo.py)</vh></v>
<v t="ekr.20031218072017.1473"><vh>tkLog.put &amp; putnl</vh></v>
<v t="ekr.20031218072017.1847"><vh>app.setLog, lockLog, unlocklog</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1848"><vh>(Unicode problems with Python 2.3)</vh>
<v t="ekr.20031218072017.1849"><vh>To do</vh></v>
<v t="ekr.20031218072017.1850"><vh>What I did</vh></v>
<v t="ekr.20031218072017.1851"><vh>Report Unicode traces</vh>
<v t="ekr.20031218072017.1852"><vh>in colorize (doNormalState)</vh></v>
<v t="ekr.20031218072017.1853"><vh>opening leoConfig.leo (in scanDirectives)</vh></v>
<v t="ekr.20031218072017.1854"><vh>opening new Outline (in scanDirectives)</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1855"><vh>(wm_iconbitmap version problem)</vh>
<v t="ekr.20031218072017.1856"><vh>setDefaultIcon</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1857"><vh>4.0.1 Projects</vh>
<v t="ekr.20031218072017.1858"><vh>(4.0: Allow unknown attributes in vnodes and tnodes)</vh>
<v t="ekr.20031218072017.1859"><vh>Reading...</vh>
<v t="ekr.20031218072017.1860"><vh>createVnode (changed for 4.2)</vh>
<v t="ekr.20031218072017.1861"><vh>&lt;&lt; handle unknown vnode attributes &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1561"><vh>getTnode</vh>
<v t="ekr.20031218072017.1562"><vh>&lt;&lt; handle read from file &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1563"><vh>&lt;&lt; handle read from clipboard &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1564"><vh>&lt;&lt; handle unknown attributes &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1566"><vh>getVnode changed for 4.2)</vh>
<v t="ekr.20031218072017.1567"><vh>&lt;&lt; Handle vnode attribute bits  &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1568"><vh>&lt;&lt; Set the remembered status bits &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1862"><vh>Writing</vh>
<v t="ekr.20031218072017.1577"><vh>putTnode</vh>
<v t="ekr.20031218072017.1578"><vh>&lt;&lt; put unknown tnode attributes &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1863"><vh>putVnode (3.x and 4.x)</vh>
<v t="ekr.20031218072017.1864"><vh>&lt;&lt; Put tnode index &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1865"><vh>&lt;&lt; Put attribute bits &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1866"><vh>&lt;&lt; write the head text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1867"><vh>&lt;&lt; put unknown vnode attributes &gt;&gt;</vh></v>
</v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1868"><vh>4.0.2 Projects</vh>
<v t="ekr.20031218072017.1869"><vh>Test of report bad chars</vh></v>
<v t="ekr.20031218072017.1870"><vh>(Better message when @comment inhibits Untangle command)</vh></v>
</v>
<v t="ekr.20031218072017.1871"><vh>4.0.3 Projects</vh>
<v t="ekr.20031218072017.1872"><vh>(Fixed Go To Line Number bug)</vh></v>
</v>
<v t="ekr.20031218072017.1873"><vh>4.0.4 Projects</vh>
<v t="ekr.20031218072017.1874"><vh>Fixed problem with titles of Font and Color panels  (fixed in 4.1 &amp; 4.0.4)</vh>
<v t="ekr.20031218072017.1875"><vh>createFrame (color panel)</vh>
<v t="ekr.20031218072017.1876"><vh>&lt;&lt; create color panel &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1877"><vh>run (font panel)</vh></v>
</v>
<v t="ekr.20031218072017.1878"><vh>Fixed Unicode assert failure (fixed in 4.1 &amp; 4.0.4)</vh>
<v t="ekr.20031218072017.1879"><vh>Report</vh></v>
<v t="ekr.20031218072017.1880"><vh>colorizeAnyLanguage &amp; allies</vh>
<v t="ekr.20031218072017.1602"><vh>&lt;&lt; initialize ivars &amp; tags &gt;&gt; colorizeAnyLanguage</vh>
<v t="ekr.20031218072017.1603"><vh>&lt;&lt; configure tags &gt;&gt;</vh></v>
<v t="ekr.20031218072017.370"><vh>&lt;&lt; configure language-specific settings &gt;&gt; colorizer</vh></v>
</v>
<v t="ekr.20031218072017.1881"><vh>&lt;&lt; all state ivars match &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1882"><vh>&lt;&lt; incrementally color the text &gt;&gt;</vh>
<v t="ekr.20031218072017.1883"><vh>&lt;&lt; compute leading, middle &amp; trailing  lines &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1884"><vh>&lt;&lt; clear leading_lines if middle lines involve @color or @recolor  &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1885"><vh>&lt;&lt; initialize new states &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1886"><vh>&lt;&lt; colorize until the states match &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1887"><vh>&lt;&lt; non-incrementally color the text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1888"><vh>&lt;&lt; update state ivars &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1889"><vh>&lt;&lt; set state ivars to "unknown" &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1890"><vh>&lt;&lt; completely recolor in two passes &gt;&gt;</vh>
<v t="ekr.20031218072017.1891"><vh>&lt;&lt; kludge: insert a blank in s for every image in the line &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1892"><vh>colorizeLine &amp; allies</vh>
<v t="ekr.20031218072017.1618"><vh>continueBlockComment</vh></v>
<v t="ekr.20031218072017.1893"><vh>continueSingle/DoubleString</vh></v>
<v t="ekr.20031218072017.1614"><vh>continueDocPart</vh>
<v t="ekr.20031218072017.1615"><vh>&lt;&lt; handle cweb doc part &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1616"><vh>&lt;&lt; handle noweb doc part &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1894"><vh>continueNocolor</vh></v>
<v t="ekr.20031218072017.1613"><vh>continueSingle/DoublePythonString</vh></v>
<v t="ekr.20031218072017.1620"><vh>doAtKeyword: NOT for cweb keywords</vh></v>
<v t="ekr.20031218072017.1895"><vh>doLatexLine</vh></v>
<v t="ekr.20031218072017.1896"><vh>doNormalState</vh>
<v t="ekr.20031218072017.1897"><vh>Valid regardless of latex mode</vh>
<v t="ekr.20031218072017.1898"><vh>&lt;&lt; handle possible  keyword &gt;&gt;</vh>
<v t="ekr.20031218072017.1899"><vh>&lt;&lt; handle possible latex keyword &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1900"><vh>&lt;&lt; handle possible html keyword &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1901"><vh>&lt;&lt; handle general keyword &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1902"><vh>&lt;&lt; handle at keyword &gt;&gt;</vh>
<v t="ekr.20031218072017.1903"><vh>&lt;&lt; Handle cweb control word &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1904"><vh>&lt;&lt; handle cweb ref or def &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1617"><vh>&lt;&lt; handle single-line comment &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1619"><vh>&lt;&lt; start block comment &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1905"><vh>&lt;&lt; handle latex line &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1906"><vh>Vaid only in latex mode</vh>
<v t="ekr.20031218072017.1907"><vh>&lt;&lt; handle latex normal character &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1908"><vh>Valid when not in latex_mode</vh>
<v t="ekr.20031218072017.1612"><vh>&lt;&lt; handle string &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1909"><vh>&lt;&lt; handle C preprocessor line &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1910"><vh>&lt;&lt; handle special php keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1911"><vh>&lt;&lt; handle blank &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1912"><vh>&lt;&lt; handle tab &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1913"><vh>&lt;&lt; handle normal character &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1914"><vh>doNowebSecRef</vh>
<v t="ekr.20031218072017.1915"><vh>&lt;&lt; set the hyperlink &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1604"><vh>removeAllTags &amp; removeTagsFromLines</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1916"><vh>Unbound var bug (fixed in 4.1 &amp; 4.0.4)</vh>
<v t="ekr.20031218072017.1917"><vh>Report</vh></v>
<v t="ekr.20031218072017.573"><vh>OnEndEditHeadline</vh></v>
</v>
<v t="ekr.20031218072017.1918"><vh>Fix import problems in leoPlugins.leo (fixed in 4.1 &amp; 4.0.4)</vh></v>
<v t="ekr.20031218072017.1919"><vh>Fix @last/PHP problem (fixed in 4.1 &amp; 4.0.4)</vh>
<v t="ekr.20031218072017.1920"><vh>Report</vh></v>
<v t="ekr.20031218072017.1921"><vh>putDirective  (handles @delims) 4,x</vh>
<v t="ekr.20031218072017.1922"><vh>&lt;&lt; handle @delims &gt;&gt;</vh></v>
</v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1923"><vh>4.1 Projects</vh>
<v t="ekr.20031218072017.1924"><vh>Waiting for help from Linux people</vh>
<v t="ekr.20031218072017.1925"><vh>Paste bug (Linux only)</vh>
<v t="ekr.20031218072017.1331"><vh>onBodyWillChange</vh></v>
<v t="ekr.20031218072017.843"><vh>frame.OnPaste, OnPasteNode, OnPasteFromMenu</vh></v>
<v t="ekr.20031218072017.1321"><vh>idle_body_key</vh>
<v t="ekr.20031218072017.1322"><vh>&lt;&lt; return if nothing has changed &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1323"><vh>&lt;&lt; set removeTrailing &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1324"><vh>&lt;&lt; Do auto indent &gt;&gt; (David McNab)</vh></v>
<v t="ekr.20031218072017.1325"><vh>&lt;&lt; convert tab to blanks &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1326"><vh>&lt;&lt; set s to widget text, removing trailing newlines if necessary &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1327"><vh>&lt;&lt; recolor the body &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1328"><vh>&lt;&lt; redraw the screen if necessary &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1926"><vh>Linux headline bug</vh></v>
</v>
<v t="ekr.20031218072017.1927"><vh>alpha 1 projects</vh>
<v t="ekr.20031218072017.1928"><vh>(Allow non-ascii characters in config files)</vh>
<v t="ekr.20031218072017.1929"><vh>open</vh>
<v t="ekr.20031218072017.1421"><vh>&lt;&lt; get config options &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1930"><vh>&lt;&lt; get recent files &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1422"><vh>&lt;&lt; convert find/change options to unicode &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1931"><vh>&lt;&lt; print options &gt;&gt;</vh></v>
<v t="ekr.20040208104150"><vh>&lt;&lt; create rawKeysDict without ampersands &gt;&gt; (config)</vh></v>
</v>
<v t="ekr.20031218072017.1932"><vh>get...FromDict &amp; setDict</vh></v>
<v t="ekr.20031218072017.1146"><vh>&lt;&lt; write recent files section &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1420"><vh>update_section</vh></v>
</v>
<v t="ekr.20031218072017.1933"><vh>(Calling forceShutdown in an "idle" hook)</vh>
<v t="ekr.20031218072017.1934"><vh>run &amp; allies</vh>
<v t="ekr.20031218072017.1935"><vh>&lt;&lt; print encoding info &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1936"><vh>isValidPython</vh></v>
<v t="ekr.20031218072017.1937"><vh>computeLoadDir</vh></v>
<v t="ekr.20031218072017.1624"><vh>createFrame (leo.py)</vh></v>
<v t="ekr.20031218072017.1938"><vh>createNullGuiWithScript (leo.py)</vh></v>
<v t="ekr.20031218072017.1939"><vh>getBatchScript</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1940"><vh>(Converted Reformat Paragraph to use body abstraction routines)</vh></v>
<v t="ekr.20031218072017.1941"><vh>(Converting to app.gui calls)</vh>
<v t="ekr.20031218072017.1942"><vh>Finished</vh>
<v t="ekr.20031218072017.1943"><vh>Removed bodyCtrl from colorizer</vh>
<v t="ekr.20031218072017.1608"><vh>&lt;&lt; define fonts and data for wiki tags &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1602"><vh>&lt;&lt; initialize ivars &amp; tags &gt;&gt; colorizeAnyLanguage</vh>
<v t="ekr.20031218072017.1603"><vh>&lt;&lt; configure tags &gt;&gt;</vh></v>
<v t="ekr.20031218072017.370"><vh>&lt;&lt; configure language-specific settings &gt;&gt; colorizer</vh></v>
</v>
<v t="ekr.20031218072017.1616"><vh>&lt;&lt; handle noweb doc part &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1604"><vh>removeAllTags &amp; removeTagsFromLines</vh></v>
<v t="ekr.20031218072017.1914"><vh>doNowebSecRef</vh>
<v t="ekr.20031218072017.1915"><vh>&lt;&lt; set the hyperlink &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1944"><vh>removeAllImages</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1945"><vh>(Created body classes)</vh>
<v t="ekr.20031218072017.1946"><vh>Design notes (do not delete)</vh></v>
</v>
<v t="ekr.20031218072017.1947"><vh>(Created log classes)</vh></v>
<v t="ekr.20031218072017.1948"><vh>(Enabling nav buttons)</vh>
<v t="ekr.20031218072017.1019"><vh>tree.select</vh>
<v t="ekr.20031218072017.1020"><vh>&lt;&lt; define vars and stop editing &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1021"><vh>&lt;&lt; unselect the old node &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1022"><vh>&lt;&lt; select the new node &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1023"><vh>&lt;&lt; update c.beadList or c.beadPointer &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1024"><vh>&lt;&lt; update c.visitedList &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1025"><vh>&lt;&lt; set the current node and redraw &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1627"><vh>goPrevVisitedNode</vh></v>
<v t="ekr.20031218072017.1628"><vh>goNextVisitedNode</vh></v>
</v>
<v t="ekr.20031218072017.1949"><vh>(Fixed bugs in Shift Left/Write commands)</vh></v>
<v t="ekr.20031218072017.1950"><vh>(Fixed crasher with bad pattern match patterns)</vh></v>
<v t="ekr.20031218072017.1951"><vh>(Fixed Nested comments bug)</vh>
<v t="ekr.20031218072017.1952"><vh>Comments</vh></v>
<v t="ekr.20031218072017.1953"><vh>Report</vh></v>
<v t="ekr.20031218072017.1747"><vh>putStartDocLine</vh></v>
<v t="ekr.20031218072017.1753"><vh>readLastDocLine</vh>
<v t="ekr.20031218072017.1754"><vh>&lt;&lt; new code &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1755"><vh>&lt;&lt; old code &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1752"><vh>readStartAt &amp; readStartDoc</vh></v>
<v t="ekr.20031218072017.1954"><vh>readEndAt &amp; readEndDoc</vh></v>
</v>
<v t="ekr.20031218072017.1955"><vh>(Injected vnode callbacks &amp; ivars)</vh>
<v t="ekr.20031218072017.1956"><vh>tree.injectCallbacks (class method)</vh>
<v t="ekr.20031218072017.1957"><vh>&lt;&lt; define tkinter callbacks to be injected in the vnode class &gt;&gt;</vh>
<v t="ekr.20031218072017.1958"><vh>OnBoxClick</vh></v>
<v t="ekr.20031218072017.1959"><vh>OnDrag</vh></v>
<v t="ekr.20031218072017.1960"><vh>OnEndDrag</vh></v>
<v t="ekr.20031218072017.1961"><vh>OnHeadlineClick &amp; OnHeadlineRightClick</vh></v>
<v t="ekr.20031218072017.1962"><vh>OnHyperLinkControlClick</vh></v>
<v t="ekr.20031218072017.1963"><vh>OnHeadlineKey</vh></v>
<v t="ekr.20031218072017.1964"><vh>OnHyperLinkEnter</vh></v>
<v t="ekr.20031218072017.1965"><vh>OnHyperLinkLeave</vh></v>
<v t="ekr.20031218072017.1966"><vh>OnIconClick &amp; OnIconRightClick</vh></v>
<v t="ekr.20031218072017.1967"><vh>OnIconDoubleClick</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1968"><vh>&lt;&lt; initialize vnode data members &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1002"><vh>drawIcon (tag_bind)</vh></v>
</v>
<v t="ekr.20031218072017.1969"><vh>(Made tnode indices immutable)</vh>
<v t="ekr.20031218072017.1570"><vh>assignFileIndices &amp; compactFileIndices</vh>
<v t="ekr.20031218072017.1571"><vh>&lt;&lt; assign missing gnx's, converting ints to gnx's &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1572"><vh>&lt;&lt; reassign all tnode indices &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1970"><vh>getLeoHeader</vh></v>
<v t="ekr.20031218072017.1566"><vh>getVnode changed for 4.2)</vh>
<v t="ekr.20031218072017.1567"><vh>&lt;&lt; Handle vnode attribute bits  &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1568"><vh>&lt;&lt; Set the remembered status bits &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1561"><vh>getTnode</vh>
<v t="ekr.20031218072017.1562"><vh>&lt;&lt; handle read from file &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1563"><vh>&lt;&lt; handle read from clipboard &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1564"><vh>&lt;&lt; handle unknown attributes &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1577"><vh>putTnode</vh>
<v t="ekr.20031218072017.1578"><vh>&lt;&lt; put unknown tnode attributes &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1863"><vh>putVnode (3.x and 4.x)</vh>
<v t="ekr.20031218072017.1864"><vh>&lt;&lt; Put tnode index &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1865"><vh>&lt;&lt; Put attribute bits &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1866"><vh>&lt;&lt; write the head text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1867"><vh>&lt;&lt; put unknown vnode attributes &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1971"><vh>putClipboardHeader</vh>
<v t="ekr.20031218072017.1972"><vh>&lt;&lt; count the number of tnodes &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1557"><vh>finishPaste</vh>
<v t="ekr.20031218072017.1558"><vh>&lt;&lt; reassign tnode indices and clear all clone links &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1973"><vh>(Removed references to frame.top outside of tkinter classes)</vh>
<v t="ekr.20031218072017.1974"><vh>destroySelf</vh></v>
<v t="ekr.20031218072017.1975"><vh>destroyAllObjects</vh>
<v t="ekr.20031218072017.1976"><vh>&lt;&lt; clear all vnodes and tnodes in the tree&gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1977"><vh>(Use gnx's in .leo files)</vh>
<v t="ekr.20031218072017.1934"><vh>run &amp; allies</vh>
<v t="ekr.20031218072017.1935"><vh>&lt;&lt; print encoding info &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1936"><vh>isValidPython</vh></v>
<v t="ekr.20031218072017.1937"><vh>computeLoadDir</vh></v>
<v t="ekr.20031218072017.1624"><vh>createFrame (leo.py)</vh></v>
<v t="ekr.20031218072017.1938"><vh>createNullGuiWithScript (leo.py)</vh></v>
<v t="ekr.20031218072017.1939"><vh>getBatchScript</vh></v>
</v>
<v t="ekr.20031218072017.1416"><vh>app.__init__</vh>
<v t="ekr.20031218072017.1417"><vh>&lt;&lt; define global constants &gt;&gt;</vh></v>
<v t="ekr.20031218072017.368"><vh>&lt;&lt; define global data structures &gt;&gt; app</vh></v>
</v>
<v t="ekr.20031218072017.1421"><vh>&lt;&lt; get config options &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1978"><vh>app.setLeoID</vh>
<v t="ekr.20031218072017.1979"><vh>&lt;&lt; return if we can set self.leoID from sys.leoID&gt;&gt;</vh></v>
<v t="ekr.20031218072017.1980"><vh>&lt;&lt; return if we can set self.leoID from "leoID.txt" &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1981"><vh>&lt;&lt; put up a dialog requiring a valid id &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1982"><vh>&lt;&lt; attempt to create leoID.txt &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1983"><vh>class tkinterAskLeoID</vh>
<v t="ekr.20031218072017.1984"><vh>tkinterAskLeoID.__init__</vh></v>
<v t="ekr.20031218072017.1985"><vh>tkinterAskLeoID.createFrame</vh></v>
<v t="ekr.20031218072017.1986"><vh>tkinterAskLeoID.onCloseWindow</vh></v>
<v t="ekr.20031218072017.1987"><vh>tkinterAskLeoID.onButton</vh></v>
<v t="ekr.20031218072017.1988"><vh>tkinterAskLeoID.onKey</vh>
<v t="ekr.20031218072017.1989"><vh>&lt;&lt; eliminate invalid characters &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1990"><vh>&lt;&lt; enable the ok button if there are 3 or more valid characters &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1991"><vh>class nodeIndices</vh>
<v t="ekr.20031218072017.1992"><vh>nodeIndices.__init__</vh></v>
<v t="ekr.20031218072017.1993"><vh>areEqual</vh></v>
<v t="ekr.20031218072017.1994"><vh>get/setDefaultId</vh></v>
<v t="ekr.20031218072017.1995"><vh>getNewIndex</vh></v>
<v t="ekr.20031218072017.1996"><vh>isGnx</vh></v>
<v t="ekr.20031218072017.1997"><vh>scanGnx</vh></v>
<v t="ekr.20031218072017.1998"><vh>setTimeStamp</vh></v>
<v t="ekr.20031218072017.1999"><vh>toString</vh></v>
</v>
<v t="ekr.20031218072017.2000"><vh>Writing gnx's</vh>
<v t="ekr.20031218072017.2001"><vh>putOpenNodeSentinel (sets tnodeList)</vh></v>
<v t="ekr.20031218072017.1570"><vh>assignFileIndices &amp; compactFileIndices</vh>
<v t="ekr.20031218072017.1571"><vh>&lt;&lt; assign missing gnx's, converting ints to gnx's &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1572"><vh>&lt;&lt; reassign all tnode indices &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1863"><vh>putVnode (3.x and 4.x)</vh>
<v t="ekr.20031218072017.1864"><vh>&lt;&lt; Put tnode index &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1865"><vh>&lt;&lt; Put attribute bits &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1866"><vh>&lt;&lt; write the head text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1867"><vh>&lt;&lt; put unknown vnode attributes &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1577"><vh>putTnode</vh>
<v t="ekr.20031218072017.1578"><vh>&lt;&lt; put unknown tnode attributes &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2002"><vh>putTnodeList (4.0)</vh></v>
</v>
<v t="ekr.20031218072017.2003"><vh>Reading gnx's</vh>
<v t="ekr.20031218072017.2004"><vh>canonicalTnodeIndex</vh></v>
<v t="ekr.20031218072017.2006"><vh>t.__init__</vh></v>
<v t="ekr.20031218072017.1860"><vh>createVnode (changed for 4.2)</vh>
<v t="ekr.20031218072017.1861"><vh>&lt;&lt; handle unknown vnode attributes &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2007"><vh>findChild</vh></v>
<v t="ekr.20031218072017.1561"><vh>getTnode</vh>
<v t="ekr.20031218072017.1562"><vh>&lt;&lt; handle read from file &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1563"><vh>&lt;&lt; handle read from clipboard &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1564"><vh>&lt;&lt; handle unknown attributes &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1566"><vh>getVnode changed for 4.2)</vh>
<v t="ekr.20031218072017.1567"><vh>&lt;&lt; Handle vnode attribute bits  &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1568"><vh>&lt;&lt; Set the remembered status bits &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2008"><vh>getTnodeList (4.0)</vh></v>
<v t="ekr.20031218072017.2009"><vh>newTnode</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.2010"><vh>beta 1 projects</vh>
<v t="ekr.20031218072017.2011"><vh>(Don't auto-save if noting changed)</vh>
<v t="ekr.20031218072017.2012"><vh>writeAtFileNodes</vh></v>
<v t="ekr.20031218072017.1666"><vh>writeDirtyAtFileNodes</vh></v>
<v t="ekr.20031218072017.2013"><vh>writeMissingAtFileNodes</vh></v>
<v t="ekr.20031218072017.2014"><vh>writeNew/OldDerivedFiles</vh></v>
<v t="ekr.20031218072017.2015"><vh>top_df.writeAll</vh>
<v t="ekr.20031218072017.2016"><vh>&lt;&lt; Clear all orphan bits &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2017"><vh>&lt;&lt; handle v's tree &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2018"><vh>&lt;&lt; say the command is finished &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2019"><vh>top_df.writeMissing</vh>
<v t="ekr.20031218072017.2020"><vh>&lt;&lt; set missing if the file does not exist &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2021"><vh>&lt;&lt; create df.outputFile &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2022"><vh>&lt;&lt; write the @file node &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2023"><vh>atFile.replaceTargetFileIfDifferent</vh>
<v t="ekr.20031218072017.2024"><vh>&lt;&lt; delete the output file &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2025"><vh>&lt;&lt; replace the target file with the output file &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2026"><vh>&lt;&lt; rename the output file to be the target file &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2027"><vh>(Hoist/dehoist)</vh>
<v t="ekr.20031218072017.2028"><vh>Hoist &amp; dehoist &amp; enablers</vh></v>
<v t="ekr.20031218072017.2029"><vh>drawTopTree</vh></v>
<v t="ekr.20031218072017.1008"><vh>drawTree</vh>
<v t="ekr.20031218072017.1009"><vh>&lt;&lt; draw vertical line &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1015"><vh>idle_redraw</vh></v>
<v t="ekr.20031218072017.1016"><vh>idle_second_redraw</vh></v>
<v t="ekr.20031218072017.2030"><vh>u.redo</vh>
<v t="ekr.20031218072017.2031"><vh>&lt;&lt; redo clone cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2032"><vh>&lt;&lt; redo delete cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2033"><vh>&lt;&lt; redo hoist cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2034"><vh>&lt;&lt; redo insert cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2035"><vh>&lt;&lt; redo move &amp; drag cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2036"><vh>&lt;&lt; redo promote and demote cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1713"><vh>&lt;&lt; redo replace cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2037"><vh>&lt;&lt; redo sort cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2038"><vh>&lt;&lt; redo typing cases &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2039"><vh>u.undo</vh>
<v t="ekr.20031218072017.2040"><vh>&lt;&lt; undo clone cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2041"><vh>&lt;&lt; undo delete cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2042"><vh>&lt;&lt; undo hoist cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2043"><vh>&lt;&lt; undo insert cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2044"><vh>&lt;&lt; undo move  &amp; drag cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1712"><vh>&lt;&lt; undo replace cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2045"><vh>&lt;&lt; undo promote and demote cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2046"><vh>&lt;&lt; undo sort cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2047"><vh>&lt;&lt; undo typing cases &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2048"><vh>v.isAncestorOf</vh></v>
<v t="ekr.20031218072017.1766"><vh>Move... (Commands)</vh>
<v t="ekr.20031218072017.1767"><vh>demote</vh></v>
<v t="ekr.20031218072017.1768"><vh>moveOutlineDown</vh>
<v t="ekr.20031218072017.1769"><vh>&lt;&lt; Move v down &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1770"><vh>moveOutlineLeft</vh></v>
<v t="ekr.20031218072017.1771"><vh>moveOutlineRight</vh></v>
<v t="ekr.20031218072017.1772"><vh>moveOutlineUp</vh>
<v t="ekr.20031218072017.1773"><vh>&lt;&lt; Move v up &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1774"><vh>promote</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2049"><vh>(Fixed bugs in Extract commands)</vh></v>
<v t="ekr.20031218072017.2050"><vh>(Fixed problems writing files with embedded binary characters</vh>
<v t="ekr.20031218072017.2051"><vh>Report</vh></v>
<v t="ekr.20031218072017.2052"><vh>openWithFileName</vh></v>
<v t="ekr.20031218072017.1812"><vh>top_df.read</vh>
<v t="ekr.20031218072017.1813"><vh>&lt;&lt; set fileName from root and importFileName &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1814"><vh>&lt;&lt; open file or return false &gt;&gt;</vh>
<v t="ekr.20031218072017.1815"><vh>&lt;&lt; warn on read-only file &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1816"><vh>&lt;&lt; copy ivars to df &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1817"><vh>&lt;&lt; warn about non-empty unvisited nodes &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1818"><vh>&lt;&lt; copy all tempBodyStrings to tnodes &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1819"><vh>&lt;&lt; delete all tempBodyStrings &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2053"><vh>(Fixed  first node-only bug)</vh>
<v t="ekr.20031218072017.2054"><vh>Test</vh>
<v t="ekr.20031218072017.2055"><vh>Search only this node in "node only" mode</vh>
<v t="ekr.20031218072017.2056"><vh>NewHeadline</vh></v>
</v>
<v t="ekr.20031218072017.2057"><vh>NewHeadline</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2058"><vh>(Saved node-only pref.  Ignore unknown find prefs &amp; global prefs)</vh>
<v t="ekr.20031218072017.1460"><vh>find.set_ivars</vh></v>
<v t="ekr.20031218072017.2059"><vh>find.init</vh>
<v t="ekr.20031218072017.2060"><vh>&lt;&lt; set find/change widgets &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2061"><vh>&lt;&lt; set radio buttons from ivars &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2062"><vh>getPrefs</vh>
<v t="ekr.20031218072017.2063"><vh>getTargetLanguage</vh></v>
</v>
<v t="ekr.20031218072017.2064"><vh>getFindPanelSettings</vh>
<v t="ekr.20031218072017.2065"><vh>&lt;&lt; Set defaults of all flags &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2066"><vh>putPrefs</vh>
<v t="ekr.20031218072017.2067"><vh>&lt;&lt; put prefs that may exist in leoConfig.txt &gt;&gt; (putPrefs)</vh>
<v t="ekr.20031218072017.2068"><vh>&lt;&lt; put default directory &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.2069"><vh>(Fixed Serious Undo Change All bug)</vh>
<v t="ekr.20031218072017.2070"><vh>2 Reports</vh></v>
</v>
<v t="ekr.20031218072017.2071"><vh>(Check Outline Command) TO DO: MORE CHECKS</vh>
<v t="ekr.20031218072017.2072"><vh>c.checkOutline</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2073"><vh>beta 2 projects</vh>
<v t="ekr.20031218072017.2074"><vh>(Script find/change commands &amp; Selected Text option)</vh></v>
</v>
<v t="ekr.20031218072017.2075"><vh>beta 3 projects</vh>
<v t="ekr.20031218072017.2076"><vh>(Fixed LaTeX colorizer bug)</vh>
<v t="ekr.20031218072017.371"><vh>&lt;&lt; define colorizer keywords &gt;&gt; colorizer</vh>
<v t="ekr.20031218072017.372"><vh>&lt;&lt; actionscript keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.373"><vh>&lt;&lt; c keywords &gt;&gt;</vh></v>
<v t="ekr.20040206072057"><vh>&lt;&lt; csharp keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.374"><vh>&lt;&lt; elisp keywords&gt;&gt;</vh></v>
<v t="ekr.20031218072017.375"><vh>&lt;&lt; html keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.376"><vh>&lt;&lt; java keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.377"><vh>&lt;&lt; latex keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.378"><vh>&lt;&lt; pascal keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.379"><vh>&lt;&lt; perl keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.380"><vh>&lt;&lt; php keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.381"><vh>&lt;&lt; python keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.382"><vh>&lt;&lt; rebol keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.383"><vh>&lt;&lt; tcl/tk keywords &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1880"><vh>colorizeAnyLanguage &amp; allies</vh>
<v t="ekr.20031218072017.1602"><vh>&lt;&lt; initialize ivars &amp; tags &gt;&gt; colorizeAnyLanguage</vh>
<v t="ekr.20031218072017.1603"><vh>&lt;&lt; configure tags &gt;&gt;</vh></v>
<v t="ekr.20031218072017.370"><vh>&lt;&lt; configure language-specific settings &gt;&gt; colorizer</vh></v>
</v>
<v t="ekr.20031218072017.1881"><vh>&lt;&lt; all state ivars match &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1882"><vh>&lt;&lt; incrementally color the text &gt;&gt;</vh>
<v t="ekr.20031218072017.1883"><vh>&lt;&lt; compute leading, middle &amp; trailing  lines &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1884"><vh>&lt;&lt; clear leading_lines if middle lines involve @color or @recolor  &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1885"><vh>&lt;&lt; initialize new states &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1886"><vh>&lt;&lt; colorize until the states match &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1887"><vh>&lt;&lt; non-incrementally color the text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1888"><vh>&lt;&lt; update state ivars &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1889"><vh>&lt;&lt; set state ivars to "unknown" &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1890"><vh>&lt;&lt; completely recolor in two passes &gt;&gt;</vh>
<v t="ekr.20031218072017.1891"><vh>&lt;&lt; kludge: insert a blank in s for every image in the line &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1892"><vh>colorizeLine &amp; allies</vh>
<v t="ekr.20031218072017.1618"><vh>continueBlockComment</vh></v>
<v t="ekr.20031218072017.1893"><vh>continueSingle/DoubleString</vh></v>
<v t="ekr.20031218072017.1614"><vh>continueDocPart</vh>
<v t="ekr.20031218072017.1615"><vh>&lt;&lt; handle cweb doc part &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1616"><vh>&lt;&lt; handle noweb doc part &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1894"><vh>continueNocolor</vh></v>
<v t="ekr.20031218072017.1613"><vh>continueSingle/DoublePythonString</vh></v>
<v t="ekr.20031218072017.1620"><vh>doAtKeyword: NOT for cweb keywords</vh></v>
<v t="ekr.20031218072017.1895"><vh>doLatexLine</vh></v>
<v t="ekr.20031218072017.1896"><vh>doNormalState</vh>
<v t="ekr.20031218072017.1897"><vh>Valid regardless of latex mode</vh>
<v t="ekr.20031218072017.1898"><vh>&lt;&lt; handle possible  keyword &gt;&gt;</vh>
<v t="ekr.20031218072017.1899"><vh>&lt;&lt; handle possible latex keyword &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1900"><vh>&lt;&lt; handle possible html keyword &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1901"><vh>&lt;&lt; handle general keyword &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1902"><vh>&lt;&lt; handle at keyword &gt;&gt;</vh>
<v t="ekr.20031218072017.1903"><vh>&lt;&lt; Handle cweb control word &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1904"><vh>&lt;&lt; handle cweb ref or def &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1617"><vh>&lt;&lt; handle single-line comment &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1619"><vh>&lt;&lt; start block comment &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1905"><vh>&lt;&lt; handle latex line &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1906"><vh>Vaid only in latex mode</vh>
<v t="ekr.20031218072017.1907"><vh>&lt;&lt; handle latex normal character &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1908"><vh>Valid when not in latex_mode</vh>
<v t="ekr.20031218072017.1612"><vh>&lt;&lt; handle string &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1909"><vh>&lt;&lt; handle C preprocessor line &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1910"><vh>&lt;&lt; handle special php keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1911"><vh>&lt;&lt; handle blank &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1912"><vh>&lt;&lt; handle tab &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1913"><vh>&lt;&lt; handle normal character &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1914"><vh>doNowebSecRef</vh>
<v t="ekr.20031218072017.1915"><vh>&lt;&lt; set the hyperlink &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1604"><vh>removeAllTags &amp; removeTagsFromLines</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2077"><vh>(Clear Recent Files wx problems)</vh>
<v t="ekr.20031218072017.2078"><vh>createRecentFilesMenuItems (leoMenu)</vh></v>
<v t="ekr.20031218072017.2079"><vh>Recent Files submenu &amp; allies</vh>
<v t="ekr.20031218072017.2080"><vh>clearRecentFiles</vh></v>
<v t="ekr.20031218072017.2081"><vh>openRecentFile</vh>
<v t="ekr.20031218072017.2082"><vh>&lt;&lt; Set closeFlag if the only open window is empty &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2083"><vh>updateRecentFiles</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2084"><vh>(Created base classes for all panels)</vh>
<v t="ekr.20031218072017.2085"><vh>(new prefs classes)</vh>
<v t="ekr.20031218072017.2086"><vh>preferences</vh></v>
</v>
<v t="ekr.20031218072017.2087"><vh>(new font classes)</vh>
<v t="ekr.20031218072017.2088"><vh>fontPanel</vh></v>
</v>
<v t="ekr.20031218072017.2089"><vh>(new color panel classes)</vh>
<v t="ekr.20031218072017.2090"><vh>colorPanel</vh></v>
</v>
<v t="ekr.20031218072017.2091"><vh>(Create base class for compare window)</vh>
<v t="ekr.20031218072017.2092"><vh>openCompareWindow</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2093"><vh>(Recent files menu regression)</vh></v>
<v t="ekr.20031218072017.2094"><vh>(Removed bodyCtrl from all core code)</vh></v>
</v>
<v t="ekr.20031218072017.2095"><vh>beta 4 projects</vh>
<v t="ekr.20031218072017.2096"><vh>(Changes for MacOs/Darwin Marc-Antoine Parent)</vh>
<v t="ekr.20031218072017.2097"><vh>Report</vh></v>
<v t="ekr.20031218072017.1937"><vh>computeLoadDir</vh></v>
<v t="ekr.20031218072017.2098"><vh>canonicalizeShortcut</vh>
<v t="ekr.20031218072017.2099"><vh>&lt;&lt; canonicalize the last field &gt;&gt;</vh>
<v t="ekr.20031218072017.2100"><vh>&lt;&lt; define dict of Tk bind names &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2101"><vh>&lt;&lt; define dict of special names &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2102"><vh>&lt;&lt; set the last field, preserving case &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2103"><vh>&lt;&lt; synthesize the shortcuts from the information &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2104"><vh>(Fixed bug re: two refs on same line)</vh>
<v t="ekr.20031218072017.2105"><vh>Report</vh></v>
<v t="ekr.20031218072017.2106"><vh>putRefLine (new) &amp; allies</vh>
<v t="ekr.20031218072017.2107"><vh>PutRefAt</vh></v>
<v t="ekr.20031218072017.2108"><vh>putAfterLastRef</vh></v>
<v t="ekr.20031218072017.2109"><vh>putAfterMiddleef</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2110"><vh>(Remove _all_ extra newlines in @file-nosent modes)</vh>
<v t="ekr.20031218072017.2111"><vh>Writing (4.x)</vh>
<v t="ekr.20031218072017.2112"><vh>Top level</vh>
<v t="ekr.20031218072017.2113"><vh>new_df.closeWriteFile</vh></v>
<v t="ekr.20031218072017.2114"><vh>new_df.write (inits root.tnodeList)</vh>
<v t="ekr.20031218072017.2115"><vh>&lt;&lt; initialize &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2116"><vh>&lt;&lt; open the file; return on error &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2117"><vh>&lt;&lt; write then entire @file tree &gt;&gt; (4.x)</vh>
<v t="ekr.20031218072017.2118"><vh>&lt;&lt; put all @first lines in root &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2119"><vh>&lt;&lt; put all @last lines in root &gt;&gt; (4.x)</vh></v>
</v>
<v t="ekr.20031218072017.2121"><vh>&lt;&lt; finish writing &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2122"><vh>new_df.rawWrite</vh>
<v t="ekr.20031218072017.2123"><vh>&lt;&lt; write root's tree &gt;&gt;</vh>
<v t="ekr.20031218072017.2124"><vh>&lt;&lt; put all @first lines in root &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2125"><vh>&lt;&lt; put optional @comment sentinel lines &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2126"><vh>&lt;&lt; Write p's node &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2127"><vh>&lt;&lt; put all @last lines in root &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.2128"><vh>putBody (4.x)</vh>
<v t="ekr.20031218072017.2129"><vh>&lt;&lt; handle line at s[i]  &gt;&gt; (4.x)</vh></v>
</v>
<v t="ekr.20031218072017.2130"><vh>code lines... (4.x)</vh>
<v t="ekr.20031218072017.2131"><vh>inAtOthers</vh></v>
<v t="ekr.20031218072017.2132"><vh>putAtOthersChild</vh></v>
<v t="ekr.20031218072017.2133"><vh>putAtOthersLine</vh></v>
<v t="ekr.20031218072017.2134"><vh>putCodeLine</vh></v>
<v t="ekr.20031218072017.2106"><vh>putRefLine (new) &amp; allies</vh>
<v t="ekr.20031218072017.2107"><vh>PutRefAt</vh></v>
<v t="ekr.20031218072017.2108"><vh>putAfterLastRef</vh></v>
<v t="ekr.20031218072017.2109"><vh>putAfterMiddleef</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1745"><vh>doc lines... (write)</vh>
<v t="ekr.20031218072017.1746"><vh>putBlankDocLine</vh></v>
<v t="ekr.20031218072017.1747"><vh>putStartDocLine</vh></v>
<v t="ekr.20031218072017.1748"><vh>putDocLine</vh>
<v t="ekr.20031218072017.1749"><vh>&lt;&lt; append words to pending line, splitting the line if needed &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1750"><vh>putEndDocLine</vh></v>
<v t="ekr.20031218072017.1751"><vh>putPending</vh></v>
</v>
<v t="ekr.20031218072017.2135"><vh>Writing Utils...</vh>
<v t="ekr.20031218072017.2136"><vh>directiveKind</vh></v>
<v t="ekr.20031218072017.2137"><vh>hasSectionName</vh></v>
<v t="ekr.20031218072017.2138"><vh>os, onl, etc.</vh></v>
<v t="ekr.20031218072017.1921"><vh>putDirective  (handles @delims) 4,x</vh>
<v t="ekr.20031218072017.1922"><vh>&lt;&lt; handle @delims &gt;&gt;</vh></v>
</v>
</v>
</v>
</v>
<v t="ekr.20031218072017.2139"><vh>(Support directives &amp; sections in Execute Script Command)</vh>
<v t="ekr.20031218072017.2140"><vh>executeScript</vh>
<v t="ekr.20031218072017.2141"><vh>&lt;&lt; define class fileLikeObject &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2142"><vh>&lt;&lt; get script into s &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2143"><vh>&lt;&lt; redirect output if redirect_execute_script_output_to_log_pane &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2114"><vh>new_df.write (inits root.tnodeList)</vh>
<v t="ekr.20031218072017.2115"><vh>&lt;&lt; initialize &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2116"><vh>&lt;&lt; open the file; return on error &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2117"><vh>&lt;&lt; write then entire @file tree &gt;&gt; (4.x)</vh>
<v t="ekr.20031218072017.2118"><vh>&lt;&lt; put all @first lines in root &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2119"><vh>&lt;&lt; put all @last lines in root &gt;&gt; (4.x)</vh></v>
</v>
<v t="ekr.20031218072017.2121"><vh>&lt;&lt; finish writing &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2144"><vh>(Wrappers for os.path routines)</vh>
<v t="ekr.20031218072017.2145"><vh>os.path wrappers (leoGlobals.py)</vh>
<v t="ekr.20031218072017.2146"><vh>os_path_abspath</vh></v>
<v t="ekr.20031218072017.2147"><vh>os_path_basename</vh></v>
<v t="ekr.20031218072017.2148"><vh>os_path_dirname</vh></v>
<v t="ekr.20031218072017.2149"><vh>os_path_exists</vh></v>
<v t="ekr.20031218072017.2150"><vh>os_path_getmtime</vh></v>
<v t="ekr.20031218072017.2151"><vh>os_path_isabs</vh></v>
<v t="ekr.20031218072017.2152"><vh>os_path_isdir (not used)</vh></v>
<v t="ekr.20031218072017.2153"><vh>os_path_isfile</vh></v>
<v t="ekr.20031218072017.2154"><vh>os_path_join</vh></v>
<v t="ekr.20031218072017.2155"><vh>os_path_norm</vh></v>
<v t="ekr.20031218072017.2156"><vh>os_path_normcase</vh></v>
<v t="ekr.20031218072017.2157"><vh>os_path_normpath</vh></v>
<v t="ekr.20031218072017.2158"><vh>os_path_split</vh></v>
<v t="ekr.20031218072017.2159"><vh>os_path_splitext</vh></v>
<v t="ekr.20031218072017.2160"><vh>toUnicodeFileEncoding</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.2161"><vh>beta 5 projects</vh>
<v t="ekr.20031218072017.2162"><vh>(Added defensive code to prevent crash in colorizer)</vh>
<v t="ekr.20031218072017.2163"><vh>Report</vh></v>
<v t="ekr.20031218072017.1885"><vh>&lt;&lt; initialize new states &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2165"><vh>(Bold body pane bug)</vh>
<v t="ekr.20031218072017.2166"><vh>Scripts</vh>
<v t="ekr.20031218072017.2167"><vh>Show settings</vh>
<v t="ekr.20031218072017.2168"><vh>getFontSettings</vh></v>
</v>
<v t="ekr.20031218072017.2169"><vh>Set tracing var</vh></v>
<v t="ekr.20031218072017.2170"><vh>Print font</vh></v>
<v t="ekr.20031218072017.2171"><vh>Print default font</vh></v>
</v>
<v t="ekr.20031218072017.2172"><vh>Code</vh>
<v t="ekr.20031218072017.1416"><vh>app.__init__</vh>
<v t="ekr.20031218072017.1417"><vh>&lt;&lt; define global constants &gt;&gt;</vh></v>
<v t="ekr.20031218072017.368"><vh>&lt;&lt; define global data structures &gt;&gt; app</vh></v>
</v>
<v t="ekr.20031218072017.2173"><vh>config</vh>
<v t="ekr.20031218072017.2174"><vh>config.getFontFromParams</vh></v>
</v>
<v t="ekr.20031218072017.2175"><vh>frame</vh>
<v t="ekr.20031218072017.2176"><vh>f.finishCreate</vh>
<v t="ekr.20031218072017.2177"><vh>&lt;&lt; create the toplevel frame &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2178"><vh>&lt;&lt; create all the subframes &gt;&gt;</vh>
<v t="ekr.20031218072017.2179"><vh>&lt;&lt; create both splitters &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2180"><vh>&lt;&lt; create the first tree node &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2181"><vh>body</vh>
<v t="ekr.20031218072017.2182"><vh>tkBody. __init__</vh></v>
<v t="ekr.20031218072017.2183"><vh>tkBody.setFontFromConfig</vh></v>
<v t="ekr.20031218072017.2184"><vh>Configuration (Tk spelling)</vh></v>
</v>
<v t="ekr.20031218072017.2185"><vh>gui</vh>
<v t="ekr.20031218072017.2186"><vh>tkGui.getDefaultConfigFont</vh></v>
<v t="ekr.20031218072017.2187"><vh>tkGui.getFontFromParams</vh></v>
<v t="ekr.20031218072017.2188"><vh>newLeoCommanderAndFrame (gui-independent)</vh>
<v t="ekr.20031218072017.2189"><vh>&lt;&lt; compute the window title &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2052"><vh>openWithFileName</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2190"><vh>(Created null classes)</vh>
<v t="ekr.20031218072017.2191"><vh>class nullBody</vh>
<v t="ekr.20031218072017.2192"><vh> nullBody.__init__</vh></v>
<v t="ekr.20031218072017.2193"><vh>Utils (internal use)</vh>
<v t="ekr.20031218072017.2194"><vh>findStartOfLine</vh></v>
<v t="ekr.20031218072017.2195"><vh>scanToStartOfLine</vh></v>
<v t="ekr.20031218072017.2196"><vh>scanToEndOfLine</vh></v>
</v>
<v t="ekr.20031218072017.2197"><vh>Must be overriden in subclasses</vh>
<v t="ekr.20031218072017.2198"><vh>Bounding box</vh></v>
<v t="ekr.20031218072017.2199"><vh>Color tags</vh></v>
<v t="ekr.20031218072017.2200"><vh>Configuration</vh></v>
<v t="ekr.20031218072017.2201"><vh>Focus</vh></v>
<v t="ekr.20031218072017.2202"><vh>Height &amp; width (use dummy values...)</vh></v>
<v t="ekr.20031218072017.2203"><vh>Idle time...</vh></v>
<v t="ekr.20031218072017.2204"><vh>Indices</vh></v>
<v t="ekr.20031218072017.2205"><vh>Insert point</vh></v>
<v t="ekr.20031218072017.2206"><vh>Menus</vh></v>
<v t="ekr.20031218072017.2207"><vh>Selection</vh></v>
<v t="ekr.20031218072017.2208"><vh>Text</vh>
<v t="ekr.20031218072017.2209"><vh>delete...</vh></v>
<v t="ekr.20031218072017.2210"><vh>get...</vh>
<v t="ekr.20031218072017.2211"><vh>getInsertLines</vh></v>
<v t="ekr.20031218072017.2212"><vh>getSelectionAreas</vh></v>
<v t="ekr.20031218072017.2213"><vh>getSelectionLines (nullBody)</vh></v>
</v>
<v t="ekr.20031218072017.2214"><vh>Insert...</vh></v>
<v t="ekr.20031218072017.2215"><vh>setSelectionAreas</vh></v>
</v>
<v t="ekr.20031218072017.2216"><vh>Visibility &amp; scrolling</vh></v>
</v>
<v t="ekr.20031218072017.2217"><vh>oops</vh></v>
</v>
<v t="ekr.20031218072017.2218"><vh>class nullColorizer</vh>
<v t="ekr.20031218072017.2219"><vh>__init__</vh></v>
<v t="ekr.20031218072017.2220"><vh>entry points</vh></v>
</v>
<v t="ekr.20031218072017.2222"><vh>class nullFrame</vh></v>
<v t="ekr.20031218072017.2223"><vh>class nullGui (runs scripts)</vh>
<v t="ekr.20031218072017.2224"><vh>Birth &amp; death</vh>
<v t="ekr.20031218072017.2225"><vh> nullGui.__init__</vh></v>
<v t="ekr.20031219075221"><vh> nullGui.__getattr__</vh></v>
<v t="ekr.20031218072017.2226"><vh>createLeoFrame</vh></v>
<v t="ekr.20031218072017.2227"><vh>createRootWindow</vh></v>
<v t="ekr.20031218072017.2228"><vh>finishCreate</vh></v>
<v t="ekr.20031218072017.2229"><vh>runMainLoop</vh></v>
</v>
<v t="ekr.20031218072017.2230"><vh>oops</vh></v>
<v t="ekr.20031218072017.2231"><vh>setScript</vh></v>
</v>
<v t="ekr.20031218072017.2232"><vh>class nullLog</vh></v>
<v t="ekr.20031218072017.2233"><vh>class nullTree</vh>
<v t="ekr.20031218072017.2234"><vh> nullTree.__init__</vh></v>
<v t="ekr.20031218072017.2235"><vh>oops</vh></v>
<v t="ekr.20031218072017.2236"><vh>Dummy operations...</vh>
<v t="ekr.20031218072017.2237"><vh>Drawing</vh></v>
<v t="ekr.20031218072017.2238"><vh>Edit label</vh></v>
<v t="ekr.20031218072017.2239"><vh>Scrolling</vh></v>
<v t="ekr.20031218072017.2240"><vh>Tree operations</vh></v>
</v>
<v t="ekr.20031218072017.2241"><vh>getFont &amp; setFont</vh></v>
<v t="ekr.20031218072017.2242"><vh>select</vh></v>
</v>
<v t="ekr.20031218072017.2243"><vh>class nullUndoer</vh></v>
</v>
<v t="ekr.20031218072017.2244"><vh>(Fixed apply settings bug)</vh>
<v t="ekr.20031218072017.2245"><vh>Report</vh></v>
<v t="ekr.20031218072017.2246"><vh>reconfigureFromConfig</vh></v>
</v>
<v t="ekr.20031218072017.2247"><vh>(Fixed duplicate bindings with clear leoConfig.txt)</vh>
<v t="ekr.20031218072017.2248"><vh>Report</vh></v>
<v t="ekr.20031218072017.2249"><vh>createPopupMenu</vh>
<v t="ekr.20031218072017.2250"><vh>&lt;&lt; Create the menu table &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2098"><vh>canonicalizeShortcut</vh>
<v t="ekr.20031218072017.2099"><vh>&lt;&lt; canonicalize the last field &gt;&gt;</vh>
<v t="ekr.20031218072017.2100"><vh>&lt;&lt; define dict of Tk bind names &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2101"><vh>&lt;&lt; define dict of special names &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2102"><vh>&lt;&lt; set the last field, preserving case &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2103"><vh>&lt;&lt; synthesize the shortcuts from the information &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1723"><vh>createMenuEntries</vh>
<v t="ekr.20031218072017.1724"><vh>&lt;&lt; set name to the label for doCommand &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1725"><vh>&lt;&lt; set accel to the shortcut for name &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1726"><vh>&lt;&lt; set bind_shortcut and menu_shortcut using accel &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1727"><vh>&lt;&lt; define callback function &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1728"><vh>&lt;&lt; set realLabel, amp_index and menu_shortcut &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1729"><vh>&lt;&lt; handle bind_shorcut &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2251"><vh>(Fixed Find panel bug on the Mac)</vh>
<v t="ekr.20031218072017.2252"><vh>Trace</vh></v>
<v t="ekr.20031218072017.2253"><vh>OnActivateLeoEvent, OnDeactivateLeoEvent</vh></v>
</v>
<v t="ekr.20031218072017.2254"><vh>(Fixed Import backslash-newline bug)</vh>
<v t="ekr.20031218072017.2255"><vh>Report</vh></v>
<v t="ekr.20031218072017.2256"><vh>Python scanners</vh>
<v t="ekr.20031218072017.2257"><vh>scanPythonClass</vh>
<v t="ekr.20031218072017.2258"><vh>&lt;&lt; set classname and headline, or return i &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2259"><vh>&lt;&lt; create class_vnode  &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2260"><vh>&lt;&lt; create nodes for all defs of the class &gt;&gt;</vh>
<v t="ekr.20031218072017.2261"><vh>&lt;&lt; create parent_vnode &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2262"><vh>&lt;&lt; append any other class material &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2263"><vh>scanPythonDef</vh>
<v t="ekr.20031218072017.2264"><vh>&lt;&lt; set headline or return i &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2265"><vh>&lt;&lt; skip the Python def &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2266"><vh>&lt;&lt; Create def node &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2267"><vh>scanPythonDecls</vh>
<v t="ekr.20031218072017.2268"><vh>&lt;&lt; break on def or class &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2269"><vh>&lt;&lt; Create a child node for declarations &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2270"><vh>scanPythonText</vh>
<v t="ekr.20031218072017.2271"><vh>&lt;&lt; handle possible Python function or class &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2272"><vh>&lt;&lt; Append a reference to the methods of this file &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2273"><vh>&lt;&lt; Append any unused python text to the parent's body text &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.2274"><vh>(Fixed line ending problem)</vh>
<v t="ekr.20031218072017.2275"><vh>test</vh></v>
<v t="ekr.20031218072017.2276"><vh>Report</vh></v>
<v t="ekr.20031218072017.2134"><vh>putCodeLine</vh></v>
<v t="ekr.20031218072017.1386"><vh>getOutputNewline</vh></v>
</v>
<v t="ekr.20031218072017.2277"><vh>(Fixed Linux import problem)</vh>
<v t="ekr.20031218072017.2278"><vh>importFromPath</vh></v>
</v>
<v t="ekr.20031218072017.2279"><vh>(Fixed Recent files bug)</vh>
<v t="ekr.20031218072017.2188"><vh>newLeoCommanderAndFrame (gui-independent)</vh>
<v t="ekr.20031218072017.2189"><vh>&lt;&lt; compute the window title &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2083"><vh>updateRecentFiles</vh></v>
</v>
<v t="ekr.20031218072017.2280"><vh>(Fixed Replace Blanks command)</vh>
<v t="ekr.20031218072017.2213"><vh>getSelectionLines (nullBody)</vh></v>
<v t="ekr.20031218072017.1820"><vh>Edit Body Text</vh>
<v t="ekr.20031218072017.1704"><vh>convertAllBlanks</vh></v>
<v t="ekr.20031218072017.1705"><vh>convertAllTabs</vh></v>
<v t="ekr.20031218072017.1821"><vh>convertBlanks</vh></v>
<v t="ekr.20031218072017.1822"><vh>convertTabs</vh></v>
<v t="ekr.20031218072017.1823"><vh>createLastChildNode</vh></v>
<v t="ekr.20031218072017.1824"><vh>dedentBody</vh></v>
<v t="ekr.20031218072017.1706"><vh>extract</vh>
<v t="ekr.20031218072017.1707"><vh>&lt;&lt; Set headline for extract &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1708"><vh>extractSection</vh>
<v t="ekr.20031218072017.1709"><vh>&lt;&lt; Set headline for extractSection &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1710"><vh>extractSectionNames</vh>
<v t="ekr.20031218072017.1711"><vh>&lt;&lt; Find the next section name &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1825"><vh>findBoundParagraph</vh>
<v t="ekr.20031218072017.1826"><vh>&lt;&lt; trace head_lines, ins, tail_lines &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1827"><vh>findMatchingBracket</vh>
<v t="ekr.20031218072017.1828"><vh>findMatchingBracket</vh></v>
</v>
<v t="ekr.20031218072017.1829"><vh>getBodyLines</vh></v>
<v t="ekr.20031218072017.1830"><vh>indentBody</vh></v>
<v t="ekr.20031218072017.1831"><vh>insertBodyTime &amp; allies</vh>
<v t="ekr.20031218072017.1832"><vh>getTime</vh></v>
</v>
<v t="ekr.20031218072017.1833"><vh>reformatParagraph</vh>
<v t="ekr.20031218072017.1834"><vh>&lt;&lt; compute vars for reformatParagraph &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1835"><vh>&lt;&lt; compute the leading whitespace &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1836"><vh>&lt;&lt; compute the result of wrapping all lines &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1837"><vh>&lt;&lt; update the body, selection &amp; undo state &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1838"><vh>updateBodyPane (handles undo)</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2281"><vh>(Fixed several bugs related to Extract commands)</vh>
<v t="ekr.20031218072017.2282"><vh>Reports</vh>
<v t="ekr.20031218072017.2283"><vh>(fixed) Leading slashes are removed</vh></v>
<v t="ekr.20031218072017.2284"><vh>(fixed) Extract Section is enabled when it should not be</vh></v>
<v t="ekr.20031218072017.2285"><vh>(fixed) Documentation problem</vh></v>
<v t="ekr.20031218072017.2286"><vh>(fixed) Doesn't check for complete section name</vh></v>
</v>
<v t="ekr.20031218072017.836"><vh>updateEditMenu</vh>
<v t="ekr.20040130164211"><vh>&lt;&lt; enable cut/paste &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2287"><vh>canExtract, canExtractSection &amp; canExtractSectionNames</vh></v>
<v t="ekr.20031218072017.1708"><vh>extractSection</vh>
<v t="ekr.20031218072017.1709"><vh>&lt;&lt; Set headline for extractSection &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2288"><vh>(Fixed Toggle Angle Brackets)</vh>
<v t="ekr.20031218072017.2289"><vh>Report</vh></v>
<v t="ekr.20031218072017.2290"><vh>toggleAngleBrackets</vh></v>
</v>
<v t="ekr.20031218072017.2291"><vh>(Fixed Undo Change All (in headlines) problem)</vh>
<v t="ekr.20031218072017.2292"><vh>Report</vh></v>
<v t="ekr.20031218072017.2293"><vh>batchChange</vh>
<v t="ekr.20031218072017.2294"><vh>&lt;&lt; set the undo head params &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2295"><vh>&lt;&lt; set the undo body typing params &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2047"><vh>&lt;&lt; undo typing cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2038"><vh>&lt;&lt; redo typing cases &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2296"><vh>(Honor outline/body pane ratio when opening files)</vh>
<v t="ekr.20031218072017.2297"><vh>fileCommands.open</vh>
<v t="ekr.20031218072017.2298"><vh>&lt;&lt; Set the default directory &gt;&gt; in fileCommands.readOutlineOnly</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2300"><vh>(Icon bug in Linux)</vh>
<v t="ekr.20031218072017.2301"><vh>Report</vh></v>
<v t="ekr.20031218072017.1856"><vh>setDefaultIcon</vh></v>
</v>
<v t="ekr.20031218072017.2302"><vh>(Made newTnode and scanGnx more robust)</vh>
<v t="ekr.20031218072017.2303"><vh>traceback</vh></v>
<v t="ekr.20031218072017.2009"><vh>newTnode</vh></v>
<v t="ekr.20031218072017.1997"><vh>scanGnx</vh></v>
</v>
<v t="ekr.20031218072017.2304"><vh>(Made sure Leo doesn't put windows off the screen)</vh>
<v t="ekr.20031218072017.2305"><vh>Report</vh></v>
<v t="ekr.20031218072017.2306"><vh>getGlobals</vh></v>
<v t="ekr.20031218072017.1625"><vh>setInitialWindowGeometry</vh></v>
<v t="ekr.20031218072017.2307"><vh>setTopGeometry</vh></v>
</v>
<v t="ekr.20031218072017.2308"><vh>(Tested reports of problems with @first/@last)</vh>
<v t="ekr.20031218072017.2309"><vh>Reports</vh></v>
</v>
<v t="ekr.20031218072017.2310"><vh>(Tested support for Unicode file &amp; directory names)</vh>
<v t="ekr.20031218072017.1498"><vh>Unicode utils...</vh>
<v t="ekr.20031218072017.1499"><vh>isUnicode</vh></v>
<v t="ekr.20031218072017.1500"><vh>isValidEncoding</vh></v>
<v t="ekr.20031218072017.1501"><vh>reportBadChars</vh></v>
<v t="ekr.20031218072017.1502"><vh>toUnicode &amp; toEncodedString</vh></v>
<v t="ekr.20031218072017.1503"><vh>getpreferredencoding from 2.3a2</vh>
<v t="ekr.20031218072017.1504"><vh>&lt;&lt; define getpreferredencoding using _locale &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1505"><vh>&lt;&lt; define getpreferredencoding for *nix &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.2311"><vh>(Use @url nodes to open .leo files)</vh>
<v t="ekr.20031218072017.2052"><vh>openWithFileName</vh></v>
<v t="ekr.20031218072017.2312"><vh>tree.OnIconDoubleClick (@url)</vh>
<v t="ekr.20031218072017.2313"><vh>&lt;&lt; stop the url after any whitespace  &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2314"><vh>&lt;&lt; check the url; return if bad &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2315"><vh>&lt;&lt; pass the url to the web browser &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2316"><vh>(Using a common log in batch mode)</vh>
<v t="ekr.20031218072017.1938"><vh>createNullGuiWithScript (leo.py)</vh></v>
<v t="ekr.20031218072017.2226"><vh>createLeoFrame</vh></v>
<v t="ekr.20031218072017.2229"><vh>runMainLoop</vh></v>
<v t="ekr.20031218072017.2232"><vh>class nullLog</vh></v>
<v t="ekr.20031218072017.1474"><vh>es, enl, ecnl</vh></v>
<v t="ekr.20031218072017.2317"><vh>trace</vh></v>
<v t="ekr.20031218072017.2318"><vh>trace_tag</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2319"><vh>rc1 projects</vh>
<v t="ekr.20031218072017.2320"><vh>(Added dialog to Import Derived File)</vh>
<v t="ekr.20031218072017.1809"><vh>importDerivedFile</vh></v>
</v>
<v t="ekr.20031218072017.2321"><vh>(Allow @ignore and orphans in @file-nosent)</vh>
<v t="ekr.20031218072017.2322"><vh>old_df.write</vh>
<v t="ekr.20031218072017.2323"><vh>&lt;&lt; initialize &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2324"><vh>&lt;&lt; open the file; return on error &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2325"><vh>&lt;&lt; write then entire @file tree &gt;&gt; (3.x)</vh>
<v t="ekr.20031218072017.2326"><vh>&lt;&lt; put all @first lines in root &gt;&gt; (3.x)</vh></v>
<v t="ekr.20031218072017.2327"><vh>&lt;&lt; write the derived file&gt;&gt;</vh></v>
<v t="ekr.20031218072017.2328"><vh>&lt;&lt; put all @last lines in root &gt;&gt; (3.x)</vh></v>
</v>
<v t="ekr.20031218072017.2330"><vh>&lt;&lt; finish writing &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2114"><vh>new_df.write (inits root.tnodeList)</vh>
<v t="ekr.20031218072017.2115"><vh>&lt;&lt; initialize &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2116"><vh>&lt;&lt; open the file; return on error &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2117"><vh>&lt;&lt; write then entire @file tree &gt;&gt; (4.x)</vh>
<v t="ekr.20031218072017.2118"><vh>&lt;&lt; put all @first lines in root &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2119"><vh>&lt;&lt; put all @last lines in root &gt;&gt; (4.x)</vh></v>
</v>
<v t="ekr.20031218072017.2121"><vh>&lt;&lt; finish writing &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2331"><vh>(Corrected counts when replacing tabs/blanks)</vh>
<v t="ekr.20031218072017.1820"><vh>Edit Body Text</vh>
<v t="ekr.20031218072017.1704"><vh>convertAllBlanks</vh></v>
<v t="ekr.20031218072017.1705"><vh>convertAllTabs</vh></v>
<v t="ekr.20031218072017.1821"><vh>convertBlanks</vh></v>
<v t="ekr.20031218072017.1822"><vh>convertTabs</vh></v>
<v t="ekr.20031218072017.1823"><vh>createLastChildNode</vh></v>
<v t="ekr.20031218072017.1824"><vh>dedentBody</vh></v>
<v t="ekr.20031218072017.1706"><vh>extract</vh>
<v t="ekr.20031218072017.1707"><vh>&lt;&lt; Set headline for extract &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1708"><vh>extractSection</vh>
<v t="ekr.20031218072017.1709"><vh>&lt;&lt; Set headline for extractSection &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1710"><vh>extractSectionNames</vh>
<v t="ekr.20031218072017.1711"><vh>&lt;&lt; Find the next section name &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1825"><vh>findBoundParagraph</vh>
<v t="ekr.20031218072017.1826"><vh>&lt;&lt; trace head_lines, ins, tail_lines &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1827"><vh>findMatchingBracket</vh>
<v t="ekr.20031218072017.1828"><vh>findMatchingBracket</vh></v>
</v>
<v t="ekr.20031218072017.1829"><vh>getBodyLines</vh></v>
<v t="ekr.20031218072017.1830"><vh>indentBody</vh></v>
<v t="ekr.20031218072017.1831"><vh>insertBodyTime &amp; allies</vh>
<v t="ekr.20031218072017.1832"><vh>getTime</vh></v>
</v>
<v t="ekr.20031218072017.1833"><vh>reformatParagraph</vh>
<v t="ekr.20031218072017.1834"><vh>&lt;&lt; compute vars for reformatParagraph &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1835"><vh>&lt;&lt; compute the leading whitespace &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1836"><vh>&lt;&lt; compute the result of wrapping all lines &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1837"><vh>&lt;&lt; update the body, selection &amp; undo state &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1838"><vh>updateBodyPane (handles undo)</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2332"><vh>(Don't write tnodeList when executing scripts)</vh>
<v t="ekr.20031218072017.2072"><vh>c.checkOutline</vh></v>
<v t="ekr.20031218072017.2140"><vh>executeScript</vh>
<v t="ekr.20031218072017.2141"><vh>&lt;&lt; define class fileLikeObject &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2142"><vh>&lt;&lt; get script into s &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2143"><vh>&lt;&lt; redirect output if redirect_execute_script_output_to_log_pane &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2001"><vh>putOpenNodeSentinel (sets tnodeList)</vh></v>
<v t="ekr.20031218072017.2114"><vh>new_df.write (inits root.tnodeList)</vh>
<v t="ekr.20031218072017.2115"><vh>&lt;&lt; initialize &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2116"><vh>&lt;&lt; open the file; return on error &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2117"><vh>&lt;&lt; write then entire @file tree &gt;&gt; (4.x)</vh>
<v t="ekr.20031218072017.2118"><vh>&lt;&lt; put all @first lines in root &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2119"><vh>&lt;&lt; put all @last lines in root &gt;&gt; (4.x)</vh></v>
</v>
<v t="ekr.20031218072017.2121"><vh>&lt;&lt; finish writing &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2333"><vh>(Fixed 2 new reorg bugs)</vh>
<v t="ekr.20031218072017.2082"><vh>&lt;&lt; Set closeFlag if the only open window is empty &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2334"><vh>(Fixed clone-drag bug)</vh>
<v t="ekr.20031218072017.2335"><vh>Report</vh></v>
<v t="ekr.20031218072017.2336"><vh>Event handers (tree)</vh>
<v t="ekr.20031218072017.2337"><vh>OnActivate</vh>
<v t="ekr.20031218072017.2338"><vh>&lt;&lt; activate this window &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2339"><vh>OnBoxClick</vh></v>
<v t="ekr.20031218072017.2340"><vh>tree.OnDeactivate (caused double-click problem)</vh></v>
<v t="ekr.20031218072017.2341"><vh>tree.findVnodeWithIconId</vh></v>
<v t="ekr.20031218072017.2342"><vh>tree.OnContinueDrag</vh>
<v t="ekr.20031218072017.2343"><vh>&lt;&lt; continue dragging &gt;&gt;</vh>
<v t="ekr.20031218072017.2344"><vh>&lt;&lt; scroll the canvas as needed &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2345"><vh>tree.OnCtontrolT</vh></v>
<v t="ekr.20031218072017.1776"><vh>tree.OnDrag</vh></v>
<v t="ekr.20031218072017.1777"><vh>tree.OnEndDrag</vh>
<v t="ekr.20031218072017.1778"><vh>&lt;&lt; set vdrag, childFlag &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1332"><vh>headline key handlers (tree)</vh>
<v t="ekr.20031218072017.1333"><vh>onHeadChanged</vh></v>
<v t="ekr.20031218072017.1334"><vh>OnHeadlineKey</vh></v>
<v t="ekr.20031218072017.1335"><vh>idle_head_key</vh>
<v t="ekr.20031218072017.1336"><vh>&lt;&lt; set s to the widget text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1337"><vh>&lt;&lt; set head to vnode text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1338"><vh>&lt;&lt; update v and all nodes joined to v &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1339"><vh>&lt;&lt; reconfigure v and all nodes joined to v &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1340"><vh>&lt;&lt; update the screen &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2346"><vh>tree.OnIconClick &amp; OnIconRightClick</vh></v>
<v t="ekr.20031218072017.2348"><vh>tree.OnPopup &amp; allies</vh>
<v t="ekr.20031218072017.2349"><vh>OnPopupFocusLost</vh></v>
<v t="ekr.20031218072017.2249"><vh>createPopupMenu</vh>
<v t="ekr.20031218072017.2250"><vh>&lt;&lt; Create the menu table &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2350"><vh>enablePopupMenuItems</vh>
<v t="ekr.20031218072017.2351"><vh>&lt;&lt; set isAtRoot and isAtFile if v's tree contains @root or @file nodes &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2352"><vh>showPopupMenu</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1777"><vh>tree.OnEndDrag</vh>
<v t="ekr.20031218072017.1778"><vh>&lt;&lt; set vdrag, childFlag &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2353"><vh>c.dragAfter</vh></v>
<v t="ekr.20031218072017.2354"><vh>v.moveAfter</vh></v>
<v t="ekr.20031218072017.2355"><vh>v.linkAfter</vh></v>
</v>
<v t="ekr.20031218072017.2356"><vh>(Fixed Font panel bug)</vh>
<v t="ekr.20031218072017.2357"><vh>Report</vh></v>
<v t="ekr.20031218072017.2088"><vh>fontPanel</vh></v>
<v t="ekr.20031218072017.2358"><vh>bringToFront</vh></v>
</v>
<v t="ekr.20031218072017.2359"><vh>(Fixed inconsistency between how 4.x and 3.x handle @others)</vh>
<v t="ekr.20031218072017.2360"><vh>Report</vh></v>
<v t="ekr.20031218072017.1616"><vh>&lt;&lt; handle noweb doc part &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2129"><vh>&lt;&lt; handle line at s[i]  &gt;&gt; (4.x)</vh></v>
</v>
<v t="ekr.20031218072017.2361"><vh>(Fixed minor bugs with copy/paste bugs involving clones)</vh>
<v t="ekr.20031218072017.2362"><vh>Notes</vh></v>
<v t="ekr.20031218072017.2363"><vh>Report: billp9619: fixed</vh></v>
<v t="ekr.20031218072017.2364"><vh>Report: RodrigoB: Probably a 4.0.4 issue</vh></v>
<v t="ekr.20031218072017.2365"><vh>Reading</vh>
<v t="ekr.20031218072017.2009"><vh>newTnode</vh></v>
<v t="ekr.20031218072017.1561"><vh>getTnode</vh>
<v t="ekr.20031218072017.1562"><vh>&lt;&lt; handle read from file &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1563"><vh>&lt;&lt; handle read from clipboard &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1564"><vh>&lt;&lt; handle unknown attributes &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1566"><vh>getVnode changed for 4.2)</vh>
<v t="ekr.20031218072017.1567"><vh>&lt;&lt; Handle vnode attribute bits  &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1568"><vh>&lt;&lt; Set the remembered status bits &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1860"><vh>createVnode (changed for 4.2)</vh>
<v t="ekr.20031218072017.1861"><vh>&lt;&lt; handle unknown vnode attributes &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1557"><vh>finishPaste</vh>
<v t="ekr.20031218072017.1558"><vh>&lt;&lt; reassign tnode indices and clear all clone links &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2366"><vh>Writing</vh>
<v t="ekr.20031218072017.1570"><vh>assignFileIndices &amp; compactFileIndices</vh>
<v t="ekr.20031218072017.1571"><vh>&lt;&lt; assign missing gnx's, converting ints to gnx's &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1572"><vh>&lt;&lt; reassign all tnode indices &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.2367"><vh>(Fixed problem untangling html file)</vh>
<v t="ekr.20031218072017.2368"><vh>&lt;&lt; set the private global matching vars &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2369"><vh>skip_string : called by tangle</vh></v>
</v>
<v t="ekr.20031218072017.2370"><vh>(Fixed Recent files bug)</vh>
<v t="ekr.20031218072017.2371"><vh>Discussion</vh></v>
<v t="ekr.20031218072017.2372"><vh>Menu activation traceback</vh></v>
<v t="ekr.20031218072017.2373"><vh>set_focus</vh></v>
</v>
<v t="ekr.20031218072017.2374"><vh>(Fixed reorg bug in openRecentFiles)</vh>
<v t="ekr.20031218072017.2375"><vh>Traceback</vh></v>
<v t="ekr.20031218072017.2081"><vh>openRecentFile</vh>
<v t="ekr.20031218072017.2082"><vh>&lt;&lt; Set closeFlag if the only open window is empty &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2376"><vh>(Indent/dedent move one extra line when there is no selected text)</vh>
<v t="ekr.20031218072017.1820"><vh>Edit Body Text</vh>
<v t="ekr.20031218072017.1704"><vh>convertAllBlanks</vh></v>
<v t="ekr.20031218072017.1705"><vh>convertAllTabs</vh></v>
<v t="ekr.20031218072017.1821"><vh>convertBlanks</vh></v>
<v t="ekr.20031218072017.1822"><vh>convertTabs</vh></v>
<v t="ekr.20031218072017.1823"><vh>createLastChildNode</vh></v>
<v t="ekr.20031218072017.1824"><vh>dedentBody</vh></v>
<v t="ekr.20031218072017.1706"><vh>extract</vh>
<v t="ekr.20031218072017.1707"><vh>&lt;&lt; Set headline for extract &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1708"><vh>extractSection</vh>
<v t="ekr.20031218072017.1709"><vh>&lt;&lt; Set headline for extractSection &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1710"><vh>extractSectionNames</vh>
<v t="ekr.20031218072017.1711"><vh>&lt;&lt; Find the next section name &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1825"><vh>findBoundParagraph</vh>
<v t="ekr.20031218072017.1826"><vh>&lt;&lt; trace head_lines, ins, tail_lines &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1827"><vh>findMatchingBracket</vh>
<v t="ekr.20031218072017.1828"><vh>findMatchingBracket</vh></v>
</v>
<v t="ekr.20031218072017.1829"><vh>getBodyLines</vh></v>
<v t="ekr.20031218072017.1830"><vh>indentBody</vh></v>
<v t="ekr.20031218072017.1831"><vh>insertBodyTime &amp; allies</vh>
<v t="ekr.20031218072017.1832"><vh>getTime</vh></v>
</v>
<v t="ekr.20031218072017.1833"><vh>reformatParagraph</vh>
<v t="ekr.20031218072017.1834"><vh>&lt;&lt; compute vars for reformatParagraph &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1835"><vh>&lt;&lt; compute the leading whitespace &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1836"><vh>&lt;&lt; compute the result of wrapping all lines &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1837"><vh>&lt;&lt; update the body, selection &amp; undo state &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1838"><vh>updateBodyPane (handles undo)</vh></v>
</v>
<v t="ekr.20031218072017.2213"><vh>getSelectionLines (nullBody)</vh></v>
<v t="ekr.20031218072017.2377"><vh>getSelectionLines (tkBody)</vh></v>
</v>
<v t="ekr.20031218072017.2378"><vh>(Investigated No tnode list)</vh>
<v t="ekr.20031218072017.2379"><vh>Report</vh></v>
<v t="ekr.20031218072017.2380"><vh>Writing</vh>
<v t="ekr.20031218072017.2114"><vh>new_df.write (inits root.tnodeList)</vh>
<v t="ekr.20031218072017.2115"><vh>&lt;&lt; initialize &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2116"><vh>&lt;&lt; open the file; return on error &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2117"><vh>&lt;&lt; write then entire @file tree &gt;&gt; (4.x)</vh>
<v t="ekr.20031218072017.2118"><vh>&lt;&lt; put all @first lines in root &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2119"><vh>&lt;&lt; put all @last lines in root &gt;&gt; (4.x)</vh></v>
</v>
<v t="ekr.20031218072017.2121"><vh>&lt;&lt; finish writing &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2001"><vh>putOpenNodeSentinel (sets tnodeList)</vh></v>
<v t="ekr.20031218072017.2002"><vh>putTnodeList (4.0)</vh></v>
</v>
<v t="ekr.20031218072017.2381"><vh>Reading</vh>
<v t="ekr.20031218072017.2007"><vh>findChild</vh></v>
<v t="ekr.20031218072017.2008"><vh>getTnodeList (4.0)</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2382"><vh>(Patched scanPythonClass to put class docstrings in class nodes)</vh>
<v t="ekr.20031218072017.2383"><vh>Report</vh></v>
<v t="ekr.20031218072017.2256"><vh>Python scanners</vh>
<v t="ekr.20031218072017.2257"><vh>scanPythonClass</vh>
<v t="ekr.20031218072017.2258"><vh>&lt;&lt; set classname and headline, or return i &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2259"><vh>&lt;&lt; create class_vnode  &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2260"><vh>&lt;&lt; create nodes for all defs of the class &gt;&gt;</vh>
<v t="ekr.20031218072017.2261"><vh>&lt;&lt; create parent_vnode &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2262"><vh>&lt;&lt; append any other class material &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2263"><vh>scanPythonDef</vh>
<v t="ekr.20031218072017.2264"><vh>&lt;&lt; set headline or return i &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2265"><vh>&lt;&lt; skip the Python def &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2266"><vh>&lt;&lt; Create def node &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2267"><vh>scanPythonDecls</vh>
<v t="ekr.20031218072017.2268"><vh>&lt;&lt; break on def or class &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2269"><vh>&lt;&lt; Create a child node for declarations &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2270"><vh>scanPythonText</vh>
<v t="ekr.20031218072017.2271"><vh>&lt;&lt; handle possible Python function or class &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2272"><vh>&lt;&lt; Append a reference to the methods of this file &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2273"><vh>&lt;&lt; Append any unused python text to the parent's body text &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.2384"><vh>(Write tnodeList only for @file nodes)</vh>
<v t="ekr.20031218072017.1863"><vh>putVnode (3.x and 4.x)</vh>
<v t="ekr.20031218072017.1864"><vh>&lt;&lt; Put tnode index &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1865"><vh>&lt;&lt; Put attribute bits &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1866"><vh>&lt;&lt; write the head text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1867"><vh>&lt;&lt; put unknown vnode attributes &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2385"><vh>(Last-minute changes)</vh>
<v t="ekr.20031218072017.2386"><vh>(no a problem?) Problem with font panel</vh></v>
<v t="ekr.20031218072017.2187"><vh>tkGui.getFontFromParams</vh></v>
<v t="ekr.20031218072017.2387"><vh>scanAllDirectives</vh>
<v t="ekr.20031218072017.2388"><vh>&lt;&lt; Set ivars &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2389"><vh>&lt;&lt; Set path from @file node &gt;&gt; in scanDirectory in leoGlobals.py</vh></v>
<v t="ekr.20031218072017.2390"><vh>&lt;&lt; Test for @comment and @language &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2391"><vh>&lt;&lt; Test for @encoding &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2392"><vh>&lt;&lt; Test for @header and @noheader &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2393"><vh>&lt;&lt; Test for @lineending &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2394"><vh>&lt;&lt; Test for @path &gt;&gt;</vh>
<v t="ekr.20031218072017.2395"><vh>&lt;&lt; compute relative path from s[k:] &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2396"><vh>&lt;&lt; handle absolute path &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2397"><vh>&lt;&lt; Test for @pagewidth &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2398"><vh>&lt;&lt; Test for @tabwidth &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2399"><vh>&lt;&lt; Set current directory &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2400"><vh>&lt;&lt; Set comment Strings from delims &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.2401"><vh>rc2 projects</vh>
<v t="ekr.20031218072017.2402"><vh>(Created defaults for log/tree font sizes)</vh>
<v t="ekr.20031218072017.2403"><vh>Request</vh></v>
<v t="ekr.20031218072017.2404"><vh>&lt;&lt; define defaultsDict &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2174"><vh>config.getFontFromParams</vh></v>
</v>
<v t="ekr.20031218072017.2405"><vh>(Verified that setTextSelection works)</vh></v>
</v>
<v t="ekr.20031219100030"><vh>rc3 projects</vh>
<v t="ekr.20031219071829"><vh>(Fixed serious problem reading 3.x files)</vh>
<v t="ekr.20031218072017.2663"><vh>scanText (3.x)</vh>
<v t="ekr.20031218072017.2664"><vh>&lt;&lt; put the next line into s &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2665"><vh>&lt;&lt; set kind, nextKind &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2666"><vh>&lt;&lt; Set lineIndent, linep and leading_ws &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2667"><vh>&lt;&lt; handle unexpected end of text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2668"><vh>&lt;&lt; handle the line in s &gt;&gt;</vh>
<v t="ekr.20031218072017.2669"><vh>&lt;&lt; append non-sentinel line &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2670"><vh>&lt;&lt; handle common sentinels &gt;&gt;</vh>
<v t="ekr.20031218072017.2671"><vh>&lt;&lt; handle an ending sentinel &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2672"><vh>&lt;&lt; scan old ref &gt;&gt; (3.0)</vh></v>
<v t="ekr.20031218072017.2673"><vh>&lt;&lt; scan @+at &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2674"><vh>&lt;&lt; scan @+body &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2675"><vh>&lt;&lt; scan @+doc &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2676"><vh>&lt;&lt; scan @+node &gt;&gt;</vh>
<v t="ekr.20031218072017.2677"><vh>&lt;&lt; Set childIndex &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2678"><vh>&lt;&lt; Set cloneIndex &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2679"><vh>&lt;&lt; Set headline and ref &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2680"><vh>&lt;&lt; Check the filename in the sentinel &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2681"><vh>&lt;&lt; look for sentinels that may follow a reference &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2682"><vh>&lt;&lt; scan @+others &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2683"><vh>&lt;&lt; handle rare sentinels &gt;&gt;</vh>
<v t="ekr.20031218072017.2684"><vh>&lt;&lt; scan @+leo &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2685"><vh>&lt;&lt; scan @@ &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2686"><vh>&lt;&lt; scan @comment &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2687"><vh>&lt;&lt; scan @delims &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2688"><vh>&lt;&lt; scan @verbatim &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2689"><vh>&lt;&lt; warn about unknown sentinel &gt;&gt;</vh></v>
</v>
</v>
</v>
</v>
<v t="ekr.20040107064101"><vh>rc4 projects</vh>
<v t="ekr.20040130185920"><vh>Before 1/29</vh>
<v t="ekr.20040106121339.1"><vh>(Added message when plugins are disabled)</vh>
<v t="ekr.20031218072017.1596"><vh>frame.doHook</vh></v>
</v>
<v t="ekr.20040107080609"><vh>(Fixed calls to idle_head_key)</vh></v>
<v t="ekr.20040106183213"><vh>(Fixed problem reading prefs of old files)</vh>
<v t="ekr.20040106101045"><vh>Report</vh></v>
<v t="ekr.20040107064101.3"><vh>Notes</vh></v>
<v t="ekr.20031218072017.2062"><vh>getPrefs</vh>
<v t="ekr.20031218072017.2063"><vh>getTargetLanguage</vh></v>
</v>
</v>
<v t="ekr.20040108095341"><vh>(Move the status area to the icon area)</vh>
<v t="ekr.20031218072017.2178"><vh>&lt;&lt; create all the subframes &gt;&gt;</vh>
<v t="ekr.20031218072017.2179"><vh>&lt;&lt; create both splitters &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3960"><vh>Creating the status area</vh>
<v t="ekr.20031218072017.3961"><vh>createStatusLine</vh></v>
<v t="ekr.20031218072017.3962"><vh>clearStatusLine</vh></v>
<v t="ekr.20031218072017.3963"><vh>putStatusLine</vh></v>
<v t="ekr.20031218072017.1733"><vh>updateStatusRowCol</vh></v>
</v>
</v>
<v t="ekr.20040105070616"><vh>(Fixed huge performance bug in cut/copy node)</vh>
<v t="ekr.20031218072017.1573"><vh>putLeoOutline (to clipboard)</vh></v>
<v t="ekr.20031218072017.1470"><vh>put (basic)(leoFileCommands)</vh></v>
</v>
<v t="ekr.20040106121339"><vh>(Improved the find panel)</vh>
<v t="ekr.20040107064101.2"><vh>What I did</vh></v>
<v t="ekr.20031218072017.3902"><vh>find.createFrame</vh>
<v t="ekr.20031218072017.3903"><vh>&lt;&lt; Create four columns of radio and checkboxes &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3904"><vh>&lt;&lt; Create the Find and Change panes &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3905"><vh>&lt;&lt; Create two rows of buttons &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20040125095950"><vh>(Adding a new command)</vh>
<v t="ekr.20031218072017.3784"><vh>createMenuItemsFromTable</vh></v>
</v>
<v t="ekr.20040125105904.1"><vh>(Eliminated control-v bug on various platforms)</vh>
<v t="ekr.20040125105904.2"><vh>Reports</vh></v>
<v t="ekr.20031218072017.1726"><vh>&lt;&lt; set bind_shortcut and menu_shortcut using accel &gt;&gt;</vh></v>
</v>
<v t="ekr.20040106095546.2"><vh>(Properly recover from drawing after exceptions) </vh>
<v t="ekr.20040126131359"><vh>Notes</vh></v>
<v t="ekr.20031218072017.2817"><vh> doCommand</vh></v>
<v t="ekr.20031218072017.2140"><vh>executeScript</vh>
<v t="ekr.20031218072017.2141"><vh>&lt;&lt; define class fileLikeObject &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2142"><vh>&lt;&lt; get script into s &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2143"><vh>&lt;&lt; redirect output if redirect_execute_script_output_to_log_pane &gt;&gt;</vh></v>
</v>
<v t="ekr.20040106095546"><vh>tkTree.redrawAfterException</vh></v>
<v t="ekr.20031218072017.1011"><vh>Updating routines (tree)...</vh>
<v t="ekr.20031218072017.1012"><vh>redraw</vh></v>
<v t="ekr.20040106095546"><vh>tkTree.redrawAfterException</vh></v>
<v t="ekr.20031218072017.1013"><vh>force_redraw</vh></v>
<v t="ekr.20031218072017.1014"><vh>redraw_now</vh></v>
<v t="ekr.20031218072017.1015"><vh>idle_redraw</vh></v>
<v t="ekr.20031218072017.1016"><vh>idle_second_redraw</vh></v>
</v>
</v>
<v t="ekr.20040127102756"><vh>(regex search bug)</vh>
<v t="ekr.20040127102756.1"><vh>report &amp; reply</vh></v>
<v t="ekr.20031218072017.3077"><vh>search</vh>
<v t="ekr.20031218072017.3078"><vh>&lt;&lt; search again after getting stuck going backward &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3079"><vh>&lt;&lt; return if we are passed the wrap point &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3080"><vh>&lt;&lt; continue if not whole word match &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3908"><vh>Tkinter wrappers (leoTkinterFind)</vh></v>
<v t="ekr.20031218072017.4096"><vh>replaceSelectionRangeWithText (leoTkinterGui)</vh></v>
</v>
</v>
<v t="ekr.20040130165952"><vh>1/29/04</vh>
<v t="ekr.20040127160412"><vh>(Improved message for orphan nodes)</vh>
<v t="ekr.20040128174042.1"><vh>Notes</vh></v>
<v t="ekr.20040128174042"><vh>atFile.warnAboutOrpanAndIgnoredNodes</vh></v>
<v t="ekr.20031218072017.2322"><vh>old_df.write</vh>
<v t="ekr.20031218072017.2323"><vh>&lt;&lt; initialize &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2324"><vh>&lt;&lt; open the file; return on error &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2325"><vh>&lt;&lt; write then entire @file tree &gt;&gt; (3.x)</vh>
<v t="ekr.20031218072017.2326"><vh>&lt;&lt; put all @first lines in root &gt;&gt; (3.x)</vh></v>
<v t="ekr.20031218072017.2327"><vh>&lt;&lt; write the derived file&gt;&gt;</vh></v>
<v t="ekr.20031218072017.2328"><vh>&lt;&lt; put all @last lines in root &gt;&gt; (3.x)</vh></v>
</v>
<v t="ekr.20031218072017.2330"><vh>&lt;&lt; finish writing &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2114"><vh>new_df.write (inits root.tnodeList)</vh>
<v t="ekr.20031218072017.2115"><vh>&lt;&lt; initialize &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2116"><vh>&lt;&lt; open the file; return on error &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2117"><vh>&lt;&lt; write then entire @file tree &gt;&gt; (4.x)</vh>
<v t="ekr.20031218072017.2118"><vh>&lt;&lt; put all @first lines in root &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2119"><vh>&lt;&lt; put all @last lines in root &gt;&gt; (4.x)</vh></v>
</v>
<v t="ekr.20031218072017.2121"><vh>&lt;&lt; finish writing &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20040125120212"><vh>(Fixed Move Up bug involving clones)</vh>
<v t="ekr.20040125120212.1"><vh>Report</vh></v>
<v t="ekr.20040126115428.3"><vh>Fix</vh></v>
<v t="ekr.20031218072017.1772"><vh>moveOutlineUp</vh>
<v t="ekr.20031218072017.1773"><vh>&lt;&lt; Move v up &gt;&gt;</vh></v>
</v>
<v t="ekr.20040126115428.4"><vh>Test</vh>
<v t="ekr.20040126104851.1"><vh>a</vh>
<v t="ekr.20040126104851.2"><vh>b </vh></v>
</v>
<v t="ekr.20040126104851.1"><vh>a</vh>
<v t="ekr.20040126104851.2"><vh>b </vh></v>
</v>
</v>
</v>
<v t="ekr.20040104162835"><vh>(Fixed bug in Import Derived File: Dan Winkler)</vh>
<v t="ekr.20040104162835.5"><vh>Report: CashRegister.ss.txt</vh></v>
<v t="ekr.20040128190248"><vh>What I did</vh></v>
<v t="ekr.20031218072017.2758"><vh>scanText4 &amp; allies</vh>
<v t="ekr.20031218072017.2759"><vh>&lt;&lt; init ivars for scanText4 &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2760"><vh>&lt;&lt; report unexpected end of text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2761"><vh>readNormalLine</vh>
<v t="ekr.20031218072017.2762"><vh>&lt;&lt; Skip the leading stuff &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2763"><vh>&lt;&lt; Append s to docOut &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2764"><vh>start sentinels</vh>
<v t="ekr.20031218072017.1752"><vh>readStartAt &amp; readStartDoc</vh></v>
<v t="ekr.20031218072017.2765"><vh>readStartLeo</vh></v>
<v t="ekr.20031218072017.2766"><vh>readStartNode</vh>
<v t="ekr.20031218072017.2767"><vh>&lt;&lt; Set headline, undoing the CWEB hack &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2768"><vh>&lt;&lt; Check the filename in the sentinel &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2769"><vh>readStartOthers</vh></v>
</v>
<v t="ekr.20031218072017.2770"><vh>end sentinels</vh>
<v t="ekr.20031218072017.1954"><vh>readEndAt &amp; readEndDoc</vh></v>
<v t="ekr.20031218072017.2771"><vh>readEndLeo</vh></v>
<v t="ekr.20031218072017.2772"><vh>readEndNode</vh></v>
<v t="ekr.20031218072017.2773"><vh>readEndOthers</vh></v>
<v t="ekr.20031218072017.1753"><vh>readLastDocLine</vh>
<v t="ekr.20031218072017.1754"><vh>&lt;&lt; new code &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1755"><vh>&lt;&lt; old code &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2774"><vh>Unpaired sentinels</vh>
<v t="ekr.20031218072017.2775"><vh>ignoreOldSentinel</vh></v>
<v t="ekr.20031218072017.2776"><vh>readAfterRef</vh></v>
<v t="ekr.20031218072017.2777"><vh>readComment</vh></v>
<v t="ekr.20031218072017.2778"><vh>readDelims</vh></v>
<v t="ekr.20031218072017.2779"><vh>readDirective</vh></v>
<v t="ekr.20031218072017.2780"><vh>readNl</vh></v>
<v t="ekr.20031218072017.2781"><vh>readNonl</vh></v>
<v t="ekr.20031218072017.2782"><vh>readRef</vh></v>
<v t="ekr.20031218072017.2783"><vh>readVerbatim</vh></v>
</v>
<v t="ekr.20031218072017.2784"><vh>badEndSentinel, push/popSentinelStack</vh></v>
</v>
<v t="ekr.20031218072017.1812"><vh>top_df.read</vh>
<v t="ekr.20031218072017.1813"><vh>&lt;&lt; set fileName from root and importFileName &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1814"><vh>&lt;&lt; open file or return false &gt;&gt;</vh>
<v t="ekr.20031218072017.1815"><vh>&lt;&lt; warn on read-only file &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1816"><vh>&lt;&lt; copy ivars to df &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1817"><vh>&lt;&lt; warn about non-empty unvisited nodes &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1818"><vh>&lt;&lt; copy all tempBodyStrings to tnodes &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1819"><vh>&lt;&lt; delete all tempBodyStrings &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2633"><vh>top_df.scanHeader</vh>
<v t="ekr.20031218072017.2634"><vh>&lt;&lt; skip any non @+leo lines &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2635"><vh>&lt;&lt; make sure we have @+leo &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2636"><vh>&lt;&lt; read optional version param &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2637"><vh>&lt;&lt; read optional encoding param &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2638"><vh>&lt;&lt; set the closing comment delim &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2647"><vh>old_df.readOpenFile</vh></v>
<v t="ekr.20031218072017.2757"><vh>new_df.readOpenFile</vh></v>
<v t="ekr.20031218072017.2387"><vh>scanAllDirectives</vh>
<v t="ekr.20031218072017.2388"><vh>&lt;&lt; Set ivars &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2389"><vh>&lt;&lt; Set path from @file node &gt;&gt; in scanDirectory in leoGlobals.py</vh></v>
<v t="ekr.20031218072017.2390"><vh>&lt;&lt; Test for @comment and @language &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2391"><vh>&lt;&lt; Test for @encoding &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2392"><vh>&lt;&lt; Test for @header and @noheader &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2393"><vh>&lt;&lt; Test for @lineending &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2394"><vh>&lt;&lt; Test for @path &gt;&gt;</vh>
<v t="ekr.20031218072017.2395"><vh>&lt;&lt; compute relative path from s[k:] &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2396"><vh>&lt;&lt; handle absolute path &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2397"><vh>&lt;&lt; Test for @pagewidth &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2398"><vh>&lt;&lt; Test for @tabwidth &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2399"><vh>&lt;&lt; Set current directory &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2400"><vh>&lt;&lt; Set comment Strings from delims &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20040117112808.2"><vh>(Fixed bugs when trying to save a read-only file)</vh>
<v t="ekr.20040129081333"><vh>Report</vh></v>
<v t="ekr.20040129090223"><vh>What I did</vh></v>
<v t="ekr.20031218072017.2720"><vh>atFile.openWriteFile</vh></v>
<v t="ekr.20031218072017.3046"><vh>write_LEO_file</vh>
<v t="ekr.20031218072017.3047"><vh>&lt;&lt; create backup file &gt;&gt; in write_LEO_file</vh></v>
<v t="ekr.20031218072017.3048"><vh>&lt;&lt; delete backup file &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3049"><vh>&lt;&lt; erase filename and rename backupName to fileName &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2834"><vh>save</vh></v>
</v>
<v t="ekr.20040109073834"><vh>(Write Dirty/Missing @file Nodes bugs)</vh>
<v t="ekr.20040109073834.1"><vh>Report: never any dirty @file nodes (works for me)</vh></v>
<v t="ekr.20040107161709"><vh>Report: exception:  at.trace does not exist: fixed: removed at.trace</vh></v>
<v t="ekr.20031218072017.1666"><vh>writeDirtyAtFileNodes</vh></v>
<v t="ekr.20031218072017.2015"><vh>top_df.writeAll</vh>
<v t="ekr.20031218072017.2016"><vh>&lt;&lt; Clear all orphan bits &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2017"><vh>&lt;&lt; handle v's tree &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2018"><vh>&lt;&lt; say the command is finished &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20040109072646"><vh>(Fixed batch-mode problems)</vh>
<v t="ekr.20040109072646.1"><vh>Report: __nonzero__ should return an int: probably fixed</vh></v>
<v t="ekr.20031218072017.1356"><vh>tangle.init_ivars &amp; init_directive_ivars</vh>
<v t="ekr.20031218072017.1357"><vh>&lt;&lt; init tangle ivars &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1358"><vh>&lt;&lt; init untangle ivars &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1359"><vh>&lt;&lt; init directive ivars &gt;&gt; (tangle)</vh></v>
</v>
</v>
<v t="ekr.20040115165504"><vh>(Fixed bug with idlelib import: Python 2.2</vh>
<v t="ekr.20040129105514"><vh>Report &amp; Fix</vh></v>
<v t="ekr.20031218072017.2932"><vh>openPythonWindow (Dave Hein)</vh>
<v t="ekr.20031218072017.2933"><vh>&lt;&lt; open idle in Linux &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2934"><vh>&lt;&lt; open idle in Windows &gt;&gt;</vh>
<v t="ekr.20031218072017.2936"><vh>&lt;&lt; Try to open idle in Python 2.3 systems &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2935"><vh>&lt;&lt; Try to open idle in Python 2.2 systems&gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2937"><vh>leoPyShellMain</vh></v>
</v>
<v t="ekr.20031218072017.2278"><vh>importFromPath</vh></v>
</v>
<v t="ekr.20040116023856"><vh>(Set only @file nodes dirty (not nodes themselves) when altering nodes)</vh>
<v t="ekr.20031218072017.1777"><vh>tree.OnEndDrag</vh>
<v t="ekr.20031218072017.1778"><vh>&lt;&lt; set vdrag, childFlag &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2945"><vh>Dragging (commands)</vh>
<v t="ekr.20031218072017.2353"><vh>c.dragAfter</vh></v>
<v t="ekr.20031218072017.2946"><vh>c.dragCloneToNthChildOf (changed in 3.11.1)</vh></v>
<v t="ekr.20031218072017.2947"><vh>c.dragToNthChildOf</vh></v>
<v t="ekr.20031218072017.2948"><vh>c.dragCloneAfter</vh></v>
</v>
<v t="ekr.20031218072017.1766"><vh>Move... (Commands)</vh>
<v t="ekr.20031218072017.1767"><vh>demote</vh></v>
<v t="ekr.20031218072017.1768"><vh>moveOutlineDown</vh>
<v t="ekr.20031218072017.1769"><vh>&lt;&lt; Move v down &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1770"><vh>moveOutlineLeft</vh></v>
<v t="ekr.20031218072017.1771"><vh>moveOutlineRight</vh></v>
<v t="ekr.20031218072017.1772"><vh>moveOutlineUp</vh>
<v t="ekr.20031218072017.1773"><vh>&lt;&lt; Move v up &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1774"><vh>promote</vh></v>
</v>
<v t="ekr.20031218072017.1759"><vh>Insert, Delete &amp; Clone (Commands)</vh>
<v t="ekr.20031218072017.1760"><vh>c.checkMoveWithParentWithWarning</vh></v>
<v t="ekr.20031218072017.1193"><vh>c.deleteOutline</vh></v>
<v t="ekr.20031218072017.1761"><vh>c.insertHeadline</vh></v>
<v t="ekr.20031218072017.1762"><vh>c.clone</vh></v>
<v t="ekr.20031218072017.1765"><vh>c.validateOutline</vh></v>
</v>
<v t="ekr.20031218072017.2896"><vh>c.sortTopLevel</vh>
<v t="ekr.20031218072017.2897"><vh>&lt;&lt; Set the undo info for sortTopLevel &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1188"><vh>c.sortChildren, sortSiblings</vh>
<v t="ekr.20031218072017.1189"><vh>&lt;&lt; Set the undo info for sortChildren &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1190"><vh>&lt;&lt; Set the undo info for sortSiblings &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20040130165952.1"><vh>1/30/04</vh>
<v t="ekr.20040129074950"><vh>(Fixed problems with indentation: Dan Winkler)</vh>
<v t="ekr.20040130080552"><vh>What I did</vh></v>
<v t="ekr.20040104162835.1"><vh>Reports</vh>
<v t="ekr.20040104162835.2"><vh>Report: marks set when opening file</vh></v>
<v t="ekr.20040104162835.3"><vh>Report 2: leo reported some files changed when they hadn't</vh></v>
<v t="ekr.20040104162835.4"><vh>Report 3: tabs get removed, marks get set</vh></v>
</v>
<v t="ekr.20040130080552.2"><vh>Writing</vh>
<v t="ekr.20031218072017.2788"><vh>putLeadInSentinel</vh></v>
<v t="ekr.20031218072017.2106"><vh>putRefLine (new) &amp; allies</vh>
<v t="ekr.20031218072017.2107"><vh>PutRefAt</vh></v>
<v t="ekr.20031218072017.2108"><vh>putAfterLastRef</vh></v>
<v t="ekr.20031218072017.2109"><vh>putAfterMiddleef</vh></v>
</v>
</v>
</v>
<v t="ekr.20040130073456"><vh>(Fixed zope sprint bug?)</vh>
<v t="ekr.20031218072017.2134"><vh>putCodeLine</vh></v>
</v>
<v t="ekr.20040129092815"><vh>(Ensure trailing newline in scripts)</vh>
<v t="ekr.20040104184913"><vh>(done) Script code should make sure all nodes end in a newline.</vh></v>
<v t="ekr.20040124073929"><vh>(works for me) Backslashes not handled properly in executeScript</vh></v>
<v t="ekr.20031218072017.2128"><vh>putBody (4.x)</vh>
<v t="ekr.20031218072017.2129"><vh>&lt;&lt; handle line at s[i]  &gt;&gt; (4.x)</vh></v>
</v>
<v t="ekr.20031218072017.2140"><vh>executeScript</vh>
<v t="ekr.20031218072017.2141"><vh>&lt;&lt; define class fileLikeObject &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2142"><vh>&lt;&lt; get script into s &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2143"><vh>&lt;&lt; redirect output if redirect_execute_script_output_to_log_pane &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20040129133809.1"><vh>(Fixed Indent problem in leoTkinterGui.py)</vh></v>
<v t="ekr.20040130111957"><vh>(Fixed bug: Convert All Blanks reported too many changes)</vh>
<v t="ekr.20031218072017.1820"><vh>Edit Body Text</vh>
<v t="ekr.20031218072017.1704"><vh>convertAllBlanks</vh></v>
<v t="ekr.20031218072017.1705"><vh>convertAllTabs</vh></v>
<v t="ekr.20031218072017.1821"><vh>convertBlanks</vh></v>
<v t="ekr.20031218072017.1822"><vh>convertTabs</vh></v>
<v t="ekr.20031218072017.1823"><vh>createLastChildNode</vh></v>
<v t="ekr.20031218072017.1824"><vh>dedentBody</vh></v>
<v t="ekr.20031218072017.1706"><vh>extract</vh>
<v t="ekr.20031218072017.1707"><vh>&lt;&lt; Set headline for extract &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1708"><vh>extractSection</vh>
<v t="ekr.20031218072017.1709"><vh>&lt;&lt; Set headline for extractSection &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1710"><vh>extractSectionNames</vh>
<v t="ekr.20031218072017.1711"><vh>&lt;&lt; Find the next section name &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1825"><vh>findBoundParagraph</vh>
<v t="ekr.20031218072017.1826"><vh>&lt;&lt; trace head_lines, ins, tail_lines &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1827"><vh>findMatchingBracket</vh>
<v t="ekr.20031218072017.1828"><vh>findMatchingBracket</vh></v>
</v>
<v t="ekr.20031218072017.1829"><vh>getBodyLines</vh></v>
<v t="ekr.20031218072017.1830"><vh>indentBody</vh></v>
<v t="ekr.20031218072017.1831"><vh>insertBodyTime &amp; allies</vh>
<v t="ekr.20031218072017.1832"><vh>getTime</vh></v>
</v>
<v t="ekr.20031218072017.1833"><vh>reformatParagraph</vh>
<v t="ekr.20031218072017.1834"><vh>&lt;&lt; compute vars for reformatParagraph &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1835"><vh>&lt;&lt; compute the leading whitespace &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1836"><vh>&lt;&lt; compute the result of wrapping all lines &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1837"><vh>&lt;&lt; update the body, selection &amp; undo state &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1838"><vh>updateBodyPane (handles undo)</vh></v>
</v>
</v>
<v t="ekr.20040129133809.4"><vh>(Attempt to shorten error message when saving a a read-only fails)</vh>
<v t="ekr.20040130161634"><vh>Report</vh></v>
<v t="ekr.20031218072017.3046"><vh>write_LEO_file</vh>
<v t="ekr.20031218072017.3047"><vh>&lt;&lt; create backup file &gt;&gt; in write_LEO_file</vh></v>
<v t="ekr.20031218072017.3048"><vh>&lt;&lt; delete backup file &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3049"><vh>&lt;&lt; erase filename and rename backupName to fileName &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20040129133809.6"><vh>(Fixed crashes in open_shell.py plugin)</vh></v>
<v t="ekr.20040130164211.1"><vh>(Enabled cut/paste better)</vh>
<v t="ekr.20040129133809.3"><vh>Report</vh></v>
<v t="ekr.20031218072017.836"><vh>updateEditMenu</vh>
<v t="ekr.20040130164211"><vh>&lt;&lt; enable cut/paste &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20040129133809.2"><vh>(Fixed bug: dut &amp; paste did not stick in headline if done from menu)</vh>
<v t="ekr.20040130170918"><vh>Report</vh></v>
<v t="ekr.20031218072017.840"><vh>Cut/Copy/Paste body text</vh>
<v t="ekr.20031218072017.841"><vh>frame.OnCut, OnCutFrom Menu</vh></v>
<v t="ekr.20031218072017.842"><vh>frame.OnCopy, OnCopyFromMenu</vh></v>
<v t="ekr.20031218072017.843"><vh>frame.OnPaste, OnPasteNode, OnPasteFromMenu</vh></v>
</v>
</v>
</v>
<v t="ekr.20040131100627"><vh>1/31/04</vh>
<v t="ekr.20040131094356"><vh>(Fixed Hoist bugs)</vh>
<v t="ekr.20040131095315"><vh>Report &amp; comments</vh></v>
<v t="ekr.20031218072017.4144"><vh>Drawing (tkTree)</vh>
<v t="ekr.20031218072017.4145"><vh>About drawing and updating</vh></v>
<v t="ekr.20031218072017.1000"><vh>drawBox (tag_bind)</vh></v>
<v t="ekr.20031218072017.1002"><vh>drawIcon (tag_bind)</vh></v>
<v t="ekr.20031218072017.1004"><vh>drawNode &amp; force_draw_node</vh></v>
<v t="ekr.20031218072017.1005"><vh>drawText (bind)</vh>
<v t="ekr.20031218072017.1006"><vh>&lt;&lt; configure the text depending on state &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2029"><vh>drawTopTree</vh></v>
<v t="ekr.20031218072017.1008"><vh>drawTree</vh>
<v t="ekr.20031218072017.1009"><vh>&lt;&lt; draw vertical line &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1010"><vh>inVisibleArea &amp; inExpandedVisibleArea</vh></v>
<v t="ekr.20031218072017.4146"><vh>lastVisible</vh></v>
<v t="ekr.20031218072017.4147"><vh>tree.getIconImage</vh></v>
<v t="ekr.20031218072017.1018"><vh>tree.idle_scrollTo</vh></v>
<v t="ekr.20031218072017.4148"><vh>tree.numberOfVisibleNodes</vh></v>
<v t="ekr.20031218072017.4149"><vh>tree.yoffset</vh></v>
</v>
<v t="ekr.20031218072017.2028"><vh>Hoist &amp; dehoist &amp; enablers</vh></v>
<v t="ekr.20031218072017.1759"><vh>Insert, Delete &amp; Clone (Commands)</vh>
<v t="ekr.20031218072017.1760"><vh>c.checkMoveWithParentWithWarning</vh></v>
<v t="ekr.20031218072017.1193"><vh>c.deleteOutline</vh></v>
<v t="ekr.20031218072017.1761"><vh>c.insertHeadline</vh></v>
<v t="ekr.20031218072017.1762"><vh>c.clone</vh></v>
<v t="ekr.20031218072017.1765"><vh>c.validateOutline</vh></v>
</v>
</v>
<v t="ekr.20040131093452"><vh>(Improve handling of file extensions)</vh>
<v t="ekr.20040131101109"><vh>Report: Dave Hein</vh>
<v t="ekr.20040131103531.1"><vh>Removed defaultextension from runOpenFileDialog</vh></v>
</v>
<v t="ekr.20031218072017.4057"><vh>app.gui.Tkinter file dialogs</vh></v>
<v t="ekr.20040131103531"><vh>&lt;&lt; define leoGui file types &gt;&gt; (not used yet)</vh></v>
</v>
</v>
<v t="ekr.20040201101905"><vh>2/04</vh>
<v t="ekr.20040201070415"><vh>(Added done message to Mark Changed commands)</vh>
<v t="ekr.20031218072017.2923"><vh>markChangedHeadlines</vh></v>
<v t="ekr.20031218072017.2924"><vh>markChangedRoots</vh></v>
</v>
<v t="ekr.20040201103324"><vh>(Fixed major bug in tkFind.init)</vh>
<v t="ekr.20040201103324.1"><vh>Traceback</vh></v>
<v t="ekr.20031218072017.2059"><vh>find.init</vh>
<v t="ekr.20031218072017.2060"><vh>&lt;&lt; set find/change widgets &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2061"><vh>&lt;&lt; set radio buttons from ivars &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20040201070919"><vh>(Changed script-find/change so it is more intuitive)</vh>
<v t="ekr.20040201101905.1"><vh>What I did</vh></v>
<v t="ekr.20040201070845"><vh>Routines that execute script-find and script-change</vh>
<v t="ekr.20031218072017.3072"><vh>doFind...Script</vh></v>
<v t="ekr.20031218072017.2417"><vh>doChange...Script</vh></v>
</v>
</v>
</v>
<v t="ekr.20040203064731"><vh>(Fixed bug in Find/Change)</vh>
<v t="ekr.20040203064731.1"><vh>Report &amp; what I did</vh></v>
<v t="ekr.20031218072017.3069"><vh>changeAll</vh></v>
<v t="ekr.20031218072017.3075"><vh>findNextMatch</vh></v>
<v t="ekr.20031218072017.3077"><vh>search</vh>
<v t="ekr.20031218072017.3078"><vh>&lt;&lt; search again after getting stuck going backward &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3079"><vh>&lt;&lt; return if we are passed the wrap point &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3080"><vh>&lt;&lt; continue if not whole word match &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.4078"><vh>moveIndexForward &amp; moveIndexToNextLine</vh></v>
</v>
</v>
<v t="ekr.20040212082949"><vh>4.1 final projects</vh>
<v t="ekr.20040208101427"><vh>(Duplicate "h" shortcuts in Outline menu)</vh>
<v t="ekr.20040208101427.1"><vh>Report</vh></v>
<v t="ekr.20040208104150"><vh>&lt;&lt; create rawKeysDict without ampersands &gt;&gt; (config)</vh></v>
<v t="ekr.20031218072017.1722"><vh>getShortcut (config)</vh></v>
<v t="ekr.20031218072017.3752"><vh>defineMenuTables</vh>
<v t="ekr.20031218072017.3753"><vh>&lt;&lt; define edit menu tables &gt;&gt;</vh>
<v t="ekr.20031218072017.839"><vh>&lt;&lt; define editMenuTopTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3754"><vh>&lt;&lt; define editMenuEditBodyTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3755"><vh>&lt;&lt; define editMenuEditHeadlineTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3756"><vh>&lt;&lt; define editMenuFindMenuTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3757"><vh>&lt;&lt; define editMenuTop2Table &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3758"><vh>&lt;&lt; define file menu tables &gt;&gt;</vh>
<v t="ekr.20031218072017.3759"><vh>&lt;&lt; define fileMenuTopTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3760"><vh>&lt;&lt; define fileMenuTop2Table &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3761"><vh>&lt;&lt; define fileMenuReadWriteMenuTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3762"><vh>&lt;&lt; define fileMenuTangleMenuTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3763"><vh>&lt;&lt; define fileMenuUntangleMenuTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3764"><vh>&lt;&lt; define fileMenuImportMenuTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3765"><vh>&lt;&lt; define fileMenuExportMenuTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3766"><vh>&lt;&lt; define fileMenuTop3MenuTable &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3767"><vh>&lt;&lt; define outline menu tables &gt;&gt;</vh>
<v t="ekr.20031218072017.3768"><vh>&lt;&lt; define outlineMenuTopMenuTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3769"><vh>&lt;&lt; define outlineMenuExpandContractMenuTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3770"><vh>&lt;&lt; define outlineMenuMoveMenuTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3771"><vh>&lt;&lt; define outlineMenuMarkMenuTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3772"><vh>&lt;&lt; define outlineMenuGoToMenuTable &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3773"><vh>&lt;&lt; define window menu tables &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3774"><vh>&lt;&lt; define help menu tables &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1723"><vh>createMenuEntries</vh>
<v t="ekr.20031218072017.1724"><vh>&lt;&lt; set name to the label for doCommand &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1725"><vh>&lt;&lt; set accel to the shortcut for name &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1726"><vh>&lt;&lt; set bind_shortcut and menu_shortcut using accel &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1727"><vh>&lt;&lt; define callback function &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1728"><vh>&lt;&lt; set realLabel, amp_index and menu_shortcut &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1729"><vh>&lt;&lt; handle bind_shorcut &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20040216153243.4"><vh>(fixed double tracebacks</vh>
<v t="ekr.20040216162857"><vh>Report</vh></v>
<v t="ekr.20031218072017.3121"><vh>redirecting stderr and stdout</vh>
<v t="ekr.20031218072017.1656"><vh>&lt;&lt; redirectClass methods &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3122"><vh>&lt;&lt; define convenience methods for redirecting streams &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3123"><vh>&lt;&lt; test code &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3108"><vh>Dumps</vh>
<v t="ekr.20031218072017.3109"><vh>dump</vh></v>
<v t="ekr.20031218072017.3110"><vh>es_error</vh></v>
<v t="ekr.20031218072017.3111"><vh>es_event_exception</vh></v>
<v t="ekr.20031218072017.3112"><vh>es_exception</vh></v>
<v t="ekr.20031218072017.3113"><vh>printBindings</vh></v>
<v t="ekr.20031218072017.3114"><vh>printGlobals</vh></v>
<v t="ekr.20031218072017.3115"><vh>printLeoModules</vh></v>
</v>
</v>
<v t="ekr.20040205063350"><vh>(Fixed clone bug when pasting nodes)</vh>
<v t="ekr.20040205063350.1"><vh>Report</vh></v>
<v t="ekr.20031218072017.1548"><vh>Cut &amp; Paste Outlines</vh>
<v t="ekr.20031218072017.1549"><vh>cutOutline</vh></v>
<v t="ekr.20031218072017.1550"><vh>copyOutline</vh></v>
<v t="ekr.20031218072017.1551"><vh>pasteOutline</vh></v>
</v>
</v>
<v t="ekr.20040213090726"><vh>Encoding bug in derived files...</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2164"><vh>(Adding batch-script logic to startup code)</vh>
<v t="ekr.20031218072017.1934"><vh>run &amp; allies</vh>
<v t="ekr.20031218072017.1935"><vh>&lt;&lt; print encoding info &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1936"><vh>isValidPython</vh></v>
<v t="ekr.20031218072017.1937"><vh>computeLoadDir</vh></v>
<v t="ekr.20031218072017.1624"><vh>createFrame (leo.py)</vh></v>
<v t="ekr.20031218072017.1938"><vh>createNullGuiWithScript (leo.py)</vh></v>
<v t="ekr.20031218072017.1939"><vh>getBatchScript</vh></v>
</v>
</v>
</v>
<v t="ekr.20040228154544"><vh>(Transition to 4.2)</vh>
<v t="ekr.20040311124726"><vh>Features of 4.2</vh></v>
<v t="ekr.20040117181936"><vh>To do</vh>
<v t="ekr.20040312092455" a="M"><vh>Fix bugs in commands</vh>
<v t="ekr.20040312024615"><vh>(Fix bug in sortTopLevel)</vh>
<v t="ekr.20040306214240.3"><vh>p.hasChildren</vh></v>
<v t="ekr.20031218072017.2896"><vh>c.sortTopLevel</vh>
<v t="ekr.20031218072017.2897"><vh>&lt;&lt; Set the undo info for sortTopLevel &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20040312092455.1"><vh>(Fix bug in Go To Line Number)</vh></v>
</v>
<v t="ekr.20040312092039"><vh>Convert all code</vh>
<v t="ekr.20040312094553" a="M"><vh>Change v to p</vh></v>
<v t="ekr.20040311165928" a="M"><vh>Search for root/currentVnode SHOWS WHAT NEEDS TO BE CHANGED</vh></v>
<v t="ekr.20040312081427.1"><vh>Create visNext/vixBack iterators</vh></v>
<v t="ekr.20040312073921.3"><vh>Use iterators: search for .threadnext</vh></v>
</v>
<v t="ekr.20040310085820"><vh>Write script to use p proxy methods</vh></v>
<v t="ekr.20040311165107"><vh>Move vnodeList into tnodes.</vh></v>
<v t="ekr.20040302084553.2"><vh>Clean up setDirty logic</vh></v>
<v t="ekr.20040311124726.2"><vh>Re-enable p.__getattr__ DO THIS LAST</vh></v>
<v t="ekr.20040310100905"><vh>Bugs and feature requests</vh>
<v t="ekr.20040311022923"><vh>Make sentinel name in @-node optional</vh></v>
<v t="ekr.20040310091144"><vh>Window position: possible bug</vh></v>
<v t="ekr.20040310092400"><vh>Allow &lt;/leo_header&gt;</vh></v>
<v t="ekr.20040310092400.1"><vh>Use calltips in outline pane</vh></v>
</v>
</v>
<v t="ekr.20040301192211"><vh>What I did</vh>
<v t="ekr.20040302083805"><vh>Added app.sharedNodes and app.disableSave</vh></v>
<v t="ekr.20040302083805.1"><vh>Changed ivars</vh></v>
<v t="ekr.20040302083805.4"><vh>Replaced p by pv in leoNodes.leo</vh></v>
<v t="ekr.20040302112717"><vh>Created p.getX routines</vh></v>
</v>
<v t="ekr.20040107064101.1"><vh>4.2 Projects</vh>
<v t="ekr.20040105210752"><vh>(Keystrokes)</vh>
<v t="ekr.20040105214540"><vh>Notes</vh></v>
<v t="ekr.20031218072017.3960"><vh>Creating the status area</vh>
<v t="ekr.20031218072017.3961"><vh>createStatusLine</vh></v>
<v t="ekr.20031218072017.3962"><vh>clearStatusLine</vh></v>
<v t="ekr.20031218072017.3963"><vh>putStatusLine</vh></v>
<v t="ekr.20031218072017.1733"><vh>updateStatusRowCol</vh></v>
</v>
<v t="ekr.20031218072017.1330"><vh>onBodyKey</vh>
<v t="ekr.20040105223536"><vh>handleStatusLineKey</vh>
<v t="ekr.20040105223536.1"><vh>&lt;&lt; trace the key event &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.838"><vh>tkBody.createBindings</vh></v>
<v t="ekr.20031218072017.1723"><vh>createMenuEntries</vh>
<v t="ekr.20031218072017.1724"><vh>&lt;&lt; set name to the label for doCommand &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1725"><vh>&lt;&lt; set accel to the shortcut for name &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1726"><vh>&lt;&lt; set bind_shortcut and menu_shortcut using accel &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1727"><vh>&lt;&lt; define callback function &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1728"><vh>&lt;&lt; set realLabel, amp_index and menu_shortcut &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1729"><vh>&lt;&lt; handle bind_shorcut &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1005"><vh>drawText (bind)</vh>
<v t="ekr.20031218072017.1006"><vh>&lt;&lt; configure the text depending on state &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2177"><vh>&lt;&lt; create the toplevel frame &gt;&gt;</vh></v>
</v>
<v t="ekr.20040302094109"><vh>(p.level bug)</vh>
<v t="ekr.20040227214711"><vh>p.level</vh></v>
<v t="ekr.20040228060340"><vh>p.vParentWithStack</vh>
<v t="ekr.20040228060340.1"><vh>&lt;&lt; about the vParentWithStack utility method &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20040305084926"><vh>(clone command)</vh>
<v t="ekr.20031218072017.1762"><vh>c.clone</vh></v>
<v t="ekr.20040303175026.8"><vh>p.clone</vh></v>
<v t="ekr.20031218072017.3424"><vh>v.clone</vh></v>
<v t="ekr.20031218072017.1765"><vh>c.validateOutline</vh></v>
<v t="ekr.20040303175026.13"><vh>p.validateOutlineWithParent</vh>
<v t="ekr.20040303175026.14"><vh>&lt;&lt; validate parent ivar &gt;&gt;</vh></v>
<v t="ekr.20040303175026.15"><vh>&lt;&lt; validate childIndex ivar &gt;&gt;</vh></v>
<v t="ekr.20040303175026.16"><vh>&lt;&lt; validate x ivar &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20040307101707"><vh>(Read code hangs)</vh>
<v t="ekr.20031218072017.2626"><vh> top_df.readAll (disabled)</vh></v>
<v t="ekr.20031218072017.2989"><vh>c.setChanged</vh></v>
<v t="ekr.20031218072017.3368"><vh>v.isCloned (4.2)</vh></v>
<v t="ekr.20031218072017.3437"><vh>v.shouldBeClone</vh></v>
</v>
<v t="ekr.20040309041826"><vh>(Problems with injected methods)</vh>
<v t="ekr.20040309045858"><vh>Notes</vh></v>
<v t="ekr.20031218072017.1000"><vh>drawBox (tag_bind)</vh></v>
<v t="ekr.20031218072017.1002"><vh>drawIcon (tag_bind)</vh></v>
<v t="ekr.20031218072017.1956"><vh>tree.injectCallbacks (class method)</vh>
<v t="ekr.20031218072017.1957"><vh>&lt;&lt; define tkinter callbacks to be injected in the vnode class &gt;&gt;</vh>
<v t="ekr.20031218072017.1958"><vh>OnBoxClick</vh></v>
<v t="ekr.20031218072017.1959"><vh>OnDrag</vh></v>
<v t="ekr.20031218072017.1960"><vh>OnEndDrag</vh></v>
<v t="ekr.20031218072017.1961"><vh>OnHeadlineClick &amp; OnHeadlineRightClick</vh></v>
<v t="ekr.20031218072017.1962"><vh>OnHyperLinkControlClick</vh></v>
<v t="ekr.20031218072017.1963"><vh>OnHeadlineKey</vh></v>
<v t="ekr.20031218072017.1964"><vh>OnHyperLinkEnter</vh></v>
<v t="ekr.20031218072017.1965"><vh>OnHyperLinkLeave</vh></v>
<v t="ekr.20031218072017.1966"><vh>OnIconClick &amp; OnIconRightClick</vh></v>
<v t="ekr.20031218072017.1967"><vh>OnIconDoubleClick</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2336"><vh>Event handers (tree)</vh>
<v t="ekr.20031218072017.2337"><vh>OnActivate</vh>
<v t="ekr.20031218072017.2338"><vh>&lt;&lt; activate this window &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2339"><vh>OnBoxClick</vh></v>
<v t="ekr.20031218072017.2340"><vh>tree.OnDeactivate (caused double-click problem)</vh></v>
<v t="ekr.20031218072017.2341"><vh>tree.findVnodeWithIconId</vh></v>
<v t="ekr.20031218072017.2342"><vh>tree.OnContinueDrag</vh>
<v t="ekr.20031218072017.2343"><vh>&lt;&lt; continue dragging &gt;&gt;</vh>
<v t="ekr.20031218072017.2344"><vh>&lt;&lt; scroll the canvas as needed &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2345"><vh>tree.OnCtontrolT</vh></v>
<v t="ekr.20031218072017.1776"><vh>tree.OnDrag</vh></v>
<v t="ekr.20031218072017.1777"><vh>tree.OnEndDrag</vh>
<v t="ekr.20031218072017.1778"><vh>&lt;&lt; set vdrag, childFlag &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1332"><vh>headline key handlers (tree)</vh>
<v t="ekr.20031218072017.1333"><vh>onHeadChanged</vh></v>
<v t="ekr.20031218072017.1334"><vh>OnHeadlineKey</vh></v>
<v t="ekr.20031218072017.1335"><vh>idle_head_key</vh>
<v t="ekr.20031218072017.1336"><vh>&lt;&lt; set s to the widget text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1337"><vh>&lt;&lt; set head to vnode text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1338"><vh>&lt;&lt; update v and all nodes joined to v &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1339"><vh>&lt;&lt; reconfigure v and all nodes joined to v &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1340"><vh>&lt;&lt; update the screen &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2346"><vh>tree.OnIconClick &amp; OnIconRightClick</vh></v>
<v t="ekr.20031218072017.2348"><vh>tree.OnPopup &amp; allies</vh>
<v t="ekr.20031218072017.2349"><vh>OnPopupFocusLost</vh></v>
<v t="ekr.20031218072017.2249"><vh>createPopupMenu</vh>
<v t="ekr.20031218072017.2250"><vh>&lt;&lt; Create the menu table &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2350"><vh>enablePopupMenuItems</vh>
<v t="ekr.20031218072017.2351"><vh>&lt;&lt; set isAtRoot and isAtFile if v's tree contains @root or @file nodes &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2352"><vh>showPopupMenu</vh></v>
</v>
</v>
</v>
<v t="ekr.20040310062415.1"><vh>(Revised p.link/unlink routines)</vh>
<v t="ekr.20040310062332"><vh>Link/Unlink methods (position)</vh>
<v t="ekr.20040310062332.1"><vh>p.invalidOutline</vh></v>
<v t="ekr.20040310062332.2"><vh>p.linkAfter</vh></v>
<v t="ekr.20040310062332.3"><vh>p.linkAsNthChild</vh></v>
<v t="ekr.20040310062332.4"><vh>p.linkAsRoot</vh></v>
<v t="ekr.20040310062332.5"><vh>p.unlink</vh></v>
</v>
</v>
<v t="ekr.20040305222007"><vh>(undo/redo)</vh>
<v t="ekr.20031218072017.1493"><vh>undoRedoText</vh>
<v t="ekr.20031218072017.1494"><vh>&lt;&lt; Incrementally update the Tk.Text widget &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1495"><vh>&lt;&lt; Compute the result using v's body text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1496"><vh>&lt;&lt; Get textResult from the Tk.Text widget &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1497"><vh>&lt;&lt; print mismatch trace &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2030"><vh>u.redo</vh>
<v t="ekr.20031218072017.2031"><vh>&lt;&lt; redo clone cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2032"><vh>&lt;&lt; redo delete cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2033"><vh>&lt;&lt; redo hoist cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2034"><vh>&lt;&lt; redo insert cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2035"><vh>&lt;&lt; redo move &amp; drag cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2036"><vh>&lt;&lt; redo promote and demote cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1713"><vh>&lt;&lt; redo replace cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2037"><vh>&lt;&lt; redo sort cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2038"><vh>&lt;&lt; redo typing cases &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2039"><vh>u.undo</vh>
<v t="ekr.20031218072017.2040"><vh>&lt;&lt; undo clone cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2041"><vh>&lt;&lt; undo delete cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2042"><vh>&lt;&lt; undo hoist cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2043"><vh>&lt;&lt; undo insert cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2044"><vh>&lt;&lt; undo move  &amp; drag cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1712"><vh>&lt;&lt; undo replace cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2045"><vh>&lt;&lt; undo promote and demote cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2046"><vh>&lt;&lt; undo sort cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2047"><vh>&lt;&lt; undo typing cases &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3612"><vh>getBead, peekBead, setBead</vh></v>
<v t="ekr.20031218072017.3615"><vh>setUndoParams</vh></v>
</v>
<v t="ekr.20040310104639"><vh>(Get move working)</vh>
<v t="ekr.20031218072017.1760"><vh>c.checkMoveWithParentWithWarning</vh></v>
<v t="ekr.20031218072017.1766"><vh>Move... (Commands)</vh>
<v t="ekr.20031218072017.1767"><vh>demote</vh></v>
<v t="ekr.20031218072017.1768"><vh>moveOutlineDown</vh>
<v t="ekr.20031218072017.1769"><vh>&lt;&lt; Move v down &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1770"><vh>moveOutlineLeft</vh></v>
<v t="ekr.20031218072017.1771"><vh>moveOutlineRight</vh></v>
<v t="ekr.20031218072017.1772"><vh>moveOutlineUp</vh>
<v t="ekr.20031218072017.1773"><vh>&lt;&lt; Move v up &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1774"><vh>promote</vh></v>
</v>
</v>
<v t="ekr.20040311081401"><vh>(Get write working)</vh>
<v t="ekr.20031218072017.2387"><vh>scanAllDirectives</vh>
<v t="ekr.20031218072017.2388"><vh>&lt;&lt; Set ivars &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2389"><vh>&lt;&lt; Set path from @file node &gt;&gt; in scanDirectory in leoGlobals.py</vh></v>
<v t="ekr.20031218072017.2390"><vh>&lt;&lt; Test for @comment and @language &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2391"><vh>&lt;&lt; Test for @encoding &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2392"><vh>&lt;&lt; Test for @header and @noheader &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2393"><vh>&lt;&lt; Test for @lineending &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2394"><vh>&lt;&lt; Test for @path &gt;&gt;</vh>
<v t="ekr.20031218072017.2395"><vh>&lt;&lt; compute relative path from s[k:] &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2396"><vh>&lt;&lt; handle absolute path &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2397"><vh>&lt;&lt; Test for @pagewidth &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2398"><vh>&lt;&lt; Test for @tabwidth &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2399"><vh>&lt;&lt; Set current directory &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2400"><vh>&lt;&lt; Set comment Strings from delims &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2140"><vh>executeScript</vh>
<v t="ekr.20031218072017.2141"><vh>&lt;&lt; define class fileLikeObject &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2142"><vh>&lt;&lt; get script into s &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2143"><vh>&lt;&lt; redirect output if redirect_execute_script_output_to_log_pane &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1570"><vh>assignFileIndices &amp; compactFileIndices</vh>
<v t="ekr.20031218072017.1571"><vh>&lt;&lt; assign missing gnx's, converting ints to gnx's &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1572"><vh>&lt;&lt; reassign all tnode indices &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1577"><vh>putTnode</vh>
<v t="ekr.20031218072017.1578"><vh>&lt;&lt; put unknown tnode attributes &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2002"><vh>putTnodeList (4.0)</vh></v>
<v t="ekr.20031218072017.1575"><vh>putTnodes</vh>
<v t="ekr.20031218072017.1576"><vh>&lt;&lt; write only those tnodes that were referenced &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1863"><vh>putVnode (3.x and 4.x)</vh>
<v t="ekr.20031218072017.1864"><vh>&lt;&lt; Put tnode index &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1865"><vh>&lt;&lt; Put attribute bits &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1866"><vh>&lt;&lt; write the head text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1867"><vh>&lt;&lt; put unknown vnode attributes &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1579"><vh>putVnodes</vh></v>
</v>
<v t="ekr.20040308153521"><vh>(Read Leo file to 4.2 format)</vh>
<v t="ekr.20031218072017.1553"><vh>getLeoFile</vh>
<v t="ekr.20031218072017.1554"><vh>&lt;&lt; warn on read-only files &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1555"><vh>&lt;&lt; scan all the xml elements &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1556"><vh>&lt;&lt; raise an alert &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1565"><vh>getVnodes</vh></v>
<v t="ekr.20031218072017.1566"><vh>getVnode changed for 4.2)</vh>
<v t="ekr.20031218072017.1567"><vh>&lt;&lt; Handle vnode attribute bits  &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1568"><vh>&lt;&lt; Set the remembered status bits &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1860" a="M"><vh>createVnode (changed for 4.2)</vh>
<v t="ekr.20031218072017.1861"><vh>&lt;&lt; handle unknown vnode attributes &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1560"><vh>getTnodes</vh></v>
<v t="ekr.20031218072017.1561"><vh>getTnode</vh>
<v t="ekr.20031218072017.1562"><vh>&lt;&lt; handle read from file &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1563"><vh>&lt;&lt; handle read from clipboard &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1564"><vh>&lt;&lt; handle unknown attributes &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20040311133449"><vh>(Cut/paste outlines)</vh>
<v t="ekr.20031218072017.1559"><vh>getLeoOutline (from clipboard)</vh></v>
<v t="ekr.20031218072017.1551"><vh>pasteOutline</vh></v>
<v t="ekr.20031218072017.1557"><vh>finishPaste</vh>
<v t="ekr.20031218072017.1558"><vh>&lt;&lt; reassign tnode indices and clear all clone links &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1565" a="M"><vh>getVnodes</vh></v>
<v t="ekr.20031218072017.1566"><vh>getVnode changed for 4.2)</vh>
<v t="ekr.20031218072017.1567"><vh>&lt;&lt; Handle vnode attribute bits  &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1568" a="M"><vh>&lt;&lt; Set the remembered status bits &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1860"><vh>createVnode (changed for 4.2)</vh>
<v t="ekr.20031218072017.1861"><vh>&lt;&lt; handle unknown vnode attributes &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20040308151706.1"><vh>4.2 Code</vh>
<v t="ekr.20031218072017.1416"><vh>app.__init__</vh>
<v t="ekr.20031218072017.1417"><vh>&lt;&lt; define global constants &gt;&gt;</vh></v>
<v t="ekr.20031218072017.368"><vh>&lt;&lt; define global data structures &gt;&gt; app</vh></v>
</v>
<v t="ekr.20031218072017.1934"><vh>run &amp; allies</vh>
<v t="ekr.20031218072017.1935"><vh>&lt;&lt; print encoding info &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1936"><vh>isValidPython</vh></v>
<v t="ekr.20031218072017.1937"><vh>computeLoadDir</vh></v>
<v t="ekr.20031218072017.1624"><vh>createFrame (leo.py)</vh></v>
<v t="ekr.20031218072017.1938"><vh>createNullGuiWithScript (leo.py)</vh></v>
<v t="ekr.20031218072017.1939"><vh>getBatchScript</vh></v>
</v>
<v t="ekr.20031218072017.3341"><vh>class vnode</vh>
<v t="ekr.20031218072017.951"><vh>&lt;&lt; vnode constants &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3342"><vh>Birth &amp; death</vh>
<v t="ekr.20031218072017.3343"><vh>v.__cmp__ (not used)</vh></v>
<v t="ekr.20031218072017.3344"><vh>v.__init__</vh>
<v t="ekr.20031218072017.1968"><vh>&lt;&lt; initialize vnode data members &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3345"><vh>v.__repr__ &amp; v.__str__</vh></v>
</v>
<v t="ekr.20031218072017.3346"><vh>Comparisons (vnode)</vh>
<v t="ekr.20031218072017.3347"><vh>afterHeadlineMatch</vh></v>
<v t="ekr.20031218072017.3348"><vh>at/../NodeName</vh></v>
<v t="ekr.20031218072017.3349"><vh>isAt/../Node</vh></v>
<v t="ekr.20031218072017.3350"><vh>isAnyAtFileNode &amp; isAnyAtFileNodeName</vh></v>
<v t="ekr.20031218072017.3351"><vh>isAtIgnoreNode</vh></v>
<v t="ekr.20031218072017.3352"><vh>isAtOthersNode</vh></v>
<v t="ekr.20031218072017.3353"><vh>matchHeadline</vh></v>
</v>
<v t="ekr.20031218072017.3354"><vh>File Conversion (vnode)</vh>
<v t="ekr.20031218072017.3355"><vh>convertTreeToString</vh></v>
<v t="ekr.20031218072017.3356"><vh>moreHead</vh></v>
<v t="ekr.20031218072017.3357"><vh>v.moreBody</vh></v>
</v>
<v t="ekr.20031218072017.3359"><vh>Getters (vnode)</vh>
<v t="ekr.20040306214240"><vh>Tree Traversal getters</vh>
<v t="ekr.20031218072017.3406"><vh>v.back</vh></v>
<v t="ekr.20031218072017.3409"><vh>v.next</vh></v>
</v>
<v t="ekr.20031218072017.3360"><vh>Children</vh>
<v t="ekr.20040307085922"><vh>hasChildren &amp; hasFirstChild (new in 4.2 for compatibility with positions)</vh></v>
<v t="ekr.20031218072017.3366"><vh>numberOfChildren (n)</vh></v>
<v t="ekr.20031218072017.3361"><vh>v.childIndex (changed for 4.2)</vh></v>
<v t="ekr.20031218072017.3362"><vh>v.firstChild (changed for 4.2)</vh></v>
<v t="ekr.20031218072017.3363"><vh>v.hasChildren</vh></v>
<v t="ekr.20031218072017.3364"><vh>v.lastChild</vh></v>
<v t="ekr.20031218072017.3365"><vh>v.nthChild</vh></v>
</v>
<v t="ekr.20031218072017.3367"><vh>Status Bits</vh>
<v t="ekr.20031218072017.3368"><vh>v.isCloned (4.2)</vh></v>
<v t="ekr.20031218072017.3369"><vh>isDirty</vh></v>
<v t="ekr.20031218072017.3370"><vh>isExpanded</vh></v>
<v t="ekr.20031218072017.3371"><vh>isMarked</vh></v>
<v t="ekr.20031218072017.3372"><vh>isOrphan</vh></v>
<v t="ekr.20031218072017.3373"><vh>isSelected</vh></v>
<v t="ekr.20031218072017.3374"><vh>isTopBitSet</vh></v>
<v t="ekr.20031218072017.3375"><vh>isVisible</vh></v>
<v t="ekr.20031218072017.3376"><vh>isVisited</vh></v>
<v t="ekr.20031218072017.3377"><vh>status</vh></v>
</v>
<v t="ekr.20031218072017.3378"><vh>bodyString</vh></v>
<v t="ekr.20031218072017.3379"><vh>v.currentVnode (and c.currentPosition 4.2)</vh></v>
<v t="ekr.20031218072017.3380"><vh>edit_text</vh></v>
<v t="ekr.20031218072017.3381"><vh>v.findRoot (4.2)</vh></v>
<v t="ekr.20031218072017.1581"><vh>headString &amp; cleanHeadString</vh></v>
</v>
<v t="ekr.20040307073708"><vh>Iterators (vnode)</vh>
<v t="ekr.20040309041436.1"><vh>Defined in 4.2</vh>
<v t="ekr.20040307073708.7"><vh>children_iter</vh>
<v t="ekr.20040307073708.8"><vh>__init__ &amp; __iter__</vh></v>
<v t="ekr.20040307073708.9"><vh>next</vh></v>
</v>
<v t="ekr.20040307073708.13"><vh>siblings_iter</vh>
<v t="ekr.20040307073708.14"><vh>__init__ &amp; __iter__</vh></v>
<v t="ekr.20040307073708.15"><vh>next</vh></v>
</v>
</v>
</v>
<v t="ekr.20040301071824"><vh>Link/Unlink/Insert methods (vnode) (used by file read logic)</vh>
<v t="ekr.20031218072017.3419"><vh>v.insertAfter</vh></v>
<v t="ekr.20031218072017.3421"><vh>v.insertAsNthChild</vh></v>
<v t="ekr.20031218072017.2355"><vh>v.linkAfter</vh></v>
<v t="ekr.20031218072017.3425"><vh>v.linkAsNthChild</vh></v>
<v t="ekr.20031218072017.3426"><vh>v.linkAsRoot</vh></v>
<v t="ekr.20031218072017.3422"><vh>v.moveToRoot</vh></v>
<v t="ekr.20031218072017.3438"><vh>v.unlink</vh></v>
</v>
<v t="ekr.20031218072017.3384"><vh>Setters</vh>
<v t="ekr.20031218072017.1477"><vh>Head and body text</vh>
<v t="ekr.20031218072017.1478"><vh>appendStringToBody</vh></v>
<v t="ekr.20031218072017.1479"><vh>scriptSetBodyString</vh></v>
<v t="ekr.20031218072017.1480"><vh>setBodyStringOrPane &amp; setBodyTextOrPane</vh></v>
<v t="ekr.20031218072017.1481"><vh>setHeadString &amp; initHeadString</vh></v>
<v t="ekr.20031218072017.1482"><vh>setHeadStringOrHeadline</vh></v>
</v>
<v t="ekr.20031218072017.3385"><vh>computeIcon &amp; setIcon</vh></v>
<v t="ekr.20031218072017.3386"><vh>Status bits</vh>
<v t="ekr.20031218072017.3389"><vh>clearClonedBit</vh></v>
<v t="ekr.20031218072017.3390"><vh>clearDirty &amp; clearDirtyJoined (redundant code)</vh></v>
<v t="ekr.20031218072017.3391"><vh>clearMarked</vh></v>
<v t="ekr.20031218072017.3392"><vh>clearOrphan</vh></v>
<v t="ekr.20031218072017.3393"><vh>clearVisited</vh></v>
<v t="ekr.20031218072017.3395"><vh>contract &amp; expand &amp; initExpandedBit</vh></v>
<v t="ekr.20031218072017.3396"><vh>initStatus</vh></v>
<v t="ekr.20031218072017.3397"><vh>setClonedBit &amp; initClonedBit</vh></v>
<v t="ekr.20031218072017.3398"><vh>setMarked &amp; initMarkedBit</vh></v>
<v t="ekr.20031218072017.3399"><vh>setOrphan</vh></v>
<v t="ekr.20031218072017.3400"><vh>setSelected (vnode)</vh></v>
<v t="ekr.20031218072017.3401"><vh>setVisited</vh></v>
</v>
<v t="ekr.20031218072017.3402"><vh>setSelection</vh></v>
<v t="ekr.20031218072017.3403"><vh>setT (not used)</vh></v>
<v t="ekr.20031218072017.3404"><vh>trimTrailingLines</vh></v>
</v>
<v t="ekr.20031218072017.3358"><vh>v.extraAttributes &amp; setExtraAttributes</vh></v>
</v>
<v t="ekr.20031218072017.889"><vh>class position</vh>
<v t="ekr.20040228094013"><vh> ctor &amp; other special methods...</vh>
<v t="ekr.20031218072017.892"><vh>p.__init__</vh></v>
<v t="ekr.20031218072017.893"><vh>p.__cmp__</vh></v>
<v t="ekr.20040117170612"><vh>p.__getattr__  (used only for p.t)</vh></v>
<v t="ekr.20040117173448"><vh>p.__nonzero__</vh></v>
<v t="ekr.20040301205720"><vh>p.__str__ and p.__repr__</vh></v>
<v t="ekr.20040310153624"><vh>p.dump</vh></v>
</v>
<v t="ekr.20031218072017.890"><vh>&lt;&lt; about the position class &gt;&gt;</vh></v>
<v t="ekr.20040306212636"><vh>Getters</vh>
<v t="ekr.20040306210951"><vh> vnode proxies</vh>
<v t="ekr.20040306211032"><vh>Comparisons</vh></v>
<v t="ekr.20040306212151"><vh>Extra Attributes</vh></v>
<v t="ekr.20040306211917"><vh>File Conversion</vh></v>
<v t="ekr.20040306220230"><vh>Headline &amp; body strings</vh></v>
<v t="ekr.20040306214401"><vh>Status bits</vh></v>
<v t="ekr.20040306220230.1"><vh>p.edit_text</vh></v>
</v>
<v t="ekr.20040306214240.2"><vh>children</vh>
<v t="ekr.20040306214240.3"><vh>p.hasChildren</vh></v>
<v t="ekr.20040303212445"><vh>p.childIndex</vh></v>
<v t="ekr.20040306212636.1"><vh>p.numberOfChildren</vh></v>
</v>
<v t="ekr.20040307104131.3"><vh>p.exists</vh></v>
<v t="ekr.20040306215548"><vh>p.findRoot</vh></v>
<v t="ekr.20031218072017.915"><vh>p.getX &amp; vnode compatibility traversal routines</vh></v>
<v t="ekr.20040227212621"><vh>p.hasX </vh>
<v t="ekr.20040227224946"><vh>hasThreadNext (the only complex hasX method)</vh></v>
</v>
<v t="ekr.20040307104131.1"><vh>p.isAncestorOf</vh></v>
<v t="ekr.20040306215056"><vh>p.isCloned</vh></v>
<v t="ekr.20040307104131.2"><vh>p.isRoot</vh></v>
<v t="ekr.20040117162509.16"><vh>p.isVisible</vh></v>
<v t="ekr.20040227214711"><vh>p.level</vh></v>
</v>
<v t="ekr.20040305222924"><vh>Setters</vh>
<v t="ekr.20040306220634"><vh>vnode proxies</vh>
<v t="ekr.20040306220634.9"><vh> Status bits</vh></v>
<v t="ekr.20040306220634.2"><vh> Head and body text</vh></v>
<v t="ekr.20040306220634.8"><vh>p.computeIcon &amp; p.setIcon</vh></v>
<v t="ekr.20040306220634.29"><vh>p.setSelection</vh></v>
<v t="ekr.20040306220634.31"><vh>p.trimTrailingLines</vh></v>
</v>
<v t="ekr.20040305223522"><vh>p.setBodyStringOrPane &amp; p.setBodyTextOrPane</vh></v>
<v t="ekr.20040305222924.1"><vh>p.setHeadString &amp; p.initHeadString</vh></v>
<v t="ekr.20040305223225"><vh>p.setHeadStringOrHeadline</vh></v>
<v t="ekr.20040312015908"><vh>Visited bits</vh>
<v t="ekr.20040312015705"><vh>p.clearAllVisited</vh></v>
<v t="ekr.20040306220634.17"><vh>p.clearVisitedInTree</vh></v>
<v t="ekr.20031218072017.3388"><vh>clearAllVisitedInTree TO POSITION</vh></v>
</v>
<v t="ekr.20040305162628"><vh>Dirty bits</vh>
<v t="ekr.20040311113514"><vh>p.clearDirty</vh></v>
<v t="ekr.20040303163717"><vh>p.isDirty</vh></v>
<v t="ekr.20040303214038"><vh>p.setAllAncestorAtFileNodesDirty</vh></v>
<v t="ekr.20040303163052"><vh>p.setAncestorAtFileNodeDirty</vh></v>
<v t="ekr.20040303162823"><vh>p.setAncestorsOfClonedNodesInTreeDirty</vh></v>
<v t="ekr.20040303163330"><vh>p.setDirty</vh></v>
</v>
</v>
<v t="ekr.20040305162628.1"><vh>Iterators (position)</vh>
<v t="ekr.20040305171133"><vh>allNodes_iter</vh>
<v t="ekr.20040305171133.1"><vh>__init__ &amp; __iter__</vh></v>
<v t="ekr.20040305171133.3"><vh>next</vh></v>
</v>
<v t="ekr.20040305173559"><vh>subtree_iter</vh>
<v t="ekr.20040305173559.1"><vh>__init__ &amp; __iter__</vh></v>
<v t="ekr.20040305173559.2"><vh>next</vh></v>
</v>
<v t="ekr.20040305172211.1"><vh>children_iter</vh>
<v t="ekr.20040305172211.2"><vh>__init__ &amp; __iter__</vh></v>
<v t="ekr.20040305172211.3"><vh>next</vh></v>
</v>
<v t="ekr.20040305172855"><vh>parents_iter</vh>
<v t="ekr.20040305172855.1"><vh>__init__ &amp; __iter__</vh></v>
<v t="ekr.20040305172855.2"><vh>next</vh></v>
</v>
<v t="ekr.20040305173343"><vh>siblings_iter</vh>
<v t="ekr.20040305173343.1"><vh>__init__ &amp; __iter__</vh></v>
<v t="ekr.20040305173343.2"><vh>next</vh></v>
</v>
</v>
<v t="ekr.20040303175026"><vh>Moving, Inserting, Deleting, Cloning, Sorting (position) </vh>
<v t="ekr.20040303175026.1"><vh>Entry Points (positon)</vh>
<v t="ekr.20040303175026.2"><vh>p.doDelete</vh></v>
<v t="ekr.20040303175026.3"><vh>p.insertAfter</vh></v>
<v t="ekr.20040303175026.4"><vh>p.insertAsLastChild</vh></v>
<v t="ekr.20040303175026.5"><vh>p.insertAsNthChild</vh></v>
<v t="ekr.20040303175026.6"><vh>p.moveToRoot</vh></v>
<v t="ekr.20040303175026.8"><vh>p.clone</vh></v>
<v t="ekr.20040303175026.9"><vh>p.copyTreeWithNewTnodes: used by unit tests TO DO</vh></v>
<v t="ekr.20040303175026.10"><vh>p.moveAfter</vh></v>
<v t="ekr.20040306060312"><vh>p.moveToLastChildOf</vh></v>
<v t="ekr.20040303175026.11"><vh>p.moveToNthChildOf</vh></v>
<v t="ekr.20040303175026.12"><vh>p.sortChildren</vh></v>
<v t="ekr.20040303175026.13"><vh>p.validateOutlineWithParent</vh>
<v t="ekr.20040303175026.14"><vh>&lt;&lt; validate parent ivar &gt;&gt;</vh></v>
<v t="ekr.20040303175026.15"><vh>&lt;&lt; validate childIndex ivar &gt;&gt;</vh></v>
<v t="ekr.20040303175026.16"><vh>&lt;&lt; validate x ivar &gt;&gt;</vh></v>
</v>
<v t="ekr.20040303175026.18"><vh>p.invalidOutline</vh></v>
</v>
</v>
<v t="ekr.20031218072017.928"><vh>p.moveToX</vh>
<v t="ekr.20031218072017.930"><vh>p.moveToBack</vh></v>
<v t="ekr.20031218072017.931"><vh>p.moveToFirstChild (pushes stack for cloned nodes)</vh></v>
<v t="ekr.20031218072017.932"><vh>p.moveToLastChild (pushes stack for cloned nodes)</vh></v>
<v t="ekr.20031218072017.933"><vh>p.moveToLastNode (new cheap code)</vh>
<v t="ekr.20040301211133"><vh>&lt;&lt; simulate repeated "lookahead" calls to p.moveToThreadNext() &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.934"><vh>p.moveToNext</vh></v>
<v t="ekr.20031218072017.935"><vh>p.moveToNodeAfterTree</vh></v>
<v t="ekr.20031218072017.936"><vh>p.moveToNthChild (pushes stack for cloned nodes)</vh></v>
<v t="ekr.20031218072017.937"><vh>p.moveToParent (pops stack when multiple parents)</vh></v>
<v t="ekr.20031218072017.938"><vh>p.moveToThreadBack (new cheap code)</vh>
<v t="ekr.20040301211500"><vh>p.checkNextThreadNextLevel</vh></v>
</v>
<v t="ekr.20031218072017.939"><vh>p.moveToThreadNext</vh></v>
<v t="ekr.20031218072017.940"><vh>p.moveToVisBack</vh></v>
<v t="ekr.20031218072017.941"><vh>p.moveToVisNext</vh></v>
</v>
<v t="ekr.20040228094013.1"><vh>p.utils...</vh>
<v t="ekr.20040117171654"><vh>p.copy</vh></v>
<v t="ekr.20040228060340"><vh>p.vParentWithStack</vh>
<v t="ekr.20040228060340.1"><vh>&lt;&lt; about the vParentWithStack utility method &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20040310062332"><vh>Link/Unlink methods (position)</vh>
<v t="ekr.20040310062332.1"><vh>p.invalidOutline</vh></v>
<v t="ekr.20040310062332.2"><vh>p.linkAfter</vh></v>
<v t="ekr.20040310062332.3"><vh>p.linkAsNthChild</vh></v>
<v t="ekr.20040310062332.4"><vh>p.linkAsRoot</vh></v>
<v t="ekr.20040310062332.5"><vh>p.unlink</vh></v>
</v>
</v>
<v t="ekr.20040305162628.1"><vh>Iterators (position)</vh>
<v t="ekr.20040305171133"><vh>allNodes_iter</vh>
<v t="ekr.20040305171133.1"><vh>__init__ &amp; __iter__</vh></v>
<v t="ekr.20040305171133.3"><vh>next</vh></v>
</v>
<v t="ekr.20040305173559"><vh>subtree_iter</vh>
<v t="ekr.20040305173559.1"><vh>__init__ &amp; __iter__</vh></v>
<v t="ekr.20040305173559.2"><vh>next</vh></v>
</v>
<v t="ekr.20040305172211.1"><vh>children_iter</vh>
<v t="ekr.20040305172211.2"><vh>__init__ &amp; __iter__</vh></v>
<v t="ekr.20040305172211.3"><vh>next</vh></v>
</v>
<v t="ekr.20040305172855"><vh>parents_iter</vh>
<v t="ekr.20040305172855.1"><vh>__init__ &amp; __iter__</vh></v>
<v t="ekr.20040305172855.2"><vh>next</vh></v>
</v>
<v t="ekr.20040305173343"><vh>siblings_iter</vh>
<v t="ekr.20040305173343.1"><vh>__init__ &amp; __iter__</vh></v>
<v t="ekr.20040305173343.2"><vh>next</vh></v>
</v>
</v>
<v t="ekr.20040304163125"><vh>Script to find and replace all functions in leoGlobals.py</vh>
<v t="ekr.20040304165432"><vh>findNode &amp; findTopLevelNode</vh></v>
<v t="ekr.20040304165432.1"><vh>findFunctionsInTree</vh></v>
<v t="ekr.20040304163522"><vh>findDefs</vh></v>
<v t="ekr.20040304164949"><vh>prependNamesInTree(v,nameList,"g.")</vh>
<v t="ekr.20040304173234.1"><vh>&lt;&lt; look for name followed by '(' &gt;&gt;</vh></v>
<v t="ekr.20040304173234"><vh>&lt;&lt; print before and after &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20040301071824"><vh>Link/Unlink/Insert methods (vnode) (used by file read logic)</vh>
<v t="ekr.20031218072017.3419"><vh>v.insertAfter</vh></v>
<v t="ekr.20031218072017.3421"><vh>v.insertAsNthChild</vh></v>
<v t="ekr.20031218072017.2355"><vh>v.linkAfter</vh></v>
<v t="ekr.20031218072017.3425"><vh>v.linkAsNthChild</vh></v>
<v t="ekr.20031218072017.3426"><vh>v.linkAsRoot</vh></v>
<v t="ekr.20031218072017.3422"><vh>v.moveToRoot</vh></v>
<v t="ekr.20031218072017.3438"><vh>v.unlink</vh></v>
</v>
<v t="ekr.20040307091318"><vh>(root &amp; current position/vnode)</vh>
<v t="ekr.20031218072017.2983"><vh>c.currentPosition &amp; c.setCurrentPosition</vh></v>
<v t="ekr.20031218072017.2988"><vh>c.rootPosition &amp; c.setRootPosition</vh></v>
<v t="ekr.20031218072017.3716"><vh>Getters/Setters (tree)</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.2406"><vh>Code</vh>
<v t="ekr.20031218072017.2407"><vh>  Overview of code</vh>
<v t="ekr.20031218072017.2408"><vh>&lt;&lt; About clones &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2409"><vh>&lt;&lt; About drawing &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2410"><vh>&lt;&lt; About handling events &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2411"><vh>&lt;&lt; About Tangle and Untangle &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2412"><vh>&lt;&lt; About the vnode and tnode classes &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2413"><vh>&lt;&lt; How Leo implements unlimited undo &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2414"><vh>&lt;&lt; Theory of operation of find/change &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2415"><vh>  Scripts</vh>
<v t="ekr.20031218072017.2416"><vh>Fnd/change scripts</vh>
<v t="ekr.20031218072017.2418"><vh>initScriptFind (use this to set up Leo's Find/Change dialog for scripting)</vh></v>
<v t="ekr.20040201070845"><vh>Routines that execute script-find and script-change</vh>
<v t="ekr.20031218072017.3072"><vh>doFind...Script</vh></v>
<v t="ekr.20031218072017.2417"><vh>doChange...Script</vh></v>
</v>
<v t="ekr.20040201061928"><vh>Find script to check for dubious leading whitespace</vh>
<v t="ekr.20040130112145"><vh>Find script</vh></v>
<v t="ekr.20040201104001"><vh>test</vh></v>
</v>
<v t="ekr.20031218072017.2419"><vh>Find script to clean whitespace</vh>
<v t="ekr.20031218072017.2420"><vh>Find script</vh></v>
<v t="ekr.20031218072017.2421"><vh>Change script</vh></v>
</v>
<v t="ekr.20031218072017.2422"><vh>Find scripts to convert @doc comments to doc strings</vh>
<v t="ekr.20031218072017.2423"><vh>Find script</vh></v>
<v t="ekr.20031218072017.2424"><vh>Change script</vh></v>
<v t="ekr.20031218072017.2425"><vh>re tests</vh></v>
<v t="ekr.20031218072017.2426"><vh>early find script</vh></v>
</v>
</v>
<v t="ekr.20040201063019"><vh>Other scripts</vh>
<v t="ekr.20031218072017.4251"><vh>Clear all timestamps</vh></v>
<v t="ekr.20031218072017.4248"><vh>Create a graphviz file</vh>
<v t="ekr.20031218072017.4249"><vh>&lt;&lt;about this script&gt;&gt;</vh></v>
<v t="ekr.20040201063200"><vh>rPrint</vh></v>
<v t="ekr.20040201063200.1"><vh>newLineize</vh></v>
<v t="ekr.20040201063200.2"><vh>graphvizString</vh></v>
</v>
<v t="ekr.20031218072017.2429"><vh>Count pages</vh></v>
<v t="ekr.20031218072017.2428"><vh>Find script to change OnX to x in body (didn't quite work :-)</vh></v>
<v t="ekr.20031218072017.2427"><vh>Find scripts to change OnX to x in headline</vh></v>
</v>
<v t="ekr.20040104184644"><vh>Recursive import script</vh>
<v t="ekr.20040104184913.1"><vh>importFiles</vh></v>
<v t="ekr.20040104184913.2"><vh>importDir</vh></v>
<v t="ekr.20040104184913.3"><vh>createLastChildOf</vh></v>
</v>
<v t="ekr.20031218072017.2431"><vh>Testing scripts</vh>
<v t="ekr.20031218072017.2432"><vh>Script to clean unused tnodeLists</vh></v>
<v t="ekr.20031218072017.2433"><vh>Script to check topology of all clones</vh></v>
<v t="ekr.20031218072017.2434"><vh>Scripts for checking clones</vh>
<v t="ekr.20031218072017.2435"><vh>checkForMismatchedJoinedNodes</vh></v>
<v t="ekr.20031218072017.2436"><vh>checkForPossiblyBrokenLinks</vh></v>
<v t="ekr.20031218072017.2437"><vh>checkTopologiesOfLinkedNodes</vh></v>
<v t="ekr.20031218072017.2438"><vh>checkLinksOfNodesWithSameTopologies (to do)</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2439"><vh>The scripts directory... (to be deleted?)</vh>
<v t="ekr.20031218072017.2440"><vh>@file-nosent ../scripts/LinixInstall.py</vh></v>
<v t="ekr.20031218072017.2441"><vh>../scripts/findDosFile</vh></v>
<v t="ekr.20031218072017.2442" tnodeList="ekr.20031218072017.2442,ekr.20031218072017.2444,ekr.20031218072017.2445,ekr.20031218072017.2446,ekr.20031218072017.2447,ekr.20031218072017.2448,ekr.20031218072017.2450,ekr.20031218072017.2451,ekr.20031218072017.2452,ekr.20031218072017.2453,ekr.20031218072017.2454,ekr.20031218072017.2455,ekr.20031218072017.2456,ekr.20031218072017.2457,ekr.20031218072017.2459,ekr.20031218072017.2460,ekr.20031218072017.2461,ekr.20031218072017.2462,ekr.20031218072017.2463,ekr.20031218072017.2466,ekr.20031218072017.2467,ekr.20031218072017.2468,ekr.20031218072017.2469,ekr.20031218072017.2470,ekr.20031218072017.2471,ekr.20031218072017.2472,ekr.20031218072017.2473,ekr.20031218072017.2474,ekr.20031218072017.2475,ekr.20031218072017.2476,ekr.20031218072017.2477,ekr.20031218072017.2478,ekr.20031218072017.2479,ekr.20031218072017.2480,ekr.20031218072017.2481,ekr.20031218072017.2482,ekr.20031218072017.2483,ekr.20031218072017.2484,ekr.20031218072017.2485,ekr.20031218072017.2486,ekr.20031218072017.2487,ekr.20031218072017.2488,ekr.20031218072017.2489,ekr.20031218072017.2490,ekr.20031218072017.2491,ekr.20031218072017.2492,ekr.20031218072017.2493,ekr.20031218072017.2494,ekr.20031218072017.2495,ekr.20031218072017.2496,ekr.20031218072017.2497,ekr.20031218072017.2498,ekr.20031218072017.2499,ekr.20031218072017.2500,ekr.20031218072017.2501,ekr.20031218072017.2502,ekr.20031218072017.2503,ekr.20031218072017.2504,ekr.20031218072017.2505,ekr.20031218072017.2506,ekr.20031218072017.2507,ekr.20031218072017.2508,ekr.20031218072017.2509"><vh>@file ../scripts/c2py.py</vh>
<v t="ekr.20031218072017.2443"><vh>Documentation</vh>
<v t="ekr.20031218072017.2444"><vh>&lt;&lt; what c2py does &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2445"><vh>&lt;&lt; theory of operation &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2446"><vh>&lt;&lt; specifying user types &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2447"><vh>&lt;&lt; define testData &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2448"><vh>speedTest</vh></v>
<v t="ekr.20031218072017.2449"><vh>leo1to2</vh>
<v t="ekr.20031218072017.2450"><vh>leo1to2</vh></v>
<v t="ekr.20031218072017.2451"><vh>convertLeo1to2</vh></v>
<v t="ekr.20031218072017.2452"><vh>convertStringLeo1to2</vh></v>
<v t="ekr.20031218072017.2453"><vh>convertCodeList1to2</vh></v>
</v>
<v t="ekr.20031218072017.2454"><vh>c2py entry points</vh>
<v t="ekr.20031218072017.2455"><vh>convertCurrentTree</vh></v>
<v t="ekr.20031218072017.2456"><vh>convertLeoTree</vh></v>
<v t="ekr.20031218072017.2457"><vh>convertCFileToPython</vh></v>
</v>
<v t="ekr.20031218072017.2458"><vh>c2py Top Level</vh>
<v t="ekr.20031218072017.2459"><vh>convertCStringToPython</vh></v>
<v t="ekr.20031218072017.2460"><vh>convertCodeList</vh></v>
<v t="ekr.20031218072017.2461"><vh>convertDocList</vh></v>
<v t="ekr.20031218072017.2462"><vh>skipDocPart</vh></v>
<v t="ekr.20031218072017.2463"><vh>skipCodePart</vh></v>
</v>
<v t="ekr.20031218072017.2464"><vh>removeSentinels</vh></v>
<v t="ekr.20031218072017.2465"><vh>Scanning &amp; Replacing</vh>
<v t="ekr.20031218072017.2466"><vh>convertLeadingBlanks</vh></v>
<v t="ekr.20031218072017.2467"><vh>findInList</vh></v>
<v t="ekr.20031218072017.2468"><vh>findInCode</vh></v>
<v t="ekr.20031218072017.2469"><vh>mungeAllFunctions</vh>
<v t="ekr.20031218072017.2470"><vh>handlePossibleFunctionHeader</vh></v>
<v t="ekr.20031218072017.2471"><vh>massageFunctionArgs</vh></v>
<v t="ekr.20031218072017.2472"><vh>massageFunctionHead (sets gClassName)</vh></v>
<v t="ekr.20031218072017.2473"><vh>massageFunctionBody</vh>
<v t="ekr.20031218072017.2474"><vh>massageIvars</vh></v>
<v t="ekr.20031218072017.2475"><vh>removeCasts</vh></v>
<v t="ekr.20031218072017.2476"><vh>removeTypeNames</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2477"><vh>handleAllKeywords</vh>
<v t="ekr.20031218072017.2478"><vh>handleKeyword</vh></v>
</v>
<v t="ekr.20031218072017.2479"><vh>isWs and isWOrNl</vh></v>
<v t="ekr.20031218072017.2480"><vh>isSectionDef</vh></v>
<v t="ekr.20031218072017.2481"><vh>isStringOrComment</vh></v>
<v t="ekr.20031218072017.2482"><vh>match</vh></v>
<v t="ekr.20031218072017.2483"><vh>matchWord</vh></v>
<v t="ekr.20031218072017.2484"><vh>prevNonWsChar and prevNonWsOrNlChar</vh></v>
<v t="ekr.20031218072017.2485"><vh>removeAllCComments</vh></v>
<v t="ekr.20031218072017.2486"><vh>removeAllCSentinels</vh></v>
<v t="ekr.20031218072017.2487"><vh>removeAllPythonComments</vh></v>
<v t="ekr.20031218072017.2488"><vh>removeAllPythonSentinels</vh></v>
<v t="ekr.20031218072017.2489"><vh>removeAtRoot</vh></v>
<v t="ekr.20031218072017.2490"><vh>removeBlankLines</vh></v>
<v t="ekr.20031218072017.2491"><vh>removeExcessWs</vh>
<v t="ekr.20031218072017.2492"><vh>removeExessWsFromLine</vh></v>
</v>
<v t="ekr.20031218072017.2493"><vh>removeLeadingAtCode</vh></v>
<v t="ekr.20031218072017.2494"><vh>removeMatchingBrackets</vh></v>
<v t="ekr.20031218072017.2495"><vh>removeSemicolonsAtEndOfLines</vh></v>
<v t="ekr.20031218072017.2496"><vh>removeTrailingWs</vh></v>
<v t="ekr.20031218072017.2497"><vh>replace</vh></v>
<v t="ekr.20031218072017.2498"><vh>replaceComments</vh></v>
<v t="ekr.20031218072017.2499"><vh>replaceSectionDefs</vh></v>
<v t="ekr.20031218072017.2500"><vh>safeReplace</vh></v>
<v t="ekr.20031218072017.2501"><vh>skipCBlockComment</vh></v>
<v t="ekr.20031218072017.2502"><vh>skipPastLine</vh></v>
<v t="ekr.20031218072017.2503"><vh>skipPastWord</vh></v>
<v t="ekr.20031218072017.2504"><vh>skipString</vh></v>
<v t="ekr.20031218072017.2505"><vh>skipStringOrComment</vh></v>
<v t="ekr.20031218072017.2506"><vh>skipToMatchingBracket</vh></v>
<v t="ekr.20031218072017.2507"><vh>skipWs and skipWsAndNl</vh></v>
<v t="ekr.20031218072017.2508"><vh>stringToList</vh></v>
<v t="ekr.20031218072017.2509"><vh>listToString</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2510"><vh>@file ../scripts/disStats.py</vh>
<v t="ekr.20031218072017.2511"><vh>go</vh></v>
<v t="ekr.20031218072017.2512"><vh>getFiles</vh></v>
<v t="ekr.20031218072017.2513"><vh>getModules</vh></v>
<v t="ekr.20031218072017.2514"><vh>any</vh></v>
<v t="ekr.20031218072017.2515"><vh>code</vh></v>
<v t="ekr.20031218072017.2516"><vh>print_stats</vh></v>
</v>
<v t="ekr.20031218072017.2517"><vh>@file ../scripts/leoFindScript.py</vh>
<v t="ekr.20031218072017.2518"><vh>changeAll</vh></v>
<v t="ekr.20031218072017.2519"><vh>changeNext</vh></v>
<v t="ekr.20031218072017.2520"><vh>changePrev</vh></v>
<v t="ekr.20031218072017.2521"><vh>findAll</vh></v>
<v t="ekr.20031218072017.2522"><vh>findNext</vh></v>
<v t="ekr.20031218072017.2523"><vh>findPrev</vh></v>
<v t="ekr.20031218072017.2524"><vh>reChangeAll</vh></v>
<v t="ekr.20031218072017.2525"><vh>reChangeNext</vh></v>
<v t="ekr.20031218072017.2526"><vh>reChangePrev</vh></v>
<v t="ekr.20031218072017.2527"><vh>reFindAll</vh></v>
<v t="ekr.20031218072017.2528"><vh>reFindNext</vh></v>
<v t="ekr.20031218072017.2529"><vh>reFindPrev</vh></v>
<v t="ekr.20031218072017.2530"><vh>lineAtPos</vh></v>
<v t="ekr.20031218072017.2531"><vh>printFindList</vh></v>
</v>
<v t="ekr.20031218072017.2532"><vh>@file ../scripts/openLeo.py</vh></v>
<v t="ekr.20031218072017.2533"><vh>@file ../scripts/tangle_done.py</vh>
<v t="ekr.20031218072017.2534"><vh>run</vh></v>
<v t="ekr.20031218072017.2535"><vh>convertRSTfilesToHTML</vh>
<v t="ekr.20031218072017.2536"><vh>&lt;&lt; Convert root to corresponding .html file &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2537"><vh>@file ../scripts/untangle_done.py</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2538"><vh> Distribution &amp; version stuff</vh>
<v t="ekr.20031218072017.2539"><vh> Distribution scripts &amp; files</vh>
<v t="ekr.20031218072017.2540"><vh>leo.nsi</vh>
<v t="ekr.20031218072017.2541"><vh>@root ../dist/leo.nsi</vh>
<v t="ekr.20031218072017.2542"><vh>&lt;&lt; installer settings &gt;&gt;</vh>
<v t="ekr.20031218072017.2543"><vh>&lt;&lt; icons used by the installer &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2544"><vh>&lt;&lt; the installation dir &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2545"><vh>&lt;&lt; the user license &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2546"><vh>&lt;&lt; Additional Installer Settings &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2547"><vh>&lt;&lt; required files section &gt;&gt;</vh>
<v t="ekr.20031218072017.2548"><vh>&lt;&lt; check to see whether Python is installed &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2549"><vh>&lt;&lt; optional files section&gt;&gt;</vh></v>
<v t="ekr.20031218072017.2550"><vh>&lt;&lt; file association &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2551"><vh>&lt;&lt; post install section &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2552"><vh>&lt;&lt; uninstall section &gt;&gt;</vh>
<v t="ekr.20031218072017.2553"><vh>&lt;&lt; remove file association &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2554"><vh>&lt;&lt; remove program folder &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2555"><vh>&lt;&lt; remove shortcuts &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.2556"><vh>@silentfile ../doc/LICENSE.TXT</vh></v>
<v t="ekr.20031218072017.2557"><vh>@silentfile ../doc/INSTALL.TXT</vh>
<v t="ekr.20031218072017.2558"><vh>System requirements</vh></v>
<v t="ekr.20031218072017.2559"><vh>Linux installation</vh></v>
<v t="ekr.20031218072017.2560"><vh>Windows installation</vh></v>
<v t="ekr.20031218072017.2561"><vh>MacOS installation</vh></v>
<v t="ekr.20031218072017.2562"><vh>Shell &amp; batch scripts</vh></v>
</v>
<v t="ekr.20031218072017.2563"><vh>@silentfile ../doc/PKG-INFO.TXT</vh></v>
<v t="ekr.20031218072017.2564"><vh>@silentfile ../doc/README.TXT</vh></v>
<v t="ekr.20031218072017.2565"><vh>@silentfile ../manifest.in</vh></v>
<v t="ekr.20031218072017.2566"><vh>setup &amp; pre/postSetup (usually @ignore'd)</vh>
<v t="ekr.20031218072017.2567" tnodeList="ekr.20031218072017.2567,ekr.20031218072017.2568,ekr.20031218072017.2569"><vh>@file ../preSetup.py</vh>
<v t="ekr.20031218072017.2568"><vh>saveAllLeoFiles</vh></v>
<v t="ekr.20031218072017.2569"><vh>tangleLeoConfigDotLeo</vh></v>
</v>
<v t="ekr.20031218072017.2570" tnodeList="ekr.20031218072017.2570,ekr.20031218072017.2572,ekr.20031218072017.2573,ekr.20031218072017.2574,ekr.20031218072017.2575,ekr.20031218072017.2571"><vh>@file ../setup.py</vh>
<v t="ekr.20031218072017.2571"><vh>&lt;&lt; setup info for setup.py &gt;&gt; UPDATE BY HAND (no spaces)</vh></v>
<v t="ekr.20031218072017.2572"><vh>printReminders</vh></v>
<v t="ekr.20031218072017.2573"><vh>generateModules</vh></v>
<v t="ekr.20031218072017.2574"><vh>replacePatterns</vh></v>
<v t="ekr.20031218072017.2575"><vh>setDefaultParams</vh></v>
</v>
<v t="ekr.20031218072017.2576" tnodeList="ekr.20031218072017.2576,ekr.20031218072017.2574,ekr.20031218072017.2577"><vh>@file ../postSetup.py</vh>
<v t="ekr.20031218072017.2574"><vh>replacePatterns</vh></v>
<v t="ekr.20031218072017.2577"><vh>unsetDefaultParams</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2578"><vh>Linux scripts</vh>
<v t="ekr.20031218072017.2579"><vh>@silentfile ../install</vh></v>
<v t="ekr.20031218072017.2580" tnodeList="ekr.20031218072017.2580"><vh>@silentfile ../uninstall</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2581"><vh> Version stuff (update this for every release)</vh>
<v t="ekr.20031218072017.2582"><vh> version &amp; signon stuff</vh></v>
<v t="ekr.20031218072017.2571"><vh>&lt;&lt; setup info for setup.py &gt;&gt; UPDATE BY HAND (no spaces)</vh></v>
<v t="ekr.20031218072017.2563"><vh>@silentfile ../doc/PKG-INFO.TXT</vh></v>
<v t="ekr.20031218072017.2564"><vh>@silentfile ../doc/README.TXT</vh></v>
<v t="ekr.20031218072017.2583"><vh>Previous readme files</vh>
<v t="ekr.20031218072017.2584"><vh>4.0</vh></v>
<v t="ekr.20031218072017.2585"><vh>3.x</vh>
<v t="ekr.20031218072017.2586"><vh>3.12</vh></v>
<v t="ekr.20031218072017.2587"><vh>3.11</vh></v>
<v t="ekr.20031218072017.2588"><vh>3.10</vh></v>
<v t="ekr.20031218072017.2589"><vh>3.9</vh></v>
<v t="ekr.20031218072017.2590"><vh>3.8</vh></v>
<v t="ekr.20031218072017.2591"><vh>3.7</vh></v>
<v t="ekr.20031218072017.2592"><vh>3.6</vh></v>
<v t="ekr.20031218072017.2593"><vh>3.5</vh></v>
<v t="ekr.20031218072017.2594"><vh>3.4</vh></v>
<v t="ekr.20031218072017.2595"><vh>3.3</vh></v>
<v t="ekr.20031218072017.2596"><vh>3.2</vh></v>
<v t="ekr.20031218072017.2597"><vh>3.1</vh></v>
<v t="ekr.20031218072017.2598"><vh>3.0</vh></v>
</v>
<v t="ekr.20031218072017.2599"><vh>2.x</vh>
<v t="ekr.20031218072017.2600"><vh>2.5</vh></v>
<v t="ekr.20031218072017.2601"><vh>2.4</vh></v>
<v t="ekr.20031218072017.2602"><vh>2.3</vh></v>
<v t="ekr.20031218072017.2603"><vh>2.2</vh></v>
</v>
</v>
</v>
</v>
<v t="ekr.20031218072017.2604"><vh>Core classes...</vh>
<v t="ekr.20031218072017.2605" tnodeList="ekr.20031218072017.2605,ekr.20031218072017.2606,ekr.20031218072017.1934,ekr.20031218072017.1935,ekr.20031218072017.1936,ekr.20031218072017.1937,ekr.20031218072017.1624,ekr.20031218072017.1938,ekr.20031218072017.1939,ekr.20031218072017.2607"><vh>@file leo.py </vh>
<v t="ekr.20031218072017.2606"><vh>&lt;&lt; Import pychecker &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1934"><vh>run &amp; allies</vh>
<v t="ekr.20031218072017.1935"><vh>&lt;&lt; print encoding info &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1936"><vh>isValidPython</vh></v>
<v t="ekr.20031218072017.1937"><vh>computeLoadDir</vh></v>
<v t="ekr.20031218072017.1624"><vh>createFrame (leo.py)</vh></v>
<v t="ekr.20031218072017.1938"><vh>createNullGuiWithScript (leo.py)</vh></v>
<v t="ekr.20031218072017.1939"><vh>getBatchScript</vh></v>
</v>
<v t="ekr.20031218072017.2607"><vh>profile</vh></v>
</v>
<v t="ekr.20031218072017.2608" tnodeList="ekr.20031218072017.2608,ekr.20031218072017.1416,ekr.20031218072017.1417,ekr.20031218072017.368,ekr.20031218072017.2609,ekr.20031218072017.2610,ekr.20031218072017.2611,ekr.20031218072017.2612,ekr.20031218072017.2613,ekr.20031218072017.2614,ekr.20031218072017.2615,ekr.20031218072017.1732,ekr.20031218072017.2616,ekr.20031218072017.2617,ekr.20031218072017.2618,ekr.20031218072017.1978,ekr.20031218072017.1979,ekr.20031218072017.1980,ekr.20031218072017.1981,ekr.20031218072017.1982,ekr.20031218072017.1847,ekr.20031218072017.2619"><vh>@file leoApp.py</vh>
<v t="ekr.20031218072017.1416"><vh>app.__init__</vh>
<v t="ekr.20031218072017.1417"><vh>&lt;&lt; define global constants &gt;&gt;</vh></v>
<v t="ekr.20031218072017.368"><vh>&lt;&lt; define global data structures &gt;&gt; app</vh></v>
</v>
<v t="ekr.20031218072017.2609"><vh>app.closeLeoWindow</vh></v>
<v t="ekr.20031218072017.2610"><vh>app.createTkGui</vh></v>
<v t="ekr.20031218072017.2611"><vh>app.destroyAllGlobalWindows</vh></v>
<v t="ekr.20031218072017.2612"><vh>app.destroyAllOpenWithFiles</vh></v>
<v t="ekr.20031218072017.2613"><vh>app.destroyOpenWithFilesForFrame</vh></v>
<v t="ekr.20031218072017.2614"><vh>app.destroyOpenWithFileWithDict</vh></v>
<v t="ekr.20031218072017.2615"><vh>app.destroyWindow</vh></v>
<v t="ekr.20031218072017.1732"><vh>app.finishQuit</vh></v>
<v t="ekr.20031218072017.2616"><vh>app.forceShutdown</vh></v>
<v t="ekr.20031218072017.2617"><vh>app.onQuit</vh></v>
<v t="ekr.20031218072017.2618"><vh>app.setEncoding</vh></v>
<v t="ekr.20031218072017.1978"><vh>app.setLeoID</vh>
<v t="ekr.20031218072017.1979"><vh>&lt;&lt; return if we can set self.leoID from sys.leoID&gt;&gt;</vh></v>
<v t="ekr.20031218072017.1980"><vh>&lt;&lt; return if we can set self.leoID from "leoID.txt" &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1981"><vh>&lt;&lt; put up a dialog requiring a valid id &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1982"><vh>&lt;&lt; attempt to create leoID.txt &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1847"><vh>app.setLog, lockLog, unlocklog</vh></v>
<v t="ekr.20031218072017.2619"><vh>app.writeWaitingLog</vh></v>
</v>
<v t="ekr.20031218072017.2794" tnodeList="ekr.20031218072017.2794,ekr.20031218072017.1595,ekr.20031218072017.2795,ekr.20031218072017.2796,ekr.20031218072017.371,ekr.20031218072017.372,ekr.20031218072017.373,ekr.20040206072057,ekr.20031218072017.374,ekr.20031218072017.375,ekr.20031218072017.376,ekr.20031218072017.377,ekr.20031218072017.378,ekr.20031218072017.379,ekr.20031218072017.381,ekr.20031218072017.383,ekr.20031218072017.380,ekr.20031218072017.382,ekr.20031218072017.1605,ekr.20031218072017.1606,ekr.20031218072017.1607,ekr.20031218072017.1608,ekr.20031218072017.2801,ekr.20031218072017.1880,ekr.20031218072017.1602,ekr.20031218072017.1603,ekr.20031218072017.370,ekr.20031218072017.1881,ekr.20031218072017.1882,ekr.20031218072017.1883,ekr.20031218072017.1884,ekr.20031218072017.1885,ekr.20031218072017.1886,ekr.20031218072017.1887,ekr.20031218072017.1890,ekr.20031218072017.1891,ekr.20031218072017.1888,ekr.20031218072017.1889,ekr.20031218072017.1892,ekr.20031218072017.1618,ekr.20031218072017.1893,ekr.20031218072017.1614,ekr.20031218072017.1615,ekr.20031218072017.1616,ekr.20031218072017.1894,ekr.20031218072017.1613,ekr.20031218072017.1620,ekr.20031218072017.1895,ekr.20031218072017.1896,ekr.20031218072017.1898,ekr.20031218072017.1899,ekr.20031218072017.1900,ekr.20031218072017.1901,ekr.20031218072017.1902,ekr.20031218072017.1904,ekr.20031218072017.1903,ekr.20031218072017.1617,ekr.20031218072017.1619,ekr.20031218072017.1905,ekr.20031218072017.1907,ekr.20031218072017.1612,ekr.20031218072017.1909,ekr.20031218072017.1910,ekr.20031218072017.1911,ekr.20031218072017.1912,ekr.20031218072017.1913,ekr.20031218072017.1914,ekr.20031218072017.1915,ekr.20031218072017.1604,ekr.20031218072017.1377,ekr.20031218072017.1378,ekr.20031218072017.1379,ekr.20031218072017.2802,ekr.20031218072017.2803,ekr.20031218072017.1944,ekr.20031218072017.2804,ekr.20031218072017.2805,ekr.20031218072017.2806,ekr.20031218072017.1609,ekr.20031218072017.2807,ekr.20031218072017.2808,ekr.20031218072017.1610,ekr.20031218072017.2809,ekr.20031218072017.2218,ekr.20031218072017.2219,ekr.20031218072017.2220"><vh>@file leoColor.py</vh>
<v t="ekr.20031218072017.1595"><vh>&lt;&lt; define leo keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2795"><vh>&lt;&lt; define colorizer constants &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2796"><vh>class colorizer</vh>
<v t="ekr.20031218072017.371"><vh>&lt;&lt; define colorizer keywords &gt;&gt; colorizer</vh>
<v t="ekr.20031218072017.372"><vh>&lt;&lt; actionscript keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.373"><vh>&lt;&lt; c keywords &gt;&gt;</vh></v>
<v t="ekr.20040206072057"><vh>&lt;&lt; csharp keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.374"><vh>&lt;&lt; elisp keywords&gt;&gt;</vh></v>
<v t="ekr.20031218072017.375"><vh>&lt;&lt; html keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.376"><vh>&lt;&lt; java keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.377"><vh>&lt;&lt; latex keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.378"><vh>&lt;&lt; pascal keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.379"><vh>&lt;&lt; perl keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.380"><vh>&lt;&lt; php keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.381"><vh>&lt;&lt; python keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.382"><vh>&lt;&lt; rebol keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.383"><vh>&lt;&lt; tcl/tk keywords &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1605"><vh>color.__init__</vh>
<v t="ekr.20031218072017.1606"><vh>&lt;&lt; ivars for communication between colorAllDirectives and its allies &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1607"><vh>&lt;&lt; define dispatch dicts &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1608"><vh>&lt;&lt; define fonts and data for wiki tags &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2801"><vh>colorize &amp; recolor_range</vh></v>
<v t="ekr.20031218072017.1880"><vh>colorizeAnyLanguage &amp; allies</vh>
<v t="ekr.20031218072017.1602"><vh>&lt;&lt; initialize ivars &amp; tags &gt;&gt; colorizeAnyLanguage</vh>
<v t="ekr.20031218072017.1603"><vh>&lt;&lt; configure tags &gt;&gt;</vh></v>
<v t="ekr.20031218072017.370"><vh>&lt;&lt; configure language-specific settings &gt;&gt; colorizer</vh></v>
</v>
<v t="ekr.20031218072017.1881"><vh>&lt;&lt; all state ivars match &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1882"><vh>&lt;&lt; incrementally color the text &gt;&gt;</vh>
<v t="ekr.20031218072017.1883"><vh>&lt;&lt; compute leading, middle &amp; trailing  lines &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1884"><vh>&lt;&lt; clear leading_lines if middle lines involve @color or @recolor  &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1885"><vh>&lt;&lt; initialize new states &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1886"><vh>&lt;&lt; colorize until the states match &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1887"><vh>&lt;&lt; non-incrementally color the text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1888"><vh>&lt;&lt; update state ivars &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1889"><vh>&lt;&lt; set state ivars to "unknown" &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1890"><vh>&lt;&lt; completely recolor in two passes &gt;&gt;</vh>
<v t="ekr.20031218072017.1891"><vh>&lt;&lt; kludge: insert a blank in s for every image in the line &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1892"><vh>colorizeLine &amp; allies</vh>
<v t="ekr.20031218072017.1618"><vh>continueBlockComment</vh></v>
<v t="ekr.20031218072017.1893"><vh>continueSingle/DoubleString</vh></v>
<v t="ekr.20031218072017.1614"><vh>continueDocPart</vh>
<v t="ekr.20031218072017.1615"><vh>&lt;&lt; handle cweb doc part &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1616"><vh>&lt;&lt; handle noweb doc part &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1894"><vh>continueNocolor</vh></v>
<v t="ekr.20031218072017.1613"><vh>continueSingle/DoublePythonString</vh></v>
<v t="ekr.20031218072017.1620"><vh>doAtKeyword: NOT for cweb keywords</vh></v>
<v t="ekr.20031218072017.1895"><vh>doLatexLine</vh></v>
<v t="ekr.20031218072017.1896"><vh>doNormalState</vh>
<v t="ekr.20031218072017.1897"><vh>Valid regardless of latex mode</vh>
<v t="ekr.20031218072017.1898"><vh>&lt;&lt; handle possible  keyword &gt;&gt;</vh>
<v t="ekr.20031218072017.1899"><vh>&lt;&lt; handle possible latex keyword &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1900"><vh>&lt;&lt; handle possible html keyword &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1901"><vh>&lt;&lt; handle general keyword &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1902"><vh>&lt;&lt; handle at keyword &gt;&gt;</vh>
<v t="ekr.20031218072017.1903"><vh>&lt;&lt; Handle cweb control word &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1904"><vh>&lt;&lt; handle cweb ref or def &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1617"><vh>&lt;&lt; handle single-line comment &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1619"><vh>&lt;&lt; start block comment &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1905"><vh>&lt;&lt; handle latex line &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1906"><vh>Vaid only in latex mode</vh>
<v t="ekr.20031218072017.1907"><vh>&lt;&lt; handle latex normal character &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1908"><vh>Valid when not in latex_mode</vh>
<v t="ekr.20031218072017.1612"><vh>&lt;&lt; handle string &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1909"><vh>&lt;&lt; handle C preprocessor line &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1910"><vh>&lt;&lt; handle special php keywords &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1911"><vh>&lt;&lt; handle blank &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1912"><vh>&lt;&lt; handle tab &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1913"><vh>&lt;&lt; handle normal character &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1914"><vh>doNowebSecRef</vh>
<v t="ekr.20031218072017.1915"><vh>&lt;&lt; set the hyperlink &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1604"><vh>removeAllTags &amp; removeTagsFromLines</vh></v>
</v>
<v t="ekr.20031218072017.1377" a="M"><vh>scanColorDirectives</vh>
<v t="ekr.20031218072017.1378"><vh>&lt;&lt; Test for @comment or @language &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1379"><vh>&lt;&lt; Test for @root, @root-doc or @root-code &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2802"><vh>color.schedule &amp; idle_colorize (not used)</vh></v>
<v t="ekr.20031218072017.2803"><vh>getCwebWord</vh></v>
<v t="ekr.20031218072017.1944"><vh>removeAllImages</vh></v>
<v t="ekr.20031218072017.2804"><vh>updateSyntaxColorer</vh></v>
<v t="ekr.20031218072017.2805" a="M"><vh>useSyntaxColoring</vh></v>
<v t="ekr.20031218072017.2806"><vh>Utils</vh>
<v t="ekr.20031218072017.1609"><vh>index &amp; tag</vh></v>
<v t="ekr.20031218072017.2807"><vh>setFirstLineState</vh></v>
<v t="ekr.20031218072017.2808"><vh>skip_id</vh></v>
<v t="ekr.20031218072017.1610"><vh>skip_python_string</vh></v>
<v t="ekr.20031218072017.2809"><vh>skip_string</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2218"><vh>class nullColorizer</vh>
<v t="ekr.20031218072017.2219"><vh>__init__</vh></v>
<v t="ekr.20031218072017.2220"><vh>entry points</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3001" tnodeList="ekr.20031218072017.3001,ekr.20031218072017.2404,ekr.20031218072017.3002,ekr.20031218072017.3003,ekr.20031218072017.3004,ekr.20031218072017.1932,ekr.20031218072017.3006,ekr.20031218072017.3007,ekr.20031218072017.3008,ekr.20031218072017.3009,ekr.20031218072017.3010,ekr.20031218072017.3011,ekr.20031218072017.2174,ekr.20031218072017.1722,ekr.20031218072017.3012,ekr.20031218072017.3013,ekr.20031218072017.3014,ekr.20031218072017.3015,ekr.20031218072017.3016,ekr.20031218072017.3017,ekr.20031218072017.1929,ekr.20031218072017.1421,ekr.20031218072017.1930,ekr.20040208104150,ekr.20031218072017.1422,ekr.20031218072017.1931,ekr.20031218072017.1145,ekr.20031218072017.1146,ekr.20031218072017.1420"><vh>@file leoConfig.py</vh>
<v t="ekr.20031218072017.2404"><vh>&lt;&lt; define defaultsDict &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3002"><vh>config.__init__</vh>
<v t="ekr.20031218072017.3003"><vh>&lt;&lt; initialize constant ivars, lists &amp; dicts &gt;&gt; (leoConfig)</vh></v>
<v t="ekr.20031218072017.3004"><vh>&lt;&lt; initialize ivars that may be set by config options &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3005"><vh>getters/setters</vh>
<v t="ekr.20031218072017.1932"><vh>get...FromDict &amp; setDict</vh></v>
<v t="ekr.20031218072017.3006"><vh>get/setColors</vh></v>
<v t="ekr.20031218072017.3007"><vh>get/setComparePref</vh></v>
<v t="ekr.20031218072017.3008"><vh>get/setFindPref</vh></v>
<v t="ekr.20031218072017.3009"><vh>get/setPref</vh></v>
<v t="ekr.20031218072017.3010"><vh>get/setRecentFiles</vh></v>
<v t="ekr.20031218072017.3011"><vh>get/setWindowPrefs</vh></v>
<v t="ekr.20031218072017.2174"><vh>config.getFontFromParams</vh></v>
<v t="ekr.20031218072017.1722"><vh>getShortcut (config)</vh></v>
<v t="ekr.20031218072017.3012"><vh>init/Boolean/ConfigParam</vh></v>
<v t="ekr.20031218072017.3013"><vh>setCommandsFindIvars</vh></v>
<v t="ekr.20031218072017.3014"><vh>setCommandsIvars</vh>
<v t="ekr.20031218072017.3015"><vh>&lt;&lt; set prefs ivars &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3016"><vh>setConfigFindIvars</vh></v>
<v t="ekr.20031218072017.3017"><vh>c.setConfigIvars</vh></v>
</v>
<v t="ekr.20031218072017.1929"><vh>open</vh>
<v t="ekr.20031218072017.1421"><vh>&lt;&lt; get config options &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1930"><vh>&lt;&lt; get recent files &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1422"><vh>&lt;&lt; convert find/change options to unicode &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1931"><vh>&lt;&lt; print options &gt;&gt;</vh></v>
<v t="ekr.20040208104150"><vh>&lt;&lt; create rawKeysDict without ampersands &gt;&gt; (config)</vh></v>
</v>
<v t="ekr.20031218072017.1145"><vh>update (config)</vh>
<v t="ekr.20031218072017.1146"><vh>&lt;&lt; write recent files section &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1420"><vh>update_section</vh></v>
</v>
<v t="ekr.20031218072017.3052" tnodeList="ekr.20031218072017.3052,ekr.20031218072017.2414,ekr.20031218072017.3053,ekr.20031218072017.3054,ekr.20031218072017.3056,ekr.20031218072017.3057,ekr.20031218072017.3058,ekr.20031218072017.3059,ekr.20031218072017.3060,ekr.20031218072017.3061,ekr.20031218072017.3062,ekr.20031218072017.3063,ekr.20031218072017.3064,ekr.20031218072017.3065,ekr.20031218072017.3066,ekr.20031218072017.2293,ekr.20031218072017.2294,ekr.20031218072017.2295,ekr.20031218072017.3068,ekr.20031218072017.3069,ekr.20031218072017.3070,ekr.20031218072017.3071,ekr.20031218072017.2417,ekr.20031218072017.3072,ekr.20031218072017.3073,ekr.20031218072017.3074,ekr.20031218072017.3075,ekr.20031218072017.3076,ekr.20031218072017.3077,ekr.20031218072017.3078,ekr.20031218072017.3079,ekr.20031218072017.3080,ekr.20031218072017.3081,ekr.20031218072017.3083,ekr.20031218072017.3084,ekr.20031218072017.3085,ekr.20031218072017.3086,ekr.20031218072017.3087,ekr.20031218072017.3088,ekr.20031218072017.3089,ekr.20031218072017.3090,ekr.20031218072017.3091,ekr.20031218072017.3092"><vh>@file leoFind.py</vh>
<v t="ekr.20031218072017.2414"><vh>&lt;&lt; Theory of operation of find/change &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3053"><vh>leoFind.__init__</vh>
<v t="ekr.20031218072017.3054"><vh>&lt;&lt; init the gui-independent ivars &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3055"><vh>Top Level Commands</vh>
<v t="ekr.20031218072017.3056"><vh>changeButton</vh></v>
<v t="ekr.20031218072017.3057"><vh>changeAllButton</vh></v>
<v t="ekr.20031218072017.3058"><vh>changeThenFindButton</vh></v>
<v t="ekr.20031218072017.3059"><vh>findButton</vh></v>
<v t="ekr.20031218072017.3060"><vh>findAllButton</vh></v>
<v t="ekr.20031218072017.3061"><vh>changeCommand</vh></v>
<v t="ekr.20031218072017.3062"><vh>changeThenFindCommandd</vh></v>
<v t="ekr.20031218072017.3063"><vh>findNextCommand</vh></v>
<v t="ekr.20031218072017.3064"><vh>fndPreviousCommand</vh></v>
<v t="ekr.20031218072017.3065"><vh>setup_button</vh></v>
<v t="ekr.20031218072017.3066"><vh>setup_command</vh></v>
</v>
<v t="ekr.20031218072017.3067"><vh>Find/change utils</vh>
<v t="ekr.20031218072017.2293"><vh>batchChange</vh>
<v t="ekr.20031218072017.2294"><vh>&lt;&lt; set the undo head params &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2295"><vh>&lt;&lt; set the undo body typing params &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3068"><vh>change</vh></v>
<v t="ekr.20031218072017.3069"><vh>changeAll</vh></v>
<v t="ekr.20031218072017.3070"><vh>changeSelection</vh></v>
<v t="ekr.20031218072017.3071"><vh>changeThenFind</vh></v>
<v t="ekr.20031218072017.2417"><vh>doChange...Script</vh></v>
<v t="ekr.20031218072017.3072"><vh>doFind...Script</vh></v>
<v t="ekr.20031218072017.3073"><vh>findAll</vh></v>
<v t="ekr.20031218072017.3074"><vh>findNext</vh></v>
<v t="ekr.20031218072017.3075"><vh>findNextMatch</vh></v>
<v t="ekr.20031218072017.3076"><vh>resetWrap</vh></v>
<v t="ekr.20031218072017.3077"><vh>search</vh>
<v t="ekr.20031218072017.3078"><vh>&lt;&lt; search again after getting stuck going backward &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3079"><vh>&lt;&lt; return if we are passed the wrap point &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3080"><vh>&lt;&lt; continue if not whole word match &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3081"><vh>selectNextVnode</vh></v>
</v>
<v t="ekr.20031218072017.3082"><vh>Initing &amp; finalizing</vh>
<v t="ekr.20031218072017.3083"><vh>checkArgs</vh></v>
<v t="ekr.20031218072017.3084"><vh>initBatchCommands</vh></v>
<v t="ekr.20031218072017.3085"><vh>initBatchText &amp; initNextText</vh></v>
<v t="ekr.20031218072017.3086"><vh>initInHeadline</vh></v>
<v t="ekr.20031218072017.3087"><vh>initInteractiveCommands</vh></v>
<v t="ekr.20031218072017.3088"><vh>printLine</vh></v>
<v t="ekr.20031218072017.3089"><vh>restore</vh></v>
<v t="ekr.20031218072017.3090"><vh>save</vh></v>
<v t="ekr.20031218072017.3091"><vh>showSuccess</vh></v>
</v>
<v t="ekr.20031218072017.3092"><vh>Must be overridden in subclasses</vh></v>
</v>
<v t="ekr.20031218072017.3093" tnodeList="ekr.20031218072017.3093,ekr.20031218072017.3094,ekr.20031218072017.822,ekr.20031218072017.3097,ekr.20031218072017.3098,ekr.20031219074948.1,ekr.20031218072017.1382,ekr.20031218072017.1383,ekr.20031218072017.1384,ekr.20031218072017.1385,ekr.20031218072017.1260,ekr.20031218072017.1261,ekr.20031218072017.1262,ekr.20031218072017.1386,ekr.20031218072017.1387,ekr.20031218072017.1388,ekr.20031218072017.1389,ekr.20031218072017.1390,ekr.20031218072017.1391,ekr.20031218072017.1392,ekr.20031218072017.1393,ekr.20031218072017.1394,ekr.20031218072017.1395,ekr.20031218072017.1396,ekr.20031218072017.1397,ekr.20031218072017.1398,ekr.20031218072017.1399,ekr.20031218072017.1400,ekr.20031218072017.2052,ekr.20031218072017.3100,ekr.20031218072017.3101,ekr.20031218072017.3102,ekr.20031218072017.3103,ekr.20031218072017.3105,ekr.20031218072017.3106,ekr.20031218072017.3107,ekr.20031218072017.3109,ekr.20031218072017.3110,ekr.20031218072017.3111,ekr.20031218072017.3112,ekr.20031218072017.3113,ekr.20031218072017.3114,ekr.20031218072017.3115,ekr.20031218072017.1317,ekr.20031218072017.3117,ekr.20031218072017.3118,ekr.20031218072017.1264,ekr.20031218072017.3119,ekr.20031218072017.3120,ekr.20031218072017.3124,ekr.20031218072017.3125,ekr.20031218072017.1241,ekr.20031218072017.1263,ekr.20031218072017.3121,ekr.20031218072017.1656,ekr.20031218072017.3122,ekr.20031218072017.3123,ekr.20031218072017.3127,ekr.20031218072017.3128,ekr.20031218072017.3129,ekr.20031218072017.3130,ekr.20031218072017.3131,ekr.20031218072017.3132,ekr.20031218072017.2317,ekr.20031218072017.2318,ekr.20031218072017.3134,ekr.20031218072017.3135,ekr.20031218072017.3136,ekr.20031218072017.3137,ekr.20031218072017.3126,ekr.20031218072017.3138,ekr.20031218072017.1588,ekr.20031218072017.1589,ekr.20031218072017.1590,ekr.20031218072017.1591,ekr.20031218072017.1592,ekr.20031218072017.1593,ekr.20031218072017.1315,ekr.20031218072017.1596,ekr.20031218072017.1318,ekr.20031218072017.2278,ekr.20031218072017.3141,ekr.20031218072017.3142,ekr.20031218072017.3143,ekr.20031218072017.3144,ekr.20031218072017.3145,ekr.20031218072017.3146,ekr.20031218072017.3147,ekr.20031218072017.1474,ekr.20031218072017.3148,ekr.20031218072017.3150,ekr.20031218072017.2146,ekr.20031218072017.2147,ekr.20031218072017.2148,ekr.20031218072017.2149,ekr.20031218072017.2150,ekr.20031218072017.2151,ekr.20031218072017.2152,ekr.20031218072017.2153,ekr.20031218072017.2154,ekr.20031218072017.2155,ekr.20031218072017.2156,ekr.20031218072017.2157,ekr.20031218072017.2158,ekr.20031218072017.2159,ekr.20031218072017.2160,ekr.20031218072017.3152,ekr.20031218072017.3153,ekr.20031218072017.3154,ekr.20031218072017.3155,ekr.20031218072017.3156,ekr.20031218072017.3157,ekr.20031218072017.3158,ekr.20031218072017.3159,ekr.20031218072017.3160,ekr.20031218072017.3161,ekr.20031218072017.3162,ekr.20031218072017.3163,ekr.20031218072017.3164,ekr.20031218072017.3165,ekr.20031218072017.3166,ekr.20031218072017.3167,ekr.20031218072017.3168,ekr.20031218072017.3169,ekr.20031218072017.3170,ekr.20031218072017.2369,ekr.20031218072017.3171,ekr.20031218072017.3172,ekr.20031218072017.3174,ekr.20031218072017.3175,ekr.20031218072017.3176,ekr.20031218072017.3177,ekr.20031218072017.3178,ekr.20031218072017.3179,ekr.20031218072017.3180,ekr.20031218072017.3181,ekr.20031218072017.3182,ekr.20031218072017.3183,ekr.20031218072017.3184,ekr.20031218072017.3185,ekr.20031218072017.3186,ekr.20031218072017.3187,ekr.20031218072017.3188,ekr.20031218072017.3189,ekr.20031218072017.3190,ekr.20031218072017.3191,ekr.20031218072017.3192,ekr.20031218072017.3193,ekr.20031218072017.3194,ekr.20031218072017.3195,ekr.20031218072017.2418,ekr.20031218072017.1499,ekr.20031218072017.1500,ekr.20031218072017.1501,ekr.20031218072017.1502,ekr.20031218072017.1503,ekr.20031218072017.1504,ekr.20031218072017.1505,ekr.20031218072017.3198,ekr.20031218072017.3199,ekr.20031218072017.3200,ekr.20031218072017.3201,ekr.20031218072017.3202,ekr.20031218072017.3203,ekr.20031218072017.3204,ekr.20031218072017.3205"><vh>@file leoGlobals.py</vh>
<v t="ekr.20031218072017.3094"><vh>&lt;&lt; define general constants &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3095"><vh>Checking Leo Files...</vh>
<v t="ekr.20031218072017.822"><vh>createTopologyList</vh></v>
</v>
<v t="ekr.20031218072017.3097"><vh>CheckVersion (Dave Hein)</vh></v>
<v t="ekr.20031218072017.3098"><vh>class Bunch</vh></v>
<v t="ekr.20031219074948.1"><vh>class nullObject</vh></v>
<v t="ekr.20031218072017.3099"><vh>Commands &amp; Directives</vh>
<v t="ekr.20031218072017.1380"><vh>Directive utils...</vh>
<v t="ekr.20031218072017.1381"><vh>@language and @comment directives (leoUtils)</vh>
<v t="ekr.20031218072017.1382"><vh>set_delims_from_language</vh></v>
<v t="ekr.20031218072017.1383"><vh>set_delims_from_string</vh></v>
<v t="ekr.20031218072017.1384"><vh>set_language</vh></v>
</v>
<v t="ekr.20031218072017.1385"><vh>findReference</vh></v>
<v t="ekr.20031218072017.1260"><vh>get_directives_dict &amp; globalDirectiveList</vh>
<v t="ekr.20031218072017.1261"><vh>&lt;&lt; set dict for @ directives &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1262"><vh>&lt;&lt; set dict["root"] for noweb * chunks &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1386"><vh>getOutputNewline</vh></v>
<v t="ekr.20031218072017.1387"><vh>scanAtEncodingDirective</vh></v>
<v t="ekr.20031218072017.1388"><vh>scanAtLineendingDirective</vh></v>
<v t="ekr.20031218072017.1389"><vh>scanAtPagewidthDirective</vh></v>
<v t="ekr.20031218072017.1390"><vh>scanAtTabwidthDirective</vh></v>
<v t="ekr.20031218072017.1391"><vh>scanDirectives (utils)</vh>
<v t="ekr.20031218072017.1392"><vh>&lt;&lt; Set local vars &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1393"><vh>&lt;&lt; Test for @comment and @language &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1394"><vh>&lt;&lt; Test for @encoding &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1395"><vh>&lt;&lt; Test for @lineending &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1396"><vh>&lt;&lt; Test for @pagewidth &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1397"><vh>&lt;&lt; Test for @path &gt;&gt;</vh>
<v t="ekr.20031218072017.1398"><vh>&lt;&lt; compute relative path from s[k:] &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1399"><vh>&lt;&lt; Test for @tabwidth &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1400"><vh>&lt;&lt; Test for @wrap and @nowrap &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2052"><vh>openWithFileName</vh></v>
<v t="ekr.20031218072017.3100"><vh>wrap_lines</vh>
<v t="ekr.20031218072017.3101"><vh>&lt;&lt; place blank and word on the present line &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3102"><vh>&lt;&lt; place word on a new line &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3103"><vh>computeWindowTitle</vh></v>
<v t="ekr.20031218072017.3104" a="E"><vh>Debugging, Dumping, Timing, Tracing &amp; Sherlock</vh>
<v t="ekr.20031218072017.3105"><vh>alert</vh></v>
<v t="ekr.20031218072017.3106"><vh>angleBrackets &amp; virtual_event_name</vh></v>
<v t="ekr.20031218072017.3107"><vh>callerName</vh></v>
<v t="ekr.20031218072017.3108"><vh>Dumps</vh>
<v t="ekr.20031218072017.3109"><vh>dump</vh></v>
<v t="ekr.20031218072017.3110"><vh>es_error</vh></v>
<v t="ekr.20031218072017.3111"><vh>es_event_exception</vh></v>
<v t="ekr.20031218072017.3112"><vh>es_exception</vh></v>
<v t="ekr.20031218072017.3113"><vh>printBindings</vh></v>
<v t="ekr.20031218072017.3114"><vh>printGlobals</vh></v>
<v t="ekr.20031218072017.3115"><vh>printLeoModules</vh></v>
</v>
<v t="ekr.20031218072017.1317"><vh>file/module/plugin_date</vh></v>
<v t="ekr.20031218072017.3116"><vh>Files &amp; Directories...</vh>
<v t="ekr.20031218072017.3117"><vh>create_temp_name</vh></v>
<v t="ekr.20031218072017.3118"><vh>ensure_extension</vh></v>
<v t="ekr.20031218072017.1264"><vh>getBaseDirectory</vh></v>
<v t="ekr.20031218072017.3119"><vh>makeAllNonExistentDirectories</vh></v>
<v t="ekr.20031218072017.3120"><vh>readlineForceUnixNewline (Steven P. Schaefer)</vh></v>
<v t="ekr.20031218072017.3124"><vh>sanitize_filename</vh></v>
<v t="ekr.20031218072017.3125"><vh>shortFileName</vh></v>
<v t="ekr.20031218072017.1241"><vh>update_file_if_changed</vh></v>
<v t="ekr.20031218072017.1263"><vh>utils_rename</vh></v>
</v>
<v t="ekr.20031218072017.3121"><vh>redirecting stderr and stdout</vh>
<v t="ekr.20031218072017.1656"><vh>&lt;&lt; redirectClass methods &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3122"><vh>&lt;&lt; define convenience methods for redirecting streams &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3123"><vh>&lt;&lt; test code &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3127"><vh>get_line &amp; get_line_after</vh></v>
<v t="ekr.20031218072017.3128"><vh>pause</vh></v>
<v t="ekr.20031218072017.3129"><vh>Sherlock... (trace)</vh>
<v t="ekr.20031218072017.3130"><vh>init_sherlock</vh></v>
<v t="ekr.20031218072017.3131"><vh>get_Sherlock_args</vh></v>
<v t="ekr.20031218072017.3132"><vh>init_trace</vh></v>
<v t="ekr.20031218072017.2317"><vh>trace</vh></v>
<v t="ekr.20031218072017.2318"><vh>trace_tag</vh></v>
</v>
<v t="ekr.20031218072017.3133"><vh>Statistics</vh>
<v t="ekr.20031218072017.3134"><vh>clear_stats</vh></v>
<v t="ekr.20031218072017.3135"><vh>print_stats</vh></v>
<v t="ekr.20031218072017.3136"><vh>stat</vh></v>
</v>
<v t="ekr.20031218072017.3137"><vh>Timing</vh></v>
</v>
<v t="ekr.20031218072017.3126"><vh>funcToMethod</vh></v>
<v t="ekr.20031218072017.3138"><vh>executeScript</vh></v>
<v t="ekr.20031218072017.1588"><vh>Garbage Collection</vh>
<v t="ekr.20031218072017.1589"><vh>clearAllIvars</vh></v>
<v t="ekr.20031218072017.1590"><vh>collectGarbage</vh>
<v t="ekr.20031218072017.1591"><vh>&lt;&lt; make a list of the new objects &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1592"><vh>printGc</vh></v>
<v t="ekr.20031218072017.1593"><vh>printGcRefs</vh></v>
</v>
<v t="ekr.20031218072017.3139"><vh>Hooks &amp; plugins</vh>
<v t="ekr.20031218072017.1315"><vh>enableIdleTimeHook, disableIdleTimeHook, idleTimeHookHandler</vh></v>
<v t="ekr.20031218072017.1596"><vh>frame.doHook</vh></v>
<v t="ekr.20031218072017.1318"><vh>plugin_signon</vh></v>
</v>
<v t="ekr.20031218072017.2278"><vh>importFromPath</vh></v>
<v t="ekr.20031218072017.3140"><vh>Lists...</vh>
<v t="ekr.20031218072017.3141"><vh>appendToList</vh></v>
<v t="ekr.20031218072017.3142"><vh>flattenList</vh></v>
<v t="ekr.20031218072017.3143"><vh>listToString</vh></v>
</v>
<v t="ekr.20031218072017.3144"><vh>makeDict</vh></v>
<v t="ekr.20031218072017.3145"><vh>Most common functions...</vh>
<v t="ekr.20031218072017.3146"><vh>app &amp; leoProxy (no longer used)</vh></v>
<v t="ekr.20031218072017.3147"><vh>choose</vh></v>
<v t="ekr.20031218072017.1474"><vh>es, enl, ecnl</vh></v>
<v t="ekr.20031218072017.3148"><vh>top</vh></v>
<v t="ekr.20031218072017.3149"><vh>trace is defined below</vh></v>
<v t="ekr.20031218072017.3150"><vh>windows</vh></v>
</v>
<v t="ekr.20031218072017.2145"><vh>os.path wrappers (leoGlobals.py)</vh>
<v t="ekr.20031218072017.2146"><vh>os_path_abspath</vh></v>
<v t="ekr.20031218072017.2147"><vh>os_path_basename</vh></v>
<v t="ekr.20031218072017.2148"><vh>os_path_dirname</vh></v>
<v t="ekr.20031218072017.2149"><vh>os_path_exists</vh></v>
<v t="ekr.20031218072017.2150"><vh>os_path_getmtime</vh></v>
<v t="ekr.20031218072017.2151"><vh>os_path_isabs</vh></v>
<v t="ekr.20031218072017.2152"><vh>os_path_isdir (not used)</vh></v>
<v t="ekr.20031218072017.2153"><vh>os_path_isfile</vh></v>
<v t="ekr.20031218072017.2154"><vh>os_path_join</vh></v>
<v t="ekr.20031218072017.2155"><vh>os_path_norm</vh></v>
<v t="ekr.20031218072017.2156"><vh>os_path_normcase</vh></v>
<v t="ekr.20031218072017.2157"><vh>os_path_normpath</vh></v>
<v t="ekr.20031218072017.2158"><vh>os_path_split</vh></v>
<v t="ekr.20031218072017.2159"><vh>os_path_splitext</vh></v>
<v t="ekr.20031218072017.2160"><vh>toUnicodeFileEncoding</vh></v>
</v>
<v t="ekr.20031218072017.3151"><vh>Scanning...</vh>
<v t="ekr.20031218072017.3152"><vh>scanAtFileOptions</vh>
<v t="ekr.20031218072017.3153"><vh>&lt;&lt; scan another @file option &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3154"><vh>scanAtRootOptions</vh>
<v t="ekr.20031218072017.3155"><vh>&lt;&lt; scan another @root option &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3156"><vh>scanError</vh></v>
<v t="ekr.20031218072017.3157"><vh>scanf</vh></v>
<v t="ekr.20031218072017.3158"><vh>Scanners: calling scanError</vh>
<v t="ekr.20031218072017.3159"><vh>skip_block_comment</vh></v>
<v t="ekr.20031218072017.3160"><vh>skip_braces</vh></v>
<v t="ekr.20031218072017.3161"><vh>skip_php_braces (Dave Hein)</vh></v>
<v t="ekr.20031218072017.3162"><vh>skip_parens</vh></v>
<v t="ekr.20031218072017.3163"><vh>skip_pascal_begin_end</vh></v>
<v t="ekr.20031218072017.3164"><vh>skip_pascal_block_comment</vh></v>
<v t="ekr.20031218072017.3165"><vh>skip_pascal_string : called by tangle</vh></v>
<v t="ekr.20031218072017.3166"><vh>skip_heredoc_string : called by php import (Dave Hein)</vh></v>
<v t="ekr.20031218072017.3167"><vh>skip_pp_directive</vh></v>
<v t="ekr.20031218072017.3168"><vh>skip_pp_if</vh></v>
<v t="ekr.20031218072017.3169"><vh>skip_pp_part</vh></v>
<v t="ekr.20031218072017.3170"><vh>skip_python_string</vh></v>
<v t="ekr.20031218072017.2369"><vh>skip_string : called by tangle</vh></v>
<v t="ekr.20031218072017.3171"><vh>skip_to_semicolon</vh></v>
<v t="ekr.20031218072017.3172"><vh>skip_typedef</vh></v>
</v>
<v t="ekr.20031218072017.3173"><vh>Scanners: no error messages</vh>
<v t="ekr.20031218072017.3174"><vh>escaped</vh></v>
<v t="ekr.20031218072017.3175"><vh>find_line_start</vh></v>
<v t="ekr.20031218072017.3176"><vh>find_on_line</vh></v>
<v t="ekr.20031218072017.3177"><vh>is_c_id</vh></v>
<v t="ekr.20031218072017.3178"><vh>is_nl</vh></v>
<v t="ekr.20031218072017.3179"><vh>is_special</vh></v>
<v t="ekr.20031218072017.3180"><vh>is_ws &amp; is_ws_or_nl</vh></v>
<v t="ekr.20031218072017.3181"><vh>match</vh></v>
<v t="ekr.20031218072017.3182"><vh>match_c_word</vh></v>
<v t="ekr.20031218072017.3183"><vh>match_ignoring_case</vh></v>
<v t="ekr.20031218072017.3184"><vh>match_word</vh></v>
<v t="ekr.20031218072017.3185"><vh>skip_blank_lines</vh></v>
<v t="ekr.20031218072017.3186"><vh>skip_c_id</vh></v>
<v t="ekr.20031218072017.3187"><vh>skip_line, skip_to_end_of_line</vh></v>
<v t="ekr.20031218072017.3188"><vh>skip_long</vh></v>
<v t="ekr.20031218072017.3189"><vh>skip_matching_delims</vh></v>
<v t="ekr.20031218072017.3190"><vh>skip_nl</vh></v>
<v t="ekr.20031218072017.3191"><vh>skip_non_ws</vh></v>
<v t="ekr.20031218072017.3192"><vh>skip_pascal_braces</vh></v>
<v t="ekr.20031218072017.3193"><vh>skip_to_char</vh></v>
<v t="ekr.20031218072017.3194"><vh>skip_ws, skip_ws_and_nl</vh></v>
</v>
<v t="ekr.20031218072017.3195"><vh>splitLines &amp; joinLines</vh></v>
</v>
<v t="ekr.20031218072017.3196"><vh>Script utils...</vh>
<v t="ekr.20031218072017.2418"><vh>initScriptFind (use this to set up Leo's Find/Change dialog for scripting)</vh></v>
</v>
<v t="ekr.20031218072017.1498"><vh>Unicode utils...</vh>
<v t="ekr.20031218072017.1499"><vh>isUnicode</vh></v>
<v t="ekr.20031218072017.1500"><vh>isValidEncoding</vh></v>
<v t="ekr.20031218072017.1501"><vh>reportBadChars</vh></v>
<v t="ekr.20031218072017.1502"><vh>toUnicode &amp; toEncodedString</vh></v>
<v t="ekr.20031218072017.1503"><vh>getpreferredencoding from 2.3a2</vh>
<v t="ekr.20031218072017.1504"><vh>&lt;&lt; define getpreferredencoding using _locale &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1505"><vh>&lt;&lt; define getpreferredencoding for *nix &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3197"><vh>Whitespace...</vh>
<v t="ekr.20031218072017.3198"><vh>computeLeadingWhitespace</vh></v>
<v t="ekr.20031218072017.3199"><vh>computeWidth</vh></v>
<v t="ekr.20031218072017.3200"><vh>get_leading_ws</vh></v>
<v t="ekr.20031218072017.3201"><vh>optimizeLeadingWhitespace</vh></v>
<v t="ekr.20031218072017.3202"><vh>removeLeadingWhitespace</vh></v>
<v t="ekr.20031218072017.3203"><vh>removeTrailingWs</vh></v>
<v t="ekr.20031218072017.3204"><vh>skip_leading_ws</vh></v>
<v t="ekr.20031218072017.3205"><vh>skip_leading_ws_with_indent</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3206" tnodeList="ekr.20031218072017.3206,ekr.20031218072017.3207,ekr.20031218072017.3210,ekr.20031218072017.3211,ekr.20031218072017.1810,ekr.20031218072017.3212,ekr.20031218072017.3213,ekr.20031218072017.3215,ekr.20031218072017.3216,ekr.20031218072017.3217,ekr.20031218072017.3218,ekr.20031218072017.3219,ekr.20031218072017.3220,ekr.20031218072017.3221,ekr.20031218072017.3222,ekr.20031218072017.3223,ekr.20031218072017.3225,ekr.20031218072017.3226,ekr.20031218072017.3227,ekr.20031218072017.3228,ekr.20031218072017.3229,ekr.20031218072017.3230,ekr.20031218072017.3231,ekr.20031218072017.3232,ekr.20031218072017.3233,ekr.20031218072017.3234,ekr.20031218072017.3235,ekr.20031218072017.3237,ekr.20031218072017.3238,ekr.20031218072017.3239,ekr.20031218072017.3240,ekr.20031218072017.2257,ekr.20031218072017.2258,ekr.20031218072017.2259,ekr.20031218072017.2260,ekr.20031218072017.2261,ekr.20031218072017.2261,ekr.20031218072017.2262,ekr.20031218072017.2263,ekr.20031218072017.2264,ekr.20031218072017.2265,ekr.20031218072017.2266,ekr.20031218072017.2267,ekr.20031218072017.2268,ekr.20031218072017.2269,ekr.20031218072017.2270,ekr.20031218072017.2271,ekr.20031218072017.2272,ekr.20031218072017.2273,ekr.20031218072017.3242,ekr.20031218072017.3243,ekr.20031218072017.3244,ekr.20031218072017.3246,ekr.20031218072017.3245,ekr.20031218072017.3247,ekr.20031218072017.3248,ekr.20031218072017.3249,ekr.20031218072017.3250,ekr.20031218072017.3251,ekr.20031218072017.3260,ekr.20031218072017.3261,ekr.20031218072017.3262,ekr.20031218072017.3263,ekr.20031218072017.3252,ekr.20031218072017.3253,ekr.20031218072017.3254,ekr.20031218072017.3255,ekr.20031218072017.3256,ekr.20031218072017.3257,ekr.20031218072017.3258,ekr.20031218072017.3259,ekr.20031218072017.3264,ekr.20031218072017.3265,ekr.20031218072017.3266,ekr.20031218072017.3267,ekr.20031218072017.3268,ekr.20031218072017.3269,ekr.20031218072017.3270,ekr.20031218072017.3271,ekr.20031218072017.3277,ekr.20031218072017.3278,ekr.20031218072017.3279,ekr.20031218072017.3280,ekr.20031218072017.3272,ekr.20031218072017.3273,ekr.20031218072017.3274,ekr.20031218072017.3275,ekr.20031218072017.3276,ekr.20031218072017.3264,ekr.20031218072017.3281,ekr.20031218072017.3282,ekr.20031218072017.3285,ekr.20031218072017.3286,ekr.20031218072017.3287,ekr.20031218072017.3283,ekr.20031218072017.3288,ekr.20031218072017.3284,ekr.20031218072017.3264,ekr.20031218072017.3290,ekr.20031218072017.3291,ekr.20031218072017.3292,ekr.20031218072017.3293,ekr.20031218072017.3294,ekr.20031218072017.3295,ekr.20031218072017.3294,ekr.20031218072017.3295,ekr.20031218072017.3296,ekr.20031218072017.3297,ekr.20031218072017.3298,ekr.20031218072017.3298,ekr.20031218072017.3299,ekr.20031218072017.1462,ekr.20031218072017.1147,ekr.20031218072017.1148,ekr.20031218072017.3300,ekr.20031218072017.3301,ekr.20031218072017.3302,ekr.20031218072017.1149,ekr.20031218072017.3303,ekr.20031218072017.3304,ekr.20031218072017.1464,ekr.20031218072017.1150,ekr.20031218072017.1465,ekr.20031218072017.3306,ekr.20031218072017.3307,ekr.20031218072017.3308,ekr.20031218072017.3309,ekr.20031218072017.3310,ekr.20031218072017.3311,ekr.20031218072017.3312,ekr.20031218072017.3313,ekr.20031218072017.3314,ekr.20031218072017.1463,ekr.20031218072017.3315,ekr.20031218072017.3316,ekr.20031218072017.3317,ekr.20031218072017.3318,ekr.20031218072017.3319"><vh>@file leoImport.py</vh>
<v t="ekr.20031218072017.3207"><vh>import.__init__</vh></v>
<v t="ekr.20031218072017.3209"><vh>Import</vh>
<v t="ekr.20031218072017.3210"><vh>createOutline</vh>
<v t="ekr.20031218072017.3211"><vh>&lt;&lt; Read file into s &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1810"><vh>importDerivedFiles</vh></v>
<v t="ekr.20031218072017.3212"><vh>importFilesCommand</vh>
<v t="ekr.20031218072017.3213"><vh>&lt;&lt; Create a parent for two files having a common prefix &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3214"><vh>importFlattenedOutline &amp; allies</vh>
<v t="ekr.20031218072017.3215"><vh>convertMoreString/StringsToOutlineAfter</vh>
<v t="ekr.20031218072017.3216"><vh>&lt;&lt; Link a new vnode v into the outline &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3217"><vh>&lt;&lt; Set the headline string, skipping over the leader &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3218"><vh>&lt;&lt; Count the number of following body lines &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3219"><vh>&lt;&lt; Add the lines to the body text of v &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3220"><vh>importFlattenedOutline</vh>
<v t="ekr.20031218072017.3221"><vh>&lt;&lt; Read the file into array &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3222"><vh>moreHeadlineLevel</vh></v>
<v t="ekr.20031218072017.3223"><vh>stringIs/stringsAreValidMoreFile</vh></v>
</v>
<v t="ekr.20031218072017.3224"><vh>importWebCommand &amp; allies</vh>
<v t="ekr.20031218072017.3225"><vh>createOutlineFromWeb</vh></v>
<v t="ekr.20031218072017.3226"><vh>importWebCommand</vh></v>
<v t="ekr.20031218072017.3227"><vh>findFunctionDef</vh></v>
<v t="ekr.20031218072017.3228"><vh>scanBodyForHeadline</vh>
<v t="ekr.20031218072017.3229"><vh>&lt;&lt; scan cweb body for headline &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3230"><vh>&lt;&lt; scan noweb body for headline &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3231"><vh>scanWebFile (handles limbo)</vh>
<v t="ekr.20031218072017.3232"><vh>&lt;&lt; Create a symbol table of all section names &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3233"><vh>&lt;&lt; Create nodes for limbo text and the root section &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3234"><vh>&lt;&lt; Create a node for the next module &gt;&gt;</vh>
<v t="ekr.20031218072017.3235"><vh>&lt;&lt; Handle cweb @d, @f, @c and @p directives &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3236"><vh>Symbol table</vh>
<v t="ekr.20031218072017.3237"><vh>cstCanonicalize</vh></v>
<v t="ekr.20031218072017.3238"><vh>cstDump</vh></v>
<v t="ekr.20031218072017.3239"><vh>cstEnter</vh></v>
<v t="ekr.20031218072017.3240"><vh>cstLookup</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3241"><vh>Scanners for createOutline</vh>
<v t="ekr.20031218072017.2256"><vh>Python scanners</vh>
<v t="ekr.20031218072017.2257"><vh>scanPythonClass</vh>
<v t="ekr.20031218072017.2258"><vh>&lt;&lt; set classname and headline, or return i &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2259"><vh>&lt;&lt; create class_vnode  &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2260"><vh>&lt;&lt; create nodes for all defs of the class &gt;&gt;</vh>
<v t="ekr.20031218072017.2261"><vh>&lt;&lt; create parent_vnode &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2262"><vh>&lt;&lt; append any other class material &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2263"><vh>scanPythonDef</vh>
<v t="ekr.20031218072017.2264"><vh>&lt;&lt; set headline or return i &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2265"><vh>&lt;&lt; skip the Python def &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2266"><vh>&lt;&lt; Create def node &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2267"><vh>scanPythonDecls</vh>
<v t="ekr.20031218072017.2268"><vh>&lt;&lt; break on def or class &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2269"><vh>&lt;&lt; Create a child node for declarations &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2270"><vh>scanPythonText</vh>
<v t="ekr.20031218072017.2271"><vh>&lt;&lt; handle possible Python function or class &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2272"><vh>&lt;&lt; Append a reference to the methods of this file &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2273"><vh>&lt;&lt; Append any unused python text to the parent's body text &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3242"><vh>scanPHPText (Dave Hein)</vh>
<v t="ekr.20031218072017.3243"><vh>&lt;&lt; Append file if not pure PHP &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3244"><vh>&lt;&lt; define scanPHPText vars &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3245"><vh>&lt;&lt; handle possible heredoc string &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3246"><vh>&lt;&lt; handle possible PHP comments &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3247"><vh>&lt;&lt; handle possible class or function &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3248"><vh>&lt;&lt; handle end of class &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3249"><vh>&lt;&lt; Append any unused text to the parent's body text &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3250"><vh>scanCText</vh>
<v t="ekr.20031218072017.3251"><vh>&lt;&lt; define scanCText vars &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3252"><vh>&lt;&lt; handle # sign &gt;&gt;</vh>
<v t="ekr.20031218072017.3253"><vh>&lt;&lt; create a child node for all #include statements &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3254"><vh>&lt;&lt; handle open curly bracket in C &gt;&gt; (scans function)</vh>
<v t="ekr.20031218072017.3255"><vh>&lt;&lt; create a declaration node &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3256"><vh>&lt;&lt; append C function/method reference to parent node &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3257"><vh>&lt;&lt; handle id, class, typedef, struct, union, namespace &gt;&gt;</vh>
<v t="ekr.20031218072017.3258"><vh>&lt;&lt; create children for the namespace &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3259"><vh>&lt;&lt; test for operator keyword &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3260"><vh>&lt;&lt; handle possible C comments &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3261"><vh>&lt;&lt; handle equal sign in C&gt;&gt;</vh></v>
<v t="ekr.20031218072017.3262"><vh>&lt;&lt; handle open paren in C &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3263"><vh>&lt;&lt; handle semicolon in C &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3264"><vh>&lt;&lt; Append any unused text to the parent's body text &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3265"><vh>scanElispText &amp; allies</vh>
<v t="ekr.20031218072017.3266"><vh>skipElispParens</vh></v>
<v t="ekr.20031218072017.3267"><vh>skipElispId</vh></v>
<v t="ekr.20031218072017.3268"><vh>createElispFunction</vh></v>
<v t="ekr.20031218072017.3269"><vh>createElispDataNode</vh></v>
</v>
<v t="ekr.20031218072017.3270"><vh>scanJavaText</vh>
<v t="ekr.20031218072017.3271"><vh>&lt;&lt; define scanJavaText vars &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3272"><vh>&lt;&lt; handle open curly bracket in Java &gt;&gt;</vh>
<v t="ekr.20031218072017.3273"><vh>&lt;&lt; create a Java declaration node &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3274"><vh>&lt;&lt; append Java method reference to parent node &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3275"><vh>&lt;&lt; recursively scan the text &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3276"><vh>&lt;&lt; skip and remember the Java id &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3277"><vh>&lt;&lt; handle possible Java comments &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3278"><vh>&lt;&lt; handle equal sign in Java &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3279"><vh>&lt;&lt; handle open paren in Java &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3280"><vh>&lt;&lt; handle semicolon in Java &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3264"><vh>&lt;&lt; Append any unused text to the parent's body text &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3281"><vh>scanPascalText</vh>
<v t="ekr.20031218072017.3282"><vh>&lt;&lt; handle possible Pascal function &gt;&gt;</vh>
<v t="ekr.20031218072017.3283"><vh>&lt;&lt; create a child node for leading declarations &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3284"><vh>&lt;&lt; create a child node for the function &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3285"><vh>&lt;&lt; remember the function name, or continue &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3286"><vh>&lt;&lt; skip the function definition, or continue &gt;&gt;</vh>
<v t="ekr.20031218072017.3287"><vh>&lt;&lt; skip past the semicolon &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3288"><vh>&lt;&lt; append noweb method reference to the parent node &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3264"><vh>&lt;&lt; Append any unused text to the parent's body text &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.3289"><vh>Export</vh>
<v t="ekr.20031218072017.3290"><vh>convertCodePartToWeb</vh>
<v t="ekr.20031218072017.3291"><vh>&lt;&lt; put v's headline ref in head_ref&gt;&gt;</vh></v>
<v t="ekr.20031218072017.3292"><vh>&lt;&lt; put name following @root or @file in file_name &gt;&gt;</vh>
<v t="ekr.20031218072017.3293"><vh>&lt;&lt; Set file_name &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3294"><vh>&lt;&lt; append ref to file_name &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3295"><vh>&lt;&lt; append head_ref &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3296"><vh>convertDocPartToWeb (handle @ %def)</vh></v>
<v t="ekr.20031218072017.3297"><vh>convertVnodeToWeb</vh>
<v t="ekr.20031218072017.3298"><vh>&lt;&lt; Supply a missing doc part &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3299"><vh>copyPart</vh></v>
<v t="ekr.20031218072017.1462"><vh>exportHeadlines</vh></v>
<v t="ekr.20031218072017.1147"><vh>flattenOutline</vh></v>
<v t="ekr.20031218072017.1148"><vh>outlineToWeb</vh></v>
<v t="ekr.20031218072017.3300"><vh>removeSentinelsCommand</vh>
<v t="ekr.20031218072017.3301"><vh>&lt;&lt; Read file into s &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3302"><vh>&lt;&lt; set delims from the header line &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1149"><vh>&lt;&lt; Write s into newFileName &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3303"><vh>removeSentinelLines</vh>
<v t="ekr.20031218072017.3304"><vh>&lt;&lt; handle possible sentinel &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1464"><vh>weave</vh>
<v t="ekr.20031218072017.1150"><vh>&lt;&lt; open filename to f, or return &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1465"><vh>&lt;&lt; write the context of p to f &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3305"><vh>Utilities</vh>
<v t="ekr.20031218072017.3306"><vh>createHeadline</vh></v>
<v t="ekr.20031218072017.3307"><vh>error</vh></v>
<v t="ekr.20031218072017.3308"><vh>getLeadingIndent</vh></v>
<v t="ekr.20031218072017.3309"><vh>isDocStart and isModuleStart</vh></v>
<v t="ekr.20031218072017.3310"><vh>massageBody</vh></v>
<v t="ekr.20031218072017.3311"><vh>massageComment</vh></v>
<v t="ekr.20031218072017.3312"><vh>massageWebBody</vh>
<v t="ekr.20031218072017.3313"><vh>&lt;&lt; Remove most newlines from @space and @* sections &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3314"><vh>&lt;&lt; Replace abbreviated names with full names &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1463"><vh>setEncoding</vh></v>
<v t="ekr.20031218072017.3315"><vh>skipLeadingComments</vh>
<v t="ekr.20031218072017.3316"><vh>&lt;&lt; scan for C-style comments &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3317"><vh>&lt;&lt; scan for Pascal comments &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3318"><vh>&lt;&lt; scan for Python comments &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3319"><vh>undentBody</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3749" tnodeList="ekr.20031218072017.3749,ekr.20031218072017.3750,ekr.20031218072017.3751,ekr.20031218072017.3752,ekr.20031218072017.3753,ekr.20031218072017.839,ekr.20031218072017.3754,ekr.20031218072017.3755,ekr.20031218072017.3756,ekr.20031218072017.3757,ekr.20031218072017.3758,ekr.20031218072017.3759,ekr.20031218072017.3760,ekr.20031218072017.3761,ekr.20031218072017.3762,ekr.20031218072017.3763,ekr.20031218072017.3764,ekr.20031218072017.3765,ekr.20031218072017.3766,ekr.20031218072017.3767,ekr.20031218072017.3768,ekr.20031218072017.3769,ekr.20031218072017.3770,ekr.20031218072017.3771,ekr.20031218072017.3772,ekr.20031218072017.3773,ekr.20031218072017.3774,ekr.20031218072017.3775,ekr.20031218072017.3777,ekr.20031218072017.3778,ekr.20031218072017.836,ekr.20040130164211,ekr.20031218072017.3779,ekr.20040131171020,ekr.20040131171020.1,ekr.20040131171020.2,ekr.20040131171020.3,ekr.20040131171020.4,ekr.20031218072017.3780,ekr.20031218072017.3782,ekr.20031218072017.3783,ekr.20031218072017.2098,ekr.20031218072017.2102,ekr.20031218072017.2099,ekr.20031218072017.2100,ekr.20031218072017.2101,ekr.20031218072017.2103,ekr.20031218072017.1723,ekr.20031218072017.1724,ekr.20031218072017.1725,ekr.20031218072017.1726,ekr.20031218072017.1727,ekr.20031218072017.1728,ekr.20031218072017.1729,ekr.20031218072017.3784,ekr.20031218072017.3785,ekr.20031218072017.3790,ekr.20031218072017.3791,ekr.20031218072017.3792,ekr.20031218072017.3793,ekr.20031218072017.3794,ekr.20031218072017.3795,ekr.20031218072017.3796,ekr.20031218072017.3786,ekr.20031218072017.3787,ekr.20031218072017.3788,ekr.20031218072017.3789,ekr.20031218072017.3797,ekr.20031218072017.3798,ekr.20031218072017.3799,ekr.20031218072017.3800,ekr.20031218072017.3801,ekr.20031218072017.3802,ekr.20031218072017.3803,ekr.20031218072017.3804,ekr.20031218072017.2078,ekr.20031218072017.3805,ekr.20031218072017.3806,ekr.20031218072017.3807,ekr.20031218072017.3809,ekr.20031218072017.3810,ekr.20031218072017.3811"><vh>@file leoMenu.py</vh>
<v t="ekr.20031218072017.3750"><vh>class leoMenu</vh>
<v t="ekr.20031218072017.3751"><vh> leoMenu.__init__</vh></v>
<v t="ekr.20031218072017.3752"><vh>defineMenuTables</vh>
<v t="ekr.20031218072017.3753"><vh>&lt;&lt; define edit menu tables &gt;&gt;</vh>
<v t="ekr.20031218072017.839"><vh>&lt;&lt; define editMenuTopTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3754"><vh>&lt;&lt; define editMenuEditBodyTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3755"><vh>&lt;&lt; define editMenuEditHeadlineTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3756"><vh>&lt;&lt; define editMenuFindMenuTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3757"><vh>&lt;&lt; define editMenuTop2Table &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3758"><vh>&lt;&lt; define file menu tables &gt;&gt;</vh>
<v t="ekr.20031218072017.3759"><vh>&lt;&lt; define fileMenuTopTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3760"><vh>&lt;&lt; define fileMenuTop2Table &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3761"><vh>&lt;&lt; define fileMenuReadWriteMenuTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3762"><vh>&lt;&lt; define fileMenuTangleMenuTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3763"><vh>&lt;&lt; define fileMenuUntangleMenuTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3764"><vh>&lt;&lt; define fileMenuImportMenuTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3765"><vh>&lt;&lt; define fileMenuExportMenuTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3766"><vh>&lt;&lt; define fileMenuTop3MenuTable &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3767"><vh>&lt;&lt; define outline menu tables &gt;&gt;</vh>
<v t="ekr.20031218072017.3768"><vh>&lt;&lt; define outlineMenuTopMenuTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3769"><vh>&lt;&lt; define outlineMenuExpandContractMenuTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3770"><vh>&lt;&lt; define outlineMenuMoveMenuTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3771"><vh>&lt;&lt; define outlineMenuMarkMenuTable &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3772"><vh>&lt;&lt; define outlineMenuGoToMenuTable &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3773"><vh>&lt;&lt; define window menu tables &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3774"><vh>&lt;&lt; define help menu tables &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3775"><vh>oops</vh></v>
<v t="ekr.20031218072017.3776"><vh>Gui-independent menu enablers</vh>
<v t="ekr.20031218072017.3777"><vh>updateAllMenus</vh></v>
<v t="ekr.20031218072017.3778"><vh>updateFileMenu</vh></v>
<v t="ekr.20031218072017.836"><vh>updateEditMenu</vh>
<v t="ekr.20040130164211"><vh>&lt;&lt; enable cut/paste &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3779"><vh>updateOutlineMenu</vh>
<v t="ekr.20040131171020"><vh>&lt;&lt; enable top level outline menu &gt;&gt;</vh></v>
<v t="ekr.20040131171020.1"><vh>&lt;&lt; enable expand/Contract submenu &gt;&gt;</vh></v>
<v t="ekr.20040131171020.2"><vh>&lt;&lt; enable move submenu &gt;&gt;</vh></v>
<v t="ekr.20040131171020.3"><vh>&lt;&lt; enable go to submenu &gt;&gt;</vh></v>
<v t="ekr.20040131171020.4"><vh>&lt;&lt; enable mark submenu &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3780"><vh>hasSelection</vh></v>
</v>
<v t="ekr.20031218072017.3781"><vh>Gui-independent menu routines</vh>
<v t="ekr.20031218072017.3782"><vh>get/setRealMenuName &amp; setRealMenuNamesFromTable</vh></v>
<v t="ekr.20031218072017.3783"><vh>canonicalizeMenuName &amp; cononicalizeTranslatedMenuName</vh></v>
<v t="ekr.20031218072017.2098"><vh>canonicalizeShortcut</vh>
<v t="ekr.20031218072017.2099"><vh>&lt;&lt; canonicalize the last field &gt;&gt;</vh>
<v t="ekr.20031218072017.2100"><vh>&lt;&lt; define dict of Tk bind names &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2101"><vh>&lt;&lt; define dict of special names &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2102"><vh>&lt;&lt; set the last field, preserving case &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2103"><vh>&lt;&lt; synthesize the shortcuts from the information &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1723"><vh>createMenuEntries</vh>
<v t="ekr.20031218072017.1724"><vh>&lt;&lt; set name to the label for doCommand &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1725"><vh>&lt;&lt; set accel to the shortcut for name &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1726"><vh>&lt;&lt; set bind_shortcut and menu_shortcut using accel &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1727"><vh>&lt;&lt; define callback function &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1728"><vh>&lt;&lt; set realLabel, amp_index and menu_shortcut &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1729"><vh>&lt;&lt; handle bind_shorcut &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3784"><vh>createMenuItemsFromTable</vh></v>
<v t="ekr.20031218072017.3785"><vh>createMenusFromTables</vh>
<v t="ekr.20031218072017.3786"><vh>&lt;&lt; create the edit menu &gt;&gt;</vh>
<v t="ekr.20031218072017.3787"><vh>&lt;&lt; create the edit body submenu &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3788"><vh>&lt;&lt; create the edit headline submenu &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3789"><vh>&lt;&lt; create the find submenu &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3790"><vh>&lt;&lt; create the file menu &gt;&gt;</vh>
<v t="ekr.20031218072017.3791"><vh>&lt;&lt; create the recent files submenu &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3792"><vh>&lt;&lt; create the read/write submenu &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3793"><vh>&lt;&lt; create the tangle submenu &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3794"><vh>&lt;&lt; create the untangle submenu &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3795"><vh>&lt;&lt; create the import submenu &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3796"><vh>&lt;&lt; create the export submenu &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3797"><vh>&lt;&lt; create the outline menu &gt;&gt;</vh>
<v t="ekr.20031218072017.3798"><vh>&lt;&lt; create expand/contract submenu &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3799"><vh>&lt;&lt; create move submenu &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3800"><vh>&lt;&lt; create mark submenu &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3801"><vh>&lt;&lt; create goto submenu &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3802"><vh>&lt;&lt; create the window menu &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3803"><vh>&lt;&lt; create the help menu &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3804"><vh>createNewMenu</vh></v>
<v t="ekr.20031218072017.2078"><vh>createRecentFilesMenuItems (leoMenu)</vh></v>
<v t="ekr.20031218072017.3805"><vh>deleteMenu</vh></v>
<v t="ekr.20031218072017.3806"><vh>deleteMenuItem</vh></v>
<v t="ekr.20031218072017.3807"><vh>getMenu, setMenu, destroyMenu</vh></v>
</v>
<v t="ekr.20031218072017.3808"><vh>Must be overridden in menu subclasses</vh>
<v t="ekr.20031218072017.3809"><vh>9 Routines with Tk spellings</vh></v>
<v t="ekr.20031218072017.3810"><vh>7 Routines with new spellings</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3811"><vh>class nullMenu</vh></v>
</v>
<v t="ekr.20031218072017.3439" tnodeList="ekr.20031218072017.3439,ekr.20031218072017.3440,ekr.20031218072017.3441,ekr.20031218072017.3442,ekr.20031218072017.3443,ekr.20031218072017.3444,ekr.20031218072017.3445"><vh>@file leoPlugins.py</vh>
<v t="ekr.20031218072017.3440"><vh>loadHandlers</vh>
<v t="ekr.20031218072017.3441"><vh>&lt;&lt; set enabled_files from pluginsManager.txt &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3442"><vh>doHandlersForTag</vh></v>
<v t="ekr.20031218072017.3443"><vh>registerHandler</vh></v>
<v t="ekr.20031218072017.3444"><vh>registerExclusiveHandler</vh></v>
<v t="ekr.20031218072017.3445"><vh>funcToMethod</vh></v>
</v>
<v t="ekr.20031218072017.3446" tnodeList="ekr.20031218072017.3446,ekr.20031218072017.2411,ekr.20031218072017.3447,ekr.20031218072017.3449,ekr.20031218072017.3450,ekr.20031218072017.3451,ekr.20031218072017.3452,ekr.20031218072017.3453,ekr.20031218072017.3454,ekr.20031218072017.3455,ekr.20031218072017.3456,ekr.20031218072017.3457,ekr.20031218072017.3458,ekr.20031218072017.3459,ekr.20031218072017.3460,ekr.20031218072017.3461,ekr.20031218072017.3462,ekr.20031218072017.3463,ekr.20031218072017.3464,ekr.20031218072017.3465,ekr.20031218072017.3466,ekr.20031218072017.1356,ekr.20031218072017.1357,ekr.20031218072017.1358,ekr.20031218072017.1359,ekr.20031218072017.3467,ekr.20031218072017.3468,ekr.20031218072017.3469,ekr.20031218072017.3470,ekr.20031218072017.3471,ekr.20031218072017.3472,ekr.20031218072017.3473,ekr.20031218072017.3474,ekr.20031218072017.3475,ekr.20031218072017.3476,ekr.20031218072017.3477,ekr.20031218072017.3478,ekr.20031218072017.3479,ekr.20031218072017.3480,ekr.20031218072017.3481,ekr.20031218072017.3483,ekr.20031218072017.3482,ekr.20031218072017.3484,ekr.20031218072017.3485,ekr.20031218072017.3486,ekr.20031218072017.3487,ekr.20031218072017.3490,ekr.20031218072017.3491,ekr.20031218072017.3494,ekr.20031218072017.3493,ekr.20031218072017.3495,ekr.20031218072017.3496,ekr.20031218072017.3497,ekr.20031218072017.3492,ekr.20031218072017.3498,ekr.20031218072017.3499,ekr.20031218072017.3500,ekr.20031218072017.3501,ekr.20031218072017.3502,ekr.20031218072017.3503,ekr.20031218072017.3504,ekr.20031218072017.1488,ekr.20031218072017.1151,ekr.20031218072017.1152,ekr.20031218072017.1153,ekr.20031218072017.1154,ekr.20031218072017.1155,ekr.20031218072017.3506,ekr.20031218072017.3507,ekr.20031218072017.3508,ekr.20031218072017.3509,ekr.20031218072017.3510,ekr.20031218072017.3511,ekr.20031218072017.3512,ekr.20031218072017.3513,ekr.20031218072017.3514,ekr.20031218072017.3515,ekr.20031218072017.3516,ekr.20031218072017.3517,ekr.20031218072017.3518,ekr.20031218072017.3519,ekr.20031218072017.3520,ekr.20031218072017.3521,ekr.20031218072017.3522,ekr.20031218072017.3523,ekr.20031218072017.3524,ekr.20031218072017.3524,ekr.20031218072017.3525,ekr.20031218072017.3526,ekr.20031218072017.3527,ekr.20031218072017.3529,ekr.20031218072017.3530,ekr.20031218072017.3531,ekr.20031218072017.3532,ekr.20031218072017.3533,ekr.20031218072017.3534,ekr.20031218072017.3535,ekr.20031218072017.3536,ekr.20031218072017.3537,ekr.20031218072017.3539,ekr.20031218072017.3540,ekr.20031218072017.3541,ekr.20031218072017.3542,ekr.20031218072017.3543,ekr.20031218072017.3545,ekr.20031218072017.3546,ekr.20031218072017.3547,ekr.20031218072017.3548,ekr.20031218072017.3549,ekr.20031218072017.3546,ekr.20031218072017.3550,ekr.20031218072017.3551,ekr.20031218072017.3555,ekr.20031218072017.3557,ekr.20031218072017.3556,ekr.20031218072017.3553,ekr.20031218072017.3552,ekr.20031218072017.3554,ekr.20031218072017.3553,ekr.20031218072017.3558,ekr.20031218072017.3559,ekr.20031218072017.3553,ekr.20031218072017.3560,ekr.20031218072017.3561,ekr.20031218072017.3562,ekr.20031218072017.3563,ekr.20031218072017.2368,ekr.20031218072017.3564,ekr.20031218072017.3565,ekr.20031218072017.3566,ekr.20031218072017.3567,ekr.20031218072017.3568,ekr.20031218072017.3570,ekr.20031218072017.3571,ekr.20031218072017.3569,ekr.20031218072017.3572,ekr.20031218072017.3573,ekr.20031218072017.3574,ekr.20031218072017.3575,ekr.20031218072017.3576,ekr.20031218072017.3577,ekr.20031218072017.3578,ekr.20031218072017.3579,ekr.20031218072017.3580,ekr.20031218072017.3581,ekr.20031218072017.3582,ekr.20031218072017.3583,ekr.20031218072017.3584,ekr.20031218072017.3585,ekr.20031218072017.3586,ekr.20031218072017.3587,ekr.20031218072017.3588,ekr.20031218072017.3589,ekr.20031218072017.3590,ekr.20031218072017.3591,ekr.20031218072017.3592,ekr.20031218072017.3593,ekr.20031218072017.3594,ekr.20031218072017.1259,ekr.20031218072017.3595,ekr.20031218072017.3596,ekr.20031218072017.3597,ekr.20031218072017.3598,ekr.20031218072017.1360,ekr.20031218072017.1361,ekr.20031218072017.1362,ekr.20031218072017.1363,ekr.20031218072017.1364,ekr.20031218072017.1365,ekr.20031218072017.1366,ekr.20031218072017.1367,ekr.20031218072017.1368,ekr.20031218072017.1369,ekr.20031218072017.1370,ekr.20031218072017.1371,ekr.20031218072017.1372,ekr.20031218072017.1373,ekr.20031218072017.1374,ekr.20031218072017.3599,ekr.20031218072017.3600,ekr.20031218072017.3601,ekr.20031218072017.3602"><vh>@file leoTangle.py</vh>
<v t="ekr.20031218072017.2411"><vh>&lt;&lt; About Tangle and Untangle &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3447"><vh>&lt;&lt; constants &amp; synonyms &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3448"><vh>node classes</vh>
<v t="ekr.20031218072017.3449"><vh>class tst_node</vh>
<v t="ekr.20031218072017.3450"><vh>tst_node.__init__</vh></v>
<v t="ekr.20031218072017.3451"><vh>tst_node.__repr__</vh></v>
</v>
<v t="ekr.20031218072017.3452"><vh>class part_node</vh>
<v t="ekr.20031218072017.3453"><vh>part_node.__init__</vh></v>
<v t="ekr.20031218072017.3454"><vh>part_node.__repr__</vh></v>
</v>
<v t="ekr.20031218072017.3455"><vh>class ust_node</vh>
<v t="ekr.20031218072017.3456"><vh>ust_node.__init__</vh></v>
<v t="ekr.20031218072017.3457"><vh>ust_node.__repr__</vh></v>
</v>
<v t="ekr.20031218072017.3458"><vh>class def_node</vh>
<v t="ekr.20031218072017.3459"><vh>def_node.__init__</vh></v>
<v t="ekr.20031218072017.3460"><vh>def_node.__repr__</vh></v>
</v>
<v t="ekr.20031218072017.3461"><vh>class root_attributes (Stephen P. Schaefer)</vh>
<v t="ekr.20031218072017.3462"><vh>root_attributes.__init__</vh>
<v t="ekr.20031218072017.3463"><vh>&lt;&lt; trace the state &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3464"><vh>root_attributes.__repr__</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3465"><vh>class tangleCommands methods</vh>
<v t="ekr.20031218072017.3466"><vh>tangle.__init__</vh></v>
<v t="ekr.20031218072017.1356"><vh>tangle.init_ivars &amp; init_directive_ivars</vh>
<v t="ekr.20031218072017.1357"><vh>&lt;&lt; init tangle ivars &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1358"><vh>&lt;&lt; init untangle ivars &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1359"><vh>&lt;&lt; init directive ivars &gt;&gt; (tangle)</vh></v>
</v>
<v t="ekr.20031218072017.3467"><vh>top level</vh>
<v t="ekr.20031218072017.3468"><vh>cleanup</vh>
<v t="ekr.20031218072017.3469"><vh>&lt;&lt; call tangle_done.run() or untangle_done.run() &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3470"><vh>initTangleCommand</vh></v>
<v t="ekr.20031218072017.3471"><vh>initUntangleCommand</vh></v>
<v t="ekr.20031218072017.3472"><vh>tangle</vh></v>
<v t="ekr.20031218072017.3473"><vh>tangleAll</vh></v>
<v t="ekr.20031218072017.3474"><vh>tangleMarked</vh></v>
<v t="ekr.20031218072017.3475"><vh>tanglePass1</vh></v>
<v t="ekr.20031218072017.3476"><vh>tanglePass2</vh></v>
<v t="ekr.20031218072017.3477"><vh>tangleTree (calls cleanup)</vh></v>
<v t="ekr.20031218072017.3478"><vh>untangle</vh></v>
<v t="ekr.20031218072017.3479"><vh>untangleAll</vh></v>
<v t="ekr.20031218072017.3480"><vh>untangleMarked</vh></v>
<v t="ekr.20031218072017.3481"><vh>untangleRoot (calls cleanup)</vh>
<v t="ekr.20031218072017.3482"><vh>&lt;&lt; return if @silent or unknown language &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3483"><vh>&lt;&lt; Set path &amp; root_name to the file specified in the @root directive &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3484"><vh>&lt;&lt; Read the file into file_buf  &gt;&gt; in untangleRoot</vh></v>
<v t="ekr.20031218072017.3485"><vh>&lt;&lt; Pass 2:  Untangle the outline using the UST and a newly-created TST &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3486"><vh>untangleTree</vh>
<v t="ekr.20031218072017.3487"><vh>&lt;&lt; set end to the next root in the unit &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3488"><vh>tangle</vh>
<v t="ekr.20031218072017.3489"><vh>Pass 1</vh>
<v t="ekr.20031218072017.3490"><vh>handle_newline</vh></v>
<v t="ekr.20031218072017.3491"><vh>skip_body</vh>
<v t="ekr.20031218072017.3492"><vh>The interface between tangle and untangle</vh>
<v t="ekr.20031218072017.3493"><vh>&lt;&lt; Define a section containing only an @doc part &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3494"><vh>&lt;&lt; Define a section for a leading code part &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3495"><vh>&lt;&lt; Scan and define a section definition &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3496"><vh>&lt;&lt; Scan and define an @code defininition &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3497"><vh>&lt;&lt; Scan and define a root section &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3498"><vh>skip_code</vh>
<v t="ekr.20031218072017.3499"><vh>&lt;&lt; skip a noweb code section &gt;&gt;</vh>
<v t="ekr.20031218072017.3500"><vh>&lt;&lt; handle possible noweb section reference &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3501"><vh>&lt;&lt; skip a CWEB code section &gt;&gt;</vh>
<v t="ekr.20031218072017.3502"><vh>&lt;&lt; handle CWEB control code &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3503"><vh>skip_doc</vh></v>
<v t="ekr.20031218072017.3504"><vh>skip_headline</vh></v>
</v>
<v t="ekr.20031218072017.3505"><vh>Pass 2</vh>
<v t="ekr.20031218072017.1488"><vh>oblank, oblanks, os, otab, otabs (Tangle)</vh></v>
<v t="ekr.20031218072017.1151"><vh>tangle.put_all_roots</vh>
<v t="ekr.20031218072017.1152"><vh>&lt;&lt;Get root specific attributes&gt;&gt;</vh></v>
<v t="ekr.20031218072017.1153"><vh>&lt;&lt;Put @first lines&gt;&gt;</vh></v>
<v t="ekr.20031218072017.1154"><vh>&lt;&lt;Write a banner at the start of the output file&gt;&gt;</vh></v>
<v t="ekr.20031218072017.1155"><vh>&lt;&lt; Erase the temporary file &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3506"><vh>put_code</vh>
<v t="ekr.20031218072017.3507"><vh>&lt;&lt;put possible section reference &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3508"><vh>&lt;&lt; handle 2-character CWEB control codes &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3509"><vh>&lt;&lt; handle noweb @ &lt; &lt; convention &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3510"><vh>put_doc</vh>
<v t="ekr.20031218072017.3511"><vh>&lt;&lt;put the doc part&gt;&gt;</vh>
<v t="ekr.20031218072017.3512"><vh>&lt;&lt;output or skip whitespace or newlines&gt;&gt;</vh></v>
<v t="ekr.20031218072017.3513"><vh>&lt;&lt;compute the width of the next word&gt;&gt;</vh></v>
<v t="ekr.20031218072017.3514"><vh>&lt;&lt;output next word&gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3515"><vh>put_leading_ws</vh></v>
<v t="ekr.20031218072017.3516"><vh>put_newline</vh>
<v t="ekr.20031218072017.3517"><vh>&lt;&lt; Output leading white space except for blank lines &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3518"><vh>put_part_node</vh></v>
<v t="ekr.20031218072017.3519"><vh>put_section</vh>
<v t="ekr.20031218072017.3520"><vh>&lt;&lt; Calculate the new value of tangle_indent &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3521"><vh>&lt;&lt; Set 'newline_flag' if the line ends with the reference &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3522"><vh>&lt;&lt;put all parts of the section definition&gt;&gt;</vh>
<v t="ekr.20031218072017.3523"><vh>&lt;&lt; Put the section name in a comment &gt;&gt;</vh>
<v t="ekr.20031218072017.3524"><vh>&lt;&lt; put ( n of m ) &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3525"><vh>&lt;&lt; Put the ending comment &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3526"><vh>&lt;&lt;Put a comment about the undefined section&gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3527"><vh>section_check</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3528"><vh>tst</vh>
<v t="ekr.20031218072017.3529"><vh>st_check</vh></v>
<v t="ekr.20031218072017.3530"><vh>st_dump</vh></v>
<v t="ekr.20031218072017.3531"><vh>st_dump_node</vh></v>
<v t="ekr.20031218072017.3532"><vh>st_enter</vh>
<v t="ekr.20031218072017.3533"><vh>&lt;&lt;check for duplicate code definitions &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3534"><vh>&lt;&lt;remember root node attributes&gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3535"><vh>st_enter_root_name</vh></v>
<v t="ekr.20031218072017.3536"><vh>st_enter_section_name</vh></v>
<v t="ekr.20031218072017.3537"><vh>st_lookup</vh></v>
</v>
<v t="ekr.20031218072017.3538"><vh>ust</vh>
<v t="ekr.20031218072017.3539"><vh>ust_dump</vh></v>
<v t="ekr.20031218072017.3540"><vh>ust_enter</vh>
<v t="ekr.20031218072017.3541"><vh>&lt;&lt; remove blank lines from the start and end of the text &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3542"><vh>ust_lookup</vh></v>
<v t="ekr.20031218072017.3543"><vh>ust_warn_about_orphans</vh></v>
</v>
<v t="ekr.20031218072017.3544"><vh>untangle</vh>
<v t="ekr.20031218072017.3545"><vh>compare_comments</vh>
<v t="ekr.20031218072017.3546"><vh>&lt;&lt; Check both parts for @ comment conventions &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3547"><vh>massage_block_comment (no longer used)</vh></v>
<v t="ekr.20031218072017.3548"><vh>forgiving_compare</vh>
<v t="ekr.20031218072017.3549"><vh>&lt;&lt; Define forgiving_compare vars &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3546"><vh>&lt;&lt; Check both parts for @ comment conventions &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3550"><vh>&lt;&lt; Compare non-critical newlines &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3551"><vh>&lt;&lt; Compare non-critical whitespace &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3552"><vh>&lt;&lt; Compare possible preprocessor directives &gt;&gt;</vh>
<v t="ekr.20031218072017.3553"><vh>&lt;&lt; Compare single characters &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3554"><vh>&lt;&lt; Compare preprocessor directives &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3555"><vh>&lt;&lt; Compare possible strings &gt;&gt;</vh>
<v t="ekr.20031218072017.3553"><vh>&lt;&lt; Compare single characters &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3556"><vh>&lt;&lt; Compare C strings &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3557"><vh>&lt;&lt; Compare Pascal strings &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3558"><vh>&lt;&lt; Compare possible section references &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3559"><vh>&lt;&lt; Compare comments or single characters &gt;&gt;</vh>
<v t="ekr.20031218072017.3553"><vh>&lt;&lt; Compare single characters &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3560"><vh>&lt;&lt; Make sure both parts have ended &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3561"><vh>&lt;&lt; Trace the mismatch &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3562"><vh>mismatch</vh></v>
<v t="ekr.20031218072017.3563"><vh>scan_derived_file (pass 1)</vh>
<v t="ekr.20031218072017.2368"><vh>&lt;&lt; set the private global matching vars &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3564"><vh>&lt;&lt; Skip the header line output by tangle &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3565"><vh>&lt;&lt; handle the start of a new line &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3566"><vh>&lt;&lt; handle a sentinel line &gt;&gt;</vh>
<v t="ekr.20031218072017.3567"><vh>&lt;&lt; terminate the previous part of this section if it exists &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3568"><vh>&lt;&lt; copy the entire line &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3569"><vh>&lt;&lt; copy a string &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3570"><vh>&lt;&lt; copy a multi-line comment &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3571"><vh>&lt;&lt; copy an alternate multi-line comment &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3572"><vh>&lt;&lt; end all open sections &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3573"><vh>update_def (pass 2)</vh>
<v t="ekr.20031218072017.3574"><vh>&lt;&lt; Remove leading blank lines and comments from ucode &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3575"><vh>update_current_vnode</vh></v>
</v>
<v t="ekr.20031218072017.3576"><vh>utility methods</vh>
<v t="ekr.20031218072017.3577"><vh>compare_section_names</vh></v>
<v t="ekr.20031218072017.3578"><vh>copy</vh></v>
<v t="ekr.20031218072017.3579"><vh>error, pathError, warning</vh></v>
<v t="ekr.20031218072017.3580"><vh>is_end_of_directive</vh></v>
<v t="ekr.20031218072017.3581"><vh>is_end_of_string</vh></v>
<v t="ekr.20031218072017.3582"><vh>is_escaped</vh></v>
<v t="ekr.20031218072017.3583"><vh>is_section_name</vh></v>
<v t="ekr.20031218072017.3584"><vh>is_sentinel_line &amp; is_sentinel_line_with_data</vh>
<v t="ekr.20031218072017.3585"><vh>&lt;&lt; Initialize the return values  &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3586"><vh>&lt;&lt; Make sure the line starts with start_sentinel &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3587"><vh>&lt;&lt; Set end_flag if we have -- end -- &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3588"><vh>&lt;&lt; Make sure we have a section reference &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3589"><vh>&lt;&lt; Set part and of if they exist &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3590"><vh>&lt;&lt; Set nl_flag to false if !newline exists &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3591"><vh>&lt;&lt; Make sure the line ends with end_sentinel &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3592"><vh>push_new_def_node</vh></v>
<v t="ekr.20031218072017.3593"><vh>scan_short_val</vh></v>
<v t="ekr.20031218072017.3594"><vh>setRootFromHeadline</vh></v>
<v t="ekr.20031218072017.1259"><vh>setRootFromText</vh></v>
<v t="ekr.20031218072017.3595"><vh>skip_CWEB_section_name</vh></v>
<v t="ekr.20031218072017.3596"><vh>skip_noweb_section_name</vh></v>
<v t="ekr.20031218072017.3597"><vh>skip_section_name</vh></v>
<v t="ekr.20031218072017.3598"><vh>standardize_name</vh></v>
<v t="ekr.20031218072017.1360"><vh>tangle.scanAllDirectives</vh>
<v t="ekr.20031218072017.1361"><vh>&lt;&lt; Collect @first attributes &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1362"><vh>&lt;&lt; Test for @comment and @language &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1363"><vh>&lt;&lt; Test for @encoding &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1364"><vh>&lt;&lt; Test for @lineending &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1365"><vh>&lt;&lt; Test for print modes directives &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1366"><vh>&lt;&lt; Test for @path &gt;&gt; in tangleScanAllDirectives</vh>
<v t="ekr.20031218072017.1367"><vh>&lt;&lt; compute dir and relative_path from s[k:] &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1368"><vh>&lt;&lt; handle absolute @path &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1369"><vh>&lt;&lt; Test for @pagewidth &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1370"><vh>&lt;&lt; Test for @root &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1371"><vh>&lt;&lt; Test for @tabwidth &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1372"><vh>&lt;&lt; Test for @header and @noheader &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1373"><vh>&lt;&lt; Set self.tangle_directory &gt;&gt;</vh>
<v t="ekr.20031218072017.1374"><vh>&lt;&lt; handle absolute path &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3599"><vh>token_type</vh>
<v t="ekr.20031218072017.3600"><vh>&lt;&lt; set token_type in noweb mode &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3601"><vh>&lt;&lt; set token_type for CWEB mode &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3602"><vh>&lt;&lt; set kind for directive &gt;&gt;</vh></v>
</v>
</v>
</v>
</v>
<v t="ekr.20031218072017.3603" tnodeList="ekr.20031218072017.3603,ekr.20031218072017.2413,ekr.20031218072017.3604,ekr.20031218072017.3605,ekr.20031218072017.3606,ekr.20031218072017.3607,ekr.20031218072017.3609,ekr.20031218072017.3610,ekr.20031218072017.3611,ekr.20031218072017.3612,ekr.20031218072017.3613,ekr.20031218072017.3614,ekr.20031218072017.3615,ekr.20031218072017.1490,ekr.20031218072017.1491,ekr.20031218072017.1492,ekr.20031218072017.3616,ekr.20031218072017.2030,ekr.20031218072017.2031,ekr.20031218072017.2033,ekr.20031218072017.2034,ekr.20031218072017.2032,ekr.20031218072017.2035,ekr.20031218072017.2036,ekr.20031218072017.1713,ekr.20031218072017.2037,ekr.20031218072017.2038,ekr.20031218072017.2039,ekr.20031218072017.2040,ekr.20031218072017.2041,ekr.20031218072017.2042,ekr.20031218072017.2043,ekr.20031218072017.2044,ekr.20031218072017.2045,ekr.20031218072017.1712,ekr.20031218072017.2046,ekr.20031218072017.2047,ekr.20031218072017.3618,ekr.20031218072017.3620,ekr.20031218072017.3621,ekr.20031218072017.1714,ekr.20031218072017.1493,ekr.20031218072017.1494,ekr.20031218072017.1495,ekr.20031218072017.1496,ekr.20031218072017.1497,ekr.20031218072017.3622,ekr.20031218072017.3623,ekr.20031218072017.3624,ekr.20031218072017.2243"><vh>@file leoUndo.py</vh>
<v t="ekr.20031218072017.2413"><vh>&lt;&lt; How Leo implements unlimited undo &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3604"><vh>&lt;&lt; Define optional ivars &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3605"><vh>class undoer</vh>
<v t="ekr.20031218072017.3606"><vh>undo.__init__ &amp; clearIvars</vh>
<v t="ekr.20031218072017.3607"><vh>clearIvars</vh></v>
</v>
<v t="ekr.20031218072017.3608"><vh>State routines...</vh>
<v t="ekr.20031218072017.3609"><vh>clearUndoState</vh></v>
<v t="ekr.20031218072017.3610"><vh>canRedo &amp; canUndo</vh></v>
<v t="ekr.20031218072017.3611"><vh>enableMenuItems</vh></v>
<v t="ekr.20031218072017.3612"><vh>getBead, peekBead, setBead</vh></v>
<v t="ekr.20031218072017.3613"><vh>redoMenuName, undoMenuName</vh></v>
<v t="ekr.20031218072017.3614"><vh>setRedoType, setUndoType</vh></v>
<v t="ekr.20031218072017.3615"><vh>setUndoParams</vh></v>
<v t="ekr.20031218072017.1490"><vh>setUndoTypingParams</vh>
<v t="ekr.20031218072017.1491"><vh>&lt;&lt; compute leading, middle &amp; trailing  lines &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1492"><vh>&lt;&lt; save undo text info &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3616"><vh>setUndoTypes</vh></v>
</v>
<v t="ekr.20031218072017.2030"><vh>u.redo</vh>
<v t="ekr.20031218072017.2031"><vh>&lt;&lt; redo clone cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2032"><vh>&lt;&lt; redo delete cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2033"><vh>&lt;&lt; redo hoist cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2034"><vh>&lt;&lt; redo insert cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2035"><vh>&lt;&lt; redo move &amp; drag cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2036"><vh>&lt;&lt; redo promote and demote cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1713"><vh>&lt;&lt; redo replace cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2037"><vh>&lt;&lt; redo sort cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2038"><vh>&lt;&lt; redo typing cases &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2039"><vh>u.undo</vh>
<v t="ekr.20031218072017.2040"><vh>&lt;&lt; undo clone cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2041"><vh>&lt;&lt; undo delete cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2042"><vh>&lt;&lt; undo hoist cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2043"><vh>&lt;&lt; undo insert cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2044"><vh>&lt;&lt; undo move  &amp; drag cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1712"><vh>&lt;&lt; undo replace cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2045"><vh>&lt;&lt; undo promote and demote cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2046"><vh>&lt;&lt; undo sort cases &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2047"><vh>&lt;&lt; undo typing cases &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3617"><vh>Undo helpers</vh>
<v t="ekr.20031218072017.3618"><vh>u.saveTree, restoreExtraAttributes</vh></v>
<v t="ekr.20031218072017.3620"><vh>undoDemote</vh></v>
<v t="ekr.20031218072017.3621"><vh>undoPromote</vh></v>
<v t="ekr.20031218072017.1714"><vh>undoReplace</vh></v>
<v t="ekr.20031218072017.1493"><vh>undoRedoText</vh>
<v t="ekr.20031218072017.1494"><vh>&lt;&lt; Incrementally update the Tk.Text widget &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1495"><vh>&lt;&lt; Compute the result using v's body text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1496"><vh>&lt;&lt; Get textResult from the Tk.Text widget &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1497"><vh>&lt;&lt; print mismatch trace &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3622"><vh>undoSortChildren</vh></v>
<v t="ekr.20031218072017.3623"><vh>undoSortSiblings</vh></v>
<v t="ekr.20031218072017.3624"><vh>undoSortTopLevel</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2243"><vh>class nullUndoer</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3625"><vh>Gui Base classes</vh>
<v t="ekr.20031218072017.3626" tnodeList="ekr.20031218072017.3626,ekr.20031218072017.3627,ekr.20031218072017.3628,ekr.20031218072017.3629"><vh>@file leoColorPanel.py</vh>
<v t="ekr.20031218072017.3627"><vh>&lt;&lt; define default color panel data &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3628"><vh>leoColorPanels.__init__</vh></v>
<v t="ekr.20031218072017.3629"><vh>Must be overridden in subclasses</vh></v>
</v>
<v t="ekr.20031218072017.3630" tnodeList="ekr.20031218072017.3630,ekr.20031218072017.3631,ekr.20031218072017.3632,ekr.20031218072017.3633,ekr.20031218072017.3634,ekr.20031218072017.3635,ekr.20031218072017.3636,ekr.20031218072017.3637,ekr.20031218072017.3638,ekr.20031218072017.3639,ekr.20031218072017.3640,ekr.20031218072017.3641,ekr.20031218072017.3642,ekr.20031218072017.3643,ekr.20031218072017.3644,ekr.20031218072017.3646,ekr.20031218072017.3647,ekr.20031218072017.3648,ekr.20031218072017.3649,ekr.20031218072017.1144,ekr.20031218072017.3650,ekr.20031218072017.3651"><vh>@file leoCompare.py</vh>
<v t="ekr.20031218072017.3631"><vh>choose</vh></v>
<v t="ekr.20031218072017.3632"><vh>go</vh></v>
<v t="ekr.20031218072017.3633"><vh>class leoCompare</vh>
<v t="ekr.20031218072017.3634"><vh>compare.__init__</vh></v>
<v t="ekr.20031218072017.3635"><vh>compare_directories (entry)</vh></v>
<v t="ekr.20031218072017.3636"><vh>compare_files (entry)</vh></v>
<v t="ekr.20031218072017.3637"><vh>compare_lines</vh></v>
<v t="ekr.20031218072017.3638"><vh>compare_open_files</vh>
<v t="ekr.20031218072017.3639"><vh>&lt;&lt; handle opening lines &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3640"><vh>&lt;&lt; ignore blank lines and/or sentinels &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3641"><vh>&lt;&lt; print matches and/or mismatches &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3642"><vh>&lt;&lt; warn if mismatch limit reached &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3643"><vh>&lt;&lt; handle reporting after at least one eof is seen &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3644"><vh>filecmp</vh></v>
<v t="ekr.20031218072017.3645"><vh>utils...</vh>
<v t="ekr.20031218072017.3646"><vh>doOpen</vh></v>
<v t="ekr.20031218072017.3647"><vh>dump</vh></v>
<v t="ekr.20031218072017.3648"><vh>dumpToEndOfFile</vh></v>
<v t="ekr.20031218072017.3649"><vh>isLeoHeader &amp; isSentinel</vh></v>
<v t="ekr.20031218072017.1144"><vh>openOutputFile (compare)</vh></v>
<v t="ekr.20031218072017.3650"><vh>show</vh></v>
<v t="ekr.20031218072017.3651"><vh>showIvars</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.3652" tnodeList="ekr.20031218072017.3652,ekr.20031218072017.3653,ekr.20031218072017.3654"><vh>@file leoFontPanel.py</vh>
<v t="ekr.20031218072017.3653"><vh>fontPanel.__init__</vh></v>
<v t="ekr.20031218072017.3654"><vh>Must be overridden in subclasses</vh></v>
</v>
<v t="ekr.20031218072017.3655" tnodeList="ekr.20031218072017.3655,ekr.20031218072017.2410,ekr.20031218072017.3656,ekr.20031218072017.3657,ekr.20031218072017.3658,ekr.20031218072017.3659,ekr.20031218072017.3660,ekr.20031218072017.3661,ekr.20031218072017.3662,ekr.20031218072017.3663,ekr.20031218072017.3664,ekr.20031218072017.3665,ekr.20031218072017.3666,ekr.20031218072017.3667,ekr.20031218072017.3668,ekr.20031218072017.3669,ekr.20031218072017.3670,ekr.20031218072017.3672,ekr.20031218072017.3673,ekr.20031218072017.3674,ekr.20031218072017.3675,ekr.20031218072017.3676,ekr.20031218072017.3677,ekr.20031218072017.3678,ekr.20031218072017.3679,ekr.20031218072017.3681,ekr.20031218072017.3682,ekr.20031218072017.3684,ekr.20031218072017.3685,ekr.20031218072017.3686,ekr.20031218072017.3687,ekr.20031218072017.3688,ekr.20031218072017.3689,ekr.20031218072017.3690,ekr.20031218072017.3691,ekr.20031218072017.3692,ekr.20031218072017.3693,ekr.20031218072017.1375,ekr.20031218072017.1376,ekr.20031218072017.3694,ekr.20031218072017.3695,ekr.20031218072017.3696,ekr.20031218072017.3697,ekr.20031218072017.3698,ekr.20031218072017.3699,ekr.20031218072017.3700,ekr.20031218072017.3701,ekr.20031218072017.3702,ekr.20031218072017.3703,ekr.20031218072017.3704,ekr.20031218072017.3705,ekr.20031218072017.3707,ekr.20031218072017.3708,ekr.20031218072017.3709,ekr.20031218072017.3710,ekr.20031218072017.3711,ekr.20031218072017.3712,ekr.20031218072017.3713,ekr.20031218072017.3714,ekr.20031218072017.3715,ekr.20031218072017.3716,ekr.20031218072017.3718,ekr.20031218072017.2312,ekr.20031218072017.2313,ekr.20031218072017.2314,ekr.20031218072017.2315,ekr.20040106095546.1,ekr.20031218072017.2191,ekr.20031218072017.2192,ekr.20031218072017.2194,ekr.20031218072017.2195,ekr.20031218072017.2196,ekr.20031218072017.2197,ekr.20031218072017.2198,ekr.20031218072017.2199,ekr.20031218072017.2200,ekr.20031218072017.2201,ekr.20031218072017.2202,ekr.20031218072017.2203,ekr.20031218072017.2204,ekr.20031218072017.2205,ekr.20031218072017.2206,ekr.20031218072017.2207,ekr.20031218072017.2209,ekr.20031218072017.2210,ekr.20031218072017.2211,ekr.20031218072017.2212,ekr.20031218072017.2213,ekr.20031218072017.2214,ekr.20031218072017.2215,ekr.20031218072017.2216,ekr.20031218072017.2217,ekr.20031218072017.2222,ekr.20031218072017.2232,ekr.20031218072017.2233,ekr.20031218072017.2234,ekr.20031218072017.2235,ekr.20031218072017.2237,ekr.20031218072017.2238,ekr.20031218072017.2239,ekr.20031218072017.2240,ekr.20031218072017.2241,ekr.20031218072017.2242"><vh>@file leoFrame.py</vh>
<v t="ekr.20031218072017.2410"><vh>&lt;&lt; About handling events &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3656"><vh>class leoBody</vh>
<v t="ekr.20031218072017.3657"><vh>leoBody.__init__</vh></v>
<v t="ekr.20031218072017.3658"><vh>oops</vh></v>
<v t="ekr.20031218072017.3659"><vh>leoBody.setFontFromConfig</vh></v>
<v t="ekr.20031218072017.3660"><vh>Must be overriden in subclasses</vh>
<v t="ekr.20031218072017.3661"><vh>Bounding box (Tk spelling)</vh></v>
<v t="ekr.20031218072017.3662"><vh>Color tags (Tk spelling)</vh></v>
<v t="ekr.20031218072017.3663"><vh>Configuration (Tk spelling)</vh></v>
<v t="ekr.20031218072017.3664"><vh>Focus</vh></v>
<v t="ekr.20031218072017.3665"><vh>Height &amp; width</vh></v>
<v t="ekr.20031218072017.3666"><vh>Idle time...</vh></v>
<v t="ekr.20031218072017.3667"><vh>Indices</vh></v>
<v t="ekr.20031218072017.3668"><vh>Insert point</vh></v>
<v t="ekr.20031218072017.3669"><vh>Menus</vh></v>
<v t="ekr.20031218072017.3670"><vh>Selection</vh></v>
<v t="ekr.20031218072017.3671"><vh>Text</vh>
<v t="ekr.20031218072017.3672"><vh>delete...</vh></v>
<v t="ekr.20031218072017.3673"><vh>get...</vh></v>
<v t="ekr.20031218072017.3674"><vh>Insert...</vh></v>
<v t="ekr.20031218072017.3675"><vh>setSelectionAreas</vh></v>
</v>
<v t="ekr.20031218072017.3676"><vh>Visibility &amp; scrolling</vh></v>
</v>
<v t="ekr.20031218072017.3677"><vh>Coloring </vh></v>
</v>
<v t="ekr.20031218072017.3678"><vh>class leoFrame</vh>
<v t="ekr.20031218072017.3679"><vh>  leoFrame.__init__</vh></v>
<v t="ekr.20031218072017.3680"><vh> Must be defined in subclasses</vh>
<v t="ekr.20031218072017.3681"><vh> gui-dependent commands</vh></v>
<v t="ekr.20031218072017.3682"><vh>bringToFront, deiconify, lift &amp; update</vh></v>
<v t="ekr.20031218072017.3683"><vh>config stuff...</vh>
<v t="ekr.20031218072017.3684"><vh>resizePanesToRatio</vh></v>
<v t="ekr.20031218072017.3685"><vh>setInitialWindowGeometry</vh></v>
<v t="ekr.20031218072017.3686"><vh>setTopGeometry</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3687"><vh>setTabWidth</vh></v>
<v t="ekr.20031218072017.3688"><vh>getTitle &amp; setTitle</vh></v>
<v t="ekr.20031218072017.3689"><vh>initialRatios</vh></v>
<v t="ekr.20031218072017.3690"><vh>longFileName &amp; shortFileName</vh></v>
<v t="ekr.20031218072017.3691"><vh>oops</vh></v>
<v t="ekr.20031218072017.3692"><vh>promptForSave</vh>
<v t="ekr.20031218072017.3693"><vh>&lt;&lt; Put up a file save dialog to set mFileName &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1375"><vh>scanForTabWidth</vh>
<v t="ekr.20031218072017.1376"><vh>&lt;&lt; set w and break on @tabwidth &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3694"><vh>class leoLog</vh>
<v t="ekr.20031218072017.3695"><vh>leoLog.__init__</vh></v>
<v t="ekr.20031218072017.3696"><vh>leoLog.configure</vh></v>
<v t="ekr.20031218072017.3697"><vh>leoLog.configureBorder</vh></v>
<v t="ekr.20031218072017.3698"><vh>leoLog.createControl</vh></v>
<v t="ekr.20031218072017.3699"><vh>leoLog.enable &amp; disable</vh></v>
<v t="ekr.20031218072017.3700"><vh>leoLog.oops</vh></v>
<v t="ekr.20031218072017.3701"><vh>leoLog.setFontFromConfig</vh></v>
<v t="ekr.20031218072017.3702"><vh>leoLog.onActivateLog</vh></v>
<v t="ekr.20031218072017.3703"><vh>leoLog.put &amp; putnl</vh></v>
</v>
<v t="ekr.20031218072017.3704"><vh>class leoTree</vh>
<v t="ekr.20031218072017.3705"><vh>  tree.__init__</vh></v>
<v t="ekr.20031218072017.3706"><vh> Must be defined in subclasses</vh>
<v t="ekr.20031218072017.3707"><vh>Drawing</vh></v>
<v t="ekr.20031218072017.3708"><vh>Edit label</vh></v>
<v t="ekr.20031218072017.3709"><vh>Fonts</vh></v>
<v t="ekr.20031218072017.3710"><vh>Notifications</vh></v>
<v t="ekr.20031218072017.3711"><vh>Scrolling</vh></v>
<v t="ekr.20031218072017.3712"><vh>Selecting</vh></v>
<v t="ekr.20031218072017.3713"><vh>Tree operations</vh></v>
</v>
<v t="ekr.20031218072017.3714"><vh>beginUpdate</vh></v>
<v t="ekr.20031218072017.3715"><vh>endUpdate</vh></v>
<v t="ekr.20031218072017.3716"><vh>Getters/Setters (tree)</vh></v>
<v t="ekr.20031218072017.3718"><vh>oops</vh></v>
<v t="ekr.20031218072017.2312"><vh>tree.OnIconDoubleClick (@url)</vh>
<v t="ekr.20031218072017.2313"><vh>&lt;&lt; stop the url after any whitespace  &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2314"><vh>&lt;&lt; check the url; return if bad &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2315"><vh>&lt;&lt; pass the url to the web browser &gt;&gt;</vh></v>
</v>
<v t="ekr.20040106095546.1"><vh>tree.enableDrawingAfterException</vh></v>
</v>
<v t="ekr.20031218072017.2191"><vh>class nullBody</vh>
<v t="ekr.20031218072017.2192"><vh> nullBody.__init__</vh></v>
<v t="ekr.20031218072017.2193"><vh>Utils (internal use)</vh>
<v t="ekr.20031218072017.2194"><vh>findStartOfLine</vh></v>
<v t="ekr.20031218072017.2195"><vh>scanToStartOfLine</vh></v>
<v t="ekr.20031218072017.2196"><vh>scanToEndOfLine</vh></v>
</v>
<v t="ekr.20031218072017.2197"><vh>Must be overriden in subclasses</vh>
<v t="ekr.20031218072017.2198"><vh>Bounding box</vh></v>
<v t="ekr.20031218072017.2199"><vh>Color tags</vh></v>
<v t="ekr.20031218072017.2200"><vh>Configuration</vh></v>
<v t="ekr.20031218072017.2201"><vh>Focus</vh></v>
<v t="ekr.20031218072017.2202"><vh>Height &amp; width (use dummy values...)</vh></v>
<v t="ekr.20031218072017.2203"><vh>Idle time...</vh></v>
<v t="ekr.20031218072017.2204"><vh>Indices</vh></v>
<v t="ekr.20031218072017.2205"><vh>Insert point</vh></v>
<v t="ekr.20031218072017.2206"><vh>Menus</vh></v>
<v t="ekr.20031218072017.2207"><vh>Selection</vh></v>
<v t="ekr.20031218072017.2208"><vh>Text</vh>
<v t="ekr.20031218072017.2209"><vh>delete...</vh></v>
<v t="ekr.20031218072017.2210"><vh>get...</vh>
<v t="ekr.20031218072017.2211"><vh>getInsertLines</vh></v>
<v t="ekr.20031218072017.2212"><vh>getSelectionAreas</vh></v>
<v t="ekr.20031218072017.2213"><vh>getSelectionLines (nullBody)</vh></v>
</v>
<v t="ekr.20031218072017.2214"><vh>Insert...</vh></v>
<v t="ekr.20031218072017.2215"><vh>setSelectionAreas</vh></v>
</v>
<v t="ekr.20031218072017.2216"><vh>Visibility &amp; scrolling</vh></v>
</v>
<v t="ekr.20031218072017.2217"><vh>oops</vh></v>
</v>
<v t="ekr.20031218072017.2222"><vh>class nullFrame</vh></v>
<v t="ekr.20031218072017.2232"><vh>class nullLog</vh></v>
<v t="ekr.20031218072017.2233"><vh>class nullTree</vh>
<v t="ekr.20031218072017.2234"><vh> nullTree.__init__</vh></v>
<v t="ekr.20031218072017.2235"><vh>oops</vh></v>
<v t="ekr.20031218072017.2236"><vh>Dummy operations...</vh>
<v t="ekr.20031218072017.2237"><vh>Drawing</vh></v>
<v t="ekr.20031218072017.2238"><vh>Edit label</vh></v>
<v t="ekr.20031218072017.2239"><vh>Scrolling</vh></v>
<v t="ekr.20031218072017.2240"><vh>Tree operations</vh></v>
</v>
<v t="ekr.20031218072017.2241"><vh>getFont &amp; setFont</vh></v>
<v t="ekr.20031218072017.2242"><vh>select</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3719" tnodeList="ekr.20031218072017.3719,ekr.20031218072017.3720,ekr.20040131103531,ekr.20031218072017.3722,ekr.20031218072017.2188,ekr.20031218072017.2189,ekr.20031218072017.3724,ekr.20031218072017.3725,ekr.20031218072017.3726,ekr.20031218072017.3727,ekr.20031218072017.3728,ekr.20031218072017.3729,ekr.20031218072017.3730,ekr.20031218072017.3731,ekr.20031218072017.3732,ekr.20031218072017.3733,ekr.20031218072017.3734,ekr.20031218072017.3735,ekr.20031218072017.3736,ekr.20031218072017.3737,ekr.20031218072017.3738,ekr.20031218072017.3739,ekr.20031218072017.3740,ekr.20031218072017.3741,ekr.20031218072017.2223,ekr.20031218072017.2225,ekr.20031219075221,ekr.20031218072017.2226,ekr.20031218072017.2227,ekr.20031218072017.2228,ekr.20031218072017.2229,ekr.20031218072017.2230,ekr.20031218072017.2231,ekr.20031218072017.3742,ekr.20031218072017.3743,ekr.20031218072017.3744,ekr.20031218072017.3745,ekr.20031218072017.3746,ekr.20031218072017.3747"><vh>@file leoGui.py</vh>
<v t="ekr.20031218072017.3720"><vh>class leoGui</vh>
<v t="ekr.20040131103531"><vh>&lt;&lt; define leoGui file types &gt;&gt; (not used yet)</vh></v>
<v t="ekr.20031218072017.3721"><vh>app.gui Birth &amp; death</vh>
<v t="ekr.20031218072017.3722"><vh> leoGui.__init__</vh></v>
<v t="ekr.20031218072017.2188"><vh>newLeoCommanderAndFrame (gui-independent)</vh>
<v t="ekr.20031218072017.2189"><vh>&lt;&lt; compute the window title &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3723"><vh>stubs</vh>
<v t="ekr.20031218072017.3724"><vh>createRootWindow</vh></v>
<v t="ekr.20031218072017.3725"><vh>destroySelf</vh></v>
<v t="ekr.20031218072017.3726"><vh>finishCreate</vh></v>
<v t="ekr.20031218072017.3727"><vh>killGui</vh></v>
<v t="ekr.20031218072017.3728"><vh>recreateRootWindow</vh></v>
<v t="ekr.20031218072017.3729"><vh>runMainLoop</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3730"><vh>app.gui dialogs</vh></v>
<v t="ekr.20031218072017.3731"><vh>app.gui file dialogs</vh></v>
<v t="ekr.20031218072017.3732"><vh>app.gui panels</vh></v>
<v t="ekr.20031218072017.3733"><vh>app.gui utils</vh>
<v t="ekr.20031218072017.3734"><vh>Clipboard</vh></v>
<v t="ekr.20031218072017.3735"><vh>Dialog utils</vh></v>
<v t="ekr.20031218072017.3736"><vh>Font</vh></v>
<v t="ekr.20031218072017.3737"><vh>Focus</vh></v>
<v t="ekr.20031218072017.3738"><vh>Index</vh></v>
<v t="ekr.20031218072017.3739"><vh>Idle time</vh></v>
</v>
<v t="ekr.20031218072017.3740"><vh>guiName</vh></v>
<v t="ekr.20031218072017.3741"><vh>oops</vh></v>
</v>
<v t="ekr.20031218072017.2223"><vh>class nullGui (runs scripts)</vh>
<v t="ekr.20031218072017.2224"><vh>Birth &amp; death</vh>
<v t="ekr.20031218072017.2225"><vh> nullGui.__init__</vh></v>
<v t="ekr.20031219075221"><vh> nullGui.__getattr__</vh></v>
<v t="ekr.20031218072017.2226"><vh>createLeoFrame</vh></v>
<v t="ekr.20031218072017.2227"><vh>createRootWindow</vh></v>
<v t="ekr.20031218072017.2228"><vh>finishCreate</vh></v>
<v t="ekr.20031218072017.2229"><vh>runMainLoop</vh></v>
</v>
<v t="ekr.20031218072017.2230"><vh>oops</vh></v>
<v t="ekr.20031218072017.2231"><vh>setScript</vh></v>
</v>
<v t="ekr.20031218072017.3742"><vh>class unitTestGui</vh>
<v t="ekr.20031218072017.3743"><vh> test.gui.__init__&amp; destroySelf</vh></v>
<v t="ekr.20031218072017.3744"><vh>dialogs (unitTestGui)</vh></v>
<v t="ekr.20031218072017.3745"><vh>dummy routines</vh></v>
<v t="ekr.20031218072017.3746"><vh>oops</vh></v>
<v t="ekr.20031218072017.3747"><vh>simulateDialog</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3748" tnodeList="ekr.20031218072017.3748"><vh>@file leoKeys.py</vh></v>
<v t="ekr.20031218072017.3812" tnodeList="ekr.20031218072017.3812,ekr.20031218072017.3813,ekr.20031218072017.3815,ekr.20031218072017.3816,ekr.20031218072017.3817,ekr.20031218072017.3818,ekr.20031218072017.3819,ekr.20031218072017.3820"><vh>@file leoPrefs.py</vh>
<v t="ekr.20031218072017.3813"><vh>&lt;&lt; define leoPrefs constants &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3814"><vh>Birth</vh>
<v t="ekr.20031218072017.3815"><vh>prefs.__init__</vh></v>
<v t="ekr.20031218072017.3816"><vh>prefs.init</vh>
<v t="ekr.20031218072017.3817"><vh>&lt;&lt; remember values for revert &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3818"><vh>restoreOptions</vh></v>
<v t="ekr.20031218072017.3819"><vh>Must be overridden in subclasses</vh></v>
<v t="ekr.20031218072017.3820"><vh>printIvars</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3821"><vh>Gui Tkinter classes</vh>
<v t="ekr.20031218072017.3822" tnodeList="ekr.20031218072017.3822,ekr.20031218072017.3823,ekr.20031218072017.3824,ekr.20031218072017.3825,ekr.20031218072017.3826,ekr.20031218072017.3827,ekr.20031218072017.3828,ekr.20031218072017.3829,ekr.20031218072017.3830,ekr.20031218072017.3831,ekr.20031218072017.3832,ekr.20031218072017.3833,ekr.20031218072017.1875,ekr.20031218072017.1876,ekr.20031218072017.3834,ekr.20031218072017.3835,ekr.20031218072017.3836,ekr.20031218072017.3837"><vh>@file leoTkinterColorPanels.py</vh>
<v t="ekr.20031218072017.3823"><vh>&lt;&lt; define gui-dependent color panel data &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3824"><vh>class leoTkinterColorNamePanel</vh>
<v t="ekr.20031218072017.3825"><vh>namePanel.__init__</vh></v>
<v t="ekr.20031218072017.3826"><vh>getSelection</vh></v>
<v t="ekr.20031218072017.3827"><vh>createFrame</vh>
<v t="ekr.20031218072017.3828"><vh>&lt;&lt; create color name panel &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3829"><vh>onOk, onCancel, onRevert, OnApply</vh></v>
<v t="ekr.20031218072017.3830"><vh>select</vh></v>
</v>
<v t="ekr.20031218072017.3831"><vh>class leoTkinterColorPanel</vh>
<v t="ekr.20031218072017.3832"><vh>colorPanel.__init__</vh></v>
<v t="ekr.20031218072017.3833"><vh>bringToFront</vh></v>
<v t="ekr.20031218072017.1875"><vh>createFrame (color panel)</vh>
<v t="ekr.20031218072017.1876"><vh>&lt;&lt; create color panel &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3834"><vh>showColorPicker</vh></v>
<v t="ekr.20031218072017.3835"><vh>showColorName</vh></v>
<v t="ekr.20031218072017.3836"><vh>colorPanel.onOk, onCancel, onRevert</vh></v>
<v t="ekr.20031218072017.3837"><vh>update</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3838" tnodeList="ekr.20031218072017.3838,ekr.20031218072017.3840,ekr.20031218072017.3841,ekr.20031218072017.3842,ekr.20031218072017.3843,ekr.20031218072017.3844,ekr.20031218072017.3845,ekr.20031218072017.3846,ekr.20031218072017.3847,ekr.20031218072017.3848,ekr.20031218072017.3849,ekr.20031218072017.3850,ekr.20031218072017.3851,ekr.20031218072017.3852,ekr.20031218072017.3854,ekr.20031218072017.3855,ekr.20031218072017.3856,ekr.20031218072017.3857"><vh>@file leoTkinterComparePanel.py</vh>
<v t="ekr.20031218072017.3839"><vh>Birth...</vh>
<v t="ekr.20031218072017.3840"><vh> tkinterComparePanel.__init__</vh>
<v t="ekr.20031218072017.3841"><vh>&lt;&lt; init tkinter compare ivars &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3842"><vh>finishCreate</vh></v>
<v t="ekr.20031218072017.3843"><vh>createFrame</vh>
<v t="ekr.20031218072017.3844"><vh>&lt;&lt; create the organizer frames &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3845"><vh>&lt;&lt; create the browser rows &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3846"><vh>&lt;&lt; create the extension row &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3847"><vh>&lt;&lt; create the whitespace options frame &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3848"><vh>&lt;&lt; create the print options frame &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3849"><vh>&lt;&lt; create the compare buttons &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3850"><vh>setIvarsFromWidgets</vh></v>
</v>
<v t="ekr.20031218072017.3851"><vh>bringToFront</vh></v>
<v t="ekr.20031218072017.3852"><vh>browser</vh></v>
<v t="ekr.20031218072017.3853"><vh>Event handlers...</vh>
<v t="ekr.20031218072017.3854"><vh>onBrowse...</vh></v>
<v t="ekr.20031218072017.3855"><vh>onClose</vh></v>
<v t="ekr.20031218072017.3856"><vh>onCompare...</vh></v>
<v t="ekr.20031218072017.3857"><vh>onPrintMatchedLines</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3858" tnodeList="ekr.20031218072017.3858,ekr.20031218072017.3859,ekr.20031218072017.3860,ekr.20031218072017.3861,ekr.20031218072017.3862,ekr.20031218072017.3863,ekr.20031218072017.3864,ekr.20031218072017.3865,ekr.20031218072017.3866,ekr.20031218072017.3867,ekr.20031218072017.3868,ekr.20031218072017.3869,ekr.20031218072017.3870,ekr.20031218072017.3871,ekr.20031218072017.3872,ekr.20031218072017.1983,ekr.20031218072017.1984,ekr.20031218072017.1985,ekr.20031218072017.1986,ekr.20031218072017.1987,ekr.20031218072017.1988,ekr.20031218072017.1989,ekr.20031218072017.1990,ekr.20031218072017.3873,ekr.20031218072017.3874,ekr.20031218072017.3875,ekr.20031218072017.3876,ekr.20031218072017.3877,ekr.20031218072017.3878,ekr.20031218072017.3879,ekr.20031218072017.3880,ekr.20031218072017.3881,ekr.20031218072017.3882,ekr.20031218072017.3883,ekr.20031218072017.3884,ekr.20031218072017.3885,ekr.20031218072017.3886,ekr.20031218072017.3887,ekr.20031218072017.3888,ekr.20031218072017.3889,ekr.20031218072017.3890,ekr.20031218072017.3891,ekr.20031218072017.3892,ekr.20031218072017.3893,ekr.20031218072017.3894,ekr.20031218072017.3895,ekr.20031218072017.3896"><vh>@file leoTkinterDialog.py</vh>
<v t="ekr.20031218072017.3859"><vh> class leoTkinterDialog</vh>
<v t="ekr.20031218072017.3860"><vh>__init__ (leoDialog)</vh></v>
<v t="ekr.20031218072017.3861"><vh>cancelButton, noButton, okButton, yesButton</vh></v>
<v t="ekr.20031218072017.3862"><vh>center</vh></v>
<v t="ekr.20031218072017.3863"><vh>createButtons</vh></v>
<v t="ekr.20031218072017.3864"><vh>createMessageFrame</vh></v>
<v t="ekr.20031218072017.3865"><vh>createTopFrame</vh></v>
<v t="ekr.20031218072017.3866"><vh>run</vh></v>
</v>
<v t="ekr.20031218072017.3867"><vh>class tkinterAboutLeo</vh>
<v t="ekr.20031218072017.3868"><vh>tkinterAboutLeo.__init__</vh></v>
<v t="ekr.20031218072017.3869"><vh>tkinterAboutLeo.createFrame</vh></v>
<v t="ekr.20031218072017.3870"><vh>tkinterAboutLeo.onAboutLeoEmail</vh></v>
<v t="ekr.20031218072017.3871"><vh>tkinterAboutLeo.onAboutLeoUrl</vh></v>
<v t="ekr.20031218072017.3872"><vh>tkinterAboutLeo: setArrowCursor, setDefaultCursor</vh></v>
</v>
<v t="ekr.20031218072017.1983"><vh>class tkinterAskLeoID</vh>
<v t="ekr.20031218072017.1984"><vh>tkinterAskLeoID.__init__</vh></v>
<v t="ekr.20031218072017.1985"><vh>tkinterAskLeoID.createFrame</vh></v>
<v t="ekr.20031218072017.1986"><vh>tkinterAskLeoID.onCloseWindow</vh></v>
<v t="ekr.20031218072017.1987"><vh>tkinterAskLeoID.onButton</vh></v>
<v t="ekr.20031218072017.1988"><vh>tkinterAskLeoID.onKey</vh>
<v t="ekr.20031218072017.1989"><vh>&lt;&lt; eliminate invalid characters &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1990"><vh>&lt;&lt; enable the ok button if there are 3 or more valid characters &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3873"><vh>class tkinterAskOk</vh>
<v t="ekr.20031218072017.3874"><vh>class tkinterAskOk.__init__</vh></v>
<v t="ekr.20031218072017.3875"><vh>class tkinterAskOk.onKey</vh></v>
</v>
<v t="ekr.20031218072017.3876"><vh>class tkinterAskOkCancelNumber</vh>
<v t="ekr.20031218072017.3877"><vh>tkinterAskOKCancelNumber.__init__</vh></v>
<v t="ekr.20031218072017.3878"><vh>tkinterAskOKCancelNumber.createFrame</vh></v>
<v t="ekr.20031218072017.3879"><vh>tkinterAskOKCancelNumber.okButton, cancelButton</vh></v>
<v t="ekr.20031218072017.3880"><vh>tkinterAskOKCancelNumber.onKey</vh>
<v t="ekr.20031218072017.3881"><vh>&lt;&lt; eliminate non-numbers &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3882"><vh>class tkinterAskYesNo</vh>
<v t="ekr.20031218072017.3883"><vh>tkinterAskYesNo.__init__</vh></v>
<v t="ekr.20031218072017.3884"><vh>tkinterAskYesNo.onKey</vh></v>
</v>
<v t="ekr.20031218072017.3885"><vh>class tkinterAskYesNoCancel</vh>
<v t="ekr.20031218072017.3886"><vh>askYesNoCancel.__init__</vh></v>
<v t="ekr.20031218072017.3887"><vh>askYesNoCancel.onKey</vh></v>
<v t="ekr.20031218072017.3888"><vh>askYesNoCancel.noButton &amp; yesButton</vh></v>
</v>
<v t="ekr.20031218072017.3889"><vh>class tkinterListboxDialog</vh>
<v t="ekr.20031218072017.3890"><vh>tkinterListboxDialog.__init__</vh></v>
<v t="ekr.20031218072017.3891"><vh>addStdButtons</vh></v>
<v t="ekr.20031218072017.3892"><vh>createFrame</vh></v>
<v t="ekr.20031218072017.3893"><vh>destroy</vh></v>
<v t="ekr.20031218072017.3894"><vh>hide</vh></v>
<v t="ekr.20031218072017.3895"><vh>fillbox</vh></v>
<v t="ekr.20031218072017.3896"><vh>go</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3897" tnodeList="ekr.20031218072017.3897,ekr.20031218072017.3899,ekr.20031218072017.3900,ekr.20031218072017.3901,ekr.20031218072017.3902,ekr.20031218072017.3904,ekr.20031218072017.3903,ekr.20031218072017.3905,ekr.20031218072017.2059,ekr.20031218072017.2060,ekr.20031218072017.2061,ekr.20031218072017.1460,ekr.20031218072017.3906,ekr.20031218072017.3907,ekr.20031218072017.3908"><vh>@file leoTkinterFind.py</vh>
<v t="ekr.20031218072017.3898"><vh>Birth &amp; death</vh>
<v t="ekr.20031218072017.3899"><vh>__init__</vh>
<v t="ekr.20031218072017.3900"><vh>&lt;&lt; init the tkinter ivars &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3901"><vh>destroySelf</vh></v>
<v t="ekr.20031218072017.3902"><vh>find.createFrame</vh>
<v t="ekr.20031218072017.3903"><vh>&lt;&lt; Create four columns of radio and checkboxes &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3904"><vh>&lt;&lt; Create the Find and Change panes &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3905"><vh>&lt;&lt; Create two rows of buttons &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2059"><vh>find.init</vh>
<v t="ekr.20031218072017.2060"><vh>&lt;&lt; set find/change widgets &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2061"><vh>&lt;&lt; set radio buttons from ivars &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1460"><vh>find.set_ivars</vh></v>
</v>
<v t="ekr.20031218072017.3906"><vh>onCloseWindow</vh></v>
<v t="ekr.20031218072017.3907"><vh>bringToFront</vh></v>
<v t="ekr.20031218072017.3908"><vh>Tkinter wrappers (leoTkinterFind)</vh></v>
</v>
<v t="ekr.20031218072017.3909" tnodeList="ekr.20031218072017.3909,ekr.20031218072017.3911,ekr.20031218072017.3912,ekr.20031218072017.3913,ekr.20031218072017.3914,ekr.20031218072017.3915,ekr.20031218072017.3916,ekr.20031218072017.3917,ekr.20031218072017.3918,ekr.20031218072017.3919,ekr.20031218072017.2358,ekr.20031218072017.3921,ekr.20031218072017.3922,ekr.20031218072017.3924,ekr.20031218072017.3925,ekr.20031218072017.3926,ekr.20031218072017.3927,ekr.20031218072017.3928,ekr.20031218072017.3929,ekr.20031218072017.3931,ekr.20031218072017.3932,ekr.20031218072017.3933,ekr.20031218072017.3934,ekr.20031218072017.3935,ekr.20031218072017.3936,ekr.20031218072017.3937,ekr.20031218072017.3938"><vh>@file leoTkinterFontPanel.py</vh>
<v t="ekr.20031218072017.3910"><vh>Birth</vh>
<v t="ekr.20031218072017.3911"><vh>tkinterFont.__init__</vh></v>
<v t="ekr.20031218072017.3912"><vh>createFrame</vh>
<v t="ekr.20031218072017.3913"><vh>&lt;&lt; create the Tk.IntVars &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3914"><vh>&lt;&lt; create the organizer frames &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3915"><vh>&lt;&lt; create the font pane &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3916"><vh>&lt;&lt; create the checkboxes &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3917"><vh>&lt;&lt; create the buttons &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3918"><vh>finishCreate</vh></v>
<v t="ekr.20031218072017.3919"><vh>setRevertVars</vh></v>
</v>
<v t="ekr.20031218072017.2358"><vh>bringToFront</vh></v>
<v t="ekr.20031218072017.3920"><vh>Events</vh>
<v t="ekr.20031218072017.3921"><vh>selectFont</vh></v>
<v t="ekr.20031218072017.3922"><vh>onSizeEntryKey</vh></v>
</v>
<v t="ekr.20031218072017.3923"><vh>Buttons</vh>
<v t="ekr.20031218072017.3924"><vh>onApply</vh></v>
<v t="ekr.20031218072017.3925"><vh>onCancel</vh></v>
<v t="ekr.20031218072017.3926"><vh>onOk</vh>
<v t="ekr.20031218072017.3927"><vh>&lt;&lt; update the configuration settings &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3928"><vh>onRevert</vh></v>
<v t="ekr.20031218072017.3929"><vh>hide</vh></v>
</v>
<v t="ekr.20031218072017.3930"><vh>Helpers</vh>
<v t="ekr.20031218072017.3931"><vh>getActiveFont</vh></v>
<v t="ekr.20031218072017.3932"><vh>getFontSettings</vh></v>
<v t="ekr.20031218072017.3933"><vh>getImpliedFont</vh></v>
<v t="ekr.20031218072017.3934"><vh>revertIvars</vh></v>
<v t="ekr.20031218072017.3935"><vh>showSettings</vh></v>
<v t="ekr.20031218072017.3936"><vh>update</vh>
<v t="ekr.20031218072017.3937"><vh>&lt;&lt; insert the new text in the size box &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3938"><vh>&lt;&lt; set the fonts in all panes &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.3939" tnodeList="ekr.20031218072017.3939,ekr.20031218072017.3940,ekr.20031218072017.1801,ekr.20031218072017.1802,ekr.20031218072017.3942,ekr.20031218072017.3944,ekr.20031218072017.2176,ekr.20031218072017.2177,ekr.20031218072017.2178,ekr.20031218072017.2179,ekr.20031218072017.2180,ekr.20031218072017.3945,ekr.20031218072017.3946,ekr.20031218072017.3947,ekr.20031218072017.3948,ekr.20031218072017.3949,ekr.20031218072017.3950,ekr.20031218072017.3951,ekr.20031218072017.3952,ekr.20031218072017.3954,ekr.20031218072017.3955,ekr.20031218072017.3956,ekr.20031218072017.3957,ekr.20031218072017.3958,ekr.20031218072017.3959,ekr.20031218072017.3960,ekr.20031218072017.3961,ekr.20031218072017.3962,ekr.20031218072017.3963,ekr.20031218072017.1733,ekr.20031218072017.1975,ekr.20031218072017.1976,ekr.20031218072017.3965,ekr.20031218072017.1974,ekr.20031218072017.3966,ekr.20031218072017.3968,ekr.20031218072017.3969,ekr.20031218072017.2246,ekr.20031218072017.1625,ekr.20031218072017.722,ekr.20031218072017.1540,ekr.20031218072017.2307,ekr.20031218072017.3970,ekr.20031218072017.3972,ekr.20031218072017.3973,ekr.20031218072017.3974,ekr.20031218072017.3975,ekr.20031218072017.2253,ekr.20031218072017.3976,ekr.20031218072017.3977,ekr.20031218072017.3978,ekr.20031218072017.1803,ekr.20031218072017.3981,ekr.20031218072017.841,ekr.20031218072017.842,ekr.20031218072017.843,ekr.20031218072017.3982,ekr.20031218072017.3983,ekr.20031218072017.3985,ekr.20031218072017.3986,ekr.20031218072017.3987,ekr.20031218072017.3988,ekr.20031218072017.3989,ekr.20031218072017.3990,ekr.20031218072017.3992,ekr.20031218072017.3993,ekr.20031218072017.3994,ekr.20031218072017.998,ekr.20031218072017.3995,ekr.20031218072017.3996,ekr.20031218072017.2182,ekr.20031218072017.838,ekr.20031218072017.3998,ekr.20031218072017.2183,ekr.20031218072017.1320,ekr.20031218072017.1321,ekr.20031218072017.1322,ekr.20031218072017.1323,ekr.20031218072017.1324,ekr.20031218072017.1325,ekr.20031218072017.1326,ekr.20031218072017.1327,ekr.20031218072017.1328,ekr.20031218072017.1329,ekr.20031218072017.1330,ekr.20040105223536,ekr.20040105223536.1,ekr.20031218072017.1331,ekr.20031218072017.3999,ekr.20031218072017.4000,ekr.20031218072017.4001,ekr.20031218072017.4002,ekr.20031218072017.2184,ekr.20031218072017.4003,ekr.20031218072017.4004,ekr.20031218072017.4005,ekr.20031218072017.4007,ekr.20031218072017.4008,ekr.20031218072017.4009,ekr.20031218072017.4010,ekr.20031218072017.4011,ekr.20031218072017.4012,ekr.20031218072017.495,ekr.20031218072017.4014,ekr.20031218072017.4015,ekr.20031218072017.4016,ekr.20031218072017.4017,ekr.20031218072017.4019,ekr.20031218072017.4020,ekr.20031218072017.4021,ekr.20031218072017.4022,ekr.20031218072017.4023,ekr.20031218072017.4024,ekr.20031218072017.4026,ekr.20031218072017.4028,ekr.20031218072017.4029,ekr.20031218072017.4030,ekr.20031218072017.4031,ekr.20031218072017.2377,ekr.20031218072017.4032,ekr.20031218072017.4034,ekr.20031218072017.4035,ekr.20031218072017.4036,ekr.20031218072017.4037,ekr.20031218072017.4038,ekr.20031218072017.4039,ekr.20031218072017.4040,ekr.20031218072017.4041,ekr.20031218072017.4042,ekr.20031218072017.4043,ekr.20031218072017.4044,ekr.20031218072017.4045,ekr.20031218072017.1473,ekr.20031218072017.4046"><vh>@file leoTkinterFrame.py</vh>
<v t="ekr.20031218072017.3940"><vh>class leoTkinterFrame</vh>
<v t="ekr.20031218072017.3941"><vh> frame.Birth &amp; Death</vh>
<v t="ekr.20031218072017.1801"><vh>f.__init__</vh>
<v t="ekr.20031218072017.1802"><vh>&lt;&lt; set the leoTkinterFrame ivars &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3942"><vh>f.__repr__</vh></v>
<v t="ekr.20031218072017.3943"><vh>Creating the frame</vh>
<v t="ekr.20031218072017.3944"><vh>f.createCanvas</vh></v>
<v t="ekr.20031218072017.2176"><vh>f.finishCreate</vh>
<v t="ekr.20031218072017.2177"><vh>&lt;&lt; create the toplevel frame &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2178"><vh>&lt;&lt; create all the subframes &gt;&gt;</vh>
<v t="ekr.20031218072017.2179"><vh>&lt;&lt; create both splitters &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2180"><vh>&lt;&lt; create the first tree node &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3945"><vh>Creating the splitter</vh>
<v t="ekr.20031218072017.3946"><vh>resizePanesToRatio</vh></v>
<v t="ekr.20031218072017.3947"><vh>bindBar</vh></v>
<v t="ekr.20031218072017.3948"><vh>createLeoSplitter</vh></v>
<v t="ekr.20031218072017.3949"><vh>divideAnySplitter</vh></v>
<v t="ekr.20031218072017.3950"><vh>divideLeoSplitter</vh></v>
<v t="ekr.20031218072017.3951"><vh>onDrag...</vh></v>
<v t="ekr.20031218072017.3952"><vh>placeSplitter</vh></v>
</v>
<v t="ekr.20031218072017.3953"><vh>Creating the icon area</vh>
<v t="ekr.20031218072017.3954"><vh>createIconBar</vh></v>
<v t="ekr.20031218072017.3955"><vh>hideIconBar</vh></v>
<v t="ekr.20031218072017.3956"><vh>clearIconBar</vh></v>
<v t="ekr.20031218072017.3957"><vh>showIconBar</vh></v>
<v t="ekr.20031218072017.3958"><vh>addIconButton</vh>
<v t="ekr.20031218072017.3959"><vh>&lt;&lt; create a picture &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3960"><vh>Creating the status area</vh>
<v t="ekr.20031218072017.3961"><vh>createStatusLine</vh></v>
<v t="ekr.20031218072017.3962"><vh>clearStatusLine</vh></v>
<v t="ekr.20031218072017.3963"><vh>putStatusLine</vh></v>
<v t="ekr.20031218072017.1733"><vh>updateStatusRowCol</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3964"><vh>Destroying the frame</vh>
<v t="ekr.20031218072017.1975"><vh>destroyAllObjects</vh>
<v t="ekr.20031218072017.1976"><vh>&lt;&lt; clear all vnodes and tnodes in the tree&gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3965"><vh>destroyAllPanels</vh></v>
<v t="ekr.20031218072017.1974"><vh>destroySelf</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3966"><vh>bringToFront</vh></v>
<v t="ekr.20031218072017.3967"><vh>Configuration</vh>
<v t="ekr.20031218072017.3968"><vh>configureBar</vh></v>
<v t="ekr.20031218072017.3969"><vh>configureBarsFromConfig</vh></v>
<v t="ekr.20031218072017.2246"><vh>reconfigureFromConfig</vh></v>
<v t="ekr.20031218072017.1625"><vh>setInitialWindowGeometry</vh></v>
<v t="ekr.20031218072017.722"><vh>setTabWidth</vh></v>
<v t="ekr.20031218072017.1540"><vh>setWrap</vh></v>
<v t="ekr.20031218072017.2307"><vh>setTopGeometry</vh></v>
<v t="ekr.20031218072017.3970"><vh>reconfigurePanes (use config bar_width)</vh></v>
</v>
<v t="ekr.20031218072017.3971"><vh>Event handlers (Frame)</vh>
<v t="ekr.20031218072017.3972"><vh>frame.OnCloseLeoEvent</vh></v>
<v t="ekr.20031218072017.3973"><vh>frame.OnControlKeyUp/Down</vh></v>
<v t="ekr.20031218072017.3974"><vh>frame.OnVisibility</vh></v>
<v t="ekr.20031218072017.3975"><vh>OnActivateBody</vh></v>
<v t="ekr.20031218072017.2253"><vh>OnActivateLeoEvent, OnDeactivateLeoEvent</vh></v>
<v t="ekr.20031218072017.3976"><vh>OnActivateTree</vh></v>
<v t="ekr.20031218072017.3977"><vh>OnBodyClick, OnBodyRClick (Events)</vh></v>
<v t="ekr.20031218072017.3978"><vh>OnBodyDoubleClick (Events)</vh></v>
<v t="ekr.20031218072017.1803"><vh>OnMouseWheel (Tomaz Ficko)</vh></v>
</v>
<v t="ekr.20031218072017.3979"><vh>Gui-dependent commands</vh>
<v t="ekr.20031218072017.3980"><vh>Edit Menu...</vh>
<v t="ekr.20031218072017.3981"><vh>abortEditLabelCommand</vh></v>
<v t="ekr.20031218072017.840"><vh>Cut/Copy/Paste body text</vh>
<v t="ekr.20031218072017.841"><vh>frame.OnCut, OnCutFrom Menu</vh></v>
<v t="ekr.20031218072017.842"><vh>frame.OnCopy, OnCopyFromMenu</vh></v>
<v t="ekr.20031218072017.843"><vh>frame.OnPaste, OnPasteNode, OnPasteFromMenu</vh></v>
</v>
<v t="ekr.20031218072017.3982"><vh>endEditLabelCommand</vh></v>
<v t="ekr.20031218072017.3983"><vh>insertHeadlineTime</vh></v>
</v>
<v t="ekr.20031218072017.3984"><vh>Window Menu...</vh>
<v t="ekr.20031218072017.3985"><vh>toggleActivePane</vh></v>
<v t="ekr.20031218072017.3986"><vh>cascade</vh></v>
<v t="ekr.20031218072017.3987"><vh>equalSizedPanes</vh></v>
<v t="ekr.20031218072017.3988"><vh>hideLogWindow</vh></v>
<v t="ekr.20031218072017.3989"><vh>minimizeAll</vh></v>
<v t="ekr.20031218072017.3990"><vh>toggleSplitDirection</vh></v>
</v>
<v t="ekr.20031218072017.3991"><vh>Help Menu...</vh>
<v t="ekr.20031218072017.3992"><vh>leoHelp</vh>
<v t="ekr.20031218072017.3993"><vh>showProgressBar</vh>
<v t="ekr.20031218072017.3994"><vh>&lt;&lt; create the scale widget &gt;&gt;</vh></v>
</v>
</v>
</v>
</v>
<v t="ekr.20031218072017.998"><vh>Scrolling callbacks (frame)</vh></v>
<v t="ekr.20031218072017.3995"><vh>Tk bindings...</vh></v>
</v>
<v t="ekr.20031218072017.3996"><vh>class leoTkinterBody</vh>
<v t="ekr.20031218072017.3997"><vh> Birth &amp; death</vh>
<v t="ekr.20031218072017.2182"><vh>tkBody. __init__</vh></v>
<v t="ekr.20031218072017.838"><vh>tkBody.createBindings</vh></v>
<v t="ekr.20031218072017.3998"><vh>tkBody.createControl</vh></v>
</v>
<v t="ekr.20031218072017.2183"><vh>tkBody.setFontFromConfig</vh></v>
<v t="ekr.20031218072017.1320"><vh>body key handlers</vh>
<v t="ekr.20031218072017.1321"><vh>idle_body_key</vh>
<v t="ekr.20031218072017.1322"><vh>&lt;&lt; return if nothing has changed &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1323"><vh>&lt;&lt; set removeTrailing &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1324"><vh>&lt;&lt; Do auto indent &gt;&gt; (David McNab)</vh></v>
<v t="ekr.20031218072017.1325"><vh>&lt;&lt; convert tab to blanks &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1326"><vh>&lt;&lt; set s to widget text, removing trailing newlines if necessary &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1327"><vh>&lt;&lt; recolor the body &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1328"><vh>&lt;&lt; redraw the screen if necessary &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1329"><vh>onBodyChanged (called from core)</vh></v>
<v t="ekr.20031218072017.1330"><vh>onBodyKey</vh>
<v t="ekr.20040105223536"><vh>handleStatusLineKey</vh>
<v t="ekr.20040105223536.1"><vh>&lt;&lt; trace the key event &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1331"><vh>onBodyWillChange</vh></v>
</v>
<v t="ekr.20031218072017.3999"><vh>forceRecolor</vh></v>
<v t="ekr.20031218072017.4000"><vh>Tk bindings (leoTkinterBody)</vh>
<v t="ekr.20031218072017.4001"><vh>Bounding box (Tk spelling)</vh></v>
<v t="ekr.20031218072017.4002"><vh>Color tags (Tk spelling)</vh></v>
<v t="ekr.20031218072017.2184"><vh>Configuration (Tk spelling)</vh></v>
<v t="ekr.20031218072017.4003"><vh>Focus</vh></v>
<v t="ekr.20031218072017.4004"><vh>Height &amp; width</vh></v>
<v t="ekr.20031218072017.4005"><vh>Idle time...</vh></v>
<v t="ekr.20031218072017.4006"><vh>Indices</vh>
<v t="ekr.20031218072017.4007"><vh>adjustIndex</vh></v>
<v t="ekr.20031218072017.4008"><vh>compareIndices</vh></v>
<v t="ekr.20031218072017.4009"><vh>convertRowColumnToIndex</vh></v>
<v t="ekr.20031218072017.4010"><vh>convertIndexToRowColumn</vh></v>
<v t="ekr.20031218072017.4011"><vh>getImageIndex</vh></v>
<v t="ekr.20031218072017.4012"><vh>tkIndex (internal use only)</vh></v>
</v>
<v t="ekr.20031218072017.4013"><vh>Insert point</vh>
<v t="ekr.20031218072017.495"><vh>getInsertionPoint &amp; getBeforeInsertionPoint</vh></v>
<v t="ekr.20031218072017.4014"><vh>getCharAtInsertPoint &amp; getCharBeforeInsertPoint</vh></v>
<v t="ekr.20031218072017.4015"><vh>makeInsertPointVisible</vh></v>
<v t="ekr.20031218072017.4016"><vh>setInsertionPointTo...</vh></v>
</v>
<v t="ekr.20031218072017.4017"><vh>Menus</vh></v>
<v t="ekr.20031218072017.4018"><vh>Selection</vh>
<v t="ekr.20031218072017.4019"><vh>deleteTextSelection</vh></v>
<v t="ekr.20031218072017.4020"><vh>getSelectedText</vh></v>
<v t="ekr.20031218072017.4021"><vh>getTextSelection</vh></v>
<v t="ekr.20031218072017.4022"><vh>hasTextSelection</vh></v>
<v t="ekr.20031218072017.4023"><vh>selectAllText</vh></v>
<v t="ekr.20031218072017.4024"><vh>setTextSelection</vh></v>
</v>
<v t="ekr.20031218072017.4025"><vh>Text</vh>
<v t="ekr.20031218072017.4026"><vh>delete...</vh></v>
<v t="ekr.20031218072017.4027"><vh>get...</vh>
<v t="ekr.20031218072017.4028"><vh>getAllText</vh></v>
<v t="ekr.20031218072017.4029"><vh>getCharAtIndex</vh></v>
<v t="ekr.20031218072017.4030"><vh>getInsertLines</vh></v>
<v t="ekr.20031218072017.4031"><vh>getSelectionAreas</vh></v>
<v t="ekr.20031218072017.2377"><vh>getSelectionLines (tkBody)</vh></v>
<v t="ekr.20031218072017.4032"><vh>getTextRange</vh></v>
</v>
<v t="ekr.20031218072017.4033"><vh>Insert...</vh>
<v t="ekr.20031218072017.4034"><vh>insertAtInsertPoint</vh></v>
<v t="ekr.20031218072017.4035"><vh>insertAtEnd</vh></v>
<v t="ekr.20031218072017.4036"><vh>insertAtStartOfLine</vh></v>
</v>
<v t="ekr.20031218072017.4037"><vh>setSelectionAreas</vh></v>
</v>
<v t="ekr.20031218072017.4038"><vh>Visibility &amp; scrolling</vh></v>
</v>
</v>
<v t="ekr.20031218072017.4039"><vh>class leoTkinterLog</vh>
<v t="ekr.20031218072017.4040"><vh>tkLog.__init__</vh></v>
<v t="ekr.20031218072017.4041"><vh>tkLog.configureBorder &amp; configureFont</vh></v>
<v t="ekr.20031218072017.4042"><vh>tkLog.createControl</vh></v>
<v t="ekr.20031218072017.4043"><vh>tkLog.getFontConfig</vh></v>
<v t="ekr.20031218072017.4044"><vh>tkLog.hasFocus</vh></v>
<v t="ekr.20031218072017.4045"><vh>tkLog.onActivateLog</vh></v>
<v t="ekr.20031218072017.1473"><vh>tkLog.put &amp; putnl</vh></v>
<v t="ekr.20031218072017.4046"><vh>tkLog.setFontFromConfig</vh></v>
</v>
</v>
<v t="ekr.20031218072017.4047" tnodeList="ekr.20031218072017.4047,ekr.20031218072017.837,ekr.20031218072017.4049,ekr.20031218072017.1856,ekr.20031218072017.2186,ekr.20031218072017.4050,ekr.20031218072017.4051,ekr.20031218072017.4052,ekr.20031218072017.4053,ekr.20031218072017.4054,ekr.20031218072017.4055,ekr.20031218072017.4056,ekr.20031218072017.4057,ekr.20031218072017.4058,ekr.20031218072017.845,ekr.20031218072017.846,ekr.20031218072017.4061,ekr.20031218072017.4062,ekr.20031218072017.4063,ekr.20031218072017.4065,ekr.20031218072017.2373,ekr.20031218072017.2187,ekr.20031218072017.4068,ekr.20031218072017.4069,ekr.20031218072017.4070,ekr.20031218072017.4072,ekr.20031218072017.4073,ekr.20031218072017.4075,ekr.20031218072017.4076,ekr.20031218072017.4077,ekr.20031218072017.4078,ekr.20031218072017.4079,ekr.20031218072017.4080,ekr.20031218072017.4082,ekr.20031218072017.4083,ekr.20031218072017.4085,ekr.20031218072017.4086,ekr.20031218072017.4087,ekr.20031218072017.4088,ekr.20031218072017.4089,ekr.20031218072017.4091,ekr.20031218072017.4092,ekr.20031218072017.4093,ekr.20031218072017.4094,ekr.20031218072017.4095,ekr.20031218072017.4096,ekr.20031218072017.4098"><vh>@file leoTkinterGui.py</vh>
<v t="ekr.20031218072017.837"><vh> tkinterGui.__init__</vh></v>
<v t="ekr.20031218072017.4048"><vh>app.gui.Tkinter birth &amp; death</vh>
<v t="ekr.20031218072017.4049"><vh>createRootWindow &amp; allies</vh>
<v t="ekr.20031218072017.1856"><vh>setDefaultIcon</vh></v>
<v t="ekr.20031218072017.2186"><vh>tkGui.getDefaultConfigFont</vh></v>
<v t="ekr.20031218072017.4050"><vh>createGlobalWindows</vh></v>
</v>
<v t="ekr.20031218072017.4051"><vh>destroySelf</vh></v>
<v t="ekr.20031218072017.4052"><vh>finishCreate (not used: must be present)</vh></v>
<v t="ekr.20031218072017.4053"><vh>killGui (not used)</vh></v>
<v t="ekr.20031218072017.4054"><vh>recreateRootWindow (not used)</vh></v>
<v t="ekr.20031218072017.4055"><vh>runMainLoop</vh></v>
</v>
<v t="ekr.20031218072017.4056"><vh>app.gui.Tkinter dialogs</vh></v>
<v t="ekr.20031218072017.4057"><vh>app.gui.Tkinter file dialogs</vh></v>
<v t="ekr.20031218072017.4058"><vh>app.gui.Tkinter panels</vh></v>
<v t="ekr.20031218072017.4059"><vh>app.gui.Tkinter.utils</vh>
<v t="ekr.20031218072017.844"><vh>Clipboard (tkGui)</vh>
<v t="ekr.20031218072017.845"><vh>replaceClipboardWith</vh></v>
<v t="ekr.20031218072017.846"><vh>getTextFromClipboard</vh></v>
</v>
<v t="ekr.20031218072017.4060"><vh>Dialog</vh>
<v t="ekr.20031218072017.4061"><vh>get_window_info</vh></v>
<v t="ekr.20031218072017.4062"><vh>center_dialog</vh></v>
<v t="ekr.20031218072017.4063"><vh>create_labeled_frame</vh></v>
</v>
<v t="ekr.20031218072017.4064"><vh>Focus</vh>
<v t="ekr.20031218072017.4065"><vh>get_focus</vh></v>
<v t="ekr.20031218072017.2373"><vh>set_focus</vh></v>
</v>
<v t="ekr.20031218072017.4066"><vh>Font</vh>
<v t="ekr.20031218072017.2187"><vh>tkGui.getFontFromParams</vh></v>
</v>
<v t="ekr.20031218072017.4067"><vh>Icons</vh>
<v t="ekr.20031218072017.4068"><vh>attachLeoIcon &amp; createLeoIcon</vh>
<v t="ekr.20031218072017.4069"><vh>&lt;&lt; try to use the PIL and tkIcon packages to draw the icon &gt;&gt;</vh></v>
<v t="ekr.20031218072017.4070"><vh>createLeoIcon</vh></v>
</v>
</v>
<v t="ekr.20031218072017.4071"><vh>Idle Time</vh>
<v t="ekr.20031218072017.4072"><vh>setIdleTimeHook</vh></v>
<v t="ekr.20031218072017.4073"><vh>setIdleTimeHookAfterDelay</vh></v>
</v>
<v t="ekr.20031218072017.4074"><vh>Indices</vh>
<v t="ekr.20031218072017.4075"><vh>firstIndex</vh></v>
<v t="ekr.20031218072017.4076"><vh>lastIndex</vh></v>
<v t="ekr.20031218072017.4077"><vh>moveIndexBackward</vh></v>
<v t="ekr.20031218072017.4078"><vh>moveIndexForward &amp; moveIndexToNextLine</vh></v>
<v t="ekr.20031218072017.4079"><vh>compareIndices</vh></v>
<v t="ekr.20031218072017.4080"><vh>getindex</vh></v>
</v>
<v t="ekr.20031218072017.4081"><vh>Insert Point</vh>
<v t="ekr.20031218072017.4082"><vh>getInsertPoint</vh></v>
<v t="ekr.20031218072017.4083"><vh>setInsertPoint</vh></v>
</v>
<v t="ekr.20031218072017.4084"><vh>Selection</vh>
<v t="ekr.20031218072017.4085"><vh>getSelectionRange</vh></v>
<v t="ekr.20031218072017.4086"><vh>getTextSelection</vh></v>
<v t="ekr.20031218072017.4087"><vh>setSelectionRange</vh></v>
<v t="ekr.20031218072017.4088"><vh>setSelectionRangeWithLength</vh></v>
<v t="ekr.20031218072017.4089"><vh>setTextSelection</vh></v>
</v>
<v t="ekr.20031218072017.4090"><vh>Text</vh>
<v t="ekr.20031218072017.4091"><vh>getAllText</vh></v>
<v t="ekr.20031218072017.4092"><vh>getCharAfterIndex</vh></v>
<v t="ekr.20031218072017.4093"><vh>getCharAtIndex</vh></v>
<v t="ekr.20031218072017.4094"><vh>getCharBeforeIndex</vh></v>
<v t="ekr.20031218072017.4095"><vh>getLineContainingIndex</vh></v>
<v t="ekr.20031218072017.4096"><vh>replaceSelectionRangeWithText (leoTkinterGui)</vh></v>
</v>
<v t="ekr.20031218072017.4097"><vh>Visibility</vh>
<v t="ekr.20031218072017.4098"><vh>makeIndexVisible</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.4099" tnodeList="ekr.20031218072017.4099"><vh>@file leoTkinterKeys.py</vh></v>
<v t="ekr.20031218072017.4100" tnodeList="ekr.20031218072017.4100,ekr.20031218072017.4102,ekr.20031218072017.4103,ekr.20031218072017.4105,ekr.20031218072017.4106,ekr.20031218072017.4107,ekr.20031218072017.4108,ekr.20031218072017.4109,ekr.20031218072017.4110,ekr.20031218072017.4111,ekr.20031218072017.4112,ekr.20031218072017.4113,ekr.20031218072017.4115,ekr.20031218072017.4116,ekr.20031218072017.4117,ekr.20031218072017.4118,ekr.20031218072017.4119,ekr.20031218072017.4120,ekr.20031218072017.4121"><vh>@file leoTkinterMenu.py</vh>
<v t="ekr.20031218072017.4101"><vh>Birth &amp; death</vh>
<v t="ekr.20031218072017.4102"><vh>leoTkinterMenu.__init__</vh></v>
</v>
<v t="ekr.20031218072017.4103"><vh>Tkinter menu bindings</vh>
<v t="ekr.20031218072017.4104"><vh>9 Routines with Tk spellings</vh>
<v t="ekr.20031218072017.4105"><vh>add_cascade</vh></v>
<v t="ekr.20031218072017.4106"><vh>add_command</vh></v>
<v t="ekr.20031218072017.4107"><vh>add_separator</vh></v>
<v t="ekr.20031218072017.4108"><vh>bind</vh></v>
<v t="ekr.20031218072017.4109"><vh>delete</vh></v>
<v t="ekr.20031218072017.4110"><vh>delete_range</vh></v>
<v t="ekr.20031218072017.4111"><vh>destroy</vh></v>
<v t="ekr.20031218072017.4112"><vh>insert_cascade</vh></v>
<v t="ekr.20031218072017.4113"><vh>new_menu</vh></v>
</v>
<v t="ekr.20031218072017.4114"><vh>7 Routines with other spellings</vh>
<v t="ekr.20031218072017.4115"><vh>createMenuBar</vh></v>
<v t="ekr.20031218072017.4116"><vh>createOpenWithMenuFromTable</vh></v>
<v t="ekr.20031218072017.4117"><vh>defineMenuCallback (tk)</vh></v>
<v t="ekr.20031218072017.4118"><vh>defineOpenWithMenuCallback</vh></v>
<v t="ekr.20031218072017.4119"><vh>disableMenu</vh></v>
<v t="ekr.20031218072017.4120"><vh>enableMenu</vh></v>
<v t="ekr.20031218072017.4121"><vh>setMenuLabel</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.4122" tnodeList="ekr.20031218072017.4122,ekr.20031218072017.4124,ekr.20031218072017.4125,ekr.20031218072017.4126,ekr.20031218072017.4127,ekr.20031218072017.4128,ekr.20031218072017.369,ekr.20031218072017.4129,ekr.20031218072017.4130,ekr.20031218072017.4131,ekr.20031218072017.4133,ekr.20031218072017.4134,ekr.20031218072017.4135,ekr.20031218072017.4136,ekr.20031218072017.4137"><vh>@file leoTkinterPrefs.py</vh>
<v t="ekr.20031218072017.4123"><vh>Birth</vh>
<v t="ekr.20031218072017.4124"><vh>tkinterPrefs.__init__</vh></v>
<v t="ekr.20031218072017.4125"><vh>createFrame</vh>
<v t="ekr.20031218072017.4126"><vh>&lt;&lt; Create the Tk.IntVars &gt;&gt;</vh></v>
<v t="ekr.20031218072017.4127"><vh>&lt;&lt; Create the Global Options frame &gt;&gt;</vh></v>
<v t="ekr.20031218072017.4128"><vh>&lt;&lt; Create the Tangle Options frame &gt;&gt;</vh></v>
<v t="ekr.20031218072017.369"><vh>&lt;&lt; Create the Target Language frame &gt;&gt; frame</vh></v>
<v t="ekr.20031218072017.4129"><vh>&lt;&lt; Create the Ok, Cancel &amp; Revert buttons &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.4130"><vh>setWidgets</vh></v>
</v>
<v t="ekr.20031218072017.4131"><vh>bringToFront</vh></v>
<v t="ekr.20031218072017.4132"><vh>Event handlers</vh>
<v t="ekr.20031218072017.4133"><vh>hide</vh></v>
<v t="ekr.20031218072017.4134"><vh>onOK, onCancel, onRevert</vh></v>
<v t="ekr.20031218072017.4135"><vh>set_ivars &amp; idle_set_ivars</vh>
<v t="ekr.20031218072017.4136"><vh>&lt;&lt; update ivars &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.4137"><vh>set_lang</vh></v>
</v>
</v>
<v t="ekr.20031218072017.4138" tnodeList="ekr.20031218072017.4138,ekr.20031218072017.4139,ekr.20031218072017.2409,ekr.20031218072017.4140,ekr.20031218072017.1017,ekr.20031218072017.4142,ekr.20031218072017.4143,ekr.20031218072017.1956,ekr.20031218072017.1957,ekr.20031218072017.1958,ekr.20031218072017.1959,ekr.20031218072017.1960,ekr.20031218072017.1961,ekr.20031218072017.1962,ekr.20031218072017.1963,ekr.20031218072017.1964,ekr.20031218072017.1965,ekr.20031218072017.1966,ekr.20031218072017.1967,ekr.20031218072017.1012,ekr.20040106095546,ekr.20031218072017.1013,ekr.20031218072017.1014,ekr.20031218072017.1015,ekr.20031218072017.1016,ekr.20031218072017.4145,ekr.20031218072017.1000,ekr.20031218072017.1002,ekr.20031218072017.1004,ekr.20031218072017.1005,ekr.20031218072017.1006,ekr.20031218072017.2029,ekr.20031218072017.1008,ekr.20031218072017.1009,ekr.20031218072017.1010,ekr.20031218072017.4146,ekr.20031218072017.4147,ekr.20031218072017.1018,ekr.20031218072017.4148,ekr.20031218072017.4149,ekr.20031218072017.4151,ekr.20031218072017.4152,ekr.20031218072017.4153,ekr.20031218072017.4154,ekr.20031218072017.2336,ekr.20031218072017.2337,ekr.20031218072017.2338,ekr.20031218072017.2339,ekr.20031218072017.2340,ekr.20031218072017.2341,ekr.20031218072017.2342,ekr.20031218072017.2343,ekr.20031218072017.2344,ekr.20031218072017.2345,ekr.20031218072017.1776,ekr.20031218072017.1777,ekr.20031218072017.1778,ekr.20031218072017.1332,ekr.20031218072017.1333,ekr.20031218072017.1334,ekr.20031218072017.1335,ekr.20031218072017.1336,ekr.20031218072017.1337,ekr.20031218072017.1338,ekr.20031218072017.1339,ekr.20031218072017.1340,ekr.20031218072017.2346,ekr.20031218072017.2348,ekr.20031218072017.2349,ekr.20031218072017.2249,ekr.20031218072017.2250,ekr.20031218072017.2350,ekr.20031218072017.2351,ekr.20031218072017.2352,ekr.20031218072017.1027,ekr.20031218072017.1028,ekr.20031218072017.4156,ekr.20031218072017.1030,ekr.20031218072017.1029,ekr.20031218072017.1031,ekr.20031218072017.4158,ekr.20031218072017.4159,ekr.20031218072017.4160,ekr.20031218072017.4161,ekr.20031218072017.1019,ekr.20031218072017.1020,ekr.20031218072017.1021,ekr.20031218072017.1022,ekr.20031218072017.1023,ekr.20031218072017.1024,ekr.20031218072017.1025,ekr.20031218072017.4162,ekr.20031218072017.4163,ekr.20031218072017.4164,ekr.20031218072017.4165,ekr.20031218072017.1141"><vh>@file leoTkinterTree.py</vh>
<v t="ekr.20031218072017.4139"><vh>&lt;&lt; about the tree classes &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2409"><vh>&lt;&lt; About drawing &gt;&gt;</vh></v>
<v t="ekr.20031218072017.4140"><vh>&lt;&lt; drawing constants &gt;&gt;</vh></v>
<v t="ekr.20031218072017.4141"><vh>tree.Birth &amp; death</vh>
<v t="ekr.20031218072017.1017"><vh>tree.__init__</vh></v>
<v t="ekr.20031218072017.4142"><vh>tree.deleteBindings</vh></v>
<v t="ekr.20031218072017.4143"><vh>tree.deleteWidgets</vh></v>
<v t="ekr.20031218072017.1956"><vh>tree.injectCallbacks (class method)</vh>
<v t="ekr.20031218072017.1957"><vh>&lt;&lt; define tkinter callbacks to be injected in the vnode class &gt;&gt;</vh>
<v t="ekr.20031218072017.1958"><vh>OnBoxClick</vh></v>
<v t="ekr.20031218072017.1959"><vh>OnDrag</vh></v>
<v t="ekr.20031218072017.1960"><vh>OnEndDrag</vh></v>
<v t="ekr.20031218072017.1961"><vh>OnHeadlineClick &amp; OnHeadlineRightClick</vh></v>
<v t="ekr.20031218072017.1962"><vh>OnHyperLinkControlClick</vh></v>
<v t="ekr.20031218072017.1963"><vh>OnHeadlineKey</vh></v>
<v t="ekr.20031218072017.1964"><vh>OnHyperLinkEnter</vh></v>
<v t="ekr.20031218072017.1965"><vh>OnHyperLinkLeave</vh></v>
<v t="ekr.20031218072017.1966"><vh>OnIconClick &amp; OnIconRightClick</vh></v>
<v t="ekr.20031218072017.1967"><vh>OnIconDoubleClick</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.1011"><vh>Updating routines (tree)...</vh>
<v t="ekr.20031218072017.1012"><vh>redraw</vh></v>
<v t="ekr.20040106095546"><vh>tkTree.redrawAfterException</vh></v>
<v t="ekr.20031218072017.1013"><vh>force_redraw</vh></v>
<v t="ekr.20031218072017.1014"><vh>redraw_now</vh></v>
<v t="ekr.20031218072017.1015"><vh>idle_redraw</vh></v>
<v t="ekr.20031218072017.1016"><vh>idle_second_redraw</vh></v>
</v>
<v t="ekr.20031218072017.4144"><vh>Drawing (tkTree)</vh>
<v t="ekr.20031218072017.4145"><vh>About drawing and updating</vh></v>
<v t="ekr.20031218072017.1000"><vh>drawBox (tag_bind)</vh></v>
<v t="ekr.20031218072017.1002"><vh>drawIcon (tag_bind)</vh></v>
<v t="ekr.20031218072017.1004"><vh>drawNode &amp; force_draw_node</vh></v>
<v t="ekr.20031218072017.1005"><vh>drawText (bind)</vh>
<v t="ekr.20031218072017.1006"><vh>&lt;&lt; configure the text depending on state &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2029"><vh>drawTopTree</vh></v>
<v t="ekr.20031218072017.1008"><vh>drawTree</vh>
<v t="ekr.20031218072017.1009"><vh>&lt;&lt; draw vertical line &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1010"><vh>inVisibleArea &amp; inExpandedVisibleArea</vh></v>
<v t="ekr.20031218072017.4146"><vh>lastVisible</vh></v>
<v t="ekr.20031218072017.4147"><vh>tree.getIconImage</vh></v>
<v t="ekr.20031218072017.1018"><vh>tree.idle_scrollTo</vh></v>
<v t="ekr.20031218072017.4148"><vh>tree.numberOfVisibleNodes</vh></v>
<v t="ekr.20031218072017.4149"><vh>tree.yoffset</vh></v>
</v>
<v t="ekr.20031218072017.4150"><vh>Config &amp; Measuring</vh>
<v t="ekr.20031218072017.4151"><vh>tree.getFont,setFont,setFontFromConfig</vh></v>
<v t="ekr.20031218072017.4152"><vh>headWidth</vh></v>
<v t="ekr.20031218072017.4153"><vh>setLineHeight</vh></v>
<v t="ekr.20031218072017.4154"><vh>setTreeColorsFromConfig</vh></v>
</v>
<v t="ekr.20031218072017.2336"><vh>Event handers (tree)</vh>
<v t="ekr.20031218072017.2337"><vh>OnActivate</vh>
<v t="ekr.20031218072017.2338"><vh>&lt;&lt; activate this window &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2339"><vh>OnBoxClick</vh></v>
<v t="ekr.20031218072017.2340"><vh>tree.OnDeactivate (caused double-click problem)</vh></v>
<v t="ekr.20031218072017.2341"><vh>tree.findVnodeWithIconId</vh></v>
<v t="ekr.20031218072017.2342"><vh>tree.OnContinueDrag</vh>
<v t="ekr.20031218072017.2343"><vh>&lt;&lt; continue dragging &gt;&gt;</vh>
<v t="ekr.20031218072017.2344"><vh>&lt;&lt; scroll the canvas as needed &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2345"><vh>tree.OnCtontrolT</vh></v>
<v t="ekr.20031218072017.1776"><vh>tree.OnDrag</vh></v>
<v t="ekr.20031218072017.1777"><vh>tree.OnEndDrag</vh>
<v t="ekr.20031218072017.1778"><vh>&lt;&lt; set vdrag, childFlag &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1332"><vh>headline key handlers (tree)</vh>
<v t="ekr.20031218072017.1333"><vh>onHeadChanged</vh></v>
<v t="ekr.20031218072017.1334"><vh>OnHeadlineKey</vh></v>
<v t="ekr.20031218072017.1335"><vh>idle_head_key</vh>
<v t="ekr.20031218072017.1336"><vh>&lt;&lt; set s to the widget text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1337"><vh>&lt;&lt; set head to vnode text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1338"><vh>&lt;&lt; update v and all nodes joined to v &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1339"><vh>&lt;&lt; reconfigure v and all nodes joined to v &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1340"><vh>&lt;&lt; update the screen &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2346"><vh>tree.OnIconClick &amp; OnIconRightClick</vh></v>
<v t="ekr.20031218072017.2348"><vh>tree.OnPopup &amp; allies</vh>
<v t="ekr.20031218072017.2349"><vh>OnPopupFocusLost</vh></v>
<v t="ekr.20031218072017.2249"><vh>createPopupMenu</vh>
<v t="ekr.20031218072017.2250"><vh>&lt;&lt; Create the menu table &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2350"><vh>enablePopupMenuItems</vh>
<v t="ekr.20031218072017.2351"><vh>&lt;&lt; set isAtRoot and isAtFile if v's tree contains @root or @file nodes &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2352"><vh>showPopupMenu</vh></v>
</v>
</v>
<v t="ekr.20031218072017.4155"><vh>Incremental drawing</vh>
<v t="ekr.20031218072017.1027"><vh>allocateNodes</vh></v>
<v t="ekr.20031218072017.1028"><vh>allocateNodesBeforeScrolling</vh></v>
<v t="ekr.20031218072017.4156"><vh>updateNode</vh></v>
<v t="ekr.20031218072017.1030"><vh>setVisibleAreaToFullCanvas</vh></v>
<v t="ekr.20031218072017.1029"><vh>setVisibleArea</vh></v>
<v t="ekr.20031218072017.1031"><vh>tree.updateTree</vh></v>
</v>
<v t="ekr.20031218072017.4157"><vh>Selecting &amp; editing (tree)</vh>
<v t="ekr.20031218072017.4158"><vh>dimEditLabel, undimEditLabel</vh></v>
<v t="ekr.20031218072017.4159"><vh>editLabel</vh></v>
<v t="ekr.20031218072017.4160"><vh>endEditLabel</vh></v>
<v t="ekr.20031218072017.4161"><vh>tree.expandAllAncestors</vh></v>
<v t="ekr.20031218072017.1019"><vh>tree.select</vh>
<v t="ekr.20031218072017.1020"><vh>&lt;&lt; define vars and stop editing &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1021"><vh>&lt;&lt; unselect the old node &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1022"><vh>&lt;&lt; select the new node &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1023"><vh>&lt;&lt; update c.beadList or c.beadPointer &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1024"><vh>&lt;&lt; update c.visitedList &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1025"><vh>&lt;&lt; set the current node and redraw &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.4162"><vh>tree.set...LabelState</vh>
<v t="ekr.20031218072017.4163"><vh>&lt;&lt; set editing headline colors &gt;&gt;</vh></v>
<v t="ekr.20031218072017.4164"><vh>&lt;&lt; set selected, disabled headline colors &gt;&gt;</vh></v>
<v t="ekr.20031218072017.4165"><vh>&lt;&lt; set unselected headline colors &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1141"><vh>tree.moveUpDown</vh></v>
</v>
</v>
<v t="ekr.20040312122501"><vh>Active</vh>
<v t="ekr.20031218072017.2620" tnodeList="ekr.20031218072017.2620,ekr.20031218072017.2621,ekr.20031218072017.2622,ekr.20031218072017.2623,ekr.20031218072017.2624,ekr.20031218072017.2626,ekr.20031218072017.1812,ekr.20031218072017.1813,ekr.20031218072017.1814,ekr.20031218072017.1815,ekr.20031218072017.1816,ekr.20031218072017.1817,ekr.20031218072017.1818,ekr.20031218072017.1819,ekr.20031218072017.2627,ekr.20031218072017.2628,ekr.20031218072017.2629,ekr.20031218072017.2630,ekr.20031218072017.2631,ekr.20031218072017.2632,ekr.20031218072017.2633,ekr.20031218072017.2634,ekr.20031218072017.2635,ekr.20031218072017.2636,ekr.20031218072017.2637,ekr.20031218072017.2638,ekr.20031218072017.2639,ekr.20031218072017.2015,ekr.20031218072017.2016,ekr.20031218072017.2017,ekr.20031218072017.2018,ekr.20031218072017.2641,ekr.20031218072017.2642,ekr.20031218072017.2019,ekr.20031218072017.2020,ekr.20031218072017.2021,ekr.20031218072017.2022,ekr.20031218072017.2643,ekr.20031218072017.2644,ekr.20031218072017.2645,ekr.20031218072017.1811,ekr.20031218072017.2647,ekr.20031218072017.2648,ekr.20031218072017.2649,ekr.20031218072017.2650,ekr.20031218072017.2651,ekr.20031218072017.2652,ekr.20031218072017.2653,ekr.20031218072017.2654,ekr.20031218072017.2655,ekr.20031218072017.2656,ekr.20031218072017.2657,ekr.20031218072017.2658,ekr.20031218072017.2659,ekr.20031218072017.2660,ekr.20031218072017.2661,ekr.20031218072017.2662,ekr.20031218072017.2663,ekr.20031218072017.2664,ekr.20031218072017.2665,ekr.20031218072017.2666,ekr.20031218072017.2668,ekr.20031218072017.2669,ekr.20031218072017.2670,ekr.20031218072017.2671,ekr.20031218072017.2674,ekr.20031218072017.2676,ekr.20031218072017.2677,ekr.20031218072017.2678,ekr.20031218072017.2679,ekr.20031218072017.2680,ekr.20031218072017.2681,ekr.20031218072017.2672,ekr.20031218072017.2673,ekr.20031218072017.2675,ekr.20031218072017.2682,ekr.20031218072017.2683,ekr.20031218072017.2686,ekr.20031218072017.2687,ekr.20031218072017.2685,ekr.20031218072017.2684,ekr.20031218072017.2688,ekr.20031218072017.2689,ekr.20031218072017.2667,ekr.20031218072017.2691,ekr.20031218072017.2692,ekr.20031218072017.2693,ekr.20031218072017.2694,ekr.20031218072017.2695,ekr.20031218072017.2696,ekr.20031218072017.2697,ekr.20031218072017.2698,ekr.20031218072017.2699,ekr.20031218072017.2700,ekr.20031218072017.2701,ekr.20031218072017.2703,ekr.20031218072017.2704,ekr.20031218072017.2705,ekr.20031218072017.2387,ekr.20031218072017.2388,ekr.20031218072017.2389,ekr.20031218072017.2394,ekr.20031218072017.2395,ekr.20031218072017.2396,ekr.20031218072017.2391,ekr.20031218072017.2390,ekr.20031218072017.2392,ekr.20031218072017.2393,ekr.20031218072017.2397,ekr.20031218072017.2398,ekr.20031218072017.2399,ekr.20031218072017.2400,ekr.20031218072017.2706,ekr.20031218072017.2707,ekr.20031218072017.2710,ekr.20031218072017.2711,ekr.20031218072017.2326,ekr.20031218072017.2712,ekr.20031218072017.2713,ekr.20031218072017.2328,ekr.20031218072017.2714,ekr.20031218072017.2715,ekr.20031218072017.2716,ekr.20031218072017.2322,ekr.20031218072017.2323,ekr.20031218072017.2324,ekr.20031218072017.2325,ekr.20031218072017.2326,ekr.20031218072017.2327,ekr.20031218072017.2328,ekr.20031218072017.2330,ekr.20031218072017.2718,ekr.20031218072017.2719,ekr.20031218072017.2720,ekr.20031218072017.2721,ekr.20031218072017.2023,ekr.20031218072017.2024,ekr.20031218072017.2025,ekr.20031218072017.2026,ekr.20031218072017.2722,ekr.20040128174042,ekr.20031218072017.2723,ekr.20031218072017.2724,ekr.20031218072017.2725,ekr.20031218072017.2726,ekr.20031218072017.2727,ekr.20031218072017.2728,ekr.20031218072017.2729,ekr.20031218072017.2730,ekr.20031218072017.2731,ekr.20031218072017.2732,ekr.20031218072017.2733,ekr.20031218072017.2736,ekr.20031218072017.2734,ekr.20031218072017.2735,ekr.20031218072017.2737,ekr.20031218072017.2738,ekr.20031218072017.2739,ekr.20031218072017.2740,ekr.20031218072017.2741,ekr.20031218072017.2742,ekr.20031218072017.2743,ekr.20031218072017.2744,ekr.20031218072017.2745,ekr.20031218072017.2746,ekr.20031218072017.2748,ekr.20031218072017.2749,ekr.20031218072017.2750,ekr.20031218072017.2751,ekr.20031218072017.2752,ekr.20031218072017.2753,ekr.20031218072017.2754,ekr.20031218072017.2755,ekr.20031218072017.2757,ekr.20031218072017.2007,ekr.20031218072017.2758,ekr.20031218072017.2759,ekr.20031218072017.2760,ekr.20031218072017.2761,ekr.20031218072017.2762,ekr.20031218072017.2763,ekr.20031218072017.1752,ekr.20031218072017.2765,ekr.20031218072017.2766,ekr.20031218072017.2767,ekr.20031218072017.2768,ekr.20031218072017.2769,ekr.20031218072017.1954,ekr.20031218072017.2771,ekr.20031218072017.2772,ekr.20031218072017.2773,ekr.20031218072017.1753,ekr.20031218072017.1754,ekr.20031218072017.1755,ekr.20031218072017.2775,ekr.20031218072017.2776,ekr.20031218072017.2777,ekr.20031218072017.2778,ekr.20031218072017.2779,ekr.20031218072017.2780,ekr.20031218072017.2781,ekr.20031218072017.2782,ekr.20031218072017.2783,ekr.20031218072017.2784,ekr.20031218072017.2786,ekr.20031218072017.2787,ekr.20031218072017.2788,ekr.20031218072017.2789,ekr.20031218072017.2001,ekr.20031218072017.2790,ekr.20031218072017.2791,ekr.20031218072017.2792,ekr.20031218072017.2793,ekr.20031218072017.2113,ekr.20031218072017.2114,ekr.20031218072017.2115,ekr.20031218072017.2116,ekr.20031218072017.2117,ekr.20031218072017.2118,ekr.20031218072017.2119,ekr.20031218072017.2121,ekr.20031218072017.2122,ekr.20031218072017.2123,ekr.20031218072017.2124,ekr.20031218072017.2125,ekr.20031218072017.2126,ekr.20031218072017.2127,ekr.20031218072017.2128,ekr.20031218072017.2129,ekr.20031218072017.2131,ekr.20031218072017.2132,ekr.20031218072017.2133,ekr.20031218072017.2134,ekr.20031218072017.2106,ekr.20031218072017.2107,ekr.20031218072017.2108,ekr.20031218072017.2109,ekr.20031218072017.1746,ekr.20031218072017.1747,ekr.20031218072017.1748,ekr.20031218072017.1749,ekr.20031218072017.1750,ekr.20031218072017.1751,ekr.20031218072017.2136,ekr.20031218072017.2137,ekr.20031218072017.2138,ekr.20031218072017.1921,ekr.20031218072017.1922"><vh>@file leoAtFile.py </vh>
<v t="ekr.20031218072017.2621"><vh>&lt;&lt; global atFile constants &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2622"><vh>&lt;&lt; class baseAtFile methods &gt;&gt;</vh>
<v t="ekr.20031218072017.2623"><vh>atFile.__init__ &amp; initIvars</vh></v>
<v t="ekr.20031218072017.2624"><vh>top_df.error</vh></v>
<v t="ekr.20031218072017.2625"><vh>Reading</vh>
<v t="ekr.20031218072017.2626"><vh> top_df.readAll (disabled)</vh></v>
<v t="ekr.20031218072017.1812"><vh>top_df.read</vh>
<v t="ekr.20031218072017.1813"><vh>&lt;&lt; set fileName from root and importFileName &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1814"><vh>&lt;&lt; open file or return false &gt;&gt;</vh>
<v t="ekr.20031218072017.1815"><vh>&lt;&lt; warn on read-only file &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1816"><vh>&lt;&lt; copy ivars to df &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1817"><vh>&lt;&lt; warn about non-empty unvisited nodes &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1818"><vh>&lt;&lt; copy all tempBodyStrings to tnodes &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1819"><vh>&lt;&lt; delete all tempBodyStrings &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2627"><vh>top_df.scanDefaultDirectory</vh>
<v t="ekr.20031218072017.2628"><vh>&lt;&lt; Set path from @file node &gt;&gt;  in df.scanDeafaultDirectory in leoAtFile.py</vh></v>
<v t="ekr.20031218072017.2629"><vh>&lt;&lt; handle @path &gt;&gt; in df.scanDeafaultDirectory in leoAtFile.py</vh>
<v t="ekr.20031218072017.2630"><vh>&lt;&lt; compute relative path from s[k:] &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2631"><vh>&lt;&lt; handle absolute path &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2632"><vh>&lt;&lt; Set current directory &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2633"><vh>top_df.scanHeader</vh>
<v t="ekr.20031218072017.2634"><vh>&lt;&lt; skip any non @+leo lines &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2635"><vh>&lt;&lt; make sure we have @+leo &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2636"><vh>&lt;&lt; read optional version param &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2637"><vh>&lt;&lt; read optional encoding param &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2638"><vh>&lt;&lt; set the closing comment delim &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2639"><vh>top_df.readLine</vh></v>
</v>
<v t="ekr.20031218072017.2640"><vh>Writing</vh>
<v t="ekr.20031218072017.2015"><vh>top_df.writeAll</vh>
<v t="ekr.20031218072017.2016"><vh>&lt;&lt; Clear all orphan bits &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2017"><vh>&lt;&lt; handle v's tree &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2018"><vh>&lt;&lt; say the command is finished &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2641"><vh>top_df.write, rawWrite, silentWrite</vh></v>
<v t="ekr.20031218072017.2642"><vh>top_df.writeOld/NewDerivedFiles</vh></v>
<v t="ekr.20031218072017.2019"><vh>top_df.writeMissing</vh>
<v t="ekr.20031218072017.2020"><vh>&lt;&lt; set missing if the file does not exist &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2021"><vh>&lt;&lt; create df.outputFile &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2022"><vh>&lt;&lt; write the @file node &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.2643"><vh>&lt;&lt; class baseOldDerivedFile methods &gt;&gt;</vh>
<v t="ekr.20031218072017.2644"><vh> old_df.__init__&amp; initIvars</vh>
<v t="ekr.20031218072017.2645"><vh>&lt;&lt; init atFile ivars &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2646"><vh>Reading (3.x)</vh>
<v t="ekr.20031218072017.1811"><vh>createImportedNode</vh></v>
<v t="ekr.20031218072017.2647"><vh>old_df.readOpenFile</vh></v>
<v t="ekr.20031218072017.2648"><vh>completeFirstDirectives</vh></v>
<v t="ekr.20031218072017.2649"><vh>completeLastDirectives</vh></v>
<v t="ekr.20031218072017.2650"><vh>createNthChild</vh>
<v t="ekr.20031218072017.2651"><vh>&lt;&lt; check the headlines &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2652"><vh>handleLinesFollowingSentinel</vh>
<v t="ekr.20031218072017.2653"><vh>&lt;&lt; remove the comment delims from s &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2654"><vh>readLine</vh></v>
<v t="ekr.20031218072017.2655"><vh>readLinesToNextSentinel</vh></v>
<v t="ekr.20031218072017.2656"><vh>scanDoc</vh>
<v t="ekr.20031218072017.2657"><vh>&lt;&lt; Skip the opening sentinel &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2658"><vh>&lt;&lt; Skip an opening block delim &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2659"><vh>&lt;&lt; set kind, nextLine &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2660"><vh>&lt;&lt; Skip the leading stuff &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2661"><vh>&lt;&lt; Append s to out &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2662"><vh>&lt;&lt; Remove a closing block delim from out &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2663"><vh>scanText (3.x)</vh>
<v t="ekr.20031218072017.2664"><vh>&lt;&lt; put the next line into s &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2665"><vh>&lt;&lt; set kind, nextKind &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2666"><vh>&lt;&lt; Set lineIndent, linep and leading_ws &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2667"><vh>&lt;&lt; handle unexpected end of text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2668"><vh>&lt;&lt; handle the line in s &gt;&gt;</vh>
<v t="ekr.20031218072017.2669"><vh>&lt;&lt; append non-sentinel line &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2670"><vh>&lt;&lt; handle common sentinels &gt;&gt;</vh>
<v t="ekr.20031218072017.2671"><vh>&lt;&lt; handle an ending sentinel &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2672"><vh>&lt;&lt; scan old ref &gt;&gt; (3.0)</vh></v>
<v t="ekr.20031218072017.2673"><vh>&lt;&lt; scan @+at &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2674"><vh>&lt;&lt; scan @+body &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2675"><vh>&lt;&lt; scan @+doc &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2676"><vh>&lt;&lt; scan @+node &gt;&gt;</vh>
<v t="ekr.20031218072017.2677"><vh>&lt;&lt; Set childIndex &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2678"><vh>&lt;&lt; Set cloneIndex &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2679"><vh>&lt;&lt; Set headline and ref &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2680"><vh>&lt;&lt; Check the filename in the sentinel &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2681"><vh>&lt;&lt; look for sentinels that may follow a reference &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2682"><vh>&lt;&lt; scan @+others &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2683"><vh>&lt;&lt; handle rare sentinels &gt;&gt;</vh>
<v t="ekr.20031218072017.2684"><vh>&lt;&lt; scan @+leo &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2685"><vh>&lt;&lt; scan @@ &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2686"><vh>&lt;&lt; scan @comment &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2687"><vh>&lt;&lt; scan @delims &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2688"><vh>&lt;&lt; scan @verbatim &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2689"><vh>&lt;&lt; warn about unknown sentinel &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.2690"><vh>Sentinels (3.x)</vh>
<v t="ekr.20031218072017.2691"><vh>nodeSentinelText</vh>
<v t="ekr.20031218072017.2692"><vh>&lt;&lt; remove comment delims from h if necessary &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2693"><vh>putCloseNodeSentinel</vh></v>
<v t="ekr.20031218072017.2694"><vh>putCloseSentinels</vh></v>
<v t="ekr.20031218072017.2695"><vh>putOpenLeoSentinel</vh></v>
<v t="ekr.20031218072017.2696"><vh>putOpenNodeSentinel</vh></v>
<v t="ekr.20031218072017.2697"><vh>putOpenSentinels</vh></v>
<v t="ekr.20031218072017.2698"><vh>putSentinel (applies cweb hack)</vh></v>
<v t="ekr.20031218072017.2699"><vh>sentinelKind</vh></v>
<v t="ekr.20031218072017.2700"><vh>sentinelName</vh></v>
<v t="ekr.20031218072017.2701"><vh>skipSentinelStart</vh></v>
</v>
<v t="ekr.20031218072017.2702"><vh>Utilites (3.x)</vh>
<v t="ekr.20031218072017.2703"><vh>directiveKind</vh></v>
<v t="ekr.20031218072017.2704"><vh>error</vh></v>
<v t="ekr.20031218072017.2705"><vh>readError</vh></v>
<v t="ekr.20031218072017.2387"><vh>scanAllDirectives</vh>
<v t="ekr.20031218072017.2388"><vh>&lt;&lt; Set ivars &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2389"><vh>&lt;&lt; Set path from @file node &gt;&gt; in scanDirectory in leoGlobals.py</vh></v>
<v t="ekr.20031218072017.2390"><vh>&lt;&lt; Test for @comment and @language &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2391"><vh>&lt;&lt; Test for @encoding &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2392"><vh>&lt;&lt; Test for @header and @noheader &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2393"><vh>&lt;&lt; Test for @lineending &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2394"><vh>&lt;&lt; Test for @path &gt;&gt;</vh>
<v t="ekr.20031218072017.2395"><vh>&lt;&lt; compute relative path from s[k:] &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2396"><vh>&lt;&lt; handle absolute path &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2397"><vh>&lt;&lt; Test for @pagewidth &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2398"><vh>&lt;&lt; Test for @tabwidth &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2399"><vh>&lt;&lt; Set current directory &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2400"><vh>&lt;&lt; Set comment Strings from delims &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2706"><vh>skipIndent</vh></v>
<v t="ekr.20031218072017.2707"><vh>writeError</vh></v>
</v>
<v t="ekr.20031218072017.2708"><vh>Writing (3.x)</vh>
<v t="ekr.20031218072017.2709"><vh>Top level</vh>
<v t="ekr.20031218072017.2710"><vh>old_df.rawWrite</vh>
<v t="ekr.20031218072017.2711"><vh>&lt;&lt; write root's tree &gt;&gt;</vh>
<v t="ekr.20031218072017.2326"><vh>&lt;&lt; put all @first lines in root &gt;&gt; (3.x)</vh></v>
<v t="ekr.20031218072017.2712"><vh>&lt;&lt; put optional @comment sentinel lines &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2713"><vh>&lt;&lt; Write p's node &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2328"><vh>&lt;&lt; put all @last lines in root &gt;&gt; (3.x)</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2714"><vh>old_df.silentWrite</vh>
<v t="ekr.20031218072017.2715"><vh>&lt;&lt; Write p's headline if it starts with @@ &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2716"><vh>&lt;&lt; Write p's body &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2322"><vh>old_df.write</vh>
<v t="ekr.20031218072017.2323"><vh>&lt;&lt; initialize &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2324"><vh>&lt;&lt; open the file; return on error &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2325"><vh>&lt;&lt; write then entire @file tree &gt;&gt; (3.x)</vh>
<v t="ekr.20031218072017.2326"><vh>&lt;&lt; put all @first lines in root &gt;&gt; (3.x)</vh></v>
<v t="ekr.20031218072017.2327"><vh>&lt;&lt; write the derived file&gt;&gt;</vh></v>
<v t="ekr.20031218072017.2328"><vh>&lt;&lt; put all @last lines in root &gt;&gt; (3.x)</vh></v>
</v>
<v t="ekr.20031218072017.2330"><vh>&lt;&lt; finish writing &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2717"><vh>Top level write helpers</vh>
<v t="ekr.20031218072017.2718"><vh>atFile.closeWriteFile</vh></v>
<v t="ekr.20031218072017.2719"><vh>atFile.handleWriteException</vh></v>
<v t="ekr.20031218072017.2720"><vh>atFile.openWriteFile</vh></v>
<v t="ekr.20031218072017.2721"><vh>atFile.putInitialComment</vh></v>
<v t="ekr.20031218072017.2023"><vh>atFile.replaceTargetFileIfDifferent</vh>
<v t="ekr.20031218072017.2024"><vh>&lt;&lt; delete the output file &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2025"><vh>&lt;&lt; replace the target file with the output file &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2026"><vh>&lt;&lt; rename the output file to be the target file &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2722"><vh>atFile.outputStringWithLineEndings</vh></v>
<v t="ekr.20040128174042"><vh>atFile.warnAboutOrpanAndIgnoredNodes</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2723"><vh>putBodyPart (3.x)</vh>
<v t="ekr.20031218072017.2724"><vh>&lt;&lt; put code/doc parts and sentinels &gt;&gt; (3.x)</vh>
<v t="ekr.20031218072017.2725"><vh>&lt;&lt; initialize lookingForFirst/Last &amp; initialLastDirective &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2726"><vh>&lt;&lt; set lookingForFirst/Last &amp; initialLastDirective &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2727"><vh>&lt;&lt; handle misc directives &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2728"><vh>&lt;&lt; put out the last directives, if any &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2729"><vh>putDoc</vh></v>
<v t="ekr.20031218072017.2730"><vh>putDocPart (3.x)</vh>
<v t="ekr.20031218072017.2731"><vh>&lt;&lt; copy words, splitting the line if needed &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2732"><vh>putCodePart &amp; allies (3.x)</vh>
<v t="ekr.20031218072017.2733"><vh>&lt;&lt; handle the start of a line &gt;&gt;</vh>
<v t="ekr.20031218072017.2734"><vh>&lt;&lt; handle @others &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2735"><vh>&lt;&lt; handle @raw &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2736"><vh>&lt;&lt; handle @end_raw &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2737"><vh>&lt;&lt; put @verbatim sentinel if necessary &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2738"><vh>&lt;&lt; put the line &gt;&gt;</vh>
<v t="ekr.20031218072017.2739"><vh>&lt;&lt; put possible section reference &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2740"><vh>inAtOthers</vh></v>
<v t="ekr.20031218072017.2741"><vh>isSectionName</vh></v>
<v t="ekr.20031218072017.2742"><vh>putAtOthers</vh></v>
<v t="ekr.20031218072017.2743"><vh>putAtOthersChild</vh></v>
<v t="ekr.20031218072017.2744"><vh>putRef</vh>
<v t="ekr.20031218072017.2745"><vh>&lt;&lt; Generate the expansion of the reference &gt;&gt;</vh>
<v t="ekr.20031218072017.2746"><vh>&lt;&lt; Add @verbatimAfterRef sentinel if required &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.2747"><vh>Writing Utils</vh>
<v t="ekr.20031218072017.2748"><vh>putBuffered</vh></v>
<v t="ekr.20031218072017.2749"><vh>os, onl, etc. (leoAtFile)</vh></v>
<v t="ekr.20031218072017.2750"><vh>putDirective  (handles @delims) 3.x</vh>
<v t="ekr.20031218072017.2751"><vh>&lt;&lt; handle @delims &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2752"><vh>putEmptyDirective (Dave Hein)</vh></v>
<v t="ekr.20031218072017.2753"><vh>putIndent</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.2754" a="M"><vh>&lt;&lt; class baseNewDerivedFile methods &gt;&gt;</vh>
<v t="ekr.20031218072017.2755"><vh>newDerivedFile.__init__</vh></v>
<v t="ekr.20031218072017.2756"><vh>Reading (4.x)</vh>
<v t="ekr.20031218072017.2757"><vh>new_df.readOpenFile</vh></v>
<v t="ekr.20031218072017.2007"><vh>findChild</vh></v>
<v t="ekr.20031218072017.2758"><vh>scanText4 &amp; allies</vh>
<v t="ekr.20031218072017.2759"><vh>&lt;&lt; init ivars for scanText4 &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2760"><vh>&lt;&lt; report unexpected end of text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2761"><vh>readNormalLine</vh>
<v t="ekr.20031218072017.2762"><vh>&lt;&lt; Skip the leading stuff &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2763"><vh>&lt;&lt; Append s to docOut &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2764"><vh>start sentinels</vh>
<v t="ekr.20031218072017.1752"><vh>readStartAt &amp; readStartDoc</vh></v>
<v t="ekr.20031218072017.2765"><vh>readStartLeo</vh></v>
<v t="ekr.20031218072017.2766"><vh>readStartNode</vh>
<v t="ekr.20031218072017.2767"><vh>&lt;&lt; Set headline, undoing the CWEB hack &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2768"><vh>&lt;&lt; Check the filename in the sentinel &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2769"><vh>readStartOthers</vh></v>
</v>
<v t="ekr.20031218072017.2770"><vh>end sentinels</vh>
<v t="ekr.20031218072017.1954"><vh>readEndAt &amp; readEndDoc</vh></v>
<v t="ekr.20031218072017.2771"><vh>readEndLeo</vh></v>
<v t="ekr.20031218072017.2772"><vh>readEndNode</vh></v>
<v t="ekr.20031218072017.2773"><vh>readEndOthers</vh></v>
<v t="ekr.20031218072017.1753"><vh>readLastDocLine</vh>
<v t="ekr.20031218072017.1754"><vh>&lt;&lt; new code &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1755"><vh>&lt;&lt; old code &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2774"><vh>Unpaired sentinels</vh>
<v t="ekr.20031218072017.2775"><vh>ignoreOldSentinel</vh></v>
<v t="ekr.20031218072017.2776"><vh>readAfterRef</vh></v>
<v t="ekr.20031218072017.2777"><vh>readComment</vh></v>
<v t="ekr.20031218072017.2778"><vh>readDelims</vh></v>
<v t="ekr.20031218072017.2779"><vh>readDirective</vh></v>
<v t="ekr.20031218072017.2780"><vh>readNl</vh></v>
<v t="ekr.20031218072017.2781"><vh>readNonl</vh></v>
<v t="ekr.20031218072017.2782"><vh>readRef</vh></v>
<v t="ekr.20031218072017.2783"><vh>readVerbatim</vh></v>
</v>
<v t="ekr.20031218072017.2784"><vh>badEndSentinel, push/popSentinelStack</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2785"><vh>Sentinels (4.x)</vh>
<v t="ekr.20031218072017.2786"><vh>nodeSentinelText</vh>
<v t="ekr.20031218072017.2787"><vh>&lt;&lt; remove comment delims from h if necessary &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2788"><vh>putLeadInSentinel</vh></v>
<v t="ekr.20031218072017.2789"><vh>putOpenLeoSentinel</vh></v>
<v t="ekr.20031218072017.2001"><vh>putOpenNodeSentinel (sets tnodeList)</vh></v>
<v t="ekr.20031218072017.2790"><vh>putSentinel (applies cweb hack)</vh>
<v t="ekr.20031218072017.2791"><vh>&lt;&lt; apply the cweb hack to s &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2792"><vh>skipSentinelStart</vh></v>
<v t="ekr.20031218072017.2793"><vh>sentinelKind</vh></v>
</v>
<v t="ekr.20031218072017.2111"><vh>Writing (4.x)</vh>
<v t="ekr.20031218072017.2112"><vh>Top level</vh>
<v t="ekr.20031218072017.2113"><vh>new_df.closeWriteFile</vh></v>
<v t="ekr.20031218072017.2114"><vh>new_df.write (inits root.tnodeList)</vh>
<v t="ekr.20031218072017.2115"><vh>&lt;&lt; initialize &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2116"><vh>&lt;&lt; open the file; return on error &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2117"><vh>&lt;&lt; write then entire @file tree &gt;&gt; (4.x)</vh>
<v t="ekr.20031218072017.2118"><vh>&lt;&lt; put all @first lines in root &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2119"><vh>&lt;&lt; put all @last lines in root &gt;&gt; (4.x)</vh></v>
</v>
<v t="ekr.20031218072017.2121"><vh>&lt;&lt; finish writing &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2122"><vh>new_df.rawWrite</vh>
<v t="ekr.20031218072017.2123"><vh>&lt;&lt; write root's tree &gt;&gt;</vh>
<v t="ekr.20031218072017.2124"><vh>&lt;&lt; put all @first lines in root &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2125"><vh>&lt;&lt; put optional @comment sentinel lines &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2126"><vh>&lt;&lt; Write p's node &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2127"><vh>&lt;&lt; put all @last lines in root &gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.2128"><vh>putBody (4.x)</vh>
<v t="ekr.20031218072017.2129"><vh>&lt;&lt; handle line at s[i]  &gt;&gt; (4.x)</vh></v>
</v>
<v t="ekr.20031218072017.2130"><vh>code lines... (4.x)</vh>
<v t="ekr.20031218072017.2131"><vh>inAtOthers</vh></v>
<v t="ekr.20031218072017.2132"><vh>putAtOthersChild</vh></v>
<v t="ekr.20031218072017.2133"><vh>putAtOthersLine</vh></v>
<v t="ekr.20031218072017.2134"><vh>putCodeLine</vh></v>
<v t="ekr.20031218072017.2106"><vh>putRefLine (new) &amp; allies</vh>
<v t="ekr.20031218072017.2107"><vh>PutRefAt</vh></v>
<v t="ekr.20031218072017.2108"><vh>putAfterLastRef</vh></v>
<v t="ekr.20031218072017.2109"><vh>putAfterMiddleef</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1745"><vh>doc lines... (write)</vh>
<v t="ekr.20031218072017.1746"><vh>putBlankDocLine</vh></v>
<v t="ekr.20031218072017.1747"><vh>putStartDocLine</vh></v>
<v t="ekr.20031218072017.1748"><vh>putDocLine</vh>
<v t="ekr.20031218072017.1749"><vh>&lt;&lt; append words to pending line, splitting the line if needed &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1750"><vh>putEndDocLine</vh></v>
<v t="ekr.20031218072017.1751"><vh>putPending</vh></v>
</v>
<v t="ekr.20031218072017.2135"><vh>Writing Utils...</vh>
<v t="ekr.20031218072017.2136"><vh>directiveKind</vh></v>
<v t="ekr.20031218072017.2137"><vh>hasSectionName</vh></v>
<v t="ekr.20031218072017.2138"><vh>os, onl, etc.</vh></v>
<v t="ekr.20031218072017.1921"><vh>putDirective  (handles @delims) 4,x</vh>
<v t="ekr.20031218072017.1922"><vh>&lt;&lt; handle @delims &gt;&gt;</vh></v>
</v>
</v>
</v>
</v>
</v>
<v t="ekr.20031218072017.2810" tnodeList="ekr.20031218072017.2810,ekr.20031218072017.2812,ekr.20031218072017.2813,ekr.20031218072017.2814,ekr.20031218072017.2815,ekr.20031218072017.2816,ekr.20031218072017.2817,ekr.20031218072017.2582,ekr.20040312090934,ekr.20031218072017.1623,ekr.20031218072017.2821,ekr.20031218072017.2822,ekr.20031218072017.2823,ekr.20031218072017.2824,ekr.20031218072017.2825,ekr.20031218072017.2826,ekr.20031218072017.2827,ekr.20031218072017.2828,ekr.20031218072017.2829,ekr.20031218072017.2830,ekr.20031218072017.2831,ekr.20031218072017.2832,ekr.20031218072017.2833,ekr.20031218072017.2834,ekr.20031218072017.2835,ekr.20031218072017.2836,ekr.20031218072017.2837,ekr.20031218072017.2080,ekr.20031218072017.2081,ekr.20031218072017.2082,ekr.20031218072017.2083,ekr.20031218072017.2839,ekr.20031218072017.1839,ekr.20031218072017.1809,ekr.20031218072017.2014,ekr.20031218072017.2842,ekr.20031218072017.2843,ekr.20031218072017.2844,ekr.20031218072017.2846,ekr.20031218072017.2847,ekr.20031218072017.2848,ekr.20031218072017.2850,ekr.20031218072017.2851,ekr.20031218072017.2852,ekr.20031218072017.2853,ekr.20031218072017.2854,ekr.20031218072017.2855,ekr.20031218072017.2856,ekr.20031218072017.2857,ekr.20031218072017.2858,ekr.20031218072017.2859,ekr.20031218072017.2860,ekr.20031218072017.2863,ekr.20031218072017.2140,ekr.20031218072017.2141,ekr.20031218072017.2142,ekr.20031218072017.2143,ekr.20031218072017.2864,ekr.20031218072017.2865,ekr.20031218072017.2866,ekr.20031218072017.2867,ekr.20031218072017.2868,ekr.20031218072017.2869,ekr.20031218072017.2870,ekr.20031218072017.2871,ekr.20031218072017.2872,ekr.20031218072017.2873,ekr.20031218072017.2874,ekr.20031218072017.2875,ekr.20031218072017.2876,ekr.20031218072017.2877,ekr.20031218072017.2878,ekr.20031218072017.2879,ekr.20031218072017.2880,ekr.20031218072017.2881,ekr.20031218072017.2882,ekr.20031218072017.2088,ekr.20031218072017.2090,ekr.20031218072017.2883,ekr.20031218072017.2086,ekr.20031218072017.1704,ekr.20031218072017.1705,ekr.20031218072017.1821,ekr.20031218072017.1822,ekr.20031218072017.1823,ekr.20031218072017.1824,ekr.20031218072017.1706,ekr.20031218072017.1707,ekr.20031218072017.1708,ekr.20031218072017.1709,ekr.20031218072017.1710,ekr.20031218072017.1711,ekr.20031218072017.1825,ekr.20031218072017.1826,ekr.20031218072017.1827,ekr.20031218072017.1828,ekr.20031218072017.1829,ekr.20031218072017.1830,ekr.20031218072017.1831,ekr.20031218072017.1832,ekr.20031218072017.1833,ekr.20031218072017.1834,ekr.20031218072017.1835,ekr.20031218072017.1836,ekr.20031218072017.1837,ekr.20031218072017.1838,ekr.20031218072017.2886,ekr.20031218072017.2290,ekr.20031218072017.2888,ekr.20031218072017.2889,ekr.20031218072017.2890,ekr.20031218072017.2891,ekr.20031218072017.2892,ekr.20031218072017.2893,ekr.20031218072017.1549,ekr.20031218072017.1550,ekr.20031218072017.1551,ekr.20031218072017.2072,ekr.20031218072017.2028,ekr.20031218072017.1760,ekr.20031218072017.1193,ekr.20031218072017.1761,ekr.20031218072017.1762,ekr.20031218072017.1765,ekr.20031218072017.1188,ekr.20031218072017.1189,ekr.20031218072017.1190,ekr.20031218072017.2896,ekr.20031218072017.2897,ekr.20031218072017.2900,ekr.20031218072017.2901,ekr.20031218072017.2902,ekr.20031218072017.2903,ekr.20031218072017.2904,ekr.20031218072017.2905,ekr.20031218072017.2906,ekr.20031218072017.2907,ekr.20031218072017.2908,ekr.20031218072017.2910,ekr.20031218072017.2911,ekr.20031218072017.2912,ekr.20031218072017.1628,ekr.20031218072017.1627,ekr.20031218072017.2914,ekr.20031218072017.2915,ekr.20031218072017.2916,ekr.20031218072017.2917,ekr.20031218072017.2918,ekr.20031218072017.2919,ekr.20031218072017.2920,ekr.20031218072017.2921,ekr.20031218072017.2923,ekr.20031218072017.2924,ekr.20031218072017.2925,ekr.20031218072017.2926,ekr.20031218072017.2927,ekr.20031218072017.2928,ekr.20031218072017.2929,ekr.20031218072017.2930,ekr.20031218072017.1767,ekr.20031218072017.1768,ekr.20031218072017.1769,ekr.20031218072017.1770,ekr.20031218072017.1771,ekr.20031218072017.1772,ekr.20031218072017.1773,ekr.20031218072017.1774,ekr.20031218072017.2092,ekr.20031218072017.2932,ekr.20031218072017.2933,ekr.20031218072017.2934,ekr.20031218072017.2936,ekr.20031218072017.2935,ekr.20031218072017.2937,ekr.20031218072017.2939,ekr.20031218072017.2940,ekr.20031218072017.2941,ekr.20031218072017.2942,ekr.20031218072017.2943,ekr.20031218072017.2944,ekr.20031218072017.2353,ekr.20031218072017.2946,ekr.20031218072017.2947,ekr.20031218072017.2948,ekr.20031218072017.2950,ekr.20031218072017.2951,ekr.20031218072017.2952,ekr.20031218072017.2953,ekr.20031218072017.2954,ekr.20040131170659,ekr.20031218072017.2956,ekr.20031218072017.2957,ekr.20031218072017.2958,ekr.20031218072017.2959,ekr.20031218072017.2960,ekr.20031218072017.2961,ekr.20031218072017.2962,ekr.20031218072017.2963,ekr.20031218072017.2964,ekr.20031218072017.2287,ekr.20031218072017.2965,ekr.20031218072017.2966,ekr.20031218072017.2967,ekr.20040303165342,ekr.20031218072017.2968,ekr.20031218072017.2969,ekr.20031218072017.2970,ekr.20031218072017.2971,ekr.20031218072017.2972,ekr.20031218072017.2973,ekr.20031218072017.2974,ekr.20031218072017.2975,ekr.20031218072017.2976,ekr.20031218072017.2977,ekr.20031218072017.2978,ekr.20031218072017.2979,ekr.20031218072017.2980,ekr.20031218072017.2981,ekr.20031218072017.2983,ekr.20031218072017.2984,ekr.20031218072017.2985,ekr.20031218072017.2986,ekr.20031218072017.2987,ekr.20031218072017.2988,ekr.20040311173238,ekr.20031218072017.2989,ekr.20040311094927,ekr.20031218072017.2991,ekr.20031218072017.2992,ekr.20031218072017.2993,ekr.20031218072017.2994,ekr.20031218072017.2995,ekr.20031218072017.2996,ekr.20031218072017.2997,ekr.20031218072017.2998,ekr.20031218072017.2999,ekr.20031218072017.3000"><vh>@file leoCommands.py</vh>
<v t="ekr.20031218072017.2811"><vh> c.Birth &amp; death</vh>
<v t="ekr.20031218072017.2812"><vh>c.__init__, initIvars</vh>
<v t="ekr.20031218072017.2813"><vh>&lt;&lt; initialize ivars &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2814"><vh>c.__repr__ &amp; __str__</vh></v>
<v t="ekr.20031218072017.2815"><vh>c.setIvarsFromFind</vh></v>
<v t="ekr.20031218072017.2816"><vh>c.setIvarsFromPrefs</vh></v>
</v>
<v t="ekr.20031218072017.2817"><vh> doCommand</vh></v>
<v t="ekr.20031218072017.2582" a="M"><vh> version &amp; signon stuff</vh></v>
<v t="ekr.20040312090934"><vh>c.allNodes_iter</vh></v>
<v t="ekr.20031218072017.2818"><vh>Command handlers...</vh>
<v t="ekr.20031218072017.2819"><vh>File Menu</vh>
<v t="ekr.20031218072017.2820"><vh>top level</vh>
<v t="ekr.20031218072017.1623"><vh>new</vh></v>
<v t="ekr.20031218072017.2821"><vh>open</vh>
<v t="ekr.20031218072017.2822"><vh>&lt;&lt; Set closeFlag if the only open window is empty &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2823"><vh>openWith and allies</vh>
<v t="ekr.20031218072017.2824"><vh>&lt;&lt; set ext based on the present language &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2825"><vh>&lt;&lt; create or reopen temp file, testing for conflicting changes &gt;&gt;</vh>
<v t="ekr.20031218072017.2826"><vh>&lt;&lt;set dict and path if a temp file already refers to v.t &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2827"><vh>&lt;&lt; create or recreate temp file as needed &gt;&gt;</vh>
<v t="ekr.20031218072017.2828"><vh>&lt;&lt; Raise dialog about conflict and set result &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2829"><vh>&lt;&lt; execute a command to open path in external editor &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2830"><vh>createOpenWithTempFile</vh>
<v t="ekr.20031218072017.2831"><vh>&lt;&lt; remove previous entry from app.openWithFiles if it exists &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2832"><vh>openWithTempFilePath</vh></v>
</v>
<v t="ekr.20031218072017.2833"><vh>close</vh></v>
<v t="ekr.20031218072017.2834"><vh>save</vh></v>
<v t="ekr.20031218072017.2835"><vh>saveAs</vh></v>
<v t="ekr.20031218072017.2836"><vh>saveTo</vh></v>
<v t="ekr.20031218072017.2837"><vh>revert</vh></v>
</v>
<v t="ekr.20031218072017.2079"><vh>Recent Files submenu &amp; allies</vh>
<v t="ekr.20031218072017.2080"><vh>clearRecentFiles</vh></v>
<v t="ekr.20031218072017.2081"><vh>openRecentFile</vh>
<v t="ekr.20031218072017.2082"><vh>&lt;&lt; Set closeFlag if the only open window is empty &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2083"><vh>updateRecentFiles</vh></v>
</v>
<v t="ekr.20031218072017.2838"><vh>Read/Write submenu</vh>
<v t="ekr.20031218072017.2839"><vh>readOutlineOnly</vh></v>
<v t="ekr.20031218072017.1839"><vh>readAtFileNodes</vh></v>
<v t="ekr.20031218072017.2840"><vh>4.0 Commands</vh>
<v t="ekr.20031218072017.1809"><vh>importDerivedFile</vh></v>
<v t="ekr.20031218072017.2014"><vh>writeNew/OldDerivedFiles</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2841"><vh>Tangle submenu</vh>
<v t="ekr.20031218072017.2842"><vh>tangleAll</vh></v>
<v t="ekr.20031218072017.2843"><vh>tangleMarked</vh></v>
<v t="ekr.20031218072017.2844"><vh>tangle</vh></v>
</v>
<v t="ekr.20031218072017.2845"><vh>Untangle submenu</vh>
<v t="ekr.20031218072017.2846"><vh>untangleAll</vh></v>
<v t="ekr.20031218072017.2847"><vh>untangleMarked</vh></v>
<v t="ekr.20031218072017.2848"><vh>untangle</vh></v>
</v>
<v t="ekr.20031218072017.2849"><vh>Import&amp;Export submenu</vh>
<v t="ekr.20031218072017.2850"><vh>exportHeadlines</vh></v>
<v t="ekr.20031218072017.2851"><vh>flattenOutline</vh></v>
<v t="ekr.20031218072017.2852"><vh>importAtRoot</vh></v>
<v t="ekr.20031218072017.2853"><vh>importAtFile</vh></v>
<v t="ekr.20031218072017.2854"><vh>importCWEBFiles</vh></v>
<v t="ekr.20031218072017.2855"><vh>importFlattenedOutline</vh></v>
<v t="ekr.20031218072017.2856"><vh>importNowebFiles</vh></v>
<v t="ekr.20031218072017.2857"><vh>outlineToCWEB</vh></v>
<v t="ekr.20031218072017.2858"><vh>outlineToNoweb</vh></v>
<v t="ekr.20031218072017.2859"><vh>removeSentinels</vh></v>
<v t="ekr.20031218072017.2860"><vh>weave</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2861"><vh>Edit Menu...</vh>
<v t="ekr.20031218072017.2862"><vh>Edit top level</vh>
<v t="ekr.20031218072017.2863"><vh>delete</vh></v>
<v t="ekr.20031218072017.2140"><vh>executeScript</vh>
<v t="ekr.20031218072017.2141"><vh>&lt;&lt; define class fileLikeObject &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2142"><vh>&lt;&lt; get script into s &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2143"><vh>&lt;&lt; redirect output if redirect_execute_script_output_to_log_pane &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2864"><vh>goToLineNumber &amp; allies</vh>
<v t="ekr.20031218072017.2865"><vh>&lt;&lt; set root to the nearest @file, @silentfile or @rawfile ancestor node &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2866"><vh>&lt;&lt; read the file into lines &gt;&gt; in OnGoToLineNumber</vh></v>
<v t="ekr.20031218072017.2867"><vh>&lt;&lt; get n, the line number, from a dialog &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2868"><vh>&lt;&lt; count outline lines, setting v,n2,found &gt;&gt; (@file-nosent only)</vh></v>
<v t="ekr.20031218072017.2869"><vh>&lt;&lt; set v to the node given by vnodeName and childIndex or n &gt;&gt;</vh>
<v t="ekr.20031218072017.2870"><vh>&lt;&lt; 4.x: scan for the node using tnodeList and n &gt;&gt;</vh>
<v t="ekr.20031218072017.2871"><vh>&lt;&lt; set tnodeIndex to the number of +node sentinels before line n &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2872"><vh>&lt;&lt; set v to the first vnode whose tnode is tnodeList[tnodeIndex] or set ok = false &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2873"><vh>&lt;&lt; set v to the first node whose headline matches vnodeName &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2874"><vh>&lt;&lt; 3.x: scan for the node with the given childIndex &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2875"><vh>&lt;&lt; select v and make it visible &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2876"><vh>&lt;&lt; put the cursor on line n2 of the body text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2877"><vh>convertLineToVnodeNameIndexLine</vh>
<v t="ekr.20031218072017.2878"><vh>&lt;&lt; set delim, leoLine from the @+leo line &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2879"><vh>&lt;&lt; scan back to  @+node, setting offset,nodeSentinelLine &gt;&gt;</vh>
<v t="ekr.20031218072017.2880"><vh>&lt;&lt; handle delim while scanning backward &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2881"><vh>&lt;&lt; set vnodeName and childIndex from s &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2882"><vh>skipToMatchingNodeSentinel</vh></v>
</v>
<v t="ekr.20031218072017.2088"><vh>fontPanel</vh></v>
<v t="ekr.20031218072017.2090"><vh>colorPanel</vh></v>
<v t="ekr.20031218072017.2883"><vh>viewAllCharacters</vh></v>
<v t="ekr.20031218072017.2086"><vh>preferences</vh></v>
</v>
<v t="ekr.20031218072017.2884"><vh>Edit Body submenu</vh>
<v t="ekr.20031218072017.1820"><vh>Edit Body Text</vh>
<v t="ekr.20031218072017.1704"><vh>convertAllBlanks</vh></v>
<v t="ekr.20031218072017.1705"><vh>convertAllTabs</vh></v>
<v t="ekr.20031218072017.1821"><vh>convertBlanks</vh></v>
<v t="ekr.20031218072017.1822"><vh>convertTabs</vh></v>
<v t="ekr.20031218072017.1823"><vh>createLastChildNode</vh></v>
<v t="ekr.20031218072017.1824"><vh>dedentBody</vh></v>
<v t="ekr.20031218072017.1706"><vh>extract</vh>
<v t="ekr.20031218072017.1707"><vh>&lt;&lt; Set headline for extract &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1708"><vh>extractSection</vh>
<v t="ekr.20031218072017.1709"><vh>&lt;&lt; Set headline for extractSection &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1710"><vh>extractSectionNames</vh>
<v t="ekr.20031218072017.1711"><vh>&lt;&lt; Find the next section name &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1825"><vh>findBoundParagraph</vh>
<v t="ekr.20031218072017.1826"><vh>&lt;&lt; trace head_lines, ins, tail_lines &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1827"><vh>findMatchingBracket</vh>
<v t="ekr.20031218072017.1828"><vh>findMatchingBracket</vh></v>
</v>
<v t="ekr.20031218072017.1829"><vh>getBodyLines</vh></v>
<v t="ekr.20031218072017.1830"><vh>indentBody</vh></v>
<v t="ekr.20031218072017.1831"><vh>insertBodyTime &amp; allies</vh>
<v t="ekr.20031218072017.1832"><vh>getTime</vh></v>
</v>
<v t="ekr.20031218072017.1833"><vh>reformatParagraph</vh>
<v t="ekr.20031218072017.1834"><vh>&lt;&lt; compute vars for reformatParagraph &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1835"><vh>&lt;&lt; compute the leading whitespace &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1836"><vh>&lt;&lt; compute the result of wrapping all lines &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1837"><vh>&lt;&lt; update the body, selection &amp; undo state &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1838"><vh>updateBodyPane (handles undo)</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2885"><vh>Edit Headline submenu</vh>
<v t="ekr.20031218072017.2886"><vh>editHeadline</vh></v>
<v t="ekr.20031218072017.2290"><vh>toggleAngleBrackets</vh></v>
</v>
<v t="ekr.20031218072017.2887"><vh>Find submenu (frame methods)</vh>
<v t="ekr.20031218072017.2888"><vh>findPanel</vh></v>
<v t="ekr.20031218072017.2889"><vh>findNext</vh></v>
<v t="ekr.20031218072017.2890"><vh>findPrevious</vh></v>
<v t="ekr.20031218072017.2891"><vh>replace</vh></v>
<v t="ekr.20031218072017.2892"><vh>replaceThenFind</vh></v>
</v>
<v t="ekr.20031218072017.2893"><vh>notValidInBatchMode</vh></v>
</v>
<v t="ekr.20031218072017.2894"><vh>Outline menu...</vh>
<v t="ekr.20031218072017.2895"><vh> Top Level...</vh>
<v t="ekr.20031218072017.1548"><vh>Cut &amp; Paste Outlines</vh>
<v t="ekr.20031218072017.1549"><vh>cutOutline</vh></v>
<v t="ekr.20031218072017.1550"><vh>copyOutline</vh></v>
<v t="ekr.20031218072017.1551" a="M"><vh>pasteOutline</vh></v>
</v>
<v t="ekr.20031218072017.2072"><vh>c.checkOutline</vh></v>
<v t="ekr.20031218072017.2028"><vh>Hoist &amp; dehoist &amp; enablers</vh></v>
<v t="ekr.20031218072017.1759"><vh>Insert, Delete &amp; Clone (Commands)</vh>
<v t="ekr.20031218072017.1760"><vh>c.checkMoveWithParentWithWarning</vh></v>
<v t="ekr.20031218072017.1193"><vh>c.deleteOutline</vh></v>
<v t="ekr.20031218072017.1761"><vh>c.insertHeadline</vh></v>
<v t="ekr.20031218072017.1762"><vh>c.clone</vh></v>
<v t="ekr.20031218072017.1765"><vh>c.validateOutline</vh></v>
</v>
<v t="ekr.20031218072017.1188"><vh>c.sortChildren, sortSiblings</vh>
<v t="ekr.20031218072017.1189"><vh>&lt;&lt; Set the undo info for sortChildren &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1190"><vh>&lt;&lt; Set the undo info for sortSiblings &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2896"><vh>c.sortTopLevel</vh>
<v t="ekr.20031218072017.2897"><vh>&lt;&lt; Set the undo info for sortTopLevel &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2898"><vh>Expand &amp; Contract...</vh>
<v t="ekr.20031218072017.2899"><vh>Commands</vh>
<v t="ekr.20031218072017.2900"><vh>contractAllHeadlines</vh></v>
<v t="ekr.20031218072017.2901"><vh>contractNode</vh></v>
<v t="ekr.20031218072017.2902"><vh>contractParent</vh></v>
<v t="ekr.20031218072017.2903"><vh>expandAllHeadlines</vh></v>
<v t="ekr.20031218072017.2904"><vh>expandAllSubheads</vh></v>
<v t="ekr.20031218072017.2905"><vh>expandLevel1..9</vh></v>
<v t="ekr.20031218072017.2906"><vh>expandNextLevel</vh></v>
<v t="ekr.20031218072017.2907"><vh>expandNode</vh></v>
<v t="ekr.20031218072017.2908"><vh>expandPrevLevel</vh></v>
</v>
<v t="ekr.20031218072017.2909"><vh>Utilities</vh>
<v t="ekr.20031218072017.2910"><vh>contractSubtree</vh></v>
<v t="ekr.20031218072017.2911"><vh>expandSubtree</vh></v>
<v t="ekr.20031218072017.2912"><vh>expandToLevel</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2913"><vh>Goto</vh>
<v t="ekr.20031218072017.1628"><vh>goNextVisitedNode</vh></v>
<v t="ekr.20031218072017.1627"><vh>goPrevVisitedNode</vh></v>
<v t="ekr.20031218072017.2914"><vh>goToFirstNode</vh></v>
<v t="ekr.20031218072017.2915"><vh>goToLastNode</vh></v>
<v t="ekr.20031218072017.2916"><vh>goToNextClone</vh></v>
<v t="ekr.20031218072017.2917"><vh>goToNextDirtyHeadline</vh></v>
<v t="ekr.20031218072017.2918"><vh>goToNextMarkedHeadline</vh></v>
<v t="ekr.20031218072017.2919"><vh>goToNextSibling</vh></v>
<v t="ekr.20031218072017.2920"><vh>goToParent</vh></v>
<v t="ekr.20031218072017.2921"><vh>goToPrevSibling</vh></v>
</v>
<v t="ekr.20031218072017.2922"><vh>Mark...</vh>
<v t="ekr.20031218072017.2923"><vh>markChangedHeadlines</vh></v>
<v t="ekr.20031218072017.2924"><vh>markChangedRoots</vh></v>
<v t="ekr.20031218072017.2925"><vh>markAllAtFileNodesDirty</vh></v>
<v t="ekr.20031218072017.2926"><vh>markAtFileNodesDirty</vh></v>
<v t="ekr.20031218072017.2927"><vh>markClones</vh></v>
<v t="ekr.20031218072017.2928"><vh>markHeadline</vh></v>
<v t="ekr.20031218072017.2929"><vh>markSubheads</vh></v>
<v t="ekr.20031218072017.2930"><vh>unmarkAll</vh></v>
</v>
<v t="ekr.20031218072017.1766"><vh>Move... (Commands)</vh>
<v t="ekr.20031218072017.1767"><vh>demote</vh></v>
<v t="ekr.20031218072017.1768"><vh>moveOutlineDown</vh>
<v t="ekr.20031218072017.1769"><vh>&lt;&lt; Move v down &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1770"><vh>moveOutlineLeft</vh></v>
<v t="ekr.20031218072017.1771"><vh>moveOutlineRight</vh></v>
<v t="ekr.20031218072017.1772"><vh>moveOutlineUp</vh>
<v t="ekr.20031218072017.1773"><vh>&lt;&lt; Move v up &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1774"><vh>promote</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2931"><vh>Window Menu</vh>
<v t="ekr.20031218072017.2092"><vh>openCompareWindow</vh></v>
<v t="ekr.20031218072017.2932"><vh>openPythonWindow (Dave Hein)</vh>
<v t="ekr.20031218072017.2933"><vh>&lt;&lt; open idle in Linux &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2934"><vh>&lt;&lt; open idle in Windows &gt;&gt;</vh>
<v t="ekr.20031218072017.2936"><vh>&lt;&lt; Try to open idle in Python 2.3 systems &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2935"><vh>&lt;&lt; Try to open idle in Python 2.2 systems&gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2937"><vh>leoPyShellMain</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2938"><vh>Help Menu</vh>
<v t="ekr.20031218072017.2939"><vh>about (version number &amp; date)</vh></v>
<v t="ekr.20031218072017.2940"><vh>leoDocumentation</vh></v>
<v t="ekr.20031218072017.2941"><vh>leoHome</vh></v>
<v t="ekr.20031218072017.2942"><vh>leoTutorial (version number)</vh></v>
<v t="ekr.20031218072017.2943"><vh>leoConfig</vh></v>
<v t="ekr.20031218072017.2944"><vh>applyConfig</vh></v>
</v>
</v>
<v t="ekr.20031218072017.2945"><vh>Dragging (commands)</vh>
<v t="ekr.20031218072017.2353"><vh>c.dragAfter</vh></v>
<v t="ekr.20031218072017.2946"><vh>c.dragCloneToNthChildOf (changed in 3.11.1)</vh></v>
<v t="ekr.20031218072017.2947"><vh>c.dragToNthChildOf</vh></v>
<v t="ekr.20031218072017.2948"><vh>c.dragCloneAfter</vh></v>
</v>
<v t="ekr.20031218072017.2949"><vh>Drawing Utilities (commands)</vh>
<v t="ekr.20031218072017.2950"><vh>beginUpdate</vh></v>
<v t="ekr.20031218072017.2951"><vh>bringToFront</vh></v>
<v t="ekr.20031218072017.2952"><vh>endUpdate</vh></v>
<v t="ekr.20031218072017.2953"><vh>recolor</vh></v>
<v t="ekr.20031218072017.2954"><vh>redraw &amp; repaint</vh></v>
</v>
<v t="ekr.20031218072017.2955"><vh>Enabling Menu Items</vh>
<v t="ekr.20040131170659"><vh>canClone (new for hoist)</vh></v>
<v t="ekr.20031218072017.2956"><vh>canContractAllHeadlines</vh></v>
<v t="ekr.20031218072017.2957"><vh>canContractAllSubheads</vh></v>
<v t="ekr.20031218072017.2958"><vh>canContractParent</vh></v>
<v t="ekr.20031218072017.2959"><vh>canContractSubheads</vh></v>
<v t="ekr.20031218072017.2960"><vh>canCutOutline &amp; canDeleteHeadline</vh></v>
<v t="ekr.20031218072017.2961"><vh>canDemote</vh></v>
<v t="ekr.20031218072017.2962"><vh>canExpandAllHeadlines</vh></v>
<v t="ekr.20031218072017.2963"><vh>canExpandAllSubheads</vh></v>
<v t="ekr.20031218072017.2964"><vh>canExpandSubheads</vh></v>
<v t="ekr.20031218072017.2287"><vh>canExtract, canExtractSection &amp; canExtractSectionNames</vh></v>
<v t="ekr.20031218072017.2965"><vh>canFindMatchingBracket</vh></v>
<v t="ekr.20031218072017.2966"><vh>canGoToNextDirtyHeadline</vh></v>
<v t="ekr.20031218072017.2967"><vh>canGoToNextMarkedHeadline</vh></v>
<v t="ekr.20040303165342"><vh>canHoist &amp; canDehoist</vh></v>
<v t="ekr.20031218072017.2968"><vh>canMarkChangedHeadline</vh></v>
<v t="ekr.20031218072017.2969"><vh>canMarkChangedRoots</vh></v>
<v t="ekr.20031218072017.2970"><vh>canMoveOutlineDown (changed for hoist)</vh></v>
<v t="ekr.20031218072017.2971"><vh>canMoveOutlineLeft (changed for hoist)</vh></v>
<v t="ekr.20031218072017.2972"><vh>canMoveOutlineRight (changed for hoist)</vh></v>
<v t="ekr.20031218072017.2973"><vh>canMoveOutlineUp (changed for hoist)</vh></v>
<v t="ekr.20031218072017.2974"><vh>canPasteOutline</vh></v>
<v t="ekr.20031218072017.2975"><vh>canPromote</vh></v>
<v t="ekr.20031218072017.2976"><vh>canRevert</vh></v>
<v t="ekr.20031218072017.2977"><vh>canSelect....</vh></v>
<v t="ekr.20031218072017.2978"><vh>canShiftBodyLeft/Right</vh></v>
<v t="ekr.20031218072017.2979"><vh>canSortChildren, canSortSiblings</vh></v>
<v t="ekr.20031218072017.2980"><vh>canUndo &amp; canRedo</vh></v>
<v t="ekr.20031218072017.2981"><vh>canUnmarkAll</vh></v>
</v>
<v t="ekr.20031218072017.2982"><vh>Getters &amp; Setters</vh>
<v t="ekr.20031218072017.2983"><vh>c.currentPosition &amp; c.setCurrentPosition</vh></v>
<v t="ekr.20031218072017.2984"><vh>c.clearAllMarked</vh></v>
<v t="ekr.20031218072017.2985"><vh>c.clearAllVisited</vh></v>
<v t="ekr.20031218072017.2986"><vh>c.fileName</vh></v>
<v t="ekr.20031218072017.2987"><vh>c.isChanged</vh></v>
<v t="ekr.20031218072017.2988"><vh>c.rootPosition &amp; c.setRootPosition</vh></v>
<v t="ekr.20040311173238"><vh>c.topPosition &amp; c.setTopPosition</vh></v>
<v t="ekr.20031218072017.2989"><vh>c.setChanged</vh></v>
<v t="ekr.20040311094927"><vh>c.nullPosition</vh></v>
</v>
<v t="ekr.20031218072017.2990"><vh>Selecting &amp; Updating (commands)</vh>
<v t="ekr.20031218072017.2991"><vh>c.editVnode (calls tree.editLabel)</vh></v>
<v t="ekr.20031218072017.2992"><vh>endEditing (calls tree.endEditLabel)</vh></v>
<v t="ekr.20031218072017.2993"><vh>selectThreadBack</vh></v>
<v t="ekr.20031218072017.2994"><vh>selectThreadNext</vh></v>
<v t="ekr.20031218072017.2995"><vh>selectVisBack</vh></v>
<v t="ekr.20031218072017.2996"><vh>selectVisNext</vh></v>
<v t="ekr.20031218072017.2997"><vh>selectVnode (calls tree.select)</vh></v>
<v t="ekr.20031218072017.2998"><vh>selectVnodeWithEditing</vh></v>
</v>
<v t="ekr.20031218072017.2999"><vh>Syntax coloring interface</vh>
<v t="ekr.20031218072017.3000"><vh>updateSyntaxColorer</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3320" tnodeList="ekr.20031218072017.3320,ekr.20031218072017.2412,ekr.20031218072017.2408,ekr.20031218072017.3321,ekr.20031218072017.3322,ekr.20031218072017.2006,ekr.20031218072017.3323,ekr.20031218072017.3324,ekr.20031218072017.3326,ekr.20031218072017.3328,ekr.20031218072017.3329,ekr.20031218072017.3330,ekr.20031218072017.1485,ekr.20031218072017.1486,ekr.20031218072017.3333,ekr.20031218072017.3334,ekr.20031218072017.3335,ekr.20031218072017.3336,ekr.20031218072017.3337,ekr.20031218072017.3338,ekr.20031218072017.3339,ekr.20031218072017.3340,ekr.20031218072017.3341,ekr.20031218072017.951,ekr.20031218072017.3343,ekr.20031218072017.3344,ekr.20031218072017.1968,ekr.20031218072017.3345,ekr.20031218072017.3347,ekr.20031218072017.3348,ekr.20031218072017.3349,ekr.20031218072017.3350,ekr.20031218072017.3351,ekr.20031218072017.3352,ekr.20031218072017.3353,ekr.20031218072017.3355,ekr.20031218072017.3356,ekr.20031218072017.3357,ekr.20040306214240,ekr.20031218072017.3406,ekr.20031218072017.3409,ekr.20040307085922,ekr.20031218072017.3366,ekr.20031218072017.3361,ekr.20031218072017.3362,ekr.20031218072017.3363,ekr.20031218072017.3364,ekr.20031218072017.3365,ekr.20031218072017.3368,ekr.20031218072017.3369,ekr.20031218072017.3370,ekr.20031218072017.3371,ekr.20031218072017.3372,ekr.20031218072017.3373,ekr.20031218072017.3374,ekr.20031218072017.3375,ekr.20031218072017.3376,ekr.20031218072017.3377,ekr.20031218072017.3378,ekr.20031218072017.3379,ekr.20031218072017.3380,ekr.20031218072017.3381,ekr.20031218072017.1581,ekr.20040307073708,ekr.20040307073708.7,ekr.20040307073708.8,ekr.20040307073708.9,ekr.20040307073708.13,ekr.20040307073708.14,ekr.20040307073708.15,ekr.20040301071824,ekr.20031218072017.3419,ekr.20031218072017.3421,ekr.20031218072017.2355,ekr.20031218072017.3425,ekr.20031218072017.3426,ekr.20031218072017.3422,ekr.20031218072017.3438,ekr.20031218072017.1478,ekr.20031218072017.1479,ekr.20031218072017.1480,ekr.20031218072017.1481,ekr.20031218072017.1482,ekr.20031218072017.3385,ekr.20031218072017.3389,ekr.20031218072017.3390,ekr.20031218072017.3391,ekr.20031218072017.3392,ekr.20031218072017.3393,ekr.20031218072017.3395,ekr.20031218072017.3396,ekr.20031218072017.3397,ekr.20031218072017.3398,ekr.20031218072017.3399,ekr.20031218072017.3400,ekr.20031218072017.3401,ekr.20031218072017.3402,ekr.20031218072017.3403,ekr.20031218072017.3404,ekr.20031218072017.3358,ekr.20031218072017.1991,ekr.20031218072017.1992,ekr.20031218072017.1993,ekr.20031218072017.1994,ekr.20031218072017.1995,ekr.20031218072017.1996,ekr.20031218072017.1997,ekr.20031218072017.1998,ekr.20031218072017.1999,ekr.20031218072017.889,ekr.20031218072017.890,ekr.20031218072017.892,ekr.20031218072017.893,ekr.20040117170612,ekr.20040117173448,ekr.20040301205720,ekr.20040310153624,ekr.20040306211032,ekr.20040306212151,ekr.20040306211917,ekr.20040306220230,ekr.20040306214401,ekr.20040306220230.1,ekr.20040306214240.3,ekr.20040303212445,ekr.20040306212636.1,ekr.20040307104131.3,ekr.20040306215548,ekr.20031218072017.915,ekr.20040227212621,ekr.20040227224946,ekr.20040307104131.1,ekr.20040306215056,ekr.20040307104131.2,ekr.20040117162509.16,ekr.20040227214711,ekr.20040306220634.9,ekr.20040306220634.2,ekr.20040306220634.8,ekr.20040306220634.29,ekr.20040306220634.31,ekr.20040305223522,ekr.20040305222924.1,ekr.20040305223225,ekr.20040312015705,ekr.20040306220634.17,ekr.20031218072017.3388,ekr.20040311113514,ekr.20040303163717,ekr.20040303214038,ekr.20040303163052,ekr.20040303162823,ekr.20040303163330,ekr.20040305162628.1,ekr.20040305171133,ekr.20040305171133.1,ekr.20040305171133.3,ekr.20040305173559,ekr.20040305173559.1,ekr.20040305173559.2,ekr.20040305172211.1,ekr.20040305172211.2,ekr.20040305172211.3,ekr.20040305172855,ekr.20040305172855.1,ekr.20040305172855.2,ekr.20040305173343,ekr.20040305173343.1,ekr.20040305173343.2,ekr.20040303175026.2,ekr.20040303175026.3,ekr.20040303175026.4,ekr.20040303175026.5,ekr.20040303175026.6,ekr.20040303175026.8,ekr.20040303175026.9,ekr.20040303175026.10,ekr.20040306060312,ekr.20040303175026.11,ekr.20040303175026.12,ekr.20040303175026.13,ekr.20040303175026.14,ekr.20040303175026.15,ekr.20040303175026.16,ekr.20040303175026.18,ekr.20031218072017.928,ekr.20031218072017.930,ekr.20031218072017.931,ekr.20031218072017.932,ekr.20031218072017.933,ekr.20040301211133,ekr.20031218072017.934,ekr.20031218072017.935,ekr.20031218072017.936,ekr.20031218072017.937,ekr.20031218072017.938,ekr.20040301211500,ekr.20031218072017.939,ekr.20031218072017.940,ekr.20031218072017.941,ekr.20040117171654,ekr.20040228060340,ekr.20040228060340.1,ekr.20040310062332,ekr.20040310062332.1,ekr.20040310062332.2,ekr.20040310062332.3,ekr.20040310062332.4,ekr.20040310062332.5"><vh>@file leoNodes.py</vh>
<v t="ekr.20031218072017.2408"><vh>&lt;&lt; About clones &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2412"><vh>&lt;&lt; About the vnode and tnode classes &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3321"><vh>class tnode</vh>
<v t="ekr.20031218072017.3322"><vh>&lt;&lt; tnode constants &gt;&gt;</vh></v>
<v t="ekr.20031218072017.2006"><vh>t.__init__</vh></v>
<v t="ekr.20031218072017.3323"><vh>t.__repr__ &amp; t.__str__</vh></v>
<v t="ekr.20031218072017.3324"><vh>t.extraAttributes &amp; setExtraAttributes</vh></v>
<v t="ekr.20031218072017.3325"><vh>Getters</vh>
<v t="ekr.20031218072017.3326"><vh>hasBody</vh></v>
<v t="ekr.20031218072017.3327"><vh>Status bits</vh>
<v t="ekr.20031218072017.3328"><vh>isDirty</vh></v>
<v t="ekr.20031218072017.3329"><vh>isRichTextBit</vh></v>
<v t="ekr.20031218072017.3330"><vh>isVisited</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3331"><vh>Setters</vh>
<v t="ekr.20031218072017.1484"><vh>Setting body text</vh>
<v t="ekr.20031218072017.1485"><vh>setTnodeText</vh></v>
<v t="ekr.20031218072017.1486"><vh>setSelection</vh></v>
</v>
<v t="ekr.20031218072017.3332"><vh>Status bits</vh>
<v t="ekr.20031218072017.3333"><vh>clearDirty</vh></v>
<v t="ekr.20031218072017.3334"><vh>clearRichTextBit</vh></v>
<v t="ekr.20031218072017.3335"><vh>clearVisited</vh></v>
<v t="ekr.20031218072017.3336"><vh>setDirty</vh></v>
<v t="ekr.20031218072017.3337"><vh>setRichTextBit</vh></v>
<v t="ekr.20031218072017.3338"><vh>setVisited</vh></v>
</v>
<v t="ekr.20031218072017.3339"><vh>setCloneIndex (used in 3.x)</vh></v>
<v t="ekr.20031218072017.3340"><vh>setFileIndex</vh></v>
</v>
</v>
<v t="ekr.20031218072017.3341"><vh>class vnode</vh>
<v t="ekr.20031218072017.951"><vh>&lt;&lt; vnode constants &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3342"><vh>Birth &amp; death</vh>
<v t="ekr.20031218072017.3343"><vh>v.__cmp__ (not used)</vh></v>
<v t="ekr.20031218072017.3344"><vh>v.__init__</vh>
<v t="ekr.20031218072017.1968"><vh>&lt;&lt; initialize vnode data members &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3345"><vh>v.__repr__ &amp; v.__str__</vh></v>
</v>
<v t="ekr.20031218072017.3346"><vh>Comparisons (vnode)</vh>
<v t="ekr.20031218072017.3347"><vh>afterHeadlineMatch</vh></v>
<v t="ekr.20031218072017.3348"><vh>at/../NodeName</vh></v>
<v t="ekr.20031218072017.3349"><vh>isAt/../Node</vh></v>
<v t="ekr.20031218072017.3350"><vh>isAnyAtFileNode &amp; isAnyAtFileNodeName</vh></v>
<v t="ekr.20031218072017.3351"><vh>isAtIgnoreNode</vh></v>
<v t="ekr.20031218072017.3352"><vh>isAtOthersNode</vh></v>
<v t="ekr.20031218072017.3353"><vh>matchHeadline</vh></v>
</v>
<v t="ekr.20031218072017.3354"><vh>File Conversion (vnode)</vh>
<v t="ekr.20031218072017.3355"><vh>convertTreeToString</vh></v>
<v t="ekr.20031218072017.3356"><vh>moreHead</vh></v>
<v t="ekr.20031218072017.3357"><vh>v.moreBody</vh></v>
</v>
<v t="ekr.20031218072017.3359"><vh>Getters (vnode)</vh>
<v t="ekr.20040306214240"><vh>Tree Traversal getters</vh>
<v t="ekr.20031218072017.3406"><vh>v.back</vh></v>
<v t="ekr.20031218072017.3409"><vh>v.next</vh></v>
</v>
<v t="ekr.20031218072017.3360"><vh>Children</vh>
<v t="ekr.20040307085922"><vh>hasChildren &amp; hasFirstChild (new in 4.2 for compatibility with positions)</vh></v>
<v t="ekr.20031218072017.3366"><vh>numberOfChildren (n)</vh></v>
<v t="ekr.20031218072017.3361"><vh>v.childIndex (changed for 4.2)</vh></v>
<v t="ekr.20031218072017.3362"><vh>v.firstChild (changed for 4.2)</vh></v>
<v t="ekr.20031218072017.3363"><vh>v.hasChildren</vh></v>
<v t="ekr.20031218072017.3364"><vh>v.lastChild</vh></v>
<v t="ekr.20031218072017.3365"><vh>v.nthChild</vh></v>
</v>
<v t="ekr.20031218072017.3367"><vh>Status Bits</vh>
<v t="ekr.20031218072017.3368"><vh>v.isCloned (4.2)</vh></v>
<v t="ekr.20031218072017.3369"><vh>isDirty</vh></v>
<v t="ekr.20031218072017.3370"><vh>isExpanded</vh></v>
<v t="ekr.20031218072017.3371"><vh>isMarked</vh></v>
<v t="ekr.20031218072017.3372"><vh>isOrphan</vh></v>
<v t="ekr.20031218072017.3373"><vh>isSelected</vh></v>
<v t="ekr.20031218072017.3374"><vh>isTopBitSet</vh></v>
<v t="ekr.20031218072017.3375"><vh>isVisible</vh></v>
<v t="ekr.20031218072017.3376"><vh>isVisited</vh></v>
<v t="ekr.20031218072017.3377"><vh>status</vh></v>
</v>
<v t="ekr.20031218072017.3378"><vh>bodyString</vh></v>
<v t="ekr.20031218072017.3379"><vh>v.currentVnode (and c.currentPosition 4.2)</vh></v>
<v t="ekr.20031218072017.3380"><vh>edit_text</vh></v>
<v t="ekr.20031218072017.3381"><vh>v.findRoot (4.2)</vh></v>
<v t="ekr.20031218072017.1581"><vh>headString &amp; cleanHeadString</vh></v>
</v>
<v t="ekr.20040307073708"><vh>Iterators (vnode)</vh>
<v t="ekr.20040309041436.1"><vh>Defined in 4.2</vh>
<v t="ekr.20040307073708.7"><vh>children_iter</vh>
<v t="ekr.20040307073708.8"><vh>__init__ &amp; __iter__</vh></v>
<v t="ekr.20040307073708.9"><vh>next</vh></v>
</v>
<v t="ekr.20040307073708.13"><vh>siblings_iter</vh>
<v t="ekr.20040307073708.14"><vh>__init__ &amp; __iter__</vh></v>
<v t="ekr.20040307073708.15"><vh>next</vh></v>
</v>
</v>
</v>
<v t="ekr.20040301071824"><vh>Link/Unlink/Insert methods (vnode) (used by file read logic)</vh>
<v t="ekr.20031218072017.3419"><vh>v.insertAfter</vh></v>
<v t="ekr.20031218072017.3421"><vh>v.insertAsNthChild</vh></v>
<v t="ekr.20031218072017.2355"><vh>v.linkAfter</vh></v>
<v t="ekr.20031218072017.3425"><vh>v.linkAsNthChild</vh></v>
<v t="ekr.20031218072017.3426"><vh>v.linkAsRoot</vh></v>
<v t="ekr.20031218072017.3422"><vh>v.moveToRoot</vh></v>
<v t="ekr.20031218072017.3438"><vh>v.unlink</vh></v>
</v>
<v t="ekr.20031218072017.3384"><vh>Setters</vh>
<v t="ekr.20031218072017.1477"><vh>Head and body text</vh>
<v t="ekr.20031218072017.1478"><vh>appendStringToBody</vh></v>
<v t="ekr.20031218072017.1479"><vh>scriptSetBodyString</vh></v>
<v t="ekr.20031218072017.1480"><vh>setBodyStringOrPane &amp; setBodyTextOrPane</vh></v>
<v t="ekr.20031218072017.1481"><vh>setHeadString &amp; initHeadString</vh></v>
<v t="ekr.20031218072017.1482"><vh>setHeadStringOrHeadline</vh></v>
</v>
<v t="ekr.20031218072017.3385"><vh>computeIcon &amp; setIcon</vh></v>
<v t="ekr.20031218072017.3386"><vh>Status bits</vh>
<v t="ekr.20031218072017.3389"><vh>clearClonedBit</vh></v>
<v t="ekr.20031218072017.3390"><vh>clearDirty &amp; clearDirtyJoined (redundant code)</vh></v>
<v t="ekr.20031218072017.3391"><vh>clearMarked</vh></v>
<v t="ekr.20031218072017.3392"><vh>clearOrphan</vh></v>
<v t="ekr.20031218072017.3393"><vh>clearVisited</vh></v>
<v t="ekr.20031218072017.3395"><vh>contract &amp; expand &amp; initExpandedBit</vh></v>
<v t="ekr.20031218072017.3396"><vh>initStatus</vh></v>
<v t="ekr.20031218072017.3397"><vh>setClonedBit &amp; initClonedBit</vh></v>
<v t="ekr.20031218072017.3398"><vh>setMarked &amp; initMarkedBit</vh></v>
<v t="ekr.20031218072017.3399"><vh>setOrphan</vh></v>
<v t="ekr.20031218072017.3400"><vh>setSelected (vnode)</vh></v>
<v t="ekr.20031218072017.3401"><vh>setVisited</vh></v>
</v>
<v t="ekr.20031218072017.3402"><vh>setSelection</vh></v>
<v t="ekr.20031218072017.3403"><vh>setT (not used)</vh></v>
<v t="ekr.20031218072017.3404"><vh>trimTrailingLines</vh></v>
</v>
<v t="ekr.20031218072017.3358"><vh>v.extraAttributes &amp; setExtraAttributes</vh></v>
</v>
<v t="ekr.20031218072017.1991"><vh>class nodeIndices</vh>
<v t="ekr.20031218072017.1992"><vh>nodeIndices.__init__</vh></v>
<v t="ekr.20031218072017.1993"><vh>areEqual</vh></v>
<v t="ekr.20031218072017.1994"><vh>get/setDefaultId</vh></v>
<v t="ekr.20031218072017.1995"><vh>getNewIndex</vh></v>
<v t="ekr.20031218072017.1996"><vh>isGnx</vh></v>
<v t="ekr.20031218072017.1997"><vh>scanGnx</vh></v>
<v t="ekr.20031218072017.1998"><vh>setTimeStamp</vh></v>
<v t="ekr.20031218072017.1999"><vh>toString</vh></v>
</v>
<v t="ekr.20031218072017.889"><vh>class position</vh>
<v t="ekr.20040228094013"><vh> ctor &amp; other special methods...</vh>
<v t="ekr.20031218072017.892"><vh>p.__init__</vh></v>
<v t="ekr.20031218072017.893"><vh>p.__cmp__</vh></v>
<v t="ekr.20040117170612"><vh>p.__getattr__  (used only for p.t)</vh></v>
<v t="ekr.20040117173448"><vh>p.__nonzero__</vh></v>
<v t="ekr.20040301205720"><vh>p.__str__ and p.__repr__</vh></v>
<v t="ekr.20040310153624"><vh>p.dump</vh></v>
</v>
<v t="ekr.20031218072017.890"><vh>&lt;&lt; about the position class &gt;&gt;</vh></v>
<v t="ekr.20040306212636"><vh>Getters</vh>
<v t="ekr.20040306210951"><vh> vnode proxies</vh>
<v t="ekr.20040306211032"><vh>Comparisons</vh></v>
<v t="ekr.20040306212151"><vh>Extra Attributes</vh></v>
<v t="ekr.20040306211917"><vh>File Conversion</vh></v>
<v t="ekr.20040306220230"><vh>Headline &amp; body strings</vh></v>
<v t="ekr.20040306214401"><vh>Status bits</vh></v>
<v t="ekr.20040306220230.1"><vh>p.edit_text</vh></v>
</v>
<v t="ekr.20040306214240.2"><vh>children</vh>
<v t="ekr.20040306214240.3"><vh>p.hasChildren</vh></v>
<v t="ekr.20040303212445"><vh>p.childIndex</vh></v>
<v t="ekr.20040306212636.1"><vh>p.numberOfChildren</vh></v>
</v>
<v t="ekr.20040307104131.3"><vh>p.exists</vh></v>
<v t="ekr.20040306215548"><vh>p.findRoot</vh></v>
<v t="ekr.20031218072017.915"><vh>p.getX &amp; vnode compatibility traversal routines</vh></v>
<v t="ekr.20040227212621"><vh>p.hasX </vh>
<v t="ekr.20040227224946"><vh>hasThreadNext (the only complex hasX method)</vh></v>
</v>
<v t="ekr.20040307104131.1"><vh>p.isAncestorOf</vh></v>
<v t="ekr.20040306215056"><vh>p.isCloned</vh></v>
<v t="ekr.20040307104131.2"><vh>p.isRoot</vh></v>
<v t="ekr.20040117162509.16"><vh>p.isVisible</vh></v>
<v t="ekr.20040227214711"><vh>p.level</vh></v>
</v>
<v t="ekr.20040305222924"><vh>Setters</vh>
<v t="ekr.20040306220634"><vh>vnode proxies</vh>
<v t="ekr.20040306220634.9"><vh> Status bits</vh></v>
<v t="ekr.20040306220634.2"><vh> Head and body text</vh></v>
<v t="ekr.20040306220634.8"><vh>p.computeIcon &amp; p.setIcon</vh></v>
<v t="ekr.20040306220634.29"><vh>p.setSelection</vh></v>
<v t="ekr.20040306220634.31"><vh>p.trimTrailingLines</vh></v>
</v>
<v t="ekr.20040305223522"><vh>p.setBodyStringOrPane &amp; p.setBodyTextOrPane</vh></v>
<v t="ekr.20040305222924.1"><vh>p.setHeadString &amp; p.initHeadString</vh></v>
<v t="ekr.20040305223225"><vh>p.setHeadStringOrHeadline</vh></v>
<v t="ekr.20040312015908"><vh>Visited bits</vh>
<v t="ekr.20040312015705"><vh>p.clearAllVisited</vh></v>
<v t="ekr.20040306220634.17"><vh>p.clearVisitedInTree</vh></v>
<v t="ekr.20031218072017.3388"><vh>clearAllVisitedInTree TO POSITION</vh></v>
</v>
<v t="ekr.20040305162628"><vh>Dirty bits</vh>
<v t="ekr.20040311113514"><vh>p.clearDirty</vh></v>
<v t="ekr.20040303163717"><vh>p.isDirty</vh></v>
<v t="ekr.20040303214038"><vh>p.setAllAncestorAtFileNodesDirty</vh></v>
<v t="ekr.20040303163052"><vh>p.setAncestorAtFileNodeDirty</vh></v>
<v t="ekr.20040303162823"><vh>p.setAncestorsOfClonedNodesInTreeDirty</vh></v>
<v t="ekr.20040303163330"><vh>p.setDirty</vh></v>
</v>
</v>
<v t="ekr.20040305162628.1"><vh>Iterators (position)</vh>
<v t="ekr.20040305171133"><vh>allNodes_iter</vh>
<v t="ekr.20040305171133.1"><vh>__init__ &amp; __iter__</vh></v>
<v t="ekr.20040305171133.3"><vh>next</vh></v>
</v>
<v t="ekr.20040305173559"><vh>subtree_iter</vh>
<v t="ekr.20040305173559.1"><vh>__init__ &amp; __iter__</vh></v>
<v t="ekr.20040305173559.2"><vh>next</vh></v>
</v>
<v t="ekr.20040305172211.1"><vh>children_iter</vh>
<v t="ekr.20040305172211.2"><vh>__init__ &amp; __iter__</vh></v>
<v t="ekr.20040305172211.3"><vh>next</vh></v>
</v>
<v t="ekr.20040305172855"><vh>parents_iter</vh>
<v t="ekr.20040305172855.1"><vh>__init__ &amp; __iter__</vh></v>
<v t="ekr.20040305172855.2"><vh>next</vh></v>
</v>
<v t="ekr.20040305173343"><vh>siblings_iter</vh>
<v t="ekr.20040305173343.1"><vh>__init__ &amp; __iter__</vh></v>
<v t="ekr.20040305173343.2"><vh>next</vh></v>
</v>
</v>
<v t="ekr.20040303175026"><vh>Moving, Inserting, Deleting, Cloning, Sorting (position) </vh>
<v t="ekr.20040303175026.1"><vh>Entry Points (positon)</vh>
<v t="ekr.20040303175026.2"><vh>p.doDelete</vh></v>
<v t="ekr.20040303175026.3"><vh>p.insertAfter</vh></v>
<v t="ekr.20040303175026.4"><vh>p.insertAsLastChild</vh></v>
<v t="ekr.20040303175026.5"><vh>p.insertAsNthChild</vh></v>
<v t="ekr.20040303175026.6"><vh>p.moveToRoot</vh></v>
<v t="ekr.20040303175026.8"><vh>p.clone</vh></v>
<v t="ekr.20040303175026.9"><vh>p.copyTreeWithNewTnodes: used by unit tests TO DO</vh></v>
<v t="ekr.20040303175026.10"><vh>p.moveAfter</vh></v>
<v t="ekr.20040306060312"><vh>p.moveToLastChildOf</vh></v>
<v t="ekr.20040303175026.11"><vh>p.moveToNthChildOf</vh></v>
<v t="ekr.20040303175026.12"><vh>p.sortChildren</vh></v>
<v t="ekr.20040303175026.13"><vh>p.validateOutlineWithParent</vh>
<v t="ekr.20040303175026.14"><vh>&lt;&lt; validate parent ivar &gt;&gt;</vh></v>
<v t="ekr.20040303175026.15"><vh>&lt;&lt; validate childIndex ivar &gt;&gt;</vh></v>
<v t="ekr.20040303175026.16"><vh>&lt;&lt; validate x ivar &gt;&gt;</vh></v>
</v>
<v t="ekr.20040303175026.18"><vh>p.invalidOutline</vh></v>
</v>
</v>
<v t="ekr.20031218072017.928"><vh>p.moveToX</vh>
<v t="ekr.20031218072017.930"><vh>p.moveToBack</vh></v>
<v t="ekr.20031218072017.931"><vh>p.moveToFirstChild (pushes stack for cloned nodes)</vh></v>
<v t="ekr.20031218072017.932"><vh>p.moveToLastChild (pushes stack for cloned nodes)</vh></v>
<v t="ekr.20031218072017.933"><vh>p.moveToLastNode (new cheap code)</vh>
<v t="ekr.20040301211133"><vh>&lt;&lt; simulate repeated "lookahead" calls to p.moveToThreadNext() &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.934"><vh>p.moveToNext</vh></v>
<v t="ekr.20031218072017.935"><vh>p.moveToNodeAfterTree</vh></v>
<v t="ekr.20031218072017.936"><vh>p.moveToNthChild (pushes stack for cloned nodes)</vh></v>
<v t="ekr.20031218072017.937"><vh>p.moveToParent (pops stack when multiple parents)</vh></v>
<v t="ekr.20031218072017.938"><vh>p.moveToThreadBack (new cheap code)</vh>
<v t="ekr.20040301211500"><vh>p.checkNextThreadNextLevel</vh></v>
</v>
<v t="ekr.20031218072017.939"><vh>p.moveToThreadNext</vh></v>
<v t="ekr.20031218072017.940"><vh>p.moveToVisBack</vh></v>
<v t="ekr.20031218072017.941"><vh>p.moveToVisNext</vh></v>
</v>
<v t="ekr.20040228094013.1"><vh>p.utils...</vh>
<v t="ekr.20040117171654"><vh>p.copy</vh></v>
<v t="ekr.20040228060340"><vh>p.vParentWithStack</vh>
<v t="ekr.20040228060340.1"><vh>&lt;&lt; about the vParentWithStack utility method &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20040310062332"><vh>Link/Unlink methods (position)</vh>
<v t="ekr.20040310062332.1"><vh>p.invalidOutline</vh></v>
<v t="ekr.20040310062332.2"><vh>p.linkAfter</vh></v>
<v t="ekr.20040310062332.3"><vh>p.linkAsNthChild</vh></v>
<v t="ekr.20040310062332.4"><vh>p.linkAsRoot</vh></v>
<v t="ekr.20040310062332.5"><vh>p.unlink</vh></v>
</v>
</v>
</v>
<v t="ekr.20031218072017.3018" tnodeList="ekr.20031218072017.3018,ekr.20031218072017.3019,ekr.20031218072017.2004,ekr.20031218072017.1860,ekr.20031218072017.1861,ekr.20031218072017.1557,ekr.20031218072017.1558,ekr.20031218072017.1244,ekr.20031218072017.1245,ekr.20031218072017.3022,ekr.20031218072017.3023,ekr.20031218072017.3024,ekr.20031218072017.2064,ekr.20031218072017.2065,ekr.20031218072017.2306,ekr.20031218072017.1553,ekr.20031218072017.1554,ekr.20031218072017.1555,ekr.20031218072017.1556,ekr.20031218072017.1970,ekr.20031218072017.1559,ekr.20031218072017.3025,ekr.20031218072017.2062,ekr.20031218072017.2063,ekr.20031218072017.3026,ekr.20031218072017.1561,ekr.20031218072017.1564,ekr.20031218072017.1563,ekr.20031218072017.1562,ekr.20031218072017.1560,ekr.20031218072017.1566,ekr.20031218072017.1567,ekr.20031218072017.1568,ekr.20031218072017.2008,ekr.20031218072017.1565,ekr.20031218072017.1249,ekr.20031218072017.1468,ekr.20031218072017.3027,ekr.20031218072017.3028,ekr.20031218072017.2009,ekr.20031218072017.3029,ekr.20031218072017.3030,ekr.20031218072017.2298,ekr.20031218072017.2297,ekr.20031218072017.2298,ekr.20031218072017.3031,ekr.20031218072017.1570,ekr.20031218072017.1571,ekr.20031218072017.1572,ekr.20031218072017.1470,ekr.20031218072017.1971,ekr.20031218072017.1972,ekr.20031218072017.3034,ekr.20031218072017.3035,ekr.20031218072017.3036,ekr.20031218072017.3037,ekr.20031218072017.3038,ekr.20031218072017.3039,ekr.20031218072017.3040,ekr.20031218072017.3041,ekr.20031218072017.1573,ekr.20031218072017.3042,ekr.20031218072017.2066,ekr.20031218072017.2067,ekr.20031218072017.2068,ekr.20031218072017.1246,ekr.20031218072017.1247,ekr.20031218072017.1248,ekr.20031218072017.1577,ekr.20031218072017.1578,ekr.20031218072017.2002,ekr.20031218072017.1575,ekr.20031218072017.1576,ekr.20031218072017.1863,ekr.20031218072017.1864,ekr.20031218072017.1865,ekr.20031218072017.1867,ekr.20031218072017.1866,ekr.20031218072017.1579,ekr.20031218072017.1720,ekr.20031218072017.3043,ekr.20031218072017.3044,ekr.20031218072017.3045,ekr.20031218072017.3046,ekr.20031218072017.3047,ekr.20031218072017.3048,ekr.20031218072017.3049,ekr.20031218072017.3048,ekr.20031218072017.3049,ekr.20031218072017.2012,ekr.20031218072017.1666,ekr.20031218072017.2013,ekr.20031218072017.3050,ekr.20031218072017.3051"><vh>@file leoFileCommands.py</vh>
<v t="ekr.20031218072017.3019"><vh>leoFileCommands._init_</vh></v>
<v t="ekr.20031218072017.3020"><vh>Reading</vh>
<v t="ekr.20031218072017.2004"><vh>canonicalTnodeIndex</vh></v>
<v t="ekr.20031218072017.1860"><vh>createVnode (changed for 4.2)</vh>
<v t="ekr.20031218072017.1861"><vh>&lt;&lt; handle unknown vnode attributes &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1557"><vh>finishPaste</vh>
<v t="ekr.20031218072017.1558"><vh>&lt;&lt; reassign tnode indices and clear all clone links &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3021"><vh>get routines</vh>
<v t="ekr.20031218072017.1243"><vh>get &amp; match (basic)(leoFileCommands)</vh>
<v t="ekr.20031218072017.1244"><vh>get routines</vh></v>
<v t="ekr.20031218072017.1245"><vh>match routines</vh></v>
</v>
<v t="ekr.20031218072017.3022"><vh>getClipboardHeader</vh></v>
<v t="ekr.20031218072017.3023"><vh>getCloneWindows</vh></v>
<v t="ekr.20031218072017.3024"><vh>getEscapedString</vh></v>
<v t="ekr.20031218072017.2064"><vh>getFindPanelSettings</vh>
<v t="ekr.20031218072017.2065"><vh>&lt;&lt; Set defaults of all flags &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2306"><vh>getGlobals</vh></v>
<v t="ekr.20031218072017.1553"><vh>getLeoFile</vh>
<v t="ekr.20031218072017.1554"><vh>&lt;&lt; warn on read-only files &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1555"><vh>&lt;&lt; scan all the xml elements &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1556"><vh>&lt;&lt; raise an alert &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1970"><vh>getLeoHeader</vh></v>
<v t="ekr.20031218072017.1559"><vh>getLeoOutline (from clipboard)</vh></v>
<v t="ekr.20031218072017.3025"><vh>getPosition</vh></v>
<v t="ekr.20031218072017.2062"><vh>getPrefs</vh>
<v t="ekr.20031218072017.2063"><vh>getTargetLanguage</vh></v>
</v>
<v t="ekr.20031218072017.3026"><vh>getSize</vh></v>
<v t="ekr.20031218072017.1561"><vh>getTnode</vh>
<v t="ekr.20031218072017.1562"><vh>&lt;&lt; handle read from file &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1563"><vh>&lt;&lt; handle read from clipboard &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1564"><vh>&lt;&lt; handle unknown attributes &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1560"><vh>getTnodes</vh></v>
<v t="ekr.20031218072017.1566"><vh>getVnode changed for 4.2)</vh>
<v t="ekr.20031218072017.1567"><vh>&lt;&lt; Handle vnode attribute bits  &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1568"><vh>&lt;&lt; Set the remembered status bits &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2008"><vh>getTnodeList (4.0)</vh></v>
<v t="ekr.20031218072017.1565"><vh>getVnodes</vh></v>
<v t="ekr.20031218072017.1249"><vh>getXmlStylesheetTag</vh></v>
<v t="ekr.20031218072017.1468"><vh>getXmlVersionTag</vh></v>
<v t="ekr.20031218072017.3027"><vh>skipWs</vh></v>
<v t="ekr.20031218072017.3028"><vh>skipWsAndNl</vh></v>
</v>
<v t="ekr.20031218072017.2009"><vh>newTnode</vh></v>
<v t="ekr.20031218072017.3029"><vh>readAtFileNodes</vh></v>
<v t="ekr.20031218072017.3030"><vh>fileCommands.readOutlineOnly</vh>
<v t="ekr.20031218072017.2298"><vh>&lt;&lt; Set the default directory &gt;&gt; in fileCommands.readOutlineOnly</vh></v>
</v>
<v t="ekr.20031218072017.2297"><vh>fileCommands.open</vh>
<v t="ekr.20031218072017.2298"><vh>&lt;&lt; Set the default directory &gt;&gt; in fileCommands.readOutlineOnly</vh></v>
</v>
<v t="ekr.20031218072017.3031"><vh>xmlUnescape</vh></v>
</v>
<v t="ekr.20031218072017.3032"><vh>Writing</vh>
<v t="ekr.20031218072017.1570"><vh>assignFileIndices &amp; compactFileIndices</vh>
<v t="ekr.20031218072017.1571"><vh>&lt;&lt; assign missing gnx's, converting ints to gnx's &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1572"><vh>&lt;&lt; reassign all tnode indices &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3033"><vh>put routines</vh>
<v t="ekr.20031218072017.1470"><vh>put (basic)(leoFileCommands)</vh></v>
<v t="ekr.20031218072017.1971"><vh>putClipboardHeader</vh>
<v t="ekr.20031218072017.1972"><vh>&lt;&lt; count the number of tnodes &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3034"><vh>putEscapedString</vh></v>
<v t="ekr.20031218072017.3035"><vh>putFindSettings</vh>
<v t="ekr.20031218072017.3036"><vh>&lt;&lt; put find settings that may exist in leoConfig.txt &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3037"><vh>fileCommands.putGlobals (changed for 4.0)</vh>
<v t="ekr.20031218072017.3038"><vh>&lt;&lt; put the body/outline ratio &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3039"><vh>&lt;&lt; put the position of this frame &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3040"><vh>&lt;&lt; put the position of the log window &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.3041"><vh>putHeader</vh></v>
<v t="ekr.20031218072017.1573"><vh>putLeoOutline (to clipboard)</vh></v>
<v t="ekr.20031218072017.3042"><vh>putPostlog</vh></v>
<v t="ekr.20031218072017.2066"><vh>putPrefs</vh>
<v t="ekr.20031218072017.2067"><vh>&lt;&lt; put prefs that may exist in leoConfig.txt &gt;&gt; (putPrefs)</vh>
<v t="ekr.20031218072017.2068"><vh>&lt;&lt; put default directory &gt;&gt;</vh></v>
</v>
</v>
<v t="ekr.20031218072017.1246"><vh>putProlog</vh>
<v t="ekr.20031218072017.1247"><vh>&lt;&lt; Put the &lt;?xml...?&gt; line &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1248"><vh>&lt;&lt; Put the optional &lt;?xml-stylesheet...?&gt; line &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1577"><vh>putTnode</vh>
<v t="ekr.20031218072017.1578"><vh>&lt;&lt; put unknown tnode attributes &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2002"><vh>putTnodeList (4.0)</vh></v>
<v t="ekr.20031218072017.1575"><vh>putTnodes</vh>
<v t="ekr.20031218072017.1576"><vh>&lt;&lt; write only those tnodes that were referenced &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1863"><vh>putVnode (3.x and 4.x)</vh>
<v t="ekr.20031218072017.1864"><vh>&lt;&lt; Put tnode index &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1865"><vh>&lt;&lt; Put attribute bits &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1866"><vh>&lt;&lt; write the head text &gt;&gt;</vh></v>
<v t="ekr.20031218072017.1867"><vh>&lt;&lt; put unknown vnode attributes &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.1579"><vh>putVnodes</vh></v>
</v>
<v t="ekr.20031218072017.1720"><vh>save</vh></v>
<v t="ekr.20031218072017.3043"><vh>saveAs</vh></v>
<v t="ekr.20031218072017.3044"><vh>saveTo</vh></v>
<v t="ekr.20031218072017.3045"><vh>setDefaultDirectoryForNewFiles</vh></v>
<v t="ekr.20031218072017.3046"><vh>write_LEO_file</vh>
<v t="ekr.20031218072017.3047"><vh>&lt;&lt; create backup file &gt;&gt; in write_LEO_file</vh></v>
<v t="ekr.20031218072017.3048"><vh>&lt;&lt; delete backup file &gt;&gt;</vh></v>
<v t="ekr.20031218072017.3049"><vh>&lt;&lt; erase filename and rename backupName to fileName &gt;&gt;</vh></v>
</v>
<v t="ekr.20031218072017.2012"><vh>writeAtFileNodes</vh></v>
<v t="ekr.20031218072017.1666"><vh>writeDirtyAtFileNodes</vh></v>
<v t="ekr.20031218072017.2013"><vh>writeMissingAtFileNodes</vh></v>
<v t="ekr.20031218072017.3050"><vh>writeOutlineOnly</vh></v>
<v t="ekr.20031218072017.3051"><vh>xmlEscape</vh></v>
</v>
</v>
</v>
</v>
<v t="ekr.20040312094553.1"><vh>To do next</vh>
<v t="ekr.20040312120107"><vh>Define p.link/unlink in terms of v.link/unlink ??</vh>
<v t="ekr.20040310062332"><vh>Link/Unlink methods (position)</vh>
<v t="ekr.20040310062332.1"><vh>p.invalidOutline</vh></v>
<v t="ekr.20040310062332.2"><vh>p.linkAfter</vh></v>
<v t="ekr.20040310062332.3"><vh>p.linkAsNthChild</vh></v>
<v t="ekr.20040310062332.4"><vh>p.linkAsRoot</vh></v>
<v t="ekr.20040310062332.5"><vh>p.unlink</vh></v>
</v>
</v>
<v t="ekr.20040312021644"><vh>Test all commands</vh></v>
<v t="ekr.20040312092455.2"><vh>Enable and test atFile read logic</vh></v>
<v t="ekr.20040312092455.3"><vh>Think mini tests!</vh></v>
</v>
<v t="ekr.20040308151706" a="ETV"><vh>(Fix and test the script to replace x by g.x)</vh>
<v t="ekr.20040304163125" a="E"><vh>Script to find and replace all functions in leoGlobals.py</vh>
<v t="ekr.20040304165432"><vh>findNode &amp; findTopLevelNode</vh></v>
<v t="ekr.20040304165432.1"><vh>findFunctionsInTree</vh></v>
<v t="ekr.20040304163522"><vh>findDefs</vh></v>
<v t="ekr.20040304164949" a="E"><vh>prependNamesInTree(v,nameList,"g.")</vh>
<v t="ekr.20040304173234.1"><vh>&lt;&lt; look for name followed by '(' &gt;&gt;</vh></v>
<v t="ekr.20040304173234"><vh>&lt;&lt; print before and after &gt;&gt;</vh></v>
</v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="ekr.20031218072017">@ignore
@nocolor

Older diary entries are in LeoDocs.leo.</t>
<t tx="ekr.20031218072017.1"></t>
<t tx="ekr.20031218072017.2"></t>
<t tx="ekr.20031218072017.3"></t>
<t tx="ekr.20031218072017.4">This affects only the Reformat Paragraph command.</t>
<t tx="ekr.20031218072017.5"></t>
<t tx="ekr.20031218072017.6"></t>
<t tx="ekr.20031218072017.7"></t>
<t tx="ekr.20031218072017.8"></t>
<t tx="ekr.20031218072017.9">@nocolor

Leo now uses yymmddhhmmss as the format of timestamps.  This is good for sorting chronologically.</t>
<t tx="ekr.20031218072017.10">Using * shows files like readme that don't have a file extension.</t>
<t tx="ekr.20031218072017.11"></t>
<t tx="ekr.20031218072017.12"></t>
<t tx="ekr.20031218072017.13">The fix is to add a scripting arg to atFile.scanAllDirectives.</t>
<t tx="ekr.20031218072017.14">Also removed a confusing traceback.</t>
<t tx="ekr.20031218072017.15"></t>
<t tx="ekr.20031218072017.16">Found a batch-mode bug: the meaning of moves depends on whether nodes are expanded.  This won't be good in batch mode.</t>
<t tx="ekr.20031218072017.17"></t>
<t tx="ekr.20031218072017.18">It turns out that executing a script was setting the tnodeList for the node if the node had section refs!  This was the source of the ongoing mystery about why some nodes had tnodeLists.  Resolving this mystery puts Leo's read/write code on a firmer foundation.

This was tricky to make sure that tnodeList's are created and written only when necessary:

- The fileCommands.putVnode writes tnodeList only for @file nodes.
  (and only non-empty tnodeList's)

- new_df.write clears at.root.tnodeList when writing a script.

- c.checkOutline (and the related script) does not consider that an empty tnodeList is an error.</t>
<t tx="ekr.20031218072017.19"></t>
<t tx="ekr.20031218072017.20"></t>
<t tx="ekr.20031218072017.21">Replaced string concatenation with list operations.</t>
<t tx="ekr.20031218072017.22"></t>
<t tx="ekr.20031218072017.23">Dialogs return a predefined value.</t>
<t tx="ekr.20031218072017.24"></t>
<t tx="ekr.20031218072017.25"></t>
<t tx="ekr.20031218072017.26"># Line 1108: _multiples = [(2., Numeric.log10(2.)), (5., Numeric.log10(5.))]

I suspect this was a file that contained both tabs and spaces.</t>
<t tx="ekr.20031218072017.27"></t>
<t tx="ekr.20031218072017.28">My conclusion at present is that the problem lies with 4.0.4, not 4.1.  I can see nothing seriously wrong with the present code:

- Missing tnodeList errors are possible when @file nodes are cloned when converting from 3.x to 4.x.  The tnodeList probably should have been made part of tnodes, not vnodes; it's too late to change now.

- Missing tnodeList errors are not serious: Leo will recover as usual.

- The copy/paste code had a few bugs that I corrected today.  I doubt whether these would have caused major problems.

In short, the present code appears to be reasonably solid.  I should withdraw the 4.0.4 code asap.</t>
<t tx="ekr.20031218072017.29"></t>
<t tx="ekr.20031218072017.30"></t>
<t tx="ekr.20031218072017.31">The old way always surprised me.

To make this work I disabled checks in the read logic if at.importing is true</t>
<t tx="ekr.20031218072017.32"></t>
<t tx="ekr.20031218072017.33"></t>
<t tx="ekr.20031218072017.34"></t>
<t tx="ekr.20031218072017.35">Only double-quoted strings are valid in html.  A lone single-quote caused a cascade of mismatched comments.</t>
<t tx="ekr.20031218072017.36">This has been around ever since the dragging code was created.</t>
<t tx="ekr.20031218072017.37">Plugins are now loaded in the order in which they appear in pluginsManager.txt.

Removed all "compile-time" enabling/disabling code from leoPlugins.leo.

The only such checks that remain are checks to see if Tkinter can be imported, and other similar checks.
</t>
<t tx="ekr.20031218072017.38"></t>
<t tx="ekr.20031218072017.39">The only change was that replaceClipboardWith now no longer returns a value.</t>
<t tx="ekr.20031218072017.40"></t>
<t tx="ekr.20031218072017.41"></t>
<t tx="ekr.20031218072017.42"></t>
<t tx="ekr.20031218072017.43"></t>
<t tx="ekr.20031218072017.44"></t>
<t tx="ekr.20031218072017.45">getBodyLines must set head = tail = None when lines is expanded to include everything.

This probably affects several other commands.</t>
<t tx="ekr.20031218072017.46"></t>
<t tx="ekr.20031218072017.47"></t>
<t tx="ekr.20031218072017.48">This fixes several related bugs:  updateRecentFiles was not being called except when openWithFileName was called.</t>
<t tx="ekr.20031218072017.49"></t>
<t tx="ekr.20031218072017.50"></t>
<t tx="ekr.20031218072017.51">app.batchLog was completely redundant.</t>
<t tx="ekr.20031218072017.52"></t>
<t tx="ekr.20031218072017.53"></t>
<t tx="ekr.20031218072017.54">The command seems to work well enough when we get this message.</t>
<t tx="ekr.20031218072017.55">Apparently I added shortcuts to the popup menu for the first time recently.

The "duplicate binding" logic would complain if popups actually tried to bind the shortcuts.

The fix: to add a dontBind param to createMenuEntries and set that param when creating the popup menu.</t>
<t tx="ekr.20031218072017.56">Replaced asserts with warnings.</t>
<t tx="ekr.20031218072017.57">Renaming bodyCtrl to body conflicted with a previous var named body.</t>
<t tx="ekr.20031218072017.58">putRefLine must return if putRefAt finds an error.</t>
<t tx="ekr.20031218072017.59">This "real" test exposed several problems:

- Only --script was recognized, not -script.
- Created global app.batchLog var.
- Changes to nullLog.__init__
	- inits app.batchLog if app.batchMode is true.
	- inits app.batchLog if app.batchMode is true (only if app.batchLog not inited).
- trace now _always_ uses print.  This prevents problems with traces in nullLog.
- es now uses app.batchLog.put if app.batchMode is true.
- nullGui.runMainLoop prints nothing unless app.batchLog is enabled.</t>
<t tx="ekr.20031218072017.60"></t>
<t tx="ekr.20031218072017.61"></t>
<t tx="ekr.20031218072017.62"></t>
<t tx="ekr.20031218072017.63"></t>
<t tx="ekr.20031218072017.64"></t>
<t tx="ekr.20031218072017.65"></t>
<t tx="ekr.20031218072017.66">This is a convenience routine for scripts.  It does not update the body pane.</t>
<t tx="ekr.20031218072017.67"></t>
<t tx="ekr.20031218072017.68">These exposed some further problems with the reorg.
</t>
<t tx="ekr.20031218072017.69"></t>
<t tx="ekr.20031218072017.70">Must call </t>
<t tx="ekr.20031218072017.71"></t>
<t tx="ekr.20031218072017.72">@nocolor

- (fixed) I noticed this in leoConfig.leo: config_encoding = iso-8859-1

- (fixed) ImportError: No module named leoDialog.

- (fixed) TypeError: about() takes exactly 2 arguments (1 given) (plugin_menu plugin)

- (fixed) mod_spelling plugin: several bugs.</t>
<t tx="ekr.20031218072017.73">It was very easy to do: just use the atFile.write to write into a file-like object.

The only other complication: we temporarily replace the root's body text with just the selected text.

Created app.scriptDict to communicate between the Execute Script command and the scripts being executed.

app.script["script1"] contains the original script.

app.script["script2"] contains the preprocessed script.  This will contain Leo sentinel lines.</t>
<t tx="ekr.20031218072017.74">Moved @others inside if "tk and 1:"</t>
<t tx="ekr.20031218072017.75"></t>
<t tx="ekr.20031218072017.76">This is a necessary precondition to supporting Unicode file and directory names properly.  It's not at all clear whether this is sufficient.  Anyway, these routines help clean up the code.

I took care that scripts import only those os_path_xxx routines that are necessary.  However, this process could have introduced bugs.</t>
<t tx="ekr.20031218072017.77">The find &amp; change scripts show the power of Leo's new script find/change commands.

Getting these scripts correct was a bit tricky.</t>
<t tx="ekr.20031218072017.78"></t>
<t tx="ekr.20031218072017.79"></t>
<t tx="ekr.20031218072017.80"></t>
<t tx="ekr.20031218072017.81"></t>
<t tx="ekr.20031218072017.82"></t>
<t tx="ekr.20031218072017.83"></t>
<t tx="ekr.20031218072017.84"></t>
<t tx="ekr.20031218072017.85"></t>
<t tx="ekr.20031218072017.86"></t>
<t tx="ekr.20031218072017.87">Due to moving and renaming some commands routines.</t>
<t tx="ekr.20031218072017.88">A simple bug due to the reorg.</t>
<t tx="ekr.20031218072017.89"></t>
<t tx="ekr.20031218072017.90">The new setEditVnode setter didn't set the global.</t>
<t tx="ekr.20031218072017.91">This is much more natural than the old way.</t>
<t tx="ekr.20031218072017.92">This removes a bit of a kludge.</t>
<t tx="ekr.20031218072017.93"></t>
<t tx="ekr.20031218072017.94">The biggest Aha was getting rid of redirection routines.

I could get rid of the tree redicrection routines if I used a proper tree class.  It's probably not worth it...</t>
<t tx="ekr.20031218072017.95">Moved get/setRealMenuName &amp; setRealMenuNamesFromTable.

It is really satisfying to get rid of these globals.  It makes the leoGlobals file much stronger.</t>
<t tx="ekr.20031218072017.96">These were hardly used anyway, and getting rid of them greatly clarifies the code.

These may create small problems in plugins...</t>
<t tx="ekr.20031218072017.97">- Key insight 1:  menus must belong to frames, _not_ to a gui.

- Key insight 2:  frame.menu.getFrame is gui-independed, so no need to "redirect"

- Key insight 3:  We prefer "binding" routines to "redirection" routines.

	Redirection routines just cause confusion and unnecessary work.

- Moved all global menu routines into gui-specific classes.

	This is an application of insight 3.  We want to bind things, not redirect calls.

- Moved all gui menu routines into gui-specfic classes.

	Same principle at work.  Much less work.

- Key insight 4:  Leo's core always calls frame.menu.x, _not_ app.gui.menu.x.

	For one thing, menu code must be frame-dependent, so a general app.gui.menu method WILL NOT WORK.

- Eliminated all frame "redirection" routines relating to menus.

I am very pleased with the result.  The new code is simpler and much less confusion.</t>
<t tx="ekr.20031218072017.98">There was a name colision between the code that used to be in the Frame class.</t>
<t tx="ekr.20031218072017.99"></t>
<t tx="ekr.20031218072017.100">Another problems due to the reorg.

Whole word searches did not succeed if the pattern was at the start or end of body text.

The getCharBeforeIndex and getCharAfterIndex routines must check for start and end of text.

While I was at it, I changed is_c_id so that it returns false if the argument is None.</t>
<t tx="ekr.20031218072017.101">Apparently this must be done after creating the dialog.</t>
<t tx="ekr.20031218072017.102">This was the result of the reorg.</t>
<t tx="ekr.20031218072017.103"></t>
<t tx="ekr.20031218072017.104"></t>
<t tx="ekr.20031218072017.105">- Eliminated app.gui.utils class (all code in app.gui class).

- Eliminated Focus routines in leoGlobals.py (now in app.gui class).</t>
<t tx="ekr.20031218072017.106"></t>
<t tx="ekr.20031218072017.107">At long last I realized that the gui-specific app.gui class should have an associated utils class to handle gui-specific routines that used to be in leoGlobals.py.

The pattern is:

	gu = app.gui.utils
	...
	gu.xxx(args)

It would be possible to define all the body wrapper methods in terms of the app.gui.utils class.  However, these routines naturally belong in the gui-specific class, so not as much is gained by doing this as might be imagined at first.

Anyway, the road is now clear to rewrite the wx gui plugin.  It will probably take only a few hours to do this!</t>
<t tx="ekr.20031218072017.108">This went remarkably smoothly.

The separation of gui-dependent from gui-independent code was usually trivial.

The Find classes were a bit harder: I created about a dozen tkinter wrapper routines so that all the utils could be moved into the base class.  This means that all the find logic is in the base class, and implementing a wx Find panel will be very easy.

The app.gui routines no longer require a "run" routine.  Instead, calling app.gui.createXPanel creates the panel and runs it.  All panels now support a "bringToFront" routine that is called to make the panel visible when the panel already exists.</t>
<t tx="ekr.20031218072017.109">- Moved recentFiles ivar from frame class to commands class.

- updateRecentFiles must call app.config.setRecentFiles with self.recentFiles as the arg, not c.recentFiles.</t>
<t tx="ekr.20031218072017.110"></t>
<t tx="ekr.20031218072017.111">What I did:

- Created wrappers for tk calls in core.
	- Removed all tk calls in undoRedoText
- Created wrappers for all tk calls in leoTkinterFrame
	(exception) OnInsertHeadlineTime uses v.edit_text
- Moved gui-independent commands code from leoTkinterFrame to leoFrame.
	No changes were needed!
- Changed x.commands to x.c for all classes x.
- Eliminated intermediate event handlers in frame class.
- Removed event param from all commands handlers.
	- Exception: the cut/copy/paste handlers must have an event param.
-Moved all non-gui commands into commands class.
	- Removed all frame routines that called commands.
	**There is now a clear separation between gui-dependent routines in leoFrame subclasses
	  and gui-independent routines in Commands class.
- Created stub routines for gui-dependent routines in leoFrame class</t>
<t tx="ekr.20031218072017.112">Rather than calling oops, it is so much more intelligent to call the corresponding bodyCtrl routine!</t>
<t tx="ekr.20031218072017.113"></t>
<t tx="ekr.20031218072017.114">This was very easy.  Almost all the menu code is now gui-independent.  This will make implementing the wx gui plugin _much_ easier.</t>
<t tx="ekr.20031218072017.115">Leo was mistaking the escaped percentile sign "\%" (backslash followed by
percentile) for the LaTeX comment delimiter (plain percentile sign).

The fix was:

1. Add "\\%" to the list of LaTeX keywords.
2. Create latex_special_keyword_characters = "@(){}%"
3. Use latex_special_keyword_characters when scanning for possible LaTeX keywords.
</t>
<t tx="ekr.20031218072017.116">The problem is that a successful search _must_ reset the selection range, so there isn't much point to this command.  Moreover, the Find All and Change All commands would loop if they aren't equivalent to the Find and Change commands when this option is in effect.  All in all, an almost useless option.  Too bad.</t>
<t tx="ekr.20031218072017.117"></t>
<t tx="ekr.20031218072017.118"></t>
<t tx="ekr.20031218072017.119">LeoPy.leo, The "Code" part only:

nodes,lines,pages, 2398, 79524, 2070

leoPlugins.leo:  Plugins &amp; scripts

nodes,lines,pages, 403, 10880, 298

LeoDocs.leo:  Users Guide

nodes,lines,pages, 379, 44606, 967</t>
<t tx="ekr.20031218072017.120"></t>
<t tx="ekr.20031218072017.121">"mbcs" probably will work only on Windows!</t>
<t tx="ekr.20031218072017.122">A recent change was done incorrectly.  There is no "find()" method: I changed it to findNext().</t>
<t tx="ekr.20031218072017.123"></t>
<t tx="ekr.20031218072017.124"></t>
<t tx="ekr.20031218072017.125"></t>
<t tx="ekr.20031218072017.126">A useful little utility to set up script-find/change.</t>
<t tx="ekr.20031218072017.127">This involved fixing a bug in idle_body_key so that the oldText param is honored if present.</t>
<t tx="ekr.20031218072017.128">The Script Change checkbox will have a few uses:

- It is replacement for a script that replaces the selection with text.  Yes, this script would be easy to write, but why not write it for the user?

Leo will execute a "default change script" when the Script Change checkbox is checked.  Simple and effective.</t>
<t tx="ekr.20031218072017.129"></t>
<t tx="ekr.20031218072017.130">Yes, we really do need script-based find/change.  The reason is that the find panel (and the associated find commands) is really the only good place to allow the user to do an interactive search.  Without this feature, all interactive find/change scripts would have to duplicate all the work of the find/change commands.

Still to do: help scripts do undo.

Conventions enforced by Leo:

- The app.searchDict ivar can be used for communication between find &amp; change scripts.
- app.searchDict["type"] contains either "find", "change", "findAll" or "changeAll".
- The Find All command executes the find script only once unless the script sets
  app.searchDict["Continue"] = true  (similarly for the change all command.
- The Find Then Change command executes the find command followed by the change command.
- The Change Script command supports undo if app.searchDict has the following entry after the script executes:
	{ "v" : v, "oldText" : oldText, "newText" : s }
	A "keys" key is an optional keyword dict to be passed to setUndoParams.

Leo actually doesn't do much:

- Leo doesn't clear app.searchDict.
	- However, a _script_ can
		a) init itself and
		b) bring up the find window (Eureka!)
- The find script is repsonsible for traversing the tree.
- The find script is responsible for highlighting the found text
  or otherwise indicating to the change script what the found text was.
  For example, the re find script can set app.searchDict["m"] to the match object.
- The find script must communicate with the change script.  Leo does nothing.
- The change script must change the text, usually by using v.setBodyStringOrPane.</t>
<t tx="ekr.20031218072017.131">@color

# Example showing how a script can init the Find panel

script = """from leoGlobals import *
c = top() ; v = c.currentVnode()
print `v`
v = v.threadNext()
c.selectVnode(v)"""

from leoGlobals import *
app.searchDict = {} # Communication between search &amp; change scripts
c = top()
c.script_search_flag = true
c.find_text = script
app.findFrame.init(c)
c.frame.OnFindPanel()
</t>
<t tx="ekr.20031218072017.132">Undoing Change All cleared the body pane.

The fix was simple: call setUndoParams instead of setUndoTypingParams in batchChange.</t>
<t tx="ekr.20031218072017.133"></t>
<t tx="ekr.20031218072017.134"></t>
<t tx="ekr.20031218072017.135">The node-only option wasn't working due to a bug in createFrame.

There still may be a problem with the interaction between Node-only,Change All and Undo.</t>
<t tx="ekr.20031218072017.136"></t>
<t tx="ekr.20031218072017.137">The fix was to open files with 'rb' instead of 'r'.  This probably should be done in more places.</t>
<t tx="ekr.20031218072017.138">This command checks for unused tnodeLists and checks the topology of all clones.</t>
<t tx="ekr.20031218072017.139">Hoisting itself is easy.  The biggest challenge was preventing moves outside the hoisted area, which would too confusing.</t>
<t tx="ekr.20031218072017.140"></t>
<t tx="ekr.20031218072017.141">- Added df.fileChanged flag.  This is set by replaceTargetFileIfDifferent.

- Separated the "written" logic from the "changed" logic.  We do an auto-save only if something has actually been changed.  The "written" logic is used to warn if a tree contains no @file nodes.</t>
<t tx="ekr.20031218072017.142"></t>
<t tx="ekr.20031218072017.143"></t>
<t tx="ekr.20031218072017.144">This is required for compatibility with Leo 3.x versions.</t>
<t tx="ekr.20031218072017.145">app.use_gnx controls whether we generate full gnx's or not.  At present there is no setting for this, so 4.1 really defines a new file format.

There was some weirdness: assignFileIndices didn't actually assign all file indices!  As a hack, putTnodeList also assigns file indices.  The mystery is solved.  Leo only clears the tnodeList of roots when writing, so once a non-root node gets a tnode list it can stay a long time.  Probably should clear all non-root tnode lists, and this would slow things down.

Perhaps a script could do the job?</t>
<t tx="ekr.20031218072017.146"></t>
<t tx="ekr.20031218072017.147"></t>
<t tx="ekr.20031218072017.148">The state of frame.controlKeyIsDown is not always correct.  I added bindings to the hidden root window to try to catch this.  This may not be a good idea...</t>
<t tx="ekr.20031218072017.149">- Added config_encoding setting to specify the encoding of leoConfig.txt.
- Converted all options to Unicode when reading leoConfig.txt.
- Converted all options to config.config_encoding when writing leoConfig.txt.</t>
<t tx="ekr.20031218072017.150"></t>
<t tx="ekr.20031218072017.151">- Replaced all references in colorizer to bodyCtrl by body.x.
- Removed colorizer.bodyCtrl ivar.
- Created colorizer.body ivar.</t>
<t tx="ekr.20031218072017.152">This removes all possibility that call set_focus from Leo's core will cause problems.

Actually though, Leo's core calls no focus routines, so there should be no problems.</t>
<t tx="ekr.20031218072017.153"></t>
<t tx="ekr.20031218072017.154">Create new Idle-time and clipboard routines in leoGui and leoTkinterGui classes.  Also updated wx plugin.</t>
<t tx="ekr.20031218072017.155"></t>
<t tx="ekr.20031218072017.156"></t>
<t tx="ekr.20031218072017.157"></t>
<t tx="ekr.20031218072017.158"></t>
<t tx="ekr.20031218072017.159"></t>
<t tx="ekr.20031218072017.160"></t>
<t tx="ekr.20031218072017.161">What I did:

- assignFileIndices &amp; compactFileIndices now are identical.

- putVnode now assigns vnode indices to _all_ tnodes.
	(not all of them may be written, but that doesn't matter)

- putVnode no longer writes the "C" (cloned) attribute.

- finishPaste now _reallocates_ tnode indices in all pasted nodes.  This fixes a major copy/paste bug.  Failure to do this would have created "false clones": hidden clones that would show up when the file was read again.</t>
<t tx="ekr.20031218072017.162"></t>
<t tx="ekr.20031218072017.163">The root wasn't being set properly because of a missing break statement.</t>
<t tx="ekr.20031218072017.164"></t>
<t tx="ekr.20031218072017.165"># Changed col= to column= in several places.
# Changed @file to @file-nosent mod_autosave.ini.</t>
<t tx="ekr.20031218072017.166">The code now uses updateBodyPane as before.</t>
<t tx="ekr.20031218072017.167">We don't have to mess with the ending selection for reformatParagraph because the shift commands now properly restore the selection.</t>
<t tx="ekr.20031218072017.168"></t>
<t tx="ekr.20031218072017.169">This is a bit kludgy, due to Tk weirdnesses.  I don't think it can be helped...</t>
<t tx="ekr.20031218072017.170"></t>
<t tx="ekr.20031218072017.171">This now preserves trailing newlines correctly.  Far from intuitive.</t>
<t tx="ekr.20031218072017.172">Unlike using string.split and string.join, these preserve the state of the trailing newline.</t>
<t tx="ekr.20031218072017.173">Added -1c in setSelectionAreas and getSelectionLines.

Tk's selection mechanism isn't great here.  I want to select to the end of the line, and if I specifing x lineend the cursor actually gets placed at the start of the next line!</t>
<t tx="ekr.20031218072017.174"></t>
<t tx="ekr.20031218072017.175">The code was mistakenly calling frame.destroySelf() if the file could not be opened.  This is always wrong.

While I was at it, I added an except IOError: clause that simply reports that the file could not be opened.

I really should create a wrapper for file to handle the except IOError: case...</t>
<t tx="ekr.20031218072017.176"></t>
<t tx="ekr.20031218072017.177">"idle" hooks must test app.initing before calling app.forceShutdown().
</t>
<t tx="ekr.20031218072017.178"></t>
<t tx="ekr.20031218072017.179"></t>
<t tx="ekr.20031218072017.180">This will allow me to define frame.body as an instance of the leoTkinterBody class.</t>
<t tx="ekr.20031218072017.181"></t>
<t tx="ekr.20031218072017.182">This removes some of the frame details from the app class.

As a result, several app methods went away.</t>
<t tx="ekr.20031218072017.183">- Added new getters and setters to leoTkinterFrame.

- The following classes will soon become tkinter classes, so references to top are not important:

LeoColorPanel, LeoColorNamePanel, leoCompare, leoDialog, leoFind, leoFont, leoPrefs</t>
<t tx="ekr.20031218072017.184">- Removed v.iconx and vicony from Leo's core.
	- Added default args in tree.drawIcon() so Leo's core doesn't know about the ivars.

- tree.drawIcon is now the only routine that accesses these ivars!</t>
<t tx="ekr.20031218072017.185">
- tkinterTree now injects callbacks into vnode class.
- leoFrame.py now contains base classes named leoFrame, leoBody, leoLog and leoTree.
- Renamed present LeoFrame class to leoTkinterFrame and move it to leoTkinterFrame.py.
- Renamed present leoTree class to leoTkinterTree and move it to leoTkinterTree.py.</t>
<t tx="ekr.20031218072017.186"></t>
<t tx="ekr.20031218072017.187"></t>
<t tx="ekr.20031218072017.188"></t>
<t tx="ekr.20031218072017.189">- Simplified undoReplace code &amp; removed asserts.
- The text param is no longer used and could be removed.

Undo tests:

(passed) Read @file Nodes.
(passed) Import Derived Files

(passed) Extract Section
(passed) Extract Section Names.
(passed) Extract

(passed) Convert Tabs &amp; Convert All Tabs.
</t>
<t tx="ekr.20031218072017.190"></t>
<t tx="ekr.20031218072017.191"></t>
<t tx="ekr.20031218072017.192">This is too distracting while typing the directive.</t>
<t tx="ekr.20031218072017.193">@nocolor

The following appears in run() in leo.py:

@color

doHook("start1")
if app.killed: return # 10/15/03: allows the plugin to kill the app.</t>
<t tx="ekr.20031218072017.194">This command was not taking into account the optional -ver= part of the @+leo sentinel.</t>
<t tx="ekr.20031218072017.195">The command now looks at joined nodes if no ancestor @file node.</t>
<t tx="ekr.20031218072017.196"></t>
<t tx="ekr.20031218072017.197"></t>
<t tx="ekr.20031218072017.198"></t>
<t tx="ekr.20031218072017.199"></t>
<t tx="ekr.20031218072017.200">- Replaced all calls to v.copyTree related to undo by c.undoer.saveTree.

- Hacked u.undoReplace to handle tuple returned by u.saveTree.

- Fixed bugs in Convert All Blanks and Convert All Tabs routines.
	- These routines call convertBlanks and convertTabs as helpers.
	- Added arg to convertBlanks and convertTabs controlling whether these routines set undo state.
</t>
<t tx="ekr.20031218072017.201"></t>
<t tx="ekr.20031218072017.202"></t>
<t tx="ekr.20031218072017.203"></t>
<t tx="ekr.20031218072017.204">@language elisp
@color

(defun abc 'a "abc
xyz" cons)</t>
<t tx="ekr.20031218072017.205">Must call c.initAllCloneBits.</t>
<t tx="ekr.20031218072017.206"></t>
<t tx="ekr.20031218072017.207">This is a temporary expedient.  Probably using ch.isalpha() would be better</t>
<t tx="ekr.20031218072017.208">When doing a back scan we must test for the start of the text _after_ looking for brackets.</t>
<t tx="ekr.20031218072017.209"></t>
<t tx="ekr.20031218072017.210"></t>
<t tx="ekr.20031218072017.211">This was tricky to get right:

- There are several calls to after_idle(idle_body_key), so which gets scheduled is a matter of timing.  To handle that I added the tree.forceFullRedraw() routine.

- The undo/redo code also recolors the text.  Added a new param to undoRedoText so that it could force a full redraw after cut/paste.
</t>
<t tx="ekr.20031218072017.212">The new code is now guaranteed to go to the proper node of the outline.  However, @doc parts may disrupt line counts within a node.</t>
<t tx="ekr.20031218072017.213"></t>
<t tx="ekr.20031218072017.214"></t>
<t tx="ekr.20031218072017.215">Somehow a number of calls to c.initJoinedCloneBits got omitted.</t>
<t tx="ekr.20031218072017.216">vnode attributes would typically be used for things like marks or additional icons.

tnode attributes would typically be used for anything associated with shared headline or body text.</t>
<t tx="ekr.20031218072017.217">tkinterGui.destroy must call frame.top.destroy.</t>
<t tx="ekr.20031218072017.218"></t>
<t tx="ekr.20031218072017.219"></t>
<t tx="ekr.20031218072017.220">The code was attempting to reference an ivar.  I placed sentinelNameDict inside sentinelName() and referenced it directly.</t>
<t tx="ekr.20031218072017.221">This is required so that attributes get set in the leoApp object rather than the proxy object.</t>
<t tx="ekr.20031218072017.222"></t>
<t tx="ekr.20031218072017.223"></t>
<t tx="ekr.20031218072017.224"></t>
<t tx="ekr.20031218072017.225">This is a big step forward.  newLeoCommanderAndFrame provides a place to explore the complexities of initializing LeoFrames and their commanders.

newLeoCommanderAndFrame does the following.  Order is _crucial_:

- first creates an "empty" frame first to pass to the commanders.  This was an Aha!
- then creates the commander and all subcommanders.
- then calls the new frame.finishCreate routine to create the actual frames.
- finally calls c.undoer.clearUndoState(), which requires that menus have already been created.

The present code should be moved to the tkinterGui class.</t>
<t tx="ekr.20031218072017.226">Leo now warns if it can't find either the Icons directory or the LeoApp16.ico icon in that directory.</t>
<t tx="ekr.20031218072017.227"></t>
<t tx="ekr.20031218072017.228"></t>
<t tx="ekr.20031218072017.229"></t>
<t tx="ekr.20031218072017.230"></t>
<t tx="ekr.20031218072017.231"></t>
<t tx="ekr.20031218072017.232"></t>
<t tx="ekr.20031218072017.233">This is much more natural and less cluttered.</t>
<t tx="ekr.20031218072017.234">There were bugs involving the c.pattern_match_flag and c.suboutline_only_flag.

The present code is way too fragil and clumsy.  I plan to rewrite it completely when the configuration logic is redone.

Also, the present code using only a single copy of leoConfig.txt, so changing a setting in one .leo file may change settings in other .leo files.</t>
<t tx="ekr.20031218072017.235">@nocolor

Class level-code after the method definitions was dropped:

@color

class someclass:
	def __init__(self):
		pass

	# this code is dropped
	class_var = None

def some_proc():
	pass</t>
<t tx="ekr.20031218072017.236"></t>
<t tx="ekr.20031218072017.237">allow_clone_drags = 1
# 1: Allows control-dragging to create clones.
# 0: All drags move nodes.
# See also: look_for_control_drag_on_mouse_down
# Setting this setting to 0 allows Leo to be used on Aqua.

enable_drag_messages = 1
# 1: Tell whether drags will move nodes or clone nodes.
# 0: Don't issue such messages.</t>
<t tx="ekr.20031218072017.238">The read code now clears the dirty bit in the root vnode before looking for changed text.

While I was at it, I moved some of the dirty bit logic into getLeoFile.  This makes all read commands work the same.</t>
<t tx="ekr.20031218072017.239">Fixed Go To Outline command so it doesn't crash on 4.0 files.  More work is needed:

- There are "off-by-one" errors.
- It is possible that a complete rewrite in the 4.0 case would be significantly better.</t>
<t tx="ekr.20031218072017.240">This was easy: just write a newline and an @nonl sentinel if the text does not end in a newline.

Compare with the messy 3.x code: a huge simplification.</t>
<t tx="ekr.20031218072017.241">The reason this was so strange is that the at.sentinels ivar was not initialized properly, either in the the old or new classes.  Usually this ivar is set properly (to true) because the _preceding_ file is an @file node that does init the ivar to true.

So the fix was just to set self.sentinel = true in new_df.rawWrite and old_df.rawWrite</t>
<t tx="ekr.20031218072017.242"></t>
<t tx="ekr.20031218072017.243"></t>
<t tx="ekr.20031218072017.244">Again, this wasn't an error, and it was confusing.</t>
<t tx="ekr.20031218072017.245">This wasn't a bug, but it was quite confusing.</t>
<t tx="ekr.20031218072017.246">This avoids overriding the base putSentinel routine with a routine with a different signature.

This argument was never used anyway.</t>
<t tx="ekr.20031218072017.247">This avoids overriding the base scanText routine with a routine with a different signature.</t>
<t tx="ekr.20031218072017.248">leo.py

- Added leoDialog and traceback to import list.
- Removed app args from createFrame and initSherlock.

leoApp

- Changed tList = [] to tDict = {}
- Removed app.finishCreate.

- leoCommands

- Removed some unused local vars in Convert Blanks/Tabs and Reformat Paragraph commands.

leoCompare

- Removed import leoApp, leoCommands from run() method.

leoFileCommands

- Removed unused self.a ivar.
- Removed unused first line below in getPrefs:
	s = string.lower(name)
	language = string.replace(name,"/","")

leoFrame:

- removed some imports from inside createNewMenu and deleteMenuItem.  Plugins should not need these.

- Removed unused vars:
	changed: &lt;&lt; read optional version param &gt;&gt;
	changed: old_df.readOpenFile
	changed: scanText
	changed: &lt;&lt; Test for @path &gt;&gt;
	changed: &lt;&lt; compute relative path from s[k:] &gt;&gt;
	changed: putDocPart (3.x)
	changed: putCodePart &amp; allies
	changed: new_df.readOpenFile
	changed: nodeSentinelText
	changed: &lt;&lt; write then entire @file tree &gt;&gt; (4.x)

leoGlobals:

- Removed unused vars in
	scanAtTabwidthDirective,skip_braces,skip_php_braces,skip_pp_part,isValidEncoding
	&lt;&lt; Set local vars &gt;&gt;
	&lt;&lt; compute relative path from s[k:] &gt;&gt;

leoGui

- Changed self.defaultFont to app.config.defaultFont in getFontFromParams.
- Added leoFrame to import list.

leoNodes

- Fixed real bug in appendStringToBody.
	- The code used none instead of None: changed test just to if not s: return

leoPlugins

- Removed import sys from loadHanders()

leoTree

- Disabled unused call to canvas.find_closest in OnContinueDrag.  Maybe this will help performance?</t>
<t tx="ekr.20031218072017.249">Fixed:

c:\prog\leoCVS\leo\src\leoFileCommands.py:814: Local variable (config) not used
c:\prog\leoCVS\leo\src\leoImport.py:994: Local variable (c) not used
c:\prog\leoCVS\leo\src\leoCompare.py:707: Local variable (c) not used
c:\prog\leoCVS\leo\src\leoCompare.py:707: Local variable (cmp) not used
c:\prog\leoCVS\leo\src\leoFontPanel.py:155: Local variable (c) not used
c:\prog\leoCVS\leo\src\leoApp.py:224: Local variable (tList) not used
c:\prog\leoCVS\leo\src\leoTree.py:1512: Parameter (v) not used (createPopupMenu)
c:\prog\leoCVS\leo\src\leoTree.py:1603: Parameter (v) not used (showPopupMenu)
c:\prog\leoCVS\leo\src\leoApp.py:365: No module attribute (leoID) found (remove app.setLeoId)</t>
<t tx="ekr.20031218072017.250"></t>
<t tx="ekr.20031218072017.251">- Changed app().x to app.x everywhere.

- Changed a.x to app.x everywhere, and eliminated the assignments a = app()

This paves the way to use the app.gui.x pattern more widely.

I did this now so that I could check this with Pychecker: I must run Pychecker anyway so this kills two birds with one stone.
</t>
<t tx="ekr.20031218072017.252"></t>
<t tx="ekr.20031218072017.253">The reason app() is needed is that it's definition doesn't change, even though what it returns does change during startup.

The problem with using a global app var is that from leoGlobals import * picks up and _caches_ the _uninitialized_ value.  Setting leoGlobals.app in the startup logic does not affect all the cached values.

The only way to prevent this would be be avoid importing any of Leo's modules until after the app object has been created.  This looks impossible, and it would be very brittle even if it were possible.

I _really_ would like from leoGlobals import app to work, but how to delay the import until later?</t>
<t tx="ekr.20031218072017.254">These routines now do the following:

1. Print a warning message if their internal string representation is not a unicode string.

2. Convert their results to unicode.</t>
<t tx="ekr.20031218072017.255">The tnode ctor now ensures that headline and body text are converted to Unicode using app.tkEncoding.</t>
<t tx="ekr.20031218072017.256">This was never needed, and removing it prepares to change app from a function to a global var.
</t>
<t tx="ekr.20031218072017.257"></t>
<t tx="ekr.20031218072017.258">1. Called getAllText in the following routines:

colorizeAnyLanguage
convertAllBlanks,convertAllTabs,extract,extractSection,extractSectionNames
OnExecuteScript

2. Called getSelectedText in the following routines:

OnExecuteScript

3. Called x = toUnicode(s,app().tkEncoding) in the following routines after a call to t.get(...)

bound_paragraph,getBodyLines,reformatParagraph
OnReturnKey
OnFindMatchingBracket,findMatchingBracket
updateStatusRowCol
changeAll,findAll
&lt;&lt; test for whole word match &gt;&gt;</t>
<t tx="ekr.20031218072017.259">Previously, nothing was printed if </t>
<t tx="ekr.20031218072017.260">Created new LeoApp16.ico icon w.wm_iconbitmap().

The old code still works with Python 2.2.</t>
<t tx="ekr.20031218072017.261"></t>
<t tx="ekr.20031218072017.262">All the real code has now been moved from leoGlobals.py to leoGui.py.</t>
<t tx="ekr.20031218072017.263"></t>
<t tx="ekr.20031218072017.264"></t>
<t tx="ekr.20031218072017.265">This is the foundation for "foreign" guis.</t>
<t tx="ekr.20031218072017.266"></t>
<t tx="ekr.20031218072017.267"></t>
<t tx="ekr.20031218072017.268">After the 4.0 beta 1 release I changed the default so that _new_ format derived files are written if leoConfig.txt does not exist.</t>
<t tx="ekr.20031218072017.269"></t>
<t tx="ekr.20031218072017.270"></t>
<t tx="ekr.20031218072017.271">This allows the caller to do an auto-save only if something was really written.</t>
<t tx="ekr.20031218072017.272">When I first tried to open LeoPy.leo after writing all @file nodes (With the Write @file Nodes command) I got a

"No joinList for tnode" message.

What I did:

1. Error recovery worked perfectly.  No damage was done!

2. getLeoFile must call setAllJoinLinks _before_ reading @file nodes so that findChild will see a valid joinList.

	- This is perfectly safe in 4.0 because reading _never_ creates vnodes or alters vnode links.

3. writeAtFileNodes now does an auto-save.</t>
<t tx="ekr.20031218072017.273"></t>
<t tx="ekr.20031218072017.274"></t>
<t tx="ekr.20031218072017.275"></t>
<t tx="ekr.20031218072017.276"></t>
<t tx="ekr.20031218072017.277">The output is the same in both the old and new versions.</t>
<t tx="ekr.20031218072017.278"></t>
<t tx="ekr.20031218072017.279">findChild now calls at.readError when t.joinList is None so reading will stop immediately without crashing.</t>
<t tx="ekr.20031218072017.280">@+doc and @+at sentinels indicate trailing whitespace.

It is crucial that whitespace is _always_ handled correctly.</t>
<t tx="ekr.20031218072017.281">This didn't do anything...</t>
<t tx="ekr.20031218072017.282">Must be done to clear tnodeList in the .leo file.  This allows the user to create a 3.x compatible .leo file.</t>
<t tx="ekr.20031218072017.283"></t>
<t tx="ekr.20031218072017.284"></t>
<t tx="ekr.20031218072017.285">I was surprised that the top-level class was a subclass of oldDerivedFile.  This isn't really good.

The first step of separating the class was to make the sentinel constants global to the module.  This required substantial changes.

After that, I separated the atFile class just by providing the initIvars and readLine routines.  To make readLine work I had to init self.encoding.  That's all!

Derived classes must follow base classes in the module, so I changed the top-level node to force the correct order regardless of node order.</t>
<t tx="ekr.20031218072017.286">Changed made:

1. Look ahead in putDocLine to preserve additional leading whitespace.
2. Do _not_ eliminate newline in readLastDocLine.  That must be done only by @nonl logic.

Note:  The code can not do a perfect job of restoring whitespace: it can not distinguish between @ and @space on a line by itself.  However, this construction is rare, and there really is no difference between them.</t>
<t tx="ekr.20031218072017.287"></t>
<t tx="ekr.20031218072017.288">The code calls at.writeAll(writeAtFileNodesFlag=true) to write all nodes in the selected tree.</t>
<t tx="ekr.20031218072017.289">Handling @first and @last is actually quite subtle, and the old code handles the job correctly.

getAtFirstLastLines simply couldn't cut it.  Thanks again to Dave Hein.</t>
<t tx="ekr.20031218072017.290">This must be done to preserve the tnodeList.</t>
<t tx="ekr.20031218072017.291">This code hasn't been tested yet.

- Don't change body text if a) @last and b) only difference is last newline.</t>
<t tx="ekr.20031218072017.292">This is a big step forward:  it eliminates some nasty modes.

- scanHeader returns flag instead of setting ivar.
- Write code uses config.write_old_format_derived_files.</t>
<t tx="ekr.20031218072017.293">Both the old and new write code does this.</t>
<t tx="ekr.20031218072017.294">This is too annoying during testing.</t>
<t tx="ekr.20031218072017.295">We no longer need this: the write_old_format_derived_files setting is enough to disable new writes.

In other words, the transition to 4.0 has begun!</t>
<t tx="ekr.20031218072017.296">This is the clean way of setting the default using the config.write_old_format_derived_files setting.</t>
<t tx="ekr.20031218072017.297">This is the clean way of forcing writes using old or new format.</t>
<t tx="ekr.20031218072017.298">findChild(4.0) and createNthChild (3.x) both now call v.t.setVisited.  The code in top_df.read warns if any non-empty node is unvisited.

This check, and the check that headlines match pretty much guarantees that out-of-synch outlines will generate errors.  In that case, there is no need a gnx timestamp in @+leo sentinels!</t>
<t tx="ekr.20031218072017.299"></t>
<t tx="ekr.20031218072017.300">These changes made in leoPlugins.leo (use_gnx) first.  They will be moved into LeoPy.leo soon.

What I did:
	- Removed gnx's for now (maybe forever?)
	- Eliminated use_gnx and using_gnx code from new read code.
	- All old read/write routines pass.
	- Fixed a bug in old write code(!!) @verbatim was not output correctly!
	- Created top_df.scanDefaultDirectory and top_df.error.
		- We must have this in order to open files in the proper directory.
	- Replaced calls to at.init_ivars by df.init_ivars
	- Created new_df.raw_write
	- Create top_df write routines.
	- Created class topLevelDerivedFileCommands
	- Created class oldDerivedFile
	- Created class newDerivedFile(oldDerivedFile)
	- Removed all error recovery logic from old read code.
	- Replaced structureErrors ivar with errors ivar.
	- Old read code now sets t.tempBodyString.
	- Move all common read code into top_df.read.
</t>
<t tx="ekr.20031218072017.301">- Moved setLeoID into leoApp.py
- Moved nodeIndices class into leoNodes.py.
- Moved askLeoID into leoDialogs.py
- Eliminated myTnode class.
- Moved myFrame methods into leoFrame.py and eliminated myFrame.
</t>
<t tx="ekr.20031218072017.302"></t>
<t tx="ekr.20031218072017.303"></t>
<t tx="ekr.20031218072017.304"></t>
<t tx="ekr.20031218072017.305"></t>
<t tx="ekr.20031218072017.306"></t>
<t tx="ekr.20031218072017.307"></t>
<t tx="ekr.20031218072017.308"></t>
<t tx="ekr.20031218072017.309"></t>
<t tx="ekr.20031218072017.310">tnodeList must be a list of tnodes, _not_ a list of tnode indices.

Indices may be reassigned, tnodes won't.

The _only_ place that an index is proper is in the file format itelf.</t>
<t tx="ekr.20031218072017.311">The script is called "Script to compare 3.x and 4.x derived files" in test.leo.
</t>
<t tx="ekr.20031218072017.312">The bug was in directiveKind.  There are two ways for the code to recognize @others.  After inserting the second way, I mistakenly commented out the first way (by commenting out @others in the table).</t>
<t tx="ekr.20031218072017.313"></t>
<t tx="ekr.20031218072017.314"></t>
<t tx="ekr.20031218072017.315"></t>
<t tx="ekr.20031218072017.316"></t>
<t tx="ekr.20031218072017.317">The new version of putLeadInSentinel works as follows:

1. It calls at.putIndent(at.indent) followed by the leading whitespace in the outline line.

The effect of this is

a) to align the @ws sentinel with the following sentinel and
b) to preserve the "spelling" of the leading whitespace on the line.

2. N.B. The calls to putLeadInSentinel happen _before_ at.indent is changed as the result of the leading whitespace. 

Again, this is so that putLeadInSentinel can preserve the spelling of whitespace.

3. The contribution of the @ws sentinel is the _difference_ between the value of at.indent when the @ws sentinel is being read and the actual whitespace on the line.  Again, we do this to make the derived file look better.</t>
<t tx="ekr.20031218072017.318">This makes the @nl look better, and has no other effect.</t>
<t tx="ekr.20031218072017.319">- Special case code for blank lines.
- Created putBlankDocLine.</t>
<t tx="ekr.20031218072017.320"></t>
<t tx="ekr.20031218072017.321"></t>
<t tx="ekr.20031218072017.322"></t>
<t tx="ekr.20031218072017.323"></t>
<t tx="ekr.20031218072017.324">I added this code to the "main" line for upward compatibility with 4.0.  The main line code does nothing with the new tnodeList attribute as yet.</t>
<t tx="ekr.20031218072017.325">This method now uses the tnode list to find the indicated tnode.  It also checks the headline.</t>
<t tx="ekr.20031218072017.326"></t>
<t tx="ekr.20031218072017.327">The code that reads the new tnodeList attribute of vnodes is contained in the "main line" code, i.e., in LeoPy.leo.  This means that Leo will always be able to read (and ignore) the tnodeList attribute.

The code that writes the attribute is part of the use_gnx plugin.

The tnodeList returns a tnode, not a vnode, so it makes sense to keep track of at.t not at.v.
</t>
<t tx="ekr.20031218072017.328">- The new code now hanles the basic cases properly.

- Added @nl sentinel to indicate whether a section ref should be followed by a newline.

- The read code now sets v.t.tempBodyString instead of call v.setBodyStringOrPane.  This is a major advance in error recovery:  nothing at all changes if errors happen.

What I did earlier:
	- Removed @+body and @-body
	- Don't write organizer nodes in @others</t>
<t tx="ekr.20031218072017.329">@ignore
@nocolor</t>
<t tx="ekr.20031218072017.330"></t>
<t tx="ekr.20031218072017.331">depending on how far ahead LeoN is looking, I think SVN
(http://subversion.tigris.org/) might be a better target than CVS.

It fixes many (most?) CVS shortcomings, and is picking up steam in the
OSS world.

</t>
<t tx="ekr.20031218072017.332"></t>
<t tx="ekr.20031218072017.333"></t>
<t tx="ekr.20031218072017.334"></t>
<t tx="ekr.20031218072017.335"></t>
<t tx="ekr.20031218072017.336">@pagewidth 70</t>
<t tx="ekr.20031218072017.337">4.1rc3 setup-rc4: 870  rc4.zip: 630
4.1 b5: setup-b5: 195,  b5.zip: 128
4.0.4:  setup: 340, zip 385
4.0 leo-4.0.zip 382
3.12 leosetup 953,
3.12.zip 592
3.11.zip 102
3.10.zip 1193</t>
<t tx="ekr.20031218072017.338"></t>
<t tx="ekr.20031218072017.339">I like Leo more the more I use it...It's an unexpected pleasure to
see my (linearly written) code outlined in Leo. I can't wait to use
Leo to start a new project, going from outline to code...Thanks again
for providing the computing community with such a fine piece of
software. -- Jim Shapiro, Ph.D.

If you think you have used all possible programmer's editors, but
have not yet tried Leo, you are wrong...I rate Leo as a "must have"
for Python programmers. The code makes for a good read.
-- John Tobler  http://weblogs.asp.net/Jtobler/
</t>
<t tx="ekr.20031218072017.340">I've written documentation in WordPerfert, Ventura, Word, PageMaker, and
FrameMaker and even though they create wonderfully looking and useful
documents, they've never been able to do what I've been looking for. HTML,
compiled help files, and later PDF came closer, but still not there. I think
I've found it in LEO, a way to make a "living" document. A document built out
of discrete parts that can be re-organized on the fly to meet the needs of a
varying audience...Being a convert for less than a day I've still got a lot to
learn, but just the possibility of keeping system maintenance scripts in the IT
manual is mind boggling.  -- David Nichols dnichols@amci.com</t>
<t tx="ekr.20031218072017.341">Proper FAQ entry for Leo

Almost everything in the present FAQ for Leo is incorrect.

- The proper capitalization is Leo, not LEO.
- Leo is highly supported: Leo should appear in the supported tools section.  
- Leo has great relevance to section 6: What is literate programming.
  See: http://webpages.charter.net/edreamleo/design.html
- All links in the Leo section of the present FAQ are incorrect.

Here is a correct FAQ entry for Leo:

8.x Leo

     Developer:
        Edward K. Ream edreamleo@charter.net

     Version:
        4.0

     Hardware:
        Any platform supporting Python and Tk, including
        Windows, Linux, MacOs X and others.
        Leo requires Python 2.1 or above and tcl/tk 8.3 or above.

     Languages:
        Written in Python. Full support for Python scripting.
        Full support for noweb and cweb.
        Syntax coloring for C, C++, cweb, html, Java, LaTex,
        Pascal, Perl and Perlpod, PHP, plain text, Python, Rebol,
        shell scripts and tcl/tk.

     Formatter:
        Printing and formatting via exports to external editors.

     Availability:
        Leo home:    http://webpages.charter.net/edreamleo/front.html
        SourceForge: http://sourceforge.net/projects/leo/
        Support:     http://sourceforge.net/forum/?group_id=3458
        Download: http://sourceforge.net/project/showfiles.php?group_id=3458
        CVS:         http://sourceforge.net/cvs/?group_id=3458
        Wiki:        http://leo.hd1.org/

     Readme:
        See download link above.

     Description:
        - A programmer's editor, an outlining editor and a flexible browser.
        - A literate programming tool, compatible with noweb and CWEB.
        - A data organizer and project manager. Leo provides multiple views
          of projects within a single outline.
        - Fully scriptable using Python. Leo saves its files in XML format.
        - Extensible: plugins may change all aspects of Leo at runtime.
        - Portable: Leo is 100% pure Python.
        - Open Software, distributed under the Python License.

     Support:
        Leo is highly supported and has many active developers and users.
        See the support link above for general, help and developer forums.

Edward K. Ream
--------------------------------------------------------------------
Edward K. Ream   email:  edreamleo@charter.net
Leo: Literate Editor with Outlines
Leo: http://webpages.charter.net/edreamleo/front.html
--------------------------------------------------------------------</t>
<t tx="ekr.20031218072017.342">Leo 4.1 release candidate 3 is now available at: http://sourceforge.net/projects/leo/

This release fixes a serious problem that prevented Leo from reading 3.x derived files.

The highlights version 4.1:
---------------------------
- Leo runs in batch mode when invoked with --script aScriptFile.py
- Leo supports Unicode characters (e.g. Chinese) in path and file names.
- @directives and section references are now valid when executing scripts.
- @ignored and orphan nodes now valid in @file-nosent trees.
- Script-based find/change commands.
- Check Outline command.
- Hoist &amp; DeHoist commands.
- A new gui-agnostic architecture: useful for batch mode and unit tests.
- Several new configuration settings.
- Many new unit tests.
- A host of bug fixes.

Quotes of the month
-------------------
"I like Leo more the more I use it...It's an unexpected pleasure to
see my (linearly written) code outlined in Leo. I can't wait to use
Leo to start a new project, going from outline to code...Thanks again
for providing the computing community with such a fine piece of
software." -- Jim Shapiro, Ph.D.

"If you think you have used all possible programmer's editors, but
have not yet tried Leo, you are wrong...I rate Leo as a 'must have'
for Python programmers. The code makes for a good read."
-- John Tobler  http://weblogs.asp.net/Jtobler/

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Leo requires Python 2.1 or above and tcl/tk 8.3 or above.
Leo works on Linux, Windows and MacOs X.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Wiki:     http://leo.hd1.org/

Edward K. Ream
December 19, 2003</t>
<t tx="ekr.20031218072017.343"></t>
<t tx="ekr.20031218072017.344">Leo 4.1 beta 5 is now available at: http://sourceforge.net/projects/leo/

For the first time in months there are no serious bugs outstanding.

Warning: By default Leo 4.1 creates .leo files that can not be read by older versions of Leo.

Warning: Use the __wx_gui.py plugin with _extreme_ caution until further notice:
bugs in this plugin could cause body text to be lost when changing nodes.

Beta 5:
  * Leo runs in batch mode when invoked with --script aScriptFile.py
    - Created "null gui" classes that do not write to the screen.
  * Leo supports Unicode characters (e.g. Chinese) in path and file names.
  * Fixed several long-standing bugs:
    - Fixed several minor problems with the Extract Section and Import commands.
    - Fixed problem that prevent the Find panel from working on the Mac.
    - Improved @url handling so that @url file:\\path\x.leo works properly.
    - Improved support for @lineending platform.
    - Leo honors outline/body pane ratio when opening .leo files.
    - Leo now ensures that newly-opened windows fit entirely on the screen.
    - Fixed a crasher when Undoing a Change All command when searching headlines.
  - Fixed other bugs resulting from the 4.1 reorg:
    - Fixed problem loading plugins on Linux.
    - Fixed crashers in the Extract Section and Extract commands.
    - Fixed crasher when writing a file containing an undefined section.
    - Removed duplicate bindings in popup menus.
    - Made sure to show Leo's windows in wx gui plugin.

Beta 4:
  * Allow @directives and section references when executing scripts!
  - Fixed several "reorg" bugs, some of which affected plugins.
  - More than one section reference may now appear on the same line.
  - Use "utf-8" encoding for filenames under MacOS (Darwin)
  - Allow command or cmnd prefix for menu shortcuts under Darwin.

Beta 3:
  - Completed the reorg, making _many_ changes to the code base.
  - Fixed a LaTeX coloring bug

Beta 2:
  - Fixed a startup problem on Linux: the "mbcs" text encoding is not valid on Linux.

Beta 1:
  * New script-based find/change commands.
  - Hoist &amp; DeHoist commands for viewing parts of an outline.
  - Check Outline command finds user clone mistakes.
  * New configuration settings:
    - use_gnx specifies whether .leo files use integers as indices:
      use_gnx = 0 makes .leo files compatible with previous versions of Leo.
      use_gnx = 1 makes .leo files cvs-friendly
    - config_encoding specifies the encoding of leoConfig.txt.
  * Several significant code-level changes:
    - The 4.1 code base has been reorganized to support gui plugins.
    - An example wx_gui plugin is partly functional.
    - Created a flexible framework for creating &amp; running regression tests.
    - app.forceShutdown now works when called from plugins.

Quotes of the month
-------------------
"I like Leo more the more I use it...It's an unexpected pleasure to
see my (linearly written) code outlined in Leo. I can't wait to use
Leo to start a new project, going from outline to code...Thanks again
for providing the computing community with such a fine piece of
software." -- Jim Shapiro, Ph.D.

"If you think you have used all possible programmer's editors, but
have not yet tried Leo, you are wrong...I rate Leo as a 'must have'
for Python programmers. The code makes for a good read."
-- John Tobler  http://weblogs.asp.net/Jtobler/

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Leo requires Python 2.1 or above and tcl/tk 8.3 or above.
Leo works on Linux, Windows and MacOs X.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Wiki:     http://leo.hd1.org/

Edward K. Ream
December 5, 2003</t>
<t tx="ekr.20031218072017.345"></t>
<t tx="ekr.20031218072017.346">Leo 4.0.4 is now available at: http://sourceforge.net/projects/leo/

The 4.0.x releases fix numerous minor bugs.

Please note: it will be severals weeks before Leo supports unicode
characters in file or directory names. Until then, please use ascii
names.

Changes made in 4.0.4:
-----------------------
- Fixed a problem with the titles in Font and Color panels.
- Worked around a Unicode assert failure in the colorizer.
- Fixed crasher in OnEndEditHeadline.
- Fixed import problems in leoPlugins.leo.
- @first and @last sentinels no longer contain corresponding text.
  This fixes a problem that affected PHP comment delimiters.

Changes made in 4.0.3:
-----------------------
- Fixed several problems with the auto_save and plugin menu plugins.
- Fixed a problem with the Go To Line Number command.

Changes made in 4.0.2:
-----------------------
- Fixed a crasher in reportBadChars when a .leo file contains a character that
  can not be represented in the encoding specified in the first line of the
  .leo file.
- Leo now sends full tracebacks to the log window when Leo takes an unexpected
 exception.
- Leo now issues a more informative message when the @comment directive
  inhibits the Untangle command.

Changes made in 4.0.1:
------------------------
- Fixed several crashers, one of which may prevent Leo from starting.
- Fixed indentation for section references that are preceded by something
  other than whitespace.
- Removed debugging traces when reading and writing unknown attributes.
- Removed some improperly cloned nodes from LeoDocs.leo.
- Added the checkTopologyOfAllClones script.
- Fixed some problems with plugins.

Highlights of 4.0 final:
-----------------------
** Improved and simplified format of derived files.
  - Eliminated child indices, extraneous blank lines and @body sentinels.
  - Eliminated @node sentinels that indicate outline structure.
  - New @nl and @nonl sentinels indicate where newlines are and aren't.
  - These changes will largely eliminate unwanted cvs conflicts.

** Greatly improved error handling.
  - Reading derived files _never_ alter outline structure or links.
  - Read errors leave the outline completely unchanged.
  - Broken clone links are gone forever.
  - As a result, 4.0 is much safer than all previous versions.

** Full compatibility will previous versions of Leo.
  - Leo 4.0 reads all derived files properly, regardless of version.
  - Leo writes new-format derived files by default, and this default may be changed.
  - New commands in the read/write menu allow you to explicitly specify the format of derived files.

* New commands:
  - Write 3.x Derived File and Write 4.x Derived File.
  - Import Derived File.
  - Clear Recent Files.

* Dozens of other improvements, including:
  - Better Unicode support.
  - New configuration settings.
  - Several new plugins.

Quote of the month
------------------
I've written documentation in WordPerfert, Ventura, Word, PageMaker, and
FrameMaker and even though they create wonderfully looking and useful
documents, they've never been able to do what I've been looking for. HTML,
compiled help files, and later PDF came closer, but still not there. I think
I've found it in Leo, a way to make a "living" document. A document built out
of discrete parts that can be re-organized on the fly to meet the needs of a
varying audience...Being a convert for less than a day I've still got a lot to
learn, but just the possibility of keeping system maintenance scripts in the IT
manual is mind boggling.  -- David Nichols

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Leo requires Python 2.1 or above and tcl/tk 8.3 or above.
Leo works on Linux, Windows and MacOs X.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Wiki:     http://leo.hd1.org/

Edward K. Ream
October 29, 2003</t>
<t tx="ekr.20031218072017.347">Leo 4.0 is now available at: http://sourceforge.net/projects/leo/

More than a year in the making, Leo 4.0 is here.

Highlights of 4.0 final:
-----------------------
** Improved and simplified format of derived files.
  - Eliminated child indices, extra blank lines and @body sentinels.
  - Eliminated @node sentinels that indicate outline structure.
  - New @nl and @nonl sentinels indicate where newlines are.
  - These changes will largely eliminate unwanted cvs conflicts.

** Greatly improved error handling.
  - Reading derived files never alters outline structure or links.
  - Read errors leave the outline completely unchanged.
  - Broken clone links are gone forever.
  - As a result, 4.0 is much safer than all previous versions.

** Full compatibility will previous versions of Leo.
  - Leo 4.0 reads all derived files properly, regardless of version.
  - Leo writes new-format derived files by default.
  - New commands in the read/write menu allow you to explicitly
    specify the format of derived files.

* New commands:
  - Write 3.x Derived File and Write 4.x Derived File.
  - Import Derived File.
  - Clear Recent Files.

* Dozens of other improvements, including:
  - Better Unicode support.
  - New configuration settings.
  - Several new plugins.

Quote of the month
------------------
I've written documentation in WordPerfert, Ventura, Word, PageMaker,
and FrameMaker and even though they create wonderfully looking and
useful documents, they've never been able to do what I've been
looking for. HTML, compiled help files, and later PDF came closer,
but still not there. I think I've found it in Leo, a way to make a
"living" document...A document built out of discrete parts that can be
re-organized on the fly to meet the needs of a varying audience.
Being a convert for less than a day I've still got a lot to learn,
but just the possibility of keeping system maintenance scripts in the
IT manual is mind boggling. -- David Nichols

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
  of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Leo requires Python 2.1 or above and tcl/tk 8.3 or above.
Leo works on Linux, Windows and MacOs X.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Wiki:     http://leo.hd1.org/

Edward K. Ream
October 17, 2003</t>
<t tx="ekr.20031218072017.348"></t>
<t tx="ekr.20031218072017.349">leo.py 3.3 is now available at:  http://sourceforge.net/projects/leo/

The highlights of 3.3:
----------------------

- Added support for Unicode.
- Improved the Import commands.
- Fixed numerous bugs related to configuration settings.
- Fixed the "Javadoc" bug and several latent bugs related to it.

leo.py requires Python 2.2 and tcl/tk 8.3 or above.

What is Leo?
------------
 - A programmer's editor, an outlining editor and a flexible browser.
 - A literate programming tool, compatible with noweb and CWEB.
 - A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
 - Fully scriptable using Python. Leo saves its files in XML format.
 - Portable. leo.py is 100% pure Python.
 - Open Software, distributed under the Python License.

Links:
------
Leo:      http://personalpages.tds.net/~edream/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
</t>
<t tx="ekr.20031218072017.350">leo.py 3.5 is now available at:  http://sourceforge.net/projects/leo/

The many bugs reported in 3.4 show that leo.py is being heavily used.  leo.py 3.5 corrects all known bugs and adds some new features:

The highlights of 3.5:
----------------------

- Added new entries in the help menu,
  (Including a link to Joe Orr's excellent ScreenBook tutorial).
- Added configuration options for horizontal scrollbars.
- Added an importFiles script for mass imports.
- Added better warnings for read-only files.
- Removed all '\r' characters when reading derived files.
- Fixed crasher in Read Outline Only command.
- Fixed crasher when leoConfig.txt did not exist.
- Many small improvements and bug fixes.

Version 3.4 has not been announced previously.

The highlights of 3.4:
----------------------

- Fixed several crashers involving Unicode.
- The Show Invisibles command now makes blanks and tabs look much better.
- Created leoConfig.leo, from which leoConfig.txt is now derived.
- Added save_clears_undo_buffer configuration option.
- Fixed a large number of problems with the configuration code.
- The usual minor improvements and bug fixes.

leo.py requires Python 2.2 and tcl/tk 8.3 or above.

What is Leo?
------------
 - A programmer's editor, an outlining editor and a flexible browser.
 - A literate programming tool, compatible with noweb and CWEB.
 - A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
 - Fully scriptable using Python. Leo saves its files in XML format.
 - Portable. leo.py is 100% pure Python.
 - Open Software, distributed under the Python License.

Links:
------
Leo:      http://personalpages.tds.net/~edream/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458

</t>
<t tx="ekr.20031218072017.351">leo.py 3.6 is now available at:  http://sourceforge.net/projects/leo/
leo.py requires Python 2.2 and tcl/tk 8.3 or above.

A slashdot article about Leo appeared soon after 3.5 was released.  Leo now has many more users and developers; 3.6 is considerably more friendly to Linux as a result.

The highlights of 3.6:
----------------------

- Fixed several bugs that appear only on Linux.
- Added Match Brackets command.
- Added support for MouseWheel (Linux only).
- Added support for LaTex and PHP languages.
- Improved all aspects of the Help menu.
- Discovered a minor bug involving the Python (Idle) window and documented a workaround.
- Leo remembers the previous insertion point and scrollbar position when switching between nodes.
- The usual small improvements and bug fixes.

What is Leo?
------------
 - A programmer's editor, an outlining editor and a flexible browser.
 - A literate programming tool, compatible with noweb and CWEB.
 - A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
 - Fully scriptable using Python. Leo saves its files in XML format.
 - Portable. leo.py is 100% pure Python.
 - Open Software, distributed under the Python License.

Links:
------
Leo:      http://personalpages.tds.net/~edream/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458</t>
<t tx="ekr.20031218072017.352">leo.py 3.7 is now available at:  http://sourceforge.net/projects/leo/
leo.py requires Python 2.1 and tcl/tk 8.3 or above.

The highlights of 3.7:
----------------------

- Now works with Python 2.1.  Previous versions required Python 2.2.
- Many new user options, including user-definable shortcuts for all commands
  and colors for all parts of Leo's windows.
  As a result, it is now possible to use arrow keys as you desire.
- Minimal support for Unicode. Better support is coming.
- Improved handling of relative path names.
- The @first directive allows lines to precede the opening @+leo sentinel line.
- The @last  directive allows lines to follow  the closing @-leo sentinel line.
- Better support for Perl+pod.
- Leo now ends all lines with '\n' regardless of platform.
- Leo is now compatible with Python 2.1.
- Simplified sentinels reduce spurious CVS diffs.
- Many other minor improvements and bug fixes.

What is Leo?
------------
 - A programmer's editor, an outlining editor and a flexible browser.
 - A literate programming tool, compatible with noweb and CWEB.
 - A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
 - Fully scriptable using Python. Leo saves its files in XML format.
 - Portable. leo.py is 100% pure Python.
 - Open Software, distributed under the Python License.

Links:
------
Leo:      http://personalpages.tds.net/~edream/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458</t>
<t tx="ekr.20031218072017.353">leo.py 3.8 is now available at:  http://sourceforge.net/projects/leo/
leo.py requires Python 2.1 or above and tcl/tk 8.3 or above.

Many major improvements have been made to Leo, all made as the result of user requests:

The highlights of 3.8:
----------------------

- New @rawfile and @silentfile trees complement @file trees.
  @rawfile and @silentfile trees create derived files without using sections.
  @rawfile files contain only those sentinels needed to automatically untangle them.
  @silentfile trees contain no sentinels at all.
- New @raw and @end_raw directives allow unformatted code within @file trees.
- Much better support for CWEB.  You may organize .w files using noweb!
- The @comment and @language directives may now apply simultaneously.
- Leo can now read, remember and write &lt;?xml-stylesheet...?&gt; lines,
  under control of the new stylesheet option.
- The new output_newline option specifies the line endings used when writing files.
- The new output_initial_comment option specifies the text to appear
  in an @comment sentinel at the start of each derived file.
- New commands in the help menu make it much easier to change configuration options.
- Dozens of minor improvements and bug fixes.

What is Leo?
------------
 - A programmer's editor, an outlining editor and a flexible browser.
 - A literate programming tool, compatible with noweb and CWEB.
 - A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
 - Fully scriptable using Python. Leo saves its files in XML format.
 - Portable. leo.py is 100% pure Python.
 - Open Software, distributed under the Python License.

Links:
------
Leo:      http://personalpages.tds.net/~edream/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458</t>
<t tx="ekr.20031218072017.354">leo.py 3.9 is now available at:  http://sourceforge.net/projects/leo/
leo.py requires Python 2.1 or above and tcl/tk 8.3 or above.

This is one of the most interesting versions of Leo ever released:

The highlights of 3.9:
----------------------
* Major performance improvements:
  - Incremental syntax coloring speeds response when typing.
  - Incremental undo drastically reduces memory used.

* Major improvements in customizing Leo:
  - Leo looks in the file customizeLeo.py for user-specific customizations.
  - Leo calls "hook routines" in customizeLeo.py for all commands and events.
    These hook routines can modify or replace any command or event.
  - New convenience routines simplify creating and modifying menus.
  - Easy translation of menus to other languages using customizeLeo.py.

* Better integration with other tools:
  - The Open With command allows you to communicate back and forth with other editors.
  - The Go To Line Number command converts lines numbers in derived files
    to locations in the outline.
  - Double-clicking the icon of a @url node launches any url in your web browser.
  - The Execute Script command executes Python code in any body pane.
    This is much more convenient than opening Leo's Idle window.
  - Much better support for cweb. At last, Leo has a power user of cweb.
    By default, @space, @* and @** sections are colored as latex text.
    Leo properly generates @q..@&gt; sentinels.
  - @nosentinelfile is like @file except Leo writes no sentinel lines.

* Other improvements:
  - Optional Emacs-style auto-indent.
  - Reformat Paragraph command.
  - Leo will optionally create nonexistent directories specified in
    @file, @root or @path, including all nonexistent parent directories.
  - Leo will place its own icon in Leo windows provided that you have
    installed Fredrik Lundh's PIL and tkIcon packages.
  - The usual assortment of bug fixes.

Quote of the month
------------------
"When first I opened Leo, it was out of curiosity. But having used it...
I'LL NEVER GO BACK. THEY'LL HAVE TO PRY LEO OUT OF MY COLD, DEAD FINGERS!
Seriously,it should be renamed 'Crack Cocaine' because it's that addictive.
I'm ready to start a 12-Step group." -- Travers A. Hough

What is Leo?
------------
 - A programmer's editor, an outlining editor and a flexible browser.
 - A literate programming tool, compatible with noweb and CWEB.
 - A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
 - Fully scriptable using Python. Leo saves its files in XML format.
 - Portable. leo.py is 100% pure Python.
 - Open Software, distributed under the Python License.

Links:
------
Leo:      http://personalpages.tds.net/~edream/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458</t>
<t tx="ekr.20031218072017.355">leo.py 3.10 is now available at:  http://sourceforge.net/projects/leo/
leo.py requires Python 2.1 or above and tcl/tk 8.3 or above.

3.10 corrects bugs, improves Leo's documentation and adds many new features:

The highlights of 3.10:
-----------------------
- Rewrote the Scripting Chapter in Leo's Users Guide.
- Improved the Customization Chapter of the Users Guide.
- Adds several customizations contributed by Leo's users:
  -- @read-only nodes.
  -- Reading empty .leo files.
  -- Redirecting stderr and stdout to Leo's log pane.
- New Mark Clones and Go To Next Clone commands.
- New Export Headlines command.
- Control-dragging a node now clones it.
- New "Node Only checkbox in the Find/Change panel.
- @root-code trees start in code mode by default.
  This allows @root trees to work like @file trees.
- @root-doc  trees start in doc  mode by default.
- Converted leoConfig.py to use @root-code
- New at_root_bodies_start_in_doc_mode option in leoConfig.py.
  Specifies whether @root trees work like @root-code or @root-doc.
- New synonyms: @file-asis = @silentfile
  @file-nosent = @nosentinelsfile ; @file-noref = @rawfile.
- Leo now supports navigation of menus using underlined menus.
- Added an easy way to replace any Leo method by a function.
  The code in customizeLeo.py can now override part of Leo's code!
- Added routines to redirect stderr and stdout to Leo's log pane.
- Added "event1" and "event2" hooks for customized event handling.
- Improved Leo's window icon, and improved how that icon is loaded.
- The usual assortment of bug fixes and minor improvements.
  Actually, this release fixes more than the usual number of bugs.

Quote of the month
------------------
I must say I am very impressed. I have been absolutely seduced by Leo over the
past few days. I tell you, I can not put it down. I feel like a kid with a
shiny new bike...I'm already bursting with new ways I'd like to use the tool in
the future -- Lyn Adams Headley

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Links:
------
Leo:      http://personalpages.tds.net/~edream/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458</t>
<t tx="ekr.20031218072017.356">leo.py 3.11 beta 1 is now available at:  http://sourceforge.net/projects/leo/
leo.py requires Python 2.1 or above and tcl/tk 8.3 or above.
leo.py will work on Linux, Windows and MacOs X Jaguar.

The highlights of 3.11:
-----------------------
** Leo finally supports unicode properly.  This solves a lot of problems.
	- New @encoding directives specifies encoding for derived files.
	- New settings specify default encodings for .leo and derived files.
	- Derived files specify encodings used to create them.
** A new plugin architecture for customizing Leo. (A major improvement.)
- New commands:
	- Toggle Angle Brackets.
	- Insert Time/Date (in headline or body text).
	- Go To First/Last Node, Parent, Next/Previous Sibling.
	- Write Missing @file Nodes.
	- Expand/Contract Node.
- Improved commands:
	- Expand/Contract commands now operate on the selected tree.
	  ( A major improvement)
	- Sort Siblings command can now sort top-level nodes.
	- Leo now allows multiple writes of cloned nodes.
	  (Useful when different @path directives are in effect.)
- Other improvements:
	- Improved syntax coloring for html and xml.
	- Leo scrolls partially visible headlines into full view.
	- Added "Replace tabs with spaces" checkbox in Prefs panel.
	- Added install script for Linux.
- New settings in leoConfig.leo/.txt.
	- Colors for Show Invisibles command and body_insertion_cursor
	- Settings affecting when control-drags start.
	- Defaults for unicode (see above).
- Many other bug fixes and improvements.

Quote of the month
------------------
I only have one week of Leo experience but I already know it will be my default
IDE/project manager.  I have seen several old threads on c.l.python  where people
complain about the lack of a project manager for the free/standard Python IDE's
like Idle.  Leo clearly solves that problem and in a way that commercial tools
can't touch -- Marshall Parsons

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Links:
------
Leo:      http://personalpages.tds.net/~edream/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
</t>
<t tx="ekr.20031218072017.357">leo.py 3.11 beta 3                       February 26, 2003

leo.py 3.11 beta 3 is now available at:  http://sourceforge.net/projects/leo/
leo.py requires Python 2.1 or above and tcl/tk 8.3 or above.
leo.py will work on Linux, Windows and MacOs X Jaguar.

It appears that just about everyone who has ever reported problems with how Leo handles non-ascii characters is now satisfied with Leo.

- Fixes some unicode problems when the system encoding is not "utf-8".
- Adds the tk_encoding setting.
- Fixes some minor bugs in the Outline To Noweb command.

For all other details, see below.

The highlights of 3.11:
-----------------------
** Leo finally supports unicode properly.  This solves a lot of problems.
	- New @encoding directives specifies encoding for derived files.
	- New settings specify default encodings for .leo and derived files.
	- Derived files specify encodings used to create them.
** A new plugin architecture for customizing Leo. (A major improvement.)
- New commands:
	- Toggle Angle Brackets.
	- Insert Time/Date (in headline or body text).
	- Go To First/Last Node, Parent, Next/Previous Sibling.
	- Write Missing @file Nodes.
	- Expand/Contract Node.
- Improved commands:
	- Expand/Contract commands now operate on the selected tree.
	  ( A major improvement)
	- Sort Siblings command can now sort top-level nodes.
	- Leo now allows multiple writes of cloned nodes.
	  (Useful when different @path directives are in effect.)
- Other improvements:
	- Improved syntax coloring for html and xml.
	- Leo scrolls partially visible headlines into full view.
	- Added "Replace tabs with spaces" checkbox in Prefs panel.
	- Added install script for Linux.
- New settings in leoConfig.leo/.txt.
	- Colors for Show Invisibles command and body_insertion_cursor
	- Settings affecting when control-drags start.
	- Defaults for unicode (see above).
- Many other bug fixes and improvements.

Quote of the month
------------------
I only have one week of Leo experience but I already know it will be my default
IDE/project manager.  I have seen several old threads on c.l.python  where people
complain about the lack of a project manager for the free/standard Python IDE's
like Idle.  Leo clearly solves that problem and in a way that commercial tools
can't touch -- Marshall Parsons

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Links:
------
Leo:      http://personalpages.tds.net/~edream/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
</t>
<t tx="ekr.20031218072017.358">leo.py 3.11 beta 4                       March 31, 2003

leo.py 3.11 beta 4 is now available at:  http://sourceforge.net/projects/leo/

This will be the last beta release before 3.11 final.

The highlights of beta 4:
-------------------------
- Fixed several minor problems with unicode.
- Fixed a _huge_ performance bug that slowed moving nodes left.
- Added several new plugins:
	- Support for the VIM editor.
	- A French translation of all menus.
- Added many minor bug fixes and improvements.

The highlights of 3.11:
-----------------------
** Leo now supports unicode properly.
	- New @encoding directives specifies encoding for derived files.
	- New settings specify default encodings for .leo and derived files.
	- Derived files specify encodings used to create them.
** A new plugin architecture for customizing Leo.
- New commands:
	- Toggle Angle Brackets.
	- Insert Time/Date (in headline or body text).
	- Go To First/Last Node, Parent, Next/Previous Sibling.
	- Write Missing @file Nodes.
	- Expand/Contract Node.
- Improved commands:
	- Expand/Contract commands now operate on the selected tree.
	  ( A major improvement)
	- Sort Siblings command can now sort top-level nodes.
	- Leo now allows multiple writes of cloned nodes.
	  (Useful when different @path directives are in effect.)
- Other improvements:
	- Improved syntax coloring for html and xml.
	- Leo scrolls partially visible headlines into full view.
	- Added "Replace tabs with spaces" checkbox in Prefs panel.
	- Added install script for Linux.
- New settings in leoConfig.leo/.txt.
	- Colors for Show Invisibles command and body_insertion_cursor
	- Settings affecting when control-drags start.
	- Defaults for unicode (see above).
- Many other bug fixes and improvements.

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

leo.py requires Python 2.1 or above and tcl/tk 8.3 or above.
leo.py will work on Linux, Windows and MacOs X Jaguar.

Links:
------
Leo:      http://personalpages.tds.net/~edream/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
</t>
<t tx="ekr.20031218072017.359">leo.py 3.11 final is now available at:  http://sourceforge.net/projects/leo/
leo.py requires Python 2.1 or above and tcl/tk 8.3 or above.
leo.py will work on Linux, Windows and MacOs X Jaguar.

This version of Leo contains many important improvements since 3.10,
especially support for unicode and a new plugin architecture.

The Highlights of 3.11 final:

** Leo supports unicode.
	- New @encoding directives specifies encoding for derived files.
	- New settings specify default encodings for .leo and derived files.
	- Derived files specify encodings used to create them.
** A new plugin architecture for customizing Leo.
- New commands:
	- Toggle Angle Brackets.
	- Insert Time/Date (in headline or body text).
	- Go To First/Last Node, Parent, Next/Previous Sibling.
	- Write Missing @file Nodes.
	- Expand/Contract Node.
- Improved commands:
	- Fixed a huge performance bug that slowed moving nodes left.
	- Expand/Contract commands now operate on the selected tree.
	  ( A major improvement)
	- Sort Siblings command can now sort top-level nodes.
	- Leo now allows multiple writes of cloned nodes.
	  (Useful when different @path directives are in effect.)
- Other improvements:
	- New @lineending directive specifies line endings.
	- Improved syntax coloring for html and xml.
	- Leo scrolls partially visible headlines into full view.
	- Added "Replace tabs with spaces" checkbox in Prefs panel.
- New settings in leoConfig.leo/.txt.
	- Added "tk_encoding" setting and related logic.
	- Colors for Show Invisibibles command and body_insertion_cursor
	- Settings affecting when control-drags start.
	- Defaults for unicode (see above).
- Many other bug fixes and improvements.

Quote of the Month:
-------------------
I gave Leo a try a while ago, but did not recognize its strengths as an
outliner. In April 2003 a gave it another try. And when I saw in the online
help mentiontioning clones almost in passing (you got to emphasis this much
more!), I knew: This is it.

If you are like me, you have a kind of knowledge base with infos gathered over
time. And you have projects, where you use some of those infos. Now, with
conventional outliners you begin to double these infos, because you want to
have the infos needed for the project with your project. With Leo you can do
this too, but if you change text in one place IT IS UPDATED IN THE OTHER PLACE
TOO! This is a feature I did not see with any other outliner (and I tried a
few). Amazing! Leo directly supports the way I work! -- F. Geiger

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

leo.py requires Python 2.1 or above and tcl/tk 8.3 or above.
leo.py works on Linux, Windows and MacOs X Jaguar.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458

Edward K. Ream</t>
<t tx="ekr.20031218072017.360">leo.py 3.11.1 is now available at:  http://sourceforge.net/projects/leo/

This version fixes two bugs found in the recent 3.11 version:

- Leo had startup problems on some Linux systems.

- Creating clones by control dragging did not always work.
  This bug has existed in Leo for a long time.

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

leo.py requires Python 2.1 or above and tcl/tk 8.3 or above.
leo.py works on Linux, Windows and MacOs X Jaguar.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Wiki:     http://leo.hd1.org/

Edward K. Ream
</t>
<t tx="ekr.20031218072017.361">leo.py 3.12                              July 17, 2003

leo.py 3.12 is now available at: http://sourceforge.net/projects/leo/

This version fixes many bugs and adds several major new features.  There are no known serious bugs in this version of Leo. 

Window sizes are now in pixels rather than grid units, so you must resize existing outlines (.leo files) when opening them for the first time using this version of Leo.  Don't panic!

Highlights of this version:

* Plugged a huge memory leak.
* Fixed a major bug involving undo.
* Added Icon &amp; Status areas to Leo window for use by plugins.
* Important new plugins:
  - The file leoPlugins.leo now contains all plugins.
  - add_directives.py allows plugins to define new directives.
  - color_markup.py supports wiki-styled markup.
  - mod_spelling.py checks spelling (requires aspell to be installed).
  - nav_buttons.py creates browser-style navigation plugins in the icon area.
  - plugins_menu.py creates a Plugins menu items for all loaded plugins.
  - scripts_menu.py creates a Scripts menu for all scripts in scripts folder.
  - spell
  - trace_gc traces all changes to memory at idle time.
* Other enhancements:
  - Redesigned the Find panel.   Non-functional options are dimmed.
  - Added @wrap and @nowrap directives.
  - Added Write Dirty @file Nodes command.
  - Added several new "stub hooks".
  - Hyperlinks are now enabled by default.
  - Leo now loads plugins in alphabetical order.
  - Leo now remembers the size and location of Leo windows.
  - Undo now restores the insert point or the selection range after most commands.
  - Added apply button to Font panel.
  - Improved the reporting of characters that do not exist in the present encoding.
* The usual assortment of bug fixes and minor improvements.
  - There are no known bugs in this version of Leo.

Quote of the month:
-------------------
"Thanks for such a great mind-opening program!" -- Eduardo Dominguez

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

leo.py requires Python 2.1 or above and tcl/tk 8.3 or above.
leo.py works on Linux, Windows and MacOs X Jaguar.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Wiki:     http://leo.hd1.org/

Edward K. Ream
</t>
<t tx="ekr.20031218072017.362">leo.py 3.12                              July 17, 2003

leo.py 3.12 is now available at: http://sourceforge.net/projects/leo/

This version fixes many bugs and adds several major new features.

The first announcement of 3.12 appeared a few days ago on SourceForge.  Since then, a few minor bugs have been found.  In particular, if would be best, when installing Leo on Linux, to remove previous installations of Leo before running the install script.  This will ensure that the new subdirectories of the main Leo directory are created properly.

Window sizes are now in pixels rather than grid units, so you must resize existing outlines (.leo files) when opening them for the first time using this version of Leo.  Don't panic!

Highlights of this version:

* Plugged a huge memory leak.
* Fixed a major bug involving undo.
* Added Icon &amp; Status areas to Leo window for use by plugins.
* Important new plugins:
  - The file leoPlugins.leo now contains all plugins.
  - add_directives.py allows plugins to define new directives.
  - color_markup.py supports wiki-styled markup.
  - mod_spelling.py checks spelling (requires aspell to be installed).
  - nav_buttons.py creates browser-style navigation plugins in the icon area.
  - plugins_menu.py creates a Plugins menu items for all loaded plugins.
  - scripts_menu.py creates a Scripts menu for all scripts in scripts folder.
  - spell
  - trace_gc traces all changes to memory at idle time.
* Other enhancements:
  - Redesigned the Find panel.   Non-functional options are dimmed.
  - Added @wrap and @nowrap directives.
  - Added Write Dirty @file Nodes command.
  - Added several new "stub hooks".
  - Hyperlinks are now enabled by default.
  - Leo now loads plugins in alphabetical order.
  - Leo now remembers the size and location of Leo windows.
  - Undo now restores the insert point or the selection range after most commands.
  - Added apply button to Font panel.
  - Improved the reporting of characters that do not exist in the present encoding.
* The usual assortment of bug fixes and minor improvements.
  - There are no known bugs in this version of Leo.

Quote of the month:
-------------------
"Thanks for such a great mind-opening program!" -- Eduardo Dominguez

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

leo.py requires Python 2.1 or above and tcl/tk 8.3 or above.
leo.py works on Linux, Windows and MacOs X Jaguar.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Wiki:     http://leo.hd1.org/

Edward K. Ream
</t>
<t tx="ekr.20031218072017.363">@color

# **** Do a full virus scan first!

# **** For reference only     ****
# **** Run this from test.leo ****

# Run pychecker from idle.
if 1:
	import pychecker.checker
	import leo
@nocolor
Documentation
	- Update readme.txt
	- Update LeoDocs.leo
	- Update web site.
Version numbers
	- Update version number in Help menu.
	- Update version number in setup.py (@ignore'd!!)
@color

if 1: # Save all files and tangle leoConfig.leo
	from leoGlobals import importFromPath
	preSetup = importFromPath("preSetup","c:\prog\leoCvs\leo")
	preSetup.setup()

if 1: # Replace config settings and create .zip file.
	import os
	os.system(r"c:\python22\python c:\prog\leoCvs\leo\setup.py sdist --formats=zip")

@nocolor
Create and test leosetup.exe.
	- Create leosetup.exe by right-clicking leo.nsi and choosing "compile with NSI (bz2)"
	- Test created leosetup.exe file.
	- test the files created in c:\program files\leo
Create Release on SourceForge
Uploads
    - Upload leodocs.zip
	- Upload leosetup.exe
	- Upload leo-x-y.zip
	- Upload sbook.chm if it has been changed.
Announcements
	- Announce to SourceForge itself. USE ANNOUNCEMENT FORMAT, not readme format.
	- Announce to Leo's SourceForce site.
	- Announce to comp.lang.python
	- Announce to comp.programming.literate</t>
<t tx="ekr.20031218072017.364">Have you thought about the publicity of 3.6? 
- News item on sourceforge 
- Freshmeat 
- http://www.python.org 
Vaults of Parnassus 
Vault: __main__ . Python Tools/Extensions . Editor / IDE 
- http://www.linux.org 
Development tools 
- http://www.gnu.org 
Just kidding :) 
</t>
<t tx="ekr.20031218072017.365"></t>
<t tx="ekr.20031218072017.366">use the command line option in the admin menu to do the following:

add leoConfig.py and leoConfig.txt
	cvs add leoConfig.txt
	cvs add leoConfig.py
	(then do commit)

remove readme*.doc
	remove files from working area (done)
	cvs remove readme1.doc
	cvs remove readme2.doc
	...
	(then do commit)</t>
<t tx="ekr.20031218072017.367">@nocolor

- Add a new entries in &lt;&lt; define global data structures &gt;&gt; app

- Add a new Tk.Radiobutton in &lt;&lt;create the Target Language frame&gt;&gt;

- Add an entry to the languages list in &lt;&lt;configure language-specific settings&gt;&gt;

- Add a list of the keywords of the language to &lt;&lt; define colorizer keywords &gt;&gt;

  N.B.: the name of this list must be x_keywords, where x is the entry in language in step a.

- Add any language-specifig code to leoColor.colorizeAnyLanguage.
  For most languages nothing need be done in this step.

TESTS

- Test the syntax coloring for the new language by using the @language directive.

- Test workings of the Preferences Panel by choosing the language in the panel and by looking at code that is _not_ under control of an @language directive.

- Test the leoConfig.txt by setting default_target_language to the name of the new language.  When you restart Leo, the new language should be selected in the Prefs panel.

- Remove leoConfig.txt, select the new language in the Prefs panel, and save the .leo file.  Open the file with a text editor and check to make sure that the &lt;preferences&gt; tag (near the top) contains an entry like this:

&lt;preferences allow_rich_text="0" defaultTargetLanguage="Python"&gt;
&lt;/preferences&gt;

but with the name of your new language instead of "Python".

- Create an @root node and verify that you can Tangle it.

@color
</t>
<t tx="ekr.20031218072017.368"># Internally, lower case is used for all language names.
self.language_delims_dict = {
	"actionscript" : "// /* */", #jason 2003-07-03
	"c" : "// /* */", # C, C++ or objective C.
	"csharp" : "// /* */",	# C#
	"cweb" : "@q@ @&gt;", # Use the "cweb hack"
	"elisp" : ";",
	"forth" : "_\\_ _(_ _)_", # Use the "REM hack"
	"fortran" : "C",
	"fortran90" : "!",
	"html" : "&lt;!-- --&gt;",
	"java" : "// /* */",
	"latex" : "%",
	"pascal" : "// { }",
	"perl" : "#",
	"perlpod" : "# __=pod__ __=cut__", # 9/25/02: The perlpod hack.
	"php" : "//",
	"plain" : "#", # We must pick something.
	"python" : "#",
	"rebol" : ";", #jason 2003-07-03
	"shell" : "#",  # shell scripts
	"tcltk" : "#",
	"unknown" : "#" } # Set when @comment is seen.

self.language_extension_dict = {
	"actionscript" : "as", #jason 2003-07-03
	"c" : "c",
	"cweb" : "w",
	"elisp" : "el",
	"forth" : "forth",
	"fortran" : "f",
	"fortran90" : "f",
	"html" : "html",
	"java" : "java",
	"latex" : "tex", # 1/8/04
	"noweb" : "nw",
	"pascal" : "p",
	"perl" : "perl",
	"perlpod" : "perl",
	"php" : "php",
	"plain" : "txt",
	"python" : "py",
	"rebol" : "r",  #jason 2003-07-03
	"shell" : "txt",
	"tex" : "tex",
	"tcltk" : "tcl",
	"unknown" : "txt" } # Set when @comment is seen.</t>
<t tx="ekr.20031218072017.369"># Frame and title
w,target = gui.create_labeled_frame (outer,caption="Default Target Language")
w.pack(padx=2,pady=2,expand=1,fill="x")

# Frames for two columns of radio buttons
lt = Tk.Frame(target)
rt = Tk.Frame(target)
lt.pack(side="left")
rt.pack(side="right")

# Left column of radio buttons.
left_data = [
	("ActionScript", "actionscript"),
	("C/C++","c"),
	("C#",   "csharp"),
	("CWEB", "cweb"),
	("elisp","elisp"),
	("HTML", "html"),
	("Java", "java"),
	("LaTeX", "latex")]

for text,value in left_data:
	button = Tk.Radiobutton(lt,anchor="w",text=text,
		variable=self.lang_var,value=value,command=self.set_lang)
	button.pack(fill="x")

# Right column of radio buttons.
right_data = [
	("Pascal", "pascal"),
	("Perl", "perl"),
	("Perl+POD", "perlpod"),
	("PHP", "php"),
	("Plain Text", "plain"),
	("Python", "python"),
	("Rebol", "rebol"),
	("tcl/tk", "tcltk")]

for text,value in right_data:
	button = Tk.Radiobutton(rt,anchor="w",text=text,
		variable=self.lang_var,value=value,command=self.set_lang)
	button.pack(fill="x")</t>
<t tx="ekr.20031218072017.370"># Define has_string, keywords, single_comment_start, block_comment_start, block_comment_end.

if self.language == "cweb": # Use C comments, not cweb sentinel comments.
	delim1,delim2,delim3 = g.set_delims_from_language("c")
elif self.comment_string:
	delim1,delim2,delim3 = g.set_delims_from_string(self.comment_string)
elif self.language == "plain": # 1/30/03
	delim1,delim2,delim3 = None,None,None
else:
	delim1,delim2,delim3 = g.set_delims_from_language(self.language)

self.single_comment_start = delim1
self.block_comment_start = delim2
self.block_comment_end = delim3

# A strong case can be made for making this code as fast as possible.
# Whether this is compatible with general language descriptions remains to be seen.
self.has_string = self.language != "plain"
if self.language == "plain":
	self.string_delims = ()
elif self.language in ("elisp","html"):
	self.string_delims = ('"')
else:
	self.string_delims = ("'",'"')
self.has_pp_directives = self.language in ("c","csharp","cweb","latex")

# The list of languages for which keywords exist.
# Eventually we might just use language_delims_dict.keys()
languages = [
	"actionscript","c","csharp","cweb","elisp","html","java","latex",
	"pascal","perl","perlpod","php","python","rebol","tcltk"]

self.keywords = []
if self.language == "cweb":
	for i in self.c_keywords:
		self.keywords.append(i)
	for i in self.cweb_keywords:
		self.keywords.append(i)
else:
	for name in languages:
		if self.language==name: 
			# g.trace("setting keywords for",name)
			self.keywords = getattr(self, name + "_keywords")

# Color plain text unless we are under the control of @nocolor.
# state = g.choose(self.flag,"normal","nocolor")
state = self.setFirstLineState()

if 1: # 10/25/02: we color both kinds of references in cweb mode.
	self.lb = "&lt;&lt;"
	self.rb = "&gt;&gt;"
else:
	self.lb = g.choose(self.language == "cweb","@&lt;","&lt;&lt;")
	self.rb = g.choose(self.language == "cweb","@&gt;","&gt;&gt;")</t>
<t tx="ekr.20031218072017.371">&lt;&lt; actionscript keywords &gt;&gt;
&lt;&lt; c keywords &gt;&gt;
cweb_keywords = c_keywords
&lt;&lt; csharp keywords &gt;&gt;
&lt;&lt; elisp keywords&gt;&gt;
&lt;&lt; html keywords &gt;&gt;
&lt;&lt; java keywords &gt;&gt;
&lt;&lt; latex keywords &gt;&gt;
&lt;&lt; pascal keywords &gt;&gt;
&lt;&lt; perl keywords &gt;&gt;
perlpod_keywords = perl_keywords
&lt;&lt; python keywords &gt;&gt;
&lt;&lt; tcl/tk keywords &gt;&gt;
&lt;&lt; php keywords &gt;&gt;
&lt;&lt; rebol keywords &gt;&gt;</t>
<t tx="ekr.20031218072017.372">actionscript_keywords = [
#Jason 2003-07-03 
#Actionscript keywords for Leo adapted from UltraEdit syntax highlighting
"break", "call", "continue", "delete", "do", "else", "false", "for", "function", "goto", "if", "in", "new", "null", "return", "true", "typeof", "undefined", "var", "void", "while", "with", "#include", "catch", "constructor", "prototype", "this", "try", "_parent", "_root", "__proto__", "ASnative", "abs", "acos", "appendChild", "asfunction", "asin", "atan", "atan2", "attachMovie", "attachSound", "attributes", "BACKSPACE", "CAPSLOCK", "CONTROL", "ceil", "charAt", "charCodeAt", "childNodes", "chr", "cloneNode", "close", "concat", "connect", "cos", "createElement", "createTextNode", "DELETEKEY", "DOWN", "docTypeDecl", "duplicateMovieClip", "END", "ENTER", "ESCAPE", "enterFrame", "entry", "equal", "eval", "evaluate", "exp", "firstChild", "floor", "fromCharCode", "fscommand", "getAscii", "getBeginIndex", "getBounds", "getBytesLoaded", "getBytesTotal", "getCaretIndex", "getCode", "getDate", "getDay", "getEndIndex", "getFocus", "getFullYear", "getHours", "getMilliseconds", "getMinutes", "getMonth", "getPan", "getProperty", "getRGB", "getSeconds", "getTime", "getTimer", "getTimezoneOffset", "getTransform", "getURL", "getUTCDate", "getUTCDay", "getUTCFullYear", "getUTCHours", "getUTCMilliseconds", "getUTCMinutes", "getUTCMonth", "getUTCSeconds", "getVersion", "getVolume", "getYear", "globalToLocal", "gotoAndPlay", "gotoAndStop", "HOME", "haschildNodes", "hide", "hitTest", "INSERT", "Infinity", "ifFrameLoaded", "ignoreWhite", "indexOf", "insertBefore", "int", "isDown", "isFinite", "isNaN", "isToggled", "join", "keycode", "keyDown", "keyUp", "LEFT", "LN10", "LN2", "LOG10E", "LOG2E", "lastChild", "lastIndexOf", "length", "load", "loaded", "loadMovie", "loadMovieNum", "loadVariables", "loadVariablesNum", "localToGlobal", "log", "MAX_VALUE", "MIN_VALUE", "max", "maxscroll", "mbchr", "mblength", "mbord", "mbsubstring", "min", "NEGATIVE_INFINITY", "NaN", "newline", "nextFrame", "nextScene", "nextSibling", "nodeName", "nodeType", "nodeValue", "on", "onClipEvent", "onClose", "onConnect", "onData", "onLoad", "onXML", "ord", "PGDN", "PGUP", "PI", "POSITIVE_INFINITY", "parentNode", "parseFloat", "parseInt", "parseXML", "play", "pop", "pow", "press", "prevFrame", "previousSibling", "prevScene", "print", "printAsBitmap", "printAsBitmapNum", "printNum", "push", "RIGHT", "random", "release", "removeMovieClip", "removeNode", "reverse", "round", "SPACE", "SQRT1_2", "SQRT2", "scroll", "send", "sendAndLoad", "set", "setDate", "setFocus", "setFullYear", "setHours", "setMilliseconds", "setMinutes", "setMonth", "setPan", "setProperty", "setRGB", "setSeconds", "setSelection", "setTime", "setTransform", "setUTCDate", "setUTCFullYear", "setUTCHours", "setUTCMilliseconds", "setUTCMinutes", "setUTCMonth", "setUTCSeconds", "setVolume", "setYear", "shift", "show", "sin", "slice", "sort", "start", "startDrag", "status", "stop", "stopAllSounds", "stopDrag", "substr", "substring", "swapDepths", "splice", "split", "sqrt", "TAB", "tan", "targetPath", "tellTarget", "toggleHighQuality", "toLowerCase", "toString", "toUpperCase", "trace", "UP", "UTC", "unescape", "unloadMovie", "unLoadMovieNum", "unshift", "updateAfterEvent", "valueOf", "xmlDecl", "_alpha", "_currentframe", "_droptarget", "_focusrect", "_framesloaded", "_height", "_highquality", "_name", "_quality", "_rotation", "_soundbuftime", "_target", "_totalframes", "_url", "_visible", "_width", "_x", "_xmouse", "_xscale", "_y", "_ymouse", "_yscale", "and", "add", "eq", "ge", "gt", "le", "lt", "ne", "not", "or", "Array", "Boolean", "Color", "Date", "Key", "Math", "MovieClip", "Mouse", "Number", "Object", "Selection", "Sound", "String", "XML", "XMLSocket"
]</t>
<t tx="ekr.20031218072017.373">c_keywords = [
	# C keywords
	"auto","break","case","char","continue",
	"default","do","double","else","enum","extern",
	"float","for","goto","if","int","long","register","return",
	"short","signed","sizeof","static","struct","switch",
	"typedef","union","unsigned","void","volatile","while",
	# C++ keywords
	"asm","bool","catch","class","const","const_cast",
	"delete","dynamic_cast","explicit","false","friend",
	"inline","mutable","namespace","new","operator",
	"private","protected","public","reinterpret_cast","static_cast",
	"template","this","throw","true","try",
	"typeid","typename","using","virtual","wchar_t"]</t>
<t tx="ekr.20031218072017.374"># EKR: needs more work.
elisp_keywords = [
	# Maybe...
	"error","princ",
	# More typical of other lisps...
	"apply","eval",
	"t","nil",
	"and","or","not",
	"cons","car","cdr",
	"cond",
	"defconst","defun","defvar",
	"eq","ne","equal","gt","ge","lt","le",
	"if",
	"let",
	"mapcar",
	"prog","progn",
	"set","setq",
	"type-of",
	"unless",
	"when","while"]</t>
<t tx="ekr.20031218072017.375"># No longer used by syntax colorer.
html_keywords = []

if 0: # Not used at present.
	unused_keywords = [
		# html constructs.
		"a","body","cf",
		"h1","h2","h3","h4","h5","h6",
		"head","html","hr",
		"i","img","li","lu","meta",
		"p","title","ul",
		# Common tags
		"caption","col","colgroup",
		"table","tbody","td","tfoot","th","thead","tr",
		"script","style"]

	html_specials = [ "&lt;%","%&gt;" ]</t>
<t tx="ekr.20031218072017.376">java_keywords = [
	"abstract","boolean","break","byte","byvalue",
	"case","cast","catch","char","class","const","continue",
	"default","do","double","else","extends",
	"false","final","finally","float","for","future",
	"generic","goto","if","implements","import","inner",
	"instanceof","int","interface","long","native",
	"new","null","operator","outer",
	"package","private","protected","public","rest","return",
	"short","static","super","switch","synchronized",
	"this","throw","transient","true","try",
	"var","void","volatile","while"]</t>
<t tx="ekr.20031218072017.377">#If you see two idenitical words, with minor capitalization differences
#DO NOT ASSUME that they are the same word. For example \vert produces
#a single vertical line and \Vert produces a double vertical line
#Marcus A. Martin.

latex_special_keyword_characters = "@(){}%"

latex_keywords = [
	#special keyworlds
	"\\%", # 11/9/03
	"\\@", "\\(", "\\)", "\\{", "\\}",
	#A
	"\\acute", "\\addcontentsline", "\\addtocontents", "\\addtocounter", "\\address",
	"\\addtolength", "\\addvspace", "\\AE", "\\ae", "\\aleph", "\\alph", "\\angle",
	"\\appendix", 
	"\\approx",	"\\arabic", "\\arccos", "\\arcsin", "\\arctan", "\\ast", "\\author",
	#B
	"\\b", "\\backmatter", "\\backslash", "\\bar", "\\baselineskip", "\\baselinestretch",
	"\\begin", "\\beta", "\\bezier", "\\bf", "\\bfseries", "\\bibitem", "\\bigcap", 
	"\\bigcup", "\\bigodot", "\\bigoplus", "\\bigotimes", "\\bigskip", "\\biguplus", 
	"\\bigvee", "\\bigwedge",	"\\bmod", "\\boldmath", "\\Box", "\\breve", "\\bullet",
	#C
	"\\c", "\\cal", "\\caption", "\\cdot", "\\cdots", "\\centering", "\\chapter", 
	"\\check", "\\chi", "\\circ", "\\circle", "\\cite", "\\cleardoublepage", "\\clearpage", 
	"\\cline",	"\\closing", "\\clubsuit", "\\coprod", "\\copywright", "\\cos", "\\cosh", 
	"\\cot", "\\coth",	"csc",
	#D
	"\\d", "\\dag", "\\dashbox", "\\date", "\\ddag", "\\ddot", "\\ddots", "\\decl", 
	"\\deg", "\\Delta", 
	"\\delta", "\\depthits", "\\det", 
	"\\DH", "\\dh", "\\Diamond", "\\diamondsuit", "\\dim", "\\div", "\\DJ", "\\dj", 
	"\\documentclass", "\\documentstyle", 
	"\\dot", "\\dotfil", "\\downarrow",
	#E
	"\\ell", "\\em", "\\emph", "\\end", "\\enlargethispage", "\\ensuremath", 
	"\\enumi", "\\enuii", "\\enumiii", "\\enuiv", "\\epsilon", "\\equation", "\\equiv",	
	"\\eta", "\\example", "\\exists", "\\exp",
	#F
	"\\fbox", "\\figure", "\\flat", "\\flushbottom", "\\fnsymbol", "\\footnote", 
	"\\footnotemark", "\\fotenotesize", 
	"\\footnotetext", "\\forall", "\\frac", "\\frame", "\\framebox", "\\frenchspacing", 
	"\\frontmatter",
	#G
	"\\Gamma", "\\gamma", "\\gcd", "\\geq", "\\gg", "\\grave", "\\guillemotleft", 
	"\\guillemotright",	"\\guilsinglleft", "\\guilsinglright",
	#H
	"\\H", "\\hat", "\\hbar", "\\heartsuit", "\\heightits", "\\hfill", "\\hline", "\\hom",
	"\\hrulefill",	"\\hspace", "\\huge",	"\\Huge",	"\\hyphenation"
	#I
	"\\Im", "\\imath", "\\include", "includeonly", "indent", "\\index", "\\inf", "\\infty", 
	"\\input", "\\int", "\\iota",	"\\it", "\\item", "\\itshape",
	#J
	"\\jmath", "\\Join",
	#K
	"\\k", "\\kappa", "\\ker", "\\kill",
	#L
	"\\label", "\\Lambda", "\\lambda", "\\langle", "\\large", "\\Large", "\\LARGE", 
	"\\LaTeX", "\\LaTeXe", 
	"\\ldots", "\\leadsto", "\\left", "\\Leftarrow", "\\leftarrow", "\\lefteqn", "\\leq",
	"\\lg", "\\lhd", "\\lim", "\\liminf", "\\limsup", "\\line", 	"\\linebreak", 
	"\\linethickness", "\\linewidth",	"\\listfiles",
	"\\ll", "\\ln", "\\location", "\\log", "\\Longleftarrow", "\\longleftarrow", 
	"\\Longrightarrow",	"longrightarrow",
	#M
	"\\mainmatter", "\\makebox", "\\makeglossary", "\\makeindex","\\maketitle", "\\markboth", "\\markright",
	"\\mathbf", "\\mathcal", "\\mathit", "\\mathnormal", "\\mathop",
	"\\mathrm", "\\mathsf", "\\mathtt", "\\max", "\\mbox", "\\mdseries", "\\medskip",
	"\\mho", "\\min", "\\mp", "\\mpfootnote", "\\mu", "\\multicolumn", "\\multiput",
	#N
	"\\nabla", "\\natural", "\\nearrow", "\\neq", "\\newcommand", "\\newcounter", 
	"\\newenvironment", "\\newfont",
	"\\newlength",	"\\newline", "\\newpage", "\\newsavebox", "\\newtheorem", "\\NG", "\\ng",
	"\\nocite", "\\noindent", "\\nolinbreak", "\\nopagebreak", "\\normalsize",
	"\\not", "\\nu", "nwarrow",
	#O
	"\\Omega", "\\omega", "\\onecolumn", "\\oint", "\\opening", "\\oval", 
	"\\overbrace", "\\overline",
	#P
	"\\P", "\\page", "\\pagebreak", "\\pagenumbering", "\\pageref", "\\pagestyle", 
	"\\par", "\\parbox",	"\\paragraph", "\\parindent", "\\parskip", "\\part", 
	"\\partial", "\\per", "\\Phi", 	"\\phi",	"\\Pi", "\\pi", "\\pm", 
	"\\pmod", "\\pounds", "\\prime", "\\printindex", "\\prod", "\\propto", "\\protext", 
	"\\providecomamnd", "\\Psi",	"\\psi", "\\put",
	#Q
	"\\qbezier", "\\quoteblbase", "\\quotesinglbase",
	#R
	"\\r", "\\raggedbottom", "\\raggedleft", "\\raggedright", "\\raisebox", "\\rangle", 
	"\\Re", "\\ref", 	"\\renewcommand", "\\renewenvironment", "\\rhd", "\\rho", "\\right", 
	"\\Rightarrow",	"\\rightarrow", "\\rm", "\\rmfamily",
	"\\Roman", "\\roman", "\\rule", 
	#S
	"\\s", "\\samepage", "\\savebox", "\\sbox", "\\sc", "\\scriptsize", "\\scshape", 
	"\\searrow",	"\\sec", "\\section",
	"\\setcounter", "\\setlength", "\\settowidth", "\\settodepth", "\\settoheight", 
	"\\settowidth", "\\sf", "\\sffamily", "\\sharp", "\\shortstack", "\\Sigma", "\\sigma", 
	"\\signature", "\\sim", "\\simeq", "\\sin", "\\sinh", "\\sl", "\\SLiTeX",
	"\\slshape", "\\small", "\\smallskip", "\\spadesuit", "\\sqrt", "\\sqsubset",	
	"\\sqsupset", "\\SS",
	"\\stackrel", "\\star", "\\subsection", "\\subset", 
	"\\subsubsection", "\\sum", "\\sup", "\\supressfloats", "\\surd", "\\swarrow",
	#T
	"\\t", "\\table", "\\tableofcontents", "\\tabularnewline", "\\tan", "\\tanh", 
	"\\tau", "\\telephone",	"\\TeX", "\\textbf",
	"\\textbullet", "\\textcircled", "\\textcompworkmark",	"\\textemdash", 
	"\\textendash", "\\textexclamdown", "\\textheight", "\\textquestiondown", 
	"\\textquoteblleft", "\\textquoteblright", "\\textquoteleft",
	"\\textperiod", "\\textquotebl", "\\textquoteright", "\\textmd", "\\textit", "\\textrm", 
	"\\textsc", "\\textsl", "\\textsf", "\\textsuperscript", "\\texttt", "\\textup",
	"\\textvisiblespace", "\\textwidth", "\\TH", "\\th", "\\thanks", "\\thebibligraphy",
	"\\Theta", "theta", 
	"\\tilde", "\\thinlines", 
	"\\thispagestyle", "\\times", "\\tiny", "\\title",	"\\today", "\\totalheightits", 
	"\\triangle", "\\tt", 
	"\\ttfamily", "\\twocoloumn", "\\typeout", "\\typein",
	#U
	"\\u", "\\underbrace", "\\underline", "\\unitlength", "\\unlhd", "\\unrhd", "\\Uparrow",
	"\\uparrow",	"\\updownarrow", "\\upshape", "\\Upsilon", "\\upsilon", "\\usebox",	
	"\\usecounter", "\\usepackage", 
	#V
	"\\v", "\\value", "\\varepsilon", "\\varphi", "\\varpi", "\\varrho", "\\varsigma", 
	"\\vartheta", "\\vdots", "\\vec", "\\vector", "\\verb", "\\Vert", "\\vert", 	"\\vfill",
	"\\vline", "\\vphantom", "\\vspace",
	#W
	"\\widehat", "\\widetilde", "\\widthits", "\\wp",
	#X
	"\\Xi", "\\xi",
	#Z
	"\\zeta" ]</t>
<t tx="ekr.20031218072017.378">pascal_keywords = [
	"and","array","as","begin",
	"case","const","class","constructor","cdecl"
	"div","do","downto","destructor","dispid","dynamic",
	"else","end","except","external",
	"false","file","for","forward","function","finally",
	"goto","if","in","is","label","library",
	"mod","message","nil","not","nodefault""of","or","on",
	"procedure","program","packed","pascal",
	"private","protected","public","published",
	"record","repeat","raise","read","register",
	"set","string","shl","shr","stdcall",
	"then","to","true","type","try","until","unit","uses",
	"var","virtual","while","with","xor"
	# object pascal
	"asm","absolute","abstract","assembler","at","automated",
	"finalization",
	"implementation","inherited","initialization","inline","interface",
	"object","override","resident","resourcestring",
	"threadvar",
	# limited contexts
	"exports","property","default","write","stored","index","name" ]</t>
<t tx="ekr.20031218072017.379">perl_keywords = [
	"continue","do","else","elsif","format","for","format","for","foreach",
	"if","local","package","sub","tr","unless","until","while","y",
	# Comparison operators
	"cmp","eq","ge","gt","le","lt","ne",
	# Matching ooperators
	"m","s",
	# Unary functions
	"alarm","caller","chdir","cos","chroot","exit","eval","exp",
	"getpgrp","getprotobyname","gethostbyname","getnetbyname","gmtime",
	"hex","int","length","localtime","log","ord","oct",
	"require","reset","rand","rmdir","readlink",
	"scalar","sin","sleep","sqrt","srand","umask",
	# Transfer ops
	"next","last","redo","go","dump",
	# File operations...
	"select","open",
	# FL ops
	"binmode","close","closedir","eof",
	"fileno","getc","getpeername","getsockname","lstat",
	"readdir","rewinddir","stat","tell","telldir","write",
	# FL2 ops
	"bind","connect","flock","listen","opendir",
	"seekdir","shutdown","truncate",
	# FL32 ops
	"accept","pipe",
	# FL3 ops
	"fcntl","getsockopt","ioctl","read",
	"seek","send","sysread","syswrite",
	# FL4 &amp; FL5 ops
	"recv","setsocket","socket","socketpair",
	# Array operations
	"pop","shift","split","delete",
	# FLIST ops
	"sprintf","grep","join","pack",
	# LVAL ops
	"chop","defined","study","undef",
	# f0 ops
	"endhostent","endnetent","endservent","endprotoent",
	"endpwent","endgrent","fork",
	"getgrent","gethostent","getlogin","getnetent","getppid",
	"getprotoent","getpwent","getservent",
	"setgrent","setpwent","time","times","wait","wantarray",
	# f1 ops
	"getgrgid","getgrnam","getprotobynumber","getpwnam","getpwuid",
	"sethostent","setnetent","setprotoent","setservent",
	# f2 ops
	"atan2","crypt",
	"gethostbyaddr","getnetbyaddr","getpriority","getservbyname","getservbyport",
	"index","link","mkdir","msgget","rename",
	"semop","setpgrp","symlink","unpack","waitpid",
	# f2 or 3 ops
	"index","rindex","substr",
	# f3 ops
	"msgctl","msgsnd","semget","setpriority","shmctl","shmget","vec",
	# f4 &amp; f5 ops
	"semctl","shmread","shmwrite","msgrcv",
	# Assoc ops
	"dbmclose","each","keys","values",
	# List ops
	"chmod","chown","die","exec","kill",
	"print","printf","return","reverse",
	"sort","system","syscall","unlink","utime","warn"]</t>
<t tx="ekr.20031218072017.380">php_keywords = [ # 08-SEP-2002 DTHEIN
	"__CLASS__", "__FILE__", "__FUNCTION__", "__LINE__",
	"and", "as", "break",
	"case", "cfunction", "class", "const", "continue",
	"declare", "default", "do",
	"else", "elseif", "enddeclare", "endfor", "endforeach",
	"endif", "endswitch",  "endwhile", "eval", "extends",
	"for", "foreach", "function", "global", "if",
	"new", "old_function", "or", "static", "switch",
	"use", "var", "while", "xor" ]
	
# The following are supposed to be followed by ()
php_paren_keywords = [
	"array", "die", "echo", "empty", "exit",
	"include", "include_once", "isset", "list",
	"print", "require", "require_once", "return",
	"unset" ]
	
# The following are handled by special case code:
# "&lt;?php", "?&gt;"
</t>
<t tx="ekr.20031218072017.381">python_keywords = [
	"and",       "del",       "for",       "is",        "raise",    
	"assert",    "elif",      "from",      "lambda",    "return",   
	"break",     "else",      "global",    "not",       "try",      
	"class",     "except",    "if",        "or",        "yield",   
	"continue",  "exec",      "import",    "pass",      "while",
	"def",       "finally",   "in",        "print"]</t>
<t tx="ekr.20031218072017.382">rebol_keywords = [
#Jason 2003-07-03 
#based on UltraEdit syntax highlighting
"about", "abs", "absolute", "add", "alert", "alias", "all", "alter", "and", "and~", "any", "append", "arccosine", "arcsine", "arctangent", "array", "ask", "at",  
"back", "bind", "boot-prefs", "break", "browse", "build-port", "build-tag",  
"call", "caret-to-offset", "catch", "center-face", "change", "change-dir", "charset", "checksum", "choose", "clean-path", "clear", "clear-fields", "close", "comment", "complement", "compose", "compress", "confirm", "continue-post", "context", "copy", "cosine", "create-request", "crypt", "cvs-date", "cvs-version",  
"debase", "decode-cgi", "decode-url", "decompress", "deflag-face", "dehex", "delete", "demo", "desktop", "detab", "dh-compute-key", "dh-generate-key", "dh-make-key", "difference", "dirize", "disarm", "dispatch", "divide", "do", "do-boot", "do-events", "do-face", "do-face-alt", "does", "dsa-generate-key", "dsa-make-key", "dsa-make-signature", "dsa-verify-signature",  
"echo", "editor", "either", "else", "emailer", "enbase", "entab", "exclude", "exit", "exp", "extract", 
"fifth", "find", "find-key-face", "find-window", "flag-face", "first", "flash", "focus", "for", "forall", "foreach", "forever", "form", "forskip", "fourth", "free", "func", "function",  
"get", "get-modes", "get-net-info", "get-style",  
"halt", "has", "head", "help", "hide", "hide-popup",  
"if", "import-email", "in", "inform", "input", "insert", "insert-event-func", "intersect", 
"join", 
"last", "launch", "launch-thru", "layout", "license", "list-dir", "load", "load-image", "load-prefs", "load-thru", "log-10", "log-2", "log-e", "loop", "lowercase",  
"make", "make-dir", "make-face", "max", "maximum", "maximum-of", "min", "minimum", "minimum-of", "mold", "multiply",  
"negate", "net-error", "next", "not", "now",  
"offset-to-caret", "open", "open-events", "or", "or~", 
"parse", "parse-email-addrs", "parse-header", "parse-header-date", "parse-xml", "path-thru", "pick", "poke", "power", "prin", "print", "probe", "protect", "protect-system",  
"q", "query", "quit",  
"random", "read", "read-io", "read-net", "read-thru", "reboot", "recycle", "reduce", "reform", "rejoin", "remainder", "remold", "remove", "remove-event-func", "rename", "repeat", "repend", "replace", "request", "request-color", "request-date", "request-download", "request-file", "request-list", "request-pass", "request-text", "resend", "return", "reverse", "rsa-encrypt", "rsa-generate-key", "rsa-make-key", 
"save", "save-prefs", "save-user", "scroll-para", "second", "secure", "select", "send", "send-and-check", "set", "set-modes", "set-font", "set-net", "set-para", "set-style", "set-user", "set-user-name", "show", "show-popup", "sine", "size-text", "skip", "sort", "source", "split-path", "square-root", "stylize", "subtract", "switch",  
"tail", "tangent", "textinfo", "third", "throw", "throw-on-error", "to", "to-binary", "to-bitset", "to-block", "to-char", "to-date", "to-decimal", "to-email", "to-event", "to-file", "to-get-word", "to-hash", "to-hex", "to-idate", "to-image", "to-integer", "to-issue", "to-list", "to-lit-path", "to-lit-word", "to-local-file", "to-logic", "to-money", "to-none", "to-pair", "to-paren", "to-path", "to-rebol-file", "to-refinement", "to-set-path", "to-set-word", "to-string", "to-tag", "to-time", "to-tuple", "to-url", "to-word", "trace", "trim", "try",  
"unfocus", "union", "unique", "uninstall", "unprotect", "unset", "until", "unview", "update", "upgrade", "uppercase", "usage", "use",  
"vbug", "view", "view-install", "view-prefs",  
"wait", "what", "what-dir", "while", "write", "write-io",  
"xor", "xor~",  
"action!", "any-block!", "any-function!", "any-string!", "any-type!", "any-word!",  
"binary!", "bitset!", "block!",  
"char!",  
"datatype!", "date!", "decimal!", 
"email!", "error!", "event!",  
"file!", "function!",  
"get-word!",  
"hash!",  
"image!", "integer!", "issue!",  
"library!", "list!", "lit-path!", "lit-word!", "logic!",  
"money!",  
"native!", "none!", "number!",  
"object!", "op!",  
"pair!", "paren!", "path!", "port!",  
"refinement!", "routine!",  
"series!", "set-path!", "set-word!", "string!", "struct!", "symbol!",  
"tag!", "time!", "tuple!",  
"unset!", "url!",  
"word!",  
"any-block?", "any-function?", "any-string?", "any-type?", "any-word?",  
"binary?", "bitset?", "block?",  
"char?", "connected?", "crypt-strength?", 
"datatype?", "date?", "decimal?", "dir?",  
"email?", "empty?", "equal?", "error?", "even?", "event?", "exists?", "exists-key?",
"file?", "flag-face?", "found?", "function?",  
"get-word?", "greater-or-equal?", "greater?",  
"hash?", "head?",  
"image?", "in-window?", "index?", "info?", "input?", "inside?", "integer?", "issue?",  
"length?", "lesser-or-equal?", "lesser?", "library?", "link-app?", "link?", "list?", "lit-path?", "lit-word?", "logic?",  
"modified?", "money?",  
"native?", "negative?", "none?", "not-equal?", "number?",  
"object?", "odd?", "offset?", "op?", "outside?",  
"pair?", "paren?", "path?", "port?", "positive?",  
"refinement?", "routine?",  
"same?", "screen-offset?", "script?", "series?", "set-path?", "set-word?", "size?", "span?", "strict-equal?", "strict-not-equal?", "string?", "struct?",  
"tag?", "tail?", "time?", "tuple?", "type?",  
"unset?", "url?",  
"value?", "view?", 
"within?", "word?",  
"zero?"
]</t>
<t tx="ekr.20031218072017.383">tcltk_keywords = [ # Only the tcl keywords are here.
	"after",     "append",    "array",
	"bgerror",   "binary",    "break",
	"catch",     "cd",        "clock",
	"close",     "concat",    "continue",
	"dde",
	"encoding",  "eof",       "eval",
	"exec",      "exit",      "expr",
	"fblocked",  "fconfigure","fcopy",     "file",      "fileevent",
	"filename",  "flush",     "for",       "foreach",   "format",
	"gets",      "glob",      "global",
	"history",
	"if",        "incr",      "info",      "interp",
	"join",
	"lappend",   "lindex",    "linsert",   "list",      "llength",
	"load",      "lrange",    "lreplace",  "lsearch",   "lsort",
	"memory",    "msgcat",
	"namespace",
	"open",
	"package",   "parray",    "pid",
	"proc",      "puts",      "pwd",
	"read",      "regexp",    "registry",   "regsub",
	"rename",    "resource",  "return",
	"scan",      "seek",      "set",        "socket",   "source",
	"split",     "string",    "subst",      "switch",
	"tell",      "time",      "trace",
	"unknown",   "unset",     "update",     "uplevel",   "upvar",
	"variable",  "vwait",
	"while" ]</t>
<t tx="ekr.20031218072017.384">Scite has the option to "Export as html" and "export as rtf", and it will be
full of colour and fonts - and you can define them in properties, so it will be
the same as during editing.</t>
<t tx="ekr.20031218072017.385">To increase the size of environment space, add the following to config.sys:

shell=C:\windows\command\command.com /p:4096

Notes:

1. The path C:\windows\command\command.com may vary.
Check you system for the location of command.com.

2. This works for versions of Windows prior to Me.
On Me you set the registry somehow.
No information on XP.</t>
<t tx="ekr.20031218072017.386">teknico ( Nicola Larosa ) 
 RE: Removing '\r' characters?   
2002-09-16 14:27  
&gt; I am plowing through old bug reports, and I found the following, from whom 
&gt; I don't know: 

That's from me, *again*. You are kindly advised to stop forgetting the attribution to all my bug reports. ;^) 

&gt;&gt; - Source files still have the dreaded \r in them. Why don't you switch 
&gt;&gt; to \n only, once and for all, and live happily ever after? ;^) 

&gt; I sure whould like to do that, and I'm not sure how to do this. All 
&gt; versions of the read code attempt to remove '\r' characters, and all 
&gt; versions of the write code write '\n' only for newlines. 

Sorry for being a bit vague, I was talking about the Leo source files themselves. I don't know what you use to edit them, ;^))) but in version 3.6 they still have \r\n as end-of-line. 

If Leo itself does not solve the problem, may I suggest the 
Tools/scripts/crlf.py script in the Python source distibution? It's nice and simple, and skips binary files, too. That's what I use every time I install a new version of Leo. :^) 
 
</t>
<t tx="ekr.20031218072017.387">Under unix, python writes "\n" as "\n"; under windows, it writes it as "\r\n". The unix python interpreter ignores trailing "\r" in python source files. There are no such guarantees for other languages. Unix users should be able to get rid of the cosmetically detrimental "\r" either by running dos2unix on the offending files, or, if they're part of a .leo project, reading them into leo and writing them out again.  


By: edream ( Edward K. Ream ) 
 RE: Removing '\r' characters?   
2002-09-17 09:34  
Oh, I see. Thanks very much for this clarification. 

Just to make sure I understand you: the problem with '\r' characters is that: 

1. I am creating LeoPy.leo and LeoDocs.leo on Windows and 
2. People are then using these files on Linux. 

and the way to remove the '\r' characters: 

1. I could run dos2unix on all distributed files just before committing to CVS or making a final distribution or 
2. People could, say, do the following: 

Step 1: Read and Save the .leo files, thereby eliminating the '\r' in those files and 
Step 2: Use the Write @file nodes command on all derived files to clear the '\r' in those files. 

Do you agree so far? 

&gt; Under unix, python writes "\n" as "\n"; under windows, it writes it as "\r\n". 

I am going to see if there is any way to get Python to write a "raw" '\n' to a file. I think there must be. This would solve the problem once and for all. 

Thanks again for this most helpful comment. 

Edward</t>
<t tx="ekr.20031218072017.388">In 2.3 you can open files with the "U" flag and get "universal newline"
support: 

% python
Python 2.3a0 (#86, Sep 4 2002, 21:13:00) 
[GCC 2.96 20000731 (Mandrake Linux 8.1 2.96-0.62mdk)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; f = open("crlf.txt")
&gt;&gt;&gt; line = f.readline()
&gt;&gt;&gt; line
'This is an example of what I have come to call the "cursed newline"
problem,\r\n'
&gt;&gt;&gt; f = open("crlf.txt", "rU")
&gt;&gt;&gt; line = f.readline()
&gt;&gt;&gt; line
'This is an example of what I have come to call the "cursed newline" problem,\n'

</t>
<t tx="ekr.20031218072017.389">&gt; You can open the file in 'binary' mode (adding 'b' to the mode string) and
&gt; the file will contain '\r\n' on both platforms (and any other platforms.)

Nope. Exactly wrong. In 2.2 and those before, when files are opened in
*text* mode (no "b") then reading them will provide Unix-style line endings
(newline only). When you open files in binary mode then you see the bytes
stored in the file.

On Unix systems there's no difference in the contents of a file whether in
binary or text mode. On Windows a file is shorter by the number of carriage
returns. On the Mac I have no idea what they do. Probably just carriage
returns, to be different :-)

2.3 will be a bit more flexible about such mattrers.
</t>
<t tx="ekr.20031218072017.390">import pychecker.checker ; import leo</t>
<t tx="ekr.20031218072017.391">@nocolor

I have a fair bit of expertise on CVS branches. It's late at night, so I don't have time for a long soapbox spiel at the moment. I will try to post something tomorrow. 

The brief picture is: 

* Check out code from CVS at the point you want to create the branch. 

* Make sure none of the files in your sandbox is modified. 

* Create the branch (cvs tag -b branchname). The branch name must start with a letter (upper or lower case) and thereafter can have alphanumeric characters, hyphens, and underscores (no periods or spaces). 

* The branch is created on the repository, but your sandbox is still checked out on the main branch. To check out on the new branch, do "cvs up -r branchname". 

When you want to merge changes back into the main branch, you can use "cvs up -r MAIN" to retrieve the main branch, then "cvs up -j branchname" to merge changes, then "cvs commit" to commit the merged version to the main branch AFTER YOU HAVE VERIFIED IT. 

I would recommend caution with merging because as you have noted, leo files are not well set up for CVS. They don't merge well because of inconsistent sentinel values. 

You may want to look at manually merging changes back into the main branch until leo implements invariant unique (UUID) sentinel indices. 

This will not hurt your ability to use branches, only your ability to automatically merge changes from one branch onto another.</t>
<t tx="ekr.20031218072017.392"></t>
<t tx="ekr.20031218072017.393">New in 2.2 (Do not use)

- Iterators/Generators
- Nested Scopes
- New Classes

The what's new for each version:

http://www.amk.ca/python/2.0/
http://www.amk.ca/python/2.1/
</t>
<t tx="ekr.20031218072017.394"></t>
<t tx="ekr.20031218072017.395"></t>
<t tx="ekr.20031218072017.396"></t>
<t tx="ekr.20031218072017.397">@nocolor

1. You specify default values of _formal parameters_ in a def statement.

2. You specify keywords arguments in a _function call_.

3. An argument list must have any positional arguments followed by any keyword arguments, where the keywords must be chosen from the formal parameter names.  It's not important whether a formal parameter has a default value or not.

4. No argument may receive a value more than once.

5. When a final formal parameter of the form **name is present, it receives a dictionary containing all keyword arguments whose keyword doesn't correspond to a formal parameter.

EKR Notes:

1.  I have been confusing default values with keyword arguments.  _Any_ formal parameter may be specified with a keyword argument!

2.  Arbitrary keyword params can be used if the def has an **arg.</t>
<t tx="ekr.20031218072017.398">In general, everything you can do in Python is accessible through the C API.

	lines = block.split('\n');
 
&gt; That will be
 
	lines = PyObject_CallMethod(block, "split", "s", "\n");
</t>
<t tx="ekr.20031218072017.399"></t>
<t tx="ekr.20031218072017.400">It is worth noting that NT, Win2K and XP all have an alternative which is
to add .PY to the PATHEXT environment variable. Then you can run any .PY
file directly just by typing the name of the script without the extension. 

e.g.
C:\&gt;set PATHEXT=.COM;.EXE;.BAT;.CMD

C:\&gt;set PATH=%PATH%;c:\python22\tools\Scripts

C:\&gt;google
'google' is not recognized as an internal or external command,
operable program or batch file.

C:\&gt;set PATHEXT=.COM;.EXE;.BAT;.CMD;.PY

C:\&gt;google
Usage: C:\python22\tools\Scripts\google.py querystring

C:\&gt;
</t>
<t tx="ekr.20031218072017.401">&gt;&gt; It has a header of just one line. All the ugly stuff is at the end.
&gt;&gt;
&gt;&gt; -------------------------------------------------------------------
&gt;&gt; goto ="python"
&gt;&gt;
&gt;&gt; # Python code goes here
&gt;&gt;
&gt;&gt; ''' hybrid python/batch footer:
&gt;&gt; @:="python"
&gt;&gt; @python.exe %0 %1 %2 %3 %4 %5 %6 %7 %8 %9
&gt;&gt; @if errorlevel 9009 echo Python may be downloaded from
&gt;www.python.org/download
&gt;&gt; @rem '''
&gt;&gt; -------------------------------------------------------------------
&gt;&gt;
&gt;&gt;         Oren
&gt;&gt;
&gt;

It's for running python scripts on windows, without having to type:

[&lt;path to python&gt;\]python[.exe] &lt;scriptname&gt; [&lt;arguments&gt;*]

and almost takes the place of the "shabang" line at the top of *nix
scripts.

</t>
<t tx="ekr.20031218072017.402"></t>
<t tx="ekr.20031218072017.403">I'd like to start a thread to think more about what we can do to deal with LeoPy.leo
in CVS.

Motivation: after making my Unix EOL fixes, I though I'd get with the program
and create a new node under (Project Views)-&gt;Bugs, and collect under there clones
of all the nodes that I touched as part of the fix.  I managed to get my changes
to LeoPy.py into CVS by doing a cvs up immediately before starting the work,
and being lucky enough that noone made any updates before I finished.

But of course, Edward was working on something else at the time, and when he
went to check in, he got a conflict.  Because of the intractablility of resolving
LeoPy.leo conflicts, he had to blow away my changes to get his in - not the
changes to the .py files (all intact), but the additional "documentation" node
for the bug.

This points out clearly what the .leo file contains that the python files don't:
the structures outside the @file (and @root) nodes.  If we concede that the
LeoPy.leo file is intractable in the presence of conflicts, then to preserve
that information, there would have to be some external, more tractable source
for that structure.  I am not at all convinced that's feasible, but I'm going
to speculate in public to see where it leads me/us.

What would such a structure contain?  All of the headlines, certainly.  Used
in combination with the .py files to rebuild the .leo file, it will also have
to include all the bodies not incorporated into files.  Internally, it will
need a syntax to indicate the tree structure.  So far, we're just building the
entire .leo file over again.  But here's a difference that might make a
difference:

Currently nodes are named in the .leo file with numbers.  The nodes need names,
or else it would be impossible to refer to clones.  Those names are effectively
recreated on the fly when the .leo file gets written, so any addition of a new
node changes all the names of the nodes following it in the tree walk.  That's
the core problem, and indicates a possible solution: what if these names weren't
disposable?  Store this .leo node name along with the node.  New nodes would
be assigned new names (probably the next highest integer).  So, at the end of
this thought process, the proposal is not to add a file external to the .leo
file, but to preserve the node numbers contained in the .leo file.  My python
reference suggests that these integers take about 12 bytes to store; adding
them to each node in LeoPy.leo would add about 30k to the memory footprint

I haven't yet studied the code that reads the .leo file, so any insight or guidance
from those who have would be appreciated before I head further down this path.

    - Stephen</t>
<t tx="ekr.20031218072017.404">@nocolor</t>
<t tx="ekr.20031218072017.405">@nocolor

Outlook: server for email, addresses &amp; calendar.  Groupware.  Chandler similar.

Zope: back end is ZODB.  Zope like an OS: run Python code on Zope.

Zope: another way to access Leo files.  Maybe twisted is better?

Wiki anology: edit Leo files with browser.  Write through the web.

longrun.org

Wiki principles: 
	- Sharing is 90% of collaboration.
	- Zope: Subscribe to a wiki: email when page changes.
	- RSS: xml that defines piece of info(tile,url,abstract)
		- Client has a list of rss feeds: an xml file.
		- List of intesting people: notified when they say something.

Two goals:
	- publish Leo files
	- edit Leo files

Brother needs cvs.
Kent not so worried about cvs.
	-Leo file is a web site!
	- Helper layer between user and OS.
		- Look at aap project.  Author of vim. a-p.org
			- Replacement for make in Python.  Automating tool.
		- Expert prepares Leo file.  User uses it.</t>
<t tx="ekr.20031218072017.406"></t>
<t tx="ekr.20031218072017.407"></t>
<t tx="ekr.20031218072017.408"></t>
<t tx="ekr.20031218072017.409"></t>
<t tx="ekr.20031218072017.410"></t>
<t tx="ekr.20031218072017.411">Developers Forum
By: rodrigo_b ( Rodrigo Benenson ) 
 RE: Leo over the network   
2003-05-10 00:06  
So this is my first proposal: 

Requirements 
-------------------- 

* Read remote outlines. 
** With Leo clients. 
** Over the web. 

* Edit remote outlines. 

* Import remote outlines (retrieve outlines from the web). 

* Synchronize local outlines with remote ones (web to local and local to web). 

* Publish outlines (send outlines to the web). 

* The Leo client have to be keept lighweigth. 

* The Leo remote outline access server should be a lighweigth daemon. 

* This daemon should automagically render HTML from the outlines. 

* The outlines should be editable from the web and via Leo client. 

* Concurency management is must. 

* The remote servers should be included in the leo client as leo nodes (just like leo files, but remotes). 
"@leo-outline leo.server.org:854" 

* By this way I could have access to local server nodes. 
"@leo-outline localhost:854" 

* The remote server should offer one and only one big outline with sub nodes, and so on, and so on... 

* At least the concurency should be managed as "when someone write, all the other ones only can read" 

* It is better if Leo devellop simultaneaously some hypertext/wiki extensions. 

---------------------------- 
End of requeriments 

This requeriments requires a client-server architecture, with basic commands as: 
- Update node 
- Lock/release node 
- Edit outline 
- Download outline 
- Upload outline 

well that is by the moment, I hope that we will be able to create a Finite, clear, requeriments list for this branch of Leo. 

RodrigoB.  

</t>
<t tx="ekr.20031218072017.412"></t>
<t tx="ekr.20031218072017.413">Open Discussion
https://sourceforge.net/forum/message.php?msg_id=2007586
By: rodrigo_b

z2.py,
&gt;Supposing that that I did find this file, what would I be looking for? 

This is the Main script, the principal program, the code that startup all the
servers, the only python program that make run Zope, it the code called by start.py,
and it is the one to which you pass the command lines.

With the command line you can indicate which services to start up at which ports.
This is IMPORTANT. Also you can enable/disable the Debug mode.

python z2.py --help will give you some infos about what I'm talking about.

In linux the debug or not debug mode, enable the console or daemon mode (that
means 'background task mode').

In windows, I'm not sure that disabling the debug mode will be enough.
I know that at the install time you can setup Zope as a Windows Service, so
it will start automatically every time Windows Startup, and it will not open
a console window.

But first look at the debug mode.

Start.bat give some defaults command lines to z2.py

Webdav,
&gt;What issues are involved in this choice, and why should I care today? 

from www.webdav.org

What is WebDAV? 
Briefly: WebDAV stands for "Web-based Distributed Authoring and Versioning".
It is a set of extensions to the HTTP protocol which allows users to collaboratively
edit and manage files on remote web servers.

For example that means that you can open you Windows Explorer (from your mail
I understand that you work on an MsWindows OS),
tip the url "localhost:%i"%(your webdav port) and you will be able to navigate,
view and edit the Zope Objects just as a normal file system (well, almost).

WebDav is a standard and there are Python implementations. WebDav is support
by  Oscom.

WebDav is cool.
WebDav is the 'highest level tool'.

ZODB,

&gt;Does that mean that gnx's aren't needed with Zope? Could Leo nodes live in
the ZODB?

You have to thinks to ZODB just as what it is: a Persistent Object Database.
Most objects in Zope are Persistents, that mean that their instances do not
die when you shutdown the server.

The ZODB store his data in it own format.
I think that GNX should be keeped.
You have to basic ways to put nodes into Zope.

First: the hard way: create a new Product (Products are something like Zope
plugins) that is based on the Leo code, but were there is no node storage, instead
the node should be Persistents. Then add rendering code to this objects.

Leo node object + Persistence + ZClass + Rendering Code -&gt; Leo Zope node.

Additionaly you should create an Folder like object that should be an 'Leo Outline
Zope Object',  actuating as an Leo nodes container.

This shema is similar to the Zwiki way, with a Zwiki Web and the Zwiki Pages.

Second: Use A zope folder just as Leo manage the @file nodes. Let have simple
DTMLDocuments, edited via WebDav, with &lt;dtml-comments&gt; , and stuff like that.
The Leo import/export that nodes.

RodrigoB.

</t>
<t tx="ekr.20031218072017.414">Open Discussion
https://sourceforge.net/forum/message.php?msg_id=2009081
By: ktenney

Edward,

I don't see ZLeo replacing Leo, rather a method of accessing
Leo files.

When I write, I almost always want it to be web accessable,
so that I can access it from any browser, and so that I can
share it easily. I would like myfile.leo to live
at http://longrun.org/leo/myfile.leo. It can be read and
written to from any browser (according to how permissions are
configured) The page describing how to configure Apache would
be found at http://longrun.org/leo/myfile.leo/Apache/configure
The only requirement to work with Leo files is a browser.

I wouldn't want to lose the capability to edit outside
the browser, using a standalone version of Leo or Zope's
ExternalEditor product. ExternalEditor allows me to click
an icon to open the page I'm viewing in any editor. I could
open it in Leo as a Leo file, or open just the page in
Vim (http://vim.sourceforge.net/index.php)

Zope is ponderous, I think of it as more of a platform
than an application. My understanding of how Zope works
grows slowly, in the mean time my focus is on _products_.
Installing a product in Zope is like installing an application
in Windows or Linux.

One of the most evolved products is Plone/CMF http://plone.org
which is basically a turnkey web site.

twisted http://twistedmatrix.com is a brilliant set of network
programming tools. That's all I know about it.

I'm not sure about Chandler (http://www.osafoundation.org/) 
(they did choose Python and ZODB http://www.osafoundation.org/technology.htm)

You might try subscribing to a Zope mailing list or two
http://www.zope.org/Resources/MailingLists
The community of users and developers is very important to Zope.

Thanks,
Kent
</t>
<t tx="ekr.20031218072017.415">Open Discussion
https://sourceforge.net/forum/message.php?msg_id=2007817
By: rodrigo_b

If zope is running some server then this server will be accesible from your
network if and only if there is no firewall in the way.

The people can access to your services using (normally on internet you do not
have a domain name)

your_ip:the_service_port

Example:
zope http service on port 8080 on your machine.
When  you connect to internet your machine got an extra IP.
Then simple put on the web browser

http://your_conexion_ip:8080

and Tada you will see the root_zope/index_html object rendered intro HTML.

Most of the ISP give you a dinamic IP.
Some companies provides you dinamic IP Domain Name services, allowing to attach
a domain name to your machine dinamically (each time you reconect).

then you can have:

http://leo.edward.com:8080/

The 8080 stuff can be avoied if you setup zope to use the standard port 80 for
HTTP service.

With this in mind you can access ftp

ftp://your_ip_or_domain_name:8021

or webdav, or anything else.
</t>
<t tx="ekr.20031218072017.416">Open Discussion
https://sourceforge.net/forum/message.php?msg_id=2007832
By: rodrigo_b

I would made a warning.

Zope IT IS NOT the only way to obtain an local HTTP server, pythonic and
flexible.

There is a lot of other way.

Also Zope IT IS NOT THE BEST pythonic http/ftp/webdav or anything server
aviable.

I think that we should define better 

What we want to do?

before choosing the tool.

As I said, I had already used Zope, I choosed it because of very specific features,
but nothing indicate that Zope is the best way to get Leo to the colaborative
network universe.

I think that we should at least consider:
- SimpleHTTPServer
- To take of the Medusa Server from Zope (that is use Zope code in the standard
Leo distribution, avoying dependences)
- Twisted matrix (I had no experience with it, but it looks much more
flexible/powerfull)

Zope provides you a specific framework, you have to match you application to
this framework, Zope (in my opinion) it is not a tool, it's an ambient.

It's seems that Edward it is new in the web oriented software, I think it has
a lot of potencialities and it will benefits Leo devellopment.

Please Edward, look at Zope as an example but not as THE options. Think about
what can be done, what should be done, and then we will take the best tool.

Anyway my opinion:
- SimpleHTTP server: usefull, it is in python, not very eficiente, just http
server....
- Medusa: usefull, very eficiente, just http server...
- Twisted Matrix: very powerfull, fresh comunity, confusing documentation, a
new paradigm, a devellopment tool.
- Zope: powerfull, eficient, comes with battery included, bad documentation,
to very paradigm oriented, the apps have to fit the paradigm, don't believe
all the promises, strong enthousiast comunity, poor web examples.


RodrigoB. 
</t>
<t tx="ekr.20031218072017.417">https://sourceforge.net/forum/message.php?msg_id=2007962
By: bwmulder

Since no one else answered this question, let me take a first take on the
question:

If you are connected to the internet, people can use your IP number to connect
to your computer. This IP number is often given dynamically, though some DSL
providers give you fixed IP numbers for an additional fee. If you did not ask
for fixed IP numbers, you probably have an dynamic IP number (I think).

An IP number consist of four digits. A connection to the (example) IP number
111.222.333.444 can by made via the request http://111.222.333.444

If you have a dynamic IP number, and your Internet provider provides you with
some space to publish HTML, you could, via a script, upload your current IP
number dynamically.

You might also consider buying a domain name. In this case, people can use the
domain name to connect to your computer instead of the IP number.

Another consideration are firewalls. Normally, you want a firewall isolating
your computer from attacks from the Internet. I firewall can be some additional
software. I am currently using a router, a piece of hardware, as a firewall.
Windows XP has firewall software build in. You might have to configure your
firewall to let requests for your server go through.

Finally, you might want to check the agreement you entered with your Internet
service provider, if you are allowed to run a server from your connection. It
might become a problem if your server becomes very popular.
</t>
<t tx="ekr.20031218072017.418">Open Discussion
https://sourceforge.net/forum/message.php?msg_id=2009279
By: paulpaterson

What I see Zope offering is an alternative way of storing and retrieving nodes.
What you also get for "free" with Zope is concurrent access, security,
http/ftp/webdav access to the same node information etc. The hidden price you
pay is that Zope is big and many users will have other tools which can provide
these facilities also.

So, my thinking is that we can abstract the basic idea (alternative ways of
storing and retrieving node information) into Leo and then let the magic really
happen in the concrete implementation stage.

What does this mean? Well, we could change Leo so that whenever it goes to retrieve
Headline or Body it goes to a Node Server object to do that. The Node Server
object uses whatever method it wants to retrieve or set the information. The
Node server would also be responsible for telling Leo what child nodes an object
has and whether they are clones or not.

The cool part is that we could implement different kinds of Node server to talk
to different back-ends. These can then be thought of as drivers. So we might
have,

- a file system driver where all information is stored in files and directories
- a database driver where the DB stores all information
- an ftp driver
- a Zope driver
- the default Leo driver

People could write a driver to their own back end storage system. 

What is the advantage of this?

Well, the magic really happens in the back-end. If you choose a back end which
supports versioning, security, concurrent working, web access, etc etc then
Leo now supports them. If you choose a back-end which supports dynamic mark-up
or some other fancy stuff then Leo supports it. The key is that Leo doesn't
need to bind itself to any one system to achieve this - the end user can install
the relevant driver, configure the back-end and just go with it.

Paul
</t>
<t tx="ekr.20031218072017.419">Ok, I'll have a bash in a rough order or when things occurred...


1. Everything is web based. I had the same problem you did. I ran the
thing and said, "ok, so what did it do". Others have pointed you in the
right direction now with visiting http://localhost:8080 and
http://localhost:8080/manage to view the site and mange it respectively.

If you are running WinNT, 2000 or XP you can also run Zope as a service,
which is much more convenient as you don't need the console window open
all the time.


2. Everything in Zope is an object. Ok, you'll see this a lot. The best
thing to do is think "wow, cool" and then forget it again as you
probably wont really see how this helps at all until you get much deeper
into Zope. 


3. DTML allows you to construct web pages by piecing together bits much
like writing a program from functions. In fact you will find DTML is a
lot like tangling Leo's @root nodes. Here's a bit...

&lt;!-- start html --&gt;

&lt;h&gt;DTML allows you to assemble web pages much like Leo tangles
documents&lt;/h&gt;

&lt;p&gt;For instance, have a look at how this page is constructed&lt;/p&gt;

&lt;dtml-var first_bit&gt;
&lt;dtml-var second_bit&gt;
&lt;dtml-var third_bit&gt;

&lt;!-- end html --&gt;

The &lt;dtml-var name&gt; bit is like a &lt;&lt; name &gt;&gt; directive. It effectively
inserts the object (could be HTML, an image or something more complex)
in the current page. 

To see this snippet in action you can visit my server at
http://24.243.129.68:8080/members/sandbox/index_html

To see the code, visit http://24.243.129.68:8080/members/sandbox/manage
(username=edream, pwd=leo) and then click on the index_html to see the
main DTML. Feel free to mess around in here but please don't publish the
IP address as my ISP doesn't allow servers!


4. There is a lot of power in Zope products. Try going to www.zope.org
and seeing what is available. As an example I put a Wiki in the sandbox
area http://24.243.129.68:8080/members/sandbox/edswiki


5. If you are looking for a good book to begin with then steer clear of
"The Zope Book"! If you don't mind paying then "The book of Zope" is a
much better introduction. When you have read this then "The Zope Book"
will make some sense but really I found this book tremendously hard to
get through.


6. Web standards are very cool! Zope supports FTP. Point your favourite
FTP tool to,

ftp://24.243.129.68:8021/members/sandbox/

Or try using WebDav by creating a network place pointing to

http://24.243.129.68:8080/members/sandbox

You can then use windows explorer or an ftp tool to browse your objects.


7. Everything is an object! I can't do justice to the concept of
Acquisition here but by the time you have messed around with Zope a bit
you should start to see how acquisition starts to make things really
work like classes in Python. 


I realize this isn't very coherent - if I get a spare moment this
weekend I'll knock up a quick demo showing Leo interacting with Zope.

Regards,

Paul
</t>
<t tx="ekr.20031218072017.420">Open Discussion
https://sourceforge.net/forum/message.php?msg_id=2016634
By: jasonic

I have been thinking about LeoZopeWiki integration. I am a recovering Zope addict
[1999-2001] :-)  I believe Zope offers a very valuable client and server for
Leo.

I think Ed higlighted the distinction of collboration vs. sharing. So consdering
that re:  Leo and CVS , Leo and Zope, Leo and wikis, I had another idea this
morning..

LEO+JABBER

Jabber is an open XML-based  instant messaging and *presence* system. Although
Jabber is typically used for IM chat, its core designers have a much bigger
vision in mind.

Jabber Software Foundation
http://www.jabber.org/
O'Reilly Book
http://www.oreilly.com/catalog/jabber/
Python Jabber library
http://jabberpy.sourceforge.net/

CVS etc all depend on runing diff on posted static files which are checked in
or out. Clearly valuable, and good for __sharing__ but not so suitable as the
communication paradigm needed for collboration.

Wikis and Zope all suffer from problem of versioning and the time delay and
lack of timely communications to their cobtributors. There is no 'shared state'
or persistence in the collaboration beyond their own files or objectdatabases.

For example if two people want to edit a wiki or Zope site, they have an imeedaiet
problem of knowing whether or not the someone else is working one it already.

Score:
Sharing 1
Collaboration 0

Two  or more people wanting to edit a common project based on Leo have the same
dilemma. They can check the leo file into a wiki, Zope or CVS, but they still
don't have direct communication at teh content level.

score:
Sharing 1
Collaboration 0

PROPOSAL: LeoJabber
1. Integrate a Jabber client into Leo 
2. Add special Leo module to jabberd [Jabber's server daemon]

Leo-based developers could work in direct communication with each other allowing
them to add, edit and comment nodes in a shared le-space, local or remote. Static
publishing via upload/import etc all still apply.

LeoJabber would mean subscribing developers could immediately be aware of changes
and then apply whatever strategy is appropriate for handling them, such as:
 
a. autoUpdate()
b. makeNewNode()
c. runDiffFunctions()
d. notifyPartners()
e. notifyPublic()
etc..

Jabber via its presencing mechanism offers real-time and just-in time communcations.
If you are logged out, then mesages are queued.

An open Jabber message session is actually one long piece of XML data passed
over an XMLSocket :-) Sounds like a great fit for Leo

- All Jabber configs are XML.
- Good smart open source community.
- Similar open embracing philsophy as Leo
- Jabber connects diverse messaging systems., MSN, AOL etc [Most are
close/proprietary, though the trend is toward greater openness and connectivity]
- Many Jabber clients already. There is even one written in Flash so that any
webpage can participate.

Embedding Jabber in Leo would allow 'discussion' threads to  be integrated.
Developers need to bounce idea and notes around just as this forum does. But
often they need to be more provate or more focused on project specifics.
WORKFLOW 
It is important to know  which code is uptodate, but arguably, even *more* important
is to know which people and what discussions are uptodate. And if not, what
their status is. The larger, longer the more global the develpoment office/project,
the more this is true.

IM [instant messaging] are popular largely becuae they offer direct communication
with status feedback to crucial people's workflow:
"off-line", "on-line", "back-soon", "later" etc

Jabber extends this idea to create a platform for any presence application.
That is its long term-goal.

So in a Leo deevlopment project, that presence might apply to adding status
mesages such as
"making changes" "new version" "debugging" "review only" "major re-write"

or perhaps status/presence woudl be used for much lower level Leo-specific
purposes.

"new node"
"cloned to .."
"@file imported"
"version uploaded"
etc

I am not suggesting that Leo forget CVS or file upload storage. But I think
Jabber may truly provide the Missing Link, literally for Leo collaboration.

Jabber Software Foundation
http://www.jabber.org/
O'Reilly Book
http://www.oreilly.com/catalog/jabber/
Python Jabber library
http://jabberpy.sourceforge.net/

hope this makes sense
Jason
</t>
<t tx="ekr.20031218072017.421"></t>
<t tx="ekr.20031218072017.422"></t>
<t tx="ekr.20031218072017.423"></t>
<t tx="ekr.20031218072017.424">leo.py reads and writes exactly like LeoCB</t>
<t tx="ekr.20031218072017.425">Amazing.  I wrote some dummy code last night, read up on indices this morning, and got everything to work in a couple of hours. The result is very fast: no optimization is needed for Leo. I love Tkinter!

Added c.recolor and tree.recolor routines.  This hooks should be called whenever the body text changes.  Apparently there is no "OnTextChanged" event in Tk.</t>
<t tx="ekr.20031218072017.426"></t>
<t tx="ekr.20031218072017.427"></t>
<t tx="ekr.20031218072017.428">This marked my complete frustration with wxLeo and wxPython, and the real beginning of the work on leo.py.</t>
<t tx="ekr.20031218072017.429"></t>
<t tx="ekr.20031218072017.430">I am totally in love with Python.  Everything is so much easier:  Automatic debugging, no declarations, no types, no compilation. Great data structures. Even without single stepping the debugging is easy.

All major aspects of c2py are now complete.</t>
<t tx="ekr.20031218072017.431">I am not sure exactly when this happened.  The details apparently have been lost.  There was a time when I was experimenting with Python and wxPython, and a time when I was working on wxWindows version of Leo.</t>
<t tx="ekr.20031218072017.432"></t>
<t tx="ekr.20031218072017.433">Read and respond to this message at: 
http://sourceforge.net/forum/message.php?msg_id=1684478
By: ktenney

Promo idea;
Several people arguing about the correct answer to 'What is Leo'
A production coder talks about the efficiency advantages.

An academic talks about the increased understanding of the code via literate
concepts.

A documentation writer talks about the organizational benefits of outlines.

A hacker dood talks about how easy it is to write Python to make it do kewel
things.

A system administrator talks about a way to centralize access to config files,
and keep notes on them.

etc.
</t>
<t tx="ekr.20031218072017.434">@ignore
@language python
@color</t>
<t tx="ekr.20031218072017.435">The following batch files use @rawfile so that no extraneous lines get generated.

The go.bat batch loads leo.py and opens LeoPy.leo by default, so to work on leo.py I just open a Windows console window and type go.  Add LeoPy folder to your PATH environment variable, or put go.bat in c:\Windows.

The sdist.bat batch file creates a source distribution using distutils and setup.py.

The bdist.bat batch file creates a binary distribution.  It does not work yet.

The manifest.in file contains a list of files to be included in the distutils distribution.</t>
<t tx="ekr.20031218072017.436">rem Create binary distribution using information in setup.py
rem cd c:\prog\LeoPy
c:\python22\python setup.py bdist --formats=wininst</t>
<t tx="ekr.20031218072017.437">cd c:\prog\LeoCVS\leo
c:\python22\python openLeo.py</t>
<t tx="ekr.20031218072017.438">rem print help message re setup.py
c:\python22\python setup.py sdist --help</t>
<t tx="ekr.20031218072017.439">rem creates source distribution using setup.py
rem cd c:\prog\LeoPy
rem --formats=gztar,zip
c:\python22\python setup.py sdist --force-manifest</t>
<t tx="ekr.20031218072017.440"></t>
<t tx="ekr.20031218072017.441"></t>
<t tx="ekr.20031218072017.442">@nocolor

I had completely misunderstood __del__ methods!  __del__ methods _disable_ the gc's ability to collect circular garbage (!!) and so __del__ methods will _never_ be called (!!)

Note: the tree.recycleBindings ivar _should_ be true.  Indeed, tree.deleteBindings is called by various redraw routines, and recycling those bindings is very important.

Also, there is no need to "help" the gc:

&gt; My app has unlimited undo.  As a result, most "user" data never truly
&gt; gets deleted: the undo stack keeps references to all such data alive
&gt; "forever". 

&gt; I am wondering whether it would be a good idea to put dummy __del__
&gt; methods in the user data classes.  Would this help the gc by telling
&gt; the gc what not to look at?

Remember the gc is generational. That means that any data that has survived 
a garbage collection is automatically excluded from most other garbage 
collections, so most of the time the grabage collector will ignore your 
user data objects anyway.

Or to put it another way, the garbage collector already knows not to look 
at your objects without your help.


3.3.1 Basic customization 

__del__(self)

[snip]
Circular references which are garbage are detected when the option cycle detector is enabled (it's on by default), but can only be cleaned up if there are no Python-level __del__() methods involved. Refer to the documentation for the gc module for more information about how __del__() methods are handled by the cycle detector, particularly the description of the garbage value.</t>
<t tx="ekr.20031218072017.443">if 0: # __del__ methods interfere with the garbage collector.

	def __del__ (self):
		pass
</t>
<t tx="ekr.20031218072017.444">if 0: # __del__ methods interfere with the garbage collector.

	def __del__ (self):
		pass
</t>
<t tx="ekr.20031218072017.445">if 0: # __del__ methods interfere with the garbage collector.

	def __del__ (self):
		pass
</t>
<t tx="ekr.20031218072017.446">if 0: # __del__ methods interfere with the garbage collector.

	def __del__ (self):
		pass
</t>
<t tx="ekr.20031218072017.447">if 0: # __del__ methods interfere with the garbage collector.

	def __del__ (self):
		pass
</t>
<t tx="ekr.20031218072017.448">@ The garbage collector should be able to reclaim garbage containing cycles, and in practice it is difficult to break all links. Having destroy routines is a pragmatic approach.</t>
<t tx="ekr.20031218072017.449">def destroy (self):
	
	"""Clear all links from an atFile object to other objects."""
	
	# print "atFile.destroy" # Don't use trace.
	
	self.outputFile = None
	self.root = None</t>
<t tx="ekr.20031218072017.450">def destroy (self):
	
	"""Clear all links from a commander to other objects."""

	# print "c.destroy" # Don't use trace.
	
	# Clear links to subcommanders.
	self.atFileCommands = None
	self.fileCommands = None
	self.importCommands = None
	self.tangleCommands = None
	self.undoer = None

	# Clear others ivars.
	self.beadList = None
	self.body = None
	self.canvas = None
	self.frame = None
	self.hookFunction = None
	self.log = None
	self.tree = None
	self.visitedList = None
</t>
<t tx="ekr.20031218072017.451">def destroy (self):
	
	"""Clear all links from a color object to other objects."""
	
	# print "color.destroy" # Don't use trace.

	self.v = None
	self.body = None
	config = None
	self.state_dict = None</t>
<t tx="ekr.20031218072017.452">def destroy (self):
	
	"""Clear all links from a frame to other objects."""

	# print "frame.destroy" # Don't use trace.
	
	# Clear links to panels.
	self.colorPanel = None
	self.comparePanel = None
	self.fontPanel = None 
	self.prefsPanel = None
	
	# Clear other ivars.
	self.activeFrame = None
	self.body = None
	self.bodyBar = None
	self.canvas = None
	self.commands = None
	self.draggedItem = None
	self.f1 = self.f2 = None
	self.hwnd = None
	self.icon = None
	self.iconFrame = None
	self.log = None
	self.logBar = None
	self.logColorTags = None
	self.menus = None
	self.menuShortcuts = None
	self.mFileName = None
	self.outerFrame = None
	self.recentFiles = None
	self.splitter1 = self.splitter2 = None
	self.statusFrame  = None
	self.statusLabel = None
	self.statusText = None
	self.title = None
	self.top = None
	self.tree = None
	self.treeBar = None</t>
<t tx="ekr.20031218072017.453">def destroy (self):
	
	# print "import.destroy" # Don't use trace.
	
	self.commands = None
	self.web_st = None</t>
<t tx="ekr.20031218072017.454">def destroy (self):
	
	"""Clear all links from a fileCommands object to other objects."""
	
	# print "fileCommands.destroy" # Don't use trace.
	
	self.a = None
	self.commands = None
	self.copiedTree = None
	self.fileBuffer = None
	self.frame = None
	self.outputFile = None
	self.tnodesDict = None
	self.topVnode = None</t>
<t tx="ekr.20031218072017.455">def destroy (self):
	
	"""Clear all links from a tnode to other objects."""
	
	# print "t.destroy"

	self.joinList = None
</t>
<t tx="ekr.20031218072017.456">def destroy (self):
	
	"""Clear all links from a tangle object to other objects."""
	
	# print "tangle.destroy" # Don't use trace.
	
	self.code = None
	self.doc = None
	self.def_stack = None
	self.file_name = None
	self.header = None
	self.header_name = None
	self.head_root = None
	self.output_file = None
	self.root = None
	self.root_list = None
	self.section_name = None
	self.section_stack = None
	self.tst = None
	self.ust = None
	self.v = None
</t>
<t tx="ekr.20031218072017.457">def destroy (self):
	
	"""Clear all links from a tree to other objects."""

	# print "tree.destroy" # Don't use trace.

	# Delete all references to Tk widgets.
	self.deleteBindings()
	self.canvas.delete("all")
	self.deleteWidgets()

	# Clear all ivars.
	self.bindings = None
	self.colorizer = None
	self.commands = None
	self.canvas = None
	self.currentVnode = None
	self.drag_id = None
	self.editVnode = None
	self.edit_text_dict = None
	self.font = None
	self.fontName = None
	self.iconimages = None
	self.icon_id_dict = None
	self.popupMenu = None
	self.rootVnode = None
	self.tagBindings = None
	self.topVnode = None
	self.widgets = None
</t>
<t tx="ekr.20031218072017.458">def destroy (self):
	
	"""Clear all links from an undo object to other objects."""
	
	# print "undo.destroy" # Don't use trace.
	
	self.beads = None
	self.commands = None
	self.v = None
	
	for ivar in optionalIvars:
		exec('self.%s = None' % ivar)
</t>
<t tx="ekr.20031218072017.459">def destroy (self):
	
	"""Clear all links from a vnode to other objects."""

	# print "v.destroy" # Don't use trace.

	self.commands = None
	self.t = None
	self.mParent = self.mFirstChild = self.mNext = self.mBack = None
</t>
<t tx="ekr.20031218072017.460"># Using a dict here is essential for adequate speed.
vList = [] ; tDict = {}

v = frame.commands.rootVnode()
while v:
	vList.append(v)
	if v.t:
		key = id(v.t)
		if not tDict.has_key(key):
			tDict[key] = v.t
	v = v.threadNext()
	
for key in tDict.keys():
	tDict[key].destroy()

for v in vList:
	v.destroy()

vList = [] ; tList = [] # Remove these references immediately.</t>
<t tx="ekr.20031218072017.461">def OnInsertGraphicFile(self,event=None):
	
	c = self.commands
	
	filetypes = [("Gif", "*.gif")]
		# Only Gif images are allowed.
		#("Bitmap", "*.bmp"),
		#("Icon", "*.ico"),
	
	fileName = tkFileDialog.askopenfilename(
		title="Insert Graphic",
		filetypes=filetypes,
		defaultextension=".gif")

	if fileName and len(fileName) &gt; 0 and os.path.exists(fileName):
		try:
			fileName = os.path.join(app().loadDir,fileName)
			fileName = os.path.normpath(fileName)
			image = Tkinter.PhotoImage(file=fileName)
		except:
			es("Exception loading: " + fileName)
			es_exception()
			image = None
		if image:
			# print image.height()
			index = c.frame.body.index("insert")
			if 1: # same behavior
				bg = c.frame.body.cget("background")
				w = Tkinter.Label(c.frame.body,image=image,bd=0,bg=bg)
				c.frame.body.window_create(index,window=w,align="baseline")
			else:
				c.frame.body.image_create(index,image=image,align="baseline")
			# c.frame.body.dump(index) # The image isn't drawn unless we take an exception!
</t>
<t tx="ekr.20031218072017.462"></t>
<t tx="ekr.20031218072017.463"></t>
<t tx="ekr.20031218072017.464">def show_cwd (event=None):

	import os

	es("cwd: " + os.getcwd())</t>
<t tx="ekr.20031218072017.465">def importPythonFiles (event=None):

	import leoImport,os

	leoImport.importFiles(os.getcwd(),".py")</t>
<t tx="ekr.20031218072017.466">def importCwebFiles (event=None):

	import leoImport,os

	leoImport.importFiles(os.getcwd(),".py")</t>
<t tx="ekr.20031218072017.467"></t>
<t tx="ekr.20031218072017.468">import distributeLeo
reload(distributeLeo)

# path = r"c:\prog\leoCVS\leo"
ver = "3.11b1"
d = distributeLeo.distributeLeo(ver=ver)
d.create()</t>
<t tx="ekr.20031218072017.469">@first #! /usr/bin/env python
@color
@language python
@ignore

# Experimental distribution scripts

from leoGlobals import *
import os,sys

class distributeLeo:
	@others</t>
<t tx="ekr.20031218072017.470">def __init__ (self,ver,path=r"C:\prog\leoCVS\leo"):

	self.ver = ver
	self.leoDir=path
	self.distDir = os.path.join(path,"dist")
	self.iconsDir = os.path.join(path,"Icons")
	self.fileList = []
	self.manifestFiles = []
	self.iconsList = []
	self.folderName = None
	self.zipFileName = None
	self.tarFileName = None
	self.extraFiles = (
		"__init__.py",
		"LeoPy.leo","LeoDocs.leo",
		"leoConfig.leo","leoConfig.txt",
		"c2py.py","disStats.py","openLeo.py",
		"tangle_done.py", "untangle_done.py",
		"README.TXT","INSTALL.TXT",
		"LICENSE.TXT","PKG-INFO.TXT",
		"leo.rc","leo.res",
		"manifest.in" )

	self.wildcardFiles = ( "leo*.py","Icons/*.*" )
</t>
<t tx="ekr.20031218072017.471">def check (self):

	if 0:
		print ; print "fileList:" ; print
		for f in self.fileList:
			print f
			
	if 1:
		print ; print "iconsList:" ; print
		for f in self.iconsList:
			print f</t>
<t tx="ekr.20031218072017.472">def copyFile (self,name,fromDir,toDir):

	try:
		fromFile = os.path.join(fromDir,name)
		toFile = os.path.join(toDir,name)
		f = open(fromFile)
	except:
		# print "not found:", fromFile
		return
	
	try:
		data = f.read()
		f.close
		f = open(toFile,"w")
		f.write(data)
		f.close()
	except:
		es_exception()</t>
<t tx="ekr.20031218072017.473">def create (self):

	if 1: # Use distutils to do the work.  This doesn't work with gzip or tar.
		os.system(r"cd C:\prog\leoCVS\leo")
		os.system("python setup.py sdist --formats=zip")

	else: # Problems creating zip file...
		self.createFileLists()
		self.check()
		# self.createDistributionFolders()
		self.createZipFile()
		self.createTarGZFile()</t>
<t tx="ekr.20031218072017.474">def createDir (self, name):

	print "creating", name
	os.mkdir(name)
</t>
<t tx="ekr.20031218072017.475">def createDistributionFolders (self):

	self.folderName = os.path.join(self.distDir,"leo-" + self.ver)
	self.iconsFolderName = os.path.join(self.folderName,"Icons")
	
	self.removeDir(self.iconsFolderName)
	self.removeDir(self.folderName)
	self.createDir(self.folderName)
	self.createDir(self.iconsFolderName)
	
	for f in self.fileList:
		self.copyFile(f,self.leoDir,self.folderName)
		
	for f in self.iconsList:
		self.copyFile(f,self.iconsDir,self.iconsFolderName)
</t>
<t tx="ekr.20031218072017.476">def createFileLists (self):

	# Generate the list of modules.
	files = os.listdir(os.getcwd())
	self.fileList = []
	for f in files:
		head,tail = os.path.split(f)
		root,ext = os.path.splitext(tail)
		if tail[0:3]=="leo" and ext==".py":
			self.fileList.append(root+ext)
			
	for f in self.extraFiles:
		self.fileList.append(f)
			
	self.fileList.sort()
	
	self.iconsList = []
	for f in os.listdir(self.iconsDir):
		head,tail = os.path.split(f)
		root,ext = os.path.splitext(tail)
		if ext.lower() in (".gif","bmp","ico"):
			self.iconsList.append(tail)
	self.iconsList.sort()
			
	self.manifestFiles.extend(self.fileList)
	self.manifestFiles.extend(self.wildcardFiles)
	self.manifestFiles.sort()</t>
<t tx="ekr.20031218072017.477">def createZipFile (self):

	self.zipFileName = os.path.join(
		self.distDir,"leo-" + self.ver + ".zip")

	if os.path.exists(self.zipFileName):
		print "removing: ", self.zipFileName
		os.remove(self.zipFileName)
		
	print "creating", self.zipFileName
	try:
		import zipfile
		z = zipfile.ZipFile(self.zipFileName,"w",zipfile.ZIP_DEFLATED)
		for f in self.fileList:
			f = os.path.join(self.leoDir,f)
			if os.path.isfile(f):
				#print "zipping:",f
				z.write(f,"leo/"+f)
		for f in self.iconsList:
			f = os.path.join(self.iconsDir,f)
			if os.path.isfile(f):
				#print "zipping:",f
				z.write(f,"leo/Icons/"+f)
		z.printdir() 
		z.close()
		print "closed:",self.zipFileName
	except:
		es_exception()</t>
<t tx="ekr.20031218072017.478">def createTarGZFile (self):

	pass</t>
<t tx="ekr.20031218072017.479">def removeDir (self,dir):

	if os.path.exists(dir):
		# Remove all files in folder.
		print "removing: ", dir
		for f in os.listdir(dir):
			os.remove(os.path.join(dir,f))
		os.rmdir(dir)
</t>
<t tx="ekr.20031218072017.480">if 0: # This works, and doesn't seem convenient for Leo's importers.
	try:
		import parser
		import pprint
		path = r"c:\prog\test\importIndentTest.py"
		f = open(path)
		s = f.read()
		f.close()
		ast = parser.suite(s)
		tup = ast.totuple()
		print `ast`
		pprint.pprint(tup)
	except:
		import traceback
		traceback.print_exc()</t>
<t tx="ekr.20031218072017.481"></t>
<t tx="ekr.20031218072017.482">head,lines,tail,oldSel,oldYview = self.getBodyLines()
result = []

# If active selection, then don't attempt a reformat.
selStart, selEnd = c.frame.body.getTextSelection()
if selStart != selEnd:
	es("Text selection inhibits Reformat Paragraph",color="blue")
	return

# Find the paragraph range.
data = bound_paragraph(c)
if data:
	start, end, endsWithNL = data
	firstLine = int(float(start)) - 1 # subtract 1 to get on zero basis
	lastLine = int(float(end)) - 1
else: return

# Compute the leading whitespace.
indents = [0,0] ; leading_ws = ["",""] # Bug fix: 11/16/02
for i in (0,1):
	if firstLine + i &lt; len(lines):
		# Use the original, non-optimized leading whitespace.
		leading_ws[i] = ws = get_leading_ws(lines[firstLine+i])
		indents[i] = computeWidth(ws,tabWidth)
indents[1] = max(indents)
# 11/17/02: Bug fix suggested by D.T.Hein.
if 1 == (lastLine - firstLine):
	leading_ws[1] = leading_ws[0]

# Put the leading unchanged lines.
for i in range(0,firstLine):
	result.append(lines[i])
	
# Wrap the lines, decreasing the page width by indent.
wrapped_lines = wrap_lines(
	lines[firstLine:lastLine],
	pageWidth-indents[1],
	pageWidth-indents[0])
lineCount = len(wrapped_lines)
	
i = 0
for line in wrapped_lines:
	result.append(leading_ws[i] + line)
	if i &lt; 1: i += 1

# Put the trailing unchanged lines.
for i in range(lastLine,len(lines)):
	result.append(lines[i])

# Replace the text if it changed.
for i in range(firstLine,lineCount+firstLine):
	if i &gt;= lastLine or lines[i] != result[i]:
		result = string.join(result,'\n')
		c.updateBodyPane(head,result,tail,"Reformat Paragraph",oldSel,oldYview) # Handles undo
		break

&lt;&lt; Set the new insert at the start of the next paragraph &gt;&gt;

# Make sure we can see the new cursor.
c.frame.body.makeInsertPointVisible()
</t>
<t tx="ekr.20031218072017.483">lastLine = firstLine + lineCount
if not endsWithNL:
	insPos = str(lastLine) + ".0lineend"
else:
	endPos = c.bodyCtrl.index("end")
	endLine = int(float(endPos))
	lastLine += 1
	insPos = str(lastLine) + ".0"
	while lastLine &lt; endLine:
		s = c.bodyCtrl.get(insPos,insPos + "lineend")
		s = toUnicode(s,app.tkEncoding) # 9/28/03
		if s and (0 &lt; len(s)) and not s.isspace():
			break;
		lastLine += 1
		insPos = str(lastLine) + ".0"
c.frame.body.setTextSelection(insPos,insPos)</t>
<t tx="ekr.20031218072017.484"># if selection was made from back to front, then i and j are reversed
if i and j and i != j:
	# Convert all lines containing any part of the selection.
	if c.bodyCtrl.compare(i,"&gt;",j): i,j = j,i
	i = c.bodyCtrl.index(i + "linestart")
	# 12-SEP-2002 DTHEIN: don't include following line in selection
	endSel = j # position of last character of selection
	trailingNewline = ""
	line,col = j.split(".")
	if col == "0":  # DTHEIN: selection ends at start of next line
		endSel = c.bodyCtrl.index(j + "- 1 chars")
		trailingNewline = '\n'
	else: # Selection ends in the midst of a line
		endSel = c.bodyCtrl.index(j + "lineend")
		j = endSel
	head = c.bodyCtrl.get("1.0",i)
	head = toUnicode(head,app.tkEncoding) # 9/28/03
	tail = c.bodyCtrl.get(j,"end")
	tail = toUnicode(tail,app.tkEncoding) # 9/28/03
else: # Convert the entire text.
	i = "1.0" ; j = "end" ; head = tail = ""
	endSel = c.bodyCtrl.index(j + "- 1 chars") # 14-SEP-2002 DTHEIN
	trailingNewline = ""
if i == endSel:
	head = tail = None ; lines = []
else:
	lines = c.bodyCtrl.get(i,endSel)
	lines = toUnicode(lines,app.tkEncoding) # 9/28/03
	lines = string.split(lines, '\n')
	lines[-1] += trailingNewline # DTHEIN: add newline if needed</t>
<t tx="ekr.20031218072017.485">c.bodyCtrl.delete("1.0","end")
# The caller must do rstrip.head if appropriate.
if head and len(head) &gt; 0:
	c.bodyCtrl.insert("end",head)
	start = c.bodyCtrl.index("end-1c")
else: start = "1.0"
if middle and len(middle) &gt; 0:
	c.bodyCtrl.insert("end",middle)
	end = c.bodyCtrl.index("end-1c")
else: end = start
if tail and len(tail) &gt; 0:
	tail = string.rstrip(tail)
if tail and len(tail) &gt; 0:
	c.bodyCtrl.insert("end",tail)</t>
<t tx="ekr.20031218072017.486">def bound_paragraph(c):

	"""Find the bounds of the text paragraph that contains the current cursor position.

Returns:
	None if the cursor is on a whitespace line or a delimeter line.
	Otherwise: (start,end,endsWithNL,wsFirst,wsSecond)

start: the paragraph starting position,
end: the paragraph ending position,
endsWithNL: true if the paragraph ends with a newline"""

	t = c.bodyCtrl
	x=t.index("insert")
	
	# Return if the selected line is all whitespace or a Leo directive.
	s = t.get(x+"linestart",x+"lineend")
	s = toUnicode(s,app.tkEncoding) # 9/28/03
	if not s or s.isspace() or s[0] == '@':
		return None 
	
	# Point start and end at the start and end of the selected line.
	start = t.index(x+"linestart")
	tmpLine = int(float(start))
	end = str(tmpLine + 1) + ".0"
	
	# EKR: This is needlessly complex.
	# It would be much easier to use a list of lines,
	# rather than asking TK to do so much work.
	
	# Set start to the start of the paragraph.
	while (tmpLine &gt; 1):
		tmpLine -= 1
		tmp = str(tmpLine) + ".0"
		s = t.get(tmp,tmp+"lineend")
		if len(s)==0 or s.isspace() or s[0] == '@':
			break
		start = tmp
	
	# Set end to the end of the paragraph.
	tmpLine = int(float(end))
	bodyEnd = t.index("end")
	
	while end != bodyEnd:
		end = str(tmpLine) + ".0"
		s = t.get(end,end+"lineend")
		s = toUnicode(s,app.tkEncoding) # 9/28/03
		if not s or s.isspace() or s[0] == '@':
			break
		tmpLine += 1
	
	# do we insert a trailing NL?
	endsWithNL = len(t.get(end))
	
	return start, end, endsWithNL
</t>
<t tx="ekr.20031218072017.487"># These routines are too dependent on indicess</t>
<t tx="ekr.20031218072017.488">def getCharAtIndex (self,index):

	"""Return body text at index converted to unicode."""
	
	s = self.bodyCtrl.get(index)
	if s is None:
		return u""
	else:
		return toUnicode(s,app.tkEncoding)
</t>
<t tx="ekr.20031218072017.489">def getTextRange (self,start,end):
	
	"""Return all the body text, converted to unicode."""
	
	start = self.tkIndex(start)
	end   = self.tkIndex(end)

	s = self.bodyCtrl.get(start,end)
	if s is None:
		return u""
	else:
		return toUnicode(s,app.tkEncoding)
</t>
<t tx="ekr.20031218072017.490">def getBodySelection (self):

	c = self
	i, j = c.frame.body.getTextSelection()
	if i and j and c.bodyCtrl.compare(i,"&gt;",j):
		i,j = j,i
	return i, j</t>
<t tx="ekr.20031218072017.491">if 0: # no longer used

	def getSelectedText (t):
		
		"""Return the selected text of Tk.Text t converted to unicode."""
	
		start, end = getTextSelection(t)
		if start and end and start != end:
			s = t.get(start,end)
			if s is None: s = u""
			return toUnicode(s,app.tkEncoding)
		else:
			return None</t>
<t tx="ekr.20031218072017.492"></t>
<t tx="ekr.20031218072017.493">def compareIndices (self,index1,compareString,index2):
	
	index1 = self.tkIndex(index1)
	index2 = self.tkIndex(index2)
	return self.bodyCtrl.compare(index1,compareString,index2)</t>
<t tx="ekr.20031218072017.494">def convertXYToIndex (self,x,y):
	
	"""Returns the Tk index corresponding to position x,y coordinates on the screen."""
	
	return self.bodyCtrl.index("@%d,%d" % (x,y))</t>
<t tx="ekr.20031218072017.495">def getBeforeInsertionPoint (self):
	
	return self.bodyCtrl.index("insert-1c")

def getInsertionPoint (self):
	
	return self.bodyCtrl.index("insert")</t>
<t tx="ekr.20031218072017.496">def getSelectionRange (self):
	
	sel = self.bodyCtrl.tag_ranges("sel")
	return self.tkIndex(sel)


def setSelectionRange (self,start,end):
	
	start = self.tkIndex(start)
	end   = self.tkIndex(end)
	
	if start and end:
		
		t = self.bodyCtrl

		if t.compare(start, "&gt;", end):
			start,end = end,start
			
		t.tag_remove("sel","1.0",start)
		t.tag_add("sel",start,end)
		t.tag_remove("sel",end,"end")
		t.mark_set("insert",end)</t>
<t tx="ekr.20031218072017.497">def moveIndexNChars (self,index,n):
	
	return self.moveIndex (index,n,"chars")
	
def moveIndexNLines (self,index,n):
	
	return self.moveIndex (index,n,"lines")
	
def moveIndex (index,n,tag):
	
	t = self.bodyCtrl
	if n &lt; 0:
		return t.index(index + " -%d %s" % (n,tag))
	elif n &gt; 0:
		return t.index(index + " +%d %s" % (n,tag))
	else:
		return t.index(index)</t>
<t tx="ekr.20031218072017.498">def moveIndexToLineStart (self,index):
	
	return self.bodyCtrl.index("%s +linestart" % index)
	
def moveIndexToLineEnd (self,index):
	
	return self.bodyCtrl.index("%s -linestart" % index)
	
def moveIndexToWordStart (self,index):
	
	return self.bodyCtrl.index("%s +wordstart" % index)
	
def moveIndexToWordEnd (self,index):
	
	return self.bodyCtrl.index("%s +wordend" % index)</t>
<t tx="ekr.20031218072017.499">def insertAtEnd (self,s):
	
	self.bodyCtrl.insert("end",tail)
	
def insertAtInsertionPoint (self,s):
	
	self.bodyCtrl.insert("insert",tail)
	
def insertAtStart (self,s):
	
	self.bodyCtrl.insert("1.0",tail)

def replaceSelectedText (self,s):
	
	sel = self.bodyCtrl.tag_ranges("sel")
	if len(sel) == 2:
		start,end = sel
		self.bodyCtrl.delete(start,end)
		self.bodyCtrl.insert(start,s)
	else:
		start = self.bodyCtrl.index("insert")
		self.bodyCtrl.insert(start,s)
</t>
<t tx="ekr.20031218072017.500">@ These callbacks are vnode methods so we can pass the vnode back to the tree class.
</t>
<t tx="ekr.20031218072017.501"># Called when the box is clicked.

def OnBoxClick(self,event=None):

	try:
		v = self ; c = v.commands
		if not doHook("boxclick1",c=c,v=v,event=event):
			self.commands.frame.OnBoxClick(v)
		doHook("boxclick2",c=c,v=v,event=event)
	except:
		es_event_exception("boxclick")</t>
<t tx="ekr.20031218072017.502">def OnDrag(self,event=None):
	
	# trace()
	
	try:
		v = self ; c = v.commands
		if c.frame.dragging():
			if not doHook("dragging1",c=c,v=v,event=event):
				c.frame.OnDrag(v,event)
			doHook("dragging2",c=c,v=v,event=event)
		else:
			if not doHook("drag1",c=c,v=v,event=event):
				c.frame.OnDrag(v,event)
			doHook("drag2",c=c,v=v,event=event)
	except:
		es_event_exception("drag")</t>
<t tx="ekr.20031218072017.503">def OnEndDrag(self,event=None):
	
	"""Vnode end-drag handler."""
	
	# trace()

	try:
		v = self ; c = v.commands
		# 7/10/03: Always call frame.OnEndDrag, regardless of state.
		if not doHook("enddrag1",c=c,v=v,event=event):
			c.frame.OnEndDrag(v,event)
		doHook("enddrag2",c=c,v=v,event=event)
	except:
		es_event_exception("enddrag")</t>
<t tx="ekr.20031218072017.504">def OnHeadlineClick(self,event=None):
	try:
		v = self ; c = v.commands
		if not doHook("headclick1",c=c,v=v,event=event):
			c.frame.OnActivateHeadline(v)
		doHook("headclick2",c=c,v=v,event=event)
	except:
		es_event_exception("headclick")
	
def OnHeadlineRightClick(self,event=None):
	try:
		v = self ; c = v.commands
		if not doHook("headrclick1",c=c,v=v,event=event):
			c.frame.OnActivateHeadline(v)
			c.frame.OnPopup(self,event)
		doHook("headrclick2",c=c,v=v,event=event)
	except:
		es_event_exception("headrclick")</t>
<t tx="ekr.20031218072017.505">def OnHeadlineKey (self,event=None):

	try:
		v = self ; c = v.commands
		if not doHook("headkey1",c=c,v=v,event=event):
			c.frame.OnHeadlineKey(v,event)
		doHook("headkey2",c=c,v=v,event=event)
	except:
		es_event_exception("headkey")</t>
<t tx="ekr.20031218072017.506">def OnHyperLinkControlClick (self,event):

	try:
		v = self ; c = v.commands
		if not doHook("hypercclick1",c=c,v=v,event=event):
			c.beginUpdate()
			c.selectVnode(v)
			c.endUpdate()
			c.frame.body.mark_set("insert","1.0")
		doHook("hypercclick2",c=c,v=v,event=event)
	except:
		es_event_exception("hypercclick")</t>
<t tx="ekr.20031218072017.507">def OnHyperLinkEnter (self,event=None):

	try:
		v = self ; c = v.commands
		if not doHook("hyperenter1",c=c,v=v,event=event):
			if 0: # This works, and isn't very useful.
				c.frame.body.tag_config(v.tagName,background="green")
		doHook("hyperenter2",c=c,v=v,event=event)
	except:
		es_event_exception("hyperenter")</t>
<t tx="ekr.20031218072017.508">def OnHyperLinkLeave (self,event=None):

	try:
		v = self ; c = v.commands
		if not doHook("hyperleave1",c=c,v=v,event=event):
			if 0: # This works, and isn't very useful.
				c.frame.body.tag_config(v.tagName,background="white")
		doHook("hyperleave2",c=c,v=v,event=event)
	except:
		es_event_exception("hyperleave")</t>
<t tx="ekr.20031218072017.509">def OnIconClick(self,event=None):
	try:
		v = self ; c = v.commands
		if not doHook("iconclick1",c=c,v=v,event=event):
			c.frame.OnIconClick(v,event)
		doHook("iconclick2",c=c,v=v,event=event)
	except:
		es_event_exception("iconclick")
	
def OnIconRightClick(self,event=None):
	try:
		v = self ; c = v.commands
		if not doHook("iconrclick1",c=c,v=v,event=event):
			c.frame.OnIconRightClick(v,event)
		doHook("iconrclick2",c=c,v=v,event=event)
	except:
		es_event_exception("iconrclick")
</t>
<t tx="ekr.20031218072017.510">def OnIconDoubleClick(self,event=None):

	try:
		v = self ; c = v.commands
		if not doHook("icondclick1",c=c,v=v,event=event):
			c.frame.OnIconDoubleClick(v,event)
		doHook("icondclick2",c=c,v=v,event=event)
	except:
		es_event_exception("icondclick")
</t>
<t tx="ekr.20031218072017.511"></t>
<t tx="ekr.20031218072017.512">def compactFileIndices (self):
	
	"""Assign a file index to all tnodes, compacting all file indices"""
	
	c = self.commands ; root = c.rootVnode()
	
	v = root
	self.maxTnodeIndex = 0
	while v: # Clear all indices.
		v.t.setFileIndex(0)
		v = v.threadNext()

	v = c.rootVnode()
	while v: # Set indices for all tnodes that will be written.
		t = v.t
		if t.hasBody() or len(v.t.joinList) &gt; 0: # Write shared tnodes even if they are empty.
			if t.fileIndex == 0:
				self.maxTnodeIndex += 1
				t.setFileIndex(self.maxTnodeIndex)
		v = v.threadNext()</t>
<t tx="ekr.20031218072017.513">def assignFileIndices (self,root=None):
	
	"""Assign a file index to all tnodes"""
	
	c=self.commands
	
	if root == None:
		root = c.rootVnode()
	v = root
	while v:
		t = v.t

		# 8/28/99.  Write shared tnodes even if they are empty.
		if t.hasBody() or len(v.t.joinList) &gt; 0:
			if t.fileIndex == 0:
				self.maxTnodeIndex += 1
				t.setFileIndex(self.maxTnodeIndex)
		else:
			t.setFileIndex(0)
			
		# if self.usingClipboard: trace(t.fileIndex)
		v = v.threadNext()
		
def compactFileIndices (self,root=None):
	self.assignFileIndices (self,root)</t>
<t tx="ekr.20031218072017.514"># None of these are used at present.  They have been replaced by setSelectionAreas.

def deleteAllText (self):

	self.bodyCtrl.delete("1.0","end")
	
def deleteTextRange (self,start,end):
		
		start = self.tkIndex(start)
		end   = self.tkIndex(end)
		self.bodyCtrl.delete(start,end)
		
def deleteLastCharacter (self):
		
		self.bodyCtrl.delete("end -1c")
	
def deleteSelectedText (self):
	
	sel = self.bodyCtrl.tag_ranges("sel")
	if len(sel) == 2:
		start,end = sel
		self.bodyCtrl.delete(start,end)</t>
<t tx="ekr.20031218072017.515"></t>
<t tx="ekr.20031218072017.516">"""A base class for Leo dialogs.  About to be removed."""

@language python

from leoGlobals import *
import leoDialog
import string,Tkinter

Tk = Tkinter

@others</t>
<t tx="ekr.20031218072017.517">class baseLeoDialog:
	"""The base class for all Leo dialogs"""
	@others
	
class leoDialog (baseLeoDialog):
	"""A base class for all Leo dialogs that may be overridden by plugins."""
	pass
</t>
<t tx="ekr.20031218072017.518">def __init__(self,title="",resizeable=true):
	
	"""Constructor for base leoDialog class."""
	
	self.answer = None # Value returned from run()
	self.resizeable = resizeable
	self.title = title
	self.modal = None
	
	self.buttonsFrame = None # Frame to hold typical dialog buttons.
	self.defaultButtonCommand = None  # Command to call when user closes the window by clicking the close box.
	self.frame = None # The outermost frame.
	self.root = None # app.root
	self.top = None # The toplevel Tk widget.
	self.focus_widget = None # The widget to get the first focus.</t>
<t tx="ekr.20031218072017.519">def cancelButton(self):
	
	"""Do default click action in cancel button."""
	
	self.answer="cancel"
	self.top.destroy()
	
def noButton(self):
	
	"""Do default click action in no button."""
	
	self.answer="no"
	self.top.destroy()
	
def okButton(self):
	
	"""Do default click action in ok button."""
	
	self.answer="ok"
	self.top.destroy()

def yesButton(self):
	
	"""Do default click action in yes button."""

	self.answer="yes"
	self.top.destroy()</t>
<t tx="ekr.20031218072017.520">def center(self):
	
	"""Center any leoDialog."""
	
	center_dialog(self.top)
</t>
<t tx="ekr.20031218072017.521">def createButtons (self,buttons):
	
	"""Create a row of buttons.
	
	buttons is a list of dictionaries containing the properties of each button."""
	
	assert(self.frame)
	self.buttonsFrame = f = Tk.Frame(self.top)
	f.pack(side="top",padx=30)

	# Buttons is a list of dictionaries, with an empty dictionary at the end if there is only one entry.
	buttonList = []
	for d in buttons:
		text = d.get("text","&lt;missing button name&gt;")
		isDefault = d.get("default",false)
		underline = d.get("underline",0)
		command = d.get("command",None)
		bd = choose(isDefault,4,2)

		b = Tk.Button(f,width=6,text=text,bd=bd,underline=underline,command=command)
		b.pack(side="left",padx=5,pady=10)
		buttonList.append(b)
		
		if isDefault and command:
			self.defaultButtonCommand = command
		
	return buttonList</t>
<t tx="ekr.20031218072017.522">def createMessageFrame (self,message):
	
	"""Create a frame containing a Tk.Label widget."""

	label = Tk.Label(self.frame,text=message)
	label.pack(pady=10)
</t>
<t tx="ekr.20031218072017.523">def createTopFrame(self):
	
	"""Create the Tk.Toplevel widget for a leoDialog."""
	
	self.root = app.root

	self.top = Tk.Toplevel(self.root)
	attachLeoIcon(self.top)

	self.top.title(self.title)

	if not self.resizeable:
		self.top.resizable(0,0) # neither height or width is resizable.

	self.frame = Tk.Frame(self.top)
	self.frame.pack(side="top",expand=1,fill="both")</t>
<t tx="ekr.20031218072017.524">def run (self,modal):
	
	"""Run a leoDialog."""

	self.modal = modal
	
	self.center() # Do this after all packing complete.

	if self.modal:
		self.top.grab_set() # Make the dialog a modal dialog.
		if self.focus_widget == None:
			self.focus_widget = self.top
		self.focus_widget.focus_set() # Get all keystrokes.	
		self.root.wait_window(self.top)
		return self.answer
	else:
		self.root.wait_window(self.top)
		return None</t>
<t tx="ekr.20031218072017.525">class aboutLeo (leoDialog):
	"""A class that creates the About Leo dialog."""
	@others
</t>
<t tx="ekr.20031218072017.526">def __init__ (self,version,copyright,url,email):
	
	"""Create an About Leo dialog."""

	leoDialog.__init__(self,"About Leo",resizeable=true) # Initialize the base class.
	
	self.copyright = copyright
	self.email = email
	self.url = url
	self.version = version

	self.createTopFrame()
	self.createFrame()
</t>
<t tx="ekr.20031218072017.527">def createFrame (self):
	
	"""Create the frame for an About Leo dialog."""
	
	frame = self.frame
	copyright = self.copyright ; email = self.email
	url = self.url ; version = self.version
	
	# Calculate the approximate height &amp; width. (There are bugs in Tk here.)
	lines = string.split(copyright,'\n')
	height = len(lines) + 8 # Add lines for version,url,email,spacing.
	width = 0
	for line in lines:
		width = max(width,len(line))
	width = max(width,len(url))
	width += 10 # 9/9/02

	frame.pack(padx=6,pady=4)
	
	self.text = text = Tk.Text(frame,height=height,width=width,bd=0,bg=frame.cget("background"))
	text.pack(pady=10)
	
	try:
		bitmap_name = os.path.join(app.loadDir,"..","Icons","Leoapp.GIF") # 5/12/03
		image = Tkinter.PhotoImage(file=bitmap_name)
		text.image_create("1.0",image=image,padx=10)
	except:
		es("exception getting icon")
		es_exception()

	text.insert("end",version,"version")
	text.insert("end",copyright,"copyright")
	text.insert("end",'\n')
	text.insert("end",url,"url") # Add "url" tag.
	text.insert("end",'\n')
	text.insert("end",email,"email") # Add "email" tag.
	
	text.tag_config("version",justify="center")
	text.tag_config("copyright",justify="center",spacing1="3")
	
	text.tag_config("url",underline=1,justify="center",spacing1="10")
	text.tag_bind("url","&lt;Button-1&gt;",self.onAboutLeoUrl)
	text.tag_bind("url","&lt;Enter&gt;",self.setArrowCursor)
	text.tag_bind("url","&lt;Leave&gt;",self.setDefaultCursor)

	text.tag_config("email",underline=1,justify="center",spacing1="10")
	text.tag_bind("email","&lt;Button-1&gt;",self.onAboutLeoEmail)
	text.tag_bind("email","&lt;Enter&gt;",self.setArrowCursor)
	text.tag_bind("email","&lt;Leave&gt;",self.setDefaultCursor)

	text.configure(state="disabled")</t>
<t tx="ekr.20031218072017.528">def onAboutLeoEmail(self,event=None):
	
	"""Handle clicks in the email link in an About Leo dialog."""
	
	try:
		import webbrowser
		webbrowser.open("mailto:" + self.email)
	except:
		es("not found: " + self.email)</t>
<t tx="ekr.20031218072017.529">def onAboutLeoUrl(self,event=None):
	
	"""Handle clicks in the url link in an About Leo dialog."""

	try:
		import webbrowser
		webbrowser.open(self.url)
	except:
		es("not found: " + self.url)</t>
<t tx="ekr.20031218072017.530">def setArrowCursor (self,event=None):
	
	"""Set the cursor to an arrow in an About Leo dialog."""
	
	self.text.configure(cursor="arrow")
	
def setDefaultCursor (self,event=None):
	
	"""Set the cursor to the default cursor in an About Leo dialog."""
	
	self.text.configure(cursor="xterm")</t>
<t tx="ekr.20031218072017.531">class askOk(leoDialog):
	"""A class that creates a dialog with a single OK button."""
	@others</t>
<t tx="ekr.20031218072017.532">def __init__ (self,title,message=None,text="Ok",resizeable=false):

	"""Create a dialog with one button"""

	leoDialog.__init__(self,title,resizeable) # Initialize the base class.
	self.text = text
	self.createTopFrame()
	self.top.bind("&lt;Key&gt;", self.onKey)

	if message:
		self.createMessageFrame(message)

	buttons = {"text":text,"command":self.okButton,"default":true}, # Singleton tuple.
	self.createButtons(buttons)</t>
<t tx="ekr.20031218072017.533">def onKey(self,event):
	
	"""Handle Key events in askOk dialogs."""

	ch = event.char.lower()

	if ch in (self.text[0].lower(),'\n','\r'):
		self.okButton()

	return "break"
</t>
<t tx="ekr.20031218072017.534">class askOkCancel (leoDialog):
	"""A class that creates a dialog with two buttons: Ok and Cancel."""
	@others</t>
<t tx="ekr.20031218072017.535">def __init__ (self,title,message=None,resizeable=false):
	
	"""Create a dialog having Ok and Cancel buttons."""

	leoDialog.__init__(self,title,resizeable) # Initialize the base class.
	self.createTopFrame()
	self.top.bind("&lt;Key&gt;",self.onKey)

	if message:
		self.createMessageFrame(message)
		
	buttons = (
		{"text":"Ok",    "command":self.okButton,     "default":true},
		{"text":"Cancel","command":self.cancelButton} )
	self.createButtons(buttons)
</t>
<t tx="ekr.20031218072017.536">def onKey(self,event):
	
	"""Handle keystrokes in a dialog having Ok and Cancel buttons."""

	ch = event.char.lower()
	if ch in ('o','\n','\r'):
		self.okButton()
	elif ch == 'c':
		self.cancelButton()

	return "break"</t>
<t tx="ekr.20031218072017.537">class  askOkCancelNumber (leoDialog):
	"""Create and run a modal dialog to get a number."""
	@others
</t>
<t tx="ekr.20031218072017.538">def __init__ (self,title,message):
	
	"""Create a number dialog"""

	leoDialog.__init__(self,title,resizeable=false) # Initialize the base class.
	self.answer = -1
	self.number_entry = None

	self.createTopFrame()
	self.top.bind("&lt;Key&gt;", self.onKey)

	self.createFrame(message)
	self.focus_widget = self.number_entry

	buttons = (
			{"text":"Ok",    "command":self.okButton,     "default":true},
			{"text":"Cancel","command":self.cancelButton} )
	buttonList = self.createButtons(buttons)
	self.ok_button = buttonList[0] # Override the default kind of Ok button.</t>
<t tx="ekr.20031218072017.539">def createFrame (self,message):
	
	"""Create the frame for a number dialog."""
	
	f = self.frame
	
	lab = Tk.Label(f,text=message)
	lab.pack(pady=10,side="left")
	
	self.number_entry = t = Tk.Entry(f,width=20)
	t.pack(side="left")</t>
<t tx="ekr.20031218072017.540">def okButton(self):
	
	"""Handle clicks in the ok button of a number dialog."""

	s = self.number_entry.get().strip()

	try:
		self.answer=int(s)
	except:
		self.answer=-1 # Cancel the operation.

	self.top.destroy()
	
def cancelButton(self):
	
	"""Handle clicks in the cancel button of a number dialog."""

	self.answer=-1
	self.top.destroy()</t>
<t tx="ekr.20031218072017.541">def onKey (self,event):
	
	&lt;&lt; eliminate non-numbers &gt;&gt;

	ch = event.char.lower()

	if ch in ('o','\n','\r'):
		self.okButton()
	elif ch == 'c':
		self.cancelButton()

	return "break"</t>
<t tx="ekr.20031218072017.542">e = self.number_entry
s = e.get().strip()

i = 0
while i &lt; len(s):
	ch = s[i]
	if ch not in string.digits:
		e.delete(`i`)
		s = e.get()
	else:
		i += 1</t>
<t tx="ekr.20031218072017.543">class askYesNo (leoDialog):
	"""A class that creates a dialog with two buttons: Yes and No."""
	@others

</t>
<t tx="ekr.20031218072017.544">def __init__ (self,title,message=None,resizeable=false):
	
	"""Create a dialog having yes and no buttons."""

	leoDialog.__init__(self,title,resizeable) # Initialize the base class.
	self.createTopFrame()
	self.top.bind("&lt;Key&gt;",self.onKey)

	if message:
		self.createMessageFrame(message)
		
	buttons = (
		{"text":"Yes","command":self.yesButton,  "default":true},
		{"text":"No", "command":self.noButton} )
	self.createButtons(buttons)
</t>
<t tx="ekr.20031218072017.545">def onKey(self,event):
	
	"""Handle keystroke events in dialogs having yes and no buttons."""

	ch = event.char.lower()

	if ch in ('y','\n','\r'):
		self.yesButton()
	elif ch == 'n':
		self.noButton()

	return "break"</t>
<t tx="ekr.20031218072017.546">class askYesNoCancel(leoDialog):
	
	"""A class to create and run dialogs having three buttons.
	
	By default, these buttons are labeled Yes, No and Cancel."""
	
	@others
</t>
<t tx="ekr.20031218072017.547">def __init__ (self,title,
	message=None,
	yesMessage="Yes",
	noMessage="No",
	defaultButton="Yes",
	resizeable=false):
		
	"""Create a dialog having three buttons."""

	leoDialog.__init__(self,title,resizeable) # Initialize the base class.
	self.yesMessage,self.noMessage = yesMessage,noMessage
	self.defaultButton = defaultButton

	self.createTopFrame()
	self.top.bind("&lt;Key&gt;",self.onKey)

	if message:
		self.createMessageFrame(message)
		
	buttons = (
		{"text":yesMessage,"command":self.yesButton,   "default":yesMessage==defaultButton},
		{"text":noMessage, "command":self.noButton,    "default":noMessage==defaultButton},
		{"text":"Cancel",  "command":self.cancelButton,"default":"Cancel"==defaultButton} )
	self.createButtons(buttons)

</t>
<t tx="ekr.20031218072017.548">def onKey(self,event):
	
	"""Handle keystrokes in dialogs with three buttons."""

	ch = event.char.lower()
	
	if ch in ('\n','\r'):
		ch = self.defaultButton[0].lower()

	if ch == self.yesMessage[0].lower():
		self.yesButton()
	elif ch == self.noMessage[0].lower():
		self.noButton()
	elif ch == 'c':
		self.cancelButton()

	return "break"</t>
<t tx="ekr.20031218072017.549">def noButton(self):
	
	"""Handle clicks in the 'no' (second) button in a dialog with three buttons."""
	
	self.answer=self.noMessage.lower()
	self.top.destroy()
	
def yesButton(self):
	
	"""Handle clicks in the 'yes' (first) button in a dialog with three buttons."""
	
	self.answer=self.yesMessage.lower()
	self.top.destroy()
</t>
<t tx="ekr.20031218072017.550">class listBoxDialog (leoDialog):
	"""A base class for dialogs containing a Tk Listbox"""
	@others</t>
<t tx="ekr.20031218072017.551">def __init__ (self,c,title,label):
	
	"""Constructor for the base listboxDialog class."""
	
	leoDialog.__init__(self,title,resizeable=true) # Initialize the base class.
	self.createTopFrame()
	self.top.protocol("WM_DELETE_WINDOW", self.destroy)

	# Initialize common ivars.
	self.c = c
	self.label = label
	self.vnodeList = []
	self.vnodeList = []
	self.buttonFrame = None
	
	# Fill in the frame.
	self.createFrame()
	self.fillbox()
	
	# Make the common bindings after creating self.box.
	
	self.box.bind("&lt;Double-Button-1&gt;",self.go)
</t>
<t tx="ekr.20031218072017.552">def addStdButtons (self,frame):
	
	"""Add stanadard buttons to a listBox dialog."""
	
	# Create the ok and cancel buttons.
	self.ok = ok = Tk.Button(frame,text="Go",width=6,command=self.go)
	self.hide = hide = Tk.Button(frame,text="Hide",width=6,command=self.hide)

	ok.pack(side="left",pady=2,padx=5)
	hide.pack(side="left",pady=2,padx=5)</t>
<t tx="ekr.20031218072017.553">def createFrame(self):
	
	"""Create the essentials of a listBoxDialog frame
	
	Subclasses will add buttons to self.buttonFrame"""
	
	self.outerFrame = f = Tk.Frame(self.frame)
	f.pack(expand=1,fill="both")
	
	if self.label:
		labf = Tk.Frame(f)
		labf.pack(pady=2)
		lab = Tk.Label(labf,text=self.label)
		lab.pack()
	
	f2 = Tk.Frame(f)
	f2.pack(expand=1,fill="both")
	
	self.box = box = Tk.Listbox(f2,height=20,width=30)
	box.pack(side="left",expand=1,fill="both")
	
	bar = Tk.Scrollbar(f2)
	bar.pack(side="left", fill="y")
	
	bar.config(command=box.yview)
	box.config(yscrollcommand=bar.set)</t>
<t tx="ekr.20031218072017.554">def destroy (self,event=None):
	
	"""Hide, do not destroy, a listboxDialog window
	
	subclasses may override to really destroy the window"""
	
	self.top.withdraw() # Don't allow this window to be destroyed.
</t>
<t tx="ekr.20031218072017.555">def hide (self):
	
	"""Hide a list box dialog."""
	
	self.top.withdraw()</t>
<t tx="ekr.20031218072017.556">def fillbox(self,event=None):
	
	"""Fill a listbox from information.
	
	Overridden by subclasses"""
	
	pass</t>
<t tx="ekr.20031218072017.557">def go(self,event=None):
	
	"""Handle clicks in the "go" button in a list box dialog."""
	
	c = self.c ; box = self.box
	
	# Work around an old Python bug.  Convert strings to ints.
	items = box.curselection()
	try:
		items = map(int, items)
	except ValueError: pass

	if items:
		n = items[0]
		v = self.vnodeList[n]
		c.beginUpdate()
		c.frame.expandAllAncestors(v)
		c.selectVnode(v,updateBeadList=true) # A case could be made for updateBeadList=false
		c.endUpdate()
		c.frame.idle_scrollTo(v)
</t>
<t tx="ekr.20031218072017.558"></t>
<t tx="ekr.20031218072017.559"></t>
<t tx="ekr.20031218072017.560">def OnWriteDirtyAtFileNodes (self):

	self.c.fileCommands.writeDirtyAtFileNodes()</t>
<t tx="ekr.20031218072017.561">def OnQuit(self):
	
	app.onQuit()</t>
<t tx="ekr.20031218072017.562">def OnWriteMissingAtFileNodes (self):

	self.c.fileCommands.writeMissingAtFileNodes()
</t>
<t tx="ekr.20031218072017.563">def OnWriteOutlineOnly (self):

	self.c.fileCommands.writeOutlineOnly()
</t>
<t tx="ekr.20031218072017.564">def OnWriteAtFileNodes (self):

	self.c.fileCommands.writeAtFileNodes()
</t>
<t tx="ekr.20031218072017.565"></t>
<t tx="ekr.20031218072017.566">def OnUndo(self):

	self.c.undoer.undo()
</t>
<t tx="ekr.20031218072017.567">def OnRedo(self):

	self.c.undoer.redo()
</t>
<t tx="ekr.20031218072017.568">def OnSelectAll(self):

	self.body.selectAllText()</t>
<t tx="ekr.20031218072017.569">def OnConvertTabs(self):

	self.c.convertTabs()
	
def OnConvertAllTabs(self):

	self.c.convertAllTabs()

def OnReformatParagraph(self):
	
	self.c.reformatParagraph()
</t>
<t tx="ekr.20031218072017.570">def OnConvertBlanks(self):

	self.c.convertBlanks()

	
def OnConvertAllBlanks(self):

	self.c.convertAllBlanks()
</t>
<t tx="ekr.20031218072017.571">def OnDedent (self):

	self.c.dedentBody()
</t>
<t tx="ekr.20031218072017.572">def OnIndent(self):

	self.c.indentBody()
</t>
<t tx="ekr.20031218072017.573">def OnEndEditHeadline(self):

	self.tree.endEditLabelCommand() # 10/28/03
</t>
<t tx="ekr.20031218072017.574">def OnAbortEditHeadline(self):
	
	self.tree.abortEditLabelCommand()
</t>
<t tx="ekr.20031218072017.575"></t>
<t tx="ekr.20031218072017.576"></t>
<t tx="ekr.20031218072017.577">def OnCutNode(self):

	self.c.cutOutline()
</t>
<t tx="ekr.20031218072017.578">def OnCopyNode(self):

	self.c.copyOutline()
</t>
<t tx="ekr.20031218072017.579">def OnPasteNode(self):

	self.c.pasteOutline()
</t>
<t tx="ekr.20031218072017.580">def OnDeleteNode(self):

	self.c.deleteHeadline()
</t>
<t tx="ekr.20031218072017.581">def OnInsertNode(self):

	self.c.insertHeadline()</t>
<t tx="ekr.20031218072017.582">def OnCloneNode(self):

	self.c.clone()
</t>
<t tx="ekr.20031218072017.583">def OnSortChildren(self):

	self.c.sortChildren()
	
def OnSortSiblings(self):

	self.c.sortSiblings()</t>
<t tx="ekr.20031218072017.584">def OnHoist(self):

	self.c.hoist()
	
def OnDehoist(self):

	self.c.dehoist()</t>
<t tx="ekr.20031218072017.585">def OnCheckOutline (self):
	
	self.c.checkOutline()</t>
<t tx="ekr.20031218072017.586"></t>
<t tx="ekr.20031218072017.587">def OnContractChildren(self):

	self.c.contractSubheads()
</t>
<t tx="ekr.20031218072017.588">def OnContractAllChildren(self):

	self.c.contractAllSubheads()
</t>
<t tx="ekr.20031218072017.589">def OnExpandAllChildren(self):

	self.c.expandAllSubheads()
</t>
<t tx="ekr.20031218072017.590">def OnExpandChildren(self):

	self.c.expandSubheads()
</t>
<t tx="ekr.20031218072017.591"></t>
<t tx="ekr.20031218072017.592">def OnContractAll(self):

	self.c.contractAllHeadlines()
</t>
<t tx="ekr.20031218072017.593">def OnContractNode(self):

	self.c.contractNode()
</t>
<t tx="ekr.20031218072017.594">def OnContractParent(self):

	self.c.contractParent()
</t>
<t tx="ekr.20031218072017.595">def OnExpandAll(self):

	self.c.expandAllHeadlines()
</t>
<t tx="ekr.20031218072017.596">def OnExpandNextLevel(self):

	self.c.expandNextLevel()
</t>
<t tx="ekr.20031218072017.597">def OnExpandPrevLevel(self):

	self.c.expandPrevLevel()
</t>
<t tx="ekr.20031218072017.598">def OnExpandNode(self):

	self.c.expandNode()
</t>
<t tx="ekr.20031218072017.599">def OnExpandToLevel1(self): self.c.expandLevel1()
def OnExpandToLevel2(self): self.c.expandLevel2()
def OnExpandToLevel3(self): self.c.expandLevel3()
def OnExpandToLevel4(self): self.c.expandLevel4()
def OnExpandToLevel5(self): self.c.expandLevel5()
def OnExpandToLevel6(self): self.c.expandLevel6()
def OnExpandToLevel7(self): self.c.expandLevel7()
def OnExpandToLevel8(self): self.c.expandLevel8()
def OnExpandToLevel9(self): self.c.expandLevel9()
</t>
<t tx="ekr.20031218072017.600"></t>
<t tx="ekr.20031218072017.601">def OnMoveDown(self):

	self.c.moveOutlineDown()
</t>
<t tx="ekr.20031218072017.602">def OnMoveLeft(self):

	self.c.moveOutlineLeft()
</t>
<t tx="ekr.20031218072017.603">def OnMoveRight(self):

	self.c.moveOutlineRight()
</t>
<t tx="ekr.20031218072017.604">def OnMoveUp(self):

	self.c.moveOutlineUp()
</t>
<t tx="ekr.20031218072017.605">def OnPromote(self):

	self.c.promote()
</t>
<t tx="ekr.20031218072017.606">def OnDemote(self):

	self.c.demote()
</t>
<t tx="ekr.20031218072017.607">def OnGoPrevVisible(self):

	self.c.selectVisBack()
</t>
<t tx="ekr.20031218072017.608">def OnGoNextVisible(self):

	self.c.selectVisNext()
</t>
<t tx="ekr.20031218072017.609">def OnGoBack(self):

	self.c.selectThreadBack()
</t>
<t tx="ekr.20031218072017.610">def OnGoNext(self):

	self.c.selectThreadNext()
</t>
<t tx="ekr.20031218072017.611">def OnGoToNextChanged(self):

	self.c.goToNextDirtyHeadline()
</t>
<t tx="ekr.20031218072017.612">def OnGoToNextMarked(self):

	self.c.goToNextMarkedHeadline()
</t>
<t tx="ekr.20031218072017.613">def OnMark(self):

	self.c.markHeadline()
</t>
<t tx="ekr.20031218072017.614">def OnMarkChangedItems(self):

	self.c.markChangedHeadlines()
</t>
<t tx="ekr.20031218072017.615">def OnMarkChangedRoots(self):

	self.c.markChangedRoots()
</t>
<t tx="ekr.20031218072017.616">def OnMarkClones(self):

	self.c.markClones()
</t>
<t tx="ekr.20031218072017.617">def OnMarkSubheads(self):

	self.c.markSubheads()
</t>
<t tx="ekr.20031218072017.618">def OnUnmarkAll(self):

	self.c.unmarkAll()
</t>
<t tx="ekr.20031218072017.619"></t>
<t tx="ekr.20031218072017.620">def OnToggleActivePane (self):
	
	self.toggleActivePane()</t>
<t tx="ekr.20031218072017.621">def newColorFrame(self,commander):
	"""Create a colorFrame."""
	self.oops()

def newColorNameFrame(self,commander):
	"""Create a colorNameFrame."""
	self.oops()

def newCompareFrame(self,commander):
	"""Create a compareFrame."""
	self.oops()

def newFindFrame(self,commander):
	"""Create a findFrame."""
	self.oops()

def newFontFrame(self,commander):
	"""Create a fontFrame."""
	self.oops()

def newLeoFrame(self,title):
	"""Create a view frame for the Leo main window."""
	self.oops()

def newPrefsFrame(self,commander):
	"""Create a prefsFrame."""
	self.oops()</t>
<t tx="ekr.20031218072017.622"># These convenience routines just call the corresponding method of the app.gui class.
# Note: at present these are not called from Leo's core.

def get_focus(frame):
	"""Return the widget that has focus, or the body widget if None."""
	return app.gui.get_focus(frame)
	
def set_focus(c,widget):
	"""Set the focus of the widget in the given commander if it needs to be changed."""
	return app.gui.set_focus(c,widget)
	
def force_focus(c,widget):
	"""Set the focus of the widget in the given commander if it needs to be changed."""
	return app.gui.force_focus(c,widget)
</t>
<t tx="ekr.20031218072017.623"></t>
<t tx="ekr.20031218072017.624">def bbox(self,index):

	return self.body.bbox(index)</t>
<t tx="ekr.20031218072017.625"># Color tags...
def tag_add (self,tagName,index1,index2):
	return self.body.tag_add(tagName,index1,index2)

def tag_bind (self,tagName,event,callback):
	return self.body.tag_bind(tagName,event,callback)
	
def tag_configure (self,colorName,**keys):
	return self.body.tag_configure(colorName,keys)
	
tag_config = tag_configure
	
def tag_delete(self,tagName):
	return self.body.tag_delete(tagName)
	
def tag_remove (self,tagName,index1,index2):
	return self.body.tag_remove(tagName,index1,index2)</t>
<t tx="ekr.20031218072017.626">def cget(self,*args,**keys):
	
	return self.body.cget(*args,**keys)
	
def configure (self,*args,**keys):
	
	return self.body.configure(*args,**keys)
</t>
<t tx="ekr.20031218072017.627">def hasFocus (self):
	return self.body.hasFocus()
	
def setFocus (self):
	return self.body.setFocus()</t>
<t tx="ekr.20031218072017.628">def setBodyFontFromConfig(self):
	
	return self.body.setBodyFontFromConfig()</t>
<t tx="ekr.20031218072017.629">def getBodyPaneHeight (self):
	return self.body.getBodyPaneHeight()

def getBodyPaneWidth (self):
	return self.body.getBodyPaneWidth()
</t>
<t tx="ekr.20031218072017.630">def scheduleIdleTimeRoutine (self,function,*args,**keys):
	
	return self.body.scheduleIdleTimeRoutine(function,*args,**keys)</t>
<t tx="ekr.20031218072017.631">def adjustIndex (self,index,offset):
	return self.body.adjustIndex(index,offset)

def compareIndices(self,i,rel,j):
	return self.body.compareIndices(i,rel,j)

def convertXYToIndex (self,x,y):
	return self.body.convertXYToIndex(x,y)
	
def convertRowColumnToIndex (self,row,column):
	return self.body.convertRowColumnToIndex(row,column)
	
def getImageIndex (self,image):
	return self.body.getImageIndex(image)</t>
<t tx="ekr.20031218072017.632"># Returning indices...
def getBeforeInsertionPoint (self):
	return self.body.getBeforeInsertionPoint()
	
def getInsertionPoint (self):
	return self.body.getInsertionPoint()
	
# Returning chars...
def getCharAtInsertPoint (self):
	return self.body.getCharAtInsertPoint()

def getCharBeforeInsertPoint (self):
	return self.body.getCharBeforeInsertPoint()
	
# Setting the insertion point...
def setInsertionPoint (self,index):
	self.body.setInsertionPoint(index)

def setInsertPointToEnd (self):
	return self.body.setInsertPointToEnd()
	
def setInsertPointToStartOfLine (self,lineNumber):
	return self.body.setInsertPointToStartOfLine(lineNumber)</t>
<t tx="ekr.20031218072017.633">def bind (self,*args,**keys):
	
	return self.body.bind(*args,**keys)
</t>
<t tx="ekr.20031218072017.634">def deleteSelection (self):
	return self.body.deleteSelection()

def getTextSelection (self):
	return self.body.getTextSelection()
	
def hasTextSelection (self):
	return self.body.hasTextSelection()

def selectAllText (self):
	return self.body.selectAllText()

def setTextSelection (self,sel):
	return self.body.setTextSelection(sel)</t>
<t tx="ekr.20031218072017.635"># These routines replace most of the former insert/delete and index routines.</t>
<t tx="ekr.20031218072017.636">def deleteAllText(self):
	return self.body.deleteAllText()
	
def deleteCharacter (self,index):
	return self.body.deleteCharacter(index)
	
def deleteLine (self,lineNumber): # zero based line number.
	return self.body.deleteLine(lineNumber)
	
def deleteLines (self,lineNumber,numberOfLines): # zero based line number.
	return self.body.deleteLine(lineNumber,numberOfLines)

def deleteRange (self,index1,index2):
	return self.body.deleteRange(index1,index2)
</t>
<t tx="ekr.20031218072017.637">def getAllText (self):
	return self.body.getAllText()
	
def getCharAtIndex (self,index):
	return self.body.getCharAtIndex(index)

def getInsertLines (self):
	return self.body.getInsertLines()

def getSelectionAreas (self):
	return self.body.getSelectionAreas()

def getSelectionLines (self):
	return self.body.getSelectionLines()</t>
<t tx="ekr.20031218072017.638">def insertAtEnd (self,s):

	return self.body.insertAtEnd(s)
	
def insertAtInsertPoint (self,s):
	
	self.body.insertAtInsertPoint(s)</t>
<t tx="ekr.20031218072017.639">def setSelectionAreas (self,before,sel,after):

	return self.body.setSelectionAreas(before,sel,after)</t>
<t tx="ekr.20031218072017.640"># Visibility &amp; scrolling...
def makeIndexVisible (self,index):
	return self.body.makeIndexVisible(index)

def setFirstVisibleIndex (self,index):
	return self.body.setFirstVisibleIndex(index)

def getFirstVisibleIndex (self):
	return self.body.getFirstVisibleIndex()

def scrollUp (self):
	return self.body.scrollUp()

def scrollDown (self):
	return self.body.scrollDown()</t>
<t tx="ekr.20031218072017.641"></t>
<t tx="ekr.20031218072017.642"># Easily removed with a rename.

def focus_get(self):
	
	return self.tree.canvas.focus_get()</t>
<t tx="ekr.20031218072017.643">def attachLeoIcon (w):
	return app.gui.attachLeoIcon(w)

def center_dialog(dialog):
	return app.gui.center_dialog(dialog)
	
def create_labeled_frame (parent,caption=None,relief="groove",bd=2,padx=0,pady=0):
	return app.gui.create_labeled_frame(parent,caption,relief,bd,padx,pady)

def get_window_info (window):
	"""Return the window information."""
	return app.gui.get_window_info(window)
</t>
<t tx="ekr.20031218072017.644">def recolor(self,v,incremental=0):
	
	if 0: # Do immediately
		self.frame.body.colorizer.colorize(v,incremental)
	else: # Do at idle time
		self.frame.body.colorizer.schedule(v,incremental)

def recolor_now(self,v,incremental=0):

	self.frame.body.colorizer.colorize(v,incremental)
	
def recolor_range(self,v,leading,trailing):

	self.frame.body.colorizer.recolor_range(v,leading,trailing)</t>
<t tx="ekr.20031218072017.645">def OpenWithFileName(self,fileName):
	
	c = self
	return openWithFileName(fileName,c)</t>
<t tx="ekr.20031218072017.646">@ignore
@nocolor</t>
<t tx="ekr.20031218072017.647">Urgent: 4.2:
  - Replace leoConfig.leo with new Settings panel.
  - Make Leo drivable using keystrokes:
    - Incremental find.
    - Much better keystroke handling.

Important:
  - Study Bernhard's algorithm.
  - Design @file-thin and/or @file-import.
  - Replace .leo files with zodb.
  - Finish wxPython plugin.</t>
<t tx="ekr.20031218072017.648">This section lists projects for which I would like help and for which it should be possible to work relatively independently.  Please contact me before commencing work on these projects so that we can coordinate our efforts.</t>
<t tx="ekr.20031218072017.649">See the Code/Unit Testing section for the present unit testing code.

This is an ongoing project.  I plan to add unit tests when correcting or rewriting code, and there are large areas of code without any unit tests at all.</t>
<t tx="ekr.20031218072017.651">http://sourceforge.net/forum/message.php?msg_id=2312787
By: nobody

I had the idea some days ago, and I think I have not posted it yet.

The idea is simple but usefull, it is related about how to get a better configuration
interface for Leo.
The idea is:

let the configuration interface be a Plugin. This plugin define the
@configuration-file nodes. Under that nodes (and they childs), when selecting
the body, the body text is parsed to construct a tk dialog directly into the
body pane (replacing the text view, or as a window element in the text). When
modifying the menu, the text is changed. If something go wrong with the text
format, an error is raised and the original text is show.

The advantage of this plugin is that it is easier to devellop and integrate
very well with the actual scheme. It allow to define the configuration as a
hierarchy of nodes, similar to the linux kernel configuration, and use the power
of Leo.

The text format could be

option1 = 1 # checkbox &lt;= the plugin infere that it have to show the option1
as a checkbox
option2 = bla # [bla, blo, bli] &lt;= the plugin infere that it have to show a
combobox for option2, with options bla, blo, bli
option3 = rodrigo # text   &lt;= trivial, etc...

The comment after the option could allow to specify python code for conditions,
etc, etc....
Obviously the comment can be placed, the line before, or the line after, or
under what ever format required.

That is the idea, it is implementable, and, to my eyes, would solve the problem.

RodrigoB.


</t>
<t tx="ekr.20031218072017.652">- Add Settings menu.
	- Create Settings menu dynamically from leoConfig.txt
- Write leoConfig.txt by hand.

- Remove Open LeoConfig.leo command
- Remove Apply Settings command (will be done with apply, cancel, ok, revert buttons in all Settings submenus)</t>
<t tx="ekr.20031218072017.653">@nocolor

It would be an understatement to say that the way Leo handles configuration settings could be improved.  The present scheme involves editing leoConfig.leo, then remembering to save all .leo files before tangling leoConfig.leo.  Moreover, even when doing this properly, not all changes to settings "take" immediately.  Furthermore, there are no easy analogies to the typical "apply" or "revert" or "revert to default" buttons commonly seen in options dialogs.

Last night I studied the way the jEdit editor handles options.  See http://www.jedit.org/
Visually, jEdit's "Global Options" dialogs are very impressive.  There is a tree view on the left, there is a unique panel on the left for each item in the tree view.  All options are set visually.

Something like this could be done in Leo, but actually I like the opening up leoConfig.leo and setting options in a typical Leo window.  The advantage of leoConfig.leo is that there is plenty of room to explain what each setting does.

Leo's Set Colors and Set Font dialogs can and should affect the settings in leoConfig.leo, but at present they only affect leoConfig.txt, which is most annoying, and basically wrong.

This morning I realized that a large part of Leo's difficulties with configuration options stems from me trying to work around the limitations of Python's ConfigParser module.  Relying on this module may be the worst mistake I have made in the Python version of Leo.  This mistake has had several ramifications:

-  leoConfig.leo uses @root trees rather than @file trees because ConfigParser deletes all comments when writing leoConfig.txt.  Suppose instead that Leo would read and write leoConfig.txt without the "help" of the ConfigParser module.  For reading, all that is needed is that Leo parse leoConfig.txt into a single configuration dictionary.  This would, in fact, be very easy to do.

- Leo needs to do a better job of ensuring that leoConfig.txt always matches the settings in effect.  This can be done if Leo can _rewrite_ leoConfig.txt as it was (with all comments and especially sentinel lines), merely substituting new settings for old.  This is only slightly harder to do.

Other improvements come to mind, not directly related to the problems with ConfigParser:

- There should be a separate Settings Menu.  This would have the Set Colors and Set Font commands, as well as the following commands: Edit Settings (Same as present Open leoConfig.leo command) and Use Default Settings command (rewrites leoConfig.txt using preset defaults) and possibly Set Default Settings, Apply Settings and Revert Settings commands.

- All classes that use configuration settings should implement a configure method that immediately updates settings to the values just written to leoConfig.txt.  This includes the commands, frame and tree classes, and others.

With this long background, there are two main approaches to improving how Leo handles options:

1. Use a graphical scheme like jEdit does, and dispense with leoConfig.leo entirely.  leoConfig.txt would be the only repository for options.  This graphical scheme would use typical Apply, Revert, OK and Cancel buttons, much like the present Set Colors and Set Font dialogs.

2. Improve how Leo handles leoConfig.leo and leoConfig.txt so that leoConfig.leo can use @file trees and so that settings are _reliably_ updated when the user would expect them to be.

At present, I favor the second scheme.  It is simple to implement, it is the most Leonine, and moreover it allows for full discussion of all options.  true, the graphical way is good looking, but that is about all it has going for it.  I suppose a help feature could be added to the graphical way, but we are talking about a lot of effort for very little real value to the user.

Actually though, the issues of keeping leoConfig.txt up-to-date and of applying settings immediately remain mostly the same regardless of which way is chosen.  In particular, without the "help" of the ConfigParser module Leo could maintain options much more easily.

Anyway, this is how I see matters.  Any comments?

Edward
</t>
<t tx="ekr.20031218072017.654">I'm not at all sure that it is worthwhile now.</t>
<t tx="ekr.20031218072017.655">@nocolor

&gt; It just leaves still the problem of merging ones personal settings of leoConfig.txt 
with the ones in the new distribution. 

I am going to work on this just after 3.11b1 goes out the door. I think what I shall do is have Leo looks for several different files: first leoConfig.txt, then leoSiteConfig.txt, with the latter overriding the former. That way you can have stable settings (leoSiteConfig.txt won't be part of distributions). 

I may also have Leo look for leoLinuxConfig.txt, leoWinConfig.txt and leoMacConfig.txt, depending on the platform, so you can have stable platform settings as well. </t>
<t tx="ekr.20031218072017.656">@nocolor

By: sanori ( Joo-won Jung ) 
 How about split font config for win and unix?   
2003-02-10 12:02  
Developer Forum

How about split the font's configurations like IDLE, python IDE? 
Because the 10pt size in Windows and Unix (X window, exactly) is not the same. Moreover, the font set that the OS provides does not the same. 

I'm using leo on both windows and Linux, and leo is in the vfat partition to use it both OS. Of course, I can change the font size by using the font dialog. But, I want leo to be more comportable. :)

-Sanori 
</t>
<t tx="ekr.20031218072017.658">@nocolor

There have been a couple different suggestions on how to obtain a .leo file
that presents the conflicts for resolution.  My initial thought was to have
some sort of external file containing only the structure information of interest.
Edward has suggested that we could process the CVS created .leo file with all
its conflict indicators.

I'd like to offer another alternative: based on the ad-hoc procedure that Edward
is currently using, i.e.,

* Save your work to foo.leo file.
* copy your foo.leo file to fooCvsTmp.leo
* cvs ci
* if there are no conflicts (hurray)
*    remove fooCvsTmp.leo; finished
* otherwise
*    remove foo.leo
*    cvs up foo.leo
*    read foo.leo into an internal directed acyclic graph (DAG)
*    generate the conflict resolution DAG from the proposed new leo internal
DAG (which Leo already has as a matter of course) and the CVS derived DAG
*    present for editting
*    when you are satisfied and want to try to check in again, repeat.

From the user's point of view, a CVS check in either succeeds or requires that
the conflicts be resolved, after which another check in may be attempted.  If
we're somehow interrupted in the middle of the process, the fooCvsTmp.leo file
preserves the users work.
</t>
<t tx="ekr.20031218072017.659">https://sourceforge.net/forum/message.php?msg_id=1803722
By: jmgilligan

What is the intended behavior when foo.leo has a cloned node that appears several
times in a derived (or multiple derived files) and the user edits this file
or files to change two or more instances of the cloned node in different ways.

Example:

@file foo.py
****begin tnode
@others
****end tnode
...definition of procedure a
***begin tnode
def a:
...print "a:", &lt;&lt;bar&gt;&gt;
***end tnode
...&lt;&lt;bar&gt;&gt;
****begin tnode
"bar"
****end tnode

...definition of procedure b
***begin tnode
def b:
...print "b:", &lt;&lt;bar&gt;&gt;
***end tnode
...&lt;&lt;bar&gt;&gt;
****begin tnode
"bar"
****end tnode

...definition of procedure c
***begin tnode
def c:
...print "a:", &lt;&lt;bar&gt;&gt;
***end tnode
...&lt;&lt;bar&gt;&gt;
****begin tnode
"bar"
****end tnode

In the .leo, if I edit &lt;&lt;bar&gt;&gt;, it will change simultaneously in each place,
always in synch. However, suppose I edit foo.py in a text editor and change
foo.py to read:

#@+leo
#@+node:0::@file foo.py
#@+body
#@+others
#@+node:1::definition of a
#@+body
print "a:", 
#@&lt;&lt;bar&gt;&gt;
#@+node:1::&lt;&lt;bar&gt;&gt;
#@+body
"bar"
#@-body
#@-node:1::&lt;&lt;bar&gt;&gt;
#@-body
#@-node:1::definition of a
#@+node:2::definition of b
#@+body
print "b:", 
#@&lt;&lt;bar&gt;&gt;
#@+node:1::&lt;&lt;bar&gt;&gt;
#@+body
"variation b"
#@-body
#@-node:1::&lt;&lt;bar&gt;&gt;
#@-body
#@-node:2::definition of b
#@+node:3::definition of c
#@+body
print "c:", 
#@&lt;&lt;bar&gt;&gt;
#@+node:1::&lt;&lt;bar&gt;&gt;
#@+body
"variation c"
#@-body
#@-node:1::&lt;&lt;bar&gt;&gt;
#@-body
#@-node:3::definition of c
#@-others
#@-body
#@-node:0::@file foo.py
#@-leo

Now what is supposed to happen when leo tries to read foo.py back in? It seems
that there are three possible behaviors:

1) leo reports a conflict that the user needs to resolve.
2) leo breaks the clone: the three nodes become separate vnodes, not clones
of the same one.
3) leo arbitrarily takes one of the tnodes to be the new tnode for all of the
clones. This is currently what happens. It creates something like a race condition,
where the last node in the derived file determines what the final result will
be. In this case, all three tnodes get text "variation c".

This general question of how Leo should deal with conflicts in clone nodes seems
to me that it needs to be addressed, particularly with respect to trying to
avoid cvs conflicts via thick/thin modes.

Note that this can become quite a subtle question because the same node can
be cloned across several different derived files, in which case a serious race
condition may pertain.

At the least, I would like to see leo perform consistency checking on cloned
nodes when it reads a derived file back in and warn the user if cloned nodes
are inconsistent.

Note that the issue also occurs with OpenWith: I can open each instance of a
cloned node as a separate file in the external text editor. Which version is
read back into leo depends on the order in which I save them from the external
editor.
</t>
<t tx="ekr.20031218072017.660">By: jmgilligan ( Jonathan M. Gilligan ) 
 Possible solution   
2003-01-13 20:55  
One possible solution for the conflicting clones problem is to have Leo, when it detects a conflicting clone, generate a text file (perhaps named LeoConflict_NNNN.leo, where NNNN is the gid of the node in question), which contains all the different versions of the node in question, output in leo XML format. 

The vnode would then be marked with a "conflict" flag that would prevent the user from opening it in Leo until the conflict is resolved. See below for how the user resolves the conflict. 

What I have in mind is something similar to the CVS conflict file, where a conflict between two versions is marked 

&lt;&lt;&lt;&lt;&lt;&lt;&lt; 
blah blah blah? 
======= 
blah blah blah! 
&gt;&gt;&gt;&gt;&gt;&gt;&gt; 

Except that we would output this file in Leo XML format. The reason for XML format would be to avoid problems of how to generically delimit the different sections (different versions of the cloned node). Here leo's XML tags can unambiguously delimit the sections. 

The user would then edit the conflict file and delete all but the desired version. Then he would tell leo to resolve the conflict by reading the corrected file in and replacing the contents of the conflicting node with the contents of the LeoConflict_NNNN.leo file. 

On the down side, this may well be too baroque a fix for a problem that most users may never encounter. If so, perhaps it's best left alone until more pressing problems are solved. I know what I am doing with Leo and am always careful NOT to generate conflicting clones when I edit in an external text editor, so I don't absolutely need a resolution to this problem. I raised it because it's good for a program to have well-defined behavior when presented with anomalous input. 

In this sense, perhaps the best thing is to allow users to generate code from clones (what Allan Holub referred to as "enough rope to shoot yourself in the foot"), but to tell them that this practice is frowned upon.  

 
</t>
<t tx="ekr.20031218072017.661">Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=1836117
By: gilshwartz

Edward, now that conflicting clones may not be the result of bad style, I would
like to propose yet another solution that I have been thinking of for a while.

My basic approach is that cloning is not just a convenience tool, it may also
reflect some of the properties of the code/code set. Therefore my goal is for
clone links to remain even if they are conflicting, and let the user resolve
them at any convenient time. I also think that Leo's user interface is the best
tool to resolve such conflicts.

Thus here is my view of clone management and resolution inside Leo. Anytime
content is loaded into Leo, if a clone set agrees (i.e. have the same content)
all clone copies are marked "green". When one green clone is edited, all green
clones are changed. This is Leo as it is now.

If at some point conflicting clones are loaded, Leo decides on some representing
content (may be based on policies like most occurring content, or latest timestamp,
etc.) and provides visual clues for the conflict. The visual clue is give by
a double node box, e.g.

+---------------+
+ clone org +
+---------------+
+ resolution +
+---------------+

such that it is a single node in the tree, but has two content node, the original
text, and the possibly arbitrary resolution.

The resolution pseudo node is marked "blue", while the original text is either
"green", if it is identical to the blue node, or "red", if it is not. To emphasis,
the red/green nodes contain the specific (possibly) unique code associated with
the derived file, while the pseudo blue node contains the shared clone content.
During save to derived files, only the red/green content is saved, so effectively
the file is not changed and the conflict is not resolved until the user chooses
to do so. However, the clone relationship (via the gti) remains.

During editing, changes to red/green clones are local and do not propagate to
other clone copies (actually any change to a green node would turn it red).
Changes to the blue nodes do propagate since it is a single view of the clone.
A node pair may be converted to a regular node, effectively getting a new gti
and eliminating the blue copy. Or, it may be converted to the shared copy,
effectively forgetting its original content (leaving only the blue node). Once
there are no more red nodes in a clone set, all its nodes become green again
and the conflict is resolved.

Some additional clone actions I think are useful are:

1. Go to next/prev clone.
2. Go to next/prev green clone (useful when there are red ones).
3. Convert all green copies to a new clone group (useful when some clone copies
needs to remain clones, but break from the original clone set, thus getting
a new clone gti)

Action 3 enables the user to partition its clone set to several clone groups
by copying a clone's original content to its blue copy and finding matching
(green) clones.

What do we gain by all this?

1. We can have conflicting clones without catastrophes.
2. We get tools to handle conflicts and resolve them.
3. We keep on working is Leo's environment, which is the most supportive one
we can expect.

Gil

(By the way, I have a feeling that it would be useful to include along with
the gti a hash of its node content, which could tell Leo is a node was changed
outside of it. Also, including a timestamp in the opening sentinel, indicating
when Leo last saved it. These may help having intelligent decisions by Leo in
cases like conflicting clones.)
</t>
<t tx="ekr.20031218072017.662">Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=1804169
By: gilshwartz

Another thing to think about is what should happen when close heading is changing.
Right now, if you are inside Leo, all headings will be changed, and if you try
to change by hand it in the derived file, clone links are removed (after some
error reporting). This is quite reasonable in the current scheme of things,
where one is not really expected to mess up with Leo sentinels.

However, if/when @include is implemented, one would probably edit some files
with clones that may extend to other files and changing the clone node name
(via Leo) is quite feasible. Note that the gti for the cloned node would probably
not change. So

1. Do Leo resync the clone content based on the gti?
2. Does it break cloning and allocates a new gti for one (arbitrary?) clone
set?
3. Let the user resolve manually, offer undoable auto-resolution with reporting,
other?

More things to think about.

Gil
</t>
<t tx="ekr.20031218072017.663"></t>
<t tx="ekr.20031218072017.664">@nocolor

Under X Window system, when text is selected, it is automatically entered into a buffer and can be pasted with the middle button of the mouse.

In Leo, when this is done, the text is rendered in right place, but it doesn't stick unless some key is pressed after pasting. That is, if I leave the node in question without pressing any key after pressing the middle button, the pasted text is gone when I come back to that node.

Doing copy and paste works normally when done through the edit menu.

@color</t>
<t tx="ekr.20031218072017.665"></t>
<t tx="ekr.20031218072017.666">@nocolor

By: riotnrrrd ( Timo Honkasalo ) 
 Pasted text doesn't stick   
2002-11-01 13:38  
System: Linux 

Under X Window system, when text is selected, it is automatically entered into a buffer and can be pasted with the middle button of the mouse. 

In Leo, when this is done, the text is rendered in right place, but it doesn't stick unless some key is pressed after pasting. That is, if I leave the node in question without pressing any key after pressing the middle button, the pasted text is gone when I come back to that node. 

Doing copy and paste works normally when done through the edit menu. 

-------------------

I also found out that if you do an extra "click" on the control key, it will
stick from then on.

If your text should have color in it, you can see that right before you "click",
the text has no color and the color back on right after you click the control.

It maybe a clue to someone, but seems strange to me. 
</t>
<t tx="ekr.20031218072017.667">abc bbb bbbxyz bbb</t>
<t tx="ekr.20031218072017.668">@nocolor

Bumping the thread because the bug still persists. 

I've also noticed that the automatic select'n'paste doesn't work between nodes. That is, I can select text and paste a copy of it in the same node with middle button, but if I change click to another node, the paste buffer is erased. The automatic pasting works between Leo and other applications, however, and I can paste between nodes if I copy the selection to buffer by CTR-C. 

Maybe this is related to the non-sticking bug?

----

This may be a Linux-only bug related to the control-v workaround.</t>
<t tx="ekr.20031218072017.669">These may indicate problems with Tk on Linux.  I can not reproduce them on XP.</t>
<t tx="ekr.20031218072017.670">(In Linux) The home page and online tutorial options in the menu only work properly if Mozilla window is already open. If not, a Mozilla window opens, but with empty page and url field. </t>
<t tx="ekr.20031218072017.671">When in 'vertical split' mode (with viewpane on right, and tree pane over log pane on left), the horixontal scrollbar at bottom of screen is at full width, despite the fact that not all of the tree pane area is displayed. 

Another way of saying this - I narrow the tree and log panes, to the extent that the display of tree node headings is truncated. But the horizontal scrollbar at the bottom doesn't contract, and doesn't allow me to horizontally scroll the tree pane to expose the rest of the node headings. 
</t>
<t tx="ekr.20031218072017.672">This has been and continues to be a known issue with Tk. Has been logged as a bug; no response from the Tk folks. 

Here is a link to the Tk bug report: 

http://sourceforge.net/tracker/?func=detail&amp;aid=605277&amp;group_id=12997&amp;atid=112997 

Note the work-around/patch in the followup post at the bottom of that page. Commenting out some statements in text.tcl removes the problem. 
</t>
<t tx="ekr.20031218072017.673">The following bugs can not be fixed because they are Tk bugs.</t>
<t tx="ekr.20031218072017.674">Using leo under Windows, the keyboard shortcuts seem to use the "Caps Lock" state in determining the shift state when executing a shortcut.   For example, if the caps-lock key is on, then Ctrl-X is interpreted as Shift-Ctrl-X and cuts a node rather than selected text, and Shift-Ctrl-X is interpreted as Ctrl-X and cuts text.
</t>
<t tx="ekr.20031218072017.675">1. The border of the tree control is gray, and it is overwritten with large headlines.  This may be a Tk or Tkinter bug.

2. Adding trailing whitespace to a line in body text does not set the file-dirty mark.  This can never cause a derived file to become "out-of-synch" because the read code does not compare body text.

Apparently there is no way to fix this glitch because of holes in Tk's event mechanism.  Specifically, tree.idle_body_key has no way to tell directly what keystroke caused it to be entered.</t>
<t tx="ekr.20031218072017.676"></t>
<t tx="ekr.20031218072017.677">@nocolor

Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=1765069
By: dalcolmo

I use the bindings that come with Leo:

[keyboard shortcuts]
pastenode = Shift+Ctrl+V
gonextvisible = Alt+DnArrow
importtofile = Shift+Ctrl+F
writefilenodes = Shift+Ctrl+W
editheadline = Ctrl+H
markchangeditems = Alt+C
replace = Ctrl+=
goprevvisible = Alt+UpArrow
gotonextmarked = Alt+M
readoutlineonly = Shift+Ctrl+R
extractnames = Shift+Ctrl+N
gonext = Alt+Shift+DnArrow
findpanel = Ctrl+F
close = Ctrl+W
demote = Ctrl+}
tangle = Shift+Ctrl+T
extract = Shift+Ctrl+D
openpythonwindow = Alt+P
marksubheads = Alt+S
saveas = Shift+Ctrl+S
cut = Ctrl+X
preferences = Ctrl+Y
equalsizedpanes = Ctrl+E
cantundo = Ctrl+Z
open = Ctrl+O
promote = Ctrl+{
sortsiblings = Alt-A
unmarkall = Alt+U
mark = Ctrl+M
showinvisibles = Alt+V
exit = Ctrl-Q
insertnode = Ctrl+I
findprevious = F4
converttabs = Shift+Ctrl+J
save = Ctrl+S
tanglemarked = Shift+Ctrl+M
moveup = Ctrl+U
copynode = Shift+Ctrl+C
contractparent = Alt+0
selectall = Ctrl+A
setfont = Alt+Shift+T
aborteditheadline = Shift+Esc
goback = Alt+Shift+UpArrow
toggleactivepane = Ctrl+T
findnext = F3
tangleall = Shift+Ctrl+A
endeditheadline = Esc
deletenode = Shift+Ctrl+BkSp
cantredo = Shift+Ctrl+Z
new = Ctrl+N
contractall = Alt+1
moveleft = Ctrl+L
copy = Ctrl+C
paste = Ctrl+V
convertblanks = Shift+Ctrl+B
expandall = Alt+9
markchangedroots = Alt+R
cutnode = Shift+Ctrl+X
indent = Ctrl+]
gotonextchanged = Alt+D
expandnextlevel = Alt+=
setcolors = Alt+Shift+S
matchbrackets = Ctrl+K
movedown = Ctrl+D
clonenode = Ctrl+`
untangle = Shift+Ctrl+U
expandtolevel7 = Alt+7
expandtolevel6 = Alt+6
expandtolevel5 = Alt+5
expandtolevel4 = Alt+4
expandtolevel3 = Alt+3
expandtolevel2 = Alt+2
moveright = Ctrl+R
unindent = Ctrl+[
replacethenfind = Ctrl+-
extractsection = Shift+Ctrl+E
expandtolevel8 = Alt+8


However, I use a utility called AllChars (Free as in beer :-(  ) to be able
to type all kinds of chars on my US keyboard, and "Handything" to place the
windows on the screen (Win2000). Perhaps this makes a difference, although disabling
them did not seem to make it go away. Still, on pressing alt+ctrl+uparrow I
end up at the next upper node etc...

- Josef

</t>
<t tx="ekr.20031218072017.678">Create a Tk demo for each bug.</t>
<t tx="ekr.20031218072017.679">@color</t>
<t tx="ekr.20031218072017.680"># This file creates tk test code for prototyping.
@language tcltk
@others

go</t>
<t tx="ekr.20031218072017.681">proc go {} {
	# createLeo 1
	# createLeo 2
	# createFindPanel
	# createPrefsPanel
	# createColorPanel
	# toplevel .font
	# createFontPanel .font
	# createComparePanel
	# createWindowWithIcon
	# createWindowWithCursor
}
</t>
<t tx="ekr.20031218072017.682">proc createLeo { n } {

	toplevel .leo$n

	# Create two splitters
	createSplitter .leo$n.s 1
	createSplitter .leo$n.s.pane1.s 0 ;# contains tree and log
	
	text      .leo$n.s.pane2.body -bd 2 -yscrollcommand ".leo$n.s.pane2.scroll set" -setgrid 1
	scrollbar .leo$n.s.pane2.scroll -command ".leo$n.s.pane2.body yview"

	pack .leo$n.s.pane2.scroll -side right -fill y
	pack .leo$n.s.pane2.body -expand yes -fill both

	text .leo$n.s.pane1.s.pane1.tree -bd 2 -yscrollcommand ".leo$n.s.pane1.s.pane1.scroll set" -setgrid 1
	scrollbar .leo$n.s.pane1.s.pane1.scroll -command ".leo$n.s.pane1.s.pane1.tree yview"
	
	pack .leo$n.s.pane1.s.pane1.scroll -side right -fill y
	pack .leo$n.s.pane1.s.pane1.tree   -expand yes -fill both

	# -padx is needed to handle overlap of splitter bar
	text      .leo$n.s.pane1.s.pane2.log    -yscrollcommand ".leo$n.s.pane1.s.pane2.scroll set" -setgrid 1 -padx 4
	scrollbar .leo$n.s.pane1.s.pane2.scroll -command ".leo$n.s.pane1.s.pane2.log yview"
	pack .leo$n.s.pane1.s.pane2.scroll -side right -fill y
	pack .leo$n.s.pane1.s.pane2.log -expand yes -fill both
	
	createMenus $n
}</t>
<t tx="ekr.20031218072017.683">proc createMenus { n } {

	# Create the menu bar
	menu .leo$n.menu -tearoff 0

    set m .leo$n.menu.file
    menu $m -tearoff 0

    .leo$n.menu add cascade -label "File" -menu $m -underline 0
	# to do: fill in the commands...
    $m add command -label "Open..." -command {""}
    $m add command -label "New" -command {""}
    $m add command -label "Save" -command {""}
    $m add command -label "Save As..." -command {""}
    $m add separator
    $m add command -label "Print Setup..." -command {""}
    $m add command -label "Print..." -command {""}
    $m add separator
    $m add command -label "Quit" -command "destroy ."
	
	.leo$n configure -menu .leo$n.menu
}</t>
<t tx="ekr.20031218072017.684"></t>
<t tx="ekr.20031218072017.685"># Create a splitter window into which the caller packs widgets.

proc createSplitter {w verticalFlag} {
	# verticalFlag, height, width could be params
	frame $w -width 4i -height 3i
	frame $w.pane1
	frame $w.pane2
	if { $verticalFlag } {
		# Panes arranged vertically; horizontal splitter bar
		frame $w.bar -height 7
		place $w.pane1 -relx 0.5 -rely   0 -anchor n -relwidth 1.0 -relheight 0.5
		place $w.pane2 -relx 0.5 -rely 1.0 -anchor s -relwidth 1.0 -relheight 0.5
		place $w.bar   -relx 0.5 -rely 0.5 -anchor c -relwidth 1.0
		bind $w.bar &lt;ButtonPress-1&gt;		"onGrabSplitterBar $w 1"
		bind $w.bar &lt;B1-Motion&gt;			"onDragSplitterBar $w 1 %y"
		bind $w.bar &lt;ButtonRelease-1&gt;	"onDropSplitterBar $w 1 %y"
	} else {
		# Panes arranged horizontally; vertical splitter bar
		frame $w.bar -width 7
		place $w.pane1 -rely 0.5 -relx   0 -anchor w -relheight 1.0 -relwidth 0.5
		place $w.pane2 -rely 0.5 -relx 1.0 -anchor e -relheight 1.0 -relwidth 0.5
		place $w.bar   -rely 0.5 -relx 0.5 -anchor c -relheight 1.0
		bind $w.bar &lt;ButtonPress-1&gt;		"onGrabSplitterBar $w 0"
		bind $w.bar &lt;B1-Motion&gt;			"onDragSplitterBar $w 0 %x"
		bind $w.bar &lt;ButtonRelease-1&gt;	"onDropSplitterBar $w 0 %x"
	}
	# Borderwidth required
	$w.bar configure -borderwidth 2 -relief raised -background LightSteelBlue2 
	pack $w -expand yes -fill both
}
</t>
<t tx="ekr.20031218072017.686">proc onGrabSplitterBar {w verticalFlag} {

	# We should change the cursor here.
	
	# Changing the relief is pointless.
		# $w.bar configure -relief sunken
	
	# Changing colors is really bad
		# $w.bar configure -relief sunken -background LightSteelBlue4
		# $w.bar configure -background LightSteelBlue4
}</t>
<t tx="ekr.20031218072017.687">proc onDropSplitterBar {w verticalFlag xy} {

	# We should reset the cursor here.
	$w.bar configure -relief raised -background LightSteelBlue2
}
</t>
<t tx="ekr.20031218072017.688"># xy is the coordinate of the cursor relative to the bar, not the main window.

proc onDragSplitterBar {w verticalFlag xy} {

	if { $verticalFlag } {
		# Panes arranged vertically; horizontal splitter bar
		set wRoot	[winfo rooty $w]
		set barRoot [winfo rooty $w.bar]
		set wMax	[winfo height $w]
	} else {
		# Panes arranged horizontally; vertical splitter bar
		set wRoot	[winfo rootx $w]
		set barRoot [winfo rootx $w.bar]
		set wMax	[winfo width $w]
	}
	set offset [expr double($barRoot) + $xy - $wRoot ]
	# Adjust the pixels, not the frac.
	if { $offset &lt; 3 } { set offset 3 }
	if { $offset &gt; [expr $wMax - 2] } { set offset [expr $wMax - 2] }
	set frac [ expr double($offset) / $wMax ]
	# This redraws the splitter as the drag is occuring.
	# We could also redraw in onDropSplitterBar for non-dynamic updates.
	divideSplitter $w $verticalFlag $frac
	return $frac ;# No longer used
}</t>
<t tx="ekr.20031218072017.689">proc divideSplitter {w verticalFlag frac} {

	if { $verticalFlag } {
		# Panes arranged vertically; horizontal splitter bar
		place $w.bar -rely $frac
		place $w.pane1 -relheight $frac
		place $w.pane2 -relheight [expr 1 - $frac]
	} else {
		# Panes arranged horizontally; vertical splitter bar
		place $w.bar -relx $frac
		place $w.pane1 -relwidth $frac
		place $w.pane2 -relwidth [expr 1 - $frac]
	}
}</t>
<t tx="ekr.20031218072017.690">proc createFindPanel {} {

	toplevel .find
	&lt;&lt; Create the Find and Change panes &gt;&gt;
	&lt;&lt; Create two columns of checkboxes &gt;&gt;
	&lt;&lt; Create two rows of buttons &gt;&gt;
}
</t>
<t tx="ekr.20031218072017.691">frame .find.fc -bd 1m
pack  .find.fc -anchor n -expand yes -fill x

frame .find.fc.fpane -bd 1 -height 0.95i -width 1.5i
frame .find.fc.cpane -bd 1 -height 0.95i -width 1.5i

pack  .find.fc.fpane -anchor n -expand yes -fill x
pack  .find.fc.cpane -anchor s -expand yes -fill x

# Create the labels and text fields.
label .find.fc.fpane.lab -width 8 -text "Find:"
label .find.fc.cpane.lab -width 8 -text "Change:"
text  .find.fc.fpane.t -height 2 -width 20 ; # 2 lines, 20 characters
text  .find.fc.cpane.t -height 2 -width 20

pack  .find.fc.fpane.lab -side left 
pack  .find.fc.cpane.lab -side left
pack  .find.fc.cpane.t -side right -expand yes -fill both
pack  .find.fc.fpane.t -side right -expand yes -fill both
</t>
<t tx="ekr.20031218072017.692">frame .find.boxes -bd 1m
pack  .find.boxes -anchor n -expand yes -fill x

frame .find.boxes.lt -bd 1
frame .find.boxes.rt -bd 1
pack  .find.boxes.lt -side left  -padx 5m
pack  .find.boxes.rt -side right -ipadx 2m

# Create the left column
checkbutton .find.boxes.lt.batch -anchor w -text "Batch"
checkbutton .find.boxes.lt.wrap  -anchor w -text "Wrap around"
checkbutton .find.boxes.lt.word  -anchor w -text "Whole word"
checkbutton .find.boxes.lt.case  -anchor w -text "Ignore case"
checkbutton .find.boxes.lt.pat   -anchor w -text "Pattern match"
pack .find.boxes.lt.batch -fill x
pack .find.boxes.lt.wrap  -fill x
pack .find.boxes.lt.word  -fill x
pack .find.boxes.lt.case  -fill x
pack .find.boxes.lt.pat    -fill x

# Create the right column
checkbutton .find.boxes.rt.headline -anchor w -text "Search Headline Text"
checkbutton .find.boxes.rt.body     -anchor w -text "Search Body Text"
checkbutton .find.boxes.rt.outline  -anchor w -text "Suboutline Only"
checkbutton .find.boxes.rt.mark     -anchor w -text "Mark Changes"
checkbutton .find.boxes.rt.markch   -anchor w -text "Mark Finds"
pack .find.boxes.rt.headline -side top -fill x
pack .find.boxes.rt.body     -side top -fill x
pack .find.boxes.rt.outline  -side top -fill x
pack .find.boxes.rt.mark     -side top -fill x
pack .find.boxes.rt.markch   -side top -fill x
</t>
<t tx="ekr.20031218072017.693"># Create the button panes
frame .find.buttons -bd 1
pack  .find.buttons -anchor n -expand yes -fill x

frame .find.buttons2 -bd 1
pack  .find.buttons2 -anchor n -expand yes -fill x

# Create the first row of buttons
button      .find.buttons.find    -width 8 -text "Find"
checkbutton .find.buttons.reverse -width 8 -text "Reverse"
button      .find.buttons.findAll -width 8 -text "Find All"

pack .find.buttons.find    -pady 1m -padx 1m -side left
pack .find.buttons.reverse -pady 1m          -side left -expand 1
pack .find.buttons.findAll -pady 1m -padx 1m -side right

# Create the second row of buttons
button .find.buttons2.change     -width 8 -text "Change"
button .find.buttons2.changeFind           -text "Change, Then Find"
button .find.buttons2.changeAll  -width 8 -text "Change All"

pack .find.buttons2.change       -pady 1m -padx 1m -side left
pack .find.buttons2.changeFind   -pady 1m          -side left -expand 1
pack .find.buttons2.changeAll    -pady 1m -padx 1m -side right
</t>
<t tx="ekr.20031218072017.694">proc createPrefsPanel {} {

	toplevel .prefs
	&lt;&lt; Create the Global Options frame &gt;&gt;
	&lt;&lt; Create the Tangle Options frame &gt;&gt;
	&lt;&lt; Create the Target Language frame &gt;&gt;
}</t>
<t tx="ekr.20031218072017.695">frame .prefs.glob -bd 1m -relief groove
pack  .prefs.glob -anchor n -pady 1m -ipadx 1m -expand 1 -fill x

label .prefs.glob.title -text "Global Options..."
pack  .prefs.glob.title -pady 1m

# Page width &amp; page width
frame .prefs.glob.f
pack  .prefs.glob.f -anchor w -pady 1m -expand 1 -fill x

label .prefs.glob.f.lab -anchor w -padx 1m -text "Page width:"
text  .prefs.glob.f.txt -height 1 -width 4 ;# lines, characters
pack  .prefs.glob.f.lab .prefs.glob.f.txt -side left

label .prefs.glob.f.lab2 -padx 1m -text "Tab width:"
text  .prefs.glob.f.txt2 -height 1 -width 4 ;# lines, characters
pack  .prefs.glob.f.lab2 .prefs.glob.f.txt2 -side left

# Checkbuttons
checkbutton .prefs.glob.done -anchor w -text "Execute Leo_done.bat after Tangle"
checkbutton .prefs.glob.un   -anchor w -text "Execute Leo_un.bat after Tangle"
pack .prefs.glob.done .prefs.glob.un -fill x
</t>
<t tx="ekr.20031218072017.696"># Frame and title
frame .prefs.tangle -bd 1m -relief groove
pack  .prefs.tangle -anchor n -ipadx 1m -expand 1 -fill x

label .prefs.tangle.title -text "Default Options..."
pack  .prefs.tangle.title -pady 1m

# Label and text
label .prefs.tangle.lab -anchor w -text "Default tangle directory"
text  .prefs.tangle.txt -height 1 -width 30 ;# width significant

pack  .prefs.tangle.lab           -padx 1m -pady 1m -fill x
pack  .prefs.tangle.txt -anchor w -padx 1m -pady 1m -fill x

# Checkbuttons
checkbutton .prefs.tangle.header -anchor w -text "Tangle outputs header line"
checkbutton .prefs.tangle.doc    -anchor w -text "Tangle outputs document chunks"
pack .prefs.tangle.header .prefs.tangle.doc -fill x
</t>
<t tx="ekr.20031218072017.697"># Frame and title
frame .prefs.target -bd 1m -relief groove
pack  .prefs.target -anchor n -pady 1m -ipadx 1m -expand 1 -fill x

label .prefs.target.title -text "Default Target Language..."
pack  .prefs.target.title -pady 1m

# Frames for two columns of radio buttons
frame .prefs.target.lt 
frame .prefs.target.rt
pack  .prefs.target.lt -side left
pack  .prefs.target.rt -side right

## To do: make radio buttons functional.

# Left column of radio buttons
radiobutton .prefs.target.lt.c      -anchor w -text "C/C++"
radiobutton .prefs.target.lt.cweb   -anchor w -text "CWEB"
radiobutton .prefs.target.lt.html   -anchor w -text "HTML"
radiobutton .prefs.target.lt.java   -anchor w -text "Java"
radiobutton .prefs.target.lt.pascal -anchor w -text "Pascal"

pack .prefs.target.lt.c      -fill x
pack .prefs.target.lt.cweb   -fill x
pack .prefs.target.lt.html   -fill x
pack .prefs.target.lt.java   -fill x
pack .prefs.target.lt.pascal -fill x

# Right column of radio buttons
radiobutton .prefs.target.rt.perl   -width 12 -anchor w -text "Perl"
radiobutton .prefs.target.rt.pod              -anchor w -text "Perl + POD"
radiobutton .prefs.target.rt.plain            -anchor w -text "Plain Text"
radiobutton .prefs.target.rt.python           -anchor w -text "Python"

pack .prefs.target.rt.perl   -fill x
pack .prefs.target.rt.pod    -fill x
pack .prefs.target.rt.plain  -fill x
pack .prefs.target.rt.python -fill x
</t>
<t tx="ekr.20031218072017.698">proc showColorPicker {} {
	tk_chooseColor
}

proc createColorPanel {} {

	toplevel .color
	wm title .color "Syntax Coloring"

	frame .color.f -bd 2 -relief groove
	pack  .color.f -anchor n -pady 2 -ipady 1 -ipadx 0 -expand 1 -fill x
	
	# label .color.f.lab -text "Choose syntax colors..."
	# pack  .color.f.lab -side top -fill x
	
	frame .color.f.docF -bd 2
	pack  .color.f.docF
	label .color.f.docF.lab -text "Doc parts:" -width 14 -anchor e
	button .color.f.docF.show -text "" -bg "red" -width 4
	button .color.f.docF.set -text "Set..." -command showColorPicker
	pack  .color.f.docF.lab .color.f.docF.show .color.f.docF.set -side left -padx 3
	
	frame .color.f.cF -bd 2
	pack  .color.f.cF
	label .color.f.cF.lab -text "Comments:" -width 14 -anchor e
	button .color.f.cF.show -text "" -bg "red" -width 4
	button .color.f.cF.set -text "Set..." -command showColorPicker
	pack  .color.f.cF.lab .color.f.cF.show .color.f.cF.set -side left -padx 3

	frame .color.f.sF -bd 2
	pack  .color.f.sF
	label .color.f.sF.lab  -text "Strings:" -width 14 -anchor e
	button .color.f.sF.show -bg "green" -width 4
	button .color.f.sF.set -text "Set..." -command showColorPicker
	pack  .color.f.sF.lab .color.f.sF.show .color.f.sF.set -side left -padx 3
	
	frame .color.f.kF -bd 2
	pack  .color.f.kF
	label .color.f.kF.lab  -text "Keywords:" -width 14 -anchor e
	button .color.f.kF.show -bg "blue" -width 4
	button .color.f.kF.set -text "Set..." -command showColorPicker
	pack  .color.f.kF.lab .color.f.kF.show .color.f.kF.set -side left -padx 3
	
	frame .color.f.dF -bd 2
	pack  .color.f.dF
	label .color.f.dF.lab  -text "Directives:" -width 14 -anchor e
	button .color.f.dF.show -bg "blue" -width 4
	button .color.f.dF.set -text "Set..." -command showColorPicker
	pack  .color.f.dF.lab .color.f.dF.show .color.f.dF.set -side left -padx 3

	frame .color.f.snF -bd 2
	pack  .color.f.snF
	label .color.f.snF.lab  -text "Section names:" -width 14 -anchor e
	button .color.f.snF.show -bg "red" -width 4
	button .color.f.snF.set -text "Set..." -command showColorPicker
	pack  .color.f.snF.lab .color.f.snF.show .color.f.snF.set -side left -padx 3

	frame .color.f.unF -bd 2
	pack  .color.f.unF
	label .color.f.unF.lab  -text "Undefined names:" -width 14 -anchor e
	button .color.f.unF.show -bg "orange" -width 4 
	button .color.f.unF.set -text "Set..." -command showColorPicker
	pack  .color.f.unF.lab .color.f.unF.show .color.f.unF.set -side left -padx 3
}</t>
<t tx="ekr.20031218072017.699">proc createFontPanel {w} {

	frame $w.top
	frame $w.size -bd 2 -relief "ridge"
	frame $w.sample -bd 2 -relief "ridge"
	pack $w.top $w.size $w.sample -pady 2 -ipadx 5 -anchor w -fill both
	
	&lt;&lt; create family pane &gt;&gt;
	&lt;&lt; create style pane &gt;&gt;
	&lt;&lt; create buttons &gt;&gt;
	&lt;&lt; create size pane &gt;&gt;
	&lt;&lt; create sample pane &gt;&gt;
}</t>
<t tx="ekr.20031218072017.700">frame $w.top.family -bd 2 -relief "ridge"
label $w.top.family.lab -text "family"
listbox $w.top.family.box
pack $w.top.family.lab $w.top.family.box -anchor w

frame $w.top.style -bd 2 -relief "ridge"
frame $w.top.right -bd 2 -relief "flat"
pack $w.top.family $w.top.style $w.top.right -side left -fill y -padx 2 -pady 2 ; # -ipadx 5 -ipady 5</t>
<t tx="ekr.20031218072017.701">label $w.top.style.lab -text "Style"
pack  $w.top.style.lab -anchor w
foreach {name text} {
	b Bold
	i Italic
	u Underline
	o Overstrike
} {
	checkbutton $w.top.style.$name -text $text
	pack $w.top.style.$name -side top -anchor w -expand 1
}</t>
<t tx="ekr.20031218072017.702">foreach {name text} {
	ok OK
	cancel Cancel
	apply Apply
} {
	button $w.top.right.$name -text $text -width 6
	pack   $w.top.right.$name -side top -anchor w -pady 2m ; # -expand 1
}</t>
<t tx="ekr.20031218072017.703">frame $w.size.left
label $w.size.lab -text "Size"

text  $w.size.text -height 1 -width 4
pack  $w.size.lab -anchor w
pack  $w.size.left -side left
pack  $w.size.text -side left -fill x -expand 1

frame $w.size.left.row1
frame $w.size.left.row2
pack $w.size.left.row1 $w.size.left.row2 -side top

foreach {size} {
	8 12 18
} {
	radiobutton $w.size.left.row1.radio$size -text $size -variable size
	pack $w.size.left.row1.radio$size -side left
}
foreach {size} {
	10 14 24
} {
	radiobutton $w.size.left.row2.radio$size -text $size -variable size
	pack $w.size.left.row2.radio$size -side left
}</t>
<t tx="ekr.20031218072017.704">label $w.sample.lab -text "Sample"
pack  $w.sample.lab -side top -anchor w

label $w.sample.text -text "ABCabcXYZxyz123(may be changed)"

# entry $w.sample.text -background [$w.sample cget -background]
# $w.sample.text insert 0 "ABCabcXYZxyz123(may be changed)"

pack $w.sample.text -side top -anchor c -expand 1 -fill none

# $w.sample.text insert 0 "ABCabcXYZxyz123(may be changed)"
# $w.sample.text configure -state disabled</t>
<t tx="ekr.20031218072017.705">@ Build the font panel (except for the apply button, which is handled by the 'configure_apply procedure...
@c

proc origCreateFontPanel {w} {
	# Framed regions.  Do this with grid and labels, as that seems
	# to be the most effective technique in practise!
	frame $w.border1 -class DKFChooseFontFrame
	frame $w.border2 -class DKFChooseFontFrame
	frame $w.border3 -class DKFChooseFontFrame
	frame $w.border4 -class DKFChooseFontFrame
	set gap [get_gap $w]
	grid $w.border1 -row 0 -column 0 -rowspan 4 -columnspan 4 \
		-padx $gap -pady $gap -sticky nsew
	grid $w.border2 -row 0 -column 4 -rowspan 4 -columnspan 3 \
		-padx $gap -pady $gap -sticky nsew
	grid $w.border3 -row 4 -column 0 -rowspan 3 -columnspan 9 \
		-padx $gap -pady $gap -sticky nsew
	grid $w.border4 -row 7 -column 0 -rowspan 3 -columnspan 9 \
		-padx $gap -pady $gap -sticky nsew
	incr gap $gap
	foreach col {0 3 4 6 8} {
		grid columnconfigure $w $col -minsize $gap
	}
	foreach row {0 3 4 6 7 9} {
		grid rowconfigure    $w $row -minsize $gap
	}
	grid columnconfigure $w 1 -weight 1
	grid rowconfigure    $w 1 -weight 1
	grid rowconfigure    $w 8 -weight 1

	# Labels for the framed boxes &amp; focus accelerators for their contents
	foreach {subname row col focusWin} {
		Family 0 1 .family     
		Style  0 5 .style.sBold
		Size   4 1 .size.b8    
		Sample 7 1 .sample.text
	} {
		set l [label $w.lbl$subname]
		grid $l -row $row -column $col -sticky w
		## set accel [get_accel $l]
		## if {[string length $accel]} {
			## bind $w &lt;$accel&gt; [list focus $w$focusWin]
		##}
	}

	# Font families
	frame $w.familyBox
	listbox $w.family -exportsel 0 -selectmode browse \
		-xscrollcommand [list $w.familyX set] \
		-yscrollcommand [list $w.familyY set]
	scrollbar $w.familyX -command [list $w.family xview]
	scrollbar $w.familyY -command [list $w.family yview]
	##foreach family [list_families] {
	##	$w.family insert end ['map 'capitalise $family]
	##}
	grid $w.familyBox -row 1 -column 1 -rowspan 1 -columnspan 2 -sticky nsew
	grid columnconfigure $w.familyBox 0 -weight 1
	grid rowconfigure    $w.familyBox 0 -weight 1
	grid $w.family  $w.familyY -sticky nsew -in $w.familyBox
	grid $w.familyX            -sticky nsew -in $w.familyBox
	## bind $w.family &lt;1&gt; [namespace code {'change_family %W [%W nearest %y]}]
	## bindtags $w.family [concat [bindtags $w.family] key$w.family]
	## bind key$w.family &lt;Key&gt; [namespace code {'change_family %W active %A}]

	# Font styles.
	frame $w.style
	grid $w.style -row 1 -column 5 -sticky news
	grid columnconfigure $w.style 0 -weight 1
	foreach {fontstyle lcstyle row next prev} {
		Bold      bold       0 Italic    {}
		Italic    italic     1 Underline Bold
		Underline underline  2 Strikeout Italic
		Strikeout overstrike 3 {}        Underline
	} {
		set b $w.style.s$fontstyle
		checkbutton $b -variable [namespace current]::Style($lcstyle) \
			-command [namespace code 'set_font]
		grid $b -sticky nsew -row $row
		grid rowconfigure $w.style $row -weight 1
		if {[string length $next]} {
			## bind $b &lt;Down&gt; [list focus $w.style.s$next]
		}
		if {[string length $prev]} {
			## bind $b &lt;Up&gt; [list focus $w.style.s$prev]
		}
		## bind $b &lt;Tab&gt;       "[list focus $w.size.b8];break"
		## bind $b &lt;Shift-Tab&gt; "[list focus $w.family ];break"
		## set accel ['get_accel $b]
		## if {[string length $accel]} {
			## bind $w &lt;$accel&gt; "focus $b; $b invoke"
		## }
		## bind $b &lt;Return&gt; "$b invoke; break"
	}
	
	# Size adjustment.  Common sizes with radio buttons, and an
	# entry for everything else.
	frame $w.size
	grid $w.size -row 5 -column 1 -rowspan 1 -columnspan 7 -sticky nsew
	foreach {size row col u d l r} {
		8  0 0  {} 10 {} 12
		10 1 0   8 {} {} 14
		12 0 1  {} 14  8 18
		14 1 1  12 {} 10 24
		18 0 2  {} 24 12 {}
		24 1 2  18 {} 14 {}
	} {
		set b $w.size.b$size
		radiobutton $b -variable [namespace current]::Size -value $size \
			-command [namespace code 'set_font]
		grid $b -row $row -column $col -sticky ew
		#grid columnconfigure $w.size $col -weight 1
		## bif {[string length $u]} {bind $b &lt;Up&gt;    [list focus $w.size.b$u]}
		## bif {[string length $d]} {bind $b &lt;Down&gt;  [list focus $w.size.b$d]}
		## bif {[string length $l]} {bind $b &lt;Left&gt;  [list focus $w.size.b$l]}
		## bif {[string length $r]} {bind $b &lt;Right&gt; [list focus $w.size.b$r]}
		## bind $b &lt;Tab&gt;       "[list focus $w.size.entry ];break"
		## bind $b &lt;Shift-Tab&gt; "[list focus $w.style.sBold];break"
		## set accel ['get_accel $b]
		## if {[string length $accel]} {
			## bind $w &lt;$accel&gt; "focus $b; $b invoke"
		## }
		## bind $b &lt;Return&gt; "$b invoke; break"
	}
	entry $w.size.entry -textvariable [namespace current]::Size
	grid $w.size.entry -row 0 -column 3 -rowspan 2 -sticky ew
	grid columnconfigure $w.size 3 -weight 1
	## bind $w.size.entry &lt;Return&gt; [namespace code {'set_font;break}]
	
	# Sample text.  Note that this is editable
	frame $w.sample
	grid $w.sample -row 8 -column 1 -columnspan 7 -sticky nsew
	grid propagate $w.sample 0
	entry $w.sample.text -background [$w.sample cget -background]
	$w.sample.text insert 0 [option get $w.sample.text text Text]
	grid $w.sample.text
	
	# OK, Cancel and (partially) Apply.  See also 'configure_apply
	frame $w.butnframe
	grid $w.butnframe -row 0 -column 7 -rowspan 4 -columnspan 2 -sticky nsew -pady $gap
	foreach {but code} {
		ok  0
		can 1
	} {
		button $w.butnframe.$but -command [namespace code [list set Done $code]]
		pack   $w.butnframe.$but -side top -fill x -padx [expr {$gap/2}] -pady [expr {$gap/2}]
	}
	button $w.butnframe.apl
	## bind $w.butnframe.ok &lt;Down&gt; [list focus $w.butnframe.can]
	## bind $w.butnframe.can &lt;Up&gt; [list focus $w.butnframe.ok]
}</t>
<t tx="ekr.20031218072017.706"># Convenience proc to get the accelerator for a particular window
# if the user has given one.  Makes it simpler to get this right
# everywhere it is needed...

proc get_accel {w} {
	option get $w accelerator Accelerator
}</t>
<t tx="ekr.20031218072017.707"># Get the gap spacing for the frameboxes.  Use a user-specified
# default if there is one (that is a valid integer) and fall back
# to measuring/guessing otherwise.
proc get_gap {w} {
	set gap [option get $w lineGap LineGap]
	if {[catch {incr gap 0}]} {
		# Some cunning font measuring!
		label $w._testing
		set font [$w._testing cget -font]
		set gap [expr {[font metrics $font -linespace]/2+1}]
		destroy $w._testing
	}
	return $gap
}</t>
<t tx="ekr.20031218072017.708"># Get a sorted lower-case list of all the font families defined on
# the system.  A canonicalisation of [font families]
proc list_families {} {
	lsort [string tolower [font families]]
}
</t>
<t tx="ekr.20031218072017.709"># Path 1: text box
# Path 2: text box

# check: File extension: text box

# Radio buttons:
# 	* print all lines
# 	* print mismatches
# 	* print matches
	
# check: stop after first mismatch
# check: send result to file: text box
# check: generate diffs
# check: ignore whitespace
# check: ignore blank lines

proc createComparePanel {} {

	toplevel .comparePanel
}</t>
<t tx="ekr.20031218072017.710"># apparantly this is a Tk bug on XP.
proc createWindowWithCursor {} {

	toplevel .panel
	text     .panel.text
	.panel.text configure -cursor {gumby red green}
	pack .panel.text
}</t>
<t tx="ekr.20031218072017.711">proc createWindowWithIcon {} {

	global tk_library
	global tcl_patchLevel

	toplevel .panel
	
	# ***** Bitmaps apparently must be only 2 colors.  Photos are everything else!

	# wm iconbitmap .panel [image create photo -file c:/prog/leoCVS/leo/Icons/box00.GIF]
	#wm iconbitmap .panel [image create bitmap -file c:/prog/leoCVS/leo/Icons/box00.bmp]
	
	# no errors, no icon
	#wm iconbitmap .panel [image create bitmap @[file join c:/ Tcl lib tk8.3 demos images face.bmp]]
	# wm iconbitmap .panel @[file join c:/ Tcl lib tk8.3 demos images face.bmp]
	
	wm iconbitmap .panel info
	
	# Bitmap image1 not defined
	#wm iconbitmap .panel [image create photo -file [file join c:/ prog leoCVS leo Icons Leoapp.GIF]]
	
	# works
	#label .panel.bitmap -borderwidth 2 -relief sunken -bitmap @[file join $tk_library demos images face.bmp]
	#label .panel.lab -text $tk_library
	# label .panel.lab -borderwidth 2 -relief sunken -bitmap @[file join c:/ Tcl lib tk8.3 demos images face.bmp]
	# label .panel.lab -borderwidth 2 -relief sunken -bitmap @[file join c:/ prog leoCVS leo Icons face.bmp]
	
	# works!! (Only GIF allowed?)
	label .panel.lab -borderwidth 2 -relief sunken -image \
		[image create photo -file [file join c:/ prog leoCVS leo Icons Leoapp.GIF]]
	pack  .panel.lab

	label .panel.lab2 -text $tcl_patchLevel
	pack  .panel.lab2
}</t>
<t tx="ekr.20031218072017.712"># w is the frame to be created.
# This configures w.f to be the content.
# Typically, the user will pack more content into w.f.

proc myFrame {w args} {

	# Args must come in pairs.
    if {([llength $args] % 2) != 0} {
        error {wrong # args: should be "myFrame pathName ?options?"}
    }
	# Initialize the local vars.
    set allopts {} # options that apply everywhere.
    set fopts {} # border options.
    set lopts {} # label options (only for labels that are Tk label widgets)
    set labelanchor nw # The usual default.
    set padx 0
    set pady 0
    set bd 2
    set relief groove
    set labelwindow "" # Can be any Tk widget!
    set text "" # The user usually just sets this.
	# Set vars based on args.
    foreach {opt val} $args {
        switch -- $opt {
            -bd - -borderwidth {
                set bd $val
            }
            -relief {
                set relief $val
            }
            -text {
                lappend lopts $opt $val
                set text $val
            }
            -font - -fg - -foreground {
                lappend lopts $opt $val
            }
            -labelanchor {
                set labelanchor $val
            }
            -labelwindow {
                set labelwindow $val
            }
            -padx {
                set padx $val
            }
            -pady {
                set pady $val
            }
            -bg - -background - -cursor {
                lappend allopts $opt $val
            }
            default {
                error "Unknown or unsupported option: $opt"
            }
        }
    }
	# relief and border options are frame options.
    lappend fopts -relief $relief -bd $bd 
	# Create the frame and its border, w.bd.
    eval frame $w $allopts
    eval frame $w.bd $fopts $allopts
	# Create lw depending on args.
    if {$labelwindow != ""} {
		# Used the window the user passed in.
        set lw $labelwindow
        raise $labelwindow $w
    } elseif {$text != ""} {
        set lw $w.l
		# This is typical.
        eval label $lw $lopts $allopts -highlightthickness 0 -bd 0
    } else {
        set lw ""
    }
	# Create the frame's grid.
    eval frame $w.f $allopts
	# Configure w as a grid with 5 rows and columns:
	# 1 border, 2 pad, 3 w.f, 4 pad, 5 border.
    grid columnconfigure $w {2 4} -minsize $padx
    grid rowconfigure    $w {2 4} -minsize $pady
    grid columnconfigure $w 3     -weight 1
    grid rowconfigure    $w 3     -weight 1
    grid columnconfigure $w {1 5} -minsize $bd
    grid rowconfigure    $w {1 5} -minsize $bd
	# Create the border, w.bd.
    grid $w.bd -row 1 -col 1 -rowspan 5 -columnspan 5 -sticky news
	# Create the content, w.f in the center.
    grid $w.f -row 3 -col 3 -sticky news
	# Optional: configure lw, the label window in the frame.
    if {$lw != ""} {
		# n*, s*, w* and e* are patterns to -glob.
        switch -glob $labelanchor {
            n* {
                grid $lw -in $w -row 0 -col 2 -rowspan 2 -columnspan 3 -padx 4
            }
            s* {
                grid $lw -in $w -row 5 -col 2 -rowspan 2 -columnspan 3 -padx 4
            }
            w* {
                grid $lw -in $w -row 2 -col 0 -rowspan 3 -columnspan 2 -pady 4
            }
            e* {
                grid $lw -in $w -row 2 -col 5 -rowspan 3 -columnspan 2 -pady 4
            }
        }
		# set the sticky param to the first character of the labelanchor, i.e., n,s,e or w.
        grid $lw -sticky [string index $labelanchor 1]
    }
}</t>
<t tx="ekr.20031218072017.713">proc makeLeoFrame {} {

	# Create the outer labeld frame (doesn't actually have a label).
	myFrame .f -relief ridge -padx 5 -pady 5
	pack .f -fill both -expand 1 -padx 5 -pady 5
	
	# Initialize the grid positioin.
	set row 0
	set col 0
	# lp is the labelanchor value: 1 or two characters, the first character indicates side.
	foreach lp {nw n ne en e es se s sw ws w wn} {
		set w .f.f.f$lp
		# Create a myFrame: everything after %w are args.
		myFrame $w -text "Hej" -padx 2 -pady 2 -labelanchor $lp
		# Place the frame in the grid.
		grid $w -row $row -col $col -sticky news -padx 5 -pady 5
		# Create two buttons and pack them in the labeled frame.
		button $w.f.b1 -text Hoppsan
		button $w.f.b2 -text Quit -command exit
		pack $w.f.b1 $w.f.b2 -side top -fill x -padx 2 -pady 2
		# Bump the grid position.
		incr col
		if {$col == 3} {
			incr row
			set col 0
		}
	}
	
	# Create the last row.
	foreach wl {l1 l2 l3} {
		# Create the "special" label w.
		switch $wl {
			l1 {
				label .$wl -text Hej -bd 2 -relief groove
			} 
			l2 {
				checkbutton .$wl -text Hej
			} 
			l3 {
				radiobutton .$wl -text Hej
			}
		} 
		set w .f.f.f$wl
	
		# Create the labled frame using the -labelwindow option.
		myFrame $w -labelwindow .$wl -padx 2 -pady 2 -labelanchor nw
		# Place the labeled frame in the grid
		grid $w -row $row -col $col -sticky news -padx 5 -pady 5
		# Create two buttons and pack them in the labeled frame.
		button $w.f.b1 -text Hoppsan
		button $w.f.b2 -text Quit -command exit
		pack $w.f.b1 $w.f.b2 -side top -fill x -padx 2 -pady 2
		# Bump the grid position.
		incr col
		if {$col == 3} {
			incr row
			set col 0
		}
	}
}</t>
<t tx="ekr.20031218072017.714"></t>
<t tx="ekr.20031218072017.715"># This file creates tk test code for prototyping.
@language tcltk
@others

bindBug
</t>
<t tx="ekr.20031218072017.716">proc canvasBug {} {
	toplevel .test -bg "blue"
	canvas .test.c -bd 20 -bg "white" -relief "raised"
	pack .test.c -expand 1 -fill "both"
	text .test.c.t -height 1 -background "red"
	pack .test.c.t
	menu .test 
}
</t>
<t tx="ekr.20031218072017.717">proc bindBug {} {

	toplevel .top
	
	text .top.t
	pack .top.t
	
	menu .top.m   -tearoff 0
	menu .top.m.f -tearoff 0
	menu .top.m.e -tearoff 0
	
	.top.m.f add separator
	.top.m.f add command -label "A" -command {""}
	.top.m.f add command -label "B" -command {""}

	.top.m add cascade -label "File" -menu top.m.f -underline 0
	.top.m add cascade -label "Edit" -menu top.m.e -underline 0
	
	.top configure -menu .top.m
}
</t>
<t tx="ekr.20031218072017.718"></t>
<t tx="ekr.20031218072017.719">@nocolor

Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=1906790
By: dspeed
Open Discussion

-- Tabs are not expanded correctly in .c files, when language in preferences is set to c, and when the tabs occur in the middle of a line. The tabs are expanded as spaces until the next tab location is reached, then the tabs are expanded correctly. 
</t>
<t tx="ekr.20031218072017.720">This is a test line.</t>
<t tx="ekr.20031218072017.721">This is a test line.
put the text insertion point in the space between 'a' and 'test' above. Enter 3 tabs in a row and watch it not work.

If your expansion works correctly, then maybe something with leoconfig?  But wait, Im using the leoconfig from the beta download.

The contents of my Log Windows when opening this file:

Leo Log Window...
Pyton 2.2.2, Tk 8.3.2
reading d:\test.leo


</t>
<t tx="ekr.20031218072017.722">def setTabWidth (self, w):
	
	try: # This can fail when called from scripts
		# Use the present font for computations.
		font = self.bodyCtrl.cget("font")
		root = g.app.root # 4/3/03: must specify root so idle window will work properly.
		font = tkFont.Font(root=root,font=font)
		tabw = font.measure(" " * abs(w)) # 7/2/02
		# tablist = `tabw` + ' ' + `2*tabw`
		self.bodyCtrl.configure(tabs=tabw)
		self.tab_width = w
		# g.trace(w,tabw)
	except:
		g.es_exception()
		pass
</t>
<t tx="ekr.20031218072017.723"></t>
<t tx="ekr.20031218072017.724"></t>
<t tx="ekr.20031218072017.725">@nocolor

Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=1819473
By: nobody

When I create a @file node for a file with an uppercase name like TEST.CPP, by
picking up its name, an empty node is created. On saving the leo file, it
empties the TEST.CPP file!! BAD.

On the other hand, if I key in the filename in the dialog box as 'test.cpp'
(all lowercase) the node is created properly.

Rajiv Bhagwat
</t>
<t tx="ekr.20031218072017.726"></t>
<t tx="ekr.20031218072017.727"></t>
<t tx="ekr.20031218072017.729"></t>
<t tx="ekr.20031218072017.730">Emacs would have to allow the following:

- Full scripting in Python (embedded Python interpreter)
- The ability to draw the Leo screen.
- Full support for plugins, including alternate gui plugins.</t>
<t tx="ekr.20031218072017.731">@nocolor
http://sourceforge.net/forum/message.php?msg_id=2283466
By: billp9619

FYI
I played around with opml a while back and it seemed very versatile.

It basically consists of an xml file of nested outline tags similiar to v-nodes
in leo xml. This then works with an xsl stylesheet that displays the outline
in a browser with scripted outline manipulation. (Uses div tags for this
display.)

What I discovered is that any html can make up the outline nodes , even forms,
etc. which collapse with the outline interaction. Just that the angle brackets
in the html must be escaped as is done within leo t nodes in .leo xml.

Actually, it would be interesting to see an addin that just passes leo nodes
to opml and then pops into the default browser. Also keep in mind that javascript
has an eval() statement that can be passed any script as a string. The leo text
box could be a form textarea box except that then there is no way to emulate
syntax coloring. Alternatively, this could be a floating window wrappiing node
text in html/body. (if nothing else, just destroy/close the window and reinitialize).
Maybe the images used in the opml could have javascript events like onclick()
to trigger refreshing leo text box from the t-nodes stored in an array or in
hidden form boxes.

Of course the effect of the stylesheet could be done via python script if no
xslt in the receiving browser. The minimal html and script might be just boilerplate
output.

regards,
bill p</t>
<t tx="ekr.20031218072017.732"></t>
<t tx="ekr.20031218072017.733">@nocolor

http://sourceforge.net/forum/message.php?msg_id=2321235
By: paulpaterson

I think I understand what Samir is getting at. 

In PythonWin, or other IDE's for other languages, you are able to execute the
"current program" in a way that it will behave identically to if it had been
run from the command line.

For Python this requires,

1. That the script run with __name__ == "__main__", so that the standard "if
__name__ ..." section will be executed properly.

2. You are able to pass command line parameters to the script. In some IDE's
you are able to set default command line parameters and these are "injected"
into the sys.argv (or equivalent) so that, as far as the program is concerned,
it looks like you ran it from the command line with some aruments.


The underlying assumption is that you want to run an entire program from Leo,
not just a script. I would find this very useful also as I could run unit tests
or even my entire apps by just hitting, for exampe, F5.

Paul</t>
<t tx="ekr.20031218072017.734"></t>
<t tx="ekr.20031218072017.735">Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=2097076
By: nobody

Using Jason's code for Rebol and a visual DIFF, I was able to quickly add the
keywords for the assembler I use. I'm wondering if there is a way to tell Leo
to ignore keyword case -- at the present, each keyword is entered twice. Not
a big problem with modern editors, but it _would_ be nicer...

--Rich
</t>
<t tx="ekr.20031218072017.736">http://www.reportlab.com

import xml.sax
</t>
<t tx="ekr.20031218072017.737">From: "Scott Chapman" &lt;scott_list@mischko.com&gt;
To: &lt;edreamleo@charter.net&gt;
Sent: Monday, November 10, 2003 11:05 AM
Subject: Enhancement request: Make Leo deal with a database

It would be Way Cool if Leo could deal with psycopg or other DataBase 
API compliant implementations and fetch and store database records.

Details of what I'd like to see:

I'm working on Python source code. I want Leo to pull a source code file 
from a database record built something like this:

filename: text
updated: datetimestamp
code: text

Leo would insert a new record, not update an existing one, each time a 
Save was done, with a more current time stamp.  

When a File Open was requested (i.e. a node on a existing Leo outline 
was being pulled from a database), Leo would fetch the most recent 
time-stamped version only.

I use this same technique for my wiki pages.  It's very easy to 
implement in SQL and works great.

Leo would also need the ability to save the same file to a regular 
python source code file on disk at a specific location, so you'd have 
to be able to put more than one save/load directive in a given node.

This would provide a nice version history and could lead to other Useful 
Things in Leo.

Scott</t>
<t tx="ekr.20031218072017.738"></t>
<t tx="ekr.20031218072017.739"></t>
<t tx="ekr.20031218072017.740">1. Warn when creating _any_ new file.

2. Warn when rewriting any file that was not read properly.

This prevents "hijacking" an already existing file.</t>
<t tx="ekr.20031218072017.742">- Show changes:
	When a derived file is modified by an editor it would be very nice if Leo would:
	- flag the file as modified and,
	- flag (underline, color, diff, whatever) the parts that were modified.</t>
<t tx="ekr.20031218072017.743">Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=2205285
By: nobody

From: Rich

Some of the things I'd like to see in Leo:

A note window for each node. This is similar to (1), but a little fancier
looking. I envision a short window at the bottom of the edit window that could
hold notes and comments about the code, such as "Test this harder" or "Find
a better way of phrasing this". This is currently available in uSoft Office
and the Eclipse IDE (http://www.eclipse.org). Perhaps a numeric reference, such
as "&lt;&lt;1&gt;&gt;" could be used.

(2) Color ''and'' italic/bold characters with @markup. One thing I'd like to
''not'' see are the markup characters in @file-nosent files.  "~~red:NOTE:~~"
does nothing for readability in plain text.</t>
<t tx="ekr.20031218072017.744"></t>
<t tx="ekr.20031218072017.745">@nocolor

Hate to break into the grand design discussions, but here's a hopefully small thing. If you need to place a good sized copyright statement at the top of your files, LEO doesn't handle this case very cleanly. As I'm sure you're aware, you wind up with a matching number of @@first lines for each leading line in your source. 

As an example: 
# 1 
# 2 
# 3 
# 4 
# 5 
#@+leo 
#@+node:0::@file /tmp/firstcheck.py 
#@+body 
#@@first 
#@@first 
#@@first 
#@@first 
#@@first 
#@+doc 
# 
# How many firsts do I get? 

#@-doc 
#@@c 
Start code. 
#@-body 
#@-node:0::@file /tmp/firstcheck.py 
#@-leo 

My fellow co-workers who don't use LEO, aren't exactly loving me here. 

Might we introduce an: 

@@first &lt;num&gt; 

Type tag instead? So one '@@first 5' could represent all 5 of the above @@first lines? It makes for a smaller, cleaner LEO footprint and will tick off non-LEO users much less. 

Thanks. 

- ordinarius </t>
<t tx="ekr.20031218072017.746">@nocolor

Open Discussion
https://sourceforge.net/forum/message.php?msg_id=2090601
By: jasonic

I'll be happy to run some test and report to you. But  I suspect from your post
a slight misunderstanding about Alt+Tab.

Alt+Tab just toggles the active window.
It works fine with Leo on Windows wherver I have tried it.

Resizing wondows via hotkeys is another matter.
The special "Windows" Key + m will minimize all windows. 

But unfortunately I've not yet discovered any opposite shortcut to  maximize
all windows :-(
I've tried various 3rd party hotkey utililties, but somehow always end up dropping
them.

&lt;rant&gt;
I really hate wasting any time dragging windows around and resizing them or
clicking to bring them into top focus. As I work mainly with graphics, and mult-task
intesenlty bwetn apps,  it is especially important to reduce visual clutter
on screen.

For many years the way to do this has been combining maximized [or minimized]
windows with  Alt+Tab. Alt+Tab  lets one jump rapidly betwen open apps and windows
without ever need to repostion or resize them.

As a consultant, its one of the first things I ever teach clients. Often it
transforms their perception of using Windows.

It is so painful to watch people dragging and rescaling  windows all over the
place. Ironically, I've witnessed some very smart programmers fly through vi
or emacs but then slow to tortoises when navigation mice and windows. I beleive
as long as we have the curertn wnidows UI paradigm,  use of Alt+Tab is an essential
part of  GUI 'litteracy' - an essentail skill all shoudl have. Alas its still
little known or discussed.

There is also a nice toggle feature so one can jump back to the last app/window
as its first "stop". Typically one is working between two apps for some specific
task, even though many are open.

Keeping one's finger on the 'Alt' key then tapping 'Tab' lets one hop along
the list.

Adding 'shift' to the mix helps one to go in reverse. 

Above all one can keep one hand on the mouse, the other on the keyboard [ALt+Tab]
and ones mind/eye on teh screen. For me it means left hand "plays" the bass
pattern using Alt+Tab along with the clipboard shortcuts [CTRL+ z,x,c,v] ,while
right hand on the mouse mouse  provides the melody.

I've been using variations on the above since 1987 when I bought an Amiga2000.
I seem to recall SGI had one also. And after learning about Alt+Tab on windows,
I  found a utility to work the same way on Macintosh.  I am very happy to discover
that MacOSX now has built-in ALt+Tab :-)
&lt;/rant&gt;

Meanwhile, Iam  still wondering how to set Leo [3.12 beta 1, Python 2.2.2, Tk
8.3.2] default to a maxmimized or minimized window size by itself.

And also to remember the last size/position it had. I vaguely remember that
it used to do that, but perhaps I am mistaking it for some other software ?

thanks
Jason
</t>
<t tx="ekr.20031218072017.747"></t>
<t tx="ekr.20031218072017.748">Need a good yaml parser first: I don't want to write another parser by hand.</t>
<t tx="ekr.20031218072017.749"></t>
<t tx="ekr.20031218072017.750">@nocolor

As recent experiments have shown, it is very difficult to make changes in the body key handlers.

Furthermore, emacs essentially takes over the handling of _all_ keystrokes.  I like this approach, and it is way too much to do in 3.11 or 4.0.</t>
<t tx="ekr.20031218072017.751">@nocolor

How about a Emacs style meta-key(Esc?) followed by up or down? or F1/F2 ? anything to escape having to hold down three keys at the same time -- which seems to be common to other shortcut combinations too. so if you could put this in as an option in the preferences -- to turn on or off meta-key binding, that would let people choose what they prefer...

EKR:  This would require Leo to remember state in the event handlers.  It could be done, and having user-configurable shortcuts should reduce the need for this considerably.
</t>
<t tx="ekr.20031218072017.752">Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=1864564
By: btheado

WAS:RE: Leo 3.10 comments
edream wrote:
&gt;This is due to apparent glitches in the Tk event dispatching. The problem is
that pressing a control or alt or shift key _all by themselves_ will generate
keypress events that are passed on to Leo's key handlers

This should be easy to make simpler--just bind an empty script to &lt;Alt-KeyPress&gt;,
&lt;Shift-KeyPress&gt;, etc.  Tk chooses the most specific event it can find, so the
more general &lt;KeyPress&gt; handler will not fire.

On a broader note, when programming the text widget in Tcl/Tk, watching key
events is not the easiest way to detect changes in the text.  The only way the
text in a text widget can change is if either the delete or the insert subcommands
(methods) are called.  Any keypresses that end up changing text will have called
one of these subcommands.

So the simplest way to detect changes is to just intercept the calls to insert
and delete.  In Tcl/Tk intercepting these calls is pretty straightforward. 
I don't know if the same is true in Tkinter.

Also note the text widget in Tk8.4 (http://www.tcl.tk/man/tcl8.4/TkCmd/text.htm#M72)
has a built-in way of seeing if the text has changed

All this is just food for thought.  I don't know the details of Leo's code,
so it may not be very helpful.

Brian Theado

-----

Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=1864584
By: btheado

If you don't already know about Tk's bindtags command, then check it out.  It
should make things like this easy.  It basically allows you to dynamically add
and remove a whole group of bindings all at once without affecting any other
bindings.

i.e. if you have a window called .text:

# Enter escape mode
bind .text &lt;Esc&gt; {
    # add EscapeMode to .text's list of bindings by
    # using the bindtags command (not shown)
}
bind EscapeMode &lt;Up&gt; {
    # Add special escape mode up handling code here
    break
}
bind EscapeMode &lt;Down&gt; {
    # Add special escape mode down handling code
    break
}
etc.

# Leave escape mode
bind EscapeMode &lt;Esc&gt; {
    # remove EscapeMode from .text's list of bindings
    # by using the bindtags command (not shown)
}

See (http://wiki.tcl.tk/bindtags) for a page with more information about bindtags
and a link to the bindtags man page.

I just wanted you to be aware of this functionality if and when you do tackle
this.  I have found Tk's event handling, bindtags functionality very powerful,
easy to use, and quite elegant for the coding I've done.

Brian Theado</t>
<t tx="ekr.20031218072017.753">@nocolor

Michael Manti
mmanti@mac.com

P.S. I think a feature that could make Leo *the* IDE for developing in 
interpreted languages is something like the (X)Emacs comint-mode.el for 
interacting with the shell and interpreters.

comint-mode.el serves as the basis for interactive modes for a number of
languages--OCaml, Haskell, SML, among them. It allows for editing expressions in
one buffer and triggering their evaluation in another buffer that has an
interpreter running in it, along with entering commands in the interpreter
buffer and moving back and forth through the history of their evaluation.

Imagine being able to highlight a node in Leo, and have all the code in it and
its children evaluated in an interpreter running in a separate window or pane,
much as Leo can open a Python shell now. Users of those languages could build
plug-ins specific to their language atop that layer, and the @language directive
could activate that. I think that would be very cool.
</t>
<t tx="ekr.20031218072017.754"></t>
<t tx="ekr.20031218072017.755">Developers

 RE: tab spacing test   
2003-07-01 17:05  
Another thought that hit me last night. In vim for example, tabs are tabs until you're off the line if you've set expandtab. Never really thought about it before, but that's how it works. 

So you could do \t\t\t and then delete the entire space with 3 backspaces. But if you move the cursor off the line then it would take 12 backspaces (assuming you set the tabwidth to 4) because its been replaced with spaces. Its nice, and works well. 

- ordinarius  
</t>
<t tx="ekr.20031218072017.756"></t>
<t tx="ekr.20031218072017.757">Jonathan M. Gilligan

Calltips, as in IDLE. </t>
<t tx="ekr.20031218072017.758">@ignore
@language python</t>
<t tx="ekr.20031218072017.759">@nocolor

Writing an IDLE extension

An IDLE extension can define new key bindings and menu entries for IDLE
edit windows.  There is a simple mechanism to load extensions when IDLE
starts up and to attach them to each edit window. (It is also possible
to make other changes to IDLE, but this must be done by editing the IDLE
source code.)

The list of extensions loaded at startup time is configured by editing
the file config.txt; see below for details.

An IDLE extension is defined by a class.  Methods of the class define
actions that are invoked by those bindings or menu entries. Class (or
instance) variables define the bindings and menu additions; these are
automatically applied by IDLE when the extension is linked to an edit
window.

An IDLE extension class is instantiated with a single argument,
`editwin', an EditorWindow instance. The extension cannot assume much
about this argument, but it is guarateed to have the following instance
variables:

    text	a Text instance (a widget)
    io		an IOBinding instance (more about this later)
    flist	the FileList instance (shared by all edit windows)

(There are a few more, but they are rarely useful.)

The extension class must not bind key events.  Rather, it must define
one or more virtual events, e.g. &lt;&lt;zoom-height&gt;&gt;, and corresponding
methods, e.g. zoom_height_event(), and have one or more class (or instance)
variables that define mappings between virtual events and key sequences,
e.g. &lt;Alt-F2&gt;.  When the extension is loaded, these key sequences will
be bound to the corresponding virtual events, and the virtual events
will be bound to the corresponding methods.  (This indirection is done
so that the key bindings can easily be changed, and so that other
sources of virtual events can exist, such as menu entries.)

The following class or instance variables are used to define key
bindings for virtual events:

    keydefs		for all platforms
    mac_keydefs		for Macintosh
    windows_keydefs	for Windows
    unix_keydefs	for Unix (and other platforms)

Each of these variables, if it exists, must be a dictionary whose
keys are virtual events, and whose values are lists of key sequences.

An extension can define menu entries in a similar fashion.  This is done
with a class or instance variable named menudefs; it should be a list of
pair, where each pair is a menu name (lowercase) and a list of menu
entries. Each menu entry is either None (to insert a separator entry) or
a pair of strings (menu_label, virtual_event).  Here, menu_label is the
label of the menu entry, and virtual_event is the virtual event to be
generated when the entry is selected.  An underscore in the menu label
is removed; the character following the underscore is displayed
underlined, to indicate the shortcut character (for Windows).

At the moment, extensions cannot define whole new menus; they must
define entries in existing menus.  Some menus are not present on some
windows; such entry definitions are then ignored, but the key bindings
are still applied.  (This should probably be refined in the future.)

Here is a complete example example:

class ZoomHeight:

    menudefs = [
        ('edit', [
            None, # Separator
            ('_Zoom Height', '&lt;&lt;zoom-height&gt;&gt;'),
         ])
    ]

    windows_keydefs = {
        '&lt;&lt;zoom-height&gt;&gt;': ['&lt;Alt-F2&gt;'],
    }
    unix_keydefs = {
        '&lt;&lt;zoom-height&gt;&gt;': ['&lt;Control-z&gt;&lt;Control-z&gt;'],
    }

    def __init__(self, editwin):
        self.editwin = editwin

    def zoom_height_event(self, event):
        "...Do what you want here..."

The final piece of the puzzle is the file "config.txt", which is used
to to configure the loading of extensions.  For each extension,
you must include a section in config.txt (or in any of the other
configuration files that are consulted at startup: config-unix.txt,
config-win.txt, or ~/.idle).  A section is headed by the module name
in square brackets, e.g.

    [ZoomHeight]

The section may be empty, or it may define configuration options for
the extension.  (See ParenMatch.py for an example.)  A special option
is 'enable': including

    enable = 0

in a section disables that extension.  More than one configuration
file may specify options for the same extension, so a user may disable
an extension that is loaded by default, or enable an extension that is
disabled by default.

Extensions can define key bindings and menu entries that reference
events they don't implement (including standard events); however this is
not recommended (and may be forbidden in the future).

Extensions are not required to define menu entries for all events they
implement.

Note: in order to change key bindings, you must currently edit the file
keydefs.  It contains two dictionaries named and formatted like the
keydefs dictionaries described above, one for the Unix bindings and one
for the Windows bindings.  In the future, a better mechanism will be
provided.

</t>
<t tx="ekr.20031218072017.760"># IDLE reads several config files to determine user preferences.  This 
# file is the default config file.  When IDLE starts, it will look in
# the following four files in order:
#     config.txt                      the default config file
#     config-[win/unix/mac].txt       the generic platform config file
#     config-[sys.platform].txt       the specific platform config file
#     ~/.idle                         the user config file
#
# The last definition of each option is used.  For example, you can
# override the default window size (80x24) by defining width and
# height options in the EditorWindow section of your ~/.idle file
#
# IDLE extensions can be enabled and disabled by adding them to one of
# the config files.  To enable an extension, create a section with the
# same name as the extension, e.g. the [ParenMatch] section below.  To
# disable an extension, either remove the section or add the 'enable'
# option with the value 0.  

[EditorWindow]
width= 80
height= 24
# fonts defined in config-[win/unix].txt

[Colors]
normal-foreground= black
normal-background= white
# These color types are not explicitly defined= sync, todo, stdin
keyword-foreground= #ff7700
comment-foreground= #dd0000
string-foreground= #00aa00
definition-foreground= #0000ff
hilite-foreground= #000068
hilite-background= #006868
break-foreground= #ff7777
hit-foreground= #ffffff
hit-background= #000000
stdout-foreground= blue
stderr-foreground= red
console-foreground= #770000
error-background= #ff7777
cursor-background= black

[SearchBinding]

[AutoIndent]

[AutoExpand]

[FormatParagraph]

[ZoomHeight]

[ScriptBinding]

[CallTips]

[ParenMatch]
enable= 0
style= expression
flash-delay= 500
bell= 1
hilite-foreground= black
hilite-background= #43cd80
</t>
<t tx="ekr.20031218072017.761">@ignore
@language python

import string
import re

###$ event &lt;&lt;expand-word&gt;&gt;
###$ win &lt;Alt-slash&gt;
###$ unix &lt;Alt-slash&gt;

class AutoExpand:
	&lt;&lt; decls &gt;&gt;
	@others

</t>
<t tx="ekr.20031218072017.762">keydefs = {
    '&lt;&lt;expand-word&gt;&gt;': ['&lt;Alt-slash&gt;'],
}

unix_keydefs = {
    '&lt;&lt;expand-word&gt;&gt;': ['&lt;Meta-slash&gt;', '&lt;Alt-slash&gt;'],
}

menudefs = [
    ('edit', [
        ('E_xpand word', '&lt;&lt;expand-word&gt;&gt;'),
     ]),
]

wordchars = string.ascii_letters + string.digits + "_"

</t>
<t tx="ekr.20031218072017.763">def __init__(self, editwin):
    self.text = editwin.text
    self.state = None
</t>
<t tx="ekr.20031218072017.764">def expand_word_event(self, event):
    curinsert = self.text.index("insert")
    curline = self.text.get("insert linestart", "insert lineend")
    if not self.state:
        words = self.getwords()
        index = 0
    else:
        words, index, insert, line = self.state
        if insert != curinsert or line != curline:
            words = self.getwords()
            index = 0
    if not words:
        self.text.bell()
        return "break"
    word = self.getprevword()
    self.text.delete("insert - %d chars" % len(word), "insert")
    newword = words[index]
    index = (index + 1) % len(words)
    if index == 0:
        self.text.bell()            # Warn we cycled around
    self.text.insert("insert", newword)
    curinsert = self.text.index("insert")
    curline = self.text.get("insert linestart", "insert lineend")
    self.state = words, index, curinsert, curline
    return "break"
</t>
<t tx="ekr.20031218072017.765">def getwords(self):
    word = self.getprevword()
    if not word:
        return []
    before = self.text.get("1.0", "insert wordstart")
    wbefore = re.findall(r"\b" + word + r"\w+\b", before)
    del before
    after = self.text.get("insert wordend", "end")
    wafter = re.findall(r"\b" + word + r"\w+\b", after)
    del after
    if not wbefore and not wafter:
        return []
    words = []
    dict = {}
    # search backwards through words before
    wbefore.reverse()
    for w in wbefore:
        if dict.get(w):
            continue
        words.append(w)
        dict[w] = w
    # search onwards through words after
    for w in wafter:
        if dict.get(w):
            continue
        words.append(w)
        dict[w] = w
    words.append(word)
    return words</t>
<t tx="ekr.20031218072017.766">def getprevword(self):

    line = self.text.get("insert linestart", "insert")
    i = len(line)
    while i &gt; 0 and line[i-1] in self.wordchars:
        i = i-1
    return line[i:]
</t>
<t tx="ekr.20031218072017.767"># An IDLE extension that provides "Call Tips" - ie, a floating window that
# displays parameter information as you open parens.

import string,sys,types

class CallTips:
	&lt;&lt; class CallTips members &gt;&gt;

@others
</t>
<t tx="ekr.20031218072017.768">@others</t>
<t tx="ekr.20031218072017.769">menudefs = [ ]

keydefs = {
    '&lt;&lt;paren-open&gt;&gt;': ['&lt;Key-parenleft&gt;'],
    '&lt;&lt;paren-close&gt;&gt;': ['&lt;Key-parenright&gt;'],
    '&lt;&lt;check-calltip-cancel&gt;&gt;': ['&lt;KeyRelease&gt;'],
    '&lt;&lt;calltip-cancel&gt;&gt;': ['&lt;ButtonPress&gt;', '&lt;Key-Escape&gt;'],
}

windows_keydefs = { }

unix_keydefs = { }

</t>
<t tx="ekr.20031218072017.770">def __init__(self, editwin):

    self.editwin = editwin
    self.text = editwin.text
    self.calltip = None

    if hasattr(self.text, "make_calltip_window"):
        self._make_calltip_window = self.text.make_calltip_window
    else:
        self._make_calltip_window = self._make_tk_calltip_window
</t>
<t tx="ekr.20031218072017.771">def close(self):

    self._make_calltip_window = None
</t>
<t tx="ekr.20031218072017.772"># Makes a Tk based calltip window.
# Used by IDLE, but not Pythonwin.
# See __init__ above for how this is used.

def _make_tk_calltip_window(self):

    import CallTipWindow
    return CallTipWindow.CallTip(self.text)
</t>
<t tx="ekr.20031218072017.773">def _remove_calltip_window(self):
	
    if self.calltip:
        self.calltip.hidetip()
        self.calltip = None

</t>
<t tx="ekr.20031218072017.774">def paren_open_event(self, event):

    self._remove_calltip_window()
    arg_text = get_arg_text(self.get_object_at_cursor())
    if arg_text:
        self.calltip_start = self.text.index("insert")
        self.calltip = self._make_calltip_window()
        self.calltip.showtip(arg_text)
    return "" #so the event is handled normally.
</t>
<t tx="ekr.20031218072017.775">def paren_close_event(self, event):
	
    # Now just hides, but later we should check if other
    # paren'd expressions remain open.
    self._remove_calltip_window()
    return "" #so the event is handled normally.

</t>
<t tx="ekr.20031218072017.776">def check_calltip_cancel_event(self, event):

    if self.calltip:
        # If we have moved before the start of the calltip,
        # or off the calltip line, then cancel the tip.
        # (Later need to be smarter about multi-line, etc)
        if self.text.compare("insert", "&lt;=", self.calltip_start) or \
           self.text.compare("insert", "&gt;", self.calltip_start + " lineend"):
            self._remove_calltip_window()

    return "" #so the event is handled normally.
</t>
<t tx="ekr.20031218072017.777">def calltip_cancel_event(self, event):

    self._remove_calltip_window()
    return "" #so the event is handled normally.
</t>
<t tx="ekr.20031218072017.778">def get_object_at_cursor(self,wordchars="._" + string.ascii_letters + string.digits):
    # Usage of ascii_letters is necessary to avoid UnicodeErrors
    # if chars contains non-ASCII.

    # XXX - This needs to be moved to a better place
    # so the "." attribute lookup code can also use it.
    text = self.text
    chars = text.get("insert linestart", "insert")
    i = len(chars)
    while i and chars[i-1] in wordchars:
        i = i-1
    word = chars[i:]
    if word:
        # How is this for a hack!
        import sys, __main__
        namespace = sys.modules.copy()
        namespace.update(__main__.__dict__)
        try:
            return eval(word, namespace)
        except:
            pass
    return None # Can't find an object.
</t>
<t tx="ekr.20031218072017.779">@ Given a class object, return a function object used for the constructor,
i.e., __init__() or None if we can't find one.
@c

def _find_constructor(class_ob):

    try:
        return class_ob.__init__.im_func

    except AttributeError:
        for base in class_ob.__bases__:
            rc = _find_constructor(base)
            if rc is not None: return rc

    return None
</t>
<t tx="ekr.20031218072017.780">def get_arg_text(ob):

    # Get a string describing the arguments for the given object.
	argText = "" ; argOffset = 0
	if ob is not None:
		&lt;&lt; set fob depending on the type of ob &gt;&gt;
		&lt;&lt; get argText for functions and lambdas &gt;&gt;
		&lt;&lt; append the docstring if it exists &gt;&gt;
    return argText</t>
<t tx="ekr.20031218072017.781">if type(ob)==types.ClassType:
    # Look for the highest __init__ in the class chain.
    fob = _find_constructor(ob)
    if fob is None:
        fob = lambda: None
    else:
        argOffset = 1

elif type(ob)==types.MethodType:
    # A hack for methods: turn it into a function but drop the "self" param.
    fob = ob.im_func
    argOffset = 1

else:
    fob = ob</t>
<t tx="ekr.20031218072017.782">@ Examples

1. string.replace(  generates:

	(s, old, new, maxsplit=-1)
	replace (str, old, new[,maxsplit]) -&gt; string

2. d = {} ; d.get( generates:
	D.get(k[,d]) -&gt; D[k] if D.has_key(k), else d.  d defaults to None.

This last presumably comes from the docstring.
@c

# Try and build one for Python defined functions
if type(fob) in [types.FunctionType, types.LambdaType]:
    try:
        realArgs = fob.func_code.co_varnames[argOffset:fob.func_code.co_argcount]
        defaults = fob.func_defaults or []
		# Use "=value" for each value in defaults
        defaults = list(map(lambda name: "=%s" % name, defaults))
		# Use "" for all args without defaults.
        defaults = [""] * (len(realArgs)-len(defaults)) + defaults
		# Set items to a list of arg+deflt values.
        items = map(
			lambda arg, dflt: arg+dflt, realArgs, defaults )
	
        if fob.func_code.co_flags &amp; 0x4: items.append("...")
        if fob.func_code.co_flags &amp; 0x8: items.append("***")
        argText = string.join(items,", ")
        argText = "(%s)" % argText
    except:pass</t>
<t tx="ekr.20031218072017.783">doc = getattr(ob, "__doc__", "")
if doc:
	# Remove all leading tabs, blanks and newlines.
    while doc[:1] in " \t\n":
        doc = doc[1:]
		
	# EKR: I would replace runs of whitespace by a single blank.
	doc = doc.replace("\t"," ")
	while 1:
		n = len(doc)
		doc = string.replace("  "," ")
		if n == len(doc): break

	# Take at most 70 characters of the docstring.
    pos = doc.find("\n")
    if pos &lt; 0 or pos &gt; 70: pos = 70

	# Append the result to argText.
    if argText: argText += "\n"
    argText += doc[:pos]</t>
<t tx="ekr.20031218072017.784">if __name__=='__main__':

    def t1(): "()"
    def t2(a, b=None): "(a, b=None)"
    def t3(a, *args): "(a, ...)"
    def t4(*args): "(...)"
    def t5(a, *args): "(a, ...)"
    def t6(a, b=None, *args, **kw): "(a, b=None, ..., ***)"

    class TC:
        "(a=None, ...)"
        def __init__(self, a=None, *b): "(a=None, ...)"
        def t1(self): "()"
        def t2(self, a, b=None): "(a, b=None)"
        def t3(self, a, *args): "(a, ...)"
        def t4(self, *args): "(...)"
        def t5(self, a, *args): "(a, ...)"
        def t6(self, a, b=None, *args, **kw): "(a, b=None, ..., ***)"

    def test( tests ):
        failed=[]
        for t in tests:
            expected = t.__doc__ + "\n" + t.__doc__
            if get_arg_text(t) != expected:
                failed.append(t)
                print "%s - expected %s, but got %s" % (t, `expected`, `get_arg_text(t)`)
        print "%d of %d tests failed" % (len(failed), len(tests))

    tc = TC()
    tests = t1, t2, t3, t4, t5, t6, \
            TC, tc.t1, tc.t2, tc.t3, tc.t4, tc.t5, tc.t6

    test(tests)
</t>
<t tx="ekr.20031218072017.785">@ We have _lots_ of object available while Leo is running, so it would be possible to pass those objects to the tooltip routines.  However, it is not clear how useful all those global names will be.
@c

from leoGlobals import *
#print app()
#import __main__
#print __main__
#print __main__.__dict__
print es</t>
<t tx="ekr.20031218072017.786"></t>
<t tx="ekr.20031218072017.787"></t>
<t tx="ekr.20031218072017.789">@nocolor

need a delay on body display so alt+arrow keys arent slowed down while navigating.

EKR: Alt-Up and Alt-Down are bound to Go To Next/Prev visible.  The idea is that if we don't display the body text these keys will work faster.  </t>
<t tx="ekr.20031218072017.790">@nocolor

Other options I though would be really handy:

1. Use an existing node as a source also

2. Use an node from another Leo file.. I am not sure what the syntax for that
would be exactly

3. From a URL.. this would be really cool. People could post outlines not only
as existing Leo xml files, but as text files or even dynamic scripts. The code
to handle these would presumably need to deal with http:// intelligently. But
that's easy in Python. Rebol is great at that too.

4. Other XML file with valid filepaths in them.
That's probably a much bigger project like Leo 3.10  

Jason
</t>
<t tx="ekr.20031218072017.791"></t>
<t tx="ekr.20031218072017.792"></t>
<t tx="ekr.20031218072017.793">This is done automatically now!  I may have to use configure events.

&gt; When I have the 'split mode' set to display tree and log on left, and viewpane
on right, I sometimes need to increase the width of the window.

When I do the resize, the tree/log panes grow in proportion. I don't know about
others, but I'd much prefer if the tree/log panes stayed at the same width,
and only the view pane grew.
</t>
<t tx="ekr.20031218072017.794">@nocolor
Open Discussion
https://sourceforge.net/forum/message.php?msg_id=2012136
By: dalcolmo

rST would be a good choice, at least for static HTML pages. It provides
a minimalistic markup language, which is very well readable (much less distracting
than LaTeX), and can in principle also be translated to LaTeX, OpenOffice.org
etc.

I say in principle, because only the HTML generator is in the current distribution,
the others are "sandboxes", with little or no documentation, not even an istallation
description (at least not for Windows). See

http://docutils.sourceforge.net

- Josef
</t>
<t tx="ekr.20031218072017.795">@nocolor

By: nobody ( Nobody/Anonymous ) 
 RE: 3.11 todo list &amp; schedule   
2003-02-11 03:25  

Here are some features I'd like to see: 
 

 
3. Metatags. @sectionname or @savedate are expanded to the appropriate text when saved.

-marshall-  
</t>
<t tx="ekr.20031218072017.796">Possible option: ignore all comments.
Possible option: recurse into subdirectories.
			
I had originally thought that the following options would be good to have. (leoComparePanel.browser would have brought up a panel with these options on it.)  I have my doubts now: it's easy enough for the user to create derived files in some directory.  It's probably best to separate file creation from file comparison.

radio box: Select file
radio box: Select all files in directory
radio box: Select all files in directory with extension: box
radio box: Use nodes from outline (give name)
	radio box: Use nodes in selected outline
	radio box: Use nodes in entire outline
	
	radio box: Use only @file nodes
	radio box: Use only @file nodes
	radio box: Use both @file and @root nodes</t>
<t tx="ekr.20031218072017.797">I'd like to see leo's @file can be extended to cover more protocols, like REBOL's "read" does. 

in short, it would be very sweet if the following work: 

@file http://www.somedomain.org/python/foo.py 

@file pass@ftp.sd.org/python/foo.py" target="_blank" target="_new"&gt;ftp://user:pass@ftp.sd.org/python/foo.py&gt; 

while we are at it, what about xmlrpc/soap? 

should there be new directive, like @source ?</t>
<t tx="ekr.20031218072017.798">@nocolor

Developers
By: jasonic ( Jason Cunliffe ) 
 @dictionary   
2003-08-21 07:51

Auto-completion dictionary files would be excellent.
Ideally each Leo language extension could just point to a separate .dict file. 

Hopefully we can build some Leo plugin utilities to generate these .dict files by parsing any file you'd like to use a 'source' for Leo dictionary. They might need manual cleanup, but vcould be big timesaver, especially for XML formats and the like. Great to be able to sahre these easily. 

Interesting uses for Leo dictionaries beyond just autocompletion. 
I am thinking they might open the door to some powerful macro/template behavior. 

For example, you load a special dictionary to help certain kinds of repetitive formatted content. CSS and XSLT could be good candidates, but also any kind of mild databases or lists. Documentation.

So first we need basic dicts for Leo supported languages: Python, Perl, Javascript etc..

Then we need to consider that any Leo Node could have its own dictionary defined inline..

@dictionary filepath-to-custom-leo-dict

With collaborative LeoN this would be very useful because connected Leo sessions could invoke each other's dictionaries!!

- Jason  
</t>
<t tx="ekr.20031218072017.800">Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=1858824
By: gilshwartz
Open discusstion

Currently Extract Section is only available if the first line in a selection
is a section name &lt;&lt;x&gt;&gt;. I would like to propose a few enhancements I think
should be useful, while I believe most of the code is already implemented in
Leo.

1. If the first line in a selection is not &lt;&lt;x&gt;&gt;, than Extract Section WILL
make a section name from the first line (or a version of it, see below), leave
the section name in the body, create a new node with that section name, and
will copy the selection including the first line to the new node.

Rational: this is useful when selecting a function or a class. Thus the section
name becomes the function or the class definition. The section name can either
be the full first line, or, knowing the language, Leo can make a nice section
name like it does in import, e.g. "function foo", or "class bar", without the
parameters list.

2. Even better, when Extract Section is called WITHOUT a selection it will look
for the first function/class definition before the cursor's position and will
either use it as a selection and do 1 above, or just mark it as selection, which
will enable 1 above upon a second Extract Section.

Rational: Leo does it beautifully in import and when a node's code starts to
build it is most convenient. Also, I think a variation on this was recently
asked by another user.

3. Add an option Merge Section, which when called from a named section will
merge it back to all the sections containing it.

Rational: make it easy (together with 2) to create/delete sections until the
sections picture of a new code becomes clear.

Gil

--

Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=1859516
By: nobody

Simpler &amp; more intutive:
Mark text, select from menu - 'extract section', this presents a dialog box
in which you fill in the section name. It is too much work to type &lt;&lt;name&gt;&gt;
then select the whole thing...

As an enhancement, the dialog can show the first line of the selection as the
default section name, which obviously can be changed.

- Rajiv Bhagwat
</t>
<t tx="ekr.20031218072017.801">By: samcollett ( Sam Collett ) 
 Compressed LEO files   
2003-01-07 16:57


Would it be possible to have a new file format that was basically a compressed
version of LEO files? Maybe using the gzip compression method. You could then
save a lot of space when you do large files. Not being a professional
programmer myself (I mainly dabble in web design - HTML and Active Server
Pages) how difficult would this be to implement? You would just output using a
different file extension so users of the older versions can still use files
with the LEO extension.
</t>
<t tx="ekr.20031218072017.802"></t>
<t tx="ekr.20031218072017.803"></t>
<t tx="ekr.20031218072017.804"></t>
<t tx="ekr.20031218072017.805">Maybe the section operator could be customizable, 
I personally prefer the wiki way [[name of section]]. 

@setlink-tag [[ ]] 
</t>
<t tx="ekr.20031218072017.806">Jonathan M. Gilligan

Autocompletion of some sort (like IDLE's edit/expand-word command). It would be
nice also to have an autocompletion for noweb node names, possibly also with
autocompletion of abbreviations (as many text editors do) and/or
language-specific keywords taken from a dictionary selected by @language.
</t>
<t tx="ekr.20031218072017.807">@nocolor

Open Discussion
https://sourceforge.net/forum/message.php?msg_id=2003457
By: dsalomoni

Proposal: modify the code for @url so that if you type for example just "@url"
(no file specified) in a headline, a window pops up allowing you to browse the
local file system and select the file (similar to what browsers do when you
want to open a file).

This would be more convenient than manually writing @url
file://a/long/path/to/the/file. @read-only nodes already allow this, it would
perhaps be nice if all these types of plugins (@folder might be another one
for example) and directives (@file etc) had the same behavior (and this should
probably be specified in some guidelines for writing new plugins -see e.g. the
jedit plugin guidelines).

Davide
</t>
<t tx="ekr.20031218072017.808">I want to share a large Leo outline. New ideas come up aso people wnat ot keep adding fresh node headings and content. Often that content is clones from of toher distant parts of the tree. So one has to go off and search them, then create clone and drag it back to the new context wher yuo want to use it. I found quickly this is quite diffiucult to navigate. A lot of searching back an and forth and scrolling. Hard to keep a sequence. 

I tried using the 'mark' functions [ctrl+ m, alt+m] 
They are good,I cannot see how one can control them very well. ALT+m just keeps jumping one around the tree unitl it has visited all the marks. 

In many cases I imagine one simply needs to open a node, mark it and then jamp bacc to the last/previous node. Else do the same thing with marks. 

But what I am really looking for is a way to create a list of marks, and then be able to step through them sequentially. 

I think there is great uses for this. Your How-to for example lists a sequence of steps programmers need to follow. 

Imagine if one had an efficient 'Leo way' to help that How-to creation process. Or to preparare a review sequence to co-authors, colleagues, managers etc.. Or for tutorials and other Leo applications. 

Yes this is largely what Screenbook Maker XSLT does. But why not keep the functionality right within Leo. 

It could work along the lines of macro/history used in prgorams like photoshop. 

1. start sequence recorder, naming a sequence 
2. perform action, in this case navigate to the node you want. 
3. mark it to be added to the sequence 
4. go on to the next one 
5.repeat until done 
6. end sequence 

Using it 
7. Select "go to sequence" from menu or click on a Leo 'sequence' node. 
8. alt+something lets you jump through the list 
9. at the end you return to the beginning 

Editing 
10. It is important to be able to edit these on fly 
11. add delete reorder 
12. renaming shoudl also be allowed 

TreeSeqs 
13. Since this is Leo, people may naturally want to join sequences and thus add branches to existing sequences. This gets a little tricky becuase a sequence is by default a linear progression. 
So how best to enable the switch/troute action when it meets a branch? 

Status feedback 
14. Dedicated Leo sequence nodes should perhaps be a separate category with a graphic icon/fill color to help see them. Irefer to nodes which are a full set of sequences. 

15. likewise we should perhaps add an @seq symbol 

16. But also one may want to just embed seqs within other ergular Leo nodes, content. When we add a node to part of sequence how best to indicate. marked nodes geta little red vertical line. Sequenced marks should indicate, pehaps via its index number within the seqquence.The Leo log window coudl give more info. 

17. A sequence syntax might be: 
@seq seqname seqindex seqtitle 

seqname - unique name of leo sequence local to this .leo file 
examples: "howto33" or "gettingstarted" 

seqindex - unique integer controlling where this netry appears in the named Leo sequence 

seqtitle - text string which is more human readable than seqname' For the sequence itself this would be its disaplyed title. Wihtin a sequence for an entry, it woudl be the huam readbale idplasy title to ct as a metadata alais to its Leo node name. This improtant because the use context may change but we donlt want to fuck up the existing base Leo outline in any way. 

Conversions 
18. Sometimes you may want to take an exisiting bnode and sub-nodes and be able to do a "print-to-seq" on them. For example you already have 'diary' entries which have a clear historical order. But it might be useful to generate a Leo sequence of those. Then perhaps edit he sequence so it just highlights key events in the diary. Likewise any set of changes and extensions to a project. 

Implementation 
19. I imagine 90% of what I propose already exists in Leo. For many situation sequences are not suitable. People wil want ot be freeer. But for others, especially in project planning, management, presentation, training and fast review, I think they are invaluable. I see sequences as a full complent to Leo existing modes. 

20. I would be delighted to work on this, but need tmie as I am a complete Leo beginner. It is topic I spend a lot time with. Among possible tools to help prgram this there are sequential dictionaries. The module I like and have used in the past is by 'seqdict' by Wolfgang Grafen: 

http://home.germany.net/100-366919/Python/Modules/Modules.html 

I used it in conjucntion with the wonderful mxDateTime package for a Zope project about 2 years ago. 
http://www.egenix.com/files/python/mxDateTime.html 

./Jason 
</t>
<t tx="ekr.20031218072017.809"></t>
<t tx="ekr.20031218072017.810">I will wait. Here's clarification, when you're ready for it:

All of my projects are stored on remote computers, and accessed via FTP. 
What I want is basically the ability to open up these projects directly 
through leo, instead of transferring the files manually between my computer 
and the computers that hold my projects, preferably through FTP.

My solution: A new menu item called 'FTP' or 'Remote'. Click on this, and an 
FTP dialog opens up, with an empty list of FTP sites, and the ability to add 
more. You select a site, and it brings up a list of files. You select a 
file, and it is added to your project. When you hit 'save', it automatically 
does an FTP send.

Python makes this a lot easier with the builtin module 'ftplib'. I'm sure 
there are similar things for C++. I hope you take this idea into 
consideration.

Scott Powell
CEO, Dev Designs
</t>
<t tx="ekr.20031218072017.811">Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=1759009
By: davidmcnab

Hi,

I know I've put this one before, but as I use Leo more and more, the lack of
this is really pressing.

I tried your previous suggestion - opening another editor to have a view of
the file, but this is really painful, especially when I'm wanting to work on
two or more files simultaneously.

I've tried having files open in Emacs and writing them out, then doing a 'read
@file nodes', but this doesn't always work - the changes made in Emacs aren't
getting incorporated into the Leo tree (unless I quit/restart Leo).

(BTW - I'm using latest CVS of Leo).

What would make for Total Hacking Heaven is the ability to split a body pane
vertically or horizontally, and to be able to split the sub-panes
vertically/horizontally.

What that, hotkeys would move the cursor between panes (ie make different panes
'active'). Also, clicking on a node would display that node in the *currently
active* body pane.

This in place, as well as an accurage 'goto line number' feature would make
Leo even more of a killer app.

Cheers
David

</t>
<t tx="ekr.20031218072017.813"></t>
<t tx="ekr.20031218072017.814">@nocolor

It might be very useful to have the option to include files from a list. For
example one could point it at an external text file called 'leolist.txt'

c:\rebol\view\downloads\
e:\leo\newideas.txt
d:\outlines\latestnotes\

and it would just pass all those in as if they were part of dir in the above script.

EKR: There is a script that can do this, and we can't change the Tk dialogs.</t>
<t tx="ekr.20031218072017.815">This may not be possible in Python.

A "Recent Files" menu is sufficient.</t>
<t tx="ekr.20031218072017.816">Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=1861038
By: korakot

I would like leo to have something similar to call tips
for the tree pane. It's always inconvenient that I must
resize the pane just to read the full headString.
Allowing horizontal scroll is an option, though I prefer
that leo could popup a call tip of the full headstring
when the full headstring could not be display.

Please see how 'windows explorer' do this. It help
my 'exploring' a lot.
</t>
<t tx="ekr.20031218072017.817">@color</t>
<t tx="ekr.20031218072017.818"># This routine checks the structure of the receiver's tree.

def validateOutlineWithParent (self, pv):

	result = true # optimists get only unpleasant surprises.
	parent = self.parent()
	childIndex = self.childIndex()
	&lt;&lt; validate parent ivar &gt;&gt;
	&lt;&lt; validate childIndex ivar &gt;&gt;
	&lt;&lt; validate x ivar &gt;&gt;

	# Recursively validate all the children.
	child = self.firstChild()
	while child:
		r = child.validateOutlineWithParent ( self )
		if not r: result = false
		child = child.next()
	return result</t>
<t tx="ekr.20031218072017.819">if parent != pv:
	self.invalidOutline ( "Invalid parent link: " + parent.description() )</t>
<t tx="ekr.20031218072017.820">if pv:
	if childIndex &lt; 0:
		self.invalidOutline ( "missing childIndex" + childIndex )
	elif childIndex &gt;= pv.numberOfChildren():
		self.invalidOutline ( "missing children entry for index: " + childIndex )
elif childIndex &lt; 0:
	self.invalidOutline ( "negative childIndex" + childIndex )</t>
<t tx="ekr.20031218072017.821">if not self.t and pv:
	self.invalidOutline ( "Empty t" )</t>
<t tx="ekr.20031218072017.822">def createTopologyList (c=None,root=None,useHeadlines=false):
	
	"""Creates a list describing a node and all its descendents"""
	
	if not c: c = g.top()
	if not root: root = c.rootVnode()
	v = root
	if useHeadlines:
		aList = [(v.numberOfChildren(),v.headString()),]
	else:
		aList = [v.numberOfChildren()]
	child = v.firstChild()
	while child:
		aList.append(g.createTopologyList(c,child,useHeadlines))
		child = child.next()
	return aList</t>
<t tx="ekr.20031218072017.823"></t>
<t tx="ekr.20031218072017.824"></t>
<t tx="ekr.20031218072017.825"></t>
<t tx="ekr.20031218072017.826"></t>
<t tx="ekr.20031218072017.827"></t>
<t tx="ekr.20031218072017.828">http://sourceforge.net/forum/message.php?msg_id=2329053
By: dsalomoni

I would be reluctant to run this script in a linux environment, for the following
reasons:

1) chmod 666 on the leo config file makes it writable by anybody. 

2) on the other hand, leo is currently IMHO not suitable for generic linux
installations, because it does not support per-user config files, so you actually
need to either carve leoconfig.txt in stone (not realistic), or make it writable
by any user as above (not advisable).

3) having a single dummy leoID defeats its main purpose in a multi-user environment.
If you could set per-user config files, the leoID could by default simply derived
from the username.

As a matter of fact, I've been suggesting to friends etc wanting to try out
leo/install it on their systems not to do that globally.

So, my view is that we could:

1) in the short term, provide a simple per-user installation based for example
on the script above, but with path defaults pointing to the user's home dir
(and of course w/o the requirement to be root) -- with leoID generated by default
looking at the username.

2) in the medium term, provide per-user config possibilities -- this would possibly
allow for a system-wide installation of leo and still allow configuration, per-user
plugins, etc. But this is linked I guess to the decommissioning of/changes to
the leoConfig.leo machinery.

Davide</t>
<t tx="ekr.20031218072017.829">@nocolor

Interim design:
	
- use pluginsManager.txt in plugins directory.
	- Load file, scan for non-comment lines whose files are in plugins directory
- load plugins only if they are in pluginsManager.txt
- (later?) do a graphical interface for pluginsManager.txt

Simplest graphical interface:

- Listbox of all files.
- Enable, Disable, Revert, Cancel, OK buttons, Enable All, Disable All.
- Selecting an item in the Listbox enables one of the Enable/Disable buttons
- Selecting OK rewrites the file "in place" without altering comment lines.
- Opening file creates one entry for each .py file in plugins directory.

This is like the Spell-check plugin.</t>
<t tx="ekr.20031218072017.830"></t>
<t tx="ekr.20031218072017.833">@nocolor

Open discussion
By: jasonic ( Jason Cunliffe ) 
 use of @language   
2003-07-16 03:40  

I am wondering why Leo does not default to just use the file suffix in @file nodes, instead of obliging @language line in in the body pane 

For example any @file ending with a suffix as defined in the language extensions could just default to use those. 

".py" for python 
".r" for rebol 
".as" for actionscript etc.. 

Should anyone need to over-ride those, they could use @language.</t>
<t tx="ekr.20031218072017.834">@nocolor

How do we specify the secondary icon??

- add icon command.
- add icon to vnode or tnode</t>
<t tx="ekr.20031218072017.835">@color

@ This is not going well :-(  Probably what is happening is that Tk is competing with the win32 extensions in setting the clipboard.  It might not be so easy to

a) completely disable Tk's clipboard handling, in _both_ headlines and body text.
b) do the cut/paste operations "by hand".

This might require new body routlines to replace the selected text in the body.  And then there are issues relating to whether the headline or body text should be changed.  All in all, this is much harder than it looks.

Also, if one is not careful one can take fatal Python errors related to missing threads.  Pretty much a nightmare.</t>
<t tx="ekr.20031218072017.836">def updateEditMenu (self):

	c = self.c ; frame = c.frame ; gui = g.app.gui
	if not c: return
	try:
		# Top level Edit menu...
		enable = frame.menu.enableMenu
		menu = frame.menu.getMenu("Edit")
		c.undoer.enableMenuItems()
		&lt;&lt; enable cut/paste &gt;&gt;
		if 0: # Always on for now.
			menu = frame.menu.getMenu("Find...")
			enable(menu,"Find Next",c.canFind())
			flag = c.canReplace()
			enable(menu,"Replace",flag)
			enable(menu,"Replace, Then Find",flag)
		# Edit Body submenu...
		menu = frame.menu.getMenu("Edit Body...")
		enable(menu,"Extract Section",c.canExtractSection())
		enable(menu,"Extract Names",c.canExtractSectionNames())
		enable(menu,"Extract",c.canExtract())
		enable(menu,"Match Brackets",c.canFindMatchingBracket())
	except:
		g.es("exception updating Edit menu")
		g.es_exception()</t>
<t tx="ekr.20031218072017.837">def __init__ (self):

	# Initialize the base class.
	leoGui.leoGui.__init__(self,"tkinter")

	self.bitmap_name = None
	self.bitmap = None
	self.win32clipboard = None
	
	if 0: # This seems both dangerous and non-functional.
		if sys.platform == "win32":
			try:
				import win32clipboard
				self.win32clipboard = win32clipboard
			except:
				g.es_exception()</t>
<t tx="ekr.20031218072017.838">def createBindings (self,frame):
	
	t = self.bodyCtrl
	
	# Event handlers...
	t.bind("&lt;Button-1&gt;", frame.OnBodyClick)
	t.bind("&lt;Button-3&gt;", frame.OnBodyRClick)
	t.bind("&lt;Double-Button-1&gt;", frame.OnBodyDoubleClick)
	t.bind("&lt;Key&gt;", frame.body.onBodyKey)

	# Gui-dependent commands...
	t.bind(g.virtual_event_name("Cut"), frame.OnCut)
	t.bind(g.virtual_event_name("Copy"), frame.OnCopy)
	t.bind(g.virtual_event_name("Paste"), frame.OnPaste)</t>
<t tx="ekr.20031218072017.839">self.editMenuTopTable = (
	("Can't Undo","Ctrl+Z",c.undoer.undo), # &amp;U reserved for Undo
	("Can't Redo","Shift+Ctrl+Z",c.undoer.redo), # &amp;R reserved for Redo
	("-",None,None),
	("Cu&amp;t","Ctrl+X",f.OnCutFromMenu), 
	("Cop&amp;y","Ctrl+C",f.OnCopyFromMenu),
	("&amp;Paste","Ctrl+V",f.OnPasteFromMenu),
	("&amp;Delete",None,c.delete),
	("Select &amp;All","Ctrl+A",f.body.selectAllText),
	("-",None,None))</t>
<t tx="ekr.20031218072017.840"></t>
<t tx="ekr.20031218072017.841">def OnCut (self,event=None):
	
	"""The handler for the virtual Cut event."""

	frame = self ; c = frame.c ; v = c.currentVnode()
	
	# This is probably being subverted by Tk.
	if g.app.gui.win32clipboard:
		data = frame.body.getSelectedText()
		if data:
			g.app.gui.replaceClipboardWith(data)

	# Activate the body key handler by hand.
	frame.body.forceFullRecolor()
	frame.body.onBodyWillChange(v,"Cut")

def OnCutFromMenu (self):
	
	w = self.getFocus()
	w.event_generate(g.virtual_event_name("Cut"))
	
	frame = self ; c = frame.c ; v = c.currentVnode()

	if not frame.body.hasFocus(): # 1/30/04: Make sure the event sticks.
		frame.tree.onHeadChanged(v)




</t>
<t tx="ekr.20031218072017.842">def OnCopy (self,event=None):
	
	frame = self

	if g.app.gui.win32clipboard:
		data = frame.body.getSelectedText()
		if data:
			g.app.gui.replaceClipboardWith(data)
		
	# Copy never changes dirty bits or syntax coloring.
	
def OnCopyFromMenu (self):

	frame = self
	w = frame.getFocus()
	w.event_generate(g.virtual_event_name("Copy"))

</t>
<t tx="ekr.20031218072017.843">def OnPaste (self,event=None):
	
	frame = self ; c = frame.c ; v = c.currentVnode()

	# Activate the body key handler by hand.
	frame.body.forceFullRecolor()
	frame.body.onBodyWillChange(v,"Paste")
	
def OnPasteFromMenu (self):
	
	frame = self ; c = frame.c ; v = c.currentVnode()

	w = self.getFocus()
	w.event_generate(g.virtual_event_name("Paste"))
	
	if not frame.body.hasFocus(): # 1/30/04: Make sure the event sticks.
		frame.tree.onHeadChanged(v)</t>
<t tx="ekr.20031218072017.844"></t>
<t tx="ekr.20031218072017.845">def replaceClipboardWith (self,s):
	
	wcb = g.app.gui.win32clipboard

	if wcb:
		try:
			wcb.OpenClipboard(0)
			wcb.EmptyClipboard()
			wcb.SetClipboardText(s)
			wcb.CloseClipboard()
		except:
			g.es_exception()
	else:
		self.root.clipboard_clear()
		self.root.clipboard_append(s)</t>
<t tx="ekr.20031218072017.846">def getTextFromClipboard (self):
	
	wcb = g.app.gui.win32clipboard
	
	if wcb:
		try:
			wcb.OpenClipboard(0)
			data = wcb.GetClipboardData()
			wcb.CloseClipboard()
			# g.trace(data)
			return data
		except TypeError:
			# g.trace(None)
			return None
		except:
			g.es_exception()
			return None
	else:
		try:
			return self.root.selection_get(selection="CLIPBOARD")
		except:
			return None
</t>
<t tx="ekr.20031218072017.847"></t>
<t tx="ekr.20031218072017.848">@color

C:/prog/leoCVS/leo/src\leoAtFile.py:852: Parameter (root) not used
	# Could be removed
C:/prog/leoCVS/leo/src\leoFileCommands.py:429: Parameter (frame) not used
	# Could be removed
C:/prog/leoCVS/leo/src\leoUndo.py:1012: Parameter (text) not used
	# Will be removed
C:/prog/leoCVS/leo/src\leoUndo.py:1088: Parameter (newNewlines) not used
	# Could be removed</t>
<t tx="ekr.20031218072017.849">- remove text argument from undoReplace
	- remove oldText &amp; newText args from setUndoParams.</t>
<t tx="ekr.20031218072017.852">@nocolor

By: jwashin ( James Washington ) 
 Scrolling and the Tree Frame in Linux   
2003-10-20 12:13  

I'm using tk-8.4.3, python-2.2.3 on linux. The MouseWheel events do not work for me in the Tree Frame.

I added &lt;Button-4&gt; and &lt;Button-5&gt; bindings similar to the existing &lt;MouseWheel&gt; binding in LeoFrame.finishCreate(), associating them with two methods, LeoFrame.OnMouseScrollDown and LeoFrame.OnMouseScrollUp that took the appropriate parts of OnMouseWheel()

Now it works, sort-of. It scrolls properly unless the cursor is an I-Bar, e.g., over text. But at least this removes in-part the most glaring UI problem for me with Leo in tk. I suppose I am spoiled with the mouse wheel and want it to work everywhere.

Thanks for the great program.

-- Jim Washington  
</t>
<t tx="ekr.20031218072017.853">By: nobody ( Nobody/Anonymous ) 
 About "@file" untangling and clones   
2003-11-24 23:55  

 I really like generating source code with the @file directive. I like even most to see it untangle all my changes back to the outline! 

I only wish the untangler would not _only_ use the last instance of a clone in the untangling process...

I understand the difficulty of making it otherwise, but hey, here is my algo anyways...:
0-before untangling:save a reference copy of a found clone for each clone in the outline!
1-Start untangling,
2- once you reach a clone node: compare, if changed update all instances of outline
3-later in untangling, if same is found but no change in regards to reference copy, leave it as last found. ---END OF ALGORITHM

so you see, only the last _Changed_ instance of a clone would have precedence in the untangling process. I understand it would need some memory &amp; more process time for each clone in an outline! but I dont care if untangle takes 3 minutes instead of 3 seconds... and it just doubles the memory requirements... but untangling is a killer-Feature.
--
bolt  </t>
<t tx="ekr.20031218072017.855"></t>
<t tx="ekr.20031218072017.856">Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=2311537
By: ejoy

Hello delevepers:
  I think add a right button context menu in body panel is useful. Especially
for cut&amp;copy&amp;paste operations.


from windows' notepad:
undo
-----
cut
copy
paste
delete
------
select all

It's better to let plugin customize the menu.  </t>
<t tx="ekr.20031218072017.859"></t>
<t tx="ekr.20031218072017.862">- nullFrame class must have option to add nullUndoer (don't do this by default).
	
</t>
<t tx="ekr.20031218072017.863">@ This part of the tree shows views of the outline related to specific projects or tasks.  I put such headlines in parentheses, and that is just my convention.

I create a new view by cloning headlines that relate to its task, and moving the cloned headlines under the task headline.  This greatly increases my focus.  Any changes made in a task view to clone headlines affect the other clones scattered throughout the outline.  In particular, all @file nodes containing changed clones become marked as dirty, so they will be written when the entire outline is saved.
@c

@ignore
@language python
</t>
<t tx="ekr.20031218072017.864"></t>
<t tx="ekr.20031218072017.865">@ignore</t>
<t tx="ekr.20031218072017.866">@nocolor

- While translating all this I learned a lot about Leo and found a little bug in 
menu manager. Maybe is it Tkinter's responsibility : when writing an 
ampersand right before the last character of a translated name, this 
character is not underlined but the area just following it, yes...

- Translating the "Tangle..." label differently from the "Tangle" one is 
impossible without modifying leo's source code (same thing for "Untangle..." 
and "Untangle").

- Couldn't translate either "Show Invisibles" and "Hide Invisibles". First 
toggle is OK then an error occurs after the second...

At least a couple of suggestions to improve Leo's ability to be used as a PIM:

- When you paste text from another software it would be very convenient :
1. to directly insert a new Node, copying the clipboard into the body pane, 
with a copy of the first, say 40, characters as a Headline
2. to be able, with a keyboard shortcut, to copy any selected text in the 
body pane into the headline, replacing existing one if any.

These two functionnalities are extremly useful. I found and used them in a 
little shareware called "NoteCenter" running exclusively under Windows. And 
that's when I left Windows for Linux that I actively looked after some 
software to replace it. So did I find your fabulous Leo and I actually don't 
miss NoteCenter anymore since then.

- As was made with urls, I would greatly appreciate that any reference to an 
external document could be activated by key+clicking on it. For example : 
key+clicking on file://d:\archiver\docs\bricolage\chauffe-eau-solaire.pdf 
would automatically launch Acrobat Reader or go to the appropriate folder in 
Konqueror or any other File Manager from where you could launch the 
appropriate software to view or edit the file.

Frédéric Momméja</t>
<t tx="ekr.20031218072017.867">@nocolor

Oh, and i also got the following message when launching leo:
duplicate shortcut: Alt+Shift+S &lt;Alt-S&gt; Go To Next &amp;Sibling</t>
<t tx="ekr.20031218072017.868">@ignore

@ Used bind_all to set bindings throught the app.  

Well, everthing gets bound, but the old binding in the headline also has effect!  The fix is to bind to a workaround callback, OnControlT, which returns "break".  This has the effect of stamping out all other bindings.  Alas, it also means that Control-T can have no effect in headlines.

It looks like this is another Tk bug.  Nothing seems to reset the control-T binding.  Not bind("Control-T",""), not bind_all, not bind_class.</t>
<t tx="ekr.20031218072017.869"></t>
<t tx="ekr.20031218072017.870"></t>
<t tx="ekr.20031218072017.871"> @ignore
@nocolor
	
idle-time hook that checks for dirty @file nodes that have been modified in an external editor since the last check.

@color

</t>
<t tx="ekr.20031218072017.872">@nocolor

http://sourceforge.net/forum/message.php?msg_id=1847050
By: bwmulder

Maybe Leo could re-check the file system at each save. For each file, there are three possibilities:

[snip]

2. the file has been modified since the last check.

In this case, there was an external edit. If there was also a change within
leo, then we have a conflict which the user has to resolve somehow. Otherwise,
leo might offer the user to read the file and accept the internal edit.

[snip]</t>
<t tx="ekr.20031218072017.873"></t>
<t tx="ekr.20031218072017.874">test 1ab23 4bcdfghbe</t>
<t tx="ekr.20031218072017.875"></t>
<t tx="ekr.20031218072017.876"></t>
<t tx="ekr.20031218072017.889"># Warning: this code implies substantial changes to code that uses them, both core and scripts.

class position:
	
	"""A class representing a position in a traversal of a tree containing shared tnodes."""

	&lt;&lt; about the position class &gt;&gt;
	
	@others</t>
<t tx="ekr.20031218072017.890">@ This class provides tree traversal methods that operate on positions, not vnodes.  Positions encapsulate the notion of present position within a traversal.

Positions consist of a vnode and a stack of parent nodes used to determine the next parent when a vnode has mutliple parents.

Calling, e.g., p.moveToThreadNext() results in p being an invalid position.  That is, p represents the position following the last node of the outline.  The test "if p" is the _only_ correct way to test whether a position p is valid.  In particular, tests like "if p is None" or "if p is not None" will not work properly.

The only changes to vnodes and tnodes needed to implement shared tnodes are:

- The firstChild field becomes part of tnodes.
- t.vnodes contains a list of all vnodes sharing the tnode.

The advantages of using shared tnodes:

- Leo no longer needs to create or destroy "dependent" trees when changing descendents of cloned trees.
- There is no need for join links and no such things as joined nodes.

These advantages are extremely important: Leo is now scalable to very large outlines.

An important complication is the need to avoid creating temporary positions while traversing trees:
- Several routines use p.vParentWithStack to avoid having to call tempPosition.moveToParent().
  These include p.level, p.isVisible, p.hasThreadNext and p.vThreadNext.
- p.moveToLastNode and p.moveToThreadBack use new algorithms that don't use temporary data.
- Several lookahead routines compute whether a position exists without computing the actual position.</t>
<t tx="ekr.20031218072017.892">def __init__ (self,v,stack):

	"""Create a new position."""
	
	if v: self.c = v.c
	else: self.c = g.top()
	self.v = v
	assert(v is None or v.t)
	self.stack = stack[:] # Creating a copy here is safest and best.
	
	# Note: __getattr__ implements p.t.</t>
<t tx="ekr.20031218072017.893">def __cmp__(self,other):
	
	"""Return true if two postions are equivalent."""

	p1 = self ; p2 = other
	
	assert(p1 is not None)
	
	# g.trace(repr(p1),repr(p2))
	
	if p2 == None: return 1 # Special case. Not equal.
	
	if p1.v != p2.v or len(p1.stack) != len(p2.stack):
		return 1 # Not equal
		
	for i in xrange(len(p1.stack)):
		if p1.stack[i] != p2.stack[i]:
			return 1 # Not equal
			
	return 0 # Equal</t>
<t tx="ekr.20031218072017.915"># These methods are useful abbreviations.
# Warning: they make copies of positions, so they should be used _sparingly_

def getBack          (self): return self.copy().moveToBack()
def getFirstChild    (self): return self.copy().moveToFirstChild()
def getLastChild     (self): return self.copy().moveToLastChild()
def getLastNode      (self): return self.copy().moveToLastNode()
def getNext          (self): return self.copy().moveToNext()
def getNodeAfterTree (self): return self.copy().moveToNodeAfterTree()
def getNthChild    (self,n): return self.copy().moveToNthChild(n)
def getParent        (self): return self.copy().moveToParent()
def getThreadBack    (self): return self.copy().moveToThreadBack()
def getThreadNext    (self): return self.copy().moveToThreadNext()
def getVisBack       (self): return self.copy().moveToVisBack()
def getVisNext       (self): return self.copy().moveToVisNext()

# These are efficient enough now that iterators are the normal way to traverse the tree!

back          = getBack
firstChild    = getFirstChild
lastChild     = getLastChild
lastNode      = getLastNode
next          = getNext
nodeAfterTree = getNodeAfterTree
nthChild      = getNthChild
parent        = getParent
threadBack    = getThreadBack
threadNext    = getThreadNext
visBack       = getVisBack
visNext       = getVisNext</t>
<t tx="ekr.20031218072017.928">@
These routines change self to a new position "in place".
That is, these methods must _never_ call p.copy().

When moving to a nonexistent position, these routines simply set p.v = None,
leaving the p.stack unchanged. This allows the caller to "undo" the effect of
the invalid move by simply restoring the previous value of p.v.

These routines all return self on exit so the following kind of code will work:
	after = p.copy().moveToNodeAfterTree()</t>
<t tx="ekr.20031218072017.930">def moveToBack (self):
	
	"""Move self to its previous sibling."""
	
	p = self

	p.v = p.v and p.v._back
	
	return p</t>
<t tx="ekr.20031218072017.931">def moveToFirstChild (self):

	"""Move a position to it's first child's position."""
	
	p = self

	if p:
		child = p.v.t._firstChild
		if child:
			if p.isCloned():
				p.stack.append(p.v)
				#g.trace("push",p.v)
				#if len(p.stack) &gt; 5:
				#	g.trace("position stack overflow")
				#	raise StopIteration
			p.v = child
		else:
			p.v = None
		
	return p

</t>
<t tx="ekr.20031218072017.932">def moveToLastChild (self):
	
	"""Move a position to it's last child's position."""
	
	p = self

	if p:
		if p.v.t._firstChild:
			child = p.v.lastChild()
			if p.isCloned():
				g.trace("push")
				p.stack.append(p.v)
			p.v = child
		else:
			p.v = None
			
	return p
</t>
<t tx="ekr.20031218072017.933">def moveToLastNode (self):
	
	"""Move a position to last node of its tree without calling p.copy()."""
	
	p = self

	if p:
		if p.v._next:
			# Let p.moveToThreadBack do the heavy lifting.
			p.moveToNext()
			p.moveToThreadBack()
		else:
			&lt;&lt; simulate repeated "lookahead" calls to p.moveToThreadNext() &gt;&gt;
				
	return p</t>
<t tx="ekr.20031218072017.934">def moveToNext (self):
	
	"""Move a position to its next sibling."""
	
	p = self
	
	p.v = p.v and p.v._next
	
	return p</t>
<t tx="ekr.20031218072017.935">def moveToNodeAfterTree (self):
	
	"""Move a position to the node after the position's tree."""
	
	p = self
	
	while p:
		if p.v._next:
			p.moveToNext()
			break
		p.moveToParent()

	return p</t>
<t tx="ekr.20031218072017.936">def moveToNthChild (self, n):
	
	p = self
	
	if p:
		child = p.v.nthChild(n)
		if child:
			if p.v.isCloned():
				p.stack.append(p.v)
			p.v = child
		else:
			p.v = None
			
	return p</t>
<t tx="ekr.20031218072017.937">def moveToParent (self):
	
	"""Move a position to its parent position."""
	
	p = self

	if p.v._parent:
		p.v = p.v._parent
	elif p.stack:
		p.v = p.stack.pop()
		# g.trace("pop",p.v)
	else:
		p.v = None
		
	return p</t>
<t tx="ekr.20031218072017.938">def moveToThreadBack (self):
	
	"""Move a position to it's threadBack position without calling p.copy()."""

	p = self

	if p:
		if p.v._back:
			p.moveToBack()
			if p.v.t._firstChild:
				level1 = p.level()
				p.moveToFirstChild()
				assert(p.level() == level1 + 1)
				while p.checkNextThreadNextLevel(level1):
					p.moveToThreadNext()
		else:
			p.moveToParent()

	return p</t>
<t tx="ekr.20031218072017.939">def moveToThreadNext (self):
	
	"""Move a position to the next a position in threading order."""
	
	p = self

	if p:
		if p.v.t._firstChild:
			p.moveToFirstChild()
		elif p.v._next:
			p.moveToNext()
		else:
			p.moveToParent()
			while p:
				if p.v._next:
					p.moveToNext()
					break #found
				p.moveToParent()
			# not found.
				
	return p</t>
<t tx="ekr.20031218072017.940">def moveToVisBack (self):
	
	"""Move a position to the position of the previous visible node."""

	p = self
	
	if p:
		p.moveToThreadBack()
		while p and not p.isVisible(): # v.isVisible no longer exists.
			p.moveToThreadBack()
			
	return p</t>
<t tx="ekr.20031218072017.941">def moveToVisNext (self):
	
	"""Move a position to the position of the next visible node."""

	p = self
	
	if p:
		p.moveToThreadNext()
		while p and not p.isVisible(): # v.isVisible no longer exists.
			p.moveToThreadNext()
			
	return p</t>
<t tx="ekr.20031218072017.951"># Define the meaning of status bits in new vnodes.

# Archived...
clonedBit	  = 0x01 # true: vnode has clone mark.

# not used	 = 0x02
expandedBit = 0x04 # true: vnode is expanded.
markedBit	  = 0x08 # true: vnode is marked
orphanBit	  = 0x10 # true: vnode saved in .leo file, not derived file.
selectedBit = 0x20 # true: vnode is current vnode.
topBit		    = 0x40 # true: vnode was top vnode when saved.

# Not archived...
dirtyBit    =	0x060
richTextBit =	0x080 # Determines whether we use &lt;bt&gt; or &lt;btr&gt; tags.
visitedBit	 = 0x100
</t>
<t tx="ekr.20031218072017.953">@nocolor

The basic ideas:
	
- Precompute mThreadNext when linking nodes.

- It is optional to precompute mThreadBack: it is much less useful.

- threadNext() just returns mThreadNext.

- computeThreadNext() returns the new value for mThreadNext.

- unlinkThreadLinks() clears the thread links to and from a node _before_ the node is unlinked.

- updateThreadLinks() sets the thread links to and from a node _after_ the node is linked.

@color
</t>
<t tx="ekr.20031218072017.954">@color

# Init stats.
from leoGlobals import *
clear_stats()

# Print stats.
from leoGlobals import *
print_stats()

# Saving LeoPy.leo generated 46740 calls to v.threadNext!

@nocolor

Statistics after reading LeoPy.leo:

linkAfter 4966
linkAsNthChild 1706
linkAsRoot 3
threadNext 37412
unlink 3

*** It's possible that precomputing threadNext might be useful.
*** Using a fast xml parser might speed up reads much more...</t>
<t tx="ekr.20031218072017.955">@nocolor

Python 2.2.2 (#37, Oct 14 2002, 17:02:34) [MSC 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import leo
&gt;&gt;&gt; leo.profile()

(Opened LeoDocs.leo)

         281689 function calls (279448 primitive calls) in 13.433 CPU seconds

*** It's possible that precomputing threadNext might be useful.

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)

     8893    0.313    0.000    0.465    0.000 leoNodes.py:1259(threadNext)  ****
      493    0.013    0.000    0.191    0.000 leoNodes.py:1244(threadBack)
       87    0.020    0.000    0.157    0.002 leoNodes.py:1173(lastNode)
      843    0.067    0.000    0.096    0.000 leoNodes.py:1197(level)
    16674    0.086    0.000    0.086    0.000 leoNodes.py:1210(next)
    11284    0.061    0.000    0.061    0.000 leoNodes.py:967(firstChild)
     8270    0.042    0.000    0.042    0.000 leoNodes.py:1235(parent)
      377    0.012    0.000    0.018    0.000 leoNodes.py:983(lastChild)

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
 
  1779/11    0.296    0.000    1.732    0.157 leoFileCommands.py:765(getVnode) ****
    38430    0.609    0.000    0.986    0.000 leoFileCommands.py:293(matchTag) ********
     1365    0.151    0.000    0.804    0.001 leoFileCommands.py:714(getTnode) *
     1019    0.015    0.000    0.481    0.000 leoNodes.py:810(isAtIgnoreNode) 
     1019    0.128    0.000    0.466    0.000 leoGlobals.py:2507(is_special) *
    11223    0.146    0.000    0.433    0.000 leoFileCommands.py:274(getTag) *
     1779    0.072    0.000    0.410    0.000 leoFileCommands.py:76(createVnode)
    38430    0.377    0.000    0.377    0.000 leoFileCommands.py:910(skipWsAndNl) ****
     3146    0.077    0.000    0.330    0.000 leoFileCommands.py:358(getEscapedString)
     3146    0.117    0.000    0.225    0.000 leoFileCommands.py:1040(xmlUnescape) *
     8695    0.138    0.000    0.202    0.000 leoGlobals.py:2564(match_word) *
    21554    0.164    0.000    0.164    0.000 string.py:164(find) *
     7700    0.104    0.000    0.162    0.000 leoGlobals.py:2616(skip_line) *
     3134    0.038    0.000    0.160    0.000 leoFileCommands.py:210(getDquote) 
     2986    0.041    0.000    0.148    0.000 leoFileCommands.py:213(getIndex) 
     1387    0.042    0.000    0.142    0.000 leoNodes.py:1772(insertAfter)
    12659    0.109    0.000    0.109    0.000 string.py:362(replace) *
     2998    0.082    0.000    0.108    0.000 leoFileCommands.py:218(getLong)
     2012    0.037    0.000    0.104    0.000 leoNodes.py:712(afterHeadlineMatch)
     1365    0.038    0.000    0.098    0.000 leoFileCommands.py:926(newTnode)
     1006    0.013    0.000    0.096    0.000 leoNodes.py:765(isAtRawFileNode)
     1006    0.016    0.000    0.083    0.000 leoNodes.py:744(atRawFileNodeName)
     1006    0.013    0.000    0.062    0.000 leoNodes.py:755(isAtFileNode)
     3158    0.061    0.000    0.061    0.000 leoGlobals.py:3187(toUnicode)
     1782    0.025    0.000    0.055    0.000 leoNodes.py:1345(initHeadString)
     1365    0.019    0.000    0.050    0.000 leoNodes.py:351(setTnodeText)
     1006    0.013    0.000    0.049    0.000 leoNodes.py:738(atFileNodeName)
     2012    0.028    0.000    0.042    0.000 leoGlobals.py:2539(match)
      391    0.012    0.000    0.036    0.000 leoNodes.py:1801(insertAsNthChild)
     4055    0.035    0.000    0.035    0.000 leoFileCommands.py:895(skipWs)
     1801    0.023    0.000    0.033    0.000 leoNodes.py:1092(isDirty)
     1051    0.016    0.000    0.025    0.000 leoFileCommands.py:285(matchChar)
     3302    0.020    0.000    0.020    0.000 leoNodes.py:1688(setJoinList)
      485    0.014    0.000    0.019    0.000 leoNodes.py:1136(isVisible)
     3302    0.017    0.000    0.017    0.000 leoNodes.py:427(setJoinHead)
     1779    0.012    0.000    0.012    0.000 leoNodes.py:1445(clearOrphan)
     2291    0.012    0.000    0.012    0.000 leoNodes.py:1042(getJoinList)
     1801    0.011    0.000    0.011    0.000 leoNodes.py:309(isDirty)
</t>
<t tx="ekr.20031218072017.956"></t>
<t tx="ekr.20031218072017.957">def linkAfter (self,v):
	
	"""Link self after v"""

	self.mParent = v.mParent
	self.mBack = v
	self.mNext = v.mNext
	v.mNext = self
	if self.mNext:
		self.mNext.mBack = self

	self.updateThreadLinks()
</t>
<t tx="ekr.20031218072017.958">def linkAsNthChild (self, p, n):

	"""Links self as the n'th child of p"""

	v = self
	# trace(`v` + ", " + `p` + ", " + `n`)
	v.mParent = p
	if n == 0:
		v.mBack = None
		v.mNext = p.mFirstChild
		if p.mFirstChild:
			p.mFirstChild.mBack = v
		p.mFirstChild = v
	else:
		prev = p.nthChild(n-1) # zero based
		assert(prev)
		v.mBack = prev
		v.mNext = prev.mNext
		prev.mNext = v
		if v.mNext:
			v.mNext.mBack = v
			
	v.updateThreadLinks()
</t>
<t tx="ekr.20031218072017.959">def linkAsRoot(self, oldRoot = None):
	
	"""Link self as the root vnode.
	Link in the rest of the true only if oldRoot != None.
	Otherwise, create a pristine tree with self as the only node.
	"""

	v = self ; c = v.commands ; tree = c.tree
	v.mParent = None
	v.mBack = None
	if oldRoot:
		oldRoot.mBack = v
	v.mNext = oldRoot
	tree.rootVnode = v

	v.updateThreadLinks()
</t>
<t tx="ekr.20031218072017.960">def unlink (self):

	"""Unlinks the receiver from the tree before moving or deleting."""
	v = self ; c = v.commands ; tree = c.tree

	# trace(`v.mParent`+", child:"+`v.mFirstChild`+", back:"+`v.mBack`+", next:"+`v.mNext`)
	
	# Special case the root
	if v == tree.rootVnode:
		if not v.mNext: return # Should never happen.
		tree.rootVnode = v.mNext
		
	# Unlink the thread links pointing at this node _before_ unlinking the node.
	v.unlinkThreadLinks()

	# Clear the links in other nodes
	if v.mBack:
		v.mBack.mNext = v.mNext
	if v.mNext:
		v.mNext.mBack = v.mBack
	if v.mParent and v == v.mParent.mFirstChild:
		v.mParent.mFirstChild = v.mNext

	# Clear the links in this node
	v.mParent = v.mNext = v.mBack = None
	v.mThreadNext = v.mThreadBack = None</t>
<t tx="ekr.20031218072017.961">def unlinkThreadLinks (self):
	
	"""Unlink self from other nodes thread links"""
	
	if 0: # Set only mThreadNext fields.

		oldThreadNext = self.mThreadNext
		oldThreadBack = self.threadBack()
		if oldThreadNext:
			oldThreadNext.threadBack() = oldThreadBack
		if oldThreadBack:
			oldThreadBack.mThreadNext = oldThreadNext
			
	else: # Set mThreadNext and mThreadBack fields.
	
		oldThreadNext = self.mThreadNext
		oldThreadBack = self.mThreadBack
		if oldThreadNext:
			oldThreadNext.mThreadBack = oldThreadBack
		if oldThreadBack:
			oldThreadBack.mThreadNext = oldThreadNext</t>
<t tx="ekr.20031218072017.962">def updateThreadLinks (self):
	
	"""Link self, a newly linked vnode, into the thread links"""
	
	if 0: # Set mThreadNext.
		# Set thread link out of this node.
		self.mThreadNext = self.computeThreadNext()
		# Set thread links into this node.
		back = self.computeThreadBack()
		if back:
			back.mThreadNext = self

	else: # Set mThreadNext and mThreadBack
		# Set new thread links out of this node.
		self.mThreadNext = self.computeThreadNext()
		self.mThreadBack = self.computeThreadBack()
		# Set new thread links into this node.
		if self.mThreadNext:
			self.mThreadNext.mThreadBack = self
		if self.mThreadBack:
			self.mThreadBack.mThreadNext = self</t>
<t tx="ekr.20031218072017.963">def threadBack (self):
	
		"""Return the previous node, or None if at the start of the outline"""
		return self.mThreadBack
	
def computeThreadBack (self):
	
	"""Return the new value for self.mThreadBack"""
	v = self ; back = v.mBack
	if back:
		lastChild = back.lastChild()
		if lastChild:
			return lastChild.computeLastNodeForThreadBack()
		else:
			return back
	else:
		return v.mParent</t>
<t tx="ekr.20031218072017.964">def threadNext (self):

	"""Returns node following the receiver in "threadNext" order."""
	return self.mThreadNext

def computeThreadNext (self):
	
	"""Return the new value for self.mThreadNext"""
	v = self
	if v.mFirstChild:
		return v.mFirstChild
	elif v.mNext:
		return v.mNext
	else:
		p = v.mParent
		while p:
			if p.mNext:
				return p.mNext
			p = p.mParent
		return None
</t>
<t tx="ekr.20031218072017.965">def computeLastNodeForThreadBack (self):
	
	"""Return the last node of self's tree,
	_without_ calling threadNext() or threadBack(),
	and _without_ using mThreadNext or mThreadBack.
	"""

	v = self ; level = self.level()
	result = None
	while v:
		result = v
		# computeThreadNext doesn't call threadNext or threadBack, and
		# computeThreadNext doesn't use mThreadNext or mThreadBack.
		v = v.computeThreadNext()
		if not v or v.level() &lt;= level:
			break

	return result
</t>
<t tx="ekr.20031218072017.966">@ignore
@nocolor

WARNING: partially written, completely untested code.

What I did:

- Replaced mFirstChild with mChildren.
- Partially replaced mBack and mNext fields.
- Assumed the existence of c.frame.dummyChildren array.

I abaondoned this code for the following reasons:

- It is not at all clear that the new code would be faster than the old code.
- Precomputing threadNext() and maybe threadBack() promises to be yield _much_ bigger gains.
- mBack, mNext and mFirstChild will in general take considerably less space because
  _all_ nodes would have an mChildren dictionary.

@color</t>
<t tx="ekr.20031218072017.967"></t>
<t tx="ekr.20031218072017.968">def children (self):
	
	return self.mChildren</t>
<t tx="ekr.20031218072017.969"># childIndex and nthChild are zero-based.

def childIndex (self):

	parent=self.parent()
	if not parent: return 0
	
	if self.use_children_array:
		if self.mParent:
		# Throws an exception if self not in mChildren.
		return parent.mChildren.index(self)

	else: # old code
		child = parent.firstChild()
		n = 0
		while child:
			if child == self: return n
			n += 1 ; child = child.next()
		assert(false)</t>
<t tx="ekr.20031218072017.970">def firstChild (self):
	
	if self.use_children_array:
		if len(self.mChildren) &gt; 0:
			return self.mChildren[0]
		else:
			return None

	else: # old code
		return self.mFirstChild</t>
<t tx="ekr.20031218072017.971">def hasChildren (self):
	
	if self.use_children_array:
		return len(self.mChildren) &gt; 0
		
	else: # old code
		return self.firstChild() != None</t>
<t tx="ekr.20031218072017.972">def lastChild (self):
	
	if self.use_children_array:
		n = len(self.mChildren)
		if n:
			return self.mChildren[n-1]
		else:
			return None
	
	else: # old code
		child = self.firstChild()
		while child and child.next():
			child = child.next()
		return child</t>
<t tx="ekr.20031218072017.973"># childIndex and nthChild are zero-based.

def nthChild (self, n):
	
	if self.use_children_array:
		if n &lt;= len(self.mChildren):
			return self.mChildren[n-1]
		else:
			return None
			
	else: # old code
		child = self.firstChild()
		if not child: return None
		while n &gt; 0 and child:
			n -= 1
			child = child.next()
		return child</t>
<t tx="ekr.20031218072017.974">def numberOfChildren (self):
	
	if self.use_children_array:
		return len(self.mChildren)
		
	else: # old code
		n = 0
		child = self.firstChild()
		while child:
			n += 1
			child = child.next()
		return n</t>
<t tx="ekr.20031218072017.975"></t>
<t tx="ekr.20031218072017.976">def back (self):
	
	if self.use_children_array:
		if self.mParent:
			children = self.mParent.mChildren
		else:
			children = self.commands.frame.dummyChildren
		n = children.index(self)
		
		if n &gt; 0:
			return children[n-1]
		else:
			return None
	else:
		return self.mBack</t>
<t tx="ekr.20031218072017.977">def next (self):
	
	if self.use_children_array:
		if self.mParent:
			children = mParent.mChildren
		else:
			children = self.commands.frame.dummyChildren

		n = children.index(self)
		if n + 1 &lt; len(children):
			return children[n+1]
		else:
			return None

	else:
		return self.mNext</t>
<t tx="ekr.20031218072017.978">def linkAsNthChild (self, p, n):

	"""Links the receiver as the n'th child of p"""

	v = self
	# # trace(`v` + ", " + `p` + ", " + `n`)
	v.mParent = p
	if n == 0:
		v.mBack = None
		firstChild = v.mNext = p.firstChild() # 5/4/03
		if firstChild:
			firstChild.mBack = v
		if self.use_children_array: # 5/4/03
			p.mChildren[0] = v
		else:
			p.mFirstChild = v
	else:
		prev = p.nthChild(n-1) # zero based
		assert(prev)
		v.mBack = prev
		v.mNext = prev.mNext
		prev.mNext = v
		if v.mNext:
			v.mNext.mBack = v
		if self.use_children_array: # 5/4/03
			p.mChildren = p.mChildren[:n] + v + p.mChilren[n:]</t>
<t tx="ekr.20031218072017.979"># Links the receiver after v.

def linkAfter (self,v):
	
	# tick() ; # trace(`v`)
	self.mParent = v.mParent
	self.mBack = v
	self.mNext = v.mNext
	v.mNext = self
	if self.mNext:
		self.mNext.mBack = self</t>
<t tx="ekr.20031218072017.980">def unlink (self):

	"""Unlinks the receiver from the tree before moving or deleting."""
	v = self ; c = v.commands ; tree = c.tree
	
	# Special case the root
	if v == tree.rootVnode:
		if not v.mNext: return # Should never happen.
		tree.rootVnode = v.mNext

	# Clear the links in other nodes
	if v.mBack:
		v.mBack.mNext = v.mNext
	if v.mNext:
		v.mNext.mBack = v.mBack
	if v.mParent and v == v.mParent.firstChild():
		if self.use_children_array: # 5/4/03
			v.mParent.mChildren.remove(self)
		else:
			v.mParent.mFirstChild = v.mNext

	# Clear the links in this node
	v.mParent = v.mNext = v.mBack = None
	self.mChildren = None</t>
<t tx="ekr.20031218072017.981">@ Bug fix: 5/27/02.  We link in the rest of the tree only when oldRoot != None.  Otherwise, we are calling this routine from init code and we want to start with a pristine tree.
@c
def linkAsRoot(self, oldRoot = None):

	v = self ; c = v.commands
	
	if self.use_children_array:
		&lt;&lt; link v as the root vnode using c.frame.dummyChildren &gt;&gt;
	else:
		&lt;&lt; link v as the root vnode using mBack, mNext &gt;&gt;

	c.tree.rootVnode = v</t>
<t tx="ekr.20031218072017.982">v.mParent = None
children = c.frame.dummyChildren

if oldRoot:
	children.insert(0,v)
else:
	children[0] = v</t>
<t tx="ekr.20031218072017.983"># # trace(`v`)
# Bug fix 3/16/02:
# Clear all links except the child link.
# This allows a node with children to be moved up properly to the root position.

v.mParent = None
v.mBack = None
# 5/27/02
if oldRoot: oldRoot.mBack = v
v.mNext = oldRoot
</t>
<t tx="ekr.20031218072017.984"></t>
<t tx="ekr.20031218072017.985">@ignore
@color</t>
<t tx="ekr.20031218072017.986">@nocolor

I have a base window class that I use for all my TK stuff which handles, especially, focus issues between windows.  I have not looked at ButtonQ to see to what extent it depends upon WindowQ, the base class.

Anyway, this might be usefull as-is.  If not, let me know.</t>
<t tx="ekr.20031218072017.987">@ Setup a button so it is handled with a keyboard shortcut like MSWindows tools.  See if there is an ampersand in the string.  If so, we want to underline that character and make that character a hot key for this button.
@c

from Tkinter import *
from string import *

def ButtonQ (master, **kw):
	b = ButtonQ_ (master, kw)
	return b.button

class ButtonQ_ (Button):
	@others

## test
"""
from tkMessageBox import *
def buttonqcommand ():
	showinfo ("Title", "Button was pushed")

root = Tk ()
frame = Frame (root)
b = ButtonQ (frame, text = "&amp;Push Me", command = buttonqcommand)
b.grid ()
frame.grid (pady = 15)
"""
</t>
<t tx="ekr.20031218072017.988">def __init__(self, master, kw = {}):

	&lt;&lt; get inputs to this method &gt;&gt;
	&lt;&lt; see if there is an ampersand in the string. &gt;&gt;
	&lt;&lt; make the button with the correct text &gt;&gt;
	&lt;&lt; bind the button &gt;&gt;

	# make the button available to the caller
	self.button = b</t>
<t tx="ekr.20031218072017.989">_master = master
_text = kw['text']
_command = kw['command']
</t>
<t tx="ekr.20031218072017.990">length = len (_text)
index = 0
text3 = _text

# Show there is no hot key yet
IsHot = 0
HotKey = None

while index &lt; length:
	if _text [index] == '&amp;':
		&lt;&lt; handle an ampersand &gt;&gt;
	index = += 1</t>
<t tx="ekr.20031218072017.991"># if the word ends in an ampersand, we ignore it, and there is no hot key
if index == length - 1:
	break

# we have found a good hot key.  Remove the ampersand.
text1 = _text [0 : index]
text2 = _text [(index + 1) : 10000]
text3 = text1 + text2
IsHot = 1
HotKey = _text [index + 1]
break</t>
<t tx="ekr.20031218072017.992">if IsHot:
	kw['text'] = text3
	kw['underline'] = index

b = Button (master, kw)
</t>
<t tx="ekr.20031218072017.993">@ If there is a hot key, bind it to the window that owns the button.
Use the alt of both the lower case and upper case of the letter.
@c

if IsHot:
	HotKey = lower(HotKey)
	self.HotKey = HotKey
	s = angleBrackets("Alt-" + HotKey + s)
	_master.master.bind (s, self.callback)

	HotKey = upper(HotKey)
	s = angleBrackets("Alt-" + HotKey + s)
	_master.master.bind (s, self.callback)


</t>
<t tx="ekr.20031218072017.994"># The hot key has been hit.  Call the button's command.

def callback (self, event):

	self.button.invoke ()
</t>
<t tx="ekr.20031218072017.995">@ignore
@nocolor

To enable incremental allocation of Tk widgets during redraws, set self.allocateOnlyVisibleNodes = true in tree.__init__.

To do:
	
- We might switch to a line-oriented scheme.
	- This might simplify the code and make the code more useful to users.
	- Conceivably this scheme might eliminate the need for the auto-scroll in the redraw code,
	and that might make a single-pass redraw scheme possible.

- The last line isn't always completely visible: this is clearly a bug.

@color</t>
<t tx="ekr.20031218072017.996"></t>
<t tx="ekr.20031218072017.997">scrolls = config.getBoolWindowPref('outline_pane_scrolls_horizontally')
scrolls = choose(scrolls,1,0)

self.canvas = canvas = Tk.Canvas(split2Pane1,name="canvas",
	bd=0,bg="white",relief="flat")
	
self.setTreeColorsFromConfig()

self.treeBar = treeBar = Tk.Scrollbar(split2Pane1,name="treeBar")

# Bind mouse wheel event to canvas
if sys.platform != "win32": # Works on 98, crashes on XP.
	self.canvas.bind("&lt;MouseWheel&gt;", self.OnMouseWheel)
	
canvas['yscrollcommand'] = self.setCallback
treeBar['command']     = self.yviewCallback

treeBar.pack(side="right", fill="y")
if scrolls: 
	treeXBar = Tk.Scrollbar( 
		split2Pane1,name='treeXBar',orient="horizontal") 
	canvas['xscrollcommand'] = treeXBar.set 
	treeXBar['command'] = canvas.xview 
	treeXBar.pack(side="bottom", fill="x")

canvas.pack(expand=1,fill="both")</t>
<t tx="ekr.20031218072017.998">def setCallback (self,*args,**keys):
	
	"""Callback to adjust the scrollbar.
	
	Args is a tuple of two floats describing the fraction of the visible area."""

	# if self.tree.trace: print "setCallback:",self.tree.redrawCount,`args`

	apply(self.treeBar.set,args,keys)

	if self.tree.allocateOnlyVisibleNodes:
		self.tree.setVisibleArea(args)
		
def yviewCallback (self,*args,**keys):
	
	"""Tell the canvas to scroll"""
	
	# if self.tree.trace: print "vyiewCallback",`args`,`keys`

	if self.tree.allocateOnlyVisibleNodes:
		self.tree.allocateNodesBeforeScrolling(args)

	apply(self.canvas.yview,args,keys)
	
	
</t>
<t tx="ekr.20031218072017.999"></t>
<t tx="ekr.20031218072017.1000">def drawBox (self,p,x,y):

	# Make sure the bindings refer to the _present_ position.
	p = p.copy()

	y += 7 # draw the box at x, y+7

	tree = self
	iconname = g.choose(p.isExpanded(),"minusnode.gif", "plusnode.gif")
	image = self.getIconImage(iconname)
	id = self.canvas.create_image(x,y,image=image)

	id1 = self.canvas.tag_bind(id, "&lt;1&gt;", p.OnBoxClick)
	id2 = self.canvas.tag_bind(id, "&lt;Double-1&gt;", lambda x: None)
	
	# Remember the bindings so deleteBindings can delete them.
	self.tagBindings.append((id,id1,"&lt;1&gt;"),)
	self.tagBindings.append((id,id2,"&lt;Double-1&gt;"),)</t>
<t tx="ekr.20031218072017.1002">def drawIcon(self,p,x=None,y=None):
	
	"""Draws icon for position p at x,y, or at p.v.iconx,p.v.icony if x,y = None,None"""

	tree = self
	
	# Make sure the bindings refer to the _present_ position.
	p = p.copy() ; v = p.v

	if x is None and y is None:
		try:
			x,y = v.iconx, v.icony
		except:
			# Inject the ivars.
			x,y = v.iconx, v.icony = 0,0
	else:
		# Inject the ivars.
		v.iconx, v.icony = x,y

	y += 2 # draw icon at y + 2

	# Always recompute icon.
	val = v.iconVal = v.computeIcon()
	assert(0 &lt;= val &lt;= 15)
	
	# Compute the image name
	imagename = "box"
	if val &lt; 10: imagename += "0"
	imagename += `val`

	# Get the image
	image = self.getIconImage(imagename + ".GIF")
	id = self.canvas.create_image(x,y,anchor="nw",image=image)
	self.icon_id_dict[id] = p # Remember which vnode belongs to the icon.

	id1 = self.canvas.tag_bind(id,"&lt;1&gt;",p.OnIconClick)
	id2 = self.canvas.tag_bind(id,"&lt;Double-1&gt;",p.OnIconDoubleClick)
	id3 = self.canvas.tag_bind(id,"&lt;3&gt;",p.OnIconRightClick)
	
	# Remember the bindings so deleteBindings can delete them.
	self.tagBindings.append((id,id1,"&lt;1&gt;"),)
	self.tagBindings.append((id,id2,"&lt;Double-1&gt;"),)
	self.tagBindings.append((id,id3,"&lt;3&gt;"),)

	return 0 # dummy icon height</t>
<t tx="ekr.20031218072017.1004">def drawNode(self,p,x,y):

	"""Draw horizontal line from vertical line to icon"""

	self.canvas.create_line(x, y+7, x+box_width, y+7,tag="lines",fill="gray50") # stipple="gray25")

	if self.inVisibleArea(y):
		return self.force_draw_node(p,x,y)
	else:
		return self.line_height
	
def force_draw_node(self,p,x,y):

	self.allocatedNodes += 1
	if p.hasChildren():
		self.drawBox(p,x,y)
	icon_height = self.drawIcon(p,x+box_width,y)
	text_height = self.drawText(p,x+box_width+icon_width,y)
	return max(icon_height, text_height)</t>
<t tx="ekr.20031218072017.1005"># draws text for v at x,y

def drawText(self,p,x,y):
	
	tree = self
	x += text_indent

	p = p.copy() # must remain constant for callbacks.
	v = p.v

	t = Tkinter.Text(self.canvas,
		font=self.font,bd=0,relief="flat",width=self.headWidth(v),height=1)
	self.edit_text_dict[v] = t # Remember which text widget belongs to v.
	
	# Remember the widget so deleteBindings can delete it.
	self.widgets.append(t) # Fixes a _huge_ memory leak.

	t.insert("end", v.headString())
	&lt;&lt; configure the text depending on state &gt;&gt;

	# Use vnode or postion callbacks.
	id1 = t.bind("&lt;1&gt;",p.OnHeadlineClick)
	id2 = t.bind("&lt;3&gt;",p.OnHeadlineRightClick)
	
	if 0: # 6/15/02: Bill Drissel objects to this binding.
		t.bind("&lt;Double-1&gt;", p.OnBoxClick)
	id3 = t.bind("&lt;Key&gt;", p.OnHeadlineKey)
	id4 = t.bind("&lt;Control-t&gt;",self.OnControlT)
		# 10/16/02: Stamp out the erroneous control-t binding.
		
	# Remember the bindings so deleteBindings can delete them.
	self.bindings.append((t,id1,"&lt;1&gt;"),)
	self.bindings.append((t,id2,"&lt;3&gt;"),)
	self.bindings.append((t,id3,"&lt;Key&gt;"),)
	self.bindings.append((t,id4,"&lt;Control-t&gt;"),)

	id = self.canvas.create_window(x,y,anchor="nw",window=t)
	self.canvas.tag_lower(id)

	return self.line_height</t>
<t tx="ekr.20031218072017.1006">current = self.c.currentPosition()

if p == current:
	if p == self.editPosition():
		self.setNormalLabelState(p)
	else:
		self.setDisabledLabelState(p) # selected, disabled
else:
	self.setUnselectedLabelState(p) # unselected</t>
<t tx="ekr.20031218072017.1008">def drawTree(self,p,x,y,h,level,hoistFlag=false):
	
	# g.trace(p)
	yfirst = ylast = y
	if level==0: yfirst += 10
	
	for p in p.siblings_iter():
		# g.trace(x,y,p)
		h = self.drawNode(p,x,y)
		y += h ; ylast = y
		if p.v.isExpanded() and p.hasFirstChild():
			y = self.drawTree(p.firstChild(),x+child_indent,y,h,level+1)
		if hoistFlag: break

	&lt;&lt; draw vertical line &gt;&gt;
	return y</t>
<t tx="ekr.20031218072017.1009">id = self.canvas.create_line(
	x, yfirst-hline_y+4,
	x, ylast+hline_y-h,
	fill="gray50", # stipple="gray50"
	tag="lines")

self.canvas.tag_lower(id)</t>
<t tx="ekr.20031218072017.1010">def inVisibleArea (self,y1):
	
	if self.allocateOnlyVisibleNodes:
		if self.visibleArea:
			vis1,vis2 = self.visibleArea
			y2 = y1 + self.line_height
			return y2 &gt;= vis1 and y1 &lt;= vis2
		else: return false
	else:
		return true # This forces all nodes to be allocated on all redraws.
		
def inExpandedVisibleArea (self,y1):
	
	if self.expandedVisibleArea:
		vis1,vis2 = self.expandedVisibleArea
		y2 = y1 + self.line_height
		return y2 &gt;= vis1 and y1 &lt;= vis2
	else:
		return false</t>
<t tx="ekr.20031218072017.1011"></t>
<t tx="ekr.20031218072017.1012"># Calling redraw inside c.beginUpdate()/c.endUpdate() does nothing.
# This _is_ useful when a flag is passed to c.endUpdate.

def redraw (self,event=None):
	
	# g.trace()
	
	if self.updateCount == 0 and not self.redrawScheduled:
		self.redrawScheduled = true
		self.canvas.after_idle(self.idle_redraw)</t>
<t tx="ekr.20031218072017.1013"># Schedules a redraw even if inside beginUpdate/endUpdate
def force_redraw (self):

	if not self.redrawScheduled:
		self.redrawScheduled = true
		self.canvas.after_idle(self.idle_redraw)</t>
<t tx="ekr.20031218072017.1014"># Redraws immediately: used by Find so a redraw doesn't mess up selections.
# It is up to the caller to ensure that no other redraws are pending.

def redraw_now (self):

	self.idle_redraw()</t>
<t tx="ekr.20031218072017.1015">def idle_redraw (self):
	
	c = self.c
	
	self.redrawScheduled = false # 7/10/03: Always do this here.
	
	if 0: # This can be called as the result of update_idletasks, so the count need not be 0.
		g.trace(self.updateCount)

	frame = c.frame
	if frame not in g.app.windowList or g.app.quitting:
		# g.trace("no frame")
		return
		
	if self.drag_p:
		# g.trace("dragging",self.drag_p)
		return

	# g.trace(frame)
	# g.print_bindings("canvas",self.canvas)

	self.expandAllAncestors(self.c.currentPosition())
	oldcursor = self.canvas['cursor']
	self.canvas['cursor'] = "watch"
	self.allocatedNodes = 0
	if not g.doHook("redraw-entire-outline",c=self.c):
		# Erase and redraw the entire tree.
		c.setTopVnode(None)
		self.deleteBindings()
		self.canvas.delete("all")
		self.deleteWidgets()
		self.setVisibleAreaToFullCanvas()
		self.drawTopTree()
		# Set up the scroll region after the tree has been redrawn.
		x0, y0, x1, y1 = self.canvas.bbox("all")
		self.canvas.configure(scrollregion=(0, 0, x1, y1))
		# Do a scrolling operation after the scrollbar is redrawn
		# g.printGc()
		self.canvas.after_idle(self.idle_scrollTo)
		if self.trace:
			self.redrawCount += 1
			print "idle_redraw allocated:",self.redrawCount, self.allocatedNodes
		g.doHook("after-redraw-outline",c=self.c)

	self.canvas['cursor'] = oldcursor</t>
<t tx="ekr.20031218072017.1016">def idle_second_redraw (self):
	
	c = self.c
	
	# g.trace()
		
	# Erase and redraw the entire tree the SECOND time.
	# This ensures that all visible nodes are allocated.
	c.setTopVnode(None)
	args = self.canvas.yview()
	self.setVisibleArea(args)
	self.deleteBindings()
	self.canvas.delete("all")
	self.drawTopTree()
	
	if self.trace:
		print "idle_second_redraw allocated:",self.redrawCount, self.allocatedNodes</t>
<t tx="ekr.20031218072017.1017">def __init__(self,c,frame,canvas):
	
	# Init the base class.
	leoFrame.leoTree.__init__(self,frame)

	# Objects associated with this tree.
	self.canvas = canvas

	# Miscellaneous info.
	self.iconimages = {} # Image cache set by getIconImage().
	self.active = false # true if tree is active
	
	# Set self.font and self.fontName.
	self.setFontFromConfig()
	
	# Recycling bindings.
	self.bindings = [] # List of bindings to be unbound when redrawing.
	self.tagBindings = [] # List of tag bindings to be unbound when redrawing.
	self.icon_id_dict = {} # New in 3.12: keys are icon id's, values are vnodes.
	self.widgets = [] # Widgets that must be destroyed when redrawing.
	
	# Drag and drop
	self.drag_p = None
	self.controlDrag = false # true: control was down when drag started.
	self.drag_id = None # To reset bindings after drag
	
	# 20-SEP-2002 DTHEIN: keep track of popup menu so we can handle
	#                     behavior better on Linux
	# Context menu
	self.popupMenu = None
	
	# Incremental redraws:
	self.allocateOnlyVisibleNodes = false # true: enable incremental redraws.
	self.trace = false # true enabling of various traces.
	self.prevMoveToFrac = None
	self.visibleArea = None
	self.expandedVisibleArea = None
	
	self.allocatedNodes = 0 # A crucial statistic.
		# Incremental drawing allocates visible nodes at most twice.
		# Non-incremetal drawing allocates all visible nodes once.
		
	if self.allocateOnlyVisibleNodes:
		self.frame.bar1.bind("&lt;B1-ButtonRelease&gt;", self.redraw)
	
	if not leoTkinterTree.callbacksInjected: # Class var.
		leoTkinterTree.callbacksInjected = true
		self.injectCallbacks()</t>
<t tx="ekr.20031218072017.1018">def idle_scrollTo(self,p=None):

	"""Scrolls the canvas so that v is in view.
	
	This is done at idle time after a redraw so that treeBar.get() will return proper values."""

	c = self.c ; frame = c.frame
	if not p: return
	last = self.lastVisible() # may be p or v.
	nextToLast = last.visBack()
	if p is None:
		p = self.c.currentPosition()

	h1 = self.yoffset(p)
	h2 = self.yoffset(last)
	if nextToLast: # 2/2/03: compute approximate line height.
		lineHeight = h2 - self.yoffset(nextToLast)
	else:
		lineHeight = 20 # A reasonable default.
	# Compute the fractions to scroll down/up.
	lo, hi = frame.treeBar.get()
	if h2 &gt; 0.1:
		frac = float(h1)/float(h2) # For scrolling down.
		frac2 = float(h1+lineHeight/2)/float(h2) # For scrolling up.
		frac2 = frac2 - (hi - lo)
	else:
		frac = frac2 = 0.0 # probably any value would work here.
	# 2/2/03: new logic for scrolling up.
	frac =  max(min(frac,1.0),0.0)
	frac2 = max(min(frac2,1.0),0.0)

	if frac &lt;= lo:
		if self.prevMoveToFrac != frac:
			self.prevMoveToFrac = frac
			self.canvas.yview("moveto",frac)
	elif frac2 + (hi - lo) &gt;= hi:
		if self.prevMoveToFrac != frac2:
			self.prevMoveToFrac = frac2
			self.canvas.yview("moveto",frac2)
			
	if self.allocateOnlyVisibleNodes:
		self.canvas.after_idle(self.idle_second_redraw)
		
	c.setTopVnode(p) # 1/30/04: remember a pseudo "top" node.

	# print "%3d %3d %1.3f %1.3f %1.3f %1.3f" % (h1,h2,frac,frac2,lo,hi)
</t>
<t tx="ekr.20031218072017.1019"># Warning: do not try to "optimize" this by returning if v==tree.currentVnode.

def select (self,p,updateBeadList=true):
	
	# g.trace(p)
	if not p: return

	&lt;&lt; define vars and stop editing &gt;&gt;

	if not g.doHook("unselect1",c=c,new_v=p,old_v=old_p):
		&lt;&lt; unselect the old node &gt;&gt;
	else: old_body = u""

	g.doHook("unselect2",c=c,new_v=p,old_v=old_p)
	
	if not g.doHook("select1",c=c,new_v=p,old_v=old_p):
		&lt;&lt; select the new node &gt;&gt;
		if p and p != old_p: # 3/26/03: Suppress duplicate call.
			try: # may fail during initialization
				self.idle_scrollTo(p)
			except: pass
		&lt;&lt; update c.beadList or c.beadPointer &gt;&gt;
		&lt;&lt; update c.visitedList &gt;&gt;

	&lt;&lt; set the current node and redraw &gt;&gt;
	g.doHook("select2",c=c,new_v=p,old_v=old_p)
	g.doHook("select3",c=c,new_v=p,old_v=old_p)</t>
<t tx="ekr.20031218072017.1020">c = self.c
frame = c.frame ; body = frame.bodyCtrl

old_p = c.currentPosition()

# Unselect any previous selected but unedited label.
self.endEditLabel()
self.setUnselectedLabelState(old_p)</t>
<t tx="ekr.20031218072017.1021"># Remember the position of the scrollbar before making any changes.
yview=body.yview()
insertSpot = c.frame.body.getInsertionPoint()

# Remember the old body text
old_body = body.get("1.0","end")

if old_p and old_p != p and old_p.v.edit_text():
	old_p.v.t.scrollBarSpot = yview
	old_p.v.t.insertSpot = insertSpot</t>
<t tx="ekr.20031218072017.1022">frame.setWrap(p)

# Delete only if necessary: this may reduce flicker slightly.
s = p.v.t.bodyString
s = g.toUnicode(s,"utf-8")
old_body = g.toUnicode(old_body,"utf-8")
if old_body != s:
	body.delete("1.0","end")
	body.insert("1.0",s)

# We must do a full recoloring: we may be changing context!
self.frame.body.recolor_now(p)

if p.v and p.v.t.scrollBarSpot != None:
	first,last = p.v.t.scrollBarSpot
	body.yview("moveto",first)

if p.v.t.insertSpot != None: # 9/21/02: moved from c.selectVnode
	c.frame.bodyCtrl.mark_set("insert",p.v.t.insertSpot)
	c.frame.bodyCtrl.see(p.v.t.insertSpot)
else:
	c.frame.bodyCtrl.mark_set("insert","1.0")</t>
<t tx="ekr.20031218072017.1023">if updateBeadList:
	
	if c.beadPointer &gt; -1:
		present_p = c.beadList[c.beadPointer]
	else:
		present_p = c.nullPosition()
	
	if p != present_p:
		# Replace the tail of c.beadList by c and make c the present node.
		# print "updating c.beadList"
		c.beadPointer += 1
		c.beadList[c.beadPointer:] = []
		c.beadList.append(p)
		
	# g.trace(c.beadPointer,p,present_p)</t>
<t tx="ekr.20031218072017.1024"># Make p the most recently visited position on the list.
if p in c.visitedList:
	c.visitedList.remove(p)

c.visitedList.insert(0,p)</t>
<t tx="ekr.20031218072017.1025">self.c.setCurrentPosition(p)
self.setSelectedLabelState(p)
self.frame.scanForTabWidth(p) #GS I believe this should also get into the select1 hook
g.app.gui.set_focus(c,c.frame.bodyCtrl)</t>
<t tx="ekr.20031218072017.1026"></t>
<t tx="ekr.20031218072017.1027">def allocateNodes(self,where,lines):
	
	"""Allocate Tk widgets in nodes that will become visible as the result of an upcoming scroll"""
	
	assert(where in ("above","below"))

	# print "allocateNodes: %d lines %s visible area" % (lines,where)
	
	# Expand the visible area: a little extra delta is safer.
	delta = lines * (self.line_height + 4)
	y1,y2 = self.visibleArea

	if where == "below":
		y2 += delta
	else:
		y1 = max(0.0,y1-delta)

	self.expandedVisibleArea=y1,y2
	# print "expandedArea:   %5.1f %5.1f" % (y1,y2)
	
	# Allocate all nodes in expanded visible area.
	self.updatedNodeCount = 0
	self.updateTree(self.c.rootPosition(),root_left,root_top,0,0)
	# if self.updatedNodeCount: print "updatedNodeCount:", self.updatedNodeCount
</t>
<t tx="ekr.20031218072017.1028">def allocateNodesBeforeScrolling (self, args):
	
	"""Calculate the nodes that will become visible as the result of an upcoming scroll.

	args is the tuple passed to the Tk.Canvas.yview method"""

	if not self.allocateOnlyVisibleNodes: return

	# print "allocateNodesBeforeScrolling:",self.redrawCount,`args`

	assert(self.visibleArea)
	assert(len(args)==2 or len(args)==3)
	kind = args[0] ; n = args[1]
	lines = 2 # Update by 2 lines to account for rounding.
	if len(args) == 2:
		assert(kind=="moveto")
		frac1,frac2 = args
		if float(n) != frac1:
			where = g.choose(n&lt;frac1,"above","below")
			self.allocateNodes(where=where,lines=lines)
	else:
		assert(kind=="scroll")
		linesPerPage = self.canvas.winfo_height()/self.line_height + 2
		n = int(n) ; assert(abs(n)==1)
		where = g.choose(n == 1,"below","above")
		lines = g.choose(args[2] == "pages",linesPerPage,lines)
		self.allocateNodes(where=where,lines=lines)</t>
<t tx="ekr.20031218072017.1029">def setVisibleArea (self,args):

	r1,r2 = args
	r1,r2 = float(r1),float(r2)
	# print "scroll ratios:",r1,r2

	try:
		s = self.canvas.cget("scrollregion")
		x1,y1,x2,y2 = g.scanf(s,"%d %d %d %d")
		x1,y1,x2,y2 = int(x1),int(y1),int(x2),int(y2)
	except:
		self.visibleArea = None
		return
		
	scroll_h = y2-y1
	# print "height of scrollregion:", scroll_h

	vy1 = y1 + (scroll_h*r1)
	vy2 = y1 + (scroll_h*r2)
	self.visibleArea = vy1,vy2
	# print "setVisibleArea: %5.1f %5.1f" % (vy1,vy2)
</t>
<t tx="ekr.20031218072017.1030">def setVisibleAreaToFullCanvas(self):
	
	if self.visibleArea:
		y1,y2 = self.visibleArea
		y2 = max(y2,y1 + self.canvas.winfo_height())
		self.visibleArea = y1,y2</t>
<t tx="ekr.20031218072017.1031">def updateTree (self,v,x,y,h,level):

	yfirst = ylast = y
	if level==0: yfirst += 10
	while v:
		# g.trace(`x` + ", " + `y` + ", " + `v`)
		h = self.updateNode(v,x,y)
		y += h ; ylast = y
		if v.isExpanded() and v.firstChild():
			y = self.updateTree(v.firstChild(),x+child_indent,y,h,level+1)
		v = v.next()
	return y
</t>
<t tx="ekr.20031218072017.1032">@ To do:

- ** Use a general purpose XML parser to parse the jEdit mode files.
- ** Do incremental syntax coloring
	- Create lines table.
	- Initialize lines table when select new node.
- Use strings for states.
- Define colorizeLine method.
- Create self.state ivar
- Use a keyword lead-in table.
	- Use this for latex keywords and Leo keywords.
	- Add ignore-case ivar.
- Define @language xml.
- Defined syntax coloring for all jEdit token types:
	KEYWORD1,KEYWORD2,KEYWORD3,LABEL,LITERAL1,LITERAL2,MARKUP,OPERATOR
	Where do Leo keywords fit in?

</t>
<t tx="ekr.20031218072017.1033">@ignore

@ The following gives the general idea.

The self.known_languages dict contains all the data structures for a particular language.  This dict is created dynamically.  Each entry is a tuple of other info:
	
	"c"      : (dict1,...,dictM,list1,...,listN,etc.),
	"python" : (dict1,...,dictM,list1,...,listN,etc.),
	
These tuples, i.e., all the data structures, are created by the initialization routine.

@c
data = self.known_languages.get(self.language)
if not data:
	# Create all the data structures for the language.
	data = parse_xml_file(self.language) 
	if data: self.known_languages[language] = data
if data:
	self.dict1,...,self.listN=data

# The subsidiary data structures will be created from the xml files.
# The exact data structures used depends on the format of the xml files.

self.reserved_words1 = {} # Main language keywords: reserved words.
self.reserved_words2 = {} # Functions etc. to be colored separately.
self.keyword_chars1 = {} # Characters that appear as the first character of a keyword.
self.keyword_chars2 = {} # Characters that appear as second or following characters of a keyword.
self.string_start1,self.string.start2 # Opening characters of strings.

# The code might scan for keywords as follows:
n = len(s)
if i &lt; n and self.keywords1.get(s[i]):
	j = i ; i += 1
	while i &lt; n and self.keywords2.get(s[i]):
		i += 1
	word = s[j:i]
	if self.reserved_words1.get(word):
		# colorize the reserved word
	elif self.reserved_words2.get(word):
		# colorize the reserved word
</t>
<t tx="ekr.20031218072017.1034">special_keywords_dict = {
	'\\' : (latex_keywords_dict,"keyword"),
	'@' :  (leo_keywords_dict,"leoKeword") }
	
if &lt;&lt; ch is alphabetic &gt;&gt;:
	word = scan_c_word(s,i)
	kind = keywords_dict.get(word)
	if kind:
		&lt;&lt; colorize word using kind &gt;&gt;
else:
	data = special_keywords_dict.get(ch)
	if data:
		dict,kind = data
		word = scan_c_word(s,i+1)
		key = d.get(word)
		if key:
			&lt;&lt; colorize ch and word using kind &gt;&gt;</t>
<t tx="ekr.20031218072017.1035">@language html</t>
<t tx="ekr.20031218072017.1036">&lt;!-- ekr uses the MARK_FOLLOWING to mark _anything_ after \ --&gt;

&lt;?xml version="1.0"?&gt;

&lt;!DOCTYPE MODE SYSTEM "xmode.dtd"&gt;

&lt;MODE&gt;
	&lt;PROPS&gt;
		&lt;PROPERTY NAME="lineComment" VALUE="%" /&gt;
	&lt;/PROPS&gt;

	&lt;RULES&gt;
		&lt;&lt; general rules &gt;&gt;
	&lt;/RULES&gt;

	&lt;RULES SET="MATH" DEFAULT="MARKUP"&gt;
		&lt;&lt; math rules &gt;&gt;
	&lt;/RULES&gt;
&lt;/MODE&gt;</t>
<t tx="ekr.20031218072017.1037">&lt;!-- $$...$$ --&gt;
&lt;SPAN TYPE="MARKUP" DELEGATE="MATH"&gt;
	&lt;BEGIN&gt;$$&lt;/BEGIN&gt;
	&lt;END&gt;$$&lt;/END&gt;
&lt;/SPAN&gt;

&lt;!-- $...$ --&gt;
&lt;SPAN TYPE="MARKUP" DELEGATE="MATH"&gt;
	&lt;BEGIN&gt;$&lt;/BEGIN&gt;
	&lt;END&gt;$&lt;/END&gt;
&lt;/SPAN&gt;

&lt;!-- \[...\] (LaTeX math mode) --&gt;
&lt;SPAN TYPE="MARKUP" DELEGATE="MATH"&gt;
	&lt;BEGIN&gt;\[&lt;/BEGIN&gt;
	&lt;END&gt;\]&lt;/END&gt;
&lt;/SPAN&gt;

&lt;!-- some commands must be handled specially --&gt;
&lt;SEQ TYPE="KEYWORD1"&gt;\$&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD1"&gt;\\&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD1"&gt;\%&lt;/SEQ&gt;

&lt;!-- \... commands --&gt;
&lt;MARK_FOLLOWING TYPE="KEYWORD1"&gt;\&lt;/MARK_FOLLOWING&gt;

&lt;!-- comments --&gt;
&lt;EOL_SPAN TYPE="COMMENT1"&gt;%&lt;/EOL_SPAN&gt;

&lt;!-- word separators --&gt;
&lt;SEQ TYPE="OPERATOR"&gt;{&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;}&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;[&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;]&lt;/SEQ&gt;</t>
<t tx="ekr.20031218072017.1038">&lt;!-- some commands must be handled specially --&gt;
&lt;SEQ TYPE="KEYWORD3"&gt;\$&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD3"&gt;\\&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD3"&gt;\%&lt;/SEQ&gt;

&lt;!-- \... commands --&gt;
&lt;MARK_FOLLOWING TYPE="KEYWORD3"&gt;\&lt;/MARK_FOLLOWING&gt;

&lt;!-- word separators --&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;)&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;(&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;{&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;}&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;[&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;]&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;=&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;!&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;+&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;-&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;/&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;*&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;&amp;gt;&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;&amp;lt;&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;&amp;amp;&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;|&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;^&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;~&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;.&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;,&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;;&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;?&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;:&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;'&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;"&lt;/SEQ&gt;
&lt;SEQ TYPE="KEYWORD2"&gt;`&lt;/SEQ&gt;

&lt;!-- comments --&gt;
&lt;EOL_SPAN TYPE="COMMENT1"&gt;%&lt;/EOL_SPAN&gt;</t>
<t tx="ekr.20031218072017.1039">&lt;?xml version="1.0"?&gt;

&lt;!DOCTYPE MODE SYSTEM "xmode.dtd"&gt;
&lt;&lt; remarks &gt;&gt;

&lt;MODE&gt;
	&lt;PROPS&gt;
		&lt;PROPERTY NAME="indentPrevLine" VALUE="\s*.{3,}:\s*(#.*)?" /&gt;
		&lt;PROPERTY NAME="lineComment" VALUE="#" /&gt;
	&lt;/PROPS&gt;
	&lt;RULES ESCAPE="\" IGNORE_CASE="FALSE" HIGHLIGHT_DIGITS="TRUE"&gt;
		&lt;&lt; comments &gt;&gt;
		&lt;&lt; literals &gt;&gt;
		&lt;&lt; operators &gt;&gt;
		&lt;MARK_PREVIOUS TYPE="FUNCTION" EXCLUDE_MATCH="TRUE"&gt;(&lt;/MARK_PREVIOUS&gt;
		&lt;&lt; keywords &gt;&gt;
	&lt;/RULES&gt;
&lt;/MODE&gt;</t>
<t tx="ekr.20031218072017.1040">&lt;!-- Python mode, by Slava Pestov. Based on PythonTokenMarker by --&gt;
&lt;!-- Jonathan Revusky --&gt;

&lt;!-- Modified 19-Jul-00 by Ivan Frohne to: --&gt;
&lt;!--  (a) implement 'indentOnEnter'; --&gt;
&lt;!--  (b) indent next line automatically after control structures followed --&gt;
&lt;!--	  by ':'; --&gt;
&lt;!--  (c) make """ or ''' multiline quotes TYPE LITERAL2; --&gt;
&lt;!--  (d) add TYPE FUNCTION identified by a following '(' --&gt;
&lt;!--  (e) eliminate the '?' SEQ TYPE ('?' has no meaning in Python); --&gt;
&lt;!--  (f) change the TYPE of 'and', 'or', and 'not' to KEYWORD1; and --&gt;
&lt;!--  (g) add all builtin functions, builtin exceptions, --&gt;
&lt;!--	  builtin type methods, File object methods, and special type --&gt;
&lt;!--	  attributes as TYPE KEYWORD3. --&gt;</t>
<t tx="ekr.20031218072017.1041">&lt;!-- Comment --&gt;
&lt;EOL_SPAN TYPE="COMMENT1"&gt;#&lt;/EOL_SPAN&gt;

&lt;!-- Triple-quotes --&gt;
&lt;SPAN TYPE="LITERAL2"&gt;
	&lt;BEGIN&gt;"""&lt;/BEGIN&gt;
	&lt;END&gt;"""&lt;/END&gt;
&lt;/SPAN&gt;

&lt;SPAN TYPE="LITERAL2"&gt;
	&lt;BEGIN&gt;'''&lt;/BEGIN&gt;
	&lt;END&gt;'''&lt;/END&gt;
&lt;/SPAN&gt;</t>
<t tx="ekr.20031218072017.1042">&lt;!-- Standard literals --&gt;
&lt;SPAN TYPE="LITERAL1"&gt;
	&lt;BEGIN&gt;"&lt;/BEGIN&gt;
	&lt;END&gt;"&lt;/END&gt;
&lt;/SPAN&gt;

&lt;SPAN TYPE="LITERAL1"&gt;
	&lt;BEGIN&gt;'&lt;/BEGIN&gt;
	&lt;END&gt;'&lt;/END&gt;
&lt;/SPAN&gt;
</t>
<t tx="ekr.20031218072017.1043">&lt;SEQ TYPE="OPERATOR"&gt;=&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;!&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;&amp;gt;=&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;&amp;lt;=&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;+&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;-&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;/&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;*&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;&amp;gt;&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;&amp;lt;&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;%&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;&amp;amp;&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;|&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;^&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;~&lt;/SEQ&gt;</t>
<t tx="ekr.20031218072017.1044">&lt;KEYWORDS&gt;
	&lt;&lt; reserved words &gt;&gt;
	&lt;&lt; builtins &gt;&gt;
	&lt;&lt; exceptions &gt;&gt;
	&lt;&lt; types &gt;&gt;
&lt;/KEYWORDS&gt;</t>
<t tx="ekr.20031218072017.1045">&lt;!--  Reserved Words  --&gt;
&lt;KEYWORD1&gt;and&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;as&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;assert&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;break&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;class&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;continue&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;def&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;del&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;elif&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;else&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;except&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;exec&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;finally&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;for&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;from&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;global&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;if&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;import&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;in&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;is&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;lambda&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;not&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;or&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;pass&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;print&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;raise&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;return&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;try&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;while&lt;/KEYWORD1&gt;
&lt;KEYWORD1&gt;yield&lt;/KEYWORD1&gt;</t>
<t tx="ekr.20031218072017.1046">&lt;!-- builtins --&gt;
&lt;KEYWORD2&gt;abs&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;apply&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;bool&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;buffer&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;callable&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;chr&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;classmethod&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;cmp&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;coerce&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;compile&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;complex&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;delattr&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;dict&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;dir&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;divmod&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;eval&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;execfile&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;file&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;filter&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;float&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;getattr&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;globals&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;hasattr&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;hash&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;hex&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;id&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;input&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;int&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;intern&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;isinstance&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;issubclass&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;iter&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;len&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;list&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;locals&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;long&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;map&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;max&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;min&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;object&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;oct&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;open&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;ord&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;pow&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;property&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;range&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;raw_input&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;reduce&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;reload&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;repr&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;round&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;setattr&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;slice&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;staticmethod&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;str&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;super&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;tuple&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;type&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;unichr&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;unicode&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;vars&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;xrange&lt;/KEYWORD2&gt;
&lt;KEYWORD2&gt;zip&lt;/KEYWORD2&gt;</t>
<t tx="ekr.20031218072017.1047">&lt;!-- exceptions --&gt;
&lt;KEYWORD3&gt;ArithmeticError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;AssertionError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;AttributeError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;DeprecationWarning&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;EOFError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;EnvironmentError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;Exception&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;FloatingPointError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;IOError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;ImportError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;IndentationError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;IndexError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;KeyError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;KeyboardInterrupt&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;LookupError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;MemoryError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;NameError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;NotImplemented&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;NotImplementedError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;OSError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;OverflowError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;OverflowWarning&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;ReferenceError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;RuntimeError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;RuntimeWarning&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;StandardError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;StopIteration&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;SyntaxError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;SyntaxWarning&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;SystemError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;SystemExit&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;TabError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;TypeError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;UnboundLocalError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;UnicodeError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;UserWarning&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;ValueError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;Warning&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;WindowsError&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;ZeroDivisionError&lt;/KEYWORD3&gt;</t>
<t tx="ekr.20031218072017.1048">&lt;!-- types (from types module) --&gt;
&lt;KEYWORD3&gt;BufferType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;BuiltinFunctionType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;BuiltinMethodType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;ClassType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;CodeType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;ComplexType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;DictProxyType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;DictType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;DictionaryType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;EllipsisType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;FileType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;FloatType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;FrameType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;FunctionType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;GeneratorType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;InstanceType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;IntType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;LambdaType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;ListType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;LongType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;MethodType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;ModuleType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;NoneType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;ObjectType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;SliceType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;StringType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;StringTypes&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;TracebackType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;TupleType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;TypeType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;UnboundMethodType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;UnicodeType&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;XRangeType&lt;/KEYWORD3&gt;

&lt;KEYWORD3&gt;false&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;None&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;true&lt;/KEYWORD3&gt;

&lt;KEYWORD3&gt;__abs__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__add__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__all__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__author__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__bases__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__builtins__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__call__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__class__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__cmp__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__coerce__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__contains__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__debug__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__del__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__delattr__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__delitem__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__delslice__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__dict__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__div__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__divmod__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__doc__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__eq__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__file__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__float__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__floordiv__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__future__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__ge__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__getattr__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__getattribute__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__getitem__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__getslice__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__gt__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__hash__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__hex__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__iadd__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__import__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__imul__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__init__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__int__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__invert__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__iter__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__le__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__len__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__long__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__lshift__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__lt__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__members__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__metaclass__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__mod__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__mro__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__mul__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__name__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__ne__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__neg__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__new__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__nonzero__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__oct__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__or__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__path__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__pos__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__pow__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__radd__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rdiv__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rdivmod__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__reduce__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__repr__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rfloordiv__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rlshift__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rmod__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rmul__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__ror__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rpow__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rrshift__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rsub__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rtruediv__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__rxor__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__setattr__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__setitem__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__setslice__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__self__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__slots__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__str__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__sub__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__truediv__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__version__&lt;/KEYWORD3&gt;
&lt;KEYWORD3&gt;__xor__&lt;/KEYWORD3&gt;</t>
<t tx="ekr.20031218072017.1049">@nocolor

</t>
<t tx="ekr.20031218072017.1050">Each mode definition must begin with the following: 

&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE MODE SYSTEM "xmode.dtd"&gt; 

Each mode definition must also contain exactly one MODE tag. All other tags (PROPS, RULES) must be placed inside the MODE tag. The MODE tag does not have any defined attributes. Here is an example: 

&lt;MODE&gt;
    ... mode definition goes here ...
&lt;/MODE&gt; 
</t>
<t tx="ekr.20031218072017.1051">The PROPS tag and the PROPERTY tags inside it are used to define mode-specific properties. Each PROPERTY tag must have a NAME attribute set to the property's name, and a VALUE attribute with the property's value. 

All buffer-local properties listed in the section called "Buffer-Local Properties" may be given values in edit modes. In addition, the following mode properties have no buffer-local equivalent: 

commentEnd - the comment end string, used by the Range Comment command. 

commentStart - the comment start string, used by the Range Comment command. 

lineComment - the line comment string, used by the Line Comment command. 

doubleBracketIndent - If a line matches the indentPrevLine regular expression and the next line contains an opening bracket, a level of indent will not be added to the next line, unless this property is set to "true". For example, with this property set to "false", Java code will be indented like so: 

while(objects.hasMoreElements())
{
        ((Drawable)objects.nextElement()).draw();
} 

On the other hand, settings this property to "true" will give the following result: 

while(objects.hasMoreElements())
        {
                ((Drawable)objects.nextElement()).draw();
        } 

indentCloseBrackets - A list of characters (usually brackets) that subtract indent from the current line. For example, in Java mode this property is set to "}".

indentOpenBrackets - A list of characters (usually brackets) that add indent to the next line. For example, in Java mode this property is set to "{".

indentPrevLine - When indenting a line, jEdit checks if the previous line matches the regular expression stored in this property. If it does, a level of indent is added. For example, in Java mode this regular expression matches language constructs such as "if", "else", "while", etc.

Here is the complete &lt;PROPS&gt; tag for Java mode: 

&lt;PROPS&gt;
    &lt;PROPERTY NAME="indentOpenBrackets" VALUE="{" /&gt;
    &lt;PROPERTY NAME="indentCloseBrackets" VALUE="}" /&gt;
    &lt;PROPERTY NAME="indentPrevLine" VALUE="\s*(((if|while)
        \s*\(|else|case|default)[^;]*|for\s*\(.*)" /&gt;
    &lt;PROPERTY NAME="doubleBracketIndent" VALUE="false" /&gt;
    &lt;PROPERTY NAME="commentStart" VALUE="/*" /&gt;
    &lt;PROPERTY NAME="commentEnd" VALUE="*/" /&gt;
    &lt;PROPERTY NAME="blockComment" VALUE="//" /&gt;
    &lt;PROPERTY NAME="wordBreakChars" VALUE=",+-=&lt;&gt;/?^&amp;*" /&gt;
&lt;/PROPS&gt; 
</t>
<t tx="ekr.20031218072017.1052">RULES tags must be placed inside the MODE tag. Each RULES tag defines a ruleset.

A ruleset consists of a number of parser rules, with each parser rule specifying how to highlight a specific syntax token. There must be at least one ruleset in each edit mode. There can also be more than one, with different rulesets being used to highlight different parts of a buffer (for example, in HTML mode, one rule set highlights HTML tags, and another highlights inline JavaScript). For information about using more than one ruleset, see the section called "The SPAN Rule". 

The RULES tag supports the following attributes, all of which are optional: 

SET - the name of this ruleset. All rulesets other than the first must have a name. 

HIGHLIGHT_DIGITS - if set to TRUE, digits (0-9, as well as hexadecimal literals prefixed with "0x") will be highlighted with the DIGIT token type. Default is FALSE. 

IGNORE_CASE - if set to FALSE, matches will be case sensitive. Otherwise, case will not matter. Default is TRUE. 

DEFAULT - the token type for text which doesn't match any specific rule. Default is NULL. See the section called "Token Types" for a list of token types. 

Here is an example RULES tag: 

&lt;RULES IGNORE_CASE="FALSE" HIGHLIGHT_DIGITS="TRUE"&gt;
    ... parser rules go here ...
&lt;/RULES&gt; 

Rule Ordering Requirements

You might encounter this very common pitfall when writing your own modes. 

Since jEdit checks buffer text against parser rules in the order they appear in the ruleset, more specific rules must be placed before generalized ones, otherwise the generalized rules will catch everything. 

This is best demonstrated with an example. The following is incorrect rule ordering: 

&lt;SPAN TYPE="MARKUP"&gt;
    &lt;BEGIN&gt;[&lt;/BEGIN&gt;
    &lt;END&gt;]&lt;/END&gt;
&lt;/SPAN&gt;

&lt;SPAN TYPE="KEYWORD1"&gt;
    &lt;BEGIN&gt;[!&lt;/BEGIN&gt;
    &lt;END&gt;]&lt;/END&gt;
&lt;/SPAN&gt; 

If you write the above in a rule set, any occurrence of "[" (even things like "[!DEFINE", etc) will be highlighted using the first rule, because it will be the first to match. This is most likely not the intended behavior. 

The problem can be solved by placing the more specific rule before the general one: 

&lt;SPAN TYPE="KEYWORD1"&gt;
    &lt;BEGIN&gt;[!&lt;/BEGIN&gt;
    &lt;END&gt;]&lt;/END&gt;
&lt;/SPAN&gt;

&lt;SPAN TYPE="MARKUP"&gt;
    &lt;BEGIN&gt;[&lt;/BEGIN&gt;
    &lt;END&gt;]&lt;/END&gt;
&lt;/SPAN&gt; 

Now, if the buffer contains the text "[!SPECIAL]", the rules will be checked in order, and the first rule will be the first to match. However, if you write "[FOO]", it will be highlighted using the second rule, which is exactly what you would expect. 

Per-Ruleset Properties

The PROPS tag (described in the section called "The PROPS Tag") can also be placed inside the RULES tag to define ruleset-specific properties. Only the following properties can be set on a per-ruleset basis: 

commentEnd - the comment end string. 

commentStart - the comment start string. 

lineComment - the line comment string. 

These properties are used by the commenting commands to implement context-sensitive comments; see the section called "Commenting Out Code". 

The TERMINATE Rule

The TERMINATE rule specifies that parsing should stop after the specified number of characters have been read from a line. The number of characters to terminate after should be specified with the AT_CHAR attribute. Here is an example: 

&lt;TERMINATE AT_CHAR="1" /&gt; 

This rule is used in Patch mode, for example, because only the first character of each line affects highlighting. 

The SPAN Rule

The SPAN rule highlights text between a start and end string. The start and end strings are specified inside child elements of the SPAN tag. The following attributes are supported: 

TYPE - The token type to highlight the span with. See the section called "Token Types" for a list of token types

AT_LINE_START - If set to TRUE, the span will only be highlighted if the start sequence occurs at the beginning of a line

EXCLUDE_MATCH - If set to TRUE, the start and end sequences will not be highlighted, only the text between them will

NO_LINE_BREAK - If set to TRUE, the span will be highlighted with the INVALID token type if it spans more than one line

NO_WORD_BREAK - If set to TRUE, the span will be highlighted with the INVALID token type if it includes whitespace

DELEGATE - text inside the span will be highlighted with the specified ruleset. To delegate to a ruleset defined in the current mode, just specify its name. To delegate to a ruleset defined in another mode, specify a name of the form mode::ruleset. Note that the first (unnamed) ruleset in a mode is called "MAIN".

Here is a SPAN that highlights Java string literals, which cannot include line breaks: 

&lt;SPAN TYPE="LITERAL1" NO_LINE_BREAK="TRUE"&gt;
   &lt;BEGIN&gt;"&lt;/BEGIN&gt;
   &lt;END&gt;"&lt;/END&gt;
&lt;/SPAN&gt; 

Here is a SPAN that highlights Java documentation comments by delegating to the "JAVADOC" ruleset defined elsewhere in the current mode: 

&lt;SPAN TYPE="COMMENT2" DELEGATE="JAVADOC"&gt;
   &lt;BEGIN&gt;/**&lt;/BEGIN&gt;
   &lt;END&gt;*/&lt;/END&gt;
&lt;/SPAN&gt; 

Here is a SPAN that highlights HTML cascading stylesheets inside &lt;STYLE&gt; tags by delegating to the main ruleset in the CSS edit mode: 

&lt;SPAN TYPE="MARKUP" DELEGATE="css::MAIN"&gt;
   &lt;BEGIN&gt;&amp;lt;style&amp;gt;&lt;/BEGIN&gt;
   &lt;END&gt;&amp;lt;/style&amp;gt;&lt;/END&gt;
&lt;/SPAN&gt; 

Tip
The &lt;END&gt; tag is optional. If it is not specified, any occurrence of the start string will cause the remainder of the buffer to be highlighted with this rule. 

This can be very useful when combined with delegation. 

The EOL_SPAN Rule
An EOL_SPAN is similar to a SPAN except that highlighting stops at the end of the line, not after the end sequence is found. The text to match is specified between the opening and closing EOL_SPAN tags. The following attributes are supported: 

TYPE - The token type to highlight the span with. See the section called "Token Types" for a list of token types

AT_LINE_START - If set to TRUE, the span will only be highlighted if the start sequence occurs at the beginning of a line

EXCLUDE_MATCH - If set to TRUE, the start sequence will not be highlighted, only the text after it will

Here is an EOL_SPAN that highlights C++ comments: 

&lt;EOL_SPAN TYPE="COMMENT1"&gt;//&lt;/EOL_SPAN&gt; 

The MARK_PREVIOUS Rule
The MARK_PREVIOUS rule highlights from the end of the previous syntax token to the matched text. The text to match is specified between opening and closing MARK_PREVIOUS tags. The following attributes are supported: 

TYPE - The token type to highlight the text with. See the section called "Token Types" for a list of token types

AT_LINE_START - If set to TRUE, the text will only be highlighted if it occurs at the beginning of the line

EXCLUDE_MATCH - If set to TRUE, the match will not be highlighted, only the text before it will

Here is a rule that highlights labels in Java mode (for example, "XXX:"): 

&lt;MARK_PREVIOUS AT_LINE_START="TRUE"
    EXCLUDE_MATCH="TRUE"&gt;:&lt;/MARK_PREVIOUS&gt; 

The MARK_FOLLOWING Rule
The MARK_FOLLOWING rule highlights from the start of the match to the next syntax token. The text to match is specified between opening and closing MARK_FOLLOWING tags. The following attributes are supported: 

TYPE - The token type to highlight the text with. See the section called "Token Types" for a list of token types

AT_LINE_START - If set to TRUE, the text will only be highlighted if the start sequence occurs at the beginning of a line

EXCLUDE_MATCH - If set to TRUE, the match will not be highlighted, only the text after it will

Here is a rule that highlights variables in Unix shell scripts ("$CLASSPATH", "$IFS", etc): 

&lt;MARK_FOLLOWING TYPE="KEYWORD2"&gt;$&lt;/MARK_FOLLOWING&gt; 

The SEQ Rule
The SEQ rule highlights fixed sequences of text. The text to highlight is specified between opening and closing SEQ tags. The following attributes are supported: 

TYPE - the token type to highlight the sequence with. See the section called "Token Types" for a list of token types

AT_LINE_START - If set to TRUE, the sequence will only be highlighted if it occurs at the beginning of a line

The following rules highlight a few Java operators: 

&lt;SEQ TYPE="OPERATOR"&gt;+&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;-&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;*&lt;/SEQ&gt;
&lt;SEQ TYPE="OPERATOR"&gt;/&lt;/SEQ&gt; 

The KEYWORDS Rule

There can only be one KEYWORDS tag per ruleset. The KEYWORDS rule defines keywords to highlight. Keywords are similar to SEQs, except that SEQs match anywhere in the text, whereas keywords only match whole words. 

The KEYWORDS tag does not define any attributes. 

Each child element of the KEYWORDS tag should be named after the desired token type, with the keyword text between the start and end tags. For example, the following rule highlights the most common Java keywords: 

&lt;KEYWORDS IGNORE_CASE="FALSE"&gt;
   &lt;KEYWORD1&gt;if&lt;/KEYWORD1&gt;
   &lt;KEYWORD1&gt;else&lt;/KEYWORD1&gt;
   &lt;KEYWORD3&gt;int&lt;/KEYWORD3&gt;
   &lt;KEYWORD3&gt;void&lt;/KEYWORD3&gt;
&lt;/KEYWORDS&gt; 

Token Types

Parser rules can highlight tokens using any of the following token types: 

NULL - no special highlighting is performed on tokens of type NULL 

COMMENT1 

COMMENT2 

FUNCTION 

INVALID - tokens of this type are automatically added if a NO_WORD_BREAK or NO_LINE_BREAK SPAN spans more than one word or line, respectively. 

KEYWORD1 

KEYWORD2 

KEYWORD3 

LABEL 

LITERAL1 

LITERAL2 

MARKUP 

OPERATOR 
</t>
<t tx="ekr.20031218072017.1053">@ignore
@ 5/1/03:  I have no idea what these routines are about.  They do not appear to be related to shared trees at all!</t>
<t tx="ekr.20031218072017.1054">@ The following methods are "middleware".  They stand between the "outer" code that executes commands, and the "raw" code that work only on a single tree or node at a time.

These routines act on the given node and all dependents joined to v's parent.</t>
<t tx="ekr.20031218072017.1055">def create_dependent_trees (self,v):

	p = v.parent()
	n = v.childIndex()
	for j in p.joinDict:
		if j != v:
			c = self.copyEntireTree(v) # Use old copyNode and copyTree to do this.
			c = linkAsNthChild(p,n)
</t>
<t tx="ekr.20031218072017.1056"># This destroys (i.e. unlinks) v and all dependent trees of v.
# Because of undo we _never_ actually destroy nodes.

def destroy_dependent_trees (self,v):

	p = v.parent()
	n = v.childIndex()
	for j in p.joinDict:
		c = j.nthChild(n)
		c.unlink()
</t>
<t tx="ekr.20031218072017.1057">def move_dependent_trees_up (self,v):
	
	assert(v.next())
	p = v.parent()
	n = v.childIndex()
	for j in p.joinDict:
		c = j.nthChild(n)
		c.raw_move_down()
</t>
<t tx="ekr.20031218072017.1058"># Move lefts may destroy dependent trees.
# The caller is responsible for doing that.

def move_dependent_trees_left (self,v):

	p = v.parent()
	n = v.childIndex()
	for j in p.joinDict:
		c = j.nthChild(n)
		c.raw_move_left()
</t>
<t tx="ekr.20031218072017.1059"># Moving a node right may create dependent trees.
# The caller is responsible for doing that.
def move_dependent_trees_right (self,v):

	p = v.parent()
	n = v.childIndex()
	for j in p.joinDict:
		c = j.nthChild(n)
		c.raw_move_right()
</t>
<t tx="ekr.20031218072017.1060">def move_dependent_trees_up (self,v):
	
	assert(v.back()
	p = v.parent()
	n = v.childIndex()
	for j in p.joinDict:
		c = j.nthChild(n)
		c.raw_move_up()
		
</t>
<t tx="ekr.20031218072017.1061"></t>
<t tx="ekr.20031218072017.1062"></t>
<t tx="ekr.20031218072017.1063"></t>
<t tx="ekr.20031218072017.1064">@ignore</t>
<t tx="ekr.20031218072017.1065">@nocolor

Open Discussion
https://sourceforge.net/forum/message.php?msg_id=1960386
By: riotnrrrd

There is a problem in keeping the temp files for 'Open With' up-to-date, which
manifests itself as follows:

1. Open a body text in an external editor. Close the editor without saving.

2. Edit the same text in the body text window of Leo.

3. Again open the same text in an external editor. Instead of opening the edited
text, the previous temp file is reopened.
</t>
<t tx="ekr.20031218072017.1066">@nocolor

I see what you are saying: if one changes a node and then uses Open With to reopen the temp file the old temp file is used if it exists.

I believe the solution is to do the following:

1. Compare the old temp file with what a "recreated" temp file would be.  This handles cases in which either the body text or the temp file has been changed.  There may be several ways of doing this: it probably doesn't matter which way is chosen.

2. Reopen the old temp file if no change has been made either to the body text or the temp file.

3. Raise a dialog if some change has been made: Leo must ask whether to use the version in the body text or the version in the temp file.  I don't believe it will be possible to do without this dialog: depending on circumstances either choice may be reasonable.</t>
<t tx="ekr.20031218072017.1067"></t>
<t tx="ekr.20031218072017.1068">@nocolor

https://sourceforge.net/forum/message.php?msg_id=1816654

Because the temp files are quietly created and are never removed, then whether I Open-With/Edit/Save every few minutes, or every few months, sooner or later Leo will freeze with no indication of what went wrong. 

It looks as if there is an attempt to create a new file name (which is where the "_0" comes in), but the
count never goes beyond 0. </t>
<t tx="ekr.20031218072017.1069">After a few (~5) temp files are opened in C:\windows\Temp, Windows (98) stops
opening temp files until I go in there and delete the temps Leo has left
behind. Perhaps a Temp directory in the Leo directory would be better, or
deleting the temp files once Leo is done with them. -- This would take a bit of
work, because when my editor does an auto-save, Leo pops up, wagging its tail
and announcing that the changed file has been re-loaded!

------

Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=1821895
By: nobody

I almost forgot about this...
I know that filling up the Windows\Temp directory can cause problems (I've had
them). However, when I forced the directory to C:\TEMP, I still have the problem.
Here's what I did to check it:

Open-With a node. The file created was
"c:\temp\LeoTemp_HoCo_Timer_Int._For_reference,.c" with a time of 10:57. Make
changes using my editor, and save them.

Open-With the same node. The file created was
"c:\temp\LeoTemp_HoCo_Timer_Int._For_reference,_0.c" with a time of 11:15. Make
changes using my editor, and save them.

Try to Open-With the same node. Leo froze until I deleted
"c:\temp\LeoTemp_HoCo_Timer_Int._For_reference,_0.c", then ran as expected.
The NEW temp file was also named
"c:\temp\LeoTemp_HoCo_Timer_Int._For_reference,_0.c".

--Rich</t>
<t tx="ekr.20031218072017.1070"></t>
<t tx="ekr.20031218072017.1071"></t>
<t tx="ekr.20031218072017.1072">@nocolor

Your tests confirm the bug: 

Roundtripping to/from leo seems to work fine, but the sentinels are illegal cweb control sequences. Cweb fails with errors: "Control codes are forbidden in control text." when I try to cweave/ctangle the .w file. 

When CWeave and CTangle parse the sentinel, they read (putting tokens in curly braces): 

{@q} {@@} {@c} olor {@&gt;} 

@c looks to cweb like a control code, and hence produces an error when weaving or tangling. 

To make the sentinel legal for cweave or ctangle, there can only be sequences of even numbers of @ signs in the @q ... @&gt; control sequence: 

Legal: 
@qcolor@&gt; 
@q@@color@&gt; 
@q@@@@color@&gt; 
etc. 

Illegal: 
@q@color@&gt; 
@q@@@color@&gt; 
etc. 
</t>
<t tx="ekr.20031218072017.1073">@ In cweb mode must double all @ signs in all directives, so putSentinel is the place to do this.</t>
<t tx="ekr.20031218072017.1074"></t>
<t tx="ekr.20031218072017.1075"># This method outputs s, a directive or reference, in a sentinel.

def putDirective(self,s,i):

	tag = "@delims"
	assert(i &lt; len(s) and s[i] == '@')
	k = i
	j = skip_to_end_of_line(s,i)
	directive = s[i:j]

	if match_word(s,k,tag):
		&lt;&lt; handle @delims &gt;&gt;
	else:
		self.putSentinel("@" + directive)

	i = skip_line(s,k)
	return i</t>
<t tx="ekr.20031218072017.1076"># Put a space to protect the last delim.
self.putSentinel(directive + " ") # 10/23/02: put @delims, not @@delims

# Skip the keyword and whitespace.
j = i = skip_ws(s,k+len(tag))

# Get the first delim.
while i &lt; len(s) and not is_ws(s[i]) and not is_nl(s,i):
	i += 1
if j &lt; i:
	self.startSentinelComment = s[j:i]
	# Get the optional second delim.
	j = i = skip_ws(s,i)
	while i &lt; len(s) and not is_ws(s[i]) and not is_nl(s,i):
		i += 1
	self.endSentinelComment = choose(j&lt;i, s[j:i], "")
else:
	self.writeError("Bad @delims directive")</t>
<t tx="ekr.20031218072017.1077">@ All sentinels are eventually output by this method.

Sentinels include both the preceding and following newlines. This rule greatly simplies the code and has several important benefits:

1. Callers never have to generate newlines before or after sentinels.  Similarly, routines that expand code and doc parts never have to add "extra" newlines.
2. There is no need for a "no-newline" directive.  If text follows a section reference, it will appear just after the newline that ends sentinel at the end of the expansion of the reference.  If no significant text follows a reference, there will be two newlines following the ending sentinel.

The only exception is that no newline is required before the opening "leo" sentinel. The putLeoSentinel and isLeoSentinel routines handle this minor exception.
@c
def putSentinel(self,s):
	
	if not self.sentinels:
		return # Handle @nosentinelsfile.

	self.newline_pending = false # discard any pending newline.
	self.onl() ; self.putIndent(self.indent) # Start of sentinel.
	self.os(self.startSentinelComment)

	# 11/1/02: The cweb hack: if the opening comment delim ends in '@',
	# double all '@' signs except the first, which is "doubled" by the
	# trailing '@' in the opening comment delimiter.
	start = self.startSentinelComment
	if start and len(start) &gt; 0 and start[-1] == '@':
		assert(s and len(s)&gt;0 and s[0]=='@')
		s = s.replace('@','@@')[1:]

	self.os(s)
	self.os(self.endSentinelComment)
	if self.suppress_newlines:
		self.newline_pending = true # Schedule a newline.
	else:
		self.onl() # End of sentinel.</t>
<t tx="ekr.20031218072017.1078"></t>
<t tx="ekr.20031218072017.1079">def skipSentinelStart(self,s,i):

	start = self.startSentinelComment
	assert(start and len(start)&gt;0)

	if is_nl(s,i): i = skip_nl(s,i)
	i = skip_ws(s,i)
	assert(match(s,i,start))
	i += len(start)
	# 7/8/02: Support for REM hack
	i = skip_ws(s,i)
	assert(i &lt; len(s) and s[i] == '@')
	return i + 1
</t>
<t tx="ekr.20031218072017.1080">@ This method tells what kind of sentinel appears in line s.  Typically s will be an empty line before the actual sentinel, but it is also valid for s to be an actual sentinel line.

Returns (kind, s, emptyFlag), where emptyFlag is true if kind == noSentinel and s was an empty line on entry.
@c

sentinelDict = {
	"@comment" : startComment,
	"@delims" :  startDelims,
	"@verbatim": startVerbatim,
	"@verbatimAfterRef": startVerbatimAfterRef,
	"@+at":     startAt,     "@-at":     endAt,
	"@+body":   startBody,   "@-body":   endBody,
	"@+doc":    startDoc,    "@-doc":    endDoc,
	"@+leo":    startLeo,    "@-leo":    endLeo,
	"@+node":   startNode,   "@-node":   endNode,
	"@+others": startOthers, "@-others": endOthers }

def sentinelKind(self,s):

	# trace(s)
	i = skip_ws(s,0)
	if match(s,i,self.startSentinelComment): 
		i += len(self.startSentinelComment)
	else:
		return atFile.noSentinel

	# 10/30/02: locally undo cweb hack here
	start = self.startSentinelComment
	if start and len(start) &gt; 0 and start[-1] == '@':
		s = s[:i] + string.replace(s[i:],'@@','@')

	# Do not skip whitespace here!
	if match(s,i,"@&lt;&lt;"): return atFile.startRef
	if match(s,i,"@@"):   return atFile.startDirective
	if not match(s,i,'@'): return atFile.noSentinel
	j = i # start of lookup
	i += 1 # skip the at sign.
	if match(s,i,'+') or match(s,i,'-'):
		i += 1
	i = skip_c_id(s,i)
	key = s[j:i]
	if len(key) &gt; 0 and atFile.sentinelDict.has_key(key):
		# trace("found:",key)
		return atFile.sentinelDict[key]
	else:
		# trace("not found:",key)
		return atFile.noSentinel</t>
<t tx="ekr.20031218072017.1081"># 4/5/03: config.write_clone_indices no longer used.

def nodeSentinelText(self,v):
	
	if v == self.root or not v.parent():
		index = 0
	else:
		index = v.childIndex() + 1

	h = v.headString()
	&lt;&lt; remove comment delims from h if necessary &gt;&gt;

	return str(index) + '::' + h</t>
<t tx="ekr.20031218072017.1082">@ Bug fix 1/24/03:

If the present @language/@comment settings do not specify a single-line comment we remove all block comment delims from h.  This prevents headline text from interfering with the parsing of node sentinels.
@c

start = self.startSentinelComment
end = self.endSentinelComment

if end and len(end) &gt; 0:
	h = h.replace(start,"")
	h = h.replace(end,"")</t>
<t tx="ekr.20031218072017.1083"># Set headline to the rest of the line.
# 6/22/03: don't strip leading whitespace.
if len(self.endSentinelComment) == 0:
	headline = s[i:-1].rstrip()
else:
	# 10/24/02: search from the right, not the left.
	k = s.rfind(self.endSentinelComment,i)
	headline = s[i:k].rstrip() # works if k == -1
	
# 10/23/02: The cweb hack: undouble @ signs if the opening comment delim ends in '@'.
if self.startSentinelComment[-1:] == '@':
	headline = headline.replace('@@','@')

# Set reference if it exists.
i = skip_ws(s,i)

if 0: # no longer used
	if match(s,i,"&lt;&lt;"):
		k = s.find("&gt;&gt;",i)
		if k != -1: ref = s[i:k+2]</t>
<t tx="ekr.20031218072017.1084">@ The sentinel contains an @ followed by a section name in angle brackets.  This code is different from the code for the @@ sentinel: the expansion of the reference does not include a trailing newline.
@c

assert(match(s,i,"&lt;&lt;"))

if len(self.endSentinelComment) == 0:
	line = s[i:-1] # No trailing newline
else:
	k = s.find(self.endSentinelComment,i)
	line = s[i:k] # No trailing newline, whatever k is.
		
# 10/30/02: undo cweb hack here
start = self.startSentinelComment
if start and len(start) &gt; 0 and start[-1] == '@':
	line = line.replace('@@','@')

out.append(line)</t>
<t tx="ekr.20031218072017.1085"># The first '@' has already been eaten.
assert(match(s,i,"@"))

if match_word(s,i,"@raw"):
	self.raw = true
elif match_word(s,i,"@end_raw"):
	self.raw = false

e = self.endSentinelComment
s2 = s[i:]
if len(e) &gt; 0:
	k = s.rfind(e,i)
	if k != -1:
		s2 = s[i:k] + '\n'
	
start = self.startSentinelComment
if start and len(start) &gt; 0 and start[-1] == '@':
	s2 = s2.replace('@@','@')
out.append(s2)
# trace(`s2`)</t>
<t tx="ekr.20031218072017.1086"># Returns the kind of at-directive or noDirective.

def directiveKind(self,s,i):

	n = len(s)
	if i &gt;= n or s[i] != '@':
		return atFile.noDirective

	table = (
		("@c",atFile.cDirective),
		("@code",atFile.codeDirective),
		("@doc",atFile.docDirective),
		("@end_raw",atFile.endRawDirective),
		("@others",atFile.othersDirective),
		("@raw",atFile.rawDirective))

	# This code rarely gets executed, so simple code suffices.
	if i+1 &gt;= n or match(s,i,"@ ") or match(s,i,"@\t") or match(s,i,"@\n"):
		# 10/25/02: @space is not recognized in cweb mode.
		# 11/15/02: Noweb doc parts are _never_ scanned in cweb mode.
		return choose(self.language=="cweb",
			atFile.noDirective,atFile.atDirective)

	# 10/28/02: @c and @(nonalpha) are not recognized in cweb mode.
	# We treat @(nonalpha) separately because @ is in the colorizer table.
	if self.language=="cweb" and (
		match_word(s,i,"@c") or
		i+1&gt;= n or s[i+1] not in string.letters):
		return atFile.noDirective

	for name,directive in table:
		if match_word(s,i,name):
			return directive
	# 10/14/02: return miscDirective only for real directives.
	for name in leoColor.leoKeywords:
		if match_word(s,i,name):
			return atFile.miscDirective

	return atFile.noDirective</t>
<t tx="ekr.20031218072017.1087">@nocolor

By: paulpaterson ( Paul Paterson ) 
 Bug?: tangle_done root_list   
2002-12-04 16:48

I wrote a tangle done routine to do some markup on some files and noticed that the file paths you get in the root_list are based on the default tangle directory and not the actual directory that the files were writen. 

To see this problem (on 3.9) put a @path directive in a node, then create a child @root node as below, 

Parent node: '@path c:\temp' 
Child node: '@root myfile.txt' 

Add some text to the child node and then tangle it. You get a c:\temp\myfile.txt file but the tangle_done.run function is called with a root_list of ["&lt;default leo tangle dir&gt;\myfile.txt"] 

You don't get this problem if you fully specify the path in the @root directive.</t>
<t tx="ekr.20031218072017.1088"></t>
<t tx="ekr.20031218072017.1089"></t>
<t tx="ekr.20031218072017.1090">@nocolor

Found redundancies in vnode clear/setDirty routines.  At present the dirty bit is kept in tnodes, so once it is set or cleared it is automatically cleared in all joined nodes.</t>
<t tx="ekr.20031218072017.1091">@nocolor

By: gilshwartz ( Gil Shwartz ) 
 save @file-nosent clones   
2003-01-31 21:27
Open Discussion

I have made @file-nosent clones under nodes with different @path directive. When saving (ctrl-s) I expected the file to be written to all places. It is only written once to the first place. While I can see the possible problem with @file clones on read, during write I see no problem in writing to all places. For read I do settle for reading any of the copies. 

Edward, do you think this is a reasonable behavior and change? 

Gil  

There was a bug in v.setAncestorAtFileNodeDirty that prevented cloned @file-nosent nodes from being marked dirty when another node was changed.  This was easily fixed.

However, you have unearthed a major stupidity involving dirty bits.  At present dirty bits in kept in _tnodes_, not vnodes, which means:

1. It is not possible to set or clear dirty bits in cloned vnodes individually and
2. The logic in v.setDirtyJoined is mostly redundant.

I'm going to think about this for a while.  It is imperitive that Leo sets dirty bits properly (which it does now, if stupidly), so any change here would be a major change.

In short, I agree that there is a bug here, and it may be a day or two before it gets fixed.

Edward</t>
<t tx="ekr.20031218072017.1092"></t>
<t tx="ekr.20031218072017.1093">@ignore</t>
<t tx="ekr.20031218072017.1094">@nocolor
@pagewidth 40

A one-line paragraph one two three four five six seven eight nine ten...

An @rawfile tree is a tree whose root headline starts with
@rawfile &lt;filename&gt;. Similarly, an @silentfile tree is a
tree whose root headline starts with an @silentfile
&lt;filename&gt; directive.

    Leo creates derived files from @rawfile and @silentfile trees by writing the body text of all nodes of the tree in outline order.  Leo writes the body text _as is_, without recognizing section definitions, without expanding section references, and without treating directives specially in any way.  In particular, Leo copies all directives, including @space or @c directives, to the derived file as text. Exception: Leo recognizes the @ignore directive in @rawfile or @silentfile nodes, so you may use the @ignore directive as usual to prevent Leo from writing @rawfile and @silentfile trees.

There are several difference between @rawfile and @silentfile trees:
	
  This
  is
  a
  test.

  1. This is the first line and it is really really really long. And it has
	 a hanging indentation.
     and another line.

  2. This is a lllllllllllllllllllllllllllllllllllloooooooooooooooooong
     next item.
     And it too has a hanging indentation.

  3. This is an exxxxxxxxxxxxxxxxxxxxxxxxtrrrrrrrrrrrrrrreeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeemlylong
     word.
And it too has a hanging indentation.</t>
<t tx="ekr.20031218072017.1095"></t>
<t tx="ekr.20031218072017.1096">@nocolor

Demote doesn't work properly on the top level, and undo doesn't restore the state.

Example:

- Select Bugs headline (collapsed)
- Choose Demote
  Not correct.
- Choose Undo
  Not correct.</t>
<t tx="ekr.20031218072017.1097">@nocolor

Removed a _huge_ performance bug in vnode.unjoinNode.

@color</t>
<t tx="ekr.20031218072017.1098">statistics at moveOutlineLeft (slow)

beginUpdate 31
childIndex 4
createDependents 1
destroyDependents 1
endUpdate 31
lastChild 13
linkAfter 1
moveAfter 1
moveOutlineLeft 1
nthChild 2
redraw 1
select 1
unjoinNode 10 ** (this was the cause of the slowdown!)
unjoinTree 2
unlink 3

statistics at undo (fast)

beginUpdate 13
childIndex 15
copyNode 8
copyTree 10
createDependents 1
destroyDependents 1
endUpdate 13
insertAfter 6
insertAsNthChild 4
isJoinedTo 13
isOnJoinListOf 10
joinNodeTo 10 **
joinTreeTo 10 **
lastChild 13
linkAfter 6
linkAsNthChild 5
moveToNthChildOf 1
nthChild 3
redraw 1
select 1
shouldBeClone 10
undo 1
unlink 1
</t>
<t tx="ekr.20031218072017.1099"></t>
<t tx="ekr.20031218072017.1100"></t>
<t tx="ekr.20031218072017.1101">@nocolor

The new rules allow leo.py 3.1 to read and write .leo files more like leo.py 2.x when there is no leoConfig.txt file.  The scheme used in leo.py 3.0 meant that preferences were _never_ written to .leo files.  It's advantage was that all defaults were specified in:

	leoConfig.&lt;&lt; define default tables for settings &gt;&gt;

I think the present scheme is more natural, but we shall see...

In effect, Leo sets and gets various options in the following order of precedence:

1. Use explicit settings in leoConfig.txt if they exist.

2. Use defaults for leoConfig.txt, but only if leoConfig.txt exists.  These defaults are found in:

	leoConfig.&lt;&lt; define default tables for settings &gt;&gt;

3. Use settings in .leo files if leoConfig.txt does not exist.

4. If leoConfig.txt does not exist, and the .leo file does not specify a setting, use hard-coded settings in the various classes, just as leo.py 2.x did.

Added the config.configsExist ivar to tell whether leoConfig.txt exists (as far as Leo is concerned).</t>
<t tx="ekr.20031218072017.1102"></t>
<t tx="ekr.20031218072017.1103"></t>
<t tx="ekr.20031218072017.1104">@ @first lines are handled at follows:
	
Reading
	
1. scanHeader ignores all lines preceding the @+leo line.  Such lines were presumably written as the result of @first directives.

2. @first directives get turned into @verbatim sentinels, so the read logic for @verbatim handles these directives as usual and turns them into body text.

Writing

1. atFile::write calls &lt;&lt; put @first lines in root &gt;&gt; to scan the body text looking for @first line.  Such lines are output.

2. atFile::write does the following to put the entire tree.

	self.putOpenLeoSentinel("@+leo")
	self.putOpenNodeSentinel(root)
	self.putBodyPart(root)
	...
	self.putCloseNodeSentinel(root)
	self.putSentinel("@-leo")
	
putBodyPart converts @first (and soon, @last) to @verbatim sentinels.

To implement @last we need only to the following:
	
1. putBodyPart and allies will handle @last like @first, namely by converting to @verbatim sentinels.

2. The read logic can just ignore anything after the @-leo sentinel.  Such code was presumably written by @last.</t>
<t tx="ekr.20031218072017.1105">@ Same as @file except puts no sentinels in the derived file.  Same as @silentfile except that section references and definitions are valid.
@c

</t>
<t tx="ekr.20031218072017.1106">@nocolor

By: travers ( Travers A. Hough ) 
 RE: @nosentinelsfile on CVS, was: could Leo...   
2002-11-29 06:33
 
It looks like @nsf may be injecting additional tabs at the beginning or end of body text.

see Extra Tabs.leo

-----

This is nasty code to get correct.  What I did:

- changed the following sections of putCodePart:

1. &lt;&lt; put the line &gt;&gt;
	Buffered characters to make tracing easier. (reduces calls to self.os)
	Don't write trailing indentation if not writing sentinels.

2. &lt;&lt; handle @others &gt;&gt;
	Skip the newline after @others if we aren't putting sentinels.

</t>
<t tx="ekr.20031218072017.1107">@nocolor

Changes made 9/25/02:
	
1. Attempt to create directory if config.path_directive_creates_directories is true.
2. Call getBaseDirectory to handle config.relative_path_base_directory option.

There are _way_ too many paths through this code!

@color</t>
<t tx="ekr.20031218072017.1108">@ignore</t>
<t tx="ekr.20031218072017.1109">@language plain
@comment # /* */

This is plain text.

# This is a comment.

More plain text.

/* A block comment
ths continues */

More plain text.</t>
<t tx="ekr.20031218072017.1110"># The problem is that only the top-level directory is created.

@ignore</t>
<t tx="ekr.20031218072017.1111">@nocolor

By: davidmcnab ( David McNab ) 
 Feature Req: auto-create dirs for @file   
2002-11-17 06:33  
Hi, 

I'm getting fond of the practice of distributing source code as a tarball, containing only a .leo file, plus a README telling people to install Leo. 

There's presently one obstacle to this - when @file nodes exist for files in child directories, Leo doesn't (yet) create directories as needed. 

I humbly suggest that when writing out @file nodes, Leo creates all needed subdirectories that don't already exist.

------------------
 
I set create_nonexistent_directories=1 in leoConfig.txt, but Leo still won't create the needed subdirectories. 

</t>
<t tx="ekr.20031218072017.1112"># Allow test code...
@ignore</t>
<t tx="ekr.20031218072017.1113">@nocolor

The test code shows that all normal cases are handled correctly.  Nevertheless, we must prove that Leo can properly read and write @file nodes with nested @others directives.

Writing:

putAtOthers writes all nodes to be generated by @others.  inAtOthers returns false if the node has already been visited.  Nodes will not be visited when expanding the "outer" or "upper" @others, and will be visited thereafter.  Thus, nodes will be written at most once.

putAtOthers writes only sibling nodes and nodes descending from sibling nodes.  The expansion of inner @others nodes will never include parent nodes.  The expansion of an @others directive at @file node will write all unwritten nodes in the @file node.

In short,

1. all nodes in the "range" of an @others directive are written once and only once.
2. all nodes in the "range" of an @others directive are written enclosed in @+-others sentinels.
3. No orpan nodes are written.

Reading:

The read logic is unchanged.  Everything will work as before.  In particular, note that @+-others sentinels create trees under nodes containing the @others directive, just as before.  The read logic naturally handles nesting!</t>
<t tx="ekr.20031218072017.1114"></t>
<t tx="ekr.20031218072017.1115">@ignore</t>
<t tx="ekr.20031218072017.1116">@file-nosent
&lt;&lt; ref &gt;&gt;</t>
<t tx="ekr.20031218072017.1117">ref line</t>
<t tx="ekr.20031218072017.1118">@file-noref
&lt;&lt; ref &gt;&gt;</t>
<t tx="ekr.20031218072017.1119">ref line</t>
<t tx="ekr.20031218072017.1120">@file-asis
&lt;&lt; ref &gt;&gt;</t>
<t tx="ekr.20031218072017.1121">ref line</t>
<t tx="ekr.20031218072017.1122">@ignore</t>
<t tx="ekr.20031218072017.1123">@language perlpod
@path c:\prog\test</t>
<t tx="ekr.20031218072017.1124">@ Multi-line
doc part
@root perlpod.txt
&lt;&lt;ref&gt;&gt;</t>
<t tx="ekr.20031218072017.1125">@ doc part2
@c
code line1
code line2
@ more doc part</t>
<t tx="ekr.20031218072017.1126">@comment REM_</t>
<t tx="ekr.20031218072017.1127">test 6</t>
<t tx="ekr.20031218072017.1128">@ atFile.directiveKind is return miscDirective on _any_ line that starts with @</t>
<t tx="ekr.20031218072017.1129">@ignore

line 1
@line 2
	@line 3
line 4</t>
<t tx="ekr.20031218072017.1130">if match (s,i,self.startSentinelComment + '@'):
	self.putSentinel("verbatim")</t>
<t tx="ekr.20031218072017.1131"></t>
<t tx="ekr.20031218072017.1132">This works in the log and body panes, and not in the outline pane.

proc mscroll {bindtag} {
      bind $bindtag &lt;Button-5&gt; [list %W yview scroll 5 units]
      bind $bindtag &lt;Button-4&gt; [list %W yview scroll -5 units]
      bind $bindtag &lt;Shift-Button-5&gt; [list %W yview scroll 1 units]
      bind $bindtag &lt;Shift-Button-4&gt; [list %W yview scroll -1 units]
      bind $bindtag &lt;Control-Button-5&gt; [list %W yview scroll 1 pages]
      bind $bindtag &lt;Control-Button-4&gt; [list %W yview scroll -1 pages]

from Tkinter import *

def roll(event):
    print event.delta

frame = Frame(width=200, height=200)
frame.pack()
frame.focus_set() # wheel events goes to focussed window
frame.bind("&lt;MouseWheel&gt;", roll)
</t>
<t tx="ekr.20031218072017.1133">@ This is very tricky code.  The new code appears to work well in all situations.</t>
<t tx="ekr.20031218072017.1134">@nocolor

Have the outline pane scroll by one line when focus moves to the first (or last) node in the pane.

Currently, moving focus up from the first node scrolls by one, but the first node on the screen may be partially off-screen, depending on the outline font. 

Moving focus down from the last node causes a page-down, after which the first node on the screen has focus, but this node may be partially off-screen. 
</t>
<t tx="ekr.20031218072017.1135"></t>
<t tx="ekr.20031218072017.1136"></t>
<t tx="ekr.20031218072017.1137">@nocolor
Here is the above code in a function, with definitions for missing functions min/max and with missing function lset replaced with calls to scan. The code has also been modified to correctly handle more than a screenful of text. This code still lacks the feature found in the default tkTextUpDownLine where the original column is maintained across repeated operations even though some lines passed through don't have enough columns -- Brian Theado:
@color
@language tcltk

 proc min args {lindex [lsort -real $args] 0}
 proc max args {lindex [lsort -real $args] end}
 
 proc moveUpDown {textWidget upOrDown} {
     # Make the insertion cursor visible so bbox doesn't return empty list
     $textWidget see insert

     # Find the coordinates of the cursor and set the new height
     # manually. Note: errors rounding off, since
     # coordinates don't match character positions exactly.
     scan [$textWidget index insert] {%d.%d} lines char
     scan [$textWidget bbox [$textWidget index insert]] {%d %d %d %d} x y textWidth textHeight
     scan [$textWidget bbox @[winfo width $textWidget],[winfo height $textWidget]] {%*d %d %*d %*d} maxy
     # When updating position, make sure y is within text boundaries
     switch -- $upOrDown {
       "up" {
           if {$y &lt;= $textHeight} {
               $textWidget yview scroll -1 units
           } else {
               set y [max [expr $y-$textHeight] 0]
           }
       }
       "down" {
           if {$y &gt;= $maxy} {
                $textWidget yview scroll 1 units
           } else {
                set y [min [expr $y+$textHeight] $maxy]
           }
       }
     }
     scan [$textWidget bbox [$textWidget index @$x,$y]] {%d %d %d %*d} newx newy width

     # Test on which side of the character
     # we should position the cursor
     if {$x&gt;[expr $newx+$width/2]} {
       set x [expr $newx+$width+1]
     }
     return [$textWidget index @$x,$y]
 }

 # Replace the default Text widget bindings to try it out
 bind Text &lt;Up&gt; {
    tkTextSetCursor %W [moveUpDown %W up]
 }
 bind Text &lt;Down&gt; {
    tkTextSetCursor %W [moveUpDown %W down]
 }</t>
<t tx="ekr.20031218072017.1138">@nocolor

&gt;Drat. There is some interaction between the new moveUpDown code and previous bindings... 

Note the code at http://wiki.tcl.tk/3082 is passing the result of moveUpDown to the function tkTextSetCursor, which both moves the insertion cursor and removes the selection (see lib/tk8.3/text.tcl in the Tcl/Tk distribution for the definition of this function). I notice in the leo code just moves the insertion cursor. 

Also, I just realized that Shift-Up and Shift-Down should probably rebound to use the new up/down code so stroking the selection is consistent with moving up and down. I updated the above referenced web page with this change. 

In Python the Shift-Up and Shift-Down is probably harder to incorporate in Python because it uses tkTextKeySelect which does more than tkTextSetCursor (have a look at text.tcl). I guess either more transliteration of Tcl ("greek") would be needed or maybe the tkTextKeySelect can be called from Python. 

Brian Theado </t>
<t tx="ekr.20031218072017.1139">@nocolor

https://sourceforge.net/forum/message.php?msg_id=1796317
By: nobody

I am a newbie to Leo, and not a programmer.
I intend to use it to write plain text, not code. I believe Leo is an ideal
writer's tool as well.

But there is one behaviour of the TkText widget that I find hard to swallow:
not to be able to move through a paragraph of text with the cursor keys.

To quote from the Leo documentation: 
"Line movement is by text lines terminated by hard returns (newlines), not by
displayed lines; if a text line is long and wraps across more than one display
line, then the Up and Down movement will skip the extra wrapped display lines."

This is probably fine for programming where a code line is usually shorter than
a screen line and so all lines are terminated by hard returns. But for plain
text in ordinary writing, most paragraphs are longer than a screen line. So
I am forced to use the mouse for every movement in the text. Unless I want to
go back word-by-word through the whole paragraph. Not very effective for writers
who mostly prefer the keyboard over the mouse.

If this cannot be changed, I would like to see MORE's 'hoist' command implemented:
hoisting the body pane text to a separate, preferrably full screen editor window
with a more navigable editor.
Actually I would like to see a 'hoist' command anyway. Working on my text on
the full screen is just nicer. But being able to bring the body pane size up
to full screen height with one command would be enough (if I could use cursor
keys for movement across screen lines...).

Ulrich
</t>
<t tx="ekr.20031218072017.1140">1 aaaaaaaaaaaaaaaa bbbbbbbbbbbbbbbbbb cccccccccccccccccc dddddddddddddddd
2 eeeeeeeeeeeeeeeeeeeeeee ffffffffffffffffffff ggggggggggggggggggg hhhhhhhhhhhhh
3 iiiiiiiiiiiiiiiiiiii jjjjjjjjjjjjjjjjjjjjj kkkkkkkkkkkkkkk













4 aaaaaaaaaaaaaaaa bbbbbbbbbbbbbbbbbb cccccccccccccccccc dddddddddddddddd
5 eeeeeeeeeeeeeeeeeeeeeee ffffffffffffffffffff ggggggggggggggggggg hhhhhhhhhhhhh
6 iiiiiiiiiiiiiiiiiiii jjjjjjjjjjjjjjjjjjjjj kkkkkkkkkkkkkkk</t>
<t tx="ekr.20031218072017.1141">def OnUpKey   (self,event=None): return self.moveUpDown("up")
def OnDownKey (self,event=None): return self.moveUpDown("down")

def moveUpDown (self,upOrDown):
	c = self.c ; body = c.frame.bodyCtrl
	# Make the insertion cursor visible so bbox won't return an empty list.
	body.see("insert")
	# Find the coordinates of the cursor and set the new height.
	# There may be roundoff errors because character postions may not match exactly.
	ins =  body.index("insert")
	lines,char = g.scanf(ins,"%d.%d")
	x,y,junk,textH = body.bbox("insert")
	bodyW,bodyH = body.winfo_width(),body.winfo_height()
	junk,maxy,junk,junk = body.bbox("@%d,%d" % (bodyW,bodyH))
	# Make sure y is within text boundaries.
	if upOrDown == "up":
		if y &lt;= textH:
			body.yview("scroll",-1,"units")
		else: y = max(y-textH,0)
	else:
		if y &gt;= maxy:
			body.yview("scroll",1,"units")
		else: y = min(y+textH,maxy)
	# Position the cursor on the proper side of the characters.
	newx,newy,width,junk = body.bbox("@%d,%d" % (x,y))
	if x &gt; newx + width/2:
		x = newx + width + 1
	result = body.index("@%d,%d" % (x,y))
	body.mark_set("insert",result)
	# g.trace("entry:  %s.%s" % (lines,char))
	# g.trace("result:",result)
	# g.trace("insert:",body.index("insert"))
	return "break" # Inhibit further bindings.</t>
<t tx="ekr.20031218072017.1142"></t>
<t tx="ekr.20031218072017.1143"></t>
<t tx="ekr.20031218072017.1144">def openOutputFile (self):
	
	if self.outputFileName == None:
		return
	dir,name = g.os_path_split(self.outputFileName)
	if len(dir) == 0:
		self.show("empty output directory")
		return
	if len(name) == 0:
		self.show("empty output file name")
		return
	if not g.os_path_exists(dir):
		self.show("output directory not found: " + dir)
	else:
		try:
			if self.appendOutput:
				self.show("appending to " + self.outputFileName)
				self.outputFile = open(self.outputFileName,"ab")
			else:
				self.show("writing to " + self.outputFileName)
				self.outputFile = open(self.outputFileName,"wb")
		except:
			self.outputFile = None
			self.show("exception opening output file")
			g.es_exception()</t>
<t tx="ekr.20031218072017.1145"># Rewrites the entire config file from ivars.
# This is called when a .leo file is written and when the preferences panel changes.

def update (self):
	
	# Do nothing if the file does not exist, or if read_only.
	if self.read_only:
		# print "Read only config file"
		return
	if not g.os_path_exists(self.configFileName):
		# print "No config file"
		return
	
	config = ConfigParser.ConfigParser()
	self.config = config
	try:
		# 9/1/02: apparently Linux requires w+ and XP requires w.
		mode = g.choose(sys.platform=="win32","wb","wb+")
		cf = open(self.configFileName,mode)
		config.readfp(cf)
		&lt;&lt; write recent files section &gt;&gt;
		for section,dict in self.sectionInfo:
			if dict:
				self.update_section(config,section,dict)
		config.write(cf)
		cf.flush()
		cf.close()
	except:
		g.es("exception writing: " + self.configFileName)
		g.es_exception()
	self.config = None</t>
<t tx="ekr.20031218072017.1146">section = self.recentFilesSection
files = self.recentFiles

section = g.toEncodedString(section,"utf-8") # 10/31/03

if config.has_section(section):
	config.remove_section(section)
config.add_section(section)

if 0: # elegant, but may be a security hole.
	config.set(section,"recentFiles",files)
else: # easier to read in the config file.
	for i in xrange(len(files)):
		f = g.toEncodedString(files[i],self.config_encoding) # 10/31/03
		config.set(section, "file"+`i`, f)</t>
<t tx="ekr.20031218072017.1147">def flattenOutline (self,fileName):

	c = self.c ; nl = self.output_newline
	p = c.currentVnode()
	if not p: return
	self.setEncoding()
	firstLevel = p.level()
	try:
		# 10/14/02: support for output_newline setting.
		mode = g.app.config.output_newline
		mode = g.choose(mode=="platform",'w','wb')
		file = open(fileName,mode)
		
		for p in p.subtree_iter():
			head = p.moreHead(firstLevel)
			head = g.toEncodedString(head,self.encoding,reportErrors=true)
			file.write(head + nl)
			body = p.moreBody() # Inserts escapes.
			if len(body) &gt; 0:
				body = g.toEncodedString(body,self.encoding,reportErrors=true)
				file.write(body + nl)
		file.close()
	except:
		g.es("exception while flattening outline")
		g.es_exception()</t>
<t tx="ekr.20031218072017.1148">def outlineToWeb (self,fileName,webType):

	c = self.c ; nl = self.output_newline
	current = c.currentPosition()
	if not current: return
	self.setEncoding()
	self.webType = webType
	try: # This can fail if the file is open by another app.
		# 10/14/02: support for output_newline setting.
		mode = g.app.config.output_newline
		mode = g.choose(mode=="platform",'w','wb')
		file = open(fileName,mode)
		self.treeType = "@file"
		# Set self.treeType to @root if p or an ancestor is an @root node.
		for p in current.parents_iter():
			flag,junk = g.is_special(p.bodyString(),0,"@root")
			if flag:
				self.treeType = "@root"
				break
		for p in current.subtree_iter():
			s = self.convertVnodeToWeb(p)
			if len(s) &gt; 0:
				s = g.toEncodedString(s,self.encoding,reportErrors=true)
				file.write(s)
				if s[-1] != '\n': file.write(nl)
		file.close()
	except:
		g.es("exception in Outline To noweb command")
		g.es_exception()</t>
<t tx="ekr.20031218072017.1149">try:
	mode = g.app.config.output_newline
	mode = g.choose(mode=="platform",'w','wb')
	file = open(newFileName,mode)
	s = g.toEncodedString(s,self.encoding,reportErrors=true)
	file.write(s)
	file.close()
	g.es("creating: " + newFileName)
except:
	g.es("exception creating: " + newFileName)
	g.es_exception()</t>
<t tx="ekr.20031218072017.1150">try:
	# 10/14/02: support for output_newline setting.
	mode = g.app.config.output_newline
	mode = g.choose(mode=="platform",'w','wb')
	f = open(filename,mode)
	if not f: return
except:
	g.es("exception opening:" + filename)
	g.es_exception()
	return</t>
<t tx="ekr.20031218072017.1151">@ This is the top level method of the second pass. It creates a separate C file for each @root directive in the outline. As will be seen later,the file is actually written only if the new version of the file is different from the old version,or if the file did not exist previously. If changed_only_flag FLAG is true only changed roots are actually written.
@c

def put_all_roots(self):

	c = self.c ; outline_name = c.mFileName

	for section in self.root_list:
	
		# g.trace(`section.name`)
		file_name = g.os_path_join(self.tangle_directory,section.name)
		file_name = g.os_path_normpath(file_name)
		temp_name = g.create_temp_name()
		if not temp_name:
			g.es("Can not create temp file")
			break
		# Set the output_file global.
		# Use "text" mode for platform-specific newlines.
		mode = g.app.config.output_newline
		mode = g.choose(mode=="platform",'w','wb')
		try:
			self.output_file = open(temp_name,mode)
			if not self.output_file:
				g.es("Can not create: " + temp_name)
				break
		except:
			g.es("Can not create: " + temp_name)
			break
		&lt;&lt;Get root specific attributes&gt;&gt;
		&lt;&lt;Put @first lines&gt;&gt;
		if self.use_header_flag and self.print_mode == "verbose":
			&lt;&lt; Write a banner at the start of the output file &gt;&gt;
		for part in section.parts:
			if part.is_root:
				self.tangle_indent = 0 # Initialize global.
				self.put_part_node(part,false) # output first lws
		self.onl() # Make sure the file ends with a cr/lf
		self.output_file.close()
		self.output_file = None
		if self.errors == 0:
			g.update_file_if_changed(file_name,temp_name)
		else:
			g.es("unchanged:  " + file_name)
			&lt;&lt; Erase the temporary file &gt;&gt;</t>
<t tx="ekr.20031218072017.1152"># Stephen Schaefer, 9/2/02
# Retrieve the full complement of state for the root node
self.language = section.root_attributes.language
self.single_comment_string = section.root_attributes.single_comment_string
self.start_comment_string = section.root_attributes.start_comment_string
self.end_comment_string = section.root_attributes.end_comment_string
self.use_header_flag = section.root_attributes.use_header_flag
self.print_mode = section.root_attributes.print_mode
self.path = section.root_attributes.path
self.page_width = section.root_attributes.page_width
self.tab_width = section.root_attributes.tab_width
# Stephen P. Schaefer, 9/13/2002
self.first_lines = section.root_attributes.first_lines</t>
<t tx="ekr.20031218072017.1153"># Stephen P. Schaefer 9/13/2002
if self.first_lines:
	self.os(self.first_lines)</t>
<t tx="ekr.20031218072017.1154">if self.single_comment_string:
	self.os(self.single_comment_string)
	self.os(" Created by Leo from: ")
	self.os(outline_name)
	self.onl() ; self.onl()
elif self.start_comment_string and self.end_comment_string:
	self.os(self.start_comment_string)
	self.os(" Created by Leo from: ")
	self.os(outline_name)
	self.oblank() ; self.os(self.end_comment_string)
	self.onl() ; self.onl()
</t>
<t tx="ekr.20031218072017.1155">try: # Just delete the temp file.
	os.remove(temp_name)
except: pass
</t>
<t tx="ekr.20031218072017.1156">@ It does not appear that &lt; &lt; scan @delims &gt; &gt; was _ever_ executed!</t>
<t tx="ekr.20031218072017.1157">@nocolor

Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=1722358
By: nobody

Like a few other folks who have posted in this forum, I'm trying to embed Javascript
in XML.  Leo is a great tool for writing XSLT, and will be even better after
a few bugs are stamped out. :-)

The following text in an @file node can't be roundtripped (i.e., does not survive
a Leo exit and restart) unless the derived file is deleted before the restart.

@language HTML
@delims /* */     
&lt;script a3:scriptImplementation="Adobe" type="text/ecmascript"&gt;

  // Hi Mom!

@delims &lt;!-- --&gt;

&lt;/script&gt;

Upon restart, the second @delims directive appears in Leo as:

/*@@delims &lt;!-- --&gt; */

If one then makes a trivial change and resaves the document, it cannot be reopened
by Leo unless the derived file is deleted.  The error messages in this case are:

reading: C:\users\mjs\tmp\delimsRoundTrip.leo
reading: @file delimsRoundTrip.xml
----- error reading @file delimsRoundTrip.xml
Unexpected end of file. Expecting @-bodysentinel
exceptions openingC:\users\mjs\tmp\delimsRoundTrip.leo
AssertionError


Note that without the leading @language directive, we skip the partially successful
roundtrip and go straight to the errors.  Changing this directive from HTML
to java has no effect that I can see on the outcome.

I'm using the Leo code from CVS, up to date as of 18 Oct 2002, 14:30ish MDT.

Is this a reasonable way to use @delims?  My reading of the other forum threads
might not have been accurate.

Thanks again,
--Michael Stevens
  mstevens at transgenomic dot com
</t>
<t tx="ekr.20031218072017.1158">@nocolor

Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=1723814
By: nobody

&lt;&lt;intro&gt;&gt;

So, after reading the forums and then the documentation for the @delims directive,
I said, "Oh, that's what I was supposed to use," and instead wrote:

@delims /* */
&lt;script a3:scriptImplementation="Adobe" type="text/ecmascript"&gt;
  &lt;![CDATA[
@others
]]&gt;
@delims &lt;!-- --&gt;
&lt;/script&gt;


(The first @delims directive has to go before the &lt;script&gt; tag, or else the
sentinel comment for the @delims directive itself appears in the script region
delimited by XML comment delimiters.)

This does the right thing in the derived file:

#@+leo
#@+node:0::@file delimsRoundTrip.xml
#@+body
#@@delims /* */ 
&lt;script a3:scriptImplementation="Adobe" type="text/ecmascript"&gt;
  &lt;![CDATA[

/*@+others*/
/*@+node:1::subnode*/
/*@+body*/

function sendUpFlare() {
  alert("Hi Mom!");
}

/*@-body*/
/*@-node:1::subnode*/
/*@-others*/

]]&gt;

/*@@delims &lt;!-- --&gt; */
&lt;/script&gt;

&lt;!--@-body--&gt;
&lt;!--@-node:0::@file delimsRoundTrip.xml--&gt;
&lt;!--@-leo--&gt;


The contents of the &lt;script&gt;&lt;/script&gt; region will now pass muster with the Javascript
interpreter.  (I'm ignoring the leading # comments for now -- they shouldn't
be a problem if I use @language html somewhere upstream, right?)

But this derived file cannot be read back in by the Leo code in CVS as of Sunday
afternoon:

reading: C:\users\mjs\tmp\delimsRoundTrip.leo
reading: @file delimsRoundTrip.xml
----- error reading @file delimsRoundTrip.xml
Unexpected end of file. Expecting @-bodysentinel
exceptions openingC:\users\mjs\tmp\delimsRoundTrip.leo
AssertionError

Looks to my untrained eye as though the @@delims sentinel marking the return
to XML comment delimiters isn't being processed correctly in the @file reading
code. (?)  Wish I were better at reading Python. :-(

Regarding my earlier comment about mutations of the second @delims directives:
that may be a symptom of this @file parsing issue, rather than a bug in its
own right.

--Michael</t>
<t tx="ekr.20031218072017.1159">Okay, maybe Friday was one of my marginal-competence days. :-)  Looking back,
my first post described the situation a couple of attempted workarounds away
from the straightforward approach, and didn't explain my goal well at all.

The goal is to maintain (in Leo) an XSLT stylesheet, elements of which generate
Javascript functions which are included inside &lt;script&gt;&lt;/script&gt; tags in the
SVG document which is the product of the stylesheet.

Imagine this as the content of an @file node:

&lt;script a3:scriptImplementation="Adobe" type="text/ecmascript"&gt;
  &lt;![CDATA[
@language java

@others

@language html
]]&gt;
&lt;/script&gt;


where the subnodes all contain modules of Javascript.  For this example, there
is a single subnode containing a single Javascript function, sendUpFlare().
(In the real application, there's a lot more stuff going on, and the &lt;script&gt;
element is a couple levels down from the @file node, but I think this test case
is still a valid demonstration of the problem I'm having).

When I try this, the @language java directive appears to have no effect on the
derived file.  The sentinel comments are still delimited in XML style with &lt;!--
and --&gt;, which causes problems for the Javascript interpreter:

&lt;!--@+leo--&gt;
&lt;!--@+node:0::@file delimsRoundTrip.xml--&gt;
&lt;!--@+body--&gt;
&lt;script a3:scriptImplementation="Adobe" type="text/ecmascript"&gt;
  &lt;![CDATA[

&lt;!--@@language java--&gt;


&lt;!--@+others--&gt;
&lt;!--@+node:1::subnode--&gt;
&lt;!--@+body--&gt;

function sendUpFlare() {
  alert("Hi Mom!");
}

&lt;!--@-body--&gt;
&lt;!--@-node:1::subnode--&gt;
&lt;!--@-others--&gt;



&lt;!--@@language html--&gt;
]]&gt;
&lt;/script&gt;

&lt;!--@-body--&gt;
&lt;!--@-node:0::@file delimsRoundTrip.xml--&gt;
&lt;!--@-leo--&gt;



What I [perhaps erroneously] expected was that Leo would begin using Java style
comment delimiters for sentinel comments after the @language java directive,
so that the region of the derived file between the &lt;script&gt;&lt;/script&gt; tags would
be syntactically-acceptable Javascript (except for typos/thinkos therein --
not Leo's problem!).  But it doesn't.</t>
<t tx="ekr.20031218072017.1160">assert(match(s,i-1,"@delims"));

# Skip the keyword and whitespace.
i0 = i-1
i = skip_ws(s,i-1+7)
	
# Get the first delim.
j = i
while i &lt; len(s) and not is_ws(s[i]) and not is_nl(s,i):
	i += 1

if j &lt; i:
	self.startSentinelComment = s[j:i]
	# print "delim1:", self.startSentinelComment

	# Get the optional second delim.
	j = i = skip_ws(s,i)
	while i &lt; len(s) and not is_ws(s[i]) and not is_nl(s,i):
		i += 1
	end = choose(j&lt;i,s[j:i],"")
	i2 = skip_ws(s,i)
	if end == self.endSentinelComment and (i2 &gt;= len(s) or is_nl(s,i2)):
		self.endSentinelComment = "" # Not really two params.
		line = s[i0:j]
		line = line.rstrip()
		out.append(line+'\n')
	else:
		self.endSentinelComment = end
		# print "delim2:",end
		line = s[i0:i]
		line = line.rstrip()
		out.append(line+'\n')
else:
	self.readError("Bad @delims")
	# Append the bad @delims line to the body text.
	out.append("@delims")</t>
<t tx="ekr.20031218072017.1161"></t>
<t tx="ekr.20031218072017.1162">@nocolor

Bugs item #642952, was opened at 2002-11-23 19:38
You can respond by visiting: 
https://sourceforge.net/tracker/?func=detail&amp;atid=103458&amp;aid=642952&amp;group_id=3458

Initial Comment: XML GLITCHES - ELEMENT COLLAPSE IS BAD

Converting an empty &lt;tnodes&gt;&lt;/tnodes&gt; element to a "collapsed" &lt;tnodes /&gt;
element will cause the LEO editor to interpret the file as a bad leo file.
Generally, it appears that collapsing any expanded tags, or expanding any
collapsed tags, will cause the 'bad file' error. This makes it impossible to
edit a .leo file in any XML editor that automatically converts empty elements
to either all-collapsed or all expanded (like XMLSpy does). Technically,
collapsed elements do not violate the 'well-formed' standard of XML 1.0 (the
standard treats collapsed and expanded tags as syntactically identical), but
apparently well-formed XML is not enough for the LEO editor, or whatever it
uses to parse XML.</t>
<t tx="ekr.20031218072017.1163">@ignore</t>
<t tx="ekr.20031218072017.1164"># N.B. No longer crashes, but will not work as expected.
# The end of the &lt; &lt; Raw on &gt; &gt; node will reset raw mode.

	&lt;&lt; Raw ON &gt;&gt; 
	&lt;&lt;Stuff&gt;&gt; 
	&lt;&lt; Raw OFF &gt;&gt; 
</t>
<t tx="ekr.20031218072017.1165">@raw

	</t>
<t tx="ekr.20031218072017.1166">@end_raw 
</t>
<t tx="ekr.20031218072017.1167">asfdasdfrdshfyhbsdfdewgs 
fwsgdfgsdfsd</t>
<t tx="ekr.20031218072017.1168">def putBodyPart(self,v):
	
	""" Generate the body enclosed in sentinel lines."""

	# trace(`v`)
	s = v.t.bodyString
	i = skip_ws_and_nl(s, 0)
	if i &gt;= len(s): return

	s = removeTrailingWs(s) # don't use string.rstrip!
	self.putSentinel("@+body")
	&lt;&lt; put code/doc parts and sentinels &gt;&gt;
	self.putSentinel("@-body")</t>
<t tx="ekr.20031218072017.1169">i = 0 ; n = len(s)
firstLastHack = 1

if firstLastHack:
	&lt;&lt; initialize lookingForFirst/Last &amp; initialLastDirective &gt;&gt;
while i &lt; n:
	kind = self.directiveKind(s,i)
	if firstLastHack:
		&lt;&lt; set lookingForFirst/Last &amp; initialLastDirective &gt;&gt;
	j = i
	if kind == atFile.docDirective or kind == atFile.atDirective:
		i = self.putDoc(s,i,kind)
	elif ( # 10/16/02
		kind == atFile.miscDirective or
		kind == atFile.rawDirective or
		kind == atFile.endRawDirective ):
		if firstLastHack:
			&lt;&lt; handle misc directives &gt;&gt;
		else:
			i = self.putDirective(s,i)
	elif kind == atFile.noDirective or kind == atFile.othersDirective:
		i = self.putCodePart(s,i,v)
	elif kind == atFile.cDirective or kind == atFile.codeDirective:
		i = self.putDirective(s,i)
		i = self.putCodePart(s,i,v)
	else: assert(false) # We must handle everything that directiveKind returns
	assert(n == len(s))
	assert(j &lt; i) # We must make progress.

if firstLastHack:
	&lt;&lt; put out the last directives, if any &gt;&gt;</t>
<t tx="ekr.20031218072017.1170"># 14-SEP-2002 DTHEIN: If this is the root node, then handle all @first directives here
lookingForLast = 0
lookingForFirst = 0
initialLastDirective = -1
lastDirectiveCount = 0
if (v == self.root):
	lookingForLast = 1
	lookingForFirst = 1</t>
<t tx="ekr.20031218072017.1171"># 14-SEP-2002 DTHEIN: If first directive isn't @first, then stop looking for @first
if lookingForFirst:
	if kind != atFile.miscDirective:
		lookingForFirst = 0
	elif not match_word(s,i,"@first"):
		lookingForFirst = 0

if lookingForLast:
	if initialLastDirective == -1:
		if (kind == atFile.miscDirective) and match_word(s,i,"@last"):
			# mark the point where the last directive was found
			initialLastDirective = i
	else:
		if (kind != atFile.miscDirective) or (not match_word(s,i,"@last")):
			# found something after @last, so process the @last directives
			# in 'ignore them' mode
			i, initialLastDirective = initialLastDirective, -1
			lastDirectiveCount = 0
			kind = self.directiveKind(s,i)</t>
<t tx="ekr.20031218072017.1172">if lookingForFirst: # DTHEIN: can only be true if it is @first directive
	i = self.putEmptyDirective(s,i)
elif (initialLastDirective != -1) and match_word(s,i,"@last"):
	# DTHEIN: can only be here if lookingForLast is true
	# skip the last directive ... we'll output it at the end if it
	# is truly 'last'
	lastDirectiveCount += 1
	i = skip_line(s,i)
else:
	i = self.putDirective(s,i)</t>
<t tx="ekr.20031218072017.1173"># 14-SEP-2002 DTHEIN
if initialLastDirective != -1:
	d = initialLastDirective
	for k in range(lastDirectiveCount):
		d = self.putEmptyDirective(s,d)</t>
<t tx="ekr.20031218072017.1174">@ In scanText I moved code from the @+node logic to the @+body logic.  I also removed code in atFile::read that set the body text.

So now body text is updated only as the direct result of @+body, so the presence or absence of @+node sentinels can have no effect.

The code is very similar to the old code; it is simply in a new place.  However, this is no guarantee of correctness or completelness.</t>
<t tx="ekr.20031218072017.1175">@ignore</t>
<t tx="ekr.20031218072017.1176">@language html
before
@ Out-of-control comment.
Not.
@c 
after</t>
<t tx="ekr.20031218072017.1177"># Scans the doc part and appends the text out.
# s,i point to the present line on entry.

def scanDoc(self,file,s,i,out,kind):

	endKind = choose(kind == atFile.startDoc, atFile.endDoc, atFile.endAt)
	single = len(self.endSentinelComment) == 0
	&lt;&lt; Skip the opening sentinel &gt;&gt;
	&lt;&lt; Skip an opening block delim &gt;&gt;
	nextLine = None ; kind = atFile.noSentinel
	while len(s) &gt; 0:
		&lt;&lt; set kind, nextLine &gt;&gt;
		if kind == endKind: break
		&lt;&lt; Skip the leading stuff &gt;&gt;
		&lt;&lt; Append s to out &gt;&gt;
		if nextLine:
			s = nextLine ; nextLine = None
		else: s = self.readLine(file)
	if kind != endKind:
		self.readError("Missing " + self.sentinelName(endKind) + " sentinel")
	&lt;&lt; Remove a closing block delim from out &gt;&gt;</t>
<t tx="ekr.20031218072017.1178">assert(match(s,i,choose(kind == atFile.startDoc, "+doc", "+at")))

out.append(choose(kind == atFile.startDoc, "@doc", "@"))
s = self.readLine(file)
</t>
<t tx="ekr.20031218072017.1179">if not single:
	j = skip_ws(s,0)
	if match(s,j,self.startSentinelComment):
		s = self.readLine(file)</t>
<t tx="ekr.20031218072017.1180">@ For non-sentinel lines we look ahead to see whether the next line is a sentinel.
@c

assert(nextLine==None)

kind = self.sentinelKind(s)

if kind == atFile.noSentinel:
	j = skip_ws(s,0)
	blankLine = s[j] == '\n'
	nextLine = self.readLine(file)
	nextKind = self.sentinelKind(nextLine)
	if blankLine and nextKind == endKind:
		kind = endKind # stop the scan now
</t>
<t tx="ekr.20031218072017.1181"># Point i to the start of the real line.

if single: # Skip the opening comment delim and a blank.
	i = skip_ws(s,0)
	if match(s,i,self.startSentinelComment):
		i += len(self.startSentinelComment)
		if match(s,i," "): i += 1
else:
	i = self.skipIndent(s,0, self.indent)
</t>
<t tx="ekr.20031218072017.1182"># Append the line with a newline if it is real

line = s[i:-1] # remove newline for rstrip.

if line == line.rstrip():
	# no trailing whitespace: the newline is real.
	out.append(line + '\n')
else:
	# trailing whitespace: the newline is not real.
	out.append(line)
</t>
<t tx="ekr.20031218072017.1183"># This code will typically only be executed for HTML files.

if not single:

	delim = self.endSentinelComment
	n = len(delim)
	
	# Remove delim and possible a leading newline.
	s = string.join(out,"")
	s = s.rstrip()
	if s[-n:] == delim:
		s = s[:-n]
	if s[-1] == '\n':
		s = s[:-1]
		
	# Rewrite out in place.
	del out[:]
	out.append(s)
</t>
<t tx="ekr.20031218072017.1184">@ignore
@nocolor

The problem is that a node may contain clones.  It is not enough to the node N dirty, we must call setAncestorAtFileNodeDirty for all cloned nodes in N's tree!  But we only should do that when deleting a node.

Note that the undo and redo cases handle this automatically because they call c.doDelete.

@color</t>
<t tx="ekr.20031218072017.1185">@ This is called from the key-event handler, so we must not force a redraw of the screen here. We avoid redraw in most cases by passing redraw_flag to the caller.

2/1/03: I don't see how this can possibly be correct.
Why is it needed?? If it is needed, what about undo??
@c

def setAncestorsOfClonedNodesInTreeDirty(self):

	"""This marks v dirty and all cloned nodes in v's tree."""

	# Look up the tree for an ancestor @file node.
	v = self ; redraw_flag = false
	
	if v == None:
		return redraw_flag
		
	flag = v.setAncestorAtFileNodeDirty()
	if flag: redraw_flag = true
		
	next = v.nodeAfterTree()
	v = v.threadNext()
	while v and v != next:
		if v.isCloned() and not v.isDirty():
			flag = v.setAncestorAtFileNodeDirty()
			if flag: redraw_flag = true
			for v2 in v.t.joinList:
				if v2 != v:
					flag = v2.setAncestorAtFileNodeDirty()
					if flag: redraw_flag = true
		v = v.threadNext()

	return redraw_flag</t>
<t tx="ekr.20031218072017.1186">@ This is called from the key-event handler, so we must not force a redraw of the screen here. We avoid redraw in most cases by passing redraw_flag to c.endUpdate().

This is called from v.setDirty, so we avoid further calls to v.setDirty here.  The caller, that is, v.setDirty itself, handles all clones.

@c
def setAncestorAtFileNodeDirty(self):

	# Look up the tree for an ancestor @file node.
	v = self ; c = v.c
	redraw_flag = false
	c.beginUpdate()
	while v:
		if not v.isDirty() and v.isAnyAtFileNode():
			# g.trace(v)
			redraw_flag = true
			v.t.setDirty() # Do not call v.setDirty here!
		v = v.parent()
	c.endUpdate(redraw_flag) # A crucial optimization: does nothing if inside nested begin/endUpdate.
	return redraw_flag # Allow caller to do the same optimization.</t>
<t tx="ekr.20031218072017.1187">@ v.setDirty now ensures that all cloned nodes are marked dirty and that all ancestor @file nodes are marked dirty.  It is much safer to do it this way.
@c

def setDirty (self):

	v = self ; c = v.c
	# g.trace(`v`)
	changed = false
	c.beginUpdate()
	if 1: # update...
		if not v.t.isDirty():
			v.t.setDirty()
			changed = true
		# This must _always_ be called, even if v is already dirty.
		if v.setAncestorAtFileNodeDirty():
			changed = true
	c.endUpdate(changed)
	return changed
	
def setDirtyDeleted (self):
	self.setDirty()
	return

def initDirtyBit (self):
	self.t.setDirty()</t>
<t tx="ekr.20031218072017.1188">def sortChildren(self):

	c = self ; v = c.currentVnode()
	if not v or not v.hasChildren(): return
	&lt;&lt; Set the undo info for sortChildren &gt;&gt;
	c.beginUpdate()
	c.endEditing()
	v.sortChildren()
	# v.setDirty()
	v.setAllAncestorAtFileNodesDirty() # 1/12/04
	c.setChanged(true)
	c.endUpdate()
	
def sortSiblings (self):
	
	c = self ; v = c.currentVnode()
	if not v: return
	parent = v.parent()
	if not parent:
		c.sortTopLevel()
	else:
		&lt;&lt; Set the undo info for sortSiblings &gt;&gt;
		c.beginUpdate()
		c.endEditing()
		parent.sortChildren()
		# parent.setDirty()
		parent.setAllAncestorAtFileNodesDirty() # 1/12/04
		c.setChanged(true)
		c.endUpdate()</t>
<t tx="ekr.20031218072017.1189"># Get the present list of children.
children = []
child = v.firstChild()
while child:
	children.append(child)
	child = child.next()
c.undoer.setUndoParams("Sort Children",v,sort=children)</t>
<t tx="ekr.20031218072017.1190"># Get the present list of siblings.
sibs = []
sib = parent.firstChild()
while sib:
	sibs.append(sib)
	sib = sib.next()
c.undoer.setUndoParams("Sort Siblings",v,sort=sibs)</t>
<t tx="ekr.20031218072017.1191">def sortChildren (self):

	# Create a list of (headline,vnode) tuples
	v = self ; pairs = []
	child = v.firstChild()
	if not child: return
	while child:
		pairs.append((string.lower(child.headString()), child))
		child = child.next()
	# Sort the list on the headlines.
	pairs.sort()
	# Move the children.
	index = 0
	for headline,child in pairs:
		child.moveToNthChildOf(v,index)
		index += 1</t>
<t tx="ekr.20031218072017.1192"># Compatibility routine for scripts

def moveToNthChildOf (self, pv, n):

	"""Moves the receiver to the nth child of vnode pv"""

	v = self ; c = self.c

	v.unlink()
	v.linkAsNthChild(pv,n)
	
	# Moving a node can create a new root node.
	if not pv.parent() and not pv.back():
		c.frame.tree.setRootVnode(pv)</t>
<t tx="ekr.20031218072017.1193"># Deletes the current vnode and dependent nodes. Does nothing if the outline would become empty.

def deleteOutline (self,op_name="Delete Node"):

	c = self ; p = c.currentPosition()
	if not p: return
	# If vBack is NULL we are at the top level,
	# the next node should be v.next(), _not_ v.visNext();
	if p.hasVisBack(): newNode = p.visBack()
	else:              newNode = p.next()
	if not newNode: return

	c.endEditing()# Make sure we capture the headline for Undo.
	c.beginUpdate()
	p.setAllAncestorAtFileNodesDirty() # 1/12/04
	# Reinsert v after back, or as the first child of parent, or as the root.
	c.undoer.setUndoParams(op_name,p,select=newNode)
	p.doDelete(newNode) # doDelete destroys dependents.
	c.setChanged(true)
	c.endUpdate()
	c.validateOutline()</t>
<t tx="ekr.20031218072017.1194">@ignore</t>
<t tx="ekr.20031218072017.1195">enabling: *
Exception in Tkinter callback
Traceback (most recent call last):
  File "c:\python22\lib\lib-tk\Tkinter.py", line 1292, in __call__
    return apply(self.func, args)
  File "leoFrame.py", line 1368, in OnTangle
    self.commands.tangleCommands.tangle()
  File "leoTangle.py", line 507, in tangle
    self.tangleTree(v,report_errors)
  File "leoTangle.py", line 644, in tangleTree
    self.tanglePass1(v) # sets self.v
  File "leoTangle.py", line 589, in tanglePass1
    self.skip_body(v)
  File "leoTangle.py", line 1062, in skip_body
    self.st_enter_root_name(old_root_name,code,doc)
  File "leoTangle.py", line 2040, in st_enter_root_name
    assert(code)
AssertionError
</t>
<t tx="ekr.20031218072017.1196">@root a.txt
@ 

@root a.txt 
some text 
@ </t>
<t tx="ekr.20031218072017.1197">@ignore</t>
<t tx="ekr.20031218072017.1198">@language c</t>
<t tx="ekr.20031218072017.1199">@root c:/prog/test/MemoryBuffer.txt

&lt;&lt; MemoryBuffer declarations &gt;&gt;
&lt;&lt; MemoyrBuffer classes &gt;&gt;
</t>
<t tx="ekr.20031218072017.1200">@c

package net.javacoding.gfx.core.buffer.memory;



/* javacoding imports */
import net.javacoding.gfx.core.buffer.Buffer;
</t>
<t tx="ekr.20031218072017.1201">@ *
 *  Default implementation of a MemoryBuffer, this abstract class will be
 *  overloaded by different framebuffers for each type of color model
 *  ( Palettized, RGB, Planed RGB, ... ).
 *  
 *  @author  G?nther Van Roey
 *  @version 2001/07/18
 *  @since   0.0.1
&lt;&lt; MemoyrBuffer classes &gt;&gt;=

public abstract class MemoryBuffer implements Buffer {
	&lt;&lt; class MemoryBuffer declarations &gt;&gt;
	&lt;&lt; class MemoryBuffer methods &gt;&gt;



  /**
   *  This one will create the buffers.  Can be overloaded.
   */
  protected abstract void instantiate ( );
  
  

  /**
   *  For a palettized buffer.
   *  @return byte array representing the palette index values forming the image.
   */
  public abstract byte[] getPalettizedBuffer ( );



  /**
   *  Returns palette color components array for RED component.
   *  byte array holding the RED component of the color value.
   */
  public abstract byte[] getRPalette ( );



  /**
   *  Returns palette color components array for GREEN component.
   *  byte array holding the GREEN component of the color value.
   */
  public abstract byte[] getGPalette ( );



  /**
   *  Returns palette color components array for BLUE component.
   *  byte array holding the BLUE component of the color value.
   */
  public abstract byte[] getBPalette ( );



  /**
   *  Returns an int buffer holding the RGB image data.
   *  @int array representing the RGB values of all pixels
   */
  public abstract int[] getRGBBuffer ( );



  /**
   *  Red component data structure in planed RGB mode.
   *  @return byte array holding the red components of each pixel.
   */
  public abstract byte[] getPlanedRBuffer ( );



  /**
   *  Green component data structure in planed RGB mode.
   *  @return byte array holding the green components of each pixel.
   */
  public abstract byte[] getPlanedGBuffer ( );



  /**
   *  Blue component data structure in planed RGB mode.
   *  @return byte array holding the blue components of each pixel.
   */
  public abstract byte[] getPlanedBBuffer ( );
  
}</t>
<t tx="ekr.20031218072017.1202">@c

  /** the width of the buffer. */
  protected int width  = 0;

  /** the height of the buffer. */
  protected int height = 0;
</t>
<t tx="ekr.20031218072017.1203">@ *
   *  Constructor that takes the wanted memorybuffer dimensions as parameters.
   *  @param width the wanted width for the buffer
   *  @param height the wanted height for the buffer
&lt;&lt; class MemoryBuffer methods &gt;&gt;=

public MemoryBuffer ( int width, int height ) {
    negotiateDimensions ( width, height );
    instantiate ( );
  }
</t>
<t tx="ekr.20031218072017.1204">@ *
   * Will be called by the gfx producer after each frame.
&lt;&lt; class MemoryBuffer methods &gt;&gt;=

public abstract void update ( );



  /**
   *  Returns the buffer's height.
   *  @return the buffer's height
   */
  public final int getHeight ( ) {
    return height;
  }
</t>
<t tx="ekr.20031218072017.1205">@ *
   *  Returns the buffer's width.
   *  @return the buffer's width
&lt;&lt; class MemoryBuffer methods &gt;&gt;=

public final int getWidth ( ) {
    return width;
  }
</t>
<t tx="ekr.20031218072017.1206">@ *
   *  Can be overloaded by buffers that need to have specific values for dimensions or
   *  specific relationships between the width and height values.
   *  @param width the wanted width for the buffer
   *  @param height the wanted height for the buffer
&lt;&lt; class MemoryBuffer methods &gt;&gt;=

protected void negotiateDimensions ( int width, int height ) {
    this.width  = width;
    this.height = height;
  }
</t>
<t tx="ekr.20031218072017.1208">@ignore</t>
<t tx="ekr.20031218072017.1209"></t>
<t tx="ekr.20031218072017.1210">this is a test</t>
<t tx="ekr.20031218072017.1211">@ this is a test
@root Icons/test2.txt
more test</t>
<t tx="ekr.20031218072017.1212">@nocolor

Amazingly, the only change required to allow reads and writes of cloned @file nodes was to eliminate the error in updateCloneIndices.  I also fixed a bug: set self.errors = 0 in atFile.read.

@color</t>
<t tx="ekr.20031218072017.1213">@ignore</t>
<t tx="ekr.20031218072017.1214">multiple read test.</t>
<t tx="ekr.20031218072017.1215">@ It is vital that @file nodes remain dirty until they are written without errors.  Otherwise, a Save command will succeeed without warning, and a later read may cause the dreaded "clones have been cleared" message.</t>
<t tx="ekr.20031218072017.1216"></t>
<t tx="ekr.20031218072017.1217">assert(match(s,i,"+node:"))
i += 6

childIndex = 0 ; cloneIndex = 0
&lt;&lt; Set childIndex &gt;&gt;
&lt;&lt; Set cloneIndex &gt;&gt;
headline = ""
&lt;&lt; Set headline and ref &gt;&gt;

# print childIndex,headline

if childIndex == 0: # The root node.
	&lt;&lt; Check the filename in the sentinel &gt;&gt;
	# Put the text of the root node in the current node.
	self.scanText(file,v,out,atFile.endNode)
	v.t.setCloneIndex(cloneIndex)
	# if cloneIndex &gt; 0: trace("clone index:" + `cloneIndex` + ", " + `v`)
else:
	# NB: this call to createNthChild is the bottleneck!
	child = self.createNthChild(childIndex,v,headline)
	child.t.setCloneIndex(cloneIndex)
	# if cloneIndex &gt; 0: trace("clone index:" + `cloneIndex` + ", " + `child`)
	self.scanText(file,child,out,atFile.endNode)

&lt;&lt; look for sentinels that may follow a reference &gt;&gt;</t>
<t tx="ekr.20031218072017.1218">i = skip_ws(s,i) ; j = i
while i &lt; len(s) and s[i] in string.digits:
	i += 1

if j == i:
	self.readError("Implicit child index in @+node")
	childIndex = 0
else:
	childIndex = int(s[j:i])

if match(s,i,':'):
	i += 1 # Skip the ":".
else:
	self.readError("Bad child index in @+node")</t>
<t tx="ekr.20031218072017.1219">while i &lt; len(s) and s[i] != ':' and not is_nl(s,i):
	if match(s,i,"C="):
		# set cloneIndex from the C=nnn, field
		i += 2 ; j = i
		while i &lt; len(s) and s[i] in string.digits:
			i += 1
		if j &lt; i:
			cloneIndex = int(s[j:i])
	else: i += 1 # Ignore unknown status bits.

if match(s,i,":"):
	i += 1
else:
	self.readError("Bad attribute field in @+node")</t>
<t tx="ekr.20031218072017.1220">h = headline.strip()

if h[:5] == "@file":
	i,junk,junk = scanAtFileOptions(h)
	fileName = string.strip(h[i:])
	if fileName != self.targetFileName:
		self.readError("File name in @node sentinel does not match file's name")
elif h[:8] == "@rawfile":
	fileName = string.strip(h[8:])
	if fileName != self.targetFileName:
		self.readError("File name in @node sentinel does not match file's name")
else:
	self.readError("Missing @file in root @node sentinel")
</t>
<t tx="ekr.20031218072017.1221">s = self.readLine(file)
kind = self.sentinelKind(s)

if len(s) &gt; 1 and kind == atFile.startVerbatimAfterRef:
	s = self.readLine(file)
	# trace("verbatim:"+`s`)
	out.append(s)
elif len(s) &gt; 1 and self.sentinelKind(s) == atFile.noSentinel:
	out.append(s)
else:
	nextLine = s # Handle the sentinel or blank line later.
</t>
<t tx="ekr.20031218072017.1222">@ This method expands a code part, terminated by any at-directive except at-others.  It expands references and at-others and outputs @verbatim sentinels as needed.
@c
def putCodePart(self,s,i,v):

	c = self.commands
	atOthersSeen = false # true: at-others has been expanded.
	while i &lt; len(s):
		&lt;&lt; handle the start of a line &gt;&gt;
		&lt;&lt; put the line &gt;&gt;

	# Raw code parts can only end at the end of body text.
	self.raw = false
	return i</t>
<t tx="ekr.20031218072017.1223">@ The at-others directive is the only directive that is recognized following leading whitespace, so it is just a little tricky to recognize it.
@c

leading_nl = (s[i] == body_newline) # 9/27/02: look ahead before outputting newline.
if leading_nl:
	i = skip_nl(s,i)
	self.onl() # 10/15/02: simpler to do it here.

#leading_ws1 = i # 1/27/03
j,delta = skip_leading_ws_with_indent(s,i,self.tab_width)
#leading_ws2 = j # 1/27/03
kind1 = self.directiveKind(s,i)
kind2 = self.directiveKind(s,j)
if self.raw:
	if kind1 == atFile.endRawDirective:
		&lt;&lt; handle @end_raw &gt;&gt;
else:
	if kind1 == atFile.othersDirective or kind2 == atFile.othersDirective:
		&lt;&lt; handle @others &gt;&gt;
	elif kind1 == atFile.rawDirective:
		&lt;&lt; handle @raw &gt;&gt;
	elif kind1 == atFile.noDirective:
		&lt;&lt; put @verbatim sentinel if necessary &gt;&gt;
	else:
		break # all other directives terminate the code part.</t>
<t tx="ekr.20031218072017.1224"># This skips all indent and delta whitespace, so putAtOthers must generate it all.

if 0: # 9/27/02: eliminates the newline preceeding the @+others sentinel.
	# This does not seem to be a good idea.
	i = skip_line(s,i) 
else:
	i = skip_to_end_of_line(s,i)

if atOthersSeen:
	self.writeError("@others already expanded in: " + v.headString())
else:
	atOthersSeen = true
	self.putAtOthers(v, delta)
	
	# 12/8/02: Skip the newline _after_ the @others.
	if not self.sentinels and is_nl(s,i):
		i = skip_nl(s,i)
</t>
<t tx="ekr.20031218072017.1225">self.raw = true
self.putSentinel("@@raw")
i = skip_line(s,i)</t>
<t tx="ekr.20031218072017.1226">self.raw = false
self.putSentinel("@@end_raw")
i = skip_line(s,i)</t>
<t tx="ekr.20031218072017.1227">if not self.raw:
	# 12/8/02: Don't write trailing indentation if not writing sentinels.
	if self.sentinels or j &lt; len(s):
		self.putIndent(self.indent)

newlineSeen = false
# 12/8/02: we buffer characters here for two reasons:
# 1) to make traces easier to read and 2) to increase speed.
buf = i # Indicate the start of buffered characters.
while i &lt; len(s) and not newlineSeen:
	ch = s[i]
	if ch == body_newline:
		break
	elif ch == body_ignored_newline:
		i += 1
	elif ch == '&lt;' and not self.raw:
		&lt;&lt; put possible section reference &gt;&gt;
	else:
		i += 1
# Output any buffered characters.
self.putBuffered(s[buf:i])</t>
<t tx="ekr.20031218072017.1228">isSection, j = self.isSectionName(s, i)

if isSection:
	# Output the buffered characters and clear the buffer.
	s2 = s[buf:i] ; buf = i
	# 7/9/03: don't output trailing indentation if we aren't generating sentinels.
	if not self.sentinels:
		while len(s2) and s2[-1] in (' ','\t'):
			s2 = s2[:-1]
	self.putBuffered(s2)
	# Output the expansion.
	name = s[i:j]
	j,newlineSeen = self.putRef(name,v,s,j,delta)
	assert(j &gt; i) # isSectionName must have made progress
	i = j ; buf = i
else:
	# This is _not_ an error.
	i += 1</t>
<t tx="ekr.20031218072017.1229">@ Returns true if v should be included in the expansion of the at-others directive in the body text of v's parent.

7/30/02: v will not be included if it is a definition node or if its body text contains an @ignore directive. Previously, a "nested" @others directive would also inhibit the inclusion of v.
@c
def inAtOthers(self,v):

	# Return false if this has been expanded previously.
	if  v.isVisited(): return false
	# Return false if this is a definition node.
	h = v.headString()
	i = skip_ws(h,0)
	isSection, j = self.isSectionName(h,i)
	if isSection: return false
	# Return false if v's body contains an @ignore or at-others directive.
	if 1: # 7/29/02: New code.  Amazingly, this appears to work!
		return not v.isAtIgnoreNode()
	else: # old &amp; reliable code
		return not v.isAtIgnoreNode() and not v.isAtOthersNode()</t>
<t tx="ekr.20031218072017.1230"># returns (flag, end). end is the index of the character after the section name.

def isSectionName(self,s,i):

	if not match(s,i,"&lt;&lt;"):
		return false, -1
	i = find_on_line(s,i,"&gt;&gt;")
	if i:
		return true, i + 2
	else:
		return false, -1</t>
<t tx="ekr.20031218072017.1231">@ The at-others directive is recognized only at the start of the line.  This code must generate all leading whitespace for the opening sentinel.
@c
def putAtOthers(self,v,delta):

	self.indent += delta
	self.putSentinel("@+others")

	child = v.firstChild()
	while child:
		if self.inAtOthers( child ):
			self.putAtOthersChild( child )
		child = child.next()

	self.putSentinel("@-others")
	self.indent -= delta</t>
<t tx="ekr.20031218072017.1232">def putAtOthersChild(self,v):
	
	# trace("%d %s" % (self.indent,`v`))
	self.putOpenNodeSentinel(v)
	
	# Insert the expansion of v.
	v.setVisited() # Make sure it is never expanded again.
	self.putBodyPart(v)

	# Insert expansions of all children.
	child = v.firstChild()
	while child:
		if self.inAtOthers( child ):
			self.putAtOthersChild( child )
		child = child.next()

	self.putCloseNodeSentinel(v)
</t>
<t tx="ekr.20031218072017.1233">def putRef (self,name,v,s,i,delta):

	newlineSeen = false
	ref = findReference(name, v)
	if not ref:
		self.writeError("undefined section: " + name +
			"\n\treferenced from: " + v.headString())
		return i,newlineSeen

	# trace(self.indent,delta,s[i:])
	&lt;&lt; Generate the expansion of the reference &gt;&gt;

	# The newlineSeen allows the caller to break out of the loop.
	return i,newlineSeen</t>
<t tx="ekr.20031218072017.1234"># Adjust indent here so sentinel looks better.
self.indent += delta

self.putSentinel("@" + name)
self.putOpenSentinels(v,ref)
self.putBodyPart(ref)
self.putCloseSentinels(v,ref)
&lt;&lt; Add @verbatimAfterRef sentinel if required &gt;&gt;

self.indent -= delta
ref.setVisited()</t>
<t tx="ekr.20031218072017.1235">j = skip_ws(s,i)
if j &lt; len(s) and match(s,j,self.startSentinelComment + '@'):
	self.putSentinel("@verbatimAfterRef")
	# 9/27/02: Put the line immediately, before the @-node sentinel.
	k = skip_to_end_of_line(s,i)
	self.putBuffered(s[i:k])
	i = k ; newlineSeen = false</t>
<t tx="ekr.20031218072017.1236">def oblank(self):
	self.os(' ')

def oblanks(self,n):
	self.os(' ' * abs(n))

def onl(self):
	self.os(self.output_newline)

def os(self,s):
	if s is None or len(s) == 0: return
	if self.suppress_newlines and self.newline_pending:
		self.newline_pending = false
		s = self.output_newline + s
	if self.outputFile:
		try:
			s = toEncodedString(s,self.encoding,reportErrors=true)
			self.outputFile.write(s)
		except:
			es("exception writing:" + `s`)
			es_exception()

def otabs(self,n):
	self.os('\t' * abs(n))</t>
<t tx="ekr.20031218072017.1237"></t>
<t tx="ekr.20031218072017.1238"></t>
<t tx="ekr.20031218072017.1239">assert(self.outputFile == None)

if os.path.exists(self.targetFileName): 
	if filecmp.cmp(self.outputFileName, self.targetFileName):
		try: # Just delete the temp file.
			os.remove(self.outputFileName)
		except:
			es("exception deleting:" + self.outputFileName)
			es_exception()
		es("unchanged: " + self.shortFileName)
	else:
		try:
			# 10/6/02: retain the access mode of the previous file,
			# removing any setuid, setgid, and sticky bits.
			mode = (os.stat(self.targetFileName))[0] &amp; 0777
		except:
			mode = None
		try: # Replace target file with temp file.
			os.remove(self.targetFileName)
			utils_rename(self.outputFileName, self.targetFileName)
			if mode: # 10/3/02: retain the access mode of the previous file.
				os.chmod(self.targetFileName,mode)
			es("writing: " + self.shortFileName)
		except:
			self.writeError("exception removing and renaming:" + self.outputFileName +
				" to " + self.targetFileName)
			es_exception()
else:
	try:
		# os.rename(self.outputFileName, self.targetFileName)
		utils_rename(self.outputFileName, self.targetFileName)
		es("creating: " + self.targetFileName)
	except:
		self.writeError("exception renaming:" + self.outputFileName +
			" to " + self.targetFileName)
		es_exception()</t>
<t tx="ekr.20031218072017.1240"></t>
<t tx="ekr.20031218072017.1241">def update_file_if_changed(file_name,temp_name):

	"""Compares two files.
	
	If they are different, we replace file_name with temp_name.
	Otherwise, we just delete temp_name.
	Both files should be closed."""

	if g.os_path_exists(file_name):
		import filecmp
		if filecmp.cmp(temp_name, file_name):
			try: # Just delete the temp file.
				os.remove(temp_name)
			except: pass
			g.es("unchanged: " + file_name)
		else:
			try:
				# 10/6/02: retain the access mode of the previous file,
				# removing any setuid, setgid, and sticky bits.
				mode = (os.stat(file_name))[0] &amp; 0777
			except:
				mode = None
			try: # Replace file with temp file.
				os.remove(file_name)
				g.utils_rename(temp_name, file_name)
				if mode: # 10/3/02: retain the access mode of the previous file.
					os.chmod(file_name,mode)
				g.es("***updating: " + file_name)
			except:
				g.es("Rename failed: no file created!",color="red")
				g.es(`file_name` + " may be read-only or in use")
				g.es_exception()
	else:
		try:
			# os.rename(temp_name, file_name)
			g.utils_rename(temp_name, file_name)
			g.es("creating: " + file_name)
		except:
			g.es("rename failed: no file created!",color="red")
			g.es(`file_name` + " may be read-only or in use")
			g.es_exception()
</t>
<t tx="ekr.20031218072017.1242">@ignore</t>
<t tx="ekr.20031218072017.1243"></t>
<t tx="ekr.20031218072017.1244">def getBool (self):
	self.skipWs() # guarantees at least one more character.
	ch = self.fileBuffer[self.fileIndex]
	if ch == '0':
		self.fileIndex += 1 ; return false
	elif ch == '1':
		self.fileIndex += 1 ; return true
	else:
		raise BadLeoFile("expecting bool constant")
		
def getDqBool (self):
	self.getDquote() ; val = self.getBool() ; self.getDquote()
	return val
	
def getDqString (self): # 7/10/02
	self.getDquote()
	i = self.fileIndex
	self.fileIndex = j = string.find(self.fileBuffer,'"',i)
	if j == -1: raise BadLeoFile("unterminated double quoted string")
	s = self.fileBuffer[i:j]
	self.getDquote()
	return s

def getDouble (self):
	self.skipWs()
	i = self.fileIndex ; buf = self.fileBuffer
	floatChars = string.digits + 'e' + 'E' + '.' + '+' + '-'
	n = len(buf)
	while i &lt; n and buf[i] in floatChars:
		i += 1
	if i == self.fileIndex:
		raise BadLeoFile("expecting float constant")
	val = float(buf[self.fileIndex:i])
	self.fileIndex = i
	return val

def getDquote (self):
	self.getTag('"')
	
def getIndex (self):
	val = self.getLong()
	if val &lt; 0: raise BadLeoFile("expecting index")
	return val
	
def getLong (self):
	self.skipWs() # guarantees at least one more character.
	i = self.fileIndex
	if self.fileBuffer[i] == '-':
		i += 1
	n = len(self.fileBuffer)
	while i &lt; n and self.fileBuffer[i] in string.digits:
		i += 1
	if i == self.fileIndex:
		raise BadLeoFile("expecting int constant")
	val = int(self.fileBuffer[self.fileIndex:i])
	self.fileIndex = i
	return val
		
def getStringToTag (self,tag):
	buf = self.fileBuffer
	blen = len(buf) ; tlen = len(tag)
	i = j = self.fileIndex
	while i &lt; blen:
		if tag == buf[i:i+tlen]:
			self.fileIndex = i
			return buf[j:i]
		else: i += 1
	raise BadLeoFile("expecting string terminated by " + tag)
	return ""
	
# Look ahead for collapsed tag: tag may or may not end in "&gt;"
# Skips tag and /&gt; if found, otherwise does not alter index.
def getOpenTag (self,tag):
	if tag[-1] == "&gt;":
		# Only the tag itself or a collapsed tag are valid.
		if self.matchTag(tag):
			return false # Not a collapsed tag.
		elif self.matchTag(tag[:-1]):
			# It must be a collapsed tag.
			self.skipWs()
			if self.matchTag("/&gt;"):
				return true
		print "getOpenTag(", tag, ") failed:"
		raise BadLeoFile("expecting" + tag)
	else:
		# The tag need not be followed by "/&gt;"
		if self.matchTag(tag):
			old_index = self.fileIndex
			self.skipWs()
			if self.matchTag("/&gt;"):
				return true
			else:
				self.fileIndex = old_index
				return false
		else:
			print "getOpenTag(", tag, ") failed:"
			raise BadLeoFile("expecting" + tag)
	
# 11/24/02: Look ahead for closing /&gt;
# Return true if found.
def getTag (self,tag):
	if self.matchTag(tag):
		return
	else:
		print "getTag(", tag, ") failed:"
		raise BadLeoFile("expecting" + tag)
		
def getUnknownTag(self):
	
	self.skipWsAndNl() # guarantees at least one more character.
	tag = self.getStringToTag('=')
	if not tag:
		print "getUnknownTag failed"
		raise BadLeoFile("unknown tag not followed by '='")
	self.fileIndex += 1
	val = self.getDqString()
	g.trace(tag,val)
	return tag,val
	</t>
<t tx="ekr.20031218072017.1245">def matchChar (self,ch):
	self.skipWs() # guarantees at least one more character.
	if ch == self.fileBuffer[self.fileIndex]:
		self.fileIndex += 1 ; return true
	else: return false

# Warning: does not check for end-of-word,
# so caller must match prefixes first.
def matchTag (self,tag):
	self.skipWsAndNl() # guarantees at least one more character.
	i = self.fileIndex
	if tag == self.fileBuffer[i:i+len(tag)]:
		self.fileIndex += len(tag)
		return true
	else:
		return false

def matchTagWordIgnoringCase (self,tag):
	self.skipWsAndNl() # guarantees at least one more character.
	i = self.fileIndex
	tag = string.lower(tag)
	j = g.skip_c_id(self.fileBuffer,i)
	word = self.fileBuffer[i:j]
	word = string.lower(word)
	if tag == word:
		self.fileIndex += len(tag)
		return true
	else:
		return false
</t>
<t tx="ekr.20031218072017.1246">def putProlog (self):

	c = self.c ; config = g.app.config

	&lt;&lt; Put the &lt;?xml...?&gt; line &gt;&gt;
	&lt;&lt; Put the optional &lt;?xml-stylesheet...?&gt; line &gt;&gt;

	self.put("&lt;leo_file&gt;") ; self.put_nl()</t>
<t tx="ekr.20031218072017.1247"># 1/22/03: use self.leo_file_encoding encoding.
self.put(g.app.prolog_prefix_string)
self.put_dquote() ; self.put(self.leo_file_encoding) ; self.put_dquote()
self.put(g.app.prolog_postfix_string) ; self.put_nl()</t>
<t tx="ekr.20031218072017.1248">if config.stylesheet or c.frame.stylesheet:
	
	# The stylesheet in the .leo file takes precedence over the default stylesheet.
	if c.frame.stylesheet:
		s = c.frame.stylesheet
	else:
		s = config.stylesheet
		
	tag = "&lt;?xml-stylesheet "
	# print "writing:", tag + s + "?&gt;"
	self.put(tag) ; self.put(s) ; self.put("?&gt;") ; self.put_nl()
</t>
<t tx="ekr.20031218072017.1249">def getXmlStylesheetTag (self):

	"""Parses the optional xml stylesheet string, and sets the corresponding config option.
	
	For example, given: &lt;?xml_stylesheet s?&gt; the config option is s."""
	
	c = self.c
	tag = "&lt;?xml-stylesheet "

	if self.matchTag(tag):
		s = self.getStringToTag("?&gt;")
		# print "reading:", tag + s + "?&gt;"
		c.frame.stylesheet = s
		self.getTag("?&gt;")</t>
<t tx="ekr.20031218072017.1250">@ignore</t>
<t tx="ekr.20031218072017.1251"></t>
<t tx="ekr.20031218072017.1252"></t>
<t tx="ekr.20031218072017.1253">@path new
@root test1.txt

test1.txt</t>
<t tx="ekr.20031218072017.1254">@root new/test2.txt

test2.txt</t>
<t tx="ekr.20031218072017.1255"></t>
<t tx="ekr.20031218072017.1256">@path c:/prog/test
@root test3.txt

test3.txt</t>
<t tx="ekr.20031218072017.1257">@root c:/prog/test/test4.txt

test4.txt</t>
<t tx="ekr.20031218072017.1258"># make sure the simplest case still works!

@root test5.txt

test5 text</t>
<t tx="ekr.20031218072017.1259">@ This code skips the file name used in @root directives.  i points after the @root directive.

File names may be enclosed in &lt; and &gt; characters, or in double quotes.  If a file name is not enclosed be these delimiters it continues until the next newline.
@c
def setRootFromText(self,s,err_flag):
	
	# g.trace(`s`)
	self.root_name = None
	i,self.start_mode = g.scanAtRootOptions(s,0)
	i = g.skip_ws(s,i)
	
	if i &gt;= len(s): return i
	# Allow &lt;&gt; or "" as delimiters, or a bare file name.
	if s[i] == '"':
		i += 1 ; delim = '"'
	elif s[i] == '&lt;':
		i += 1 ; delim = '&gt;'
	else: delim = g.body_newline

	root1 = i # The name does not include the delimiter.
	while i &lt; len(s) and s[i] != delim and not g.is_nl(s,i):
		i += 1
	root2 = i

	if delim != g.body_newline and not g.match(s,i,delim):
		if err_flag:
			g.scanError("bad filename in @root " + s[:i])
	else:
		self.root_name = string.strip(s[root1:root2])
	return i</t>
<t tx="ekr.20031218072017.1260"># The caller passes [root_node] or None as the second arg.  This allows us to distinguish between None and [None].

def get_directives_dict(s,root=None):
	
	"""Scans root for @directives found in globalDirectivesList.

	Returns a dict containing pointers to the start of each directive"""

	if root: root_node = root[0]
	dict = {}
	i = 0 ; n = len(s)
	while i &lt; n:
		if s[i] == '@' and i+1 &lt; n:
			&lt;&lt; set dict for @ directives &gt;&gt;
		elif root and g.match(s,i,"&lt;&lt;"):
			&lt;&lt; set dict["root"] for noweb * chunks &gt;&gt;
		i = g.skip_line(s,i)
	return dict</t>
<t tx="ekr.20031218072017.1261">j = g.skip_c_id(s,i+1)
word = s[i+1:j]
if word in g.globalDirectiveList:
	dict [word] = i
</t>
<t tx="ekr.20031218072017.1262">@ The following looks for chunk definitions of the form &lt; &lt; * &gt; &gt; =. If found, we take this to be equivalent to @root filename if the headline has the form @root filename.
@c

i = g.skip_ws(s,i+2)
if i &lt; n and s[i] == '*' :
	i = g.skip_ws(s,i+1) # Skip the '*'
	if g.match(s,i,"&gt;&gt;="):
		# &lt; &lt; * &gt; &gt; = implies that @root should appear in the headline.
		i += 3
		if root_node:
			dict["root"]=0 # value not immportant
		else:
			g.es(g.angleBrackets("*") + "= requires @root in the headline")</t>
<t tx="ekr.20031218072017.1263"># os.rename may fail on some Unix flavors if src and dst are on different filesystems.

def utils_rename(src,dst):

	"""Platform-independent rename."""
	
	head,tail=g.os_path_split(dst)
	if head and len(head) &gt; 0:
		g.makeAllNonExistentDirectories(head)
	
	if sys.platform=="win32":
		os.rename(src,dst)
	else:
		from distutils.file_util import move_file
		move_file(src,dst)</t>
<t tx="ekr.20031218072017.1264"># Handles the conventions applying to the "relative_path_base_directory" configuration option.

def getBaseDirectory():

	base = app.config.relative_path_base_directory

	if base and base == "!":
		base = app.loadDir
	elif base and base == ".":
		base = g.top().openDirectory

	# g.trace(`base`)
	if base and len(base) &gt; 0 and g.os_path_isabs(base):
		return base # base need not exist yet.
	else:
		return "" # No relative base given.
</t>
<t tx="ekr.20031218072017.1265">@language c
@comment /* */
@ignore</t>
<t tx="ekr.20031218072017.1266">@nocolor

Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=1836344
By: nobody

From: Rich

I've noticed that when I save an @file-nosent file, the first line in expanded
nodes is indented by 1 tab. That is, given body text like this:

stuff
&lt;&lt;wonderful stuff&gt;&gt;
hot air

with &lt;&lt; wonderful stuff &gt;&gt; defined as

Oh,no
chill out
the @file expansion (I'm not gonna try to imitate the sentinels!!) looks like
this:

stuff
Oh,no
chill out
hot air

but the @file-nosent expansion looks like this:

stuff
...Oh,no
chill out
hot air

where the "...." is a TAB.

I've got @language C and @comment /* */ (OLD compiler)

--Rich

P.S. - I forgot to mention that putting a blank line at the top of the sub-node
(&lt;&lt; wonderful stuff &gt;&gt;) alleviates this problem.

--Rich

</t>
<t tx="ekr.20031218072017.1267">	line 1
	&lt;&lt;ref&gt;&gt;
	line 2</t>
<t tx="ekr.20031218072017.1268">ref line 1
	indented ref line 2
ref line 3</t>
<t tx="ekr.20031218072017.1269">@language python</t>
<t tx="ekr.20031218072017.1270"></t>
<t tx="ekr.20031218072017.1271"></t>
<t tx="ekr.20031218072017.1272">def rawWrite(self,root):

	# trace(`root`)
	c = self.commands ; self.root = root
	self.errors = 0
	c.endEditing() # Capture the current headline.
	try:
		self.targetFileName = root.atRawFileNodeName()
		ok = self.openWriteFile(root)
		if not ok: return
		next = root.nodeAfterTree()
		&lt;&lt; write root's tree &gt;&gt;
		self.closeWriteFile()
		self.replaceTargetFileIfDifferent()
		root.clearOrphan() ; root.clearDirty()
	except:
		self.handleWriteException(root)</t>
<t tx="ekr.20031218072017.1273">next = root.nodeAfterTree()

if 0: # Clone indices are no longer used.
	self.updateCloneIndices(root, next)

&lt;&lt; put all @first lines in root &gt;&gt;
self.putOpenLeoSentinel("@+leo")
&lt;&lt; put optional @comment sentinel lines &gt;&gt;

v = root
while v and v != next:
	&lt;&lt; Write v's node &gt;&gt;
	v = v.threadNext()

self.putSentinel("@-leo")
&lt;&lt; put all @last lines in root &gt;&gt;</t>
<t tx="ekr.20031218072017.1274">@ Write any @first lines.  These lines are also converted to @verbatim lines, so the read logic simply ignores lines preceding the @+leo sentinel.
@c

s = root.t.bodyString
tag = "@first"
i = 0
while match(s,i,tag):
	i += len(tag)
	i = skip_ws(s,i)
	j = i
	i = skip_to_end_of_line(s,i)
	# 21-SEP-2002 DTHEIN: write @first line, whether empty or not
	line = s[j:i]
	self.putBuffered(line) ; self.onl()
	i = skip_nl(s,i)</t>
<t tx="ekr.20031218072017.1275">s2 = app().config.output_initial_comment
if s2:
	lines = string.split(s2,"\\n")
	for line in lines:
		line = line.replace("@date",time.asctime())
		if len(line)&gt; 0:
			self.putSentinel("@comment " + line)
</t>
<t tx="ekr.20031218072017.1276">self.putOpenNodeSentinel(v)
	
s = v.bodyString()
if s and len(s) &gt; 0:
	self.putSentinel("@+body")
	if self.newline_pending:
		self.newline_pending = false
		self.onl()
	s = toEncodedString(s,self.encoding,reportErrors=true) # 3/7/03
	self.outputStringWithLineEndings(s)
	self.putSentinel("@-body")
	
self.putCloseNodeSentinel(v)
</t>
<t tx="ekr.20031218072017.1277">@ Write any @last lines.  These lines are also converted to @verbatim lines, so the read logic simply ignores lines following the @-leo sentinel.
@c

tag = "@last"
lines = string.split(root.t.bodyString,'\n')
n = len(lines) ; j = k = n - 1
# Don't write an empty last line.
if j &gt;= 0 and len(lines[j])==0:
	j = k = n - 2
# Scan backwards for @last directives.
while j &gt;= 0:
	line = lines[j]
	if match(line,0,tag): j -= 1
	else: break
# Write the @last lines.
for line in lines[j+1:k+1]:
	i = len(tag) ; i = skip_ws(line,i)
	self.putBuffered(line[i:]) ; self.onl()</t>
<t tx="ekr.20031218072017.1278">def silentWrite(self,root):

	# trace(`root`)
	c = self.commands ; self.root = root
	self.errors = 0
	c.endEditing() # Capture the current headline.
	try:
		self.targetFileName = root.atSilentFileNodeName()
		ok = self.openWriteFile(root)
		if not ok: return
		next = root.nodeAfterTree()
		v = root
		while v and v != next:
			&lt;&lt; Write v's headline if it starts with @@ &gt;&gt;
			&lt;&lt; Write v's body &gt;&gt;
			v = v.threadNext()
		self.closeWriteFile()
		self.replaceTargetFileIfDifferent()
		root.clearOrphan() ; root.clearDirty()
	except:
		self.handleWriteException(root)</t>
<t tx="ekr.20031218072017.1279">s = v.headString()
if match(s,0,"@@"):
	s = s[2:]
	if s and len(s) &gt; 0:
		s = toEncodedString(s,self.encoding,reportErrors=true) # 3/7/03
		self.outputFile.write(s)
</t>
<t tx="ekr.20031218072017.1280">s = v.bodyString()
if s and len(s) &gt; 0:
	s = toEncodedString(s,self.encoding,reportErrors=true) # 3/7/03
	self.outputStringWithLineEndings(s)</t>
<t tx="ekr.20031218072017.1281"># This is the entry point to the write code.  root should be an @file vnode.

def write(self,root,nosentinels=false):

	c = self.commands
	self.sentinels = not nosentinels
	&lt;&lt; initialize &gt;&gt;
	try:
		&lt;&lt; open the file; return on error &gt;&gt;
		&lt;&lt; write then entire @file tree &gt;&gt;
		self.closeWriteFile()
		&lt;&lt; warn about @ignored and orphans &gt;&gt;
		&lt;&lt; finish writing &gt;&gt;
	except:
		self.handleWriteException()</t>
<t tx="ekr.20031218072017.1282">self.errors = 0 # 9/26/02
c.setIvarsFromPrefs()
self.root = root
self.raw = false
c.endEditing() # Capture the current headline.</t>
<t tx="ekr.20031218072017.1283">if nosentinels:
	self.targetFileName = root.atNoSentinelsFileNodeName()
else:
	self.targetFileName = root.atFileNodeName()

ok = self.openWriteFile(root)
if not ok: return</t>
<t tx="ekr.20031218072017.1284"># unvisited nodes will be orphans, except in cweb trees.
root.clearVisitedInTree()
next = root.nodeAfterTree()

&lt;&lt; put all @first lines in root &gt;&gt;
&lt;&lt; write the derived file &gt;&gt;
&lt;&lt; put all @last lines in root &gt;&gt;

root.setVisited()</t>
<t tx="ekr.20031218072017.1285">tag1 = "@+leo"

self.putOpenLeoSentinel(tag1)
self.putInitialComment()
self.putOpenNodeSentinel(root)
self.putBodyPart(root)
self.putCloseNodeSentinel(root)
self.putSentinel("@-leo")</t>
<t tx="ekr.20031218072017.1286"># 10/26/02: Always warn, even when language=="cweb"

next = root.nodeAfterTree()
v = root
while v and v != next:
	if not v.isVisited():
		self.writeError("Orphan node:  " + v.headString())
	if v.isAtIgnoreNode():
		self.writeError("@ignore node: " + v.headString())
	v = v.threadNext()
</t>
<t tx="ekr.20031218072017.1287">@ We set the orphan and dirty flags if there are problems writing the file to force Commands::write_LEO_file to write the tree to the .leo file.
@c

if self.errors &gt; 0 or self.root.isOrphan():
	root.setOrphan()
	root.setDirty() # 2/9/02: make _sure_ we try to rewrite this file.
	os.remove(self.outputFileName) # Delete the temp file.
	es("Not written: " + self.outputFileName)
else:
	root.clearOrphan()
	root.clearDirty()
	self.replaceTargetFileIfDifferent()</t>
<t tx="ekr.20031218072017.1288">def writeAll(self,writeAtFileNodesFlag=false,writeDirtyAtFileNodesFlag=false):
	
	"""Write @file nodes in all or part of the outline"""

	c = self.commands
	self.initIvars()
	writtenFiles = [] # Files that might be written again.

	if writeAtFileNodesFlag:
		# Write all nodes in the selected tree.
		v = c.currentVnode()
		after = v.nodeAfterTree()
	else:
		# Write dirty nodes in the entire outline.
		v = c.rootVnode()
		after = None

	&lt;&lt; Clear all orphan bits &gt;&gt;
	while v and v != after:
		# trace(`v`)
		if v.isAnyAtFileNode() or v.isAtIgnoreNode():
			&lt;&lt; handle v's tree &gt;&gt;
			v = v.nodeAfterTree()
		else:
			v = v.threadNext()

	&lt;&lt; say the command is finished &gt;&gt;</t>
<t tx="ekr.20031218072017.1289">@ We must clear these bits because they may have been set on a previous write.  Calls to atFile::write may set the orphan bits in @file nodes.  If so, write_LEO_file will write the entire @file tree.
@c

v2 = v
while v2 and v2 != after:
	v2.clearOrphan()
	v2 = v2.threadNext()</t>
<t tx="ekr.20031218072017.1290"># This code is a little tricky: @ignore not recognised in @silentfile nodes.

if v.isDirty() or writeAtFileNodesFlag or v.t in writtenFiles:

	if v.isAtSilentFileNode():
		self.silentWrite(v)
	elif v.isAtIgnoreNode():
		pass
	elif v.isAtRawFileNode():
		self.rawWrite(v)
	elif v.isAtNoSentinelsFileNode():
		self.write(v,nosentinels=true)
	elif v.isAtFileNode():
		self.write(v)

	if not v.isAtIgnoreNode():
		writtenFiles.append(v.t)</t>
<t tx="ekr.20031218072017.1291">if writeAtFileNodesFlag or writeDirtyAtFileNodesFlag:
	if len(writtenFiles) &gt; 0:
		es("finished")
	elif writeAtFileNodesFlag:
		es("no @file nodes in the selected tree")
	else:
		es("no dirty @file nodes")</t>
<t tx="ekr.20031218072017.1292">def writeMissing(self,v):

	self.initIvars()
	writtenFiles = false
	after = v.nodeAfterTree()
	while v and v != after:
		if v.isAtSilentFileNode() or (v.isAnyAtFileNode() and not v.isAtIgnoreNode()):
			missing = false ; valid = true
			self.targetFileName = v.anyAtFileNodeName()
			&lt;&lt; set missing if the file does not exist &gt;&gt;
			if valid and missing:
				&lt;&lt; create self.outputFile &gt;&gt;
				if self.outputFile:
					&lt;&lt; write the @file node &gt;&gt;
			v = v.nodeAfterTree()
		elif v.isAtIgnoreNode():
			v = v.nodeAfterTree()
		else:
			v = v.threadNext()
	
	if writtenFiles &gt; 0:
		es("finished")
	else:
		es("no missing @file node in the selected tree")</t>
<t tx="ekr.20031218072017.1293"># This is similar, but not the same as, the logic in openWriteFile.

valid = self.targetFileName and len(self.targetFileName) &gt; 0

if valid:
	try:
		# Creates missing directives if option is enabled.
		self.scanAllDirectives(v)
		valid = self.errors == 0
	except:
		es("exception in atFile.scanAllDirectives")
		es_exception()
		valid = false

if valid:
	try:
		fn = self.targetFileName
		self.shortFileName = fn # name to use in status messages.
		self.targetFileName = os.path.join(self.default_directory,fn)
		self.targetFileName = os.path.normpath(self.targetFileName)
		path = self.targetFileName # Look for the full name, not just the directory.
		valid = path and len(path) &gt; 0
		if valid:
			missing = not os.path.exists(path)
	except:
		es("exception creating path:" + fn)
		es_exception()
		valid = false</t>
<t tx="ekr.20031218072017.1294">try:
	self.outputFileName = self.targetFileName + ".leotmp"
	self.outputFile = open(self.outputFileName,'wb')
	if self.outputFile == None:
		self.writeError("can not open " + self.outputFileName)
except:
	es("exception opening:" + self.outputFileName)
	es_exception()
	self.outputFile = None
</t>
<t tx="ekr.20031218072017.1295">if v.isAtSilentFileNode():
	self.silentWrite(v)
elif v.isAtRawFileNode():
	self.rawWrite(v)
elif v.isAtNoSentinelsFileNode():
	self.write(v,nosentinels=true)
elif v.isAtFileNode():
	self.write(v)
else: assert(0)

writtenFiles = true
</t>
<t tx="ekr.20031218072017.1296"></t>
<t tx="ekr.20031218072017.1297">def closeWriteFile (self):
	
	if self.outputFile:
		if self.suppress_newlines and self.newline_pending:
			self.newline_pending = false
			self.onl() # Make sure file ends with a newline.
		self.outputFile.flush()
		self.outputFile.close()
		self.outputFile = None
</t>
<t tx="ekr.20031218072017.1298">def handleWriteException (self,root=None):
	
	es("exception writing:" + self.targetFileName)
	es_exception()
	
	if self.outputFile:
		self.outputFile.flush()
		self.outputFile.close()
		self.outputFile = None
	
	if self.outputFileName != None:
		try: # Just delete the temp file.
			os.remove(self.outputFileName)
		except:
			es("exception deleting:" + self.outputFileName)
			es_exception()

	if root:
		# Make sure we try to rewrite this file.
		root.setOrphan()
		root.setDirty()</t>
<t tx="ekr.20031218072017.1299"># Open files.  Set root.orphan and root.dirty flags and return on errors.

def openWriteFile (self,root):

	try:
		self.scanAllDirectives(root)
		valid = self.errors == 0
	except:
		es("exception in atFile.scanAllDirectives")
		es_exception()
		valid = false
	
	if valid:
		try:
			fn = self.targetFileName
			self.shortFileName = fn # name to use in status messages.
			self.targetFileName = os.path.join(self.default_directory,fn)
			self.targetFileName = os.path.normpath(self.targetFileName)
			path = os.path.dirname(self.targetFileName)
			if path and len(path) &gt; 0:
				valid = os.path.exists(path)
				if not valid:
					self.writeError("path does not exist: " + path)
			else:
				valid = false
		except:
			es("exception creating path:" + fn)
			es_exception()
			valid = false
	
	if valid:
		if os.path.exists(self.targetFileName):
			try:
				read_only = not os.access(self.targetFileName,os.W_OK)
				if read_only:
					es("read only: " + self.targetFileName)
					valid = false
			except:
				pass # os.access() may not exist on all platforms.
		
	if valid:
		try:
			self.outputFileName = self.targetFileName + ".tmp"
			self.outputFile = open(self.outputFileName,'wb')
			valid = self.outputFile != None
			if not valid:
				self.writeError("can not open " + self.outputFileName)
		except:
			es("exception opening:" + self.outputFileName)
			es_exception()
			valid = false
	
	if not valid:
		root.setOrphan()
		root.setDirty()
	
	return valid</t>
<t tx="ekr.20031218072017.1300">def putInitialComment (self):
	
	s2 = app().config.output_initial_comment
	if s2:
		lines = string.split(s2,"\\n")
		for line in lines:
			line = line.replace("@date",time.asctime())
			if len(line)&gt; 0:
				self.putSentinel("@comment " + line)</t>
<t tx="ekr.20031218072017.1301">def replaceTargetFileIfDifferent (self):
	
	assert(self.outputFile == None)
	
	if os.path.exists(self.targetFileName):
		if filecmp.cmp(self.outputFileName,self.targetFileName):
			&lt;&lt; delete the output file &gt;&gt;
		else:
			&lt;&lt; replace the target file with the output file &gt;&gt;
	else:
		&lt;&lt; rename the output file to be the target file &gt;&gt;
</t>
<t tx="ekr.20031218072017.1302">try: # Just delete the temp file.
	os.remove(self.outputFileName)
except:
	es("exception deleting:" + self.outputFileName)
	es_exception()

es("unchanged: " + self.shortFileName)</t>
<t tx="ekr.20031218072017.1303">try:
	# 10/6/02: retain the access mode of the previous file,
	# removing any setuid, setgid, and sticky bits.
	mode = (os.stat(self.targetFileName))[0] &amp; 0777
except:
	mode = None

try: # Replace target file with temp file.
	os.remove(self.targetFileName)
	try:
		utils_rename(self.outputFileName,self.targetFileName)
		if mode != None: # 10/3/02: retain the access mode of the previous file.
			try:
				os.chmod(self.targetFileName,mode)
			except:
				es("exception in os.chmod(%s)" % (self.targetFileName))
		es("writing: " + self.shortFileName)
	except:
		# 6/28/03
		self.writeError("exception renaming: %s to: %s" % (self.outputFileName,self.targetFileName))
		es_exception()
except:
	self.writeError("exception removing:" + self.targetFileName)
	es_exception()
	try: # Delete the temp file when the deleting the target file fails.
		os.remove(self.outputFileName)
	except:
		es("exception deleting:" + self.outputFileName)
		es_exception()</t>
<t tx="ekr.20031218072017.1304">try:
	utils_rename(self.outputFileName,self.targetFileName)
	es("creating: " + self.targetFileName)
except:
	self.writeError("exception renaming:" + self.outputFileName +
		" to " + self.targetFileName)
	es_exception()</t>
<t tx="ekr.20031218072017.1305"># Write the string s as-is except that we replace '\n' with the proper line ending.

def outputStringWithLineEndings (self,s):

	# Calling self.onl() runs afoul of queued newlines.
	self.os(s.replace('\n',self.output_newline))</t>
<t tx="ekr.20031218072017.1306">@ This method outputs a doc section terminated by @code or end-of-text.  All other interior directives become part of the doc part.
@c
def putDoc(self,s,i,kind):

	if kind == atFile.atDirective:
		i += 1 ; tag = "at"
	elif kind == atFile.docDirective:
		i += 4 ; tag = "doc"
	else: assert(false)
	# Set j to the end of the doc part.
	n = len(s) ; j = i
	while j &lt; n:
		j = skip_line(s, j)
		kind = self.directiveKind(s, j)
		if kind == atFile.codeDirective or kind == atFile.cDirective:
			break
	self.putSentinel("@+" + tag)
	self.putDocPart(s[i:j])
	self.putSentinel("@-" + tag)
	return j</t>
<t tx="ekr.20031218072017.1307"># Puts a comment part in comments.
# Note: this routine is _never_ called in cweb mode,
# so noweb section references are _valid_ in cweb doc parts!

def putDocPart(self,s):

	# j = skip_line(s,0) ; trace(`s[:j]`)
	c = self.commands
	single = len(self.endSentinelComment) == 0
	if not single:
		self.putIndent(self.indent)
		self.os(self.startSentinelComment) ; self.onl()
	# Put all lines.
	i = 0 ; n = len(s)
	while i &lt; n:
		self.putIndent(self.indent)
		leading = self.indent
		if single:
			self.os(self.startSentinelComment) ; self.oblank()
			leading += len(self.startSentinelComment) + 1
		&lt;&lt; copy words, splitting the line if needed &gt;&gt;
	if not single:
		# This comment is like a sentinel.
		self.onl() ; self.putIndent(self.indent)
		self.os(self.endSentinelComment)
		self.onl() # Note: no trailing whitespace.</t>
<t tx="ekr.20031218072017.1308">@ We remove trailing whitespace from lines that have _not_ been split so that a newline has been inserted by this routine if and only if it is preceded by whitespace.
@c

line = i # Start of the current line.
while i &lt; n:
	word = i # Start of the current word.
	# Skip the next word and trailing whitespace.
	i = skip_ws(s, i)
	while i &lt; n and not is_nl(s,i) and not is_ws(s[i]):
		i += 1
	i = skip_ws(s,i)
	# Output the line if no more is left.
	if i &lt; n and is_nl(s,i):
		break
	# Split the line before the current word if needed.
	lineLen = i - line
	if line == word or leading + lineLen &lt; self.page_width:
		word = i # Advance to the next word.
	else:
		# Write the line before the current word and insert a newline.
		theLine = s[line:word]
		self.os(theLine)
		self.onl() # This line must contain trailing whitespace.
		line = i = word  # Put word on the next line.
		break
# Remove trailing whitespace and output the remainder of the line.
theLine = string.rstrip(s[line:i]) # from right.
self.os(theLine)
if i &lt; n and is_nl(s,i):
	i = skip_nl(s,i)
	self.onl() # No inserted newline and no trailing whitespace.</t>
<t tx="ekr.20031218072017.1309"></t>
<t tx="ekr.20031218072017.1310">def putBuffered (self,s):
	
	"""Put s, converting all tabs to blanks as necessary."""
	
	if s:
		w = self.tab_width
		if w &lt; 0:
			#trace(s)
			lines = s.split('\n')
			for i in xrange(len(lines)):
				line = lines[i]
				line2 = ""
				for j in xrange(len(line)):
					ch = line[j]
					if ch == '\t':
						w2 = computeWidth(s[:j],w)
						w3 = (abs(w) - (w2 % abs(w)))
						line2 += ' ' * w3
					else:
						line2 += ch
				lines[i] = line2
			s = string.join(lines,'\n')
		#trace(s)
		self.os(s)</t>
<t tx="ekr.20031218072017.1311"># 14-SEP-2002 DTHEIN
# added for use by putBodyPart()

# This method outputs the directive without the parameter text
def putEmptyDirective(self,s,i):

	assert(i &lt; len(s) and s[i] == '@')
	
	endOfLine = s.find('\n',i)
	# 21-SEP-2002 DTHEIN: if no '\n' then just use line length
	if endOfLine == -1:
		endOfLine = len(s)
	token = s[i:endOfLine].split()
	directive = token[0]
	self.putSentinel("@" + directive)

	i = skip_line(s,i)
	return i</t>
<t tx="ekr.20031218072017.1312">def putIndent(self,n):
	
	"""Put tabs and spaces corresponding to n spaces, assuming that we are at the start of a line."""

	if n != 0:
		# trace(n)
		w = self.tab_width
		if w &gt; 1:
			q,r = divmod(n,w) 
			self.otabs(q) 
			self.oblanks(r)
		else:
			self.oblanks(n)</t>
<t tx="ekr.20031218072017.1313">@nocolor

The following sections contain convenience routines that hooks may call to create menus and to schedule events.

@color

@ignore

</t>
<t tx="ekr.20031218072017.1314">@ When the "idle" hook is enabled, Leo will call the "idle" hook periodically.

You scripts should call only enableIdleTimeHook and disableIdleTimeHook.  The idleTimeHookHandler is used to dispatch the "idle" hook.  Your code should not call it directly.</t>
<t tx="ekr.20031218072017.1315">@ Enables the "idle" hook.
After enableIdleTimeHook is called, Leo will call the "idle" hook
approximately every idleTimeDelay milliseconds.
@c
def enableIdleTimeHook(idleTimeDelay=100):
	app.idleTimeHook = true
	app.idleTimeDelay = idleTimeDelay # Delay in msec.
	app.gui.setIdleTimeHook(idleTimeHookHandler)
	
# Disables the "idle" hook.
def disableIdleTimeHook():
	app.idleTimeHook = false
	
# An internal routine used to dispatch the "idle" hook.
trace_count = 0
def idleTimeHookHandler(*args,**keys):
	
	if 0:
		global trace_count ; trace_count += 1
		if trace_count % 10 == 0: g.trace(trace_count)

	# New for Python 2.3: may be called during shutdown.
	if app.killed: return
	c = g.top()
	if c: v = c.currentVnode()
	else: v = None
	g.doHook("idle",c=c,v=v)
	# Requeue this routine after 100 msec.  Faster requeues overload the system.
	if app.idleTimeHook:
		app.gui.setIdleTimeHookAfterDelay(app.idleTimeDelay,idleTimeHookHandler)
		app.afterHandler = idleTimeHookHandler
	else:
		app.afterHandler = None</t>
<t tx="ekr.20031218072017.1316"></t>
<t tx="ekr.20031218072017.1317">def module_date (mod,format=None):
	file = g.os_path_join(app.loadDir,mod.__file__)
	root,ext = g.os_path_splitext(file) 
	return g.file_date(root + ".py",format=format)

def plugin_date (plugin_mod,format=None):
	file = g.os_path_join(app.loadDir,"..","plugins",plugin_mod.__file__)
	root,ext = g.os_path_splitext(file) 
	return g.file_date(root + ".py",format=format)

def file_date (file,format=None):
	if file and len(file)and g.os_path_exists(file):
		try:
			import time
			n = g.os_path_getmtime(file)
			if format == None:
				format = "%m/%d/%y %H:%M:%S"
			return time.strftime(format,time.gmtime(n))
		except: pass
	return ""
</t>
<t tx="ekr.20031218072017.1318">def plugin_signon(module_name,verbose=false):
	
	exec("import %s ; m = %s" % (module_name,module_name))
	
	if verbose:
		g.es("...%s.py v%s: %s" % (
			m.__name__, m.__version__, g.plugin_date(m)))

		print m.__name__, m.__version__
		
	app.loadedPlugins.append(module_name)</t>
<t tx="ekr.20031218072017.1319">@ These routines are involved in many projects.  Cloning them over and over can slow down Leo a lot.
</t>
<t tx="ekr.20031218072017.1320">@ The &lt;Key&gt; event generates the event before the body text is changed(!), so we register an idle-event handler to do the work later.

1/17/02: Rather than trying to figure out whether the control or alt keys are down, we always schedule the idle_handler.  The idle_handler sees if any change has, in fact, been made to the body text, and sets the changed and dirty bits only if so.  This is the clean and safe way.

2/19/02: We must distinguish between commands like "Find, Then Change", that call onBodyChanged, and commands like "Cut" and "Paste" that call onBodyWillChange.  The former commands have already changed the body text, and that change must be captured immediately.  The latter commands have not changed the body text, and that change may only be captured at idle time.
@c

@others</t>
<t tx="ekr.20031218072017.1321">def idle_body_key (self,p,oldSel,undoType,ch=None,oldYview=None,newSel=None,oldText=None):
	
	"""Update the body pane at idle time."""

	# g.trace(ch,ord(ch))
	c = self.c
	if not c: return "break"
	if not p: return "break"
	if p != c.currentPosition(): return "break"
	v = p.v # used only to get p.iconVal.

	if g.doHook("bodykey1",c=c,v=p,ch=ch,oldSel=oldSel,undoType=undoType):
		return "break" # The hook claims to have handled the event.
	body = p.bodyString()
	if not newSel:
		newSel = c.frame.body.getTextSelection()
	if oldText != None:
		s = oldText
	else:
		s = c.frame.body.getAllText()
	&lt;&lt; return if nothing has changed &gt;&gt;
	&lt;&lt; set removeTrailing &gt;&gt;
	if ch in ('\n','\r'):
		&lt;&lt; Do auto indent &gt;&gt;
	elif ch == '\t' and c.tab_width &lt; 0:
		&lt;&lt; convert tab to blanks &gt;&gt;
	&lt;&lt; set s to widget text, removing trailing newlines if necessary &gt;&gt;
	if undoType: # 11/6/03: set oldText properly when oldText param exists.
		if not oldText: oldText = body
		newText = s
		c.undoer.setUndoTypingParams(p,undoType,oldText,newText,oldSel,newSel,oldYview=oldYview)
	p.v.t.setTnodeText(s)
	p.v.t.insertSpot = c.frame.body.getInsertionPoint()
	&lt;&lt; recolor the body &gt;&gt;
	if not c.changed:
		c.setChanged(true)
	&lt;&lt; redraw the screen if necessary &gt;&gt;
	g.doHook("bodykey2",c=c,v=p,ch=ch,oldSel=oldSel,undoType=undoType)
	return "break"</t>
<t tx="ekr.20031218072017.1322"># 6/22/03: Make sure we handle delete key properly.

if ch not in ('\n','\r',chr(8)):

	if s == body:
		return "break"
	
	# Do nothing for control characters.
	if (ch == None or len(ch) == 0) and body == s[:-1]:
		return "break"
	
# print repr(ch),len(body),len(s)</t>
<t tx="ekr.20031218072017.1323">@ Tk will add a newline only if:
1. A real change has been made to the Tk.Text widget, and
2. the change did _not_ result in the widget already containing a newline.

It's not possible to tell, given the information available, what Tk has actually done. We need only make a reasonable guess here.   setUndoTypingParams stores the number of trailing newlines in each undo bead, so whatever we do here can be faithfully undone and redone.
@c
new = s ; old = body

if len(new) == 0 or new[-1] != '\n':
	# There is no newline to remove.  Probably will never happen.
	# g.trace("false: no newline to remove")
	removeTrailing = false
elif len(old) == 0:
	# Ambigous case.
	# g.trace("false: empty old")
	removeTrailing = ch != '\n' # false
elif old == new[:-1]:
	# A single trailing character has been added.
	# g.trace("false: only changed trailing.")
	removeTrailing = false
else:
	# The text didn't have a newline, and now it does.
	# Moveover, some other change has been made to the text,
	# So at worst we have misreprented the user's intentions slightly.
	# g.trace("true")
	removeTrailing = true
	
# g.trace(ch,removeTrailing)


</t>
<t tx="ekr.20031218072017.1324"># Do nothing if we are in @nocolor mode or if we are executing a Change command.
if self.frame.body.colorizer.useSyntaxColoring(p) and undoType != "Change":
	# Get the previous line.
	s=c.frame.bodyCtrl.get("insert linestart - 1 lines","insert linestart -1c")
	# Add the leading whitespace to the present line.
	junk,width = g.skip_leading_ws_with_indent(s,0,c.tab_width)
	if s and len(s) &gt; 0 and s[-1]==':':
		# For Python: increase auto-indent after colons.
		if self.colorizer.scanColorDirectives(p) == "python":
			width += abs(c.tab_width)
	if g.app.config.getBoolWindowPref("smart_auto_indent"):
		# Added Nov 18 by David McNab, david@rebirthing.co.nz
		# Determine if prev line has unclosed parens/brackets/braces
		brackets = [width]
		tabex = 0
		for i in range(0, len(s)):
			if s[i] == '\t':
				tabex += c.tab_width - 1
			if s[i] in '([{':
				brackets.append(i+tabex + 1)
			elif s[i] in '}])' and len(brackets) &gt; 1:
				brackets.pop()
		width = brackets.pop()
		# end patch by David McNab
	ws = g.computeLeadingWhitespace (width,c.tab_width)
	if ws and len(ws) &gt; 0:
		c.frame.bodyCtrl.insert("insert", ws)
		removeTrailing = false # bug fix: 11/18</t>
<t tx="ekr.20031218072017.1325"># Do nothing if we are executing a Change command.
if undoType != "Change":
	
	# Get the characters preceeding the tab.
	prev=c.frame.bodyCtrl.get("insert linestart","insert -1c")
	
	if 1: # 6/26/03: Convert tab no matter where it is.

		w = g.computeWidth(prev,c.tab_width)
		w2 = (abs(c.tab_width) - (w % abs(c.tab_width)))
		# g.trace("prev w:",w,"prev chars:",prev)
		c.frame.bodyCtrl.delete("insert -1c")
		c.frame.bodyCtrl.insert("insert",' ' * w2)
	
	else: # Convert only leading tabs.
	
		# Get the characters preceeding the tab.
		prev=c.frame.bodyCtrl.get("insert linestart","insert -1c")

		# Do nothing if there are non-whitespace in prev:
		all_ws = true
		for ch in prev:
			if ch != ' ' and ch != '\t':
				all_ws = false
		if all_ws:
			w = g.computeWidth(prev,c.tab_width)
			w2 = (abs(c.tab_width) - (w % abs(c.tab_width)))
			# g.trace("prev w:",w,"prev chars:",prev)
			c.frame.bodyCtrl.delete("insert -1c")
			c.frame.bodyCtrl.insert("insert",' ' * w2)</t>
<t tx="ekr.20031218072017.1326">s = c.frame.body.getAllText()
if len(s) &gt; 0 and s[-1] == '\n' and removeTrailing:
	s = s[:-1]</t>
<t tx="ekr.20031218072017.1327">self.frame.scanForTabWidth(p)

incremental = undoType not in ("Cut","Paste") and not self.forceFullRecolorFlag
self.frame.body.recolor_now(p,incremental=incremental)

self.forceFullRecolorFlag = false</t>
<t tx="ekr.20031218072017.1328">redraw_flag = false

c.beginUpdate()

# Update dirty bits.
if not p.isDirty() and p.setDirty(): # Sets all cloned and @file dirty bits
	redraw_flag = true
	
# Update icons.
val = p.computeIcon()
if val != v.iconVal:
	v.iconVal = val
	redraw_flag = true

c.endUpdate(redraw_flag) # redraw only if necessary</t>
<t tx="ekr.20031218072017.1329"># Called by command handlers that have already changed the text.

def onBodyChanged (self,p,undoType,oldSel=None,oldYview=None,newSel=None,oldText=None):
	
	"""Handle a change to the body pane."""
	
	c = self.c
	if not p:
		p = c.currentPosition()

	if not oldSel:
		oldSel = c.frame.body.getTextSelection()

	self.idle_body_key(p,oldSel,undoType,oldYview=oldYview,newSel=newSel,oldText=oldText)</t>
<t tx="ekr.20031218072017.1330">def onBodyKey (self,event):
	
	"""Handle any key press event in the body pane."""

	c = self.c ; ch = event.char 
	oldSel = c.frame.body.getTextSelection()
	
	p = c.currentPosition()

	# g.trace(repr(ch))

	if 0: # won't work when menu keys are bound.
		self.handleStatusLineKey(event)
		
	# g.trace(p)
		
	# We must execute this even if len(ch) &gt; 0 to delete spurious trailing newlines.
	self.c.frame.bodyCtrl.after_idle(self.idle_body_key,p,oldSel,"Typing",ch)

</t>
<t tx="ekr.20031218072017.1331"># Called by command handlers that change the text just before idle time.

def onBodyWillChange (self,p,undoType,oldSel=None,oldYview=None):
	
	"""Queue the body changed idle handler."""
	
	c = self.c

	if not oldSel:
		oldSel = c.frame.body.getTextSelection()

	if not p:
		p = c.currentPosition()

	self.c.frame.bodyCtrl.after_idle(self.idle_body_key,p,oldSel,undoType,oldYview)</t>
<t tx="ekr.20031218072017.1332">@ The &lt;Key&gt; event generates the event before the headline text is changed(!), so we register an idle-event handler to do the work later.
@c

@others</t>
<t tx="ekr.20031218072017.1333">def onHeadChanged (self,p):
	
	"""Handle a change to headline text."""

	self.c.frame.bodyCtrl.after_idle(self.idle_head_key,p)</t>
<t tx="ekr.20031218072017.1334">def OnHeadlineKey (self,p,event):
	
	"""Handle a key event in a headline."""

	ch = event.char
	self.c.frame.bodyCtrl.after_idle(self.idle_head_key,p,ch)

</t>
<t tx="ekr.20031218072017.1335">def idle_head_key (self,p,ch=None):
	
	"""Update headline text at idle time."""

	c = self.c ; v = p.v

	if not v or not v.edit_text() or p != c.currentPosition():
		return "break"

	if g.doHook("headkey1",c=c,v=v,ch=ch):
		return "break" # The hook claims to have handled the event.

	&lt;&lt; set s to the widget text &gt;&gt;
	&lt;&lt; set head to vnode text &gt;&gt;
	changed = s != head
	done = ch and (ch == '\r' or ch == '\n')
	if not changed and not done:
		return "break"
	if changed:
		c.undoer.setUndoParams("Change Headline",p,newText=s,oldText=head)
	index = v.edit_text().index("insert")
	if changed:
		&lt;&lt; update v and all nodes joined to v &gt;&gt;
	&lt;&lt; reconfigure v and all nodes joined to v &gt;&gt;
	&lt;&lt; update the screen &gt;&gt;

	g.doHook("headkey2",c=c,v=v,ch=ch)
	return "break"</t>
<t tx="ekr.20031218072017.1336">s = v.edit_text().get("1.0","end")
s = g.toUnicode(s,g.app.tkEncoding) # 2/25/03

if not s:
	s = u""
s = s.replace('\n','')
s = s.replace('\r','')
# g.trace(`s`)
</t>
<t tx="ekr.20031218072017.1337">head = v.headString()
if head == None:
	head = u""
head = g.toUnicode(head,"utf-8")
</t>
<t tx="ekr.20031218072017.1338">c.beginUpdate()
if 1: # update...
	# Update changed bit.
	if not c.changed:
		c.setChanged(true)
	# Update all dirty bits.
	p.setDirty()
	# Update v.
	v.initHeadString(s)
	v.edit_text().delete("1.0","end")
	v.edit_text().insert("end",s)
	v.edit_text().mark_set("insert",index)
c.endUpdate(false) # do not redraw now.</t>
<t tx="ekr.20031218072017.1339"># Reconfigure v's headline.
if done:
	self.setDisabledLabelState(p)

v.edit_text().configure(width=self.headWidth(v))</t>
<t tx="ekr.20031218072017.1340">if done:
	c.beginUpdate()
	self.endEditLabel()
	c.endUpdate()

elif changed:
	# update v immediately.  Joined nodes are redrawn later by endEditLabel.
	# Redrawing the whole screen now messes up the cursor in the headline.
	self.drawIcon(p) # just redraw the icon.</t>
<t tx="ekr.20031218072017.1341">@ These routines are involved in many projects.  Cloning them over and over can slow down Leo a lot.</t>
<t tx="ekr.20031218072017.1342">@ Once a directive is seen, no other related directives in nodes further up the tree have any effect.  For example, if an @color directive is seen in node v, no @color or @nocolor directives are examined in any ancestor of v.

This code is similar to Commands::scanAllDirectives, but it has been modified for use by the atFile class.
@c

def scanAllDirectives(self,v):
	
	"""Scan vnode v and v's ancestors looking for directives,
	setting corresponding atFile ivars.
	"""

	c = self.commands
	&lt;&lt; Set ivars &gt;&gt;
	&lt;&lt; Set path from @file node &gt;&gt;
	old = {}
	while v:
		s = v.t.bodyString
		dict = get_directives_dict(s)
		&lt;&lt; Test for @path &gt;&gt;
		&lt;&lt; Test for @encoding &gt;&gt;
		&lt;&lt; Test for @comment and @language &gt;&gt;
		&lt;&lt; Test for @header and @noheader &gt;&gt;
		&lt;&lt; Test for @lineending &gt;&gt;
		&lt;&lt; Test for @pagewidth &gt;&gt;
		&lt;&lt; Test for @tabwidth &gt;&gt;
		old.update(dict)
		v = v.parent()
	&lt;&lt; Set current directory &gt;&gt;
	&lt;&lt; Set comment Strings from delims &gt;&gt;</t>
<t tx="ekr.20031218072017.1343">self.page_width = self.commands.page_width
self.tab_width  = self.commands.tab_width

self.default_directory = None # 8/2: will be set later.

delim1, delim2, delim3 = set_delims_from_language(c.target_language)
self.language = c.target_language

self.encoding = app().config.default_derived_file_encoding
self.output_newline = getOutputNewline() # 4/24/03: initialize from config settings.</t>
<t tx="ekr.20031218072017.1344"># An absolute path in an @file node over-rides everything else.
# A relative path gets appended to the relative path by the open logic.

# Bug fix: 10/16/02
if v.isAtFileNode():
	name = v.atFileNodeName()
elif v.isAtRawFileNode():
	name = v.atRawFileNodeName()
elif v.isAtNoSentinelsFileNode():
	name = v.atNoSentinelsFileNodeName()
else:
	name = ""

dir = choose(name,os.path.dirname(name),None)
if dir and len(dir) &gt; 0 and os.path.isabs(dir):
	if os.path.exists(dir):
		self.default_directory = dir
	else: # 9/25/02
		self.default_directory = makeAllNonExistentDirectories(dir)
		if not self.default_directory:
			self.error("Directory \"" + dir + "\" does not exist")
			
</t>
<t tx="ekr.20031218072017.1345"># 10/17/02: @language and @comment may coexist in @file trees.
# For this to be effective the @comment directive should follow the @language directive.

if not old.has_key("comment") and dict.has_key("comment"):
	k = dict["comment"]
	# 11/14/02: Similar to fix below.
	delim1, delim2, delim3 = set_delims_from_string(s[k:])

# Reversion fix: 12/06/02: We must use elif here, not if.
elif not old.has_key("language") and dict.has_key("language"):
	k = dict["language"]
	# 11/14/02: Fix bug reported by J.M.Gilligan.
	self.language,delim1,delim2,delim3 = set_language(s,k)</t>
<t tx="ekr.20031218072017.1346">if not old.has_key("encoding") and dict.has_key("encoding"):
	
	e = scanAtEncodingDirective(s,dict)
	if e:
		self.encoding = e</t>
<t tx="ekr.20031218072017.1347"># EKR: 10/10/02: perform the sames checks done by tangle.scanAllDirectives.
if dict.has_key("header") and dict.has_key("noheader"):
	es("conflicting @header and @noheader directives")</t>
<t tx="ekr.20031218072017.1348">if not old.has_key("lineending") and dict.has_key("lineending"):
	
	lineending = scanAtLineendingDirective(s,dict)
	if lineending:
		self.output_newline = lineending
</t>
<t tx="ekr.20031218072017.1349"># We set the current director to a path so future writes will go to that directory.

loadDir = app().loadDir

if not self.default_directory and not old.has_key("path") and dict.has_key("path"):

	k = dict["path"]
	&lt;&lt; compute relative path from s[k:] &gt;&gt;
	if path and len(path) &gt; 0:
		base = getBaseDirectory() # returns "" on error.
		path = os.path.join(base,path)
		if os.path.isabs(path):
			&lt;&lt; handle absolute path &gt;&gt;
		else:
			self.error("ignoring bad @path: " + path)
	else:
		self.error("ignoring empty @path")</t>
<t tx="ekr.20031218072017.1350">j = i = k + len("@path")
i = skip_to_end_of_line(s,i)
path = string.strip(s[j:i])

# Remove leading and trailing delims if they exist.
if len(path) &gt; 2 and (
	(path[0]=='&lt;' and path[-1] == '&gt;') or
	(path[0]=='"' and path[-1] == '"') ):
	path = path[1:-1]
path = path.strip()

if 0: # 11/14/02: we want a _relative_ path, not an absolute path.
	path = os.path.join(loadDir,path)</t>
<t tx="ekr.20031218072017.1351"># path is an absolute path.

if os.path.exists(path):
	self.default_directory = path
else: # 9/25/02
	self.default_directory = makeAllNonExistentDirectories(path)
	if not self.default_directory:
		self.error("invalid @path: " + path)
</t>
<t tx="ekr.20031218072017.1352">if dict.has_key("pagewidth") and not old.has_key("pagewidth"):
	
	w = scanAtPagewidthDirective(s,dict,issue_error_flag=true)
	if w and w &gt; 0:
		self.page_width = w</t>
<t tx="ekr.20031218072017.1353">if dict.has_key("tabwidth") and not old.has_key("tabwidth"):
	
	w = scanAtTabwidthDirective(s,dict,issue_error_flag=true)
	if w and w != 0:
		self.tab_width = w

</t>
<t tx="ekr.20031218072017.1354"># This code is executed if no valid absolute path was specified in the @file node or in an @path directive.

if c.frame and not self.default_directory:
	base = getBaseDirectory() # returns "" on error.
	for dir in (c.tangle_directory,c.frame.openDirectory,c.openDirectory):
		if dir and len(dir) &gt; 0:
			dir = os.path.join(base,dir)
			if os.path.isabs(dir): # Errors may result in relative or invalid path.
				if os.path.exists(dir):
					self.default_directory = dir ; break
				else: # 9/25/02
					self.default_directory = makeAllNonExistentDirectories(dir)

if not self.default_directory:
	# This should never happen: c.openDirectory should be a good last resort.
	self.error("No absolute directory specified anywhere.")
	self.default_directory = ""</t>
<t tx="ekr.20031218072017.1355"># Use single-line comments if we have a choice.
# 8/2/01: delim1,delim2,delim3 now correspond to line,start,end
if delim1:
	self.startSentinelComment = delim1
	self.endSentinelComment = "" # Must not be None.
elif delim2 and delim3:
	self.startSentinelComment = delim2
	self.endSentinelComment = delim3
else: # Emergency!
	# assert(0)
	es("Unknown language: using Python comment delimiters")
	es("c.target_language:"+`c.target_language`)
	es("delim1,delim2,delim3:" + `delim1`+":"+`delim2`+":"+`delim3`)
	self.startSentinelComment = "#" # This should never happen!
	self.endSentinelComment = ""</t>
<t tx="ekr.20031218072017.1356"># Called by __init__

def init_ivars(self):

	c = self.c
	&lt;&lt; init tangle ivars &gt;&gt;
	&lt;&lt; init untangle ivars &gt;&gt;
	
# Called by scanAllDirectives

def init_directive_ivars (self):

	c = self.c
	&lt;&lt; init directive ivars &gt;&gt;</t>
<t tx="ekr.20031218072017.1357"># Various flags and counts...

self.errors = 0 # The number of errors seen.
self.tangling = true # true if tangling, false if untangling.
self.path_warning_given = false # true: suppress duplicate warnings.
self.tangle_indent = 0 # Level of indentation during pass 2, in spaces.
if c.frame:
	self.file_name = c.mFileName # The file name (was a bridge function)
else:
	self.file_name = "&lt;unknown file name&gt;"
self.p = None # position being processed.
self.output_file = None # The file descriptor of the output file.
self.start_mode = "doc" # "code" or "doc".  Use "doc" for compatibility.
self.tangle_default_directory = None # Default directory set by scanAllDirectives.

@ Symbol tables: the TST (Tangle Symbol Table) contains all section names in the outline. The UST (Untangle Symbol Table) contains all sections defined in the derived file.
@c
self.tst = {}
self.ust = {}

# The section stack for Tangle and the definition stack for Untangle.
self.section_stack = []
self.def_stack = []

@ The list of all roots. The symbol table routines add roots to self list during pass 1. Pass 2 uses self list to generate code for all roots.
@c
self.root_list = []

# The delimiters for comments created by the @comment directive.
self.single_comment_string = "//"  # present comment delimiters.
self.start_comment_string = "/*"
self.end_comment_string = "*/"
self.sentinel = None

# The filename following @root in a headline.
# The code that checks for &lt; &lt; * &gt; &gt; = uses these globals.
self.root = None
self.root_name = None

# Formerly the "tangle private globals"
# These save state during tangling and untangling.
# It is possible that these will be removed...
if 1:
	self.head_root = None
	self.code = None
	self.doc = None
	self.header_name = None
	self.header = None
	self.section_name = None

@ The following records whether we have seen an @code directive in a body text.
If so, an @code represents &lt; &lt; header name &gt; &gt; = and it is valid to continue a section definition.
@c
self.code_seen = false # true if @code seen in body text.

# Support of output_newline option
self.output_newline = g.getOutputNewline()</t>
<t tx="ekr.20031218072017.1358">@ Untangle vars used while comparing.
@c
self.line_comment = self.comment = self.comment_end = None
self.comment2 = self.comment2_end = None
self.string1 = self.string2 = self.verbatim = None
self.message = None # forgiving compare message.</t>
<t tx="ekr.20031218072017.1359">if 0: # not used in this version of Leo
	self.allow_rich_text = default_allow_rich_text
	self.extended_noweb_flag = default_extended_noweb_flag
	self.target_language = default_target_language # uses c.target_lanuage instead
	
# Global options
self.page_width = c.page_width
self.tab_width = c.tab_width
self.tangle_batch_flag = c.tangle_batch_flag
self.untangle_batch_flag = c.untangle_batch_flag

# Default tangle options.
self.tangle_directory = None # Initialized by scanAllDirectives
self.output_doc_flag = c.output_doc_flag
self.use_header_flag = c.use_header_flag

# Default tangle language
self.language = c.target_language
delim1,delim2,delim3 = g.set_delims_from_language(self.language)
# g.trace(delim1,delim2,delim3)

# 8/1/02: this now works as expected.
self.single_comment_string = delim1
self.start_comment_string = delim2
self.end_comment_string = delim3

# Abbreviations for self.language.
# Warning: these must also be initialized in tangle.scanAllDirectives.
if 1: # 10/30/02: Don't change the code, just ignore @language cweb.
	self.use_cweb_flag = false
	self.raw_cweb_flag = self.language == "cweb" # A new ivar.
else:
	self.use_cweb_flag = self.language == "cweb"
	self.raw_cweb_flag = false # was never used before.

self.use_noweb_flag = not self.use_cweb_flag

# Set only from directives.
self.print_mode = "verbose"

# Stephen P. Schaefer 9/13/2002
# support @first directive
self.first_lines = ""
self.encoding = g.app.config.default_derived_file_encoding # 2/21/03
self.output_newline = g.getOutputNewline() # 4/24/03: initialize from config settings.</t>
<t tx="ekr.20031218072017.1360">@ Once a directive is seen, related directives in ancesors have no effect.  For example, if an @color directive is seen in node x, no @color or @nocolor directives are examined in any ancestor of x.
@c

def scanAllDirectives(self,p,require_path_flag,issue_error_flag):
	
	"""Scan vnode p and p's ancestors looking for directives,
	setting corresponding tangle ivars and globals.
	"""

	c = self.c
	# g.trace(p)
	old = {} ; print_mode_changed = false
	self.init_directive_ivars()
	if p:
		s = p.bodyString()
		&lt;&lt; Collect @first attributes &gt;&gt;
	for p in p.self_and_parents_iter():
		s = p.bodyString()
		dict = g.get_directives_dict(s)
		# g.trace("dict:",dict,p)
		&lt;&lt; Test for @comment and @language &gt;&gt;
		&lt;&lt; Test for @encoding &gt;&gt;
		&lt;&lt; Test for @lineending &gt;&gt;
		&lt;&lt; Test for print modes directives &gt;&gt;
		&lt;&lt; Test for @path &gt;&gt;
		&lt;&lt; Test for @pagewidth &gt;&gt;
		&lt;&lt; Test for @root &gt;&gt;
		&lt;&lt; Test for @tabwidth &gt;&gt;
		&lt;&lt; Test for @header and @noheader &gt;&gt;
		old.update(dict)
	&lt;&lt; Set self.tangle_directory &gt;&gt;</t>
<t tx="ekr.20031218072017.1361">@ Stephen P. Schaefer 9/13/2002: Add support for @first.
Unlike other root attributes, does *NOT* inherit from parent nodes.
@c
tag = "@first"
sizeString = len(s) # DTHEIN 13-OCT-2002: use to detect end-of-string
i = 0
while 1:
	# DTHEIN 13-OCT-2002: directives must start at beginning of a line
	if not g.match_word(s,i,tag):
		i = g.skip_line(s,i)
	else:
		i = i + len(tag)
		j = i = g.skip_ws(s,i)
		i = g.skip_to_end_of_line(s,i)
		if i&gt;j:
			self.first_lines += s[j:i] + '\n'
		i = g.skip_nl(s,i)
	if i &gt;= sizeString:  # DTHEIN 13-OCT-2002: get out when end of string reached
		break

</t>
<t tx="ekr.20031218072017.1362">if old.has_key("comment") or old.has_key("language"):
	 pass # Do nothing more.

elif dict.has_key("comment"):

	i = dict["comment"]
	delim1,delim2,delim3 = g.set_delims_from_string(s[i:])
	if delim1 or delim2:
		self.single_comment_string = delim1
		self.start_comment_string = delim2
		self.end_comment_string = delim3
		# @comment effectively disables Untangle.
		self.language = "unknown"
	else:
		if issue_error_flag:
			g.es("ignoring: " + s[i:])

elif dict.has_key("language"):

	i = dict["language"]
	language,delim1,delim2,delim3 = g.set_language(s,i)
	self.language = language
	self.single_comment_string = delim1
	self.start_comment_string = delim2
	self.end_comment_string = delim3
	if 0:
		g.trace(self.single_comment_string,
			self.start_comment_string,
			self.end_comment_string)

	# 10/30/02: These ivars must be updated here!
	# g.trace(`self.language`)
	self.use_noweb_flag = true
	self.use_cweb_flag = false # Only raw cweb mode is ever used.
	self.raw_cweb_flag = self.language == "cweb" # A new ivar.
</t>
<t tx="ekr.20031218072017.1363">if not old.has_key("encoding") and dict.has_key("encoding"):
	
	e = g.scanAtEncodingDirective(s,dict)
	if e:
		self.encoding = e
</t>
<t tx="ekr.20031218072017.1364">if not old.has_key("lineending") and dict.has_key("lineending"):
	
	lineending = g.scanAtLineendingDirective(s,dict)
	if lineending:
		self.output_newline = lineending
</t>
<t tx="ekr.20031218072017.1365">@ It is valid to have more than one of these directives in the same body text: the more verbose directive takes precedence.
@c

if not print_mode_changed:
	for name in ("verbose","terse","quiet","silent"):
		if dict.has_key(name):
			self.print_mode = name
			print_mode_changed = true
			break
</t>
<t tx="ekr.20031218072017.1366">if require_path_flag and not old.has_key("path") and dict.has_key("path"):

	k = dict["path"]
	&lt;&lt; compute dir and relative_path from s[k:] &gt;&gt;
	if len(dir) &gt; 0:
		base = g.getBaseDirectory() # May return "".
		if dir and len(dir) &gt; 0:
			dir = g.os_path_join(base,dir)
			if g.os_path_isabs(dir):
				&lt;&lt; handle absolute @path &gt;&gt;
			elif issue_error_flag and not self.path_warning_given:
				self.path_warning_given = true # supress future warnings
				self.error("ignoring relative path in @path:" + dir)
	elif issue_error_flag and not self.path_warning_given:
		self.path_warning_given = true # supress future warnings
		self.error("ignoring empty @path")
</t>
<t tx="ekr.20031218072017.1367">j = i = k + len("@path")
i = g.skip_to_end_of_line(s,i)
path = string.strip(s[j:i])

# Remove leading and trailing delims if they exist.
if len(path) &gt; 2 and (
	(path[0]=='&lt;' and path[-1] == '&gt;') or
	(path[0]=='"' and path[-1] == '"') ):
	path = path[1:-1]

dir = relative_path = string.strip(path)
if 0: # 11/14/02: we want a _relative_ path, not an absolute path.
	dir = g.os_path_join(g.app.loadDir,dir)

# g.trace("dir: " + dir)</t>
<t tx="ekr.20031218072017.1368">if g.os_path_exists(dir):
	self.tangle_directory = dir
else: # 11/19/02
	self.tangle_directory = g.makeAllNonExistentDirectories(dir)
	if not self.tangle_directory:
		if issue_error_flag and not self.path_warning_given:
			self.path_warning_given = true # supress future warnings
			self.error("@path directory does not exist: " + dir)
			if base and len(base) &gt; 0:
				g.es("relative_path_base_directory: " + base)
			if relative_path and len(relative_path) &gt; 0:
				g.es("relative path in @path directive: " + relative_path)</t>
<t tx="ekr.20031218072017.1369">if not old.has_key("pagewidth") and dict.has_key("pagewidth"):
	
	w = g.scanAtPagewidthDirective(s,dict,issue_error_flag)
	if w and w &gt; 0:
		self.page_width = w</t>
<t tx="ekr.20031218072017.1370">@ 10/27/02: new code:  self.root may not be defined here, so any relative directory specified in the @root node will have no effect unless we have this code.

@c
if self.root_name == None and dict.has_key("root"):

	i = dict["root"]
	# i += len("@root")
	self.setRootFromText(s[i:],issue_error_flag)</t>
<t tx="ekr.20031218072017.1371">if not old.has_key("tabwidth") and dict.has_key("tabwidth"):
	
	w = g.scanAtTabwidthDirective(s,dict,issue_error_flag)
	if w and w != 0:
		self.tab_width = w
</t>
<t tx="ekr.20031218072017.1372">if old.has_key("header") or old.has_key("noheader"):
	pass # Do nothing more.
	
elif dict.has_key("header") and dict.has_key("noheader"):
	if issue_error_flag:
		g.es("conflicting @header and @noheader directives")

elif dict.has_key("header"):
	self.use_header_flag = true

elif dict.has_key("noheader"):
	self.use_header_flag = false
</t>
<t tx="ekr.20031218072017.1373">@ This code sets self.tangle_directory if it has not already been set by an @path directive.

An absolute file name in an @root directive will override the directory set here.
A relative file name gets appended later to the default directory.
That is, the final file name will be g.os_path_join(self.tangle_directory,fileName)
@c

if c.frame and require_path_flag and not self.tangle_directory:
	if self.root_name and len(self.root_name) &gt; 0:
		root_dir = g.os_path_dirname(self.root_name)
	else:
		root_dir = None
	# print "root_dir:", root_dir

	table = ( # This is a precedence table.
		(root_dir,"@root"), 
		(c.tangle_directory,"default tangle"), # Probably should be eliminated.
		(c.frame.openDirectory,"open"))

	base = g.getBaseDirectory() # May return "".

	for dir2, kind in table:
		if dir2 and len(dir2) &gt; 0:
			# print "base,dir:",`base`,`dir`
			dir = g.os_path_join(base,dir2)
			if g.os_path_isabs(dir): # Errors may result in relative or invalid path.
				&lt;&lt; handle absolute path &gt;&gt;

if not self.tangle_directory and require_path_flag: # issue_error_flag:
	self.pathError("No absolute directory specified by @root, @path or Preferences.")
</t>
<t tx="ekr.20031218072017.1374">if g.os_path_exists(dir):
	if kind == "@root" and not g.os_path_isabs(root_dir):
		self.tangle_directory = base
	else:
		self.tangle_directory = dir 
	break
else: # 9/25/02
	self.tangle_directory = g.makeAllNonExistentDirectories(dir)
	if not self.tangle_directory:
		# 10/27/02: It is an error for this not to exist now.
		self.error("@root directory does not exist:" + dir)
		if base and len(base) &gt; 0:
			g.es("relative_path_base_directory: " + base)
		if dir2 and len(dir2) &gt; 0:
			g.es(kind + " directory: " + dir2)
</t>
<t tx="ekr.20031218072017.1375"># Similar to code in scanAllDirectives.

def scanForTabWidth (self,p):
	
	c = self.c ; w = c.tab_width
	
	for p in p.self_and_parents_iter():
		s = p.v.t.bodyString
		dict = g.get_directives_dict(s)
		&lt;&lt; set w and break on @tabwidth &gt;&gt;

	c.frame.setTabWidth(w)</t>
<t tx="ekr.20031218072017.1376">if dict.has_key("tabwidth"):
	
	val = g.scanAtTabwidthDirective(s,dict,issue_error_flag=false)
	if val and val != 0:
		w = val
		break</t>
<t tx="ekr.20031218072017.1377">def scanColorDirectives(self,p):
	
	"""Scan position p and p's ancestors looking for @color and @nocolor directives,
	setting corresponding colorizer ivars.
	"""

	c = self.c
	if c == None: return # self.c may be None for testing.

	language = c.target_language
	self.language = language # 2/2/03
	self.comment_string = None
	self.rootMode = None # None, "code" or "doc"
	
	for p in p.self_and_parents_iter():
		s = p.v.t.bodyString
		dict = g.get_directives_dict(s)
		&lt;&lt; Test for @comment or @language &gt;&gt;
		&lt;&lt; Test for @root, @root-doc or @root-code &gt;&gt;

	return self.language # For use by external routines.
</t>
<t tx="ekr.20031218072017.1378"># 10/17/02: @comment and @language may coexist in the same node.

if dict.has_key("comment"):
	k = dict["comment"]
	self.comment_string = s[k:]

if dict.has_key("language"):
	i = dict["language"]
	language,junk,junk,junk = g.set_language(s,i)
	self.language = language # 2/2/03

if dict.has_key("comment") or dict.has_key("language"):
	break</t>
<t tx="ekr.20031218072017.1379">if dict.has_key("root") and not self.rootMode:

	k = dict["root"]
	if g.match_word(s,k,"@root-code"):
		self.rootMode = "code"
	elif g.match_word(s,k,"@root-doc"):
		self.rootMode = "doc"
	else:
		doc = g.app.config.at_root_bodies_start_in_doc_mode
		self.rootMode = g.choose(doc,"doc","code")
</t>
<t tx="ekr.20031218072017.1380"></t>
<t tx="ekr.20031218072017.1381"></t>
<t tx="ekr.20031218072017.1382"># Returns a tuple (single,start,end) of comment delims

def set_delims_from_language(language):

	val = app.language_delims_dict.get(language)
	if val:
		delim1,delim2,delim3 = g.set_delims_from_string(val)
		if delim2 and not delim3:
			return None,delim1,delim2
		else: # 0,1 or 3 params.
			return delim1,delim2,delim3
	else:
		return None, None, None # Indicate that no change should be made
</t>
<t tx="ekr.20031218072017.1383">def set_delims_from_string(s):

	"""Returns (delim1, delim2, delim2), the delims following the @comment directive.
	
	This code can be called from @languge logic, in which case s can point at @comment"""

	# Skip an optional @comment
	tag = "@comment"
	i = 0
	if g.match_word(s,i,tag):
		i += len(tag)
		
	count = 0 ; delims = [None, None, None]
	while count &lt; 3 and i &lt; len(s):
		i = j = g.skip_ws(s,i)
		while i &lt; len(s) and not g.is_ws(s[i]) and not g.is_nl(s,i):
			i += 1
		if j == i: break
		delims[count] = s[j:i]
		count += 1
		
	# 'rr 09/25/02
	if count == 2: # delims[0] is always the single-line delim.
		delims[2] = delims[1]
		delims[1] = delims[0]
		delims[0] = None

	# 7/8/02: The "REM hack": replace underscores by blanks.
	# 9/25/02: The "perlpod hack": replace double underscores by newlines.
	for i in xrange(0,3):
		if delims[i]:
			delims[i] = string.replace(delims[i],"__",'\n') 
			delims[i] = string.replace(delims[i],'_',' ')

	return delims[0], delims[1], delims[2]</t>
<t tx="ekr.20031218072017.1384">def set_language(s,i,issue_errors_flag=false):
	
	"""Scan the @language directive that appears at s[i:].

	Returns (language, delim1, delim2, delim3)
	"""

	tag = "@language"
	# g.trace(`g.get_line(s,i)`)
	assert(i != None)
	assert(g.match_word(s,i,tag))
	i += len(tag) ; i = g.skip_ws(s, i)
	# Get the argument.
	j = i ; i = g.skip_c_id(s,i)
	# Allow tcl/tk.
	arg = string.lower(s[j:i])
	if app.language_delims_dict.get(arg):
		language = arg
		delim1, delim2, delim3 = g.set_delims_from_language(language)
		return language, delim1, delim2, delim3
	
	if issue_errors_flag:
		g.es("ignoring: " + g.get_line(s,i))

	return None, None, None, None,</t>
<t tx="ekr.20031218072017.1385">@ We search the descendents of v looking for the definition node matching name.
There should be exactly one such node (descendents of other definition nodes are not searched).
@c

def findReference(name,root):

	for p in root.firstChild().subtree_iter():
		if p.matchHeadline(name) and not p.isAtIgnoreNode():
			return p

	return root.c.nullPosition()
</t>
<t tx="ekr.20031218072017.1386">def getOutputNewline (lineending = None):
	
	"""Convert the name of a line ending to the line ending itself.
	Use the output_newline configuration option if no lineending is given.
	"""
	
	if lineending:
		s = lineending
	else:
		s = app.config.output_newline

	s = s.lower()
	if s in ( "nl","lf"): s = '\n'
	elif s == "cr": s = '\r'
	elif s == "platform": s = os.linesep  # 12/2/03: emakital
	elif s == "crlf": s = "\r\n"
	else: s = '\n' # Default for erroneous values.
	return s</t>
<t tx="ekr.20031218072017.1387">def scanAtEncodingDirective(s,dict):
	
	"""Scan the @encoding directive at s[dict["encoding"]:].

	Returns the encoding name or None if the encoding name is invalid.
	"""

	k = dict["encoding"]
	i = g.skip_to_end_of_line(s,k)
	j = len("@encoding")
	encoding = s[k+j:i].strip()
	if g.isValidEncoding(encoding):
		# g.trace(encoding)
		return encoding
	else:
		g.es("invalid @encoding:"+encoding,color="red")
		return None</t>
<t tx="ekr.20031218072017.1388">def scanAtLineendingDirective(s,dict):
	
	"""Scan the @lineending directive at s[dict["lineending"]:].

	Returns the actual lineending or None if the name of the lineending is invalid.
	"""

	k = dict["lineending"]
	i = g.skip_to_end_of_line(s,k)
	j = len("@lineending")
	j = g.skip_ws(s,j)
	e = s[k+j:i].strip()

	if e in ("cr","crlf","lf","nl","platform"):
		lineending = g.getOutputNewline(e)
		# g.trace(`e`,`lineending`)
		return lineending
	else:
		# g.es("invalid @lineending directive:"+e,color="red")
		return None</t>
<t tx="ekr.20031218072017.1389">def scanAtPagewidthDirective(s,dict,issue_error_flag=false):
	
	"""Scan the @pagewidth directive at s[dict["pagewidth"]:].

	Returns the value of the width or None if the width is invalid.
	"""
	
	k = dict["pagewidth"]
	j = i = k + len("@pagewidth")
	i, val = g.skip_long(s,i)
	if val != None and val &gt; 0:
		# g.trace(val)
		return val
	else:
		if issue_error_flag:
			j = g.skip_to_end_of_line(s,k)
			g.es("ignoring " + s[k:j],color="red")
		return None
</t>
<t tx="ekr.20031218072017.1390">def scanAtTabwidthDirective(s,dict,issue_error_flag=false):
	
	"""Scan the @tabwidth directive at s[dict["tabwidth"]:].

	Returns the value of the width or None if the width is invalid.
	"""
	
	k = dict["tabwidth"]
	i = k + len("@tabwidth")
	i, val = g.skip_long(s, i)
	if val != None and val != 0:
		# g.trace(`val`)
		return val
	else:
		if issue_error_flag:
			i = g.skip_to_end_of_line(s,k)
			g.es("Ignoring " + s[k:i],color="red")
		return None

</t>
<t tx="ekr.20031218072017.1391">@ Perhaps this routine should be the basis of atFile.scanAllDirectives and tangle.scanAllDirectives, but I am loath to make any further to these two already-infamous routines.  Also, this code does not check for @color and @nocolor directives: leoColor.useSyntaxColoring does that.
@c

def scanDirectives(c,p=None):
	
	"""Scan vnode v and v's ancestors looking for directives.

	Returns a dict containing the results, including defaults."""

	if c == None or g.top() == None:
		return {} # For unit tests.
	if p == None:
		p = c.currentPosition()

	&lt;&lt; Set local vars &gt;&gt;
	old = {}
	pluginsList = [] # 5/17/03: a list of items for use by plugins.
	for p in p.self_and_parents_iter():
		s = p.v.t.bodyString
		dict = g.get_directives_dict(s)
		&lt;&lt; Test for @comment and @language &gt;&gt;
		&lt;&lt; Test for @encoding &gt;&gt;
		&lt;&lt; Test for @lineending &gt;&gt;
		&lt;&lt; Test for @pagewidth &gt;&gt;
		&lt;&lt; Test for @path &gt;&gt;
		&lt;&lt; Test for @tabwidth &gt;&gt;
		&lt;&lt; Test for @wrap and @nowrap &gt;&gt;
		g.doHook("scan-directives",c=c,v=p,s=s,
			old_dict=old,dict=dict,pluginsList=pluginsList)
		old.update(dict)

	if path == None: path = g.getBaseDirectory()

	return {
		"delims"    : (delim1,delim2,delim3),
		"encoding"  : encoding,
		"language"  : language,
		"lineending": lineending,
		"pagewidth" : page_width,
		"path"      : path,
		"tabwidth"  : tab_width,
		"pluginsList": pluginsList,
		"wrap"      : wrap }</t>
<t tx="ekr.20031218072017.1392">page_width = c.page_width
tab_width  = c.tab_width
language = c.target_language
delim1, delim2, delim3 = g.set_delims_from_language(c.target_language)
path = None
encoding = None # 2/25/03: This must be none so that the caller can set a proper default.
lineending = g.getOutputNewline() # 4/24/03 initialize from config settings.
wrap = app.config.getBoolWindowPref("body_pane_wraps") # 7/7/03: this is a window pref.</t>
<t tx="ekr.20031218072017.1393"># @language and @comment may coexist in @file trees.
# For this to be effective the @comment directive should follow the @language directive.

if not old.has_key("comment") and dict.has_key("comment"):
	k = dict["comment"]
	delim1,delim2,delim3 = g.set_delims_from_string(s[k:])

# Reversion fix: 12/06/02: We must use elif here, not if.
elif not old.has_key("language") and dict.has_key("language"):
	k = dict["language"]
	language,delim1,delim2,delim3 = g.set_language(s,k)</t>
<t tx="ekr.20031218072017.1394">if not old.has_key("encoding") and dict.has_key("encoding"):
	
	e = g.scanAtEncodingDirective(s,dict)
	if e:
		encoding = e
</t>
<t tx="ekr.20031218072017.1395">if not old.has_key("lineending") and dict.has_key("lineending"):
	
	e = g.scanAtLineendingDirective(s,dict)
	if e:
		lineending = e
</t>
<t tx="ekr.20031218072017.1396">if dict.has_key("pagewidth") and not old.has_key("pagewidth"):
	
	w = g.scanAtPagewidthDirective(s,dict)
	if w and w &gt; 0:
		page_width = w</t>
<t tx="ekr.20031218072017.1397">if not path and not old.has_key("path") and dict.has_key("path"):

	k = dict["path"]
	&lt;&lt; compute relative path from s[k:] &gt;&gt;
	if path and len(path) &gt; 0:
		base = g.getBaseDirectory() # returns "" on error.
		path = g.os_path_join(base,path)
		</t>
<t tx="ekr.20031218072017.1398">j = i = k + len("@path")
i = g.skip_to_end_of_line(s,i)
path = string.strip(s[j:i])

# Remove leading and trailing delims if they exist.
if len(path) &gt; 2 and (
	(path[0]=='&lt;' and path[-1] == '&gt;') or
	(path[0]=='"' and path[-1] == '"') ):
	path = path[1:-1]

path = string.strip(path)
if 0: # 11/14/02: we want a _relative_ path, not an absolute path.
	path = g.os_path_join(app.loadDir,path)</t>
<t tx="ekr.20031218072017.1399">if dict.has_key("tabwidth") and not old.has_key("tabwidth"):
	
	w = g.scanAtTabwidthDirective(s,dict)
	if w and w &gt; 0:
		tab_width = w</t>
<t tx="ekr.20031218072017.1400">if not old.has_key("wrap") and not old.has_key("nowrap"):
	
	if dict.has_key("wrap"):
		wrap = true
	elif dict.has_key("nowrap"):
		wrap = false</t>
<t tx="ekr.20031218072017.1401">@ignore
@lineending nl
@encoding iso-8859-1
@pagewidth 80
@tabwidth -8</t>
<t tx="ekr.20031218072017.1402">line 1
line 2
last line (no newline)</t>
<t tx="ekr.20031218072017.1403">node 1 line 1
node 1 line 2
node 1 line 3 (newline)
</t>
<t tx="ekr.20031218072017.1404">node 2 line 1
node 2 line 2
node 2 line 3 (no newline)</t>
<t tx="ekr.20031218072017.1405">line 1
line 2
last line (no newline)</t>
<t tx="ekr.20031218072017.1406">@root c:\prog\test\tangleTest.txt

line 1 Ã
line 2
&lt;&lt; ref &gt;&gt;
line 3</t>
<t tx="ekr.20031218072017.1407">&lt;&lt; ref &gt;&gt;=
ref line 1
ref line 2</t>
<t tx="ekr.20031218072017.1408"></t>
<t tx="ekr.20031218072017.1409"></t>
<t tx="ekr.20031218072017.1410">@encoding iso-8859-15
@nocolor

https://sourceforge.net/forum/message.php?msg_id=1915561
By: dalcolmo

I tried to write out text containing characters like:
ä ö ü Ä Ö Ü ß ø ó
with @file-asis and get:

UnicodeError: ASCII encoding error: ordinal not in range(128)

@file (without option) works fine.
This was with a pristine 3.11b3 installation, e.g. without any modifications.
Setting the encoding for derived files to latin-1 does not change anything.

- Josef

@color</t>
<t tx="ekr.20031218072017.1411">@nocolor

http://sourceforge.net/forum/message.php?msg_id=1914029

From: Rich
LEO version: 3.10, build 1.180
  I've noticed that every time I use "OpenWith" on a node, the temp file's extension
is ".txt". This means that my editor's "colorization" isn't coloring properly.
 I even tried a simple .Leo file like this:
Headline: @file test.c
Body: @language c

The default language is also set to c.

Tracking it down in LEOPY.LEO, I found the difficulty to be in FRAME.PY, node
&lt;&lt; set ext based on the present language &gt;&gt;. On entry, ext is always set to
"txt". Because of this, the test in the first line (if ext == None or len(ext)
== 0:) fails, and the extension is not changed.
By commenting out the first line, the extension is always reset, which fixes
the problem.

--Rich


______________________________________________________________________
You are receiving this email because you elected to monitor this forum.
To stop monitoring this forum, login to SourceForge.net and visit: 
https://sourceforge.net/forum/monitor.php?forum_id=10227
</t>
<t tx="ekr.20031218072017.1412">@nocolor
https://sourceforge.net/forum/message.php?msg_id=1916142
By: riotnrrrd

In 3.11b3, when I do 'open with' with a node that has non-ascii characters in
it's body text, I get:

exception opening temp file
UnicodeError: ASCII encoding error: ordinal not in range(128)

in log window,

Traceback (most recent call last):
  File "./leoFrame.py", line 1585, in OnOpenWith
    file.write(v.bodyString())
UnicodeError: ASCII encoding error: ordinal not in range(128)

as traceback and nothing happens. When I retry, I get 

reopening: LeoTemp_139725700_koe.txt

in log window, no traceback and the editor opens with an empty file.

In the leoConfig.txt I have 

new_leo_file_encoding = iso-8859-15
default_derived_file_encoding = iso-8859-15

Changing them to UTF-8 has no effect.
</t>
<t tx="ekr.20031218072017.1413">@nocolor
https://sourceforge.net/forum/message.php?msg_id=1952587
Developers

I still get encoding problems when reopening a file:
1. create a new leo file and add an accented character in a body panel
2. save the file
3. open the file
4. accented character is shown as expectd
5. add a second accented character and save
6. reopen the file: the second accented character is ok, but the first is shown
as ascii garbage (2 bytes).

Running 
from leoGlobals import app,es 
es(app().tkEncoding,color="red")

gives me cp1252.

Changing default_derived_file_encoding, new_leo_file_encoding and tk_encoding
does not change this misbehaviour.

I use new_leo_file_encoding = iso-8859-1
default_derived_file_encoding = iso-8859-1,
tk_encoding=

This is exactly the same behaviour as in beta3.</t>
<t tx="ekr.20031218072017.1414"></t>
<t tx="ekr.20031218072017.1415"></t>
<t tx="ekr.20031218072017.1416">def __init__(self):

	# These ivars are the global vars of this program.
	self.afterHandler = None
	self.batchMode = false # true: run in batch mode.
	self.commandName = None # The name of the command being executed.
	self.config = None # The leoConfig instance.
	self.disableSave = false
	self.globalWindows = []
	self.gui = None # The gui class.
	self.hasOpenWithMenu = false # true: open with plugin has been loaded.
	self.hookError = false # true: suppress further calls to hooks.
	self.hookFunction = None # Application wide hook function.
	self.idle_imported = false # true: we have done an import idle
	self.idleTimeDelay = 100 # Delay in msec between calls to "idle time" hook.
	self.idleTimeHook = false # true: the global idleTimeHookHandler will reshedule itself.
	self.initing = true # true: we are initiing the app.
	self.killed = false # true: we are about to destroy the root window.
	self.leoID = None # The id part of gnx's.
	self.loadDir = None # The directory from which Leo was loaded.
	self.loadedPlugins = [] # List of loaded plugins that have signed on.
	self.log = None # The LeoFrame containing the present log.
	self.logIsLocked = false # true: no changes to log are allowed.
	self.logWaiting = [] # List of messages waiting to go to a log.
	self.menuWarningsGiven = false # true: supress warnings in menu code.
	self.nodeIndices = None # Singleton node indices instance.
	self.numberOfWindows = 0 # Number of opened windows.
	self.openWithFiles = [] # List of data used by Open With command.
	self.openWithFileNum = 0 # Used to generate temp file names for Open With command.
	self.openWithTable = None # The table passed to createOpenWithMenuFromTable.
	self.quitting = false # true if quitting.  Locks out some events.
	self.realMenuNameDict = {} # Contains translations of menu names and menu item names.
	self.root = None # The hidden main window. Set later.
	self.searchDict = {} # For communication between find/change scripts.
	self.scriptDict = {} # For communication between Execute Script command and scripts.
	self.trace = false # true: enable debugging traces.
	self.trace_list = [] # "Sherlock" argument list for tracing().
	self.tkEncoding = "utf-8"
	self.unicodeErrorGiven = true # true: suppres unicode tracebacks.
	self.unitTestDict = {} # For communication between unit tests and code.
	self.use_gnx = true # true: generate gnx's instead of tnode indices.
	self.windowList = [] # Global list of all frames.  Does not include hidden root window.

	# Global panels.  Destroyed when Leo ends.
	self.findFrame = None
	self.pythonFrame = None
	
	&lt;&lt; Define global constants &gt;&gt;
	&lt;&lt; Define global data structures &gt;&gt;</t>
<t tx="ekr.20031218072017.1417">self.prolog_string = "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"

# New in leo.py 3.0
self.prolog_prefix_string = "&lt;?xml version=\"1.0\" encoding="
self.prolog_postfix_string = "?&gt;"

# leo.py 3.11
self.use_unicode = true # true: use new unicode logic.
</t>
<t tx="ekr.20031218072017.1418"># Called when the gApp global has been defined.

def finishCreate(self):
	
	app = self
	
	# New 4.0 stuff.
	if 0: # Not using leoID.txt is more convenient for the user.
		app.setLeoID()
		app.nodeIndices = leoNodes.nodeIndices()</t>
<t tx="ekr.20031218072017.1419"></t>
<t tx="ekr.20031218072017.1420">def update_section (self,config,section,dict):
	
	section = g.toEncodedString(section,self.config_encoding) # 10/31/03

	if config.has_section(section):
		config.remove_section(section)
	config.add_section(section)
	
	keys = dict.keys()
	keys.sort() # Not effective.
	for name in keys:
		val = dict [name]
		val  = g.toEncodedString(val,self.config_encoding)
		name = g.toEncodedString(name,self.config_encoding) # 10/31/03
		config.set(section,name,val)</t>
<t tx="ekr.20031218072017.1421">@ Rewritten 10/11/02 as follows:

1. We call initConfigParam and initBooleanConfigParam to get the values.

The general purpose code will enter all these values into configDict.  This allows update() to write the configuration section without special case code.  configDict is not accessible by the user.  Rather, for greater speed the user access these values via the ivars of this class.

2. We pass the ivars themselves as params so that default initialization is done in the ctor, as would normally be expected.
@c

self.at_root_bodies_start_in_doc_mode = self.initBooleanConfigParam(
	"at_root_bodies_start_in_doc_mode",self.at_root_bodies_start_in_doc_mode)
	
encoding = self.initConfigParam(
	"config_encoding",self.config_encoding)
	
if g.isValidEncoding(encoding):
	self.config_encoding = encoding
else:
	g.es("bad config_encoding: " + encoding)
	
self.create_nonexistent_directories = self.initBooleanConfigParam(
	"create_nonexistent_directories",self.create_nonexistent_directories)
	
encoding = self.initConfigParam(
	"default_derived_file_encoding",self.default_derived_file_encoding)

if g.isValidEncoding(encoding):
	self.default_derived_file_encoding = encoding
else:
	g.es("bad default_derived_file_encoding: " + encoding)
	
self.load_derived_files_immediately = self.initBooleanConfigParam(
	"load_derived_files_immediately",self.load_derived_files_immediately)
	
encoding = self.initConfigParam(
	"new_leo_file_encoding",
	self.new_leo_file_encoding)

if g.isValidEncoding(encoding):
	self.new_leo_file_encoding = encoding
else:
	g.es("bad new_leo_file_encoding: " + encoding)

self.output_initial_comment = self.initConfigParam(
	"output_initial_comment",self.output_initial_comment)

self.output_newline = self.initConfigParam(
	"output_newline",self.output_newline)

self.read_only = self.initBooleanConfigParam(
	"read_only",self.read_only)

self.relative_path_base_directory = self.initConfigParam(
	"relative_path_base_directory",self.relative_path_base_directory)
	
self.redirect_execute_script_output_to_log_pane = self.initBooleanConfigParam(
	"redirect_execute_script_output_to_log_pane",
	self.redirect_execute_script_output_to_log_pane)
	
self.remove_sentinels_extension = self.initConfigParam(
	"remove_sentinels_extension",self.remove_sentinels_extension)

self.save_clears_undo_buffer = self.initBooleanConfigParam(
	"save_clears_undo_buffer",self.save_clears_undo_buffer)
	
self.stylesheet = self.initConfigParam(
	"stylesheet",self.stylesheet)
	
encoding = self.initConfigParam(
	"tk_encoding",self.tkEncoding)
	
if encoding and len(encoding) &gt; 0: # May be None.
	if g.isValidEncoding(encoding):
		self.tkEncoding = encoding
	else:
		g.es("bad tk_encoding: " + encoding)
		
# g.trace("config.self.tkEncoding",self.tkEncoding)

g.app.use_gnx = self.initBooleanConfigParam(
	"use_gnx",g.app.use_gnx)
# g.trace("g.app.use_gnx",g.app.use_gnx)
	
self.use_plugins = self.initBooleanConfigParam(
	"use_plugins",self.use_plugins)
	
self.write_old_format_derived_files = self.initBooleanConfigParam(
	"write_old_format_derived_files",self.write_old_format_derived_files)
</t>
<t tx="ekr.20031218072017.1422">find = self.findDict.get("find_string")
if find:
	# Leo always writes utf-8 encoding, but users may not.
	find = g.toUnicode(find,"utf-8")
	self.findDict["find_string"] = find

change = self.findDict.get("change_string")
if change:
	# Leo always writes utf-8 encoding, but users may not.
	change = g.toUnicode(change,"utf-8")
	self.findDict["change_string"] = change
</t>
<t tx="ekr.20031218072017.1423"></t>
<t tx="ekr.20031218072017.1424">def __init__(self,theCommander):
	
	# trace("topLevelDerivedFile.__init__")
	
	at = self
	at.commands = theCommander
	at.fileCommands = self.commands.fileCommands
	
	# Create subcommanders to handler old and new format derived files.
	at.old_df = oldDerivedFile(theCommander)
	at.new_df = newDerivedFile(theCommander)
	
	# Set by scanDefaultDirectory.
	at.default_directory = None
	at.errors = 0

	# Set by scanHeader when reading. Set by scanAllDirectives...
	at.encoding = None
	at.endSentinelComment = None
	at.startSentinelComment = None
</t>
<t tx="ekr.20031218072017.1425"></t>
<t tx="ekr.20031218072017.1426"># 14-SEP-2002 DTHEIN: added for use by atFile.read()

# this function scans the lines in the list 'out' for @first directives
# and appends the corresponding line from 'firstLines' to each @first 
# directive found.  NOTE: the @first directives must be the very first
# lines in 'out'.
def completeFirstDirectives(self,out,firstLines):

	tag = "@first"
	foundAtFirstYet = 0
	outRange = range(len(out))
	j = 0
	for k in outRange:
		# skip leading whitespace lines
		if (not foundAtFirstYet) and (len(out[k].strip()) == 0): continue
		# quit if something other than @first directive
		i = 0
		if not match(out[k],i,tag): break;
		foundAtFirstYet = 1
		# quit if no leading lines to apply
		if j &gt;= len(firstLines): break
		# make the new @first directive
		#18-SEP-2002 DTHEIN: remove trailing newlines because they are inserted later
		# 21-SEP-2002 DTHEIN: no trailing whitespace on empty @first directive
		leadingLine = " " + firstLines[j]
		out[k] = tag + leadingLine.rstrip() ; j += 1
</t>
<t tx="ekr.20031218072017.1427"># 14-SEP-2002 DTHEIN: added for use by atFile.read()

# this function scans the lines in the list 'out' for @last directives
# and appends the corresponding line from 'lastLines' to each @last 
# directive found.  NOTE: the @last directives must be the very last
# lines in 'out'.
def completeLastDirectives(self,out,lastLines):

	tag = "@last"
	foundAtLastYet = 0
	outRange = range(-1,-len(out),-1)
	j = -1
	for k in outRange:
		# skip trailing whitespace lines
		if (not foundAtLastYet) and (len(out[k].strip()) == 0): continue
		# quit if something other than @last directive
		i = 0
		if not match(out[k],i,tag): break;
		foundAtLastYet = 1
		# quit if no trailing lines to apply
		if j &lt; -len(lastLines): break
		# make the new @last directive
		#18-SEP-2002 DTHEIN: remove trailing newlines because they are inserted later
		# 21-SEP-2002 DTHEIN: no trailing whitespace on empty @last directive
		trailingLine = " " + lastLines[j]
		out[k] = tag + trailingLine.rstrip() ; j -= 1
</t>
<t tx="ekr.20031218072017.1428">@ Sections appear in the derived file in reference order, not tree order.  Therefore, when we insert the nth child of the parent there is no guarantee that the previous n-1 children have already been inserted. And it won't work just to insert the nth child as the last child if there aren't n-1 previous siblings.  For example, if we insert the third child followed by the second child followed by the first child the second and third children will be out of order.

To ensure that nodes are placed in the correct location we create "dummy" children as needed as placeholders.  In the example above, we would insert two dummy children when inserting the third child.  When inserting the other two children we replace the previously inserted dummy child with the actual children.

vnode child indices are zero-based.  Here we use 1-based indices.

With the "mirroring" scheme it is a structure error if we ever have to create dummy vnodes.  Such structure errors cause a second pass to be made, with an empty root.  This second pass will generate other structure errors, which are ignored.
@c
def createNthChild(self,n,parent,headline):

	assert(n &gt; 0)

	# Create any needed dummy children.
	dummies = n - parent.numberOfChildren() - 1
	if dummies &gt; 0:
		if 0: # CVS produces to many errors for this to be useful.
			es("dummy created")
		self.structureErrors += 1
	while dummies &gt; 0:
		dummies -= 1
		dummy = parent.insertAsLastChild(leoNodes.tnode())
		# The user should never see this headline.
		dummy.initHeadString("Dummy")

	if n &lt;= parent.numberOfChildren():
		&lt;&lt; check the headlines &gt;&gt;
	else:
		# This is using a dummy; we should already have bumped structureErrors.
		result = parent.insertAsLastChild(leoNodes.tnode())
	result.initHeadString(headline)
	
	result.setVisited() # Suppress all other errors for this node.
	return result</t>
<t tx="ekr.20031218072017.1429"># 1/24/03: A kludgy fix to the problem of headlines containing comment delims.

result = parent.nthChild(n-1)
resulthead = result.headString()

if headline.strip() != resulthead.strip():
	start = self.startSentinelComment
	end = self.endSentinelComment
	if end and len(end) &gt; 0:
		# 1/25/03: The kludgy fix.
		# Compare the headlines without the delims.
		h1 =   headline.replace(start,"").replace(end,"")
		h2 = resulthead.replace(start,"").replace(end,"")
		if h1.strip() == h2.strip():
			# 1/25/03: Another kludge: use the headline from the outline, not the derived file.
			headline = resulthead
		else:
			self.structureErrors += 1
	else:
		self.structureErrors += 1
</t>
<t tx="ekr.20031218072017.1430">def handleLinesFollowingSentinel (self,lines,sentinel,comments = true):
	
	"""convert lines following a sentinel to a single line"""
	
	m = " following" + sentinel + " sentinel"
	start = self.startSentinelComment
	end   = self.endSentinelComment
	
	if len(lines) == 1: # The expected case.
		s = lines[0]
	elif len(lines) == 5:
		self.readError("potential cvs conflict" + m)
		s = lines[1]
		es("using " + s)
	else:
		self.readError("unexpected lines" + m)
		es(len(lines), " lines" + m)
		s = "bad " + sentinel
		if comments: s = start + ' ' + s

	if comments:
		&lt;&lt; remove the comment delims from s &gt;&gt;
		
	# Undo the cweb hack: undouble @ signs if the opening comment delim ends in '@'.
	if start[-1:] == '@':
		s = s.replace('@@','@')

	return s</t>
<t tx="ekr.20031218072017.1431"># Remove the starting comment and the blank.
# 5/1/03: The starting comment now looks like a sentinel, to warn users from changing it.
comment = start + '@ '
if match(s,0,comment):
	s = s[len(comment):]
else:
	self.readError("expecting comment" + m)

# Remove the trailing comment.
if len(end) == 0:
	s = string.strip(s[:-1])
else:
	k = s.rfind(end)
	s = string.strip(s[:k]) # works even if k == -1</t>
<t tx="ekr.20031218072017.1432">def readLine (self,file):
	"""Reads one line from file using the present encoding"""
	
	s = readlineForceUnixNewline(file)
	u = toUnicode(s,self.encoding)
	return u

</t>
<t tx="ekr.20031218072017.1433"># We expect only a single line, and more may exist if cvs detects a conflict.
# We accept the first line even if it looks like a sentinel.
# 5/1/03: The starting comment now looks like a sentinel, to warn users from changing it.

def readLinesToNextSentinel (self,file):
	
	"""	read lines following multiline sentinels"""
	
	lines = []
	start = self.startSentinelComment + '@ '
	nextLine = self.readLine(file)
	while nextLine and len(nextLine) &gt; 0:
		if len(lines) == 0:
			lines.append(nextLine)
			nextLine = self.readLine(file)
		else:
			# 5/1/03: looser test then calling sentinelKind.
			s = nextLine ; i = skip_ws(s,0)
			if match(s,i,start):
				lines.append(nextLine)
				nextLine = self.readLine(file)
			else: break

	return nextLine,lines</t>
<t tx="ekr.20031218072017.1434">@ This method sets self.startSentinelComment and self.endSentinelComment based on the first @+leo sentinel line of the file.  We can not call sentinelKind here because that depends on the comment delimiters we set here.  @first lines are written "verbatim", so nothing more needs to be done!

7/8/02: Leading whitespace is now significant here before the @+leo.  This is part of the "REM hack".  We do this so that sentinelKind need not skip whitespace following self.startSentinelComment.  This is correct: we want to be as restrictive as possible about what is recognized as a sentinel.  This minimizes false matches.

14-SEP-2002 DTHEIN:  Queue up the lines before the @+leo.  These will be used to add as parameters to the @first directives, if any.  Empty lines are ignored (because empty @first directives are ignored). NOTE: the function now returns a list of the lines before @+leo.
@c
def scanHeader(self,file):

	valid = true
	tag = "@+leo" ; version_tag = "-ver="
	encoding_tag = "-encoding="
	&lt;&lt; skip any non @+leo lines &gt;&gt;
	&lt;&lt; make sure we have @+leo &gt;&gt;
	&lt;&lt; read optional version param &gt;&gt;
	&lt;&lt; read optional encoding param &gt;&gt;
	&lt;&lt; set the closing comment delim &gt;&gt;
	if not valid:
		self.readError("Bad @+leo sentinel in " + self.targetFileName)
	return firstLines</t>
<t tx="ekr.20031218072017.1435">firstLines = [] # The lines before @+leo.
s = self.readLine(file)
while len(s) &gt; 0:
	j = s.find(tag)
	if j != -1: break
	firstLines.append(s) # Queue the line
	s = self.readLine(file)
n = len(s)
valid = n &gt; 0
# s contains the tag
i = j = skip_ws(s,0)
# The opening comment delim is the initial non-whitespace.
# 7/8/02: The opening comment delim is the initial non-tag
while i &lt; n and not match(s,i,tag) and not is_nl(s,i):
	i += 1
if j &lt; i:
	self.startSentinelComment = s[j:i]
else: valid = false</t>
<t tx="ekr.20031218072017.1436">if 0:# 7/8/02: make leading whitespace significant.
	i = skip_ws(s,i)

if match(s,i,tag):
	i += len(tag)
else: valid = false</t>
<t tx="ekr.20031218072017.1437">using_gnx = match(s,i,version_tag)

if using_gnx:
	trace("reading gnx file",self.targetFileName)
	i += len(version_tag)
	# Skip to the next minus sign or end-of-line
	j = i
	while i &lt; len(s) and not is_nl(s,i) and s[i] != '-':
		i += 1
	if j &lt; i:
		version = s[j:i]
	else:
		valid = false

	
</t>
<t tx="ekr.20031218072017.1438"># 1/20/03: EKR: Read optional encoding param, e.g., -encoding=utf-8,

# Set the default encoding
self.encoding = app().config.default_derived_file_encoding

if match(s,i,encoding_tag):
	i += len(encoding_tag)
	# Skip to the next comma
	j = i
	while i &lt; len(s) and not is_nl(s,i) and s[i] not in (',','.'):
		i += 1
	if match(s,i,',') or match(s,i,'.'):
		encoding = s[j:i]
		i += 1
		# print "@+leo-encoding=",encoding
		if isValidEncoding(encoding):
			self.encoding = encoding
		else:
			es("bad encoding in derived file:",encoding)
	else:
		valid = false
</t>
<t tx="ekr.20031218072017.1439"># The closing comment delim is the trailing non-whitespace.
i = j = skip_ws(s,i)
while i &lt; n and not is_ws(s[i]) and not is_nl(s,i):
	i += 1
self.endSentinelComment = s[j:i]</t>
<t tx="ekr.20031218072017.1440">@ This method is the read code.

scanText reads lines from the file until the given ending sentinel is found, and warns if any other ending sentinel is found instead.  It calls itself recursively to handle most nested sentinels.

@c
def scanText (self,file,v,out,endSentinelKind,nextLine=None):

	a = app() ; c = self.commands ; config = a.config
	lastLines = [] # The lines after @-leo
	lineIndent = 0 ; linep = 0 # Changed only for sentinels.
	while 1:
		&lt;&lt; put the next line into s &gt;&gt;
		&lt;&lt; set kind, nextKind &gt;&gt;
		if kind != atFile.noSentinel:
			&lt;&lt; set lineIndent, linep and leading_ws &gt;&gt;
			i = self.skipSentinelStart(s,0)
		&lt;&lt; handle the line in s &gt;&gt;
	&lt;&lt; handle unexpected end of text &gt;&gt;
	assert(len(s)==0 and nextLine==None) # We get here only if readline fails.
	return lastLines # We get here only if there are problems.</t>
<t tx="ekr.20031218072017.1441">if nextLine:
	s = nextLine ; nextLine = None
else:
	s = self.readLine(file)
	if len(s) == 0: break

# trace(`s`)</t>
<t tx="ekr.20031218072017.1442">@ For non-sentinel lines we look ahead to see whether the next line is a sentinel.  If so, the newline that ends a non-sentinel line belongs to the next sentinel.
@c

assert(nextLine==None)

kind = self.sentinelKind(s)

if kind == atFile.noSentinel:
	nextLine = self.readLine(file)
	nextKind = self.sentinelKind(nextLine)
else:
	nextLine = nextKind = None

# nextLine != None only if we have a non-sentinel line.
# Therefore, nextLine == None whenever scanText returns.</t>
<t tx="ekr.20031218072017.1443">@ lineIndent is the total indentation on a sentinel line.  The first "self.indent" portion of that must be removed when recreating text.  leading_ws is the remainder of the leading whitespace.  linep points to the first "real" character of a line, the character following the "indent" whitespace.
@c

# Point linep past the first self.indent whitespace characters.
if self.raw: # 10/15/02
	linep =0
else:
	linep = self.skipIndent(s,0,self.indent)

# Set lineIndent to the total indentation on the line.
lineIndent = 0 ; i = 0
while i &lt; len(s):
	if s[i] == '\t': lineIndent += (abs(self.tab_width) - (lineIndent % abs(self.tab_width)))
	elif s[i] == ' ': lineIndent += 1
	else: break
	i += 1
# trace("lineIndent:" +`lineIndent` + ", " + `s`)

# Set leading_ws to the additional indentation on the line.
leading_ws = s[linep:i]</t>
<t tx="ekr.20031218072017.1444"># Issue the error.
name = self.sentinelName(endSentinelKind)
self.readError("Unexpected end of file. Expecting " + name + "sentinel" )
</t>
<t tx="ekr.20031218072017.1445">if kind == atFile.noSentinel:
	&lt;&lt; append non-sentinel line &gt;&gt;
&lt;&lt; handle common sentinels &gt;&gt;
&lt;&lt; handle rare sentinels &gt;&gt;
else:
	&lt;&lt; warn about unknown sentinel &gt;&gt;</t>
<t tx="ekr.20031218072017.1446"># We don't output the trailing newline if the next line is a sentinel.
if self.raw: # 10/15/02
	i = 0
else:
	i = self.skipIndent(s,0,self.indent)

assert(nextLine != None)

if nextKind == atFile.noSentinel:
	line = s[i:]
	out.append(line)
else:
	line = s[i:-1] # don't output the newline
	out.append(line)
</t>
<t tx="ekr.20031218072017.1447">elif kind in (
	atFile.endAt,  atFile.endBody, atFile.endDoc,
	atFile.endLeo, atFile.endNode, atFile.endOthers):
		&lt;&lt; handle an ending sentinel &gt;&gt;
elif kind == atFile.startBody:
	&lt;&lt; scan @+body &gt;&gt;
elif kind == atFile.startNode:
	&lt;&lt; scan @+node &gt;&gt;
elif kind == atFile.startRef:
	&lt;&lt; scan old ref &gt;&gt;
elif kind == atFile.startAt:
	&lt;&lt; scan @+at &gt;&gt;
elif kind == atFile.startDoc:
	&lt;&lt; scan @+doc &gt;&gt;
elif kind == atFile.startOthers:
	&lt;&lt; scan @+others &gt;&gt;</t>
<t tx="ekr.20031218072017.1448"># trace("end sentinel:", self.sentinelName(kind))

if kind == endSentinelKind:
	if kind == atFile.endLeo:
		# Ignore everything after @-leo.
		# Such lines were presumably written by @last.
		while 1:
			s = self.readLine(file)
			if len(s) == 0: break
			lastLines.append(s) # Capture all trailing lines, even if empty.
	elif kind == atFile.endBody:
		self.raw = false
	# nextLine != None only if we have a non-sentinel line.
	# Therefore, nextLine == None whenever scanText returns.
	assert(nextLine==None)
	return lastLines # End the call to scanText.
else:
	# Tell of the structure error.
	name = self.sentinelName(kind)
	expect = self.sentinelName(endSentinelKind)
	self.readError("Ignoring " + name + " sentinel.  Expecting " + expect)</t>
<t tx="ekr.20031218072017.1449">assert(match(s,i,"+at"))
self.scanDoc(file,s,i,out,kind)</t>
<t tx="ekr.20031218072017.1450">assert(match(s,i,"+body"))

child_out = [] ; child = v # Do not change out or v!
oldIndent = self.indent ; self.indent = lineIndent
self.scanText(file,child,child_out,atFile.endBody)

if 0:
	if child.isOrphan():
		self.readError("Replacing body text of orphan: " + child.headString())

# Set the body, removing cursed newlines.
# Note:  This code must be done here, not in the @+node logic.
body = string.join(child_out, "")
body = body.replace('\r', '')
child.t.setTnodeText(body)
self.indent = oldIndent</t>
<t tx="ekr.20031218072017.1451">assert(match(s,i,"+doc"))
self.scanDoc(file,s,i,out,kind)</t>
<t tx="ekr.20031218072017.1452">assert(match(s,i,"+others"))

# Make sure that the generated at-others is properly indented.
out.append(leading_ws + "@others")

self.scanText(file,v,out,atFile.endOthers)</t>
<t tx="ekr.20031218072017.1453">elif kind == atFile.startComment:
	&lt;&lt; scan @comment &gt;&gt;
elif kind == atFile.startDelims:
	&lt;&lt; scan @delims &gt;&gt;
elif kind == atFile.startDirective:
	&lt;&lt; scan @@ &gt;&gt;
elif kind == atFile.startLeo:
	&lt;&lt; scan @+leo &gt;&gt;
elif kind == atFile.startVerbatim:
	&lt;&lt; scan @verbatim &gt;&gt;</t>
<t tx="ekr.20031218072017.1454">assert(match(s,i,"+leo"))
self.readError("Ignoring unexpected @+leo sentinel")</t>
<t tx="ekr.20031218072017.1455">assert(match(s,i,"comment"))

# We need do nothing more to ignore the comment line!
</t>
<t tx="ekr.20031218072017.1456">assert(match(s,i,"verbatim"))

# Skip the sentinel.
s = self.readLine(file) 

# Append the next line to the text.
i = self.skipIndent(s,0,self.indent)
out.append(s[i:])
</t>
<t tx="ekr.20031218072017.1457">j = i
i = skip_line(s,i)
line = s[j:i]
self.readError("Unknown sentinel: " + line)</t>
<t tx="ekr.20031218072017.1458">@ This method is the same as putSentinel except we don't put an opening newline and leading whitespace.
@c
def putOpenLeoSentinel(self,s):
	
	if not self.sentinels:
		return # Handle @nosentinelsfile.

	self.os(self.startSentinelComment)
	self.os(s)
	encoding = self.encoding.lower()
	if encoding != "utf-8":
		self.os("-encoding=")
		self.os(encoding)
		self.os(".")
	self.os(self.endSentinelComment)
	if self.suppress_newlines: # 9/27/02
		self.newline_pending = true # Schedule a newline.
	else:
		self.onl() # End of sentinel.
</t>
<t tx="ekr.20031218072017.1459"></t>
<t tx="ekr.20031218072017.1460">def set_ivars (self,c):
	
	# N.B.: separate c.ivars are much more convenient than a dict.
	for key in self.intKeys:
		val = self.dict[key].get()
		setattr(c, key + "_flag", val)
		# g.trace(key,val)

	# Set ivars from radio buttons. 10/2/01: convert these to 1 or 0.
	find_type = self.dict["radio-find-type"].get()
	c.pattern_match_flag = g.choose(find_type == "pattern-search",1,0)
	c.script_search_flag = g.choose(find_type == "script-search",1,0)

	search_scope = self.dict["radio-search-scope"].get()
	c.suboutline_only_flag = g.choose(search_scope == "suboutline-only",1,0)
	c.node_only_flag       = g.choose(search_scope == "node-only",1,0)
	c.selection_only_flag  = g.choose(search_scope == "selection-only",1,0) # 11/9/03

	s = self.find_text.get("1.0","end - 1c") # Remove trailing newline
	s = g.toUnicode(s,g.app.tkEncoding) # 2/25/03
	c.find_text = s

	s = self.change_text.get("1.0","end - 1c") # Remove trailing newline
	s = g.toUnicode(s,g.app.tkEncoding) # 2/25/03
	c.change_text = s</t>
<t tx="ekr.20031218072017.1461"></t>
<t tx="ekr.20031218072017.1462">def exportHeadlines (self,fileName):
	
	c = self.c ; nl = self.output_newline
	p = c.currentPosition()
	if not p: return
	self.setEncoding()
	firstLevel = p.level()
	try:
		mode = g.app.config.output_newline
		mode = g.choose(mode=="platform",'w','wb')
		file = open(fileName,mode)
		for p in p.subtree_iter():
			head = p.moreHead(firstLevel,useVerticalBar=true)
			head = g.toEncodedString(head,self.encoding,reportErrors=true)
			file.write(head + nl)
		file.close()
	except:
		g.es("exception while exporting headlines")
		g.es_exception()</t>
<t tx="ekr.20031218072017.1463">def setEncoding (self):
	
	# scanDirectives checks the encoding: may return None.
	dict = g.scanDirectives(self.c)
	encoding = dict.get("encoding")
	if encoding and g.isValidEncoding(encoding):
		self.encoding = encoding
	else:
		self.encoding = g.app.tkEncoding # 2/25/03

	# print self.encoding
</t>
<t tx="ekr.20031218072017.1464">def weave (self,filename):
	
	c = self.c ; nl = self.output_newline
	p = c.currentPosition()
	if not p: return
	self.setEncoding()
	&lt;&lt; open filename to f, or return &gt;&gt;
	for p in p.subtree_iter():
		s = p.bodyString()
		s2 = string.strip(s)
		if s2 and len(s2) &gt; 0:
			f.write("-" * 60) ; f.write(nl)
			&lt;&lt; write the context of p to f &gt;&gt;
			f.write("-" * 60) ; f.write(nl)
			s = g.toEncodedString(s,self.encoding,reportErrors=true)
			f.write(string.rstrip(s) + nl)
	f.flush()
	f.close()</t>
<t tx="ekr.20031218072017.1465"># write the headlines of p, p's parent and p's grandparent.
context = [] ; p2 = p.copy()
for i in xrange(3):
	if not p2: break
	context.append(p2.headString())
	p2.moveToParent()

context.reverse()
indent = ""
for line in context:
	f.write(indent)
	indent += '\t'
	line = g.toEncodedString(line,self.encoding,reportErrors=true)
	f.write(line)
	f.write(nl)</t>
<t tx="ekr.20031218072017.1466"></t>
<t tx="ekr.20031218072017.1467"></t>
<t tx="ekr.20031218072017.1468"># Parses the encoding string, and sets self.leo_file_encoding.

def getXmlVersionTag (self):

	self.getTag(g.app.prolog_prefix_string)
	encoding = self.getDqString()
	self.getTag(g.app.prolog_postfix_string)

	if g.isValidEncoding(encoding):
		self.leo_file_encoding = encoding
		g.es("File encoding: " + encoding, color="blue")
	else:
		g.es("invalid encoding in .leo file: " + encoding, color="red")
</t>
<t tx="ekr.20031218072017.1469"></t>
<t tx="ekr.20031218072017.1470"># All output eventually comes here.
def put (self,s):
	if s and len(s) &gt; 0:
		if self.outputFile:
			s = g.toEncodedString(s,self.leo_file_encoding,reportErrors=true)
			self.outputFile.write(s)
		elif self.outputList != None: # Write to a list.
			self.outputList.append(s) # 1/8/04: avoid using string concatenation here!

def put_dquote (self):
	self.put('"')
		
def put_dquoted_bool (self,b):
	if b: self.put('"1"')
	else: self.put('"0"')
		
def put_flag (self,a,b):
	if a:
		self.put(" ") ; self.put(b) ; self.put('="1"')
		
def put_in_dquotes (self,a):
	self.put('"')
	if a: self.put(a) # will always be true if we use backquotes.
	else: self.put('0')
	self.put('"')

def put_nl (self):
	self.put("\n")
	
def put_tab (self):
	self.put("\t")
	
def put_tabs (self,n):
	while n &gt; 0:
		self.put("\t")
		n -= 1
</t>
<t tx="ekr.20031218072017.1471"></t>
<t tx="ekr.20031218072017.1472">@nocolor
https://sourceforge.net/forum/message.php?msg_id=1923127
By: dalcolmo
Open Discussion

What is the encoding to be used for messages sent to the log pane?

If I send a unicode string to the log pane with es(&lt;string&gt;) it appears als
u'&lt;string&gt;' in the log pane. Should es() accept unicode, or do I have to convert
the string?

@color

if 0: #test
	from leoGlobals import es ; es(u"this is a test")</t>
<t tx="ekr.20031218072017.1473"># All output to the log stream eventually comes here.

def put (self,s,color=None):
	if g.app.quitting: return
	if self.logCtrl:
		if type(s) == type(u""): # 3/18/03
			s = g.toEncodedString(s,g.app.tkEncoding)
		if color:
			if color not in self.colorTags:
				self.colorTags.append(color)
				self.logCtrl.tag_config(color,foreground=color)
			self.logCtrl.insert("end",s)
			self.logCtrl.tag_add(color,"end-%dc" % (len(s)+1),"end-1c")
			if "black" not in self.colorTags:
				self.colorTags.append("black")
				self.logCtrl.tag_config("black",foreground="black")
			self.logCtrl.tag_add("black","end")
		else:
			self.logCtrl.insert("end",s)
		self.logCtrl.see("end")
		self.logCtrl.update_idletasks()
	else:
		g.app.logWaiting.append((s,color),) # 2/25/03
		print "Null tkinter log"
		if type(s) == type(u""): # 3/18/03
			s = g.toEncodedString(s,"ascii")
		print s

def putnl (self):
	if g.app.quitting: return
	if self.logCtrl:
		self.logCtrl.insert("end",'\n')
		self.logCtrl.see("end")
		self.logCtrl.update_idletasks()
	else:
		g.app.logWaiting.append(('\n',"black"),) # 6/28/03
		print "Null tkinter log"
		print</t>
<t tx="ekr.20031218072017.1474">def ecnl():
	g.ecnls(1)

def ecnls(n):
	log = app.log
	if log:
		while log.newlines &lt; n:
			g.enl()

def enl():
	log = app.log
	if log:
		log.newlines += 1
		log.putnl()

def es(s,*args,**keys):
	if app.killed:
		return
	newline = keys.get("newline",true)
	color = keys.get("color",None)
	if type(s) != type("") and type(s) != type(u""): # 1/20/03
		s = repr(s)
	for arg in args:
		if type(arg) != type("") and type(arg) != type(u""): # 1/20/03
			arg = repr(arg)
		s = s + ", " + arg
	if app.batchMode:
		if app.log:
			app.log.put(s)
	else:
		log = app.log
		if log:
			log.put(s,color=color)
			for ch in s:
				if ch == '\n': log.newlines += 1
				else: log.newlines = 0
			if newline:
				g.ecnl() # only valid here
		elif newline:
			app.logWaiting.append((s+'\n',color),) # 2/16/03
			print s
		else:
			app.logWaiting.append((s,color),) # 2/16/03
			print s,</t>
<t tx="ekr.20031218072017.1475"></t>
<t tx="ekr.20031218072017.1476"></t>
<t tx="ekr.20031218072017.1477"></t>
<t tx="ekr.20031218072017.1478">def appendStringToBody (self,s,encoding="utf-8"):

	if not s: return
	
	# Make sure the following concatenation doesn't fail.
	assert(g.isUnicode(self.t.bodyString)) # 9/28/03
	s = g.toUnicode(s,encoding) # 9/28/03

	body = self.t.bodyString + s
	self.setBodyStringOrPane(body,encoding)
</t>
<t tx="ekr.20031218072017.1479">def scriptSetBodyString (self,s,encoding="utf-8"):
	
	"""Update the body string for the receiver.
	
	Should be called only from scripts: does NOT update body text."""

	self.t.bodyString = g.toUnicode(s,encoding)</t>
<t tx="ekr.20031218072017.1480">def setBodyStringOrPane (self,s,encoding="utf-8"):

	v = self ; c = v.c
	if not c or not v: return
	
	s = g.toUnicode(s,encoding)
	if v == c.currentVnode():
		# This code destoys all tags, so we must recolor.
		c.frame.body.setSelectionAreas(s,None,None)
		c.recolor()
		
	# Keep the body text in the tnode up-to-date.
	if v.t.bodyString != s:
		v.t.setTnodeText(s)
		v.t.setSelection(0,0)
		v.setDirty()
		if not c.isChanged():
			c.setChanged(true)

setBodyTextOrPane = setBodyStringOrPane # Compatibility with old scripts</t>
<t tx="ekr.20031218072017.1481">def setHeadString (self,s,encoding="utf-8"):

	self.initHeadString(s,encoding) # 6/28/03
	self.setDirty()

def initHeadString (self,s,encoding="utf-8"):

	s = g.toUnicode(s,encoding,reportErrors=true)
	self.t.headString = s
</t>
<t tx="ekr.20031218072017.1482"># Compatibility routine for scripts

def setHeadStringOrHeadline (self,s,encoding="utf-8"):

	c = self.c
	c.endEditing()
	self.setHeadString(s,encoding)
</t>
<t tx="ekr.20031218072017.1483">The fileCommands logic calls t.setTnodeText(s)</t>
<t tx="ekr.20031218072017.1484"></t>
<t tx="ekr.20031218072017.1485"># This sets the text in the tnode from the given string.

def setTnodeText (self,s,encoding="utf-8"):
	
	s = g.toUnicode(s,encoding,reportErrors=true)
	self.bodyString = s
</t>
<t tx="ekr.20031218072017.1486">def setSelection (self,start,length):

	self.selectionStart = start
	self.selectionLength = length</t>
<t tx="ekr.20031218072017.1487"></t>
<t tx="ekr.20031218072017.1488">def oblank (self):
	self.oblanks(1)

def oblanks (self,n):
	if abs(n) &gt; 0:
		self.output_file.write(' ' * abs(n))
		
def onl(self):
	# 3/18/03: Don't mess with g.body_ignored_newline.
	# self.os(self.output_newline)
	s = self.output_newline
	s = g.toEncodedString(s,self.encoding,reportErrors=true)
	self.output_file.write(s)

def os (self,s):
	s = string.replace(s,g.body_ignored_newline,g.body_newline)
	s = g.toEncodedString(s,self.encoding,reportErrors=true)
	self.output_file.write(s)

def otab (self):
	self.otabs(1)

def otabs (self,n):
	if abs(n) &gt; 0:
		self.output_file.write('\t' * abs(n))</t>
<t tx="ekr.20031218072017.1489"></t>
<t tx="ekr.20031218072017.1490">@ This routine saves enough information so a typing operation can be undone and redone.

We do nothing when called from the undo/redo logic because the Undo and Redo commands merely reset the bead pointer.
@c

def setUndoTypingParams (self,p,undo_type,oldText,newText,oldSel,newSel,oldYview=None):
	
	# g.trace(undo_type,p,"old:",oldText,"new:",newText)

	u = self ; c = u.c
	if u.redoing or u.undoing: return None
	if undo_type == None:
		return None
	if undo_type == "Can't Undo":
		u.clearUndoState()
		return None
	if oldText == newText:
		# g.trace("no change")
		return None
	# Clear all optional params.
	for ivar in optionalIvars:
		setattr(u,ivar,None)
	# Set the params.
	u.undoType = undo_type
	u.p = p
	&lt;&lt; compute leading, middle &amp; trailing  lines &gt;&gt;
	&lt;&lt; save undo text info &gt;&gt;
	u.oldSel = oldSel ; u.newSel = newSel
	# Remember the scrolling position.
	if oldYview:
		u.yview = oldYview
	else:
		u.yview = c.frame.body.getYScrollPosition()
	# Push params on undo stack, clearing all forward entries.
	u.bead += 1
	d = u.setBead(u.bead)
	u.beads[u.bead:] = [d]
	# g.trace(len(u.beads), u.bead)
	u.setUndoTypes() # Recalculate the menu labels.
	return d</t>
<t tx="ekr.20031218072017.1491">@ Incremental undo typing is similar to incremental syntax coloring.  We compute the number of leading and trailing lines that match, and save both the old and new middle lines.

NB: the number of old and new middle lines may be different.
@c

old_lines = string.split(oldText,'\n')
new_lines = string.split(newText,'\n')
new_len = len(new_lines)
old_len = len(old_lines)
min_len = min(old_len,new_len)

i = 0
while i &lt; min_len:
	if old_lines[i] != new_lines[i]:
		break
	i += 1
leading = i

if leading == new_len:
	# This happens when we remove lines from the end.
	# The new text is simply the leading lines from the old text.
	trailing = 0
else:
	i = 0
	while i &lt; min_len - leading:
		if old_lines[old_len-i-1] != new_lines[new_len-i-1]:
			break
		i += 1
	trailing = i
	
# NB: the number of old and new middle lines may be different.
if trailing == 0:
	old_middle_lines = old_lines[leading:]
	new_middle_lines = new_lines[leading:]
else:
	old_middle_lines = old_lines[leading:-trailing]
	new_middle_lines = new_lines[leading:-trailing]
	
# Remember how many trailing newlines in the old and new text.
i = len(oldText) - 1 ; old_newlines = 0
while i &gt;= 0 and oldText[i] == '\n':
	old_newlines += 1
	i -= 1

i = len(newText) - 1 ; new_newlines = 0
while i &gt;= 0 and newText[i] == '\n':
	new_newlines += 1
	i -= 1

if u.debug_print:
	g.trace()
	print "lead,trail",leading,trailing
	print "old mid,nls:",len(old_middle_lines),old_newlines,oldText
	print "new mid,nls:",len(new_middle_lines),new_newlines,newText
	#print "lead,trail:",leading,trailing
	#print "old mid:",old_middle_lines
	#print "new mid:",new_middle_lines
	print "---------------------"</t>
<t tx="ekr.20031218072017.1492">@ This is the start of the incremental undo algorithm.

We must save enough info to do _both_ of the following:

Undo: Given newText, recreate oldText.
Redo: Given oldText, recreate oldText.

The "given" texts for the undo and redo routines are simply v.bodyString().
@c

if u.new_undo:
	if u.debug:
		# Remember the complete text for comparisons...
		u.oldText = oldText
		u.newText = newText
		# Compute statistics comparing old and new ways...
		# The old doesn't often store the old text, so don't count it here.
		u.old_mem += len(newText)
		s1 = string.join(old_middle_lines,'\n')
		s2 = string.join(new_middle_lines,'\n')
		u.new_mem += len(s1) + len(s2)
	else:
		u.oldText = None
		u.newText = None
else:
	u.oldText = oldText
	u.newText = newText

self.leading = leading
self.trailing = trailing
self.oldMiddleLines = old_middle_lines
self.newMiddleLines = new_middle_lines
self.oldNewlines = old_newlines
self.newNewlines = new_newlines</t>
<t tx="ekr.20031218072017.1493"># Handle text undo and redo.
# The terminology is for undo: converts _new_ text into _old_ text.

def undoRedoText (self,p,
	leading,trailing, # Number of matching leading &amp; trailing lines.
	oldMidLines,newMidLines, # Lists of unmatched lines.
	oldNewlines,newNewlines, # Number of trailing newlines.
	tag="undo", # "undo" or "redo"
	undoType=None):

	u = self ; c = u.c
	assert(p == c.currentPosition())
	v = p.v

	&lt;&lt; Incrementally update the Tk.Text widget &gt;&gt;
	&lt;&lt; Compute the result using v's body text &gt;&gt;
	# g.trace(v)
	# g.trace("old:",v.bodyString())
	v.t.setTnodeText(result)
	# g.trace("new:",v.bodyString())
	&lt;&lt; Get textResult from the Tk.Text widget &gt;&gt;
	if textResult == result:
		if undoType in ("Cut","Paste"):
			# g.trace("non-incremental undo")
			c.frame.body.recolor(p,incremental=false)
		else:
			# g.trace("incremental undo:",leading,trailing)
			c.frame.body.recolor_range(p,leading,trailing)
	else: # 11/19/02: # Rewrite the pane and do a full recolor.
		if u.debug_print:
			&lt;&lt; print mismatch trace &gt;&gt;
		# g.trace("non-incremental undo")
		p.setBodyStringOrPane(result)</t>
<t tx="ekr.20031218072017.1494"># Only update the changed lines.
mid_text = string.join(oldMidLines,'\n')
new_mid_len = len(newMidLines)
# Maybe this could be simplified, and it is good to treat the "end" with care.
if trailing == 0:
	c.frame.body.deleteLine(leading)
	if leading &gt; 0:
		c.frame.body.insertAtEnd('\n')
	c.frame.body.insertAtEnd(mid_text)
else:
	if new_mid_len &gt; 0:
		c.frame.body.deleteLines(leading,new_mid_len)
	elif leading &gt; 0:
		c.frame.body.insertAtStartOfLine(leading,'\n')
	c.frame.body.insertAtStartOfLine(leading,mid_text)
# Try to end the Tk.Text widget with oldNewlines newlines.
# This may be off by one, and we don't care because
# we never use body text to compute undo results!
s = c.frame.body.getAllText()
newlines = 0 ; i = len(s) - 1
while i &gt;= 0 and s[i] == '\n':
	newlines += 1 ; i -= 1
while newlines &gt; oldNewlines:
	c.frame.body.deleteLastChar()
	newlines -= 1
if oldNewlines &gt; newlines:
	c.frame.body.insertAtEnd('\n'*(oldNewlines-newlines))</t>
<t tx="ekr.20031218072017.1495"># Recreate the text using the present body text.
body = v.bodyString()
body = g.toUnicode(body,"utf-8")
body_lines = body.split('\n')
s = []
if leading &gt; 0:
	s.extend(body_lines[:leading])
if len(oldMidLines) &gt; 0:
	s.extend(oldMidLines)
if trailing &gt; 0:
	s.extend(body_lines[-trailing:])
s = string.join(s,'\n')
# Remove trailing newlines in s.
while len(s) &gt; 0 and s[-1] == '\n':
	s = s[:-1]
# Add oldNewlines newlines.
if oldNewlines &gt; 0:
	s = s + '\n' * oldNewlines
result = s
if u.debug_print:
	print "body:  ",`body`
	print "result:",`result`</t>
<t tx="ekr.20031218072017.1496">textResult = c.frame.body.getAllText()

if textResult != result:
	# Remove the newline from textResult if that is the only difference.
	if len(textResult) &gt; 0 and textResult[:-1] == result:
		textResult = result</t>
<t tx="ekr.20031218072017.1497">print "undo mismatch"
print "expected:",result
print "actual  :",textResult</t>
<t tx="ekr.20031218072017.1498"></t>
<t tx="ekr.20031218072017.1499">def isUnicode(s):
	
	return s is None or type(s) == type(u' ')</t>
<t tx="ekr.20031218072017.1500">def isValidEncoding (encoding):
	
	try:
		if len(encoding) == 0:
			return false
		unicode("a",encoding)
		return true
	except:
		return false
</t>
<t tx="ekr.20031218072017.1501">def reportBadChars (s,encoding):
	
	errors = 0
	if type(s) == type(u""):
		for ch in s:
			try: ch.encode(encoding,"strict")
			except: errors += 1
		if errors:
			# traceback.print_stack()
			g.es("%d errors converting %s to %s" % 
				(errors, s.encode(encoding,"replace"),encoding))

	elif type(s) == type(""):
		for ch in s:
			try: unicode(ch,encoding,"strict")
			except: errors += 1
		if errors:
			g.es("%d errors converting %s (%s encoding) to unicode" % 
				(errors, unicode(s,encoding,"replace"),encoding)) # 10/23/03</t>
<t tx="ekr.20031218072017.1502">def toUnicode (s,encoding,reportErrors=false):
	
	if s is None:
		s = u""
	if type(s) == type(""):
		try:
			s = unicode(s,encoding,"strict")
		except:
			if reportErrors:
				g.reportBadChars(s,encoding)
			s = unicode(s,encoding,"replace")
	return s
	
def toEncodedString (s,encoding,reportErrors=false):

	if type(s) == type(u""):
		try:
			s = s.encode(encoding,"strict")
		except:
			if reportErrors:
				g.reportBadChars(s,encoding)
			s = s.encode(encoding,"replace")
	return s</t>
<t tx="ekr.20031218072017.1503">try:
	# Use Python's version of getpreferredencoding if it exists.
	# It is new in Python 2.3.
	import locale
	getpreferredencoding = locale.getpreferredencoding
except:
	# Use code copied from locale.py in Python 2.3alpha2.
	if sys.platform in ('win32', 'darwin', 'mac'):
		&lt;&lt; define getpreferredencoding using _locale &gt;&gt;
	else:
		&lt;&lt; define getpreferredencoding for *nix &gt;&gt;
</t>
<t tx="ekr.20031218072017.1504"># On Win32, this will return the ANSI code page
# On the Mac, it should return the system encoding;
# it might return "ascii" instead.

def getpreferredencoding(do_setlocale = true):
	"""Return the charset that the user is likely using."""
	try:
		import _locale
		return _locale._getdefaultlocale()[1]
	except:
		return None</t>
<t tx="ekr.20031218072017.1505"># On Unix, if CODESET is available, use that.
try:
	local.CODESET
except NameError:
	# Fall back to parsing environment variables :-(
	def getpreferredencoding(do_setlocale = true):
		"""Return the charset that the user is likely using,
		by looking at environment variables."""
		try:
			return locale.getdefaultlocale()[1]
		except:
			return None
else:
	def getpreferredencoding(do_setlocale = true):
		"""Return the charset that the user is likely using,
		according to the system configuration."""
		try:
			if do_setlocale:
				oldloc = locale.setlocale(LC_CTYPE)
				locale.setlocale(LC_CTYPE, "")
				result = locale.nl_langinfo(CODESET)
				locale.setlocale(LC_CTYPE, oldloc)
				return result
			else:
				return locale.nl_langinfo(CODESET)
		except:
			return None</t>
<t tx="ekr.20031218072017.1506">@nocolor</t>
<t tx="ekr.20031218072017.1507">The previous message focused on the details.  In this posting I'd like to focus on the big picture. This should make clear that the new code is actually quite easy to understand.

The key principles are:

1. Leo converts to unicode strings a) when reading files b) when passing strings to or from Tk.Text widgets or c) when passing file names to the system.   The typical code is simply:

s = toUnicode(s,encoding)

2. Leo converts to plain strings when writing data to files.  Like this:

s = toString(s,encoding)

What encoding is actually used depends on context.  utf-8 is the default, and may be overridden by the @encoding directive or by the settings remembered when reading .leo or derived files. Another post will discuss which encodings Leo uses in various contexts.

If we follow these principles Python will never automatically try to promote a plain Python string to a unicode string.  This is important because automatic promotions on strings containing non-ascii characters might throw an exception.

That's just about all there is to it.  The new code is just much simpler than the old.

Edward

P.S. The code above silently replaces characters invalid in an encoding by '?' characters.  This should not be a problem now that derived files can specify the encoding used to write them.  And besides, the old error messages did no good anyway.

EKR</t>
<t tx="ekr.20031218072017.1508">This posting discusses the encodings Leo will use when converting to and from unicode strings. The present CVS codes does _not_ work this way.  It will be a day or so before all these changes are in place.

The present code is in transition.  I'm not going to discuss what Leo did, or presently does.  Both are wrong.  Here is what is about to happen:

I. Encodings of .leo files

1. You will soon be able to specify the encoding to be used in all _new_ .leo files with the leo_new_file_encoding setting in leoConfig.leo.  Leo will use UTF-8 by default (in upper case for compatibility with older versions of Leo).

This is clumsy: the natural place to specify the encoding would be in the dialog put up by Leo's "New" command.  Alas, there is no good way to way to customize Tk dialogs.  So there isn't a good way to provide as much flexibility as we all would like.  In an emergency you could open the .leo file in a plain text editor and change UTF-8 to your desired encoding.  Example:

&lt;?xml version="1.0" encoding="iso-8859-1"?&gt;

Leo will silently change all characters not valid in the encoding into '?', so for goodness sakes if you change the encoding by hand please do it just after creating the file.

2. Leo will remember the encoding specified in the &lt;?xml...?&gt; line and use that encoding when reading and writing the .leo file.  In other words, once Leo creates a .leo file the only way to change the encoding in that file is the change the &lt;?xml...?&gt; line by hand.

While not perfect, this scheme will provide enough flexibility for most situations.

II. Encodings of derived files.

Here matters are much simpler.  Leo now reads derived files using the encoding given -encoding= part of the @+leo sentinel at the start of each derived file.  Leo uses utf-8 by default.  When writing a derived file Leo uses the encoding given by the @encoding directive, again using utf-8 by default.

III. Encodings used when importing and exporting files.

As in the case of .leo files, it would be best to specify encodings in the import/export dialogs, but that can not be done.  Unlike with .leo files, we can use the @encoding directive as a kludge to specify encodings.

When importing files Leo will assume that the files use the encoding specified by the applicable @encoding directive, or utf-8 if no @encoding directive is in effect.  When exporting files, Leo will write non-ascii characters using the encoding specified by the @encoding directive, or utf-8 if no such directive is in effect.

It would be possible to specify default_import_encoding and default_export_encoding settings in leoConfig.leo, but I won't do that unless there is a clamor for those settings.  It should be easy enough to use the @encoding directive...

Edward</t>
<t tx="ekr.20031218072017.1509">Just to set things straight, here is a quick (informal) Unicode summary

First there was ASCII. This is 0-127 (some control up to 31, space 32, and the rest A-Za-z0-9 and other printable special characters, e.g. !@#$%).

Then came the codepages. This is 0-255, where 0-127 is ASCII and 128-255 is some special codepage specific characters, e.g. foreign letters (like in Hebrew) and punctuated letters (like apostrophe). These are the iso-8859-x family of encoding schemes.

Then came Unicode. This is 0-65535, with most characters in the world, always double byte, i.e. every character takes 2 bytes.

Then came Unicode encodings like UTF-8, which specifically is backward compatible with ASCII. UTF-8 is a variable length encoding scheme. For ASCII it is single byte, so all ASCII only files can be treated as UTF-8 Unicode. Most of the other Unicode characters are double bytes, and some are triple bytes and even 4 bytes long.

While UTF-8 encoding can represent ANY Unicode character, codepage encoding can only represent a subset of Unicode which is included in the codepage. Therefore conversion errors may occur because a character may not have a representation. Errors (exceptions) can be avoided if unmapped characters are mapped to a replacement character (typically '?').

For an excellent background read

	http://www.python.org/workshops/1997-10/proceedings/loewis.html

For thorough description of the implementation read

	http://www.egenix.com/files/python/unicode-proposal.txt
</t>
<t tx="ekr.20031218072017.1510"></t>
<t tx="ekr.20031218072017.1511">http://effbot.org/zone/unicode-objects.htm
http://www.jorendorff.com/articles/unicode/python.html
http://www.reportlab.com/i18n/python_unicode_tutorial.html
http://www.python.org/doc/current/ref/strings.html
</t>
<t tx="ekr.20031218072017.1512">@nocolor

Fact: u"a" + "a" results in u"aa", so Python promotes strings to unicode as needed. 

Question:  could this promotion ever throw an exception?  Is so, how and when?

Answer:  I believe we must assume the "default encoding" is "ascii", so if the plain string character isn't ascii this _will_ throw an exception.  The solution is simple: all literals must be ascii literals, unless they are converted to unicode to unicode using escape sequences.  For example:

&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.getdefaultencoding()
'ascii'
&gt;&gt;&gt; print "Ë"
UnicodeError: ASCII encoding error: ordinal not in range(128)
&gt;&gt;&gt; e = "Ë"
UnicodeError: ASCII encoding error: ordinal not in range(128)
&gt;&gt;&gt; e = u"Ë"
UnicodeError: ASCII encoding error: ordinal not in range(128)
&gt;&gt;&gt; e = unicode("Ë")
UnicodeError: ASCII encoding error: ordinal not in range(128)
&gt;&gt;&gt; e = unicode("Ë","utf-8")
UnicodeError: ASCII encoding error: ordinal not in range(128)
&gt;&gt;&gt; e = decode("Ë","utf-8")
UnicodeError: ASCII encoding error: ordinal not in range(128)
&gt;&gt;&gt; e = u"\u00cb"
&gt;&gt;&gt; e
u'\xcb'
&gt;&gt;&gt; print e
Ë

- Is there any reason not to use utf-8 for LeoPy.leo?
- Should all strings in Leo be unicode strings?</t>
<t tx="ekr.20031218072017.1513">&gt; # Tk always uses utf-8 encoding.

You may get that impression, but it is slightly wrong. It is more
reliable if you pass Unicode strings to Tk, instead of UTF-8 encoded
byte strings.

For a byte string, Tk will guess the encoding. If it looks like UTF-8,
it is taken treated UTF-8. Otherwise, it is treated as the locale's
encoding. Unfortunately, if you ever manage to mix the two, you get
byte salad that you can't ever chew. By using Unicode strings to
interface with Tk only, you can avoid those problems.

&gt; print `s`,"tk"
&gt; s = s.encode("utf-8") # result is a string.
&gt; print `s`,"utf-8"
&gt; s = s.decode(xml_encoding) # result is unicode.
&gt; s = s.encode(xml_encoding) # result is a string.

Since xml_encoding is iso-8859-1, you are making a mistake here. You
have UTF-8 data, but you are decoding them as Latin-1. This will
succeed, but it will give an incorrect result. It will succeed since
iso-8859-1 is an single-byte code where every byte value is valid.
That means an arbitrary byte sequence can be interpreted as Latin-1,
but for many byte sequences, the resulting string is non-sense
(mojibake, as the Japanese say).

&gt; BTW, with out the first encode/decode pair I can take exceptions in
&gt; the last encode.

Nevertheless, this is the correct processing. If you have a Unicode
object, as originally obtained from Tk, you should encode as Latin-1
using

s = s.encode("iso-8859-1")

Now, for this specific string (u'a\u0102\xdf\xc9\n'), you will get a
Unicode error. The reason is that one character (\u0102) is not
supported in Latin-1 - this encoding supports only the first 256
Unicode characters.

So, when saving this as XML, the proper representation would be

'a&amp;#x102;\xdf\xc9\n'

i.e. you'll have to use a character reference. Python 2.2 does not
support generating such text very well - you'll have to catch the
Unicode error yourself, find the offending character, encode it as a
character reference, and encode all other characters as requested.

Alternatively, you can refuse encoding a document in a certain
encoding (such as Latin-1), and fall back to UTF-8.

PEP 293 (http://www.python.org/peps/pep-0293.html) will provide a
mechanism to generate character references more conveniently - in
Python 2.3, you can specify

  s.encode('iso-8859-1',errors='xmlcharrefreplace')

HTH,
Martin</t>
<t tx="ekr.20031218072017.1514">By: dthein ( Dave Hein ) 
 ALTERNATE SUGGESTION FOR UNICODE  
2002-12-22 21:16  
Actually, I think differently. 

UTF-8 is suitable as a file format ... but it is not suitable for internal use. This is because UTF-8 uses a variable length character encoding format, so it is not possible to use array indexing of strings that are in UTF-8 format -- this invalidates most text processing routines within Leo. 

What we want to do, instead, I think, is: 

1. use UTF-8 for the Leo files. Why? Unicode is the canonical character encoding, so it make sense that the Leo files be in that canonical encoding. And UTF-8 is the most efficient storage mechanism for XML files. 

2. Convert the Leo file from UTF-8 to a Python Unicode string as it is read in, and from Python Unicode strings to UTF-8 as it is written out. The Python Unicode strings have the same methods and behavior as Python ASCII strings. You can do indexing, tokenizing, search/replace, triming, et cetera. A Python unicode string behaves exactly like a standard python string. It is important to use this encoding internally, rather than UTF-8. 

3. We need to add a directive to indicate the encoding of the derived files (@file files and @root files). Why? Many tools (compilers, scripts engines, text editors) will not handle UTF-8 or other Unicode encodings. They will expect ASCII or CP1252 or ISO-8859-1 or some other 128-character or 256-character encoding. We must understand what the derived file encoding is, so that we can convert to and from Unicode when writing and reading the derived files. 

I suggest adding the directive @encoding (with parameter "ascii", or "utf-8", or "iso-8859-15", or whatever) as a valid directive in @file or @root nodes. 

4. Then there is the Tk widgets. As far as I can tell, if you send them a Python Unicode string, they will handle it as Unicode characters -- and if you have a valid Unicode font, they will be properly displayed. If you send the widgets a standard Python string, then they'll assume a 256-character encoding -- and, again, if you have specified a valid 256-character font, they will be properly displayed. 

The Tk widgets won't properly handle a standard string containing UTF-8 because they'll assume a 256-character encoding, not a Unicode encoding. 

So, it seems that Leo needs to know the encoding of the fonts specified for outline, body, and log. If the font encoding is Unicode, then they can pass the internal Unicode strings directly to the widgets. But if the font encoding is something else, then Leo should convert to from the internal Unicode to the encoding associated with the font. How it handles characters that cannot be converted is debatable, but I guess I'd prefer using a substitution character, like a "?". And maybe warning the user that the specified fonts cannot display all the characters. 

5. There is also the clipboard to worry about -- the encoding of the text in the clipboard must be determined or well-guessed, and converted to the internal Unicode format. 

6. Oh yeah, and if one has to write out sentinels in a derived file, and the derived file encoding doesn't include some of the characters in the heading (sentinel), then we should use some sort of Unicode escape to specify the 'unprintable' characters. 

Note: I am trying my hand at implementing these ideas. It is tedious, but not difficult. Probably a couple programmer days of effort. 
 
</t>
<t tx="ekr.20031218072017.1515">Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=1805325
By: gilshwartz

I think you have good points, and I can see pros and cons for Unicode vs. UTF-8.
Keep in mind that Leo so far, has used UTF-8 as default and with quite a success,
so I guess using UTF-8 internally is not so bad. Also it saves conversions when
we interact with TK.

However, Unicode is a good choice too, and definitely the points you raise have
a good weight. There is the added advantage that it interacts better with the
OS for non ASCII filenames.

With respect to TK (actually Tkinter), it accepts Unicode strings when getting
double byte text (Unicode), and UTF-8 when getting a single byte text (YES,
it gets UTF-8 - I have check in the docs and tested myself). When reading a
text widget one also gets UTF-8, that can easily be decoded to Unicode.

There is a lot of sense using UTF-8 for the Leo file, as all XML parsers should
be aware of the encoding. I am not sure we need a new @encoding directive, as
the encoding preference can be used to the determine the preferred encoding
for the derived files. However, I do not see any harm in using @encoding, which
will override the encoding preference.

I have looked at the code myself, but would prefer more input before committing
to such a major change in Leo.

In Thin-Thin we may have a problem if the derived files are not encoded well,
because there will not be a backup in the Leo file. In this case error handling
should possibly force the Leo file to stay "unsaved" so that a thick Leo can
be saved.

There a probably more things to think about, but a uniform internal encoding
seems very attractive.

Gil
</t>
<t tx="ekr.20031218072017.1516">Following is a list of issues and options that need to be considered for an
overall Unicode solution for Leo. I tried to present all the options I could
think of, with my recommendation, and encourage comments/additions/corrections.
Some of the arguments were initially raised by Gilles Lenfant and by Dave Hein.

...

There you are, the end at last. I hope it is useful. 

Gil</t>
<t tx="ekr.20031218072017.1517">1. Leo internal representation. 

This issue deals with how Leo should represent data internally. 

1.1. Unicode 

All strings are internally stored and managed as Unicode strings. The benefits are: 

a. Leo does not need to know or care about specific file/system encoding. I.e.
the code is checked and made reliable in a single encoding environment.
b. Compatibility with str functions, and easy data manipulation.
c. All major character sets are represented.
d. Data can be directly sent to Tk without conversion.

I think is option is the best mainly because of b, as a differentiator with respect to 1.2 below. 

1.2. UTF-8 

This is similar to the default mode in which Leo worked so far. The benefits are: 

a, c, d of Unicode above plus, 

e. We know existing code handles UTF-8 pretty well, which should minimized changes to the code. 
f. This is a good candidate for being the preferred .leo storage format (like the default today). 
g. Data is directly retrieved from Tk. 

While this option seems to have more advantages than 1.1, converting between
UTF-8 and Unicode is very simple, so f, g are less important. e is a selling
point.

1.3. Variable/Changing 

This is what Leo tried to do, i.e. adapt to some preferred encoding scheme. I
think that while friendly, it mainly made things complex and incompatible.
</t>
<t tx="ekr.20031218072017.1518">2. Encoding conversion points. 

This issue discusses identified interaction points in which possible encoding conversion occurs. 

2.1. .leo's file encoding. 

The .leo file needs to have some encoding. One may debate whether this should
be a specific encoding like UTF-8, or depend on user preferences. Assuming
either 1.1 or 1.2 is selected above, there is no real benefit not to keep the
simplicity principle and decide on some encoding for the .leo, which is
compatible with the internal representation.

Deciding on UTF-8 has the following benefits: 

a. Compatible with existing default .leo files. 
b. Easy to use with either 1.1 or 1.2. 
c. Well known and used encoding scheme. 
d. Byte order indifferent, so it can easily move and be used on different platforms. 

This is my preferred choice. 

2.2. Text read from Tk. 

Tk's Text widget returns UTF-8. If 1.1 is selected, standard simple conversion
should take place, without having the problem of unmapped chars.

In 1.1 we should keep this in mind when we retrieve Tk content to compare with internal representation. 

2.3. Text sent to Tk. 

Tk accepts either Unicode strings or UTF-8 strings. This is compatible with both 1.1 and 1.2. 

My preference is to keep 1.1 and send the Unicode strings directly to Tk. 

2.4. File names within OS/filesystem, URLs interactions. 

At least for Windows OS compatibility, experience shows that file names should
be represented as Unicode strings. I believe we have not heard of any Unix
problems since this was added to Leo.

I think file names should be kept Unicode. We should further experiment with URLs. 

2.5. File content within read, import, untangle (implicit or explicit). 

The content of a file may have any encoding (character set representation).
Deciding what this encoding is has some options. Encoding may be specified as
part of the content, as in XML or HTML. Another option is for a directive in
the file's tree to define the encoding. Yet another is to have a preference,
and the last I could think of is letting the user select the encoding at the
time of import. Which of the options is most appropriate may depend on the
exact action, e.g. untangle vs. import.

At least for files known to Leo, i.e. read and untangle, I think Leo should use
an "encoding" directive in the internal tree, and otherwise use the preference,
which would default to UTF-8. This means that it will be compatible with
current behavior, as well as maintain compatibility with ASCII files. Import
should offer encoding selection, with the default being the preferred encoding.
Import may also generate an "encoding" directive documenting the encoding
choice.

To complicate things a bit more, we could check the encoding of XML/HTML files
(or any file how's suffix is included in the "XML Like" preference), which
include encoding specification, and take it as the encoding to use, even if it
contradicts some internal directive.

2.6. File content within write, export, tangle (implicit or explicit). 

I think write and tangle should use an internal encoding directive, and as a
fallback, the preference. Export should offer encoding selection, with the
default being based on encoding directive and as fallback on preference.
</t>
<t tx="ekr.20031218072017.1519">3. Encoding process.

This issue discusses primitives and states in the encoding process.

3.1. Encoding directive.

If seems we need one. It may need some options to define error handling preference. 

3.2. Encoding errors. 

Encoding conversion errors occur when a character in the input encoding scheme
(character set) cannot be mapped to a corresponding character in the output
encoding scheme. I.e. the unmapped character does not exist in the output
encoding scheme. Typically in these situations, the unmapped character is
replaced with a standard replacement character (usually '?' or a square).

a. Conversion between Unicode and UTF-8 does not produce any errors, since
UTF-8 is a Unicode encoding scheme. Therefore, no errors are expected when
using 1.1 or 1.2 while interacting with Tk, the OS (in Unicode), and a UTF-8
encoded .leo file.

b. In 2.5 there should not be any errors as well, assuming that the CORRECT
encoding was chosen for the input file. However, in practice a user may make a
mistake, and there may be conversion errors. I.e. the input file may contain
characters that are not represented in the selected encoding scheme.

c. In 2.6 we should expect to see most encoding errors, since it may not be
possible to map all the Unicode characters managed by Leo to the selected
encoding scheme.

3.3. Error handling 

a. A message about encoding conversion error must be displayed in both 2.5 and
2.6, unless specifically directed otherwise by the user. The user may indicate
such a preference as an option of the encoding directive asking for silent
read, write, or both.

b. In case an error occurs, it may be desired to display a representative
sample of unmapped characters and their codes, but not all of them. E.g. Leo
may display the first 5-10 (user preference) unmapped characters. The reason
for this is that having a long list of unmapped characters in unmanageable
anyway, and takes a long time to display (thus delaying completion). A user may
choose to go through an iterative process, correcting a group of characters at
a time, or decide to ignore the errors.

c. A more advanced offering could be to mark nodes, or even the characters
themselves, which caused an encoding conversion error. I suspect this is a
complex programming task.

3.5 Error recovery

a. For Import/Export I believe Leo should just complete the operation, offering
the error handling decided upon in 3.4.

b. For Read/Untangle the question is whether Leo should replace existing tree
information if errors occur. Alternatives are: keep existing tree and text,
replace existing tree and text anyway, build a temporary parallel tree (so we
have existing and read trees), build temporary parallel nodes with existing
text next to offending nodes, and keep existing text in offending nodes as
comment.

The simple thing is to keep the existing tree and text (i.e. fail the
operation) and give the user a chance to redo the operation using a correct
encoding. This is my preference, because a file IS in some encoding scheme and
there need not be any errors when converting from the correct scheme to the
internal representation in 1.1 or 1.2. This will also be compatible with some
design ideas for version 4, in which existing text may be just "nothing" (thin
.leo).

c. For Write/Tangle the question is whether Leo should consider the data saved
if errors occur. If the data is not considered saved, than the .leo file should
still hold to its copy of the data, so a complete and accurate copy is still
somehow saved. This is especially true for the design ideas for version 4.


</t>
<t tx="ekr.20031218072017.1520">4. Programmer's view 

4.1. Standard conversion functions 

I have sent Edward a version of my suggested Unicode conversion functions. They are basically: 

def convertString2Unicode(s, encoding): 
... 
return u,s 

and 

def convertUnicode2String(u, encoding): 
... 
return s,u 

The functions ALWAYS convert the input using some encoding to the corresponding
output, using the replacement character if required. Thus, the first returned
value is always the best representation of the input in the requested encoding.
If a replacement was used, than the second returned value is the original input
with the replacement character replacing the original unmapped characters. This
enables a comparison of the second value to the original to determine
problematic characters (which could then be displayed to the user). In case of
most unexpected error conditions (I cannot tell what they are because they are
unexpected :-)), that should not happen, the first value is "" and the second
is None (instead of "", when all is Ok).

I think these allow safe and easy conversion. 

4.2. Conversion stream reader/writers 

As for reading and writing files is a particular encoding, one approach is to
read a string and use the functions in 4.1. Another possible approach is to use
encoding reader and writer streams. I have no opinion at this point, as I have
not tried the second approach.</t>
<t tx="ekr.20031218072017.1521"></t>
<t tx="ekr.20031218072017.1522">@nocolor

I tried to write out text containing characters like:
ä ö ü Ä Ö Ü ß ø ó
with @file-asis and get:

UnicodeError: ASCII encoding error: ordinal not in range(128)

@file (without option) works fine.</t>
<t tx="ekr.20031218072017.1523">@nocolor

I tried to write out text containing characters like:
ä ö ü Ä Ö Ü ß ø ó
with @file-asis and get:

UnicodeError: ASCII encoding error: ordinal not in range(128)

@file (without option) works fine.</t>
<t tx="ekr.20031218072017.1524">@nocolor

I tried to write out text containing characters like:
ä ö ü Ä Ö Ü ß ø ó
with @file-asis and get:

UnicodeError: ASCII encoding error: ordinal not in range(128)

@file (without option) works fine.</t>
<t tx="ekr.20031218072017.1525">@ignore

Ä á Û</t>
<t tx="ekr.20031218072017.1526">@encoding iso-8859-1</t>
<t tx="ekr.20031218072017.1527"></t>
<t tx="ekr.20031218072017.1528"></t>
<t tx="ekr.20031218072017.1529">@encoding cp1252
@others</t>
<t tx="ekr.20031218072017.1530">aÖb</t>
<t tx="ekr.20031218072017.1531"></t>
<t tx="ekr.20031218072017.1532">@nocolor

I've got a minor problem with locale settings and tkinter. My program 
has done a test to determine the current locale setting for the user:

loc = locale.getdefaultlocale()
if loc[1]:
   userEncoding = loc[1]
     try:
        ''.encode(userEncoding, 'replace')
     except:
        userEncoding = ''

if userEncoding == '':
   userEncoding='ascii'

Now, for the most part this works. However, one user of my program has 
just upgraded to Linux Mandrake 9.1 and (I think) he has set his 
language to "de". In any event, the getdefaultlocal() seems to return 
'de' which isn't a valid python encoding (??) and the above code then 
converts to his 'ascii'.

Reply from Martin v. Löwis

Using getdefaultlocale() is broken, and cannot be fixed. On Unix, use

locale.nl_langinfo(locale.CODESET)

instead; if supported, this will tell you the user's preferred encoding.

Be aware that
a) neither nl_langinfo nor CODESET may be supported by the system,
b) they may return a codeset for which a Python codec is not available,
c) you may have to invoke setlocale(locale.LC_CTYPE, "") before
    nl_langinfo returns a reasonable response (e.g. on Solaris)

Python 2.3 has a function locale.getpreferredencoding which does all
that. I recommend you copy its source code into your application, and
use that instead.

Regards,
Martin
</t>
<t tx="ekr.20031218072017.1533"></t>
<t tx="ekr.20031218072017.1534"></t>
<t tx="ekr.20031218072017.1535">@ignore</t>
<t tx="ekr.20031218072017.1536">@nocolor

I think I have an idea what could have happened to my clones. If I clone a tree
and then clone nodes within one of those both trees, one tree does not do the
cloning but inserts the node as a regular one.

Example:

node 1 (clone)
   node 11
      node 111
   
node 1 (clone)
   node 11
      node 111

Now I clone node 111 one level up

node 1 (clone)
   node 11
      node 111 (clone)
   node 111 (clone)
   
node 1 (clone)
   node 11
      node 111 (clone)
   node 111 &lt;= This one has not been cloned, as I'd expected

Is this by design?

Kind regards
Franz GEIGER
</t>
<t tx="ekr.20031218072017.1537"></t>
<t tx="ekr.20031218072017.1538"></t>
<t tx="ekr.20031218072017.1539"></t>
<t tx="ekr.20031218072017.1540">def setWrap (self,p):
	
	c = self.c
	dict = g.scanDirectives(c,p)
	if dict != None:
		# 8/30/03: Add scroll bars if we aren't wrapping.
		wrap = dict.get("wrap")
		if wrap:
			self.bodyCtrl.configure(wrap="word")
			self.bodyXBar.pack_forget()
		else:
			self.bodyCtrl.configure(wrap="none")
			self.bodyXBar.pack(side="bottom",fill="x")
</t>
<t tx="ekr.20031218072017.1541"></t>
<t tx="ekr.20031218072017.1542"></t>
<t tx="ekr.20031218072017.1543">@nocolor</t>
<t tx="ekr.20031218072017.1544">- Cut uncloned node from test.leo.
- Pasted it in LeoPy.leo.
- A second copy of the node appeared later in the file!

This was probably due to not clearing the tnodesDict ivar when use_gnx was false. The effect would be to mis-join nodes that have nothing to do with each other!
</t>
<t tx="ekr.20031218072017.1545">6/11/03:  called self.assignFileIndices in putLeoOutline when using old code.

</t>
<t tx="ekr.20031218072017.1546">Pasted nodes with the same file indices _work_ like clones but aren't marked as clones.

The problem may be the new representation for join lists in 4.0.

t.joinList is the list of all vnodes joined to it.

It may be that the only thing to do is rewrite this code for 4.0.  It certainly is confusing.</t>
<t tx="ekr.20031218072017.1547"></t>
<t tx="ekr.20031218072017.1548"></t>
<t tx="ekr.20031218072017.1549">def cutOutline(self):

	c = self
	if c.canDeleteHeadline():
		c.copyOutline()
		c.deleteOutline("Cut Node")
		c.recolor()</t>
<t tx="ekr.20031218072017.1550">def copyOutline(self):

	# Copying an outline has no undo consequences.
	c = self
	c.endEditing()
	c.fileCommands.assignFileIndices()
	s = c.fileCommands.putLeoOutline()
	g.app.gui.replaceClipboardWith(s)</t>
<t tx="ekr.20031218072017.1551"># To cut and paste between apps, just copy into an empty body first, then copy to Leo's clipboard.

def pasteOutline(self):

	c = self ; current = c.currentPosition()
	
	s = g.app.gui.getTextFromClipboard()

	if not s or not c.canPasteOutline(s):
		return # This should never happen.

	isLeo = g.match(s,0,g.app.prolog_prefix_string)

	if isLeo:
		p = c.fileCommands.getLeoOutline(s)
	else:
		p = c.importCommands.convertMoreStringToOutlineAfter(s,current)
		
	if p:
		c.endEditing()
		c.beginUpdate()
		if 1: # inside update...
			c.validateOutline()
			c.selectVnode(p)
			p.setDirty()
			c.setChanged(true)
			# paste as first child if back is expanded.
			back = p.back()
			if back and back.isExpanded():
				p.moveToNthChildOf(back,0)
			c.undoer.setUndoParams("Paste Node",p)
		c.endUpdate()
		c.recolor()
	else:
		g.es("The clipboard is not a valid " + g.choose(isLeo,"Leo","MORE") + " file")</t>
<t tx="ekr.20031218072017.1552"></t>
<t tx="ekr.20031218072017.1553"># The caller should enclose this in begin/endUpdate.

def getLeoFile (self,fileName,atFileNodesFlag=true):

	c = self.c
	c.setChanged(false) # 10/1/03: May be set when reading @file nodes.
	&lt;&lt; warn on read-only files &gt;&gt;
	self.mFileName = c.mFileName
	self.tnodesDict = {}
	ok = true
	c.loading = true # disable c.changed
	try:
		&lt;&lt; scan all the xml elements &gt;&gt;
	except BadLeoFile, message:
		&lt;&lt; raise an alert &gt;&gt;
		ok = false
	
	if ok and atFileNodesFlag:
		c.atFileCommands.readAll(c.rootVnode(),partialFlag=false)

	if not c.currentPosition():
		c.setCurrentPosition(c.rootPosition())

	c.selectVnode(c.currentPosition()) # load body pane
	c.loading = false # reenable c.changed
	c.setChanged(c.changed) # Refresh the changed marker.
	self.tnodesDict = {}
	return ok, self.ratio

</t>
<t tx="ekr.20031218072017.1554">try:
	self.read_only = false
	self.read_only = not os.access(fileName,os.W_OK)
	if self.read_only:
		g.es("read only: " + fileName,color="red")
except:
	if 0: # testing only: access may not exist on all platforms.
		g.es("exception getting file access")
		g.es_exception()</t>
<t tx="ekr.20031218072017.1555">self.getXmlVersionTag()
self.getXmlStylesheetTag()
self.getTag("&lt;leo_file&gt;")
self.getLeoHeader()
self.getGlobals()
self.getPrefs()
self.getFindPanelSettings()

# Causes window to appear.
c.frame.resizePanesToRatio(c.frame.ratio,c.frame.secondary_ratio) 
g.es("reading: " + fileName)

self.getVnodes()
self.getTnodes()
self.getCloneWindows()
self.getTag("&lt;/leo_file&gt;")</t>
<t tx="ekr.20031218072017.1556"># All other exceptions are Leo bugs.

g.es_exception()
g.alert(self.mFileName + " is not a valid Leo file: " + `message`)</t>
<t tx="ekr.20031218072017.1557"># This method finishes pasting the outline from the clipboard.
def finishPaste(self):

	c = self.c
	current = c.currentPosition()
	c.beginUpdate()
	&lt;&lt; reassign tnode indices and clear all clone links &gt;&gt;
	c.selectVnode(current)
	c.endUpdate()
	return current</t>
<t tx="ekr.20031218072017.1558">@ putLeoOutline calls assignFileIndices (when copying nodes) so that vnode can be associated with tnodes.
However, we must _reassign_ the indices here so that no "false clones" are created.
@c

current.clearVisitedInTree()

for p in current.subtree_iter():
	t = p.v.t
	if not t.isVisited():
		t.setVisited()
		self.maxTnodeIndex += 1
		t.setFileIndex(self.maxTnodeIndex)</t>
<t tx="ekr.20031218072017.1559"># This method reads a Leo outline from string s in clipboard format.
def getLeoOutline (self,s):

	self.usingClipboard = true
	self.fileBuffer = s ; self.fileIndex = 0
	self.tnodesDict = {}

	try:
		self.getXmlVersionTag() # leo.py 3.0
		self.getXmlStylesheetTag() # 10/25/02
		self.getTag("&lt;leo_file&gt;")
		self.getClipboardHeader()
		self.getVnodes()
		self.getTnodes()
		self.getTag("&lt;/leo_file&gt;")
		v = self.finishPaste()
	except BadLeoFile:
		v = None

	# Clean up.
	self.fileBuffer = None ; self.fileIndex = 0
	self.usingClipboard = false
	self.tnodesDict = {}
	return v</t>
<t tx="ekr.20031218072017.1560">def getTnodes (self):

	# A slight change: we require a tnode element.  But Leo always writes this.
	if self.getOpenTag("&lt;tnodes&gt;"):
		return
		
	while self.matchTag("&lt;t"):
		self.getTnode()

	self.getTag("&lt;/tnodes&gt;")
</t>
<t tx="ekr.20031218072017.1561">def getTnode (self):

	# we have already matched &lt;t.
	index = -1 ; attrDict = {}
	# New in version 1.7: attributes may appear in any order.
	while 1:	
		if self.matchTag("tx="):
			# New for 4.1.  Read either "Tnnn" or "gnx".
			index = self.getDqString()
		elif self.matchTag("rtf=\"1\""): pass # ignored
		elif self.matchTag("rtf=\"0\""): pass # ignored
		elif self.matchTag("&gt;"):         break
		else: # New for 4.0: allow unknown attributes.
			attr,val = self.getUnknownTag()
			attrDict[attr] = val
			
	if g.app.use_gnx:
		# index might be Tnnn, nnn, or gnx.
		id,time,n = g.app.nodeIndices.scanGnx(index,0)
		if time == None: # A pre-4.1 file index.
			if index[0] == "T":
				index = index[1:]

	index = self.canonicalTnodeIndex(index)
	t = self.tnodesDict.get(index)
	# g.trace(t)
	&lt;&lt; handle unknown attributes &gt;&gt;
	if t:
		if self.usingClipboard:
			&lt;&lt; handle read from clipboard &gt;&gt;
		else:
			&lt;&lt; handle read from file &gt;&gt;
	else:
		g.es("no tnode with index: " + `index` + ".  The text will be discarded")
	self.getTag("&lt;/t&gt;")</t>
<t tx="ekr.20031218072017.1562">s = self.getEscapedString()
t.setTnodeText(s,encoding=self.leo_file_encoding)</t>
<t tx="ekr.20031218072017.1563">if t:
	s = self.getEscapedString()
	t.setTnodeText(s,encoding=self.leo_file_encoding)
	# g.trace(index,len(s))</t>
<t tx="ekr.20031218072017.1564">keys = attrDict.keys()
if keys:
	t.unknownAttributes = attrDict
	if 0: # For debugging.
		s = "unknown attributes for tnode"
		print s ; g.es(s, color = "blue")
		for key in keys:
			s = "%s = %s" % (key,attrDict.get(key))
			print s ; g.es(s)</t>
<t tx="ekr.20031218072017.1565">def getVnodes (self):

	c = self.c

	if self.getOpenTag("&lt;vnodes&gt;"):
		return
		
	if self.usingClipboard:
		oldRoot = c.rootPosition()
		oldCurrent = c.currentPosition()

	back = parent = None # This routine _must_ work on vnodes!
	while self.matchTag("&lt;v"):
		back = self.getVnode(parent,back,skip=false)

	if self.usingClipboard:
		# Link in the pasted nodes after the current position.
		newRoot = c.rootPosition()
		c.setRootPosition(oldRoot)
		newRoot.v.linkAfter(oldCurrent.v)
		newCurrent = oldCurrent.copy()
		newCurrent.v = newRoot.v
		c.setCurrentPosition(newCurrent)
		
	if self.topVnode:
		pass ## TO DO: create topPosition by searching for topVnode.

	self.getTag("&lt;/vnodes&gt;")
</t>
<t tx="ekr.20031218072017.1566">def getVnode (self,parent,back,skip):

	c = self.c ; v = None
	setCurrent = setExpanded = setMarked = setOrphan = setTop = false
	tref = -1 ; headline = "" ; tnodeList = None ; attrDict = {} 
	# we have already matched &lt;v.
	while 1:
		if self.matchTag("a=\""):
			&lt;&lt; Handle vnode attribute bits &gt;&gt;
		elif self.matchTag("t="):
			# New for 4.1.  Read either "Tnnn" or "gnx".
			tref = self.getDqString()
		elif self.matchTag("vtag=\"V"):
			self.getIndex() ; self.getDquote() # ignored
		elif self.matchTag("tnodeList="):
			s = self.getDqString()
			tnodeList = self.getTnodeList(s) # New for 4.0
		elif self.matchTag("&gt;"):
			break
		else: # New for 4.0: allow unknown attributes.
			attr,val = self.getUnknownTag()
			attrDict[attr] = val
	# Headlines are optional.
	if self.matchTag("&lt;vh&gt;"):
		headline = self.getEscapedString() ; self.getTag("&lt;/vh&gt;")
	
	# g.trace("skip:",skip," parent:",parent," back:",back,"headline:",headline)
	
	if not skip:
		v,skip = self.createVnode(parent,back,tref,headline,attrDict)
		if tnodeList:
			v.tnodeList = tnodeList # New for 4.0
		# g.trace("%4d" % len(tnodeList),v)
		&lt;&lt; Set the remembered status bits &gt;&gt;

	# Recursively create all nested nodes.
	parent = v ; back = None
	while self.matchTag("&lt;v"):
		back = self.getVnode(parent,back,skip)
	# End this vnode.
	self.getTag("&lt;/v&gt;")
	return v</t>
<t tx="ekr.20031218072017.1567"># The a=" has already been seen.
while 1:
	if   self.matchChar('C'): pass # Not used: clone bits are recomputed later.
	elif self.matchChar('D'): pass # Not used.
	elif self.matchChar('E'): setExpanded = true
	elif self.matchChar('M'): setMarked = true
	elif self.matchChar('O'): setOrphan = true
	elif self.matchChar('T'): setTop = true
	elif self.matchChar('V'): setCurrent = true
	else: break

self.getDquote()</t>
<t tx="ekr.20031218072017.1568">if setCurrent:
	pass #### c.setCurrentPosition(p)

if setExpanded: v.initExpandedBit()
if setMarked:   v.setMarked()
if setOrphan:   v.setOrphan()
if setTop:      self.topVnode = v</t>
<t tx="ekr.20031218072017.1569"></t>
<t tx="ekr.20031218072017.1570">def assignFileIndices (self):
	
	"""Assign a file index to all tnodes"""
	
	c = self.c ; nodeIndices = g.app.nodeIndices

	nodeIndices.setTimestamp() # This call is fairly expensive.

	if g.app.use_gnx:
		&lt;&lt; assign missing gnx's, converting ints to gnx's &gt;&gt;
	else:
		&lt;&lt; reassign all tnode indices &gt;&gt;
		
	if 0: # debugging:
		for p in c.allNodes_iter():
			g.trace(p.v.t.fileIndex)

# Indices are now immutable, so there is no longer any difference between these two routines.
compactFileIndices = assignFileIndices</t>
<t tx="ekr.20031218072017.1571"># Always assign an (immutable) index, even if the tnode is empty.

for p in c.allNodes_iter():
	try: # Will fail for None or any pre 4.1 file index.
		id,time,n = p.v.t.fileIndex
	except TypeError:
		# Don't convert to string until the actual write.
		p.v.t.fileIndex = nodeIndices.getNewIndex()</t>
<t tx="ekr.20031218072017.1572"># Clear out all indices.
for p in c.allNodes_iter():
	p.v.t.fileIndex = None
	
# Recreate integer indices.
self.maxTnodeIndex = 0

for p in c.allNodes_iter():
	if p.v.t.fileIndex == None:
		self.maxTnodeIndex += 1
		p.v.t.fileIndex = self.maxTnodeIndex</t>
<t tx="ekr.20031218072017.1573"># Writes a Leo outline to s in a format suitable for pasting to the clipboard.

def putLeoOutline (self):

	self.outputList = [] ; self.outputFile = None
	self.usingClipboard = true
	self.assignFileIndices() # 6/11/03: Must do this for 3.x code.
	self.putProlog()
	self.putClipboardHeader()
	self.putVnodes()
	self.putTnodes()
	self.putPostlog()
	s = ''.join(self.outputList) # 1/8/04: convert the list to a string.
	self.outputList = []
	self.usingClipboard = false
	return s</t>
<t tx="ekr.20031218072017.1574">def copyTreeWithNewTnodes (self):
	
	"""Return a copy of self with all new tnodes"""
	
	c = self.c
	
	# Create the root node.
	old_v = self
	new_v = vnode(c,tnode())
	new_v.t.headString = old_v.t.headString
	new_v.t.bodyString = old_v.t.bodyString
	
	# Recursively create all descendents.
	old_child = old_v.firstChild() ; n = 0
	while old_child:
		new_child = old_child.copyTreeWithNewTnodes()
		new_child.linkAsNthChild (new_v, n)
		n += 1
		old_child = old_child.next()
		
	# Return the root of the new tree.
	return new_v</t>
<t tx="ekr.20031218072017.1575">def putTnodes (self):
	
	"""Puts all tnodes as required for copy or save commands"""

	c = self.c

	self.put("&lt;tnodes&gt;") ; self.put_nl()
	&lt;&lt; write only those tnodes that were referenced &gt;&gt;
	self.put("&lt;/tnodes&gt;") ; self.put_nl()</t>
<t tx="ekr.20031218072017.1576"># Populate tnodes
tnodes = {}

if self.usingClipboard: # write the current tree.
	root = c.currentPosition()
else: # write everything
	root = c.rootPosition()

for p in root.subtree_iter():
	index = p.v.t.fileIndex
	assert(index)
	tnodes[index] = p.v.t

# Put all tnodes in index order.
keys = tnodes.keys() ; keys.sort()
for index in keys:
	t = tnodes.get(index)
	assert(t)
	# Write only those tnodes whose vnodes were written.
	if t.isVisited():
		self.putTnode(t)</t>
<t tx="ekr.20031218072017.1577">def putTnode (self,t):

	self.put("&lt;t")
	self.put(" tx=")

	if g.app.use_gnx:
		gnx = g.app.nodeIndices.toString(t.fileIndex)
		self.put_in_dquotes(gnx)
	else:
		self.put_in_dquotes("T" + `t.fileIndex`)

	if hasattr(t,"unknownAttributes"):
		&lt;&lt; put unknown tnode attributes &gt;&gt;
	self.put("&gt;")

	# g.trace(t)
	if t.bodyString:
		self.putEscapedString(t.bodyString)

	self.put("&lt;/t&gt;") ; self.put_nl()</t>
<t tx="ekr.20031218072017.1578">attrDict = t.unknownAttributes
keys = attrDict.keys()
for key in keys:
	val = attrDict[key]
	attr = ' %s="%s"' % (key,self.xmlEscape(val))
	self.put(attr)
	if 0: # For debugging.
		s = "putting unknown tnode attribute"
		print s ;  g.es(s, color="red")
		print attr, g.es(attr)</t>
<t tx="ekr.20031218072017.1579">def putVnodes (self):

	"""Puts all &lt;v&gt; elements in the order in which they appear in the outline."""

	c = self.c
	c.clearAllVisited()

	self.put("&lt;vnodes&gt;") ; self.put_nl()
	if self.usingClipboard:
		self.putVnode(
			c.currentPosition(), # Write only current tree.
			c.nullPosition()) # Don't write top vnode status bit.
	else: 
		for p in c.rootPosition().self_and_siblings_iter():
			self.putVnode(
				p, # Write the next top-level node.
				c.nullPosition()) # Write the top-vnode status bit. ## NOT YET.
	self.put("&lt;/vnodes&gt;") ; self.put_nl()</t>
<t tx="ekr.20031218072017.1581">def headString (self):
	
	"""Return the headline string."""
	
	# This message should never be printed and we want to avoid crashing here!
	if not g.isUnicode(self.t.headString):
		s = "Leo internal error: not unicode:" + `self.t.headString`
		print s ; g.es(s,color="red")
		
	# Make _sure_ we return a unicode string.
	return g.toUnicode(self.t.headString,g.app.tkEncoding)

def cleanHeadString (self):
	
	s = self.headString()
	return g.toEncodedString(s,"ascii") # Replaces non-ascii characters by '?'</t>
<t tx="ekr.20031218072017.1582">def checkClones2Links (c=None,verbose=false):
	
	if not c: c = g.top()
	
	c.clearAllVisited()
	v = c.rootVnode()
	&lt;&lt; clear statistics &gt;&gt;
	while v:
		if v.isCloned() and not v.t.isVisited():
			v.t.setVisited()
			&lt;&lt; handle each item in v's join list &gt;&gt;
		v = v.threadNext()
				
	&lt;&lt; print statistics &gt;&gt;</t>
<t tx="ekr.20031218072017.1583">targetsInDerivedFiles = []
multipleTargetsInDerivedFiles = []
clonesInNoDerivedFiles = []
clonedAtFileNodes = []
</t>
<t tx="ekr.20031218072017.1584">for name, theList in (
	("targetsInDerivedFiles:", targetsInDerivedFiles),
	("multipleTargetsInDerivedFiles:", multipleTargetsInDerivedFiles),
	("clonesInNoDerivedFiles:", clonesInNoDerivedFiles),
	("clonedAtFileNodes:", clonedAtFileNodes)):

	print ; print name, len(theList)

	if verbose:
		headlines = []
		for v in theList:
			headlines.append(v.cleanHeadString())
		headlines.sort()
		for h in headlines:
			print h</t>
<t tx="ekr.20031218072017.1585">if v.isAnyAtFileNode():
	clonedAtFileNodes.append(v)
else:
	anchors = 0 ; targets = 0
	for j in v.t.joinList:
		
		# See if j should be an anchor: i.e., whether it is in any @file node.
		p = j ; isAnchor = false
		while p:
			if p.isAnyAtFileNode():
				isAnchor = true
				break
			p = p.parent()
		if isAnchor: anchors += 1
		else: targets += 1

	if anchors == 1:
		targetsInDerivedFiles.append(v)
	elif anchors &gt; 1:
		multipleTargetsInDerivedFiles.append(v)
	else:
		clonesInNoDerivedFiles.append(v)</t>
<t tx="ekr.20031218072017.1587">@ The key is the new clearAllIvars routine.  This is simple and foolproof.</t>
<t tx="ekr.20031218072017.1588">lastObjectCount = 0
lastObjectsDict = {}
debugGC = false

# gc may not exist everywhere.
try: 
	import gc
	if 0:
		if debugGC:
			gc.set_debug(
				gc.DEBUG_STATS |# prints statistics.
				# gc.DEBUG_LEAK | # Same as all below.
				gc.DEBUG_COLLECTABLE |
				gc.DEBUG_UNCOLLECTABLE |
				gc.DEBUG_INSTANCES |
				gc.DEBUG_OBJECTS |
				gc.DEBUG_SAVEALL)
except:
	traceback.print_exc()

@others
</t>
<t tx="ekr.20031218072017.1589">def clearAllIvars (o):
	
	"""Clear all ivars of o, a member of some class."""
	
	o.__dict__.clear()
</t>
<t tx="ekr.20031218072017.1590">def collectGarbage(message=None):
	
	if not debugGC: return
	
	if not message:
		message = g.callerName(n=2)
	
	try: gc.collect()
	except: pass
	
	if 1:
		g.printGc(message)
	
	if 0: # This isn't needed unless we want to look at individual objects.
	
		&lt;&lt; make a list of the new objects &gt;&gt;
		print "%25s: %d new, %d total objects" % (message,len(newObjects),len(objects))
</t>
<t tx="ekr.20031218072017.1591"># WARNING: the id trick is not proper because newly allocated objects can have the same address as old objets.

global lastObjectsDict
objects = gc.get_objects()

newObjects = [o for o in objects if not lastObjectsDict.has_key(id(o))]

lastObjectsDict = {}
for o in objects:
	lastObjectsDict[id(o)]=o</t>
<t tx="ekr.20031218072017.1592">def printGc(message=None,onlyPrintChanges=false):
	
	if not debugGC: return None
	
	if not message:
		message = g.callerName(n=2)
	
	global lastObjectCount

	try:
		n = len(gc.garbage)
		n2 = len(gc.get_objects())
		delta = n2-lastObjectCount
		if not onlyPrintChanges or delta:
			if n:
				print "garbage: %d, objects: %+6d =%7d %s" % (n,delta,n2,message)
			else:
				print "objects: %+6d =%7d %s" % (n2-lastObjectCount,n2,message)

		lastObjectCount = n2
		return delta
	except:
		traceback.print_exc()
		return None</t>
<t tx="ekr.20031218072017.1593">def printGcRefs (verbose=true):

	refs = gc.get_referrers(app.windowList[0])
	print '-' * 30

	if verbose:
		print "refs of", app.windowList[0]
		for ref in refs:
			print type(ref)
	else:
		print "%d referers" % len(refs)</t>
<t tx="ekr.20031218072017.1594">@ignore</t>
<t tx="ekr.20031218072017.1595"># leoKeywords is used by directivesKind, so it should be a module-level symbol.

# leoKeywords must be a list so that plugins may alter it.

leoKeywords = [
	"@","@c","@code","@color","@comment",
	"@delims","@doc","@encoding","@end_raw",
	"@first","@header","@ignore",
	"@language","@last","@lineending",
	"@nocolor","@noheader","@nowrap","@others",
	"@pagewidth","@path","@quiet","@raw","@root","@root-code","@root-doc",
	"@silent","@tabwidth","@terse",
	"@unit","@verbose","@wrap" ]</t>
<t tx="ekr.20031218072017.1596">@ This global function calls a hook routine.  Hooks are identified by the tag param.
Returns the value returned by the hook routine, or None if the there is an exception.

We look for a hook routine in three places:
1. g.top().hookFunction
2. app.hookFunction
3. leoPlugins.doPlugins()
We set app.hookError on all exceptions.  Scripts may reset app.hookError to try again.
@c

def doHook(tag,*args,**keywords):

	c = g.top() # c may be None during startup.
	
	if app.killed or app.hookError:
		return None
	if not app.config.use_plugins:
		if tag == "start1":
			g.es("Plugins disabled: use_plugins is 0",color="blue")
		return None
	elif c and c.hookFunction:
		try:
			return c.hookFunction(tag,keywords)
		except:
			g.es("exception in c.hookFunction for " + c.frame.getTitle())
	elif app.hookFunction:
		try:
			return app.hookFunction(tag,keywords)
		except:
			g.es("exception in app.hookFunction")
	else:
		import leoPlugins
		try:
			app.hookFunction = leoPlugins.doPlugins
			return app.hookFunction(tag,keywords)
		except:
			app.hookFunction = None
			g.es("exception in plugin")

	# Handle all exceptions.
	g.es_exception()
	app.hookError = true # Supress this function.
	app.idleTimeHook = false # Supress idle-time hook
	return None # No return value

</t>
<t tx="ekr.20031218072017.1597">"""Support new @direcives"""

from leoPlugins import *
from leoGlobals import *

if 1:
	directives = "markup", # A tuple with one string.
else:
	directives = ("markup","markup2")
	
@others

if 1: # Register the handlers...

	registerHandler("start1",addPluginDirectives)
	registerHandler("scan-directives",scanPluginDirectives)
	
	__version__ = "1.1"
	plugin_signon(__name__)</t>
<t tx="ekr.20031218072017.1598">def addPluginDirectives (tag,keywords):
	
	"""Add all new directives to globalDirectivesList"""
	
	global directives

	if 0:
		s = ""
		for d in directives:
			s += '@' + d + ' '
		es(s,color="blue")

	for d in directives:
		if d not in globalDirectiveList:
			globalDirectiveList.append(d)</t>
<t tx="ekr.20031218072017.1599">def scanPluginDirectives (tag, keywords):
	
	"""Add a tuple (d,v,s,k) to list for every directive d found"""
	
	global directives

	keys = ("c","v","s","old_dict","dict","pluginsList")
	c,v,s,old_dict,dict,pluginsList = [keywords.get(key) for key in keys]

	for d in directives:
		if not old_dict.has_key(d) and dict.has_key(d):
			# Point k at whatever follows the directive.
			k = dict[d]
			k += 1 + len(d) # Skip @directive
			k = skip_ws(s,k) # Skip whitespace
			# trace(`d`,`k`)
			pluginsList.append((d,v,s,k),)
</t>
<t tx="ekr.20031218072017.1600">@ignore
@markup wiki
</t>
<t tx="ekr.20031218072017.1601"></t>
<t tx="ekr.20031218072017.1602"># Add any newly-added user keywords.
for d in g.globalDirectiveList:
	name = '@' + d
	if name not in leoKeywords:
		leoKeywords.append(name)

# Copy the arguments.
self.p = p

# Get the body text, converted to unicode.
s = self.body.getAllText() # 10/27/03
self.sel = sel = self.body.getInsertionPoint() # 10/27/03
start,end = self.body.convertIndexToRowColumn(sel) # 10/27/03

# g.trace(self.language)
# g.trace(self.count,self.p)
# g.trace(body.tag_names())

if not self.incremental:
	self.removeAllTags()
	self.removeAllImages()

self.redoColoring = false
self.redoingColoring = false

&lt;&lt; configure tags &gt;&gt;
&lt;&lt; configure language-specific settings &gt;&gt;

self.hyperCount = 0 # Number of hypertext tags
self.count += 1
lines = string.split(s,'\n')</t>
<t tx="ekr.20031218072017.1603">config = g.app.config
assert(config)

for name in default_colors_dict.keys(): # Python 2.1 support.
	option_name,default_color = default_colors_dict[name]
	option_color = config.getColorsPref(option_name)
	color = g.choose(option_color,option_color,default_color)
	# Must use foreground, not fg.
	try:
		self.body.tag_configure(name, foreground=color)
	except: # Recover after a user error.
		self.body.tag_configure(name, foreground=default_color)

underline_undefined = config.getBoolColorsPref("underline_undefined_section_names")
use_hyperlinks      = config.getBoolColorsPref("use_hyperlinks")
self.use_hyperlinks = use_hyperlinks

# underline=var doesn't seem to work.
if 0: # use_hyperlinks: # Use the same coloring, even when hyperlinks are in effect.
	self.body.tag_configure("link",underline=1) # defined
	self.body.tag_configure("name",underline=0) # undefined
else:
	self.body.tag_configure("link",underline=0)
	if underline_undefined:
		self.body.tag_configure("name",underline=1)
	else:
		self.body.tag_configure("name",underline=0)
		
# 8/4/02: we only create tags for whitespace when showing invisibles.
if self.showInvisibles:
	for name,option_name,default_color in (
		("blank","show_invisibles_space_background_color","Gray90"),
		("tab",  "show_invisibles_tab_background_color",  "Gray80")):
		option_color = config.getColorsPref(option_name)
		color = g.choose(option_color,option_color,default_color)
		try:
			self.body.tag_configure(name,background=color)
		except: # Recover after a user error.
			self.body.tag_configure(name,background=default_color)
	
# 11/15/02: Colors for latex characters.  Should be user options...

if 1: # Alas, the selection doesn't show if a background color is specified.
	self.body.tag_configure("latexModeBackground",foreground="black")
	self.body.tag_configure("latexModeKeyword",foreground="blue")
	self.body.tag_configure("latexBackground",foreground="black")
	self.body.tag_configure("latexKeyword",foreground="blue")
else: # Looks cool, and good for debugging.
	self.body.tag_configure("latexModeBackground",foreground="black",background="seashell1")
	self.body.tag_configure("latexModeKeyword",foreground="blue",background="seashell1")
	self.body.tag_configure("latexBackground",foreground="black",background="white")
	self.body.tag_configure("latexKeyword",foreground="blue",background="white")
	
# Tags for wiki coloring.
if self.showInvisibles:
	self.body.tag_configure("elide",background="yellow")
else:
	self.body.tag_configure("elide",elide="1")
self.body.tag_configure("bold",font=self.bold_font)
self.body.tag_configure("italic",font=self.italic_font)
self.body.tag_configure("bolditalic",font=self.bolditalic_font)
for name in self.color_tags_list:
	self.body.tag_configure(name,foreground=name)</t>
<t tx="ekr.20031218072017.1604">def removeAllTags (self):
	
	# Warning: the following DOES NOT WORK: self.body.tag_delete(self.tags)
	for tag in self.tags:
		self.body.tag_delete(tag) # 10/27/03

	for tag in self.color_tags_list:
		self.body.tag_delete(tag) # 10/27/03
	
def removeTagsFromLine (self):
	
	# print "removeTagsFromLine",self.line_index
	for tag in self.tags:
		self.body.tag_remove(tag,self.index(0),self.index("end")) # 10/27/03
		
	for tag in self.color_tags_list:
		self.body.tag_remove(tag,self.index(0),self.index("end")) # 10/27/03</t>
<t tx="ekr.20031218072017.1605">def disable (self):

	print "disabling all syntax coloring"
	self.enabled=false

def __init__(self,c):

	self.c = c
	self.frame = c.frame
	self.body = c.frame.body

	self.count = 0 # how many times this has been called.
	self.use_hyperlinks = false # true: use hyperlinks and underline "live" links.
	self.enabled = true # true: syntax coloring enabled
	self.showInvisibles = false # true: show "invisible" characters.
	self.comment_string = None # Set by scanColorDirectives on @comment
	# For incremental coloring.
	self.tags = (
		"blank","comment","cwebName","docPart","keyword","leoKeyword",
		"latexModeBackground","latexModeKeyword",
		"latexBackground","latexKeyword",
		"link","name","nameBrackets","pp","string","tab",
		"elide","bold","bolditalic","italic") # new for wiki styling.
	self.color_pass = 0
	self.incremental = false
	self.redoColoring = false
	self.redoingColoring = false
	self.sel = None
	self.lines = []
	self.states = []
	self.last_flag = "unknown"
	self.last_language = "unknown"
	self.last_comment = "unknown"
	# For use of external markup routines.
	self.last_markup = "unknown" 
	self.markup_string = "unknown"
	&lt;&lt; ivars for communication between colorAllDirectives and its allies &gt;&gt;
	&lt;&lt; define dispatch dicts &gt;&gt;
	&lt;&lt; define fonts and data for wiki tags &gt;&gt;</t>
<t tx="ekr.20031218072017.1606"># Copies of arguments.
self.p = None
self.language = None
self.flag = None
self.line_index = 0

# Others.
self.single_comment_start = None
self.block_comment_start = None
self.block_comment_end = None
self.has_string = None
self.string_delims = ("'",'"')
self.has_pp_directives = None
self.keywords = None
self.lb = None
self.rb = None
self.rootMode = None # None, "code" or "doc"

config = g.app.config
self.latex_cweb_docs     = config.getBoolColorsPref("color_cweb_doc_parts_with_latex")
self.latex_cweb_comments = config.getBoolColorsPref("color_cweb_comments_with_latex")
# print "docs,comments",`self.latex_cweb_docs`,`self.latex_cweb_comments`</t>
<t tx="ekr.20031218072017.1607">self.state_dict = {
	"blockComment" : self.continueBlockComment,
	"doubleString" : self.continueDoubleString, # 1/25/03
	"nocolor"      : self.continueNocolor,
	"normal"       : self.doNormalState,
	"singleString" : self.continueSingleString,  # 1/25/03
	"string3s"     : self.continueSinglePythonString,
	"string3d"     : self.continueDoublePythonString,
	"doc"          : self.continueDocPart }
	
# Eventually all entries in these dicts will be entered dynamically
# under the control of the XML description of the present language.

if 0: # not ready yet.

	self.dict1 = { # 1-character patterns.
		'"' : self.doString,
		"'" : self.doString,
		'@' : self.doPossibleLeoKeyword,
		' ' : self.doBlank,
		'\t': self.doTab }

	self.dict2 = {} # 2-character patterns
	
	# Searching this list might be very slow!
	mutli_list = [] # Multiple character patterns.
	
	# Enter single-character patterns...
	if self.has_pp_directives:
		dict1 ["#"] = self.doPPDirective
				
	for ch in string.ascii_letters:
		dict1 [ch] = self.doPossibleKeyword
	dict1 ['_'] = self.doPossibleKeyword
	
	if self.language == "latex":
		dict1 ['\\'] = self.doPossibleKeyword
		
	if self.language == "php":
		dict1 ['&lt;'] = self.doSpecialPHPKeyword
		dict1 ['?'] = self.doSpecialPHPKeyword
	
	# Enter potentially multi-character patterns.  (or should this be just 2-character patterns)
	if self.language == "cweb":
		dict2 ["@("] = self.doPossibleSectionRefOrDef
	else:
		dict2 ["&lt;&lt;"] = self.doPossibleSectionRefOrDef
		
	if self.single_comment_start:
		n = len(self.single_comment_start)
		if n == 1:
			dict1 [self.single_comment_start] = self.doSingleCommentLine
		elif n == 2:
			dict2 [self.single_comment_start] = self.doSingleCommentLine
		else:
			mutli_list.append((self.single_comment_start,self.doSingleCommentLine),)
	
	if self.block_comment_start:
		n = len(self.block_comment_start)
		if n == 1:
			dict1 [self.block_comment_start] = self.doBlockComment
		elif n == 2:
			ddict2 [self.block_comment_start] = self.doBlockComment
		else:
			mutli_list.append((self.block_comment_start,self.doBlockComment),)</t>
<t tx="ekr.20031218072017.1608">self.bold_font = config.getFontFromParams(
	"body_text_font_family", "body_text_font_size",
	"body_text_font_slant",  "body_text_font_weight",
	config.defaultBodyFontSize)

if self.bold_font:
	self.bold_font.configure(weight="bold")

self.italic_font = config.getFontFromParams(
	"body_text_font_family", "body_text_font_size",
	"body_text_font_slant",  "body_text_font_weight",
	config.defaultBodyFontSize)
	
if self.italic_font:
	self.italic_font.configure(slant="italic",weight="normal")

self.bolditalic_font = config.getFontFromParams(
	"body_text_font_family", "body_text_font_size",
	"body_text_font_slant",  "body_text_font_weight",
	config.defaultBodyFontSize)
	
if self.bolditalic_font:
	self.bolditalic_font.configure(weight="bold",slant="italic")

self.color_tags_list = []
self.image_references = []
</t>
<t tx="ekr.20031218072017.1609">def index (self,i):
	
	return self.body.convertRowColumnToIndex(self.line_index,i)
		
def tag (self,name,i,j):

	self.body.tag_add(name,self.index(i),self.index(j))</t>
<t tx="ekr.20031218072017.1610">def skip_python_string(self,s,i):

	delim = s[i:i+3]
	if delim == "'''" or delim == '"""':
		k = s.find(delim,i+3)
		if k == -1:
			return len(s),g.choose(delim=="'''","string3s","string3d")
		else:
			return k+3, "normal"
	else:
		return self.skip_string(s,i)</t>
<t tx="ekr.20031218072017.1611"></t>
<t tx="ekr.20031218072017.1612">if self.language == "python":

	delim = s[i:i+3]
	j, state = self.skip_python_string(s,i)
	if delim == '"""':
		# Only handle wiki items in """ strings.
		if not g.doHook("color-optional-markup",
			colorer=self,v=self.p,s=s,i=i,j=j,colortag="string"):
			self.tag("string",i,j)
	else:
		self.tag("string",i,j)
	i = j

else:
	j, state = self.skip_string(s,i)
	self.tag("string",i,j)
	i = j
</t>
<t tx="ekr.20031218072017.1613">def continueDoublePythonString (self,s,i):
	j = s.find('"""',i)
	return self.continuePythonString(s,i,j,"string3d")

def continueSinglePythonString (self,s,i):
	j = s.find("'''",i)
	return self.continuePythonString(s,i,j,"string3s")

def continuePythonString (self,s,i,j,continueState):

	if j == -1: # The entire line is part of the triple-quoted string.
		j = len(s)
		if continueState == "string3d":
			if not g.doHook("color-optional-markup",
				colorer=self,v=self.p,s=s,i=i,j=j,colortag="string"):
				self.tag("string",i,j)
		else:
			self.tag("string",i,j)
		return j,continueState # skip the rest of the line.

	else: # End the string
		if continueState == "string3d":
			if not g.doHook("color-optional-markup",
				colorer=self,v=self.p,s=s,i=i,j=j,colortag="string"):
				self.tag("string",i,j+3)
			else:
				self.tag("string",i,j+3)
		else:
			self.tag("string",i,j+3)
		return j+3,"normal"</t>
<t tx="ekr.20031218072017.1614">def continueDocPart (self,s,i):
	
	state = "doc"
	if self.language == "cweb":
		&lt;&lt; handle cweb doc part &gt;&gt;
	else:
		&lt;&lt; handle noweb doc part &gt;&gt;
	return i,state</t>
<t tx="ekr.20031218072017.1615">word = self.getCwebWord(s,i)
if word and len(word) &gt; 0:
	j = i + len(word)
	if word in ("@&lt;","@(","@c","@d","@f","@p"):
		state = "normal" # end the doc part and rescan
	else:
		# The control code does not end the doc part.
		self.tag("keyword",i,j)
		i = j
		if word in ("@^","@.","@:","@="): # Ended by "@&gt;"
			j = s.find("@&gt;",i)
			if j &gt; -1:
				self.tag("cwebName",i,j)
				self.tag("nameBrackets",j,j+2)
				i = j + 2
elif g.match(s,i,self.lb):
	j = self.doNowebSecRef(s,i)
	if j == i + 2: # not a section ref.
		self.tag("docPart",i,j)
	i = j
elif self.latex_cweb_docs:
	# Everything up to the next "@" is latex colored.
	j = s.find("@",i+1)
	if j == -1: j = len(s)
	self.doLatexLine(s,i,j)
	i = j
else:
	# Everthing up to the next "@" is in the doc part.
	j = s.find("@",i+1)
	if j == -1: j = len(s)
	self.tag("docPart",i,j)
	i = j</t>
<t tx="ekr.20031218072017.1616">if i == 0 and g.match(s,i,"&lt;&lt;"):
	# Possible section definition line.
	return i,"normal" # rescan the line.

if i == 0 and s[i] == '@':
	j = self.skip_id(s,i+1,chars='-')
	word = s[i:j]
	word = word.lower()
else:
	word = ""

if word in ["@c","@code","@unit","@root","@root-code","@root-doc","@color","@nocolor"]:
	# End of the doc part.
	self.body.tag_remove("docPart",self.index(i),self.index(j)) # 10/27/03
	self.tag("leoKeyword",i,j)
	i = j ; state = "normal"
else:
	# The entire line is in the doc part.
	j = len(s)
	if not g.doHook("color-optional-markup",
		colorer=self,v=self.p,s=s,i=i,j=j,colortag="docPart"):
		self.tag("docPart",i,j)
	i = j # skip the rest of the line.
</t>
<t tx="ekr.20031218072017.1617"># print "single-line comment i,s:",i,s

if self.language == "cweb" and self.latex_cweb_comments:
	j = i + len(self.single_comment_start)
	self.tag("comment",i,j)
	self.doLatexLine(s,j,len(s))
	i = len(s)
else:
	j = len(s)
	if not g.doHook("color-optional-markup",
		colorer=self,v=self.p,s=s,i=i,j=j,colortag="comment"):
		self.tag("comment",i,j)
	i = j</t>
<t tx="ekr.20031218072017.1618">def continueBlockComment (self,s,i):
	
	j = s.find(self.block_comment_end,i)

	if j == -1:
		j = len(s) # The entire line is part of the block comment.
		if self.language=="cweb":
			self.doLatexLine(s,i,j)
		else:
			if not g.doHook("color-optional-markup",
				colorer=self,v=self.p,s=s,i=i,j=j,colortag="comment"):
				self.tag("comment",i,j)
		return j,"blockComment" # skip the rest of the line.

	else:
		# End the block comment.
		k = len(self.block_comment_end)
		if self.language=="cweb" and self.latex_cweb_comments:
			self.doLatexLine(s,i,j)
			self.tag("comment",j,j+k)
		else:
			if not g.doHook("color-optional-markup",
				colorer=self,v=self.p,s=s,i=i,j=j+k,colortag="comment"):
				self.tag("comment",i,j+k)
		i = j + k
		return i,"normal"</t>
<t tx="ekr.20031218072017.1619">k = len(self.block_comment_start)

if not g.doHook("color-optional-markup",
	colorer=self,v=self.p,s=s,i=i,j=i+k,colortag="comment"):
	self.tag("comment",i,i+k)

i += k ; state = "blockComment"</t>
<t tx="ekr.20031218072017.1620"># Handles non-cweb keyword.

def doAtKeyword (self,s,i):

	j = self.skip_id(s,i+1,chars="-") # to handle @root-code, @root-doc
	word = s[i:j]
	word = word.lower()
	if i != 0 and word != "@others":
		word = "" # can't be a Leo keyword, even if it looks like it.
	
	# 7/8/02: don't color doc parts in plain text.
	if self.language != "plain" and (word == "@" or word == "@doc"):
		# at-space is a Leo keyword.
		self.tag("leoKeyword",i,j)
		k = len(s) # Everything on the line is in the doc part.
		if not g.doHook("color-optional-markup",
			colorer=self,v=self.p,s=s,i=j,j=k,colortag="docPart"):
			self.tag("docPart",j,k)
		return k,"doc"
	elif word == "@nocolor":
		# Nothing on the line is colored.
		self.tag("leoKeyword",i,j)
		return j,"nocolor"
	elif word in leoKeywords:
		self.tag("leoKeyword",i,j)
		return j,"normal"
	else:
		return j,"normal"</t>
<t tx="ekr.20031218072017.1621">@language python

""" continued
string"""

@ ''ab'' __xxx__ ''wx'' __xyz__
@c

# /* ''ab'' __xxx__ ''wx'' __xyz__ */

# Test

""" ''' """ ''' """'''  # Leo handles the common cases correctly.

''' ''ab'' __xxx__ ''wx'' __xyz__ ''' # No wiki markup in ''' strings.

""" ''ab'' __xxx__ ''wx'' __xyz__ """

# ''ab'' __xxx__ ''wx'' __xyz__

""" ''y'' """

""" text~~#ee00ff:some text~~more text"""

""" {picture file=../Icons/Leoapp.GIF}this """ # There are probdlems \with correct indexing following a graphic.

and if

from leoGlobals import * ; print `app().loadDir`</t>
<t tx="ekr.20031218072017.1622"></t>
<t tx="ekr.20031218072017.1623">def new (self):

	c,frame = g.app.gui.newLeoCommanderAndFrame(fileName=None)
	
	# 5/16/03: Needed for hooks.
	g.doHook("new",old_c=self,new_c=c)
	
	# Use the config params to set the size and location of the window.
	frame.setInitialWindowGeometry()
	frame.deiconify()
	frame.lift()
	frame.resizePanesToRatio(frame.ratio,frame.secondary_ratio) # Resize the _new_ frame.
	
	c.beginUpdate()
	if 1: # within update
		t = leoNodes.tnode()
		v = leoNodes.vnode(c,t)
		p = leoNodes.position(v,[])
		v.initHeadString("NewHeadline")
		v.moveToRoot()
		c.editPosition(p)
	c.endUpdate()

	frame.body.setFocus()</t>
<t tx="ekr.20031218072017.1624">def createFrame (fileName):
	
	"""Create a LeoFrame during Leo's startup process."""
	
	import leoGlobals as g
	from leoGlobals import true,false
	
	# g.trace(g.app.tkEncoding,fileName)
	
	# Try to create a frame for the file.
	if fileName:
		fileName = g.os_path_join(os.getcwd(),fileName)
		fileName = g.os_path_normpath(fileName)
		if g.os_path_exists(fileName):
			ok, frame = g.openWithFileName(fileName,None)
			if ok:
				return frame.c,frame
	
	# Create a new frame &amp; indicate it is the startup window.
	c,frame = g.app.gui.newLeoCommanderAndFrame(fileName=None)
	frame.setInitialWindowGeometry()
	frame.startupWindow = true
	
	# Report the failure to open the file.
	if fileName:
		g.es("File not found: " + fileName)

	return c,frame
</t>
<t tx="ekr.20031218072017.1625">def setInitialWindowGeometry(self):
	
	"""Set the position and size of the frame to config params."""
	
	config = g.app.config

	h = config.getIntWindowPref("initial_window_height")
	w = config.getIntWindowPref("initial_window_width")
	x = config.getIntWindowPref("initial_window_left")
	y = config.getIntWindowPref("initial_window_top")
	
	if h and w and x and y:
		self.setTopGeometry(w,h,x,y)</t>
<t tx="ekr.20031218072017.1626">@ To do:
	
For users:
	
- Make Back and Forward icons smaller.
</t>
<t tx="ekr.20031218072017.1627">def goPrevVisitedNode(self):
	
	c = self

	while c.beadPointer &gt; 0:
		c.beadPointer -= 1
		v = c.beadList[c.beadPointer]
		if v.exists(c):
			c.beginUpdate()
			c.frame.tree.expandAllAncestors(v)
			c.selectVnode(v,updateBeadList=false)
			c.endUpdate()
			c.frame.tree.idle_scrollTo(v)
			return
</t>
<t tx="ekr.20031218072017.1628">def goNextVisitedNode(self):
	
	c = self

	while c.beadPointer + 1 &lt; len(c.beadList):
		c.beadPointer += 1
		v = c.beadList[c.beadPointer]
		if v.exists(c):
			c.beginUpdate()
			c.frame.tree.expandAllAncestors(v)
			c.selectVnode(v,updateBeadList=false)
			c.endUpdate()
			c.frame.tree.idle_scrollTo(v)
			return</t>
<t tx="ekr.20031218072017.1629">def fillbox(self,event=None):

	"""Update a Recent Sections listbox dialog and update vnodeList &amp; tnodeList ivars"""

	# Only fill the box if the dialog is visible.
	# This is an important protection against bad performance.

	if self.top.state() == "normal":
		&lt;&lt; reconstruct the contents of self.box &gt;&gt;
		self.synchButtons()</t>
<t tx="ekr.20031218072017.1630">c = self.c

self.box.delete(0,"end")
self.vnodeList = []
self.tnodeList = []

# Make sure the node still exists.
# Insert only the last cloned node.
i = 0
for v in c.visitedList:
	if v.exists(self.c) and v.t not in self.tnodeList:
		self.box.insert(i,v.headString().strip())
		self.tnodeList.append(v.t)
		self.vnodeList.append(v)
		i += 1
</t>
<t tx="ekr.20031218072017.1631"></t>
<t tx="ekr.20031218072017.1632">@nocolor

I have no idea how the old code worked at all.  The only parameter to any callback will be an event, so event must be the first parameter to the callback.</t>
<t tx="ekr.20031218072017.1633">@ The fix was in &lt;&lt; convert tab to blanks &gt;&gt; in idle_body_key

The old code only converted tabs when everything before the insertion point was whitespace!</t>
<t tx="ekr.20031218072017.1634"></t>
<t tx="ekr.20031218072017.1635">@nocolor

Replaced getJoinList() by joinList
Replaced setJoinList() by joinList =
Defined joinHead in tnode class, not vnode class.
Created joinList directly in leoFileCommands
	- Eliminated joinHead ivar.
Rewrote joinNodeTo.
Removed unjoinNode and simplified unjoinTree.
Looked at calls to swap_links()
Tested all commands affected by joinList: clone, moves, undo.
	*** Found an old bug in undoReplace.
Did diffs on all changed files: (checked all usages of 
	(done) leoCommands
	(done) leoFileCommands
	(done) leoNodes
	(done) leoTree
	(done) leoUndo</t>
<t tx="ekr.20031218072017.1636"></t>
<t tx="ekr.20031218072017.1637">def setJoinList (self, v):

	assert(not self.joinList)
	self.joinList = v</t>
<t tx="ekr.20031218072017.1638">def getJoinList (self):

	return self.joinList</t>
<t tx="ekr.20031218072017.1639">def setJoinHead (self, v):

	self.joinHead = v</t>
<t tx="ekr.20031218072017.1640"># Returns true if the nodes v1 and v2 are on the same join list.

def isOnJoinListOf (self, v2):
	
	v1 = self
	return v1.t == v2.t and v2 in v1.t.joinList</t>
<t tx="ekr.20031218072017.1641">def unjoinNode (self):
	
	"""Unlinks the receiver from its own join list"""
	
	v = self ; j = v.t.joinList
	if v in j:
		j.remove(v)</t>
<t tx="ekr.20031218072017.1642">		if 0: # 9/26/02: No longer used: derived files contain no clone indices.
			root.clearAllVisitedInTree()
			&lt;&lt; Handle clone bits &gt;&gt;
			&lt;&lt; Join cloned trees &gt;&gt;</t>
<t tx="ekr.20031218072017.1643">@ This function joins all nodes in the two trees which should have the same topology. This code makes no other assumptions about the two trees; some or all of the nodes may already have been joined.

There are several differences between this method and the similar vnode:joinTreeTo method.  First, we can not assert that the two trees have the same topology because the derived file could have been edited outside of Leo.  Second, this method also merges the tnodes of all joined nodes.
@c
def joinTrees(self,tree1,tree2):

	assert(tree1 and tree2)
	# Join the roots using the vnode class.
	tree1.joinNodeTo(tree2)
	# 5/2/03: Now that tnodes contain join lists, this must be done _after_ joining the nodes.
	# Use a common tnode for both nodes.
	if tree1.t != tree2.t:
		tree1.setT(tree2.t)
	# Recursively join all subtrees.
	child1 = tree1.firstChild()
	child2 = tree2.firstChild()
	while child1 and child2:
		self.joinTrees(child1, child2)
		child1 = child1.next()
		child2 = child2.next()
	if child1 or child2:
		self.readError("cloned nodes have different topologies")</t>
<t tx="ekr.20031218072017.1644">h = {}
v = root
while v and v != next:
	cloneIndex = v.t.cloneIndex
	# new Leo2: we skip the root node: @file nodes can not be cloned.
	if cloneIndex &gt; 0 and v != root:
		if h.has_key(cloneIndex):
			t = h[cloneIndex]
			# v is a clone: share the previous tnode.
			v.setT(t)
			t.setVisited() # We will mark these clones later.
		else: h[cloneIndex] = v.t
	v = v.threadNext()

# Set clone marks for all visited tnodes.
v = root
while v and v != next:
	if v.t.isVisited():
		if v == root:
			pass
		elif v.shouldBeClone():
			v.initClonedBit(true)
		else:
			# Not a serious error.
			es("clone links cleared for: " + v.headString())
			v.unjoinTree();
			t.setCloneIndex(0) # t is no longer cloned.
	v = v.threadNext()</t>
<t tx="ekr.20031218072017.1645">@ In most cases, this code is not needed, because the outline already has been read and nodes joined.  However, there could be problems on read errors, so we also join nodes here.
@c

h = {}
v = root
while v and v != next:
	cloneIndex = v.t.cloneIndex
	# new Leo2: we skip the root node: @file nodes can not be cloned.
	if cloneIndex &gt; 0 and v != root:
		if h.has_key(cloneIndex):
			clone = h[cloneIndex]
			if v.headString() == clone.headString():
				self.joinTrees(clone,v)
			else:
				# An extremely serious error.  Data may be lost.
				self.readError(
					"Outline corrupted: " +
					"different nodes have same clone index!\n\t" +
					v.headString() + "\n\t" + clone.headString())
		# Enter v so we can join the next clone to it.
		# The next call to lookup will find this v, not the previous.
		h[cloneIndex] = v
	v = v.threadNext()</t>
<t tx="ekr.20031218072017.1646"></t>
<t tx="ekr.20031218072017.1647">def joinNodeTo (self, v2):
	
	"""Add self or v2 to their common join list"""

	v1 = self
	assert(v1.t==v2.t)
	j = v1.t.joinList
	
	if v1 not in j:
		j.append(v1)
		
	if v2 not in j:
		j.append(v2)</t>
<t tx="ekr.20031218072017.1648">def unjoinTree (self):

	"""Remove all v and all its descendents v from v.t.joinList."""

	v = self
	after = self.nodeAfterTree()
	while v and v != after:
		if v in v.t.joinList:
			v.t.joinList.remove(v)
		v = v.threadNext()</t>
<t tx="ekr.20031218072017.1649"></t>
<t tx="ekr.20031218072017.1650"></t>
<t tx="ekr.20031218072017.1651">B</t>
<t tx="ekr.20031218072017.1652"></t>
<t tx="ekr.20031218072017.1653"></t>
<t tx="ekr.20031218072017.1654">test</t>
<t tx="ekr.20031218072017.1655">@nocolor

- (done) Created runMainLoop function in leo.py so the call to mainloop() is in a separate function.

- (done) Added flush method to redirect class in leoGlobals.py

@color</t>
<t tx="ekr.20031218072017.1656"># To redirect stdout a class only needs to implement a write(self,s) method.
def __init__ (self):
	self.old = None
	
def isRedirected (self):
	return self.old != None
	
def flush(self, *args):
	return # 6/14/03:  For LeoN: just for compatibility.

def redirect (self,stdout=1):
	import sys
	if not self.old:
		if stdout:
			self.old,sys.stdout = sys.stdout,self
		else:
			self.old,sys.stderr = sys.stderr,self

def undirect (self,stdout=1):
	import sys
	if self.old:
		if stdout:
			sys.stdout,self.old = self.old,None
		else:
			sys.stderr,self.old = self.old,None

def write(self,s):
	# g.trace(s)
	if self.old:
		if app.log: app.log.put(s)
		else: self.old.write(s)
	else: print s # Typically will not happen.
</t>
<t tx="ekr.20031218072017.1657">def runMainLoop(root):
	
	"""A function that runs root.mainloop()
	
	LeoN may replace this fuction entirely."""
	
	root.mainloop()
</t>
<t tx="ekr.20031218072017.1658">from leoGlobals import *
import os,leoNodes
from xml.sax import saxutils, make_parser
from xml.sax.xmlreader import InputSource

path = os.path.join(app().loadDir,"../","test","test2.leo")
path = os.path.join(app().loadDir,"LeoPy.leo")
path = os.path.normpath(path)

verbose = false
tnodes = vnodes = 0

def clean(s): return toEncodedString(s,"ascii")

class trace_parse(saxutils.XMLGenerator):
	@others
	
try:
	f = None
	try:
		print path
		if 1:
			source = f = open(path)
		else: # not needed, and it works.
			source = InputSource(path)
			source.setEncoding(app().tkEncoding) # Not needed.
		parser = make_parser()
		h = trace_parse()
		parser.setContentHandler(h)
		parser.parse(source)
		print "vnodes,tnodes:",`vnodes`,`tnodes`
	except: es_exception()
finally:
	if f: f.close()</t>
<t tx="ekr.20031218072017.1659">def characters(self,content):

	content = content.replace('\r','')

	if verbose and content.strip():
		print clean(content)
</t>
<t tx="ekr.20031218072017.1660">def endDocument(self):
	trace()


</t>
<t tx="ekr.20031218072017.1661">def endElement(self,name):
	if verbose: print '&lt;/' + clean(name).strip() + '&gt;'
</t>
<t tx="ekr.20031218072017.1662">def ignorableWhitespace(self):
	trace()

def processingInstruction (self,target,data):
	trace()

def skippedEntity(self,name):
	trace(name)

def startElementNS(self,name,qname,attrs):
	trace(name)

def endElementNS(self,name,qname):
	trace(name)
</t>
<t tx="ekr.20031218072017.1663">def startDocument(self):

	if verbose:
		print ; print ; print '*' * 30 + " dump " + '*' * 30 ; print
	trace()
</t>
<t tx="ekr.20031218072017.1664">def startElement(self,name,atts):
	global vnodes,tnodes
	if verbose: print '&lt;' + clean(name).strip() + '&gt;',
	if name == "v":
		vnodes += 1
		v = leoNodes.vnode(top(),leoNodes.tnode())
	elif name == "t":
		tnodes += 1
		t = leoNodes.tnode()</t>
<t tx="ekr.20031218072017.1665"></t>
<t tx="ekr.20031218072017.1666">def writeDirtyAtFileNodes (self): # fileCommands

	"""The Write Dirty @file Nodes command"""
	
	c = self.c

	changedFiles = c.atFileCommands.writeAll(writeDirtyAtFileNodesFlag=true)
	if changedFiles:
		g.es("auto-saving outline",color="blue")
		c.save() # Must be done to set or clear tnodeList.</t>
<t tx="ekr.20031218072017.1667"></t>
<t tx="ekr.20031218072017.1668">@nocolor

What I did:

- Added Apply button.
- Frame class now permanently sets setgrid=0 to disable the resizing of the body pane.

To do:
	
- Make the font panel a standard dialog.
- Use a Tk.Text widget instead of a ListBox widget so we can display fonts in differently.

@color</t>
<t tx="ekr.20031218072017.1669"></t>
<t tx="ekr.20031218072017.1670">@nocolor

Developers forum
https://sourceforge.net/forum/message.php?msg_id=2081895
By: rodrigo_b

Plugins must be able to extend the Popup menu (secondary click over a node).

Should split leoTree.tree.OnPopup into tree.createPopupMenu and tree.showPopupMenu:

@color

def OnHeadlineRightClick(self,event=None):
	try:
		v = self ; c = v.commands
		if not doHook("headrclick1",c=c,v=v,event=event):
			self.commands.tree.OnActivate(self)
			self.commands.tree.createPopupMenu(self,event)
			doHook("headrclick2",c=c,v=v,event=event)
			self.commands.tree.showPopupMenu(self,event)
	except:
		es_event_exception("headrclick")

@nocolor

By this edit, the headrclick2 hook will be able to add elements to the recently
Popup menu created.</t>
<t tx="ekr.20031218072017.1671">@nocolor
Developers
http://sourceforge.net/forum/message.php?msg_id=2085578
By: bwmulder

I looked some more at the code. The following remarks are based on eye inspection
only, not testing.

Here is what I found:

1.
def createOpenWithTempFile (self, v, ext):

There is no point in storing the closed file in the dict. As far as I can tell
this is never used anywhere. What good could it be?

2. You are inconsistent with calling os.path.getmtime. In 

&lt;&lt; create or recreate temp file as needed &gt;&gt; 

and frame.createOpenWithTempFile, 

you have a try: catch: block for this function. In the plugin open_with.py you
write:

time = os.path.getmtime(path)
if time and time != dict.get("time"):

According to the documentation, getmtime either succeeds, or raises an exception.
If you get an exception, then the file is presumably no good anyway, and the
whole update mechanism would not work. In this case I would just delete the
file, with a message to the user.

3. Your original question: 

I think the code is almost OK. If the headstring or the language of the node
changes, then the second 'openwith'  call to openWithTempFilePath will return
a different path.

&lt;&lt;set dict and path if a temp file already refers to v.t &gt;&gt; will leave path
== None,

and in 
&lt;&lt; create or reopen temp file, testing for conflicting changes &gt;&gt; 

path = self.createOpenWithTempFile(v,ext), createOpenWithTempFile will correctly
delete the old entry from openWithFiles, but the old file will not be deleted.

Maybe you should use:

&lt;&lt; remove previous entry from a.openWithFiles if it exists &gt;&gt;:

for d in a.openWithFiles[:]: # 6/30/03
.v = d.get("v")
..if v.t == v2.t:
...if d.get(path) == path:
....print "removing previous entry in a.openWithFiles for",v
....a.openWithFiles.remove(d)
...else:
....a.destroyOpenWithFileWithDict(d)

4. I guess mayhem will come to those who update a file whose node has been
deleted?

</t>
<t tx="ekr.20031218072017.1672">@ 

Solution:  The problem was in tree.OnDeactivate.  The calls to tree.endEditLabel() and tree. self.dimEditLabel() were interfering with the double-click logic.

What I did:

- Removed unused frame.active and frame.activeFrame ivars.

- Added the following routines to leoGlobals.py.
	- get_focus.
	- openWithFileName (allows startup code to create a frame without an existing frame.)

- Changed startup code so that
	- Only one window is ever created on startup.
	- Windows are not witdrawn when they are created.

- Changed set_focus so it only call widget.focus_set if there has been a real change in focus.
	- This has no effect.</t>
<t tx="ekr.20031218072017.1673">@nocolor
 cuttin' and pastin'   
2003-07-01 21:02
Developers

Select some text. Copy. Now select some other text. Paste. Note how the copied text gets pasted in AFTER the selected text. Is this the correct behavior? Most apps, when I do this operation it REPLACES the selected text with the copied text, places my curser just to the right of the inserted text and leaves nothing selected after the operation. 

This isn't new behavior, its how it worked in 3.11 (I just checked). Its just a bit strange. 

Sorry, more small stuff. Overall the beta is a big improvement. 

- ordinarius  

abc xyz</t>
<t tx="ekr.20031218072017.1674">@nocolor
Open Discussion
 RE: UPPERCASE bug   
2003-07-05 19:24  
Still unable to import source code files with an upper case extension. Using 3.12 beta 1 on XP. 

Also, can't import .cxx files. Looks like line 129 in 
leoImport.py should be changed to: 

elif ext == ".c" or ext == ".cpp" or ext == ".cxx":

@color</t>
<t tx="ekr.20031218072017.1675"></t>
<t tx="ekr.20031218072017.1676"></t>
<t tx="ekr.20031218072017.1677">File "src\leoColor.py", line 1403, in colorizeAnyLanguage
    new_states.append(old_states[j])
	
IndexError: list index out of range

The fix might be the following in  &lt; &lt; incrementally color the text &gt; &gt;

# 6/30/03: make a copies of everything
old_lines = self.lines[:]
old_states = self.states[:]
new_lines = lines[:]
	
I suspect that the old_states was being changed improperly as the result of changes to new_states.  We shall see.
</t>
<t tx="ekr.20031218072017.1678">@nocolor

What I did:
	
- removed event param from OnOpenWith.
- Created an Open With Submenu in &lt;&lt; create the top-level file entries &gt;&gt;
	This has the effect of not allowing a shortcut for this menu.
- Use app().hasOpenWithMenu to enable or disable Open With menu.
- Removed Shift-Control-O setting in leoConfig.leo/.txt.

@color</t>
<t tx="ekr.20031218072017.1679"></t>
<t tx="ekr.20031218072017.1680"># The following was improperly indented in @nosentinel files.  The expansion of &lt;&lt; class shape declarations &gt;&gt; was indented twice.

class shape(object):
	&lt;&lt; class shape declarations &gt;&gt;
	# after decls
	
What I did:
	
1. Added this code to &lt;&lt; put possible section reference &gt;&gt;:

	if not self.sentinels:
		while len(s2) and s2[-1] in (' ','\t'):
			s2 = s2[:-1]
			
2. Created self.putBuffered to change tabs to blanks if the tabwidth is negative.
			
3. Changed most calls to self.os to self.putBuffered.</t>
<t tx="ekr.20031218072017.1681">@ 

Symptom: Sometimes the "reading" messages would not appear when reading an outline.

Cause: Several event handlers are called at unpredictable times during the load process.  These may try to reset the log.

Solution:

- create app.setLog, app.lockLog and app.unlocklog methods.
- call app.lockLog before opening an outline.</t>
<t tx="ekr.20031218072017.1682">@ Event handlers must not assume anything about when they are called.

What I did:

- idle_redraw does nothing when dragging.
- v.OnEndDrag now always calls tree.OnEndDrag.
- tree.OnEndDrag now checks to see if tree.drag_v is still valid.
- Converted id from tuple to int in tree.OnIconClick.
- Always clear redrawScheduled ivar in tree.idle_redraw.</t>
<t tx="ekr.20031218072017.1683">@nocolor

Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=2083188
By: riotnrrrd

There are two problems with 3.12 beta 1 (on Linux):

The 'open with' plugin only works when Leo has been opened with no file.
When a file is opened, the 'open with' option in the 'file' menu only offers
'Shift+Control+O', but nothing happens when it's pressed. The log pane says:

exception in app().hookFunction
AttributeError: 'NoneType' object has no attribute 'configure'

and there is the following traceback:

 Traceback (most recent call last):
  File "/home/opt/leo/leo-3.12beta1/src/leoGlobals.py", line 2174, in doHook
    return a.hookFunction(tag,keywords)
  File "/home/opt/leo/leo-3.12beta1/src/leoPlugins.py", line 27, in doPlugins
    return doHandlersForTag(tag,keywords)
  File "/home/opt/leo/leo-3.12beta1/src/leoPlugins.py", line 60, in
doHandlersForTag
    ret = handle_fn(tag,keywords)
  File "/home/opt/leo/leo-3.12beta1/plugins/nav_buttons.py", line 72, in
updateRecentSections
    info.updateNavButtons()
  File "/home/opt/leo/leo-3.12beta1/plugins/nav_buttons.py", line 243,
in updateNavButtons
    b.configure(image=image,state=state)
AttributeError: 'NoneType' object has no attribute 'configure'</t>
<t tx="ekr.20031218072017.1684">@nocolor

When a new file is opened, the previous window doesn't close, cannot be closed, but closes when Leo is shut down. The following traceback is produced:

Exception in Tkinter callback
Traceback (most recent call last):
  File "/usr/lib/python2.2/lib-tk/Tkinter.py", line 1316, in __call__
    return apply(self.func, args)
  File "/home/opt/leo/leo-3.12beta1/src/leoFrame.py", line 1784, in &lt;lambda&gt;
    callback = lambda f=f,name=name:f.OnOpenRecentFile(name)
  File "/home/opt/leo/leo-3.12beta1/src/leoFrame.py", line 2397, in
OnOpenRecentFile
    self.destroy() # force the window to go away now.
AttributeError: LeoFrame instance has no attribute 'destroy'

Fix:  Created app().destroyWindow and call it from frame.OnOpenRecentFile, OnRevert, OnOpen.</t>
<t tx="ekr.20031218072017.1685">@nocolor

Open Discussion
https://sourceforge.net/forum/message.php?msg_id=2089325
By: jasonic

[Leo 3.12 beta 1]

Wondering about @file refresh behavior...

I make edit changes to @files externally. Then select in Leo File Menu Read/Write..
"Read @file Nodes". But must click on some other Node first and then back again
before change is visible in bottom content pane. Same for right clicking on
a Node to call  "Read @file Nodes".

A more natural workflow would be if "Read @file Nodes" directly refreshed the
content pane without need for the extra Node clicking.

thanks
Jason</t>
<t tx="ekr.20031218072017.1686">@nocolor

The sortSequence function breaks if two different tuples have the same key.  Fortunately, Python's sort function can do all the work of sortSequence provided that we sort on the first item of each tuple.</t>
<t tx="ekr.20031218072017.1687">@nocolor

The &lt;&lt; remove previous entry from a.openWithFiles if it exists &gt;&gt; loop destroyed the previous value of dict.</t>
<t tx="ekr.20031218072017.1688">@ What I did:
	
- added set_focus and force_focus utilities for better tracing.
- changed drawText so it calls setNormalLabelState when v == editVnode.
	idle_redraw no longer interferes with the headline being edited.
- setNormalLabelState now selects all text and calls set_focus.
- added callers keyword param to trace.
- simplified c.insertHeadline: it no longer has to avoid redraws.</t>
<t tx="ekr.20031218072017.1689"></t>
<t tx="ekr.20031218072017.1690">@nocolor

Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=2080849
Help forum

I get an error message when tangling: 

can't convert | to ISO-8859-1

the character is displayed as a box (which I am representing by |).  It is important
to fix this immediately, because when the automatic untangle happens to the
@file outline, that offending character will be (silently!) replaced by a question
mark, which is fairly untrackable in the text I am working on.

This is a tricky problem because some characters, such as the hyphen, can appear
exactly the same on the screen but have two different numeric representations.
So you type in one thing in one environment, paste from another, and it looks
identical but it isn't.

1) Is there any way to trap that error message and find out where the offending
character is?

Could one change how conversion errors are output? If in the output file the
error character were replaced by a marker (say: ?\xa0?, where a0 is its hex
number of the character), then it could be debugged fairly easily.
</t>
<t tx="ekr.20031218072017.1691"></t>
<t tx="ekr.20031218072017.1692">Leo took an exception reformatting the following.  The problem was that getBodyLines wasn't handling the new values returned by getTextSelection.

@color

@language plain
@pagewidth 72
@tabwidth 2

The intent of this tool is to provide 
an aid to memorization practice.  The 
tool is directed at memorization of 
prose or poetry, not music or 
mathematics.  It would probably not 
be useful for memorization of dialog.  The 
purpose of such memorization is 
to be able to recreate a chunk of 
text in your head or on paper, and perhaps verbally.

The steps might be as follows:</t>
<t tx="ekr.20031218072017.1693">@ 7/11/03:  This constitutes a major changes to Leo's fundamental vnode code.  

v.copyTree now creates a free-standing tree that may be linked into an existing outline using any of the v.linkX routines.  This is a major simplification that was long overdue.

N.B.  Copied trees share tnodes with the original code.  It would be easy to make this optional, and at present all code expects tnodes to be shared.

N.B.  Nodes of the copied trees are _not_ joined to the original tree.  That is, the copied vnodes v do not appear in v.t.joinList.
</t>
<t tx="ekr.20031218072017.1694">@nocolor

What I did:

- Changed getTextSelection so that it returns a tuple (insert,insert) instead of (None,None) if the selection range is empty.  This does most of the work!

- Pass an oldSel param to most calls of onBodyChanged.

- Added a newSel param to onBodyChanged and idle_body_key.

- Forced the focus to the body pane after pressing undo/redo buttons in the Spell Checker.  This makes the selection visible.

@color</t>
<t tx="ekr.20031218072017.1695">@
- Added "clear-mark" and "set-mark" hooks.
- Moved dialog classes used by nav_buttons plugin into that plugin.

</t>
<t tx="ekr.20031218072017.1696"></t>
<t tx="ekr.20031218072017.1697"></t>
<t tx="ekr.20031218072017.1698">@ignore</t>
<t tx="ekr.20031218072017.1699">@nocolor

By: jasonic ( Jason Cunliffe ) 
 RE: using @file paths to create structure   
2003-07-17 14:16  
ekr: &gt;Set create_nonexistent_directories = 1 in leoConfig.txt 

Flag is is set, but not working... 

errors writing: C:\Program Files\Leo\jasonic\testdir\aaaa.r 
path does not exist: C:\Program Files\Leo\jasonic\testdir 

any ideas? 

thanks 
JAson</t>
<t tx="ekr.20031218072017.1700">This is a test</t>
<t tx="ekr.20031218072017.1701"></t>
<t tx="ekr.20031218072017.1702">@nocolor

An assert failed: v in joinList when undoing an Extract Section command.

Probably undoing a non-cloned node that was the descendent of a cloned node.  </t>
<t tx="ekr.20031218072017.1703"></t>
<t tx="ekr.20031218072017.1704">def convertAllBlanks (self):
	
	c = self ; body = c.frame.body ; v = current = c.currentVnode()
	
	if g.app.batchMode:
		c.notValidInBatchMode("Convert All Blanks")
		return
	next = v.nodeAfterTree()
	dict = g.scanDirectives(c)
	tabWidth  = dict.get("tabwidth")
	# Create copy for undo.
	v_copy = c.undoer.saveTree(v)
	oldText = body.getAllText()
	oldSel = body.getTextSelection()
	count = 0
	while v and v != next:
		if v == current:
			if c.convertBlanks(setUndoParams=false):
				count += 1 ; v.setDirty()
		else:
			changed = false ; result = []
			text = v.t.bodyString
			assert(g.isUnicode(text))
			lines = string.split(text, '\n')
			for line in lines:
				s = g.optimizeLeadingWhitespace(line,tabWidth)
				if s != line: changed = true
				result.append(s)
			if changed:
				count += 1 ; v.setDirty()
				result = string.join(result,'\n')
				v.t.setTnodeText(result)
		v = v.threadNext()
	if count &gt; 0:
		newText = body.getAllText()
		newSel = body.getTextSelection()
		c.undoer.setUndoParams("Convert All Blanks",
			current,select=current,oldTree=v_copy,
			oldText=oldText,newText=newText,
			oldSel=oldSel,newSel=newSel)
	g.es("blanks converted to tabs in %d nodes" % count)</t>
<t tx="ekr.20031218072017.1705">def convertAllTabs (self):

	c = self ; body = c.frame.body ; v = current = c.currentVnode()
	
	if g.app.batchMode:
		c.notValidInBatchMode("Convert All Tabs")
		return
	next = v.nodeAfterTree()
	dict = g.scanDirectives(c)
	tabWidth  = dict.get("tabwidth")
	# Create copy for undo.
	v_copy = c.undoer.saveTree(v)
	oldText = body.getAllText()
	oldSel = body.getTextSelection()
	count = 0
	while v and v != next:
		if v == current:
			if self.convertTabs(setUndoParams=false):
				count += 1 ; v.setDirty()
		else:
			result = [] ; changed = false
			text = v.t.bodyString
			assert(g.isUnicode(text))
			lines = string.split(text, '\n')
			for line in lines:
				i,w = g.skip_leading_ws_with_indent(line,0,tabWidth)
				s = g.computeLeadingWhitespace(w,-abs(tabWidth)) + line[i:] # use negative width.
				if s != line: changed = true
				result.append(s)
			if changed:
				count += 1 ; v.setDirty()
				result = string.join(result,'\n')
				v.t.setTnodeText(result)
		v = v.threadNext()
	if count &gt; 0:
		newText = body.getAllText()
		newSel = body.getTextSelection() # 7/11/03
		c.undoer.setUndoParams("Convert All Tabs",
			current,select=current,oldTree=v_copy,
			oldText=oldText,newText=newText,
			oldSel=oldSel,newSel=newSel)
	g.es("tabs converted to blanks in %d nodes" % count)</t>
<t tx="ekr.20031218072017.1706">def extract(self):
	
	c = self ; body = c.frame.body ; current = v = c.currentVnode()
	
	if g.app.batchMode:
		c.notValidInBatchMode("Extract")
		return
	
	head,lines,tail,oldSel,oldYview = self.getBodyLines()
	if not lines: return
	headline = lines[0] ; del lines[0]
	junk, ws = g.skip_leading_ws_with_indent(headline,0,c.tab_width)
	# Create copy for undo.
	v_copy = c.undoer.saveTree(v)
	oldText = body.getAllText()
	oldSel = body.getTextSelection()
	&lt;&lt; Set headline for extract &gt;&gt;
	# Remove leading whitespace from all body lines.
	result = []
	for line in lines:
		# Remove the whitespace on the first line
		line = g.removeLeadingWhitespace(line,ws,c.tab_width)
		result.append(line)
	# Create a new node from lines.
	newBody = string.join(result,'\n') # 11/23/03
	if head and len(head) &gt; 0:
		head = string.rstrip(head)
	c.beginUpdate()
	if 1: # update range...
		c.createLastChildNode(v,headline,newBody) # 11/23/03
		undoType =  "Can't Undo" # 12/8/02: None enables further undoes, but there are bugs now.
		c.updateBodyPane(head,None,tail,undoType,oldSel,oldYview,setSel=false)
		newText = body.getAllText()
		newSel = body.getTextSelection() # 7/11/03
		c.undoer.setUndoParams("Extract",
			v,select=current,oldTree=v_copy,
			oldText=oldText,newText=newText,
			oldSel=oldSel,newSel=newSel)
	c.endUpdate()</t>
<t tx="ekr.20031218072017.1707">headline = string.strip(headline)
while len(headline) &gt; 0 and headline[0] == '/':
	headline = headline[1:]
headline = string.strip(headline)</t>
<t tx="ekr.20031218072017.1708">def extractSection(self):

	c = self ; body = c.frame.body ; current = v = c.currentVnode()
	
	if g.app.batchMode:
		c.notValidInBatchMode("Extract Section")
		return

	head,lines,tail,oldSel,oldYview = self.getBodyLines()
	if not lines: return
	headline = lines[0] ; del lines[0]
	junk, ws = g.skip_leading_ws_with_indent(headline,0,c.tab_width)
	line1 = "\n" + headline
	# Create copy for undo.
	v_copy = c.undoer.saveTree(v)
	# g.trace("v:     " + `v`)
	# g.trace("v_copy:" + `v_copy`)
	oldText = body.getAllText()
	oldSel = body.getTextSelection()
	&lt;&lt; Set headline for extractSection &gt;&gt;
	# Remove leading whitespace from all body lines.
	result = []
	for line in lines:
		# Remove the whitespace on the first line
		line = g.removeLeadingWhitespace(line,ws,c.tab_width)
		result.append(line)
	# Create a new node from lines.
	newBody = string.join(result,'\n')  # 11/23/03
	if head and len(head) &gt; 0:
		head = string.rstrip(head)
	c.beginUpdate()
	if 1: # update range...
		c.createLastChildNode(v,headline,newBody)  # 11/23/03
		undoType = None # Set undo params later.
		c.updateBodyPane(head+line1,None,tail,undoType,oldSel,oldYview,setSel=false)
		newText = body.getAllText()
		newSel = body.getTextSelection()
		c.undoer.setUndoParams("Extract Section",v,
			select=current,oldTree=v_copy,
			oldText=oldText,newText=newText,
			oldSel=oldSel,newSel=newSel)
	c.endUpdate()</t>
<t tx="ekr.20031218072017.1709">if 0: # I have no idea why this was being done.
	while len(headline) &gt; 0 and headline[0] == '/':
		headline = headline[1:]

headline = headline.strip()

if len(headline) &lt; 5:
	oops = true
else:
	head1 = headline[0:2] == '&lt;&lt;'
	head2 = headline[0:2] == '@&lt;'
	tail1 = headline[-2:] == '&gt;&gt;'
	tail2 = headline[-2:] == '@&gt;'
	oops = not (head1 and tail1) and not (head2 and tail2)

if oops:
	g.es("Selected text should start with a section name",color="blue")
	return</t>
<t tx="ekr.20031218072017.1710">def extractSectionNames(self):

	c = self ; body = c.frame.body ; current = v = c.currentVnode()
	
	if g.app.batchMode:
		c.notValidInBatchMode("Extract Section Names")
		return

	head,lines,tail,oldSel,oldYview = self.getBodyLines()
	if not lines: return
	# Create copy for undo.
	v_copy = c.undoer.saveTree(v)
	# No change to body or selection of this node.
	oldText = newText = body.getAllText()
	i, j = oldSel = newSel = body.getTextSelection()
	c.beginUpdate()
	if 1: # update range...
		found = false
		for s in lines:
			&lt;&lt; Find the next section name &gt;&gt;
			if name:
				self.createLastChildNode(v,name,None)
				found = true
		c.selectVnode(v)
		c.validateOutline()
		if not found:
			g.es("Selected text should contain one or more section names",color="blue")
	c.endUpdate()
	# No change to body or selection
	c.undoer.setUndoParams("Extract Names",
		v,select=current,oldTree=v_copy,
		oldText=oldText,newText=newText,
		oldSel=oldSel,newSel=newSel)
	# Restore the selection.
	body.setTextSelection(oldSel)
	body.setFocus()</t>
<t tx="ekr.20031218072017.1711">head1 = string.find(s,"&lt;&lt;")
if head1 &gt; -1:
	head2 = string.find(s,"&gt;&gt;",head1)
else:
	head1 = string.find(s,"@&lt;")
	if head1 &gt; -1:
		head2 = string.find(s,"@&gt;",head1)
		
if head1 == -1 or head2 == -1 or head1 &gt; head2:
	name = None
else:
	name = s[head1:head2+2]</t>
<t tx="ekr.20031218072017.1712">elif undoType in (
	"Convert All Blanks","Convert All Tabs",
	"Extract","Extract Names","Extract Section",
	"Read @file Nodes"):

	u.p = self.undoReplace(u.p,u.newTree,u.oldTree,u.oldText)
	c.selectVnode(u.p) # Does full recolor.
	if u.oldSel:
		c.frame.body.setTextSelection(u.oldSel)
	redrawFlag = true</t>
<t tx="ekr.20031218072017.1713">elif redoType in (
	"Convert All Blanks","Convert All Tabs",
	"Extract","Extract Names","Extract Section",
	"Read @file Nodes"):

	u.p = self.undoReplace(u.p,u.oldTree,u.newTree,u.newText)
	c.selectVnode(u.p) # Does full recolor.
	if u.newSel:
		c.frame.body.setTextSelection(u.newSel)
	redrawFlag = redoType in ("Extract","Extract Names","Extract Section","Read @file Nodes")</t>
<t tx="ekr.20031218072017.1714">@ This routine implements undo for any kind of operation, no matter how complex.  Just do:

	v_copy = c.undoer.saveTree(v)
	...make arbitrary changes to p's tree.
	c.undoer.setUndoParams("Op Name",p,select=current,oldTree=v_copy)
@c

def undoReplace (self,p,new_data,old_data,text):

	"""Replace new_v with old_v during undo."""

	u = self ; c = u.c
	if 0:
		g.trace(u.undoType)
		g.trace("u.bead",u.bead, type(u.peekBead(u.bead)))
		g.trace("new_data:",type(new_data))
		g.trace("old_data:",type(old_data))

	assert(type(new_data)==type((),) or type(old_data)==type((),))

	# new_data will be None the first time we undo this operation.
	# In that case, we must save the new tree for later undo operation.
	try:
		new_v, new_headlines, new_bodies, new_attributes = new_data
	except:
		new_data = u.saveTree(p)
		new_v, new_headlines, new_bodies, new_attributes = new_data
		# Put the new data in the bead.
		d = u.beads[u.bead]
		d["newTree"] = new_data
		u.beads[u.bead] = d
		# Another kludge to satisfy assert(new_v in joinList) below.
		new_v = p
		
	# The previous code should already have created this data.
	old_v, old_headlines, old_bodies, old_attributes = old_data
	assert(new_bodies != None)
	assert(old_bodies != None)

	result = old_v

	# Restore all headlines and bodies from the saved lists.
	encoding = g.app.tkEncoding
	i = 0
	for p in result.subtree_iter():
		p.initHeadString(old_headlines[i],encoding)
		p.setTnodeText(old_bodies[i],encoding)
		u.restoreExtraAttributes(p,old_attributes[i])
		i += 1

	result.setBodyStringOrPane(result.bodyString())
	return result</t>
<t tx="ekr.20031218072017.1715"></t>
<t tx="ekr.20031218072017.1716"></t>
<t tx="ekr.20031218072017.1717"></t>
<t tx="ekr.20031218072017.1718"></t>
<t tx="ekr.20031218072017.1719">@nocolor

Developers forum
By: edcdave ( David Harris ) 
 "No absolute directory specified anywhere"   
2003-07-20 01:16

I managed to come up with a reproducible scenario which generates the message "No absolute directory specified anywhere". 

Open a new leo window (from desktop or using File/New). Enter @file testprog.py as the headline of the first node. 

Execute Save or SaveAs, specify a path and file name using the dialog box and click Save. The message will appear in the upper right pane.

The fix was to change:
	
if len(dir) &gt; 0 and os.path.isabs(fileName) and os.path.exists(fileName):
	
to

if len(dir) &gt; 0 and os.path.isabs(dir) and os.path.exists(dir):

BTW, because we are getting the path from a dialog box, we don't have to deal with the create_nonexistent_directories option.</t>
<t tx="ekr.20031218072017.1720">def save(self,fileName):

	c = self.c ; v = c.currentVnode()

	if not g.doHook("save1",c=c,v=v,fileName=fileName):
		c.beginUpdate()
		c.endEditing()# Set the current headline text.
		self.compactFileIndices()
		self.setDefaultDirectoryForNewFiles(fileName)
		if self.write_LEO_file(fileName,false): # outlineOnlyFlag
			c.setChanged(false) # Clears all dirty bits.
			g.es("saved: " + g.shortFileName(fileName))
			if g.app.config.save_clears_undo_buffer:
				g.es("clearing undo")
				c.undoer.clearUndoState()
		c.endUpdate()
	g.doHook("save2",c=c,v=v,fileName=fileName)</t>
<t tx="ekr.20031218072017.1721">@ There was no way to remove a default shortcut so that no shortcut was used.  Now entries in leoConfig.txt of the form:
	
commandName = None

will clear any previous shortcut.</t>
<t tx="ekr.20031218072017.1722">def getShortcut (self,name):
	
	if 1: # 2/8/04: allow &amp; in keys.
		val = self.rawKeysDict.get(name.replace('&amp;',''))
		if val:
			rawKey,shortcut = val
			return rawKey,shortcut
		else:
			return None,None
	else:
		val = self.keysDict.get(name)
		
		# 7/19/03: Return "None" if the setting is "None"
		# This allows settings to disable a default shortcut.
		return val</t>
<t tx="ekr.20031218072017.1723">@ The old, non-user-configurable code bound shortcuts in createMenuBar.  The new user-configurable code binds shortcuts here.

Centralized tables of shortscuts no longer exist as they did in createAccelerators.  To check for duplicates, (possibly arising from leoConfig.txt) we add entries to a central dictionary here, and report duplicates if an entry for a canonicalized shortcut already exists.
@c

def createMenuEntries (self,menu,table,openWith=false,dontBind=false):
	
	for label,accel,command in table:
		if label == None or command == None or label == "-":
			self.add_separator(menu)
		else:
			&lt;&lt; set name to the label for doCommand &gt;&gt;
			&lt;&lt; set accel to the shortcut for name &gt;&gt;
			&lt;&lt; set bind_shortcut and menu_shortcut using accel &gt;&gt;
			&lt;&lt; define callback function &gt;&gt;
			&lt;&lt; set realLabel, amp_index and menu_shortcut &gt;&gt;
	
			self.add_command(menu,label=realLabel,accelerator=menu_shortcut,
				command=callback,underline=amp_index)
				
			if 0: # testing
				dontBind = true

			if bind_shortcut and not dontBind:
				&lt;&lt; handle bind_shorcut &gt;&gt;</t>
<t tx="ekr.20031218072017.1724">name = label.strip().lower()

# Remove special characters from command names.
name2 = ""
for ch in name:
	if ch in string.ascii_letters or ch in string.digits:
		name2 = name2 + ch
name = name2
</t>
<t tx="ekr.20031218072017.1725">config = g.app.config
rawKey,accel2 = config.getShortcut(name)

# 7/19/03: Make sure "None" overrides the default shortcut.
if accel2 == None or len(accel2) == 0:
	pass # Use default shortcut, if any.
elif accel2.lower() == "none":
	accel = None # Remove the default shortcut.
else:
	accel = accel2 # Override the default shortcut.</t>
<t tx="ekr.20031218072017.1726">bind_shortcut,menu_shortcut = self.canonicalizeShortcut(accel)

# Kludge: disable the shortcuts for cut, copy, paste.
# This has already been bound in leoTkinterFrame.__init__
# 2/13/03: A _possible_ fix for the Linux control-v bug.

if sys.platform not in ("darwin","freebsd4","freebsd5","linux1","linux2"):
	if bind_shortcut in ("&lt;Control-c&gt;","&lt;Control-v&gt;","&lt;Control-x&gt;"):
		bind_shortcut = None</t>
<t tx="ekr.20031218072017.1727">if openWith:
	callback = self.defineOpenWithMenuCallback(command)
else:
	callback = self.defineMenuCallback(command,name)</t>
<t tx="ekr.20031218072017.1728">realLabel = self.getRealMenuName(label)

# 2/8/04: A bad hack:  this does not allow for translations!
# We need a way of specifying shortcuts, &amp; bindings and translations all in the same place.
if rawKey and rawKey != label:
	amp_index = rawKey.find("&amp;") + 1
else:
	amp_index = realLabel.find("&amp;")

realLabel = realLabel.replace("&amp;","")

if 0: # trace
	if realLabel.lower().startswith("sort"):
		g.trace(label,realLabel,rawKey,bind_shortcut)

if not menu_shortcut:
	menu_shortcut = ""</t>
<t tx="ekr.20031218072017.1729">if bind_shortcut in self.menuShortcuts:
	if not g.app.menuWarningsGiven:
		g.es("duplicate shortcut:", accel, bind_shortcut, label,color="red")
		print "duplicate shortcut:", accel, bind_shortcut, label
else:
	self.menuShortcuts.append(bind_shortcut)
	try:
		self.frame.body.bind(bind_shortcut,callback)
		self.bind(bind_shortcut,callback)
	except: # could be a user error
		if not g.app.menuWarningsGiven:
			print "exception binding menu shortcut..."
			print bind_shortcut
			g.es_exception()
			g.app.menuWarningsGive = true</t>
<t tx="ekr.20031218072017.1730">@nocolor

The @wrap and @nowrap directives should override the default leoConfig setting.

@color</t>
<t tx="ekr.20031218072017.1731">@nocolor

A new problem in Python 2.3: "after" event get called during shutdown.  At present, the workaround is to do the following:

1. Use root.quit rather than root.destroy.  This ensures that no Tk objects get garbage collected.

2. Use the app().killed var to disable "after" routines during shutdown.  This is defensive programming so we don't rely on Tk's apparently buggy shutdown logic.

@color</t>
<t tx="ekr.20031218072017.1732">def finishQuit(self):
	
	self.killed = true # Disable after events.
	
	if self.afterHandler != None:
		# print "finishQuit: cancelling",self.afterHandler
		if g.app.gui.guiName() == "tkinter":
			self.root.after_cancel(self.afterHandler)
		self.afterHandler = None

	# Wait until everything is quiet before really quitting.
	g.doHook("end1")

	self.destroyAllGlobalWindows()
	
	self.destroyAllOpenWithFiles()
	
	g.app.gui.destroySelf()
</t>
<t tx="ekr.20031218072017.1733">def updateStatusRowCol (self):
	
	c = self.c ; body = self.bodyCtrl ; lab = self.statusLabel
	gui = g.app.gui
	if not lab: return
	
	# New for Python 2.3: may be called during shutdown.
	if g.app.killed:
		return

	if 0: # New code
		index = c.frame.body.getInsertionPoint()
		row,col = c.frame.body.indexToRowColumn(index)
		index1 = c.frame.body.rowColumnToIndex(row,0)
	else:
		index = body.index("insert")
		row,col = gui.getindex(body,index)
	
	if col &gt; 0:
		if 0: # new code
			s = c.frame.body.getRange(index1,index2)
		else:
			s = body.get("%d.0" % (row),index)
		s = g.toUnicode(s,g.app.tkEncoding) # 9/28/03
		col = g.computeWidth (s,self.tab_width)

	if row != self.lastStatusRow or col != self.lastStatusCol:
		s = "line %d, col %d " % (row,col)
		lab.configure(text=s)
		self.lastStatusRow = row
		self.lastStatusCol = col
		
	# Reschedule this routine 100 ms. later.
	# Don't use after_idle: it hangs Leo.
	self.statusFrame.after(100,self.updateStatusRowCol)</t>
<t tx="ekr.20031218072017.1734"></t>
<t tx="ekr.20031218072017.1735"></t>
<t tx="ekr.20031218072017.1736"></t>
<t tx="ekr.20031218072017.1737"></t>
<t tx="ekr.20031218072017.1738">@ To do:
	
- (done) Create a 16 x 16 leoApp16.ico
- (done) Upload leoApp16.ico to cvs.
- (done) Reinstall PIL and tkIcon for Python 2.2.
- (done) Test the code using Python 2.2
	
- Document that PIL and tkIcon are not needed in Python 2.3 and above.
	- In LeoDocs.leo
	- On Leo's web site.

</t>
<t tx="ekr.20031218072017.1739"></t>
<t tx="ekr.20031218072017.1740">@nocolor

1. In 4.0 getLeoFile must call setAllJoinLinks _before_ reading @file nodes.

This is perfectly safe in 4.0 because reading _never_ creates vnodes or alters vnode links.

2. writeAll and writeMissing now return a count of the written files.

This allows the caller to do an auto-save only if something was really written.</t>
<t tx="ekr.20031218072017.1741"></t>
<t tx="ekr.20031218072017.1742"></t>
<t tx="ekr.20031218072017.1743"></t>
<t tx="ekr.20031218072017.1744">@nocolor

@+doc and @+at sentinels now contain whatever trailing whitespace followed the corresponding @doc or @ directives.</t>
<t tx="ekr.20031218072017.1745"></t>
<t tx="ekr.20031218072017.1746">def putBlankDocLine (self):
	
	at = self
	
	at.putPending(split=false)

	if not at.endSentinelComment:
		at.putIndent(at.indent)
		at.os(at.startSentinelComment) ; at.oblank()

	at.onl()</t>
<t tx="ekr.20031218072017.1747">def putStartDocLine (self,s,i,kind):
	
	"""Write the start of a doc part."""
	
	at = self ; at.docKind = kind
	
	sentinel = g.choose(kind == docDirective,"@+doc","@+at")
	directive = g.choose(kind == docDirective,"@doc","@")
	
	if 0: # New code: put whatever follows the directive in the sentinel
		# Skip past the directive.
		i += len(directive)
		j = g.skip_to_end_of_line(s,i)
		follow = s[i:j]
	
		# Put the opening @+doc or @-doc sentinel, including whatever follows the directive.
		at.putSentinel(sentinel + follow)

		# Put the opening comment if we are using block comments.
		if at.endSentinelComment:
			at.putIndent(at.indent)
			at.os(at.startSentinelComment) ; at.onl()
	else: # old code.
		# Skip past the directive.
		i += len(directive)
	
		# Get the trailing whitespace.
		j = g.skip_ws(s,i)
		ws = s[i:j]
		
		# Put the opening @+doc or @-doc sentinel, including trailing whitespace.
		at.putSentinel(sentinel + ws)
	
		# Put the opening comment.
		if at.endSentinelComment:
			at.putIndent(at.indent)
			at.os(at.startSentinelComment) ; at.onl()
	
		# Put an @nonl sentinel if there is significant text following @doc or @.
		if not g.is_nl(s,j):
			# Doesn't work if we are using block comments.
			at.putSentinel("@nonl")
			at.putDocLine(s,j)</t>
<t tx="ekr.20031218072017.1748">def putDocLine (self,s,i):
	
	"""Handle one line of a doc part.
	
	Output complete lines and split long lines and queue pending lines.
	Inserted newlines are always preceded by whitespace."""
	
	at = self
	j = g.skip_line(s,i)
	s = s[i:j]

	if at.endSentinelComment:
		leading = at.indent
	else:
		leading = at.indent + len(at.startSentinelComment) + 1

	if not s or s[0] == '\n':
		# A blank line.
		at.putBlankDocLine()
	else:
		&lt;&lt; append words to pending line, splitting the line if needed &gt;&gt;
</t>
<t tx="ekr.20031218072017.1749">@ All inserted newlines are preceeded by whitespace:
we remove trailing whitespace from lines that have not been split.
@c

i = 0
while i &lt; len(s):

	# Scan to the next word.
	word1 = i # Start of the current word.
	word2 = i = g.skip_ws(s,i)
	while i &lt; len(s) and s[i] not in (' ','\t'):
		i += 1
	word3 = i = g.skip_ws(s,i)
	# g.trace(s[word1:i])
	
	if leading + word3 - word1 + len(''.join(at.pending)) &gt;= at.page_width:
		if at.pending:
			# g.trace("splitting long line.")
			# Ouput the pending line, and start a new line.
			at.putPending(split=true)
			at.pending = [s[word2:word3]]
		else:
			# Output a long word on a line by itself.
			# g.trace("long word:",s[word2:word3])
			at.pending = [s[word2:word3]]
			at.putPending(split=true)
	else:
		# Append the entire word to the pending line.
		# g.trace("appending",s[word1:word3])
		at.pending.append(s[word1:word3])
			
# Output the remaining line: no more is left.
at.putPending(split=false)</t>
<t tx="ekr.20031218072017.1750">def putEndDocLine (self):
	
	"""Write the conclusion of a doc part."""
	
	at = self
	
	at.putPending(split=false)
	
	# Put the closing delimiter if we are using block comments.
	if at.endSentinelComment:
		at.putIndent(at.indent)
		at.os(at.endSentinelComment)
		at.onl() # Note: no trailing whitespace.

	sentinel = g.choose(at.docKind == docDirective,"@-doc","@-at")
	at.putSentinel(sentinel)</t>
<t tx="ekr.20031218072017.1751">def putPending (self,split):
	
	"""Write the pending part of a doc part.
	
	We retain trailing whitespace iff the split flag is true."""
	
	at = self ; s = ''.join(at.pending) ; at.pending = []
	
	# g.trace("split",`s`)
	
	# Remove trailing newline temporarily.  We'll add it back later.
	if s and s[-1] == '\n':
		s = s[:-1]

	if not split:
		s = s.rstrip()
		if not s:
			return

	at.putIndent(at.indent)

	if not at.endSentinelComment:
		at.os(at.startSentinelComment) ; at.oblank()

	at.os(s) ; at.onl()</t>
<t tx="ekr.20031218072017.1752">def readStartAt (self,s,i):
	"""Read an @+at sentinel."""
	at = self ; assert(g.match(s,i,"+at"))
	if 0:# new code: append whatever follows the sentinel.
		i += 3 ; j = self.skipToEndSentinel(s,i) ; follow = s[i:j]
		at.out.append('@' + follow) ; at.docOut = []
	else:
		i += 3 ; j = g.skip_ws(s,i) ; ws = s[i:j]
		at.docOut = ['@' + ws + '\n'] # This newline may be removed by a following @nonl
	at.inCode = false
	at.endSentinelStack.append(endAt)
	
def readStartDoc (self,s,i):
	"""Read an @+doc sentinel."""
	at = self ; assert(g.match(s,i,"+doc"))
	if 0: # new code: append whatever follows the sentinel.
		i += 4 ; j = self.skipToEndSentinel(s,i) ; follow = s[i:j]
		at.out.append('@' + follow) ; at.docOut = []
	else:
		i += 4 ; j = g.skip_ws(s,i) ; ws = s[i:j]
		at.docOut = ["@doc" + ws + '\n'] # This newline may be removed by a following @nonl
	at.inCode = false
	at.endSentinelStack.append(endDoc)
	
def skipToEndSentinel(self,s,i):
	end = self.endSentinelComment
	if end:
		j = s.find(end,i)
		if j == -1:
			return g.skip_to_end_of_line(s,i)
		else:
			return j
	else:
		return g.skip_to_end_of_line(s,i)</t>
<t tx="ekr.20031218072017.1753">def readLastDocLine (self,tag):
	
	"""Read the @c line that terminates the doc part.
	tag is @doc or @."""
	
	at = self
	end = at.endSentinelComment
	start = at.startSentinelComment
	s = ''.join(at.docOut)
	
	if 0: # new code.
		&lt;&lt; new code &gt;&gt;
	else:
		&lt;&lt; old code &gt;&gt;</t>
<t tx="ekr.20031218072017.1754">if end:
	# Remove opening block delim.
	if g.match(s,0,start):
		s = s[len(start):]
	else:
		at.readError("Missing open block comment")
		g.trace(s)
		return
		
	# Remove trailing newline.
	if s[-1] == '\n':
		s = s[:-1]

	# Remove closing block delim.
	if s[-len(end):] == end:
		s = s[:-len(end)]
	else:
		at.readError("Missing close block comment")
		return

at.out.append(s) # The tag has already been removed.
at.docOut = []</t>
<t tx="ekr.20031218072017.1755"># Remove the @doc or @space.  We'll add it back at the end.
if g.match(s,0,tag):
	s = s[len(tag):]
else:
	at.readError("Missing start of doc part")
	return

if end:
	# Remove opening block delim.
	if g.match(s,0,start):
		s = s[len(start):]
	else:
		at.readError("Missing open block comment")
		g.trace(s)
		return
		
	# Remove trailing newline.
	if s[-1] == '\n':
		s = s[:-1]

	# Remove closing block delim.
	if s[-len(end):] == end:
		s = s[:-len(end)]
	else:
		at.readError("Missing close block comment")
		return

at.out.append(tag + s)
at.docOut = []</t>
<t tx="ekr.20031218072017.1756"></t>
<t tx="ekr.20031218072017.1757"></t>
<t tx="ekr.20031218072017.1758">Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=2228302
By: nobody

Platform: Python 2.2.1, Tk 8.3.2, Windows NT
Happens in Leo 3.11.1, 4.0b2

Start with this outline (A is cloned):
A'
....B
....C
A'
....B
....C
D

Then make a clone of D under A.

If you ctrl-drag node D to A, it works correctly.

If you use ctrl-` or the Clone Node menu to clone D and then drag D under A,
one of the D nodes is *not* marked as a clone! (Though it sort of behaves as
a clone.)

--eric k
</t>
<t tx="ekr.20031218072017.1759"></t>
<t tx="ekr.20031218072017.1760">def checkMoveWithParentWithWarning (self,root,parent,warningFlag):
	
	"""Return false if root or any of root's descedents is a clone of
	parent or any of parents ancestors."""

	message = "Illegal move or drag: no clone may contain a clone of itself"

	# g.trace("root",root,"parent",parent)
	clonedTnodes = {}
	for ancestor in parent.self_and_parents_iter():
		if ancestor.isCloned():
			t = ancestor.v.t
			clonedTnodes[t] = t
	if not clonedTnodes:
		return true
	for p in root.subtree_iter():
		if p.isCloned() and clonedTnodes.get(p.v.t):
			if warningFlag:
				g.alert(message)
			return false
	return true</t>
<t tx="ekr.20031218072017.1761"># Inserts a vnode after the current vnode.  All details are handled by the vnode class.

def insertHeadline (self,op_name="Insert Node"):

	c = self ; p = c.currentPosition()
	hasChildren = p.hasChildren()
	isExpanded  = p.isExpanded()
	if not p: return

	c.beginUpdate()
	if 1: # inside update...
		if (
			# 1/31/04: Make sure new node is visible when hoisting.
			(hasChildren and isExpanded) or
			(c.hoistStack and p == c.hoistStack[-1])
		):
			p = p.insertAsNthChild(0)
		else:
			p = p.insertAfter()
		g.trace(p)
		c.undoer.setUndoParams(op_name,p,select=p)
		c.selectVnode(p)
		c.editPosition(p)
		p.setAllAncestorAtFileNodesDirty()
		c.setChanged(true)
	c.endUpdate()</t>
<t tx="ekr.20031218072017.1762">def clone (self):

	c = self
	p = c.currentPosition()
	if not p: return
	
	c.beginUpdate()
	if 1: # update...
		clone = p.clone(p)
		clone.setAllAncestorAtFileNodesDirty() # 1/12/04
		c.setChanged(true)
		if c.validateOutline():
			c.selectVnode(clone)
			c.undoer.setUndoParams("Clone Node",clone)
	c.endUpdate() # updates all icons</t>
<t tx="ekr.20031218072017.1763">def initAllCloneBits (self):
	
	"""Initialize all clone bits in the entire outline"""

	c=self
	c.clearAllVisited()
	v = self.rootVnode()
	c.beginUpdate()
	while v:
		if not v.t.isVisited():
			v.t.setVisited() # Inhibit visits to all joined nodes.
			c.initJoinedCloneBits(v)
		v = v.threadNext()
	c.endUpdate()
	
def initAllCloneBitsInTree (self,v):
	
	"""Initialize all clone bits in the v's subtree"""

	c=self
	v.clearAllVisitedInTree()
	after = v.nodeAfterTree()
	c.beginUpdate()
	while v and v != after:
		if not v.t.isVisited():
			v.t.setVisited() # Inhibit visits to all joined nodes.
			c.initJoinedCloneBits(v)
		v = v.threadNext()
	c.endUpdate()</t>
<t tx="ekr.20031218072017.1764"># Initializes all clone bits in the all nodes joined to v.

def initJoinedCloneBits (self,v):
	
	if 0:
		if not self.loading:
			g.trace(len(v.t.joinList),v)

	c = self
	c.beginUpdate()
	mark = v.shouldBeClone()
	if mark:
		# Set clone bit in v and all joined nodes.
		v.setClonedBit()
		for v2 in v.t.joinList:
			v2.setClonedBit()
	else:
		# Set clone bit in v and all joined nodes.
		v.clearClonedBit()
		for v2 in v.t.joinList:
			v2.clearClonedBit()
	c.endUpdate()
</t>
<t tx="ekr.20031218072017.1765"># Makes sure all nodes are valid.

def validateOutline (self):

	c = self

	root = c.rootPosition()
	parent = c.nullPosition()

	if root:
		return root.validateOutlineWithParent(parent)
	else:
		return true</t>
<t tx="ekr.20031218072017.1766"></t>
<t tx="ekr.20031218072017.1767">def demote(self):

	c = self ; p = c.currentPosition()
	if not p or not p.hasNext(): return

	last = p.lastChild()
	# Make sure all the moves will be valid.
	for child in p.children_iter():
		if not c.checkMoveWithParentWithWarning(child,p,true):
			return
	c.beginUpdate()
	if 1: # update range...
		c.endEditing()
		while p.hasNext(): # Do not use iterator here.
			child = p.next()
			child.moveToNthChildOf(p,p.numberOfChildren())
		p.expand()
		c.selectVnode(p)
		p.setAllAncestorAtFileNodesDirty()
		c.setChanged(true)
	c.endUpdate()
	c.undoer.setUndoParams("Demote",p,lastChild=last)
	c.updateSyntaxColorer(p) # Moving can change syntax coloring.</t>
<t tx="ekr.20031218072017.1768">@ Moving down is more tricky than moving up; we can't move p to be a child of itself.  An important optimization:  we don't have to call checkMoveWithParentWithWarning() if the parent of the moved node remains the same.
@c

def moveOutlineDown(self):

	c = self ; p = c.currentPosition()
	if not p: return

	if not c.canMoveOutlineDown(): # 11/4/03: Support for hoist.
		if c.hoistStack: g.es("Can't move node out of hoisted outline",color="blue")
		return
	# Set next to the node after which p will be moved.
	next = p.visNext()
	while next and p.isAncestorOf(next):
		next = next.visNext()
	if not next: return
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		p.setAllAncestorAtFileNodesDirty()
		&lt;&lt; Move v down &gt;&gt;
		p.setAllAncestorAtFileNodesDirty()
		c.selectVnode(p)
		c.setChanged(true)
	c.endUpdate()
	c.updateSyntaxColorer(p) # Moving can change syntax coloring.</t>
<t tx="ekr.20031218072017.1769"># Remember both the before state and the after state for undo/redo
oldBack = p.back()
oldParent = p.parent()
oldN = p.childIndex()

if next.hasChildren() and next.isExpanded():
	# Attempt to move p to the first child of next.
	if c.checkMoveWithParentWithWarning(p,next,true):
		p.moveToNthChildOf(next,0)
		c.undoer.setUndoParams("Move Down",p,
			oldBack=oldBack,oldParent=oldParent,oldN=oldN)
else:
	# Attempt to move p after next.
	if c.checkMoveWithParentWithWarning(p,next.parent(),true):
		p.moveAfter(next)
		c.undoer.setUndoParams("Move Down",p,
			oldBack=oldBack,oldParent=oldParent,oldN=oldN)</t>
<t tx="ekr.20031218072017.1770">def moveOutlineLeft(self):
	
	c = self ; p = c.currentPosition()
	if not p: return

	if not c.canMoveOutlineLeft(): # 11/4/03: Support for hoist.
		if c.hoistStack: g.es("Can't move node out of hoisted outline",color="blue")
		return
	
	if not p.hasParent(): return
	# Remember both the before state and the after state for undo/redo
	parent = p.parent()
	oldBack = p.back()
	oldParent = p.parent()
	oldN = p.childIndex()
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		p.setAllAncestorAtFileNodesDirty()
		p.moveAfter(parent)
		c.undoer.setUndoParams("Move Left",p,
			oldBack=oldBack,oldParent=oldParent,oldN=oldN)
		p.setAllAncestorAtFileNodesDirty()
		c.selectVnode(p)
		c.setChanged(true)
	c.endUpdate()
	c.updateSyntaxColorer(p) # Moving can change syntax coloring.</t>
<t tx="ekr.20031218072017.1771">def moveOutlineRight(self):
	
	c = self ; p = c.currentPosition()
	if not p: return
	
	if not c.canMoveOutlineRight(): # 11/4/03: Support for hoist.
		if c.hoistStack: g.es("Can't move node out of hoisted outline",color="blue")
		return
	
	if not p.hasBack: return
	back = p.back()
	if not c.checkMoveWithParentWithWarning(p,back,true): return

	# Remember both the before state and the after state for undo/redo
	oldBack = back
	oldParent = p.parent()
	oldN = p.childIndex()
	c.beginUpdate()
	if 1: # update...
		c.endEditing()
		p.setAllAncestorAtFileNodesDirty()
		n = back.numberOfChildren()
		p.moveToNthChildOf(back,n)
		c.undoer.setUndoParams("Move Right",p,
			oldBack=oldBack,oldParent=oldParent,oldN=oldN)
		p.setAllAncestorAtFileNodesDirty()
		c.selectVnode(p)
		c.setChanged(true)
	c.endUpdate()
	c.updateSyntaxColorer(p) # Moving can change syntax coloring.</t>
<t tx="ekr.20031218072017.1772">def moveOutlineUp(self):

	c = self ; p = c.currentPosition()
	if not p: return

	if not c.canMoveOutlineUp(): # 11/4/03: Support for hoist.
		if c.hoistStack: g.es("Can't move node out of hoisted outline",color="blue")
		return
	back = p.visBack()
	if not back: return
	back2 = back.visBack()
	# A weird special case: just select back2.
	if back2 and p.v in back2.v.t.vnodeList:
		c.selectVnode(back2)
		return
	c = self
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		p.setAllAncestorAtFileNodesDirty()
		&lt;&lt; Move v up &gt;&gt;
		p.setAllAncestorAtFileNodesDirty()
		c.selectVnode(p)
		c.setChanged(true)
	c.endUpdate()
	c.updateSyntaxColorer(p) # Moving can change syntax coloring.</t>
<t tx="ekr.20031218072017.1773"># Remember both the before state and the after state for undo/redo
oldBack = p.back()
oldParent = p.parent()
oldN = p.childIndex()

if not back2:
	# p will be the new root node
	p.moveToRoot(c.rootVnode())
	c.undoer.setUndoParams("Move Up",p,
		oldBack=oldBack,oldParent=oldParent,oldN=oldN)
elif back2.hasChildren() and back2.isExpanded():
	if c.checkMoveWithParentWithWarning(p,back2,true):
		p.moveToNthChildOf(back2,0)
		c.undoer.setUndoParams("Move Up",p,
			oldBack=oldBack,oldParent=oldParent,oldN=oldN)
elif c.checkMoveWithParentWithWarning(p,back2.parent(),true):
	# Insert after back2.
	p.moveAfter(back2)
	c.undoer.setUndoParams("Move Up",p,
		oldBack=oldBack,oldParent=oldParent,oldN=oldN)</t>
<t tx="ekr.20031218072017.1774">def promote(self):

	c = self ; p = c.currentPosition()
	if not p or not p.hasChildren(): return

	last = p.lastChild()
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		after = p
		while p.hasChildren(): # Don't use an iterator.
			child = p.firstChild()
			child.moveAfter(after)
			after = child
		p.setAllAncestorAtFileNodesDirty()
		c.setChanged(true)
		c.selectVnode(p)
	c.endUpdate()
	c.undoer.setUndoParams("Promote",p,lastChild=last)
	c.updateSyntaxColorer(p) # Moving can change syntax coloring.</t>
<t tx="ekr.20031218072017.1775">Two new settings:
	
allow_clone_drags = 1
# 1: Allows control-dragging to create clones.
# 0: All drags move nodes.
# See also: look_for_control_drag_on_mouse_down
# Setting this setting to 0 allows Leo to be used on Aqua.

enable_drag_messages = 1
# 1: Tell whether drags will move nodes or clone nodes.
# 0: Don't issue such messages.</t>
<t tx="ekr.20031218072017.1776"># This precomputes numberOfVisibleNodes(), a significant optimization.
# We also indicate where findVnodeWithIconId() should start looking for tree id's.

def OnDrag(self,p,event):

	# Note: "drag" hooks handled by vnode callback routine.

	c = self.c ; v = p.v
	assert(p == self.drag_p)

	if not event:
		return

	if not self.dragging():
		windowPref = g.app.config.getBoolWindowPref
		# Only do this once: greatly speeds drags.
		self.savedNumberOfVisibleNodes = self.numberOfVisibleNodes()
		self.setDragging(true)
		if windowPref("allow_clone_drags"):
			self.controlDrag = c.frame.controlKeyIsDown
			if windowPref("look_for_control_drag_on_mouse_down"):
				if windowPref("enable_drag_messages"):
					if self.controlDrag:
						g.es("dragged node will be cloned")
					else:
						g.es("dragged node will be moved")
		else: self.controlDrag = false
		self.canvas['cursor'] = "hand2" # "center_ptr"

	self.OnContinueDrag(p,event)</t>
<t tx="ekr.20031218072017.1777">def OnEndDrag(self,p,event):
	
	"""Tree end-of-drag handler called from vnode event handler."""
	
	v = p.v
	
	# 7/10/03: Make sure we are still dragging.
	if not self.drag_p:
		return

	assert(p == self.drag_p)
	c = self.c ; canvas = self.canvas ; config = g.app.config

	if event:
		&lt;&lt; set vdrag, childFlag &gt;&gt;
		if config.getBoolWindowPref("allow_clone_drags"):
			if not config.getBoolWindowPref("look_for_control_drag_on_mouse_down"):
				self.controlDrag = c.frame.controlKeyIsDown

		if vdrag and vdrag != p:
			if self.controlDrag: # Clone v and move the clone.
				if childFlag:
					c.dragCloneToNthChildOf(p,vdrag,0)
				else:
					c.dragCloneAfter(p,vdrag)
			else: # Just drag p.
				if childFlag:
					c.dragToNthChildOf(p,vdrag,0)
				else:
					c.dragAfter(p,vdrag)
		else:
			if p and self.dragging():
				pass # g.es("not dragged: " + v.headString())
			if 0: # Don't undo the scrolling we just did!
				self.idle_scrollTo(p)
	
	# 1216/02: Reset the old cursor by brute force.
	self.canvas['cursor'] = "arrow"

	if self.drag_id:
		canvas.tag_unbind(self.drag_id,"&lt;B1-Motion&gt;")
		canvas.tag_unbind(self.drag_id,"&lt;Any-ButtonRelease-1&gt;")
		self.drag_id = None
		
	self.setDragging(false)
	self.drag_p = None</t>
<t tx="ekr.20031218072017.1778">x,y = event.x,event.y
canvas_x = canvas.canvasx(x)
canvas_y = canvas.canvasy(y)

id = self.canvas.find_closest(canvas_x,canvas_y)
vdrag = self.findVnodeWithIconId(id)
childFlag = vdrag and vdrag.hasChildren() and vdrag.isExpanded()</t>
<t tx="ekr.20031218072017.1779">@nocolor

Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=2239827
By: sanori

At line 1854 (in createOpenWithTempFile method) of src/LeoFrame.py, the
v.bodyString() is *encoded* as given encoding and saved to temporary file. But,
at line 64 (in on_idle method) of plugin/open_with.py, the string in the file,
s, is copied back to leo pane, *without decoding*.

The code in plugin/open_with.py, v.setBodyStringOrPane(s) assumes that the saved
file is encoded as UTF-8. But, if a user specifies the encoding other than UTF-8
or ASCII, it messes up the leo pane.

Therefore, the code should be changed to v.setBodyStringOrPane(s, encoding)
, I think.

Am I right?

-Sanori</t>
<t tx="ekr.20031218072017.1780"></t>
<t tx="ekr.20031218072017.1781">@nocolor

This was tricky to get right:
	
- There are several calls to after_idle(idle_body_key), so which gets scheduled is a matter of timing.  To handle that I added the tree.forceFullRedraw() routine.

- The undo/redo code also recolors the text.  Added a new param to undoRedoText so that it could force a full redraw after cut/paste.</t>
<t tx="ekr.20031218072017.1782"></t>
<t tx="ekr.20031218072017.1783"></t>
<t tx="ekr.20031218072017.1784">@nocolor

This does not take into account the following line number issues:
	
- Source lines in doc parts may be broken into shorter lines.
  The trailing newline convention determines whether trailing newlines are real or not.
- There are problems with trailing newlines in body text.
- Lines may have been inserted or deleted from the derived file.

A better way to find a given line would be as follows:
	
- Scan backward from line "n", looking for a "suitable" line for comparisons.
  This line should have a minimum number of non-whitespace characters.
- Remember the offset of this line from line "n".
- Given a "candidate" offset into a vnode, scan forward and backward
  until a matching line in the outline is found.
  (A match is not guaranteed if the derived file has been changed).</t>
<t tx="ekr.20031218072017.1785">@nocolor

Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=1928067
Open Discussion

I would like Go To Line Number to work with @file-nosent files also.

// Niklas

Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=1929033

One idea on how to do it is to tie in "Go To Line Number" to the write code
that produces the outline. This will ensure that line numbers are always perfectly
accurate. Here is a working proof-of-concept implementation for the atFile class
(I don't know enough about Leo's internals to write a "real" implementation.)

def gotoLine(self,root,n, nosentinels=false):
...c = self.commands
...self.sentinels = not nosentinels
...
...&lt;&lt; initialize &gt;&gt;
...
...# additional init
...self.startSentinelComment = ''
...
...old_os = self.os
...old_put_body = self.putBodyPart
...
...class gotoResult:
.......pass
.......
...result = gotoResult()
...result.total = 0
...result.found = false
...result.nodes = [None]
...result.node_lines = [0]

...def gotoOs(self, s):
.......result.total += s.count('\n')
.......result.node_lines[-1] += s.count('\n')
.......if result.total &gt;= n and not result.found:
...........result.found = true
...........result.lines = result.total
...........result.node = result.nodes[-1]
...........result.line = result.node_lines[-1] + result.total - n
.......
...def gotoPutBodyPart(self, v):
.......result.nodes.append(v)
.......result.node_lines.append(0)
.......old_put_body(v)
.......result.node_lines.pop()
.......result.nodes.pop()
.......
...try:
.......atFile.os = gotoOs
.......atFile.putBodyPart = gotoPutBodyPart
...
.......&lt;&lt; write then entire @file tree &gt;&gt;
.......
...finally:
.......atFile.os = old_os
.......atFile.putBodyPart = old_put_body
.......
...if result.found and result.node:
.......return (result.node, result.line)
...else:
.......return (root, 1)

the &lt;&lt;references&gt;&gt; are cloned from the write node.

// Niklas
</t>
<t tx="ekr.20031218072017.1786">@language c
@ignore
@color</t>
<t tx="ekr.20031218072017.1787">@first line 5
line6
line7
&lt;&lt; ref &gt;&gt;
line 17
line 18</t>
<t tx="ekr.20031218072017.1788">ref line 12
ref line 13</t>
<t tx="ekr.20031218072017.1789">@first line 1
line6
line7
&lt;&lt; ref &gt;&gt;
line 9
line 10</t>
<t tx="ekr.20031218072017.1790">ref line 15
ref line 16
</t>
<t tx="ekr.20031218072017.1791"></t>
<t tx="ekr.20031218072017.1792">@nocolor

The old code gets this done with some pretty ugly code.

@color</t>
<t tx="ekr.20031218072017.1793"></t>
<t tx="ekr.20031218072017.1794"></t>
<t tx="ekr.20031218072017.1795">@nocolor

I just installed the latest version of Leo and I haven't yet forced it  
to run without a terminal window so I was able to see why I can't  
change my language preference.  Here's why:

Exception in Tkinter callback
Traceback (most recent call last):
   File  
"/Library/Frameworks/Python.framework/Versions/2.3/lib/python2.3/lib- 
tk/Tkinter.py", line 1345, in __call__
     return self.func(*args)
   File "/usr/local/lib/leo/src/leoPrefs.py", line 313, in set_lang
     c = top() ; v = c.currentVnode()
AttributeError: 'NoneType' object has no attribute 'currentVnode'
</t>
<t tx="ekr.20031218072017.1796"></t>
<t tx="ekr.20031218072017.1797">#class level-code after the method definitions was being dropped.

class someclass:
	def __init__(self):
		pass

	# this code is dropped
	class_var = None

def some_proc():
	pass</t>
<t tx="ekr.20031218072017.1798"></t>
<t tx="ekr.20031218072017.1799">@nocolor

By: szemengtan ( Sze Meng Tan ) 
 Remove Sentinels command in version 4   
2003-10-15 07:41  

 I am running Leo version 4 beta 4 under Windows XP and am unable to get the Remove Sentinels command under the Export menu to work correctly. Although the program reports the creation of the output file with a .txt extension, the resulting output file is blank. This command appears to work correctly in version 3.12.

Best regards,

Sze Tan</t>
<t tx="ekr.20031218072017.1800"></t>
<t tx="ekr.20031218072017.1801">def __init__(self,title):

	# Init the base class.
	leoFrame.leoFrame.__init__(self)

	self.title = title
	leoTkinterFrame.instances += 1
	self.c = None # Set in finishCreate.

	&lt;&lt; set the leoTkinterFrame ivars &gt;&gt;
</t>
<t tx="ekr.20031218072017.1802"># Created in createLeoFrame and its allies.
self.top = None
self.tree = None
self.f1 = self.f2 = None
self.log = None  ; self.logBar = None
self.body = None ; self.bodyCtrl = None ; self.bodyBar = None ; self.bodyXBar = None
self.canvas = None ; self.treeBar = None
self.splitter1 = self.splitter2 = None
self.icon = None
self.outerFrame = None # 5/20/02
self.iconFrame = None # 5/20/02
self.statusFrame = None # 5/20/02
self.statusText = None # 5/20/02
self.statusLabel = None # 5/20/02

# Used by event handlers...
self.redrawCount = 0
self.draggedItem = None
self.controlKeyIsDown = false # For control-drags
self.revertHeadline = None # Previous headline text for abortEditLabel.</t>
<t tx="ekr.20031218072017.1803"># Contributed by Tomaz Ficko.  This works on some systems.
# On XP it causes a crash in tcl83.dll.  Clearly a Tk bug.

def OnMouseWheel(self, event=None):
	
	g.trace()

	try:
		if event.delta &lt; 1:
			self.canvas.yview(Tkinter.SCROLL, 1, Tkinter.UNITS)
		else:
			self.canvas.yview(Tkinter.SCROLL, -1, Tkinter.UNITS)
	except:
		g.es_event_exception("scroll wheel")

	return "break"</t>
<t tx="ekr.20031218072017.1804"></t>
<t tx="ekr.20031218072017.1805"></t>
<t tx="ekr.20031218072017.1806"></t>
<t tx="ekr.20031218072017.1807"></t>
<t tx="ekr.20031218072017.1808">@nocolor


@color</t>
<t tx="ekr.20031218072017.1809">def importDerivedFile (self):
	
	"""Create a new outline from a 4.0 derived file."""
	
	c = self ; frame = c.frame ; v = c.currentVnode()
	
	types = [
		("All files","*"),
		("C/C++ files","*.c"),
		("C/C++ files","*.cpp"),
		("C/C++ files","*.h"),
		("C/C++ files","*.hpp"),
		("Java files","*.java"),
		("Pascal files","*.pas"),
		("Python files","*.py") ]
	
	fileName = g.app.gui.runOpenFileDialog(
		title="Import Derived File",
		filetypes=types,
		defaultextension=".leo")

	if fileName:
		c.importCommands.importDerivedFiles(v,fileName)
	
	if 0: # old code: very non-intuitive.
		if v.isAtFileNode():
			fileName = v.atFileNodeName()
			c.importCommands.importDerivedFiles(v,fileName)
		else:
			g.es("not an @file node",color="blue")</t>
<t tx="ekr.20031218072017.1810">def importDerivedFiles (self,parent,fileName):
	
	c = self.c ; at = c.atFileCommands
	current = c.currentVnode()
	
	c.beginUpdate()
	v = parent.insertAfter()
	v.initHeadString("Imported @file " + fileName)
	c.undoer.setUndoParams("Import",v,select=current)
	at.read(v,importFileName=fileName)
	c.selectVnode(v)
	v.expand()
	c.endUpdate()
</t>
<t tx="ekr.20031218072017.1811">def createImportedNode (self,root,c,headline):
	
	at = self

	if at.importRootSeen:
		p = root.insertAsLastChild()
		p.initHeadString(headline)
	else:
		# Put the text into the already-existing root node.
		p = root
		at.importRootSeen = true
		
	p.v.t.setVisited() # Suppress warning about unvisited node.
	return p</t>
<t tx="ekr.20031218072017.1812"># The caller has enclosed this code in beginUpdate/endUpdate.

def read(self,root,importFileName=None):
	
	"""Common read logic for any derived file."""
	
	at = self ; c = at.c
	at.errors = 0
	at.scanDefaultDirectory(root)
	if at.errors: return
	&lt;&lt; set fileName from root and importFileName &gt;&gt;
	&lt;&lt; open file or return false &gt;&gt;
	g.es("reading: " + root.headString())
	firstLines,read_new = at.scanHeader(file,fileName)
	df = g.choose(read_new,at.new_df,at.old_df)
	# g.trace(g.choose(df==at.new_df,"new","old"))
	# import traceback ; traceback.print_stack()
	&lt;&lt; copy ivars to df &gt;&gt;
	root.clearVisitedInTree()
	try:
		# 1/28/04: Don't set comment delims when importing.
		# 1/28/04: Call scanAllDirectives here, not in readOpenFile.
		importing = importFileName is not None
		df.scanAllDirectives(root,importing=importing)
		df.readOpenFile(root,file,firstLines)
	except:
		at.error("Unexpected exception while reading derived file")
		g.es_exception()
	file.close()
	root.clearDirty() # May be set dirty below.
	after = root.nodeAfterTree()
	&lt;&lt; warn about non-empty unvisited nodes &gt;&gt;
	if df.errors == 0:
		if not df.importing:
			&lt;&lt; copy all tempBodyStrings to tnodes &gt;&gt;
	&lt;&lt; delete all tempBodyStrings &gt;&gt;
	return df.errors == 0</t>
<t tx="ekr.20031218072017.1813">if importFileName:
	fileName = importFileName
elif root.isAtFileNode():
	fileName = root.atFileNodeName()
else:
	fileName = root.atRawFileNodeName()
	
if not fileName:
	at.error("Missing file name.  Restoring @file tree from .leo file.")
	return false</t>
<t tx="ekr.20031218072017.1814">fn = g.os_path_join(at.default_directory,fileName)
fn = g.os_path_normpath(fn)

try:
	# 11/4/03: open the file in binary mode to allow 0x1a in bodies &amp; headlines.
	file = open(fn,'rb')
	if file:
		&lt;&lt; warn on read-only file &gt;&gt;
	else: return false
except:
	at.error("Can not open: " + '"@file ' + fn + '"')
	root.setDirty()
	return false</t>
<t tx="ekr.20031218072017.1815">try:
	read_only = not os.access(fn,os.W_OK)
	if read_only:
		g.es("read only: " + fn,color="red")
except:
	pass # os.access() may not exist on all platforms.</t>
<t tx="ekr.20031218072017.1816">df.importing = importFileName != None
df.importRootSeen = false

# Set by scanHeader.
df.encoding = at.encoding
df.endSentinelComment = at.endSentinelComment
df.startSentinelComment = at.startSentinelComment

# Set other common ivars.
df.errors = 0
df.file = file
df.targetFileName = fileName
df.indent = 0
df.raw = false
df.root = root
df.root_seen = false
</t>
<t tx="ekr.20031218072017.1817">for p in root.subtree_iter():

	try: s = p.v.t.tempBodyString
	except: s = ""
	if s and not p.v.t.isVisited():
		at.error("Not in derived file:" + p.headString())
		p.v.t.setVisited() # One message is enough.</t>
<t tx="ekr.20031218072017.1818">for p in root.subtree_iter():
	try: s = p.v.t.tempBodyString
	except: s = ""
	if s != p.bodyString():
		g.es("changed: " + p.headString(),color="blue")
		if 0: # For debugging.
			print ; print "changed: " + p.headString()
			print ; print "new:",`s`
			print ; print "old:",`p.bodyString()`
		p.setBodyStringOrPane(s) # Sets v and v.c dirty.
		p.setMarked()</t>
<t tx="ekr.20031218072017.1819">for p in c.allNodes_iter():
	if hasattr(p.v.t,"tempBodyString"):
		delattr(p.v.t,"tempBodyString")</t>
<t tx="ekr.20031218072017.1820"></t>
<t tx="ekr.20031218072017.1821">def convertBlanks (self,setUndoParams=true):

	c = self ; body = c.frame.body
	
	if g.app.batchMode:
		c.notValidInBatchMode("Convert Blanks")
		return false

	head,lines,tail,oldSel,oldYview = c.getBodyLines(expandSelection=true)
	result = [] ; changed = false

	# Use the relative @tabwidth, not the global one.
	dict = g.scanDirectives(c)
	tabWidth  = dict.get("tabwidth")
	if not tabWidth: return false

	for line in lines:
		s = g.optimizeLeadingWhitespace(line,tabWidth)
		if s != line: changed = true
		result.append(s)

	if changed:
		result = string.join(result,'\n')
		undoType = g.choose(setUndoParams,"Convert Blanks",None)
		c.updateBodyPane(head,result,tail,undoType,oldSel,oldYview) # Handles undo

	return changed</t>
<t tx="ekr.20031218072017.1822">def convertTabs (self,setUndoParams=true):

	c = self ; body = c.frame.body
	
	if g.app.batchMode:
		c.notValidInBatchMode("Convert Tabs")
		return false

	head,lines,tail,oldSel,oldYview = self.getBodyLines(expandSelection=true)
	result = [] ; changed = false
	
	# Use the relative @tabwidth, not the global one.
	dict = g.scanDirectives(c)
	tabWidth  = dict.get("tabwidth")
	if not tabWidth: return false

	for line in lines:
		i,w = g.skip_leading_ws_with_indent(line,0,tabWidth)
		s = g.computeLeadingWhitespace(w,-abs(tabWidth)) + line[i:] # use negative width.
		if s != line: changed = true
		result.append(s)

	if changed:
		result = string.join(result,'\n')
		undoType = g.choose(setUndoParams,"Convert Tabs",None)
		c.updateBodyPane(head,result,tail,undoType,oldSel,oldYview) # Handles undo
		
	return changed
</t>
<t tx="ekr.20031218072017.1823">def createLastChildNode (self,parent,headline,body):
	
	c = self
	if body and len(body) &gt; 0:
		body = string.rstrip(body)
	if not body or len(body) == 0:
		body = ""
	v = parent.insertAsLastChild()
	v.initHeadString(headline)
	v.t.setTnodeText(body)
	v.setDirty()
	c.validateOutline()</t>
<t tx="ekr.20031218072017.1824">def dedentBody (self):
	
	c = self
	
	if g.app.batchMode:
		c.notValidInBatchMode("Unindent")
		return

	head,lines,tail,oldSel,oldYview = self.getBodyLines()
	result = [] ; changed = false
	for line in lines:
		i, width = g.skip_leading_ws_with_indent(line,0,c.tab_width)
		s = g.computeLeadingWhitespace(width-abs(c.tab_width),c.tab_width) + line[i:]
		if s != line: changed = true
		result.append(s)

	if changed:
		result = string.join(result,'\n')
		c.updateBodyPane(head,result,tail,"Undent",oldSel,oldYview)</t>
<t tx="ekr.20031218072017.1825">def findBoundParagraph (self):
	
	c = self
	head,ins,tail = c.frame.body.getInsertLines()

	if not ins or ins.isspace() or ins[0] == '@':
		return None,None,None,None # DTHEIN 18-JAN-2004
		
	head_lines = g.splitLines(head)
	tail_lines = g.splitLines(tail)

	if 0:
		&lt;&lt; trace head_lines, ins, tail_lines &gt;&gt;

	# Scan backwards.
	i = len(head_lines)
	while i &gt; 0:
		i -= 1
		line = head_lines[i]
		if len(line) == 0 or line.isspace() or line[0] == '@':
			i += 1 ; break

	pre_para_lines = head_lines[:i]
	para_head_lines = head_lines[i:]

	# Scan forwards.
	i = 0
	trailingNL = false # DTHEIN 18-JAN-2004: properly capture terminating NL
	while i &lt; len(tail_lines):
		line = tail_lines[i]
		if len(line) == 0 or line.isspace() or line[0] == '@':
			trailingNL = line.endswith(u'\n') or line.startswith(u'@') # DTHEIN 21-JAN-2004
			break
		i += 1
		
#	para_tail_lines = tail_lines[:i]
	para_tail_lines = tail_lines[:i]
	post_para_lines = tail_lines[i:]
	
	head = g.joinLines(pre_para_lines)
	result = para_head_lines 
	result.extend([ins])
	result.extend(para_tail_lines)
	tail = g.joinLines(post_para_lines)

	# DTHEIN 18-JAN-2004: added trailingNL to return value list
	return head,result,tail,trailingNL # string, list, string, bool</t>
<t tx="ekr.20031218072017.1826">if 0:
	print ; print "head_lines"
	for line in head_lines: print `line`
	print ; print "ins", `ins`
	print ; print "tail_lines"
	for line in tail_lines: print `line`
else:
	g.es("head_lines: " + `head_lines`)
	g.es("ins: ", `ins`)
	g.es("tail_lines: " + `tail_lines`)
</t>
<t tx="ekr.20031218072017.1827">def findMatchingBracket (self):
	
	c = self ; body = c.frame.body
	
	if g.app.batchMode:
		c.notValidInBatchMode("Match Brackets")
		return

	brackets = "()[]{}&lt;&gt;"
	ch1 = body.getCharBeforeInsertPoint()
	ch2 = body.getCharAtInsertPoint()

	# Prefer to match the character to the left of the cursor.
	if ch1 in brackets:
		ch = ch1 ; index = body.getBeforeInsertionPoint()
	elif ch2 in brackets:
		ch = ch2 ; index = body.getInsertionPoint()
	else:
		return
	
	index2 = self.findSingleMatchingBracket(ch,index)
	if index2:
		if body.compareIndices(index,"&lt;=",index2):
			adj_index = body.adjustIndex(index2,1)
			body.setTextSelection(index,adj_index)
		else:
			adj_index = body.adjustIndex(index,1)
			body.setTextSelection(index2,adj_index)
		adj_index = body.adjustIndex(index2,1)
		body.setInsertionPoint(adj_index)
		body.makeIndexVisible(adj_index)
	else:
		g.es("unmatched " + `ch`)</t>
<t tx="ekr.20031218072017.1828"># To do: replace comments with blanks before scanning.
# Test  unmatched())
def findSingleMatchingBracket(self,ch,index):
	
	c = self ; body = c.frame.body
	open_brackets  = "([{&lt;" ; close_brackets = ")]}&gt;"
	brackets = open_brackets + close_brackets
	matching_brackets = close_brackets + open_brackets
	forward = ch in open_brackets
	# Find the character matching the initial bracket.
	for n in xrange(len(brackets)):
		if ch == brackets[n]:
			match_ch = matching_brackets[n]
			break
	level = 0
	while 1:
		if forward and body.compareIndices(index,"&gt;=","end"):
			# g.trace("not found")
			return None
		ch2 = body.getCharAtIndex(index)
		if ch2 == ch:
			level += 1 #; g.trace(level,index)
		if ch2 == match_ch:
			level -= 1 #; g.trace(level,index)
			if level &lt;= 0:
				return index
		if not forward and body.compareIndices(index,"&lt;=","1.0"):
			# g.trace("not found")
			return None
		adj = g.choose(forward,1,-1)
		index = body.adjustIndex(index,adj)
	return 0 # unreachable: keeps pychecker happy.
# Test  (
# ([(x){y}]))
# Test  ((x)(unmatched</t>
<t tx="ekr.20031218072017.1829">def getBodyLines (self,expandSelection=false):

	c = self ; body = c.frame.body
	oldVview = body.getYScrollPosition()
	oldSel   = body.getTextSelection()

	if expandSelection: # 12/3/03
		lines = body.getAllText()
		head = tail = None
	else:
		# Note: lines is the entire line containing the insert point if no selection.
		head,lines,tail = body.getSelectionLines()

	lines = string.split(lines,'\n') # It would be better to use splitLines.

	return head,lines,tail,oldSel,oldVview</t>
<t tx="ekr.20031218072017.1830">def indentBody (self):

	c = self
	
	if g.app.batchMode:
		c.notValidInBatchMode("Indent")
		return

	head,lines,tail,oldSel,oldYview = self.getBodyLines()
	result = [] ; changed = false
	for line in lines:
		i, width = g.skip_leading_ws_with_indent(line,0,c.tab_width)
		s = g.computeLeadingWhitespace(width+abs(c.tab_width),c.tab_width) + line[i:]
		if s != line: changed = true
		result.append(s)
	if changed:
		result = string.join(result,'\n')
		c.updateBodyPane(head,result,tail,"Indent",oldSel,oldYview)</t>
<t tx="ekr.20031218072017.1831">def insertBodyTime (self):
	
	c = self ; v = c.currentVnode()
	
	if g.app.batchMode:
		c.notValidInBatchMode("xxx")
		return
	
	oldSel = c.frame.body.getTextSelection()
	c.frame.body.deleteTextSelection() # Works if nothing is selected.
	s = self.getTime(body=true)
	c.frame.body.insertAtInsertPoint(s)
	c.frame.body.onBodyChanged(v,"Typing",oldSel=oldSel)</t>
<t tx="ekr.20031218072017.1832">def getTime (self,body=true):

	config = g.app.config
	default_format =  "%m/%d/%Y %H:%M:%S" # E.g., 1/30/2003 8:31:55
	
	# Try to get the format string from leoConfig.txt.
	if body:
		format = config.getWindowPref("body_time_format_string")
		gmt = config.getBoolWindowPref("body_gmt_time")
	else:
		format = config.getWindowPref("headline_time_format_string")
		gmt = config.getBoolWindowPref("headline_gmt_time")

	if format == None:
		format = default_format

	try:
		if gmt:
			s = time.strftime(format,time.gmtime())
		else:
			s = time.strftime(format,time.localtime())
	except:
		g.es_exception() # Probably a bad format string in leoConfig.txt.
		s = time.strftime(default_format,time.gmtime())
	return s
</t>
<t tx="ekr.20031218072017.1833">def reformatParagraph(self):

	"""Reformat a text paragraph in a Tk.Text widget

Wraps the concatenated text to present page width setting. Leading tabs are
sized to present tab width setting. First and second line of original text is
used to determine leading whitespace in reformatted text. Hanging indentation
is honored.

Paragraph is bound by start of body, end of body, blank lines, and lines
starting with "@". Paragraph is selected by position of current insertion
cursor."""

	c = self ; body = c.frame.body ; v = c.currentVnode()
	
	if g.app.batchMode:
		c.notValidInBatchMode("xxx")
		return

	if body.hasTextSelection():
		g.es("Text selection inhibits Reformat Paragraph",color="blue")
		return

	&lt;&lt; compute vars for reformatParagraph &gt;&gt;
	if lines:
		&lt;&lt; compute the leading whitespace &gt;&gt;
		&lt;&lt; compute the result of wrapping all lines &gt;&gt;
		&lt;&lt; update the body, selection &amp; undo state &gt;&gt;</t>
<t tx="ekr.20031218072017.1834">dict = g.scanDirectives(c)
pageWidth = dict.get("pagewidth")
tabWidth  = dict.get("tabwidth")

original = body.getAllText()
oldSel   = body.getTextSelection()
oldYview = body.getYScrollPosition()
head,lines,tail,trailingNL = c.findBoundParagraph() # DTHEIN 18-JAN-2004: add trailingNL</t>
<t tx="ekr.20031218072017.1835">indents = [0,0] ; leading_ws = ["",""]

for i in (0,1):
	if i &lt; len(lines):
		# Use the original, non-optimized leading whitespace.
		leading_ws[i] = ws = g.get_leading_ws(lines[i])
		indents[i] = g.computeWidth(ws,tabWidth)
		
indents[1] = max(indents)
if len(lines) == 1:
	leading_ws[1] = leading_ws[0]
</t>
<t tx="ekr.20031218072017.1836"># Remember whether the last line ended with a newline.
lastLine = lines[-1]
if 0: # DTHEIN 18-JAN-2004: removed because findBoundParagraph now gives trailingNL
	trailingNL = lastLine and lastLine[-1] == '\n'

# Remove any trailing newlines for wraplines.
lines = [line[:-1] for line in lines[:-1]]
if lastLine and not trailingNL:
	lastLine = lastLine[:-1]
lines.extend([lastLine])

# Wrap the lines, decreasing the page width by indent.
result = g.wrap_lines(lines,
	pageWidth-indents[1],
	pageWidth-indents[0])

# DTHEIN 	18-JAN-2004
# prefix with the leading whitespace, if any
paddedResult = []
paddedResult.append(leading_ws[0] + result[0])
for line in result[1:]:
	paddedResult.append(leading_ws[1] + line)

# Convert the result to a string.
result = '\n'.join(paddedResult) # DTHEIN 	18-JAN-2004: use paddedResult
if 0: # DTHEIN 18-JAN-2004:  No need to do this.
	if trailingNL:
		result += '\n'
</t>
<t tx="ekr.20031218072017.1837">sel_start, sel_end = body.setSelectionAreas(head,result,tail)

changed = original != head + result + tail
undoType = g.choose(changed,"Reformat Paragraph",None)
body.onBodyChanged(v,undoType,oldSel=oldSel,oldYview=oldYview)

# Advance the selection to the next paragraph.
newSel = sel_end, sel_end
body.setTextSelection(newSel)
body.makeIndexVisible(sel_end)

c.recolor()</t>
<t tx="ekr.20031218072017.1838">def updateBodyPane (self,head,middle,tail,undoType,oldSel,oldYview,setSel=true):
	
	c = self ; body = c.frame.body ; v = c.currentVnode()

	# Update the text and notify the event handler.
	body.setSelectionAreas(head,middle,tail)

	if setSel:
		body.setTextSelection(oldSel)

	body.onBodyChanged(v,undoType,oldSel=oldSel,oldYview=oldYview)

	# Update the changed mark and icon.
	c.setChanged(true)
	c.beginUpdate()
	if not v.isDirty():
		v.setDirty()
	c.endUpdate()

	# Scroll as necessary.
	if oldYview:
		body.setYScrollPosition(oldYview)
	else:
		body.makeInsertPointVisible()

	body.setFocus()
	c.recolor()</t>
<t tx="ekr.20031218072017.1839">def readAtFileNodes (self):

	c = self ; v = c.currentVnode()

	# Create copy for undo.
	v_copy = c.undoer.saveTree(v)
	oldText = c.frame.body.getAllText()
	oldSel = c.frame.body.getTextSelection()

	c.fileCommands.readAtFileNodes()

	newText = c.frame.body.getAllText()
	newSel = c.frame.body.getTextSelection()

	c.undoer.setUndoParams("Read @file Nodes",
		v,select=v,oldTree=v_copy,
		oldText=oldText,newText=newText,
		oldSel=oldSel,newSel=newSel)</t>
<t tx="ekr.20031218072017.1840">@nocolor

What I did:

v.copyTree isn't enough to save undo info: it doesn't create new tnodes.  Alas, it can't create new tnodes because of clones.  Therefore, I replaced v.copyTree with c.undoer.copyTree(v).

The undoer must save and restore any tnodeList and unknownAttribute ivars.  Failure to restore tnodeList ivars will cause problems when @file nodes are written.

@color</t>
<t tx="ekr.20031218072017.1841">C:\prog\leoCVS\leo&gt;c:\python23\python src\leo.py test\test.leo
Text encoding = cp1252
4 plugins loaded, 39 examined
C:\prog\leoCVS\leo&gt;t

C:\prog\leoCVS\leo&gt;cd c:\prog\LeoCVS\leo

Did Extract Section Names command, then undo:

C:\prog\leoCVS\leo&gt;c:\python23\python src\leo.py test\test.leo
Text encoding = cp1252
4 plugins loaded, 39 examined
exception executing command
Traceback (most recent call last):
  File "C:\prog\leoCVS\leo\src\leoFrame.py", line 1598, in doCommand
    command(event)
  File "C:\prog\leoCVS\leo\src\leoFrame.py", line 2428, in OnUndo
    self.commands.undoer.undo()
  File "c:\prog\leoCVS\leo\src\leoUndo.py", line 801, in undo
    u.v = self.undoReplace(u.v,u.oldTree,u.oldText)
  File "c:\prog\leoCVS\leo\src\leoUndo.py", line 998, in undoReplace
    assert(new_v in joinList)
AssertionError
</t>
<t tx="ekr.20031218072017.1842">Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=2231060
By: riotnrrrd



</t>
<t tx="ekr.20031218072017.1843">import sys,string
print sys.version
print u'\xa6' in string.ascii_letters
print u'\xa6' in string.letters # fails _sometimes_</t>
<t tx="ekr.20031218072017.1844">With Python 2.2 (on Linux) it works, still no luck with 2.3: starting with no
.leo file specified, the window opens, but typing any letter in the body pane
produces the log:

---
UnicodeDecodeError: 'ascii' codec can't decode byte 0xa6 in position 52: ordinal
not in range(128)
---

and the traceback:

---
Traceback (most recent call last):
  File "/home/opt/leo/leo-4.0-b3/src/leoColor.py", line 1464,
in colorizeAnyLanguage
    state = self.colorizeLine(new_lines[i],state)
  File "/home/opt/leo/leo-4.0-b3/src/leoColor.py", line 1580, in colorizeLine
    i,state = func(s,i)
  File "/home/opt/leo/leo-4.0-b3/src/leoColor.py", line 1829, in doNormalState
    if ch in string.ascii_letters or ch == '_' or (
UnicodeDecodeError: 'ascii' codec can't decode byte 0xa6 in position 52: ordinal
not in range(128)
---</t>
<t tx="ekr.20031218072017.1845"></t>
<t tx="ekr.20031218072017.1846">Starting with leoConfig.leo the window opens for a second, then dies, and the
following traceback is produced:

Traceback (most recent call last):
  File "/home/opt/leo/leo-4.0-b3/src/leoGlobals.py", line 743, in
openWithFileName
    frame.commands.fileCommands.open(file,fileName) # closes file.
  File "/home/opt/leo/leo-4.0-b3/src/leoFileCommands.py", line 999, in open
    ok, ratio = self.getLeoFile(self.frame,fileName,atFileNodesFlag=true)
  File "/home/opt/leo/leo-4.0-b3/src/leoFileCommands.py", line 493, in
getLeoFile
    c.selectVnode(c.frame.currentVnode()) # load body pane
  File "/home/opt/leo/leo-4.0-b3/src/leoCommands.py", line 2124, in selectVnode
    c.frame.select(v,updateBeadList)
  File "/home/opt/leo/leo-4.0-b3/src/leoFrame.py", line 636, in select
    def select(self,v,updateBeadList=true): return self.tree.select(v,updateBeadList)
  File "/home/opt/leo/leo-4.0-b3/src/leoTree.py", line 2220, in select
    frame.setWrap(v)
  File "/home/opt/leo/leo-4.0-b3/src/leoFrame.py", line 559, in setWrap
    dict = scanDirectives(c,v)
  File "/home/opt/leo/leo-4.0-b3/src/leoGlobals.py", line 590, in scanDirectives
dict = get_directives_dict(s)
  File "/home/opt/leo/leo-4.0-b3/src/leoGlobals.py", line 409, in
get_directives_dict
    j = skip_c_id(s,i+1)
  File "/home/opt/leo/leo-4.0-b3/src/leoGlobals.py", line 2736, in skip_c_id
    if c in string.letters or c in string.digits or c == '_':
UnicodeDecodeError: 'ascii' codec can't decode byte 0xa6 in position 52: ordinal
not in range(128)


Traceback (most recent call last):
  File "./leo.py", line 177, in ?
    run(fileName)
  File "./leo.py", line 62, in run
    c,frame = createFrame(fileName)
  File "./leo.py", line 131, in createFrame
    c,frame = app.gui.newLeoCommanderAndFrame(fileName=None)
  File "/home/opt/leo/leo-4.0-b3/src/leoGui.py", line 90, in
newLeoCommanderAndFrame
    frame.finishCreate(c)
  File "/home/opt/leo/leo-4.0-b3/src/leoFrame.py", line 146, in finishCreate
    self.signOnWithVersion()
  File "/home/opt/leo/leo-4.0-b3/src/leoFrame.py", line 101,
in signOnWithVersion
    es("Leo Log Window...",color=color)
  File "/home/opt/leo/leo-4.0-b3/src/leoGlobals.py", line 2049, in es
    log.put(s,color=color)
  File "/home/opt/leo/leo-4.0-b3/src/leoFrame.py", line 963, in put
    self.log.insert("end",s)
  File "/usr/lib/python2.3/lib-tk/Tkinter.py", line 2894, in insert
    self.tk.call((self._w, 'insert', index, chars) + args)
_tkinter.TclError: invalid command name
".1076707404.1076707500.1076707692.1076707532.1076707756.1076707564.log"</t>
<t tx="ekr.20031218072017.1847">def setLog (self,log,tag=""):
	"""set the frame to which log messages will go"""
	
	# print "setLog:",tag,"locked:",self.logIsLocked,`log`
	if not self.logIsLocked:
		self.log = log
		
def lockLog(self):
	"""Disable changes to the log"""
	self.logIsLocked = true
	
def unlockLog(self):
	"""Enable changes to the log"""
	self.logIsLocked = false</t>
<t tx="ekr.20031218072017.1848"></t>
<t tx="ekr.20031218072017.1849">@nocolor

** scanDirectives just uses v.t.bodyString.
	This looks wrong.  It should call v.bodyString(), and v.bodyString should assert(isUnicode(result))

- Move Text selection code from leoGlobals to leoGui.

- Make sure getpreferredencoding in leoGlobals isn't a problem.

** The code is full of Tk idioms.  Somehow these have to be abstracted away.
	- getSelectedCharacter
	- getSelectedLine
	etc.

Search for t.get, text.get, etc.

Search for t.bodyString (or just bodyString??)</t>
<t tx="ekr.20031218072017.1850">@nocolor

1. Called getAllText in the following routines:

colorizeAnyLanguage
convertAllBlanks,convertAllTabs,extract,extractSection,extractSectionNames
OnExecuteScript

2. Called getSelectedText in the following routines:

OnExecuteScript

3. Called x = toUnicode(s,app.tkEncoding) in the following routines after a call to t.get(...)

getBodyLines,reformatParagraph
OnReturnKey
OnFindMatchingBracket,findMatchingBracket
updateStatusRowCol
changeAll,findAll
&lt;&lt; test for whole word match &gt;&gt;</t>
<t tx="ekr.20031218072017.1851">Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=2212611
By: riotnrrrd

@nocolor

Sorry about the delay, I switched back to 2.2 for Leo and pretty much forgot
all about this.

Anyway, here goes:

System is Linux and using Leo 4.0b1 (though things seemed similar with 3.12).
Using Python 2.2 works fine, but with 2.3 I get the following (fresh install
of Leo, no changes to leoConfig.leo):

Opening without a .leo file:

Everything seems normal first but when I type a non-ascii character, the following
shows up in the log window:

-----
UnicodeDecodeError: 'ascii' codec can't decode byte 0xa6 in position 52: ordinal
not in range(128)
-----

and the following traceback:








______________________________________________________________________
You are receiving this email because you elected to monitor this forum.
To stop monitoring this forum, login to SourceForge.net and visit: 
https://sourceforge.net/forum/unmonitor.php?forum_id=10226</t>
<t tx="ekr.20031218072017.1852">Traceback (most recent call last):
  File "/home/opt/leo/leo-4.0-b1/src/leoColor.py", line 1460,
in colorizeAnyLanguage
    state = self.colorizeLine(new_lines[i],state)
  File "/home/opt/leo/leo-4.0-b1/src/leoColor.py", line 1576, in colorizeLine
    i,state = func(s,i)
  File "/home/opt/leo/leo-4.0-b1/src/leoColor.py", line 1825, in doNormalState
    if ch in string.letters or ch == '_' or (

UnicodeDecodeError: 'ascii' codec can't decode byte 0xa6 in position 52: ordinal
not in range(128)
</t>
<t tx="ekr.20031218072017.1853">When I open leo with leoConfig.leo, I get 

Leo Log Window...
Leo 4.0 beta 1, Python 2.3.0, Tk 8.4.4

reading: /home/opt/leo/leo-4.0-b1/config/leoConfig.leo
exceptions opening/home/opt/leo/leo-4.0-b1/config/leoConfig.leo

UnicodeDecodeError: 'ascii' codec can't decode byte 0xa6 in position 52: ordinal
not in range(128)

Leo Log Window...
Leo 4.0 beta 1, Python 2.3.0, Tk 8.4.4

File not found: /home/opt/leo/leo-4.0-b1/config/leoConfig.leo

in the log window and the traceback:

Traceback (most recent call last):
  File "/home/opt/leo/leo-4.0-b1/src/leoGlobals.py", line 972, in openWithFileName
    frame.commands.fileCommands.open(file,fileName) # closes file.

  File "/home/opt/leo/leo-4.0-b1/src/leoFileCommands.py", line 953, in open
    ok, ratio = self.getLeoFile(self.frame,fileName,atFileNodesFlag=true)

  File "/home/opt/leo/leo-4.0-b1/src/leoFileCommands.py", line 462, in getLeoFile
    c.selectVnode(c.tree.currentVnode) # load body pane

  File "/home/opt/leo/leo-4.0-b1/src/leoCommands.py", line 2120, in selectVnode
    c.tree.select(v,updateBeadList)

  File "/home/opt/leo/leo-4.0-b1/src/leoTree.py", line 1909, in select
    frame.setWrap(v)

  File "/home/opt/leo/leo-4.0-b1/src/leoFrame.py", line 559, in setWrap
    dict = scanDirectives(c,v)

  File "/home/opt/leo/leo-4.0-b1/src/leoGlobals.py", line 752, in scanDirectives
dict = get_directives_dict(s)

  File "/home/opt/leo/leo-4.0-b1/src/leoGlobals.py", line 569, in
get_directives_dict
    j = skip_c_id(s,i+1)

  File "/home/opt/leo/leo-4.0-b1/src/leoGlobals.py", line 2901, in skip_c_id
    if c in string.letters or c in string.digits or c == '_':

UnicodeDecodeError: 'ascii' codec can't decode byte 0xa6 in position 52: ordinal
not in range(128)</t>
<t tx="ekr.20031218072017.1854">and a new Leo window opens. When I click another node, I don't get moved there,
but get the following:

exception handling , activate tree,  event
UnicodeDecodeError: 'ascii' codec can't decode byte 0xa6 in position 52: ordinal
not in range(128)

in log, and the traceback:

Traceback (most recent call last):
  File "/home/opt/leo/leo-4.0-b1/src/leoTree.py", line 748, in OnActivate
    self.select(v)

  File "/home/opt/leo/leo-4.0-b1/src/leoTree.py", line 1909, in select
    frame.setWrap(v)

  File "/home/opt/leo/leo-4.0-b1/src/leoFrame.py", line 559, in setWrap
    dict = scanDirectives(c,v)

  File "/home/opt/leo/leo-4.0-b1/src/leoGlobals.py", line 752, in scanDirectives
dict = get_directives_dict(s)

  File "/home/opt/leo/leo-4.0-b1/src/leoGlobals.py", line 569, in
get_directives_dict
    j = skip_c_id(s,i+1)

  File "/home/opt/leo/leo-4.0-b1/src/leoGlobals.py", line 2901, in skip_c_id
    if c in string.letters or c in string.digits or c == '_':

UnicodeDecodeError: 'ascii' codec can't decode byte 0xa6 in position 52: ordinal
not in range(128)
</t>
<t tx="ekr.20031218072017.1855"></t>
<t tx="ekr.20031218072017.1856">def setDefaultIcon(self):
	
	"""Set the icon to be used in all Leo windows.
	
	This code does nothing for Tk versions before 8.4.3."""
	
	gui = self

	try:
		version = gui.root.getvar("tk_patchLevel")
		if g.CheckVersion(version,"8.4.3") and sys.platform == "win32": # 12/2/03
			# tk 8.4.3 or greater: load a 16 by 16 icon.
			path = g.os_path_join(g.app.loadDir,"..","Icons")
			if g.os_path_exists(path):
				file = g.os_path_join(path,"LeoApp16.ico")
				if g.os_path_exists(path):
					self.bitmap = Tkinter.BitmapImage(file)
				else:
					g.es("LeoApp16.ico not in Icons directory", color="red")
			else:
				g.es("Icons directory not found: "+path, color="red")
	except:
		print "exception setting bitmap"
		import traceback ; traceback.print_exc()</t>
<t tx="ekr.20031218072017.1857">@nocolor

	
- (done) Fix indentation problem for section references preceeded by non-whitespace.

- Write a script that will find the clone problems in the bad LeoDocs.leo
	
@color</t>
<t tx="ekr.20031218072017.1858"></t>
<t tx="ekr.20031218072017.1859"></t>
<t tx="ekr.20031218072017.1860">def createVnode (self,parent,back,tref,headline,attrDict):
	
	# g.trace(headline)
	# g.trace(headline," parent: ",parent," back: ",back)
	v = None ; c = self.c
	# Shared tnodes are placed in the file even if empty.
	if tref == -1:
		t = leoNodes.tnode()
	else:
		tref = self.canonicalTnodeIndex(tref)
		t = self.tnodesDict.get(tref)
		if not t: t = self.newTnode(tref)
	if back: # create v after back.
		v = back.insertAfter(t)
	elif parent: # create v as the parent's first child.
		v = parent.insertAsNthChild(0,t)
	else: # create a root vnode
		v = leoNodes.vnode(c,t)
		v.moveToRoot()

	v.t.vnodeList.append(v) # New in 4.2.
	skip = len(v.t.vnodeList) &gt; 1
	if skip:
		for child in v.children_iter():
			child._parent = None

	v.initHeadString(headline,encoding=self.leo_file_encoding)
	&lt;&lt; handle unknown vnode attributes &gt;&gt;
	# if skip: print "clone: ",v
	return v,skip</t>
<t tx="ekr.20031218072017.1861">keys = attrDict.keys()
if keys:
	p.v.unknownAttributes = attrDict

	if 0: # For debugging.
		s = "unknown attributes for " + p.headString()
		print s ; g.es(s,color="blue")
		for key in keys:
			s = "%s = %s" % (key,attrDict.get(key))
			print s ; g.es(s)</t>
<t tx="ekr.20031218072017.1862"></t>
<t tx="ekr.20031218072017.1863">def putVnode (self,p,topPosition):

	"""Write a &lt;v&gt; element corresponding to a vnode."""

	fc = self ; c = fc.c ; v = p.v

	fc.put("&lt;v")
	&lt;&lt; Put tnode index &gt;&gt;
	&lt;&lt; Put attribute bits &gt;&gt;
	# 12/13/03 Write tnodeList only for @file nodes.
	if hasattr(v,"tnodeList") and len(v.tnodeList) &gt; 0 and v.isAnyAtFileNode():
		fc.putTnodeList(v) # New in 4.0
	if hasattr(v,"unknownAttributes"): # New in 4.0
		&lt;&lt; put unknown vnode attributes &gt;&gt;
	fc.put("&gt;")
	&lt;&lt; write the head text &gt;&gt;
	
	if p.hasChildren():
		fc.put_nl()

	for child in p.children_iter():
		fc.putVnode(child,topPosition)

	fc.put("&lt;/v&gt;") ; fc.put_nl()</t>
<t tx="ekr.20031218072017.1864">if v.t.fileIndex:
	if g.app.use_gnx:
		gnx = g.app.nodeIndices.toString(v.t.fileIndex)
		fc.put(" t=") ; fc.put_in_dquotes(gnx)
	else:
		fc.put(" t=") ; fc.put_in_dquotes("T" + `v.t.fileIndex`)
		
	# g.trace(v.t)
	v.t.setVisited() # Indicate we wrote the body text.
else:
	g.trace(v.t.fileIndex,v)
	g.es("error writing file(bad v.t.fileIndex)!")
	g.es("try using the Save To command")
</t>
<t tx="ekr.20031218072017.1865">current = c.currentPosition()

if (
	p.isExpanded() or
	p.isMarked() or
	p == current or
	p == topPosition
):
	fc.put(" a=") ; fc.put_dquote()
	if p.isExpanded():   fc.put("E")
	if p.isMarked():     fc.put("M")
	if p.isOrphan():     fc.put("O")
	if p == topPosition: fc.put("T")
	if p == current:     fc.put("V")
	fc.put_dquote()</t>
<t tx="ekr.20031218072017.1866">headString = p.headString()

if len(headString) &gt; 0:
	fc.put("&lt;vh&gt;")
	fc.putEscapedString(headString)
	fc.put("&lt;/vh&gt;")</t>
<t tx="ekr.20031218072017.1867">attrDict = v.unknownAttributes
keys = attrDict.keys()
for key in keys:
	val = attrDict[key]
	attr = ' %s="%s"' % (key,self.xmlEscape(val))
	self.put(attr)
	if 0: # For debugging.
		s = "putting unknown attribute for " + v.headString()
		print s ;  g.es(s, color="red")
		print attr, g.es(attr)</t>
<t tx="ekr.20031218072017.1868"></t>
<t tx="ekr.20031218072017.1869">from leoGlobals import *

reportBadChars ("ë")
</t>
<t tx="ekr.20031218072017.1870"></t>
<t tx="ekr.20031218072017.1871"></t>
<t tx="ekr.20031218072017.1872">@nocolor

Go To Line Number 75 in @file leoTkinterGui.py gives the following error:
	no child index for app.setEncoding...

The code that scanned for @file nodes didn't break out of both loops when one was found.

This is not just a Go To Line Number bug:  app.setEncoding is defined in two different @file trees!

We really need a Check Clone Consistency command to check for this kind of error!</t>
<t tx="ekr.20031218072017.1873"></t>
<t tx="ekr.20031218072017.1874">The reported file name was x rather than x.leo.</t>
<t tx="ekr.20031218072017.1875">def createFrame (self):
	
	c = self.c ; config = g.app.config ; gui = g.app.gui
	
	self.top = top = Tk.Toplevel(g.app.root)
	top.title("Syntax colors for " + c.frame.shortFileName()) # DS, 10/28/03
	top.protocol("WM_DELETE_WINDOW", self.onOk)
	gui.attachLeoIcon(top)

	&lt;&lt; create color panel &gt;&gt;

	gui.center_dialog(top) # Do this _after_ building the dialog!
	top.resizable(0,0)</t>
<t tx="ekr.20031218072017.1876">outer = Tk.Frame(top,bd=2,relief="groove")
outer.pack(anchor="n",pady=2,ipady=1,expand=1,fill="x")

# Create all the rows.
for name,option_name,default_color in self.colorPanelData:
	# Get the color.
	option_color = config.getColorsPref(option_name)
	color = g.choose(option_color,option_color,default_color)
	# Create the row.
	f = Tk.Frame(outer,bd=2)
	f.pack()
	
	lab=Tk.Label(f,text=name,width=17,anchor="e")

	b1 = Tk.Button(f,text="",state="disabled",bg=color,width=4)
	self.buttons[name]=b1 # For callback.
	self.option_names[name]=option_name # For callback.
	
	b2 = Tk.Button(f,width=12,text=option_color)
	self.nameButtons[name]=b2
	
	# 9/15/02: Added self=self to remove Python 2.1 warning.
	callback = lambda name=name,self=self:self.showColorPicker(name)
	b3 = Tk.Button(f,text="Color Picker...",command=callback)

	# 9/15/02: Added self=self to remove Python 2.1 warning.
	callback = lambda name=name,color=color,self=self:self.showColorName(name,color)
	b4 = Tk.Button(f,text="Color Name...",command=callback)

	lab.pack(side="left",padx=3)
	b1.pack (side="left",padx=3)
	b2.pack (side="left",padx=3)
	b3.pack (side="left",padx=3)
	b4.pack (side="left",padx=3)
	
# Create the Ok, Cancel &amp; Revert buttons
f = Tk.Frame(outer,bd=2)
f.pack()
b = Tk.Button(f,width=6,text="OK",command=self.onOk)
b.pack(side="left",padx=4)
b = Tk.Button(f,width=6,text="Cancel",command=self.onCancel)
b.pack(side="left",padx=4,expand=1,fill="x")
b = Tk.Button(f,width=6,text="Revert",command=self.onRevert)
b.pack(side="right",padx=4)</t>
<t tx="ekr.20031218072017.1877">def run (self):
	
	c = self.c</t>
<t tx="ekr.20031218072017.1878"></t>
<t tx="ekr.20031218072017.1879">@nocolor

EKR:  This should be done using some wrapper code, not by putting calls to toUnicode everywhere.

By: dsalomoni ( Davide Salomoni ) 
 RE: 4.0.2 released. Please use it!   
2003-10-26 18:48  

By the by, I found a bug with the wiki "picture" markup in the main leo codebase (i.e. not in the plugin). Inserting for example the markup

{picture file=LeoWin.gif} generates

Traceback (most recent call last):
File "C:\Documents and Settings\Davide\My Documents\Python\Leo_development\leo-4.0.2\src\leoColor.py", line 1533, in colorizeAnyLanguage
state = self.colorizeLine(s,state)
File "C:\Documents and Settings\Davide\My Documents\Python\Leo_development\leo-4.0.2\src\leoColor.py", line 1599, in colorizeLine
assert(isUnicode(s))
AssertionError

this can be fixed in leoColor.py, class colorizer, colorizeAnyLanguage, &lt;&lt; completely recolor in two passes &gt;&gt;, adding a call to toUnicode() in the for loops:

for s in lines:
s = toUnicode(s, app.tkEncoding) # DS, 10/26/03
state = self.colorizeLine(s,state)
self.line_index += 1
[...]
for s in lines:
&lt;&lt; kludge: insert a blank in s for every image in the line &gt;&gt;
s = toUnicode(s, app.tkEncoding) # DS, 10/26/03
state = self.colorizeLine(s,state)
self.line_index += 1

Davide  
</t>
<t tx="ekr.20031218072017.1880">def colorizeAnyLanguage (self,p,leading=None,trailing=None):
	
	"""Color the body pane either incrementally or non-incrementally"""
	
	try:
		&lt;&lt; initialize ivars &amp; tags &gt;&gt;
		g.doHook("init-color-markup",colorer=self,v=self.p)
		self.color_pass = 0
		if self.incremental and (
			&lt;&lt; all state ivars match &gt;&gt; ):
			&lt;&lt; incrementally color the text &gt;&gt;
		else:
			&lt;&lt; non-incrementally color the text &gt;&gt;
		if self.redoColoring:
			&lt;&lt; completely recolor in two passes &gt;&gt;
		&lt;&lt; update state ivars &gt;&gt;
		return "ok" # for testing.
	except:
		&lt;&lt; set state ivars to "unknown" &gt;&gt;
		if self.c:
			g.es_exception()
		else:
			import traceback ; traceback.print_exc()
		return "error" # for unit testing.</t>
<t tx="ekr.20031218072017.1881">self.flag == self.last_flag and
self.last_language == self.language and
self.comment_string == self.last_comment and
self.markup_string == self.last_markup</t>
<t tx="ekr.20031218072017.1882">@  Each line has a starting state.  The starting state for the first line is always "normal".

We need remember only self.lines and self.states between colorizing.  It is not necessary to know where the text comes from, only what the previous text was!  We must always colorize everything when changing nodes, even if all lines match, because the context may be different.

We compute the range of lines to be recolored by comparing leading lines and trailing lines of old and new text.  All other lines (the middle lines) must be colorized, as well as any trailing lines whose states may have changed as the result of changes to the middle lines.
@c

# g.trace("incremental")

# 6/30/03: make a copies of everything
old_lines = self.lines[:]
old_states = self.states[:]
new_lines = lines[:]
new_states = []

new_len = len(new_lines)
old_len = len(old_lines)

if new_len == 0:
	self.states = []
	self.lines = []
	return

# Bug fix: 11/21/02: must test against None.
if leading != None and trailing != None:
	# print "leading,trailing:",leading,trailing
	leading_lines = leading
	trailing_lines = trailing
else:
	&lt;&lt; compute leading, middle &amp; trailing lines &gt;&gt;
	
middle_lines = new_len - leading_lines - trailing_lines
# print "middle lines", middle_lines

&lt;&lt; clear leading_lines if middle lines involve @color or @recolor  &gt;&gt;
&lt;&lt; initialize new states &gt;&gt;
&lt;&lt; colorize until the states match &gt;&gt;</t>
<t tx="ekr.20031218072017.1883">@ The leading lines are the leading matching lines.  The trailing lines are the trailing matching lines.  The middle lines are all other new lines.  We will color at least all the middle lines.  There may be no middle lines if we delete lines.
@c

min_len = min(old_len,new_len)

i = 0
while i &lt; min_len:
	if old_lines[i] != new_lines[i]:
		break
	i += 1
leading_lines = i

if leading_lines == new_len:
	# All lines match, and we must color _everything_.
	# (several routine delete, then insert the text again,
	# deleting all tags in the process).
	# print "recolor all"
	leading_lines = trailing_lines = 0
else:
	i = 0
	while i &lt; min_len - leading_lines:
		if old_lines[old_len-i-1] != new_lines[new_len-i-1]:
			break
		i += 1
	trailing_lines = i
</t>
<t tx="ekr.20031218072017.1884">@ 11/19/02: Changing @color or @nocolor directives requires we recolor all leading states as well.
@c

if trailing_lines == 0:
	m1 = new_lines[leading_lines:]
	m2 = old_lines[leading_lines:]
else:
	m1 = new_lines[leading_lines:-trailing_lines]
	m2 = old_lines[leading_lines:-trailing_lines]
m1.extend(m2) # m1 now contains all old and new middle lines.
if m1:
	for s in m1:
		s = g.toUnicode(s,g.app.tkEncoding) # 10/28/03
		i = g.skip_ws(s,0)
		if g.match_word(s,i,"@color") or g.match_word(s,i,"@nocolor"):
			leading_lines = 0
			break
</t>
<t tx="ekr.20031218072017.1885"># Copy the leading states from the old to the new lines.
i = 0
while i &lt; leading_lines and i &lt; old_len: # 12/8/02
	new_states.append(old_states[i])
	i += 1
	
# We know the starting state of the first middle line!
if middle_lines &gt; 0 and i &lt; old_len:
	new_states.append(old_states[i])
	i += 1
	
# Set the state of all other middle lines to "unknown".
first_trailing_line = max(0,new_len - trailing_lines)
while i &lt; first_trailing_line:
	new_states.append("unknown")
	i += 1

# Copy the trailing states from the old to the new lines.
i = max(0,old_len - trailing_lines)
while i &lt; old_len and i &lt; len(old_states):
	new_states.append(old_states[i])
	i += 1

# 1/8/03: complete new_states by brute force.
while len(new_states) &lt; new_len:
	new_states.append("unknown")</t>
<t tx="ekr.20031218072017.1886"># Colorize until the states match.
# All middle lines have "unknown" state, so they will all be colored.

# Start in the state _after_ the last leading line, which may be unknown.
i = leading_lines
while i &gt; 0:
	if i &lt; old_len and i &lt; new_len:
		state = new_states[i]
		assert(state!="unknown")
		break
	else:
		i -= 1

if i == 0:
	# Color plain text unless we are under the control of @nocolor.
	# state = g.choose(self.flag,"normal","nocolor")
	state = self.setFirstLineState()
	new_states[0] = state

# The new_states[] will be "unknown" unless the lines match,
# so we do not need to compare lines here.
while i &lt; new_len:
	self.line_index = i + 1
	state = self.colorizeLine(new_lines[i],state)
	i += 1
	# Set the state of the _next_ line.
	if i &lt; new_len and state != new_states[i]:
		new_states[i] = state
	else: break
	
# Update the ivars
self.states = new_states
self.lines = new_lines</t>
<t tx="ekr.20031218072017.1887"># g.trace("non-incremental",self.language)

self.line_index = 1 # The Tk line number for indices, as in n.i
for s in lines:
	state = self.colorizeLine(s,state)
	self.line_index += 1
</t>
<t tx="ekr.20031218072017.1888">self.last_flag = self.flag
self.last_language = self.language
self.last_comment = self.comment_string
self.last_markup = self.markup_string</t>
<t tx="ekr.20031218072017.1889">self.last_flag = "unknown"
self.last_language = "unknown"
self.last_comment = "unknown"</t>
<t tx="ekr.20031218072017.1890"># This code is executed only if graphics characters will be inserted by user markup code.

# Pass 1:  Insert all graphics characters.

self.removeAllImages()
s = self.body.getAllText() # 10/27/03
lines = s.split('\n')

self.color_pass = 1
self.line_index = 1
state = self.setFirstLineState()
for s in lines:
	state = self.colorizeLine(s,state)
	self.line_index += 1

# Pass 2: Insert one blank for each previously inserted graphic.

self.color_pass = 2
self.line_index = 1
state = self.setFirstLineState()
for s in lines:
	&lt;&lt; kludge: insert a blank in s for every image in the line &gt;&gt;
	state = self.colorizeLine(s,state)
	self.line_index += 1
</t>
<t tx="ekr.20031218072017.1891">@ A spectacular kludge.

Images take up a real index, yet the get routine does not return any character for them!
In order to keep the colorer in synch, we must insert dummy blanks in s at the positions corresponding to each image.
@c

inserted = 0

for photo,image,line_index,i in self.image_references:
	if self.line_index == line_index:
		n = i+inserted ; 	inserted += 1
		s = s[:n] + ' ' + s[n:]
</t>
<t tx="ekr.20031218072017.1892">def colorizeLine (self,s,state):

	# print "line,inc,state,s:",self.line_index,self.incremental,state,s
	s = g.toUnicode(s,g.app.tkEncoding) # 10/28/03

	if self.incremental:
		self.removeTagsFromLine()

	i = 0
	while i &lt; len(s):
		self.progress = i
		func = self.state_dict[state]
		i,state = func(s,i)

	return state</t>
<t tx="ekr.20031218072017.1893">def continueDoubleString (self,s,i):
	return self.continueString(s,i,'"',"doubleString")
	
def continueSingleString (self,s,i):
	return self.continueString(s,i,"'","singleString")

# Similar to skip_string.
def continueString (self,s,i,delim,continueState):
	# g.trace(delim + s[i:])
	continueFlag = g.choose(self.language in ("elisp","html"),true,false)
	j = i
	while i &lt; len(s) and s[i] != delim:
		if s[i:] == "\\":
			i = len(s) ; continueFlag = true ; break
		elif s[i] == "\\":
			i += 2
		else:
			i += 1
	if i &gt;= len(s):
		i = len(s)
	elif s[i] == delim:
		i += 1 ; continueFlag = false
	self.tag("string",j,i)
	state = g.choose(continueFlag,continueState,"normal")
	return i,state</t>
<t tx="ekr.20031218072017.1894">def continueNocolor (self,s,i):

	if i == 0 and s[i] == '@':
		j = self.skip_id(s,i+1)
		word = s[i:j]
		word = word.lower()
	else:
		word = ""
	
	if word == "@color" and self.language != "plain":
		# End of the nocolor part.
		self.tag("leoKeyword",0,j)
		return i,"normal"
	else:
		# The entire line is in the nocolor part.
		# Add tags for blanks and tabs to make "Show Invisibles" work.
		for ch in s[i:]:
			if ch == ' ':
				self.tag("blank",i,i+1)
			elif ch == '\t':
				self.tag("tab",i,i+1)
			i += 1
		return i,"nocolor"</t>
<t tx="ekr.20031218072017.1895"># Colorize the line from i to j.

def doLatexLine (self,s,i,j):

	while i &lt; j:
		if g.match(s,i,"\\"):
			k = self.skip_id(s,i+1)
			word = s[i:k]
			if word in self.latex_keywords:
				self.tag("latexModeKeyword",i,k)
			i = k
		else:
			self.tag("latexModeBackground",i,i+1)
			i += 1</t>
<t tx="ekr.20031218072017.1896">## To do: rewrite using dynamically generated tables.

def doNormalState (self,s,i):

	ch = s[i] ; state = "normal"
	assert(type(ch)==type(u""))

	if ch in string.ascii_letters or ch == '_' or (
		(ch == '\\' and self.language=="latex") or
		(ch in '/&amp;&lt;&gt;' and self.language=="html")):
		&lt;&lt; handle possible keyword &gt;&gt;
	elif g.match(s,i,self.lb):
		i = self.doNowebSecRef(s,i)
	elif ch == '@':
		&lt;&lt; handle at keyword &gt;&gt;
	elif g.match(s,i,self.single_comment_start):
		&lt;&lt; handle single-line comment &gt;&gt;
	elif g.match(s,i,self.block_comment_start):
		&lt;&lt; start block comment &gt;&gt;
	elif ch == '%' and self.language=="cweb":
		&lt;&lt; handle latex line &gt;&gt;
	elif self.language=="latex":
		&lt;&lt; handle latex normal character &gt;&gt;
	# ---- From here on self.language != "latex" -----
	elif ch in self.string_delims:
		&lt;&lt; handle string &gt;&gt;
	elif ch == '#' and self.has_pp_directives:
		&lt;&lt; handle C preprocessor line &gt;&gt;
	elif self.language == "php" and (g.match(s,i,"&lt;") or g.match(s,i,"?")):
		&lt;&lt; handle special php keywords &gt;&gt;
	elif ch == ' ':
		&lt;&lt; handle blank &gt;&gt;
	elif ch == '\t':
		&lt;&lt; handle tab &gt;&gt;
	else:
		&lt;&lt; handle normal character &gt;&gt;

	if 0: # This can fail harmlessly when using wxPython plugin.  Don't know exactly why.
		g.trace(self.progress,i,state)
		assert(self.progress &lt; i)
	return i,state
</t>
<t tx="ekr.20031218072017.1897"></t>
<t tx="ekr.20031218072017.1898">if self.language == "latex":
	&lt;&lt; handle possible latex keyword &gt;&gt;
elif self.language == "html":
	&lt;&lt; handle possible html keyword &gt;&gt;
else:
	&lt;&lt; handle general keyword &gt;&gt;
i = j</t>
<t tx="ekr.20031218072017.1899">if g.match(s,i,"\\"):
	j = self.skip_id(s,i+1,chars=self.latex_special_keyword_characters) # 11/9/03
	word = s[i:j]
	if word in self.latex_keywords:
		self.tag("latexKeyword",i,j)
	else:
		self.tag("latexBackground",i,j)
else:
	self.tag("latexBackground",i,i+1)
	j = i + 1 # skip the character.</t>
<t tx="ekr.20031218072017.1900">if g.match(s,i,"&lt;!---") or g.match(s,i,"&lt;!--"):
	if g.match(s,i,"&lt;!---"): k = 5
	else: k = 4
	self.tag("comment",i,i+k)
	j = i + k ; state = "blockComment"
elif g.match(s,i,"&lt;"):
	if g.match(s,i,"&lt;/"): k = 2
	else: k = 1
	j = self.skip_id(s,i+k)
	self.tag("keyword",i,j)
elif g.match(s,i,"&amp;"):
	j = self.skip_id(s,i+1,';')
	self.tag("keyword",i,j)
elif g.match(s,i,"/&gt;"):
	j = i + 2
	self.tag("keyword",i,j)
elif g.match(s,i,"&gt;"):
	j = i + 1
	self.tag("keyword",i,j)
else:
	j = i + 1
</t>
<t tx="ekr.20031218072017.1901">if self.language == "rebol":
	j = self.skip_id(s,i+1,chars="-~!?")
elif self.language == "elisp":
	j = self.skip_id(s,i+1,chars="-")
else:
	j = self.skip_id(s,i)
word = s[i:j]
if word in self.keywords:
	self.tag("keyword",i,j)
elif self.language == "php":
	if word in self.php_paren_keywords and g.match(s,j,"()"):
		self.tag("keyword",i,j+2)
		j += 2
</t>
<t tx="ekr.20031218072017.1902">if self.language == "cweb":
	if g.match(s,i,"@(") or g.match(s,i,"@&lt;"):
		&lt;&lt; handle cweb ref or def &gt;&gt;
	else:
		word = self.getCwebWord(s,i)
		if word:
			&lt;&lt; Handle cweb control word &gt;&gt;
		else:
			i,state = self.doAtKeyword(s,i)
else:
	i,state = self.doAtKeyword(s,i)</t>
<t tx="ekr.20031218072017.1903"># Color and skip the word.
assert(self.language=="cweb")

j = i + len(word)
self.tag("keyword",i,j)
i = j

if word in ("@ ","@\t","@\n","@*","@**"):
	state = "doc"
elif word in ("@&lt;","@(","@c","@d","@f","@p"):
	state = "normal"
elif word in ("@^","@.","@:","@="): # Ended by "@&gt;"
	j = s.find("@&gt;",i)
	if j &gt; -1:
		self.tag("cwebName",i,j)
		self.tag("nameBrackets",j,j+2)
		i = j + 2</t>
<t tx="ekr.20031218072017.1904">self.tag("nameBrackets",i,i+2)

# See if the line contains the right name bracket.
j = s.find("@&gt;=",i+2)
k = g.choose(j==-1,2,3)
if j == -1:
	j = s.find("@&gt;",i+2)

if j == -1:
	i += 2
else:
	self.tag("cwebName",i+2,j)
	self.tag("nameBrackets",j,j+k)
	i = j + k
</t>
<t tx="ekr.20031218072017.1905">self.tag("keyword",i,i+1)
i += 1 # Skip the %
self.doLatexLine(s,i,len(s))
i = len(s)</t>
<t tx="ekr.20031218072017.1906"></t>
<t tx="ekr.20031218072017.1907">if self.language=="cweb":
	self.tag("latexModeBackground",i,i+1)
else:
	self.tag("latexBackground",i,i+1)
i += 1</t>
<t tx="ekr.20031218072017.1908"></t>
<t tx="ekr.20031218072017.1909"># 10/17/02: recognize comments in preprocessor lines.
j = i
while i &lt; len(s):
	if g.match(s,i,self.single_comment_start) or g.match(s,i,self.block_comment_start):
		break
	else: i += 1

self.tag("pp",j,i)</t>
<t tx="ekr.20031218072017.1910">if g.match(s,i,"&lt;?php"):
	self.tag("keyword",i,i+5)
	i += 5
elif g.match(s,i,"?&gt;"):
	self.tag("keyword",i,i+2)
	i += 2
else:
	i += 1
</t>
<t tx="ekr.20031218072017.1911">if self.showInvisibles:
	self.tag("blank",i,i+1)
i += 1</t>
<t tx="ekr.20031218072017.1912">if self.showInvisibles:
	self.tag("tab",i,i+1)
i += 1</t>
<t tx="ekr.20031218072017.1913"># self.tag("normal",i,i+1)
i += 1</t>
<t tx="ekr.20031218072017.1914">def doNowebSecRef (self,s,i):

	self.tag("nameBrackets",i,i+2)
	
	# See if the line contains the right name bracket.
	j = s.find(self.rb+"=",i+2)
	k = g.choose(j==-1,2,3)
	if j == -1:
		j = s.find(self.rb,i+2)
	if j == -1:
		return i + 2
	else:
		searchName = self.body.getTextRange(self.index(i),self.index(j+k)) # includes brackets
		ref = g.findReference(searchName,self.p)
		if ref:
			self.tag("link",i+2,j)
			if self.use_hyperlinks:
				&lt;&lt; set the hyperlink &gt;&gt;
		elif k == 3: # a section definition
			self.tag("link",i+2,j)
		else:
			self.tag("name",i+2,j)
		self.tag("nameBrackets",j,j+k)
		return j + k</t>
<t tx="ekr.20031218072017.1915"># Set the bindings to vnode callbacks.
# Create the tag.
# Create the tag name.
tagName = "hyper" + `self.hyperCount`
self.hyperCount += 1
self.body.tag_delete(tagName)
self.tag(tagName,i+2,j)

ref.tagName = tagName
self.body.tag_bind(tagName,"&lt;Control-1&gt;",ref.OnHyperLinkControlClick)
self.body.tag_bind(tagName,"&lt;Any-Enter&gt;",ref.OnHyperLinkEnter)
self.body.tag_bind(tagName,"&lt;Any-Leave&gt;",ref.OnHyperLinkLeave)</t>
<t tx="ekr.20031218072017.1916"></t>
<t tx="ekr.20031218072017.1917">@nocolor

Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=2257845
By: nobody

From: Rich

In a vein similar to Bill's, I've seen the following when editing headlines:

  Go to edit a headline, change your mind, and hit the [Esc] key to bail out.
You get following message:

exception executing command
Traceback (most recent call last):
  File "D:\LANGUAGE\Literate Programming\Leo\Src\leoFrame.py", line 1597, in
doCommand
    command(event)
  File "D:\LANGUAGE\Literate Programming\Leo\Src\leoFrame.py", line 3164, in
OnEndEditHeadline
    tree = self.commands.tree
AttributeError: Commands instance has no attribute 'tree'

--Rich
Win98</t>
<t tx="ekr.20031218072017.1918">@nocolor

Put import Tkinter and tkFileDialog in try/except blocks.
Similarly for win32 imports.</t>
<t tx="ekr.20031218072017.1919"></t>
<t tx="ekr.20031218072017.1920">@nocolor

By: digito ( Pedro Guerreiro ) 
 @last ?&gt; causes problems in leo 4.x   
2003-10-27 18:16  

The new format of derived files in 4.x brings an old bug to the surface again.

When creating a node with @file test.php, when using @last ?&gt;, the derived file has the following output:

...
//@@last ?&gt;
//@nonl
//@-node:@file test.php
//@-leo
?&gt;

this causes problems with the php interpreter, that were fixed before.

But if I change the LeoConfig.leo option write_old_format_derived_files to 1, then the output is

...
//@@last
//@nonl
//@-node:@file test.php
//@-leo
?&gt;

(notice that the @last sentinel has no arguments)

Can you please fix this, has you say (in LeoConfig.leo) that "The use of pre-4.0 derived files is deprecated."</t>
<t tx="ekr.20031218072017.1921">@ It is important for PHP and other situations that @first and @last directives get translated to verbatim lines that do _not_ include what follows the @first &amp; @last directives.
@c

def putDirective(self,s,i):
	
	"""Output a sentinel a directive or reference s."""

	tag = "@delims"
	assert(i &lt; len(s) and s[i] == '@')
	k = i
	j = g.skip_to_end_of_line(s,i)
	directive = s[i:j]

	if g.match_word(s,k,"@delims"):
		&lt;&lt; handle @delims &gt;&gt;
	elif g.match_word(s,k,"@last"):
		self.putSentinel("@@last") # 10/27/03: Convert to an verbatim line _without_ anything else.
	elif g.match_word(s,k,"@first"):
		self.putSentinel("@@first") # 10/27/03: Convert to an verbatim line _without_ anything else.
	else:
		self.putSentinel("@" + directive)

	i = g.skip_line(s,k)
	return i</t>
<t tx="ekr.20031218072017.1922"># Put a space to protect the last delim.
self.putSentinel(directive + " ") # 10/23/02: put @delims, not @@delims

# Skip the keyword and whitespace.
j = i = g.skip_ws(s,k+len(tag))

# Get the first delim.
while i &lt; len(s) and not g.is_ws(s[i]) and not g.is_nl(s,i):
	i += 1
if j &lt; i:
	self.startSentinelComment = s[j:i]
	# Get the optional second delim.
	j = i = g.skip_ws(s,i)
	while i &lt; len(s) and not g.is_ws(s[i]) and not g.is_nl(s,i):
		i += 1
	self.endSentinelComment = g.choose(j&lt;i, s[j:i], "")
else:
	self.writeError("Bad @delims directive")</t>
<t tx="ekr.20031218072017.1923"></t>
<t tx="ekr.20031218072017.1924"></t>
<t tx="ekr.20031218072017.1925"></t>
<t tx="ekr.20031218072017.1926">@nocolor

Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=2257820
By: wtrenker

When I edit a Headline and select the existing text, then I paste in some other
text, the original selected text remains instead of being overwritten by the
newly pasted text.

Here's a simple, repeatable example.  Start a new Leo file.  As expected, the
new file is initialized with a single node with a headline containing the text
"NewHeadline".  The text is pre-selected, ready to edit.  Now do a copy and
then paste.  The text will now read "NewHeadlineNewHeadline".  The original
text was not overwritten.

Here's my configuration:

Leo Log Window...
Leo 4.0.3, build  1.99 , October 25, 2003
Python 2.3.2, Tk 8.3.3

Linux 2.4.19; libc.so.6 2.2.5; gcc 2.95.3
KDE: 3.0.0 Qt: 3.0.4
GNU ld version 2.13.90.0.4 20020814
GNU Make 3.80
pkg-config 0.14.0
Python 2.3.2 (#1, Oct 27 2003, 10:19:56) [GCC 2.95.3 20010315 (release)]

Regards,
Bill
</t>
<t tx="ekr.20031218072017.1927"></t>
<t tx="ekr.20031218072017.1928">@

- Added config_encoding setting to specify the encoding of leoConfig.txt.
- Converted all options to Unicode when reading leoConfig.txt.
- Converted all options to config.config_encoding when writing leoConfig.txt.</t>
<t tx="ekr.20031218072017.1929">def open (self):
	
	config = ConfigParser.ConfigParser()
	self.config = config
	try:
		cf = open(self.configFileName)
		config.readfp(cf)
		&lt;&lt; get config options &gt;&gt;
		&lt;&lt; get recent files &gt;&gt;
		for section, dict in self.sectionInfo:
			if dict != None:
				try:
					for opt in config.options(section):
						val = config.get(section,opt,raw=1)
						val = g.toUnicode(val,self.config_encoding) # 10/31/03
						dict[string.lower(opt)]= val
				except: pass
		&lt;&lt; create rawKeysDict without ampersands &gt;&gt;
		&lt;&lt; convert find/change options to unicode &gt;&gt;
		&lt;&lt; print options &gt;&gt;
		cf.close()
		self.configsExist = true
	except IOError:
		pass
	except:
		g.es("Exception opening " + self.configFileName)
		g.es_exception()
		pass
	self.config = None
</t>
<t tx="ekr.20031218072017.1930">section = self.recentFilesSection

if 0: # elegant, but may be a security hole.
	self.recentFiles = eval(config.get(section,"recentFiles",raw=1)) # 2/4/03
else: # easier to read in the config file.
	try:
		for i in xrange(10):
			f = config.get(section,"file" + `i`,raw=1)
			f = g.toUnicode(f,"utf-8") # 10/31/03
			self.recentFiles.append(f)
	except: pass</t>
<t tx="ekr.20031218072017.1931">if 0:
	print "\n\ncolorsDict:\n" ,self.colorsDict
	print "\n\ncompareDict:\n",self.compareDict
	print "\n\nfindDict:\n"   ,self.findDict
	print "\n\nprefsDict:\n"  ,self.prefsDict
	print "\n\nwindowDict:\n" ,self.windowDict
if 0:
	print "\n\nkeysDict:\n\n"
	for i in self.keysDict.items():
		print i
if 0:
	print "\n\nwindowDict:\n\n"
	for i in self.windowDict.keys():
		print i</t>
<t tx="ekr.20031218072017.1932">def getBoolFromDict (self,name,dict):
	val = self.getIntFromDict(name,dict)
	if val != None:
		if val: val = 1
		else: val = 0
	return val

def getFloatFromDict (self,name,dict):
	val = self.getFromDict(name,dict)
	if val:
		try: val = float(val)
		except: val = None
	return val

def getFromDict (self,name,dict):
	val = dict.get(name)
	if val == "ignore":
		val = None
	elif val == None:
		val = self.defaultsDict.get(name)
		val = g.toUnicode(val,self.config_encoding) # 10/31/03
	return val

def getIntFromDict (self,name,dict):
	val = self.getFromDict(name,dict)
	try:
		return int(val)
	except:
		return 0

def setDict (self,name,val,dict):
	dict [name] = val
		
getStringFromDict = getFromDict</t>
<t tx="ekr.20031218072017.1933">@

- Changed code in various places to prevent unbounded loops and recursion.
- Look for the app.killed ivar to see the new code.

</t>
<t tx="ekr.20031218072017.1934">def run(fileName=None,*args,**keywords):
	
	"""Initialize and run Leo"""
	
	if not isValidPython(): return
	# Import leoGlobals, but do NOT set g.
	import leoGlobals
	from leoGlobals import true,false
	# Create the application object.
	import leoApp ; leoGlobals.app = leoApp.LeoApp()
	g = leoGlobals ; assert(g.app) # NOW we can set g.
	g.app.loadDir = computeLoadDir() # Depends on g.app.tkEncoding: uses utf-8 for now.
	import leoConfig
	g.app.config = leoConfig.config()
	g.app.setEncoding() # 10/20/03: do this earlier
	script = getBatchScript()
	if script:
		createNullGuiWithScript(script)
		fileName = None
	else:
		&lt;&lt; print encoding info &gt;&gt;
	# Load plugins. Plugins may create g.app.gui.
	g.doHook("start1")
	if g.app.killed: return # Support for g.app.forceShutdown.
	# Create the default gui if needed.
	if g.app.gui == None:
		g.app.createTkGui()
	if g.app.use_gnx:
		if not g.app.leoID: g.app.setLeoID() # Forces the user to set g.app.leoID.
		import leoNodes
		g.app.nodeIndices = leoNodes.nodeIndices()
	# Initialize tracing and statistics.
	g.init_sherlock(args)
	g.clear_stats()
	# Create the main frame.  Show it and all queued messages.
	c,frame = createFrame(fileName)
	if not frame: return
	if g.app.disableSave:
		g.es("disabling save commands",color="red")
	g.app.writeWaitingLog()
	v = c.currentVnode()
	g.doHook("start2",c=c,v=v,fileName=fileName)
	frame.tree.redraw()
	frame.body.setFocus()
	g.app.initing = false # "idle" hooks may now call g.app.forceShutdown.
	g.app.gui.runMainLoop()</t>
<t tx="ekr.20031218072017.1935">g.es("leoConfig.txt encoding: " + g.app.config.config_encoding, color="blue")
g.es("Text encoding: " + g.app.tkEncoding, color="blue")</t>
<t tx="ekr.20031218072017.1936">def isValidPython():
	
	import leoGlobals as g
	from leoGlobals import true,false
	
	message = """
Leo requires Python 2.1 or higher.
You may download Python 2.1 and Python 2.2 from http://python.org/download/
"""
	try:
		if not g.CheckVersion(sys.version, "2.1"):
			g.app.gui.runAskOkDialog("Python version error",message=message,text="Exit")
			return false
		else:
			return true
	except:
		print "exception getting Python version"
		import traceback ; traceback.print_exc()
		return false</t>
<t tx="ekr.20031218072017.1937">def computeLoadDir():
	
	"""Returns the directory containing leo.py."""
	
	import leoGlobals as g
	from leoGlobals import true,false
	
	# g.trace(g.app.tkEncoding)
	
	try:
		import leo
		path = g.os_path_abspath(leo.__file__)

		if sys.platform=="win32": # "mbcs" exists only on Windows.
			path = g.toUnicode(path,"mbcs")
		elif sys.platform=="dawwin":
			path = g.toUnicode(path,"utf-8")
		else:
			path = g.toUnicode(path,g.app.tkEncoding)

		if path:
			loadDir = g.os_path_dirname(path)
		else:
			loadDir = None
		if not loadDir:
			loadDir = g.os_path_abspath(os.getcwd())
			print "Using emergency loadDir:",`loadDir`

		encoding = g.choose(sys.platform=="dawwin","utf-8",g.app.tkEncoding) # 11/18/03
		loadDir = g.toUnicode(loadDir,encoding) # 10/20/03
		return loadDir
	except:
		print "Exception getting load directory"
		import traceback ; traceback.print_exc()
		return None</t>
<t tx="ekr.20031218072017.1938">def createNullGuiWithScript (script):
	
	import leoGlobals as g
	from leoGlobals import true,false
	
	g.app.batchMode = true
	g.app.gui = leoGui.nullGui("nullGui")
	g.app.root = g.app.gui.createRootWindow()
	g.app.gui.finishCreate()
	g.app.gui.setScript(script)
</t>
<t tx="ekr.20031218072017.1939">def getBatchScript ():
	
	import leoGlobals as g
	from leoGlobals import true,false
	
	name = None ; i = 1 # Skip the dummy first arg.
	while i + 1 &lt; len(sys.argv):
		arg = sys.argv[i].strip().lower()
		if arg in ("--script","-script"):
			name = sys.argv[i+1].strip() ; break
		i += 1

	if not name: return None	
	name = g.os_path_join(g.app.loadDir,name)
	try:
		f = None
		try:
			f = open(name,'r')
			script = f.read()
			# g.trace("script",script)
		except IOError:
			g.es("can not open script file: " + name, color="red")
			script = None
	finally:
		if f: f.close()
		return script</t>
<t tx="ekr.20031218072017.1940"></t>
<t tx="ekr.20031218072017.1941"></t>
<t tx="ekr.20031218072017.1942"></t>
<t tx="ekr.20031218072017.1943">@

What I did:
	
- removed self.bodyCtrl from colorizer.
	- This required several new body methods.
</t>
<t tx="ekr.20031218072017.1944">def removeAllImages (self):
	
	for photo,image,line_index,i in self.image_references:
		try:
			self.body.deleteCharacter(image) # 10/27/03
		except:
			pass # The image may have been deleted earlier.
	
	self.image_references = []</t>
<t tx="ekr.20031218072017.1945"></t>
<t tx="ekr.20031218072017.1946">@nocolor

- frame.tree, frame.body and frame.log can be accessed anywhere.
	- These must be leo-classes.  Optionally, these may also be control-classes
		- Either protocols or multiple inheritance may be used so a class can be both a leo-class and a control-class.
	- Optionally, these classes may _contain_ control classes named:
		frame.tree.treeCtrl, frame.body.bodyCtrl and frame.log.logCtrl.
	- These classes (that is, the leo-classes), will support abstraction methods.
		Examples:  frame.body.getSelection, frame.tree.redraw, etc.

** The key distinction is between leo-classes (can be used anywhere in the core) and control-classes, can be used only in the "owning" leo-class.  If a class is both a leo-class and a control-class, only abstraction methods may be used by Leo's core.

- All methods in commanders should be gui-independent, calling app.gui routines as needed.
- Most menu commands methods should be moved into the commands class.
- The base frame method should call gui methods to create the menu bar (including command shortcuts).</t>
<t tx="ekr.20031218072017.1947"></t>
<t tx="ekr.20031218072017.1948"></t>
<t tx="ekr.20031218072017.1949"># updateBodyPane now calls self.body.setTextSelection(oldSel), similar to what it used to do.</t>
<t tx="ekr.20031218072017.1950"></t>
<t tx="ekr.20031218072017.1951"></t>
<t tx="ekr.20031218072017.1952">The changes here do work.

Alas, transitioning to this format is non-trivial.</t>
<t tx="ekr.20031218072017.1953">Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=2257860
By: nobody

I use LEO for design with an ancient cross compiler for an ancient micro.  My
Leo source looks like this:

==========================================
@language c
#ifdef COMMENT /* LEO */
@comment /* */
#endif /* COMMENT */

(( Some code ))
@ -------------------------------------------------------------&gt; Input
@c

==========================================

With Leo 4.0 alpha 2, Python 2.3.0, Tk 8.4.1, I get:

==========================================
/*@+at*/
/*
 -------------------------------------------------------------&gt; Input

*/

/*@-at*/

==========================================

But with Leo 4.0.3, build  1.99 , October 25, 2003
Python 2.3.0, Tk 8.4.1, I get:

==========================================
/*@+at */
/*
/*@nonl*/
-------------------------------------------------------------&gt; Input
*/
/*@-at*/

==========================================
Many versions of C (mine included) do not allow nested comments, so the '*/'
at the end of "@nonl" ends the comment started on the line before, and the compiler
tries to deal with "---------...-- Input */" with disastrous results.

--Rich
</t>
<t tx="ekr.20031218072017.1954">def readEndAt (self,s,i):
	
	"""Read an @-at sentinel."""

	at = self
	at.readLastDocLine("@")
	at.popSentinelStack(endAt)
	at.inCode = true
		
def readEndDoc (self,s,i):
	
	"""Read an @-doc sentinel."""

	at = self
	at.readLastDocLine("@doc")
	at.popSentinelStack(endDoc)
	at.inCode = true</t>
<t tx="ekr.20031218072017.1955">@nocolor

Injecting callbacks is an elegant way of keeping the vnode class pure.

Injected "vnode" methods are entitled to know about the intimate details of the tree class, so there is no need to define access methods in the frame class.

tree.drawIcon now injects the v.iconx and v.iconv ivars as needed.

@color
</t>
<t tx="ekr.20031218072017.1956">def injectCallbacks(self):
	
	import leoNodes
	
	&lt;&lt; define tkinter callbacks to be injected in the vnode class &gt;&gt;

	for f in (
		OnBoxClick,OnDrag,OnEndDrag,
		OnHeadlineClick,OnHeadlineRightClick,OnHeadlineKey,
		OnHyperLinkControlClick,OnHyperLinkEnter,OnHyperLinkLeave,
		OnIconClick,OnIconDoubleClick,OnIconRightClick):
		
		g.funcToMethod(f,leoNodes.position)</t>
<t tx="ekr.20031218072017.1957"># N.B. These vnode methods are entitled to know about details of the leoTkinterTree class.

@others</t>
<t tx="ekr.20031218072017.1958"># Called when the box is clicked.

def OnBoxClick(self,event=None):
	
	"""Callback injected into vnode or position class."""

	try:
		p = self ; c = p.c
		if not g.doHook("boxclick1",c=c,v=p,event=event):
			c.frame.tree.OnBoxClick(p)
		g.doHook("boxclick2",c=c,v=p,event=event)
	except:
		g.es_event_exception("boxclick")</t>
<t tx="ekr.20031218072017.1959">def OnDrag(self,event=None):
	
	"""Callback injected into vnode or position class."""

	try:
		v = self ; c = v.c
		if c.frame.tree.dragging():
			if not g.doHook("dragging1",c=c,v=v,event=event):
				c.frame.tree.OnDrag(v,event)
			g.doHook("dragging2",c=c,v=v,event=event)
		else:
			if not g.doHook("drag1",c=c,v=v,event=event):
				c.frame.tree.OnDrag(v,event)
			g.doHook("drag2",c=c,v=v,event=event)
	except:
		g.es_event_exception("drag")</t>
<t tx="ekr.20031218072017.1960">def OnEndDrag(self,event=None):
	
	"""Callback injected into vnode or position class."""
	
	# g.trace()

	try:
		v = self ; c = v.c
		# 7/10/03: Always call frame.OnEndDrag, regardless of state.
		if not g.doHook("enddrag1",c=c,v=v,event=event):
			c.frame.tree.OnEndDrag(v,event)
		g.doHook("enddrag2",c=c,v=v,event=event)
	except:
		g.es_event_exception("enddrag")</t>
<t tx="ekr.20031218072017.1961">def OnHeadlineClick(self,event=None):
	"""Callback injected into vnode or position class."""
	try:
		v = self ; c = v.c
		if not g.doHook("headclick1",c=c,v=v,event=event):
			c.frame.tree.OnActivate(v)
		g.doHook("headclick2",c=c,v=v,event=event)
	except:
		g.es_event_exception("headclick")
	
def OnHeadlineRightClick(self,event=None):
	"""Callback injected into vnode or position class."""
	#g.trace()
	try:
		v = self ; c = v.c
		if not g.doHook("headrclick1",c=c,v=v,event=event):
			c.frame.tree.OnActivate(v)
			c.frame.tree.OnPopup(self,event)
		g.doHook("headrclick2",c=c,v=v,event=event)
	except:
		g.es_event_exception("headrclick")
</t>
<t tx="ekr.20031218072017.1962">def OnHyperLinkControlClick (self,event):
	
	"""Callback injected into vnode or position class."""

	# g.trace()
	try:
		v = self ; c = v.c
		if not g.doHook("hypercclick1",c=c,v=v,event=event):
			c.beginUpdate()
			c.selectVnode(v)
			c.endUpdate()
			c.frame.bodyCtrl.mark_set("insert","1.0")
		g.doHook("hypercclick2",c=c,v=v,event=event)
	except:
		g.es_event_exception("hypercclick")</t>
<t tx="ekr.20031218072017.1963">def OnHeadlineKey (self,event=None):

	"""Callback injected into vnode or position class."""

	try:
		v = self ; c = v.c
		if not g.doHook("headkey1",c=c,v=v,event=event):
			c.frame.tree.OnHeadlineKey(v,event)
		g.doHook("headkey2",c=c,v=v,event=event)
	except:
		g.es_event_exception("headkey")</t>
<t tx="ekr.20031218072017.1964">def OnHyperLinkEnter (self,event=None):
	
	"""Callback injected into vnode or position class."""

	try:
		v = self ; c = v.c
		if not g.doHook("hyperenter1",c=c,v=v,event=event):
			if 0: # This works, and isn't very useful.
				c.frame.bodyCtrl.tag_config(v.tagName,background="green")
		g.doHook("hyperenter2",c=c,v=v,event=event)
	except:
		g.es_event_exception("hyperenter")</t>
<t tx="ekr.20031218072017.1965">def OnHyperLinkLeave (self,event=None):
	
	"""Callback injected into vnode or position class."""

	try:
		v = self ; c = v.c
		if not g.doHook("hyperleave1",c=c,v=v,event=event):
			if 0: # This works, and isn't very useful.
				c.frame.bodyCtrl.tag_config(v.tagName,background="white")
		g.doHook("hyperleave2",c=c,v=v,event=event)
	except:
		g.es_event_exception("hyperleave")</t>
<t tx="ekr.20031218072017.1966">def OnIconClick(self,event=None):
	
	"""Callback injected into vnode or position class."""

	try:
		v = self ; c = v.c
		if not g.doHook("iconclick1",c=c,v=v,event=event):
			c.frame.tree.OnIconClick(v,event)
		g.doHook("iconclick2",c=c,v=v,event=event)
	except:
		g.es_event_exception("iconclick")
	
def OnIconRightClick(self,event=None):
	
	"""Callback injected into vnode or position class."""

	try:
		v = self ; c = v.c
		if not g.doHook("iconrclick1",c=c,v=v,event=event):
			c.frame.tree.OnIconRightClick(v,event)
		g.doHook("iconrclick2",c=c,v=v,event=event)
	except:
		g.es_event_exception("iconrclick")
</t>
<t tx="ekr.20031218072017.1967">def OnIconDoubleClick(self,event=None):
	
	"""Callback injected into vnode or position class."""

	try:
		v = self ; c = v.c
		if not g.doHook("icondclick1",c=c,v=v,event=event):
			c.frame.tree.OnIconDoubleClick(self)
		g.doHook("icondclick2",c=c,v=v,event=event)
	except:
		g.es_event_exception("icondclick")
</t>
<t tx="ekr.20031218072017.1968">self.c = c # The commander for this vnode.
self.t = t # The tnode.
self.statusBits = 0 # status bits

# Structure links.
self._parent = self._next = self._back = None</t>
<t tx="ekr.20031218072017.1969">@nocolor

@color</t>
<t tx="ekr.20031218072017.1970">def getLeoHeader (self):

	# Set defaults.
	self.maxTnodeIndex = 0
	self.numberOfTnodes = 0
	if self.getOpenTag("&lt;leo_header"):
		return

	# New in version 1.7: attributes may appear in any order.
	while 1:
		if self.matchTag("file_format="):
			self.getDquote() ; self.fileFormatNumber = self.getLong() ; self.getDquote()
		elif self.matchTag("tnodes="):
			self.getDquote() ; self.numberOfTnodes = self.getLong() ; self.getDquote()
		elif self.matchTag("max_tnode_index="):
			self.getDquote() ; self.maxTnodeIndex = self.getLong() ; self.getDquote()
			# g.trace("max_tnode_index:",self.maxTnodeIndex)
		elif self.matchTag("clone_windows="):
			self.getDquote() ; self.getLong() ; self.getDquote() # no longer used.
		else:
			self.getTag("/&gt;")
			break</t>
<t tx="ekr.20031218072017.1971">def putClipboardHeader (self):

	c = self.c ; tnodes = 0
	&lt;&lt; count the number of tnodes &gt;&gt;
	self.put('&lt;leo_header file_format="1" tnodes=')
	self.put_in_dquotes(`tnodes`)
	self.put(" max_tnode_index=")
	self.put_in_dquotes(`tnodes`)
	self.put("/&gt;") ; self.put_nl()</t>
<t tx="ekr.20031218072017.1972">c.clearAllVisited()

for p in c.currentPosition().subtree_iter():
	t = p.v.t
	if t and not t.isVisited():
		t.setVisited()
		tnodes += 1</t>
<t tx="ekr.20031218072017.1973">@

- Created frame.destroySelf routine.  This does work formerly done in the app class.  The new app close-window logic is no longer polluted by frame details.

- Replaced references to frame.top by calls to new getter/setter frame methods.

- References to frame.top do not matter in the following classes:
	
LeoColorPanel, LeoColorNamePanel, leoCompare, leoDialog, leoFind, leoFont, leoPrefs</t>
<t tx="ekr.20031218072017.1974">def destroySelf (self):
	
	top = self.top # Remember this: we are about to destroy all of our ivars!

	if g.app.windowList:
		self.destroyAllObjects()

	top.destroy()</t>
<t tx="ekr.20031218072017.1975">def destroyAllObjects (self):

	"""Clear all links to objects in a Leo window."""

	frame = self ; c = self.c ; tree = frame.tree ; body = self.body

	# Do this first.
	&lt;&lt; clear all vnodes and tnodes in the tree &gt;&gt;

	# Destroy all ivars in subclasses.
	g.clearAllIvars(c.atFileCommands)
	g.clearAllIvars(c.fileCommands)
	g.clearAllIvars(c.importCommands)
	g.clearAllIvars(c.tangleCommands)
	g.clearAllIvars(c.undoer)
	g.clearAllIvars(c)
	g.clearAllIvars(body.colorizer)
	g.clearAllIvars(body)
	g.clearAllIvars(tree)
	g.clearAllIvars(tree)

	# This must be done last.
	frame.destroyAllPanels()
	g.clearAllIvars(frame)</t>
<t tx="ekr.20031218072017.1976"># Using a dict here is essential for adequate speed.
vList = [] ; tDict = {}

for p in c.allNodes_iter():
	vList.append(p.v)
	if p.v.t:
		key = id(p.v.t)
		if not tDict.has_key(key):
			tDict[key] = p.v.t

for key in tDict.keys():
	g.clearAllIvars(tDict[key])

for v in vList:
	g.clearAllIvars(v)

vList = [] ; tDict = {} # Remove these references immediately.</t>
<t tx="ekr.20031218072017.1977"></t>
<t tx="ekr.20031218072017.1978">def setLeoID (self):

	tag = ".leoID.txt"
	loadDir = g.app.loadDir
	configDir = g.app.config.configDir
	&lt;&lt; return if we can set self.leoID from sys.leoID &gt;&gt;
	&lt;&lt; return if we can set self.leoID from "leoID.txt" &gt;&gt;
	&lt;&lt; put up a dialog requiring a valid id &gt;&gt;
	&lt;&lt; attempt to create leoID.txt &gt;&gt;</t>
<t tx="ekr.20031218072017.1979"># This would be set by in Python's sitecustomize.py file.
try:
	g.app.leoID = sys.leoID
	if not g.app.batchMode:
		g.es("leoID = " + g.app.leoID, color="orange")
	return
except:
	g.app.leoID = None</t>
<t tx="ekr.20031218072017.1980">for dir in (configDir,loadDir):
	try:
		fn = g.os_path_join(dir, tag)
		f = open(fn,'r')
		if f:
			s = f.readline()
			f.close()
			if s and len(s) &gt; 0:
				g.app.leoID = s
				g.es("leoID = " + g.app.leoID, color="red")
				return
			else:
				g.es("empty " + tag + " in " + dir, color = "red")
	except:
		g.app.leoID = None

if configDir == loadDir:
	g.es(tag + " not found in " + loadDir, color="red")
else:
	g.es(tag + " not found in " + configDir + " or " + loadDir, color="red")

</t>
<t tx="ekr.20031218072017.1981">g.app.gui.runAskLeoIDDialog() # New in 4.1: get an id for gnx's.  Plugins may set g.app.leoID.
g.trace(g.app.leoID)

g.es("leoID = " + `g.app.leoID`, color="blue")</t>
<t tx="ekr.20031218072017.1982">for dir in (configDir,loadDir):
	try:
		# Look in configDir first.
		fn = g.os_path_join(dir, tag)
		f = open(fn,'w')
		if f:
			f.write(g.app.leoID)
			f.close()
			g.es("created leoID.txt in " + dir, color="red")
			return
	except: pass
	
if configDir == loadDir:
	g.es("can not create leoID.txt in " + loadDir, color="red")
else:
	g.es("can not create leoID.txt in " + configDir + " or " + loadDir, color="red")

</t>
<t tx="ekr.20031218072017.1983">class tkinterAskLeoID (leoTkinterDialog):
	
	"""A class that creates the Tkinter About Leo dialog."""

	@others</t>
<t tx="ekr.20031218072017.1984">def __init__(self):
	
	"""Create the Leo Id dialog."""
	
	leoTkinterDialog.__init__(self,"Enter unique id",resizeable=false) # Initialize the base class.
	self.id_entry = None
	self.answer = None

	self.createTopFrame()
	self.top.protocol("WM_DELETE_WINDOW", self.onCloseWindow)
	self.top.bind("&lt;Key&gt;", self.onKey)
	
	message = (
		"leoID.txt not found\n\n" +
		"Please enter an id that identifies you uniquely.\n" +
		"Your cvs login name is a good choice.\n\n" +
		"Your id must contain only letters and numbers\n" +
		"and must be at least 3 characters in length.")
	self.createFrame(message)
	self.focus_widget = self.id_entry

	buttons = {"text":"OK","command":self.onButton,"default":true}, # Singleton tuple.
	buttonList = self.createButtons(buttons)
	self.ok_button = buttonList[0]
	self.ok_button.configure(state="disabled")</t>
<t tx="ekr.20031218072017.1985">def createFrame(self,message):
	
	"""Create the frame for the Leo Id dialog."""
	
	f = self.frame

	label = Tk.Label(f,text=message)
	label.pack(pady=10)

	self.id_entry = text = Tk.Entry(f,width=20)
	text.pack()</t>
<t tx="ekr.20031218072017.1986">def onCloseWindow (self):
	
	"""Prevent the Leo Id dialog from closing by ignoring close events."""

	pass</t>
<t tx="ekr.20031218072017.1987">def onButton(self):
	
	"""Handle clicks in the Leo Id close button."""

	s = self.id_entry.get().strip()
	if len(s) &lt; 3:  # Require at least 3 characters in an id.
		return

	self.answer = g.app.leoID = s
	self.top.destroy() # terminates wait_window</t>
<t tx="ekr.20031218072017.1988">def onKey(self,event):
	
	"""Handle keystrokes in the Leo Id dialog."""
	
	&lt;&lt; eliminate invalid characters &gt;&gt;
	&lt;&lt; enable the ok button if there are 3 or more valid characters &gt;&gt;
	
	ch = event.char.lower()
	if ch in ('\n','\r'):
		self.onButton()
	return "break"

</t>
<t tx="ekr.20031218072017.1989">e = self.id_entry
s = e.get().strip()
i = 0 ; ok = true
while i &lt; len(s):
	ch = s[i]
	if ch not in string.ascii_letters and ch not in string.digits:
		e.delete(`i`)
		s = e.get()
		ok = false
	else:
		i += 1
if not ok: return</t>
<t tx="ekr.20031218072017.1990">e = self.id_entry
b = self.ok_button

if len(e.get().strip()) &gt;= 3:
	b.configure(state="normal")
else:
	b.configure(state="disabled")</t>
<t tx="ekr.20031218072017.1991"># Indices are Python dicts containing 'id','loc','time' and 'n' keys.

class nodeIndices:
	
	"""A class to implement global node indices (gnx's)."""
	
	@others</t>
<t tx="ekr.20031218072017.1992">def __init__ (self):
	
	"""ctor for nodeIndices class"""

	self.userId = g.app.leoID # 5/1/03: This never changes.
	self.defaultId = g.app.leoID # This probably will change.
	self.lastIndex = None
	self.timeString = None</t>
<t tx="ekr.20031218072017.1993">def areEqual (self,gnx1,gnx2):
	
	"""Return true if all fields of gnx1 and gnx2 are equal"""

	id1,time1,n1 = gnx1
	id2,time2,n2 = gnx2
	return id1==id2 and time1==time2 and n1==n2</t>
<t tx="ekr.20031218072017.1994"># These are used by the fileCommands read/write code.

def getDefaultId (self):
	
	"""Return the id to be used by default in all gnx's"""
	return self.defaultId
	
def setDefaultId (self,id):
	
	"""Set the id to be used by default in all gnx's"""
	self.defaultId = id
</t>
<t tx="ekr.20031218072017.1995">def getNewIndex (self):
	
	"""Create a new gnx using self.timeString and self.lastIndex"""
	
	id = self.userId # Bug fix 5/1/03: always use the user's id for new ids!
	t = self.timeString
	assert(t)
	n = None

	# Set n if id and time match the previous index.
	last = self.lastIndex
	if last:
		lastId,lastTime,lastN = last
		if id==lastId and t==lastTime:
			if lastN == None: n = 1
			else: n = lastN + 1

	d = (id,t,n)
	self.lastIndex = d
	# g.trace(d)
	return d</t>
<t tx="ekr.20031218072017.1996">def isGnx (self,gnx):
	try:
		id,t,n = gnx
		return t != None
	except:
		return false</t>
<t tx="ekr.20031218072017.1997">def scanGnx (self,s,i):
	
	"""Create a gnx from its string representation"""
	
	if type(s) not in (type(""),type(u"")):
		g.es("scanGnx: unexpected index type:"+`type(s)`+`s`,color="red")
		return None,None,None
		
	s = s.strip()

	id,t,n = None,None,None
	i,id = g.skip_to_char(s,i,'.')
	if g.match(s,i,'.'):
		i,t = g.skip_to_char(s,i+1,'.')
		if g.match(s,i,'.'):
			i,n = g.skip_to_char(s,i+1,'.')
	# Use self.defaultId for missing id entries.
	if id == None or len(id) == 0:
		id = self.defaultId
	# Convert n to int.
	if n:
		try: n = int(n)
		except: pass

	return id,t,n</t>
<t tx="ekr.20031218072017.1998">def setTimestamp (self):

	"""Set the timestamp string to be used by getNewIndex until further notice"""

	self.timeString = time.strftime(
		"%Y%m%d%H%M%S", # Help comparisons; avoid y2k problems.
		time.localtime())</t>
<t tx="ekr.20031218072017.1999">def toString (self,index,removeDefaultId=false):
	
	"""Convert a gnx (a tuple) to its string representation"""

	id,t,n = index

	if removeDefaultId and id == self.defaultId:
		id = ""

	if not n: # None or ""
		return "%s.%s" % (id,t)
	else:
		return "%s.%s.%d" % (id,t,n)</t>
<t tx="ekr.20031218072017.2000"></t>
<t tx="ekr.20031218072017.2001">def putOpenNodeSentinel(self,p):
	
	"""Write @+node sentinel for p."""
	
	at = self

	if p.isAtFileNode() and p != at.root:
		at.writeError("@file not valid in: " + p.headString())
		return
	
	s = at.nodeSentinelText(p)
	at.putSentinel("@+node:" + s)

	# Append the n'th tnode to the root's tnode list.

	# g.trace("%3d %3d" % (len(at.root.tnodeList),p.v.t.fileIndex),p.v)
	at.root.tnodeList.append(p.v.t)</t>
<t tx="ekr.20031218072017.2002">def putTnodeList (self,v):
	
	"""Put the optional tnodeList attribute of a vnode."""
	
	# Remember: entries in the tnodeList correspond to @+node sentinels, _not_ to tnodes!

	fc = self ; nodeIndices = g.app.nodeIndices
	if v.tnodeList:
		# g.trace("%4d" % len(v.tnodeList),v)
		fc.put(" tnodeList=") ; fc.put_dquote()
		if g.app.use_gnx:
			for t in v.tnodeList:
				try: # Will fail for None or any pre 4.1 file index.
					id,time,n = t.fileIndex
				except:
					g.trace("assigning gnx for ",v,t)
					gnx = nodeIndices.getNewIndex()
					t.setFileIndex(gnx) # Don't convert to string until the actual write.
			s = ','.join([nodeIndices.toString(t.fileIndex) for t in v.tnodeList])
		else:
			s = ','.join([str(t.fileIndex) for t in v.tnodeList])
		# g.trace(s)
		fc.put(s) ; fc.put_dquote()</t>
<t tx="ekr.20031218072017.2003"></t>
<t tx="ekr.20031218072017.2004">def canonicalTnodeIndex(self,index):
	
	"""Convert Tnnn to nnn, leaving gnx's unchanged."""

	# index might be Tnnn, nnn, or gnx.
	id,time,n = g.app.nodeIndices.scanGnx(index,0)
	if time == None: # A pre-4.1 file index.
		if index[0] == "T":
			index = index[1:]

	return index</t>
<t tx="ekr.20031218072017.2005">def setAllJoinLinks (self,root=None):
	
	"""Update all join links in the tree"""

	if root: # Only update the subtree.
		v = root # 6/3/03
		after = root.nodeAfterTree()
		while v and v != after:
			if v not in v.t.joinList:
				v.t.joinList.append(v)
			v = v.threadNext()
	else: # Update everything.
		v = self.c.rootVnode()
		while v:
			# g.trace(v,v.t)
			if v not in v.t.joinList:
				v.t.joinList.append(v)
			v = v.threadNext()</t>
<t tx="ekr.20031218072017.2006"># All params have defaults, so t = tnode() is valid.

def __init__ (self,bodyString=None,headString=None):

	self.cloneIndex = 0 # or Pre-3.12 files.  Zero for @file nodes
	self.fileIndex = None # The immutable file index for this tnode.
	self.insertSpot = None # Location of previous insert point.
	self.scrollBarSpot = None # Previous value of scrollbar position.
	self.selectionLength = 0 # The length of the selected body text.
	self.selectionStart = 0 # The start of the selected body text.
	self.statusBits = 0 # status bits

	# Convert everything to unicode...
	self.headString = g.toUnicode(headString,g.app.tkEncoding)
	self.bodyString = g.toUnicode(bodyString,g.app.tkEncoding)
	
	self.vnodeList = [] # List of all vnodes pointing to this tnode.
	self._firstChild = None</t>
<t tx="ekr.20031218072017.2007">def findChild (self,headline):
	
	"""Return the next tnode in the at.tnodeList."""

	at = self

	if at.importing:
		p = at.createImportedNode(at.root,at.c,headline)
		return p.v.t

	if not hasattr(at.root,"tnodeList"):
		at.readError("no tnodeList for " + `at.root`)
		g.es("Write the @file node or use the Import Derived File command")
		g.trace("no tnodeList for ",at.root)
		return None
		
	if at.tnodeListIndex &gt;= len(at.root.tnodeList):
		at.readError("bad tnodeList index: %d, %s" % (at.tnodeListIndex,`at.root`))
		g.trace("bad tnodeList index",at.tnodeListIndex,len(at.root.tnodeList),at.root)
		return None
		
	t = at.root.tnodeList[at.tnodeListIndex]
	assert(t)
	at.tnodeListIndex += 1

	# Get any vnode joined to t.
	try:
		v = t.vnodeList[0]
	except:
		at.readError("No vnodeList for tnode: %s" % `t`)
		g.trace(at.tnodeListIndex)
		return None

	# Check the headline.
	if headline.strip() == v.headString().strip():
		t.setVisited() # Supress warning about unvisited node.
		return t
	else:
		at.readError(
			"Mismatched headline.\nExpecting: %s\ngot: %s" %
			(headline,v.headString()))
		g.trace("Mismatched headline",headline,v.headString())
		g.trace(at.tnodeListIndex,len(at.root.tnodeList))
		return None</t>
<t tx="ekr.20031218072017.2008">def getTnodeList (self,s):

	"""Parse a list of tnode indices in string s."""
	
	# Remember: entries in the tnodeList correspond to @+node sentinels, _not_ to tnodes!
	
	fc = self ; 

	indexList = s.split(',') # The list never ends in a comma.
	tnodeList = []
	for index in indexList:
		index = self.canonicalTnodeIndex(index)
		t = fc.tnodesDict.get(index)
		if not t:
			# Not an error: create a new tnode and put it in fc.tnodesDict.
			# g.trace("not allocated: %s" % index)
			t = self.newTnode(index)
		tnodeList.append(t)
		
	return tnodeList</t>
<t tx="ekr.20031218072017.2009">def newTnode(self,index):

	if self.tnodesDict.has_key(index):
		g.es("bad tnode index: " + `index` + ". Using empty text.")
		return leoNodes.tnode()
	else:
		# Create the tnode.  Use the _original_ index as the key in tnodesDict.
		t = leoNodes.tnode()
		self.tnodesDict[index] = t
	
		if type(index) not in (type(""),type(u"")):
			g.es("newTnode: unexpected index type:"+`type(index)`+`index`,color="red")
		
		# Convert any pre-4.1 index to a gnx.
		id,time,n = gnx = g.app.nodeIndices.scanGnx(index,0)
		if time != None:
			t.setFileIndex(gnx)

		return t</t>
<t tx="ekr.20031218072017.2010"></t>
<t tx="ekr.20031218072017.2011"></t>
<t tx="ekr.20031218072017.2012">def writeAtFileNodes (self):
	
	c = self.c

	changedFiles = c.atFileCommands.writeAll(writeAtFileNodesFlag=true)
	assert(changedFiles != None)
	if changedFiles:
		g.es("auto-saving outline",color="blue")
		c.save() # Must be done to set or clear tnodeList.</t>
<t tx="ekr.20031218072017.2013">def writeMissingAtFileNodes (self):

	c = self.c ; v = c.currentVnode()

	if v:
		at = c.atFileCommands
		changedFiles = at.writeMissing(v)
		assert(changedFiles != None)
		if changedFiles:
			g.es("auto-saving outline",color="blue")
			c.save() # Must be done to set or clear tnodeList.</t>
<t tx="ekr.20031218072017.2014">def writeNewDerivedFiles (self):
	
	c = self
	c.atFileCommands.writeNewDerivedFiles()
	g.es("auto-saving outline",color="blue")
	c.save() # Must be done to preserve tnodeList.
	
def writeOldDerivedFiles (self):
	
	c = self
	c.atFileCommands.writeOldDerivedFiles()
	g.es("auto-saving outline",color="blue")
	c.save() # Must be done to clear tnodeList.</t>
<t tx="ekr.20031218072017.2015">def writeAll(self,writeAtFileNodesFlag=false,writeDirtyAtFileNodesFlag=false):
	
	"""Write @file nodes in all or part of the outline"""

	at = self ; c = at.c
	write_new = not g.app.config.write_old_format_derived_files
	df = g.choose(write_new,at.new_df,at.old_df)
	df.initIvars()
	changedFiles = [] # Files that were actually changed.
	writtenFiles = [] # Files that might be written again.

	if writeAtFileNodesFlag:
		# Write all nodes in the selected tree.
		p = c.currentPosition()
		after = p.nodeAfterTree()
	else:
		# Write dirty nodes in the entire outline.
		p =  c.rootPosition()
		after = c.nullPosition()

	&lt;&lt; Clear all orphan bits &gt;&gt;
	while p and p != after:
		if p.isAnyAtFileNode() or p.isAtIgnoreNode():
			&lt;&lt; handle v's tree &gt;&gt;
			p.moveToNodeAfterTree()
		else:
			p.moveToThreadNext()

	&lt;&lt; say the command is finished &gt;&gt;
	return len(changedFiles) &gt; 0 # So caller knows whether to do an auto-save.

</t>
<t tx="ekr.20031218072017.2016">@ We must clear these bits because they may have been set on a previous write.
Calls to atFile::write may set the orphan bits in @file nodes.
If so, write_LEO_file will write the entire @file tree.
@c
	
for v2 in p.subtree_iter():
	v2.clearOrphan()</t>
<t tx="ekr.20031218072017.2017"># This code is a little tricky: @ignore not recognised in @silentfile nodes.
if p.v.isDirty() or writeAtFileNodesFlag or p.v.t in writtenFiles:

	df.fileChangedFlag = false # 1/9/04
	if p.isAtSilentFileNode():
		at.silentWrite(p)
	elif p.isAtIgnoreNode():
		pass
	elif p.isAtRawFileNode():
		at.rawWrite(p)
	elif p.isAtNoSentinelsFileNode():
		at.write(p,nosentinels=true)
	elif p.isAtFileNode():
		at.write(p)

	if not p.isAtIgnoreNode():
		writtenFiles.append(p.v.t)

	if df.fileChangedFlag: # Set by replaceTargetFileIfDifferent.
		changedFiles.append(p.v.t)</t>
<t tx="ekr.20031218072017.2018">if writeAtFileNodesFlag or writeDirtyAtFileNodesFlag:
	if len(writtenFiles) &gt; 0:
		g.es("finished")
	elif writeAtFileNodesFlag:
		g.es("no @file nodes in the selected tree")
	else:
		g.es("no dirty @file nodes")</t>
<t tx="ekr.20031218072017.2019">def writeMissing(self,p):

	at = self

	write_new = not g.app.config.write_old_format_derived_files
	df = g.choose(write_new,at.new_df,at.old_df)
	df.initIvars()
	writtenFiles = false ; changedFiles = false

	p = p.copy()
	after = p.nodeAfterTree()
	while p and p != after:
		if p.isAtSilentFileNode() or (p.isAnyAtFileNode() and not p.isAtIgnoreNode()):
			missing = false ; valid = true
			df.targetFileName = p.anyAtFileNodeName()
			&lt;&lt; set missing if the file does not exist &gt;&gt;
			if valid and missing:
				&lt;&lt; create df.outputFile &gt;&gt;
				if at.outputFile:
					&lt;&lt; write the @file node &gt;&gt;
			p.moveToNodeAfterTree()
		elif p.isAtIgnoreNode():
			p.moveToNodeAfterTree()
		else:
			p.moveToThreadNext()
	
	if writtenFiles &gt; 0:
		g.es("finished")
	else:
		g.es("no missing @file node in the selected tree")
		
	return changedFiles # So caller knows whether to do an auto-save.</t>
<t tx="ekr.20031218072017.2020"># This is similar, but not the same as, the logic in openWriteFile.

valid = df.targetFileName and len(df.targetFileName) &gt; 0

if valid:
	try:
		# Creates missing directives if option is enabled.
		df.scanAllDirectives(p)
		valid = df.errors == 0
	except:
		g.es("exception in atFile.scanAllDirectives")
		g.es_exception()
		valid = false

if valid:
	try:
		fn = df.targetFileName
		df.shortFileName = fn # name to use in status messages.
		df.targetFileName = g.os_path_join(df.default_directory,fn)
		df.targetFileName = g.os_path_normpath(df.targetFileName)

		path = df.targetFileName # Look for the full name, not just the directory.
		valid = path and len(path) &gt; 0
		if valid:
			missing = not g.os_path_exists(path)
	except:
		g.es("exception creating path:" + fn)
		g.es_exception()
		valid = false</t>
<t tx="ekr.20031218072017.2021">try:
	df.outputFileName = df.targetFileName + ".leotmp"
	df.outputFile = open(df.outputFileName,'wb')
	if df.outputFile == None:
		g.es("can not open " + df.outputFileName)
except:
	g.es("exception opening:" + df.outputFileName)
	g.es_exception()
	df.outputFile = None
</t>
<t tx="ekr.20031218072017.2022">if p.isAtSilentFileNode():
	at.silentWrite(p)
elif p.isAtRawFileNode():
	at.rawWrite(p)
elif p.isAtNoSentinelsFileNode():
	at.write(p,nosentinels=true)
elif p.isAtFileNode():
	at.write(p)
else: assert(0)

writtenFiles = true

if df.fileChangedFlag: # Set by replaceTargetFileIfDifferent.
	changedFiles = true</t>
<t tx="ekr.20031218072017.2023">def replaceTargetFileIfDifferent (self):
	
	assert(self.outputFile == None)
	
	self.fileChangedFlag = false
	if g.os_path_exists(self.targetFileName):
		if filecmp.cmp(self.outputFileName,self.targetFileName):
			&lt;&lt; delete the output file &gt;&gt;
		else:
			&lt;&lt; replace the target file with the output file &gt;&gt;
	else:
		&lt;&lt; rename the output file to be the target file &gt;&gt;

</t>
<t tx="ekr.20031218072017.2024">try: # Just delete the temp file.
	os.remove(self.outputFileName)
except:
	g.es("exception deleting:" + self.outputFileName)
	g.es_exception()

g.es("unchanged: " + self.shortFileName)</t>
<t tx="ekr.20031218072017.2025">try:
	# 10/6/02: retain the access mode of the previous file,
	# removing any setuid, setgid, and sticky bits.
	mode = (os.stat(self.targetFileName))[0] &amp; 0777
except:
	mode = None

try: # Replace target file with temp file.
	os.remove(self.targetFileName)
	try:
		g.utils_rename(self.outputFileName,self.targetFileName)
		if mode != None: # 10/3/02: retain the access mode of the previous file.
			try:
				os.chmod(self.targetFileName,mode)
			except:
				g.es("exception in os.chmod(%s)" % (self.targetFileName))
		g.es("writing: " + self.shortFileName)
		self.fileChangedFlag = true
	except:
		# 6/28/03
		self.writeError("exception renaming: %s to: %s" % (self.outputFileName,self.targetFileName))
		g.es_exception()
except:
	self.writeError("exception removing:" + self.targetFileName)
	g.es_exception()
	try: # Delete the temp file when the deleting the target file fails.
		os.remove(self.outputFileName)
	except:
		g.es("exception deleting:" + self.outputFileName)
		g.es_exception()</t>
<t tx="ekr.20031218072017.2026">try:
	g.utils_rename(self.outputFileName,self.targetFileName)
	g.es("creating: " + self.targetFileName)
	self.fileChangedFlag = true
except:
	self.writeError("exception renaming:" + self.outputFileName +
		" to " + self.targetFileName)
	g.es_exception()</t>
<t tx="ekr.20031218072017.2027"></t>
<t tx="ekr.20031218072017.2028">def dehoist(self):

	c = self ; v = c.currentVnode()
	if v and c.canDehoist():
		c.undoer.setUndoParams("De-Hoist",v)
		c.hoistStack.pop()
		v.contract()
		c.redraw()
		c.frame.clearStatusLine()
		if c.hoistStack:
			h = c.hoistStack[-1]
			c.frame.putStatusLine("Hoist: " + h.headString())
		else:
			c.frame.putStatusLine("No hoist")

def hoist(self):

	c = self ; v = c.currentVnode()
	if v and c.canHoist():
		c.undoer.setUndoParams("Hoist",v)
		c.hoistStack.append(v)
		v.expand()
		c.redraw()
		c.frame.clearStatusLine()
		c.frame.putStatusLine("Hoist: " + v.headString())</t>
<t tx="ekr.20031218072017.2029">def drawTopTree (self):
	
	"""Draws the top-level tree, taking into account the hoist state."""
	
	c = self.c
	
	if c.hoistStack:
		p = c.hoistStack[-1]
		self.drawTree(p,root_left,root_top,0,0,hoistFlag=true)
	else:
		self.drawTree(c.rootPosition(),root_left,root_top,0,0)</t>
<t tx="ekr.20031218072017.2030">def redo (self):

	u = self ; c = u.c
	if not u.canRedo(): return
	if not u.getBead(u.bead+1): return
	current = c.currentPosition()
	if not current: return
	# g.trace(u.bead+1,len(u.beads),u.peekBead(u.bead+1))
	u.redoing = true ; redrawFlag = true
	redoType = u.undoType # Use the type of the next bead.
	updateSetChangedFlag = true
	c.beginUpdate()
	if 1: # range...
		&lt;&lt; redo clone cases &gt;&gt;
		&lt;&lt; redo hoist cases &gt;&gt;
		&lt;&lt; redo insert cases &gt;&gt;
		&lt;&lt; redo delete cases &gt;&gt;
		&lt;&lt; redo move &amp; drag cases &gt;&gt;
		&lt;&lt; redo promote and demote cases &gt;&gt;
		&lt;&lt; redo replace cases &gt;&gt;
		&lt;&lt; redo sort cases &gt;&gt;
		&lt;&lt; redo typing cases &gt;&gt;
		else: g.trace("Unknown case: ",redoType)
		if updateSetChangedFlag:
			c.setChanged(true)
			if u.p: u.p.setDirty()
	c.endUpdate(redrawFlag) # 11/08/02
	u.redoing = false
	u.bead += 1
	u.setUndoTypes()</t>
<t tx="ekr.20031218072017.2031">if redoType in ("Clone Node","Drag &amp; Clone"):
	
	if u.back:
		u.p.linkAfter(u.back)
	elif u.parent:
		u.p.linkAsNthChild(u.parent,0)
	else:
		u.p.linkAsRoot()

	c.selectVnode(p)</t>
<t tx="ekr.20031218072017.2032">elif redoType == "Delete Node" or redoType == "Cut Node":

	c.selectVnode(u.p)
	c.deleteOutline()</t>
<t tx="ekr.20031218072017.2033">elif redoType == "Hoist":
	
	c.selectVnode(u.p)
	c.hoist()
	updateSetChangedFlag = false
	
elif redoType == "De-Hoist":
	
	c.selectVnode(u.p)
	c.dehoist()
	updateSetChangedFlag = false</t>
<t tx="ekr.20031218072017.2034">elif redoType in ["Import","Insert Node","Paste Node"]:

	if u.back:
		u.p.linkAfter(u.back)
	elif u.parent:
		u.p.linkAsNthChild(u.parent,0)
	else:
		u.p.linkAsRoot()

	c.selectVnode(u.p)</t>
<t tx="ekr.20031218072017.2035">elif redoType in ["Drag","Move Down","Move Left","Move Right","Move Up"]:

	# g.trace(u.p)
	if u.parent:
		u.p.moveToNthChildOf(u.parent,u.n)
	elif u.back:
		u.p.moveAfter(u.back)
	else:
		# Moving up is the only case that can do this.
		assert(u.p.hasParent)
		parent = u.p.getParent()
		u.p.moveToRoot(c.rootPostion())
		parent.moveAfter(u.p)

	c.selectVnode(u.p)
	
elif redoType == "Drag":

	u.p.moveToNthChildOf(u.parent,u.n)
	c.selectVnode(u.p)</t>
<t tx="ekr.20031218072017.2036">elif redoType == "Demote":

	c.selectVnode(u.p)
	c.demote()
	
elif redoType == "Promote":

	c.selectVnode(u.p)
	c.promote()</t>
<t tx="ekr.20031218072017.2037">elif redoType == "Sort Children":

	c.selectVnode(u.p)
	c.sortChildren()

elif redoType == "Sort Siblings":

	c.selectVnode(u.p)
	c.sortSiblings()
	
elif redoType == "Sort Top Level":
	
	c.selectVnode(u.p)
	c.sortTopLevel()
	u.p = None # don't mark u.p dirty</t>
<t tx="ekr.20031218072017.2038">elif redoType in ( "Typing",
	"Change","Convert Blanks","Convert Tabs","Cut",
	"Delete","Indent","Paste","Reformat Paragraph","Undent"):

	# g.trace(redoType,u.p)
	# selectVnode causes recoloring, so avoid if possible.
	if current != u.p:
		c.selectVnode(u.p)
	elif redoType in ("Cut","Paste"):
		c.frame.body.forceFullRecolor()

	self.undoRedoText(
		u.p,u.leading,u.trailing,
		u.newMiddleLines,u.oldMiddleLines,
		u.newNewlines,u.oldNewlines,
		tag="redo",undoType=redoType)
	
	if u.newSel:
		c.frame.body.setTextSelection(u.newSel)
	if u.yview:
		c.frame.body.setYScrollPosition(u.yview)
	redrawFlag = (current != u.p)
		
elif redoType == "Change All":

	count = 0
	while 1:
		u.bead += 1
		d = u.getBead(u.bead+1)
		assert(d)
		redoType = u.undoType
		# g.trace(redoType,u.p,u.newText)
		if redoType == "Change All":
			c.selectVnode(u.p)
			break
		elif redoType == "Change":
			u.p.v.t.setTnodeText(u.newText)
			u.p.setDirty()
			count += 1
		elif redoType == "Change Headline":
			u.p.initHeadString(u.newText)
			count += 1
		else: assert(false)
	g.es("redo %d instances" % count)

elif redoType == "Change Headline":
	
	# g.trace(redoType,u.p,u.newText)
	u.p.setHeadStringOrHeadline(u.newText)
	c.selectVnode(u.p)</t>
<t tx="ekr.20031218072017.2039">def undo (self):

	"""This function and its allies undo the operation described by the undo parmaters."""
	
	u = self ; c = u.c
	if not u.canUndo(): return
	if not u.getBead(u.bead): return
	current = c.currentPosition()
	if not current: return
	# g.trace(len(u.beads),u.bead,u.peekBead(u.bead))
	c.endEditing()# Make sure we capture the headline for a redo.
	u.undoing = true
	undoType = u.undoType
	redrawFlag = true
	updateSetChangedFlag = true
	c.beginUpdate()
	if 1: # update...
		&lt;&lt; undo clone cases &gt;&gt;
		&lt;&lt; undo delete cases &gt;&gt;
		&lt;&lt; undo hoist cases &gt;&gt;
		&lt;&lt; undo insert cases &gt;&gt;
		&lt;&lt; undo move &amp; drag cases &gt;&gt;
		&lt;&lt; undo promote and demote cases &gt;&gt;
		&lt;&lt; undo replace cases &gt;&gt;
		&lt;&lt; undo sort cases &gt;&gt;
		&lt;&lt; undo typing cases &gt;&gt;
		else: g.trace("Unknown case: ",u.undoType)
		if updateSetChangedFlag:
			c.setChanged(true)
			if u.p: u.p.setDirty()
	c.endUpdate(redrawFlag) # 11/9/02
	u.undoing = false
	u.bead -= 1
	u.setUndoTypes()
	# g.print_stats()
</t>
<t tx="ekr.20031218072017.2040"># We can immediately delete the clone because clone() can recreate it using only v.

if undoType == "Clone Node":
	
	c.selectVnode(u.p)
	c.deleteOutline()
	c.selectVnode(u.back)

elif undoType == "Drag &amp; Clone":
	
	c.selectVnode(u.p)
	c.deleteOutline()
	c.selectVnode(u.oldV)</t>
<t tx="ekr.20031218072017.2041">@ Deleting a clone is _not_ the same as undoing a clone:
the clone may have been moved, so there is no necessary relationship between the two nodes.
@c

elif undoType == "Delete Node" or undoType == "Cut Node":
	
	if u.back:
		u.p.linkAfter(u.back)
	elif u.parent:
		u.p.linkAsNthChild(u.parent,0)
	else:
		u.p.linkAsRoot()

	c.selectVnode(u.p)</t>
<t tx="ekr.20031218072017.2042">elif undoType == "Hoist":
	
	c.selectVnode(u.p)
	c.dehoist()
	updateSetChangedFlag = false

elif undoType == "De-Hoist":
	
	c.selectVnode(u.p)
	c.hoist()
	updateSetChangedFlag = false
</t>
<t tx="ekr.20031218072017.2043">elif undoType in ["Import","Insert Node","Paste Node"]:
	
	# g.trace(u.p)
	c.selectVnode(u.p)
	c.deleteOutline()
	if u.select:
		# g.trace("Insert/Paste:",u.select)
		c.selectVnode(u.select)</t>
<t tx="ekr.20031218072017.2044">elif undoType in ["Drag", "Move Down","Move Left","Move Right","Move Up"]:

	# g.trace("oldParent",u.oldParent)
	if u.oldParent:
		u.p.moveToNthChildOf(u.oldParent,u.oldN)
	elif u.oldBack:
		u.p.moveAfter(u.oldBack)
	else:
		# Moving up is the only case that can do this.
		assert(u.p.hasParent())
		parent = u.p.getParent()
		u.p.moveToRoot(c.rootPosition())
		parent.moveAfter(u.p)

	c.selectVnode(u.p)</t>
<t tx="ekr.20031218072017.2045">@ Promote and demote operations are the hard to undo, because they involve relinking a list of nodes. We pass the work off to routines dedicated to the task.
@c

elif undoType == "Demote":

	u.undoDemote()

elif undoType == "Promote":
	
	u.undoPromote()</t>
<t tx="ekr.20031218072017.2046">@ Sort operations are the hard to undo, because they involve relinking a list of nodes. We pass the work off to routines dedicated to the task.
@c

elif undoType == "Sort Children":
	
	u.undoSortChildren()

elif undoType == "Sort Siblings":
	
	u.undoSortSiblings()
	
elif undoType == "Sort Top Level":
	
	u.undoSortTopLevel()
	u.p = None # don't mark u.p dirty</t>
<t tx="ekr.20031218072017.2047">@ When making "large" changes to text, we simply save the old and new text for undo and redo.  This happens rarely, so the expense is minor.

But for typical typing situations, where we are typing a single character, saving both the old and new text wastes a huge amount of space and puts extreme stress on the garbage collector.  This in turn can cause big performance problems.
@c
	
elif undoType in ( "Typing",
	"Change","Convert Blanks","Convert Tabs","Cut",
	"Delete","Indent","Paste","Reformat Paragraph","Undent"):

	# g.trace(undoType,u.p)
	# selectVnode causes recoloring, so don't do this unless needed.
	if current != u.p:
		c.selectVnode(u.p)
	elif undoType in ("Cut","Paste"):
		c.frame.body.forceFullRecolor()

	self.undoRedoText(
		u.p,u.leading,u.trailing,
		u.oldMiddleLines,u.newMiddleLines,
		u.oldNewlines,u.newNewlines,
		tag="undo",undoType=undoType)
	if u.oldSel:
		c.frame.body.setTextSelection(u.oldSel)
	if u.yview:
		c.frame.body.setYScrollPosition(u.yview)
	redrawFlag = (current != u.p)
		
elif undoType == "Change All":

	count = 0
	while 1:
		u.bead -= 1
		d = u.getBead(u.bead)
		assert(d)
		undoType = u.undoType
		# g.trace(undoType,u.p,u.oldText)
		if undoType == "Change All":
			c.selectVnode(u.p)
			break
		elif undoType == "Change":
			u.p.setTnodeText(u.oldText)  # p.setTnodeText
			count += 1
			u.p.setDirty()
		elif undoType == "Change Headline":
			u.p.initHeadString(u.oldText)  # p.initHeadString
			count += 1
		else: assert(false)
	g.es("undo %d instances" % count)
		
elif undoType == "Change Headline":
	
	# g.trace(u.oldText)
	u.p.setHeadStringOrHeadline(u.oldText)
	c.selectVnode(u.p)</t>
<t tx="ekr.20031218072017.2048">def isAncestorOf (self, v):
	
	if not v:
		return false
	v = v.parent()
	while v:
		if v == self:
			return true
		v = v.parent()
	return false</t>
<t tx="ekr.20031218072017.2049">@

- These commands eat one too many characters.
- The selection is not set properly afterwards.</t>
<t tx="ekr.20031218072017.2050"></t>
<t tx="ekr.20031218072017.2051">@nocolor

https://sourceforge.net/forum/message.php?msg_id=1935163
By: nobody
Open Discussion

xyz.leo is not a valid Leo file: &lt;leoFileCommands.BadLeoFile instance at
0x01789A70&gt;

apparently there isnt any filtering done on save. that could be a problem if
people start embedding binary. I had a section in a body like this: 0000: c0 23
01 01 00 30 1a 75 | .#...0.u there was an actual 0x1a in the file which wrote
ok read incorrect if you can catch the exception maybe there is a possibilty to
recover and just xlate 0x1a to '~' and mark the node?

----

The fix was to open files with 'rb' instead of 'r'.  This probably should be done in more places.
</t>
<t tx="ekr.20031218072017.2052">def openWithFileName(fileName,old_c,enableLog=true):
	
	"""Create a Leo Frame for the indicated fileName if the file exists."""

	# g.trace(fileName)
	assert(app.config)

	if not fileName or len(fileName) == 0:
		return false, None

	# Create a full normalized path name.
	# Display the file name with case intact.
	fileName = g.os_path_join(os.getcwd(), fileName)
	fileName = g.os_path_normpath(fileName)
	oldFileName = fileName 
	fileName = g.os_path_normcase(fileName)

	# If the file is already open just bring its window to the front.
	list = app.windowList
	for frame in list:
		fn = g.os_path_normcase(frame.c.mFileName)
		fn = g.os_path_normpath(fn)
		if fileName == fn:
			frame.deiconify()
			app.setLog(frame.log,"openWithFileName")
			# g.es("This window already open")
			return true, frame
			
	fileName = oldFileName # Use the idiosyncratic file name.

	try:
		# 11/4/03: open the file in binary mode to allow 0x1a in bodies &amp; headlines.
		file = open(fileName,'rb')
		if file:
			c,frame = app.gui.newLeoCommanderAndFrame(fileName)
			frame.log.enable(enableLog)
			if not g.doHook("open1",old_c=old_c,new_c=c,fileName=fileName):
				app.setLog(frame.log,"openWithFileName")
				app.lockLog()
				frame.c.fileCommands.open(file,fileName) # closes file.
				app.unlockLog()
			frame.openDirectory = g.os_path_dirname(fileName)
			g.doHook("open2",old_c=old_c,new_c=frame.c,fileName=fileName)
			return true, frame
		else:
			g.es("can not open: " + fileName,color="red")
			return false, None
	except IOError:
		g.es("can not open: " + fileName, color="blue")
		return false, None
	except:
		if 1:
			print "exceptions opening:", fileName
			traceback.print_exc()
		else:
			g.es("exceptions opening: " + fileName,color="red")
			g.es_exception()
		return false, None</t>
<t tx="ekr.20031218072017.2053"># The node-only option wasn't working due to a bug in createFrame.</t>
<t tx="ekr.20031218072017.2054"></t>
<t tx="ekr.20031218072017.2055">a

aa</t>
<t tx="ekr.20031218072017.2056">This node should not be searched.

a

aa</t>
<t tx="ekr.20031218072017.2057">This node should not be searched.

a

aa</t>
<t tx="ekr.20031218072017.2058"></t>
<t tx="ekr.20031218072017.2059">def init (self,c):

	# N.B.: separate c.ivars are much more convenient than a dict.
	for key in self.intKeys:
		val = getattr(c, key + "_flag")
		val = g.choose(val,1,0) # 2/1/04: work around major Tk problem.
		self.dict[key].set(val)
		# g.trace(key,`val`)

	&lt;&lt; set find/change widgets &gt;&gt;
	&lt;&lt; set radio buttons from ivars &gt;&gt;</t>
<t tx="ekr.20031218072017.2060">self.find_text.delete("1.0","end")
self.find_text.insert("end",c.find_text)

self.change_text.delete("1.0","end")
self.change_text.insert("end",c.change_text)</t>
<t tx="ekr.20031218072017.2061">found = false
for var,setting in (
	("pattern_match","pattern-search"),
	("script_search","script-search")):
	val = self.dict[var].get()
	if val:
		self.dict["radio-find-type"].set(setting)
		found = true ; break
if not found:
	self.dict["radio-find-type"].set("plain-search")
	
found = false
for var,setting in (
	("suboutline_only","suboutline-only"),
	("node_only","node-only"),
	("selection_only","selection-only")): # 11/9/03
	val = self.dict[var].get()
	if val:
		self.dict["radio-search-scope"].set(setting)
		found = true ; break
if not found:
	self.dict["radio-search-scope"].set("entire-outine")</t>
<t tx="ekr.20031218072017.2062">def getPrefs (self):

	c = self.c ; config = g.app.config
	
	if self.getOpenTag("&lt;preferences"):
		return

	table = (
		("allow_rich_text",None,None), # Ignored.
		("tab_width","tab_width",self.getLong),
		("page_width","page_width",self.getLong),
		("tangle_bat","tangle_batch_flag",self.getBool),
		("untangle_bat","untangle_batch_flag",self.getBool),
		("output_doc_chunks","output_doc_flag",self.getBool),
		("noweb_flag",None,None), # Ignored.
		("extended_noweb_flag",None,None), # Ignored.
		("defaultTargetLanguage","target_language",self.getTargetLanguage),
		("use_header_flag","use_header_flag",self.getBool))
	
	while 1:
		found = false
		for tag,var,f in table:
			if self.matchTag("%s=" % tag):
				if var:
					self.getDquote() ; val = f() ; self.getDquote()
					setattr(c,var,val)
				else:
					self.getDqString()
				found = true ; break
		if not found:
			if self.matchTag("&gt;"):
				break
			else: # New in 4.1: ignore all other tags.
				self.getUnknownTag()

	while 1:
		if self.matchTag("&lt;defaultDirectory&gt;"):
			# New in version 0.16.
			c.tangle_directory = self.getEscapedString()
			self.getTag("&lt;/defaultDirectory&gt;")
			if not g.os_path_exists(c.tangle_directory):
				g.es("default tangle directory not found:" + c.tangle_directory)
		elif self.matchTag("&lt;TSyntaxMemo_options&gt;"):
			self.getEscapedString() # ignored
			self.getTag("&lt;/TSyntaxMemo_options&gt;")
		else: break
	self.getTag("&lt;/preferences&gt;")
	
	# Override .leo file's preferences if settings are in leoConfig.txt.
	if config.configsExist:
		config.setCommandsIvars(c)</t>
<t tx="ekr.20031218072017.2063">def getTargetLanguage (self):
	
	# Must match longer tags before short prefixes.
	for name in g.app.language_delims_dict.keys():
		if self.matchTagWordIgnoringCase(name):
			language = name.replace("/","")
			# self.getDquote()
			return language
			
	return "c" # default</t>
<t tx="ekr.20031218072017.2064">def getFindPanelSettings (self):

	c = self.c ; config = g.app.config ; findFrame = g.app.findFrame
	&lt;&lt; Set defaults of all flags &gt;&gt;
	if not self.getOpenTag("&lt;find_panel_settings"):
		while 1:
			if   self.matchTag("batch="): c.batch_flag = self.getDqBool()
			elif self.matchTag("ignore_case="): c.ignore_case_flag = self.getDqBool()
			elif self.matchTag("mark_changes="): c.mark_changes_flag = self.getDqBool()
			elif self.matchTag("mark_finds="): c.mark_finds_flag = self.getDqBool()
			elif self.matchTag("node_only="): c.node_only_flag = self.getDqBool()
			elif self.matchTag("pattern_match="): c.pattern_match_flag = self.getDqBool()
			elif self.matchTag("reverse="): c.reverse_flag = self.getDqBool()
			elif self.matchTag("script_change="): c.script_change_flag = self.getDqBool() # 11/05/03
			elif self.matchTag("script_search="): c.script_search_flag = self.getDqBool() # 11/05/03
			elif self.matchTag("search_headline="): c.search_headline_flag = self.getDqBool()
			elif self.matchTag("search_body="): c.search_body_flag = self.getDqBool()
			elif self.matchTag("selection_only="): c.selection_only_flag = self.getDqBool() # 11/9/03
			elif self.matchTag("suboutline_only="): c.suboutline_only_flag = self.getDqBool()
			elif self.matchTag("whole_word="): c.whole_word_flag = self.getDqBool()
			elif self.matchTag("wrap="): c.wrap_flag = self.getDqBool()
			elif self.matchTag("&gt;"): break
			else: self.getUnknownTag() # New in 4.1: ignore all other tags.
		#
		self.getTag("&lt;find_string&gt;")
		c.find_text = self.getEscapedString()
		self.getTag("&lt;/find_string&gt;")
		#
		self.getTag("&lt;change_string&gt;")
		c.change_text = self.getEscapedString()
		self.getTag("&lt;/change_string&gt;")
		#
		self.getTag("&lt;/find_panel_settings&gt;")
	
	# Override .leo file's preferences if settings are in leoConfig.txt.
	config.setCommandsFindIvars(c)
	# Update the settings immediately.
	if g.app.gui.guiName() == "tkinter":
		g.app.findFrame.init(c)</t>
<t tx="ekr.20031218072017.2065">if g.app.gui.guiName() == "tkinter":

	for var in findFrame.intKeys:
		attr = "%s_flag" % (var)
		setattr(c,attr,false)
		# g.trace(attr)
</t>
<t tx="ekr.20031218072017.2066">def putPrefs (self):

	c = self.c ; config = g.app.config

	self.put("&lt;preferences")
	
	if 0:
		self.put(" allow_rich_text=") ; self.put_dquoted_bool(0) # no longer used
	
	&lt;&lt; put prefs that may exist in leoConfig.txt &gt;&gt;
	
	self.put("&lt;/preferences&gt;") ; self.put_nl()</t>
<t tx="ekr.20031218072017.2067">language = c.target_language
for name in xml_language_names:
	s = string.lower(name)
	s = string.replace(s,"/","")
	if s == language:
		language = name ; break

if config.configsExist and not config.read_only: # 8/6/02
	pass # config.update has already been called.
else:
	self.put(" defaultTargetLanguage=") ; self.put_in_dquotes(language)
	self.put(" node_only=") ; self.put_dquoted_bool(c.node_only_flag)
	self.put(" output_doc_chunks=") ; self.put_dquoted_bool(c.output_doc_flag)
	self.put(" page_width=") ; self.put_in_dquotes(`c.page_width`)
	self.put(" tab_width=") ; self.put_in_dquotes(`c.tab_width`)
	self.put(" tangle_bat=") ; self.put_dquoted_bool(c.tangle_batch_flag)
	self.put(" untangle_bat=") ; self.put_dquoted_bool(c.untangle_batch_flag)
	self.put(" use_header_flag=") ; self.put_dquoted_bool(c.use_header_flag)

self.put("&gt;") ; self.put_nl()
# New in version 0.16
&lt;&lt; put default directory &gt;&gt;</t>
<t tx="ekr.20031218072017.2068">if config.configsExist:
	pass # Has been done earlier.
elif len(c.tangle_directory) &gt; 0:
	self.put_tab()
	self.put("&lt;defaultDirectory&gt;")
	self.putEscapedString(c.tangle_directory)
	self.put("&lt;/defaultDirectory&gt;")
	self.put_nl()</t>
<t tx="ekr.20031218072017.2069"># The fix was simple: call setUndoParams instead of setUndoTypingParams in batchChange.</t>
<t tx="ekr.20031218072017.2070">@nocolor

Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=2248850
By: billp9619

Leo Log Window...
Leo 4.0, build  1.95 , October 17, 2003
Python 2.2.1, Tk 8.3.2

Text encoding = cp1252
hhh dddd
hhh dddd
changed: 2

Problem:
The above two changes were in separate nodes.
I selected "Search Body Text" and "Node Only".
and clicked "Change All".

Basically in 4.0 final this applies the change to the entire outline.
Then if you "undo", it erases all text panels! Yikes!

-----------------

Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=2248921
By: billp9619

It appears that setting "Suboutline Only" can restrict the "Change All" scope.

Comments:
This is not intuitive to me. Shouldn't "Node only" have restricted to the current
node?

Still concerned about "undo" erasing all content. That can't be  intentional.
can it?
</t>
<t tx="ekr.20031218072017.2071"></t>
<t tx="ekr.20031218072017.2072">def checkOutline (self):
	
	"""Report any possible clone errors in the outline.
	
	Remove any unused tnodeLists."""
	
	c = self
	
	count = 0 ; errors = 0
	for p in c.allNodes_iter():
		count += 1
		# Empty tnodeLists are not errors.
		v = p.v
		if hasattr(v,"tnodeList") and len(v.tnodeList) &gt; 0 and not v.isAnyAtFileNode():
			s = "deleting tnodeList for " + `v`
			print s ; g.es(s,color="blue")
			delattr(v,"tnodeList")
			errors += 1

	s = "%d nodes checked, %d errors" % (count,errors)
	print s
	if errors: g.es(s,color="red")
	else:      g.es(s)
	return errors</t>
<t tx="ekr.20031218072017.2073"></t>
<t tx="ekr.20031218072017.2074"></t>
<t tx="ekr.20031218072017.2075"></t>
<t tx="ekr.20031218072017.2076">@nocolor

Leo was mistaking the escaped percentile sign "\%" (backslash followed by
percentile) for the LaTeX comment delimiter (plain percentile sign).

The fix was:
	
1. Add "\\%" to the list of LaTeX keywords.
2. Create latex_special_keyword_characters = "@(){}%"
3. Use latex_special_keyword_characters when scanning for possible LaTeX keywords.

@color</t>
<t tx="ekr.20031218072017.2077">@ Again, wxWindows screws up...</t>
<t tx="ekr.20031218072017.2078">def createRecentFilesMenuItems (self):
	
	c = self.c ; frame = c.frame
	recentFilesMenu = self.getMenu("Recent Files...")
	
	# Delete all previous entries.
	self.delete_range(recentFilesMenu,0,len(c.recentFiles)+2)
	
	# Create the first two entries.
	table = (
		("Clear Recent Files",None,c.clearRecentFiles),
		("-",None,None))
	self.createMenuEntries(recentFilesMenu,table)
	
	# Create all the other entries.
	i = 3
	for name in c.recentFiles:
		def callback (event=None,c=c,name=name): # 12/9/03
			c.openRecentFile(name)
		label = "%d %s" % (i-2,g.computeWindowTitle(name))
		self.add_command(recentFilesMenu,label=label,command=callback,underline=0)
		i += 1</t>
<t tx="ekr.20031218072017.2079"></t>
<t tx="ekr.20031218072017.2080">def clearRecentFiles (self):
	
	"""Clear the recent files list, then add the present file."""

	c = self ; f = c.frame
	
	recentFilesMenu = f.menu.getMenu("Recent Files...")
	f.menu.delete_range(recentFilesMenu,0,len(c.recentFiles))
	
	c.recentFiles = []
	f.menu.createRecentFilesMenuItems()
	c.updateRecentFiles(c.mFileName)</t>
<t tx="ekr.20031218072017.2081">def openRecentFile(self,name=None):
	
	if not name: return

	c = self ; v = c.currentVnode()
	&lt;&lt; Set closeFlag if the only open window is empty &gt;&gt;
	
	fileName = name
	if not g.doHook("recentfiles1",c=c,v=v,fileName=fileName,closeFlag=closeFlag):
		ok, frame = g.openWithFileName(fileName,c)
		if ok and closeFlag:
			g.app.destroyWindow(c.frame) # 12/12/03
			g.app.setLog(frame.log,"openRecentFile") # Sets the log stream for g.es()

	g.doHook("recentfiles2",c=c,v=v,fileName=fileName,closeFlag=closeFlag)</t>
<t tx="ekr.20031218072017.2082">@ If this is the only open window was opened when the app started, and the window has never been written to or saved, then we will automatically close that window if this open command completes successfully.
@c
	
closeFlag = (
	c.frame.startupWindow==true and # The window was open on startup
	c.changed==false and c.frame.saved==false and # The window has never been changed
	g.app.numberOfWindows == 1) # Only one untitled window has ever been opened</t>
<t tx="ekr.20031218072017.2083">def updateRecentFiles (self,fileName):
	
	"""Create the RecentFiles menu.  May be called with Null fileName."""
	
	# g.trace(fileName)
	
	# Update the recent files list in all windows.
	if fileName:
		normFileName = g.os_path_norm(fileName)
		for frame in g.app.windowList:
			c = frame.c
			# Remove all versions of the file name.
			for name in c.recentFiles:
				if normFileName == g.os_path_norm(name):
					c.recentFiles.remove(name)
			c.recentFiles.insert(0,fileName)
			# Recreate the Recent Files menu.
			frame.menu.createRecentFilesMenuItems()
	else: # 12/01/03
		for frame in g.app.windowList:
			frame.menu.createRecentFilesMenuItems()
		
	# Update the config file.
	g.app.config.setRecentFiles(self.recentFiles) # Use self, _not_ c.
	g.app.config.update()</t>
<t tx="ekr.20031218072017.2084"></t>
<t tx="ekr.20031218072017.2085"></t>
<t tx="ekr.20031218072017.2086">def preferences(self):
	
	"""Show the Preferences Panel, creating it if necessary."""
	
	c = self ; frame = c.frame

	if not frame.prefsPanel:
		frame.prefsPanel = g.app.gui.createPrefsPanel(c)
		
	frame.prefsPanel.bringToFront()</t>
<t tx="ekr.20031218072017.2087"></t>
<t tx="ekr.20031218072017.2088">def fontPanel(self):
	
	c = self ; frame = c.frame

	if not frame.fontPanel:
		frame.fontPanel = g.app.gui.createFontPanel(c)
		
	frame.fontPanel.bringToFront()</t>
<t tx="ekr.20031218072017.2089"></t>
<t tx="ekr.20031218072017.2090">def colorPanel(self):
	
	c = self ; frame = c.frame

	if not frame.colorPanel:
		frame.colorPanel = g.app.gui.createColorPanel(c)
		
	frame.colorPanel.bringToFront()</t>
<t tx="ekr.20031218072017.2091"></t>
<t tx="ekr.20031218072017.2092">def openCompareWindow (self):
	
	c = self ; frame = c.frame
	
	if not frame.comparePanel:
		frame.comparePanel = g.app.gui.createComparePanel(c)

	frame.comparePanel.bringToFront()</t>
<t tx="ekr.20031218072017.2093"></t>
<t tx="ekr.20031218072017.2094"></t>
<t tx="ekr.20031218072017.2095"></t>
<t tx="ekr.20031218072017.2096"></t>
<t tx="ekr.20031218072017.2097">From: "Marc-Antoine Parent" &lt;maparent@acm.org&gt;
To: "Edward K.Ream" &lt;edreamleo@charter.net&gt;
Sent: Thursday, November 13, 2003 2:42 PM
Subject: Mac OS

&gt; Hello!
&gt; I updated my copy of Leo.
&gt; Two notes:
&gt; in leo.py line 108,
&gt;                 path = toUnicode(path,"mbcs") # 10/20/03
&gt; kills the mac (unknown encoding. It seems we get paths as UTF-8, but 
&gt; where diacritics are separated from their base letter... ugly! You 
&gt; could change that with unicodedata.normalize('NFC',thePathAsUnicode), 
&gt; but that requires Python2.3, an is probably not necessary. Just use 
&gt; utf-8 if the platform is 'darwin'.
&gt; 
&gt; And, as I said before, this would allow us to have a command modifier:
&gt; 
&gt; *** leoTkinterFrame.py.~1.5.~   Fri Nov  7 09:48:43 2003
&gt; --- leoTkinterFrame.py  Thu Nov 13 14:47:20 2003
&gt; ***************
&gt; *** 913,918 ****
&gt; --- 913,919 ----
&gt;                  if shortcut == None or len(shortcut) == 0:
&gt;                          return None,None
&gt;                  s = shortcut.strip().lower()
&gt; +               has_cmd   = s.find("cmd") &gt;= 0    or s.find("command") &gt;= 0
&gt;                  has_alt   = s.find("alt") &gt;= 0
&gt;                  has_ctrl  = s.find("control") &gt;= 0 or s.find("ctrl") &gt;= 0
&gt;                  has_shift = s.find("shift") &gt;= 0   or s.find("shft") &gt;= 0
&gt; ***************
&gt; *** 1045,1051 ****
&gt;                  #@      &lt;&lt; synthesize the shortcuts from the information &gt;&gt;
&gt;                  #@+node:&lt;&lt; synthesize the shortcuts from the information &gt;&gt;
&gt;                  bind_head = menu_head = ""
&gt; !
&gt;                  if has_shift:
&gt;                          menu_head = "Shift+"
&gt;                          if len(last) &gt; 1 or (len(last)==1 and last[0] not in string.ascii_letters):
&gt; --- 1046,1056 ----
&gt;                  #@      &lt;&lt; synthesize the shortcuts from the 
&gt; information &gt;&gt;
&gt;                  #@+node:&lt;&lt; synthesize the shortcuts from the 
&gt; information &gt;&gt;
&gt;                  bind_head = menu_head = ""
&gt; !
&gt; !               if has_cmd:
&gt; !                       bind_head = bind_head + "Command-"
&gt; !                       menu_head = menu_head + "Command+"
&gt; !
&gt;                  if has_shift:
&gt;                          menu_head = "Shift+"
&gt;                          if len(last) &gt; 1 or (len(last)==1 and last[0] not in string.ascii_letters):
</t>
<t tx="ekr.20031218072017.2098">@ This code "canonicalizes" both the shortcuts that appear in menus and the arguments to bind, mostly ignoring case and the order in which special keys are specified in leoConfig.txt.

For example, Ctrl+Shift+a is the same as Shift+Control+A.  Either may appear in leoConfig.txt.  Each generates Shift+Ctrl-A in the menu and Control+A as the argument to bind.

Returns (bind_shortcut, menu_shortcut)
@c

def canonicalizeShortcut (self,shortcut):
	
	if shortcut == None or len(shortcut) == 0:
		return None,None
	s = shortcut.strip().lower()
	has_cmd   = s.find("cmd") &gt;= 0     or s.find("command") &gt;= 0 # 11/18/03
	has_alt   = s.find("alt") &gt;= 0
	has_ctrl  = s.find("control") &gt;= 0 or s.find("ctrl") &gt;= 0
	has_shift = s.find("shift") &gt;= 0   or s.find("shft") &gt;= 0
	&lt;&lt; set the last field, preserving case &gt;&gt;
	&lt;&lt; canonicalize the last field &gt;&gt;
	&lt;&lt; synthesize the shortcuts from the information &gt;&gt;
	# print shortcut,bind_shortcut,menu_shortcut
	return bind_shortcut,menu_shortcut</t>
<t tx="ekr.20031218072017.2099">bind_last = menu_last = last
if len(last) == 1:
	ch = last[0]
	if ch in string.ascii_letters:
		menu_last = string.upper(last)
		if has_shift:
			bind_last = string.upper(last)
		else:
			bind_last = string.lower(last)
	elif ch in string.digits:
		bind_last = "Key-" + ch # 1-5 refer to mouse buttons, not keys.
	else:
		&lt;&lt; define dict of Tk bind names &gt;&gt;
		if ch in dict.keys():
			bind_last = dict[ch]
elif len(last) &gt; 0:
	&lt;&lt; define dict of special names &gt;&gt;
	last2 = string.lower(last)
	if last2 in dict.keys():
		bind_last,menu_last = dict[last2]</t>
<t tx="ekr.20031218072017.2100"># These are defined at http://tcl.activestate.com/man/tcl8.4/TkCmd/keysyms.htm.
dict = {
	"!" : "exclam",
	'"' : "quotedbl",
	"#" : "numbersign",
	"$" : "dollar",
	"%" : "percent",
	"&amp;" : "ampersand",
	"'" : "quoteright",
	"(" : "parenleft",
	")" : "parenright",
	"*" : "asterisk",
	"+" : "plus",
	"," : "comma",
	"-" : "minus",
	"." : "period",
	"/" : "slash",
	":" : "colon",
	";" : "semicolon",
	"&lt;" : "less",
	"=" : "equal",
	"&gt;" : "greater",
	"?" : "question",
	"@" : "at",
	"[" : "bracketleft",
	"\\": "backslash",
	"]" : "bracketright",
	"^" : "asciicircum",
	"_" : "underscore",
	"`" : "quoteleft",
	"{" : "braceleft",
	"|" : "bar",
	"}" : "braceright",
	"~" : "asciitilde" }</t>
<t tx="ekr.20031218072017.2101"># These keys are simply made-up names.  The menu_bind values are known to Tk.
# Case is not significant in the keys.

dict = {
	"bksp"    : ("BackSpace","BkSp"),
	"esc"     : ("Escape","Esc"),
	# Arrow keys...
	"dnarrow" : ("Down", "DnArrow"),
	"ltarrow" : ("Left", "LtArrow"),
	"rtarrow" : ("Right","RtArrow"),
	"uparrow" : ("Up",   "UpArrow"),
	# Page up/down keys...
	"pageup"  : ("Prior","PgUp"),
	"pagedn"  : ("Next", "PgDn")
}

@  The following are not translated, so what appears in the menu is the same as what is passed to Tk.  Case is significant.

Note: the Tk documentation states that not all of these may be available on all platforms.

F1,F2,F3,F4,F5,F6,F7,F8,F9,F10,
BackSpace, Break, Clear, Delete, Escape, Linefeed, Return, Tab,
Down, Left, Right, Up,
Begin, End, Home, Next, Prior,
Num_Lock, Pause, Scroll_Lock, Sys_Req,
KP_Add, KP_Decimal, KP_Divide, KP_Enter, KP_Equal,
KP_Multiply, KP_Separator,KP_Space, KP_Subtract, KP_Tab,
KP_F1,KP_F2,KP_F3,KP_F4,
KP_0,KP_1,KP_2,KP_3,KP_4,KP_5,KP_6,KP_7,KP_8,KP_9
</t>
<t tx="ekr.20031218072017.2102">s2 = shortcut
s2 = string.strip(s2)

# Replace all minus signs by plus signs, except a trailing minus:
if len(s2) &gt; 0 and s2[-1] == "-":
	s2 = string.replace(s2,"-","+")
	s2 = s2[:-1] + "-"
else:
	s2 = string.replace(s2,"-","+")

fields = string.split(s2,"+")
if fields == None or len(fields) == 0:
	if not g.app.menuWarningsGiven:
		print "bad shortcut specifier:", s
	return None,None

last = fields[-1]
if last == None or len(last) == 0:
	if not g.app.menuWarningsGiven:
		print "bad shortcut specifier:", s
	return None,None</t>
<t tx="ekr.20031218072017.2103">bind_head = menu_head = ""

if has_cmd: # 11/18/03
	bind_head = bind_head + "Command-"
	menu_head = menu_head + "Command+"

if has_shift:
	menu_head = "Shift+"
	if len(last) &gt; 1 or (len(last)==1 and last[0] not in string.ascii_letters):
		bind_head = "Shift-"

if has_alt:
	bind_head = bind_head + "Alt-"
	menu_head = menu_head + "Alt+"

if has_ctrl:
	bind_head = bind_head + "Control-"
	menu_head = menu_head + "Ctrl+"
	
bind_shortcut = "&lt;" + bind_head + bind_last + "&gt;"
menu_shortcut = menu_head + menu_last</t>
<t tx="ekr.20031218072017.2104"></t>
<t tx="ekr.20031218072017.2105">@nocolor

http://sourceforge.net/forum/message.php?msg_id=2286887

If I have the following in the body text of some node

&lt;&lt; rhs &gt;&gt; October &lt;&lt; rhe &gt;&gt;

and the outline has as children of the node

node
   - &lt;&lt; rhs &gt;&gt;
   - &lt;&lt; rhe &gt;&gt;

4.0 and 4.1b2 give me the following error when trying to write the node to a file:

errors writing: /filename
Orphan node:  &lt;&lt; rhe &gt;&gt;

This use of &lt;&lt; &gt;&gt; nodes worked prior to 4.0.

Steve</t>
<t tx="ekr.20031218072017.2106">def putRefLine(self,s,i,n1,n2,p):
	
	"""Put a line containing one or more references."""
	
	at = self
	
	# Compute delta only once.
	delta = self.putRefAt(s,i,n1,n2,p,delta=None)
	if delta is None: return # 11/23/03
	
	while 1:
		i = n2 + 2
		hasRef,n1,n2 = at.findSectionName(s,i)
		if hasRef:
			self.putAfterMiddleRef(s,i,n1,delta)
			self.putRefAt(s,n1,n1,n2,p,delta)
		else:
			break
	
	self.putAfterLastRef(s,i,delta)</t>
<t tx="ekr.20031218072017.2107">def putRefAt (self,s,i,n1,n2,p,delta):
	
	"""Put a reference at s[n1:n2+2] from p."""
	
	at = self ; name = s[n1:n2+2]

	ref = g.findReference(name,p)
	if not ref:
		at.writeError(
			"undefined section: %s\n\treferenced from: %s" %
			( name,p.headString()))
		return None
	
	# Expand the ref.
	if not delta:
		junk,delta = g.skip_leading_ws_with_indent(s,i,at.tab_width)

	at.putLeadInSentinel(s,i,n1,delta)
	at.indent += delta
	if at.leadingWs:
		at.putSentinel("@" + at.leadingWs + name)
	else:
		at.putSentinel("@" + name)
	at.putBody(ref)
	at.indent -= delta
	
	return delta</t>
<t tx="ekr.20031218072017.2108">def putAfterLastRef (self,s,start,delta):
	
	"""Handle whatever follows the last ref of a line."""
	
	at = self
	
	j = g.skip_ws(s,start)
	
	if j &lt; len(s) and s[j] != '\n':
		end = g.skip_line(s,start)
		after = s[start:end] # Ends with a newline only if the line did.
		# Temporarily readjust delta to make @afterref look better.
		at.indent += delta
		at.putSentinel("@afterref")
		at.os(after)
		if at.sentinels and after and after[-1] != '\n':
			at.onl() # Add a newline if the line didn't end with one.
		at.indent -= delta
	else:
		# Temporarily readjust delta to make @nl look better.
		at.indent += delta
		at.putSentinel("@nl")
		at.indent -= delta</t>
<t tx="ekr.20031218072017.2109">def putAfterMiddleRef (self,s,start,end,delta):
	
	"""Handle whatever follows a ref that is not the last ref of a line."""
	
	at = self
	
	if start &lt; end:
		after = s[start:end]
		at.indent += delta
		at.putSentinel("@afterref")
		at.os(after) ; at.onl_sent() # Not a real newline.
		at.putSentinel("@nonl")
		at.indent -= delta</t>
<t tx="ekr.20031218072017.2110">@nocolor

The code in putAfterLastRef is a bit tricky.

- In nosent mode it puts a trailing newline only if the line ends in a newline.
- In sentinel mode ia always puts a trailing newline.  The afterref read code will remove this.

@color</t>
<t tx="ekr.20031218072017.2111"></t>
<t tx="ekr.20031218072017.2112"></t>
<t tx="ekr.20031218072017.2113"># 4.0: Don't use newline-pending logic.

def closeWriteFile (self):
	
	at = self
	if at.outputFile:
		at.outputFile.flush()
		at.outputFile.close()
		at.outputFile = None</t>
<t tx="ekr.20031218072017.2114"># This is the entry point to the write code.  root should be an @file vnode.

def write(self,root,nosentinels=false,scriptFile=None):
	
	"""Write a 4.x derived file."""
	
	at = self ; c = at.c

	at.sentinels = not nosentinels
	&lt;&lt; initialize &gt;&gt;
	try:
		&lt;&lt; open the file; return on error &gt;&gt;
		root.clearAllVisitedInTree() # 1/28/04: clear both vnode and tnode bits.
		&lt;&lt; write then entire @file tree &gt;&gt;
		if scriptFile != None:
			at.root.tnodeList = [] # 12/13/03
		else:
			at.closeWriteFile()
			if not nosentinels:
				at.warnAboutOrphandAndIgnoredNodes()
			&lt;&lt; finish writing &gt;&gt;
	except:
		if scriptFile:
			g.es("exception preprocessing script",color="blue")
			g.es_exception(full=false)
			scriptFile.clear()
			at.root.tnodeList = [] # 12/13/03
		else:
			at.handleWriteException()
</t>
<t tx="ekr.20031218072017.2115">at.errors = 0
c.setIvarsFromPrefs()
at.root = root
at.root.tnodeList = []
at.raw = false
at.scripting = scriptFile is not None # 1/30/04
c.endEditing() # Capture the current headline.</t>
<t tx="ekr.20031218072017.2116">if scriptFile:
	at.targetFileName = "&lt;script&gt;"
if nosentinels:
	at.targetFileName = root.atNoSentinelsFileNodeName()
else:
	at.targetFileName = root.atFileNodeName()

if scriptFile:
	ok = true
	at.outputFileName = "&lt;script&gt;"
	at.outputFile = scriptFile
else:
	ok = at.openWriteFile(root)
	
if not ok:
	return
</t>
<t tx="ekr.20031218072017.2117"># unvisited nodes will be orphans, except in cweb trees.
root.clearVisitedInTree()

&lt;&lt; put all @first lines in root &gt;&gt;

# Put the main part of the file.
at.putOpenLeoSentinel("@+leo-ver=4")
at.putInitialComment()
at.putBody(root)
at.putSentinel("@-leo")
root.setVisited()

&lt;&lt; put all @last lines in root &gt;&gt;</t>
<t tx="ekr.20031218072017.2118">@ Write any @first lines.  These lines are also converted to @verbatim lines, so the read logic simply ignores lines preceding the @+leo sentinel.
@c

s = root.v.t.bodyString
tag = "@first"
i = 0
while g.match(s,i,tag):
	i += len(tag)
	i = g.skip_ws(s,i)
	j = i
	i = g.skip_to_end_of_line(s,i)
	# Write @first line, whether empty or not
	line = s[j:i]
	self.os(line) ; self.onl()
	i = g.skip_nl(s,i)</t>
<t tx="ekr.20031218072017.2119">@ Write any @last lines.  These lines are also converted to @verbatim lines, so the read logic simply ignores lines following the @-leo sentinel.
@c

tag = "@last"
lines = string.split(root.v.t.bodyString,'\n')
n = len(lines) ; j = k = n - 1
# Don't write an empty last line.
if j &gt;= 0 and len(lines[j])==0:
	j = k = n - 2
# Scan backwards for @last directives.
while j &gt;= 0:
	line = lines[j]
	if g.match(line,0,tag): j -= 1
	else: break
# Write the @last lines.
for line in lines[j+1:k+1]:
	i = len(tag) ; i = g.skip_ws(line,i)
	self.os(line[i:]) ; self.onl()</t>
<t tx="ekr.20031218072017.2120"># 10/26/02: Always warn, even when language=="cweb"

next = root.nodeAfterTree()
v = root
while v and v != next:
	if not v.t.isVisited(): # 1/24/04: check tnode bit, not vnode bit.
		at.writeError("Orphan node:  " + v.headString())
	if v.isAtIgnoreNode():
		at.writeError("@ignore node: " + v.headString())
	v = v.threadNext()
</t>
<t tx="ekr.20031218072017.2121">@ We set the orphan and dirty flags if there are problems writing the file to force Commands::write_LEO_file to write the tree to the .leo file.
@c

if at.errors &gt; 0 or at.root.isOrphan():
	root.setOrphan()
	root.setDirty() # 2/9/02: make _sure_ we try to rewrite this file.
	os.remove(at.outputFileName) # Delete the temp file.
	g.es("Not written: " + at.outputFileName)
else:
	root.clearOrphan()
	root.clearDirty()
	at.replaceTargetFileIfDifferent()</t>
<t tx="ekr.20031218072017.2122">def rawWrite(self,root):

	at = self

	c = at.c ; at.root = root
	at.errors = 0
	at.root.tnodeList = [] # 9/26/03: after beta 1 release.
	at.sentinels = true # 10/1/03
	at.scripting = false # 1/30/04
	c.endEditing() # Capture the current headline.
	try:
		at.targetFileName = root.atRawFileNodeName()
		ok = at.openWriteFile(root)
		if not ok: return
		&lt;&lt; write root's tree &gt;&gt;
		at.closeWriteFile()
		at.replaceTargetFileIfDifferent()
		root.clearOrphan() ; root.clearDirty()
	except:
		at.handleWriteException(root)</t>
<t tx="ekr.20031218072017.2123">&lt;&lt; put all @first lines in root &gt;&gt;
at.putOpenLeoSentinel("@+leo-ver=4")
&lt;&lt; put optional @comment sentinel lines &gt;&gt;

for p in root.subtree_iter():
	&lt;&lt; Write p's node &gt;&gt;

at.putSentinel("@-leo")
&lt;&lt; put all @last lines in root &gt;&gt;</t>
<t tx="ekr.20031218072017.2124">@ Write any @first lines.  These lines are also converted to @verbatim lines, so the read logic simply ignores lines preceding the @+leo sentinel.
@c

s = root.v.t.bodyString
tag = "@first"
i = 0
while g.match(s,i,tag):
	i += len(tag)
	i = g.skip_ws(s,i)
	j = i
	i = g.skip_to_end_of_line(s,i)
	# Write @first line, whether empty or not
	line = s[j:i]
	at.putBuffered(line) ; at.onl()
	i = g.skip_nl(s,i)</t>
<t tx="ekr.20031218072017.2125">s2 = g.app.config.output_initial_comment
if s2:
	lines = string.split(s2,"\\n")
	for line in lines:
		line = line.replace("@date",time.asctime())
		if len(line)&gt; 0:
			at.putSentinel("@comment " + line)
</t>
<t tx="ekr.20031218072017.2126">at.putOpenNodeSentinel(p)

s = p.bodyString()
if s and len(s) &gt; 0:
	s = g.toEncodedString(s,at.encoding,reportErrors=true) # 3/7/03
	at.outputStringWithLineEndings(s)
	
# Put an @nonl sentinel if s does not end in a newline.
if s and s[-1] != '\n':
	at.onl_sent() ; at.putSentinel("@nonl")

at.putCloseNodeSentinel(p)
</t>
<t tx="ekr.20031218072017.2127">@ Write any @last lines.  These lines are also converted to @verbatim lines, so the read logic simply ignores lines following the @-leo sentinel.
@c

tag = "@last"
lines = string.split(root.v.t.bodyString,'\n')
n = len(lines) ; j = k = n - 1
# Don't write an empty last line.
if j &gt;= 0 and len(lines[j])==0:
	j = k = n - 2
# Scan backwards for @last directives.
while j &gt;= 0:
	line = lines[j]
	if g.match(line,0,tag): j -= 1
	else: break
# Write the @last lines.
for line in lines[j+1:k+1]:
	i = len(tag) ; i = g.skip_ws(line,i)
	at.putBuffered(line[i:]) ; at.onl()</t>
<t tx="ekr.20031218072017.2128">def putBody(self,p):
	
	""" Generate the body enclosed in sentinel lines."""

	at = self ; s = p.bodyString()
	
	p.setVisited() # Mark the node.
	p.v.t.setVisited() # 1/24/04: Use tnode for the orphans check.
	if not s: return

	inCode = true
	
	# Make _sure_ all lines end in a newline
	# 11/20/03: except in nosentinel mode.
	# 1/30/04: and especially in scripting mode.
	# If we add a trailing newline, we'll generate an @nonl sentinel below.
	trailingNewlineFlag = s and s[-1] == '\n'
	if (at.sentinels or at.scripting) and not trailingNewlineFlag:
		s = s + '\n'

	at.putOpenNodeSentinel(p)
	i = 0
	while i &lt; len(s):
		next_i = g.skip_line(s,i)
		assert(next_i &gt; i)
		kind = at.directiveKind(s,i)
		&lt;&lt; handle line at s[i] &gt;&gt;
		i = next_i
	if not inCode:
		at.putEndDocLine()
	if at.sentinels and not trailingNewlineFlag:
		at.putSentinel("@nonl")
	at.putCloseNodeSentinel(p)</t>
<t tx="ekr.20031218072017.2129">if kind == noDirective:
	if inCode:
		hasRef,n1,n2 = at.findSectionName(s,i)
		if hasRef and not at.raw:
			at.putRefLine(s,i,n1,n2,p)
		else:
			at.putCodeLine(s,i)
	else:
		at.putDocLine(s,i)
elif kind in (docDirective,atDirective):
	assert(not at.pending)
	at.putStartDocLine(s,i,kind)
	inCode = false
elif kind in (cDirective,codeDirective):
	# Only @c and @code end a doc part.
	if not inCode:
		at.putEndDocLine() 
	at.putDirective(s,i)
	inCode = true
elif kind == othersDirective:
	if inCode: at.putAtOthersLine(s,i,p)
	else: at.putDocLine(s,i) # 12/7/03
elif kind == rawDirective:
	at.raw = true
	at.putSentinel("@@raw")
elif kind == endRawDirective:
	at.raw = false
	at.putSentinel("@@end_raw")
	i = g.skip_line(s,i)
elif kind == miscDirective:
	at.putDirective(s,i)
else:
	assert(0) # Unknown directive.</t>
<t tx="ekr.20031218072017.2130"></t>
<t tx="ekr.20031218072017.2131">def inAtOthers(self,p):
	
	"""Returns true if p should be included in the expansion of the at-others directive
	
	in the body text of p's parent."""

	# Return false if this has been expanded previously.
	if  p.v.isVisited():
		# g.trace("previously visited",p.v)
		return false
	
	# Return false if this is a definition node.
	h = p.headString() ; i = g.skip_ws(h,0)
	isSection,junk = self.isSectionName(h,i)
	if isSection:
		# g.trace("is section",p)
		return false

	# Return false if p's body contains an @ignore directive.
	if p.isAtIgnoreNode():
		# g.trace("is @ignore",p)
		return false
	else:
		# g.trace("ok",p)
		return true</t>
<t tx="ekr.20031218072017.2132">def putAtOthersChild(self,p):

	p.v.setVisited() # Make sure p is never expanded again.
	self.putBody(p) # Insert the expansion of p.

	# Insert expansions of all children.
	for child in p.children_iter():
		if self.inAtOthers(child):
			self.putAtOthersChild(child)</t>
<t tx="ekr.20031218072017.2133">def putAtOthersLine (self,s,i,p):
	
	"""Put the expansion of @others."""
	
	at = self
	j,delta = g.skip_leading_ws_with_indent(s,i,at.tab_width)
	at.putLeadInSentinel(s,i,j,delta)

	at.indent += delta
	if at.leadingWs:
		at.putSentinel("@" + at.leadingWs + "@+others")
	else:
		at.putSentinel("@+others")
	
	for child in p.children_iter():
		if at.inAtOthers(child):
			at.putAtOthersChild(child)

	at.putSentinel("@-others")
	at.indent -= delta</t>
<t tx="ekr.20031218072017.2134">def putCodeLine (self,s,i):
	
	"""Put a normal code line."""
	
	at = self
	
	# Put @verbatim sentinel if required.
	k = g.skip_ws(s,i)
	if g.match(s,k,self.startSentinelComment + '@'):
		self.putSentinel("@verbatim")

	j = g.skip_line(s,i)
	line = s[i:j]
	
	# 1/29/04: Don't put leading indent if the line is empty!
	if line and not at.raw:
		at.putIndent(at.indent)

	if line[-1:]=="\n": # 12/2/03: emakital
		at.os(line[:-1])
		at.onl()
	else:
		at.os(line)
</t>
<t tx="ekr.20031218072017.2135"></t>
<t tx="ekr.20031218072017.2136"># Returns the kind of at-directive or noDirective.

def directiveKind(self,s,i):

	at = self
	n = len(s)
	if i &gt;= n or s[i] != '@':
		j = g.skip_ws(s,i)
		if g.match_word(s,j,"@others"):
			return othersDirective
		else:
			return noDirective

	table = (
		("@c",cDirective),
		("@code",codeDirective),
		("@doc",docDirective),
		("@end_raw",endRawDirective),
		("@others",othersDirective),
		("@raw",rawDirective))

	# This code rarely gets executed, so simple code suffices.
	if i+1 &gt;= n or g.match(s,i,"@ ") or g.match(s,i,"@\t") or g.match(s,i,"@\n"):
		# 10/25/02: @space is not recognized in cweb mode.
		# 11/15/02: Noweb doc parts are _never_ scanned in cweb mode.
		return g.choose(at.language=="cweb",
			noDirective,atDirective)

	# 10/28/02: @c and @(nonalpha) are not recognized in cweb mode.
	# We treat @(nonalpha) separately because @ is in the colorizer table.
	if at.language=="cweb" and (
		g.match_word(s,i,"@c") or
		i+1&gt;= n or s[i+1] not in string.ascii_letters):
		return noDirective

	for name,directive in table:
		if g.match_word(s,i,name):
			return directive

	# 10/14/02: return miscDirective only for real directives.
	for name in leoColor.leoKeywords:
		if g.match_word(s,i,name):
			return miscDirective

	return noDirective</t>
<t tx="ekr.20031218072017.2137">def findSectionName(self,s,i):
	
	end = s.find('\n',i)
	if end == -1:
		n1 = s.find("&lt;&lt;",i)
		n2 = s.find("&gt;&gt;",i)
	else:
		n1 = s.find("&lt;&lt;",i,end)
		n2 = s.find("&gt;&gt;",i,end)

	return -1 &lt; n1 &lt; n2, n1, n2</t>
<t tx="ekr.20031218072017.2138">def oblank(self):
	self.os(' ')

def oblanks(self,n):
	self.os(' ' * abs(n))

def onl(self):
	self.os(self.output_newline)
	
def onl_sent(self):
	if self.sentinels:
		self.onl()
	
def os (self,s):
	if s and self.outputFile:
		try:
			s = g.toEncodedString(s,self.encoding,reportErrors=true)
			self.outputFile.write(s)
		except:
			g.es("exception writing:" + `s`)
			g.es_exception()

def otabs(self,n):
	self.os('\t' * abs(n))</t>
<t tx="ekr.20031218072017.2139"></t>
<t tx="ekr.20031218072017.2140">def executeScript(self,p=None,script=None):

	"""This executes body text as a Python script.
	
	We execute the selected text, or the entire body text if no text is selected."""
	
	error = false
	c = self ; s = None

	if script:
		s = script
	else:
		&lt;&lt; define class fileLikeObject &gt;&gt;
		&lt;&lt; get script into s &gt;&gt;
	&lt;&lt; redirect output if redirect_execute_script_output_to_log_pane &gt;&gt;
	s = s.strip()
	if s:
		s += '\n' # Make sure we end the script properly.
		try:
			exec s in {} # Use {} to get a pristine environment!
			g.es("end of script",color="purple")
		except:
			g.es("exception executing script")
			g.es_exception(full=false,c=c)
			c.frame.tree.redrawAfterException() # 1/26/04
	elif not error:
		g.es("no script selected",color="blue")</t>
<t tx="ekr.20031218072017.2141">class fileLikeObject:
	
	def __init__(self): self.s = ""
	def clear (self):   self.s = ""
	def close (self):   pass
	def flush (self):   pass
		
	def get (self):
		return self.s
		
	def write (self,s):
		if s:
			self.s = self.s + s</t>
<t tx="ekr.20031218072017.2142">try:
	try:
		if not p:
			p = c.currentPosition()
	
		old_body = p.bodyString()

		if c.frame.body.hasTextSelection():
			# Temporarily replace v's body text with just the selected text.
			s = c.frame.body.getSelectedText()
			p.v.t.setTnodeText(s) 
		else:
			s = c.frame.body.getAllText()
	
		if s.strip():
			g.app.scriptDict["script1"]=s
			df = c.atFileCommands.new_df
			df.scanAllDirectives(p,scripting=true)
			# Force Python comment delims.
			df.startSentinelComment = "#"
			df.endSentinelComment = None
			# Write the "derived file" into fo.
			fo = fileLikeObject()
			df.write(p.copy(),nosentinels=true,scriptFile=fo)
			assert(p)
			s = fo.get()
			g.app.scriptDict["script2"]=s
			error = len(s) == 0
	except:
		s = "unexpected exception"
		print s ; g.es(s)
		g.es_exception()
finally:
	p.v.t.setTnodeText(old_body)</t>
<t tx="ekr.20031218072017.2143">if g.app.config.redirect_execute_script_output_to_log_pane:

	from leoGlobals import redirectStdout,redirectStderr
	g.redirectStdout() # Redirect stdout
	g.redirectStderr() # Redirect stderr</t>
<t tx="ekr.20031218072017.2144">@

To do: create app.fileEncoding

These have the potential to introduce subtle bugs for several reasons:
	
1. Encoding problems.
2. Changes in exactly what os.path routines get called.
	- This problem will be solved by _not_ combining calls to the os.path wrappers.
	(Each wrapper will do _only_ the indicated function).</t>
<t tx="ekr.20031218072017.2145"></t>
<t tx="ekr.20031218072017.2146">def os_path_abspath(path,encoding=None):
	
	"""Convert a path to an absolute path."""

	path = g.toUnicodeFileEncoding(path,encoding)

	path = os.path.abspath(path)
	
	path = g.toUnicodeFileEncoding(path,encoding)
	
	return path</t>
<t tx="ekr.20031218072017.2147">def os_path_basename(path,encoding=None):
	
	"""Normalize the path and convert it to an absolute path."""

	path = g.toUnicodeFileEncoding(path,encoding)

	path = os.path.basename(path)
	
	path = g.toUnicodeFileEncoding(path,encoding)
	
	return path</t>
<t tx="ekr.20031218072017.2148">def os_path_dirname(path,encoding=None):
	
	"""Normalize the path and convert it to an absolute path."""

	path = g.toUnicodeFileEncoding(path,encoding)

	path = os.path.dirname(path)
	
	path = g.toUnicodeFileEncoding(path,encoding)
	
	return path</t>
<t tx="ekr.20031218072017.2149">def os_path_exists(path,encoding=None):
	
	"""Normalize the path and convert it to an absolute path."""

	path = g.toUnicodeFileEncoding(path,encoding)

	return os.path.exists(path)</t>
<t tx="ekr.20031218072017.2150">def os_path_getmtime(path,encoding=None):
	
	"""Normalize the path and convert it to an absolute path."""

	path = g.toUnicodeFileEncoding(path,encoding)

	return os.path.getmtime(path)</t>
<t tx="ekr.20031218072017.2151">def os_path_isabs(path,encoding=None):
	
	"""Normalize the path and convert it to an absolute path."""

	path = g.toUnicodeFileEncoding(path,encoding)

	return os.path.isabs(path)</t>
<t tx="ekr.20031218072017.2152">def os_path_isdir(path,encoding=None):
	
	"""Normalize the path and convert it to an absolute path."""

	path = g.toUnicodeFileEncoding(path,encoding)

	return os.path.isdir(path)</t>
<t tx="ekr.20031218072017.2153">def os_path_isfile(path,encoding=None):
	
	"""Normalize the path and convert it to an absolute path."""

	path = g.toUnicodeFileEncoding(path,encoding)

	return os.path.isfile(path)</t>
<t tx="ekr.20031218072017.2154">def os_path_join(*args,**keys):
	
	encoding = keys.get("encoding")

	uargs = [g.toUnicodeFileEncoding(arg,encoding) for arg in args]

	path = os.path.join(*uargs)
	
	path = g.toUnicodeFileEncoding(path,encoding)

	return path</t>
<t tx="ekr.20031218072017.2155">def os_path_norm(path,encoding=None):
	
	"""Normalize both the path and the case."""

	path = g.toUnicodeFileEncoding(path,encoding)

	path = os.path.normcase(path)
	path = os.path.normpath(path)
	
	path = g.toUnicodeFileEncoding(path,encoding)
	
	return path</t>
<t tx="ekr.20031218072017.2156">def os_path_normcase(path,encoding=None):
	
	"""Normalize the path's case."""

	path = g.toUnicodeFileEncoding(path,encoding)

	path = os.path.normcase(path)
	
	path = g.toUnicodeFileEncoding(path,encoding)
	
	return path</t>
<t tx="ekr.20031218072017.2157">def os_path_normpath(path,encoding=None):
	
	"""Normalize the path."""

	path = g.toUnicodeFileEncoding(path,encoding)

	path = os.path.normpath(path)
	
	path = g.toUnicodeFileEncoding(path,encoding)
	
	return path</t>
<t tx="ekr.20031218072017.2158">def os_path_split(path,encoding=None):
	
	path = g.toUnicodeFileEncoding(path,encoding)

	head,tail = os.path.split(path)

	head = g.toUnicodeFileEncoding(head,encoding)
	tail = g.toUnicodeFileEncoding(tail,encoding)

	return head,tail</t>
<t tx="ekr.20031218072017.2159">def os_path_splitext(path,encoding=None):

	path = g.toUnicodeFileEncoding(path,encoding)

	head,tail = os.path.splitext(path)

	head = g.toUnicodeFileEncoding(head,encoding)
	tail = g.toUnicodeFileEncoding(tail,encoding)

	return head,tail</t>
<t tx="ekr.20031218072017.2160">def toUnicodeFileEncoding(path,encoding):

	if not encoding:
		if sys.platform == "win32":
			encoding = "mbcs"
		else:
			encoding = app.tkEncoding

	return g.toUnicode(path,encoding)</t>
<t tx="ekr.20031218072017.2161"></t>
<t tx="ekr.20031218072017.2162"></t>
<t tx="ekr.20031218072017.2163">@nocolor

Traceback (most recent call last):
  File "C:\prog\leoCVS\leo\src\leoColor.py", line 1042, in colorizeAnyLanguage
    new_states.append(old_states[j])
IndexError: list index out of range


I added the call to max in:
	
first_trailing_line = max(0,new_len - trailing_lines)

and

j = max(0,old_len - trailing_lines)

It seems as though j could not have beeen too big, so perhaps it was too small??</t>
<t tx="ekr.20031218072017.2164"></t>
<t tx="ekr.20031218072017.2165">@ notes:
	
- Do not use the font panel when testing!

- Check leoConfig.txt before doing anything else.

- Running a script (or printing?) disables the bug.
	
- Happens when opening files from recent files menu.
</t>
<t tx="ekr.20031218072017.2166"></t>
<t tx="ekr.20031218072017.2167">from leoGlobals import *
import tkFont

@others

c = top()

# Body pane.
fn = c.frame.body.cget("font")
font = tkFont.Font(font=fn)
name,size,slant,weight = getFontSettings(font)
es("body:" + name + "," + `size` + "," + slant + "," + weight)

# Log pane.
fn = c.frame.log.getFontConfig()
font = tkFont.Font(font=fn)
name,size,slant,weight = getFontSettings(font)
es("log:" + name + "," + `size` + "," + slant + "," + weight)

# Tree pane.
font = c.frame.tree.getFont()
name,size,slant,weight = getFontSettings(font)
es("head:" + name + "," + `size` + "," + slant + "," + weight)</t>
<t tx="ekr.20031218072017.2168">def getFontSettings (font):

	name   = font.cget("family")
	size   = font.cget("size")
	slant  = font.cget("slant")
	weight = font.cget("weight")

	return name, size, slant, weight</t>
<t tx="ekr.20031218072017.2169">from leoGlobals import *

app.trace = true

print "app.trace:", app.trace</t>
<t tx="ekr.20031218072017.2170">from leoGlobals import *
import leoConfig
self = config = app.config

family="body_text_font_family"
size="body_text_font_size"
slant="body_text_font_slant"
weight="body_text_font_weight"

family = self.getWindowPref(family)
if family in (None,""):
	# print tag,"using default"
	family = self.defaultFontFamily
	
size = self.getIntWindowPref(size)
if size in (None,0): size = 12

slant = self.getWindowPref(slant)
if slant in (None,""): slant = "roman"

weight = self.getWindowPref(weight)
if weight in (None,""): weight = "normal"

trace(family,size,slant,weight)
</t>
<t tx="ekr.20031218072017.2171">from leoGlobals import *

font = app.config.defaultFont

print font.cget("family"), font.cget("weight")</t>
<t tx="ekr.20031218072017.2172">	
	</t>
<t tx="ekr.20031218072017.2173"></t>
<t tx="ekr.20031218072017.2174">def getFontFromParams(self,family,size,slant,weight,defaultSize=12,tag=""):

	"""Compute a font from font parameters.

	Arguments are the names of settings to be use.
	We default to size=12, slant="roman", weight="normal".

	We return None if there is no family setting so we can use system default fonts."""

	family = self.getWindowPref(family)
	if family in (None,""):
		# print tag,"using default"
		family = self.defaultFontFamily
		
	size = self.getIntWindowPref(size)
	if size in (None,0): size = defaultSize
	
	slant = self.getWindowPref(slant)
	if slant in (None,""): slant = "roman"
	
	weight = self.getWindowPref(weight)
	if weight in (None,""): weight = "normal"
	
	# if g.app.trace: g.trace(tag,family,size,slant,weight)
	
	return g.app.gui.getFontFromParams(family,size,slant,weight)</t>
<t tx="ekr.20031218072017.2175"></t>
<t tx="ekr.20031218072017.2176">def finishCreate (self,c):
	
	frame = self ; frame.c = c
	Tk = Tkinter ; gui = g.app.gui

	&lt;&lt; create the toplevel frame &gt;&gt;
	&lt;&lt; create all the subframes &gt;&gt;
	&lt;&lt; create the first tree node &gt;&gt;

	self.menu = leoTkinterMenu.leoTkinterMenu(frame)

	v = c.currentVnode()

	if not g.doHook("menu1",c=c,v=v):
		frame.menu.createMenuBar(self)

	g.app.setLog(frame.log,"tkinterFrame.__init__") # the leoTkinterFrame containing the log

	g.app.windowList.append(frame)
	
	c.initVersion()
	c.signOnWithVersion()
	
	self.body.createBindings(frame)</t>
<t tx="ekr.20031218072017.2177">frame.top = top = Tk.Toplevel()
gui.attachLeoIcon(top)
top.title(frame.title)
top.minsize(30,10) # In grid units.

frame.top.protocol("WM_DELETE_WINDOW", frame.OnCloseLeoEvent)
frame.top.bind("&lt;Button-1&gt;", frame.OnActivateLeoEvent)

frame.top.bind("&lt;Activate&gt;", frame.OnActivateLeoEvent) # Doesn't work on windows.
frame.top.bind("&lt;Deactivate&gt;", frame.OnDeactivateLeoEvent) # Doesn't work on windows.

frame.top.bind("&lt;Control-KeyPress&gt;",frame.OnControlKeyDown)
frame.top.bind("&lt;Control-KeyRelease&gt;",frame.OnControlKeyUp)</t>
<t tx="ekr.20031218072017.2178"># Create the outer frame.
self.outerFrame = outerFrame = Tk.Frame(top)
self.outerFrame.pack(expand=1,fill="both")

self.createIconBar()
&lt;&lt; create both splitters &gt;&gt;

# Create the canvas, tree, log and body.
frame.canvas   = self.createCanvas(self.split2Pane1)
frame.tree     = leoTkinterTree.leoTkinterTree(c,frame,frame.canvas)
frame.log      = leoTkinterLog(frame,self.split2Pane2)
frame.body     = leoTkinterBody(frame,self.split1Pane2)

# Yes, this an "official" ivar: this is a kludge.
frame.bodyCtrl = frame.body.bodyCtrl

# Configure.  N.B. There may be Tk bugs here that make the order significant!
frame.setTabWidth(c.tab_width)
frame.tree.setTreeColorsFromConfig()
self.reconfigurePanes()
self.body.setFontFromConfig()

if 0: # No longer done automatically.

	# Create the status line.
	self.createStatusLine()
	self.putStatusLine("Welcome to Leo")</t>
<t tx="ekr.20031218072017.2179"># Splitter 1 is the main splitter containing splitter2 and the body pane.
f1,bar1,split1Pane1,split1Pane2 = self.createLeoSplitter(outerFrame, self.splitVerticalFlag)
self.f1,self.bar1 = f1,bar1
self.split1Pane1,self.split1Pane2 = split1Pane1,split1Pane2

# Splitter 2 is the secondary splitter containing the tree and log panes.
f2,bar2,split2Pane1,split2Pane2 = self.createLeoSplitter(split1Pane1, not self.splitVerticalFlag)
self.f2,self.bar2 = f2,bar2
self.split2Pane1,self.split2Pane2 = split2Pane1,split2Pane2</t>
<t tx="ekr.20031218072017.2180">t = leoNodes.tnode()
v = leoNodes.vnode(c,t)
p = leoNodes.position(v,[])
v.initHeadString("NewHeadline")

p.moveToRoot()
c.beginUpdate()
c.selectVnode(p)
c.redraw()
c.frame.getFocus()
c.editPosition(p)
c.endUpdate(false)
</t>
<t tx="ekr.20031218072017.2181"></t>
<t tx="ekr.20031218072017.2182">def __init__ (self,frame,parentFrame):
	
	# g.trace("leoTkinterBody")
	
	# Call the base class constructor.
	leoFrame.leoBody.__init__(self,frame,parentFrame)

	self.bodyCtrl = self.createControl(frame,parentFrame)

	self.colorizer = leoColor.colorizer(self.c)</t>
<t tx="ekr.20031218072017.2183">def setFontFromConfig (self):

	config = g.app.config ; body = self.bodyCtrl
	
	font = config.getFontFromParams(
		"body_text_font_family", "body_text_font_size",
		"body_text_font_slant",  "body_text_font_weight",
		config.defaultBodyFontSize, tag = "body")

	if g.app.trace:
		g.trace(body.cget("font"),font.cget("family"),font.cget("weight"))

	body.configure(font=font)
	
	bg = config.getWindowPref("body_text_background_color")
	if bg:
		try: body.configure(bg=bg)
		except:
			g.es("exception setting body background color")
			g.es_exception()
	
	fg = config.getWindowPref("body_text_foreground_color")
	if fg:
		try: body.configure(fg=fg)
		except:
			g.es("exception setting body foreground color")
			g.es_exception()

	bg = config.getWindowPref("body_insertion_cursor_color")
	if bg:
		try: body.configure(insertbackground=bg)
		except:
			g.es("exception setting insertion cursor color")
			g.es_exception()
		
	if sys.platform != "win32": # Maybe a Windows bug.
		fg = config.getWindowPref("body_cursor_foreground_color")
		bg = config.getWindowPref("body_cursor_background_color")
		# print fg, bg
		if fg and bg:
			cursor="xterm" + " " + fg + " " + bg
			try: body.configure(cursor=cursor)
			except:
				import traceback ; traceback.print_exc()</t>
<t tx="ekr.20031218072017.2184">def cget(self,*args,**keys):
	
	val = self.bodyCtrl.cget(*args,**keys)
	
	if g.app.trace:
		g.trace(val,args,keys)

	return val
	
def configure (self,*args,**keys):
	
	if g.app.trace:
		g.trace(args,keys)
	
	return self.bodyCtrl.configure(*args,**keys)</t>
<t tx="ekr.20031218072017.2185"></t>
<t tx="ekr.20031218072017.2186">def getDefaultConfigFont(self,config):
	
	"""Get the default font from a new text widget."""

	t = Tkinter.Text()
	fn = t.cget("font")
	font = tkFont.Font(font=fn)
	config.defaultFont = font
	config.defaultFontFamily = font.cget("family")</t>
<t tx="ekr.20031218072017.2187">def getFontFromParams(self,family,size,slant,weight,defaultSize=12):
	
	family_name = family
	
	try:
		font = tkFont.Font(family=family,size=size,slant=slant,weight=weight)
		# if g.app.trace: g.trace(font)
		return font
	except:
		g.es("exception setting font from " + `family_name`)
		g.es("family,size,slant,weight:"+
			`family`+':'+`size`+':'+`slant`+':'+`weight`)
		# g.es_exception() # 12/15/03: This just confuses people.
		return g.app.config.defaultFont</t>
<t tx="ekr.20031218072017.2188">def newLeoCommanderAndFrame(self,fileName):
	
	"""Create a commander and its view frame for the Leo main window."""
	
	import leoCommands
	
	if not fileName: fileName = ""
	&lt;&lt; compute the window title &gt;&gt;

	# Create an unfinished frame to pass to the commanders.
	frame = g.app.gui.createLeoFrame(title)
	
	# Create the commander and its subcommanders.
	c = leoCommands.Commands(frame,fileName)
	
	# Finish creating the frame
	frame.finishCreate(c)
	
	# Finish initing the subcommanders.
	c.undoer.clearUndoState() # Menus must exist at this point.
	
	c.updateRecentFiles(fileName) # 12/01/03
	
	g.doHook("after-create-leo-frame",c=c)
	return c,frame</t>
<t tx="ekr.20031218072017.2189"># Set the window title and fileName
if fileName:
	title = g.computeWindowTitle(fileName)
else:
	s = "untitled"
	n = g.app.numberOfWindows
	if n &gt; 0:
		s += `n`
	title = g.computeWindowTitle(s)
	g.app.numberOfWindows = n+1

</t>
<t tx="ekr.20031218072017.2190"></t>
<t tx="ekr.20031218072017.2191">class nullBody (leoBody):

	@others</t>
<t tx="ekr.20031218072017.2192">def __init__ (self,frame,parentFrame):
	
	leoBody.__init__ (self,frame,parentFrame) # Init the base class.

	self.insertPoint = 0
	self.selection = 0,0
	self.s = "" # The body text
	
	self.colorizer = leoColor.nullColorizer(self.c)</t>
<t tx="ekr.20031218072017.2193"></t>
<t tx="ekr.20031218072017.2194">def findStartOfLine (self,lineNumber):
	
	lines = g.splitLines(self.s)
	i = 0 ; index = 0
	for line in lines:
		if i == lineNumber: break
		i += 1
		index += len(line)
	return index</t>
<t tx="ekr.20031218072017.2195">def scanToStartOfLine (self,index):
	
	if index &lt;= 0:
		return 0
		
	assert(self.s[i] != '\n')
	
	while i &gt;= 0:
		if s[i] == '\n':
			return i + 1
	
	return 0</t>
<t tx="ekr.20031218072017.2196">def scanToEndOfLine (self,i):
	
	if index &gt;= len(self.s):
		return len(self.s)
		
	assert(self.s[i] != '\n')
	
	while i &lt; len(s):
		if s[i] == '\n':
			return i - 1
	
	return i</t>
<t tx="ekr.20031218072017.2197">def createBindings (self,frame):
	self.oops()

def createControl (self,frame,parentFrame):
	self.oops()
	
def initialRatios (self):
	self.oops()
	
def onBodyChanged (self,v,undoType,oldSel=None,oldYview=None,newSel=None,oldText=None):
	self.oops()
	
def setBodyFontFromConfig (self):
	self.oops()</t>
<t tx="ekr.20031218072017.2198">def bbox(self,index):
	return (0,0)</t>
<t tx="ekr.20031218072017.2199">def tag_add (self,tagName,index1,index2):
	pass

def tag_bind (self,tagName,event,callback):
	pass

def tag_configure (self,colorName,**keys):
	pass

def tag_delete(self,tagName):
	pass

def tag_remove (self,tagName,index1,index2):
	pass</t>
<t tx="ekr.20031218072017.2200">def cget(self,*args,**keys):
	pass
	
def configure (self,*args,**keys):
	pass</t>
<t tx="ekr.20031218072017.2201">def hasFocus (self):
	return true
	
def setFocus (self):
	pass</t>
<t tx="ekr.20031218072017.2202">def getBodyPaneHeight (self):
	
	return 500

def getBodyPaneWidth (self):

	return 600</t>
<t tx="ekr.20031218072017.2203">def scheduleIdleTimeRoutine (self,function,*args,**keys):

	g.trace()</t>
<t tx="ekr.20031218072017.2204">def adjustIndex (self,index,offset):
	return index + offset
	
def compareIndices(self,i,rel,j):

	return eval("%d %s %d" % (i,rel,j))
	
def convertRowColumnToIndex (self,row,column):
	
	# Probably not used.
	n = self.findStartOfLine(row)
	g.trace(n + column)
	return n + column
	
def convertIndexToRowColumn (self,index):
	
	# Probably not used.
	g.trace(index)
	return index
	
def getImageIndex (self,image):
	self.oops()
</t>
<t tx="ekr.20031218072017.2205">def getBeforeInsertionPoint (self):
	return self.insertPoint - 1

def getInsertionPoint (self):
	return self.insertPoint
	
def getCharAtInsertPoint (self):
	try: return self.s[self.insertPoint]
	except: return None

def getCharBeforeInsertPoint (self):
	try: return self.s[self.insertPoint - 1]
	except: return None
	
def makeInsertPointVisible (self):
	pass
	
def setInsertionPoint (self,index):
	self.insertPoint = index

def setInsertionPointToEnd (self):
	self.insertPoint = len(self.s)
	
def setInsertPointToStartOfLine (self,lineNumber): # zero-based line number
	self.insertPoint = self.findStartOfLine(lineNumber)</t>
<t tx="ekr.20031218072017.2206">def bind (self,*args,**keys):
	pass
</t>
<t tx="ekr.20031218072017.2207">def deleteTextSelection (self):
	i,j = self.selection
	self.s = self.s[:i] + self.s[j:]
	
def getSelectedText (self):
	i,j = self.selection
	g.trace(self.s[i:j])
	return self.s[i:j]
	
def getTextSelection (self):
	g.trace(self.selection)
	return self.selection
	
def hasTextSelection (self):
	i,j = self.selection
	return i != j
	
def selectAllText (self):
	self.selection = 0,len(self.s)
	
def setTextSelection (self,i,j=None):
	if i is None:
		self.selection = 0,0
	elif j is None:
		self.selection = i # a tuple
	else:
		self.selection = i,j</t>
<t tx="ekr.20031218072017.2208"></t>
<t tx="ekr.20031218072017.2209">def deleteAllText(self):
	self.insertPoint = 0
	self.selection = 0,0
	self.s = "" # The body text

def deleteCharacter (self,index):
	self.s = self.s[:index] + self.s[index+1:]
	
def deleteLastChar (self):
	if self.s:
		del self.s[-1]
	
def deleteLine (self,lineNumber): # zero based line number.
	self.deleteLines(lineNumber,1)
	
def deleteLines (self,line1,numberOfLines): # zero based line numbers.
	n1 = self.findStartOfLine(lineNumber)
	n2 = self.findStartOfLine(lineNumber+numberOfLines+1)
	if n2:
		self.s = self.s[:n1] + self.s[n2:]
	else:
		self.s = self.s[:n1]
	
def deleteRange (self,index1,index2):
	del self.s[index1:index2]</t>
<t tx="ekr.20031218072017.2210">def getAllText (self):
	return g.toUnicode(self.s,g.app.tkEncoding)
	
def getCharAtIndex (self,index):
	
	try:
		s = self.s[index]
		return g.toUnicode(s,g.app.tkEncoding)
	except: return None
	
def getTextRange (self,index1,index2):

	s = self.s[index1:index2]
	return g.toUnicode(s,g.app.tkEncoding)</t>
<t tx="ekr.20031218072017.2211">def getInsertLines (self):
	
	"""Return before,ins,after where:
		
	before is all the lines before the line containing the insert point.
	sel is the line containing the insert point.
	after is all the lines after the line containing the insert point.
	
	All lines end in a newline, except possibly the last line."""

	# DTHEIN 18-JAN-2004: NOTE: overridden by leoTkinterBody!!!!!!
	
	n1 = self.scanToStartOfLine(self.insertPoint)
	n2 = self.scanToEndOfLine(self.insertPoint)
	
	before = self.s[:n1]
	ins    = self.s[n1:n2+1] # 12/18/03: was sel(!)
	after  = self.s[n2+1:]

	before = g.toUnicode(before,g.app.tkEncoding)
	ins    = g.toUnicode(ins,   g.app.tkEncoding)
	after  = g.toUnicode(after ,g.app.tkEncoding)

	return before,ins,after

</t>
<t tx="ekr.20031218072017.2212">def getSelectionAreas (self):
	
	"""Return before,sel,after where:
		
	before is the text before the selected text
	(or the text before the insert point if no selection)
	sel is the selected text (or "" if no selection)
	after is the text after the selected text
	(or the text after the insert point if no selection)"""
	
	if not self.hasTextSelection():
		n1,n2 = self.insertPoint,self.insertPoint
	else:
		n2,n2 = self.selection

	before = self.s[:n1]
	sel    = self.s[n1:n2+1]
	after  = self.s[n2+1:]
	
	before = g.toUnicode(before,g.app.tkEncoding)
	sel    = g.toUnicode(sel,   g.app.tkEncoding)
	after  = g.toUnicode(after ,g.app.tkEncoding)
	return before,sel,after</t>
<t tx="ekr.20031218072017.2213">def getSelectionLines (self):
	
	"""Return before,sel,after where:
		
	before is the all lines before the selected text
	(or the text before the insert point if no selection)
	sel is the selected text (or the line containing the insert point if no selection)
	after is all lines after the selected text
	(or the text after the insert point if no selection)"""
	
	# At present, called only by c.getBodyLines.
	if not self.hasTextSelection():
		start,end = self.insertPoint,self.insertPOint
	else:
		start,end = self.selection

	n1 = self.scanToStartOfLine(start)
	n2 = self.scanToEndOfLine(end)

	before = self.s[:n1]
	sel    = self.s[n1:n2] # 12/8/03 was n2+1
	after  = self.s[n2+1:]

	before = g.toUnicode(before,g.app.tkEncoding)
	sel    = g.toUnicode(sel,   g.app.tkEncoding)
	after  = g.toUnicode(after ,g.app.tkEncoding)
	
	g.trace(n1,n2)
	return before,sel,after
</t>
<t tx="ekr.20031218072017.2214">def insertAtInsertPoint (self,s):
	
	i = self.insertPoint
	self.s = self.s[:i] + s + self.s[i:]
	
def insertAtEnd (self,s):
	
	self.s = self.s + s
	
def insertAtStartOfLine (self,lineNumber,s):
	
	i = self.findStartOfLine(lineNumber)
	self.s = self.s[:i] + s + self.s[i:]</t>
<t tx="ekr.20031218072017.2215">def setSelectionAreas (self,before,sel,after):
	
	if before is None: before = ""
	if sel    is None: sel = ""
	if after  is None: after = ""
	
	self.s = before + sel + after
	
	self.selection = len(before), len(before) + len(sel)</t>
<t tx="ekr.20031218072017.2216">def makeIndexVisible (self,index):
	pass
	
def setFirstVisibleIndex (self,index):
	pass
	
def getYScrollPosition (self):
	return 0
	
def setYScrollPosition (self,scrollPosition):
	pass
	
def scrollUp (self):
	pass
	
def scrollDown (self):
	pass</t>
<t tx="ekr.20031218072017.2217">def oops(self):

	g.trace("nullBody:", g.callerName(2))
	pass</t>
<t tx="ekr.20031218072017.2218">class nullColorizer (colorizer):
	
	"""A do-nothing colorer class"""
	
	@others</t>
<t tx="ekr.20031218072017.2219">def __init__ (self,c):
	
	
	self.c = c
</t>
<t tx="ekr.20031218072017.2220">def colorize(self,p,incremental=false):
	pass
	
def idle_colorize(self,p):
	pass
		
def recolor_range(self,p,leading,trailing):
	pass

def scanColorDirectives(self,p):
	pass
	
def schedule(self,p,incremental=0):
	pass

def updateSyntaxColorer (self,p):
	pass</t>
<t tx="ekr.20031218072017.2221">def OnHyperLinkControlClick (self,v):

	pass
	
def OnHyperLinkEnter (self,v):

	pass
	
def OnHyperLinkLeave (self,v):

	pass</t>
<t tx="ekr.20031218072017.2222">class nullFrame (leoFrame):
	
	"""A null frame class for tests and batch execution."""
	
	def __init__ (self,title):

		leoFrame.__init__(self) # Init the base class.
		assert(self.c is None)
		self.title = title
		
	if 0: # This causes no end of problems.
		
		def __getattr__(self,attr):
			g.trace("nullFrame",attr)
			return nullObject()

	def finishCreate(self,c):

		self.c = c
		# Create do-nothing component objects.
		self.tree = nullTree(frame=self)
		self.body = nullBody(frame=self,parentFrame=None)
		self.log  = nullLog (frame=self,parentFrame=None)
		self.menu = leoMenu.nullMenu(frame=self)
		assert(c.undoer)
		c.undoer = leoUndo.nullUndoer(c)
		
	def oops(self):
		# g.trace("nullFrame:", g.callerName(2))
		pass # This is NOT an error.</t>
<t tx="ekr.20031218072017.2223">class nullGui(leoGui):
	
	"""Null gui class."""
	
	@others</t>
<t tx="ekr.20031218072017.2224"></t>
<t tx="ekr.20031218072017.2225">def __init__ (self,guiName):
	
	leoGui.__init__ (self,guiName) # init the base class.
	
	self.script = None
	self.lastFrame = None</t>
<t tx="ekr.20031218072017.2226">def createLeoFrame(self,title):
	
	"""Create a null Leo Frame."""

	self.lastFrame = leoFrame.nullFrame(title)
	return self.lastFrame</t>
<t tx="ekr.20031218072017.2227">def createRootWindow(self):
	pass</t>
<t tx="ekr.20031218072017.2228">def finishCreate (self):
	pass</t>
<t tx="ekr.20031218072017.2229">def runMainLoop(self):

	"""Run the gui's main loop."""
	
	if self.script:
		frame = self.lastFrame
		g.app.log = frame.log
		# g.es("Start of batch script...\n")
		self.lastFrame.c.executeScript(script=self.script)
		# g.es("\nEnd of batch script")
	
	# Getting here will terminate Leo.</t>
<t tx="ekr.20031218072017.2230">def oops(self):
		
	"""Default do-nothing method for nullGui class.
	
	It is NOT an error to use this method."""
	
	g.trace("nullGui",g.callerName(2))
	pass</t>
<t tx="ekr.20031218072017.2231">def setScript (self,script=None,scriptFileName=None):

	self.script = script
	self.scriptFileName = scriptFileName</t>
<t tx="ekr.20031218072017.2232">class nullLog (leoLog):
	
	def __init__ (self,frame=None,parentFrame=None):
		
		leoLog.__init__(self,frame,parentFrame) # Init the base class.
		
		if 0: # No longer needed: use base enable/disable methods.
			if g.app.batchMode:
				if g.app.log: self.enabled = g.app.log.enabled
				else:         self.enabled = true
				g.app.log = self
			else:
				self.enabled = true
		# g.trace("nullLog",self.enabled)
		
	def createControl (self,parentFrame):
		pass
		
	def oops(self):
		g.trace("nullLog:", g.callerName(2))
		
	def put (self,s,color=None):
		if self.enabled:
			print s

	def putnl (self):
		pass
		
	def setFontFromConfig (self):
		pass</t>
<t tx="ekr.20031218072017.2233">class nullTree (leoTree):

	@others</t>
<t tx="ekr.20031218072017.2234">def __init__ (self,frame):
	
	leoTree.__init__(self,frame) # Init the base class.
	
	assert(self.frame)
	self.font = None
	self.fontName = None
	</t>
<t tx="ekr.20031218072017.2235">def oops(self):
		
	# It is not an error to call this routine...
	g.trace("nullTree:", g.callerName(2))
	pass</t>
<t tx="ekr.20031218072017.2236"></t>
<t tx="ekr.20031218072017.2237">def enableDrawingAfterException (self):
	pass

def drawIcon(self,v,x=None,y=None):
	pass

def redraw(self,event=None):
	pass

def redraw_now(self):
	pass</t>
<t tx="ekr.20031218072017.2238">def editLabel(self,v):
	pass

def endEditLabel(self):
	pass

def setNormalLabelState(self,v):
	pass</t>
<t tx="ekr.20031218072017.2239">def scrollTo(self,v):
	pass

def idle_scrollTo(self,v):
	pass
</t>
<t tx="ekr.20031218072017.2240">def expandAllAncestors(self,v):

	pass</t>
<t tx="ekr.20031218072017.2241">def getFont(self):

	return self.font
	
def setFont(self,font=None,fontName=None):

	self.font = font
	self.fontName = fontName</t>
<t tx="ekr.20031218072017.2242">def select(self,p,updateBeadList=true):
	
	self.c.setCurrentPosition(p)

	self.frame.scanForTabWidth(p)</t>
<t tx="ekr.20031218072017.2243">class nullUndoer (undoer):

	def __init__ (self,c):
		
		undoer.__init__(self,c) # init the base class.
		
	def clearUndoState (self):
		pass
		
	def canRedo (self):
		return false

	def canUndo (self):
		return false
		
	def enableMenuItems (self):
		pass

	def getBead (self,n):
		return {}
	
	def peekBead (self,n):
		return {}

	def setBead (self,n,keywords=None):
		return {}
		
	def redoMenuName (self,name):
		return "Can't Redo"
	
	def undoMenuName (self,name):
		return "Can't Undo"
			
	def setUndoParams (self,undo_type,v,**keywords):
		pass
		
	def setUndoTypingParams (self,v,undo_type,oldText,newText,oldSel,newSel,oldYview=None):
		pass
		
	def setUndoTypes (self):
		pass
		</t>
<t tx="ekr.20031218072017.2244"></t>
<t tx="ekr.20031218072017.2245">Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=2311532
By: ejoy

on a win2k box with python 2.3.2 and a win98 box with python 2.2.2. When click
Help-&gt;Apply Settings I get:
leoConfig.txt encoding: utf-8
exception executing command
Traceback (most recent call last):
  File "F:\Program Files\Leo\src\leoCommands.py", line 127, in doCommand
    command()
  File "F:\Program Files\Leo\src\leoCommands.py", line 3434, in applyConfig
    c.frame.reconfigureFromConfig()
  File "F:\Program Files\Leo\src\leoTkinterFrame.py", line 732, in
reconfigureFromConfig
    frame.body.setTabWidth(c.tab_width)
AttributeError: leoTkinterBody instance has no attribute 'setTabWidth'</t>
<t tx="ekr.20031218072017.2246">def reconfigureFromConfig (self):
	
	frame = self ; c = frame.c
	
	# Not ready yet: just reset the width and color.
	# We need self.bar1 and self.bar2 ivars.
	# self.reconfigureBar(...)
	
	# The calls to redraw are workarounds for an apparent Tk bug.
	# Without them the text settings get applied to the wrong widget!
	# Moreover, only this order seems to work on Windows XP...
	frame.tree.setFontFromConfig()
	frame.tree.setTreeColorsFromConfig()
	frame.configureBarsFromConfig()
	c.redraw()
	frame.body.setFontFromConfig()
	frame.setTabWidth(c.tab_width) # 12/2/03
	c.redraw()
	frame.log.setFontFromConfig()
	c.redraw()
</t>
<t tx="ekr.20031218072017.2247">@nocolor

Apparently I added shortcuts to the popup menu for the first time recently.

The "duplicate binding" logic would complain if popups actually tried to bind the shortcuts.

The fix: to add a dontBind param to createMenuEntries and set that param when creating the popup menu.

@color</t>
<t tx="ekr.20031218072017.2248">@nocolor

https://sourceforge.net/forum/message.php?msg_id=2298869
By: billp9619

Right clicking on a  headline causes a bunch of error messages as follows. 

Leo Log Window...
Leo 4.1 beta 4, build  1.40 , November 20, 2003
Python 2.2.1, Tk 8.3.2

leoConfig.txt encoding: iso-8859-1
Text encoding: cp1252
leoID = billp9619
duplicate shortcut:, Shift+Ctrl+W, &lt;Control-W&gt;, &amp;Write @file Nodes
duplicate shortcut:, Shift+Ctrl+T, &lt;Control-T&gt;, &amp;Tangle
duplicate shortcut:, Shift+Ctrl+U, &lt;Control-U&gt;, &amp;Untangle
duplicate shortcut:, Shift+Ctrl+X, &lt;Control-X&gt;, Cut Node
duplicate shortcut:, Shift+Ctrl+C, &lt;Control-C&gt;, Copy Node
duplicate shortcut:, Shift+Ctrl+V, &lt;Control-V&gt;, &amp;Paste Node
duplicate shortcut:, Shift+Ctrl+BkSp, &lt;Shift-Control-BackSpace&gt;, &amp;Delete Node
duplicate shortcut:, Ctrl+I, &lt;Control-i&gt;, &amp;Insert Node
duplicate shortcut:, Ctrl+`, &lt;Control-quoteleft&gt;, &amp;Clone Node
duplicate shortcut:, Alt-A, &lt;Alt-a&gt;, &amp;Sort Siblings
duplicate shortcut:, Alt+0, &lt;Alt-Key-0&gt;, Contract Parent</t>
<t tx="ekr.20031218072017.2249">def createPopupMenu (self,event):
	
	c = self.c ; frame = c.frame
	
	# If we are going to recreate it, we had better destroy it.
	if self.popupMenu:
		self.popupMenu.destroy()
		self.popupMenu = None
	
	self.popupMenu = menu = Tkinter.Menu(g.app.root, tearoff=0)
	
	# Add the Open With entries if they exist.
	if g.app.openWithTable:
		frame.menu.createMenuEntries(menu,g.app.openWithTable,openWith=1)
		table = (("-",None,None),)
		frame.menu.createMenuEntries(menu,table)
		
	&lt;&lt; Create the menu table &gt;&gt;
	
	# 11/27/03: Don't actually set binding: it would conflict with previous.
	frame.menu.createMenuEntries(menu,table,dontBind=true)</t>
<t tx="ekr.20031218072017.2250">table = (
	("&amp;Read @file Nodes",None,c.readAtFileNodes),
	("&amp;Write @file Nodes",None,c.fileCommands.writeAtFileNodes),
	("-",None,None),
	("&amp;Tangle","Shift+Ctrl+T",c.tangle),
	("&amp;Untangle","Shift+Ctrl+U",c.untangle),
	("-",None,None),
	# 2/16/04: Remove shortcut for Toggle Angle Brackets command.
	("Toggle Angle &amp;Brackets",None,c.toggleAngleBrackets),
	("-",None,None),
	("Cut Node","Shift+Ctrl+X",c.cutOutline),
	("Copy Node","Shift+Ctrl+C",c.copyOutline),
	("&amp;Paste Node","Shift+Ctrl+V",c.pasteOutline),
	("&amp;Delete Node","Shift+Ctrl+BkSp",c.deleteOutline),
	("-",None,None),
	("&amp;Insert Node","Ctrl+I",c.insertHeadline),
	("&amp;Clone Node","Ctrl+`",c.clone),
	("Sort C&amp;hildren",None,c.sortChildren),
	("&amp;Sort Siblings","Alt-A",c.sortSiblings),
	("-",None,None),
	("Contract Parent","Alt+0",c.contractParent))</t>
<t tx="ekr.20031218072017.2251"></t>
<t tx="ekr.20031218072017.2252">Here's what I get when I start Leo and attempt to do a search:

setLog: frame.__init__ locked: false &lt;leoFrame: untitled&gt;
setLog: OnActivateTree locked: false &lt;leoFrame: untitled&gt;
...[snip]
setLog: OnActivateLeoEvent locked: false &lt;leoFrame: untitled&gt;
setLog: OnMenuClick locked: false &lt;leoFrame: untitled&gt;
setLog: doCommand locked: false &lt;leoFrame: untitled&gt;
setLog: OnDeactivateLeoEvent locked: false None
setLog: OnDeactivateLeoEvent locked: false None
...[snip]
setLog: OnDeactivateLeoEvent locked: false None
Exception in Tkinter callback
Traceback (most recent call last):
   File
"/Library/Frameworks/Python.framework/Versions/2.3/lib/python2.3/lib- 
tk/Tkinter.py", line 1345, in __call__
     return self.func(*args)
   File "/usr/local/lib/leo/src/leoFind.py", line 377, in findButton
     self.setup_button()
   File "/usr/local/lib/leo/src/leoFind.py", line 434, in setup_button
     self.commands = c = app.log.commands
AttributeError: 'NoneType' object has no attribute 'commands'</t>
<t tx="ekr.20031218072017.2253">def OnActivateLeoEvent(self,event=None):

	try:
		g.app.setLog(self.log,"OnActivateLeoEvent")
	except:
		g.es_event_exception("activate Leo")

def OnDeactivateLeoEvent(self,event=None):
	
	if 0: # This causes problems on the Mac.
		try:
			g.app.setLog(None,"OnDeactivateLeoEvent")
		except:
			g.es_event_exception("deactivate Leo")</t>
<t tx="ekr.20031218072017.2254"></t>
<t tx="ekr.20031218072017.2255">@nocolor

line-continuation backslash character problem   
2003-08-01 16:07
Help Forum

I imported as @file a python file, and there's a line with a line-continuation backslash that gets split in two parts, and then this causes a syntax error when running the program.</t>
<t tx="ekr.20031218072017.2256"></t>
<t tx="ekr.20031218072017.2257">def scanPythonClass (self,s,i,start,parent):

	"""Creates a child node c of parent for the class, and children of c for each def in the class."""

	# g.trace(g.get_line(s,i))
	classIndent = self.getLeadingIndent(s,i)
	&lt;&lt; set classname and headline, or return i &gt;&gt;
	i = g.skip_line(s,i) # Skip the class line.
	&lt;&lt; create class_vnode &gt;&gt;
	savedMethodName = self.methodName
	self.methodName = headline
	# Create a node for leading declarations of the class.
	i = self.scanPythonDecls(s,i,class_vnode,classIndent,indent_parent_ref_flag=true)
	&lt;&lt; create nodes for all defs of the class &gt;&gt;
	&lt;&lt; append any other class material &gt;&gt;
	self.methodName = savedMethodName
	return i
</t>
<t tx="ekr.20031218072017.2258"># Skip to the class name.
i = g.skip_ws(s,i)
i = g.skip_c_id(s,i) # skip "class"
i = g.skip_ws_and_nl(s,i)
if i &lt; len(s) and g.is_c_id(s[i]):
	j = i ; i = g.skip_c_id(s,i)
	classname = s[j:i]
	headline = "class " + classname
else:
	return i</t>
<t tx="ekr.20031218072017.2259"># Create the section name using the old value of self.methodName.
if  self.treeType == "@file":
	prefix = ""
else:
	prefix = g.angleBrackets(" " + self.methodName + " methods ") + "=\n\n"
	self.methodsSeen = true

# i points just after the class line.

# Add a docstring to the class node.
docStringSeen = false
j = g.skip_ws_and_nl(s,i)
if g.match(s,j,'"""') or g.match(s,j,"'''"):
	j = g.skip_python_string(s,j)
	if j != len(s): # No scanning error.
		i = j ; docStringSeen = true

body = s[start:i]
body = self.undentBody(body)
if docStringSeen: body = body + '\n'
class_vnode = self.createHeadline(parent,prefix + body,headline)</t>
<t tx="ekr.20031218072017.2260">indent =  self.getLeadingIndent(s,i)
start = i = g.skip_blank_lines(s,i)
parent_vnode = None # 7/6/02
while i &lt; len(s) and indent &gt; classIndent:
	progress = i
	if g.is_nl(s,i):
		backslashNewline = i &gt; 0 and g.match(s,i-1,"\\\n")
		j = g.skip_nl(s,i)
		if not backslashNewline:
			indent = self.getLeadingIndent(s,j)
			if indent &gt; classIndent: i = j
			else: break
		else: i = j
	elif g.match_c_word(s,i,"def"):
		if not parent_vnode:
			&lt;&lt; create parent_vnode &gt;&gt;
		i = start = self.scanPythonDef(s,i,start,parent_vnode)
		indent = self.getLeadingIndent(s,i)
	elif g.match_c_word(s,i,"class"):
		if not parent_vnode:
			&lt;&lt; create parent_vnode &gt;&gt;
		i = start = self.scanPythonClass(s,i,start,parent_vnode)
		indent = self.getLeadingIndent(s,i)
	elif s[i] == '#': i = g.skip_to_end_of_line(s,i)
	elif s[i] == '"' or s[i] == '\'': i = g.skip_python_string(s,i)
	else: i += 1
	assert(progress &lt; i)</t>
<t tx="ekr.20031218072017.2261"># This must be done after the declaration reference is generated.
if self.treeType == "@file":
	class_vnode.appendStringToBody("\t@others\n")
else:
	ref = g.angleBrackets(" class " + classname + " methods ")
	class_vnode.appendStringToBody("\t" + ref + "\n\n")
parent_vnode = class_vnode</t>
<t tx="ekr.20031218072017.2262">s2 = s[start:i]
if s2:
	class_vnode.appendStringToBody(s2)</t>
<t tx="ekr.20031218072017.2263">def scanPythonDef (self,s,i,start,parent):

	"""Creates a node of parent for the def."""

	# g.trace(g.get_line(s,i))
	&lt;&lt; set headline or return i &gt;&gt;
	&lt;&lt; skip the Python def &gt;&gt;
	# Create the def node.
	savedMethodName = self.methodName
	self.methodName = headline
	&lt;&lt; Create def node &gt;&gt;
	self.methodName = savedMethodName
	return i
</t>
<t tx="ekr.20031218072017.2264">i = g.skip_ws(s,i)
i = g.skip_c_id(s,i) # Skip the "def"
i = g.skip_ws_and_nl(s,i)
if i &lt; len(s) and g.is_c_id(s[i]):
	j = i ; i = g.skip_c_id(s,i)
	headline = s[j:i]
	# g.trace("headline:" + `headline`)
else: return i</t>
<t tx="ekr.20031218072017.2265"># Set defIndent to the indentation of the def line.
defIndent = self.getLeadingIndent(s,start)
i = g.skip_line(s,i) # Skip the def line.
indent = self.getLeadingIndent(s,i)
while i &lt; len(s) and indent &gt; defIndent:
	progress = i
	ch = s[i]
	if g.is_nl(s,i):
		backslashNewline = i &gt; 0 and g.match(s,i-1,"\\\n")
		i = g.skip_nl(s,i)
		if not backslashNewline:
			indent = self.getLeadingIndent(s,i)
			if indent &lt;= defIndent:
				break
	elif ch == '#':
		i = g.skip_to_end_of_line(s,i) # 7/29/02
	elif ch == '"' or ch == '\'':
		i = g.skip_python_string(s,i)
	else: i += 1
	assert(progress &lt; i)</t>
<t tx="ekr.20031218072017.2266"># Create the prefix line for @root trees.
if self.treeType == "@file":
	prefix = ""
else:
	prefix = g.angleBrackets(" " + savedMethodName + " methods ") + "=\n\n"
	self.methodsSeen = true

# Create body.
start = g.skip_blank_lines(s,start)
body = s[start:i]
body = self.undentBody(body)

# Create the node.
self.createHeadline(parent,prefix + body,headline)

</t>
<t tx="ekr.20031218072017.2267">def scanPythonDecls (self,s,i,parent,indent,indent_parent_ref_flag=true):
	
	done = false ; start = i
	while not done and i &lt; len(s):
		progress = i
		# g.trace(g.get_line(s,i))
		ch = s[i]
		if ch == '\n':
			backslashNewline = i &gt; 0 and g.match(s,i-1,"\\\n")
			i = g.skip_nl(s,i)
			# 2/14/03: break on lesser indention.
			j = g.skip_ws(s,i)
			if not g.is_nl(s,j) and not g.match(s,j,"#") and not backslashNewline:
				lineIndent = self.getLeadingIndent(s,i)
				if lineIndent &lt;= indent:
					break
		elif ch == '#': i = g.skip_to_end_of_line(s,i)
		elif ch == '"' or ch == '\'':
			i = g.skip_python_string(s,i)
		elif g.is_c_id(ch):
			&lt;&lt; break on def or class &gt;&gt;
		else: i += 1
		assert(progress &lt; i)
	j = g.skip_blank_lines(s,start)
	if g.is_nl(s,j): j = g.skip_nl(s,j)
	if j &lt; i:
		&lt;&lt; Create a child node for declarations &gt;&gt;
	return i</t>
<t tx="ekr.20031218072017.2268">if g.match_c_word(s,i,"def") or g.match_c_word(s,i,"class"):
	i = g.find_line_start(s,i)
	done = true
	break
else:
	i = g.skip_c_id(s,i)</t>
<t tx="ekr.20031218072017.2269">headline = ref = g.angleBrackets(" " + self.methodName + " declarations ")
leading_tab = g.choose(indent_parent_ref_flag,"\t","")

# Append the reference to the parent's body.
parent.appendStringToBody(leading_tab + ref + "\n") # 7/6/02

# Create the node for the decls.
body = self.undentBody(s[j:i])
if self.treeType == "@root":
	body = "@code\n\n" + body
self.createHeadline(parent,body,headline)</t>
<t tx="ekr.20031218072017.2270"># See the comments for scanCText for what the text looks like.

def scanPythonText (self,s,parent):

	"""Creates a child of parent for each Python function definition seen."""

	decls_seen = false ; start = i = 0
	self.methodsSeen = false
	while i &lt; len(s):
		progress = i
		# g.trace(g.get_line(s,i))
		ch = s[i]
		if ch == '\n' or ch == '\r': i = g.skip_nl(s,i)
		elif ch == '#': i = g.skip_to_end_of_line(s,i)
		elif ch == '"' or ch == '\'': i = g.skip_python_string(s,i)
		elif g.is_c_id(ch):
			&lt;&lt; handle possible Python function or class &gt;&gt;
		else: i += 1
		assert(progress &lt; i)
	if not decls_seen: # 2/17/03
		parent.appendStringToBody("@ignore\n" + self.rootLine + "@language python\n")
	&lt;&lt; Append a reference to the methods of this file &gt;&gt;
	&lt;&lt; Append any unused python text to the parent's body text &gt;&gt;</t>
<t tx="ekr.20031218072017.2271">if g.match_c_word(s,i,"def") or g.match_word(s,i,"class"):
	isDef = g.match_c_word(s,i,"def")
	if not decls_seen:
		parent.appendStringToBody("@ignore\n" + self.rootLine + "@language python\n")
		i = start = self.scanPythonDecls(s,start,parent,-1,indent_parent_ref_flag=false)
		decls_seen = true
		if self.treeType == "@file": # 7/29/02
			parent.appendStringToBody("@others\n") # 7/29/02
	if isDef:
		i = start = self.scanPythonDef(s,i,start,parent)
	else:
		i = start = self.scanPythonClass(s,i,start,parent)
else:
	i = g.skip_c_id(s,i)</t>
<t tx="ekr.20031218072017.2272">if self.treeType == "@root" and self.methodsSeen:
	parent.appendStringToBody(
		g.angleBrackets(" " + self.methodName + " methods ") + "\n\n")</t>
<t tx="ekr.20031218072017.2273"># Do nothing if only whitespace is left.
i = start ; i = g.skip_ws_and_nl(s,i)
if i &lt; len(s):
	parent.appendStringToBody(s[start:])</t>
<t tx="ekr.20031218072017.2274"></t>
<t tx="ekr.20031218072017.2275">from leoGlobals import *

print "default",`getOutputNewline()`
print "nl",`getOutputNewline("nl")`
print "cr",`getOutputNewline("cr")`
print "crlf",`getOutputNewline("crlf")`
print "platform",`getOutputNewline("platform")`
print "\\n",`getOutputNewline("\n")`</t>
<t tx="ekr.20031218072017.2276">@nocolor

http://sourceforge.net/forum/message.php?msg_id=2281537
By: emakital

Quick fixes to get nice lineending in Windows
Of course you must change either default lineending or use @lineending

I dowloaded code and I made some fixes for Windows user so that Leo would obey
lineending crlf and platform "again" (?)

In leoAtFile.py:
baseNewDerivedFile::putCodeLine ...
replacing 
	at.os(line)
with
	if (line[-1:]=="\n"):
		at.os(line[:-1])
		at.onl()
	else:
		at.os(line)

AND In leoGlobals.py: (using os.linesep to determine right lineending of platform)

def getOutputNewline (lineending = None):

"""Convert the name of a line ending to the line ending itself.
Use the output_newline configuration option if no lineending is given.
"""

#2003-11-09/Eino Fixing platform setting. Let Python guide us.
from os import linesep

if lineending:
s = lineending
else:
s = app.config.output_newline
s = string.lower(s)
if s in ( "nl","lf"): s = '\n'
elif s == "cr": s = '\r'
elif s == "crlf": s = "\r\n"
elif s == "platform": s= linesep
else: s = '\n' # Default for erroneous values.
return s</t>
<t tx="ekr.20031218072017.2277"></t>
<t tx="ekr.20031218072017.2278">def importFromPath (name,path):
	
	import imp

	try:
		file = None ; result = None
		try:
			fn = g.shortFileName(name)
			mod_name,ext = g.os_path_splitext(fn)
			path = g.os_path_normpath(path)
			if g.CheckVersion(sys.version,"2.3"):
				path = g.toEncodedString(path,app.tkEncoding) # 12/01/03
			else:
				path = str(path) # 1/29/04: May throw exception.
			# g.trace(path)
			data = imp.find_module(mod_name,[path]) # This can open the file.
			if data:
				file,pathname,description = data
				result = imp.load_module(mod_name,file,pathname,description)
		except:
			g.es_exception()

	# Bug fix: 6/12/03: Put no return statements before here!
	finally: 
		if file: file.close()

	return result</t>
<t tx="ekr.20031218072017.2279"></t>
<t tx="ekr.20031218072017.2280"># Set defaults differently for undent/dedent than for the convert tab/blanks commands.</t>
<t tx="ekr.20031218072017.2281"></t>
<t tx="ekr.20031218072017.2282">@nocolor</t>
<t tx="ekr.20031218072017.2283">By: edcdave ( David Harris ) 
 Extract lops leading slash from new headline   
2003-07-20 23:42
Developers

Leading slashes are removed from the headline created via Extract. Perhaps this was done for some historical reason, but I don't see any restrictions now when I manually type a headline. For example, I did an Extract on: 

/* this set of lines should be in a separate node */ 
first test line 
second test line 

The new node ended up with a headline of "* this set of lines should be in a separate node */". Leo should not be doing this. 

The responsible code is in leoCommands.py/Edit Body Text/extract/&lt;&lt; set headline for extract &gt;&gt;. It looks like: 

headline = string.strip(headline) 
while len(headline) &gt; 0 and headline[0] == '/': 
headline = headline[1:] 
headline = string.strip(headline) 

By the way, a very similar section of code occurs in &lt;&lt; set headline for extractSection &gt;&gt;, but minus the initial strip(): 

while len(headline) &gt; 0 and headline[0] == '/': 
headline = headline[1:] 
headline = string.strip(headline) 

Here, the '/' removal appears to be unwarranted, because the headline is supposed to be a section name. That is, the line must begin with '&lt;&lt;' (although the code also permits '@&lt;') 

Which leads to my third post on Extract (coming right up...) 
 
</t>
<t tx="ekr.20031218072017.2284">https://sourceforge.net/forum/message.php?msg_id=2112738
By: edcdave

Extract Section is enabled when it should not be. (But &lt;&lt; set headline
for extractSection &gt;&gt; saves the day by exiting when the mandatory section name
is not found.)

The User Manual says:

"The Extract Section command creates a new node whose headline is the first
line of selected text and whose body is @code followed by all the other lines
of selected text.  All selected text lines except the first line are deleted
from the original body text. This command is enabled only if the first line
contains a section name (enclosed in angle brackets), on a line by itself."

The Extract Section feature is enabled when ANY selection is made. It just does
nothing if the first selected line is not a section name.

The trouble seems to be that ExtractSection was not completely implemented in
'Enabling Menu Items'.</t>
<t tx="ekr.20031218072017.2285">Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=2112703
By: edcdave

I was learning about Extract and got confused when I referred to the User Manual
in LeoDocs.py.

"Chapter 5/Edit menu/Creating nodes from body text" says:

"The Extract command creates a new node whose headline is the first line of
selected body text and whose body is all following lines of body text.  All
selected text is deleted from the original body text. This command is enabled
only if the first line contains a section name (enclosed in angle brackets)
on a line by itself."

(done) The last sentence should be deleted - Extract does not require a section
name (that's what confused me most, I couldn't see what was the difference
between Extract and Extract Section.)

(done) And the first sentence should make clear that only the selected lines
will be moved to the new node. "...all following lines of body text." should be
replaced with "...all the other lines of selected text."
</t>
<t tx="ekr.20031218072017.2286">Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=2112787
By: edcdave

This one may seem a little malicious, but Extract Section started it. If I had
done the same thing manually, I would acknowledge my ineptitude.

Create a node with a headline '@file ctest.c'. Enter the body text:
@language C
&lt;&lt; pseudo-section
int i = 0;

Select the last two lines and use Extract Section to create a section node.
Only it isn't really a section node. It lacks the '&gt;&gt;' delimiter.

Close the leo file. Re-open it. An error message 'error reading @file ctest.c'
is displayed, and the outline tree is shown minus the psuedo-section, and the
text from the body of the pseudo-section is shown in the referencing node. Saving
the leo file again eliminates the pseudo-section node.

The Extract Section side of the problem could be handled by tightening up the
&lt;&lt; set headline for extractSection &gt;&gt; code. (Or better yet, tackling my earlier
posting about the incorrect enabling of Extract Section.) The following change
might be appropriate. Add:

if headline[-2:] != '&gt;&gt;': return

This test should be safe because we already know that 'headline' is at least
2 characters long (we passed the test for '&lt;&lt;') This still does not address
the self-inflicted side. But maybe the user should pay attention to the
documentation!</t>
<t tx="ekr.20031218072017.2287">def canExtract (self):

	c = self ; body = c.frame.body
	return body and body.hasTextSelection()
	
canExtractSectionNames = canExtract
		
def canExtractSection (self):

	c = self ; body = c.frame.body
	if not body: return false
	
	s = body.getSelectedText()
	if not s: return false

	line = g.get_line(s,0)
	i1 = line.find("&lt;&lt;")
	j1 = line.find("&gt;&gt;")
	i2 = line.find("@&lt;")
	j2 = line.find("@&gt;")
	return -1 &lt; i1 &lt; j1 or -1 &lt; i2 &lt; j2</t>
<t tx="ekr.20031218072017.2288"></t>
<t tx="ekr.20031218072017.2289">I just installed Leo - if I hit Ctrl+B to toggle brackets on a headline I get
the following traceback:

Traceback (most recent call last):
  File "D:\bin\Leo414beta\leo-4.1-beta-4\src\leoCommands.py", line 127,
in doCommand
    command()
  File "D:\bin\Leo414beta\leo-4.1-beta-4\src\leoCommands.py", line 2140, in
toggleAngleBrackets
    c.frame.editLabel(v)
AttributeError: leoTkinterFrame instance has no attribute 'editLabel'

</t>
<t tx="ekr.20031218072017.2290">def toggleAngleBrackets (self):
	
	c = self ; v = c.currentVnode()
	
	if g.app.batchMode:
		c.notValidInBatchMode("Toggle Angle Brackets")
		return

	s = v.headString().strip()
	if (s[0:2] == "&lt;&lt;"
		or s[-2:] == "&gt;&gt;"): # Must be on separate line.
		if s[0:2] == "&lt;&lt;": s = s[2:]
		if s[-2:] == "&gt;&gt;": s = s[:-2]
		s = s.strip()
	else:
		s = g.angleBrackets(' ' + s + ' ')
	
	c.frame.tree.editLabel(v)
	if v.edit_text():
		v.edit_text().delete("1.0","end")
		v.edit_text().insert("1.0",s)
		c.frame.tree.onHeadChanged(v)
</t>
<t tx="ekr.20031218072017.2291"># The error was in batchChange.</t>
<t tx="ekr.20031218072017.2292">Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=2288596
By: billp9619

Problem with change from the find panel with  "Search Headline Text" and "Entire
Outline" then clicking "Change All".

A susequent "Undo Change All" from menu erases the heading text of changed headlines.

Leo Log Window...
Leo 4.1 beta 2, build  1.5 , November 8, 2003
Python 2.2.1, Tk 8.3.2

</t>
<t tx="ekr.20031218072017.2293">@ This routine performs a single batch change operation, updating the head or body string of v and leaving the result in s_text.  We update the body if we are changing the body text of c.currentVnode().

s_text contains the found text on entry and contains the changed text on exit.  pos and pos2 indicate the selection.  The selection will never be empty. NB: we can not assume that self.v is visible.
@c

def batchChange (self,pos1,pos2,count):

	c = self.c ; v = self.v ; st = self.s_text ; gui = g.app.gui
	# Replace the selection with c.change_text
	if gui.compareIndices(st,pos1, "&gt;", pos2):
		pos1,pos2=pos2,pos1
	gui.replaceSelectionRangeWithText(st,pos1,pos2,c.change_text)
	s = gui.getAllText(st)
	# Update the selection.
	insert=g.choose(c.reverse_flag,pos1,pos1+'+'+`len(c.change_text)`+'c')
	gui.setSelectionRange(st,insert,insert)
	gui.setInsertPoint(st,insert)
	# Update the node
	if self.in_headline:
		&lt;&lt; set the undo head params &gt;&gt;
		v.initHeadString(s)
	else:
		&lt;&lt; set the undo body typing params &gt;&gt;
		v.setBodyStringOrPane(s)
	# Set mark, changed and dirty bits.
	if c.mark_changes_flag:
		v.setMarked()
	if not c.isChanged():
		c.setChanged(true)
	v.setDirty()</t>
<t tx="ekr.20031218072017.2294">sel = None
if len(s) &gt; 0 and s[-1]=='\n': s = s[:-1]
if s != v.headString():

	if count == 1:
		c.undoer.setUndoParams("Change All",v) # Tag the start of the Change all.

	# 11/23/03
	c.undoer.setUndoParams("Change Headline",v,
		oldText=v.headString(), newText=s,
		oldSel=sel, newSel=sel)</t>
<t tx="ekr.20031218072017.2295">sel = c.frame.body.getInsertionPoint()

if len(s) &gt; 0 and s[-1]=='\n': s = s[:-1]

if s != v.bodyString():
	if count == 1:
		c.undoer.setUndoParams("Change All",v) # Tag the start of the Change all.

	# 11/5/03: Changed setUndoTypingParams to setUndoParams (avoids incremental undo).
	c.undoer.setUndoParams("Change",v,
		oldText=v.bodyString(), newText=s,
		oldSel=sel, newSel=sel)</t>
<t tx="ekr.20031218072017.2296"></t>
<t tx="ekr.20031218072017.2297">def open(self,file,fileName):

	c = self.c ; frame = c.frame
	# Read the entire file into the buffer
	self.fileBuffer = file.read() ; file.close()
	self.fileIndex = 0
	&lt;&lt; Set the default directory &gt;&gt;
	self.topPosition = None
	c.beginUpdate()
	ok, ratio = self.getLeoFile(fileName,atFileNodesFlag=true)
	frame.resizePanesToRatio(ratio,frame.secondary_ratio) # 12/2/03
	if 0: # 1/30/04: this is useless.
		if self.topPosition: 
			c.setTopVnode(self.topPosition)
	c.endUpdate()
	# delete the file buffer
	self.fileBuffer = ""
	return ok</t>
<t tx="ekr.20031218072017.2298">@ The most natural default directory is the directory containing the .leo file that we are about to open.  If the user has specified the "Default Directory" preference that will over-ride what we are about to set.
@c

dir = g.os_path_dirname(fileName)

if len(dir) &gt; 0:
	c.openDirectory = dir</t>
<t tx="ekr.20031218072017.2300"># Only set self.bitmap on Windows platforms.</t>
<t tx="ekr.20031218072017.2301">(From Bugs section)

When I tried leo 4.0 beta 2 in linux RH9 it crashed.
May be the fault is not in leo. Tkinter may be in
trouble to deal with win 32 .ico format.

Any way, there
should be a less proprietary representation bundled
with leo, like .png. One workaround is to comment line
241 in leoGui.py:
# self.bitmap = Tkinter.BitmapImage
The error trace is:

Traceback (most recent call last):
File "/usr/local/lib/leo/src/leo.py", line 177, in ?
run()
File "/usr/local/lib/leo/src/leo.py", line 59, in run
if app.gui == None: app.createTkGui()
File "/usr/local/lib/leo/src/leoApp.py", line 158, in
createTkGui
app.root = app.gui.createRootWindow()
File "/usr/local/lib/leo/src/leoGui.py", line 222, in
createRootWindow
self.createGlobalWindows()
File "/usr/local/lib/leo/src/leoGui.py", line 292, in
createGlobalWindows
app.findFrame = leoFind.leoFind()
File "/usr/local/lib/leo/src/leoFind.py", line 111,
in __init__
leoFindBase.__init__(self,"Leo
Find/Change",resizeable=false)
File "/usr/local/lib/leo/src/leoFind.py", line 69, in
__init__
self.createTopFrame()
File "/usr/local/lib/leo/src/leoDialog.py", line 117,
in createTopFrame
attachLeoIcon(self.top)
File "/usr/local/lib/leo/src/leoGlobals.py", line
1715, in attachLeoIcon
return app.gui.attachLeoIcon(w)
File "/usr/local/lib/leo/src/leoGui.py", line 432, in
attachLeoIcon
w.wm_iconbitmap(self.bitmap)
File "/usr/lib/python2.2/lib-tk/Tkinter.py", line
1379, in wm_iconbitmap
return self.tk.call('wm', 'iconbitmap', self._w,
bitmap)
TclError: bitmap
"/usr/local/lib/leo/src/../Icons/LeoApp16.ico" not defined
</t>
<t tx="ekr.20031218072017.2302"># Replaced asserts with warning messages.</t>
<t tx="ekr.20031218072017.2303">exception executing command
Traceback (most recent call last):
  File "C:\prog\leoCVS\leo\src\leoCommands.py", line 127, in doCommand
    command()
  File "C:\prog\leoCVS\leo\src\leoCommands.py", line 2222, in pasteOutline
    v = c.fileCommands.getLeoOutline(s)
  File "C:\prog\leoCVS\leo\src\leoFileCommands.py", line 552, in getLeoOutline
    self.getVnodes()
  File "C:\prog\leoCVS\leo\src\leoFileCommands.py", line 854, in getVnodes
    back = self.getVnode(parent,back)
  File "C:\prog\leoCVS\leo\src\leoFileCommands.py", line 785, in getVnode
    v = self.createVnode(parent,back,tref,headline,attrDict)
  File "C:\prog\leoCVS\leo\src\leoFileCommands.py", line 93, in createVnode
    t = self.newTnode(tref)
  File "C:\prog\leoCVS\leo\src\leoFileCommands.py", line 931, in newTnode
    assert(type(index) == type("s"))
AssertionError
</t>
<t tx="ekr.20031218072017.2304"></t>
<t tx="ekr.20031218072017.2305">@nocolor

By: bkc ( Brad Clements ) 
 RE: positioning issues   
2003-12-03 16:04  

 I switch between machines with different resolutions and even dual-head displays. Some applications remember window positions but when they are restored they often don't even appear on the screen because the "remembered position" is not valid for the current desktop.

So, if you want to remember and restore position please be sure to validate the restored position for the current display, and if anything is out of bounds, put the window in a sensible location and size.
</t>
<t tx="ekr.20031218072017.2306">def getGlobals (self):

	if self.getOpenTag("&lt;globals"):
		return

	self.getTag("body_outline_ratio=\"")
	self.ratio = self.getDouble() ; self.getDquote() ; self.getTag("&gt;")

	self.getTag("&lt;global_window_position")
	y,x,h,w = self.getPosition() ; self.getTag("/&gt;")
	self.frame.setTopGeometry(w,h,x,y)

	# 7/15/02: Redraw the window before writing into it.
	self.frame.deiconify()
	self.frame.lift()
	self.frame.update()

	self.getTag("&lt;global_log_window_position")
	self.getPosition() ;
	self.getTag("/&gt;") # no longer used.

	self.getTag("&lt;/globals&gt;")</t>
<t tx="ekr.20031218072017.2307">def setTopGeometry(self,w,h,x,y,adjustSize=true):
	
	# Put the top-left corner on the screen.
	x = max(10,x) ; y = max(10,y)
	
	if adjustSize:
		top = self.top
		sw = top.winfo_screenwidth()
		sh = top.winfo_screenheight()

		# Adjust the size so the whole window fits on the screen.
		w = min(sw-10,w)
		h = min(sh-10,h)

		# Adjust position so the whole window fits on the screen.
		if x + w &gt; sw: x = 10
		if y + h &gt; sh: y = 10
	
	geom = "%dx%d%+d%+d" % (w,h,x,y)
	
	self.top.geometry(geom)</t>
<t tx="ekr.20031218072017.2308"></t>
<t tx="ekr.20031218072017.2309">@nocolor

http://sourceforge.net/forum/message.php?msg_id=2279930

After saving the Leo file a few times

@last ?&gt;
becomes
@last

and Leo indicates the derived file has changed while Leo opens my work file.

--Harry

EKR: Leo passes all the test cases I can think of...</t>
<t tx="ekr.20031218072017.2310"></t>
<t tx="ekr.20031218072017.2311">@ A problem: the new window gets put behind the old.  This is probably because Tk thinks that the mouse-down event should select then new window...</t>
<t tx="ekr.20031218072017.2312">def OnIconDoubleClick (self,v,event=None):

	# Note: "icondclick" hooks handled by vnode callback routine.

	c = self.c
	s = v.headString().strip()
	if g.match_word(s,0,"@url"):
		if not g.doHook("@url1",c=c,v=v):
			url = s[4:].strip()
			&lt;&lt; stop the url after any whitespace &gt;&gt;
			&lt;&lt; check the url; return if bad &gt;&gt;
			&lt;&lt; pass the url to the web browser &gt;&gt;
		g.doHook("@url2",c=c,v=v)</t>
<t tx="ekr.20031218072017.2313"># For safety, the URL string should end at the first whitespace.

url = url.replace('\t',' ')
i = url.find(' ')
if i &gt; -1:
	if 0: # No need for a warning.  Assume everything else is a comment.
		g.es("ignoring characters after space in url:"+url[i:])
		g.es("use %20 instead of spaces")
	url = url[:i]
</t>
<t tx="ekr.20031218072017.2314">if not url or len(url) == 0:
	g.es("no url following @url")
	return
	
@ A valid url is (according to D.T.Hein):

3 or more lowercase alphas, followed by,
one ':', followed by,
one or more of: (excludes !"#;&lt;&gt;[\]^`|)
  $%&amp;'()*+,-./0-9:=?@A-Z_a-z{}~
followed by one of: (same as above, except no minus sign or comma).
  $%&amp;'()*+/0-9:=?@A-Z_a-z}~
@c

urlPattern = "[a-z]{3,}:[\$-:=?-Z_a-z{}~]+[\$-+\/-:=?-Z_a-z}~]"
import re
# 4/21/03: Add http:// if required.
if not re.match('^([a-z]{3,}:)',url):
	url = 'http://' + url
if not re.match(urlPattern,url):
	g.es("invalid url: "+url)
	return
</t>
<t tx="ekr.20031218072017.2315">@ Most browsers should handle the following urls:
  ftp://ftp.uu.net/public/whatever.
  http://localhost/MySiteUnderDevelopment/index.html
  file://home/me/todolist.html
@c

try:
	import os
	os.chdir(g.app.loadDir)

	if g.match(url,0,"file:") and url[-4:]==".leo":
		ok,frame = g.openWithFileName(url[5:],c)
		if ok:
			frame.bringToFront()
	else:
		import webbrowser
		webbrowser.open(url)
except:
	g.es("exception opening " + url)
	g.es_exception()

</t>
<t tx="ekr.20031218072017.2316"># Traces _always_ get printed.</t>
<t tx="ekr.20031218072017.2317"># Convert all args to strings.
# Print if tracing for the presently executing function has been enabled.

def trace (*args,**keys):
	
	callers = keys.get("callers",false)

	s = ""
	for arg in args:
		if type(arg) != type(""):
			arg = repr(arg)
		if len(s) &gt; 0:
			s = s + " " + arg
		else:
			s = arg
	message = s
	try: # get the function name from the call stack.
		f1 = sys._getframe(1) # The stack frame, one level up.
		code1 = f1.f_code # The code object
		name = code1.co_name # The code name
	except: name = ""
	if name == "?":
		name = "&lt;unknown&gt;"

	if callers:
		traceback.print_stack()
		
	if 1: # Print all traces.
		print name + ": " + message
	else: # Print only enabled traces.
		t = app.trace_list
		# tracepoint names starting with '-' must match exactly.
		minus = len(name) &gt; 0 and name[0] == '-'
		if minus: name = name[1:]
		if (not minus and '*' in t) or name.lower() in t:
			s = name + ": " + message
			print s # Traces _always_ get printed.</t>
<t tx="ekr.20031218072017.2318"># Convert all args to strings.
# Print if tracing for name has been enabled.

def trace_tag (name, *args):
	
	s = ""
	for arg in args:
		if type(arg) != type(""):
			arg = repr(arg)
		if len(s) &gt; 0:
			s = s + ", " + arg
		else:
			s = arg
	message = s

	t = app.trace_list
	# tracepoint names starting with '-' must match exactly.
	minus = len(name) &gt; 0 and name[0] == '-'
	if minus: name = name[1:]
	if (not minus and '*' in t) or name.lower() in t:
		s = name + ": " + message
		print s # Traces _always_ get printed.</t>
<t tx="ekr.20031218072017.2319"></t>
<t tx="ekr.20031218072017.2320"></t>
<t tx="ekr.20031218072017.2321"></t>
<t tx="ekr.20031218072017.2322"># This is the entry point to the write code.  root should be an @file vnode.

def write(self,root,nosentinels=false):
	
	# Remove any old tnodeList.
	if hasattr(root,"tnodeList"):
		# g.trace("removing tnodeList for " + `root`)
		delattr(root,"tnodeList")

	c = self.c
	self.sentinels = not nosentinels
	&lt;&lt; initialize &gt;&gt;
	try:
		&lt;&lt; open the file; return on error &gt;&gt;
		root.clearAllVisitedInTree() # 1/28/04: clear both vnode and tnode bits.
		&lt;&lt; write then entire @file tree &gt;&gt;
		self.closeWriteFile()
		if not nosentinels:
			self.warnAboutOrphandAndIgnoredNodes()
		&lt;&lt; finish writing &gt;&gt;
	except:
		self.handleWriteException()
</t>
<t tx="ekr.20031218072017.2323">self.errors = 0 # 9/26/02
c.setIvarsFromPrefs()
self.root = root
self.raw = false
c.endEditing() # Capture the current headline.</t>
<t tx="ekr.20031218072017.2324">if nosentinels:
	self.targetFileName = root.atNoSentinelsFileNodeName()
else:
	self.targetFileName = root.atFileNodeName()

ok = self.openWriteFile(root)
if not ok: return</t>
<t tx="ekr.20031218072017.2325">next = root.nodeAfterTree()

&lt;&lt; put all @first lines in root &gt;&gt;
&lt;&lt; write the derived file &gt;&gt;
&lt;&lt; put all @last lines in root &gt;&gt;

root.setVisited()</t>
<t tx="ekr.20031218072017.2326">@ Write any @first lines.  These lines are also converted to @verbatim lines, so the read logic simply ignores lines preceding the @+leo sentinel.
@c

s = root.v.t.bodyString
tag = "@first"
i = 0
while g.match(s,i,tag):
	i += len(tag)
	i = g.skip_ws(s,i)
	j = i
	i = g.skip_to_end_of_line(s,i)
	# 21-SEP-2002 DTHEIN: write @first line, whether empty or not
	line = s[j:i]
	self.putBuffered(line) ; self.onl()
	i = g.skip_nl(s,i)</t>
<t tx="ekr.20031218072017.2327">tag1 = "@+leo"

self.putOpenLeoSentinel(tag1)
self.putInitialComment()
self.putOpenNodeSentinel(root)
self.putBodyPart(root)
self.putCloseNodeSentinel(root)
self.putSentinel("@-leo")</t>
<t tx="ekr.20031218072017.2328">@ Write any @last lines.  These lines are also converted to @verbatim lines, so the read logic simply ignores lines following the @-leo sentinel.
@c

tag = "@last"
lines = string.split(root.v.t.bodyString,'\n')
n = len(lines) ; j = k = n - 1
# Don't write an empty last line.
if j &gt;= 0 and len(lines[j])==0:
	j = k = n - 2
# Scan backwards for @last directives.
while j &gt;= 0:
	line = lines[j]
	if g.match(line,0,tag): j -= 1
	else: break
# Write the @last lines.
for line in lines[j+1:k+1]:
	i = len(tag) ; i = g.skip_ws(line,i)
	self.putBuffered(line[i:]) ; self.onl()</t>
<t tx="ekr.20031218072017.2329"># 10/26/02: Always warn, even when language=="cweb"

next = root.nodeAfterTree()
v = root
while v and v != next:
	if not v.isVisited():
		self.writeError("Orphan node:  " + v.headString())
	if v.isAtIgnoreNode():
		self.writeError("@ignore node: " + v.headString())
	v = v.threadNext()
</t>
<t tx="ekr.20031218072017.2330">@ We set the orphan and dirty flags if there are problems writing the file to force Commands::write_LEO_file to write the tree to the .leo file.
@c

if self.errors &gt; 0 or self.root.isOrphan():
	root.setOrphan()
	root.setDirty() # 2/9/02: make _sure_ we try to rewrite this file.
	os.remove(self.outputFileName) # Delete the temp file.
	g.es("Not written: " + self.outputFileName)
else:
	root.clearOrphan()
	root.clearDirty()
	self.replaceTargetFileIfDifferent()</t>
<t tx="ekr.20031218072017.2331"></t>
<t tx="ekr.20031218072017.2332">print "hello" # Should not create a tnodeList!</t>
<t tx="ekr.20031218072017.2333">http://sourceforge.net/forum/message.php?msg_id=2321348
By: rodrigo_b

Traceback (most recent call last):
  File "/home/rodrigob/projets/leon/leo/leo-4.1-beta-5/src/leoCommands.py",
line 127, in doCommand
    command()
  File "/home/rodrigob/projets/leon/leo/leo-4.1-beta-5/src/leoCommands.py",
line 670, in importDerivedFile
    frame = self ; c = frame.c ; v = c.currentVnode()
AttributeError: Commands instance has no attribute 'c'

(Fixed)  change to c = self ; frame = c.frame

------------------

http://sourceforge.net/forum/message.php?msg_id=2321489
By: bwmulder

Exception in Tkinter callback
Traceback (most recent call last):
  File "C:\Python23\lib\lib-tk\Tkinter.py", line 1345, in __call__
    return self.func(*args)
  File "C:\bwm\ftproot\Cleo-4.1-beta-5\src\leoMenu.py", line 1056, in &lt;lambda&gt;
    callback = lambda f=frame,name=name:c.openRecentFile(name)
  File "C:\bwm\ftproot\Cleo-4.1-beta-5\src\leoCommands.py", line 576, in openRecentFile
    closeFlag = (
AttributeError: Commands instance has no attribute 'saved'

(Fixed) change c.saved to c.frame.saved
</t>
<t tx="ekr.20031218072017.2334"></t>
<t tx="ekr.20031218072017.2335">@nocolor

dragged ... the 'f' node onto the ... 'f' clone above it. The resultant tree has only two 'f' nodes, siblings, on it.  Everything else seems to have vanished.</t>
<t tx="ekr.20031218072017.2336">@ Important note: most hooks are created in the vnode callback routines, _not_ here.
</t>
<t tx="ekr.20031218072017.2337">def OnActivate (self,p,event=None):

	try:
		c = self.c ; gui = g.app.gui
		&lt;&lt; activate this window &gt;&gt;
	except:
		g.es_event_exception("activate tree")</t>
<t tx="ekr.20031218072017.2338">current = c.currentPosition()

if p == current:
	if self.active:
		self.editLabel(p)
	else:
		self.undimEditLabel()
		gui.set_focus(c,self.canvas) # Essential for proper editing.
else:
	self.select(p)
	if p.v.t.insertSpot != None: # 9/1/02
		c.frame.bodyCtrl.mark_set("insert",p.v.t.insertSpot)
		c.frame.bodyCtrl.see(p.v.t.insertSpot)
	else:
		c.frame.bodyCtrl.mark_set("insert","1.0")
	gui.set_focus(c,c.frame.bodyCtrl)

self.active = true</t>
<t tx="ekr.20031218072017.2339"># Called on click in box and double-click in headline.

def OnBoxClick (self,p):

	# Note: "boxclick" hooks handled by vnode callback routine.
	c = self.c ; gui = g.app.gui

	if p.isExpanded(): p.contract()
	else:              p.expand()

	self.active = true
	self.select(p)
	gui.set_focus(c,c.frame.bodyCtrl) # 7/12/03
	self.redraw()</t>
<t tx="ekr.20031218072017.2340">def OnDeactivate (self,event=None):
	
	"""Deactivate the tree pane, dimming any headline being edited."""

	tree = self ; c = self.c
	focus = g.app.gui.get_focus(c.frame)

	# Bug fix: 7/13/03: Only do this as needed.
	# Doing this on every click would interfere with the double-clicking.
	if not c.frame.log.hasFocus() and focus != c.frame.bodyCtrl:
		try:
			# g.trace(focus)
			tree.endEditLabel()
			tree.dimEditLabel()
		except:
			g.es_event_exception("deactivate tree")</t>
<t tx="ekr.20031218072017.2341">def findVnodeWithIconId (self,id):
	
	# Due to an old bug, id may be a tuple.
	try:
		return self.icon_id_dict.get(id[0])
	except:
		return self.icon_id_dict.get(id)
</t>
<t tx="ekr.20031218072017.2342">def OnContinueDrag(self,p,event):

	try:
		&lt;&lt; continue dragging &gt;&gt;
	except:
		g.es_event_exception("continue drag")</t>
<t tx="ekr.20031218072017.2343"># g.trace(p)
assert(p == self.drag_p)

canvas = self.canvas
frame = self.c.frame

if event:
	x,y = event.x,event.y
else:
	x,y = frame.top.winfo_pointerx(),frame.top.winfo_pointery()
	if x == -1 or y == -1: return # Stop the scrolling if we go outside the entire window.

if 0: # no longer used.
	canvas_x = canvas.canvasx(x)
	canvas_y = canvas.canvasy(y)
	id = self.canvas.find_closest(canvas_x,canvas_y)

# OnEndDrag() halts the scrolling by clearing self.drag_id when the mouse button goes up.
if self.drag_id: # This gets cleared by OnEndDrag()
	&lt;&lt; scroll the canvas as needed &gt;&gt;</t>
<t tx="ekr.20031218072017.2344"># Scroll the screen up or down one line if the cursor (y) is outside the canvas.
h = canvas.winfo_height()
if y &lt; 0 or y &gt; h:
	lo, hi = frame.treeBar.get()
	n = self.savedNumberOfVisibleNodes
	line_frac = 1.0 / float(n)
	frac = g.choose(y &lt; 0, lo - line_frac, lo + line_frac)
	frac = min(frac,1.0)
	frac = max(frac,0.0)
	# g.es("lo,hi,frac:" + `lo` + " " + `hi` + " " + `frac`)
	canvas.yview("moveto", frac)
	
	# Queue up another event to keep scrolling while the cursor is outside the canvas.
	lo, hi = frame.treeBar.get()
	if (y &lt; 0 and lo &gt; 0.1) or (y &gt; h and hi &lt; 0.9):
		canvas.after_idle(self.OnContinueDrag,p,None) # Don't propagate the event.</t>
<t tx="ekr.20031218072017.2345"># This works around an apparent Tk bug.

def OnControlT (self,event=None):

	# If we don't inhibit further processing the Tx.Text widget switches characters!
	return "break"</t>
<t tx="ekr.20031218072017.2346">def OnIconClick (self,p,event):
	
	p = p.copy() # Make sure callbacks use the _present_ position.

	tree = self ; canvas = tree.canvas
	if event:
		canvas_x = canvas.canvasx(event.x)
		canvas_y = canvas.canvasy(event.y)
		id = canvas.find_closest(canvas_x,canvas_y)
		if id != None:
			try: id = id[0]
			except: pass
			self.drag_p = p
			self.drag_id = id
			
			# Create the bindings.
			id4 = canvas.tag_bind(id,"&lt;B1-Motion&gt;", p.OnDrag)
			id5 = canvas.tag_bind(id,"&lt;Any-ButtonRelease-1&gt;", p.OnEndDrag)
			
			# Remember the bindings so deleteBindings can delete them.
			self.tagBindings.append((id,id4,"&lt;B1-Motion&gt;"),)
			self.tagBindings.append((id,id5,"&lt;Any-ButtonRelease-1&gt;"),)
	tree.select(p)
	
def OnIconRightClick (self,p,event):

	self.select(p)</t>
<t tx="ekr.20031218072017.2348">def OnPopup (self,p,event):
	
	"""Handle right-clicks in the outline."""
	
	# Note: "headrclick" hooks handled by vnode callback routine.

	if event != None:
		c = self.c
		if not g.doHook("create-popup-menu",c=c,v=v,event=event):
			self.createPopupMenu(event)
		if not g.doHook("enable-popup-menu-items",c=c,v=v,event=event):
			self.enablePopupMenuItems(v,event)
		if not g.doHook("show-popup-menu",c=c,v=v,event=event):
			self.showPopupMenu(event)

	return "break"</t>
<t tx="ekr.20031218072017.2349">@ On Linux we must do something special to make the popup menu "unpost" if the mouse is clicked elsewhere.  So we have to catch the &lt;FocusOut&gt; event and explicitly unpost.  In order to process the &lt;FocusOut&gt; event, we need to be able to find the reference to the popup window again, so this needs to be an attribute of the tree object; hence, "self.popupMenu".

Aside: though Tk tries to be muli-platform, the interaction with different window managers does cause small differences that will need to be compensated by system specific application code. :-(
@c

# 20-SEP-2002 DTHEIN: This event handler is only needed for Linux.

def OnPopupFocusLost(self,event=None):

	self.popupMenu.unpost()
	
</t>
<t tx="ekr.20031218072017.2350">def enablePopupMenuItems (self,v,event):
	
	"""Enable and disable items in the popup menu."""
	
	c = self.c ; menu = self.popupMenu

	&lt;&lt; set isAtRoot and isAtFile if v's tree contains @root or @file nodes &gt;&gt;
	isAtFile = g.choose(isAtFile,1,0)
	isAtRoot = g.choose(isAtRoot,1,0)
	canContract = v.parent() != None
	canContract = g.choose(canContract,1,0)
	
	enable = self.frame.menu.enableMenu
	
	for name in ("Read @file Nodes", "Write @file Nodes"):
		enable(menu,name,isAtFile)
	for name in ("Tangle", "Untangle"):
		enable(menu,name,isAtRoot)

	enable(menu,"Cut Node",c.canCutOutline())
	enable(menu,"Delete Node",c.canDeleteHeadline())
	enable(menu,"Paste Node",c.canPasteOutline())
	enable(menu,"Sort Children",c.canSortChildren())
	enable(menu,"Sort Siblings",c.canSortSiblings())
	enable(menu,"Contract Parent",c.canContractParent())</t>
<t tx="ekr.20031218072017.2351">isAtFile = false
isAtRoot = false

for v2 in v.subtree_iter():
	if isAtFile and isAtRoot:
		break
	if (v2.isAtFileNode() or
		v2.isAtRawFileNode() or
		v2.isAtSilentFileNode() or
		v2.isAtNoSentinelsFileNode()
	):
		isAtFile = true
		
	isRoot,junk = g.is_special(v2.bodyString(),0,"@root")
	if isRoot:
		isAtRoot = true</t>
<t tx="ekr.20031218072017.2352">def showPopupMenu (self,event):
	
	"""Show a popup menu."""
	
	c = self.c ; menu = self.popupMenu ; gui = g.app.gui

	if sys.platform == "linux2": # 20-SEP-2002 DTHEIN: not needed for Windows
		menu.bind("&lt;FocusOut&gt;",self.OnPopupFocusLost)
	
	menu.post(event.x_root, event.y_root)

	# Make certain we have focus so we know when we lose it.
	# I think this is OK for all OSes.
	gui.set_focus(c,menu)</t>
<t tx="ekr.20031218072017.2353">def dragAfter(self,v,after):

	c = self
	if not c.checkMoveWithParentWithWarning(v,after.parent(),true): return
	# Remember both the before state and the after state for undo/redo
	oldBack = v.back()
	oldParent = v.parent()
	oldN = v.childIndex()
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		# v.setDirty()
		v.setAllAncestorAtFileNodesDirty() # 1/12/04
		v.moveAfter(after)
		c.undoer.setUndoParams("Drag",v,
			oldBack=oldBack,oldParent=oldParent,oldN=oldN)
		# v.setDirty()
		v.setAllAncestorAtFileNodesDirty() # 1/12/04
		c.selectVnode(v)
		c.setChanged(true)
	c.endUpdate()
	c.updateSyntaxColorer(v) # Dragging can change syntax coloring.</t>
<t tx="ekr.20031218072017.2354"># Used by scripts

def moveAfter (self,a):

	"""Moves the receiver after a"""

	v = self ; c = self.c

	v.unlink()
	v.linkAfter(a)
	
	# Moving a node after another node can create a new root node.
	if not a.parent() and not a.back():
		c.frame.tree.setRootVnode(a)</t>
<t tx="ekr.20031218072017.2355">def linkAfter (self,v):

	"""Link self after v."""
	
	self._parent = v._parent
	self._back = v
	self._next = v._next
	v._next = self
	if self._next:
		self._next._back = self</t>
<t tx="ekr.20031218072017.2356"></t>
<t tx="ekr.20031218072017.2357">The set font dialog would only come up once.</t>
<t tx="ekr.20031218072017.2358">def bringToFront (self):
	
	"""Bring the tkinter Font Panel to the front."""
	
	self.top.deiconify()
	self.top.lift()</t>
<t tx="ekr.20031218072017.2359"></t>
<t tx="ekr.20031218072017.2360">@color
@language python

@ 
some snap code
@others
more snap code
@c

@nocolor

in the output file "more snap code" will be NOT commented, but in Leo that line will appear as a red comment line.
I do not know which is the "correct behaviour" but the colorizer should be consisten with it.
</t>
<t tx="ekr.20031218072017.2361"></t>
<t tx="ekr.20031218072017.2362">@nocolor

The 4.0.x paste code (and all previous versions) may be buggy: pasted nodes can share tnodes.  This never happens when cutting and pasting in the same outline, because the indices are reassigned when _cutting_.

I believe the 4.1 code is presently correct.  In any event, there is no way to fix 4.0.4 now: it must be withdrawn.

12/8/03: finishPaste now recomputes all join links and sets clone marks correctly.

</t>
<t tx="ekr.20031218072017.2363">@nocolor

http://sourceforge.net/forum/message.php?msg_id=2285457
By: billp9619

Assume a node with two child clones representing the same T node.

If I paste this somewhere else in the outline the clones are maintained as clones
...except they now associate with a new T node.

This makes sense since the clipboard might not be from the current outline and
there would be the possibility of pasting a clone into itself, etc.

BUG: The pasted clones do not get a red symbol identifying them as
clones. If I save and reload the outline then the red clone symbols appear.
This is the behavior of both 4.0.3 and 4.1.</t>
<t tx="ekr.20031218072017.2364">@nocolor

Tonight Leo 4.0 erased my LeoN.leo project !

Yesterday I started the port of LeoN from Leo3.12 to Leo4.1 (previous beta seemed too much inmatures to start such work). Working on new adaptation I required to copy some nodes of the Leo4.1 code to the LeoN outline.

When doing such copy-paste an error raised during the paste (something about node attributes) and the pasted outline give a tree of empty nodes. I deleted this failed paste nodes, saved the project and quited to open LeoN.leo with Leo4.1. When I opened it with Leo4.1 Horror ! all the LeoN project had disapeared, and the only nodes in LeoN.leo where, the outline that I just tried to paste (the nodes where non empty this time). Frightened, I quited and checked the LeoN.leo file size, all the data was lost.

The Leo version I'm using commonly is:
Leo 4.0.4, build  1.100 , October 29, 2003
Python 2.3.2, Tk 8.4.4

is very stable and I had no problem working with it in LeoN. This is the first oops that I get.&lt;br /&gt;

** It happened when I pasted an outline of Leo4.1 to Leo4.0.

I do not know if this is a particular error, a backward problem or anything. I jusst wanted to point that:

- thanks Edward for keeping fat .leo files AND keeping always the @file nodes syncronised.

- I know that this error is a strange condition (backward copy/paste), but I do not understand why the Visual Output was fine, but Leo saved a totally different outline.

- Please enforce checks and safety during copy/paste operations. If I had a project in a pure Leo outline (no @file outputs) this issue would have been fatal.</t>
<t tx="ekr.20031218072017.2365"></t>
<t tx="ekr.20031218072017.2366"></t>
<t tx="ekr.20031218072017.2367"># Only a double-quote is a valid string in html.</t>
<t tx="ekr.20031218072017.2368"># Set defaults from the public globals set by the @comment command.
if self.single_comment_string:
	self.sentinel = self.single_comment_string
	self.sentinel_end = None
elif self.end_comment_string:
	self.sentinel = self.start_comment_string
	self.sentinel_end = self.end_comment_string
else:
	self.sentinel = self.sentinel_end = None
	
if 0:
	g.trace("single,start,end,sentinel:"+
		`self.single_comment_string` +":"+ `self.start_comment_string` +":"+
		`self.end_comment_string` +":"+ `self.sentinel`)

# Set defaults.  See set_delims_from_langauge.
self.line_comment = self.single_comment_string
self.comment = self.start_comment_string
self.comment_end = self.end_comment_string
self.comment2 = self.comment2_end = None
self.string1 = "\""
self.string2 = "'"
self.verbatim = None

# Set special cases.
if self.language == "plain":
	self.string1 = self.string2 = None # This is debatable.
	self.line_comment = None
if self.language == "pascal":
	self.comment2 = "(*" ; self.comment2_end = "*)"
if self.language == "latex": # 3/10/03: Joo-won Jung
	self.string1 = self.string2 = None # This is debatable.
if self.language == "html":
	self.string1 = '"' ; self.string2 = None # 12/3/03</t>
<t tx="ekr.20031218072017.2369">def skip_string(s,i):
	
	j = i ; delim = s[i] ; i += 1
	assert(delim == '"' or delim == '\'')
	
	n = len(s)
	while i &lt; n and s[i] != delim:
		if s[i] == '\\' : i += 2
		else: i += 1

	if i &gt;= n:
		g.scanError("Run on string: " + s[j:i])
	elif s[i] == delim:
		i += 1

	# g.trace(s[j:i])
	return i
</t>
<t tx="ekr.20031218072017.2370"></t>
<t tx="ekr.20031218072017.2371">@nocolor

It turns out that this bug has existed since at least 3.12.  I solved it by brute force: I removed the call to focus_displayof in set_focus.</t>
<t tx="ekr.20031218072017.2372">@nocolor

Leo functions perfectly normally.  When the File menu is activated,
we get the output below to standard error.  I would not usually see
this, since I usually invoke Leo from a button on the task bar.

This only happens on some machines, and only when bringing up the menu with Alt-F.

#----- activate File menu --------------------------------------------------
Exception in Tkinter callback
Traceback (most recent call last):
  File "/usr/lib/python2.2/lib-tk/Tkinter.py", line 1316, in __call__
    return apply(self.func, args)
  File "/usr/lib/python2.2/lib-tk/Tkinter.py", line 436, in callit
    apply(func, args)
  File "leoTkinterTree.py", line 438, in idle_redraw
    self.drawTopTree()
  File "leoTkinterTree.py", line 723, in drawTopTree
    self.drawTree(self.rootVnode(),root_left,root_top,0,0)
  File "leoTkinterTree.py", line 733, in drawTree
    h = self.drawNode(v,x,y)
  File "leoTkinterTree.py", line 622, in drawNode
    return self.force_draw_node(v,x,y)
  File "leoTkinterTree.py", line 632, in force_draw_node
    text_height = self.drawText(v,x+box_width+icon_width,y)
  File "leoTkinterTree.py", line 656, in drawText
    self.setNormalLabelState(v)
  File "leoTkinterTree.py", line 1867, in setNormalLabelState
    app.gui.set_focus(self.c,v.edit_text())
  File "leoTkinterGui.py", line 365, in set_focus
    focus = c.frame.top.focus_displayof()
  File "/usr/lib/python2.2/lib-tk/Tkinter.py", line 393, in focus_displayof
    return self._nametowidget(name)
  File "/usr/lib/python2.2/lib-tk/Tkinter.py", line 987, in nametowidget
    w = w.children[name]
KeyError: #135503820#139072620
#----- activate File menu --------------------------------------------------</t>
<t tx="ekr.20031218072017.2373">def set_focus(self,c,widget):
	
	"""Set the focus of the widget in the given commander if it needs to be changed."""
	
	# g.trace(c)
	
	if widget:
		widget.focus_set()
	
	if 0: # Causes a weird problem on some machines.
		if c.frame.top:
			focus = c.frame.top.focus_displayof()
			if focus != widget:
				widget.focus_set()</t>
<t tx="ekr.20031218072017.2374"></t>
<t tx="ekr.20031218072017.2375">@nocolor

http://sourceforge.net/forum/message.php?msg_id=2330580
By: dsalomoni

1) launch leo, write something and save as test.leo
2) quit
3) launch leo, go to recent files, the first item is correcly test.leo, plus
there are other items pointing to spurious leo files
(C:\prog\leoCVS\leo\src\LeoPy.leo etc -- I'm on linux). Anyway, loading test.leo
from the recent files menu generates the following traceback:

Exception in Tkinter callback
Traceback (most recent call last):
  File "/localstore/computer/local/lib/python2.3/lib-tk/Tkinter.py", line 1345, in __call__
    return self.func(*args)
  File "/user/davides/Software/leocvs/leo/src/leoMenu.py", line 1057, in callback
    c.openRecentFile(name)
  File "/user/davides/Software/leocvs/leo/src/leoCommands.py", line 588, in openRecentFile
    app.destroyWindow(self)
  File "/user/davides/Software/leocvs/leo/src/leoApp.py", line 248, in destroyWindow
    app.windowList.remove(frame)
ValueError: list.remove(x): x not in list

The problem does not occur if I load test.leo from File-&gt;Open.
This in on linux, python 2.3.

Davide
</t>
<t tx="ekr.20031218072017.2376"></t>
<t tx="ekr.20031218072017.2377">def getSelectionLines (self):
	
	"""Return before,sel,after where:
		
	before is the all lines before the selected text
	(or the text before the insert point if no selection)
	sel is the selected text (or "" if no selection)
	after is all lines after the selected text
	(or the text after the insert point if no selection)"""
	
	# At present, called only by c.getBodyLines.

	t = self.bodyCtrl
	sel_index = t.tag_ranges("sel") 
	if len(sel_index) != 2:
		if 1: # Choose the insert line.
			index = t.index("insert")
			sel_index = index,index
		else:
			return "","","" # Choose everything.

	i,j = sel_index
	i = t.index(i + "linestart")
	j = t.index(j + "lineend") # 10/24/03: -1c  # 11/4/03: no -1c.
	before = g.toUnicode(t.get("1.0",i),g.app.tkEncoding)
	sel    = g.toUnicode(t.get(i,j),    g.app.tkEncoding)
	after  = g.toUnicode(t.get(j,"end-1c"),g.app.tkEncoding)
	
	# g.trace(i,j)
	return before,sel,after</t>
<t tx="ekr.20031218072017.2378"></t>
<t tx="ekr.20031218072017.2379">@nocolor

In retrospect, the tnodeList should have been in at.root.t, not at.root.  Alas, it is too late to change this cleanly now.

Please note: findChild will call readError in this case, so we will revert to the outline info and no great harm will be done.

Also, it may be that the entire 4.x read logic might be replaced by Bernhard's "no-sentinel" scheme, in which case:

a) The sentinel scheme used _does not matter_ (provided Leo can read it)
b) Leo might as well use child indices (and the 3.x read scheme) and eliminate the tnodeList entirely!</t>
<t tx="ekr.20031218072017.2380"></t>
<t tx="ekr.20031218072017.2381"></t>
<t tx="ekr.20031218072017.2382"></t>
<t tx="ekr.20031218072017.2383">@nocolor

http://sourceforge.net/forum/message.php?msg_id=2330944
By: rodrigo_b

Now that unittests are ongoing some interfaces and concepts are being fixed.

Using Leo for other one project study and ordering, I have be dissapointed to
see that during "import to @file" the docustring of the class definitions are
put in the subnode "class X declarations" (or something like that). The class
node being almost void "class X():\n @others".

I consider that the class docustring should be keept in the class node, not
in another subnode.
</t>
<t tx="ekr.20031218072017.2384"># Doing this automatically should avoid confusion.</t>
<t tx="ekr.20031218072017.2385"></t>
<t tx="ekr.20031218072017.2386">3) open a leo file with the default settings. Font size is 9. Open Edit-&gt;Set Font, write "12" in the size block and select e.g. body, log, headline. Click on OK: nothing happens, and the log window reports

body font:courier,9,roman,normal
log font:courier,9,roman,normal
headline font:courier,9,roman,normal

You would expect the font to change to 12 instead. Actually, next time you open the font window, the font size is declared to be 12, although in reality it is still 9.

OTOH, if you click on "Apply" and not on OK, the font size gets correctly set to 12.</t>
<t tx="ekr.20031218072017.2387">@ Once a directive is seen, no other related directives in nodes further up the tree have any effect.  For example, if an @color directive is seen in node p, no @color or @nocolor directives are examined in any ancestor of p.

This code is similar to Commands::scanAllDirectives, but it has been modified for use by the atFile class.
@c

def scanAllDirectives(self,p,scripting=false,importing=false):
	
	"""Scan position p and p's ancestors looking for directives,
	setting corresponding atFile ivars.
	"""

	c = self.c
	&lt;&lt; Set ivars &gt;&gt;
	&lt;&lt; Set path from @file node &gt;&gt;
	old = {}
	for p in p.self_and_parents_iter():
		s = p.v.t.bodyString
		dict = g.get_directives_dict(s)
		&lt;&lt; Test for @path &gt;&gt;
		&lt;&lt; Test for @encoding &gt;&gt;
		&lt;&lt; Test for @comment and @language &gt;&gt;
		&lt;&lt; Test for @header and @noheader &gt;&gt;
		&lt;&lt; Test for @lineending &gt;&gt;
		&lt;&lt; Test for @pagewidth &gt;&gt;
		&lt;&lt; Test for @tabwidth &gt;&gt;
		old.update(dict)
	&lt;&lt; Set current directory &gt;&gt;
	if not importing:
		&lt;&lt; Set comment Strings from delims &gt;&gt;</t>
<t tx="ekr.20031218072017.2388">self.page_width = self.c.page_width
self.tab_width  = self.c.tab_width

self.default_directory = None # 8/2: will be set later.

delim1, delim2, delim3 = g.set_delims_from_language(c.target_language)
self.language = c.target_language

self.encoding = g.app.config.default_derived_file_encoding
self.output_newline = g.getOutputNewline() # 4/24/03: initialize from config settings.</t>
<t tx="ekr.20031218072017.2389"># An absolute path in an @file node over-rides everything else.
# A relative path gets appended to the relative path by the open logic.

if p.isAtFileNode():
	name = p.atFileNodeName()
elif p.isAtRawFileNode():
	name = p.atRawFileNodeName()
elif p.isAtNoSentinelsFileNode():
	name = p.atNoSentinelsFileNodeName()
else:
	name = ""

dir = g.choose(name,g.os_path_dirname(name),None)

if dir and len(dir) &gt; 0 and g.os_path_isabs(dir):
	if g.os_path_exists(dir):
		self.default_directory = dir
	else: # 9/25/02
		self.default_directory = g.makeAllNonExistentDirectories(dir)
		if not self.default_directory:
			self.error("Directory \"" + dir + "\" does not exist")
			
</t>
<t tx="ekr.20031218072017.2390"># 10/17/02: @language and @comment may coexist in @file trees.
# For this to be effective the @comment directive should follow the @language directive.

if not old.has_key("comment") and dict.has_key("comment"):
	k = dict["comment"]
	# 11/14/02: Similar to fix below.
	delim1, delim2, delim3 = g.set_delims_from_string(s[k:])

# Reversion fix: 12/06/02: We must use elif here, not if.
elif not old.has_key("language") and dict.has_key("language"):
	k = dict["language"]
	# 11/14/02: Fix bug reported by J.M.Gilligan.
	self.language,delim1,delim2,delim3 = g.set_language(s,k)</t>
<t tx="ekr.20031218072017.2391">if not old.has_key("encoding") and dict.has_key("encoding"):
	
	e = g.scanAtEncodingDirective(s,dict)
	if e:
		self.encoding = e</t>
<t tx="ekr.20031218072017.2392"># EKR: 10/10/02: perform the sames checks done by tangle.scanAllDirectives.
if dict.has_key("header") and dict.has_key("noheader"):
	g.es("conflicting @header and @noheader directives")</t>
<t tx="ekr.20031218072017.2393">if not old.has_key("lineending") and dict.has_key("lineending"):
	
	lineending = g.scanAtLineendingDirective(s,dict)
	if lineending:
		self.output_newline = lineending
</t>
<t tx="ekr.20031218072017.2394"># We set the current director to a path so future writes will go to that directory.

if not self.default_directory and not old.has_key("path") and dict.has_key("path"):

	k = dict["path"]
	&lt;&lt; compute relative path from s[k:] &gt;&gt;
	if path and len(path) &gt; 0:
		base = g.getBaseDirectory() # returns "" on error.
		path = g.os_path_join(base,path)
		if g.os_path_isabs(path):
			&lt;&lt; handle absolute path &gt;&gt;
		else:
			self.error("ignoring bad @path: " + path)
	else:
		self.error("ignoring empty @path")</t>
<t tx="ekr.20031218072017.2395">j = i = k + len("@path")
i = g.skip_to_end_of_line(s,i)
path = string.strip(s[j:i])

# Remove leading and trailing delims if they exist.
if len(path) &gt; 2 and (
	(path[0]=='&lt;' and path[-1] == '&gt;') or
	(path[0]=='"' and path[-1] == '"') ):
	path = path[1:-1]
path = path.strip()

if 0: # 11/14/02: we want a _relative_ path, not an absolute path.
	path = g.os_path_join(g.app.loadDir,path)</t>
<t tx="ekr.20031218072017.2396"># path is an absolute path.

if g.os_path_exists(path):
	self.default_directory = path
else: # 9/25/02
	self.default_directory = g.makeAllNonExistentDirectories(path)
	if not self.default_directory:
		self.error("invalid @path: " + path)
</t>
<t tx="ekr.20031218072017.2397">if dict.has_key("pagewidth") and not old.has_key("pagewidth"):
	
	w = g.scanAtPagewidthDirective(s,dict,issue_error_flag=true)
	if w and w &gt; 0:
		self.page_width = w</t>
<t tx="ekr.20031218072017.2398">if dict.has_key("tabwidth") and not old.has_key("tabwidth"):
	
	w = g.scanAtTabwidthDirective(s,dict,issue_error_flag=true)
	if w and w != 0:
		self.tab_width = w

</t>
<t tx="ekr.20031218072017.2399"># This code is executed if no valid absolute path was specified in the @file node or in an @path directive.

if c.frame and not self.default_directory:
	base = g.getBaseDirectory() # returns "" on error.
	for dir in (c.tangle_directory,c.frame.openDirectory,c.openDirectory):
		if dir and len(dir) &gt; 0:
			dir = g.os_path_join(base,dir)
			if g.os_path_isabs(dir): # Errors may result in relative or invalid path.
				if g.os_path_exists(dir):
					self.default_directory = dir ; break
				else: # 9/25/02
					self.default_directory = g.makeAllNonExistentDirectories(dir)

if not self.default_directory and not scripting:
	# This should never happen: c.openDirectory should be a good last resort.
	self.error("No absolute directory specified anywhere.")
	self.default_directory = ""</t>
<t tx="ekr.20031218072017.2400"># Use single-line comments if we have a choice.
# 8/2/01: delim1,delim2,delim3 now correspond to line,start,end
if delim1:
	self.startSentinelComment = delim1
	self.endSentinelComment = "" # Must not be None.
elif delim2 and delim3:
	self.startSentinelComment = delim2
	self.endSentinelComment = delim3
else: # Emergency!
	# assert(0)
	g.es("Unknown language: using Python comment delimiters")
	g.es("c.target_language:"+`c.target_language`)
	g.es("delim1,delim2,delim3:" + `delim1`+":"+`delim2`+":"+`delim3`)
	self.startSentinelComment = "#" # This should never happen!
	self.endSentinelComment = ""</t>
<t tx="ekr.20031218072017.2401"></t>
<t tx="ekr.20031218072017.2402"></t>
<t tx="ekr.20031218072017.2403">@nocolor

&gt; leoConfig.leo/.txt now set the size of the body font to None, which kicks in the defaults of 12 for Linux and 9 elsewhere.

Excellent! Could you do the same for the log and the headline panes as well? (I've just downloaded rc1 from the files section and only sets None for the body pane)
</t>
<t tx="ekr.20031218072017.2404">@ This contains only the "interesting" defaults.
Ints and bools default to 0, floats to 0.0 and strings to "".
@c

defaultBodyFontSize = g.choose(sys.platform=="win32",9,12)
defaultLogFontSize  = g.choose(sys.platform=="win32",8,12)
defaultTreeFontSize = g.choose(sys.platform=="win32",9,12)

defaultsDict = {
	# compare options...
	"ignore_blank_lines" : 1,
	"limit_count" : 9,
	"print_mismatching_lines" : 1,
	"print_trailing_lines" : 1,
	# find/change options...
	"search_body" : 1,
	"whole_word" : 1,
	# Prefs panel.
	"default_target_language" : "Python",
	"tab_width" : 4,
	"page_width" : 132,
	"output_doc_chunks" : 1,
	"tangle_outputs_header" : 1,
	# Syntax coloring options...
	# Defaults for colors are handled by leoColor.py.
	"color_directives_in_plain_text" : 1,
	"underline_undefined_section_names" : 1,
	# Window options...
	"allow_clone_drags" : 1,
	"body_pane_wraps" : 1,
	"body_text_font_family" : "Courier",
	"body_text_font_size" : defaultBodyFontSize,
	"body_text_font_slant" : "roman",
	"body_text_font_weight" : "normal",
	"enable_drag_messages" : 1,
	"headline_text_font_size" : defaultTreeFontSize,
	"headline_text_font_slant" : "roman",
	"headline_text_font_weight" : "normal",
	"log_text_font_size" : defaultLogFontSize,
	"log_text_font_slant" : "roman",
	"log_text_font_weight" : "normal",
	"initial_window_height" : 600, # 7/24/03: In pixels.
	"initial_window_width" :  800, # 7/24/03: In pixels.
	"initial_window_left" : 10,
	"initial_window_top" : 10,
	"initial_splitter_orientation" : "vertical",
	"initial_vertical_ratio" : 0.5,
	"initial_horizontal_ratio" : 0.3,
	"initial_horizontal_secondary_ratio" : 0.5,
	"initial_vertical_secondary_ratio" : 0.7,
	"outline_pane_scrolls_horizontally" : 0,
	"split_bar_color" : "LightSteelBlue2",
	"split_bar_relief" : "groove",
	"split_bar_width" : 7 }</t>
<t tx="ekr.20031218072017.2405">@nocolor

http://sourceforge.net/forum/message.php?msg_id=2337033
By: rodrigo_b

c.initAllCloneBitsInTree(v) worked as desired

@color

#test

from leoGlobals import *
top().frame.body.setTextSelection(None) # does not work at all

@nocolor

len(None) -&gt; len of a object without length, and the TkFrame method is void
if the argument is None.
I solved the issue playing with the bodyCtrl but I think you should take a look
to see if the setTextSelection methods do what you want them to do.

RodrigoB.</t>
<t tx="ekr.20031218072017.2406">@language python
@pagewidth 80

@ This section contains all the source code of leo.py.

Leo's code uses the following conventions throughout:

c:  a commander
ch: a character
d:  a dialog or a dict.
g:  the leoGlobal module.
i, j, k: indices into a string
lst: a list (Do _not_ use list, it is a Python global!)
p:  a position.
s:  a string
t:  a tnode or a text widget.
u:  an undoer
v:  a vnode

See the child of this node called "Overview of Code" for more documentation.
</t>
<t tx="ekr.20031218072017.2407">@nocolor
@ignore

This documentation describes leo.py. Other versions of Leo are similar in design; the differences between versions are generally not interesting enough to describe here.

All versions of Leo are organized as a collection of classes.  The general organization of Leo has remained remarkably stable throughout all versions of Leo, although the names of classes are different in different versions. Smalltalk's Model/View/Controller terminology is a good way to organize Leo's classes conceptually.

Model classes represent the fundamental data. The vnode and tnode classes are Leo's primary model classes.

View classes draw the screen. The main view classes are leoFrame.py and leoTree.py.  The colorizer class in leoColor.py handles syntax coloring in the body pane. In leo.py, the view classes know about data stored in the vnode class. Most events (keystrokes and mouse actions) in the outline and body pane are handled in the leoTree class. The leoFrame class also creates the Leo window, including menus, and dispatches the appropriate members of the controller classes in response to menu commands.

Controller classes (aka commanders) control the application. In Leo, controllers mostly handle menu commands. In leo.py, the Commands class creates subcommanders to handle complex commands. The atFile class reads and writes files derived from @file trees. The leoFind class handles the Find and Change commands. The leoImportCommands class handles the Import and Export commands, the tangleCommands class handles the Tangle and Untangle commands and the undoer class handles the Undo command. Other classes could be considered controller classes.

Each Leo window has its own commander and subcommanders. Subcommanders are not subclasses of their commander. Instead, subcommanders know the commander that created them, and call that commander as needed. Commanders and subcommanders call the model and view classes as needed. For example, the Commands class handles outline commands. To move a headline, the commander for the window calls a vnode move routine to alter the data, then calls the view class to redraw the screen based on the new data.

A global g.app represents the application itself. The ivars of the g.app object are the equivalent of Leo's global variables. leoGlobals.py defines all application constants and data structures.  Naturally, most constants are local to the class that uses them.

Several classes combine aspects of model, view and controller. For example, the LeoPrefs class represents user preferences (model), the Preference Panel (view) and the Preferences menu command (controller). Similarly, the leoFind class represents find settings, the Find/Change dialog, and the Find/Change commands.

The children of this node are clones of code-level documentation found throughout this code.</t>
<t tx="ekr.20031218072017.2408">@ This is the design document for clones in Leo. It covers all important aspects of clones. Clones are inherently complex, and this paper will include several different definitions of clones and related concepts.

The following is a definition of clones from the user's point of view.

Definition 1

A clone node is a copy of a node that changes when the original changes. Changes to the children, grandchildren, etc. of a node are simultaneously made to the corresponding nodes contained in all cloned nodes. Clones are marked by a small clone arrow by its leader character.

As we shall see, this definition glosses over a number of complications. Note that all cloned nodes (including the original node) are equivalent. There is no such thing as a "master" node from which all clones are derived. When the penultimate cloned node is deleted, the remaining node becomes an ordinary node again.

Internally, the clone arrow is represented by a clone bit in the status field of the vnode. The Clone Node command sets the clone bits of the original and cloned vnodes when it creates the clone. Setting and clearing clone bits properly when nodes are inserted, deleted or moved, is non-trivial. We need the following machinery to do the job properly.

Two vnodes are joined if a) they share the same tnode (body text) and b) changes to any subtree of either joined vnodes are made to the corresponding nodes in all joined nodes.  For example, Definition 1 defines clones as joined nodes that are marked with a clone arrow.  Leo links all vnodes joined to each other in a circular list, called the join list. For any vnode n, let J(n) denote the join list of n, that is, the set of all vnodes joined to n. Again, maintaining the join lists in an outline is non-trivial.

The concept of structurally similar nodes provides an effective way of determining when two joined nodes should also have their cloned bit set.  Two joined nodes are structurally similar if a) their parents are distinct but joined and b) they are both the nth child of their (distinct) parents.  We can define cloned nodes using the concept of structurally similar nodes as follows:

Definition 2

Clones are joined vnodes such that at least two of the vnodes of J(n) are not structurally similar to each other. Non-cloned vnodes are vnodes such that all of the vnodes of J(n) are structurally similar. In particular, n is a non-cloned vnode if J(n) is empty.

Leo ensures that definitions 1 and 2 are consistent. Definition 1 says that changes to the children, grandchildren, etc. of a node are simultaneously made to the corresponding nodes contained in all cloned nodes. Making "corresponding changes" to the non-cloned descendents of all cloned nodes insures that the non-cloned joined nodes will be structurally similar. On the other hand, cloned nodes are never structurally similar. They are created as siblings, so they have the same parent with different "child indices."  To see how this works in practice, let's look at some examples.

Example 1

+ root
	+ a' (1)
	+ a' (2)

This example shows the simplest possible clone. A prime (') indicates a cloned node.  Node a in position (1) has just been cloned to produce a' in position (2). Clearly, these two cloned nodes are not structurally similar because their parents are not distinct and they occupy different positions relative to their common parent.

Example 2

If we add a node b to either a' node we get the following tree:

+ root
	+ a'
		+ b
	+ a'
		+ b

The b nodes are structurally similar because the a' nodes are joined and each b node is the first child of its parent.

Example 3

If we now clone either b, we will get:

+ root
	+ a'
		+ b' (1)
		+ b' (2)
	+ a'
		+ b' (1)
		+ b' (2)

All b' nodes must be clones because the nodes marked (1) are not structurally similar to the nodes marked (2).

Dependent nodes are nodes created or destroyed when corresponding linked nodes are created or destroyed in another tree. For example, going from example 1 to example 2 above, adding node b to either node a' causes another (dependent) node to be created as the ancestor of the other node a'. Similarly, going from example 2 to example 1, deleting node b from either node a' causes the other (dependent) node b to be deleted from the other node a'.  Cloned nodes may also be dependent nodes. In Example 3, all the b' nodes are dependent on any of the other b' nodes.

We can now give simple rules for inserting and deleting dependent vnodes when other vnodes are created, moved or destroyed. For the purposes of this discussion, moving a node is handled exactly like deleting the node then inserting the node; we need not consider moving nodes further.  We insert a new node n as the nth child of a parent node p as follows. We insert n, then for every node pi linked to p, we insert a dependent node ni as the nth child of pi. Each ni is linked to n. Clearly, each ni is structurally similar to n.  Similarly, it is easy to delete a node n that is the nth child of a parent node p. We delete each dependent node ni that is the nth child of any node pi linked to p. We then delete n.  When inserting or deleting any vnode n we must update its join list, J(n). Updating the join list is easy because the join list is circular: the entire list is accessible from any of its members.

Inserting or deleting nodes can cause the clone bits of all joined nodes to change in non-trivial ways. To see the problems that can arise, consider deleting any of the b' nodes from Example 3. We would be left with the tree in Example 2. There are two remaining b nodes, each with the clone bit set. Unless we know that both b nodes are structurally similar, there would be no way to conclude that we should clear the clone bits in each node. In order to update clone links properly we could examine many special cases, but there is an easier way. Because of definition 2, we can define a shouldBeCloned function that checks J(n) to see whether all nodes of J(n) are structurally similar.

Leo's XML file format does not contain join lists. This makes it easy to change a Leo file "by hand." If join lists were a part of the file, as they are in the Mac version of Leo, corrupting a join list would corrupt the entire file. It is easy to recreate the join lists when reading a file using a dedicated field in the tnode.  This field is the head of a list of all vnodes that points to the tnode. After reading all nodes, Leo creates this list with one pass through the vnodes.  Leo then converts each list to a circular list with one additional pass through the tnodes.
</t>
<t tx="ekr.20031218072017.2409">@ Leo must redraw the outline pane when commands are executed and as the result of mouse and keyboard events.  The main challenges are eliminating flicker and handling events properly.

Eliminating flicker.  Leo must update the outline pane with minimum flicker.  Various versions of Leo have approached this problem in different ways.  The drawing code in leo.py is robust, flexible, relatively simple and should work in almost any conceivable environment.

Leo assumes that all code that changes the outline pane will be enclosed in matching calls to the c.beginUpdate and c.endUpdate  methods of the Commands class. c.beginUpdate() inhibits drawing until the matching c.endUpdate().  These calls may be nested; only the outermost call to c.endUpdate() calls c.redraw() to force a redraw of the outline pane.

In leo.py, code may call c.endUpdate(flag) instead of c.endUpdate().  Leo redraws the screen only if flag is true.  This allows code to suppress redrawing entirely when needed.  For example, study the idle_body_key event handler to see how Leo conditionally redraws the outline pane.

The leoTree class redraws all icons automatically when c.redraw() is called.  This is a major simplification compared to previous versions of Leo.  The entire machinery of drawing icons in the vnode class has been eliminated.  The v.computeIcon method tells what the icon should be.  The v.iconVal ivar that tells what the present icon is. The event handler simply compares these two values and sets redraw_flag if they don't match.</t>
<t tx="ekr.20031218072017.2410">@ Leo must handle events or commands that change the text in the outline or body panes.  It is surprisingly difficult to ensure that headline and body text corresponds to the vnode and tnode corresponding to presently selected outline, and vice versa. For example, when the user selects a new headline in the outline pane, we must ensure that 1) the vnode and tnode of the previously selected node have up-to-date information and 2) the body pane is loaded from the correct data in the corresponding tnode.

Early versions of Leo attempted to satisfy these conditions when the user switched outline nodes.  Such attempts never worked well; there were too many special cases.  Later versions of Leo, including leo.py, use a much more direct approach.  The event handlers make sure that the vnode and tnode corresponding to the presently selected node are always kept up-to-date.  In particular, every keystroke in the body pane causes the presently selected tnode to be updated immediately.  There is no longer any need for the c.synchVnode method.  (That method still exists for compatibility with old scripts.)

The leoTree class contains all the event handlers for the tree pane, and the leoBody class contains the event handlers for the body pane.  The actual work is done in the idle_head_key and idle_body_key methods.  These routines are surprisingly complex; they must handle all the tasks mentioned above, as well as others. The idle_head_key and idle_body_key methods should not be called outside their respective classes.  However, sometimes code in the Commands must simulate an event.  That is, the code needs to indicate that headline or body text has changed so that the screen may be redrawn properly.   The leoBody class defines the following simplified event handlers: onBodyChanged, onBodyWillChange and onBodyKey. Similarly, the leoTree class defines onHeadChanged and onHeadlineKey.  Commanders and subcommanders call these event handlers to indicate that a command has changed, or will change, the headline or body text.  Calling event handlers rather than c.beginUpdate and c.endUpdate ensures that the outline pane is redrawn only when needed.
</t>
<t tx="ekr.20031218072017.2411">@ The Tangle command translates the selected @root tree into one or more well-formatted C source files. The outline should contain directives, sections references and section definitions, as described in Chapter 4. The Untangle command is essentially the reverse of the Tangle command. The Tangle command creates a derived file from an @root tree; the Untangle command incorporates changes made to derived files back into the @root tree.

The Tangle command operates in two passes. The first pass discovers the complete definitions of all sections and places these definitions in a symbol table. The first pass also makes a list of root sections. Definitions can appear in any order, so we must scan the entire input file to know whether any particular definition has been completed.

Tangle's second pass creates one file for each @root node. Tangle rescans each section in the list of roots, copying the root text to the output and replacing each section reference by the section's definition. This is a recursive process because any definition may contain other references. We can not allow a section to be defined in terms of itself, either directly or indirectly. We check for such illegally recursive definitions in pass 2 using the section stack class.  Tangle indicates where sections begin and end using comment lines called sentinel lines.  The this part of the appendix discusses the format of the sentinels output by the Tangle command.

The key design principle of the Tangle command is this: Tangle must output newlines in a context-free manner. That is, Tangle must never output conditional newlines, either directly or indirectly. Without this rule Untangle could not determine whether to skip or copy newlines.

The Tangle command increases the indentation level of a section expansion the minimum necessary to align the section expansion with the surrounding code. In essence, this scheme aligns all section expansions with the line of code in which the reference to the section occurs. In some cases, several nested sections expansions will have the same indentation level. This can occur, for example, when a section reference in an outline occurs at the left margin of the outline.

This scheme is probably better than more obvious schemes that indent more "consistently." Such schemes would produce too much indentation for deeply nested outlines. The present scheme is clear enough and avoids indentation wherever possible, yet indents sections adequately. End sentinel lines make this scheme work by making clear where the expansion of one section ends and the expansion of a containing section resumes.

Tangle increases indentation if the section reference does not start a line. Untangle is aware of this hack and adjusts accordingly. This extra indentation handles several common code idioms, which otherwise would create under-indented code. In short, Tangle produces highly readable, given the necessity of preserving newlines for Untangle.

Untangle is inherently complex.  It must do a perfect job of updating the outline, especially whitespace, from expansions of section definitions created by the Tangle command.  Such expansions need not be identical because they may have been generated at different levels of indentation.  The Untangle command can not assume that all expansions of a section will be identical in the derived file; within the derived file, the programmer may have made incompatible changes to two different expansions of the same section. Untangle must check to see that all expansions of a section are "equivalent".  As an added complication, derived files do not contain all the information found in @root trees.  @root trees may contain headlines that generate no code at all.  Also, an outline may define a section in several ways: with an @c or @code directive or with a section definition line.  To be useful, Untangle must handle all these complications flawlessly. The appendix discusses the various conventions used in the sentinels output by the Tangle command.  These conventions allow the Untangle command to recreate whitespace correctly.

Untangle operates in two passes. The first pass finds definitions in the derived file and enters them into the Untangle Symbol Table, or UST.   Definitions often include references to other sections, so definitions often include nested definitions of referenced sections. The first pass of Untangle uses a definition stack to keep track of nested definitions. The top of the stack represents the definition following the latest reference, except for the very first entry pushed on the stack, which represents the code in the outline that contains the @root directive. The stack never becomes empty because of the entry for the @root section. All definitions of a section should match--otherwise there is an inconsistent definition. This pass uses a forgiving compare routine that ignores differences that do not affect the meaning of a program.

Untangle's second pass enters definitions from the outline into the Tangle Symbol Table, or TST. The second pass simultaneously updates all sections in the outline whose definition in the TST does not match the definition in the UST.  The central coding insight of the Untangle command is that the second pass of Untangle is almost identical to the first pass of Tangle! That is, Tangle and Untangle share key parts of code, namely the skip_body() method and its allies.  Just when skip_body() enters a definition into the symbol table, all the information is present that Untangle needs to update that definition.
</t>
<t tx="ekr.20031218072017.2412">@ The vnode and tnode classes represent most of the data contained in the outline. These classes are Leo's fundamental Model classes.

A vnode (visual node) represents a headline at a particular location on the screen. When a headline is cloned, vnodes must be copied. vnodes persist even if they are not drawn on the screen. Commanders call vnode routines to insert, delete and move headlines.

The vnode contains data associated with a headline, except the body text data which is contained in tnodes. A vnode contains headline text, a link to its tnode and other information. In leo.py, vnodes contain structure links: parent, firstChild, next and back ivars. To insert, delete, move or clone a vnode the vnode class just alters those links. The Commands class calls the leoTree class to redraw the outline pane whenever it changes. The leoTree class knows about these structure links; in effect, the leoTree and vnode classes work together. The implementation of vnodes is quite different in the Borland version of Leo. This does not affect the rest of the Leo. Indeed, vnodes are designed to shield Leo from such implementation details.

A tnode, (text node) represents body text: a tnode is shared by all vnodes that are clones of each other. In other words, tnodes are the unit of sharing of body text. The tnode class is more private than the vnode class. Most commanders deal only with vnodes, though there are exceptions.

Because leo.py has unlimited Undo commands, vnodes and tnodes can be deleted only when the window containing them is closed. Nodes are deleted indirectly.

Leo uses several kinds of node indices. Leo's XML file format uses tnode indices to indicate which tnodes (t elements) belong to which vnodes (v elements). Such indices are required. Even if we duplicated the body text of shared tnodes within the file, the file format would still need an unambiguous way to denote that tnodes are shared.

Present versions of Leo recompute these tnodes indices whenever Leo writes any .leo file. Earlier versions of Leo remembered tnode indices and rewrote the same indices whenever possible. Those versions of Leo recomputed indices when executing the Save As and Save To commands, so using these commands was a way of "compacting" indices. The main reason for not wanting to change tnode indices in .leo files was to reduce the number of changes reported by CVS and other Source Code Control Systems. I finally abandoned this goal in the interest of simplifying the code. Also, CVS will likely report many differences between two versions of the same .leo file, regardless of whether tnode indices are conserved.

A second kind of node index is the clone index used in @+node sentinels in files derived from @file trees. As with indices in .leo files, indices in derived files are required so that Leo can know unambiguously which nodes are cloned to each other.

It is imperative that clone indices be computed correctly, that is, that tnode @+node sentinels have the same index if and only if the corresponding vnodes are cloned. Early versions of leo.py had several bugs involving these clone indices. Such bugs are extremely serious because they corrupt the derived file and cause read errors when Leo reads the @file tree. Leo must guarantee that clone indices are always recomputed properly. This is not as simple as it might appear at first. In particular, Leo's commands must ensure that @file trees are marked dirty whenever any changed is made that affects cloned nodes within the tree. For example, a change made outside any @file tree may make several @file trees dirty if the change is made to a node with clones in those @file trees.
</t>
<t tx="ekr.20031218072017.2413">@ Only leo.py supports unlimited undo.  Unlimited undo is straightforward; it merely requires that all commands that affect the outline or body text must be undoable. In other words, everything that affects the outline or body text must be remembered.

We may think of all the actions that may be Undone or Redone as a string of beads (undo nodes). Undoing an operation moves backwards to the next bead; redoing an operation moves forwards to the next bead. A bead pointer points to the present bead. The bead pointer points in front of the first bead when Undo is disabled.  The bead pointer points at the last bead when Redo is disabled. An undo node is a Python dictionary containing all information needed to undo or redo the operation.

The Undo command uses the present bead to undo the action, then moves the bead pointer backwards. The Redo command uses the bead after the present bead to redo the action, then moves the bead pointer forwards. All undoable operations call setUndoParams() to create a new bead. The list of beads does not branch; all undoable operations (except the Undo and Redo commands themselves) delete any beads following the newly created bead.

I did not invent this model of unlimited undo.  I first came across it in the documentation for Apple's Yellow Box classes.
</t>
<t tx="ekr.20031218072017.2414">@ The find and change commands are tricky; there are many details that must be handled properly. This documentation describes the leo.py code. Previous versions of Leo used an inferior scheme.  The following principles govern the leoFind class:

1.	Find and Change commands initialize themselves using only the state of the present Leo window. In particular, the Find class must not save internal state information from one invocation to the next. This means that when the user changes the nodes, or selects new text in headline or body text, those changes will affect the next invocation of any Find or Change command. Failure to follow this principle caused all kinds of problems in the Borland and Macintosh codes. There is one exception to this rule: we must remember where interactive wrapped searches start. This principle simplifies the code because most ivars do not persist. However, each command must ensure that the Leo window is left in a state suitable for restarting the incremental (interactive) Find and Change commands. Details of initialization are discussed below.

2. The Find and Change commands must not change the state of the outline or body pane during execution. That would cause severe flashing and slow down the commands a great deal. In particular, c.selectVnode and c.editPosition methods must not be called while looking for matches.

3. When incremental Find or Change commands succeed they must leave the Leo window in the proper state to execute another incremental command. We restore the Leo window as it was on entry whenever an incremental search fails and after any Find All and Change All command.

Initialization involves setting the self.c, self.v, self.in_headline, self.wrapping and self.s_text ivars. Setting self.in_headline is tricky; we must be sure to retain the state of the outline pane until initialization is complete. Initializing the Find All and Change All commands is much easier because such initialization does not depend on the state of the Leo window.

Using Tk.Text widgets for both headlines and body text results in a huge simplification of the code. Indeed, the searching code does not know whether it is searching headline or body text. The search code knows only that self.s_text is a Tk.Text widget that contains the text to be searched or changed and the insert and sel Tk attributes of self.search_text indicate the range of text to be searched. Searching headline and body text simultaneously is complicated. The selectNextVnode() method handles the many details involved by setting self.s_text and its insert and sel attributes.
</t>
<t tx="ekr.20031218072017.2415">@language python
@ignore

@ This section contains scripts and other files for creating, testing and distributing leo.py.  leo.py itself does not use any of the code in these scripts, nor do these scripts use any code in leo.py.
@c

# To convert from C to Python, do the following from Leo's Python window:
import c2py
c2py.convertCurrentTree()

# To convert from Leo1 to Leo2, do the following from Leo's Python window:
import c2py
c2py.leo1to2()

@  To create a source distribution using Python's distutils:

On windows: do the following from inside a console window:
	cd c:\prog\LeoPy
	sdist

On Linux do the following:
	cd LeoPy
	python setup.py sdist --force-manifest --formats=gztar,zip</t>
<t tx="ekr.20031218072017.2416"># Note:  the initScriptFind script makes setting up Find/Change scripts very easy.</t>
<t tx="ekr.20031218072017.2417">def doChangeScript (self):

	g.app.searchDict["type"] = "change"
	self.runChangeScript()

def doChangeAllScript (self):

	"""The user has just pressed the Change All button with script-change box checked.

	N.B. Only this code is executed."""

	g.app.searchDict["type"] = "changeAll"
	while 1:
		self.runChangeScript()
		if not g.app.searchDict.get("continue"):
			break

def runChangeScript (self):

	c = self.c
	try:
		assert(c.script_change_flag) # 2/1/04
		exec c.change_text in {} # Use {} to get a pristine environment.
	except:
		g.es("exception executing change script")
		g.es_exception(full=false)
		g.app.searchDict["continue"] = false # 2/1/04</t>
<t tx="ekr.20031218072017.2418">def initScriptFind(findHeadline,changeHeadline=None,firstNode=None,
	script_search=true,script_change=true):
	
	import leoTest
	import leoGlobals as g
	from leoGlobals import true,false
	
	# Find the scripts.
	c = g.top() ; v = c.currentVnode()
	u = leoTest.testUtils()
	find_v = u.findNodeInTree(v,findHeadline)
	if find_v:
		find_text = find_v.bodyString()
	else:
		g.es("no Find script node",color="red")
		return
	if changeHeadline:
		change_v = u.findNodeInTree(v,changeHeadline)
	else:
		change_v = None
	if change_v:
		change_text = change_v.bodyString()
	else:
		change_text = ""
	# print `find_v`,`change_v`
	
	# Initialize the find panel.
	c.script_search_flag = script_search
	c.script_change_flag = script_change and change_text
	if script_search:
		c.find_text = find_text.strip() + "\n"
	else:
		c.find_text = find_text
	if script_change:
		c.change_text = change_text.strip() + "\n"
	else:
		c.change_text = change_text
	g.app.findFrame.init(c)
	c.findPanel()</t>
<t tx="ekr.20031218072017.2419"># Initialize Leo's find panel using the named children of this node.
import leoGlobals as g
from leoGlobals import true,false

g.app.searchDict = {} # Clear dict.get("v") logic.
g.initScriptFind("Find script","Change script")

c = g.top()
c.selectVnode(c.rootPosition())
c.redraw()</t>
<t tx="ekr.20031218072017.2420">import leoGlobals as g
from leoGlobals import true,false

c = g.top() ; v = c.currentVnode() ; d = g.app.searchDict
findAll = d.get("type") == "findAll"

if findAll and c.suboutline_only_flag:
	after = v.nodeAfterTree()
else:
	after = None

found = false ; count = 0
while v and v != after and not found:
	s = v.bodyString()
	lines = s.split('\n')
	for line in lines:
		if line and not line.strip():
			if findAll:
				g.es(v.headString()) ; count += 1
			else:
				c.frame.tree.expandAllAncestors(v)
				c.selectVnode(v)
				c.redraw() # Necessary to make the new node visible.
				if not findAll:
					g.es("found node with whitespace to clean")
				found = true 
			break
	v = v.threadNext()

if not found:
	if findAll:
		g.es("found %d nodes" % (count), color="blue")
	else:
		g.es("not found")
</t>
<t tx="ekr.20031218072017.2421">import leoGlobals as g
from leoGlobals import true,false

c = g.top() ; d = g.app.searchDict
changeAll = d.get("type") == "changeAll"
count = d.get("count",0)
if changeAll:
	v = d.get("v")
	if v:
		v = v.threadNext()
		after = d.get("after")
		if v == after: v = None
	else:
		v = c.currentVnode()
		d["count"] = 0
		after = g.choose(c.suboutline_only_flag,v.nodeAfterTree(),None)
		d["after"] = after
	d["v"] = v ; d["continue"] = v != None
else:
	v = c.currentVnode()

if v:
	s = oldText = v.bodyString()
	lines = s.split('\n')
	lines = [line.rstrip() for line in lines]
	s = '\n'.join(lines)
	if s != oldText:
		v.setBodyStringOrPane(s,encoding=g.app.tkEncoding)
		if changeAll:
			g.es(v.headString()) ; d["count"] = count + 1
		else:
			c.frame.body.onBodyChanged(v,"Change",oldText=oldText) # Handles undo.
			c.frame.body.setInsertPointToStartOfLine(0)
else:
	if changeAll:
		g.es("found %d nodes" % (count), color="blue")
	else:
		g.es("done")</t>
<t tx="ekr.20031218072017.2422"># Initialize Leo's find panel using the named children of this node.
import leoGlobals as g
from leoGlobals import true,false

g.app.searchDict = {} # Clear dict.get("v") logic.
g.initScriptFind("Find script","Change script")

# Start searching at the top.
c = g.top()
c.selectVnode(c.rootPosition())</t>
<t tx="ekr.20031218072017.2423">import leoGlobals as g
from leoGlobals import true,false

import re

docPart = re.compile("""^(@$|@ |@doc)(.*)$
^@c[ \t]*(.*?)$
^(def[ \t]*.*?:.*?)$
(.*)""", re.MULTILINE | re.DOTALL)

c = g.top() ; d = g.app.searchDict
v = c.currentVnode()
# Move past previously matched node.
last_v = d.get("v")
if last_v:
	if v == last_v: v = last_v.threadNext()
	d["v"] = None
d["m"] = None ; d["c"] = c
while v:
	m = docPart.match(v.bodyString())
	if m:
		d["m"] = m ; d["v"] = v
		c.frame.tree.expandAllAncestors(v)
		c.selectVnode(v)
		c.redraw() # Necessary to make the new node visible.
		break
	v = v.threadNext()
if not d.get("v"):
	g.es("no @doc part found",color="blue")</t>
<t tx="ekr.20031218072017.2424">import leoGlobals as g
from leoGlobals import true,false

def replaceDocPart(m,body):
	# Warning: m.group(0) is the _whole_ match.
	directive = m.group(1)
	doc = m.group(2)
	blanks = m.group(3).strip()
	if blanks: blanks += "\n\n"
	else: blanks = ""
	defLine = m.group(4)
	rest = m.group(5)
	docList = doc.split('\n')
	doc = string.join(docList,"\n\t")
	if body.hasTextSelection():  # If text is selected only that text becomes the doc part.
		sel = body.getSelectedText()
		i = doc.find(sel)
		if i &gt; -1:
			doc = doc[:i] + doc[i + len(sel):] # Remove selected text.
			return directive + doc.rstrip() + "\n@c\n\n" + defLine + '\n\n\t"""' + sel + '"""\n' + rest
		else:
			g.es("selection should be in @doc part")
			return None # This disables any replacement.
	else:
		return blanks + defLine + '\n\n\t"""' + doc.strip() + '"""\n' + rest
		
d = g.app.searchDict ; c = d.get("c") ; v = d.get("v") ; m = d.get("m")
if c and v and m:
	body = c.frame.body
	oldText = v.bodyString()
	s = replaceDocPart(m,body)
	if s: # Don't make a replacement if there was an error.
		v.setBodyStringOrPane(s,encoding=g.app.tkEncoding)
		body.onBodyChanged(v,"Change",oldText=oldText) # Handles undo.</t>
<t tx="ekr.20031218072017.2425">import leoGlobals as g
from leoGlobals import true,false
import re

s = """@doc line 0
line 1d
line 2
@c

# a comment

def abc(self): xx

after 1
after 2"""

pat = re.compile("""^(@$|@ |@doc)(.*?)$
^@c[ \t]*(.*?)$
^(def[ \t]*.*?:.*?)$
(.*)""", re.MULTILINE | re.DOTALL)

m = pat.match(s)
print "---"
if m:
	print "doc:   ", `m.group(2).strip()`
	print "blanks:", `m.group(3).strip()`
	print "def:   ", `m.group(4).strip()`
	print "rest:  ", `m.group(5).strip()`
else:
	print "no match"
</t>
<t tx="ekr.20031218072017.2426"># This script was a breakthrough.
# Executing this script initializes the Find text from the given script string.
# To do: get the script from a named child of this node.
import leoGlobals as g
from leoGlobals import true,false

script = """
import leoGlobals as g
from leoGlobals import true,false
c = g.top() ; v = c.currentVnode()
print `v`
v = v.threadNext()
c.selectVnode(v)"""

g.app.searchDict = {} # Communication between search &amp; change scripts
c = g.top()
c.script_search_flag = true
c.find_text = script
g.app.findFrame.init(c)
c.frame.OnFindPanel()</t>
<t tx="ekr.20031218072017.2427">if 0: # Script to change OnXxx to xxx in all headlines
	import leoGlobals as g
	from leoGlobals import true,false

	c = g.top() ; v = c.currentVnode()
	after = v.nodeAfterTree()
	while v and v != after:
		h = v.headString()
		if g.match(h,0,"On") and len(h) &gt; 2:
			h = h[2].lower() + h[3:]
			print h
			v.setHeadString(h)
		v = v.threadNext()
		
# Script to change OnXXX to xxx in all body text.
if 0:
	import leoGlobals as g
	from leoGlobals import true,false

	c = g.top() ; v = c.currentVnode()
	after = v.nodeAfterTree()
	while v and v != after:
		s = v.bodyString()
		if s:
			i = s.find("def ")
			if i &gt; -1:
				c = s[i+6].lower()
				s = s[:i] + "def " + c + s[i+7:]
				print v.headString()
				v.setBodyStringOrPane(s)
		v = v.threadNext()</t>
<t tx="ekr.20031218072017.2428"># Script to change OnXXX to xxx in all body text.
if 0:
	import leoGlobals as g
	from leoGlobals import true,false

	c = g.top() ; v = c.currentVnode()
	v = v.threadNext()
	after = v.nodeAfterTree()
	count = 0
	while v and v != after:
		while 1:
			s = v.bodyString()
			if not s: break
			i = s.find("c.On")
			if i == -1: break
			c = s[i+4].lower()
			s = s[:i] + 'c.' + c + s[i+5:]
			v.setBodyStringOrPane(s)
			count += 1
		v = v.threadNext()
	print count</t>
<t tx="ekr.20031218072017.2429">import leoGlobals as g
from leoGlobals import true,false

import leoTest

u = leoTest.testUtils()
nodes = 0 ; lines = 0
c = g.top()
c.clearAllVisited()
if 0:
	v = u.findNodeAnywhere(c,"Code")
else:
	root = u.findRootNode (c.currentVnode())
	v = u.findNodeInTree(root,"Code")

after = v.nodeAfterTree()
# g.trace(v,after)

while v and v != after:
	if not v.t.isVisited():
		v.t.setVisited()
		nodes += 1
		lines += len(g.splitLines(v.bodyString()))
	v = v.threadNext()
	
pages = ((nodes * 10) + lines) / 60
print "nodes,lines,pages",nodes,lines,pages
g.es("nodes,lines,pages",nodes,lines,pages)</t>
<t tx="ekr.20031218072017.2431"></t>
<t tx="ekr.20031218072017.2432">import leoGlobals as g
from leoGlobals import true,false

c = g.top()
v = c.rootVnode()
while v:
	# 12/13/03: Empty tnodeLists are not errors because they never get written to the .leo file.
	if hasattr(v,"tnodeList") and len(v.tnodeList) &gt; 0 and not v.isAnyAtFileNode():
		g.es("deleting tnodeList for " + `v`,color="blue")
		delattr(v,"tnodeList")
		c.setChanged(true)
	v = v.threadNext()
g.es("tnodeList script complete")</t>
<t tx="ekr.20031218072017.2433">import leoGlobals as g
from leoGlobals import true,false

g.checkTopologyOfAllClones()</t>
<t tx="ekr.20031218072017.2434">if 0:
	checkForMismatchedJoinedNodes()
	
	print g.createTopologyList(c=g.top(),root=g.top().currentVnode().parent(),useHeadlines=false)
	
	checkTopologiesOfLinkedNodes()
	
	checkForPossiblyBrokenLinks()</t>
<t tx="ekr.20031218072017.2435">def checkForMismatchedJoinedNodes (c=None):
	
	"""Checks outline for possible broken join lists"""

	if not c: c = g.top()
	d = {} # Keys are tnodes, values are headlines.
	v = c.rootVnode()
	while v:
		aTuple = d.get(v.t)
		if aTuple:
			head,body = aTuple
			if v.headString()!= head:
				g.es("headline mismatch in joined nodes",`v`)
			if v.bodyString()!= body:
				g.es("body mismatch in joined nodes",`v`)
		else:
			d[v.t] = (v.headString(),v.bodyString())
		v = v.threadNext()

	g.es("end of checkForMismatchedJoinedNodes")
</t>
<t tx="ekr.20031218072017.2436">def checkForPossiblyBrokenLinks (c=None):
	
	"""Checks outline for possible broken join lists"""
	
	if not c: c = g.top()
	d = {} # Keys are headlines, values are (tnodes,parent) tuples
	v = c.rootVnode()
	while v:
		h = v.headString()
		parent = v.parent()
		aTuple = d.get(h)
		if aTuple:
			t,p = aTuple
			if (t != v.t and p and parent and p.t != parent.t and
				p.headString() == parent.headString() and
				len(h) &gt; 1 and h != "NewHeadline"):
				g.es("different tnodes with same headline and parent headlines: " + v.headString())
		else:
			d[h] = (v.t,parent)
		v = v.threadNext()
</t>
<t tx="ekr.20031218072017.2437">def checkTopologiesOfLinkedNodes(c=None):
	
	if not c: c = g.top()
	d = {} # Keys are tnodes, values are topology lists.
	v = c.rootVnode()
	count = 0
	while v:
		top1 = g.createTopologyList(c=c,root=v)
		top2 = d.get(v.t)
		if top2:
			count += 1
			if top1 != top1:
				g.es("mismatched topologies for two vnodes with the same tnode!",`v`)
		else:
			d[v.t] = top1
		v = v.threadNext()
	g.es("end of checkTopologiesOfLinkedNodes. Checked nodes: " + `count`)
</t>
<t tx="ekr.20031218072017.2438">@ Nodes with the same topologies should be joined PROVIDED:
	- Topologies are non-trivial.
	- Topologies include tnodes somehow.
	- Topologies include headlines somehow.
</t>
<t tx="ekr.20031218072017.2439">@ignore</t>
<t tx="ekr.20031218072017.2440">@first #!/usr/bin/python

"""
A simple script to install Leo on Linux.

Contributed by David McNab &lt;david@rebirthing.co.nz&gt;
"""

import commands,os,sys # commands module is for Unix only.

# We must be root to use this script.
if os.getuid() != 0:
	print "You need to run this install script as root"
	sys.exit(1)

# Create /usr/lib/leo and copy all files there.
print "***** Installing Leo to /usr/lib/leo..."
commands.getoutput("mkdir -p /usr/lib/leo")
commands.getoutput("cp -rp * /usr/lib/leo")

# Create user's 'leo' command script into /usr/bin/leo
print "***** Creating Leo startup script -&gt; /usr/bin/leo"
fd = open("/usr/bin/leo", "w")
fd.write("""#!/usr/bin/python
import commands,sys
files = " ".join(sys.argv[1:])
print commands.getoutput("python /usr/lib/leo/leo.py %s" % files)
""")
fd.close()
commands.getoutput("chmod 755 /usr/bin/leo")
print "***** Leo installed successfully - type 'leo filename.leo' to use it."
</t>
<t tx="ekr.20031218072017.2441">import fnmatch, os

def findDosFile(pattern, dirname):
	
	"""Check for crlf in files"""
	
	from leoGlobals import os_path_isfile,os_path_join

	files = os.listdir(dirname)
	names = fnmatch.filter(files, pattern)
	for name in names:
		path = g.os_path_join(dirname, name)
		if g.os_path_isfile(path):
			bytes = open(path, 'rb').read()
			count = bytes.count('\r\n')
			if '\0' not in bytes and count:
				print "%4d %s" % (count,path)

dir = "c:\prog\leoCvs\leo"
print ; findDosFile("*",dir)

# The following files were reported:  MANIFEST, PKG-INFO.
# Both were created by @silentfile.</t>
<t tx="ekr.20031218072017.2442">@first #! /usr/bin/env python
@language python

@ When using c2py as a script to translate entire files, use convertCFileToPython().  When using c2py within Leo, use convertCurrentTree().

Please set user data in the &lt;&lt; specifying user types &gt;&gt; section.
@c

&lt;&lt; what c2py does &gt;&gt;
&lt;&lt; theory of operation &gt;&gt;
import string
&lt;&lt; specifying user types &gt;&gt;
true = 1 ; false = None
tabWidth = 4 # how many blanks in a tab.
printFlag = false
doLeoTranslations = true ; dontDoLeoTranslations = false
&lt;&lt; define testData &gt;&gt;
@others

gClassName = "" # The class name for the present function.  Used to modify ivars.
gIvars = [] # List of ivars to be converted to self.ivar

def test():
	global printFlag ; printFlag = true
	for s in testData:
		convertCStringToPython(s, doLeoTranslations)
		
def go():
	test()

if __name__ == "__main__":
	speedTest(2)</t>
<t tx="ekr.20031218072017.2443"></t>
<t tx="ekr.20031218072017.2444">@ c2py converts C or C++ text into python text.  The conversion is not complete.  Nevertheless, c2py eliminates much of the tedious text manipulation that would otherwise be required.

The following is a list of the translations performed by c2py.  These transformations are controlled by convertCodeList().

I.  Prepass

These translations before removing all curly braces.

Suppose we are translating:

	aTypeSpec aClass::aMethod(t1 v1,...,tn vn)
	{
		body
	}

1. Translates the function prototype, i.e., translates:

	aTypeSpec aClass::aMethod(t1 v1,...,tn vn)
to:
	def aMethod(v1,...vn):

As a special case, c2py translates:

	aTypeSpec aClass::aClass(t1 v1,...,tn vn)
to:
	aClass.__init__(t1 v1,...,tn vn)

Yes, I know, aClass.__init__ isn't proper Python, but retaining the class name is useful.

2. Let t denote any member of typeList or classList.

	a) Removes all casts of the form (t) or (t*) or (t**), etc.
	b) Converts t x, t *x, t **x, etc. to x.
	c) Converts x = new t(...) to x = t(...)
	d) For all i in ivarsDict[aClass] converts this -&gt; i to self.i
	e) For all i in ivarsDict[aClass] converts i to self.i

3. Converts &lt; &lt; x &gt; &gt; = to @c.  This Leo-specific translation is not done when translating files.

II.  Main Pass

This pass does the following simple translations everywhere except in comments and strings.

Changes all -&gt; to .
Changes all this.self to self (This corrects problems during the prepass.)
Removes all curly braces
Changes all #if to if
Changes all else if to elif
Changes all #else to else:
Changes all else to else:
Removes all #endif
Changes all &amp;&amp; to and
Changes all || to or
Changes all TRUE to true
Changes all FALSE to false
Changes all NULL to None
Changes all this to self
Changes all @code to @c.  This Leo-specific translation is not done when translating files.

III.  Complex Pass

This pass attempts more complex translations.

Converts if ( x ) to if x:
Converts elif ( x ) to elif x:
Converts while ( x ) to while x:
Converts for ( x ; y ; z ) to for x SEMI y SEMI z:

remove all semicolons.

IV.  Final Pass

This pass completes the translation.

Removes all semicolons.
Removes @c if it starts the text.  This Leo-specific translation is not done when translating files.
Removes all blank lines.
Removes excess whitespace from all lines, leaving leading whitespace unchanged.
Replaces C/C++ comments by Python comments.
Removes trailing whitespace from all lines.
</t>
<t tx="ekr.20031218072017.2445">@ Strategy and Performance

c2py is straightforward.  The speed of c2py is unimportant.  We don't care about the memory used because we translate only small pieces of text at a time.

We can do body[i:j] = x, regardless of len(x).  We can also do del body[i:j] to delete characters.

We scan repeatedly through the text.  Using many passes greatly simplifies the code and does not slow down c2py significantly.

No scans are done within strings or comments.  The idiom to handle such scans is the following:

def someScan(body):
	i = 0
	while i &lt; body(len):
		if isStringOrComment(body,i):
			i = skipStringOrComment(body,i)
		elif &lt;&lt; found what we are looking for ? &gt;&gt; :
			&lt;&lt; convert what we are looking for, setting i &gt;&gt;
		else: i += 1

That's about all there is to it.  The code was remarkably easy to write and seems clear to me.
</t>
<t tx="ekr.20031218072017.2446">@ Please change the following lists so they contain the types and classes used by your program.

c2py removes all type definitions correctly; it converts
	new aType(...)
to
	aType(...)
@c

classList = [
	"vnode", "tnode", "Commands",
	"wxString", "wxTreeCtrl", "wxTextCtrl", "wxSplitterWindow" ]
	
typeList = ["char", "void", "short", "long", "int", "double", "float"]

@ Please change ivarsDict so it represents the instance variables (ivars) used by your program's classes.

ivarsDict is a dictionary used to translate ivar i of class c to self.i.  It also translates this-&gt;i to self.i.
@c
	
ivarsDict = {
	"atFile": [ "mCommands", "mErrors", "mStructureErrors",
		"mTargetFileName", "mOutputFileName", "mOutputStream",
		"mStartSentinelComment", "mEndSentinelComment", "mRoot"],

	"vnode": ["mCommands", "mJoinList", "mIconVal", "mTreeID", "mT", "mStatusBits"],

	"tnode": ["mBodyString", "mBodyRTF", "mJoinHead", "mStatusBits", "mFileIndex",
		"mSelectionStart", "mSelectionLength", "mCloneIndex"],
		
	"LeoFrame": ["mNextFrame", "mPrevFrame", "mCommands"],

	"Commands": [
		# public
		"mCurrentVnode", "mLeoFrame", "mInhibitOnTreeChanged", "mMaxTnodeIndex",
		"mTreeCtrl", "mBodyCtrl", "mFirstWindowAndNeverSaved",
		#private
		"mTabWidth", "mChanged", "mOutlineExpansionLevel", "mUsingClipboard",
		"mFileName", "mMemoryInputStream", "mMemoryOutputStream", "mFileInputStream",
		"mInputFile", "mFileOutputStream", "mFileSize", "mTopVnode", "mTagList",
		"mMaxVnodeTag",
		"mUndoType", "mUndoVnode", "mUndoParent", "mUndoBack", "mUndoN",
		"mUndoDVnodes", "mUndoLastChild", "mUndoablyDeletedVnode" ]}</t>
<t tx="ekr.20031218072017.2447">testData = [ "\n@doc\n\
This is a doc part: format, whilest, {};-&gt;.\n\
&lt;&lt;\
section def&gt;&gt;=\n\
LeoFrame::LeoFrame(vnode *v, char *s, int i)\n\
{\n\
	// test ; {} /* */.\n\
	#if 0 //comment\n\
		if(gLeoFrameList)gLeoFrameList -&gt; mPrevFrame = this ;\n\
		else\n\
			this -&gt; mNextFrame = gLeoFrameList ;\n\
	#else\n\
		\n\
		vnode *v = new vnode(a,b);\n\
		Commands *commander = (Commands) NULL ; // after cast\n\
		this -&gt; mPrevFrame = NULL ;\n\
	#endif\n\
	if (a==b)\n\
		a = 2;\n\
	else if (a ==c)\n\
		a = 3;\n\
	else return; \n\
	/* Block comment test:\n\
		if(2):while(1): end.*/\n\
	for(int i = 1; i &lt; limit; ++i){\n\
		mVisible = FALSE ;\n\
		mOnTop = TRUE ;\n\
	}\n\
	// trailing ws.	 \n\
	mCommands = new Commands(this, mTreeCtrl, mTextCtrl) ;\n\
	gActiveFrame = this ;\n\
}\n\
	", "&lt;&lt;" +
"vnode methods &gt;&gt;=\n\
\n\
void vnode::OnCopyNode(wxCommandEvent&amp; WXUNUSED(event))\n\
{\n\
	mCommands -&gt; copyOutline();\n\
}\n\
\n@doc\n\
another doc part if, then, else, -&gt; \n&lt;&lt;" +
"vnode methods &gt;&gt;=\n\
void vnode::OnPasteNode(wxCommandEvent&amp; WXUNUSED(event))\n\
{\n\
	mCommands -&gt; pasteOutline();\n\
}\n" ]</t>
<t tx="ekr.20031218072017.2448">def speedTest(passes):

	import time
	file = r"c:\prog\LeoPy\LeoPy.leo"
	f=open(file)
	if not f:
		print "not found: ", file
		return
	s=f.read()
	f.close()
	print "file:", file, " size:", len(s), " passes:", passes
	print "speedTest start"
	time1 = time.clock()
	p = passes
	while p &gt; 0:
		n = len(s) ; i = 0 ; lines = 0
		while -1 &lt; i &lt; n:
			if s[i] == '\n':
				lines += 1 ; i += 1
			else:
				i = s.find('\n',i) # _much_ faster than list-based-find.
			continue
			# match is about 9 times slower than simple test.
			if s[i]=='\n': # g.match(s,i,'\n'): # 
				i += 1
			else:
				i += 1
		p -= 1
	time2 = time.clock()
	print "lines:", lines
	print "speedTest done:"
	print "elapsed time:", time2-time1
	print "time/pass:", (time2-time1)/passes</t>
<t tx="ekr.20031218072017.2449"></t>
<t tx="ekr.20031218072017.2450">def leo1to2():

	import leo
	import leoGlobals
	c=leoGlobals.top()
	v=c.currentVnode()
	convertLeo1to2(v,c)
</t>
<t tx="ekr.20031218072017.2451">def convertLeo1to2(v,c):

	after=v.nodeAfterTree()
	while v and v != after:
		s=v.bodyString()
		print "converting:", v.headString()
		s=convertStringLeo1to2(s)
		v.setBodyStringOrPane(s)
		v=v.threadNext()

	c.Repaint() # for backward compatibility
	print "end of leo1to2"</t>
<t tx="ekr.20031218072017.2452">def convertStringLeo1to2 (s):

	# print "convertStringLeo1to2:start\n", s
	codeList = stringToList(s) ; outputList = []
	i = 0
	while i &lt; len(codeList):
		j = skipCodePart(codeList,i)
		if j &gt; i:
			code = codeList[i:j]
			convertCodeList1to2(code)
			i = j
			#print "-----code:", g.listToString(code)
			for item in code:
				outputList.append(item)
		j = skipDocPart(codeList,i)
		if j &gt; i:
			doc = codeList[i:j]
			convertDocList(doc) # same as in c2py
			#print "-----doc:", g.listToString(doc)
			i = j
			for item in doc:
				outputList.append(item)
	
	result = g.listToString(outputList)
	global printFlag
	if printFlag: print "-----:\n", result
	return result</t>
<t tx="ekr.20031218072017.2453">@ We do _not_ replace @root by @file or insert @others as needed.  Inserting @others can be done easily enough by hand, and may take more global knowledge than we can reasonably expect to have.
@c

def convertCodeList1to2(list):

	if 0: # There isn't much reason to do this.
		removeAtRoot(list)
	safeReplace(list, "@code", "@c")
	replaceSectionDefs(list)
	removeLeadingAtCode(list)
</t>
<t tx="ekr.20031218072017.2454">@ We separate the processing into two parts, 1) a leo-aware driver that iterates over @file trees and 2) a text-based part that processes one or more files or strings.
</t>
<t tx="ekr.20031218072017.2455">def convertCurrentTree():

	import c2py
	import leo
	import leoGlobals
	c=leoGlobals.top()
	v = c.currentVnode()
	c2py.convertLeoTree(v,c)</t>
<t tx="ekr.20031218072017.2456">def convertLeoTree(v,c):

	after=v.nodeAfterTree()
	while v and v != after:
		s=v.bodyString()
		print "converting:", v.headString()
		s=convertCStringToPython(s, doLeoTranslations )
		v.setBodyStringOrPane(s)
		v=v.threadNext()
	c.Repaint() # for backward compatibility.
	print "end of c2py"</t>
<t tx="ekr.20031218072017.2457">def convertCFileToPython(file):

	f=open(file, 'r')
	if not f: return
	s = f.read()
	f.close();
	f=open(file + ".py", 'w')
	if not f: return
	s = convertCStringToPython(s, dontDoLeoTranslations )
	f.write(s)
	f.close()</t>
<t tx="ekr.20031218072017.2458"></t>
<t tx="ekr.20031218072017.2459">def convertCStringToPython(s, leoFlag):

	# print "convertCStringToPython:start\n", s
	firstPart = true
	codeList = stringToList(s)
	
	if not leoFlag:
		convertCodeList(codeList, firstPart, dontDoLeoTranslations)
		return g.listToString(codeList)

	outputList = []
	i = 0
	while i &lt; len(codeList):
		j = skipCodePart(codeList,i)
		if j &gt; i:
			code = codeList[i:j]
			convertCodeList(code, firstPart, doLeoTranslations)
			i = j
			#print "-----code:", g.listToString(code)
			for item in code:
				outputList.append(item)
		firstPart = false # don't remove @c from here on.
		j = skipDocPart(codeList,i)
		if j &gt; i:
			doc = codeList[i:j]
			convertDocList(doc)
			#print "-----doc:", g.listToString(doc)
			i = j
			for item in doc:
				outputList.append(item)
	
	result = g.listToString(outputList)
	global printFlag
	if printFlag: print "-----:\n", result
	return result</t>
<t tx="ekr.20031218072017.2460">def convertCodeList(list, firstPart, leoFlag):
	#first
	replace(list, "\r", None)
	convertLeadingBlanks(list)
	if leoFlag:
		replaceSectionDefs(list)
	mungeAllFunctions(list)
	#next
	safeReplace(list, " -&gt; ", '.')
	safeReplace(list, "-&gt;", '.')
	safeReplace(list, " . ", '.')
	safeReplace(list, "this.self", "self")
	safeReplace(list, "{", None)
	safeReplace(list, "}", None)
	safeReplace(list, "#if", "if")
	safeReplace(list, "#else", "else")
	safeReplace(list, "#endif", None)
	safeReplace(list, "else if", "elif")
	safeReplace(list, "else", "else:")
	safeReplace(list, "&amp;&amp;", "and")
	safeReplace(list, "||", "or")
	safeReplace(list, "TRUE", "true")
	safeReplace(list, "FALSE", "false")
	safeReplace(list, "NULL", "None")
	safeReplace(list, "this", "self")
	safeReplace(list, "try", "try:")
	safeReplace(list, "catch", "except:")
	if leoFlag:
		safeReplace(list, "@code", "@c")
	#next
	handleAllKeywords(list)
	# after processing for keywords
	removeSemicolonsAtEndOfLines(list)
	#last
	if firstPart and leoFlag: removeLeadingAtCode(list)
	removeBlankLines(list)
	removeExcessWs(list)
	# your taste may vary: in Python I don't like extra whitespace
	safeReplace(list, " :", ":") 
	safeReplace(list, ", ", ",")
	safeReplace(list, " ,", ",")
	safeReplace(list, " (", "(")
	safeReplace(list, "( ", "(")
	safeReplace(list, " )", ")")
	safeReplace(list, ") ", ")")
	replaceComments(list) # should follow all calls to safeReplace
	g.removeTrailingWs(list)
	safeReplace(list, "\t ", "\t") # happens when deleting declarations.</t>
<t tx="ekr.20031218072017.2461">def convertDocList(docList):

	# print "convertDocList:", docList
	if matchWord(docList, 0, "@doc"):
		i = skipWs(docList, 4)
		if g.match(docList, i, "\n"):
			i += 1
		docList[0:i] = list("@ ")</t>
<t tx="ekr.20031218072017.2462">def skipDocPart(list, i):
	
	# print "skipDocPart", i
	while i &lt; len(list):
		if matchWord(list, i, "@code") or matchWord(list, i, "@c"):
			break
		elif isSectionDef(list,i):
			break
		else: i = skipPastLine(list, i)
	return i</t>
<t tx="ekr.20031218072017.2463">def skipCodePart(codeList, i):
	
	# print "skipCodePart", i
	if matchWord(codeList, i, "@doc") or matchWord(codeList, i, "@"):
		return i
	while i &lt; len(codeList):
		if g.match(codeList, i, "//"):
			i = skipPastLine(codeList,i)
		elif g.match(codeList, i, "/*"):
			i = skipCBlockComment(codeList,i)
		elif g.match(codeList, i, '"') or g.match(codeList, i, "'"):
			i = skipString(codeList,i)
		elif g.match(codeList, i, "\n"):
			i += 1
			if matchWord(codeList, i, "@doc") or matchWord(codeList, i, "@"):
				break
		else: i += 1
	return i</t>
<t tx="ekr.20031218072017.2464"></t>
<t tx="ekr.20031218072017.2465"></t>
<t tx="ekr.20031218072017.2466">def convertLeadingBlanks(list):

	global tabWidth
	if tabWidth &lt; 2: return
	i = 0
	while i &lt; len(list):
		n = 0
		while i &lt; len(list) and list[i] == ' ':
			n += 1 ; i += 1
			if n == tabWidth:
				list[i-tabWidth:i] = ['\t']
				i = i - tabWidth + 1
				n = 0
		i = skipPastLine(list, i)</t>
<t tx="ekr.20031218072017.2467">def findInList(list, i, findStringOrList):

	findList = stringToList(findStringOrList)
	
	while i &lt; len(list):
		if g.match(list, i, findList): return i
		else: i += 1
	return -1</t>
<t tx="ekr.20031218072017.2468">def findInCode(codeList, i, findStringOrList):

	findList = stringToList(findStringOrList)
	
	while i &lt; len(codeList):
		if isStringOrComment(codeList,i):
			i = skipStringOrComment(codeList,i)
		elif g.match(codeList, i, findList):
			return i
		else: i += 1
	return -1</t>
<t tx="ekr.20031218072017.2469"># We scan for a '{' at the top level that is preceeded by ')'
# @code and &lt; &lt; x &gt; &gt; = have been replaced by @c
def mungeAllFunctions(codeList):

	prevSemi = 0 # Previous semicolon: header contains all previous text
	i = 0
	firstOpen = None
	while i &lt; len(codeList):
		if isStringOrComment(codeList,i):
			i = skipStringOrComment(codeList,i)
			prevSemi = i
		elif g.match(codeList, i, '('):
			if not firstOpen:
				firstOpen = i
			i += 1
		elif g.match(codeList, i, '#'):
			i = skipPastLine(codeList, i)
			prevSemi = i
		elif g.match(codeList, i, ';'):
			i += 1
			prevSemi = i
		elif matchWord(codeList, i, "@code"):
			i += 5
			prevSemi = i # restart the scan
		elif matchWord(codeList, i, "@c"):
			i += 2 ; prevSemi = i # restart the scan
		elif g.match(codeList, i, "{"):
			i = handlePossibleFunctionHeader(codeList,i,prevSemi,firstOpen)
			prevSemi = i ; firstOpen = None # restart the scan
		else: i += 1</t>
<t tx="ekr.20031218072017.2470"># converts function header lines from c++ format to python format.
# That is, converts
# x1..nn w::y ( t1 z1,..tn zn) {
# to
# def y (z1,..zn): {

def handlePossibleFunctionHeader(codeList, i, prevSemi, firstOpen):

	assert(g.match(codeList,i,"{"))
	prevSemi = skipWsAndNl(codeList, prevSemi)
	close = prevNonWsOrNlChar(codeList, i)
	if close &lt; 0 or codeList[close] != ')':
		return 1 + skipToMatchingBracket(codeList, i)
	if not firstOpen:
		return 1 + skipToMatchingBracket(codeList, i)
	close2 = skipToMatchingBracket(codeList, firstOpen)
	if close2 != close:
		return 1 + skipToMatchingBracket(codeList, i)
	open = firstOpen
	assert(codeList[open]=='(')
	head = codeList[prevSemi:open]
	# do nothing if the head starts with "if", "for" or "while"
	k = skipWs(head,0)
	if k &gt;= len(head) or not head[k] in string.letters:
		return 1 + skipToMatchingBracket(codeList, i)
	kk = skipPastWord(head,k)
	if kk &gt; k:
		headString = g.listToString(head[k:kk])
		# C keywords that might be followed by '{'
		# print "headString:", headString
		if headString in [ "class", "do", "for", "if", "struct", "switch", "while"]:
			return 1 + skipToMatchingBracket(codeList, i)
	args = codeList[open:close+1]
	k = 1 + skipToMatchingBracket(codeList,i)
	body = codeList[i:k]
	#print "head:", g.listToString(head)
	#print "args:", g.listToString(args)
	#print "body:", g.listToString(body)
	#print "tot: ", g.listToString(codeList[prevSemi:k])
	head = massageFunctionHead(head)
	args = massageFunctionArgs(args)
	body = massageFunctionBody(body)
	#print "head2:", g.listToString(head)
	#print "args2:", g.listToString(args)
	#print "body2:", g.listToString(body)
	#print "tot2: ", g.listToString(codeList[prevSemi:k])
	result = []
	for item in head:
		result.append(item)
	for item in args:
		result.append(item)
	for item in body:
		result.append(item)
	codeList[prevSemi:k] = result
	return k</t>
<t tx="ekr.20031218072017.2471">def massageFunctionArgs(args):
	global gClassName
	assert(args[0]=='(')
	assert(args[-1]==')')

	result = ['('] ; lastWord = []
	if gClassName:
		for item in list("self,"): result.append(item) #can put extra comma

	i = 1
	while i &lt; len(args):
		i = skipWsAndNl(args, i)
		c = args[i]
		if c in string.letters:
			j = skipPastWord(args,i)
			lastWord = args[i:j]
			i = j
		elif c == ',' or c == ')':
			for item in lastWord:
				result.append(item)
			if lastWord != [] and c == ',':
				result.append(',')
			lastWord = []
			i += 1
		else: i += 1
	if result[-1] == ',':
		del result[-1]
	result.append(')')
	result.append(':')
	# print "new args:", g.listToString(result)
	return result</t>
<t tx="ekr.20031218072017.2472">def massageFunctionHead(head):

	# print "head:", g.listToString(head)
	result = []
	prevWord = []
	global gClassName ; gClassName = []
	i = 0
	while i &lt; len(head):
		i = skipWsAndNl(head, i)
		if i &lt; len(head) and head[i] in string.letters:
			result = []
			j = skipPastWord(head,i)
			prevWord = head[i:j]
			i = j
			# look for ::word2
			i = skipWs(head,i)
			if g.match(head,i,"::"):
				# Set the global to the class name.
				gClassName = g.listToString(prevWord)
				# print "class name:", gClassName
				i = skipWs(head, i+2)
				if i &lt; len(head) and (head[i]=='~' or head[i] in string.letters):
					j = skipPastWord(head,i)
					if head[i:j] == prevWord:
						for item in list("__init__"): result.append(item)
					elif head[i]=='~' and head[i+1:j] == prevWord:
						for item in list("__del__"): result.append(item)
					else:
						# for item in "::": result.append(item)
						for item in head[i:j]: result.append(item)
					i = j
			else:
				for item in prevWord:result.append(item)
		else: i += 1
		
	finalResult = list("def ")
	for item in result: finalResult.append(item)
	# print "new head:", g.listToString(finalResult)
	return finalResult</t>
<t tx="ekr.20031218072017.2473">def massageFunctionBody(body):

	body = massageIvars(body)
	body = removeCasts(body)
	body = removeTypeNames(body)
	return body</t>
<t tx="ekr.20031218072017.2474">def massageIvars(body):

	if gClassName and ivarsDict.has_key(gClassName):
		ivars = ivarsDict [ gClassName ]
	else:
		ivars = []
	# print "key:ivars=", gClassName, ':', `ivars`

	i = 0
	while i &lt; len(body):
		if isStringOrComment(body,i):
			i = skipStringOrComment(body,i)
		elif body[i] in string.letters:
			j = skipPastWord(body,i)
			word = g.listToString(body[i:j])
			# print "looking up:", word
			if word in ivars:
				# replace word by self.word
				# print "replacing", word, " by self.", word
				word = "self." + word
				word = list(word)
				body[i:j] = word
				delta = len(word)-(j-i)
				i = j + delta
			else: i = j
		else: i += 1
	return body</t>
<t tx="ekr.20031218072017.2475">def removeCasts(body):

	i = 0
	while i &lt; len(body):
		if isStringOrComment(body,i):
			i = skipStringOrComment(body,i)
		elif g.match(body, i, '('):
			start = i
			i = skipWs(body, i+1)
			if body[i] in string.letters:
				j = skipPastWord(body,i)
				word = g.listToString(body[i:j])
				i = j
				if word in classList or word in typeList:
					i = skipWs(body, i)
					while g.match(body,i,'*'):
						i += 1
					i = skipWs(body, i)
					if g.match(body,i,')'):
						i += 1
						# print "removing cast:", g.listToString(body[start:i])
						del body[start:i]
						i = start
		else: i += 1
	return body</t>
<t tx="ekr.20031218072017.2476"># Do _not_ remove type names when preceeded by new.

def removeTypeNames(body):

	i = 0
	while i &lt; len(body):
		if isStringOrComment(body,i):
			i = skipStringOrComment(body,i)
		elif matchWord(body, i, "new"):
			i = skipPastWord(body,i)
			i = skipWs(body,i)
			# don't remove what follows new.
			if body[i] in string.letters:
				i = skipPastWord(body,i)
		elif body[i] in string.letters:
			j = skipPastWord(body,i)
			word = g.listToString(body[i:j])
			if word in classList or word in typeList:
				k = skipWs(body, j)
				while g.match(body,k,'*'):
					k += 1 ; j = k
				# print "Deleting type name:", g.listToString(body[i:j])
				del body[i:j]
			else:
				i = j
		else: i += 1
	return body</t>
<t tx="ekr.20031218072017.2477"># converts if ( x ) to if x:
# converts while ( x ) to while x:
def handleAllKeywords(codeList):

	# print "handAllKeywords:", g.listToString(codeList)
	i = 0
	while i &lt; len(codeList):
		if isStringOrComment(codeList,i):
			i = skipStringOrComment(codeList,i)
		elif ( matchWord(codeList,i,"if") or
			matchWord(codeList,i,"while") or
			matchWord(codeList,i,"for") or
			matchWord(codeList,i,"elif") ):
			i = handleKeyword(codeList,i)
		else:
			i += 1
	# print "handAllKeywords2:", g.listToString(codeList)</t>
<t tx="ekr.20031218072017.2478">def handleKeyword(codeList,i):

	isFor = false
	if (matchWord(codeList,i,"if")):
		i += 2
	elif (matchWord(codeList,i,"elif")):
		i += 4
	elif (matchWord(codeList,i,"while")):
		i += 5
	elif (matchWord(codeList,i,"for")):
		i += 3
		isFor = true
	else: assert(0)
	# Make sure one space follows the keyword
	k = i
	i = skipWs(codeList,i)
	if k == i:
		c = codeList[i]
		codeList[i:i+1] = [ ' ', c ]
		i += 1
	# Remove '(' and matching ')' and add a ':'
	if codeList[i] == "(":
		j = removeMatchingBrackets(codeList,i)
		if j &gt; i and j &lt; len(codeList):
			c = codeList[j]
			codeList[j:j+1] = [":", " ", c]
			j = j + 2
		return j
	return i</t>
<t tx="ekr.20031218072017.2479">def isWs(c):
	return c == ' ' or c == '\t'
	
def isWsOrNl(c):
	return c == ' ' or c == '\t' or c == '\n'</t>
<t tx="ekr.20031218072017.2480"># returns the ending index if i points to &lt; &lt; x &gt; &gt; =
def isSectionDef(list, i):

	i = skipWs(list,i)
	if not g.match(list,i,"&lt;&lt;"): return false
	while i &lt; len(list) and list[i] != '\n':
		if g.match(list,i,"&gt;&gt;="): return i+3
		else: i += 1
	return false</t>
<t tx="ekr.20031218072017.2481">def isStringOrComment(list, i):

	return g.match(list,i,"'") or g.match(list,i,'"') or g.match(list,i,"//") or g.match(list,i,"/*")</t>
<t tx="ekr.20031218072017.2482"># returns true if findList matches starting at codeList[i]

def match (codeList, i, findStringOrList):

	findList = stringToList(findStringOrList)
	n = len(findList)
	j = 0
	while i+j &lt; len(codeList) and j &lt; len(findList):
		if codeList[i+j] != findList[j]:
			return false
		else:
			j += 1
			if j == n:
				return i+j
	return false</t>
<t tx="ekr.20031218072017.2483">def matchWord (codeList, i, findStringOrList):

	j = g.match(codeList,i,findStringOrList)
	if not j:
		return false
	elif j &gt;= len(codeList):
		return true
	else:
		c = codeList[j]
		return not (c in string.letters or c in string.digits or c == '_')</t>
<t tx="ekr.20031218072017.2484">def prevNonWsChar(list, i):

	i -= 1
	while i &gt;= 0 and isWs(list[i]):
		i -= 1
	return i

def prevNonWsOrNlChar(list, i):

	i -= 1
	while i &gt;= 0 and isWsOrNl(list[i]):
		i -= 1
	return i</t>
<t tx="ekr.20031218072017.2485">def removeAllCComments(list, delim):

	i = 0
	while i &lt; len(list):
		if g.match(list,i,"'") or g.match(list,i,'"'):
			i = skipString(list,i)
		elif g.match(list,i,"//"):
			j = skipPastLine(list,i)
			print "deleting single line comment:", g.listToString(list[i:j])
			del list[i:j]
		elif g.match(list,i,"/*"):
			j = skipCBlockComment(list,i)
			print "deleting block comment:", g.listToString(list[i:j])
			del list[i:j]
		else:
			i += 1</t>
<t tx="ekr.20031218072017.2486">def removeAllCSentinels(list, delim):

	i = 0
	while i &lt; len(list):
		if g.match(list,i,"'") or g.match(list,i,'"'):
			# string starts a line.
			i = skipString(list,i)
			i = skipPastLine(list,i)
		elif g.match(list,i,"/*"):
			# block comment starts a line
			i = skipCBlockComment(list,i)
			i = skipPastLine(line,i)
		elif g.match(list,i,"//@"):
			j = skipPastLine(list,i)
			print "deleting sentinel:", g.listToString(list[i:j])
			del list[i:j]
		else:
			i = skipPastLine(list,i)</t>
<t tx="ekr.20031218072017.2487">def removeAllPythonComments(list, delim):

	i = 0
	while i &lt; len(list):
		if g.match(list,i,"'") or g.match(list,i,'"'):
			i = skipString(list,i)
		elif g.match(list,i,"#"):
			j = skipPastLine(list,i)
			print "deleting comment:", g.listToString(list[i:j])
			del list[i:j]
		else:
			i += 1</t>
<t tx="ekr.20031218072017.2488">def removeAllPythonSentinels(list, delim):

	i = 0
	while i &lt; len(list):
		if g.match(list,i,"'") or g.match(list,i,'"'):
			# string starts a line.
			i = skipString(list,i)
			i = skipPastLine(list,i)
		elif g.match(list,i,"#@"):
			j = skipPastLine(list,i)
			print "deleting sentinel:", g.listToString(list[i:j])
			del list[i:j]
		else:
			i = skipPastLine(list,i)</t>
<t tx="ekr.20031218072017.2489">def removeAtRoot (codeList):

	i = skipWs(codeList, 0)
	if matchWord(codeList,i,"@root"):
		j = skipPastLine(codeList,i)
		del codeList[i:j]

	while i &lt; len(codeList):
		if isStringOrComment(codeList,i):
			i = skipStringOrComment(codeList,i)
		elif g.match(codeList,i,"\n"):
			i = skipWs(codeList, i+1)
			if matchWord (codeList,i,"@root"):
				j = skipPastLine(codeList,i)
				del codeList[i:j]
		else: i += 1
</t>
<t tx="ekr.20031218072017.2490">def removeBlankLines(codeList):

	i = 0
	while i &lt; len(codeList):
		j = i
		while j &lt; len(codeList) and (codeList[j]==" " or codeList[j]=="\t"):
			j += 1
		if j== len(codeList) or codeList[j] == '\n':
			del codeList[i:j+1]
		else:
			oldi = i
			i = skipPastLine(codeList,i)</t>
<t tx="ekr.20031218072017.2491">def removeExcessWs(codeList):

	i = 0
	i = removeExcessWsFromLine(codeList,i)
	while i &lt; len(codeList):
		if isStringOrComment(codeList,i):
			i = skipStringOrComment(codeList,i)
		elif g.match(codeList,i,'\n'):
			i += 1
			i = removeExcessWsFromLine(codeList,i)
		else: i += 1</t>
<t tx="ekr.20031218072017.2492">def removeExcessWsFromLine(codeList,i):

	assert(i==0 or codeList[i-1] == '\n')
	i = skipWs(codeList,i)
	while i &lt; len(codeList):
		if isStringOrComment(codeList,i): break # safe
		elif g.match(codeList, i, '\n'): break
		elif g.match(codeList, i, ' ') or g.match(codeList, i, '\t'):
			# Replace all whitespace by one blank.
			k = i
			i = skipWs(codeList,i)
			codeList[k:i] = [' ']
			i = k + 1 # make sure we don't go past a newline!
		else: i += 1
	return i</t>
<t tx="ekr.20031218072017.2493">def removeLeadingAtCode(codeList):

	i = skipWsAndNl(codeList,0)
	if matchWord(codeList,i,"@code"):
		i = skipWsAndNl(codeList,5)
		del codeList[0:i]
	elif matchWord(codeList,i,"@c"):
		i = skipWsAndNl(codeList,2)
		del codeList[0:i]</t>
<t tx="ekr.20031218072017.2494">def removeMatchingBrackets(codeList, i):

	j = skipToMatchingBracket(codeList, i)
	if j &gt; i and j &lt; len(codeList):
		# print "del brackets:", g.listToString(codeList[i:j+1])
		c = codeList[j]
		if c == ')' or c == ']' or c == '}':
			del codeList[j:j+1]
			del codeList[i:i+1]
			# print "returning:", g.listToString(codeList[i:j])
			return j - 1
		else: return j + 1
	else: return j</t>
<t tx="ekr.20031218072017.2495">def removeSemicolonsAtEndOfLines(list):

	i = 0
	while i &lt; len(list):
		if isStringOrComment(list,i):
			i = skipStringOrComment(list,i)
		elif list[i] == ';':
			j = skipWs(list,i+1)
			if j &gt;= len(list) or g.match(list,j,'\n') or g.match(list,j,'#') or g.match(list,j,"//"):
				del list[i]
			else: i += 1
		else: i += 1</t>
<t tx="ekr.20031218072017.2496">def removeTrailingWs(list):

	i = 0
	while i &lt; len(list):
		if isWs(list[i]):
			j = i
			i = skipWs(list,i)
			assert(j &lt; i)
			if i &gt;= len(list) or list[i] == '\n':
				# print "removing trailing ws:", `i-j`
				del list[j:i]
				i = j
		else: i += 1</t>
<t tx="ekr.20031218072017.2497"># Replaces all occurances of findString by changeString.
# Deletes all occurances if change is None
def replace(codeList, findString, changeString):

	if len(findString)==0: return
	findList = stringToList(findString)
	changeList = stringToList(changeString)

	i = 0
	while i &lt; len(codeList):
		if g.match(codeList, i, findList):
			codeList[i:i+len(findList)] = changeList
			i += len(changeList)
		else: i += 1</t>
<t tx="ekr.20031218072017.2498"># For Leo we expect few block comments; doc parts are much more common.

def replaceComments(codeList):

	i = 0
	if g.match(codeList, i, "//"):
		codeList[0:2] = ['#']
	while i &lt; len(codeList):
		if g.match(codeList, i, "//"):
			codeList[i:i+2] = ['#']
			i = skipPastLine(codeList,i)
		elif g.match(codeList, i, "/*"):
			j = skipCBlockComment(codeList,i)
			del codeList[j-2:j]
			codeList[i:i+2] = ['#']
			j -= 2 ; k = i ; delta = -1
			while k &lt; j + delta :
				if codeList[k]=='\n':
					codeList[k:k+1] = ['\n', '#', ' ']
					delta += 2 ; k += 3 # progress!
				else: k += 1
			i = j + delta
		elif g.match(codeList, i, '"') or g.match(codeList, i, "'"):
			i = skipString(codeList,i)
		else: i += 1</t>
<t tx="ekr.20031218072017.2499"># Replaces &lt; &lt; x &gt; &gt; = by @c (at the start of lines).
def replaceSectionDefs(codeList):

	i = 0
	j = isSectionDef(codeList,i)
	if j &gt; 0: codeList[i:j] = list("@c ")

	while i &lt; len(codeList):
		if isStringOrComment(codeList,i):
			i = skipStringOrComment(codeList,i)
		elif g.match(codeList,i,"\n"):
			i += 1
			j = isSectionDef(codeList,i)
			if j &gt; i: codeList[i:j] = list("@c ")
		else: i += 1</t>
<t tx="ekr.20031218072017.2500"># Replaces occurances of findString by changeString outside of C comments and strings.
# Deletes all occurances if change is None.
def safeReplace(codeList, findString, changeString):

	if len(findString)==0: return
	findList = stringToList(findString)
	changeList = stringToList(changeString)
	i = 0
	if findList[0] in string.letters: #use matchWord
		while i &lt; len(codeList):
			if isStringOrComment(codeList,i):
				i = skipStringOrComment(codeList,i)
			elif matchWord(codeList, i, findList):
				codeList[i:i+len(findList)] = changeList
				i += len(changeList)
			else: i += 1
	else: #use match
		while i &lt; len(codeList):
			if g.match(codeList, i, findList):
				codeList[i:i+len(findList)] = changeList
				i += len(changeList)
			else: i += 1</t>
<t tx="ekr.20031218072017.2501">def skipCBlockComment(codeList, i):

	assert(g.match(codeList, i, "/*"))
	i += 2

	while i &lt; len(codeList):
		if g.match(codeList, i, "*/"): return i + 2
		else: i += 1
	return i</t>
<t tx="ekr.20031218072017.2502">def skipPastLine(codeList, i):

	while i &lt; len(codeList) and codeList[i] != '\n':
		i += 1
	if i &lt; len(codeList) and codeList[i] == '\n':
		i += 1
	return i</t>
<t tx="ekr.20031218072017.2503">def skipPastWord(list, i):

	assert(list[i] in string.letters or list[i]=='~')
	
	# Kludge: this helps recognize dtors.
	if list[i]=='~':
		i += 1
	
	while i &lt; len(list) and (
		list[i] in string.letters or
		list[i] in string.digits or
		list[i]=='_'):
		i += 1
	return i</t>
<t tx="ekr.20031218072017.2504">def skipString(codeList, i):

	delim = codeList[i] # handle either single or double-quoted strings
	assert(delim == '"' or delim == "'")
	i += 1

	while i &lt; len(codeList):
		if codeList[i] == delim: return i + 1
		elif codeList[i] == '\\': i += 2
		else: i += 1
	return i</t>
<t tx="ekr.20031218072017.2505">def skipStringOrComment(list,i):

	if g.match(list,i,"'") or g.match(list,i,'"'):
		return skipString(list,i)
	if g.match(list, i, "//"):
		return skipPastLine(list,i)
	elif g.match(list, i, "/*"):
		return skipCBlockComment(list,i)
	else: assert(0)</t>
<t tx="ekr.20031218072017.2506">def skipToMatchingBracket(codeList, i):

	c = codeList[i]
	if   c == '(': delim = ')'
	elif c == '{': delim = '}'
	elif c == '[': delim = ']'
	else: assert(0)

	i += 1
	while i &lt; len(codeList):
		c = codeList[i]
		if isStringOrComment(codeList,i):
			i = skipStringOrComment(codeList,i)
		elif c == delim:
			return i
		elif c == '(' or c == '[' or c == '{':
			i = skipToMatchingBracket(codeList,i)
			i += 1 # skip the closing bracket.
		else: i += 1
	return i</t>
<t tx="ekr.20031218072017.2507">def skipWs(list, i):

	while i &lt; len(list):
		c = list[i]
		if c == ' ' or c == '\t':
			i += 1
		else: break
	return i
	
def skipWsAndNl(list, i):

	while i &lt; len(list):
		c = list[i]
		if c == ' ' or c == '\t' or c == '\n':
			i += 1
		else: break
	return i</t>
<t tx="ekr.20031218072017.2508"># converts a string to a list containing one item per character of the list.
# converts None to the empty string and leaves other types alone.

# list(string) does not work on none.
def stringToList(string):

	if string:
		return list(string)
	else:
		return []</t>
<t tx="ekr.20031218072017.2509">def listToString(list):

	return string.join(list,"")</t>
<t tx="ekr.20031218072017.2510"># routines to gather static statistics about opcodes based on dis module.
import leoGlobals as g
from leoGlobals import true,false

import compiler,dis,os,string,sys,types

@others</t>
<t tx="ekr.20031218072017.2511">def go():
	
	dir = "c:/prog/leoCVS/leo/"
	modules = getModules(dir)
	stats = [0] * 256
	try:
		# Importing these might start leo itself and hang idle.
		modules.remove("leo")
		modules.remove("openLeo")
		modules.remove("openEkr")
		modules.remove("setup")
	except: pass
	# print modules
	
	for m in modules:
		try:
			print "module:", m
			exec("import " + m)
			a = eval(m)
			any(a,stats)
		except:
			import traceback ; traceback.print_exc()
			print "----- no matching class in", `m`
			
	g.print_stats(stats)</t>
<t tx="ekr.20031218072017.2512">def getFiles (dir):
	
	from leoGlobals import os_path_join,os_path_split,os_path_splitext

	# Generate the list of modules.
	allFiles = os.listdir(dir)
	files = []
	for f in allFiles:
		head,tail = g.os_path_split(f)
		root,ext = g.os_path_splitext(tail)
		if ext==".py":
			files.append(g.os_path_join(dir,f))
			
	return files</t>
<t tx="ekr.20031218072017.2513">def getModules (dir):
	
	"""Return the list of Python files in dir."""
	
	from leoGlobals import os_path_split,os_path_splitext
	
	files = []
	
	try:
		allFiles = os.listdir(dir)
		for f in allFiles:
			head,tail = g.os_path_split(f)
			fn,ext = g.os_path_splitext(tail)
			if ext==".py":
				files.append(fn)
	except: pass
			
	return files</t>
<t tx="ekr.20031218072017.2514">def any(x,stats,printName = 0):
	# based on dis.dis()
	"""Gathers statistics for classes, methods, functions, or code."""
	if not x:
		return
	if type(x) is types.InstanceType:
		x = x.__class__
	if hasattr(x, 'im_func'):
		x = x.im_func
	if hasattr(x, 'func_code'):
		x = x.func_code
	if hasattr(x, '__dict__'):
		items = x.__dict__.items()
		items.sort()
		for name, x1 in items:
			if type(x1) in (types.MethodType,
							types.FunctionType,
							types.CodeType):
				if printName: print name
				try:
					any(x1,stats)
				except TypeError, msg:
					print "Sorry:", msg
	elif hasattr(x, 'co_code'):
		code(x,stats)
	else:
		raise TypeError, \
			  "don't know how to disassemble %s objects" % \
			  type(x).__name__</t>
<t tx="ekr.20031218072017.2515">def code (co, stats):
	"""Gather static count statistics for a code object."""

	codeList = co.co_code
	# Count the number of occurances of each opcode.
	i = 0 ;  n = len(codeList)
	while i &lt; n:
		c = codeList[i]
		op = ord(c)
		stats[op] += 1
		i = i+1
		if op &gt;= dis.HAVE_ARGUMENT:
			i = i+2</t>
<t tx="ekr.20031218072017.2516">def print_stats (stats):

	stats2 = [] ; total = 0
	for i in xrange(0,256):
		if stats[i] &gt; 0:
			stats2.append((stats[i],i))
		total += stats[i]

	stats2.sort()
	stats2.reverse()
	for stat,i in stats2:
		print string.rjust(`stat`,6), dis.opname[i]
	print "total", total</t>
<t tx="ekr.20031218072017.2517">@language python

@ This file contains functions for non-interactive searching.  You might find these useful while running other scripts.
@c

import leo, string, re

@others</t>
<t tx="ekr.20031218072017.2518">def changeAll ( commander, findPat, changePat, bodyFlag = 1 ):
	"""
	changeAll	make changes in an entire Leo outline.
	
	commander	Commands object for a Leo outline window.
	findPat		the search string.
	changePat	the replacement string.
	bodyFlag	true: change body text.  false: change headline text.
	"""
	n = len(changePat)
	v = commander.rootVnode()
	pos = 0
	while v != None:
		v, pos = changeNext(v, pos, findPat, changePat, bodyFlag)
		pos = pos + n</t>
<t tx="ekr.20031218072017.2519">def changeNext ( v, pos, findPat, changePat, bodyFlag = 1 ):
	"""
	changeNext:	use string.find() to change text in a Leo outline.
	
	v	 		the vnode to start the search.
	pos			the position within the body text of v to start the search.
	findPat		the search string.
	changePat	the replacement string.
	bodyFlag	true: change body text.  false: change headline text.
	
	returns a tuple (v,pos) showing where the change occured.
	returns (None,0) if no further match in the outline was found.

	Note: if (v,pos) is a tuple returned previously from changeNext,
	changeNext(v,pos+len(findPat),findPat,changePat)
	changes the next matching string.
	"""
	n = len(findPat)
	v, pos = findNext(v, pos, findPat, bodyFlag)
	if v == None:
		return None, 0
	if bodyFlag:
		s = v.bodyString()
		# s[pos:pos+n] = changePat
		s = s[:pos] + changePat + s[pos+n:]
		v.setBodyStringOrPane(s)
	else:
		s = v.headString()
		# s[pos:pos+n] = changePat
		s = s[:pos] + changePat + s[pos+n:]
		v.setHeadStringOrHeadline(s)
		print "setting head string: ", result
	return v, pos</t>
<t tx="ekr.20031218072017.2520">def changePrev ( v, pos, findPat, changePat, bodyFlag = 1 ):
	"""
	changePrev:	use string.rfind() to change text in a Leo outline.
	
	v	 		the vnode to start the search.
	pos			the position within the body text of v to start the search.
	findPat		the search string.
	changePat	the replacement string.
	bodyFlag	true: change body text.  false: change headline text.
	
	returns a tuple (v,pos) showing where the change occured.
	returns (None,0) if no further match in the outline was found.

	Note: if (v,pos) is a tuple returned previously from changePrev,
	changePrev(v,pos-len(findPat),findPat,changePat)
	changes the next matching string.
	"""
	n = len(findPat)
	v, pos = findPrev(v, pos, findPat, bodyFlag)
	if v == None:
		return None, 0
	if bodyFlag:
		s = v.bodyString()
		# s[pos:pos+n] = changePat
		s = s[:pos] + changePat + s[pos+n:]
		v.setBodyStringOrPane(s)
	else:
		s = v.headString()
		#s[pos:pos+n] = changePat
		s = s[:pos] + changePat + s[pos+n:]
		v.setHeadStringOrHeadline(s)
	return v, pos</t>
<t tx="ekr.20031218072017.2521">def findAll(c,pattern,bodyFlag=1):
	"""
	findAll		search an entire Leo outline for a pattern.
	
	c        commander for a Leo outline window.
	pattern		the search string.
	bodyFlag	true: search body text. false: search headline text.
	
	returns a list of tuples (v,pos) showing where matches occured.
	returns [] if no match were found.
	"""
	v = c.rootVnode()
	n = len(pattern)
	result = [] ; pos = 0
	while v != None:
		v, pos = findNext(v,pos,pattern,bodyFlag)
		if v:
			result.append ((v, pos),)
		pos = pos + n
	return result</t>
<t tx="ekr.20031218072017.2522">def findNext ( v, pos, pattern, bodyFlag = 1 ):
	"""
	findNext:	use string.find() to find a pattern in a Leo outline.
	
	v	 		the vnode to start the search.
	pos			the position within the body text of v to start the search.
	pattern		the search string.
	bodyFlag	true: search body text.  false: search headline text.
	
	returns a tuple (v,pos) showing where the match occured.
	returns (None,0) if no further match in the outline was found.

	Note: if (v,pos) is a tuple returned previously from findNext,
	findNext(v,pos+len(pattern),pattern) finds the next match.
	"""
	while v != None:
		if bodyFlag:
			s = v.bodyString()
		else:
			s = v.headString()
		pos = s.find(pattern,pos )
		if pos != -1:
			return v, pos
		v = v.threadNext()
		pos = 0
	return None, 0</t>
<t tx="ekr.20031218072017.2523">def findPrev ( v, pos, pattern, bodyFlag = 1 ):
	"""
	findPrev:	use string.rfind() to find a pattern in a Leo outline.
	
	v	 		the vnode to start the search.
	pos			the position within the body text of v to start the search.
	pattern		the search string
	bodyFlag	true: search body text.  false: search headline text.
	
	returns a tuple (v,pos) showing where the match occured.
	returns (None,0) if no further match in the outline was found.

	Note: if (v,pos) is a tuple returned previously from findPrev,
	findPrev(v,pos-len(pattern),pattern) finds the next match.
	"""
	while v != None:
		if bodyFlag:
			s = v.bodyString()
		else:
			s = v.headString()
		pos = s.rfind(pattern,0,pos)
		if pos != -1:
			return v, pos
		v  = v.threadBack()
		pos = -1
	return None, 0</t>
<t tx="ekr.20031218072017.2524">def reChangeAll ( commander, findPat, changePat, bodyFlag, reFlags = None ):
	"""
	reChangeAll: make changes in an entire Leo outline using re module.
	
	commander	Commands object for a Leo outline window.
	findPat		the search string.
	changePat	the replacement string.
	bodyFlag	true: change body text.  false: change headline text.
	reFlags		flags argument to re.search().
	"""
	n = len(changePat)
	v = commander.rootVnode()
	pos = 0
	while v != None:
		v, mo, pos = reChangeNext(
			v, pos, findPat, changePat, bodyFlag, reFlags)
		pos = pos + n</t>
<t tx="ekr.20031218072017.2525">def reChangeNext ( v, pos, findPat, changePat, bodyFlag, reFlags = None ):
	"""
	reChangeNext: use re.search() to change text in a Leo outline.
	
	v	 		the vnode to start the search.
	pos			the position within the body text of v to start the search.
	findPat		the search string.
	changePat	the replacement string.
	bodyFlag	true: change body text.  false: change headline text.
	reFlags		flags argument to re.search().
	
	returns a tuple (v,pos) showing where the change occured.
	returns (None,0) if no further match in the outline was found.

	Note: if (v,pos) is a tuple returned previously from reChangeNext,
	reChangeNext(v,pos+len(findPat),findPat,changePat,bodyFlag)
	changes the next matching string.
	"""
	n = len(findPat)
	v, mo, pos = reFindNext(v, pos, findPat, bodyFlag, reFlags)
	if v == None:
		return None, None, 0
	if bodyFlag:
		s = v.bodyString()
		print s, findPat, changePat
		# s[pos:pos+n] = changePat
		s = s[:pos] + changePat + s[pos+n:]
		v.setBodyStringOrPane(s)
	else:
		s = v.headString()
		# s[pos:pos+n] = changePat
		s = s[:pos] + changePat + s[pos+n:]
		v.setHeadStringOrHeadline(s)
	return v, mo, pos</t>
<t tx="ekr.20031218072017.2526">def reChangePrev ( v, pos, findPat, changePat, bodyFlag, reFlags = None ):
	"""
	reChangePrev: use re.search() to change text in a Leo outline.
	
	v	 		the vnode to start the search.
	pos			the position within the body text of v to start the search.
	findPat		the search string.
	changePat	the replacement string.
	bodyFlag	true: change body text.  false: change headline text.
	reFlags		flags argument to re.search().
	
	returns a tuple (v,pos) showing where the change occured.
	returns (None,0) if no further match in the outline was found.

	Note: if (v,pos) is a tuple returned previously from reChangePrev,
	reChangePrev(v,pos-len(findPat),findPat,changePat,bodyFlag)
	changes the next matching string.
	"""
	n = len(findPat)
	v, mo, pos = reFindPrev(v, pos, findPat, bodyFlag, reFlags)
	if v == None:
		return None, None, 0
	if bodyFlag:
		s = v.bodyString()
		# s[pos:pos+n] = changePat
		s = s[:pos] + changePat + s[pos+n:]
		v.setBodyStringOrPane(s)
	else:
		s = v.headString()
		# s[pos:pos+n] = changePat
		s = s[:pos] + changePat + s[pos+n:]
		v.setHeadStringOrHeadline(s)
	return v, mo, pos</t>
<t tx="ekr.20031218072017.2527">def reFindAll(c,findPat,bodyFlag,reFlags=None):
	"""
	reFindAll	search an entire Leo outline using re module.
	
	c	     commander for a Leo outline window.
	pattern		the search string.
	bodyFlag	true: search body text.  false: search headline text.
	reFlags		flags argument to re.search().

	returns a list of tuples (v,pos) showing where matches occured.
	returns [] if no match were found.
	"""
	v = c.rootVnode()
	n = len(findPat)
	result = [] ; pos = 0
	while v != None:
		v, mo, pos = reFindNext(v,pos,findPat,bodyFlag,reFlags)
		if v != None:
			result.append ( (v,mo,pos) )
		pos = pos + n
	return result</t>
<t tx="ekr.20031218072017.2528">def reFindNext ( v, pos, pattern, bodyFlag, reFlags = None ):
	"""
	reFindNext:	use re.search() to find pattern in a Leo outline.
	
	v	 		the vnode to start the search.
	pos			the position within the body text of v to start the search.
	pattern		the search string
	bodyFlag	true: search body text.  false: search headline text.
	reFlags		the flags argument to re.search()
	
	returns a tuple (v,mo,pos) showing where the match occured.
	returns (None,None,0) if no further match in the outline was found.
	mo is a "match object"

	Note: if (v,pos) is a tuple returned previously from reFindNext,
	reFindNext(v,pos+len(pattern),pattern) finds the next match.
	"""
	while v != None:
		if bodyFlag:
			s = v.bodyString()
		else:
			s = v.headString()
		if reFlags == None:
			mo = re.search ( pattern, s[pos:] )
		else:
			mo = re.search ( pattern, s[pos:], reFlags )
		if mo != None:
			return v, mo, pos + mo.start()
		v = v.threadNext()
		pos = 0
	return None, None, 0</t>
<t tx="ekr.20031218072017.2529">def reFindPrev ( v, pos, pattern, bodyFlag, reFlags = None ):
	"""
	reFindPrev:	use re.search() to find pattern in a Leo outline.

	v	 		the vnode to start the search.
	pos			the position within the body text of v to start the search.
	pattern		the search string
	bodyFlag	true: search body text.  false: search headline text.
	reFlags		the flags argument to re.search()
	
	returns a tuple (v,mo,pos) showing where the match occured.
	returns (None,None,0) if no further match in the outline was found.
	
	Note 1: Searches vnodes in reverse (v.threadBack) direction.
	Searches text of vnodes in _forward_ direction.
	
	Note 2: if (v,pos) is a tuple returned previously from reFindPrev,
	reFindPrev(v,pos-len(pattern),pattern) finds the next match.
	"""
	while v != None:
		if bodyFlag:
			s = v.bodyString()
		else:
			s = v.headString()
		# Forward search through text...
		if reFlags == None:
			mo = re.search ( pattern, s[pos:] )
		else:
			mo = re.search ( pattern, s[pos:], reFlags )
		if mo != None:
			return v, mo, pos+mo.start()
		# Reverse search through vnode.
		v = v.threadBack()
		pos = 0
	return None, None, 0</t>
<t tx="ekr.20031218072017.2530">def lineAtPos ( s, pos ):
	"""
	lineAtPos: return the line of a string containing the given index.
	s		a string
	pos		an index into s
	"""
	# find the start of the line containing the match
	if len(s) &lt; 1:
		return ""
	if pos &gt; len(s):
		pos = len(s)-1
		
	while pos &gt; 0:
		if s[pos] == '\n':
			pos = pos + 1
			break
		else:
			pos = pos - 1
	# return the line containing the match
	s = s[pos:]
	list = s.split("\n")
	return list[0]</t>
<t tx="ekr.20031218072017.2531">def printFindList( findList, bodyFlag = 1 ):
	"""
	printFindList:	Print matching lines from the list.
	
	findList:		a list of (v,pos) tuples returned from findAll().
	Only the line containing the match is printed.
	Lines are printed once for each match found on the line.
	"""
	for v,pos in findList:
		if v != None:
			if bodyFlag:
				s = v.bodyString()
			else:
				s = v.headString()
			print lineAtPos(s, pos)</t>
<t tx="ekr.20031218072017.2532">@first #! /usr/bin/env python
@language python

@ This tiny script is intended to be called from go.bat to open LeoPy.leo.  You could change the file name to be any file you work on a lot...
@c

import leo
leo.run("c:\prog\leoCVS\leo\LeoPy.leo")</t>
<t tx="ekr.20031218072017.2533">@first #! /usr/bin/env python
@language python

# Example tangle_done.py file.
# Leo catches all exceptions thrown here; there is no need for try:except blocks.

@others</t>
<t tx="ekr.20031218072017.2534"># Leo calls this routine if "Run tangle-done.py after Tangle" is checked in the Prefs panel.

def run (root_list):

	print "tangle_done roots:"
	for root in root_list:
		print root
	
	if 0: # Run code contributed by Paul Paterson.
		convertRSTfilesToHTML(root_list)</t>
<t tx="ekr.20031218072017.2535"># Adapted from code by Paul Paterson.

def convertRSTfilesToHTML(root_list):

	"""This routine creates .html files from all .rst files in root_list, the list of files that have just been tangled."""
	
	from leoGlobals import os_path_join,os_path_split,os_path_splitext
	
	for root in root_list: 
		base,fullname = g.os_path_split(root)
		name,ext = g.os_path_splitext(fullname)
		if ext == ".rst":
			file = g.os_path_join(base,name+".html")
			&lt;&lt; Convert root to corresponding .html file &gt;&gt;
</t>
<t tx="ekr.20031218072017.2536"># Leo will report the execption if docutils is not installed.
from docutils.core import Publisher 
from docutils.io import FileInput,StringOutput,StringInput 

# Read .rst file into s.
f = open(root,"r")
s = f.read()
f.close()

# Restucture s into output.
pub = Publisher() 
pub.source = StringInput(pub.settings,source=s) 
pub.destination = StringOutput(pub.settings,encoding="utf-8") 
pub.set_reader('standalone',None,'restructuredtext') 
pub.set_writer('html') 
output = pub.publish()

# EKR: 3/7/03: convert output using the present encoding.
dict = g.scanDirectives(self.c,v=root)
encoding = dict.get("encoding",None)
if encoding == None:
	encoding = g.app.config.default_derived_file_encoding
output = g.toEncodedString(output,encoding,reportErrors=true) 

# Write the corresponding html file.
f = open(file,"w")
f.write(output)
f.close()</t>
<t tx="ekr.20031218072017.2537">@first #! /usr/bin/env python
@language python

# Example untangle_done script

def run(root_list):

	print "untangle_done roots:", root_list</t>
<t tx="ekr.20031218072017.2538"></t>
<t tx="ekr.20031218072017.2539">@nocolor</t>
<t tx="ekr.20031218072017.2540">@color

@ NSIS Script for LEO - Literate Programming Editor with Outlines
http://sourceforge.net/projects/leo

How to create an installer for Leo using this script:
	1. Install NSIS (from http://www.nullsoft.com)
	2. Put the leo.nsi file in the directory containing the Leo program files.
	3. Right-click on the leo.nsi file and choose "Compile"
	
Version 1.0 of this script by Joe Orr, donated to public domain.
</t>
<t tx="ekr.20031218072017.2541">@comment ;
@silent
@root ../dist/leo.nsi

; NOTE: this .NSI script is designed for NSIS v1.8+

&lt;&lt; installer settings &gt;&gt;
&lt;&lt; required files section &gt;&gt;
&lt;&lt; optional files section &gt;&gt;
&lt;&lt; file association &gt;&gt;
&lt;&lt; post install section &gt;&gt;
&lt;&lt; uninstall section &gt;&gt;

; eof</t>
<t tx="ekr.20031218072017.2542">@code

# [Installer Attributes]
Name "Leo"
OutFile "leosetup.exe"
Caption "Leo Installer"

&lt;&lt; Additional Installer Settings &gt;&gt;
&lt;&lt; icons used by the installer &gt;&gt;
&lt;&lt; the user license &gt;&gt;
&lt;&lt; the installation dir &gt;&gt;

ComponentText "This will install Leo on your computer. Select which optional components you would also like to install."</t>
<t tx="ekr.20031218072017.2543">@code
Icon c:\prog\leoCVS\leo\Icons\leo_inst.ico
EnabledBitmap c:\prog\leoCVS\leo\Icons\leo_on.bmp
DisabledBitmap c:\prog\leoCVS\leo\Icons\leo_off.bmp</t>
<t tx="ekr.20031218072017.2544">@code

InstallDir "$PROGRAMFILES\Leo"
InstallDirRegKey HKEY_LOCAL_MACHINE "SOFTWARE\EKR\leo" ""
DirShow show # (make this hide to not let the user change it)
DirText "Select the directory to install Leo in:"</t>
<t tx="ekr.20031218072017.2545">@code
LicenseText "You must agree to this license before installing."
LicenseData c:\prog\leoCVS\leo\doc\LICENSE.TXT</t>
<t tx="ekr.20031218072017.2546">@ You may not need to change these for your own app...
@c
ShowInstDetails show
AutoCloseWindow false
SilentInstall normal
CRCCheck on
SetCompress auto
SetDatablockOptimize on
SetOverwrite ifnewer
WindowIcon off</t>
<t tx="ekr.20031218072017.2547">@code

Section "Leo" ; (default, required section)

  &lt;&lt; check to see whether Python is installed &gt;&gt;

ok:
  # List all files to included in installer	
  
  SetOutPath $INSTDIR
  File c:\prog\leoCVS\leo\__init__.py
  CreateShortCut "$INSTDIR\Shortcut to leo.py.lnk" "$INSTDIR\src\leo.py" "" "$INSTDIR\src\leo.py" 0

  SetOutPath $INSTDIR\config
  File c:\prog\leoCVS\leo\config\leoConfig.leo
  File c:\prog\leoCVS\leo\config\leoConfig.txt
 
  SetOutPath $INSTDIR\doc
  File c:\prog\leoCVS\leo\doc\LeoDocs.leo
  File c:\prog\leoCVS\leo\doc\README.TXT
  File c:\prog\leoCVS\leo\doc\INSTALL.TXT
  File c:\prog\leoCVS\leo\doc\PKG-INFO.TXT
  File c:\prog\leoCVS\leo\doc\LICENSE.TXT
  # File c:\prog\leoCVS\leo\doc\manifest.in
  
  SetOutPath $INSTDIR\Icons
  File c:\prog\leoCVS\leo\Icons\*.*
  
  SetOutPath $INSTDIR\examples
  
  SetOutPath $INSTDIR\plugins
  File c:\prog\leoCVS\leo\plugins\leoPlugins.leo
  File c:\prog\leoCVS\leo\plugins\*.py
  File c:\prog\leoCVS\leo\plugins\*.ini
  File c:\prog\leoCVS\leo\plugins\*.txt
  
  SetOutPath $INSTDIR\scripts
  File c:\prog\leoCVS\leo\scripts\*.py
  
  SetOutPath $INSTDIR\scripts\install
  File c:\prog\leoCVS\leo\scripts\install\*
  
  SetOutPath $INSTDIR\scripts\other
  File c:\prog\leoCVS\leo\scripts\other\*.py
  
  SetOutPath $INSTDIR\scripts\tangle
  File c:\prog\leoCVS\leo\scripts\tangle\*.py
  
  SetOutPath $INSTDIR\src
  File c:\prog\leoCVS\leo\src\LeoPy.leo
  File c:\prog\leoCVS\leo\src\leo*.py
  
  SetOutPath $INSTDIR\test
  File c:\prog\leoCVS\leo\test\test.leo
 
  SetOutPath $INSTDIR\tools

SectionEnd ; end of default section
</t>
<t tx="ekr.20031218072017.2548">@code
# I sure hope there is a better way to do this, but other techniques don't seem to work.

# Supposedly the Python installer creates the following registry entry
# HKEY_LOCAL_MACHINE\Software\Python\PythonCore\CurrentVersion
# and then we can read find the Python folder location via
# HKEY_LOCAL_MACHINE\Software\Python\PythonCore\{versionno}. 
# Unfortunately, at the time of this writing, the Python installer is NOT writing the first entry. There is no way to know what the current versionno is.
# Hence, the following hack.

# Get pythonw.exe path from registry... except it isn't there, nor is it an environment variable... thanks guys!
# We'll have to get it in a roundabout way
ReadRegStr $9 HKEY_LOCAL_MACHINE "SOFTWARE\Classes\Python.NoConFile\shell\open\command" ""

# cut 8 characters from back of the open command
StrCpy $8 $9 -8

IfFileExists $8 ok tryagain

tryagain:
# ok, that  didn't work, but since the Python installer doesn't seem to be consistent, we'll try again
# cut 3 characters from back of the open command
StrCpy $8 $9 -3

IfFileExists $8 ok ng

ng:
  MessageBox MB_OK "Python is not installed on this system. $\nPlease install Python first. $\n$\nClick OK to cancel installation and remove installation Files."
  
  Delete "$INSTDIR\config\*.*" ; config dir
  RMDir "$INSTDIR\config"
  Delete "$INSTDIR\doc\*.*" ; doc dir
  RMDir "$INSTDIR\doc"
  Delete "$INSTDIR\examples\*.*" ; src dir
  RMDir "$INSTDIR\examples"
  Delete "$INSTDIR\Icons\*.*" ; Icons dir
  RMDir "$INSTDIR\Icons"
  Delete "$INSTDIR\plugins\*.*" ; plugins dir
  RMDir "$INSTDIR\plugins"
  Delete "$INSTDIR\scripts\*.*" ; scripts dir
  RMDir "$INSTDIR\scripts"
  Delete "$INSTDIR\src\*.*" ; src dir
  RMDir "$INSTDIR\src"
  Delete "$INSTDIR\test\*.*" ; test dir
  RMDir "$INSTDIR\test"
  Delete "$INSTDIR\tools\*.*" ; tools dir
  RMDir "$INSTDIR\tools"
  Delete "$INSTDIR\*.*" ; Leo directory
  RMDir "$INSTDIR"

  Quit


</t>
<t tx="ekr.20031218072017.2549">@code

# optional sections

Section "Start Menu Shortcuts"
  CreateDirectory "$SMPROGRAMS\Leo"
  CreateShortCut "$SMPROGRAMS\Leo\Uninstall.lnk" "$INSTDIR\uninst.exe" "" "$INSTDIR\uninst.exe" 0
  CreateShortCut "$SMPROGRAMS\Leo\Leo.lnk" "$8" '"$INSTDIR\src\leo.py"' "$INSTDIR\Icons\LeoApp.ico" 0  
SectionEnd

Section "Desktop Shortcut"
  CreateShortCut "$DESKTOP\Leo.lnk" "$8" '"$INSTDIR\src\leo.py"' "$INSTDIR\Icons\LeoApp.ico" 0
SectionEnd</t>
<t tx="ekr.20031218072017.2550">@code

Section ".leo File Association"
  SectionIn 1
  SectionIn 2
  SectionIn 3

  # back up old value of .leo in case some other program was using it
  ReadRegStr $1 HKCR ".leo" ""
  StrCmp $1 "" Label1
  StrCmp $1 "LeoFile" Label1
  WriteRegStr HKCR ".leo" "backup_val" $1
 
Label1:
  WriteRegStr HKCR ".leo" "" "LeoFile"
  WriteRegStr HKCR "LeoFile" "" "Leo File"
  WriteRegStr HKCR "LeoFile\shell" "" "open"
  WriteRegStr HKCR "LeoFile\DefaultIcon" "" $INSTDIR\Icons\LeoDoc.ico,0 
  WriteRegStr HKCR "LeoFile\shell\open\command" "" '$8 "$INSTDIR\src\leo.py" %1'  

SectionEnd</t>
<t tx="ekr.20031218072017.2551">@code

Section "-post" # (post install section, happens last after any optional sections)

  # add any commands that need to happen after any optional sections here
  WriteRegStr HKEY_LOCAL_MACHINE "SOFTWARE\EKR\leo" "" "$INSTDIR"
  WriteRegStr HKEY_LOCAL_MACHINE "Software\Microsoft\Windows\CurrentVersion\Uninstall\leo" "DisplayName" "Leo (remove only)"
  WriteRegStr HKEY_LOCAL_MACHINE "Software\Microsoft\Windows\CurrentVersion\Uninstall\leo" "UninstallString" '"$INSTDIR\uninst.exe"'

  # write out uninstaller
  WriteUninstaller "$INSTDIR\uninst.exe"

SectionEnd ; end of -post section

</t>
<t tx="ekr.20031218072017.2552">@code

# [ begin uninstall settings/section ]
UninstallText "This will uninstall Leo from your system"
UninstallCaption "Uninstall Leo"
UninstallIcon c:\prog\leoCVS\leo\Icons\uninst.ico

Section Uninstall

DeleteRegKey HKEY_LOCAL_MACHINE "SOFTWARE\EKR\leo"
DeleteRegKey HKEY_LOCAL_MACHINE "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\leo"

&lt;&lt; remove file association &gt;&gt;
&lt;&lt; remove program folder &gt;&gt;
&lt;&lt; remove shortcuts &gt;&gt;

; remove directories used.
RMDir "$SMPROGRAMS\Leo"

SectionEnd ; end of uninstall section</t>
<t tx="ekr.20031218072017.2553">@code

  ReadRegStr $1 HKCR ".leo" ""
  StrCmp $1 "LeoFile" 0 NoOwn ; only do this if we own it
	ReadRegStr $1 HKCR ".leo" "backup_val"
	StrCmp $1 "" 0 RestoreBackup ; if backup == "" then delete the whole key
	  DeleteRegKey HKCR ".leo"
	Goto NoOwn
	RestoreBackup:
	  WriteRegStr HKCR ".leo" "" $1
	  DeleteRegValue HKCR ".leo" "backup_val"
  NoOwn:
</t>
<t tx="ekr.20031218072017.2554">@code
MessageBox MB_YESNO|MB_ICONQUESTION \
			 "Delete all files in Leo Program folder?" \
			 IDNO NoDelete  

  Delete "$INSTDIR\config\*.*" ; config dir
  RMDir "$INSTDIR\config"
  Delete "$INSTDIR\doc\*.*" ; doc dir
  RMDir "$INSTDIR\doc"
  Delete "$INSTDIR\examples\*.*" ; src dir
  RMDir "$INSTDIR\examples"
  Delete "$INSTDIR\Icons\*.*" ; Icons dir
  RMDir "$INSTDIR\Icons"
  Delete "$INSTDIR\plugins\*.*" ; plugins dir
  RMDir "$INSTDIR\plugins"
  Delete "$INSTDIR\scripts\install\*.*" ; scripts\install dir
  RMDir "$INSTDIR\scripts\install"
  Delete "$INSTDIR\scripts\other\*.*" ; scripts\other dir
  RMDir "$INSTDIR\scripts\other"
  Delete "$INSTDIR\scripts\tangle\*.*" ; scripts\tangle dir
  RMDir "$INSTDIR\scripts\tangle"
  Delete "$INSTDIR\scripts\*.*" ; scripts dir
  RMDir "$INSTDIR\scripts"
  Delete "$INSTDIR\src\*.*" ; src dir
  RMDir "$INSTDIR\src"
  Delete "$INSTDIR\test\*.*" ; test dir
  RMDir "$INSTDIR\test"
  Delete "$INSTDIR\tools\*.*" ; tools dir
  RMDir "$INSTDIR\tools"
  Delete "$INSTDIR\*.*" ; Leo directory
  RMDir "$INSTDIR"

NoDelete:
</t>
<t tx="ekr.20031218072017.2555">@code
Delete "$SMPROGRAMS\Leo\*.*"
Delete "$DESKTOP\Leo.lnk"</t>
<t tx="ekr.20031218072017.2556">Leo is Open Software and is distributed under the terms of the Python License. The gist of the license is that Leo is absolutely free, even for commercial use (including resale). There is no GNU-like "copyleft" restriction. The Open Source Initiative board has voted to certify the Python license as Open Source. This license is compatible with the GPL.

Copyright (c) 1997-2003 by Edward K. Ream. All Rights Reserved.

Permission to use, copy, modify, and distribute this software and its documentation for any purpose and without fee is hereby granted, provided that the above copyright notice appear in all copies and that both that copyright notice and this permission notice appear in supporting documentation, and that the names of Leo or Edward K. Ream not be used in advertising or publicity pertaining to distribution of the software without specific, written prior permission.

DISCLAIMER OF WARRANTIES

EDWARD K. REAM (REAM) SPECIFICALLY DISCLAIMS ALL WARRANTIES, EXPRESSED OR IMPLIED, WITH RESPECT TO THIS COMPUTER SOFTWARE, INCLUDING BUT NOT LIMITED TO IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL REAM BE LIABLE FOR ANY LOSS OF PROFIT OR ANY COMMERCIAL DAMAGE, INCLUDING BUT NOT LIMITED TO SPECIAL, INCIDENTAL, CONSEQUENTIAL OR OTHER DAMAGES.</t>
<t tx="ekr.20031218072017.2557"></t>
<t tx="ekr.20031218072017.2558">System requirements for leo.py
------------------------------

leo.py requires Python 2.1 and tcl/tk 8.3 or above.

	Download Python from http://python.org/ 
	Download tcl/Tk from http://tcl.activestate.com/software/tcltk/

Warning: When building Tcl on Linux, do not specify "--enable-threads" .
Only use Tcl with the default "threads not enabled" case.
</t>
<t tx="ekr.20031218072017.2559">
Installing the leo.py on Linux
------------------------------

You can install Leo using the install script provided.  Remember to 'chmod +x' before running this script.

Leo is distributed as a single compressed (.zip) folder.  Simply uncompress this folder, put the folder in a convenient place and run leo.py.  You can run leo.py by double-clicking leo.py.  You can also run leo.py from a Python interpreter as follows:

	import leo
	leo.run() # runs leo.py, opening a new outline.
	leo.go() # runs leo.py after reloading all modules.
	leo.leoOpen(fileName) # runs leo.py, reloads all modules, and opens fileName.

You may specify options using the configuration file called leoConfig.txt.  You should generate this file using leoConfig.leo.</t>
<t tx="ekr.20031218072017.2560">
Installing the leo.py on Windows
--------------------------------

Important: You can install leo.py on Windows using the single-click installer called leosetup.exe.

Leo is distributed as a single compressed (.zip) folder.  Uncompress this folder, put the folder in a convenient place and run leo.py.  You can run leo.py by double-clicking leo.py.  You can also run leo.py from a Python interpreter as follows:

	import leo
	leo.run() # runs leo.py, opening a new outline.
	leo.go() # runs leo.py after reloading all modules.
	leo.leoOpen(fileName) # runs leo.py, reloads all modules, and opens fileName.

You may specify options using the configuration file called leoConfig.txt.  You should generate this file using leoConfig.leo.
</t>
<t tx="ekr.20031218072017.2561">
Installing leo.py on MacOs
--------------------------

Bruce M. Bolden, bruceb@cs.uidaho.edu, is using Leo on MaxOS X.  Here is his description of how to get Leo working there:

I installed: 
- Latest OS X Developer tools
- latest (as of about two weeks ago) tk/tcl
		 MacOSXTk8.4a4-2.tar.gz
- the machopython distribution
http://prdownloads.sourceforge.net/wxpython/MachoPython-2.2.1.dmg

For OS X 10.1, I followed the directions at:
	http://tony.lownds.com/macosx/tkinter.html

That worked fine for 10.1, but didn't work for 10.2.  It
took awhile to find a Python distribution that worked
correctly with tk/tcl.

I was just getting into Leo about a week before 10.2 was released and thought about---what if it breaks....10.2 broke it, but I was able to find a solution as described above.

More re MacOS from Bruce Bolden
-------------------------------

I just finished building tk successfully!  The magic step was the execution of the command

cp ../generic/prolog.ps to ../library/prolog.ps

AFTER 

cd ../../tk/macosx

in the instructions on "Steps to build Tcl/Tk 8.4.0 on MacOS X":

http://mini.net/tcl/4052

I found this solution while looking at the tcl-mac mailing list archive.  The earlier (current?) tar ball on SourceForge did not have the file prolog.ps in the library directory:

http://sourceforge.net/mailarchive/forum.php?thread_id=1060496&amp;forum_id=3853

Copy and Paste seem to work just fine now in Leo!  This was my original question for you.

I also noticed that someone else built everything on OS X 10.2 (Jaguar), but they did it under X.  Since, the new version of Tk appears to support the OS X interface quite well, I'm not going to bother installing X (for now).

So, Leo works two different ways on OS X 10.2.
</t>
<t tx="ekr.20031218072017.2562">
Using shell scripts and batch files to make using Leo easier
------------------------------------------------------------

On Linux, the following shell script will allow you to open foo.leo files by typing leo foo

#!/bin/sh 
python &lt;leopath&gt;/leo.py $1

where &lt;leopath&gt; is replaced with the path to the leo directory. 

On Windows, the equivalent batch file would be:

c:\python22\python &lt;leopath&gt;leo.py %1

</t>
<t tx="ekr.20031218072017.2563">Metadata-Version: 1.0
Name: leo
Version: 4.1-final
Summary: Leo: Literate Editor with Outlines
Home-page: http://webpages.charter.net/edreamleo/front.html
Author: Edward K. Ream
Author-email: edreamleo@charter.net
License: Python
Description: Leo is an outline-oriented editor written in 100% pure Python.
		Leo works on any platform that supports Python 2.1 or 2.2 and the Tk toolkit.
		This version of Leo was developed with Python 2.2.1 and Tk 8.3.2.
		You may download Python from http://python.org/ and
		tcl/Tk from http://tcl.activestate.com/software/tcltk/
		Leo features a multi-window outlining editor, Python colorizing,
		powerful outline commands and many other things, including 
		Unlimited Undo/Redo and an integrated Python shell(IDLE) window.
		Leo will place its own icon in Leo windows provided that you have
		installed Fredrik Lundh's PIL and tkIcon packages:
		Download PIL from http://www.pythonware.com/downloads/index.htm#pil
		Download tkIcon from http://www.effbot.org/downloads/#tkIcon
Platform: Windows, Linux, Macintosh
</t>
<t tx="ekr.20031218072017.2564">Important note: See INSTALL.TXT for installation instructions.

Leo is available at:  http://sourceforge.net/projects/leo/
Leo requires Python 2.1 or above and tcl/tk 8.3 or above.
Leo will work on Linux, Windows and MacOs X Jaguar.

Leo 4.1 Final              February 20, 2004

Leo 4.1 Final is the culmination of four months of work. No significant bugs
have been reported since 4.1 rc4. Several people have contributed nifty plugins
recently. See leoPlugins.leo for full details.

The highlights of Leo 4.1:

- Leo runs in batch mode when invoked with --script aScriptFile.py
- Leo supports Unicode characters (e.g. Chinese) in path and file names.
- @directives and section references are now valid when executing scripts.
- @ignored and orphan nodes now valid in @file-nosent trees.
- Script-based find/change commands.
- Check Outline command.
- Hoist &amp; DeHoist commands.
- A new gui-agnostic architecture: useful for batch mode and unit tests.
- Several new configuration settings.
- Many new unit tests.
- Excellent new plugins.
- A host of bug fixes.</t>
<t tx="ekr.20031218072017.2565"># The manifest template: specifies all files to be included in the distribution.

# Note: these are glob patterns!  Be careful:  .. may not work.

include __init__.py

include config/leoConfig.leo
include config/leoConfig.txt

include doc/LeoDocs.leo
include doc/README.TXT
include doc/INSTALL.TXT
include doc/PKG-INFO.TXT
include doc/LICENSE.TXT

include Icons/*.*

include plugins/*.*
exclude plugins/*.pyc

include src/LeoPy.leo
include src/leo*.py

include scripts/*
include scripts/install/*.py
include scripts/other/*.py
include scripts/tangle/*.py

include test/test.leo

include install
include uninstall
include manifest.in
include MANIFEST

# Setup is more confusing than helpful.
exclude setup.py</t>
<t tx="ekr.20031218072017.2566">@ignore
@color

import prepareSetup
prepareSetup.setup()

import os
# This _must_ be run from the main leo directory
os.system("python setup.py sdist --formats=zip")
</t>
<t tx="ekr.20031218072017.2567">@first #! /usr/bin/env python
@language python
@color

# Prepare to execute setup.py
# This script has access to g.app.  setup.py does not.
import leoGlobals as g
from leoGlobals import true,false

@others

def setup():
	saveAllLeoFiles()
	tangleLeoConfigDotLeo()
	print "preSetup complete"
</t>
<t tx="ekr.20031218072017.2568">def saveAllLeoFiles():
	
	for frame in g.app.windowList:
		c = frame.c
		name = c.mFileName
		if name == "": name = "untitled"
		if c.changed:
			print "saving ",name
			c.save()
</t>
<t tx="ekr.20031218072017.2569">def tangleLeoConfigDotLeo():
	
	from leoGlobals import os_path_join

	c = None
	name = g.os_path_join("config","leoConfig.leo")
	oldtop = g.top()
	for frame in g.app.windowList:
		if frame.c.mFileName == name :
			c = frame.c
			break
	
	if c == None:
		c = g.top()
		flag,frame = g.openWithFileName(name,c)
		if not flag:
			print "can not open ",name
			return
		c = frame.c
			
	print "Tangling ", name
	g.app.setLog(oldtop.frame.log) # Keep sending messages to the original frame.
	c.tangleCommands.tangleAll()
	c.close()
	g.app.setLog(oldtop.frame.log)</t>
<t tx="ekr.20031218072017.2570">@first #! /usr/bin/env python
@language python

@ Script for creating distributions of leo.py using Python's distutils package.
Invoke this script as follows:

import os
os.system(r"cd C:\prog\leoCVS\leo")
os.system("python setup.py sdist --formats=zip")
@c

true = 1 ; false = 0

from distutils.core import setup
import distutils,os,sys

@others

if 1: # Use this only for final distributions.
	if sys.argv[1] == "sdist":
		setDefaultParams()

# modules = generateModules()
modules = []

setup (
	&lt;&lt; setup info for setup.py &gt;&gt;
)

if sys.argv[1] == "sdist":
	print "setup complete"</t>
<t tx="ekr.20031218072017.2571">name="leo",
version="4.1-final",
author="Edward K. Ream",
author_email="edream@tds.net",
url="http://personalpages.tds.net/~edream/front.html",
py_modules=modules, # leo*.py also included in manifest
description = "Leo: Literate Editor with Outlines",
licence="Python", # [sic], not license
platforms=["Windows, Linux, Macintosh"],
long_description =
"""Leo is an outline-oriented editor written in 100% pure Python.
Leo works on any platform that supports Python 2.1 or 2.2 and the Tk toolkit.
This version of Leo was developed with Python 2.2.1 and Tk 8.3.2.

Download Python from http://python.org/
Download tcl/Tk from http://tcl.activestate.com/software/tcltk/

Leo features a multi-window outlining editor with powerful outline commands,
support for literate programming features, syntax colorizing for many common
languages, unlimited Undo/Redo, an integrated Python shell(IDLE) window,
and many user options including user-definable colors and fonts and user-
definable shortcuts for all menu commands.

Leo a unique program editor, outline editor, literate programming tool,
data manager and project manager. Cloned outlines are a key enabling feature
that make possible multiple views of a project within a single Leo outline.
"""</t>
<t tx="ekr.20031218072017.2572">def printReminders ():

	print
	print "- Update version numbers"
	print "- Clear Default Tangle Directory"
	print "- Distribute both leox-y.zip and leosetup.exe"
	print</t>
<t tx="ekr.20031218072017.2573"># Generate the list of modules in the distribution.

def generateModules():
	
	from leoGlobals import os_path_join,os_path_split,os_path_splitext

	dir = os.getcwd()
	dir = g.os_path_join(dir,"src")
	files = os.listdir(dir)
	modules = []
	for f in files:
		head,tail = g.os_path_split(f)
		root,ext = g.os_path_splitext(tail)
		if tail[0:3]=="leo" and ext==".py":
			modules.append(root)
			
	modules.sort()
	# print "modules:", modules
	return modules
</t>
<t tx="ekr.20031218072017.2574">def replacePatterns (file,pats):
	
	from leoGlobals import os_path_join

	try:
		path = os.getcwd()
		name  = g.os_path_join(path,file)
		f = open(name)
	except:
		print "*****", file, "not found"
		return
	try:
		data = f.read()
		f.close()
		changed = false
		for pat1,pat2 in pats:
			newdata = data.replace(pat1,pat2)
			if data != newdata:
				changed = true
				data = newdata
				print file,"replaced",pat1,"by",pat2
		if changed:
			f = open(name,"w")
			f.write(data)
			f.close()
	except:
		import traceback ; traceback.print_exc()
		sys.exit()
</t>
<t tx="ekr.20031218072017.2575">def setDefaultParams():
	
	from leoGlobals import os_path_join

	print "setDefaultParams"

	pats = (
		("create_nonexistent_directories = 1","create_nonexistent_directories = 0"),
		("read_only = 1","read_only = 0"),
		("use_plugins = 1","use_plugins = 0"))

	replacePatterns(g.os_path_join("config","leoConfig.leo"),pats)
	replacePatterns(g.os_path_join("config","leoConfig.txt"),pats)</t>
<t tx="ekr.20031218072017.2576">@first #! /usr/bin/env python
@language python
@color

# Postprocess after executing setup.py
# This script has access to g.app.  setup.py does not.
import leoGlobals as g
from leoGlobals import true,false

@others

def setup():
	if 1: # Use this only for final distributions.
		unsetDefaultParams()
	print "postSetup complete"
</t>
<t tx="ekr.20031218072017.2577">def unsetDefaultParams():
	
	from leoGlobals import os_path_join

	print "unsetDefaultParams"
	
	pats = (("use_plugins = 0","use_plugins = 1"),)

	replacePatterns(g.os_path_join("config","leoConfig.leo"),pats)
	replacePatterns(g.os_path_join("config","leoConfig.txt"),pats)</t>
<t tx="ekr.20031218072017.2578">@color
@lineending nl
@language shell</t>
<t tx="ekr.20031218072017.2579">#!/bin/sh

############################################
# This is a small install script to install
# leo on GNU/Linux. 
# Leo is Open Software and is distributed under the terms 
# of the Python License.  Please see:
# docs/LICENSE.TXT for details.
#
# This install script created by Frank Merenda 
# (fmerenda@yahoo.com)
#
# verison 1.0 - 06/30/2003
# - initial creation 
#
# 
# - minor changes to try and use a "prefix" directory
# - step 5 copies the src and config directories as 
# directories rather that file (this seems to prevent
# the need to remove ".." from the python scripts on RH9
# anyway.)
# - IMPORTANT NOTE: I did not understand step 6 so its
# commented out. Someone who knows leo better than I do
# should look at this.
# - Note: I'm a leo newbie so I don't know if this fixes plugin
# problems since I don't think I use them.
# David Holden (dh@iucr.org)
#   
#
############################################


################################
# Variables for usage in this script.
################################
LEO_PREFIX="/usr/local"
LEO_RUN_SCRIPT_SOURCE='./scripts/install/leo-script.txt'
LEO_RUN_SCRIPT_OUTPUT="${LEO_PREFIX}/bin/leo"
LEO_LIB_DIR="${LEO_PREFIX}/lib/leo"


echo ""
echo "Prefix directory set to \"$LEO_PREFIX\""

################################
# Step 1
# Verify the current user is root
################################
CURRENT_USER=$(whoami)

if [ "$CURRENT_USER" = "root" ] ; then
	echo ""
    echo Verified user is root
else
	echo ""
    echo You must be root to run this program
    exit 0;
fi    
   
################################
# Step 2
# Make the directory structure
################################
echo ""
echo Making directory structure $LEO_LIB_DIR

RESULTS=`mkdir -p $LEO_LIB_DIR 2&gt;&amp;1`
if [ $? -ne 0 ]; then
    echo Failure making directory $LEO_LIB_DIR!
    exit 0;
fi
   
################################
# Step 3
# Copy the files
################################
echo ""
echo Copying files.....

RESULTS=`cp -rp * $LEO_LIB_DIR/ 2&gt;&amp;1`
if [ $? -ne 0 ]; then
    echo Failure copying files to $LEO_LIB_DIR
    exit 0;
fi

###############################
# Step 4
# Clean up the duplicate files so it's not
# confusing to the user. These files
# Are copied directly to the main 
# directory. Assume you have permissions
# since you checked above.
###############################
rm -rf $LEO_LIB_DIR/src
rm -rf $LEO_LIB_DIR/config
   
###############################
# Step 5
# Don't make a liar out of me in step 4.
# Copy the files. that you just deleted....   
###############################
cp -rp src $LEO_LIB_DIR/.
cp -rp config $LEO_LIB_DIR/.

###############################
# Step 6
# Add in symbolic links to point to 
# leoConfig and LeoDocs.   
###############################
#mkdir -p /usr/lib/config 
#chmod 777 /usr/lib/config
#ln -sf /$LEO_LIB_DIR/leoConfig.leo /usr/lib/config/leoConfig.leo
#chmod 666 /$LEO_LIB_DIR/leoConfig.leo  
#
#ln -sf /$LEO_LIB_DIR/leoConfig.txt /usr/lib/config/leoConfig.txt
#chmod 666 /$LEO_LIB_DIR/leoConfig.txt  
#
#mkdir -p /usr/lib/doc
#ln -sf $LEO_LIB_DIR/doc/LeoDocs.leo /usr/lib/doc/LeoDocs.leo
#chmod 666 $LEO_LIB_DIR/doc/LeoDocs.leo 
   
################################
# Step 7
# Create the startup script
################################
echo ""
echo Creating startup script located at: $LEO_RUN_SCRIPT_OUTPUT

echo "python ${LEO_PREFIX}/lib/leo/src/leo.py \$1" &gt; $LEO_RUN_SCRIPT_OUTPUT

RESULTS=`chmod 755 $LEO_RUN_SCRIPT_OUTPUT`   
   
echo ""
echo "***** Leo installed successfully - "
echo "      make sure ${LEO_PREFIX}/bin is in your path then"
echo "      type 'leo filename.leo' to use it."   
echo "                                                 *****"
echo ""
exit 0;</t>
<t tx="ekr.20031218072017.2580">#!/bin/sh

############################################
# This is a small install script to install
# leo on GNU/Linux. 
# Leo is Open Software and is distributed under the terms 
# of the Python License.  Please see:
# docs/LICENSE.TXT for details.
#
# This install script created by Frank Merenda 
# (fmerenda@yahoo.com)
#
# verison 1.0 - 06/30/2003
# - initial creation 
#
# 
# - minor changes to try and use a "prefix" directory
# - step 5 copies the src and config directories as 
# directories rather that file (this seems to prevent
# the need to remove ".." from the python scripts on RH9
# anyway.)
# - IMPORTANT NOTE: I did not understand step 6 so its
# commented out. Someone who knows leo better than I do
# should look at this.
# - Note: I'm a leo newbie so I don't know if this fixes plugin
# problems since I don't think I use them.
# David Holden (dh@iucr.org)
#   
#
############################################


################################
# Variables for usage in this script.
################################
LEO_PREFIX="/usr/local"
LEO_RUN_SCRIPT_SOURCE='./scripts/install/leo-script.txt'
LEO_RUN_SCRIPT_OUTPUT="${LEO_PREFIX}/bin/leo"
LEO_LIB_DIR="${LEO_PREFIX}/lib/leo"

echo ""
echo "Prefix directory set to \"$LEO_PREFIX\""

################################
# Step 1
# show commands to remove leo
################################
echo ""
echo "To uninstall leo check the following \"rm\" commands
if they look ok execute them as root."

echo "
rm -fr $LEO_LIB_DIR
rm -f  $LEO_RUN_SCRIPT_OUTPUT

"</t>
<t tx="ekr.20031218072017.2581">@ignore</t>
<t tx="ekr.20031218072017.2582">def getBuildNumber(self):
	c = self
	return c.ver[10:-1] # Strip off "(dollar)Revision" and the trailing "$"

def getSignOnLine (self):
	c = self
	return "Leo 4.1 final, build %s, February 18, 2004" % c.getBuildNumber()
	
def initVersion (self):
	c = self
	c.ver = "$Revision$" # CVS will update this.
	
def signOnWithVersion (self):

	c = self
	color = g.app.config.getWindowPref("log_error_color")
	signon = c.getSignOnLine()
	n1,n2,n3,junk,junk=sys.version_info
	tkLevel = c.frame.top.getvar("tk_patchLevel")
	
	g.es("Leo Log Window...",color=color)
	g.es(signon)
	g.es("Python %d.%d.%d, Tk %s, %s" % (n1,n2,n3,tkLevel,sys.platform))
	g.enl()</t>
<t tx="ekr.20031218072017.2583">@nocolor</t>
<t tx="ekr.20031218072017.2584">Leo 4.0 final                     October 17, 2003

More than a year in the making, Leo 4.0 is finally here.

Highlights of 4.0 final:
-----------------------

** Improved and simplified format of derived files.
	- Eliminated child indices, extraneous blank lines and @body sentinels.
	- Eliminated @node sentinels that indicate outline structure.
	- New @nl and @nonl sentinels indicate where newlines are and aren't.
	- These changes will largely eliminate unwanted cvs conflicts.

** Greatly improved error handling.
	- Reading derived files _never_ alter outline structure or links.
	- Read errors leave the outline completely unchanged.
	- Broken clone links are gone forever.
	- As a result, 4.0 is much safer than all previous versions.

** Full compatibility will previous versions of Leo.
	- Leo 4.0 reads all derived files properly, regardless of version.
	- Leo writes new-format derived files by default, and this default may be changed.
	- New commands in the read/write menu allow you to explicitly specify the format of derived files.

* New commands:
	- Write 3.x Derived File and Write 4.x Derived File.
	- Import Derived File.
	- Clear Recent Files.

* Dozens of other improvements, including:
	- Better Unicode support.
	- New configuration settings.
	- Several new plugins.

See the notes for the various beta releases for full details.</t>
<t tx="ekr.20031218072017.2585"></t>
<t tx="ekr.20031218072017.2586">Leo 3.12.1 beta 1                     July 25, 2003

This version exists to test the new Linux install scripts and the related distribution stuff.

Leo 3.12                              July 17, 2003

Window sizes are now in pixels rather than grid units, so you must resize existing outlines (.leo files) when opening them for the first time using this version of Leo.  Don't panic!

Highlights of this version:

* Plugged a huge memory leak.
* Fixed a major bug involving undo.
* Added Icon &amp; Status areas to Leo window for use by plugins.
* Important new plugins:
  - The file leoPlugins.leo now contains all plugins.
  - add_directives.py allows plugins to define new directives.
  - color_markup.py supports wiki-styled markup.
  - mod_spelling.py checks spelling (requires aspell to be installed).
  - nav_buttons.py creates browser-style navigation plugins in the icon area.
  - plugins_menu.py creates a Plugins menu items for all loaded plugins.
  - scripts_menu.py creates a Scripts menu for all scripts in scripts folder.
  - spell
  - trace_gc traces all changes to memory at idle time.
* Other enhancements:
  - Redesigned the Find panel.   Non-functional options are dimmed.
  - Added @wrap and @nowrap directives.
  - Added Write Dirty @file Nodes command.
  - Added several new "stub hooks".
  - Hyperlinks are now enabled by default.
  - Leo now loads plugins in alphabetical order.
  - Leo now remembers the size and location of Leo windows.
  - Undo now restores the insert point or the selection range after most commands.
  - Added apply button to Font panel.
  - Improved the reporting of characters that do not exist in the present encoding.
* The usual assortment of bug fixes and minor improvements.
  - There are no known bugs in this version of Leo.</t>
<t tx="ekr.20031218072017.2587">Leo 3.11.1                       May 1, 2003

This version fixes two bugs:
	
- Leo threw an exception at startup on some Linux systems.
- Creating clones by control dragging did not always work.

This code contains permanently disabled 4.0 code.

Leo 3.11                         April 27, 2003

This version of Leo contains many important improvements since 3.10,
especially support for unicode and a new plugin architecture.

The Highlights of 3.11:

** Leo supports unicode properly.
  - New @encoding directives specifies encoding for derived files.
  - New settings specify default encodings for .leo and derived files.
  - Derived files specify encodings used to create them.
** A new plugin architecture for customizing Leo.
- New commands:
  - Toggle Angle Brackets.
  - Insert Time/Date (in headline or body text).
  - Go To First/Last Node, Parent, Next/Previous Sibling.
  - Write Missing @file Nodes.
  - Expand/Contract Node.
- Improved commands:
  - Fixed a huge performance bug that slowed moving nodes left.
  - Expand/Contract commands now operate on the selected tree.
	  ( A major improvement)
  - Sort Siblings command can now sort top-level nodes.
  - Leo now allows multiple writes of cloned nodes.
	  (Useful when different @path directives are in effect.)
- Other improvements:
  - New @lineending directive specifies line endings.
  - Improved syntax coloring for html and xml.
  - Leo scrolls partially visible headlines into full view.
  - Added "Replace tabs with spaces" checkbox in Prefs panel.
- New settings in leoConfig.leo/.txt.
  - Added "tk_encoding" setting and related logic.
  - Colors for Show Invisibibles command and body_insertion_cursor
  - Settings affecting when control-drags start.
  - Defaults for unicode (see above).
- Many other bug fixes and improvements.</t>
<t tx="ekr.20031218072017.2588">Leo 3.10                             December 14, 2002

This version of Leo corrects bugs, improves Leo's documentation and adds many new features:

- Rewrote Scripting Chapter in Leo's Users Guide.
- Improved the Customization Chapter of the Users Guide.
- Adds several customizations contributed by Leo's users.
  Among these: @read-only nodes. Reading empty .leo files.
  Redirecting stderr and stdout to Leo's log pane.
- New Mark Clones and Go To Next Clone commands.
- New Export Headlines command.
- Control-dragging a node now clones it.
- New "Node Only checkbox in the Find/Change panel.
- @root-code trees start in code mode by default.
  This allows @root trees to work like @file trees.
- @root-doc  trees start in doc  mode by default.
- Converted leoConfig.py to use @root-code
- New at_root_bodies_start_in_doc_mode option in leoConfig.py.
  Specifies whether @root trees work like @root-code or @root-doc.
- New synonyms: @file-asis = @silentfile
  @file-nosent = @nosentinelsfile ; @file-noref = @rawfile.
- Leo now supports navigation of menus using underlined menus.
- Added an easy way to replace any Leo method by a function.
  Hooks can now override part of Leo's code!
- Added routines to redirect stderr and stdout to Leo's log pane.
  These routines can be called from hooks.
- Added "event1" and "event2" hooks for customize event handling.
- Improved Leo's window icon, and improved how that icon is loaded.
- Added contributed code to support @read-only nodes.
  This code show how easy it is to customize Leo.
- The usual assortment of bug fixes and minor improvements.
  Actually, this release fixes more than the usual number of bugs.</t>
<t tx="ekr.20031218072017.2589">Leo 3.9                               Nov 23, 2002

This is one of the most interesting versions of Leo ever released:

* Major performance improvements:
  - Incremental syntax coloring speeds response when typing.
  - Incremental undo drastically reduces memory used.

* Major improvements in customizing Leo:
  - Leo looks in the file customizeLeo.py for user-specific customizations.
  - Leo calls "hook routines" in customizeLeo.py for all commands and events.
	These hook routines can modify or replace any command or event.
  - New convenience routines simplify creating and modifying menus.
  - Easy translation of menus to other languages using customizeLeo.py.

* Better integration with other tools:
  - The Open With command allows you to communicate back and forth to other editors.
  - The Go To Line Number command converts lines numbers in derived files
	to locations in the outline.
  - Double-clicking the icon of a @url node launches any url in your web browser.
  - The Execute Script command executes Python code in any body pane.
	This is much more convenient than opening Leo's Idle window.
  - Much better support for cweb. At last, Leo has a power user of cweb.
	By default, @space, @* and @** sections are colored as latex text.
	Leo properly generates @q..@&gt; sentinels.
  - @nosentinelfile is like @file except Leo writes no sentinel lines.

* Other improvements:
  - Optional Emacs-style auto-indent.
  - Reformat Paragraph command.
  - Leo will optionally create nonexistent directories specified in
	@file, @root or @path, including all nonexistent parent directories.
  - Leo will place its own icon in Leo windows provided that you have
	installed Fredrik Lundh's PIL and tkIcon packages.
  - The usual assortment of bug fixes.
</t>
<t tx="ekr.20031218072017.2590">Leo 3.8                                 October 29, 2002

Many major improvements have been made to Leo, all made as the result of user requests:

- New @rawfile and @silentfile trees complement @file trees.
  @rawfile and @silentfile trees create derived files without using sections.
  @rawfile files contain only those sentinels needed to automatically untangle them.
  @silentfile trees contain no sentinels at all.
- New @raw and @end_raw directives allow unformatted code within @file trees.
- Much better support for CWEB.  You may organize .w files using noweb!
- The @comment and @language directives may now apply simultaneously.
- Leo can now read, remember and write &lt;?xml-stylesheet...?&gt; lines,
  under control of the new stylesheet option.
- The new output_newline option specifies the line endings used when writing files.
- The new output_initial_comment option specifies the text to appear
  in an @comment sentinel at the start of each derived file.
- New commands in the help menu make it much easier to change configuration options.
- Dozens of minor improvements and bug fixes.</t>
<t tx="ekr.20031218072017.2591">Leo 3.7                                 October 9, 2002

Many improvements have been made to Leo.  The highlights:

- Now works with Python 2.1.  Previous versions required Python 2.2.
- Many new user options, including user-definable shortcuts for all commands.
  and colors for all parts of Leo's windows.
  As a result, it is now possible to use arrow keys as you desire.
- Minimal support for Unicode Latin-1 (iso-8859-1) encoding. Better support is coming.
- Improved handling of relative path names.
- The @first directive allows lines to precede the opening @+leo sentinel line.
- The @last  directive allows lines to follow  the closing @-leo sentinel line.
- Better support for Perl+pod.
- Leo now ends all lines with '\n' regardless of platform.
- Leo is now compatible with Python 2.1.
- Simplified sentinels reduce spurious CVS diffs.
- Many other minor improvements and bug fixes.
</t>
<t tx="ekr.20031218072017.2592">Leo 3.6                                   September 11, 2002

Highlights:

- Fixed a large number of bugs, especially bugs that appear only on Linux.
- Leo now remembers the previous insertion point and location of the scrollbar when switching between nodes.
- Added Match Brackets command.
- Added support for MouseWheel (Linux only).
- Added support for LaTex and PHP.
- Improved all aspects of the Help menu.
- Discovered a minor bug involving the Python (Idle) window and documented a workaround.
</t>
<t tx="ekr.20031218072017.2593">Leo 3.5                                    August 14, 2002

The many bugs were reported in 3.4 show that  Leo is being heavily used.  This version corrects all known bugs and adds some new features:

- Added new entries in the help menu,
  (Including a link to Joe Orr's excellent ScreenBook tutorial).
- Added configuration options for horizontal scrollbars.
- Added an importFiles script for mass imports.
- Added better warnings for read-only files.
- Removed all '\r' characters when reading derived files.
- Fixed crasher in Read Outline Only command.
- Fixed crasher when leoConfig.txt did not exist.
- Many small improvements and bug fixes.</t>
<t tx="ekr.20031218072017.2594">Leo 3.4                                     August 11, 2002

This version contains many small improvements and bug fixes:

- Fixed several crashers involving Unicode.
- The Show Invisibles command now makes blanks and tabs look much better.
- Created leoConfig.leo, from which leoConfig.txt is now derived.
- Added save_clears_undo_buffer configuration option.
- Fixed a large number of problems with the configuration code.
- The usual minor improvements and bug fixes.</t>
<t tx="ekr.20031218072017.2595">Leo 3.3                                     August 3, 2002

This version of Leo:

- Adds support for Unicode.
- Improved the Import commands.
- Fixed numerous bugs related to configuration settings.
- Fixed the "Javadoc" bug and several latent bugs related to it.</t>
<t tx="ekr.20031218072017.2596">Leo 3.2                                     July 30, 2002

This version generalizes the @others directive, improves the Import command and fixes several bugs.  See the children of this node for full details.

The highlights:

- Nested @others directives are now valid, an important improvement.
  This simplifies files that define more than one class.
- Improved the Import command and squashed several bugs lurking there.
- Made the various Go commands in the Outline-Move/Select menu functional
  by reassigning keyboard shorts
- Fixed a crasher in the Prefs Panel.
- Fixed numerous bugs in the Set Colors command.
- Fixed syntax coloring of C strings that span multiple lines.
- The usual minor improvements and bug fixes.
</t>
<t tx="ekr.20031218072017.2597">Leo 3.1                                     July 20, 2002

This version fixes a blunder that affects only  Leo 3.0.
I recommend that all users of 3.0 upgrade to 3.1.

With this release Leo's to-do list is now empty!
I shall fix bugs as they are reported.
I'll add new features only if convinced that they contribute significantly to Leo.

The highlights:

- Fixed a blunder: Leo 3.0 did nothing when it was opened directly from  Leo.
  (Opening leo using openLeo.py did work.)
- Created a compare panel to control scripts in leoCompare.py.
- Added many new settings in leoConfig.txt to initialize the compare panel.
- The FAQ tells how to add support for new languages.
- The usual minor improvements and bug fixes.</t>
<t tx="ekr.20031218072017.2598">Leo 3.0                                     July 16, 2002

This version is called 3.0 because it can optionally produce files that
can _not_ be read by the  Leo 2.x or the Borland version of Leo.
By default,  Leo 3.0 _does_ produce files that all previous versions of Leo can read.

As always, see LeoDocs.leo for full details.  The highlights:

- Many new user options in leoConfig.txt, including, among others,
  fonts in all panes, colors for syntax coloring and default window size and position.
- Support for .leo files with XML types like "ISO-8859-1", controlled by a user option.
  Note: by default, Leo writes files compatible with previous versions of Leo.
- Powerful new Color and Font pickers, fully connected to user options.
- Added Toggle Split Direction command, under control of user options.
- Added autoscrolling in the outline pane.
- Windows open at the position in which they were saved.
- The size and position of new windows can be controlled with user options.
- Eliminated drawing problems while opening files.
- Improved syntax coloring for @comment plain.
- The Convert All Blanks and Convert All Tabs commands are now undoable.
- Leo warns and aborts if Python 2.2 or above is not running.
- The usual bug fixes.
</t>
<t tx="ekr.20031218072017.2599"></t>
<t tx="ekr.20031218072017.2600">Leo version 2.5.1                           July 7, 2002

This version corrects crashers that affect undo/redo move commands.
Version 2.5 has been withdrawn.

ANYONE USING 2.5 SHOULD IMMEDIATELY SWITCH TO 2.5.1.

Leo version 2.5                             July 7, 2002

See LeoDocs.leo for full details.  The highlights:

- Leo supports tab widths properly, and negative tab widths cause
  Leo to convert tabs to blanks as you type.
- Three new commands appear in the Edit Body menu:
  Convert Tabs, Convert All Tabs and Convert All Blanks.
  Convert All Tabs and Convert All Spaces convert the entire selected tree.
- Leo now allows you to override selected preferences using a
  configuration file called leoConfig.txt.
  Leo acts as before if this file does not exist.
- The Preferences panel is now contains Ok, Cancel and Revert buttons.
- Cut and paste work properly in all situations.
  You can cut and paste between Leo and other applications,
  or between two different copies of Leo.
- Added the Recent Files submenu to the File menu.
- Fixed several crashers.
- Fixed several bugs in the Import commands.
- Leo will no longer abort reading if it detects an invalid directory name
  in the Default Tangle Directory in the Preferences panel.</t>
<t tx="ekr.20031218072017.2601">Leo version 2.4                             June 20, 2002

This version fixes some annoying bugs and adds some nice features:

- Leo now properly highlights the headline of a newly created node.
- The Edit Headline command now works properly.
  Double and triple clicking in a headline now works as expected.
- You can now reorganize drag headlines around.
  You must drag from a node's icon and release on another node's icon.
- You can now open .leo files in  Leo by double clicking on .leo files,
  provided that you associate  Leo with .leo files.
- Improved error recovery when there are errors writing .leo files.
- All parts of LeoDocs.leo now match the documentation on Leo's web site.</t>
<t tx="ekr.20031218072017.2602">Leo version 2.3                             June 12, 2002

This version fixes a minor problem with Leo.

- The code that reads and writes @file nodes now uses the directory containing the
 .leo file as a default when the Default Tangle Directory setting is empty in the Preferences panel.
- The Tangle and Untangle commands have used this convention for a long time.
- This default allows us to distribute LeoPy.leo without specifying
  a directory in the Preferences Panel.</t>
<t tx="ekr.20031218072017.2603">Leo version 2.2                             June 2, 2002

The version fixes two bugs that happen rarely and can cause loss of data when they do happen.

- In certain circumstances  Leo v2.1 would delete most of an outline when
  a node was moved in front of the previous root node!
- All previous versions of Leo will crash when saving body text containing unicode characters.
  This could occur as the result of cutting and pasting text from another application into the body pane.
- Leo now writes body text containing unicode characters using Python's u-prefixed notation.
  That is, the body text is written as: u'escaped_text', where escaped text replaces unicode characters
  not in the ascii character set by escape sequences of the form \uxxxx.
- The result contains nothing but ascii characters, so Leo will have no problem reading it.
  Naturally, compilers and other tools may not understand Python's notation,
  so you may have to convert escaped text to something that your tools can understand.

Edward K. Ream</t>
<t tx="ekr.20031218072017.2604"></t>
<t tx="ekr.20031218072017.2605">@first #! /usr/bin/env python

"""Entry point for Leo in Python."""

@language python

&lt;&lt; Import pychecker &gt;&gt;

# Warning: do not import any Leo modules here!
# Doing so would make g.app invalid in the imported files.

import os,string,sys

@others

if __name__ == "__main__":
	if len(sys.argv) &gt; 1:
		if sys.platform=="win32": # Windows
			fileName = string.join(sys.argv[1:],' ')
		else:
			fileName = sys.argv[1]
		run(fileName)
	else:
		run()



</t>
<t tx="ekr.20031218072017.2606">@ pychecker is extremely useful, and it sometimes reports problems erroneously.  In particular, the following warnings are invalid:

in leoFrame.py and leoNodes.py: warnings about the event param not being used. pychecker doesn't understand that these routines are Tkinter callbacks.

in leoApp.py and leoGlobals.py: pychecker doesn't seem to handle globals very well.  There are spurious warnings about globals.

several files: pychecker complains about several routines being "too big", i.e., pychecker doesn't understand about literate programming.

@c

if 0: # Set to 1 for lint-like testing.  This can also be done in idle.
	try:
		import pychecker.checker
	except: pass</t>
<t tx="ekr.20031218072017.2607">@ To gather statistics, do the following in a Python window, not idle:

	import leo
	leo.profile()  (this runs leo)
	load leoDocs.leo (it is very slow)
	quit Leo.
@c

def profile ():
	
	"""Gather and print statistics about Leo"""

	import profile, pstats
	
	name = "c:/prog/test/leoProfile.txt"
	profile.run('leo.run()',name)

	p = pstats.Stats(name)
	p.strip_dirs()
	p.sort_stats('cum','file','name')
	p.print_stats()</t>
<t tx="ekr.20031218072017.2608">@first # -*- coding: utf-8 -*-

@language python

import leoGlobals as g
from leoGlobals import true,false

import os,sys

class LeoApp:

	"""A class representing the Leo application itself.
	
	Ivars of this class are Leo's global variables."""
	
	@others
</t>
<t tx="ekr.20031218072017.2609">def closeLeoWindow (self,frame):
	
	"""Attempt to close a Leo window.
	
	Return false if the user veto's the close."""
	
	c = frame.c

	if c.changed:
		veto = frame.promptForSave()
		# print "veto",veto
		if veto: return false

	g.app.setLog(None) # no log until we reactive a window.
	
	g.doHook("close-frame",c=c) # This may remove frame from the window list.
	
	if frame in g.app.windowList:
		g.app.destroyWindow(frame)
	
	if g.app.windowList:
		# Pick a window to activate so we can set the log.
		w = g.app.windowList[0]
		w.deiconify()
		w.lift()
		g.app.setLog(w.log)
	else:
		g.app.finishQuit()

	return true # The window has been closed.
</t>
<t tx="ekr.20031218072017.2610">def createTkGui (self,fileName=None): # Do NOT omit fileName param: it is used in plugin code.
	
	"""A convenience routines for plugins to create the default Tk gui class."""
	
	import leoTkinterGui # Do this import after app module is fully imported.

	g.app.gui = leoTkinterGui.tkinterGui()
	g.app.root = g.app.gui.createRootWindow()
	g.app.gui.finishCreate()
	
	if fileName:
		print "Tk gui created in", g.shortFileName(fileName)</t>
<t tx="ekr.20031218072017.2611">def destroyAllGlobalWindows (self):
	
	for w in self.globalWindows:
		w.destroySelf()
		
	self.globalWindows = []
	
	self.findFrame = None
	self.pythonFrame = None
		
	g.doHook("destroy-all-global-windows")
</t>
<t tx="ekr.20031218072017.2612">def destroyAllOpenWithFiles (self):

	"""Try to remove temp files created with the Open With command.
	
	This may fail if the files are still open."""
	
	# We can't use g.es here because the log stream no longer exists.

	for dict in self.openWithFiles[:]: # 7/10/03.
		g.app.destroyOpenWithFileWithDict(dict)
		
	# Delete the list so the gc can recycle Leo windows!
	g.app.openWithFiles = []</t>
<t tx="ekr.20031218072017.2613">def destroyOpenWithFilesForFrame (self,frame):
	
	"""Close all "Open With" files associated with frame"""
	
	# Make a copy of the list: it may change in the loop.
	openWithFiles = g.app.openWithFiles

	for dict in openWithFiles[:]: # 6/30/03
		c = dict.get("c")
		if c.frame == frame:
			g.app.destroyOpenWithFileWithDict(dict)
</t>
<t tx="ekr.20031218072017.2614">def destroyOpenWithFileWithDict (self,dict):
	
	path = dict.get("path")
	if path and g.os_path_exists(path):
		try:
			os.remove(path)
			print "deleting temp file:", g.shortFileName(path)
		except:
			print "can not delete temp file:", path
			
	# Remove dict from the list so the gc can recycle the Leo window!
	g.app.openWithFiles.remove(dict)</t>
<t tx="ekr.20031218072017.2615">def destroyWindow (self,frame):
		
	g.app.destroyOpenWithFilesForFrame(frame)

	g.app.windowList.remove(frame)

	# force the window to go away now.
	frame.destroySelf() </t>
<t tx="ekr.20031218072017.2616">def forceShutdown (self):
	
	"""Forces an immediate shutdown of Leo at any time.
	
	In particular, may be called from plugins during startup."""
	
	self.log = None # Disable writeWaitingLog
	self.killed = true
	
	for w in self.windowList[:]:
		self.destroyWindow(w)

	self.finishQuit()</t>
<t tx="ekr.20031218072017.2617">def onQuit (self):
	
	g.app.quitting = true
	
	while g.app.windowList:
		w = g.app.windowList[0]
		if not g.app.closeLeoWindow(w):
			break

	g.app.quitting = false # If we get here the quit has been disabled.


</t>
<t tx="ekr.20031218072017.2618">@ According to Martin v. Löwis, getdefaultlocale() is broken, and cannot be fixed. The workaround is to copy the g.getpreferredencoding() function from locale.py in Python 2.3a2.  This function is now in leoGlobals.py.
@c

def setEncoding (self):
	
	"""Set g.app.tkEncoding."""

	for (encoding,src) in (
		(self.config.tkEncoding,"config"),
		#(locale.getdefaultlocale()[1],"locale"),
		(g.getpreferredencoding(),"locale"),
		(sys.getdefaultencoding(),"sys"),
		("utf-8","default")):
	
		if g.isValidEncoding (encoding): # 3/22/03
			self.tkEncoding = encoding
			# g.trace(self.tkEncoding,src)
			break
		elif encoding and len(encoding) &gt; 0:
			g.trace("ignoring invalid " + src + " encoding: " + `encoding`)
			
	color = g.choose(self.tkEncoding=="ascii","red","blue")</t>
<t tx="ekr.20031218072017.2619">def writeWaitingLog (self):

	if self.log:
		for s,color in self.logWaiting:
			g.es(s,color=color,newline=0) # The caller must write the newlines.
		self.logWaiting = []
</t>
<t tx="ekr.20031218072017.2620">"""Classes to read and write @file nodes."""

@language python

import leoGlobals as g
from leoGlobals import true,false

import leoColor,leoNodes
import filecmp,os,string,time

&lt;&lt; global atFile constants &gt;&gt;

class baseAtFile:
	"""The base class for the top-level atFile subcommander."""
	&lt;&lt; class baseAtFile methods &gt;&gt;
	
class atFile (baseAtFile):
	pass # May be overridden in plugins.
	
class baseOldDerivedFile:
	"""The base class to read and write 3.x derived files."""
	&lt;&lt; class baseOldDerivedFile methods &gt;&gt;
	
class oldDerivedFile(baseOldDerivedFile):
	pass # May be overridden in plugins.
	
class baseNewDerivedFile(oldDerivedFile):
	"""The base class to read and write 4.x derived files."""
	&lt;&lt; class baseNewDerivedFile methods &gt;&gt;
	
class newDerivedFile(baseNewDerivedFile):
	pass # May be overridden in plugins.</t>
<t tx="ekr.20031218072017.2621"># These constants must be global to this module because they are shared by several classes.

# The kind of at_directives.
noDirective		   =  1 # not an at-directive.
# not used      =  2
docDirective	   =  3 # @doc.
atDirective		   =  4 # @&lt;space&gt; or @&lt;newline&gt;
codeDirective	  =  5 # @code
cDirective		    =  6 # @c&lt;space&gt; or @c&lt;newline&gt;
othersDirective	=  7 # at-others
miscDirective	  =  8 # All other directives
rawDirective    =  9 # @raw
endRawDirective = 10 # @end_raw

# The kind of sentinel line.
noSentinel		 = 20 # Not a sentinel
# not used   = 21
endAt			 = 22 # @-at
endBody			 = 23 # @-body
endDoc			 = 24 # @-doc
endLeo			 = 25 # @-leo
endNode			 = 26 # @-node
endOthers		  = 27 # @-others

# not used     = 40
startAt			   = 41 # @+at
startBody		    = 42 # @+body
startDoc		     = 43 # @+doc
startLeo		     = 44 # @+leo
startNode		    = 45 # @+node
startOthers		  = 46 # @+others

startComment   = 60 # @comment
startDelims		  = 61 # @delims
startDirective	= 62 # @@
startRef		     = 63 # @&lt; &lt; ... &gt; &gt;
startVerbatim	 = 64 # @verbatim
startVerbatimAfterRef = 65 # @verbatimAfterRef (3.0 only)

# New in 4.0...
startAfterRef  = 70 # @afterref (4.0)
startNl        = 71 # @nl (4.0)
startNonl      = 72 # @nonl (4.0)
	
sentinelDict = {
	# Unpaired sentinels: 3.x and 4.x.
	"@comment" : startComment,
	"@delims" :  startDelims,
	"@verbatim": startVerbatim,
	# Unpaired sentinels: 3.x only.
	"@verbatimAfterRef": startVerbatimAfterRef,
	# Unpaired sentinels: 4.x only.
	"@afterref" : startAfterRef,
	"@nl"       : startNl,
	"@nonl"     : startNonl,
	# Paired sentinels: 3.x only.
	"@+body":   startBody,   "@-body":   endBody,
	# Paired sentinels: 3.x and 4.x.
	"@+at":     startAt,     "@-at":     endAt,
	"@+doc":    startDoc,    "@-doc":    endDoc,
	"@+leo":    startLeo,    "@-leo":    endLeo,
	"@+node":   startNode,   "@-node":   endNode,
	"@+others": startOthers, "@-others": endOthers }</t>
<t tx="ekr.20031218072017.2622">@others</t>
<t tx="ekr.20031218072017.2623">def __init__(self,c):
	
	self.c = c
	self.fileCommands = self.c.fileCommands
	
	# Create subcommanders to handler old and new format derived files.
	self.old_df = oldDerivedFile(c)
	self.new_df = newDerivedFile(c)
	
	self.initIvars()
	
def initIvars(self):
	
	# Set by scanDefaultDirectory.
	self.default_directory = None
	self.errors = 0

	# Set by scanHeader when reading. Set by scanAllDirectives...
	self.encoding = g.app.config.default_derived_file_encoding
	self.endSentinelComment = None
	self.startSentinelComment = None</t>
<t tx="ekr.20031218072017.2624">def error(self,message):

	g.es(message,color="red")
	print message
	self.errors += 1</t>
<t tx="ekr.20031218072017.2625"></t>
<t tx="ekr.20031218072017.2626">def readAll(self,root,partialFlag=false):
	
	"""Scan vnodes, looking for @file nodes to read."""
	
	print '-'*20,"atFile.readAll not ready yet"
	return ## not ready yet.

	at = self ; c = at.c
	c.endEditing() # Capture the current headline.
	anyRead = false
	at.initIvars()
	p = root.copy()
	if partialFlag: after = p.nodeAfterTree()
	else: after = None
	while p and p != after: # Don't use iterator.
		if p.isAtIgnoreNode():
			p.moveToNodeAfterTree()
		elif p.isAtFileNode() or p.isAtRawFileNode():
			anyRead = true
			if partialFlag:
				# We are forcing the read.
				at.read(p)
			else:
				# if p is an orphan, we don't expect to see a derived file,
				# and we shall read a derived file if it exists.
				wasOrphan = p.isOrphan()
				ok = at.read(p)
				if wasOrphan and not ok:
					# Remind the user to fix the problem.
					p.setDirty()
					c.setChanged(true)
			p.moveToNodeAfterTree()
		else: p.moveToThreadNext()
	# Clear all orphan bits.
	for p in c.allNodes_iter():
		p.v.clearOrphan()
		
	if partialFlag and not anyRead:
		g.es("no @file nodes in the selected tree")</t>
<t tx="ekr.20031218072017.2627">def scanDefaultDirectory(self,p):
	
	"""Set default_directory ivar by looking for @path directives."""

	at = self ; c = at.c
	at.default_directory = None
	&lt;&lt; Set path from @file node &gt;&gt;
	if at.default_directory:
		return
		
	for p in p.self_and_parents_iter():
		s = p.v.t.bodyString
		dict = g.get_directives_dict(s)
		if dict.has_key("path"):
			&lt;&lt; handle @path &gt;&gt;
			return

	&lt;&lt; Set current directory &gt;&gt;
	if not at.default_directory:
		# This should never happen: c.openDirectory should be a good last resort.
		g.trace()
		at.error("No absolute directory specified anywhere.")
		at.default_directory = ""</t>
<t tx="ekr.20031218072017.2628"># An absolute path in an @file node over-rides everything else.
# A relative path gets appended to the relative path by the open logic.

# Bug fix: 10/16/02
if p.isAtFileNode():
	name = p.atFileNodeName()
elif p.isAtRawFileNode():
	name = p.atRawFileNodeName()
elif p.isAtNoSentinelsFileNode():
	name = p.atNoSentinelsFileNodeName()
else:
	name = ""

dir = g.choose(name,g.os_path_dirname(name),None)

if dir and g.os_path_isabs(dir):
	if g.os_path_exists(dir):
		at.default_directory = dir
	else:
		at.default_directory = g.makeAllNonExistentDirectories(dir)
		if not at.default_directory:
			at.error("Directory \"" + dir + "\" does not exist")</t>
<t tx="ekr.20031218072017.2629"># We set the current director to a path so future writes will go to that directory.

k = dict["path"]
&lt;&lt; compute relative path from s[k:] &gt;&gt;

if path and len(path) &gt; 0:
	base = g.getBaseDirectory() # returns "" on error.
	path = g.os_path_join(base,path)
	
	if g.os_path_isabs(path):
		&lt;&lt; handle absolute path &gt;&gt;
	else:
		at.error("ignoring bad @path: " + path)
else:
	at.error("ignoring empty @path")

</t>
<t tx="ekr.20031218072017.2630">j = i = k + len("@path")
i = g.skip_to_end_of_line(s,i)
path = string.strip(s[j:i])

# Remove leading and trailing delims if they exist.
if len(path) &gt; 2 and (
	(path[0]=='&lt;' and path[-1] == '&gt;') or
	(path[0]=='"' and path[-1] == '"') ):
	path = path[1:-1]

path = path.strip()</t>
<t tx="ekr.20031218072017.2631"># path is an absolute path.

if g.os_path_exists(path):
	at.default_directory = path
else:
	at.default_directory = g.makeAllNonExistentDirectories(path)
	if not at.default_directory:
		at.error("invalid @path: " + path)</t>
<t tx="ekr.20031218072017.2632"># This code is executed if no valid absolute path was specified in the @file node or in an @path directive.

assert(not at.default_directory)

if c.frame :
	base = g.getBaseDirectory() # returns "" on error.
	for dir in (c.tangle_directory,c.frame.openDirectory,c.openDirectory):
		if dir and len(dir) &gt; 0:
			dir = g.os_path_join(base,dir)
			if g.os_path_isabs(dir): # Errors may result in relative or invalid path.
				if g.os_path_exists(dir):
					at.default_directory = dir ; break
				else:
					at.default_directory = g.makeAllNonExistentDirectories(dir)
</t>
<t tx="ekr.20031218072017.2633">def scanHeader(self,file,fileName):
	
	"""Scan the @+leo sentinel.
	
	Sets self.encoding, and self.start/endSentinelComment.
	
	Returns (firstLines,new_df) where:
	firstLines contains all @first lines,
	new_df is true if we are reading a new-format derived file."""
	
	at = self
	new_df = false # Set default.
	firstLines = [] # The lines before @+leo.
	version_tag = "-ver="
	tag = "@+leo" ; encoding_tag = "-encoding="
	valid = true
	&lt;&lt; skip any non @+leo lines &gt;&gt;
	&lt;&lt; make sure we have @+leo &gt;&gt;
	&lt;&lt; read optional version param &gt;&gt;
	&lt;&lt; read optional encoding param &gt;&gt;
	&lt;&lt; set the closing comment delim &gt;&gt;
	if not valid:
		at.error("Bad @+leo sentinel in " + fileName)
	# g.trace("start,end",at.startSentinelComment,at.endSentinelComment)
	return firstLines, new_df</t>
<t tx="ekr.20031218072017.2634">@ Queue up the lines before the @+leo.  These will be used to add as parameters to the @first directives, if any.  Empty lines are ignored (because empty @first directives are ignored). NOTE: the function now returns a list of the lines before @+leo.

We can not call sentinelKind here because that depends on the comment delimiters we set here.  @first lines are written "verbatim", so nothing more needs to be done!
@c

s = at.readLine(file)
while len(s) &gt; 0:
	j = s.find(tag)
	if j != -1: break
	firstLines.append(s) # Queue the line
	s = at.readLine(file)
n = len(s)
valid = n &gt; 0
# s contains the tag
i = j = g.skip_ws(s,0)
# The opening comment delim is the initial non-whitespace.
# 7/8/02: The opening comment delim is the initial non-tag
while i &lt; n and not g.match(s,i,tag) and not g.is_nl(s,i):
	i += 1
if j &lt; i:
	at.startSentinelComment = s[j:i]
else: valid = false</t>
<t tx="ekr.20031218072017.2635">@ REM hack: leading whitespace is significant before the @+leo.  We do this so that sentinelKind need not skip whitespace following self.startSentinelComment.  This is correct: we want to be as restrictive as possible about what is recognized as a sentinel.  This minimizes false matches.
@c

if 0:# 7/8/02: make leading whitespace significant.
	i = g.skip_ws(s,i)

if g.match(s,i,tag):
	i += len(tag)
else: valid = false</t>
<t tx="ekr.20031218072017.2636">new_df = g.match(s,i,version_tag)

if new_df:
	# Skip to the next minus sign or end-of-line
	i += len(version_tag)
	j = i
	while i &lt; len(s) and not g.is_nl(s,i) and s[i] != '-':
		i += 1

	if j &lt; i:
		pass # version = s[j:i]
	else:
		valid = false
</t>
<t tx="ekr.20031218072017.2637"># Set the default encoding
at.encoding = g.app.config.default_derived_file_encoding

if g.match(s,i,encoding_tag):
	# Read optional encoding param, e.g., -encoding=utf-8,
	i += len(encoding_tag)
	# Skip to the next comma
	j = i
	while i &lt; len(s) and not g.is_nl(s,i) and s[i] not in (',','.'):
		i += 1
	if g.match(s,i,',') or g.match(s,i,'.'):
		encoding = s[j:i]
		i += 1
		# print "@+leo-encoding=",encoding
		if g.isValidEncoding(encoding):
			at.encoding = encoding
		else:
			print "bad encoding in derived file:",encoding
			g.es("bad encoding in derived file:",encoding)
	else:
		valid = false
</t>
<t tx="ekr.20031218072017.2638"># The closing comment delim is the trailing non-whitespace.
i = j = g.skip_ws(s,i)
while i &lt; n and not g.is_ws(s[i]) and not g.is_nl(s,i):
	i += 1
at.endSentinelComment = s[j:i]</t>
<t tx="ekr.20031218072017.2639">def readLine (self,file):

	"""Reads one line from file using the present encoding"""
	
	s = g.readlineForceUnixNewline(file)
	u = g.toUnicode(s,self.encoding)
	return u</t>
<t tx="ekr.20031218072017.2640"></t>
<t tx="ekr.20031218072017.2641">def rawWrite (self,p):
	at = self
	write_new = not g.app.config.write_old_format_derived_files
	df = g.choose(write_new,at.new_df,at.old_df)
	try:    df.rawWrite(p)
	except: at.writeException(p)
	
def silentWrite (self,p):
	at = self
	try: at.old_df.silentWrite(p) # No new_df.silentWrite method.
	except: at.writeException(p)
	
def write (self,p,nosentinels=false):
	at = self
	write_new = not g.app.config.write_old_format_derived_files
	df = g.choose(write_new,at.new_df,at.old_df)
	try:    df.write(p,nosentinels)
	except: at.writeException(p)
		
def writeException(self,p):
	self.error("Unexpected exception while writing " + p.headString())
	g.es_exception()</t>
<t tx="ekr.20031218072017.2642">def writeOldDerivedFiles (self):
	
	self.writeDerivedFiles(write_old=true)

def writeNewDerivedFiles (self):

	self.writeDerivedFiles(write_old=false)
	
def writeDerivedFiles (self,write_old):
	
	config = g.app.config
	old = config.write_old_format_derived_files
	config.write_old_format_derived_files = write_old
	self.writeAll(writeAtFileNodesFlag=true)
	config.write_old_format_derived_files = old</t>
<t tx="ekr.20031218072017.2643">@others</t>
<t tx="ekr.20031218072017.2644">def __init__(self,c):

	self.c = c # The commander for the current window.
	self.fileCommands = self.c.fileCommands

	self.initIvars()

def initIvars(self):

	&lt;&lt; init atFile ivars &gt;&gt;
</t>
<t tx="ekr.20031218072017.2645"># errors is the number of errors seen while reading and writing.
self.errors = 0

# Initialized by atFile.scanAllDirectives.
self.default_directory = None
self.page_width = None
self.tab_width  = None
self.startSentinelComment = None
self.endSentinelComment = None
self.language = None

@ The files used by the output routines.  When tangling, we first write to a temporary output file.  After tangling is temporary file.  Otherwise we delete the old target file and rename the temporary file to be the target file.
@c
self.shortFileName = "" # short version of file name used for messages.
self.targetFileName = u"" # EKR 1/21/03: now a unicode string
self.outputFileName = u"" # EKR 1/21/03: now a unicode string
self.outputFile = None # The temporary output file.

@ The indentation used when outputting section references or at-others sections.  We add the indentation of the line containing the at-node directive and restore the old value when the
expansion is complete.
@c
self.indent = 0  # The unit of indentation is spaces, not tabs.

# The root of tree being written.
self.root = None

# Ivars used to suppress newlines between sentinels.
self.suppress_newlines = true # true: enable suppression of newlines.
self.newline_pending = false # true: newline is pending on read or write.

# Support of output_newline option
self.output_newline = g.getOutputNewline()

# Support of @raw
self.raw = false # true: in @raw mode
self.sentinels = true # true: output sentinels while expanding refs.
self.scripting = false # true: generating text for a script.

# The encoding used to convert from unicode to a byte stream.
self.encoding = g.app.config.default_derived_file_encoding

# For interface between 3.x and 4.x read code.
self.file = None
self.importing = false
self.importRootSeen = false

# Set when a file has actually been updated.
self.fileChangedFlag = false</t>
<t tx="ekr.20031218072017.2646"></t>
<t tx="ekr.20031218072017.2647">def readOpenFile(self,root,file,firstLines):
	
	"""Read an open 3.x derived file."""
	
	at = self

	# Scan the file buffer
	lastLines = at.scanText(file,root,[],endLeo)
	root.v.t.setVisited() # Disable warning about set nodes.

	# Handle first and last lines.
	try: body = root.v.t.tempBodyString
	except: body = ""
	lines = body.split('\n')
	at.completeFirstDirectives(lines,firstLines)
	at.completeLastDirectives(lines,lastLines)
	s = '\n'.join(lines).replace('\r', '')
	root.v.t.tempBodyString = s</t>
<t tx="ekr.20031218072017.2648"># 14-SEP-2002 DTHEIN: added for use by atFile.read()

# this function scans the lines in the list 'out' for @first directives
# and appends the corresponding line from 'firstLines' to each @first 
# directive found.  NOTE: the @first directives must be the very first
# lines in 'out'.
def completeFirstDirectives(self,out,firstLines):

	tag = "@first"
	foundAtFirstYet = 0
	outRange = range(len(out))
	j = 0
	for k in outRange:
		# skip leading whitespace lines
		if (not foundAtFirstYet) and (len(out[k].strip()) == 0): continue
		# quit if something other than @first directive
		i = 0
		if not g.match(out[k],i,tag): break;
		foundAtFirstYet = 1
		# quit if no leading lines to apply
		if j &gt;= len(firstLines): break
		# make the new @first directive
		#18-SEP-2002 DTHEIN: remove trailing newlines because they are inserted later
		# 21-SEP-2002 DTHEIN: no trailing whitespace on empty @first directive
		leadingLine = " " + firstLines[j]
		out[k] = tag + leadingLine.rstrip() ; j += 1
</t>
<t tx="ekr.20031218072017.2649"># 14-SEP-2002 DTHEIN: added for use by atFile.read()

# this function scans the lines in the list 'out' for @last directives
# and appends the corresponding line from 'lastLines' to each @last 
# directive found.  NOTE: the @last directives must be the very last
# lines in 'out'.
def completeLastDirectives(self,out,lastLines):

	tag = "@last"
	foundAtLastYet = 0
	outRange = range(-1,-len(out),-1)
	j = -1
	for k in outRange:
		# skip trailing whitespace lines
		if (not foundAtLastYet) and (len(out[k].strip()) == 0): continue
		# quit if something other than @last directive
		i = 0
		if not g.match(out[k],i,tag): break;
		foundAtLastYet = 1
		# quit if no trailing lines to apply
		if j &lt; -len(lastLines): break
		# make the new @last directive
		#18-SEP-2002 DTHEIN: remove trailing newlines because they are inserted later
		# 21-SEP-2002 DTHEIN: no trailing whitespace on empty @last directive
		trailingLine = " " + lastLines[j]
		out[k] = tag + trailingLine.rstrip() ; j -= 1
</t>
<t tx="ekr.20031218072017.2650">@ Sections appear in the derived file in reference order, not tree order.  Therefore, when we insert the nth child of the parent there is no guarantee that the previous n-1 children have already been inserted. And it won't work just to insert the nth child as the last child if there aren't n-1 previous siblings.  For example, if we insert the third child followed by the second child followed by the first child the second and third children will be out of order.

To ensure that nodes are placed in the correct location we create "dummy" children as needed as placeholders.  In the example above, we would insert two dummy children when inserting the third child.  When inserting the other two children we replace the previously inserted dummy child with the actual children.

vnode child indices are zero-based.  Here we use 1-based indices.

With the "mirroring" scheme it is a structure error if we ever have to create dummy vnodes.  Such structure errors cause a second pass to be made, with an empty root.  This second pass will generate other structure errors, which are ignored.
@c
def createNthChild(self,n,parent,headline):
	
	"""Create the nth child of the parent."""

	at = self
	assert(n &gt; 0)
	
	if at.importing:
		return at.createImportedNode(at.root,at.c,headline)

	# Create any needed dummy children.
	dummies = n - parent.numberOfChildren() - 1
	if dummies &gt; 0:
		if 0: # CVS produces to many errors for this to be useful.
			g.es("dummy created")
		self.errors += 1
	while dummies &gt; 0:
		dummies -= 1
		dummy = parent.insertAsLastChild(leoNodes.tnode())
		# The user should never see this headline.
		dummy.initHeadString("Dummy")

	if n &lt;= parent.numberOfChildren():
		&lt;&lt; check the headlines &gt;&gt;
	else:
		# This is using a dummy; we should already have bumped errors.
		result = parent.insertAsLastChild(leoNodes.tnode())
	result.initHeadString(headline)
	
	result.setVisited() # Suppress all other errors for this node.
	result.t.setVisited() # Suppress warnings about unvisited nodes.
	return result</t>
<t tx="ekr.20031218072017.2651"># 1/24/03: A kludgy fix to the problem of headlines containing comment delims.

result = parent.nthChild(n-1)
resulthead = result.headString()

if headline.strip() != resulthead.strip():
	start = self.startSentinelComment
	end = self.endSentinelComment
	if end and len(end) &gt; 0:
		# 1/25/03: The kludgy fix.
		# Compare the headlines without the delims.
		h1 =   headline.replace(start,"").replace(end,"")
		h2 = resulthead.replace(start,"").replace(end,"")
		if h1.strip() == h2.strip():
			# 1/25/03: Another kludge: use the headline from the outline, not the derived file.
			headline = resulthead
		else:
			self.errors += 1
	else:
		self.errors += 1
</t>
<t tx="ekr.20031218072017.2652">def handleLinesFollowingSentinel (self,lines,sentinel,comments = true):
	
	"""convert lines following a sentinel to a single line"""
	
	m = " following" + sentinel + " sentinel"
	start = self.startSentinelComment
	end   = self.endSentinelComment
	
	if len(lines) == 1: # The expected case.
		s = lines[0]
	elif len(lines) == 5:
		self.readError("potential cvs conflict" + m)
		s = lines[1]
		g.es("using " + s)
	else:
		self.readError("unexpected lines" + m)
		g.es(len(lines), " lines" + m)
		s = "bad " + sentinel
		if comments: s = start + ' ' + s

	if comments:
		&lt;&lt; remove the comment delims from s &gt;&gt;
		
	# Undo the cweb hack: undouble @ signs if the opening comment delim ends in '@'.
	if start[-1:] == '@':
		s = s.replace('@@','@')

	return s</t>
<t tx="ekr.20031218072017.2653"># Remove the starting comment and the blank.
# 5/1/03: The starting comment now looks like a sentinel, to warn users from changing it.
comment = start + '@ '
if g.match(s,0,comment):
	s = s[len(comment):]
else:
	self.readError("expecting comment" + m)

# Remove the trailing comment.
if len(end) == 0:
	s = string.strip(s[:-1])
else:
	k = s.rfind(end)
	s = string.strip(s[:k]) # works even if k == -1</t>
<t tx="ekr.20031218072017.2654">def readLine (self,file):
	"""Reads one line from file using the present encoding"""
	
	s = g.readlineForceUnixNewline(file)
	u = g.toUnicode(s,self.encoding)
	return u

</t>
<t tx="ekr.20031218072017.2655"># We expect only a single line, and more may exist if cvs detects a conflict.
# We accept the first line even if it looks like a sentinel.
# 5/1/03: The starting comment now looks like a sentinel, to warn users from changing it.

def readLinesToNextSentinel (self,file):
	
	"""	read lines following multiline sentinels"""
	
	lines = []
	start = self.startSentinelComment + '@ '
	nextLine = self.readLine(file)
	while nextLine and len(nextLine) &gt; 0:
		if len(lines) == 0:
			lines.append(nextLine)
			nextLine = self.readLine(file)
		else:
			# 5/1/03: looser test then calling sentinelKind.
			s = nextLine ; i = g.skip_ws(s,0)
			if g.match(s,i,start):
				lines.append(nextLine)
				nextLine = self.readLine(file)
			else: break

	return nextLine,lines</t>
<t tx="ekr.20031218072017.2656"># Scans the doc part and appends the text out.
# s,i point to the present line on entry.

def scanDoc(self,file,s,i,out,kind):

	endKind = g.choose(kind ==startDoc,endDoc,endAt)
	single = len(self.endSentinelComment) == 0
	&lt;&lt; Skip the opening sentinel &gt;&gt;
	&lt;&lt; Skip an opening block delim &gt;&gt;
	nextLine = None ; kind = noSentinel
	while len(s) &gt; 0:
		&lt;&lt; set kind, nextLine &gt;&gt;
		if kind == endKind: break
		&lt;&lt; Skip the leading stuff &gt;&gt;
		&lt;&lt; Append s to out &gt;&gt;
		if nextLine:
			s = nextLine ; nextLine = None
		else: s = self.readLine(file)
	if kind != endKind:
		self.readError("Missing " + self.sentinelName(endKind) + " sentinel")
	&lt;&lt; Remove a closing block delim from out &gt;&gt;</t>
<t tx="ekr.20031218072017.2657">assert(g.match(s,i,g.choose(kind == startDoc, "+doc", "+at")))

out.append(g.choose(kind == startDoc, "@doc", "@"))
s = self.readLine(file)
</t>
<t tx="ekr.20031218072017.2658">if not single:
	j = g.skip_ws(s,0)
	if g.match(s,j,self.startSentinelComment):
		s = self.readLine(file)</t>
<t tx="ekr.20031218072017.2659">@ For non-sentinel lines we look ahead to see whether the next line is a sentinel.
@c

assert(nextLine==None)

kind = self.sentinelKind(s)

if kind == noSentinel:
	j = g.skip_ws(s,0)
	blankLine = s[j] == '\n'
	nextLine = self.readLine(file)
	nextKind = self.sentinelKind(nextLine)
	if blankLine and nextKind == endKind:
		kind = endKind # stop the scan now
</t>
<t tx="ekr.20031218072017.2660"># Point i to the start of the real line.

if single: # Skip the opening comment delim and a blank.
	i = g.skip_ws(s,0)
	if g.match(s,i,self.startSentinelComment):
		i += len(self.startSentinelComment)
		if g.match(s,i," "): i += 1
else:
	i = self.skipIndent(s,0, self.indent)
</t>
<t tx="ekr.20031218072017.2661"># Append the line with a newline if it is real

line = s[i:-1] # remove newline for rstrip.

if line == line.rstrip():
	# no trailing whitespace: the newline is real.
	out.append(line + '\n')
else:
	# trailing whitespace: the newline is not real.
	out.append(line)
</t>
<t tx="ekr.20031218072017.2662"># This code will typically only be executed for HTML files.

if not single:

	delim = self.endSentinelComment
	n = len(delim)
	
	# Remove delim and possible a leading newline.
	s = string.join(out,"")
	s = s.rstrip()
	if s[-n:] == delim:
		s = s[:-n]
	if s[-1] == '\n':
		s = s[:-1]
		
	# Rewrite out in place.
	del out[:]
	out.append(s)
</t>
<t tx="ekr.20031218072017.2663">def scanText (self,file,p,out,endSentinelKind,nextLine=None):
	
	"""Scan a 3.x derived file recursively."""

	at = self # 12/18/03
	lastLines = [] # The lines after @-leo
	lineIndent = 0 ; linep = 0 # Changed only for sentinels.
	while 1:
		&lt;&lt; put the next line into s &gt;&gt;
		&lt;&lt; set kind, nextKind &gt;&gt;
		if kind != noSentinel:
			&lt;&lt; set lineIndent, linep and leading_ws &gt;&gt;
			i = self.skipSentinelStart(s,0)
		&lt;&lt; handle the line in s &gt;&gt;
	&lt;&lt; handle unexpected end of text &gt;&gt;
	assert(len(s)==0 and nextLine==None) # We get here only if readline fails.
	return lastLines # We get here only if there are problems.</t>
<t tx="ekr.20031218072017.2664">if nextLine:
	s = nextLine ; nextLine = None
else:
	s = self.readLine(file)
	if len(s) == 0: break</t>
<t tx="ekr.20031218072017.2665">@ For non-sentinel lines we look ahead to see whether the next line is a sentinel.  If so, the newline that ends a non-sentinel line belongs to the next sentinel.
@c

assert(nextLine==None)

kind = self.sentinelKind(s)

if kind == noSentinel:
	nextLine = self.readLine(file)
	nextKind = self.sentinelKind(nextLine)
else:
	nextLine = nextKind = None

# nextLine != None only if we have a non-sentinel line.
# Therefore, nextLine == None whenever scanText returns.</t>
<t tx="ekr.20031218072017.2666">@ lineIndent is the total indentation on a sentinel line.  The first "self.indent" portion of that must be removed when recreating text.  leading_ws is the remainder of the leading whitespace.  linep points to the first "real" character of a line, the character following the "indent" whitespace.
@c

# Point linep past the first self.indent whitespace characters.
if self.raw: # 10/15/02
	linep =0
else:
	linep = self.skipIndent(s,0,self.indent)

# Set lineIndent to the total indentation on the line.
lineIndent = 0 ; i = 0
while i &lt; len(s):
	if s[i] == '\t': lineIndent += (abs(self.tab_width) - (lineIndent % abs(self.tab_width)))
	elif s[i] == ' ': lineIndent += 1
	else: break
	i += 1
# g.trace("lineIndent:" +`lineIndent` + ", " + `s`)

# Set leading_ws to the additional indentation on the line.
leading_ws = s[linep:i]</t>
<t tx="ekr.20031218072017.2667"># Issue the error.
name = self.sentinelName(endSentinelKind)
self.readError("Unexpected end of file. Expecting " + name + "sentinel" )
</t>
<t tx="ekr.20031218072017.2668">if kind == noSentinel:
	&lt;&lt; append non-sentinel line &gt;&gt;
&lt;&lt; handle common sentinels &gt;&gt;
&lt;&lt; handle rare sentinels &gt;&gt;
else:
	&lt;&lt; warn about unknown sentinel &gt;&gt;</t>
<t tx="ekr.20031218072017.2669"># We don't output the trailing newline if the next line is a sentinel.
if self.raw: # 10/15/02
	i = 0
else:
	i = self.skipIndent(s,0,self.indent)

assert(nextLine != None)

if nextKind == noSentinel:
	line = s[i:]
	out.append(line)
else:
	line = s[i:-1] # don't output the newline
	out.append(line)
</t>
<t tx="ekr.20031218072017.2670">elif kind in (endAt, endBody,endDoc,endLeo,endNode,endOthers):
		&lt;&lt; handle an ending sentinel &gt;&gt;
elif kind == startBody:
	&lt;&lt; scan @+body &gt;&gt;
elif kind == startNode:
	&lt;&lt; scan @+node &gt;&gt;
elif kind == startRef:
	&lt;&lt; scan old ref &gt;&gt;
elif kind == startAt:
	&lt;&lt; scan @+at &gt;&gt;
elif kind == startDoc:
	&lt;&lt; scan @+doc &gt;&gt;
elif kind == startOthers:
	&lt;&lt; scan @+others &gt;&gt;</t>
<t tx="ekr.20031218072017.2671"># g.trace("end sentinel:", self.sentinelName(kind))

if kind == endSentinelKind:
	if kind == endLeo:
		# Ignore everything after @-leo.
		# Such lines were presumably written by @last.
		while 1:
			s = self.readLine(file)
			if len(s) == 0: break
			lastLines.append(s) # Capture all trailing lines, even if empty.
	elif kind == endBody:
		self.raw = false
	# nextLine != None only if we have a non-sentinel line.
	# Therefore, nextLine == None whenever scanText returns.
	assert(nextLine==None)
	return lastLines # End the call to scanText.
else:
	# Tell of the structure error.
	name = self.sentinelName(kind)
	expect = self.sentinelName(endSentinelKind)
	self.readError("Ignoring " + name + " sentinel.  Expecting " + expect)</t>
<t tx="ekr.20031218072017.2672">@ The sentinel contains an @ followed by a section name in angle brackets.  This code is different from the code for the @@ sentinel: the expansion of the reference does not include a trailing newline.
@c

assert(g.match(s,i,"&lt;&lt;"))

if len(self.endSentinelComment) == 0:
	line = s[i:-1] # No trailing newline
else:
	k = s.find(self.endSentinelComment,i)
	line = s[i:k] # No trailing newline, whatever k is.
		
# 10/30/02: undo cweb hack here
start = self.startSentinelComment
if start and len(start) &gt; 0 and start[-1] == '@':
	line = line.replace('@@','@')

out.append(line)</t>
<t tx="ekr.20031218072017.2673">assert(g.match(s,i,"+at"))
self.scanDoc(file,s,i,out,kind)</t>
<t tx="ekr.20031218072017.2674">assert(g.match(s,i,"+body"))

child_out = [] ; child = p.copy() # Do not change out or p!
oldIndent = self.indent ; self.indent = lineIndent
self.scanText(file,child,child_out,endBody)

# Set the body, removing cursed newlines.
# This must be done here, not in the @+node logic.
body = string.join(child_out, "")
body = body.replace('\r', '')
body = g.toUnicode(body,g.app.tkEncoding) # 9/28/03

if self.importing:
	child.t.bodyString = body
else:
	child.t.tempBodyString = body

self.indent = oldIndent</t>
<t tx="ekr.20031218072017.2675">assert(g.match(s,i,"+doc"))
self.scanDoc(file,s,i,out,kind)</t>
<t tx="ekr.20031218072017.2676">assert(g.match(s,i,"+node:"))
i += 6

childIndex = 0 ; cloneIndex = 0
&lt;&lt; Set childIndex &gt;&gt;
&lt;&lt; Set cloneIndex &gt;&gt;
headline = ""
&lt;&lt; Set headline and ref &gt;&gt;

# print childIndex,headline

if childIndex == 0: # The root node.
	if not at.importing:
		&lt;&lt; Check the filename in the sentinel &gt;&gt;
	# Put the text of the root node in the current node.
	self.scanText(file,p,out,endNode)
	p.v.t.setCloneIndex(cloneIndex)
	# if cloneIndex &gt; 0: g.trace("clone index:",cloneIndex,p)
else:
	# NB: this call to createNthChild is the bottleneck!
	child = self.createNthChild(childIndex,p,headline)
	child.t.setCloneIndex(cloneIndex)
	# if cloneIndex &gt; 0: g.trace("clone index:" + `cloneIndex` + ", " + `child`)
	self.scanText(file,child,out,endNode)

&lt;&lt; look for sentinels that may follow a reference &gt;&gt;</t>
<t tx="ekr.20031218072017.2677">i = g.skip_ws(s,i) ; j = i
while i &lt; len(s) and s[i] in string.digits:
	i += 1

if j == i:
	self.readError("Implicit child index in @+node")
	childIndex = 0
else:
	childIndex = int(s[j:i])

if g.match(s,i,':'):
	i += 1 # Skip the ":".
else:
	self.readError("Bad child index in @+node")</t>
<t tx="ekr.20031218072017.2678">while i &lt; len(s) and s[i] != ':' and not g.is_nl(s,i):
	if g.match(s,i,"C="):
		# set cloneIndex from the C=nnn, field
		i += 2 ; j = i
		while i &lt; len(s) and s[i] in string.digits:
			i += 1
		if j &lt; i:
			cloneIndex = int(s[j:i])
	else: i += 1 # Ignore unknown status bits.

if g.match(s,i,":"):
	i += 1
else:
	self.readError("Bad attribute field in @+node")</t>
<t tx="ekr.20031218072017.2679"># Set headline to the rest of the line.
# 6/22/03: don't strip leading whitespace.
if len(self.endSentinelComment) == 0:
	headline = s[i:-1].rstrip()
else:
	# 10/24/02: search from the right, not the left.
	k = s.rfind(self.endSentinelComment,i)
	headline = s[i:k].rstrip() # works if k == -1
	
# 10/23/02: The cweb hack: undouble @ signs if the opening comment delim ends in '@'.
if self.startSentinelComment[-1:] == '@':
	headline = headline.replace('@@','@')

# Set reference if it exists.
i = g.skip_ws(s,i)

if 0: # no longer used
	if g.match(s,i,"&lt;&lt;"):
		k = s.find("&gt;&gt;",i)
		if k != -1: ref = s[i:k+2]</t>
<t tx="ekr.20031218072017.2680">h = headline.strip()

if h[:5] == "@file":
	i,junk,junk = g.scanAtFileOptions(h)
	fileName = string.strip(h[i:])
	if fileName != self.targetFileName:
		self.readError("File name in @node sentinel does not match file's name")
elif h[:8] == "@rawfile":
	fileName = string.strip(h[8:])
	if fileName != self.targetFileName:
		self.readError("File name in @node sentinel does not match file's name")
else:
	self.readError("Missing @file in root @node sentinel")
</t>
<t tx="ekr.20031218072017.2681">s = self.readLine(file)
kind = self.sentinelKind(s)

if len(s) &gt; 1 and kind == startVerbatimAfterRef:
	s = self.readLine(file)
	# g.trace("verbatim:"+`s`)
	out.append(s)
elif len(s) &gt; 1 and self.sentinelKind(s) == noSentinel:
	out.append(s)
else:
	nextLine = s # Handle the sentinel or blank line later.
</t>
<t tx="ekr.20031218072017.2682">assert(g.match(s,i,"+others"))

# Make sure that the generated at-others is properly indented.
out.append(leading_ws + "@others")

self.scanText(file,p,out,endOthers)</t>
<t tx="ekr.20031218072017.2683">elif kind == startComment:
	&lt;&lt; scan @comment &gt;&gt;
elif kind == startDelims:
	&lt;&lt; scan @delims &gt;&gt;
elif kind == startDirective:
	&lt;&lt; scan @@ &gt;&gt;
elif kind == startLeo:
	&lt;&lt; scan @+leo &gt;&gt;
elif kind == startVerbatim:
	&lt;&lt; scan @verbatim &gt;&gt;</t>
<t tx="ekr.20031218072017.2684">assert(g.match(s,i,"+leo"))
self.readError("Ignoring unexpected @+leo sentinel")</t>
<t tx="ekr.20031218072017.2685"># The first '@' has already been eaten.
assert(g.match(s,i,"@"))

if g.match_word(s,i,"@raw"):
	self.raw = true
elif g.match_word(s,i,"@end_raw"):
	self.raw = false

e = self.endSentinelComment
s2 = s[i:]
if len(e) &gt; 0:
	k = s.rfind(e,i)
	if k != -1:
		s2 = s[i:k] + '\n'
	
start = self.startSentinelComment
if start and len(start) &gt; 0 and start[-1] == '@':
	s2 = s2.replace('@@','@')
out.append(s2)
# g.trace(`s2`)</t>
<t tx="ekr.20031218072017.2686">assert(g.match(s,i,"comment"))

# We need do nothing more to ignore the comment line!
</t>
<t tx="ekr.20031218072017.2687">assert(g.match(s,i-1,"@delims"));

# Skip the keyword and whitespace.
i0 = i-1
i = g.skip_ws(s,i-1+7)
	
# Get the first delim.
j = i
while i &lt; len(s) and not g.is_ws(s[i]) and not g.is_nl(s,i):
	i += 1

if j &lt; i:
	self.startSentinelComment = s[j:i]
	# print "delim1:", self.startSentinelComment

	# Get the optional second delim.
	j = i = g.skip_ws(s,i)
	while i &lt; len(s) and not g.is_ws(s[i]) and not g.is_nl(s,i):
		i += 1
	end = g.choose(j&lt;i,s[j:i],"")
	i2 = g.skip_ws(s,i)
	if end == self.endSentinelComment and (i2 &gt;= len(s) or g.is_nl(s,i2)):
		self.endSentinelComment = "" # Not really two params.
		line = s[i0:j]
		line = line.rstrip()
		out.append(line+'\n')
	else:
		self.endSentinelComment = end
		# print "delim2:",end
		line = s[i0:i]
		line = line.rstrip()
		out.append(line+'\n')
else:
	self.readError("Bad @delims")
	# Append the bad @delims line to the body text.
	out.append("@delims")</t>
<t tx="ekr.20031218072017.2688">assert(g.match(s,i,"verbatim"))

# Skip the sentinel.
s = self.readLine(file) 

# Append the next line to the text.
i = self.skipIndent(s,0,self.indent)
out.append(s[i:])
</t>
<t tx="ekr.20031218072017.2689">j = i
i = g.skip_line(s,i)
line = s[j:i]
self.readError("Unknown sentinel: " + line)</t>
<t tx="ekr.20031218072017.2690"></t>
<t tx="ekr.20031218072017.2691"># 4/5/03: config.write_clone_indices no longer used.

def nodeSentinelText(self,p):
	
	if p == self.root or not p.hasParent():
		index = 0
	else:
		index = p.childIndex() + 1

	h = p.headString()
	&lt;&lt; remove comment delims from h if necessary &gt;&gt;

	return str(index) + '::' + h</t>
<t tx="ekr.20031218072017.2692">@ Bug fix 1/24/03:

If the present @language/@comment settings do not specify a single-line comment we remove all block comment delims from h.  This prevents headline text from interfering with the parsing of node sentinels.
@c

start = self.startSentinelComment
end = self.endSentinelComment

if end and len(end) &gt; 0:
	h = h.replace(start,"")
	h = h.replace(end,"")</t>
<t tx="ekr.20031218072017.2693">def putCloseNodeSentinel(self,p):

	s = self.nodeSentinelText(p)
	self.putSentinel("@-node:" + s)</t>
<t tx="ekr.20031218072017.2694"># root is an ancestor of p, or root == p.

def putCloseSentinels(self,root,p):
	
	"""call putCloseSentinel for position p up to, but not including, root."""

	self.putCloseNodeSentinel(p)
	assert(p.hasParent())

	for p in p.parents_iter():
		if p == root: break
		self.putCloseNodeSentinel(p)</t>
<t tx="ekr.20031218072017.2695"># This method is the same as putSentinel except we don't put an opening newline and leading whitespace.

def putOpenLeoSentinel(self,s):
	
	"""Put a +leo sentinel containing s."""
	
	if not self.sentinels:
		return # Handle @nosentinelsfile.

	self.os(self.startSentinelComment)
	self.os(s)
	encoding = self.encoding.lower()
	if encoding != "utf-8":
		self.os("-encoding=")
		self.os(encoding)
		self.os(".")
	self.os(self.endSentinelComment)
	if self.suppress_newlines: # 9/27/02
		self.newline_pending = true # Schedule a newline.
	else:
		self.onl() # End of sentinel.
</t>
<t tx="ekr.20031218072017.2696">def putOpenNodeSentinel(self,p):

	"""Put an open node sentinel for node p."""

	if p.isAtFileNode() and p != self.root:
		self.writeError("@file not valid in: " + p.headString())
		return
	
	s = self.nodeSentinelText(p)
	self.putSentinel("@+node:" + s)</t>
<t tx="ekr.20031218072017.2697"># root is an ancestor of p, or root == p.

def putOpenSentinels(self,root,p):

	"""Call putOpenNodeSentinel on all the descendents of root which are the ancestors of p."""

	last = root
	while last != p:
		# Set node to p or the ancestor of p that is a child of last.
		node = p.copy()
		while node and node.parent() != last:
			node.moveToParent()
		assert(node)
		self.putOpenNodeSentinel(node)
		last = node</t>
<t tx="ekr.20031218072017.2698">@ All sentinels are eventually output by this method.

Sentinels include both the preceding and following newlines. This rule greatly simplies the code and has several important benefits:

1. Callers never have to generate newlines before or after sentinels.  Similarly, routines that expand code and doc parts never have to add "extra" newlines.
2. There is no need for a "no-newline" directive.  If text follows a section reference, it will appear just after the newline that ends sentinel at the end of the expansion of the reference.  If no significant text follows a reference, there will be two newlines following the ending sentinel.

The only exception is that no newline is required before the opening "leo" sentinel. The putLeoSentinel and isLeoSentinel routines handle this minor exception.
@c
def putSentinel(self,s):
	
	"""Put a sentinel containing s."""
	
	if not self.sentinels:
		return # Handle @nosentinelsfile.

	self.newline_pending = false # discard any pending newline.
	self.onl() ; self.putIndent(self.indent) # Start of sentinel.
	self.os(self.startSentinelComment)

	# 11/1/02: The cweb hack: if the opening comment delim ends in '@',
	# double all '@' signs except the first, which is "doubled" by the
	# trailing '@' in the opening comment delimiter.
	start = self.startSentinelComment
	if start and len(start) &gt; 0 and start[-1] == '@':
		assert(s and len(s)&gt;0 and s[0]=='@')
		s = s.replace('@','@@')[1:]

	self.os(s)
	self.os(self.endSentinelComment)
	if self.suppress_newlines:
		self.newline_pending = true # Schedule a newline.
	else:
		self.onl() # End of sentinel.</t>
<t tx="ekr.20031218072017.2699">def sentinelKind(self,s):

	"""This method tells what kind of sentinel appears in line s.
	
	Typically s will be an empty line before the actual sentinel,
	but it is also valid for s to be an actual sentinel line.
	
	Returns (kind, s, emptyFlag), where emptyFlag is true if
	kind == noSentinel and s was an empty line on entry."""

	i = g.skip_ws(s,0)
	if g.match(s,i,self.startSentinelComment):
		i += len(self.startSentinelComment)
	else:
		return noSentinel

	# 10/30/02: locally undo cweb hack here
	start = self.startSentinelComment
	if start and len(start) &gt; 0 and start[-1] == '@':
		s = s[:i] + string.replace(s[i:],'@@','@')

	# Do not skip whitespace here!
	if g.match(s,i,"@&lt;&lt;"): return startRef
	if g.match(s,i,"@@"):   return startDirective
	if not g.match(s,i,'@'): return noSentinel
	j = i # start of lookup
	i += 1 # skip the at sign.
	if g.match(s,i,'+') or g.match(s,i,'-'):
		i += 1
	i = g.skip_c_id(s,i)
	key = s[j:i]
	if len(key) &gt; 0 and sentinelDict.has_key(key):
		# g.trace("found:",key)
		return sentinelDict[key]
	else:
		# g.trace("not found:",key)
		return noSentinel</t>
<t tx="ekr.20031218072017.2700"># Returns the name of the sentinel for warnings.

def sentinelName(self, kind):

	sentinelNameDict = {
		noSentinel:  "&lt;no sentinel&gt;",
		startAt:     "@+at",     endAt:     "@-at",
		startBody:   "@+body",   endBody:   "@-body", # 3.x only.
		startDoc:    "@+doc",    endDoc:    "@-doc",
		startLeo:    "@+leo",    endLeo:    "@-leo",
		startNode:   "@+node",   endNode:   "@-node",
		startOthers: "@+others", endOthers: "@-others",
		startAfterRef:  "@afterref", # 4.x
		startComment:   "@comment",
		startDelims:    "@delims",
		startDirective: "@@",
		startNl:        "@nl",   # 4.x
		startNonl:      "@nonl", # 4.x
		startRef:       "@&lt;&lt;",
		startVerbatim:  "@verbatim",
		startVerbatimAfterRef: "@verbatimAfterRef" } # 3.x only.

	return sentinelNameDict.get(kind,"&lt;unknown sentinel!&gt;")</t>
<t tx="ekr.20031218072017.2701">def skipSentinelStart(self,s,i):

	start = self.startSentinelComment
	assert(start and len(start)&gt;0)

	if g.is_nl(s,i): i = g.skip_nl(s,i)
	i = g.skip_ws(s,i)
	assert(g.match(s,i,start))
	i += len(start)
	# 7/8/02: Support for REM hack
	i = g.skip_ws(s,i)
	assert(i &lt; len(s) and s[i] == '@')
	return i + 1
</t>
<t tx="ekr.20031218072017.2702"></t>
<t tx="ekr.20031218072017.2703"># Returns the kind of at-directive or noDirective.

def directiveKind(self,s,i):

	n = len(s)
	if i &gt;= n or s[i] != '@':
		return noDirective

	table = (
		("@c",cDirective),
		("@code",codeDirective),
		("@doc",docDirective),
		("@end_raw",endRawDirective),
		("@others",othersDirective),
		("@raw",rawDirective))

	# This code rarely gets executed, so simple code suffices.
	if i+1 &gt;= n or g.match(s,i,"@ ") or g.match(s,i,"@\t") or g.match(s,i,"@\n"):
		# 10/25/02: @space is not recognized in cweb mode.
		# 11/15/02: Noweb doc parts are _never_ scanned in cweb mode.
		return g.choose(self.language=="cweb",
			noDirective,atDirective)

	# 10/28/02: @c and @(nonalpha) are not recognized in cweb mode.
	# We treat @(nonalpha) separately because @ is in the colorizer table.
	if self.language=="cweb" and (
		g.match_word(s,i,"@c") or
		i+1&gt;= n or s[i+1] not in string.ascii_letters):
		return noDirective

	for name,directive in table:
		if g.match_word(s,i,name):
			return directive
	# 10/14/02: return miscDirective only for real directives.
	for name in leoColor.leoKeywords:
		if g.match_word(s,i,name):
			return miscDirective

	return noDirective</t>
<t tx="ekr.20031218072017.2704">def error(self,message):

	g.es_error(message)
	self.errors += 1
</t>
<t tx="ekr.20031218072017.2705">def readError(self,message):

	# This is useful now that we don't print the actual messages.
	if self.errors == 0:
		g.es_error("----- error reading @file " + self.targetFileName)
		self.error(message) # 9/10/02: we must increment self.errors!
		
	print message

	if 0: # CVS conflicts create too many messages.
		self.error(message)
	
	self.root.setOrphan()
	self.root.setDirty()</t>
<t tx="ekr.20031218072017.2706"># Skip past whitespace equivalent to width spaces.

def skipIndent(self,s,i,width):

	ws = 0 ; n = len(s)
	while i &lt; n and ws &lt; width:
		if   s[i] == '\t': ws += (abs(self.tab_width) - (ws % abs(self.tab_width)))
		elif s[i] == ' ':  ws += 1
		else: break
		i += 1
	return i</t>
<t tx="ekr.20031218072017.2707">def writeError(self,message):

	if self.errors == 0:
		g.es_error("errors writing: " + self.targetFileName)

	self.error(message)
	self.root.setOrphan()
	self.root.setDirty()</t>
<t tx="ekr.20031218072017.2708"></t>
<t tx="ekr.20031218072017.2709"></t>
<t tx="ekr.20031218072017.2710">def rawWrite(self,root):

	c = self.c ; self.root = root
	self.errors = 0
	self.sentinels = true # 10/1/03
	c.endEditing() # Capture the current headline.
	try:
		self.targetFileName = root.atRawFileNodeName()
		ok = self.openWriteFile(root)
		if not ok: return
		&lt;&lt; write root's tree &gt;&gt;
		self.closeWriteFile()
		self.replaceTargetFileIfDifferent()
		root.clearOrphan() ; root.clearDirty()
	except:
		self.handleWriteException(root)
</t>
<t tx="ekr.20031218072017.2711">&lt;&lt; put all @first lines in root &gt;&gt;
self.putOpenLeoSentinel("@+leo")
&lt;&lt; put optional @comment sentinel lines &gt;&gt;

for p in root.subtree_iter():
	&lt;&lt; Write p's node &gt;&gt;

self.putSentinel("@-leo")
&lt;&lt; put all @last lines in root &gt;&gt;</t>
<t tx="ekr.20031218072017.2712">s2 = g.app.config.output_initial_comment
if s2:
	lines = string.split(s2,"\\n")
	for line in lines:
		line = line.replace("@date",time.asctime())
		if len(line)&gt; 0:
			self.putSentinel("@comment " + line)
</t>
<t tx="ekr.20031218072017.2713">self.putOpenNodeSentinel(p)
	
s = p.bodyString()
if s and len(s) &gt; 0:
	self.putSentinel("@+body")
	if self.newline_pending:
		self.newline_pending = false
		self.onl()
	s = g.toEncodedString(s,self.encoding,reportErrors=true) # 3/7/03
	self.outputStringWithLineEndings(s)
	self.putSentinel("@-body")
	
self.putCloseNodeSentinel(p)
</t>
<t tx="ekr.20031218072017.2714">def silentWrite(self,root):

	c = self.c ; self.root = root
	self.errors = 0
	c.endEditing() # Capture the current headline.
	try:
		self.targetFileName = root.atSilentFileNodeName()
		ok = self.openWriteFile(root)
		if not ok: return
		for p in root.subtree_iter():
			&lt;&lt; Write p's headline if it starts with @@ &gt;&gt;
			&lt;&lt; Write p's body &gt;&gt;
		self.closeWriteFile()
		self.replaceTargetFileIfDifferent()
		root.clearOrphan() ; root.clearDirty()
	except:
		self.handleWriteException(root)</t>
<t tx="ekr.20031218072017.2715">s = p.headString()

if g.match(s,0,"@@"):
	s = s[2:]
	if s and len(s) &gt; 0:
		s = g.toEncodedString(s,self.encoding,reportErrors=true) # 3/7/03
		self.outputFile.write(s)</t>
<t tx="ekr.20031218072017.2716">s = p.bodyString()

if s:
	s = g.toEncodedString(s,self.encoding,reportErrors=true) # 3/7/03
	self.outputStringWithLineEndings(s)</t>
<t tx="ekr.20031218072017.2717"></t>
<t tx="ekr.20031218072017.2718">def closeWriteFile (self):
	
	if self.outputFile:
		if self.suppress_newlines and self.newline_pending:
			self.newline_pending = false
			self.onl() # Make sure file ends with a newline.
		self.outputFile.flush()
		self.outputFile.close()
		self.outputFile = None
</t>
<t tx="ekr.20031218072017.2719">def handleWriteException (self,root=None):
	
	g.es("exception writing:" + self.targetFileName,color="red")
	g.es_exception()
	
	if self.outputFile:
		self.outputFile.flush()
		self.outputFile.close()
		self.outputFile = None
	
	if self.outputFileName != None:
		try: # Just delete the temp file.
			os.remove(self.outputFileName)
		except:
			g.es("exception deleting:" + self.outputFileName,color="red")
			g.es_exception()

	if root:
		# Make sure we try to rewrite this file.
		root.setOrphan()
		root.setDirty()</t>
<t tx="ekr.20031218072017.2720"># Open files.  Set root.orphan and root.dirty flags and return on errors.

def openWriteFile (self,root):

	try:
		self.scanAllDirectives(root)
		valid = self.errors == 0
	except:
		self.writeError("exception in atFile.scanAllDirectives")
		g.es_exception()
		valid = false

	if valid:
		try:
			fn = self.targetFileName
			self.shortFileName = fn # name to use in status messages.
			self.targetFileName = g.os_path_join(self.default_directory,fn)
			self.targetFileName = g.os_path_normpath(self.targetFileName)
			path = g.os_path_dirname(self.targetFileName)
			if not path or not g.os_path_exists(path):
				self.writeError("path does not exist: " + path)
				valid = false
		except:
			self.writeError("exception creating path:" + fn)
			g.es_exception()
			valid = false

	if valid and g.os_path_exists(self.targetFileName):
		try:
			if not os.access(self.targetFileName,os.W_OK):
				self.writeError("can not create: read only: " + self.targetFileName)
				valid = false
		except:
			pass # os.access() may not exist on all platforms.
		
	if valid:
		try:
			self.outputFileName = self.targetFileName + ".tmp"
			self.outputFile = open(self.outputFileName,'wb')
			if self.outputFile is None:
				self.writeError("can not create " + self.outputFileName)
				valid = false
		except:
			g.es("exception creating:" + self.outputFileName)
			g.es_exception()
			valid = false

	if not valid:
		root.setOrphan()
		root.setDirty()
		self.outputFile = None # 1/29/04
	
	return valid</t>
<t tx="ekr.20031218072017.2721">def putInitialComment (self):
	
	s2 = g.app.config.output_initial_comment
	if s2:
		lines = string.split(s2,"\\n")
		for line in lines:
			line = line.replace("@date",time.asctime())
			if len(line)&gt; 0:
				self.putSentinel("@comment " + line)</t>
<t tx="ekr.20031218072017.2722"># Write the string s as-is except that we replace '\n' with the proper line ending.

def outputStringWithLineEndings (self,s):

	# Calling self.onl() runs afoul of queued newlines.
	self.os(s.replace('\n',self.output_newline))</t>
<t tx="ekr.20031218072017.2723">def putBodyPart(self,p):
	
	""" Generate the body enclosed in sentinel lines."""

	s = p.v.t.bodyString
	i = g.skip_ws_and_nl(s, 0)
	if i &gt;= len(s): return

	s = g.removeTrailingWs(s) # don't use string.rstrip!
	self.putSentinel("@+body")
	&lt;&lt; put code/doc parts and sentinels &gt;&gt;
	self.putSentinel("@-body")</t>
<t tx="ekr.20031218072017.2724">i = 0 ; n = len(s)
firstLastHack = 1

if firstLastHack:
	&lt;&lt; initialize lookingForFirst/Last &amp; initialLastDirective &gt;&gt;
while i &lt; n:
	kind = self.directiveKind(s,i)
	if firstLastHack:
		&lt;&lt; set lookingForFirst/Last &amp; initialLastDirective &gt;&gt;
	j = i
	if kind == docDirective or kind == atDirective:
		i = self.putDoc(s,i,kind)
	elif ( # 10/16/02
		kind == miscDirective or
		kind == rawDirective or
		kind == endRawDirective ):
		if firstLastHack:
			&lt;&lt; handle misc directives &gt;&gt;
		else:
			i = self.putDirective(s,i)
	elif kind == noDirective or kind == othersDirective:
		i = self.putCodePart(s,i,p)
	elif kind == cDirective or kind == codeDirective:
		i = self.putDirective(s,i)
		i = self.putCodePart(s,i,p)
	else: assert(false) # We must handle everything that directiveKind returns
	assert(n == len(s))
	assert(j &lt; i) # We must make progress.

if firstLastHack:
	&lt;&lt; put out the last directives, if any &gt;&gt;</t>
<t tx="ekr.20031218072017.2725"># 14-SEP-2002 DTHEIN: If this is the root node, then handle all @first directives here
lookingForLast = 0
lookingForFirst = 0
initialLastDirective = -1
lastDirectiveCount = 0
if (p == self.root):
	lookingForLast = 1
	lookingForFirst = 1</t>
<t tx="ekr.20031218072017.2726"># 14-SEP-2002 DTHEIN: If first directive isn't @first, then stop looking for @first
if lookingForFirst:
	if kind != miscDirective:
		lookingForFirst = 0
	elif not g.match_word(s,i,"@first"):
		lookingForFirst = 0

if lookingForLast:
	if initialLastDirective == -1:
		if (kind == miscDirective) and g.match_word(s,i,"@last"):
			# mark the point where the last directive was found
			initialLastDirective = i
	else:
		if (kind != miscDirective) or (not g.match_word(s,i,"@last")):
			# found something after @last, so process the @last directives
			# in 'ignore them' mode
			i, initialLastDirective = initialLastDirective, -1
			lastDirectiveCount = 0
			kind = self.directiveKind(s,i)</t>
<t tx="ekr.20031218072017.2727">if lookingForFirst: # DTHEIN: can only be true if it is @first directive
	i = self.putEmptyDirective(s,i)
elif (initialLastDirective != -1) and g.match_word(s,i,"@last"):
	# DTHEIN: can only be here if lookingForLast is true
	# skip the last directive ... we'll output it at the end if it
	# is truly 'last'
	lastDirectiveCount += 1
	i = g.skip_line(s,i)
else:
	i = self.putDirective(s,i)</t>
<t tx="ekr.20031218072017.2728"># 14-SEP-2002 DTHEIN
if initialLastDirective != -1:
	d = initialLastDirective
	for k in range(lastDirectiveCount):
		d = self.putEmptyDirective(s,d)</t>
<t tx="ekr.20031218072017.2729">def putDoc(self,s,i,kind):

	"""Outputs a doc section terminated by @code or end-of-text.
	
	All other interior directives become part of the doc part."""

	if kind == atDirective:
		i += 1 ; tag = "at"
	elif kind == docDirective:
		i += 4 ; tag = "doc"
	else: assert(false)
	# Set j to the end of the doc part.
	n = len(s) ; j = i
	while j &lt; n:
		j = g.skip_line(s, j)
		kind = self.directiveKind(s, j)
		if kind == codeDirective or kind == cDirective:
			break
	self.putSentinel("@+" + tag)
	self.putDocPart(s[i:j])
	self.putSentinel("@-" + tag)
	return j
</t>
<t tx="ekr.20031218072017.2730"># Puts a comment part in comments.
# Note: this routine is _never_ called in cweb mode,
# so noweb section references are _valid_ in cweb doc parts!

def putDocPart(self,s):

	# j = g.skip_line(s,0) ; g.trace(`s[:j]`)
	single = len(self.endSentinelComment) == 0
	if not single:
		self.putIndent(self.indent)
		self.os(self.startSentinelComment) ; self.onl()
	# Put all lines.
	i = 0 ; n = len(s)
	while i &lt; n:
		self.putIndent(self.indent)
		leading = self.indent
		if single:
			self.os(self.startSentinelComment) ; self.oblank()
			leading += len(self.startSentinelComment) + 1
		&lt;&lt; copy words, splitting the line if needed &gt;&gt;
	if not single:
		# This comment is like a sentinel.
		self.onl() ; self.putIndent(self.indent)
		self.os(self.endSentinelComment)
		self.onl() # Note: no trailing whitespace.</t>
<t tx="ekr.20031218072017.2731">@ We remove trailing whitespace from lines that have _not_ been split so that a newline has been inserted by this routine if and only if it is preceded by whitespace.
@c

line = i # Start of the current line.
while i &lt; n:
	word = i # Start of the current word.
	# Skip the next word and trailing whitespace.
	i = g.skip_ws(s, i)
	while i &lt; n and not g.is_nl(s,i) and not g.is_ws(s[i]):
		i += 1
	i = g.skip_ws(s,i)
	# Output the line if no more is left.
	if i &lt; n and g.is_nl(s,i):
		break
	# Split the line before the current word if needed.
	lineLen = i - line
	if line == word or leading + lineLen &lt; self.page_width:
		word = i # Advance to the next word.
	else:
		# Write the line before the current word and insert a newline.
		theLine = s[line:word]
		self.os(theLine)
		self.onl() # This line must contain trailing whitespace.
		line = i = word  # Put word on the next line.
		break
# Remove trailing whitespace and output the remainder of the line.
theLine = string.rstrip(s[line:i]) # from right.
self.os(theLine)
if i &lt; n and g.is_nl(s,i):
	i = g.skip_nl(s,i)
	self.onl() # No inserted newline and no trailing whitespace.</t>
<t tx="ekr.20031218072017.2732">def putCodePart(self,s,i,p):

	"""Expands a code part, terminated by any at-directive except at-others.
	
	It expands references and at-others and outputs @verbatim sentinels as needed."""

	atOthersSeen = false # true: at-others has been expanded.
	while i &lt; len(s):
		&lt;&lt; handle the start of a line &gt;&gt;
		&lt;&lt; put the line &gt;&gt;

	# Raw code parts can only end at the end of body text.
	self.raw = false
	return i
</t>
<t tx="ekr.20031218072017.2733">@ The at-others directive is the only directive that is recognized following leading whitespace, so it is just a little tricky to recognize it.
@c

leading_nl = (s[i] == g.body_newline) # 9/27/02: look ahead before outputting newline.
if leading_nl:
	i = g.skip_nl(s,i)
	self.onl() # 10/15/02: simpler to do it here.

#leading_ws1 = i # 1/27/03
j,delta = g.skip_leading_ws_with_indent(s,i,self.tab_width)
#leading_ws2 = j # 1/27/03
kind1 = self.directiveKind(s,i)
kind2 = self.directiveKind(s,j)
if self.raw:
	if kind1 == endRawDirective:
		&lt;&lt; handle @end_raw &gt;&gt;
else:
	if kind1 == othersDirective or kind2 == othersDirective:
		&lt;&lt; handle @others &gt;&gt;
	elif kind1 == rawDirective:
		&lt;&lt; handle @raw &gt;&gt;
	elif kind1 == noDirective:
		&lt;&lt; put @verbatim sentinel if necessary &gt;&gt;
	else:
		break # all other directives terminate the code part.</t>
<t tx="ekr.20031218072017.2734"># This skips all indent and delta whitespace, so putAtOthers must generate it all.

if 0: # 9/27/02: eliminates the newline preceeding the @+others sentinel.
	# This does not seem to be a good idea.
	i = g.skip_line(s,i) 
else:
	i = g.skip_to_end_of_line(s,i)

if atOthersSeen:
	self.writeError("@others already expanded in: " + p.headString())
else:
	atOthersSeen = true
	self.putAtOthers(p,delta)
	
	# 12/8/02: Skip the newline _after_ the @others.
	if not self.sentinels and g.is_nl(s,i):
		i = g.skip_nl(s,i)
</t>
<t tx="ekr.20031218072017.2735">self.raw = true
self.putSentinel("@@raw")
i = g.skip_line(s,i)</t>
<t tx="ekr.20031218072017.2736">self.raw = false
self.putSentinel("@@end_raw")
i = g.skip_line(s,i)</t>
<t tx="ekr.20031218072017.2737">if g.match (s,i,self.startSentinelComment + '@'):
	self.putSentinel("@verbatim") # Bug fix (!!): 9/20/03</t>
<t tx="ekr.20031218072017.2738">if not self.raw:
	# 12/8/02: Don't write trailing indentation if not writing sentinels.
	if self.sentinels or j &lt; len(s):
		self.putIndent(self.indent)

newlineSeen = false
# 12/8/02: we buffer characters here for two reasons:
# 1) to make traces easier to read and 2) to increase speed.
buf = i # Indicate the start of buffered characters.
while i &lt; len(s) and not newlineSeen:
	ch = s[i]
	if ch == g.body_newline:
		break
	elif ch == g.body_ignored_newline:
		i += 1
	elif ch == '&lt;' and not self.raw:
		&lt;&lt; put possible section reference &gt;&gt;
	else:
		i += 1
# Output any buffered characters.
self.putBuffered(s[buf:i])</t>
<t tx="ekr.20031218072017.2739">isSection, j = self.isSectionName(s, i)

if isSection:
	# Output the buffered characters and clear the buffer.
	s2 = s[buf:i] ; buf = i
	# 7/9/03: don't output trailing indentation if we aren't generating sentinels.
	if not self.sentinels:
		while len(s2) and s2[-1] in (' ','\t'):
			s2 = s2[:-1]
	self.putBuffered(s2)
	# Output the expansion.
	name = s[i:j]
	j,newlineSeen = self.putRef(name,p,s,j,delta)
	assert(j &gt; i) # isSectionName must have made progress
	i = j ; buf = i
else:
	# This is _not_ an error.
	i += 1</t>
<t tx="ekr.20031218072017.2740">def inAtOthers(self,p):

	"""Returns true if p should be included in the expansion of the at-others directive in the body text of p's parent.
	
	p will not be included if it is a definition node or if its body text contains an @ignore directive.
	Previously, a "nested" @others directive would also inhibit the inclusion of p."""

	# Return false if this has been expanded previously.
	if  p.isVisited(): return false

	# Return false if this is a definition node.
	h = p.headString()
	i = g.skip_ws(h,0)
	isSection, j = self.isSectionName(h,i)
	if isSection: return false

	# Return false if p's body contains an @ignore or at-others directive.
	if 1: # 7/29/02: New code.  Amazingly, this appears to work!
		return not p.isAtIgnoreNode()
	else: # old &amp; reliable code
		return not p.isAtIgnoreNode() and not p.isAtOthersNode()</t>
<t tx="ekr.20031218072017.2741"># returns (flag, end). end is the index of the character after the section name.

def isSectionName(self,s,i):

	if not g.match(s,i,"&lt;&lt;"):
		return false, -1
	i = g.find_on_line(s,i,"&gt;&gt;")
	if i:
		return true, i + 2
	else:
		return false, -1</t>
<t tx="ekr.20031218072017.2742">@ The at-others directive is recognized only at the start of the line.  This code must generate all leading whitespace for the opening sentinel.
@c
def putAtOthers(self,p,delta):
	
	"""Output code corresponding to an @others directive."""

	self.indent += delta
	self.putSentinel("@+others")

	for child in p.children_iter():
		if self.inAtOthers(child):
			self.putAtOthersChild(child)

	self.putSentinel("@-others")
	self.indent -= delta</t>
<t tx="ekr.20031218072017.2743">def putAtOthersChild(self,p):
	
	# g.trace(self.indent,p)
	self.putOpenNodeSentinel(p)
	
	# Insert the expansion of p.
	p.v.setVisited() # Make sure it is never expanded again.
	self.putBodyPart(p)

	# Insert expansions of all children.
	for child in p.children_iter():
		if self.inAtOthers(child):
			self.putAtOthersChild(child)

	self.putCloseNodeSentinel(p)
</t>
<t tx="ekr.20031218072017.2744">def putRef (self,name,p,s,i,delta):

	newlineSeen = false
	ref = g.findReference(name,p)
	if not ref:
		self.writeError("undefined section: " + name +
			"\n\treferenced from: " + p.headString())
		return i,newlineSeen

	# g.trace(self.indent,delta,s[i:])
	&lt;&lt; Generate the expansion of the reference &gt;&gt;

	# The newlineSeen allows the caller to break out of the loop.
	return i,newlineSeen</t>
<t tx="ekr.20031218072017.2745"># Adjust indent here so sentinel looks better.
self.indent += delta

self.putSentinel("@" + name)
self.putOpenSentinels(p,ref)
self.putBodyPart(ref)
self.putCloseSentinels(p,ref)
&lt;&lt; Add @verbatimAfterRef sentinel if required &gt;&gt;

self.indent -= delta
ref.setVisited()</t>
<t tx="ekr.20031218072017.2746">j = g.skip_ws(s,i)
if j &lt; len(s) and g.match(s,j,self.startSentinelComment + '@'):
	self.putSentinel("@verbatimAfterRef")
	# 9/27/02: Put the line immediately, before the @-node sentinel.
	k = g.skip_to_end_of_line(s,i)
	self.putBuffered(s[i:k])
	i = k ; newlineSeen = false</t>
<t tx="ekr.20031218072017.2747"></t>
<t tx="ekr.20031218072017.2748">def putBuffered (self,s):
	
	"""Put s, converting all tabs to blanks as necessary."""
	
	if s:
		w = self.tab_width
		if w &lt; 0:
			lines = s.split('\n')
			for i in xrange(len(lines)):
				line = lines[i]
				line2 = ""
				for j in xrange(len(line)):
					ch = line[j]
					if ch == '\t':
						w2 = g.computeWidth(s[:j],w)
						w3 = (abs(w) - (w2 % abs(w)))
						line2 += ' ' * w3
					else:
						line2 += ch
				lines[i] = line2
			s = string.join(lines,'\n')
		self.os(s)</t>
<t tx="ekr.20031218072017.2749">def oblank(self):
	self.os(' ')

def oblanks(self,n):
	self.os(' ' * abs(n))

def onl(self):
	self.os(self.output_newline)

def os(self,s):
	if s is None or len(s) == 0: return
	if self.suppress_newlines and self.newline_pending:
		self.newline_pending = false
		s = self.output_newline + s
	if self.outputFile:
		try:
			s = g.toEncodedString(s,self.encoding,reportErrors=true)
			self.outputFile.write(s)
		except:
			g.es("exception writing:" + `s`)
			g.es_exception()

def otabs(self,n):
	self.os('\t' * abs(n))</t>
<t tx="ekr.20031218072017.2750"># This method outputs s, a directive or reference, in a sentinel.

def putDirective(self,s,i):

	tag = "@delims"
	assert(i &lt; len(s) and s[i] == '@')
	k = i
	j = g.skip_to_end_of_line(s,i)
	directive = s[i:j]

	if g.match_word(s,k,tag):
		&lt;&lt; handle @delims &gt;&gt;
	else:
		self.putSentinel("@" + directive)

	i = g.skip_line(s,k)
	return i</t>
<t tx="ekr.20031218072017.2751"># Put a space to protect the last delim.
self.putSentinel(directive + " ") # 10/23/02: put @delims, not @@delims

# Skip the keyword and whitespace.
j = i = g.skip_ws(s,k+len(tag))

# Get the first delim.
while i &lt; len(s) and not g.is_ws(s[i]) and not g.is_nl(s,i):
	i += 1
if j &lt; i:
	self.startSentinelComment = s[j:i]
	# Get the optional second delim.
	j = i = g.skip_ws(s,i)
	while i &lt; len(s) and not g.is_ws(s[i]) and not g.is_nl(s,i):
		i += 1
	self.endSentinelComment = g.choose(j&lt;i, s[j:i], "")
else:
	self.writeError("Bad @delims directive")</t>
<t tx="ekr.20031218072017.2752"># 14-SEP-2002 DTHEIN
# added for use by putBodyPart()

# This method outputs the directive without the parameter text
def putEmptyDirective(self,s,i):

	assert(i &lt; len(s) and s[i] == '@')
	
	endOfLine = s.find('\n',i)
	# 21-SEP-2002 DTHEIN: if no '\n' then just use line length
	if endOfLine == -1:
		endOfLine = len(s)
	token = s[i:endOfLine].split()
	directive = token[0]
	self.putSentinel("@" + directive)

	i = g.skip_line(s,i)
	return i</t>
<t tx="ekr.20031218072017.2753">def putIndent(self,n):
	
	"""Put tabs and spaces corresponding to n spaces, assuming that we are at the start of a line."""

	if n != 0:
		w = self.tab_width
		if w &gt; 1:
			q,r = divmod(n,w) 
			self.otabs(q) 
			self.oblanks(r)
		else:
			self.oblanks(n)</t>
<t tx="ekr.20031218072017.2754">@others</t>
<t tx="ekr.20031218072017.2755">def __init__(self,c):
	
	"""Ctor for 4.x atFile class."""
	
	at = self

	# Initialize the base class.
	oldDerivedFile.__init__(self,c) 

	# For 4.x reading &amp; writing...
	at.inCode = true

	# For 4.x writing...
	at.docKind = None
	at.pending = [] # Doc part that remains to be written.

	# For 4.x reading...
	at.docOut = [] # The doc part being accumulated.
	at.done = false # true when @-leo seen.
	at.endSentinelStack = []
	at.importing = false
	at.indent = 0 ; at.indentStack = []
	at.lastLines = [] # The lines after @-leo
	at.leadingWs = ""
	at.out = None ; at.outStack = []
	at.root_seen = false # true: root vnode has been handled in this file.
	at.tnodeList = [] ; at.tnodeListIndex = 0
	at.t = None ; at.tStack = []

	# The dispatch dictionary used by scanText4.
	at.dispatch_dict = {
		# Plain line.
		noSentinel: at.readNormalLine,
		# Starting sentinels...
		startAt:     at.readStartAt,
		startDoc:    at.readStartDoc,
		startLeo:    at.readStartLeo,
		startNode:   at.readStartNode,
		startOthers: at.readStartOthers,
		# Ending sentinels...
		endAt:     at.readEndAt,
		endDoc:    at.readEndDoc,
		endLeo:    at.readEndLeo,
		endNode:   at.readEndNode,
		endOthers: at.readEndOthers,
		# Non-paired sentinels.
		startAfterRef:  at.readAfterRef,
		startComment:   at.readComment,
		startDelims:    at.readDelims,
		startDirective: at.readDirective,
		startNl:        at.readNl,
		startNonl:      at.readNonl,
		startRef:       at.readRef,
		startVerbatim:  at.readVerbatim,
		# Ignored 3.x sentinels
		endBody:               at.ignoreOldSentinel,
		startBody:             at.ignoreOldSentinel,
		startVerbatimAfterRef: at.ignoreOldSentinel }</t>
<t tx="ekr.20031218072017.2756"></t>
<t tx="ekr.20031218072017.2757">def readOpenFile(self,root,file,firstLines):
	
	"""Read an open 4.x derived file."""
	
	at = self

	# Scan the 4.x file.
	at.tnodeListIndex = 0
	lastLines = at.scanText4(file,root)
	root.v.t.setVisited() # Disable warning about set nodes.
	
	# Handle first and last lines.
	try: body = root.v.t.tempBodyString
	except: body = ""
	lines = body.split('\n')
	at.completeFirstDirectives(lines,firstLines)
	at.completeLastDirectives(lines,lastLines)
	s = '\n'.join(lines).replace('\r', '')
	root.v.t.tempBodyString = s</t>
<t tx="ekr.20031218072017.2758">def scanText4 (self,file,p):
	
	"""Scan a 4.x derived file non-recursively."""

	at = self
	&lt;&lt; init ivars for scanText4 &gt;&gt;
	while at.errors == 0 and not at.done:
		s = at.readLine(file)
		if len(s) == 0: break
		kind = at.sentinelKind(s)
		# g.trace(at.sentinelName(kind),`s`)
		if kind == noSentinel:
			i = 0
		else:
			i = at.skipSentinelStart(s,0)
		func = at.dispatch_dict[kind]
		func(s,i)

	if at.errors == 0 and not at.done:
		&lt;&lt; report unexpected end of text &gt;&gt;

	return at.lastLines</t>
<t tx="ekr.20031218072017.2759"># Unstacked ivars...
at.done = false
at.inCode = true
at.lastLines = [] # The lines after @-leo
at.leadingWs = ""
at.indent = 0 # Changed only for sentinels.
at.rootSeen = false

# Stacked ivars...
at.endSentinelStack = [endLeo] # We have already handled the @+leo sentinel.
at.out = [] ; at.outStack = []
at.t = p.v.t ; at.tStack = []

if 0: # Useful for debugging.
	if hasattr(p.v,"tnodeList"):
		g.trace("len(p.v.tnodeList)",len(p.v.tnodeList),p.v)
	else:
		g.trace("no tnodeList",p.v)</t>
<t tx="ekr.20031218072017.2760">assert(at.endSentinelStack)

at.readError(
	"Unexpected end of file. Expecting %s sentinel" %
	at.sentinelName(at.endSentinelStack[-1]))</t>
<t tx="ekr.20031218072017.2761">def readNormalLine (self,s,i):

	at = self
	
	if at.inCode:
		if not at.raw:
			s = g.removeLeadingWhitespace(s,at.indent,at.tab_width)
		at.out.append(s)
	else:
		&lt;&lt; Skip the leading stuff &gt;&gt;
		&lt;&lt; Append s to docOut &gt;&gt;</t>
<t tx="ekr.20031218072017.2762">if len(at.endSentinelComment) == 0:
	# Skip the single comment delim and a blank.
	i = g.skip_ws(s,0)
	if g.match(s,i,at.startSentinelComment):
		i += len(at.startSentinelComment)
		if g.match(s,i," "): i += 1
else:
	i = at.skipIndent(s,0,at.indent)

</t>
<t tx="ekr.20031218072017.2763">line = s[i:-1] # remove newline for rstrip.

if line == line.rstrip():
	# no trailing whitespace: the newline is real.
	at.docOut.append(line + '\n')
else:
	# trailing whitespace: the newline is fake.
	at.docOut.append(line)</t>
<t tx="ekr.20031218072017.2764"></t>
<t tx="ekr.20031218072017.2765">def readStartLeo (self,s,i):
	
	"""Read an unexpected @+leo sentinel."""

	at = self
	assert(g.match(s,i,"+leo"))
	at.readError("Ignoring unexpected @+leo sentinel")</t>
<t tx="ekr.20031218072017.2766">def readStartNode (self,s,i):
	
	"""Read an @node sentinel."""
	
	at = self ; assert(g.match(s,i,"+node:"))
	i += 6
	
	&lt;&lt; Set headline, undoing the CWEB hack &gt;&gt;
	if not at.root_seen:
		at.root_seen = true
		if not at.importing:
			&lt;&lt; Check the filename in the sentinel &gt;&gt;

	i,newIndent = g.skip_leading_ws_with_indent(s,0,at.tab_width)
	at.indentStack.append(at.indent) ; at.indent = newIndent
	
	at.outStack.append(at.out) ; at.out = []
	at.tStack.append(at.t) ; at.t = at.findChild(headline)
	
	at.endSentinelStack.append(endNode)</t>
<t tx="ekr.20031218072017.2767"># Set headline to the rest of the line.
# Don't strip leading whitespace."

if len(at.endSentinelComment) == 0:
	headline = s[i:-1].rstrip()
else:
	k = s.rfind(at.endSentinelComment,i)
	headline = s[i:k].rstrip() # works if k == -1

# Undo the CWEB hack: undouble @ signs if the opening comment delim ends in '@'.
if at.startSentinelComment[-1:] == '@':
	headline = headline.replace('@@','@')</t>
<t tx="ekr.20031218072017.2768">h = headline.strip()

if h[:5] == "@file":
	i,junk,junk = g.scanAtFileOptions(h)
	fileName = string.strip(h[i:])
	if fileName != at.targetFileName:
		at.readError("File name in @node sentinel does not match file's name")
elif h[:8] == "@rawfile":
	fileName = string.strip(h[8:])
	if fileName != at.targetFileName:
		at.readError("File name in @node sentinel does not match file's name")
else:
	at.readError("Missing @file in root @node sentinel")</t>
<t tx="ekr.20031218072017.2769">def readStartOthers (self,s,i):
	
	"""Read an @+others sentinel."""

	at = self
	j = g.skip_ws(s,i)
	leadingWs = s[i:j]
	if leadingWs:
		assert(g.match(s,j,"@+others"))
	else:
		assert(g.match(s,j,"+others"))

	# Make sure that the generated at-others is properly indented.
	at.out.append(leadingWs + "@others\n")
	
	at.endSentinelStack.append(endOthers)</t>
<t tx="ekr.20031218072017.2770"></t>
<t tx="ekr.20031218072017.2771">def readEndLeo (self,s,i):
	
	"""Read an @-leo sentinel."""
	
	at = self

	# Ignore everything after @-leo.
	# Such lines were presumably written by @last.
	while 1:
		s = at.readLine(at.file)
		if len(s) == 0: break
		at.lastLines.append(s) # Capture all trailing lines, even if empty.

	at.done = true</t>
<t tx="ekr.20031218072017.2772">def readEndNode (self,s,i):
	
	"""Handle end-of-node processing for @-others and @-ref sentinels."""

	at = self
	
	# End raw mode.
	at.raw = false
	
	# Set the temporary body text.
	s = ''.join(at.out)
	s = g.toUnicode(s,g.app.tkEncoding) # 9/28/03

	if at.importing:
		at.t.bodyString = s
	else:
		at.t.tempBodyString = s
			
	# Indicate that the tnode has been set in the derived file.
	at.t.setVisited()

	# End the previous node sentinel.
	at.indent = at.indentStack.pop()
	at.out = at.outStack.pop()
	at.t = at.tStack.pop()

	at.popSentinelStack(endNode)</t>
<t tx="ekr.20031218072017.2773">def readEndOthers (self,s,i):
	
	"""Read an @-others sentinel."""
	
	at = self
	at.popSentinelStack(endOthers)</t>
<t tx="ekr.20031218072017.2774"></t>
<t tx="ekr.20031218072017.2775">def  ignoreOldSentinel (self,s,i):
	
	"""Ignore an 3.x sentinel."""
	
	g.es("Ignoring 3.x sentinel: " + s.strip(), color="blue")</t>
<t tx="ekr.20031218072017.2776">def  readAfterRef (self,s,i):
	
	"""Read an @afterref sentinel."""
	
	at = self
	assert(g.match(s,i,"afterref"))
	
	# Append the next line to the text.
	s = at.readLine(at.file)
	at.out.append(s)</t>
<t tx="ekr.20031218072017.2777">def readComment (self,s,i):
	
	"""Read an @comment sentinel."""

	assert(g.match(s,i,"comment"))

	# Just ignore the comment line!
</t>
<t tx="ekr.20031218072017.2778">def readDelims (self,s,i):
	
	"""Read an @delims sentinel."""
	
	at = self
	assert(g.match(s,i-1,"@delims"));

	# Skip the keyword and whitespace.
	i0 = i-1
	i = g.skip_ws(s,i-1+7)
		
	# Get the first delim.
	j = i
	while i &lt; len(s) and not g.is_ws(s[i]) and not g.is_nl(s,i):
		i += 1
	
	if j &lt; i:
		at.startSentinelComment = s[j:i]
		# print "delim1:", at.startSentinelComment
	
		# Get the optional second delim.
		j = i = g.skip_ws(s,i)
		while i &lt; len(s) and not g.is_ws(s[i]) and not g.is_nl(s,i):
			i += 1
		end = g.choose(j&lt;i,s[j:i],"")
		i2 = g.skip_ws(s,i)
		if end == at.endSentinelComment and (i2 &gt;= len(s) or g.is_nl(s,i2)):
			at.endSentinelComment = "" # Not really two params.
			line = s[i0:j]
			line = line.rstrip()
			at.out.append(line+'\n')
		else:
			at.endSentinelComment = end
			# print "delim2:",end
			line = s[i0:i]
			line = line.rstrip()
			at.out.append(line+'\n')
	else:
		at.readError("Bad @delims")
		# Append the bad @delims line to the body text.
		at.out.append("@delims")</t>
<t tx="ekr.20031218072017.2779">def readDirective (self,s,i):
	
	"""Read an @@sentinel."""
	
	at = self
	assert(g.match(s,i,"@")) # The first '@' has already been eaten.
	
	if g.match_word(s,i,"@raw"):
		at.raw = true
	elif g.match_word(s,i,"@end_raw"):
		at.raw = false
	
	e = at.endSentinelComment
	s2 = s[i:]
	if len(e) &gt; 0:
		k = s.rfind(e,i)
		if k != -1:
			s2 = s[i:k] + '\n'
		
	start = at.startSentinelComment
	if start and len(start) &gt; 0 and start[-1] == '@':
		s2 = s2.replace('@@','@')

	at.out.append(s2)</t>
<t tx="ekr.20031218072017.2780">def readNl (self,s,i):
	
	"""Handle an @nonl sentinel."""
	
	at = self
	assert(g.match(s,i,"nl"))
	
	if at.inCode:
		at.out.append('\n')
	else:
		at.docOut.append('\n')</t>
<t tx="ekr.20031218072017.2781">def readNonl (self,s,i):
	
	"""Handle an @nonl sentinel."""
	
	at = self
	assert(g.match(s,i,"nonl"))
	
	if at.inCode:
		s = ''.join(at.out)
		if s and s[-1] == '\n':
			at.out = [s[:-1]]
		else:
			g.trace("out:",`s`)
			at.readError("unexpected @nonl directive in code part")	
	else:
		s = ''.join(at.pending)
		if s:
			if s and s[-1] == '\n':
				at.pending = [s[:-1]]
			else:
				g.trace("docOut:",`s`)
				at.readError("unexpected @nonl directive in pending doc part")
		else:
			s = ''.join(at.docOut)
			if s and s[-1] == '\n':
				at.docOut = [s[:-1]]
			else:
				g.trace("docOut:",`s`)
				at.readError("unexpected @nonl directive in doc part")</t>
<t tx="ekr.20031218072017.2782">@ The sentinel contains an @ followed by a section name in angle brackets.  This code is different from the code for the @@ sentinel: the expansion of the reference does not include a trailing newline.
@c

def readRef (self,s,i):
	
	"""Handle an @&lt;&lt; sentinel."""
	
	at = self
	j = g.skip_ws(s,i)
	assert(g.match(s,j,"&lt;&lt;"))
	
	if len(at.endSentinelComment) == 0:
		line = s[i:-1] # No trailing newline
	else:
		k = s.find(at.endSentinelComment,i)
		line = s[i:k] # No trailing newline, whatever k is.
			
	# Undo the cweb hack.
	start = at.startSentinelComment
	if start and len(start) &gt; 0 and start[-1] == '@':
		line = line.replace('@@','@')

	at.out.append(line)
</t>
<t tx="ekr.20031218072017.2783">def readVerbatim (self,s,i):
	
	"""Read an @verbatim sentinel."""
	
	at = self
	assert(g.match(s,i,"verbatim"))
	
	# Append the next line to the text.
	s = at.readLine(at.file) 
	i = at.skipIndent(s,0,at.indent)
	at.out.append(s[i:])</t>
<t tx="ekr.20031218072017.2784">def badEndSentinel (self,expectedKind):
	
	"""Handle a mismatched ending sentinel."""

	at = self
	assert(at.endSentinelStack)
	at.readError("Ignoring %s sentinel.  Expecting %s" %
		(at.sentinelName(at.endSentinelStack[-1]),
		 at.sentinelName(expectedKind)))
		 
def popSentinelStack (self,expectedKind):
	
	"""Pop an entry from endSentinelStack and check it."""
	
	at = self
	if at.endSentinelStack and at.endSentinelStack[-1] == expectedKind:
		at.endSentinelStack.pop()
	else:
		at.badEndSentinel(expectedKind)</t>
<t tx="ekr.20031218072017.2785"></t>
<t tx="ekr.20031218072017.2786">def nodeSentinelText(self,p):
	
	"""Return the text of a @+node or @-node sentinel for p."""
	
	at = self ; h = p.headString()
	&lt;&lt; remove comment delims from h if necessary &gt;&gt;
	return h</t>
<t tx="ekr.20031218072017.2787">@ Bug fix 1/24/03:

If the present @language/@comment settings do not specify a single-line comment we remove all block comment delims from h.  This prevents headline text from interfering with the parsing of node sentinels.
@c

start = at.startSentinelComment
end = at.endSentinelComment

if end and len(end) &gt; 0:
	h = h.replace(start,"")
	h = h.replace(end,"")</t>
<t tx="ekr.20031218072017.2788">def putLeadInSentinel (self,s,i,j,delta):
	
	"""Generate @nonl sentinels as needed to ensure a newline before a group of sentinels.
	
	Set at.leadingWs as needed for @+others and @+&lt;&lt; sentinels.

	i points at the start of a line.
	j points at @others or a section reference.
	delta is the change in at.indent that is about to happen and hasn't happened yet."""

	at = self
	at.leadingWs = "" # Set the default.
	if i == j:
		return # The @others or ref starts a line.

	k = g.skip_ws(s,i)
	if j == k:
		# Only whitespace before the @others or ref.
		at.leadingWs = s[i:j] # Remember the leading whitespace, including its spelling.
	else:
		# g.trace("indent",self.indent)
		self.putIndent(self.indent) # 1/29/04: fix bug reported by Dan Winkler.
		at.os(s[i:j]) ; at.onl_sent() # 10/21/03
		at.indent += delta # Align the @nonl with the following line.
		at.putSentinel("@nonl")
		at.indent -= delta # Let the caller set at.indent permanently.</t>
<t tx="ekr.20031218072017.2789">def putOpenLeoSentinel(self,s):
	
	"""Write @+leo sentinel."""

	at = self
	
	if not at.sentinels:
		return # Handle @nosentinelsfile.

	encoding = at.encoding.lower()
	if encoding != "utf-8":
		s = s + "-encoding=%s." % (encoding)
	
	at.putSentinel(s)</t>
<t tx="ekr.20031218072017.2790"># This method outputs all sentinels.

def putSentinel(self,s):

	"Write a sentinel whose text is s, applying the CWEB hack if needed."
	
	at = self

	if not at.sentinels:
		return # Handle @file-nosent

	at.putIndent(at.indent)
	at.os(at.startSentinelComment)
	&lt;&lt; apply the cweb hack to s &gt;&gt;
	at.os(s)
	if at.endSentinelComment:
		at.os(at.endSentinelComment)
	at.onl()</t>
<t tx="ekr.20031218072017.2791">@ The cweb hack:

If the opening comment delim ends in '@', double all '@' signs except the first, which is "doubled" by the trailing '@' in the opening comment delimiter.
@c

start = at.startSentinelComment
if start and start[-1] == '@':
	assert(s and s[0]=='@')
	s = s.replace('@','@@')[1:]</t>
<t tx="ekr.20031218072017.2792">def skipSentinelStart(self,s,i):
	
	"""Skip the start of a sentinel."""

	start = self.startSentinelComment
	assert(start and len(start)&gt;0)

	i = g.skip_ws(s,i)
	assert(g.match(s,i,start))
	i += len(start)

	# 7/8/02: Support for REM hack
	i = g.skip_ws(s,i)
	assert(i &lt; len(s) and s[i] == '@')
	return i + 1
</t>
<t tx="ekr.20031218072017.2793">def sentinelKind(self,s):
	
	"""Return the kind of sentinel at s."""
	
	at = self

	i = g.skip_ws(s,0)
	if g.match(s,i,at.startSentinelComment): 
		i += len(at.startSentinelComment)
	else:
		return noSentinel

	# Locally undo cweb hack here
	start = at.startSentinelComment
	if start and len(start) &gt; 0 and start[-1] == '@':
		s = s[:i] + string.replace(s[i:],'@@','@')
		
	# 4.0: Look ahead for @[ws]@others and @[ws]&lt;&lt;
	if g.match(s,i,"@"):
		j = g.skip_ws(s,i+1)
		if j &gt; i+1:
			# g.trace(`ws`,`s`)
			if g.match(s,j,"@+others"):
				return startOthers
			elif g.match(s,j,"&lt;&lt;"):
				return startRef
			else:
				# No other sentinels allow whitespace following the '@'
				return noSentinel

	# Do not skip whitespace here!
	if g.match(s,i,"@&lt;&lt;"): return startRef
	if g.match(s,i,"@@"):   return startDirective
	if not g.match(s,i,'@'): return noSentinel
	j = i # start of lookup
	i += 1 # skip the at sign.
	if g.match(s,i,'+') or g.match(s,i,'-'):
		i += 1
	i = g.skip_c_id(s,i)
	key = s[j:i]
	if len(key) &gt; 0 and sentinelDict.has_key(key):
		return sentinelDict[key]
	else:
		return noSentinel</t>
<t tx="ekr.20031218072017.2794">"""Syntax coloring routines for Leo."""

@language python

import leoGlobals as g
from leoGlobals import true,false

import string

&lt;&lt; define leo keywords &gt;&gt;
&lt;&lt; define colorizer constants &gt;&gt;

@others</t>
<t tx="ekr.20031218072017.2795"># These defaults are sure to exist.
default_colors_dict = {
	# tag name      :(     option name,           default color),
	"comment"       :("comment_color",               "red"),
	"cwebName"      :("cweb_section_name_color",     "red"),
	"pp"             :("directive_color",             "blue"),
	"docPart"        :("doc_part_color",              "red"),
	"keyword"        :("keyword_color",               "blue"),
	"leoKeyword"     :("leo_keyword_color",           "blue"),
	"link"           :("section_name_color",          "red"),
	"nameBrackets"   :("section_name_brackets_color", "blue"),
	"string"         :("string_color",                "#00aa00"), # Used by IDLE.
	"name"           :("undefined_section_name_color","red"),
	"latexBackground":("latex_background_color","white") }</t>
<t tx="ekr.20031218072017.2796">class baseColorizer:
	"""The base class for Leo's syntax colorer."""
	&lt;&lt; define colorizer keywords &gt;&gt;
	@others
	
class colorizer (baseColorizer):
	"""Leo's syntax colorer class"""
	pass</t>
<t tx="ekr.20031218072017.2797"></t>
<t tx="ekr.20031218072017.2798">def OnHyperLinkControlClick (self,v):

	pass</t>
<t tx="ekr.20031218072017.2799">def OnHyperLinkEnter (self,v):

	pass # g.trace(`v` + ", " + `v.tagName`)</t>
<t tx="ekr.20031218072017.2800">def OnHyperLinkLeave (self,v):

	pass # g.trace(`v`)</t>
<t tx="ekr.20031218072017.2801"># The main colorizer entry point.

def colorize(self,p,incremental=false):

	if self.enabled:
		# g.trace("incremental",incremental)
		self.incremental=incremental
		self.updateSyntaxColorer(p)
		return self.colorizeAnyLanguage(p)
	else:
		return "ok" # For unit testing.
		
# Called from incremental undo code.
# Colorizes the lines between the leading and trailing lines.
		
def recolor_range(self,p,leading,trailing):
	
	if self.enabled:
		# g.trace("leading,trailing",leading,trailing)
		self.incremental=true
		self.updateSyntaxColorer(p)
		return self.colorizeAnyLanguage(p,leading=leading,trailing=trailing)
	else:
		return "ok" # For unit testing.</t>
<t tx="ekr.20031218072017.2802"># At present these are not used.

def schedule(self,p,incremental=0):

	if self.enabled:
		self.incremental=incremental
		g.app.gui.setIdleTimeHook(self.idle_colorize,p)
		
def idle_colorize(self,p):

	if p and self.enabled:
		self.colorize(p,self.incremental)</t>
<t tx="ekr.20031218072017.2803">def getCwebWord (self,s,i):
	
	# g.trace(g.get_line(s,i))
	if not g.match(s,i,"@"):
		return None
	
	ch1 = ch2 = word = None
	if i + 1 &lt; len(s): ch1 = s[i+1]
	if i + 2 &lt; len(s): ch2 = s[i+2]

	if g.match(s,i,"@**"):
		word = "@**"
	elif not ch1:
		word = "@"
	elif not ch2:
		word = s[i:i+2]
	elif (
		(ch1 in string.ascii_letters and not ch2 in string.ascii_letters) or # single-letter control code
		ch1 not in string.ascii_letters # non-letter control code
	):
		word = s[i:i+2]
		
	# if word: g.trace(`word`)
		
	return word</t>
<t tx="ekr.20031218072017.2804"># self.flag is true unless an unambiguous @nocolor is seen.

def updateSyntaxColorer (self,p):

	self.flag = self.useSyntaxColoring(p)
	self.scanColorDirectives(p)
</t>
<t tx="ekr.20031218072017.2805">def useSyntaxColoring (self,p):
	
	"""Return true unless p is unambiguously under the control of @nocolor."""

	first = p ; val = true
	for p in p.self_and_parents_iter():
		s = p.v.t.bodyString
		dict = g.get_directives_dict(s)
		no_color = dict.has_key("nocolor")
		color = dict.has_key("color")
		# A color anywhere in the target enables coloring.
		if color and p == first:
			val = true ; break
		# Otherwise, the @nocolor specification must be unambiguous.
		elif no_color and not color:
			val = false ; break
		elif color and not no_color:
			val = true ; break

	return val</t>
<t tx="ekr.20031218072017.2806">@ These methods are like the corresponding functions in leoGlobals.py except they issue no error messages.
</t>
<t tx="ekr.20031218072017.2807">def setFirstLineState (self):
	
	if self.flag:
		if self.rootMode:
			state = g.choose(self.rootMode=="code","normal","doc")
		else:
			state = "normal"
	else:
		state = "nocolor"

	return state</t>
<t tx="ekr.20031218072017.2808">def skip_id(self,s,i,chars=None):

	n = len(s)
	while i &lt; n:
		ch = s[i]
		if ch in string.ascii_letters or ch in string.digits or ch == '_':
			i += 1
		elif chars and ch in chars:
			i += 1
		else: break
	return i
</t>
<t tx="ekr.20031218072017.2809">def skip_string(self,s,i):

	delim = s[i] ; i += 1
	assert(delim == '"' or delim == "'")
	n = len(s)
	while i &lt; n and s[i] != delim:
		if s[i:] == "\\":
			return n,g.choose(delim=="'","singleString","doubleString")
		elif s[i] == '\\' :
			i += 2
		else: i += 1

	if i &gt;= n:
		if self.language in ("elisp","html"):
			return n,"doubleString"
		else:
			return n, "normal"
	elif s[i] == delim:
		i += 1
	return i,"normal"
</t>
<t tx="ekr.20031218072017.2810">@language python

import leoGlobals as g
from leoGlobals import true,false

import leoAtFile,leoFileCommands,leoImport,leoNodes,leoTangle,leoUndo
import sys
import tempfile

class baseCommands:
	"""The base class for Leo's main commander."""
	@others

class Commands (baseCommands):
	"""A class that implements most of Leo's commands."""
	pass</t>
<t tx="ekr.20031218072017.2811"></t>
<t tx="ekr.20031218072017.2812">def __init__(self,frame,fileName):
	
	# g.trace("Commands",fileName)

	self.frame = frame
	self.mFileName = fileName
	self.initIvars()

	# initialize the sub-commanders
	self.fileCommands = leoFileCommands.fileCommands(self)
	self.atFileCommands = leoAtFile.atFile(self)
	self.importCommands = leoImport.leoImportCommands(self)
	self.tangleCommands = leoTangle.tangleCommands(self)
	self.undoer = leoUndo.undoer(self)

def initIvars(self):

	&lt;&lt; initialize ivars &gt;&gt;
	self.setIvarsFromFind()</t>
<t tx="ekr.20031218072017.2813">self._currentPosition = self.nullPosition()
self._rootPosition    = self.nullPosition()
self._topPosition     = self.nullPosition()

# per-document info...
self.hookFunction = None
self.openDirectory = None

self.expansionLevel = 0  # The expansion level of this outline.
self.expansionNode = None # The last node we expanded or contracted.
self.changed = false # true if any data has been changed since the last save.
self.loading = false # true if we are loading a file: disables c.setChanged()
self.outlineToNowebDefaultFileName = "noweb.nw" # For Outline To Noweb dialog.

# For tangle/untangle
self.tangle_errrors = 0

# Global options
self.page_width = 132
self.tab_width = 4
self.tangle_batch_flag = false
self.untangle_batch_flag = false
# Default Tangle options
self.tangle_directory = ""
self.use_header_flag = false
self.output_doc_flag = false
# Default Target Language
self.target_language = "python" # 8/11/02: Required if leoConfig.txt does not exist.

# These are defined here, and updated by the tree.select()
self.beadList = [] # list of vnodes for the Back and Forward commands.
self.beadPointer = -1 # present item in the list.
self.visitedList = [] # list of vnodes for the Nodes dialog.

# 4.1: for hoist/dehoist commands.
self.hoistStack = [] # Stack of nodes to be root of drawn tree.  Affects only drawing routines.

self.recentFiles = [] # 4.1: moved to commands class.  List of recent files</t>
<t tx="ekr.20031218072017.2814">def __repr__ (self):
	
	try:
		return "Commander: " + self.mFileName
	except:
		return "Commander: bad mFileName"
		
__str__ = __repr__
</t>
<t tx="ekr.20031218072017.2815"># This should be called whenever we need to use find values:
# i.e., before reading or writing

def setIvarsFromFind (self):

	c = self ; find = g.app.findFrame
	if find != None:
		find.set_ivars(c)
</t>
<t tx="ekr.20031218072017.2816">@ This should be called whenever we need to use preference:
i.e., before reading, writing, tangling, untangling.

7/2/02: We no longer need this now that the Prefs dialog is modal.
@c

def setIvarsFromPrefs (self):

	pass</t>
<t tx="ekr.20031218072017.2817">def doCommand (self,command,label,event=None):

	"""Execute the given command, invoking hooks and catching exceptions.
	
	The code assumes that the "command1" hook has completely handled the command if
	g.doHook("command1") returns false.
	This provides a simple mechanism for overriding commands."""
	
	c = self ; p = c.currentPosition()

	# A horrible kludge: set g.app.log to cover for a possibly missing activate event.
	g.app.setLog(c.frame.log,"doCommand")

	if label == "cantredo": label = "redo"
	if label == "cantundo": label = "undo"
	g.app.commandName = label

	if not g.doHook("command1",c=c,v=p,label=label):
		try:
			command()
		except:
			g.es("exception executing command")
			print "exception executing command"
			g.es_exception(c=c)
			c.frame.tree.redrawAfterException() # 1/26/04
	
	g.doHook("command2",c=c,v=p,label=label)
			
	return "break" # Inhibit all other handlers.</t>
<t tx="ekr.20031218072017.2818"></t>
<t tx="ekr.20031218072017.2819"></t>
<t tx="ekr.20031218072017.2820"></t>
<t tx="ekr.20031218072017.2821">def open(self):

	c = self
	&lt;&lt; Set closeFlag if the only open window is empty &gt;&gt;

	fileName = g.app.gui.runOpenFileDialog(
		title="Open",
		filetypes=[("Leo files", "*.leo"), ("All files", "*")],
		defaultextension=".leo")

	if fileName and len(fileName) &gt; 0:
		ok, frame = g.openWithFileName(fileName,c)
		if ok and closeFlag:
			g.app.destroyWindow(c.frame)</t>
<t tx="ekr.20031218072017.2822">@ If this is the only open window was opened when the app started, and the window has never been written to or saved, then we will automatically close that window if this open command completes successfully.
@c
	
closeFlag = (
	c.frame.startupWindow==true and # The window was open on startup
	c.changed==false and c.frame.saved==false and # The window has never been changed
	g.app.numberOfWindows == 1) # Only one untitled window has ever been opened
</t>
<t tx="ekr.20031218072017.2823">def openWith(self,data=None):

	"""This routine handles the items in the Open With... menu.

	These items can only be created by createOpenWithMenuFromTable().
	Typically this would be done from the "open2" hook."""
	
	c = self ; v = c.currentVnode()
	if not data or len(data) != 3: return # 6/22/03
	try:
		openType,arg,ext=data
		if not g.doHook("openwith1",c=c,v=v,openType=openType,arg=arg,ext=ext):
			&lt;&lt; set ext based on the present language &gt;&gt;
			&lt;&lt; create or reopen temp file, testing for conflicting changes &gt;&gt;
			&lt;&lt; execute a command to open path in external editor &gt;&gt;
		g.doHook("openwith2",c=c,v=v,openType=openType,arg=arg,ext=ext)
	except:
		g.es("exception in openWith")
		g.es_exception()

	return "break"</t>
<t tx="ekr.20031218072017.2824">if not ext:
	dict = g.scanDirectives(c)
	language = dict.get("language")
	ext = g.app.language_extension_dict.get(language)
	# print language,ext
	if ext == None:
		ext = "txt"
	
if ext[0] != ".":
	ext = "."+ext
	
# print "ext",`ext`</t>
<t tx="ekr.20031218072017.2825">dict = None ; path = None
&lt;&lt; set dict and path if a temp file already refers to v.t &gt;&gt;
if path:
	&lt;&lt; create or recreate temp file as needed &gt;&gt;
else:
	path = c.createOpenWithTempFile(v,ext)

if not path:
	return # An error has occured.</t>
<t tx="ekr.20031218072017.2826">searchPath = c.openWithTempFilePath(v,ext)

if g.os_path_exists(searchPath):
	for dict in g.app.openWithFiles:
		if v.t == dict.get("v") and searchPath == dict.get("path"):
			path = searchPath
			break
</t>
<t tx="ekr.20031218072017.2827">@ We test for changes in both v and the temp file:

- If only v's body text has changed, we recreate the temp file.
- If only the temp file has changed, do nothing here.
- If both have changed we must prompt the user to see which code to use.
@c

encoding = dict.get("encoding")
old_body = dict.get("body")
new_body = v.bodyString()
new_body = g.toEncodedString(new_body,encoding,reportErrors=true)

old_time = dict.get("time")
try:
	new_time = g.os_path_getmtime(path)
except:
	new_time = None
	
body_changed = old_body != new_body
temp_changed = old_time != new_time

if body_changed and temp_changed:
	&lt;&lt; Raise dialog about conflict and set result &gt;&gt;
	if result == "cancel": return
	rewrite = result == "outline"
else:
	rewrite = body_changed
		
if rewrite:
	path = c.createOpenWithTempFile(v,ext)
else:
	g.es("reopening: " + g.shortFileName(path),color="blue")</t>
<t tx="ekr.20031218072017.2828">message = (
	"Conflicting changes in outline and temp file\n\n" +
	"Do you want to use the code in the outline or the temp file?\n\n")

result = g.app.gui.runAskYesNoCancelDialog(
	"Conflict!", message,
	yesMessage = "Outline",
	noMessage = "File",
	defaultButton = "Cancel")</t>
<t tx="ekr.20031218072017.2829">try:
	if arg == None: arg = ""
	shortPath = path # g.shortFileName(path)
	if openType == "os.system":
		command  = "os.system("+arg+shortPath+")"
		os.system(arg+path)
	elif openType == "os.startfile":
		command    = "os.startfile("+arg+shortPath+")"
		os.startfile(arg+path)
	elif openType == "exec":
		command    = "exec("+arg+shortPath+")"
		exec arg+path in {} # 12/11/02
	elif openType == "os.spawnl":
		filename = g.os_path_basename(arg)
		command = "os.spawnl("+arg+","+filename+','+ shortPath+")"
		apply(os.spawnl,(os.P_NOWAIT,arg,filename,path))
	elif openType == "os.spawnv":
		filename = g.os_path_basename(arg)
		command = "os.spawnv("+arg+",("+filename+','+ shortPath+"))"
		apply(os.spawnl,(os.P_NOWAIT,arg,(filename,path)))
	else:
		command="bad command:"+str(openType)
	# This seems a bit redundant.
	# g.es(command)
except:
	g.es("exception executing: "+command)
	g.es_exception()</t>
<t tx="ekr.20031218072017.2830">def createOpenWithTempFile (self, v, ext):
	
	c = self
	path = c.openWithTempFilePath(v,ext)
	try:
		if g.os_path_exists(path):
			g.es("recreating:  " + g.shortFileName(path),color="red")
		else:
			g.es("creating:  " + g.shortFileName(path),color="blue")
		file = open(path,"w")
		# 3/7/03: convert s to whatever encoding is in effect.
		s = v.bodyString()
		dict = g.scanDirectives(c,v=v)
		encoding = dict.get("encoding",None)
		if encoding == None:
			encoding = g.app.config.default_derived_file_encoding
		s = g.toEncodedString(s,encoding,reportErrors=true) 
		file.write(s)
		file.flush()
		file.close()
		try:    time = g.os_path_getmtime(path)
		except: time = None
		# g.es("time: " + str(time))
		# 4/22/03: add body and encoding entries to dict for later comparisons.
		dict = {"body":s, "c":c, "encoding":encoding, "f":file, "path":path, "time":time, "v":v}
		&lt;&lt; remove previous entry from app.openWithFiles if it exists &gt;&gt; # 4/22/03
		g.app.openWithFiles.append(dict)
		return path
	except:
		file = None
		g.es("exception creating temp file",color="red")
		g.es_exception()
		return None</t>
<t tx="ekr.20031218072017.2831">for d in g.app.openWithFiles[:]: # 6/30/03
	v2 = d.get("v")
	if v.t == v2.t:
		print "removing previous entry in g.app.openWithFiles for",v
		g.app.openWithFiles.remove(d)</t>
<t tx="ekr.20031218072017.2832">def openWithTempFilePath (self,v,ext):
	
	"""Return the path to the temp file corresponding to v and ext."""

	name = "LeoTemp_" + str(id(v.t)) + '_' + g.sanitize_filename(v.headString()) + ext
	name = g.toUnicode(name,g.app.tkEncoding) # 10/20/03

	td = g.os_path_abspath(tempfile.gettempdir())
	path = g.os_path_join(td,name)
	
	# print "openWithTempFilePath",path
	return path</t>
<t tx="ekr.20031218072017.2833">def close(self):
	
	"""Handle the File-Close command."""

	g.app.closeLeoWindow(self.frame)</t>
<t tx="ekr.20031218072017.2834">def save(self):

	c = self
	
	if g.app.disableSave:
		g.es("Save commands disabled",color="purple")
		return
	
	# Make sure we never pass None to the ctor.
	if not c.mFileName:
		c.frame.title = ""
		c.mFileName = ""

	if c.mFileName != "":
		# Calls c.setChanged(false) if no error.
		c.fileCommands.save(c.mFileName) 
		return

	fileName = g.app.gui.runSaveFileDialog(
		initialfile = c.mFileName,
		title="Save",
		filetypes=[("Leo files", "*.leo")],
		defaultextension=".leo")

	if fileName:
		# 7/2/02: don't change mFileName until the dialog has suceeded.
		c.mFileName = g.ensure_extension(fileName, ".leo")
		c.frame.title = c.mFileName
		c.frame.setTitle(g.computeWindowTitle(c.mFileName))
		c.fileCommands.save(c.mFileName)
		c.updateRecentFiles(c.mFileName)</t>
<t tx="ekr.20031218072017.2835">def saveAs(self):
	
	c = self
	
	if g.app.disableSave:
		g.es("Save commands disabled",color="purple")
		return

	# Make sure we never pass None to the ctor.
	if not c.mFileName:
		c.frame.title = ""

	fileName = g.app.gui.runSaveFileDialog(
		initialfile = c.mFileName,
		title="Save As",
		filetypes=[("Leo files", "*.leo")],
		defaultextension=".leo")

	if fileName:
		# 7/2/02: don't change mFileName until the dialog has suceeded.
		c.mFileName = g.ensure_extension(fileName, ".leo")
		c.frame.title = c.mFileName
		c.frame.setTitle(g.computeWindowTitle(c.mFileName))
		# Calls c.setChanged(false) if no error.
		c.fileCommands.saveAs(c.mFileName)
		c.updateRecentFiles(c.mFileName)</t>
<t tx="ekr.20031218072017.2836">def saveTo(self):
	
	c = self
	
	if g.app.disableSave:
		g.es("Save commands disabled",color="purple")
		return

	# Make sure we never pass None to the ctor.
	if not c.mFileName:
		c.frame.title = ""

	# set local fileName, _not_ c.mFileName
	fileName = g.app.gui.runSaveFileDialog(
		initialfile = c.mFileName,
		title="Save To",
		filetypes=[("Leo files", "*.leo")],
		defaultextension=".leo")

	if fileName:
		fileName = g.ensure_extension(fileName, ".leo")
		c.fileCommands.saveTo(fileName)
		c.updateRecentFiles(c.mFileName)</t>
<t tx="ekr.20031218072017.2837">def revert(self):
	
	c = self

	# Make sure the user wants to Revert.
	if not c.mFileName:
		return
		
	reply = g.app.gui.runAskYesNoDialog("Revert",
		"Revert to previous version of " + c.mFileName + "?")

	if reply=="no":
		return

	# Kludge: rename this frame so openWithFileName won't think it is open.
	fileName = c.mFileName ; c.mFileName = ""

	# Create a new frame before deleting this frame.
	ok, frame = g.openWithFileName(fileName,c)
	if ok:
		frame.deiconify()
		g.app.destroyWindow(c.frame)
	else:
		c.mFileName = fileName
</t>
<t tx="ekr.20031218072017.2838"></t>
<t tx="ekr.20031218072017.2839">def readOutlineOnly (self):

	fileName = g.app.gui.runOpenFileDialog(
		title="Read Outline Only",
		filetypes=[("Leo files", "*.leo"), ("All files", "*")],
		defaultextension=".leo")

	if not fileName:
		return

	try:
		file = open(fileName,'r')
		c,frame = g.app.gui.newLeoCommanderAndFrame(fileName)
		frame.deiconify()
		frame.lift()
		g.app.root.update() # Force a screen redraw immediately.
		c.fileCommands.readOutlineOnly(file,fileName) # closes file.
	except:
		g.es("can not open:" + fileName)</t>
<t tx="ekr.20031218072017.2840"></t>
<t tx="ekr.20031218072017.2841"></t>
<t tx="ekr.20031218072017.2842">def tangleAll(self):
	
	c = self
	c.tangleCommands.tangleAll()
</t>
<t tx="ekr.20031218072017.2843">def tangleMarked(self):

	c = self
	c.tangleCommands.tangleMarked()
</t>
<t tx="ekr.20031218072017.2844">def tangle (self):

	c = self
	c.tangleCommands.tangle()</t>
<t tx="ekr.20031218072017.2845"></t>
<t tx="ekr.20031218072017.2846">def untangleAll(self):

	c = self
	c.tangleCommands.untangleAll()
	c.undoer.clearUndoState()
</t>
<t tx="ekr.20031218072017.2847">def untangleMarked(self):

	c = self
	c.tangleCommands.untangleMarked()
	c.undoer.clearUndoState()
</t>
<t tx="ekr.20031218072017.2848">def untangle(self):

	c = self
	c.tangleCommands.untangle()
	c.undoer.clearUndoState()
</t>
<t tx="ekr.20031218072017.2849"></t>
<t tx="ekr.20031218072017.2850">def exportHeadlines (self):
	
	c = self

	filetypes = [("Text files", "*.txt"),("All files", "*")]

	fileName = g.app.gui.runSaveFileDialog(
		initialfile="headlines.txt",
		title="Export Headlines",
		filetypes=filetypes,
		defaultextension=".txt")

	if fileName and len(fileName) &gt; 0:
		c.importCommands.exportHeadlines(fileName)

</t>
<t tx="ekr.20031218072017.2851">def flattenOutline (self):
	
	c = self

	filetypes = [("Text files", "*.txt"),("All files", "*")]

	fileName = g.app.gui.runSaveFileDialog(
		initialfile="flat.txt",
		title="Flatten Outline",
		filetypes=filetypes,
		defaultextension=".txt")

	if fileName and len(fileName) &gt; 0:
		c.importCommands.flattenOutline(fileName)

</t>
<t tx="ekr.20031218072017.2852">def importAtRoot (self):
	
	c = self
	
	types = [
		("All files","*"),
		("C/C++ files","*.c"),
		("C/C++ files","*.cpp"),
		("C/C++ files","*.h"),
		("C/C++ files","*.hpp"),
		("Java files","*.java"),
		("Pascal files","*.pas"),
		("Python files","*.py") ]

	fileName = g.app.gui.runOpenFileDialog(
		title="Import To @root",
		filetypes=types,
		defaultextension=".py")

	if fileName and len(fileName) &gt; 0:
		paths = [fileName] # alas, askopenfilename returns only a single name.
		c.importCommands.importFilesCommand (paths,"@root")

</t>
<t tx="ekr.20031218072017.2853">def importAtFile (self):
	
	c = self

	types = [
		("All files","*"),
		("C/C++ files","*.c"),
		("C/C++ files","*.cpp"),
		("C/C++ files","*.h"),
		("C/C++ files","*.hpp"),
		("Java files","*.java"),
		("Pascal files","*.pas"),
		("Python files","*.py") ]

	fileName = g.app.gui.runOpenFileDialog(
		title="Import To @file",
		filetypes=types,
		defaultextension=".py")

	if fileName and len(fileName) &gt; 0:
		paths = [fileName] # alas, askopenfilename returns only a single name.
		c.importCommands.importFilesCommand (paths,"@file")</t>
<t tx="ekr.20031218072017.2854">def importCWEBFiles (self):
	
	c = self
	
	filetypes = [
		("CWEB files", "*.w"),
		("Text files", "*.txt"),
		("All files", "*")]

	fileName = g.app.gui.runOpenFileDialog(
		title="Import CWEB Files",
		filetypes=filetypes,
		defaultextension=".w")

	if fileName and len(fileName) &gt; 0:
		paths = [fileName] # alas, askopenfilename returns only a single name.
		c.importCommands.importWebCommand(paths,"cweb")
</t>
<t tx="ekr.20031218072017.2855">def importFlattenedOutline (self):
	
	c = self
	
	types = [("Text files","*.txt"), ("All files","*")]

	fileName = g.app.gui.runOpenFileDialog(
		title="Import MORE Text",
		filetypes=types,
		defaultextension=".py")

	if fileName and len(fileName) &gt; 0:
		paths = [fileName] # alas, askopenfilename returns only a single name.
		c.importCommands.importFlattenedOutline(paths)
</t>
<t tx="ekr.20031218072017.2856">def importNowebFiles (self):
	
	c = self

	filetypes = [
		("Noweb files", "*.nw"),
		("Text files", "*.txt"),
		("All files", "*")]

	fileName = g.app.gui.runOpenFileDialog(
		title="Import Noweb Files",
		filetypes=filetypes,
		defaultextension=".nw")

	if fileName and len(fileName) &gt; 0:
		paths = [fileName] # alas, askopenfilename returns only a single name.
		c.importCommands.importWebCommand(paths,"noweb")

</t>
<t tx="ekr.20031218072017.2857">def outlineToCWEB (self):
	
	c = self

	filetypes=[
		("CWEB files", "*.w"),
		("Text files", "*.txt"),
		("All files", "*")]

	fileName = g.app.gui.runSaveFileDialog(
		initialfile="cweb.w",
		title="Outline To CWEB",
		filetypes=filetypes,
		defaultextension=".w")

	if fileName and len(fileName) &gt; 0:
		c.importCommands.outlineToWeb(fileName,"cweb")

</t>
<t tx="ekr.20031218072017.2858">def outlineToNoweb (self):
	
	c = self
	
	filetypes=[
		("Noweb files", "*.nw"),
		("Text files", "*.txt"),
		("All files", "*")]

	fileName = g.app.gui.runSaveFileDialog(
		initialfile=self.outlineToNowebDefaultFileName,
		title="Outline To Noweb",
		filetypes=filetypes,
		defaultextension=".nw")

	if fileName and len(fileName) &gt; 0:
		c.importCommands.outlineToWeb(fileName,"noweb")
		c.outlineToNowebDefaultFileName = fileName

</t>
<t tx="ekr.20031218072017.2859">def removeSentinels (self):
	
	c = self
	
	types = [
		("All files","*"),
		("C/C++ files","*.c"),
		("C/C++ files","*.cpp"),
		("C/C++ files","*.h"),
		("C/C++ files","*.hpp"),
		("Java files","*.java"),
		("Pascal files","*.pas"),
		("Python files","*.py") ]

	fileName = g.app.gui.runOpenFileDialog(
		title="Remove Sentinels",
		filetypes=types,
		defaultextension=".py")

	if fileName and len(fileName) &gt; 0:
		# alas, askopenfilename returns only a single name.
		c.importCommands.removeSentinelsCommand (fileName)

</t>
<t tx="ekr.20031218072017.2860">def weave (self):
	
	c = self

	filetypes = [("Text files", "*.txt"),("All files", "*")]

	fileName = g.app.gui.runSaveFileDialog(
		initialfile="weave.txt",
		title="Weave",
		filetypes=filetypes,
		defaultextension=".txt")

	if fileName and len(fileName) &gt; 0:
		c.importCommands.weave(fileName)
</t>
<t tx="ekr.20031218072017.2861"></t>
<t tx="ekr.20031218072017.2862"></t>
<t tx="ekr.20031218072017.2863">def delete(self):

	c = self ; v = c.currentVnode()

	if c.frame.body.hasTextSelection():
		oldSel = c.frame.body.getTextSelection()
		c.frame.body.deleteTextSelection()
		c.frame.body.onBodyChanged(v,"Delete",oldSel=oldSel)</t>
<t tx="ekr.20031218072017.2864">def goToLineNumber (self):

	c = self ; v = c.currentVnode()
	&lt;&lt; set root to the nearest @file, @silentfile or @rawfile ancestor node &gt;&gt;
	&lt;&lt; read the file into lines &gt;&gt;
	&lt;&lt; get n, the line number, from a dialog &gt;&gt;
	# g.trace("n:"+`n`)
	if n==1:
		v = root ; n2 = 1 ; found = true
	elif n &gt;= len(lines):
		v = root ; found = false
		n2 = v.bodyString().count('\n')
	elif root.isAtSilentFileNode():
		&lt;&lt; count outline lines, setting v,n2,found &gt;&gt;
	else:
		vnodeName,childIndex,n2,delim = self.convertLineToVnodeNameIndexLine(lines,n,root)
		found = true
		if not vnodeName:
			g.es("invalid derived file: " + fileName)
			return
		&lt;&lt; set v to the node given by vnodeName and childIndex or n &gt;&gt;
	&lt;&lt; select v and make it visible &gt;&gt;
	&lt;&lt; put the cursor on line n2 of the body text &gt;&gt;</t>
<t tx="ekr.20031218072017.2865"># Search the present node first.
j = v.t.joinList
if v in j:
	j.remove(v)
j.insert(0,v)

# 10/15/03: search joined nodes if first search fails.
root = None ; fileName = None
for v in j:
	while v and not fileName:
		if v.isAtFileNode():
			fileName = v.atFileNodeName()
		elif v.isAtSilentFileNode():
			fileName = v.atSilentFileNodeName()
		elif v.isAtRawFileNode():
			fileName = v.atRawFileNodeName()
		else:
			v = v.parent()
	if fileName:
		root = v
		# g.trace("root,fileName",root,fileName)
		break # Bug fix: 10/25/03
if not root:
	g.es("Go to line number: ancestor must be @file node", color="blue")
	return</t>
<t tx="ekr.20031218072017.2866"># 1/26/03: calculate the full path.
d = g.scanDirectives(c)
path = d.get("path")

fileName = g.os_path_join(path,fileName)

try:
	file=open(fileName)
	lines = file.readlines()
	file.close()
except:
	g.es("not found: " + fileName)
	return
	
</t>
<t tx="ekr.20031218072017.2867">n = g.app.gui.runAskOkCancelNumberDialog("Enter Line Number","Line number:")
if n == -1:
	return</t>
<t tx="ekr.20031218072017.2868">v = lastv = root ; after = root.nodeAfterTree()
prev = 0 ; found = false
while v and v != after:
	lastv = v
	s = v.bodyString()
	lines = s.count('\n')
	if len(s) &gt; 0 and s[-1] != '\n':
		lines += 1
	# print lines,prev,v
	if prev + lines &gt;= n:
		found = true ; break
	prev += lines
	v = v.threadNext()

v = lastv
n2 = max(1,n-prev)</t>
<t tx="ekr.20031218072017.2869">after = root.nodeAfterTree()

if childIndex == -1:
	&lt;&lt; 4.x: scan for the node using tnodeList and n &gt;&gt;
else:
	&lt;&lt; 3.x: scan for the node with the given childIndex &gt;&gt;</t>
<t tx="ekr.20031218072017.2870"># This is about the best that can be done without replicating the entire atFile write logic.

ok = true

if not hasattr(root,"tnodeList"):
	s = "no child index for " + root.headString()
	print s ; g.es(s, color="red")
	ok = false

if ok:
	tnodeList = root.tnodeList
	&lt;&lt; set tnodeIndex to the number of +node sentinels before line n &gt;&gt;
	tnodeIndex = max(0,tnodeIndex)
	&lt;&lt; set v to the first vnode whose tnode is tnodeList[tnodeIndex] or set ok = false &gt;&gt;
			
if not ok:
	# Fall back to the old logic.
	&lt;&lt; set v to the first node whose headline matches vnodeName &gt;&gt;</t>
<t tx="ekr.20031218072017.2871">tnodeIndex = -1 # Don't count the @file node.
scanned = 0 # count of lines scanned.

for s in lines:
	if scanned &gt;= n:
		break
	i = g.skip_ws(s,0)
	if g.match(s,i,delim):
		i += len(delim)
		if g.match(s,i,"+node"):
			# g.trace(tnodeIndex,s.rstrip())
			tnodeIndex += 1
	scanned += 1</t>
<t tx="ekr.20031218072017.2872">@ We use the tnodeList to find a _tnode_ corresponding to the proper node, so the user will for sure be editing the proper text, even if several nodes happen to have the same headline.  This is really all that we need.

However, this code has no good way of distinguishing between different cloned vnodes in the file: they all have the same tnode.  So this code just picks v = t.joinList[0] and leaves it at that.

The only way to do better is to scan the outline, replicating the write logic to determine which vnode created the given line.  That's way too difficult, and it would create an unwanted dependency in this code.
@c

# g.trace("tnodeIndex",tnodeIndex)
if tnodeIndex &lt; len(tnodeList):
	t = tnodeList[tnodeIndex]
	# Find the first vnode whose tnode is t.
	v = root
	while v and v != after:
		if v.t == t:
			break
		v = v.threadNext()
	if not v:
		s = "tnode not found for " + vnodeName
		print s ; g.es(s, color="red") ; ok = false
	elif v.headString().strip() != vnodeName:
		if 0: # Apparently this error doesn't prevent a later scan for working properly.
			s = "Mismatched vnodeName\nExpecting: %s\n got: %s" % (v.headString(),vnodeName)
			print s ; g.es(s, color="red")
		ok = false
else:
	s = "Invalid computed tnodeIndex: %d" % tnodeIndex
	print s ; g.es(s, color = "red") ; ok = false</t>
<t tx="ekr.20031218072017.2873">v = root
while v and v != after:
	if v.matchHeadline(vnodeName):
		break
	v = v.threadNext()

if not v or v == after:
	s = "not found: " + vnodeName
	print s ; g.es(s, color="red")
	return</t>
<t tx="ekr.20031218072017.2874">v = root
while v and v != after:
	if v.matchHeadline(vnodeName):
		if childIndex &lt;= 0 or v.childIndex() + 1 == childIndex:
			break
	v = v.threadNext()

if not v or v == after:
	g.es("not found: " + vnodeName, color="red")
	return</t>
<t tx="ekr.20031218072017.2875">c.beginUpdate()
c.frame.tree.expandAllAncestors(v)
c.selectVnode(v)
c.endUpdate()</t>
<t tx="ekr.20031218072017.2876">if found:
	c.frame.body.setInsertPointToStartOfLine(n2-1)
else:
	c.frame.body.setInsertionPointToEnd()
	g.es("%d lines" % len(lines), color="blue")

c.frame.body.makeInsertPointVisible()</t>
<t tx="ekr.20031218072017.2877">@ We count "real" lines in the derived files, ignoring all sentinels that do not arise from source lines.  When the indicated line is found, we scan backwards for an @+body line, get the vnode's name from that line and set v to the indicated vnode.  This will fail if vnode names have been changed, and that can't be helped.

Returns (vnodeName,offset)

vnodeName: the name found in the previous @+body sentinel.
offset: the offset within v of the desired line.
@c

def convertLineToVnodeNameIndexLine (self,lines,n,root):
	
	"""Convert a line number n to a vnode name, child index and line number."""
	
	childIndex = 0 ; newDerivedFile = false
	&lt;&lt; set delim, leoLine from the @+leo line &gt;&gt;
	if not delim:
		g.es("bad @+leo sentinel")
		return None,None,None,None
	&lt;&lt; scan back to @+node, setting offset,nodeSentinelLine &gt;&gt;
	if nodeSentinelLine == -1:
		# The line precedes the first @+node sentinel
		# g.trace("before first line")
		return root.headString(),0,1,delim # 10/13/03
	s = lines[nodeSentinelLine]
	# g.trace(s)
	&lt;&lt; set vnodeName and childIndex from s &gt;&gt;
	# g.trace("childIndex,offset",childIndex,offset,vnodeName)
	return vnodeName,childIndex,offset,delim</t>
<t tx="ekr.20031218072017.2878"># Find the @+leo line.
tag = "@+leo"
i = 0 
while i &lt; len(lines) and lines[i].find(tag)==-1:
	i += 1
leoLine = i # Index of the line containing the leo sentinel
# g.trace("leoLine:"+`leoLine`)

delim = None # All sentinels start with this.
if leoLine &lt; len(lines):
	# The opening comment delim is the initial non-whitespace.
	s = lines[leoLine]
	i = g.skip_ws(s,0)
	j = s.find(tag)
	newDerivedFile = g.match(s,j,"@+leo-ver=4")
	delim = s[i:j]
	if len(delim)==0:
		delim=None
	else:
		delim += '@'</t>
<t tx="ekr.20031218072017.2879">offset = 0 # This is essentially the Tk line number.
nodeSentinelLine = -1
line = n - 1
while line &gt;= 0:
	s = lines[line]
	# g.trace(`s`)
	i = g.skip_ws(s,0)
	if g.match(s,i,delim):
		&lt;&lt; handle delim while scanning backward &gt;&gt;
	else:
		offset += 1 # Assume the line is real.  A dubious assumption.
	line -= 1</t>
<t tx="ekr.20031218072017.2880">if line == n:
	g.es("line "+str(n)+" is a sentinel line")
i += len(delim)

if g.match(s,i,"-node"):
	# The end of a nested section.
	line = self.skipToMatchingNodeSentinel(lines,line,delim)
elif g.match(s,i,"+node"):
	nodeSentinelLine = line
	break
elif g.match(s,i,"&lt;&lt;") or g.match(s,i,"@first"):
	offset += 1 # Count these as a "real" lines.</t>
<t tx="ekr.20031218072017.2881">if newDerivedFile:
	# vnode name is everything following the first ':'
	# childIndex is -1 as a flag for later code.
	i = s.find(':')
	if i &gt; -1: vnodeName = s[i+1:].strip()
	else: vnodeName = None
	childIndex = -1
else:
	# vnode name is everything following the third ':'
	i = 0 ; colons = 0
	while i &lt; len(s) and colons &lt; 3:
		if s[i] == ':':
			colons += 1
			if colons == 1 and i+1 &lt; len(s) and s[i+1] in string.digits:
				junk,childIndex = g.skip_long(s,i+1)
		i += 1
	vnodeName = s[i:].strip()
	
# g.trace("vnodeName:",vnodeName)
if not vnodeName:
	vnodeName = None
	g.es("bad @+node sentinel")
</t>
<t tx="ekr.20031218072017.2882">def skipToMatchingNodeSentinel (self,lines,n,delim):
	
	s = lines[n]
	i = g.skip_ws(s,0)
	assert(g.match(s,i,delim))
	i += len(delim)
	if g.match(s,i,"+node"):
		start="+node" ; end="-node" ; delta=1
	else:
		assert(g.match(s,i,"-node"))
		start="-node" ; end="+node" ; delta=-1
	# Scan to matching @+-node delim.
	n += delta ; level = 0
	while 0 &lt;= n &lt; len(lines):
		s = lines[n] ; i = g.skip_ws(s,0)
		if g.match(s,i,delim):
			i += len(delim)
			if g.match(s,i,start):
				level += 1
			elif g.match(s,i,end):
				if level == 0: break
				else: level -= 1
		n += delta # bug fix: 1/30/02
		
	# g.trace(n)
	return n</t>
<t tx="ekr.20031218072017.2883">def viewAllCharacters (self, event=None):

	c = self ; frame = c.frame
	p = c.currentPosition()
	colorizer = frame.body.getColorizer()

	colorizer.showInvisibles = g.choose(colorizer.showInvisibles,0,1)

	# It is much easier to change the menu name here than in the menu updater.
	menu = frame.menu.getMenu("Edit")
	if colorizer.showInvisibles:
		frame.menu.setMenuLabel(menu,"Show Invisibles","Hide Invisibles")
	else:
		frame.menu.setMenuLabel(menu,"Hide Invisibles","Show Invisibles")

	c.frame.body.recolor_now(p)</t>
<t tx="ekr.20031218072017.2884"></t>
<t tx="ekr.20031218072017.2885"></t>
<t tx="ekr.20031218072017.2886">def editHeadline(self):
	
	c = self ; tree = c.frame.tree
	
	if g.app.batchMode:
		c.notValidInBatchMode("Edit Headline")
		return

	tree.editLabel(c.currentPosition())</t>
<t tx="ekr.20031218072017.2887"></t>
<t tx="ekr.20031218072017.2888">def findPanel(self):

	c = self

	find = g.app.findFrame
	find.bringToFront()
	find.c = self
</t>
<t tx="ekr.20031218072017.2889">def findNext(self):

	c = self
	g.app.findFrame.findNextCommand(c)
</t>
<t tx="ekr.20031218072017.2890">def findPrevious(self):

	c = self
	g.app.findFrame.findPreviousCommand(c)
</t>
<t tx="ekr.20031218072017.2891">def replace(self):

	c = self
	g.app.findFrame.changeCommand(c)
</t>
<t tx="ekr.20031218072017.2892">def replaceThenFind(self):

	c = self
	g.app.findFrame.changeThenFindCommand(c)
</t>
<t tx="ekr.20031218072017.2893">def notValidInBatchMode(self, commandName):
	
	g.es("%s command is not valid in batch mode" % commandName)
</t>
<t tx="ekr.20031218072017.2894"></t>
<t tx="ekr.20031218072017.2895"></t>
<t tx="ekr.20031218072017.2896">def sortTopLevel (self):
	
	# Create a list of position, headline tuples
	c = self ; root = c.rootPosition()
	if not root: return
	&lt;&lt; Set the undo info for sortTopLevel &gt;&gt;
	pairs = []
	for p in root.self_and_siblings_iter(copy=true):
		pairs.append((p.headString().lower(),p),)

	# Sort the list on the headlines.
	pairs.sort()
	if 1:
		for data in pairs:
			print data
	sortedNodes = pairs
	# Move the nodes
	c.beginUpdate()
	h,p = sortedNodes[0]
	if p != root:
		p.setAllAncestorAtFileNodesDirty() # 1/12/04
		p.moveToRoot(oldRoot=root)
		p.setAllAncestorAtFileNodesDirty() # 1/12/04
	for h,next in sortedNodes[1:]:
		next.moveAfter(p)
		p = next
	c.endUpdate()</t>
<t tx="ekr.20031218072017.2897"># Get the present list of children.
sibs = []

for sib in root.self_and_siblings_iter(copy=true):
	sibs.append(sib)
	
c.undoer.setUndoParams("Sort Top Level",root,sort=sibs)</t>
<t tx="ekr.20031218072017.2898"></t>
<t tx="ekr.20031218072017.2899"></t>
<t tx="ekr.20031218072017.2900">def contractAllHeadlines (self):

	c = self ; current = c.currentVnode()
	v = c.rootVnode()
	c.beginUpdate()

	while v:
		c.contractSubtree(v)
		v = v.next()

	if not current.isVisible():
		# 1/31/03: Select the topmost ancestor of the presently selected node.
		v = current
		while v and v.parent():
			v = v.parent()
		c.selectVnode(v)

	c.endUpdate()
	c.expansionLevel = 1 # Reset expansion level.</t>
<t tx="ekr.20031218072017.2901">def contractNode (self):
	
	c = self ; v = c.currentVnode()
	
	c.beginUpdate()
	v.contract()
	c.endUpdate()
</t>
<t tx="ekr.20031218072017.2902">def contractParent (self):
	
	c = self ; v = c.currentVnode()
	parent = v.parent()
	if not parent: return
	
	c.beginUpdate()
	c.selectVnode(parent)
	parent.contract()
	c.endUpdate()</t>
<t tx="ekr.20031218072017.2903">def expandAllHeadlines(self):

	c = self ; v = root = c.rootVnode()
	c.beginUpdate()
	while v:
		c.expandSubtree(v)
		v = v.next()
	c.selectVnode(root)
	c.endUpdate()
	c.expansionLevel = 0 # Reset expansion level.</t>
<t tx="ekr.20031218072017.2904">def expandAllSubheads (self):

	c = self ; v = c.currentVnode()
	if not v: return

	child = v.firstChild()
	c.beginUpdate()
	c.expandSubtree(v)
	while child:
		c.expandSubtree(child)
		child = child.next()
	c.selectVnode(v)
	c.endUpdate()</t>
<t tx="ekr.20031218072017.2905">def expandLevel1 (self): self.expandToLevel(1)
def expandLevel2 (self): self.expandToLevel(2)
def expandLevel3 (self): self.expandToLevel(3)
def expandLevel4 (self): self.expandToLevel(4)
def expandLevel5 (self): self.expandToLevel(5)
def expandLevel6 (self): self.expandToLevel(6)
def expandLevel7 (self): self.expandToLevel(7)
def expandLevel8 (self): self.expandToLevel(8)
def expandLevel9 (self): self.expandToLevel(9)
</t>
<t tx="ekr.20031218072017.2906">def expandNextLevel (self):

	c = self ; v = c.currentVnode()
	
	# 1/31/02: Expansion levels are now local to a particular tree.
	if c.expansionNode != v:
		c.expansionLevel = 1
		c.expansionNode = v
		
	self.expandToLevel(c.expansionLevel + 1)
</t>
<t tx="ekr.20031218072017.2907">def expandNode (self):
	
	c = self ; v = c.currentVnode()
	
	c.beginUpdate()
	v.expand()
	c.endUpdate()

</t>
<t tx="ekr.20031218072017.2908">def expandPrevLevel (self):

	c = self ; v = c.currentVnode()
	
	# 1/31/02: Expansion levels are now local to a particular tree.
	if c.expansionNode != v:
		c.expansionLevel = 1
		c.expansionNode = v
		
	self.expandToLevel(max(1,c.expansionLevel - 1))
</t>
<t tx="ekr.20031218072017.2909"></t>
<t tx="ekr.20031218072017.2910">def contractSubtree (self,v):

	last = v.lastNode()
	while v and v != last:
		v.contract()
		v = v.threadNext()</t>
<t tx="ekr.20031218072017.2911">def expandSubtree (self,v):

	c = self
	last = v.lastNode()
	while v and v != last:
		v.expand()
		v = v.threadNext()
	c.redraw()</t>
<t tx="ekr.20031218072017.2912">def expandToLevel (self,level):

	c = self
	c.beginUpdate()
	if 1: # 1/31/03: The expansion is local to the present node.
		v = c.currentVnode() ; n = v.level()
		after = v.nodeAfterTree()
		while v and v != after:
			if v.level() - n + 1 &lt; level:
				v.expand()
			else:
				v.contract()
			v = v.threadNext()
	else: # The expansion is global
		# Start the recursion.
		# First contract everything.
		c.contractAllHeadlines()
		v = c.rootVnode()
		while v:
			c.expandTreeToLevelFromLevel(v,level,1)
			v = v.next()
	c.expansionLevel = level
	c.expansionNode = c.currentVnode()
	c.endUpdate()</t>
<t tx="ekr.20031218072017.2913"></t>
<t tx="ekr.20031218072017.2914">def goToFirstNode(self):
	
	c = self
	v = c.rootVnode()
	if v:
		c.beginUpdate()
		c.selectVnode(v)
		c.endUpdate()</t>
<t tx="ekr.20031218072017.2915">def goToLastNode(self):
	
	c = self
	v = c.rootVnode()
	while v and v.threadNext():
		v = v.threadNext()
	if v:
		c.beginUpdate()
		c.frame.tree.expandAllAncestors(v)
		c.selectVnode(v)
		c.endUpdate()

</t>
<t tx="ekr.20031218072017.2916">def goToNextClone(self):

	c = self ; current = c.currentVnode()
	if not current: return
	if not current.isCloned(): return

	v = current.threadNext()
	while v and v.t != current.t:
		v = v.threadNext()
		
	if not v:
		# Wrap around.
		v = c.rootVnode()
		while v and v != current and v.t != current.t:
			v = v.threadNext()

	if v:
		c.beginUpdate()
		c.endEditing()
		c.selectVnode(v)
		c.endUpdate()</t>
<t tx="ekr.20031218072017.2917">def goToNextDirtyHeadline (self):

	c = self ; current = c.currentVnode()
	if not current: return

	v = current.threadNext()
	while v and not v.isDirty():
		v = v.threadNext()
	if not v:
		v = c.rootVnode()
		while v and not v.isDirty():
			v = v.threadNext()
	if v:
		c.selectVnode(v)</t>
<t tx="ekr.20031218072017.2918">def goToNextMarkedHeadline(self):

	c = self ; current = c.currentVnode()
	if not current: return

	v = current.threadNext()
	while v and not v.isMarked():
		v = v.threadNext()
	if v:
		c.beginUpdate()
		c.endEditing()
		c.selectVnode(v)
		c.endUpdate()</t>
<t tx="ekr.20031218072017.2919">def goToNextSibling(self):
	
	c = self
	v = c.currentVnode()
	if not v: return
	next = v.next()
	if next:
		c.beginUpdate()
		c.selectVnode(next)
		c.endUpdate()</t>
<t tx="ekr.20031218072017.2920">def goToParent(self):
	
	c = self
	v = c.currentVnode()
	if not v: return
	p = v.parent()
	if p:
		c.beginUpdate()
		c.selectVnode(p)
		c.endUpdate()
</t>
<t tx="ekr.20031218072017.2921">def goToPrevSibling(self):
	
	c = self
	v = c.currentVnode()
	if not v: return
	back = v.back()
	if back:
		c.beginUpdate()
		c.selectVnode(back)
		c.endUpdate()
</t>
<t tx="ekr.20031218072017.2922"></t>
<t tx="ekr.20031218072017.2923">def markChangedHeadlines (self): 

	c = self ; v = c.rootVnode()
	c.beginUpdate()
	while v:
		if v.isDirty()and not v.isMarked():
			v.setMarked()
			c.setChanged(true)
		v = v.threadNext()
	c.endUpdate()
	g.es("done",color="blue")
</t>
<t tx="ekr.20031218072017.2924">def markChangedRoots (self):

	c = self ; v = c.rootVnode()
	c.beginUpdate()
	while v:
		if v.isDirty()and not v.isMarked():
			s = v.bodyString()
			flag, i = g.is_special(s,0,"@root")
			if flag:
				v.setMarked()
				c.setChanged(true)
		v = v.threadNext()
	c.endUpdate()
	g.es("done",color="blue")</t>
<t tx="ekr.20031218072017.2925">def markAllAtFileNodesDirty (self):

	c = self ; v = c.rootVnode()
	c.beginUpdate()
	while v:
		if v.isAtFileNode()and not v.isDirty():
			v.setDirty()
			v = v.nodeAfterTree()
		else: v = v.threadNext()
	c.endUpdate()</t>
<t tx="ekr.20031218072017.2926">def markAtFileNodesDirty (self):

	c = self
	v = c.currentVnode()
	if not v: return
	after = v.nodeAfterTree()
	c.beginUpdate()
	while v and v != after:
		if v.isAtFileNode() and not v.isDirty():
			v.setDirty()
			v = v.nodeAfterTree()
		else: v = v.threadNext()
	c.endUpdate()</t>
<t tx="ekr.20031218072017.2927">def markClones (self):

	c = self ; current = v = c.currentVnode()
	if not v: return
	if not v.isCloned(): return
	
	v = c.rootVnode()
	c.beginUpdate()
	while v:
		if v.t == current.t:
			v.setMarked()
		v = v.threadNext()
	c.endUpdate()</t>
<t tx="ekr.20031218072017.2928">def markHeadline (self):

	c = self ; v = c.currentVnode()
	if not v: return

	c.beginUpdate()
	if v.isMarked():
		v.clearMarked()
	else:
		v.setMarked()
		v.setDirty()
		c.setChanged(true)
	c.endUpdate()</t>
<t tx="ekr.20031218072017.2929">def markSubheads(self):

	c = self ; v = c.currentVnode()
	if not v: return

	child = v.firstChild()
	c.beginUpdate()
	while child:
		if not child.isMarked():
			child.setMarked()
			child.setDirty()
			c.setChanged(true)
		child = child.next()
	c.endUpdate()</t>
<t tx="ekr.20031218072017.2930">def unmarkAll(self):

	c = self ; v = c.rootVnode()
	c.beginUpdate()
	while v:
		if v.isMarked():
			v.clearMarked()
			v.setDirty()
			c.setChanged(true)
		v = v.threadNext()
	c.endUpdate()</t>
<t tx="ekr.20031218072017.2931"></t>
<t tx="ekr.20031218072017.2932">def openPythonWindow(self):

	if sys.platform == "linux2":
		&lt;&lt; open idle in Linux &gt;&gt;
	else:
		&lt;&lt; open idle in Windows &gt;&gt;
</t>
<t tx="ekr.20031218072017.2933"># 09-SEP-2002 DHEIN: Open Python window under linux

try:
	pathToLeo = g.os_path_join(g.app.loadDir,"leo.py")
	sys.argv = [pathToLeo]
	from idlelib import idle
	if g.app.idle_imported:
		reload(idle)
	g.app.idle_imported = true
except:
	try:
		g.es("idlelib could not be imported.")
		g.es("Probably IDLE is not installed.")
		g.es("Run Tools/idle/setup.py to build idlelib.")
		g.es("Can not import idle")
		g.es_exception() # This can fail!!
	except: pass
</t>
<t tx="ekr.20031218072017.2934"># Initialize argv: the -t option sets the title of the Idle interp window.
sys.argv = ["leo","-t","leo"]

ok = false
if g.CheckVersion(sys.version,"2.3"):
	&lt;&lt; Try to open idle in Python 2.3 systems &gt;&gt;
else:
	&lt;&lt; Try to open idle in Python 2.2 systems &gt;&gt;

if not ok:
	g.es("Can not import idle")
	if idle_dir and idle_dir not in sys.path:
		g.es("Please add '%s' to sys.path" % idle_dir)</t>
<t tx="ekr.20031218072017.2935">try:
	executable_dir = g.os_path_dirname(sys.executable)
	idle_dir = g.os_path_join(executable_dir,"Tools","idle")

	# 1/29/04: sys.path doesn't handle unicode in 2.2.
	idle_dir = str(idle_dir) # May throw an exception.

	# 1/29/04: must add idle_dir to sys.path even when using importFromPath.
	if idle_dir not in sys.path:
		sys.path.insert(0,idle_dir)

	if 1:
		import PyShell
	else: # Works, but is not better than import.
		PyShell = g.importFromPath("PyShell",idle_dir)

	if g.app.idle_imported:
		reload(idle)
		g.app.idle_imported = true
		
	if 1: # Mostly works, but causes problems when opening other .leo files.
		PyShell.main()
	else: # Doesn't work: destroys all of Leo when Idle closes.
		self.leoPyShellMain()
	ok = true
except ImportError:
	ok = false
	g.es_exception()</t>
<t tx="ekr.20031218072017.2936">try:
	idle_dir = None
	
	import idlelib.PyShell

	if g.app.idle_imported:
		reload(idle)
		g.app.idle_imported = true
		
	idlelib.PyShell.main()
	ok = true

except:
	ok = false
	g.es_exception()</t>
<t tx="ekr.20031218072017.2937">@ The key parts of Pyshell.main(), but using Leo's root window instead of a new Tk root window.

This does _not_ work well.  Using Leo's root window means that Idle will shut down Leo without warning when the Idle window is closed!
@c

def leoPyShellMain(self):
	
	import PyShell
	root = g.app.root
	PyShell.fixwordbreaks(root)
	flist = PyShell.PyShellFileList(root)
	shell = PyShell.PyShell(flist)
	flist.pyshell = shell
	shell.begin()</t>
<t tx="ekr.20031218072017.2938"></t>
<t tx="ekr.20031218072017.2939">def about(self):
	
	c = self
	
	# Don't use triple-quoted strings or continued strings here.
	# Doing so would add unwanted leading tabs.
	version = c.getSignOnLine() + "\n\n"
	copyright = (
		"Copyright 1999-2003 by Edward K. Ream\n" +
		"All Rights Reserved\n" +
		"Leo is distributed under the Python License")
	url = "http://webpages.charter.net/edreamleo/front.html"
	email = "edreamleo@charter.net"

	g.app.gui.runAboutLeoDialog(version,copyright,url,email)</t>
<t tx="ekr.20031218072017.2940">def leoDocumentation (self):
	
	c = self

	fileName = g.os_path_join(g.app.loadDir,"..","doc","LeoDocs.leo")

	try:
		g.openWithFileName(fileName,c)
	except:
		g.es("not found: LeoDocs.leo")
</t>
<t tx="ekr.20031218072017.2941">def leoHome (self):
	
	import webbrowser

	url = "http://webpages.charter.net/edreamleo/front.html"
	try:
		webbrowser.open_new(url)
	except:
		g.es("not found: " + url)</t>
<t tx="ekr.20031218072017.2942">def leoTutorial (self):
	
	import webbrowser

	if 1: # new url
		url = "http://www.3dtree.com/ev/e/sbooks/leo/sbframetoc_ie.htm"
	else:
		url = "http://www.evisa.com/e/sbooks/leo/sbframetoc_ie.htm"
	try:
		webbrowser.open_new(url)
	except:
		g.es("not found: " + url)</t>
<t tx="ekr.20031218072017.2943">def leoConfig (self):

	# 4/21/03 new code suggested by fBechmann@web.de
	c = self
	loadDir = g.app.loadDir
	configDir = g.app.config.configDir

	# Look in configDir first.
	fileName = g.os_path_join(configDir, "leoConfig.leo")

	ok, frame = g.openWithFileName(fileName,c)
	if not ok:
		if configDir == loadDir:
			g.es("leoConfig.leo not found in " + loadDir)
		else:
			# Look in loadDir second.
			fileName = g.os_path_join(loadDir,"leoConfig.leo")

			ok, frame = g.openWithFileName(fileName,c)
			if not ok:
				g.es("leoConfig.leo not found in " + configDir + " or " + loadDir)</t>
<t tx="ekr.20031218072017.2944">def applyConfig (self):

	c = self
	g.app.config.init()
	c.frame.reconfigureFromConfig()</t>
<t tx="ekr.20031218072017.2945"></t>
<t tx="ekr.20031218072017.2946">def dragCloneToNthChildOf (self,v,parent,n):

	c = self
	c.beginUpdate()
	# g.trace("v,parent,n:"+v.headString()+","+parent.headString()+","+`n`)
	clone = v.clone(v) # Creates clone &amp; dependents, does not set undo.
	if not c.checkMoveWithParentWithWarning(clone,parent,true):
		clone.doDelete(v) # Destroys clone &amp; dependents. Makes v the current node.
		c.endUpdate(false) # Nothing has changed.
		return
	# Remember both the before state and the after state for undo/redo
	oldBack = v.back()
	oldParent = v.parent()
	oldN = v.childIndex()
	c.endEditing()
	# clone.setDirty()
	clone.setAllAncestorAtFileNodesDirty() # 1/12/04
	clone.moveToNthChildOf(parent,n)
	c.undoer.setUndoParams("Drag &amp; Clone",clone,
		oldBack=oldBack,oldParent=oldParent,oldN=oldN,oldV=v)
	# clone.setDirty()
	clone.setAllAncestorAtFileNodesDirty() # 1/12/04
	c.selectVnode(clone)
	c.setChanged(true)
	c.endUpdate()
	c.updateSyntaxColorer(clone) # Dragging can change syntax coloring.
</t>
<t tx="ekr.20031218072017.2947">def dragToNthChildOf(self,v,parent,n):

	# g.es("dragToNthChildOf")
	c = self
	if not c.checkMoveWithParentWithWarning(v,parent,true): return
	# Remember both the before state and the after state for undo/redo
	oldBack = v.back()
	oldParent = v.parent()
	oldN = v.childIndex()
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		# v.setDirty()
		v.setAllAncestorAtFileNodesDirty() # 1/12/04
		v.moveToNthChildOf(parent,n)
		c.undoer.setUndoParams("Drag",v,
			oldBack=oldBack,oldParent=oldParent,oldN=oldN)
		# v.setDirty()
		v.setAllAncestorAtFileNodesDirty() # 1/12/04
		c.selectVnode(v)
		c.setChanged(true)
	c.endUpdate()
	c.updateSyntaxColorer(v) # Dragging can change syntax coloring.</t>
<t tx="ekr.20031218072017.2948">def dragCloneAfter (self,v,after):

	c = self
	c.beginUpdate()
	clone = v.clone(v) # Creates clone &amp; dependents, does not set undo.
	# g.trace("v,after:",v.headString(),after.headString())
	if not c.checkMoveWithParentWithWarning(clone,after.parent(),true):
		g.trace("invalid clone move")
		clone.doDelete(v) # Destroys clone &amp; dependents. Makes v the current node.
		c.endUpdate(false) # Nothing has changed.
		return
	# Remember both the before state and the after state for undo/redo
	oldBack = v.back()
	oldParent = v.parent()
	oldN = v.childIndex()
	c.endEditing()
	# clone.setDirty()
	clone.setAllAncestorAtFileNodesDirty() # 1/12/04
	clone.moveAfter(after)
	c.undoer.setUndoParams("Drag &amp; Clone",clone,
		oldBack=oldBack,oldParent=oldParent,oldN=oldN,oldV=v)
	# clone.setDirty()
	clone.setAllAncestorAtFileNodesDirty() # 1/12/04
	c.selectVnode(clone)
	c.setChanged(true)
	c.endUpdate()
	c.updateSyntaxColorer(clone) # Dragging can change syntax coloring.</t>
<t tx="ekr.20031218072017.2949"></t>
<t tx="ekr.20031218072017.2950">def beginUpdate(self):

	self.frame.tree.beginUpdate()
	
BeginUpdate = beginUpdate # Compatibility with old scripts</t>
<t tx="ekr.20031218072017.2951">def bringToFront(self):

	self.frame.deiconify()

BringToFront = bringToFront # Compatibility with old scripts</t>
<t tx="ekr.20031218072017.2952">def endUpdate(self, flag=true):
	
	self.frame.tree.endUpdate(flag)
	
EndUpdate = endUpdate # Compatibility with old scripts</t>
<t tx="ekr.20031218072017.2953">def recolor(self):

	c = self

	c.frame.body.recolor(c.currentVnode())</t>
<t tx="ekr.20031218072017.2954">def redraw(self):

	self.frame.tree.redraw()
	
# Compatibility with old scripts
Redraw = redraw 
repaint = redraw
Repaint = redraw</t>
<t tx="ekr.20031218072017.2955"></t>
<t tx="ekr.20031218072017.2956">def canContractAllHeadlines (self):
	
	c = self
	
	for p in c.allNodes_iter():
		if p.isExpanded():
			return true

	return false</t>
<t tx="ekr.20031218072017.2957">def canContractAllSubheads (self):

	c = self ; current = c.currentPosition()
	
	for p in current.subtree_iter():
		if p != current and p.isExpanded():
			return true

	return false</t>
<t tx="ekr.20031218072017.2958">def canContractParent (self):

	c = self
	return c.currentPosition().parent()</t>
<t tx="ekr.20031218072017.2959">def canContractSubheads (self):
	
	c = self ; current = c.currentPosition()

	for child in current.children_iter():
		if child.isExpanded():
			return true
		
	return false</t>
<t tx="ekr.20031218072017.2960">def canDeleteHeadline (self):
	
	c = self ; p = c.currentPosition()

	return p.hasParent() or p.hasThreadBack() or p.hasNext()

canCutOutline = canDeleteHeadline</t>
<t tx="ekr.20031218072017.2961">def canDemote (self):

	c = self
	return c.currentPosition().hasNext()</t>
<t tx="ekr.20031218072017.2962">def canExpandAllHeadlines (self):
	
	c = self
	
	for p in c.currentPosition().subtree_iter():
		if not p.isExpanded():
			return true

	return false
</t>
<t tx="ekr.20031218072017.2963">def canExpandAllSubheads (self):

	c = self
	
	for p in c.currentPosition().subtree_iter():
		if p != current and not p.isExpanded():
			return true
		
	return false</t>
<t tx="ekr.20031218072017.2964">def canExpandSubheads (self):

	c = self
	
	for p in c.currentPosition().children_iter():
		if p != current and not p.isExpanded():
			return true

	return false</t>
<t tx="ekr.20031218072017.2965">def canFindMatchingBracket (self):
	
	c = self ; brackets = "()[]{}"
	c1 = c.frame.body.getCharAtInsertPoint()
	c2 = c.frame.body.getCharBeforeInsertPoint()
	return (c1 and c1 in brackets) or (c2 and c2 in brackets)</t>
<t tx="ekr.20031218072017.2966">def canGoToNextDirtyHeadline (self):
	
	c = self ; current = c.currentPosition()

	for p in c.allNodes_iter():
		if p != current and p.isDirty():
			return true
	
	return false</t>
<t tx="ekr.20031218072017.2967">def canGoToNextMarkedHeadline (self):
	
	c = self ; current = c.currentPosition()
		
	for p in c.allNodes_iter():
		if p != current and p.isMarked():
			return true

	return false
</t>
<t tx="ekr.20031218072017.2968">def canMarkChangedHeadlines (self):
	
	c = self
	
	for p in c.allNodes_iter():
		if p.isDirty():
			return true
	
	return false</t>
<t tx="ekr.20031218072017.2969">def canMarkChangedRoots (self):
	
	c = self
	
	for p in c.allNodes_iter():
		if p.isDirty and p.isAnyAtFileNode():
			return true

	return false</t>
<t tx="ekr.20031218072017.2970">def canMoveOutlineDown (self):

	c = self ; current = c.currentPosition()
		
	p = current.visNext()
	while p and current.isAncestorOf(p):
		p.moveToVisNext()

	if c.hoistStack:
		h = c.hoistStack[-1]
		return p and p != h and h.isAncestorOf(p)
	else:
		return p</t>
<t tx="ekr.20031218072017.2971">def canMoveOutlineLeft (self):

	c = self ; p = c.currentPosition()

	if c.hoistStack:
		h = c.hoistStack[-1]
		if p and p.hasParent():
			p.moveToParent()
			return p != h and h.isAncestorOf(p)
		else:
			return false
	else:
		return p and p.hasParent()</t>
<t tx="ekr.20031218072017.2972">def canMoveOutlineRight (self):

	c = self ; p = c.currentPosition()
	
	if c.hoistStack:
		h = c.hoistStack[-1]
		return p and p.hasBack() and p != h
	else:
		return p and p.hasBack()</t>
<t tx="ekr.20031218072017.2973">def canMoveOutlineUp (self):

	c = self ; p = c.currentPosition()
	if not p: return false
	
	pback = p.visBack()
	if not pback: return false

	if c.hoistStack:
		h = c.hoistStack[-1]
		return h != p and h.isAncestorOf(pback)
	else:
		return true</t>
<t tx="ekr.20031218072017.2974">def canPasteOutline (self,s=None):

	c = self
	if s == None:
		s = g.app.gui.getTextFromClipboard()
	if not s:
		return false

	# g.trace(s)
	if g.match(s,0,g.app.prolog_prefix_string):
		return true
	elif len(s) &gt; 0:
		return c.importCommands.stringIsValidMoreFile(s)
	else:
		return false</t>
<t tx="ekr.20031218072017.2975">def canPromote (self):

	c = self ; v = c.currentVnode()
	return v and v.hasChildren()</t>
<t tx="ekr.20031218072017.2976">def canRevert (self):

	# c.mFileName will be "untitled" for unsaved files.
	c = self
	return (c.frame and c.mFileName and c.isChanged())</t>
<t tx="ekr.20031218072017.2977"># 7/29/02: The shortcuts for these commands are now unique.

def canSelectThreadBack (self):
	c = self ; p = c.currentPosition()
	return p.hasThreadBack()
	
def canSelectThreadNext (self):
	c = self ; p = c.currentPosition()
	return p.hasThreadNext()

def canSelectVisBack (self):
	c = self ; p = c.currentPosition()
	return p.hasVisBack()
	
def canSelectVisNext (self):
	c = self ; p = c.currentPosition()
	return p.hasVisNext()</t>
<t tx="ekr.20031218072017.2978">def canShiftBodyLeft (self):

	c = self ; body = c.frame.body
	return body and body.getAllText()

canShiftBodyRight = canShiftBodyLeft</t>
<t tx="ekr.20031218072017.2979">def canSortChildren (self):
	
	c = self ; p = c.currentPosition()
	return p and p.hasChildren()

def canSortSiblings (self):

	c = self ; p = c.currentPosition()
	return p and (p.hasNext() or p.hasBack())</t>
<t tx="ekr.20031218072017.2980">def canUndo (self):

	c = self
	return c.undoer.canUndo()
	
def canRedo (self):

	c = self
	return c.undoer.canRedo()</t>
<t tx="ekr.20031218072017.2981">def canUnmarkAll (self):
	
	c = self
	
	for p in c.allNodes_iter():
		if p.isMarked():
			return true

	return false</t>
<t tx="ekr.20031218072017.2982"></t>
<t tx="ekr.20031218072017.2983">def currentPosition (self):
	
	"""Return the presently selected position."""

	return self._currentPosition.copy()
	
def setCurrentPosition (self,p):
	
	"""Set the presently selected position."""

	self._currentPosition = p
	
# Define these for compatibiility with old scripts.
currentVnode = currentPosition
setCurrentVnode = setCurrentPosition</t>
<t tx="ekr.20031218072017.2984">def clearAllMarked (self):

	c = self

	for p in c.allNodes_iter():
		p.v.clearMarked()</t>
<t tx="ekr.20031218072017.2985">def clearAllVisited (self):

	c = self

	for p in c.allNodes_iter():
		p.v.clearVisited()
		p.v.t.clearVisited()</t>
<t tx="ekr.20031218072017.2986"># Compatibility with scripts

def fileName (self):

	return self.mFileName
</t>
<t tx="ekr.20031218072017.2987">def isChanged (self):

	return self.changed</t>
<t tx="ekr.20031218072017.2988">def rootPosition(self):
	
	"""Return the root position."""
	
	return self._rootPosition.copy()

def setRootPosition(self,p):
	
	"""Set the root positioin."""

	self._rootPosition = p
	
# Define these for compatibiility with old scripts.
rootVnode = rootPosition
setRootVnode = setRootPosition</t>
<t tx="ekr.20031218072017.2989">def setChanged (self,changedFlag):

	c = self
	if not c.frame: return
	# Clear all dirty bits _before_ setting the caption.
	# 9/15/01 Clear all dirty bits except orphaned @file nodes
	if not changedFlag:
		# g.trace("clearing all dirty bits")
		for p in c.allNodes_iter():
			if p.isDirty() and not (p.isAtFileNode() or p.isAtRawFileNode()):
				p.clearDirty()
	# Update all derived changed markers.
	c.changed = changedFlag
	s = c.frame.getTitle()
	if len(s) &gt; 2 and not c.loading: # don't update while loading.
		if changedFlag:
			# import traceback ; traceback.print_stack()
			if s [0] != '*': c.frame.setTitle("* " + s)
		else:
			if s[0:2]=="* ": c.frame.setTitle(s[2:])</t>
<t tx="ekr.20031218072017.2990"></t>
<t tx="ekr.20031218072017.2991"># Selects v: sets the focus to p and edits p.

def editPosition(self,p):

	c = self

	if p:
		c.selectVnode(p)
		c.frame.tree.editLabel(p)</t>
<t tx="ekr.20031218072017.2992"># Ends the editing in the outline.

def endEditing(self):

	self.frame.tree.endEditLabel()
</t>
<t tx="ekr.20031218072017.2993">def selectThreadBack(self):

	c = self ; current = c.currentVnode()
	if not current: return
	
	v = current.threadBack()
	if v:
		c.beginUpdate()
		c.selectVnode(v)
		c.endUpdate()
</t>
<t tx="ekr.20031218072017.2994">def selectThreadNext(self):

	c = self ; current = c.currentVnode()
	if not current: return

	v = current.threadNext()
	if v:
		c.beginUpdate()
		c.selectVnode(v)
		c.endUpdate()</t>
<t tx="ekr.20031218072017.2995"># This has an up arrow for a control key.

def selectVisBack(self):

	c = self ; current = c.currentVnode()
	if not current: return

	v = current.visBack()
	if v:
		c.beginUpdate()
		c.selectVnode(v)
		c.endUpdate()</t>
<t tx="ekr.20031218072017.2996">def selectVisNext(self):

	c = self ; current = c.currentVnode()
	if not current: return
	
	v = current.visNext()
	if v:
		c.beginUpdate()
		c.selectVnode(v)
		c.endUpdate()
</t>
<t tx="ekr.20031218072017.2997">def selectVnode(self,p,updateBeadList=true):
	
	"""Select a new vnode."""

	# All updating and "synching" of nodes are now done in the event handlers!
	c = self
	c.frame.tree.endEditLabel()
	c.frame.tree.select(p,updateBeadList)
	c.frame.body.setFocus()
	self.editing = false</t>
<t tx="ekr.20031218072017.2998"># Selects the given node and enables editing of the headline if editFlag is true.

def selectVnodeWithEditing(self,v,editFlag):

	c = self
	if editFlag:
		c.editPosition(v)
	else:
		c.selectVnode(v)
</t>
<t tx="ekr.20031218072017.2999">@ These routines provide a convenient interface to the syntax colorer.
</t>
<t tx="ekr.20031218072017.3000">def updateSyntaxColorer(self,v):

	self.frame.body.updateSyntaxColorer(v)
</t>
<t tx="ekr.20031218072017.3001">@language python

import leoGlobals as g
from leoGlobals import true,false

import ConfigParser,exceptions,os,string,sys

class baseConfig:
	"""The base class for Leo's configuration handler."""
	&lt;&lt; define defaultsDict &gt;&gt;
	@others
	
class config (baseConfig):
	"""A class to manage configuration settings."""
	pass</t>
<t tx="ekr.20031218072017.3002">def __init__ (self):

	self.init()

def init (self):

	try:
		self.configDir = sys.leo_config_directory
	except:
		self.configDir = g.os_path_join(g.app.loadDir,"..","config")

	self.configFileName = g.os_path_join(self.configDir,"leoConfig.txt")

	self.configsExist = false # true when we successfully open leoConfig.txt.
	
	# These are now set in gui.getDefaultConfigFont
	self.defaultFont = None
	self.defaultFontFamily = None
	
	&lt;&lt; initialize constant ivars, lists &amp; dicts &gt;&gt;
	&lt;&lt; initialize ivars that may be set by config options &gt;&gt;

	self.open() # read and process the configuration file.</t>
<t tx="ekr.20031218072017.3003"># Names of sections.
self.configSection = "config options"
self.compareSection = "compare options"
self.findSection = "find/change options"
self.keysSection = "keyboard shortcuts"
self.prefsSection = "prefs panel options"
self.recentFilesSection = "recent files"
self.colorsSection = "syntax coloring options"
self.windowSection = "window options"

# List of recent files.
self.recentFiles = []

# Section dictionaries
self.compareDict = {}
self.configDict = {} # 10/11/02: we use a dict even for ivars.
self.findDict = {}
self.keysDict = {} ; self.rawKeysDict = {} # 2/8/04
self.prefsDict = {}
self.colorsDict = {}
self.windowDict = {}

# Associations of sections and dictionaries.
self.sectionInfo = (
	(self.configSection,self.configDict),
	(self.compareSection,self.compareDict),
	(self.findSection,self.findDict),
	(self.keysSection,self.keysDict),
	(self.prefsSection,self.prefsDict),
	(self.recentFilesSection,None),
	(self.colorsSection,self.colorsDict),
	(self.windowSection,self.windowDict) )</t>
<t tx="ekr.20031218072017.3004"># 10/11/02: Defaults are specified only here.

self.at_root_bodies_start_in_doc_mode = true # For compatibility with previous versions.
self.config = None # The current instance of ConfigParser
self.config_encoding = "utf-8" # Encoding used for leoConfig.txt.
self.create_nonexistent_directories = false
self.default_derived_file_encoding = "utf-8"
self.load_derived_files_immediately = 0
self.new_leo_file_encoding = "UTF-8" # Upper case for compatibility with previous versions.
self.output_initial_comment = "" # "" or None for compatibility with previous versions.
self.output_newline = "nl"
self.read_only = true # Make sure we don't alter an illegal leoConfig.txt file!
self.redirect_execute_script_output_to_log_pane = false
self.relative_path_base_directory = "!"
self.remove_sentinels_extension = ".txt"
self.save_clears_undo_buffer = false
self.stylesheet = None
self.tkEncoding = None # Defaults to None so it doesn't override better defaults.
self.use_plugins = false # Should never be true here!
self.write_old_format_derived_files = false # Use new format if leoConfig.txt does not exist.</t>
<t tx="ekr.20031218072017.3005"></t>
<t tx="ekr.20031218072017.3006">def getBoolColorsPref (self,name):
	return self.getBoolFromDict(name,self.colorsDict)
	
# Basic getters and setters.

def getColorsPref (self,name):
	return self.getFromDict(name,self.colorsDict)

def setColorsPref (self,name,val):
	self.setDict(name,val,self.colorsDict)
	
getStringColorsPref = getColorsPref</t>
<t tx="ekr.20031218072017.3007">def getBoolComparePref (self,name):
	return self.getBoolFromDict(name,self.compareDict)
	
def getIntComparePref (self,name):
	return self.getIntFromDict(name,self.compareDict)

# Basic getters and setters.

def getComparePref (self,name):
	return self.getFromDict(name,self.compareDict)

def setComparePref (self,name,val):
	self.setDict(name,val,self.compareDict)
	
getStringComparePref = getComparePref</t>
<t tx="ekr.20031218072017.3008">def getBoolFindPref (self,name):
	return self.getBoolFromDict(name,self.findDict)

# Basic getters and setters.

def getFindPref (self,name):
	return self.getFromDict(name,self.findDict)

def setFindPref (self,name,val):
	self.setDict(name,val,self.findDict)
	
getStringFindPref = getFindPref</t>
<t tx="ekr.20031218072017.3009">def getBoolPref (self,name):
	return self.getBoolFromDict(name,self.prefsDict)

def getIntPref (self,name):
	return self.getIntFromDict(name,self.prefsDict)
	
# Basic getters and setters.

def getPref (self,name):
	return self.getFromDict(name,self.prefsDict)

def setPref (self,name,val):
	self.setDict(name,val,self.prefsDict)
	
getStringPref = getPref</t>
<t tx="ekr.20031218072017.3010">def getRecentFiles (self):
	
	return self.recentFiles

def setRecentFiles (self,files):

	self.recentFiles = files
</t>
<t tx="ekr.20031218072017.3011">def getBoolWindowPref (self,name):
	return self.getBoolFromDict(name,self.windowDict)
	
def getFloatWindowPref (self,name):
	return self.getFloatFromDict(name,self.windowDict)
	
def getIntWindowPref (self,name):
	return self.getIntFromDict(name,self.windowDict)
	
# Basic getters and setters.

def getWindowPref (self,name):
	return self.getFromDict(name,self.windowDict)

def setWindowPref (self,name,val):
	self.setDict(name,val,self.windowDict)
	
getStringWindowPref = getWindowPref</t>
<t tx="ekr.20031218072017.3012">def initConfigParam (self,name,defaultVal):
	try:
		val = self.config.get(self.configSection,name,raw=1) # 2/4/03
	except:
		val = defaultVal
	return val

def initBooleanConfigParam (self,name,defaultVal):
	try:
		val = self.config.getboolean(self.configSection,name)
	except:
		val = defaultVal
	return val
</t>
<t tx="ekr.20031218072017.3013"># Sets ivars of c that can be overridden by leoConfig.txt

def setCommandsFindIvars (self,c):
	
	if g.app.gui.guiName() != "tkinter":
		return

	config = self ; findFrame = g.app.findFrame

	# N.B.: separate c.ivars are much more convenient than a dict.
	for s in findFrame.intKeys:
		val = config.getBoolFindPref(s)
		if val != None: # 10/2/03
			setattr(c,s+"_flag",val)
			# g.trace(s+"_flag",val)
			
	val = config.getStringFindPref("change_string")
	if val: c.change_text = val
	
	val = config.getStringFindPref("find_string")
	if val: c.find_text = val

	g.app.findFrame.init(c)</t>
<t tx="ekr.20031218072017.3014"># Sets ivars of c that can be overridden by leoConfig.txt

def setCommandsIvars (self,c):

	config = self
	&lt;&lt; set prefs ivars &gt;&gt;</t>
<t tx="ekr.20031218072017.3015">val = config.getIntPref("tab_width")
if val: c.tab_width = val

val = config.getIntPref("page_width")
if val: c.page_width = val

val = config.getIntPref("run_tangle_done.py")
if val: c.tangle_batch_flag = val

val = config.getIntPref("run_untangle_done.py")
if val: c.untangle_batch_flag = val

val = config.getIntPref("output_doc_chunks")
if val: c.output_doc_flag = val

val = config.getIntPref("tangle_outputs_header")
if val: c.use_header_flag = val

val = config.getPref("default_tangle_directory")
if val: c.tangle_directory = val

val = config.getPref("find_string")
if val: c.tangle_directory = val

c.target_language = "python" # default
val = config.getPref("default_target_language")
if val:
	try:
		val = string.lower(val)
		val = string.replace(val,"/","")
		if g.app.language_delims_dict.get(val):
			c.target_language = val
		
	except: pass</t>
<t tx="ekr.20031218072017.3016">def setConfigFindIvars (self,c):
	
	"""Set the config ivars from the commander."""
	
	findFrame = g.app.findFrame

	# N.B.: separate c.ivars are much more convenient than a dict.
	for s in findFrame.intKeys: # These _are_ gui-independent.
		val = getattr(c,s+"_flag")
		self.setFindPref(s,val)
		# g.trace(s,val)
	
	self.setFindPref("change_string",c.change_text)
	self.setFindPref("find_string",c.find_text)</t>
<t tx="ekr.20031218072017.3017"># Sets config ivars from c.

def setConfigIvars (self,c):
	
	if c.target_language and g.app.language_delims_dict.get(c.target_language):
		language = c.target_language
	else:
		language = "plain"
	self.setPref("default_tangle_directory",c.tangle_directory)
	self.setPref("default_target_language",language)
	self.setPref("output_doc_chunks",`c.output_doc_flag`)
	self.setPref("page_width",`c.page_width`)
	self.setPref("run_tangle_done.py",`c.tangle_batch_flag`)
	self.setPref("run_untangle_done.py",`c.untangle_batch_flag`)
	self.setPref("tab_width",`c.tab_width`)
	self.setPref("tangle_outputs_header",`c.use_header_flag`)
	
	self.setFindPref("batch",`c.batch_flag`)
	self.setFindPref("ignore_case",`c.ignore_case_flag`)
	self.setFindPref("mark_changes",`c.mark_changes_flag`)
	self.setFindPref("mark_finds",`c.mark_finds_flag`)
	self.setFindPref("pattern_match",`c.pattern_match_flag`)
	self.setFindPref("reverse",`c.reverse_flag`)
	self.setFindPref("script_change",`c.script_change_flag`)
	self.setFindPref("script_search",`c.script_search_flag`)
	self.setFindPref("search_body",`c.search_body_flag`)
	self.setFindPref("search_headline",`c.search_headline_flag`)
	self.setFindPref("selection_only",`c.selection_only_flag`) # 11/9/03
	self.setFindPref("suboutline_only",`c.suboutline_only_flag`)
	self.setFindPref("wrap",`c.wrap_flag`)
	self.setFindPref("whole_word",`c.whole_word_flag`)
	
	self.setFindPref("change_string",c.change_text)
	self.setFindPref("find_string",c.find_text)</t>
<t tx="ekr.20031218072017.3018">@language python

import leoGlobals as g
from leoGlobals import true,false

import leoNodes
import os,string,time

@ The list of language names that are written differently from the names in language_delims_dict in leoGlobals.py.  This is needed for compatibility with the borland version of Leo.

We convert from names in xml_language_names to names in language_delims_dict by converting the name to lowercase and by removing slashes.
@c

xml_language_names = (
	"CWEB","C","HTML","Java","LaTeX",
	"Pascal","PerlPod","Perl","Plain","Python","tcl/tk")

class BadLeoFile(Exception):
	def __init__(self, message):
		self.message = message
		Exception.__init__(self,message) # 4/26/03: initialize the base class.
	def __str__(self):
		return "Bad Leo File:" + self.message

class baseFileCommands:
	"""A base class for the fileCommands subcommander."""
	@others
	
class fileCommands (baseFileCommands):
	"""A class creating the fileCommands subcommander."""
	pass
</t>
<t tx="ekr.20031218072017.3019">def __init__(self,c):

	# g.trace("__init__", "fileCommands.__init__")
	self.c = c
	self.frame = c.frame
	self.initIvars()

def initIvars(self):

	# General
	self.maxTnodeIndex = 0
	self.numberOfTnodes = 0
	self.topPosition = None
	self.mFileName = ""
	self.fileDate = -1
	self.leo_file_encoding = g.app.config.new_leo_file_encoding
	# For reading
	self.fileFormatNumber = 0
	self.ratio = 0.5
	self.fileBuffer = None ; self.fileIndex = 0
	# For writing
	self.read_only = false
	self.outputFile = None # File for normal writing
	self.outputList = None # List of strings for pasting
	self.openDirectory = None
	self.topVnode = None
	self.usingClipboard = false
	# New in 3.12
	self.copiedTree = None
	self.tnodesDict = {}</t>
<t tx="ekr.20031218072017.3020"></t>
<t tx="ekr.20031218072017.3021"></t>
<t tx="ekr.20031218072017.3022">def getClipboardHeader (self):

	if self.getOpenTag("&lt;leo_header"):
		return # 11/24/02

	while 1:
		if self.matchTag("file_format="):
			self.getDquote() ; self.fileFormatNumber = self.getLong() ; self.getDquote()
		elif self.matchTag("tnodes="):
			self.getDquote() ; self.getLong() ; self.getDquote() # no longer used
		elif self.matchTag("max_tnode_index="):
			self.getDquote() ; self.getLong() ; self.getDquote() # no longer used
		else:
			self.getTag("/&gt;")
			break</t>
<t tx="ekr.20031218072017.3023"># For compatibility with old file formats.

def getCloneWindows (self):

	if not self.matchTag("&lt;clone_windows&gt;"):
		return

	while self.matchTag("&lt;clone_window vtag=\"V"):
		self.getLong() ; self.getDquote() ; self.getTag("&gt;")
		if not self.getOpenTag("&lt;global_window_position"):
			self.getTag("&lt;global_window_position")
			self.getPosition()
			self.getTag("/&gt;")
		self.getTag("&lt;/clone_window&gt;")
	self.getTag("&lt;/clone_windows&gt;")</t>
<t tx="ekr.20031218072017.3024">def getEscapedString (self):

	# The next '&lt;' begins the ending tag.
	i = self.fileIndex
	self.fileIndex = j = string.find(self.fileBuffer,'&lt;',i)
	if j == -1:
		print self.fileBuffer[i:]
		raise BadLeoFile("unterminated escaped string")
	else:
		# Allocates memory
		return self.xmlUnescape(self.fileBuffer[i:j])</t>
<t tx="ekr.20031218072017.3025">def getPosition (self):

	top = left = height = width = 0
	# New in version 1.7: attributes may appear in any order.
	while 1:
		if self.matchTag("top=\""):
			top = self.getLong() ; self.getDquote()
		elif self.matchTag("left=\""):
			left = self.getLong() ; self.getDquote()
		elif self.matchTag("height=\""):
			height = self.getLong() ; self.getDquote()
		elif self.matchTag("width=\""):
			width = self.getLong() ; self.getDquote()
		else: break
	return top, left, height, width</t>
<t tx="ekr.20031218072017.3026">def getSize (self):

	# New in version 1.7: attributes may appear in any order.
	height = 0 ; width = 0
	while 1:
		if self.matchTag("height=\""):
			height = self.getLong() ; self.getDquote()
		elif self.matchTag("width=\""):
			width = self.getLong() ; self.getDquote()
		else: break
	return height, width</t>
<t tx="ekr.20031218072017.3027">def skipWs (self):

	while self.fileIndex &lt; len(self.fileBuffer):
		ch = self.fileBuffer[self.fileIndex]
		if ch == ' ' or ch == '\t':
			self.fileIndex += 1
		else: break

	# The caller is entitled to get the next character.
	if  self.fileIndex &gt;= len(self.fileBuffer):
		raise BadLeoFile("")</t>
<t tx="ekr.20031218072017.3028">def skipWsAndNl (self):

	while self.fileIndex &lt; len(self.fileBuffer):
		ch = self.fileBuffer[self.fileIndex]
		if ch == ' ' or ch == '\t' or ch == '\r' or ch == '\n':
			self.fileIndex += 1
		else: break

	# The caller is entitled to get the next character.
	if  self.fileIndex &gt;= len(self.fileBuffer):
		raise BadLeoFile("")</t>
<t tx="ekr.20031218072017.3029">def readAtFileNodes (self):

	c = self.c ; current = c.currentVnode()
	c.atFileCommands.readAll(current,partialFlag=true)
	c.redraw() # 4/4/03
	
	# 7/8/03: force an update of the body pane.
	current.setBodyStringOrPane(current.bodyString())
	c.frame.body.onBodyChanged(current,undoType=None)</t>
<t tx="ekr.20031218072017.3030">def readOutlineOnly (self,file,fileName):

	c = self.c
	# Read the entire file into the buffer
	self.fileBuffer = file.read() ; file.close()
	self.fileIndex = 0
	&lt;&lt; Set the default directory &gt;&gt;
	c.beginUpdate()
	ok, ratio = self.getLeoFile(fileName,atFileNodesFlag=false)
	c.endUpdate()
	c.frame.deiconify()
	vflag,junk,secondary_ratio = self.frame.initialRatios()
	c.frame.resizePanesToRatio(ratio,secondary_ratio)
	if 0: # 1/30/04: this is useless.
		# This should be done after the pane size has been set.
		if self.topPosition:
			c.frame.tree.setTopPosition(self.topPosition)
			c.redraw()
	# delete the file buffer
	self.fileBuffer = ""
	return ok</t>
<t tx="ekr.20031218072017.3031">def xmlUnescape(self,s):

	if s:
		s = string.replace(s, '\r', '')
		s = string.replace(s, "&amp;lt;", '&lt;')
		s = string.replace(s, "&amp;gt;", '&gt;')
		s = string.replace(s, "&amp;amp;", '&amp;')
	return s</t>
<t tx="ekr.20031218072017.3032"></t>
<t tx="ekr.20031218072017.3033"></t>
<t tx="ekr.20031218072017.3034"># Surprisingly, the call to xmlEscape here is _much_ faster than calling put for each characters of s.

def putEscapedString (self,s):

	if s and len(s) &gt; 0:
		self.put(self.xmlEscape(s))</t>
<t tx="ekr.20031218072017.3035">def putFindSettings (self):

	c = self.c ; config = g.app.config

	self.put("&lt;find_panel_settings")
	
	&lt;&lt; put find settings that may exist in leoConfig.txt &gt;&gt;
	
	self.put("&lt;/find_panel_settings&gt;") ; self.put_nl()</t>
<t tx="ekr.20031218072017.3036">if config.configsExist and not config.read_only: # 8/6/02
	pass # config.update has already been called.
else:
	self.put_flag(c.batch_flag,"batch")
	self.put_flag(c.ignore_case_flag,"ignore_case")
	self.put_flag(c.mark_changes_flag,"mark_changes")
	self.put_flag(c.mark_finds_flag,"mark_finds")
	self.put_flag(c.pattern_match_flag,"pattern_match")
	self.put_flag(c.reverse_flag,"reverse")
	self.put_flag(c.search_headline_flag,"search_headline")
	self.put_flag(c.search_body_flag,"search_body")
	self.put_flag(c.suboutline_only_flag,"suboutline_only")
	self.put_flag(c.whole_word_flag,"whole_word")
	self.put_flag(c.wrap_flag,"wrap")
	self.put_flag(c.node_only_flag,"node_only")

self.put("&gt;") ; self.put_nl()

if config.configsExist and not config.read_only: # 8/6/02
	self.put_tab()
	self.put("&lt;find_string&gt;&lt;/find_string&gt;") ; self.put_nl()
else:
	self.put_tab()
	self.put("&lt;find_string&gt;") ; self.putEscapedString(c.find_text)
	self.put("&lt;/find_string&gt;") ; self.put_nl()

if config.configsExist and not config.read_only: # 8/6/02
	self.put_tab()
	self.put("&lt;change_string&gt;&lt;/change_string&gt;") ; self.put_nl()
else:
	self.put_tab()
	self.put("&lt;change_string&gt;") ; self.putEscapedString(c.change_text)
	self.put("&lt;/change_string&gt;") ; self.put_nl()</t>
<t tx="ekr.20031218072017.3037">def putGlobals (self):

	c = self.c
	self.put("&lt;globals")
	&lt;&lt; put the body/outline ratio &gt;&gt;
	self.put("&gt;") ; self.put_nl()
	&lt;&lt; put the position of this frame &gt;&gt;
	&lt;&lt; put the position of the log window &gt;&gt;
	self.put("&lt;/globals&gt;") ; self.put_nl()</t>
<t tx="ekr.20031218072017.3038"># Puts an innumerate number of digits

self.put(" body_outline_ratio=") ; self.put_in_dquotes(`c.frame.ratio`)</t>
<t tx="ekr.20031218072017.3039">width,height,left,top = c.frame.get_window_info()

self.put_tab()
self.put("&lt;global_window_position")
self.put(" top=") ; self.put_in_dquotes(`top`)
self.put(" left=") ; self.put_in_dquotes(`left`)
self.put(" height=") ; self.put_in_dquotes(`height`)
self.put(" width=") ; self.put_in_dquotes(`width`)
self.put("/&gt;") ; self.put_nl()</t>
<t tx="ekr.20031218072017.3040">top = left = height = width = 0 # no longer used
self.put_tab()
self.put("&lt;global_log_window_position")
self.put(" top=") ; self.put_in_dquotes(`top`)
self.put(" left=") ; self.put_in_dquotes(`left`)
self.put(" height=") ; self.put_in_dquotes(`height`)
self.put(" width=") ; self.put_in_dquotes(`width`)
self.put("/&gt;") ; self.put_nl()</t>
<t tx="ekr.20031218072017.3041">def putHeader (self):

	tnodes = 0 ; clone_windows = 0 # Always zero in Leo2.

	self.put("&lt;leo_header")
	self.put(" file_format=") ; self.put_in_dquotes("2")
	self.put(" tnodes=") ; self.put_in_dquotes(`tnodes`)
	self.put(" max_tnode_index=") ; self.put_in_dquotes(`self.maxTnodeIndex`)
	self.put(" clone_windows=") ; self.put_in_dquotes(`clone_windows`)
	self.put("/&gt;") ; self.put_nl()</t>
<t tx="ekr.20031218072017.3042">def putPostlog (self):

	self.put("&lt;/leo_file&gt;") ; self.put_nl()</t>
<t tx="ekr.20031218072017.3043">def saveAs(self,fileName):

	c = self.c ; v = c.currentVnode()

	if not g.doHook("save1",c=c,v=v,fileName=fileName):
		c.beginUpdate()
		c.endEditing() # Set the current headline text.
		self.compactFileIndices()
		self.setDefaultDirectoryForNewFiles(fileName)
		if self.write_LEO_file(fileName,false): # outlineOnlyFlag
			c.setChanged(false) # Clears all dirty bits.
			g.es("saved: " + g.shortFileName(fileName))
		c.endUpdate()
	g.doHook("save2",c=c,v=v,fileName=fileName)
</t>
<t tx="ekr.20031218072017.3044">def saveTo (self,fileName):

	c = self.c ; v = c.currentVnode()

	if not g.doHook("save1",c=c,v=v,fileName=fileName):
		c.beginUpdate()
		c.endEditing()# Set the current headline text.
		self.compactFileIndices()
		self.setDefaultDirectoryForNewFiles(fileName)
		if self.write_LEO_file(fileName,false): # outlineOnlyFlag
			g.es("saved: " + g.shortFileName(fileName))
		c.endUpdate()
	g.doHook("save2",c=c,v=v,fileName=fileName)
</t>
<t tx="ekr.20031218072017.3045">def setDefaultDirectoryForNewFiles (self,fileName):
	
	"""Set c.openDirectory for new files for the benefit of leoAtFile.scanAllDirectives."""
	
	c = self.c

	if not c.openDirectory or len(c.openDirectory) == 0:
		dir = g.os_path_dirname(fileName)

		if len(dir) &gt; 0 and g.os_path_isabs(dir) and g.os_path_exists(dir):
			c.openDirectory = dir</t>
<t tx="ekr.20031218072017.3046">def write_LEO_file(self,fileName,outlineOnlyFlag):

	c = self.c ; config = g.app.config

	if not outlineOnlyFlag:
		try:
			# Leo2: write all @file nodes and set orphan bits.
			at = c.atFileCommands
			at.writeAll()
		except:
			g.es_error("exception writing derived files")
			g.es_exception()
			return false
			
	# 1/29/03: self.read_only is not valid for Save As and Save To commands.
	if g.os_path_exists(fileName):
		try:
			if not os.access(fileName,os.W_OK):
				self.writeError("can not create: read only: " + self.targetFileName)
				return false
		except:
			pass # os.access() may not exist on all platforms.

	try:
		&lt;&lt; create backup file &gt;&gt;
		self.mFileName = fileName
		self.outputFile = open(fileName, 'wb') # 9/18/02
		if not self.outputFile:
			g.es("can not open " + fileName)
			&lt;&lt; delete backup file &gt;&gt;
			return false
		
		# 8/6/02: Update leoConfig.txt completely here.
		c.setIvarsFromFind()
		config.setConfigFindIvars(c)
		c.setIvarsFromPrefs()
		config.setCommandsIvars(c)
		config.update()
		
		self.putProlog()
		self.putHeader()
		self.putGlobals()
		self.putPrefs()
		self.putFindSettings()
		self.putVnodes()
		self.putTnodes()
		self.putPostlog()
		# raise BadLeoFile # testing
	except:
		g.es("exception writing: " + fileName)
		g.es_exception() 
		if self.outputFile:
			try:
				self.outputFile.close()
				self.outputFile = None
			except:
				g.es("exception closing: " + fileName)
				g.es_exception()
		&lt;&lt; erase filename and rename backupName to fileName &gt;&gt;
		return false

	if self.outputFile:
		try:
			self.outputFile.close()
			self.outputFile = None
		except:
			g.es("exception closing: " + fileName)
			g.es_exception()
		&lt;&lt; delete backup file &gt;&gt;
		return true
	else: # This probably will never happen because errors should raise exceptions.
		&lt;&lt; erase filename and rename backupName to fileName &gt;&gt;
		return false</t>
<t tx="ekr.20031218072017.3047"># rename fileName to fileName.bak if fileName exists.
if g.os_path_exists(fileName):
	try:
		backupName = g.os_path_join(g.app.loadDir,fileName)
		backupName = fileName + ".bak"
		if g.os_path_exists(backupName):
			os.unlink(backupName)
		# os.rename(fileName,backupName)
		g.utils_rename(fileName,backupName)
	except OSError:
		if self.read_only:
			g.es("read only",color="red")
		else:
			g.es("exception creating backup file: " + backupName)
			g.es_exception()
		return false
	except:
		g.es("exception creating backup file: " + backupName)
		g.es_exception()
		backupName = None
		return false
else:
	backupName = None</t>
<t tx="ekr.20031218072017.3048">if backupName and g.os_path_exists(backupName):
	try:
		os.unlink(backupName)
	except OSError:
		if self.read_only:
			g.es("read only",color="red")
		else:
			g.es("exception deleting backup file:" + backupName)
			g.es_exception()
		return false
	except:
		g.es("exception deleting backup file:" + backupName)
		g.es_exception()
		return false
</t>
<t tx="ekr.20031218072017.3049">g.es("error writing " + fileName)

if fileName and g.os_path_exists(fileName):
	try:
		os.unlink(fileName)
	except OSError:
		if self.read_only:
			g.es("read only",color="red")
		else:
			g.es("exception deleting: " + fileName)
			g.es_exception()
	except:
		g.es("exception deleting: " + fileName)
		g.es_exception()
		
if backupName:
	g.es("restoring " + fileName + " from " + backupName)
	try:
		g.utils_rename(backupName, fileName)
	except OSError:
		if self.read_only:
			g.es("read only",color="red")
		else:
			g.es("exception renaming " + backupName + " to " + fileName)
			g.es_exception()
	except:
		g.es("exception renaming " + backupName + " to " + fileName)
		g.es_exception()</t>
<t tx="ekr.20031218072017.3050">def writeOutlineOnly (self):

	c = self.c
	c.endEditing()
	self.compactFileIndices()
	self.write_LEO_file(self.mFileName,true) # outlineOnlyFlag</t>
<t tx="ekr.20031218072017.3051"># Surprisingly, this is a time critical routine.

def xmlEscape(self,s):

	assert(s and len(s) &gt; 0) # check is made in putEscapedString
	s = string.replace(s, '\r', '')
	s = string.replace(s, '&amp;', "&amp;amp;")
	s = string.replace(s, '&lt;', "&amp;lt;")
	s = string.replace(s, '&gt;', "&amp;gt;")
	return s</t>
<t tx="ekr.20031218072017.3052">@language python

import leoGlobals as g
from leoGlobals import true,false

&lt;&lt; Theory of operation of find/change &gt;&gt;

class leoFind:

	"""The base class for Leo's Find commands."""

	@others</t>
<t tx="ekr.20031218072017.3053">def __init__ (self):

	&lt;&lt; init the gui-independent ivars &gt;&gt;</t>
<t tx="ekr.20031218072017.3054">self.wrapVnode = None
self.onlyVnode = None

# Note: the ivars have _flag appended.
# We can't easily change this hack because the corresponding config ivars do _not_ have _flag appended.
self.intKeys = [
	"batch", "wrap", "whole_word", "ignore_case", "node_only",
	"pattern_match", "search_headline", "search_body",
	"suboutline_only", "mark_changes", "mark_finds", "reverse",
	"script_search","script_change","selection_only"] # 11/9/03

self.newStringKeys = ["radio-find-type", "radio-search-scope"]

# The c.x_flag ivars contain the user preferences.
# These are updated just before executing any find/change command.

# Ivars containing internal state...
self.c = None # The commander for this search.
self.v = None # The vnode being searched.  Never saved between searches!
self.in_headline = false # true: searching headline text.
self.s_text = None # The search text for this search.
self.wrapping = false # true: wrapping is enabled.
	# This is _not_ the same as c.wrap_flag for batch searches.

@ Initializing a wrapped search is tricky.  The search() method will fail if v==wrapVnode and pos &gt;= wrapPos.  selectNextVnode() will fail if v == wrapVnode.  We set wrapPos on entry, before the first search.  We set wrapVnode in selectNextVnode after the first search fails.  We also set wrapVnode on exit if the first search suceeds.
@c

self.wrapVnode = None # The start of wrapped searches: persists between calls.
self.onlyVnode = None # The starting node for suboutline-only searches.
self.wrapPos = None # The starting position of the wrapped search: persists between calls.
self.errors = 0
self.selStart = self.selEnd = None # For selection-only searches.</t>
<t tx="ekr.20031218072017.3055"></t>
<t tx="ekr.20031218072017.3056">
# The user has pushed the "Change" button from the find panel.

def changeButton(self):

	c  = self.setup_button()

	if c.script_change_flag:
		self.doChangeScript()
	else:
		self.change()</t>
<t tx="ekr.20031218072017.3057"># The user has pushed the "Change All" button from the find panel.

def changeAllButton(self):

	c = self.setup_button()
	c.clearAllVisited() # Clear visited for context reporting.

	if c.script_change_flag:
		self.doChangeAllScript()
	elif c.selection_only_flag:
		self.change()
	else:
		self.changeAll()</t>
<t tx="ekr.20031218072017.3058"># The user has pushed the "Change Then Find" button from the find panel.

def changeThenFindButton(self):

	c = self.setup_button()

	if c.script_change_flag:
		self.doChangeScript()
		if c.script_search_flag:
			self.doFindScript()
		else:
			self.findNext()
	else:
	 	if c.script_search_flag:
			self.change()
			self.doFindScript()
		else:
			self.changeThenFind()</t>
<t tx="ekr.20031218072017.3059"># The user has pushed the "Find" button from the find panel.

def findButton(self,event=None):

	c = self.setup_button()

	if c.script_search_flag:
		self.doFindScript()
	else:
		self.findNext()</t>
<t tx="ekr.20031218072017.3060"># The user has pushed the "Find All" button from the find panel.

def findAllButton(self):

	c = self.setup_button()
	c.clearAllVisited() # Clear visited for context reporting.

	if c.script_search_flag:
		self.doFindAllScript()
	elif c.selection_only_flag:
		self.findNext()
	else:
		self.findAll()</t>
<t tx="ekr.20031218072017.3061"># The user has selected the "Replace" menu item.

def changeCommand(self,c):

	self.setup_command(c)

	if c.script_search_flag:
		self.doChangeScript()
	else:
		self.change()</t>
<t tx="ekr.20031218072017.3062"># The user has pushed the "Change Then Find" button from the Find menu.

def changeThenFindCommand(self,c):

	self.setup_command(c)

	if c.script_search_flag:
		self.doChangeScript()
		self.doFindScript()
	else:
		self.changeThenFind()</t>
<t tx="ekr.20031218072017.3063"># The user has selected the "Find Next" menu item.

def findNextCommand(self,c):

	self.setup_command(c)

	if c.script_search_flag:
		self.doFindScript()
	else:
		self.findNext()</t>
<t tx="ekr.20031218072017.3064"># The user has selected the "Find Previous" menu item.

def findPreviousCommand(self,c):

	self.setup_command(c)

	c.reverse_flag = not c.reverse_flag

	if c.script_search_flag:
		self.doFindScript()
	else:
		self.findNext()

	c.reverse_flag = not c.reverse_flag</t>
<t tx="ekr.20031218072017.3065"># Initializes a search when a button is pressed in the Find panel.

def setup_button(self):

	self.c = c = g.app.log.c ; self.v = c.currentVnode()
	assert(c)
	c.bringToFront()
	if 0: # We _must_ retain the editing status for incremental searches!
		c.endEditing()
	c.setIvarsFromFind()
	return c</t>
<t tx="ekr.20031218072017.3066"># Initializes a search when a command is invoked from the menu.

def setup_command(self,c):

	self.c = c ; self.v = c.currentVnode()
	if 0: # We _must_ retain the editing status for incremental searches!
		c.endEditing()
	c.setIvarsFromFind()</t>
<t tx="ekr.20031218072017.3067"></t>
<t tx="ekr.20031218072017.3068">def change(self):

	if self.checkArgs():
		self.initInHeadline()
		self.changeSelection()</t>
<t tx="ekr.20031218072017.3069">def changeAll(self):

	c = self.c ; st = self.s_text ; gui = g.app.gui
	if not self.checkArgs():
		return
	self.initInHeadline()
	data = self.save()
	self.initBatchCommands()
	count = 0
	c.beginUpdate()
	while 1:
		pos1, pos2 = self.findNextMatch()
		if pos1:
			count += 1
			self.batchChange(pos1,pos2,count)
			line = gui.getLineContainingIndex(st,pos1)
			self.printLine(line,allFlag=true)
		else: break
	c.endUpdate()
	# Make sure the headline and body text are updated.
	v = c.currentVnode()
	c.frame.tree.onHeadChanged(v)
	c.frame.body.onBodyChanged(v,"Can't Undo")
	if count &gt; 0:
		# A change was made.  Tag the end of the Change All command.
		c.undoer.setUndoParams("Change All",v)
	g.es("changed: " + `count`)
	self.restore(data)</t>
<t tx="ekr.20031218072017.3070"># Replace selection with c.change_text.
# If no selection, insert c.change_text at the cursor.

def changeSelection(self):

	c = self.c ; v = self.v ; gui = g.app.gui
	# g.trace(`self.in_headline`)
	t = g.choose(self.in_headline,v.edit_text(),c.frame.bodyCtrl)
	oldSel = sel = gui.getTextSelection(t)
	if sel and len(sel) == 2:
		start,end = sel
		if start == end:
			sel = None
	if not sel or len(sel) != 2:
		g.es("No text selected")
		return false

	# Replace the selection in _both_ controls.
	start,end = oldSel
	gui.replaceSelectionRangeWithText(t,          start,end,c.change_text)
	gui.replaceSelectionRangeWithText(self.s_text,start,end,c.change_text)

	# Update the selection for the next match.
	gui.setSelectionRangeWithLength(t,start,len(c.change_text))
	newSel = gui.getTextSelection(t)
	gui.set_focus(c,t)

	c.beginUpdate()
	if c.mark_changes_flag:
		v.setMarked()
		c.frame.tree.drawIcon(v) # redraw only the icon.
	# update node, undo status, dirty flag, changed mark &amp; recolor
	if self.in_headline:
		c.frame.tree.idle_head_key(v) # 1/7/04
	else:
		c.frame.body.onBodyChanged(v,"Change",oldSel=oldSel,newSel=newSel)
	c.endUpdate(false) # No redraws here: they would destroy the headline selection.
	return true</t>
<t tx="ekr.20031218072017.3071">def changeThenFind(self):

	if not self.checkArgs():
		return

	self.initInHeadline()
	if self.changeSelection():
		self.findNext(false) # don't reinitialize</t>
<t tx="ekr.20031218072017.3072">def doFindScript (self):

	g.app.searchDict["type"] = "find"
	self.runFindScript()

def doFindAllScript (self):

	"""The user has just pressed the Find All button with script-find radio button checked.

	N.B. Only this code is executed."""

	g.app.searchDict["type"] = "findAll"
	while 1:
		self.runFindScript()
		if not g.app.searchDict.get("continue"):
			break

def runFindScript (self):

	c = self.c
	try:
		exec c.find_text in {} # Use {} to get a pristine environment.
	except:
		g.es("exception executing find script")
		g.es_exception(full=false)
		g.app.searchDict["continue"] = false # 2/1/04
</t>
<t tx="ekr.20031218072017.3073">def findAll(self):

	c = self.c ; t = self.s_text ; gui = g.app.gui
	if not self.checkArgs():
		return
	self.initInHeadline()
	data = self.save()
	self.initBatchCommands()
	count = 0
	c.beginUpdate()
	while 1:
		pos, newpos = self.findNextMatch()
		if pos:
			count += 1
			line = gui.getLineContainingIndex(t,pos)
			self.printLine(line,allFlag=true)
		else: break
	c.endUpdate()
	g.es("found: " + `count`)
	self.restore(data)</t>
<t tx="ekr.20031218072017.3074">def findNext(self,initFlag=true):

	c = self.c
	if not self.checkArgs():
		return

	if initFlag:
		self.initInHeadline()
		data = self.save()
		self.initInteractiveCommands()
	else:
		data = self.save()

	c.beginUpdate()
	pos, newpos = self.findNextMatch()
	c.endUpdate(false) # Inhibit redraws so that headline remains selected.

	if pos:
		self.showSuccess(pos,newpos)
	else:
		if self.wrapping:
			g.es("end of wrapped search")
		else:
			g.es("not found: " + "'" + c.find_text + "'")
		self.restore(data)</t>
<t tx="ekr.20031218072017.3075"># Resumes the search where it left off.
# The caller must call set_first_incremental_search or set_first_batch_search.

def findNextMatch(self):

	c = self.c

	if not c.search_headline_flag and not c.search_body_flag:
		return None, None

	if len(c.find_text) == 0:
		return None, None

	v = self.v
	while v:
		pos, newpos = self.search()
		if pos:
			if c.mark_finds_flag:
				v.setMarked()
				c.frame.tree.drawIcon(v) # redraw only the icon.
			return pos, newpos
		elif self.errors:
			return None,None # Abort the search.
		elif c.node_only_flag:
			return None,None # We are only searching one node.
		else:
			v = self.v = self.selectNextVnode()
	return None, None</t>
<t tx="ekr.20031218072017.3076">def resetWrap (self,event=None):

	self.wrapVnode = None
	self.onlyVnode = None</t>
<t tx="ekr.20031218072017.3077">def search (self):

	"""Searches the present headline or body text for c.find_text and returns true if found.

	c.whole_word_flag, c.ignore_case_flag, and c.pattern_match_flag control the search."""

	c = self.c ; v = self.v ; t = self.s_text ; gui = g.app.gui
	assert(c and t and v)
	if c.selection_only_flag: # 11/9/03
		index,stopindex = self.selStart, self.selEnd
		# g.trace(index,stopindex,v)
		if index == stopindex:
			return None, None
	else:
		index = gui.getInsertPoint(t)
		stopindex = g.choose(c.reverse_flag,gui.firstIndex(),gui.lastIndex())
	while 1:
		try:
			pos = self.gui_search(t,c.find_text,index,
				stopindex=stopindex,backwards=c.reverse_flag,
				regexp=c.pattern_match_flag,nocase=c.ignore_case_flag)
		except:
			g.es_exception(full=false)
			self.errors += 1
			return None, None
		if not pos:
			return None, None
		if c.find_text == '\n':
			# 2/3/04: A hack.  Time to get rid of gui indices!
			newpos = gui.moveIndexToNextLine(t,pos)
			# g.trace(pos,t.index(newpos))
		else:
			newpos = gui.moveIndexForward(t,pos,len(c.find_text))
		if newpos is None:
			return None, None
		if c.reverse_flag and gui.compareIndices(t,newpos,"==",index):
			&lt;&lt; search again after getting stuck going backward &gt;&gt;
		&lt;&lt; return if we are passed the wrap point &gt;&gt;
		if c.whole_word_flag:
			index = t.index(g.choose(c.reverse_flag,pos,newpos))
			&lt;&lt; continue if not whole word match &gt;&gt;
		#g.trace("found:",pos,newpos,v)
		gui.setTextSelection(t,pos,newpos)
		return pos, newpos</t>
<t tx="ekr.20031218072017.3078">index = gui.moveIndexBackward(newpos,len(c.find_text))

pos = self.gui_search(t,c.find_text,index,
	stopindex=stopindex,backwards=c.reverse_flag,
	regexp=c.pattern_match_flag,nocase=c.ignore_case_flag)

if not pos:
	return None, None

newpos = gui.moveIndexForward(t,pos,len(c.find_text))</t>
<t tx="ekr.20031218072017.3079">if self.wrapping and self.wrapPos and self.wrapVnode and self.v == self.wrapVnode:

	if c.reverse_flag and gui.compareIndices(t,pos, "&lt;", self.wrapPos):
		# g.trace("wrap done")
		return None, None

	if not c.reverse_flag and gui.compareIndices(t,newpos, "&gt;", self.wrapPos):
		return None, None</t>
<t tx="ekr.20031218072017.3080"># Set pos to None if word characters preceed or follow the selection.
before = gui.getCharBeforeIndex(t,pos)
first  = gui.getCharAtIndex    (t,pos)
last   = gui.getCharBeforeIndex(t,newpos)
after  = gui.getCharAtIndex    (t,newpos)

#g.trace("before,first",before,first,g.is_c_id(before),g.is_c_id(first))
#g.trace("after,last",  after,last,  g.is_c_id(after), g.is_c_id(last))

if g.is_c_id(before) and g.is_c_id(first):
	continue

if g.is_c_id(after) and g.is_c_id(last):
	continue</t>
<t tx="ekr.20031218072017.3081"># Selects the next node to be searched.

def selectNextVnode(self):

	c = self.c ; v = self.v
	# g.trace(`v`)

	if c.selection_only_flag:
		return None

	# Start suboutline only searches.
	if c.suboutline_only_flag and not self.onlyVnode:
		self.onlyVnode = v

	# Start wrapped searches.
	if self.wrapping and not self.wrapVnode:
		assert(self.wrapPos != None)
		self.wrapVnode = v

	if self.in_headline and c.search_body_flag:
		# just switch to body pane.
		self.in_headline = false
		self.initNextText()
		# g.trace(`v`)
		return v

	if c.reverse_flag: v = v.threadBack()
	else:              v = v.threadNext()

	# Wrap if needed.
	if not v and self.wrapping and not c.suboutline_only_flag:
		v = c.rootVnode()
		if c.reverse_flag:
			# Set search_v to the last node of the tree.
			while v and v.next():
				v = v.next()
			if v: v = v.lastNode()

	# End wrapped searches.
	if self.wrapping and v and v == self.wrapVnode:
		# g.trace("ending wrapped search")
		v = None ; self.resetWrap()

	# End suboutline only searches.
	if (c.suboutline_only_flag and self.onlyVnode and v and
		(v == self.onlyVnode or not self.onlyVnode.isAncestorOf(v))):
		# g.trace("end outline-only")
		v = None ; self.onlyVnode = None

	self.v = v # used in initNextText().
	if v: # select v and set the search point within v.
		self.in_headline = c.search_headline_flag
		self.initNextText()
	return v</t>
<t tx="ekr.20031218072017.3082"></t>
<t tx="ekr.20031218072017.3083">def checkArgs (self):

	c = self.c
	val = true
	if not c.search_headline_flag and not c.search_body_flag:
		g.es("not searching headline or body")
		val = false
	if len(c.find_text) == 0:
		g.es("empty find patttern")
		val = false
	return val</t>
<t tx="ekr.20031218072017.3084"># Initializes for the Find All and Change All commands.

def initBatchCommands (self):

	c = self.c
	self.in_headline = c.search_headline_flag # Search headlines first.
	self.errors = 0

	# Select the first node.
	if c.suboutline_only_flag or c.node_only_flag or c.selection_only_flag: # 11/9/03
		self.v = c.currentVnode()
		if c.selection_only_flag: self.selStart,self.selEnd = c.frame.body.getTextSelection()
		else:                     self.selStart,self.selEnd = None,None
	else:
		v = c.rootVnode()
		if c.reverse_flag:
			while v and v.next():
				v = v.next()
			v = v.lastNode()
		self.v = v

	# Set the insert point.
	self.initBatchText()</t>
<t tx="ekr.20031218072017.3085"># Returns s_text with "insert" point set properly for batch searches.
def initBatchText(self):
	v = self.v
	self.wrapping = false # Only interactive commands allow wrapping.
	s = g.choose(self.in_headline,v.headString(), v.bodyString())
	return self.init_s_text(s)

# Call this routine when moving to the next node when a search fails.
# Same as above except we don't reset wrapping flag.
def initNextText(self):
	v = self.v
	s = g.choose(self.in_headline,v.headString(), v.bodyString())
	return self.init_s_text(s)</t>
<t tx="ekr.20031218072017.3086"># Guesses which pane to start in for incremental searches and changes.
# This must not alter the current "insert" or "sel" marks.

def initInHeadline (self):

	c = self.c ; v = self.v

	if c.search_headline_flag and c.search_body_flag:
		# Do not change this line without careful thought and extensive testing!
		self.in_headline = (v == c.frame.tree.editPosition())
	else:
		self.in_headline = c.search_headline_flag</t>
<t tx="ekr.20031218072017.3087"># For incremental searches

def initInteractiveCommands(self):

	c = self.c ; v = self.v ; gui = g.app.gui

	self.errors = 0
	if self.in_headline:
		c.frame.tree.setEditPosition(v)
		t = v.edit_text()
		sel = None
	else:
		t = c.frame.bodyCtrl
		sel = gui.getTextSelection(t)
	pos = gui.getInsertPoint(t)
	st = self.initNextText()
	gui.set_focus(c,t)
	gui.setInsertPoint(st,pos)
	if sel:
		self.selStart,self.selEnd = sel
	else:
		self.selStart,self.selEnd = None,None
	self.wrapping = c.wrap_flag
	if c.wrap_flag and self.wrapVnode == None:
		self.wrapPos = pos
		# Do not set self.wrapVnode here: that must be done after the first search.</t>
<t tx="ekr.20031218072017.3088">def printLine (self,line,allFlag=false):

	c = self.c
	both = c.search_body_flag and c.search_headline_flag
	context = c.batch_flag # "batch" now indicates context

	if allFlag and both and context:
		g.es(`self.v`)
		type = g.choose(self.in_headline,"head: ","body: ")
		g.es(type + line)
	elif allFlag and context and not self.v.isVisited():
		# We only need to print the context once.
		g.es(`self.v`)
		g.es(line)
		self.v.setVisited()
	else:
		g.es(line)</t>
<t tx="ekr.20031218072017.3089"># Restores the screen after a search fails

def restore (self,data):

	c = self.c ; gui = g.app.gui
	in_headline,v,t,insert,start,end = data

	# Don't try to reedit headline.
	c.selectVnode(v)
	if not in_headline:

		if 0: # Looks bad.
			gui.setSelectionRange(t,start,end)
		else: # Looks good and provides clear indication of failure or termination.
			gui.setSelectionRange(t,insert,insert)

		gui.setInsertPoint(t,insert)
		gui.makeIndexVisible(t,insert)
		gui.set_focus(c,t)</t>
<t tx="ekr.20031218072017.3090">def save (self):

	c = self.c ; v = self.v ; gui = g.app.gui
	t = g.choose(self.in_headline,v.edit_text(),c.frame.bodyCtrl)
	insert = gui.getInsertPoint(t)
	sel = gui.getSelectionRange(t)
	if len(sel) == 2:
		start,end = sel
	else:
		start,end = None,None
	return (self.in_headline,v,t,insert,start,end)</t>
<t tx="ekr.20031218072017.3091">def showSuccess(self,pos,newpos):

	"""Displays the final result.

	Returns self.dummy_vnode, v.edit_text() or c.frame.bodyCtrl with
	"insert" and "sel" points set properly."""

	c = self.c ; v = self.v ; gui = g.app.gui

	c.beginUpdate()
	if 1: # range of update...
		c.selectVnode(v)
		c.frame.tree.redraw_now() # Redraw now so selections are not destroyed.
		# Select the found vnode again after redraw.
		if self.in_headline:
			c.editPosition(v)
			c.frame.tree.setNormalLabelState(v)
			assert(v.edit_text())
		else:
			c.selectVnode(v)
	c.endUpdate(false) # Do not draw again!

	t = g.choose(self.in_headline,v.edit_text(),c.frame.bodyCtrl)
	# g.trace(`self.in_headline` + "," + `t`)
	insert = g.choose(c.reverse_flag,pos,newpos)
	gui.setInsertPoint(t,insert)
	gui.setSelectionRange(t,pos,newpos)
	if not self.in_headline:
		gui.makeIndexVisible(t,insert)
	gui.set_focus(c,t)
	if c.wrap_flag and not self.wrapVnode:
		self.wrapVnode = self.v
</t>
<t tx="ekr.20031218072017.3092">def init_s_text (self,s):
	self.oops()

def bringToFront (self):
	self.oops()

def gui_search (self,t,*args,**keys):
	self.oops()

def oops(self):
	print ("leoFind oops:",
		g.callerName(2),
		"should be overridden in subclass")
</t>
<t tx="ekr.20031218072017.3093">@first # -*- coding: utf-8 -*-

"""Global constants, variables and utility functions used throughout Leo."""

@language python

import leoGlobals as g # So code can use g below.
# true,false defined below.

import os,string,sys,time,traceback,types

&lt;&lt; define general constants &gt;&gt;

app = None # The singleton app object.

# Visible externally so plugins may add to the list of directives.

globalDirectiveList = [
	"color", "comment", "encoding", "header", "ignore",
	"language", "lineending", "nocolor", "noheader", "nowrap",
	"pagewidth", "path", "quiet", "root", "silent",
	"tabwidth", "terse", "unit", "verbose", "wrap"]

@others</t>
<t tx="ekr.20031218072017.3094">body_newline = '\n'
body_ignored_newline = '\r'

try:
	true,false = True,False
except NameError:
	true,false = 1,0</t>
<t tx="ekr.20031218072017.3095"></t>
<t tx="ekr.20031218072017.3096">def checkTopologyOfAllClones (c=None,verbose=true):
	
	if c == None: c = g.top()
	root = v = c.rootPosition()
	c.clearAllVisited()
	count = 0 ; errors = 0
	if verbose:
		s = "Testing topology of all clones"
		g.es(s) ; print s
	while v:
		if not v.t.isVisited():
			v.t.setVisited()
			if v.isCloned:
				count += 1
				tlist = g.createTopologyList (c,v,useHeadlines=true)
			for v2 in v.t.joinList:
				if v2 != v:
					tlist2 = g.createTopologyList (c,v2,useHeadlines=true)
					if tlist != tlist2:
						s = "topology mismatch for %s" % v.headString()
						print s ; g.es(s)
						errors += 1
						break
		v = v.threadNext()
	if verbose:
		s = "Testing complete: %d clones tested" % count
		g.es(s) ; print s
	return count, errors</t>
<t tx="ekr.20031218072017.3097">@
g.CheckVersion() is a generic version checker.  Assumes a
version string of up to four parts, or tokens, with
leftmost token being most significant and each token
becoming less signficant in sequence to the right.

RETURN VALUE

1 if comparison is true
0 if comparison is false

PARAMETERS

version: the version string to be tested
againstVersion: the reference version string to be
              compared against
condition: can be any of "==", "!=", "&gt;=", "&lt;=", "&gt;", or "&lt;"
stringCompare: whether to test a token using only the
             leading integer of the token, or using the
             entire token string.  For example, a value
             of "0.0.1.0" means that we use the integer
             value of the first, second, and fourth
             tokens, but we use a string compare for the
             third version token.
delimiter: the character that separates the tokens in the
         version strings.

The comparison uses the precision of the version string
with the least number of tokens.  For example a test of
"8.4" against "8.3.3" would just compare the first two
tokens.

The version strings are limited to a maximum of 4 tokens.
@c

def CheckVersion( version, againstVersion, condition="&gt;=", stringCompare="0.0.0.0", delimiter='.' ):
	import sre  # Unicode-aware regular expressions
	#
	# tokenize the stringCompare flags
	compareFlag = string.split( stringCompare, '.' )
	#
	# tokenize the version strings
	testVersion = string.split( version, delimiter )
	testAgainst = string.split( againstVersion, delimiter )
	#
	# find the 'precision' of the comparison
	tokenCount = 4
	if tokenCount &gt; len(testAgainst):
		tokenCount = len(testAgainst)
	if tokenCount &gt; len(testVersion):
		tokenCount = len(testVersion)
	#
	# Apply the stringCompare flags
	justInteger = sre.compile("^[0-9]+")
	for i in range(tokenCount):
		if "0" == compareFlag[i]:
			m = justInteger.match( testVersion[i] )
			testVersion[i] = m.group()
			m = justInteger.match( testAgainst[i] )
			testAgainst[i] = m.group()
		elif "1" != compareFlag[i]:
			errMsg = "stringCompare argument must be of " +\
				 "the form \"x.x.x.x\" where each " +\
				 "'x' is either '0' or '1'."
			raise EnvironmentError,errMsg
	#
	# Compare the versions
	if condition == "&gt;=":
		for i in range(tokenCount):
			if testVersion[i] &lt; testAgainst[i]:
				return 0
			if testVersion[i] &gt; testAgainst[i]:
				return 1 # it was greater than
		return 1 # it was equal
	if condition == "&gt;":
		for i in range(tokenCount):
			if testVersion[i] &lt; testAgainst[i]:
				return 0
			if testVersion[i] &gt; testAgainst[i]:
				return 1 # it was greater than
		return 0 # it was equal
	if condition == "==":
		for i in range(tokenCount):
			if testVersion[i] != testAgainst[i]:
				return 0 # any token was not equal
		return 1 # every token was equal
	if condition == "!=":
		for i in range(tokenCount):
			if testVersion[i] != testAgainst[i]:
				return 1 # any token was not equal
		return 0 # every token was equal
	if condition == "&lt;":
		for i in range(tokenCount):
			if testVersion[i] &gt;= testAgainst[i]:
				return 0
			if testVersion[i] &lt; testAgainst[i]:
				return 1 # it was less than
		return 0 # it was equal
	if condition == "&lt;=":
		for i in range(tokenCount):
			if testVersion[i] &gt; testAgainst[i]:
				return 0
			if testVersion[i] &lt; testAgainst[i]:
				return 1 # it was less than
		return 1 # it was equal
	#
	# didn't find a condition that we expected.
	raise EnvironmentError,"condition must be one of '&gt;=', '&gt;', '==', '!=', '&lt;', or '&lt;='."
</t>
<t tx="ekr.20031218072017.3098"># From The Python Cookbook.

import operator

class Bunch:
	
	"""A class that represents a colection of things.
	
	Especially useful for representing a collection of related variables."""
	
	def __init__(self, **keywords):
		self.__dict__.update (keywords)

	def ivars(self):
		return self.__dict__.keys()
		
	def __setitem__ (self,key,value):
		return operator.setitem(self.__dict__,key,value)
		
	def __getitem__ (self,key):
		return operator.getitem(self.__dict__,key)
		
		
		
</t>
<t tx="ekr.20031218072017.3099"></t>
<t tx="ekr.20031218072017.3100">@ Important note: this routine need not deal with leading whitespace.  Instead, the caller should simply reduce pageWidth by the width of leading whitespace wanted, then add that whitespace to the lines returned here.

The key to this code is the invarient that line never ends in whitespace.
@c

def wrap_lines (lines,pageWidth,firstLineWidth=None):

	"""Returns a list of lines, consisting of the input lines wrapped to the given pageWidth."""

	if pageWidth &lt; 10:
		pageWidth = 10
		
	# DTHEIN 3-NOV-2002: First line is special
	if not firstLineWidth:
		firstLineWidth = pageWidth
	if firstLineWidth &lt; 10:
		firstLineWidth = 10
	outputLineWidth = firstLineWidth

	# g.trace(`lines`)
	result = [] # The lines of the result.
	line = "" # The line being formed.  It never ends in whitespace.
	for s in lines:
		i = 0
		while i &lt; len(s):
			assert(len(line) &lt;= outputLineWidth) # DTHEIN 18-JAN-2004
			j = g.skip_ws(s,i)   # ;   ws = s[i:j]
			k = g.skip_non_ws(s,j) ; word = s[j:k]
			assert(k&gt;i)
			i = k
			# DTHEIN 18-JAN-2004: wrap at exactly the text width, 
			# not one character less
			# 
			wordLen = len(word)
			if len(line) &gt; 0 and wordLen &gt; 0: wordLen += len(" ")
			if wordLen + len(line) &lt;= outputLineWidth:
				if wordLen &gt; 0:
					&lt;&lt; place blank and word on the present line &gt;&gt;
				else: pass # discard the trailing whitespace.
			else:
				&lt;&lt; place word on a new line &gt;&gt;
	if len(line) &gt; 0:
		result.append(line)
	# g.trace(`result`)
	return result</t>
<t tx="ekr.20031218072017.3101">if len(line) == 0:
	# Just add the word to the start of the line.
	line = word
else:
	# Add the word, preceeded by a blank.
	line = " ".join([line,word]) # DTHEIN 18-JAN-2004: better syntax</t>
<t tx="ekr.20031218072017.3102"># End the previous line.
if len(line) &gt; 0:
	result.append(line)
	outputLineWidth = pageWidth # DTHEIN 3-NOV-2002: width for remaining lines
	
# Discard the whitespace and put the word on a new line.
line = word

# Careful: the word may be longer than pageWidth.
if len(line) &gt; pageWidth: # DTHEIN 18-JAN-2004: line can equal pagewidth
	result.append(line)
	outputLineWidth = pageWidth # DTHEIN 3-NOV-2002: width for remaining lines
	line = ""
</t>
<t tx="ekr.20031218072017.3103">def computeWindowTitle (fileName):

	if fileName == None:
		return "untitled"
	else:
		path,fn = g.os_path_split(fileName)
		if path:
			title = fn + " in " + path
		else:
			title = fn
		return title</t>
<t tx="ekr.20031218072017.3104"></t>
<t tx="ekr.20031218072017.3105">def alert(message):

	g.es(message)

	import tkMessageBox
	tkMessageBox.showwarning("Alert", message)
</t>
<t tx="ekr.20031218072017.3106"># Returns &lt; &lt; s &gt; &gt;

def angleBrackets(s):

	return ( "&lt;&lt;" + s +
		"&gt;&gt;") # must be on a separate line.

virtual_event_name = angleBrackets</t>
<t tx="ekr.20031218072017.3107">def callerName (n=1):

	try: # get the function name from the call stack.
		f1 = sys._getframe(n) # The stack frame, n levels up.
		code1 = f1.f_code # The code object
		return code1.co_name # The code name
	except:
		g.es_exception()
		return "&lt;no caller name&gt;"
</t>
<t tx="ekr.20031218072017.3108"></t>
<t tx="ekr.20031218072017.3109">def dump(s):
	
	out = ""
	for i in s:
		out += `ord(i)` + ","
	return out
		
def oldDump(s):

	out = ""
	for i in s:
		if i=='\n':
			out += "[" ; out += "n" ; out += "]"
		if i=='\t':
			out += "[" ; out += "t" ; out += "]"
		elif i==' ':
			out += "[" ; out += " " ; out += "]"
		else: out += i
	return out</t>
<t tx="ekr.20031218072017.3110">def es_error (s):
	
	config = app.config

	if config: # May not exist during initialization.
		color = config.getWindowPref("log_error_color")
		g.es(s,color=color)
	else:
		g.es(s)</t>
<t tx="ekr.20031218072017.3111">def es_event_exception (eventName,full=false):

	g.es("exception handling ", eventName, " event")
	typ,val,tb = sys.exc_info()

	if full:
		errList = traceback.format_exception(typ,val,tb)
	else:
		errList = traceback.format_exception_only(typ,val)

	for i in errList:
		g.es(i)
		
	if not g.stdErrIsRedirected(): # 2/16/04
		traceback.print_exc()</t>
<t tx="ekr.20031218072017.3112">def es_exception (full=true,c=None):
	
	typ,val,tb = sys.exc_info()
	errList = traceback.format_exception(typ,val,tb)
	
	if full:
		lines = errList
	else:
		# Strip cruft lines.
		s1 = "Traceback (most recent call last):"
		s2 = "exec s in {}"
		lines = []
		for line in errList[-4:]:
			if not g.match(line,0,s1) and line.find(s2) == -1:
				lines.append(line)

	for line in lines:
		g.es_error(line)
		if not g.stdErrIsRedirected():
			print line</t>
<t tx="ekr.20031218072017.3113">def print_bindings (name,window):

	bindings = window.bind()
	print
	print "Bindings for", name
	for b in bindings:
		print b</t>
<t tx="ekr.20031218072017.3114">def printGlobals(message=None):
	
	# Get the list of globals.
	globs = list(globals())
	globs.sort()
	
	# Print the list.
	if message:
		leader = "-" * 10
		print leader, ' ', message, ' ', leader
	for glob in globs:
		print glob</t>
<t tx="ekr.20031218072017.3115">def printLeoModules(message=None):
	
	# Create the list.
	mods = []
	for name in sys.modules.keys():
		if name and name[0:3] == "leo":
			mods.append(name)

	# Print the list.
	if message:
		leader = "-" * 10
		print leader, ' ', message, ' ', leader
	mods.sort()
	for m in mods:
		print m,
	print</t>
<t tx="ekr.20031218072017.3116"></t>
<t tx="ekr.20031218072017.3117"># Returns a temporary file name.

def create_temp_name ():

	import tempfile
	temp = tempfile.mktemp()
	# g.trace(`temp`)
	return temp</t>
<t tx="ekr.20031218072017.3118">def ensure_extension (name, ext):

	file, old_ext = g.os_path_splitext(name)
	if len(name) == 0:
		return name # don't add to an empty name.
	elif old_ext and old_ext == ext:
		return name
	else:
		return file + ext</t>
<t tx="ekr.20031218072017.3119"># This is a generalization of os.makedir.

def makeAllNonExistentDirectories (dir):

	"""Attempt to make all non-existent directories"""

	if not app.config.create_nonexistent_directories:
		return None

	dir1 = dir = g.os_path_normpath(dir)

	# Split dir into all its component parts.
	paths = []
	while len(dir) &gt; 0:
		head,tail=g.os_path_split(dir)
		if len(tail) == 0:
			paths.append(head)
			break
		else:
			paths.append(tail)
			dir = head
	path = ""
	paths.reverse()
	for s in paths:
		path = g.os_path_join(path,s)
		if not g.os_path_exists(path):
			try:
				os.mkdir(path)
				g.es("created directory: "+path)
			except:
				g.es("exception creating directory: "+path)
				g.es_exception()
				return None
	return dir1 # All have been created.</t>
<t tx="ekr.20031218072017.3120">@ Stephen P. Schaefer 9/7/2002

The Unix readline() routine delivers "\r\n" line end strings verbatim, while the windows versions force the string to use the Unix convention of using only "\n".  This routine causes the Unix readline to do the same.
@c

def readlineForceUnixNewline(f):

	s = f.readline()
	if len(s) &gt;= 2 and s[-2] == "\r" and s[-1] == "\n":
		s = s[0:-2] + "\n"
	return s
</t>
<t tx="ekr.20031218072017.3121">class redirectClass:
	&lt;&lt; redirectClass methods &gt;&gt;

# Create two redirection objects, one for each stream.
redirectStdErrObj = redirectClass()
redirectStdOutObj = redirectClass()

&lt;&lt; define convenience methods for redirecting streams &gt;&gt;

if 0: # Test code: may be safely and conveniently executed in the child node.
	&lt;&lt; test code &gt;&gt;</t>
<t tx="ekr.20031218072017.3122"># Redirect streams to the current log window.
def redirectStderr():
	global redirectStdErrObj
	redirectStdErrObj.redirect(stdout=false)

def redirectStdout():
	global redirectStdOutObj
	redirectStdOutObj.redirect()

# Restore standard streams.
def restoreStderr():
	global redirectStdErrObj
	redirectStdErrObj.undirect(stdout=false)
	
def restoreStdout():
	global redirectStdOutObj
	redirectStdOutObj.undirect()
		
def stdErrIsRedirected():
	global redirectStdErrObj
	return redirectStdErrObj.isRedirected()
	
def stdOutIsRedirected():
	global redirectStdOutObj
	return redirectStdOutObj.isRedirected()</t>
<t tx="ekr.20031218072017.3123">from leoGlobals import stdErrIsRedirected,stdOutIsRedirected
print "stdout isRedirected:", g.stdOutIsRedirected()
print "stderr isRedirected:", g.stdErrIsRedirected()

from leoGlobals import redirectStderr,redirectStdout
g.redirectStderr()
g.redirectStdout()

from leoGlobals import stdErrIsRedirected,stdOutIsRedirected
print "stdout isRedirected:", g.stdOutIsRedirected()
print "stderr isRedirected:", g.stdErrIsRedirected()

from leoGlobals import restoreStderr
g.restoreStderr()

from leoGlobals import stdErrIsRedirected,stdOutIsRedirected
print "stdout isRedirected:", g.stdOutIsRedirected()
print "stderr isRedirected:", g.stdErrIsRedirected()

from leoGlobals import restoreStdout
g.restoreStdout()

from leoGlobals import stdErrIsRedirected,stdOutIsRedirected
print "stdout isRedirected:", g.stdOutIsRedirected()
print "stderr isRedirected:", g.stdErrIsRedirected()</t>
<t tx="ekr.20031218072017.3124">def sanitize_filename(s):

	"""Prepares string s to be a valid file name:
	
	- substitute '_' whitespace and characters used special path characters.
	- eliminate all other non-alphabetic characters.
	- strip leading and trailing whitespace.
	- return at most 128 characters."""

	result = ""
	for ch in s.strip():
		if ch in string.ascii_letters:
			result += ch
		elif ch in string.whitespace: # Translate whitespace.
			result += '_'
		elif ch in ('.','\\','/',':'): # Translate special path characters.
			result += '_'
	while 1:
		n = len(result)
		result = result.replace('__','_')
		if len(result) == n:
			break
	result = result.strip()
	return result [:128]</t>
<t tx="ekr.20031218072017.3125">def shortFileName (fileName):
	
	return g.os_path_basename(fileName)</t>
<t tx="ekr.20031218072017.3126">@ The following is taken from page 188 of the Python Cookbook.

The following method allows you to add a function as a method of any class.  That is, it converts the function to a method of the class.  The method just added is available instantly to all existing instances of the class, and to all instances created in the future.

The function's first argument should be self.

The newly created method has the same name as the function unless the optional name argument is supplied, in which case that name is used as the method name.
@c

def funcToMethod(f,theClass,name=None):

	setattr(theClass,name or f.__name__,f)
	# g.trace(`name`)</t>
<t tx="ekr.20031218072017.3127"># Very useful for tracing.

def get_line (s,i):

	nl = ""
	if g.is_nl(s,i):
		i = g.skip_nl(s,i)
		nl = "[nl]"
	j = g.find_line_start(s,i)
	k = g.skip_to_end_of_line(s,i)
	return nl + s[j:k]
	
def get_line_after (s,i):
	
	nl = ""
	if g.is_nl(s,i):
		i = g.skip_nl(s,i)
		nl = "[nl]"
	k = g.skip_to_end_of_line(s,i)
	return nl + s[i:k]
</t>
<t tx="ekr.20031218072017.3128">def pause (s):
	
	print s
	
	i = 0
	while i &lt; 1000000L:
		i += 1</t>
<t tx="ekr.20031218072017.3129">@ Starting with this release, you will see trace statements throughout the code.  The trace function is defined in leoGlobals.py; trace implements much of the functionality of my Sherlock tracing package.  Traces are more convenient than print statements for two reasons: 1) you don't need explicit trace names and 2) you can disable them without recompiling.

In the following examples, suppose that the call to trace appears in function f.

g.trace(string) prints string if tracing for f has been enabled.  For example, the following statment prints from s[i] to the end of the line if tracing for f has been enabled.

  j = g.skip_line(s,i) ; g.trace(s[i:j])

g.trace(function) exectutes the function if tracing for f has been enabled.  For example,

  g.trace(self.f2)

You enable and disable tracing by calling g.init_trace(args).  Examples:

  g.init_trace("+*")         # enable all traces
  g.init_trace("+a","+b")    # enable traces for a and b
  g.init_trace(("+a","+b"))  # enable traces for a and b
  g.init_trace("-a")         # disable tracing for a
  traces = g.init_trace("?") # return the list of enabled traces

If two arguments are supplied to trace, the first argument is the "tracepoint name" and the second argument is the "tracepoint action" as shown in the examples above.  If tracing for the tracepoint name is enabled, the tracepoint action is printed (if it is a string) or exectuted (if it is a function name).

"*" will not match an explicit tracepoint name that starts with a minus sign.  For example,

  g.trace_tag("-nocolor", self.disable_color)
</t>
<t tx="ekr.20031218072017.3130"># Called by startup code.
# Args are all the arguments on the command line.

def init_sherlock (args):
	
	g.init_trace(args,echo=0)
	# g.trace("argv", "sys.argv: " + `sys.argv`)</t>
<t tx="ekr.20031218072017.3131">@ It no args are given we attempt to get them from the "SherlockArgs" file.  If there are still no arguments we trace everything.  This default makes tracing much more useful in Python.
@c

def get_Sherlock_args (args):

	if not args or len(args)==0:
		try:
			fn = g.os_path_join(app.loadDir,"SherlockArgs")
			f = open(fn)
			args = f.readlines()
			f.close()
		except: pass
	elif type(args[0]) == type(("1","2")):
		args = args[0] # strip away the outer tuple.

	# No args means trace everything.
	if not args or len(args)==0: args = ["+*"] 
	# print "get_Sherlock_args:", args
	return args</t>
<t tx="ekr.20031218072017.3132">def init_trace(args,echo=1):

	t = app.trace_list
	args = g.get_Sherlock_args(args)

	for arg in args:
		if arg[0] in string.ascii_letters: prefix = '+'
		else: prefix = arg[0] ; arg = arg[1:]
		
		if prefix == '?':
			print "trace list:", t
		elif prefix == '+' and not arg in t:
			t.append(string.lower(arg))
			if echo:
				print "enabling:", arg
		elif prefix == '-' and arg in t:
			t.remove(string.lower(arg))
			if echo:
				print "disabling:", arg
		else:
			print "ignoring:", prefix + arg</t>
<t tx="ekr.20031218072017.3133"></t>
<t tx="ekr.20031218072017.3134">def clear_stats():
	
	app.stats = {}
</t>
<t tx="ekr.20031218072017.3135">def print_stats (name=None):
	
	if name:
		if type(name) != type(""):
			name = repr(name)
	else:
		name = g.callerName(n=2) # Get caller name 2 levels back.
	
	try:
		stats = app.stats
	except:
		print ; print "no statistics at", name ; print
		return
		
	items = stats.items()
	items.sort()
	print ; print "statistics at",name ; print
	for key,value in items:
		print key,value
		
	g.clear_stats()
</t>
<t tx="ekr.20031218072017.3136">def stat (name=None):

	"""Increments the statistic for name in app.stats
	The caller's name is used by default.
	"""
	
	if name:
		if type(name) != type(""):
			name = repr(name)
	else:
		name = g.callerName(n=2) # Get caller name 2 levels back.

	try:
		stats = app.stats
	except:
		app.stats = stats = {}

	stats[name] = 1 + stats.get(name,0)
</t>
<t tx="ekr.20031218072017.3137"># pychecker bug: pychecker complains that there is no attribute time.clock

def getTime():
	return time.clock()
	
def esDiffTime(message, start):
	g.es(message + ("%6.3f" % (time.clock()-start)))
	return time.clock()</t>
<t tx="ekr.20031218072017.3138">def executeScript (name):
	
	"""Execute a script whose short python file name is given"""
	
	mod_name,ext = g.os_path_splitext(name)
	file = None
	try:
		# This code is in effect an import or a reload.
		# This allows the user to modify scripts without leaving Leo.
		import imp
		file,filename,description = imp.find_module(mod_name)
		imp.load_module(mod_name,file,filename,description)
	except:
		g.es("Exception executing " + name,color="red")
		g.es_exception()

	if file:
		file.close()

</t>
<t tx="ekr.20031218072017.3139"></t>
<t tx="ekr.20031218072017.3140"></t>
<t tx="ekr.20031218072017.3141">def appendToList(out, s):

	for i in s:
		out.append(i)</t>
<t tx="ekr.20031218072017.3142">def flattenList (theList):

	result = []
	for item in theList:
		if type(item) == types.ListType:
			result.extend(g.flattenList(item))
		else:
			result.append(item)
	return result</t>
<t tx="ekr.20031218072017.3143">def listToString(theList):

	if list:
		theList = g.flattenList(theList)
		return string.join(theList,"")
	else:
		return ""</t>
<t tx="ekr.20031218072017.3144"># From the Python cookbook.

def makeDict(**keys):
	
	"""Returns a Python dictionary from using the optional keyword arguments."""

	return keys</t>
<t tx="ekr.20031218072017.3145"># These are guaranteed always to exist for scripts.
</t>
<t tx="ekr.20031218072017.3146">if 0: # No longer needed with the new import scheme.

	class leoProxy:
	
		"""A proxy for the gApp object that can be created before gApp itself.
		
		After gApp is created, both app.x and app().x refer to gApp.x."""
	
		def __getattr__(self,attr):
			return getattr(gApp,attr)
			
		def __setattr__(self,attr,val):
			setattr(gApp,attr,val)
	
		def __call__(self):
			return gApp
			
	# The code can use app.x and app().x to refer to ivars of the leoApp class.
	app = leoProxy()</t>
<t tx="ekr.20031218072017.3147">def choose(cond, a, b): # warning: evaluates all arguments

	if cond: return a
	else: return b</t>
<t tx="ekr.20031218072017.3148">@ c.doCommand and frame.OnMenuClick now set app.log, so g.top() will be reliable after any command is executed.

Note 1: The value of g.top() may change during a new or open command, which may change the routine used to execute the "command1" and "command2" hooks.  This is not a bug, and hook routines must be aware of this fact.
@c

def top():
	
	"""Return the commander of the topmost window"""
	
	# Warning: may be called during startup or shutdown when nothing exists.
	try:
		return app.log.c
	except:
		return None</t>
<t tx="ekr.20031218072017.3149"></t>
<t tx="ekr.20031218072017.3150">def windows():
	return app.windowList</t>
<t tx="ekr.20031218072017.3151"></t>
<t tx="ekr.20031218072017.3152">def scanAtFileOptions (h,err_flag=false):
	
	assert(g.match(h,0,"@file"))
	i = len("@file")
	atFileType = "@file"
	optionsList = []

	while g.match(h,i,'-'):
		&lt;&lt; scan another @file option &gt;&gt;
		
	# Convert atFileType to a list of options.
	for fileType,option in (
		("@silentfile","asis"),
		("@nosentinelsfile","nosent"),
		("@rawfile","noref")):
		if atFileType == fileType:
			optionsList.append(option)
			
	# g.trace(atFileType,optionsList)

	return i,atFileType,optionsList</t>
<t tx="ekr.20031218072017.3153">i += 1 ; err = -1

if g.match_word(h,i,"asis"):
	if atFileType == "@file":
		atFileType = "@silentfile"
	elif err_flag:
		g.es("using -asis option in:" + h)
elif g.match(h,i,"noref"): # Just match the prefix.
	if atFileType == "@file":
		atFileType = "@rawfile"
	elif atFileType == "@nosentinelsfile":
		atFileType = "@silentfile"
	elif err_flag:
		g.es("ignoring redundant -noref in:" + h)
elif g.match(h,i,"nosent"): # Just match the prefix.
	if atFileType == "@file":
		atFileType = "@nosentinelsfile"
	elif atFileType == "@rawfile":
		atFileType = "@silentfile"
	elif err_flag:
		g.es("ignoring redundant -nosent in:" + h)
else:
	for option in ("fat","new","now","old","thin","wait"):
		if g.match_word(h,i,option):
			optionsList.append(option)
	if len(option) == 0:
		err = i-1
# Scan to the next minus sign.
while i &lt; len(h) and h[i] not in (' ','\t','-'):
	i += 1
if err &gt; -1:
	g.es("unknown option:" + h[err:i] + " in " + h)</t>
<t tx="ekr.20031218072017.3154">def scanAtRootOptions (s,i,err_flag=false):
	
	assert(g.match(s,i,"@root"))
	i += len("@root")
	mode = None 
	while g.match(s,i,'-'):
		&lt;&lt; scan another @root option &gt;&gt;

	if mode == None:
		doc = app.config.at_root_bodies_start_in_doc_mode
		mode = g.choose(doc,"doc","code")
	return i,mode</t>
<t tx="ekr.20031218072017.3155">i += 1 ; err = -1

if g.match_word(s,i,"code"): # Just match the prefix.
	if not mode: mode = "code"
	elif err_flag: g.es("modes conflict in:" + g.get_line(s,i))
elif g.match(s,i,"doc"): # Just match the prefix.
	if not mode: mode = "doc"
	elif err_flag: g.es("modes conflict in:" + g.get_line(s,i))
else:
	err = i-1
	
# Scan to the next minus sign.
while i &lt; len(s) and s[i] not in (' ','\t','-'):
	i += 1

if err &gt; -1 and err_flag:
	g.es("unknown option:" + s[err:i] + " in " + g.get_line(s,i))</t>
<t tx="ekr.20031218072017.3156"># It seems dubious to bump the Tangle error count here.  OTOH, it really doesn't hurt.

def scanError(s):

	"""Bump the error count in the tangle command."""

	g.top().tangleCommands.errors += 1

	g.es(s)</t>
<t tx="ekr.20031218072017.3157"># A quick and dirty sscanf.  Understands only %s and %d.

def scanf (s,pat):
	import re
	count = pat.count("%s") + pat.count("%d")
	pat = pat.replace("%s","(\S+)")
	pat = pat.replace("%d","(\d+)")
	parts = re.split(pat,s)
	result = []
	for part in parts:
		if len(part) &gt; 0 and len(result) &lt; count:
			result.append(part)
	# g.trace("scanf returns:",result)
	return result
	
if 0: # testing
	from leoGlobals import trace
	g.scanf("1.0","%d.%d",)</t>
<t tx="ekr.20031218072017.3158">@ These scanners all call g.scanError() directly or indirectly, so they will call g.es() if they find an error.  g.scanError() also bumps c.tangleCommands.errors, which is harmless if we aren't tangling, and useful if we are.

These routines are called by the Import routines and the Tangle routines.
</t>
<t tx="ekr.20031218072017.3159"># Scans past a block comment (an old_style C comment).

def skip_block_comment (s,i):

	assert(g.match(s,i,"/*"))
	j = i ; i += 2 ; n = len(s)
	
	k = string.find(s,"*/",i)
	if k == -1:
		g.scanError("Run on block comment: " + s[j:i])
		return n
	else: return k + 2</t>
<t tx="ekr.20031218072017.3160">@ This code is called only from the import logic, so we are allowed to try some tricks.  In particular, we assume all braces are matched in #if blocks.
@c

def skip_braces(s,i):

	"""Skips from the opening to the matching brace.
	
	If no matching is found i is set to len(s)"""

	# start = g.get_line(s,i)
	assert(g.match(s,i,'{'))
	level = 0 ; n = len(s)
	while i &lt; n:
		c = s[i]
		if c == '{':
			level += 1 ; i += 1
		elif c == '}':
			level -= 1
			if level &lt;= 0: return i
			i += 1
		elif c == '\'' or c == '"': i = g.skip_string(s,i)
		elif g.match(s,i,'//'): i = g.skip_to_end_of_line(s,i)
		elif g.match(s,i,'/*'): i = g.skip_block_comment(s,i)
		# 7/29/02: be more careful handling conditional code.
		elif g.match_word(s,i,"#if") or g.match_word(s,i,"#ifdef") or g.match_word(s,i,"#ifndef"):
			i,delta = g.skip_pp_if(s,i)
			level += delta
		else: i += 1
	return i
</t>
<t tx="ekr.20031218072017.3161">@ 08-SEP-2002 DTHEIN: Added for PHP import support
Skips from the opening to the matching . If no matching is found i is set to len(s).

This code is called only from the import logic, and only for PHP imports.
@c

def skip_php_braces(s,i):

	# start = g.get_line(s,i)
	assert(g.match(s,i,'{'))
	level = 0 ; n = len(s)
	while i &lt; n:
		c = s[i]
		if c == '{':
			level += 1 ; i += 1
		elif c == '}':
			level -= 1
			if level &lt;= 0: return i + 1
			i += 1
		elif c == '\'' or c == '"': i = g.skip_string(s,i)
		elif g.match(s,i,"&lt;&lt;&lt;"): i = g.skip_heredoc_string(s,i)
		elif g.match(s,i,'//') or g.match(s,i,'#'): i = g.skip_to_end_of_line(s,i)
		elif g.match(s,i,'/*'): i = g.skip_block_comment(s,i)
		else: i += 1
	return i</t>
<t tx="ekr.20031218072017.3162">def skip_parens(s,i):

	"""Skips from the opening ( to the matching ).
	
	If no matching is found i is set to len(s)"""

	level = 0 ; n = len(s)
	assert(g.match(s,i,'('))
	while i &lt; n:
		c = s[i]
		if c == '(':
			level += 1 ; i += 1
		elif c == ')':
			level -= 1
			if level &lt;= 0:  return i
			i += 1
		elif c == '\'' or c == '"': i = g.skip_string(s,i)
		elif g.match(s,i,"//"): i = g.skip_to_end_of_line(s,i)
		elif g.match(s,i,"/*"): i = g.skip_block_comment(s,i)
		else: i += 1
	return i</t>
<t tx="ekr.20031218072017.3163">def skip_pascal_begin_end(s,i):

	"""Skips from begin to matching end.
	If found, i points to the end. Otherwise, i &gt;= len(s)
	The end keyword matches begin, case, class, record, and try."""

	assert(g.match_c_word(s,i,"begin"))
	level = 1 ; i = g.skip_c_id(s,i) # Skip the opening begin.
	while i &lt; len(s):
		ch = s[i]
		if ch =='{' : i = g.skip_pascal_braces(s,i)
		elif ch =='"' or ch == '\'': i = g.skip_pascal_string(s,i)
		elif g.match(s,i,"//"): i = g.skip_line(s,i)
		elif g.match(s,i,"(*"): i = g.skip_pascal_block_comment(s,i)
		elif g.match_c_word(s,i,"end"):
			level -= 1 ;
			if level == 0:
				# lines = s[i1:i+3] ; g.trace('\n' + lines + '\n')
				return i
			else: i = g.skip_c_id(s,i)
		elif g.is_c_id(ch):
			j = i ; i = g.skip_c_id(s,i) ; name = s[j:i]
			if name in ["begin", "case", "class", "record", "try"]:
				level += 1
		else: i += 1
	return i
</t>
<t tx="ekr.20031218072017.3164"># Scans past a pascal comment delimited by (* and *).

def skip_pascal_block_comment(s,i):
	
	j = i
	assert(g.match(s,i,"(*"))
	i = string.find(s,"*)",i)
	if i &gt; -1: return i + 2
	else:
		g.scanError("Run on comment" + s[j:i])
		return len(s)

#   n = len(s)
#   while i &lt; n:
#       if g.match(s,i,"*)"): return i + 2
#       i += 1
#   g.scanError("Run on comment" + s[j:i])
#   return i</t>
<t tx="ekr.20031218072017.3165">def skip_pascal_string(s,i):

	j = i ; delim = s[i] ; i += 1
	assert(delim == '"' or delim == '\'')

	while i &lt; len(s):
		if s[i] == delim:
			return i + 1
		else: i += 1

	g.scanError("Run on string: " + s[j:i])
	return i</t>
<t tx="ekr.20031218072017.3166">@ 08-SEP-2002 DTHEIN:  added function skip_heredoc_string
A heredoc string in PHP looks like:

  &lt;&lt;&lt;EOS
  This is my string.
  It is mine. I own it.
  No one else has it.
  EOS

It begins with &lt;&lt;&lt; plus a token (naming same as PHP variable names).
It ends with the token on a line by itself (must start in first position.

@c
def skip_heredoc_string(s,i):
	
	import re
	
	j = i
	assert(g.match(s,i,"&lt;&lt;&lt;"))
	m = re.match("\&lt;\&lt;\&lt;([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)", s[i:])
	if (None == m):
		i += 3
		return i

	# 14-SEP-2002 DTHEIN: needed to add \n to find word, not just string
	delim = m.group(1) + '\n' 
	
	i = g.skip_line(s,i) # 14-SEP-2002 DTHEIN: look after \n, not before
	n = len(s)
	while i &lt; n and not g.match(s,i,delim):
		i = g.skip_line(s,i) # 14-SEP-2002 DTHEIN: move past \n
		
	if i &gt;= n:
		g.scanError("Run on string: " + s[j:i])
	elif g.match(s,i,delim):
		i += len(delim)
	return i
</t>
<t tx="ekr.20031218072017.3167"># Now handles continuation lines and block comments.

def skip_pp_directive(s,i):

	while i &lt; len(s):
		if g.is_nl(s,i):
			if g.escaped(s,i): i = g.skip_nl(s,i)
			else: break
		elif g.match(s,i,"//"): i = g.skip_to_end_of_line(s,i)
		elif g.match(s,i,"/*"): i = g.skip_block_comment(s,i)
		else: i += 1
	return i</t>
<t tx="ekr.20031218072017.3168"># Skips an entire if or if def statement, including any nested statements.

def skip_pp_if(s,i):
	
	start_line = g.get_line(s,i) # used for error messages.
	# g.trace(start_line)

	assert(
		g.match_word(s,i,"#if") or
		g.match_word(s,i,"#ifdef") or
		g.match_word(s,i,"#ifndef"))

	i = g.skip_line(s,i)
	i,delta1 = g.skip_pp_part(s,i)
	i = g.skip_ws(s,i)
	if g.match_word(s,i,"#else"):
		i = g.skip_line(s,i)
		i = g.skip_ws(s,i)
		i,delta2 = g.skip_pp_part(s,i)
		if delta1 != delta2:
			g.es("#if and #else parts have different braces: " + start_line)
	i = g.skip_ws(s,i)
	if g.match_word(s,i,"#endif"):
		i = g.skip_line(s,i)
	else:
		g.es("no matching #endif: " + start_line)
		
	# g.trace(`delta1` + ":" + start_line)
	return i,delta1
</t>
<t tx="ekr.20031218072017.3169"># Skip to an #else or #endif.  The caller has eaten the #if, #ifdef, #ifndef or #else

def skip_pp_part(s,i):

	# g.trace(g.get_line(s,i))

	delta = 0
	while i &lt; len(s):
		c = s[i]
		if 0:
			if c == '\n':
				g.trace(`delta` + ":" + g.get_line(s,i))
		if g.match_word(s,i,"#if") or g.match_word(s,i,"#ifdef") or g.match_word(s,i,"#ifndef"):
			i,delta1 = g.skip_pp_if(s,i)
			delta += delta1
		elif g.match_word(s,i,"#else") or g.match_word(s,i,"#endif"):
			return i,delta
		elif c == '\'' or c == '"': i = g.skip_string(s,i)
		elif c == '{':
			delta += 1 ; i += 1
		elif c == '}':
			delta -= 1 ; i += 1
		elif g.match(s,i,"//"): i = g.skip_line(s,i)
		elif g.match(s,i,"/*"): i = g.skip_block_comment(s,i)
		else: i += 1
	return i,delta</t>
<t tx="ekr.20031218072017.3170">def skip_python_string(s,i):

	if g.match(s,i,"'''") or g.match(s,i,'"""'):
		j = i ; delim = s[i]*3 ; i += 3
		k = string.find(s,delim,i)
		if k &gt; -1: return k+3
		g.scanError("Run on triple quoted string: " + s[j:i])
		return len(s)
	else:
		return g.skip_string(s,i)</t>
<t tx="ekr.20031218072017.3171"># Skips to the next semicolon that is not in a comment or a string.

def skip_to_semicolon(s,i):

	n = len(s)
	while i &lt; n:
		c = s[i]
		if c == ';': return i
		elif c == '\'' or c == '"' : i = g.skip_string(s,i)
		elif g.match(s,i,"//"): i = g.skip_to_end_of_line(s,i)
		elif g.match(s,i,"/*"): i = g.skip_block_comment(s,i)
		else: i += 1
	return i</t>
<t tx="ekr.20031218072017.3172">def skip_typedef(s,i):

	n = len(s)
	while i &lt; n and g.is_c_id(s[i]):
		i = g.skip_c_id(s,i)
		i = g.skip_ws_and_nl(s,i)
	if g.match(s,i,'{'):
		i = g.skip_braces(s,i)
		i = g.skip_to_semicolon(s,i)
	return i</t>
<t tx="ekr.20031218072017.3173"></t>
<t tx="ekr.20031218072017.3174"># Returns true if s[i] is preceded by an odd number of backslashes.

def escaped(s,i):

	count = 0
	while i-1 &gt;= 0 and s[i-1] == '\\':
		count += 1
		i -= 1
	return (count%2) == 1</t>
<t tx="ekr.20031218072017.3175">def find_line_start(s,i):

	# bug fix: 11/2/02: change i to i+1 in rfind
	i = string.rfind(s,'\n',0,i+1) # Finds the highest index in the range.
	if i == -1: return 0
	else: return i + 1</t>
<t tx="ekr.20031218072017.3176">def find_on_line(s,i,pattern):

	# j = g.skip_line(s,i) ; g.trace(`s[i:j]`)
	j = string.find(s,'\n',i)
	if j == -1: j = len(s)
	k = string.find(s,pattern,i,j)
	if k &gt; -1: return k
	else: return None</t>
<t tx="ekr.20031218072017.3177">def is_c_id(ch):

	return ch and (ch in string.ascii_letters or ch in string.digits or ch == '_')
</t>
<t tx="ekr.20031218072017.3178">def is_nl(s,i):

	return i &lt; len(s) and (s[i] == '\n' or s[i] == '\r')</t>
<t tx="ekr.20031218072017.3179"># We no longer require that the directive appear befor any @c directive or section definition.

def is_special(s,i,directive):

	"""Return true if the body text contains the @ directive."""

	# j = g.skip_line(s,i) ; g.trace(`s[i:j]` + " : " + `directive`)
	assert (directive and directive [0] == '@' )

	# 10/23/02: all directives except @others must start the line.
	skip_flag = directive == "@others"
	while i &lt; len(s):
		if g.match_word(s,i,directive):
			return true, i
		else:
			i = g.skip_line(s,i)
			if skip_flag:
				i = g.skip_ws(s,i)
	return false, -1</t>
<t tx="ekr.20031218072017.3180">def is_ws(c):

	return c == '\t' or c == ' '
	
def is_ws_or_nl(s,i):

	return g.is_nl(s,i) or (i &lt; len(s) and g.is_ws(s[i]))</t>
<t tx="ekr.20031218072017.3181"># Warning: this code makes no assumptions about what follows pattern.

def match(s,i,pattern):

	return s and pattern and string.find(s,pattern,i,i+len(pattern)) == i</t>
<t tx="ekr.20031218072017.3182">def match_c_word (s,i,name):

	if name == None: return false
	n = len(name)
	if n == 0: return false
	return name == s[i:i+n] and (i+n == len(s) or not g.is_c_id(s[i+n]))</t>
<t tx="ekr.20031218072017.3183">def match_ignoring_case(s1,s2):

	if s1 == None or s2 == None: return false
	return string.lower(s1) == string.lower(s2)</t>
<t tx="ekr.20031218072017.3184">def match_word(s,i,pattern):

	if pattern == None: return false
	j = len(pattern)
	if j == 0: return false
	if string.find(s,pattern,i,i+j) != i:
		return false
	if i+j &gt;= len(s):
		return true
	c = s[i+j]
	return not (c in string.ascii_letters or c in string.digits or c == '_')</t>
<t tx="ekr.20031218072017.3185">def skip_blank_lines(s,i):

	while i &lt; len(s):
		if g.is_nl(s,i) :
			i = g.skip_nl(s,i)
		elif g.is_ws(s[i]):
			j = g.skip_ws(s,i)
			if g.is_nl(s,j):
				i = j
			else: break
		else: break
	return i</t>
<t tx="ekr.20031218072017.3186">def skip_c_id(s,i):

	n = len(s)
	while i &lt; n:
		c = s[i]
		if c in string.ascii_letters or c in string.digits or c == '_':
			i += 1
		else: break
	return i</t>
<t tx="ekr.20031218072017.3187">@ These methods skip to the next newline, regardless of whether the newline may be preceeded by a backslash. Consequently, they should be used only when we know that we are not in a preprocessor directive or string.
@c

def skip_line (s,i):

	i = string.find(s,'\n',i)
	if i == -1: return len(s)
	else: return i + 1
		
def skip_to_end_of_line (s,i):

	i = string.find(s,'\n',i)
	if i == -1: return len(s)
	else: return i</t>
<t tx="ekr.20031218072017.3188">def skip_long(s,i):
	
	"""Scan s[i:] for a valid int.
	Return (i, val) or (i, None) if s[i] does not point at a number.
	"""

	digits = string.digits
	val = 0
	i = g.skip_ws(s,i)
	n = len(s)
	if i &gt;= n or s[i] not in "+-" + digits:
		return i, None
	# Rewritten: 7/18/02.
	j = i
	if s[i] in '+-':    # whr allow sign if first digit
		i +=1
	while i &lt; n and s[i] in digits:
		i += 1
	try: # 4/24/03: There may be no digits, which would raise an exception.
		val = int(s[j:i])
		return i, val
	except:
		return i,None
</t>
<t tx="ekr.20031218072017.3189">def skip_matching_delims(s,i,delim1,delim2):
	
	assert(g.match(s,i,delim1))

	i += len(delim1)
	k = string.find(s,delim2,i)
	if k == -1:
		return len(s)
	else:
		return k + len(delim2)</t>
<t tx="ekr.20031218072017.3190"># We need this function because different systems have different end-of-line conventions.

def skip_nl (s,i):

	"""Skips a single "logical" end-of-line character."""

	if g.match(s,i,"\r\n"): return i + 2
	elif g.match(s,i,'\n') or g.match(s,i,'\r'): return i + 1
	else: return i</t>
<t tx="ekr.20031218072017.3191">def skip_non_ws (s,i):

	n = len(s)
	while i &lt; n and not g.is_ws(s[i]):
		i += 1
	return i</t>
<t tx="ekr.20031218072017.3192"># Skips from the opening { to the matching }.

def skip_pascal_braces(s,i):

	# No constructs are recognized inside Pascal block comments!
	k = string.find(s,'}',i)
	if i == -1: return len(s)
	else: return k</t>
<t tx="ekr.20031218072017.3193">def skip_to_char(s,i,ch):
	
	j = string.find(s,ch,i)
	if j == -1:
		return len(s),s[i:]
	else:
		return j,s[i:j]
</t>
<t tx="ekr.20031218072017.3194">def skip_ws(s,i):

	n = len(s)
	while i &lt; n and g.is_ws(s[i]):
		i += 1
	return i
	
def skip_ws_and_nl(s,i):

	n = len(s)
	while i &lt; n and (g.is_ws(s[i]) or g.is_nl(s,i)):
		i += 1
	return i</t>
<t tx="ekr.20031218072017.3195"># These two routines preserve the state of trailing newlines.
# Each line of the list ends in a newline, except possibly the last line.

def splitLines (s):
	
	if not s:
		return []
	else:
		if s[-1] == '\n':
			lines = s.split('\n')
			lines = [line + '\n' for line in lines[:-1]]
		else:
			lines = s.split('\n')
			last = lines[-1]
			lines = [line + '\n' for line in lines[:-1]]
			lines.extend(last)
		return lines
		
def joinLines (aList):
	
	return ''.join(aList)</t>
<t tx="ekr.20031218072017.3196"></t>
<t tx="ekr.20031218072017.3197"></t>
<t tx="ekr.20031218072017.3198"># Returns optimized whitespace corresponding to width with the indicated tab_width.

def computeLeadingWhitespace (width, tab_width):

	if width &lt;= 0:
		return ""
	if tab_width &gt; 1:
		tabs   = width / tab_width
		blanks = width % tab_width
		return ('\t' * tabs) + (' ' * blanks)
	else: # 7/3/02: negative tab width always gets converted to blanks.
		return (' ' * width)</t>
<t tx="ekr.20031218072017.3199"># Returns the width of s, assuming s starts a line, with indicated tab_width.

def computeWidth (s, tab_width):
		
	w = 0
	for ch in s:
		if ch == '\t':
			w += (abs(tab_width) - (w % abs(tab_width)))
		else:
			w += 1
	return w</t>
<t tx="ekr.20031218072017.3200">def get_leading_ws(s):
	
	"""Returns the leading whitespace of 's'."""

	i = 0 ; n = len(s)
	while i &lt; n and s[i] in (' ','\t'):
		i += 1
	return s[0:i]
</t>
<t tx="ekr.20031218072017.3201"># Optimize leading whitespace in s with the given tab_width.

def optimizeLeadingWhitespace (line,tab_width):

	i, width = g.skip_leading_ws_with_indent(line,0,tab_width)
	s = g.computeLeadingWhitespace(width,tab_width) + line[i:]
	return s</t>
<t tx="ekr.20031218072017.3202"># Remove whitespace up to first_ws wide in s, given tab_width, the width of a tab.

def removeLeadingWhitespace (s,first_ws,tab_width):

	j = 0 ; ws = 0
	for ch in s:
		if ws &gt;= first_ws:
			break
		elif ch == ' ':
			j += 1 ; ws += 1
		elif ch == '\t':
			j += 1 ; ws += (abs(tab_width) - (ws % abs(tab_width)))
		else: break
	if j &gt; 0:
		s = s[j:]
	return s</t>
<t tx="ekr.20031218072017.3203"># Warning: string.rstrip also removes newlines!

def removeTrailingWs(s):

	j = len(s)-1
	while j &gt;= 0 and (s[j] == ' ' or s[j] == '\t'):
		j -= 1
	return s[:j+1]
</t>
<t tx="ekr.20031218072017.3204"># Skips leading up to width leading whitespace.

def skip_leading_ws(s,i,ws,tab_width):

	count = 0
	while count &lt; ws and i &lt; len(s):
		ch = s[i]
		if ch == ' ':
			count += 1
			i += 1
		elif ch == '\t':
			count += (abs(tab_width) - (count % abs(tab_width)))
			i += 1
		else: break

	return i</t>
<t tx="ekr.20031218072017.3205">def skip_leading_ws_with_indent(s,i,tab_width):

	"""Skips leading whitespace and returns (i, indent), 
	
	- i points after the whitespace
	- indent is the width of the whitespace, assuming tab_width wide tabs."""

	count = 0 ; n = len(s)
	while i &lt; n:
		ch = s[i]
		if ch == ' ':
			count += 1
			i += 1
		elif ch == '\t':
			count += (abs(tab_width) - (count % abs(tab_width)))
			i += 1
		else: break

	return i, count</t>
<t tx="ekr.20031218072017.3206">@language python

import leoGlobals as g
from leoGlobals import true,false

import string

class baseLeoImportCommands:
	"""The base class for Leo's import commands."""
	@others
	
class leoImportCommands (baseLeoImportCommands):
	"""A class that implements Leo's import commands."""
	pass</t>
<t tx="ekr.20031218072017.3207">def __init__ (self,c):

	self.c = c
	
	# Set by ImportFilesFommand.
	self.treeType = "@file" # "@root" or "@file"
	# Set by ImportWebCommand.
	self.webType = "@noweb" # "cweb" or "noweb"

	# Set by create_outline.
	self.fileName = None # The original file name, say x.cpp
	self.methodName = None # x, as in &lt; &lt; x methods &gt; &gt; =
	self.fileType = None # ".py", ".c", etc.
	self.rootLine = "" # Empty or @root + self.fileName

	# Support of output_newline option
	self.output_newline = g.getOutputNewline()
	
	# Used by Importers.
	self.web_st = []
	self.encoding = g.app.tkEncoding # 2/25/03: was "utf-8"
</t>
<t tx="ekr.20031218072017.3209"></t>
<t tx="ekr.20031218072017.3210">def createOutline (self,fileName,parent):

	c = self.c ; current = c.currentVnode()
	junk, self.fileName = g.os_path_split(fileName) # junk/fileName
	self.methodName,ext = g.os_path_splitext(self.fileName) # methodName.fileType
	# g.trace(ext,fileName)
	self.fileType = ext
	self.setEncoding()
	# g.trace(`self.fileName`) ; g.trace(`self.fileType`)
	# All file types except the following just get copied to the parent node.
	# Note: we should _not_ import header files using this code.
	ext = ext.lower()
	appendFileFlag = ext not in (
		".c", ".cpp", ".cxx", ".el", ".java", ".pas", ".py", ".pyw", ".php")
	&lt;&lt; Read file into s &gt;&gt;
	# Create the top-level headline.
	v = parent.insertAsLastChild()
	c.undoer.setUndoParams("Import",v,select=current)
	if self.treeType == "@file":
		v.initHeadString("@file " + self.fileName)
	else:
		v.initHeadString(self.fileName)
		
	self.rootLine = g.choose(self.treeType=="@file","","@root-code "+self.fileName+'\n')

	if appendFileFlag:
		v.setBodyStringOrPane("@ignore\n" + self.rootLine + s)
	elif ext in (".c", ".cpp", ".cxx"):
		self.scanCText(s,v)
	elif ext == ".el":
		self.scanElispText(s,v)
	elif ext == ".java":
		self.scanJavaText(s,v,true) #outer level
	elif ext == ".pas":
		self.scanPascalText(s,v)
	elif ext in (".py", ".pyw"):
		self.scanPythonText(s,v)
	elif ext == ".php":
		self.scanPHPText(s,v) # 08-SEP-2002 DTHEIN
	else:
		g.es("createOutline: can't happen")
	return v</t>
<t tx="ekr.20031218072017.3211">try:
	file = open(fileName)
	s = file.read()
	s = g.toUnicode(s,self.encoding)
	file.close()
except:
	g.es("can not open " + fileName)
	import leoTest ; leoTest.fail()
	return None</t>
<t tx="ekr.20031218072017.3212">def importFilesCommand (self,files,treeType):

	c = self.c
	if c == None: return
	v = current = c.currentVnode()
	if current == None: return
	if len(files) &lt; 1: return
	self.treeType = treeType
	c.beginUpdate()
	if 1: # range of update...
		if len(files) == 2:
			&lt;&lt; Create a parent for two files having a common prefix &gt;&gt;
		for i in xrange(len(files)):
			fileName = files[i]
			v = self.createOutline(fileName,current)
			if v: # 8/11/02: createOutline may fail.
				g.es("imported " + fileName)
				v.contract()
				v.setDirty()
				c.setChanged(true)
		c.validateOutline()
		current.expand()
	c.endUpdate()
	c.selectVnode(current)</t>
<t tx="ekr.20031218072017.3213">@ The two filenames have a common prefix everything before the last period is the same.  For example, x.h and x.cpp.
@c

name0 = files[0]
name1 = files[1]
prefix0, junk = g.os_path_splitext(name0)
prefix1, junk = g.os_path_splitext(name1)
if len(prefix0) &gt; 0 and prefix0 == prefix1:
	current = current.insertAsLastChild()
	junk, nameExt = g.os_path_split(prefix1)
	name,ext = g.os_path_splitext(prefix1)
	current.initHeadString(name)</t>
<t tx="ekr.20031218072017.3214"></t>
<t tx="ekr.20031218072017.3215"># Used by paste logic.

def convertMoreStringToOutlineAfter (self,s,firstVnode):
	s = string.replace(s,"\r","")
	strings = string.split(s,"\n")
	return self.convertMoreStringsToOutlineAfter(strings,firstVnode)

# Almost all the time spent in this command is spent here.

def convertMoreStringsToOutlineAfter (self,strings,firstVnode):

	c = self.c
	if len(strings) == 0: return None
	if not self.stringsAreValidMoreFile(strings): return None
	c.beginUpdate()
	firstLevel, junk = self.moreHeadlineLevel(strings[0])
	lastLevel = -1 ; theRoot = lastVnode = None
	index = 0
	while index &lt; len(strings):
		progress = index
		s = strings[index]
		level, newFlag = self.moreHeadlineLevel(s)
		level -= firstLevel
		if level &gt;= 0:
			&lt;&lt; Link a new vnode v into the outline &gt;&gt;
			&lt;&lt; Set the headline string, skipping over the leader &gt;&gt;
			&lt;&lt; Count the number of following body lines &gt;&gt;
			&lt;&lt; Add the lines to the body text of v &gt;&gt;
			v.setDirty()
		else: index += 1
		assert progress &lt; index
	if theRoot:
		theRoot.setDirty()
		c.setChanged(true)
	c.endUpdate()
	return theRoot</t>
<t tx="ekr.20031218072017.3216">assert(level &gt;= 0)
if not lastVnode:
	theRoot = v = firstVnode.insertAfter()
elif level == lastLevel:
	v = lastVnode.insertAfter()
elif level == lastLevel + 1:
	v = lastVnode.insertAsNthChild(0)
else:
	assert(level &lt; lastLevel)
	while level &lt; lastLevel:
		lastLevel -= 1
		lastVnode = lastVnode.parent()
		assert(lastVnode)
		assert(lastLevel &gt;= 0)
	v = lastVnode.insertAfter()
lastVnode = v
lastLevel = level</t>
<t tx="ekr.20031218072017.3217">j = 0
while g.match(s,j,'\t'):
	j += 1
if g.match(s,j,"+ ") or g.match(s,j,"- "):
	j += 2

v.initHeadString(s[j:])</t>
<t tx="ekr.20031218072017.3218">bodyLines = 0
index += 1 # Skip the headline.
while index &lt; len(strings):
	s = strings[index]
	level, junk = self.moreHeadlineLevel(s)
	level -= firstLevel
	if level &gt;= 0:
		break
	# Remove first backslash of the body line.
	if g.match(s,0,'\\'):
		strings[index] = s[1:]
	bodyLines += 1
	index += 1</t>
<t tx="ekr.20031218072017.3219">if bodyLines &gt; 0:
	body = ""
	n = index - bodyLines
	while n &lt; index:
		body += strings[n]
		if n != index - 1:
			body += "\n"
		n += 1
	v.t.setTnodeText(body)</t>
<t tx="ekr.20031218072017.3220"># On entry,files contains at most one file to convert.
def importFlattenedOutline (self,files):

	c = self.c ; current = c.currentVnode()
	if current == None: return
	if len(files) &lt; 1: return
	self.setEncoding()
	fileName = files[0]
	&lt;&lt; Read the file into array &gt;&gt;
	# Convert the string to an outline and insert it after the current node.
	newVnode = self.convertMoreStringsToOutlineAfter(array,current)
	if newVnode:
		c.undoer.setUndoParams("Import",newVnode,select=current)
		c.endEditing()
		c.validateOutline()
		c.editPosition(newVnode)
		newVnode.setDirty()
		c.setChanged(true)
	else:
		g.es(fileName + " is not a valid MORE file.")</t>
<t tx="ekr.20031218072017.3221">try:
	file = open(fileName)
	s = file.read()
	s = string.replace(s,"\r","")
	s = g.toUnicode(s,self.encoding)
	array = string.split(s,"\n")
	file.close()
except:
	g.es("Can not open " + fileName, color="blue")
	import leoTest ; leoTest.fail()
	return
</t>
<t tx="ekr.20031218072017.3222"># return the headline level of s,or -1 if the string is not a MORE headline.
def moreHeadlineLevel (self,s):

	level = 0 ; i = 0
	while g.match(s,i,'\t'):
		level += 1
		i += 1
	plusFlag = g.choose(g.match(s,i,"+"),true,false)
	if g.match(s,i,"+ ") or g.match(s,i,"- "):
		return level, plusFlag
	else:
		return -1, plusFlag</t>
<t tx="ekr.20031218072017.3223"># Used by paste logic.

def stringIsValidMoreFile (self,s):
	
	s = string.replace(s,"\r","")
	strings = string.split(s,"\n")
	return self.stringsAreValidMoreFile(strings)

def stringsAreValidMoreFile (self,strings):

	if len(strings) &lt; 1: return false
	level1, plusFlag = self.moreHeadlineLevel(strings[0])
	if level1 == -1: return false
	# Check the level of all headlines.
	i = 0 ; 	lastLevel = level1
	while i &lt; len(strings):
		s = strings[i] ; i += 1
		level, newFlag = self.moreHeadlineLevel(s)
		if level &gt; 0:
			if level &lt; level1 or level &gt; lastLevel + 1:
				return false # improper level.
			elif level &gt; lastLevel and plusFlag == false:
				return false # parent of this node has no children.
			elif level == lastLevel and plusFlag == true:
				return false # last node has missing child.
			else:
				lastLevel = level
				plusFlag = newFlag
	return true</t>
<t tx="ekr.20031218072017.3224"></t>
<t tx="ekr.20031218072017.3225">def createOutlineFromWeb (self,path,parent):

	c = self.c ; current = c.currentVnode()
	junk, fileName = g.os_path_split(path)
	# Create the top-level headline.
	v = parent.insertAsLastChild()
	c.undoer.setUndoParams("Import",v,select=current)
	v.initHeadString(fileName)
	if self.webType=="cweb":
		v.setBodyStringOrPane("@ignore\n" + self.rootLine + "@language cweb")

	# Scan the file,creating one section for each function definition.
	self.scanWebFile(path,v)
	return v</t>
<t tx="ekr.20031218072017.3226">def importWebCommand (self,files,webType):

	c = self.c ; current = c.currentVnode()
	if current == None: return
	if len(files) &lt; 1: return
	self.webType = webType
	c.beginUpdate()
	for i in xrange(len(files)):
		fileName = files[i]
		v = self.createOutlineFromWeb(fileName,current)
		v.contract()
		v.setDirty()
		c.setChanged(true)
	c.selectVnode(current)
	c.endUpdate()</t>
<t tx="ekr.20031218072017.3227">def findFunctionDef (self,s,i):
	
	# Look at the next non-blank line for a function name.
	i = g.skip_ws_and_nl(s,i)
	k = g.skip_line(s,i)
	name = None
	while i &lt; k:
		if g.is_c_id(s[i]):
			j = i ; i = g.skip_c_id(s,i) ; name = s[j:i]
		elif s[i] == '(':
			if name: return name
			else: break
		else: i += 1
	return None</t>
<t tx="ekr.20031218072017.3228">@ This method returns the proper headline text.

1. If s contains a section def, return the section ref.
2. cweb only: if s contains @c, return the function name following the @c.
3. cweb only: if s contains @d name, returns @d name.
4. Otherwise, returns "@"
@c

def scanBodyForHeadline (self,s):
	
	if self.webType == "cweb":
		&lt;&lt; scan cweb body for headline &gt;&gt;
	else:
		&lt;&lt; scan noweb body for headline &gt;&gt;
	return "@" # default.</t>
<t tx="ekr.20031218072017.3229">i = 0
while i &lt; len(s):
	i = g.skip_ws_and_nl(s,i)
	# line = g.get_line(s,i) ; g.trace(`line`)
	# Allow constructs such as @ @c, or @ @&lt;.
	if self.isDocStart(s,i):
		i += 2 ; i = g.skip_ws(s,i)
	if g.match(s,i,"@d") or g.match(s,i,"@f"):
		# Look for a macro name.
		directive = s[i:i+2]
		i = g.skip_ws(s,i+2) # skip the @d or @f
		if i &lt; len(s) and g.is_c_id(s[i]):
			j = i ; g.skip_c_id(s,i) ; return s[j:i]
		else: return directive
	elif g.match(s,i,"@c") or g.match(s,i,"@p"):
		# Look for a function def.
		name = self.findFunctionDef(s,i+2)
		return g.choose(name,name,"outer function")
	elif g.match(s,i,"@&lt;"):
		# Look for a section def.
		# A small bug: the section def must end on this line.
		j = i ; k = g.find_on_line(s,i,"@&gt;")
		if k &gt; -1 and (g.match(s,k+2,"+=") or g.match(s,k+2,"=")):
			return s[j:k+2] # return the section ref.
	i = g.skip_line(s,i)</t>
<t tx="ekr.20031218072017.3230">i = 0
while i &lt; len(s):
	i = g.skip_ws_and_nl(s,i)
	# line = g.get_line(s,i) ; g.trace(`line`)
	if g.match(s,i,"&lt;&lt;"):
		k = g.find_on_line(s,i,"&gt;&gt;=")
		if k &gt; -1:
			ref = s[i:k+2]
			name = string.strip(s[i+2:k])
			if name != "@others":
				return ref
	else:
		name = self.findFunctionDef(s,i)
		if name:
			return name
	i = g.skip_line(s,i)</t>
<t tx="ekr.20031218072017.3231">def scanWebFile (self,fileName,parent):

	type = self.webType
	lb = g.choose(type=="cweb","@&lt;","&lt;&lt;")
	rb = g.choose(type=="cweb","@&gt;","&gt;&gt;")

	try: # Read the file into s.
		f = open(fileName)
		s = f.read()
	except:
		g.es("Can not import " + fileName, color="blue")
		return

	&lt;&lt; Create a symbol table of all section names &gt;&gt;
	&lt;&lt; Create nodes for limbo text and the root section &gt;&gt;
	while i &lt; len(s):
		progress = i
		&lt;&lt; Create a node for the next module &gt;&gt;
		assert(progress &lt; i)</t>
<t tx="ekr.20031218072017.3232">i = 0 ; 	self.web_st = []
while i &lt; len(s):
	i = g.skip_ws_and_nl(s,i)
	# line = g.get_line(s,i) ; g.trace(`line`)
	if self.isDocStart(s,i):
		if type == "cweb": i += 2
		else: i = g.skip_line(s,i)
	elif type == "cweb" and g.match(s,i,"@@"):
		i += 2
	elif g.match(s,i,lb):
		i += 2 ; j = i ; k = g.find_on_line(s,j,rb)
		if k &gt; -1: self.cstEnter(s[j:k])
	else: i += 1

# g.trace(self.cstDump())</t>
<t tx="ekr.20031218072017.3233">i = 0
while i &lt; len(s):
	i = g.skip_ws_and_nl(s,i)
	if self.isModuleStart(s,i) or g.match(s,i,lb):
		break
	else: i = g.skip_line(s,i)
	
j = g.skip_ws(s,0)
if j &lt; i:
	self.createHeadline(parent,"@ " + s[j:i],"Limbo")

j = i
if g.match(s,i,lb):
	while i &lt; len(s):
		i = g.skip_ws_and_nl(s,i)
		if self.isModuleStart(s,i):
			break
		else: i = g.skip_line(s,i)
	self.createHeadline(parent,s[j:i],g.angleBrackets(" @ "))
	
# g.trace(`g.get_line(s,i)`)</t>
<t tx="ekr.20031218072017.3234">if type=="cweb":
	assert(self.isModuleStart(s,i))
	start = i
	if self.isDocStart(s,i):
		i += 2
		while i &lt; len(s):
			i = g.skip_ws_and_nl(s,i)
			if self.isModuleStart(s,i): break
			else: i = g.skip_line(s,i)
	&lt;&lt; Handle cweb @d, @f, @c and @p directives &gt;&gt;
else:
	assert(self.isDocStart(s,i)) # isModuleStart == isDocStart for noweb.
	start = i ; i = g.skip_line(s,i)
	while i &lt; len(s):
		i = g.skip_ws_and_nl(s,i)
		if self.isDocStart(s,i): break
		else: i = g.skip_line(s,i)
	
body = s[start:i]
body = self.massageWebBody(body)
headline = self.scanBodyForHeadline(body)
self.createHeadline(parent,body,headline)</t>
<t tx="ekr.20031218072017.3235">if g.match(s,i,"@d") or g.match(s,i,"@f"):
	i += 2 ; i = g.skip_line(s,i)
	# Place all @d and @f directives in the same node.
	while i &lt; len(s):
		i = g.skip_ws_and_nl(s,i)
		if g.match(s,i,"@d") or g.match(s,i,"@f"): i = g.skip_line(s,i)
		else: break
	i = g.skip_ws_and_nl(s,i)
	
while i &lt; len(s) and not self.isModuleStart(s,i):
	i = g.skip_line(s,i)
	i = g.skip_ws_and_nl(s,i)

if g.match(s,i,"@c") or g.match(s,i,"@p"):
	i += 2 ; 
	while i &lt; len(s):
		i = g.skip_line(s,i)
		i = g.skip_ws_and_nl(s,i)
		if self.isModuleStart(s,i):
			break</t>
<t tx="ekr.20031218072017.3236"></t>
<t tx="ekr.20031218072017.3237"># We canonicalize strings before looking them up, but strings are entered in the form they are first encountered.

def cstCanonicalize (self,s,lower=true):
	
	if lower:
		s = string.lower(s)
	s = string.replace(s,"\t"," ")
	s = string.replace(s,"\r","")
	s = string.replace(s,"\n"," ")
	s = string.replace(s,"  "," ")
	s = string.strip(s)
	return s</t>
<t tx="ekr.20031218072017.3238">def cstDump (self):

	self.web_st.sort()
	s = "Web Symbol Table...\n\n"
	for name in self.web_st:
		s += name + "\n"
	return s</t>
<t tx="ekr.20031218072017.3239"># We only enter the section name into the symbol table if the ... convention is not used.

def cstEnter (self,s):

	# Don't enter names that end in "..."
	s = string.rstrip(s)
	if s.endswith("..."): return
	
	# Put the section name in the symbol table, retaining capitalization.
	lower = self.cstCanonicalize(s,true)  # do lower
	upper = self.cstCanonicalize(s,false) # don't lower.
	for name in self.web_st:
		if string.lower(name) == lower:
			return
	self.web_st.append(upper)</t>
<t tx="ekr.20031218072017.3240"># This method returns a string if the indicated string is a prefix of an entry in the web_st.

def cstLookup (self,target):
	
	# Do nothing if the ... convention is not used.
	target = string.strip(target)
	if not target.endswith("..."): return target
	# Canonicalize the target name, and remove the trailing "..."
	ctarget = target[:-3]
	ctarget = self.cstCanonicalize(ctarget)
	ctarget = string.strip(ctarget)
	found = false ; result = target
	for s in self.web_st:
		cs = self.cstCanonicalize(s)
		if cs[:len(ctarget)] == ctarget:
			if found:
				g.es("****** " + target + ": is also a prefix of: " + s)
			else:
				found = true ; result = s
				# g.es("replacing: " + target + " with: " + s)
	return result</t>
<t tx="ekr.20031218072017.3241"></t>
<t tx="ekr.20031218072017.3242"># 08-SEP-2002 DTHEIN: Added for PHP import support.
#
# PHP uses both # and // as line comments, and /* */ as block comments

def scanPHPText (self,s,parent):

	"""Creates a child of parent for each class and function definition seen."""

	import re
	&lt;&lt; Append file if not pure PHP &gt;&gt;

	&lt;&lt; define scanPHPText vars &gt;&gt;
	# 14-SEP-2002 DTHEIN: Make leading &lt;?php use the @first directive
	parent.appendStringToBody("@first ")	
	parent.appendStringToBody(s[:startOfCode])
	scan_start = i = startOfCode
	while i &lt; endOfCode:
		# line = g.get_line(s,i) ; g.trace(`line`)
		ch = s[i]
		# These cases skip tokens.
		if ch == '/' or ch == '#':
			&lt;&lt; handle possible PHP comments &gt;&gt;
		elif ch == '&lt;':
			&lt;&lt; handle possible heredoc string &gt;&gt;
		elif ch == '"' or ch == '\'':
			i = g.skip_string(s,i)
		# These cases help determine where functions start.
		# FIXME: probably want to capture 'var's as class member data
		elif ch == 'f' or ch =='c':
			&lt;&lt; handle possible class or function &gt;&gt;
		elif class_start and (ch == '}'):
			&lt;&lt; handle end of class &gt;&gt;
		else: i += 1
	&lt;&lt; Append any unused text to the parent's body text &gt;&gt;
	# 14-SEP-2002 DTHEIN: Make leading &lt;?php use the @first directive
	parent.appendStringToBody("@last ")	
	parent.appendStringToBody(s[endOfCode:])</t>
<t tx="ekr.20031218072017.3243"># If the file does not begin with &lt;?php or end with ?&gt; then
# it is simply appended like a generic import would do.

s.strip() # Remove inadvertent whitespace.

#if (
#	not s.startswith("&lt;?php")
#	or not (s.endswith("?&gt;") or s.endswith("?&gt;\n") or s.endswith("?&gt;\r\n")
#):

if (
	not (
		s.startswith("&lt;?P") or
		s.startswith("&lt;?p") or
		s.startswith("&lt;?=") or
		s.startswith("&lt;?\n") or
		s.startswith("&lt;?\r") or
		s.startswith("&lt;? ") or
		s.startswith("&lt;?\t")
	) or not (
		s.endswith("?&gt;\n") or
		s.endswith("?&gt;\r") or
		s.endswith("?&gt;\r\n")
	)
):
	g.es("File seems to be mixed HTML and PHP; importing as plain text file.")
	parent.setBodyStringOrPane("@ignore\n" + self.rootLine + s)
	return</t>
<t tx="ekr.20031218072017.3244">scan_start = 0
class_start = 0
function_start = 0
i = 0
class_body = ""
class_node = ""
phpClassName = re.compile("class\s+([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)")
phpFunctionName = re.compile("function\s+([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)")

# 14-SEP-2002 DTHEIN: added these 2 variables to allow use of @first/last
startOfCode = s.find("\n") + 1 # this should be the line containing the initial &lt;?php
endOfCode = s.rfind("?&gt;") # this should be the line containing the last ?&gt;
</t>
<t tx="ekr.20031218072017.3245">if g.match(s,i,"&lt;&lt;&lt;"):
	i = g.skip_heredoc_string(s,i)
else:
	i += 1
</t>
<t tx="ekr.20031218072017.3246">if g.match(s,i,"//"):
	i = g.skip_line(s,i)
elif g.match(s,i,"#"):
	i = g.skip_line(s,i)
elif g.match(s,i,"/*"):
	i = g.skip_block_comment(s,i)
else:
	i += 1</t>
<t tx="ekr.20031218072017.3247">@ In PHP, all functions are typeless and start with the keyword "function;  all classes start with the keyword class.

Functions can be nested, but we don't handle that right now (I don't think it is a common practice anyway).
@c
if g.match(s,i,"function "):
	#we want to make the function a subnode of either the @file node or a class node
	# 1. get the function name
	# 2. make a reference in the parent
	# 3. create the child node, and dump the function in it.
	function_start = i
	m = phpFunctionName.match(s[i:])
	if (None == m): # function keyword without function name
		i += len("function ")
	else:
		headline = g.angleBrackets(" function " + m.group(1) + " ")
		# find the end of the function
		openingBrace = s.find('{',i)
		function_end = g.skip_php_braces(s,openingBrace)
		function_end = g.skip_to_end_of_line(s,function_end - 1) + 1 # include the line end
		# Insert skipped text into parent's body.
		if class_start:
			class_body += s[scan_start:function_start]
		else:
			parent.appendStringToBody(s[scan_start:function_start])
		# Append the headline to the parent's body.
		if class_start:
			class_body += (headline + "\n")
		else:
			parent.appendStringToBody(headline + "\n")
		# Backup to capture leading whitespace (for undent purposes)
		while (function_start &gt; 0) and (s[function_start - 1] in [" ", "\t"]):
			function_start -= 1
		# Get the body and undent it
		function_body = s[function_start:function_end]
		function_body = self.undentBody(function_body)
		if self.treeType != "@file":
			function_body = "@code\n\n" + function_body
		# Create the new node
		if class_start:
			self.createHeadline(class_node,function_body,headline)
		else:
			self.createHeadline(parent,function_body,headline)
		i = function_end
		scan_start = i
		function_end = 0
		function_start = 0 #done with this function
		function_body = ""
		
elif g.match(s,i,"class "):
	# we want to make the class a subnode of the @file node
	# 1. get the class name
	# 2. make a reference in the parent
	# 3. create the child node and dump the function in it
	class_start = i
	class_body = ""
	m = phpClassName.match(s[i:])
	if (None == m): # class keyword without class name
		i += len("class ")
	else:
		# Insert skipped text into parent's body.
		parent.appendStringToBody(s[scan_start:class_start])
		# create the headline name
		headline = g.angleBrackets(" class " + m.group(1) + " ")
		# find the place to start looking for methods (functions)
		openingBrace = s.find('{',i)
		# find the end of the class
		class_end = g.skip_php_braces(s,openingBrace)
		class_end = g.skip_to_end_of_line(s,class_end - 1) + 1 # include the line end
		# Append the headline to the parent's body.
		parent.appendStringToBody(headline + "\n")
		# Backup to capture leading whitespace (for undent purposes)
		while (class_start &gt; 0) and (s[class_start - 1] in [" ", "\t"]):
			class_start -= 1
		scan_start = class_start
		# Create the new node
		class_node = self.createHeadline(parent,"",headline)
		i = openingBrace
	
else:
	i += 1</t>
<t tx="ekr.20031218072017.3248"># Capture the rest of the body
class_body += s[scan_start:class_end]
# insert the class node's body
if self.treeType != "@file":
	class_body = "@code\n\n" + class_body
class_body = self.undentBody(class_body)
class_node.appendStringToBody(class_body)
# reset the indices
i = class_end
scan_start = i
class_end = 0
class_start = 0 #done with this class
class_body=""
</t>
<t tx="ekr.20031218072017.3249">parent.appendStringToBody(s[scan_start:endOfCode])
</t>
<t tx="ekr.20031218072017.3250"># Creates a child of parent for each C function definition seen.

def scanCText (self,s,parent):

	&lt;&lt; define scanCText vars &gt;&gt;
	while i &lt; len(s):
		# line = g.get_line(s,i) ; g.trace(`line`)
		ch = s[i]
		# These cases skip tokens.
		if ch == '/':
			&lt;&lt; handle possible C comments &gt;&gt;
		elif ch == '"' or ch == '\'':
			i = g.skip_string(s,i)
		# These cases help determine where functions start.
		elif ch == '=':
			&lt;&lt; handle equal sign in C &gt;&gt;
		elif ch == '(':
			&lt;&lt; handle open paren in C &gt;&gt;
		elif ch == ';':
			&lt;&lt; handle semicolon in C &gt;&gt;
		# These cases and the default case can create child nodes.
		elif ch == '#':
			&lt;&lt; handle # sign &gt;&gt;
		elif ch == '{':
			&lt;&lt; handle open curly bracket in C &gt;&gt;
		elif g.is_c_id(ch):
			&lt;&lt; handle id, class, typedef, struct, union, namespace &gt;&gt;
		else: i += 1
	&lt;&lt; Append any unused text to the parent's body text &gt;&gt;</t>
<t tx="ekr.20031218072017.3251">c = self.c
include_seen = method_seen = false
methodKind = g.choose(self.fileType==".c","functions","methods")
lparen = None   # Non-null if '(' seen at outer level.
scan_start = function_start = 0
name = None
i = 0</t>
<t tx="ekr.20031218072017.3252"># if statements may contain function definitions.
i += 1  # Skip the '#'
if not include_seen and g.match_c_word(s,i,"include"):
	include_seen = true
	&lt;&lt; create a child node for all #include statements &gt;&gt;
else:
	j = i
	i = g.skip_pp_directive(s,i)</t>
<t tx="ekr.20031218072017.3253"># Scan back to the start of the line.
include_start = i = g.find_line_start(s,i)

# Scan to the next line that is neither blank nor and #include.
i = g.skip_pp_directive(s,i)
i = g.skip_nl(s,i)
include_end = i
while i &lt; len(s):
	i = g.skip_ws_and_nl(s,i)
	if g.match_c_word(s,i,"#include"):
		i = g.skip_pp_directive(s,i)
		i = g.skip_nl(s,i)
		include_end = i
	elif i + 2 &lt; len(s) and s[i] == '\\':
		# Handle possible comment.
		if s[i+1] == '\\':
			i = g.skip_to_end_of_line(s,i)
		elif s[i+1] == '*':
			i = g.skip_block_comment(s,i + 2)
		else:
			i = include_end ; break
	else:
		i = include_end ; break
		

headline = g.angleBrackets(" " + self.methodName + " #includes ")
body = s[include_start:include_end]
body = self.undentBody(body)
prefix = g.choose(self.treeType == "@file","","@code\n\n")
self.createHeadline(parent,prefix + body,headline)
parent.appendStringToBody("@ignore\n" + self.rootLine + "@language c\n")

# Append any previous text to the parent's body.
save_ip = i ; i = scan_start
while i &lt; include_start and g.is_ws_or_nl(s,i):
	i += 1
if i &lt; include_start:
	parent.appendStringToBody(s[i:include_start])
scan_start = function_start = i = save_ip
# Append the headline to the parent's body.
parent.appendStringToBody(headline + "\n")</t>
<t tx="ekr.20031218072017.3254">j = i = g.skip_braces(s,i) # Skip all inner blocks.

# This may fail if #if's contain unmatched curly braces.
if (g.match(s,i,'}') and lparen and name and function_start):
	# Point i _after_ the last character of the function.
	i += 1
	if g.is_nl(s,i):
		i = g.skip_nl(s,i)
	function_end = i
	if method_seen:
		# Include everything after the last function.
		function_start = scan_start 
	else:
		&lt;&lt; create a declaration node &gt;&gt;
		&lt;&lt; append C function/method reference to parent node &gt;&gt;
	headline = name
	body = s[function_start:function_end]
	body = self.massageBody(body,"functions")
	self.createHeadline(parent,body,headline)
	
	method_seen = true
	scan_start = function_start = i # Set the start of the _next_ function.
	lparen = None
else:
	i += 1</t>
<t tx="ekr.20031218072017.3255">save_ip = i
i = scan_start
while i &lt; function_start and g.is_ws_or_nl(s,i):
	i += 1
if i &lt; function_start:
	headline = g.angleBrackets(" " + self.methodName + " declarations ")
	# Append the headline to the parent's body.
	parent.appendStringToBody(headline + "\n")
	decls = s[scan_start:function_start]
	decls = self.undentBody(decls)
	if self.treeType == "@file":
		body = decls
	else:
		body = "@code\n\n" + decls
	self.createHeadline(parent,body,headline)
i = save_ip
scan_start = i</t>
<t tx="ekr.20031218072017.3256">if self.treeType == "@file":
	parent.appendStringToBody("@others\n")
else:
	cweb = c.target_language == "cweb"
	lb = g.choose(cweb,"@&lt;","&lt;&lt;")
	rb = g.choose(cweb,"@&gt;","&gt;&gt;")
	parent.appendStringToBody(
		lb + " " + self.methodName + " " + methodKind + " " + rb + "\n")</t>
<t tx="ekr.20031218072017.3257">if g.match_c_word(s,i,"typedef"):
	i = g.skip_typedef(s,i)
	lparen = None
elif g.match_c_word(s,i,"struct"):
	i = g.skip_typedef(s,i)
	# lparen = None ;  # This can appear in an argument list.
elif g.match_c_word(s,i,"union"):
	i = g.skip_typedef(s,i)
	# lparen = None ;  # This can appear in an argument list.
elif g.match_c_word(s,i,"namespace"):
	&lt;&lt; create children for the namespace &gt;&gt;
# elif g.match_c_word(s,i,"class"):
	# &lt; &lt; create children for the class &gt; &gt;
else:
	# Remember the last name before an open parenthesis.
	if lparen == None:
		j = i ; i = g.skip_c_id(s,i) ; name = s[j:i]
	else:
		i = g.skip_c_id(s,i)
	&lt;&lt; test for operator keyword &gt;&gt;</t>
<t tx="ekr.20031218072017.3258">@ Namesspaces change the self.moduleName and recursively call self function with a text covering only the range of the namespace. This effectively changes the definition line of any created child nodes. The namespace is written to the top level.
@c

# skip the "namespace" keyword.
i += len("namespace")
i = g.skip_ws_and_nl(s,i)
# Skip the namespace name.
namespace_name_start = i
namespace_name_end = None
if i &lt; len(s) and g.is_c_id(s[i]):
	i = g.skip_c_id(s,i)
	namespace_name_end = i - 1
else: namespace_name_start = None
# Skip the '{'
i = g.skip_ws_and_nl(s,i)
if g.match(s,i,'{') and namespace_name_start:
	inner_ip = i + 1
	i = g.skip_braces(s,i)
	if g.match(s,i,'}'):
		# Append everything so far to the body.
		if inner_ip &gt; scan_start:
			parent.appendStringToBody(s[scan_start:inner_ip])
		# Save and change self.moduleName to namespaceName
		savedMethodName = self.methodName
		namespaceName = s[namespace_name_start:namespace_name_end]
		self.methodName = "namespace " + namespaceName
		# Recursively call this function .
		self.scanCText(s[inner_ip:],parent)
		# Restore self.moduleName and continue scanning.
		self.methodName = savedMethodName
		scan_start = function_start = i</t>
<t tx="ekr.20031218072017.3259"># We treat a C++ a construct such as operator + as a function name.
if g.match(name,0,"operator"):
	j = i
	i = g.skip_ws(s,i) # Don't allow newline in headline.
	if (i &lt; len(s) and not g.is_c_id(s[i]) and
		s[i]!=' ' and s[i]!='\n' and s[i]!='\r'):
		while (i &lt; len(s) and not g.is_c_id(s[i]) and
			s[i]!=' ' and s[i]!='\n' and s[i] != '\r'):
			i += 1
		name = s[j:i] # extend the name.</t>
<t tx="ekr.20031218072017.3260">if g.match(s,i,"//"):
	i = g.skip_line(s,i)
elif g.match(s,i,"/*"):
	i = g.skip_block_comment(s,i)
else:
	i += 1</t>
<t tx="ekr.20031218072017.3261">@ We can not be seeing a function definition when we find an equal sign at the top level. Equal signs inside parentheses are handled by the open paren logic.
@c

i += 1 # skip the '='
function_start = None # We can't be in a function.
lparen = None   # We have not seen an argument list yet.
if g.match(s,i,'='):
	i = g.skip_braces(s,i)</t>
<t tx="ekr.20031218072017.3262">lparen = i
# This will skip any equal signs inside the paren.
i = g.skip_parens(s,i)
if g.match(s,i,')'):
	i += 1
	i = g.skip_ws_and_nl(s,i)
	if g.match(s,i,';'):
		lparen = None # not a function definition.
else: lparen = None</t>
<t tx="ekr.20031218072017.3263">@ A semicolon signals the end of a declaration, thereby potentially starting the _next_ function defintion.   Declarations end a function definition unless we have already seen a parenthesis, in which case we are seeing an old-style function definition.
@c

i += 1 # skip the semicolon.
if lparen == None:
	function_start = i + 1 # The semicolon ends the declaration.</t>
<t tx="ekr.20031218072017.3264"># Used by C, Java and Pascal parsers.
# Do nothing if only whitespace is left.

i = g.skip_ws_and_nl(s,scan_start)
if i &lt; len(s):
	parent.appendStringToBody(s[scan_start:])</t>
<t tx="ekr.20031218072017.3265">def scanElispText(self,s,v):
	
	c = self.c
	v.appendStringToBody("@ignore\n@language elisp\n")
	i = 0 ; start = 0
	while i &lt; len(s):
		progress = i
		ch = s[i] ; # g.trace(g.get_line(s,i))
		if ch == ';':
			i = g.skip_line(s,i)
		elif ch == '(':
			j = self.skipElispParens(s,i)
			k = g.skip_ws(s,i+1)
			if g.match_word(s,k,"defun") or g.match_word(s,k,"defconst") or g.match_word(s,k,"defvar"):
				data = s[start:i]
				if data.strip():
					self.createElispDataNode(v,data)
				self.createElispFunction(v,s[i:j+1])
				start = j+1
			i = j
		else:
			i += 1
		assert(progress &lt; i)
	data = s[start:len(s)]
	if data.strip():
		self.createElispDataNode(v,data)</t>
<t tx="ekr.20031218072017.3266">def skipElispParens (self,s,i):
	
	level = 0 ; n = len(s)
	assert(g.match(s,i,'('))
	
	while i &lt; n:
		c = s[i]
		if c == '(':
			level += 1 ; i += 1
		elif c == ')':
			level -= 1
			if level &lt;= 0:
				return i
			i += 1
		elif c == '"': i = g.skip_string(s,i) # Single-quotes are not strings.
		elif g.match(s,i,";"):  i = g.skip_line(s,i)
		else: i += 1
	return i
</t>
<t tx="ekr.20031218072017.3267">def skipElispId (self,s,i):

	n = len(s)
	while i &lt; n:
		c = s[i]
		if c in string.ascii_letters or c in string.digits or c == '-':
			i += 1
		else: break
	return i</t>
<t tx="ekr.20031218072017.3268">def createElispFunction (self,v,s):
	
	body = s
	i = 1 # Skip the '('
	i = g.skip_ws(s,i)

	# Set the prefix in the headline.
	assert(g.match(s,i,"defun") or g.match_word(s,i,"defconst") or g.match_word(s,i,"defvar"))
	if g.match_word(s,i,"defconst"):
		prefix = "const "
	elif g.match_word(s,i,"defvar"):
		prefix = "var "
	else:
		prefix = ""

	# Skip the "defun" or "defconst" or "defvar"
	i = self.skipElispId(s,i)
	
	# Get the following id.
	i = g.skip_ws(s,i)
	j = self.skipElispId(s,i)
	id = prefix + s[i:j]

	self.createHeadline(v,body,id)
</t>
<t tx="ekr.20031218072017.3269">def createElispDataNode (self,v,s):
	
	data = s
	# g.trace(len(data))
	
	# Skip blank lines and comment lines.
	i = 0
	while i &lt; len(s):
		i = g.skip_ws_and_nl(s,i)
		if g.match(s,i,';'):
			i = g.skip_line(s,i)
		else: break

	# Find the next id, probably prefixed by an open paren.
	if g.match(s,i,"("):
		i = g.skip_ws(s,i+1)
	j = self.skipElispId(s,i)
	id = s[i:j]
	if not id:
		id = "unnamed data"

	self.createHeadline(v,data,id)</t>
<t tx="ekr.20031218072017.3270"># Creates a child of parent for each Java function definition seen.

def scanJavaText (self,s,parent,outerFlag): # true if at outer level.

	&lt;&lt; define scanJavaText vars &gt;&gt;
	# if not outerFlag: g.trace("inner:" + `s`)
	while i &lt; len(s):
		# g.trace(`g.get_line(s,i)`)
		ch = s[i]
		# These cases skip tokens.
		if ch == '/':
			&lt;&lt; handle possible Java comments &gt;&gt;
		elif ch == '"' or ch == '\'': i = g.skip_string(s,i)
		# These cases help determine where functions start.
		elif ch == '=':
			&lt;&lt; handle equal sign in Java &gt;&gt;
		elif ch == '(':
			&lt;&lt; handle open paren in Java &gt;&gt;
		elif ch == ';':
			&lt;&lt; handle semicolon in Java &gt;&gt;
			class_seen = false
		# These cases can create child nodes.
		elif ch == '{':
			&lt;&lt; handle open curly bracket in Java &gt;&gt;
		elif g.is_c_id(s[i]):
			&lt;&lt; skip and remember the Java id &gt;&gt;
		else: i += 1
	&lt;&lt; Append any unused text to the parent's body text &gt;&gt;</t>
<t tx="ekr.20031218072017.3271">method_seen = false
class_seen = false # true: class keyword seen at outer level.
interface_seen = false # true: interface keyword seen at outer level.
lparen = None  # not None if '(' seen at outer level.
scan_start = 0
name = None
function_start = 0 # g.choose(outerFlag, None, 0)
i = 0</t>
<t tx="ekr.20031218072017.3272">brace_ip1 = i
i = g.skip_braces(s,i) # Skip all inner blocks.
brace_ip2 = i

if not g.match (s,i,'}'):
	g.es("unmatched '{'")
elif not name:
	i += 1
elif (outerFlag and (class_seen or interface_seen)) or (not outerFlag and lparen):
	# g.trace("starting:"+name)
	# g.trace("outerFlag:"+`outerFlag`)
	# g.trace("lparen:"`lparen`)
	# g.trace("class_seen:"+`class_seen`)
	# g.trace("scan_start:"+g.get_line_after(s,scan_start))
	# g.trace("func_start:"+g.get_line_after(s,function_start))
	# g.trace("s:"+g.get_line(s,i))

	# Point i _after_ the last character of the method.
	i += 1
	if g.is_nl(s,i):
		i = g.skip_nl(s,i)
	function_end = i
	headline = name
	if outerFlag:
		leader = "" ; decl_leader = ""
		if class_seen:
			headline = "class " + headline
			methodKind = "classes"
		else:
			headline = "interface " + headline
			methodKind = "interfaces"
	else:
		leader = "\t" # Indent only inner references.
		decl_leader = "\n"  # Declaration leader for inner references.
		methodKind = "methods"
	if method_seen:
		# Include everything after the last fucntion.
		function_start = scan_start
	else:
		&lt;&lt; create a Java declaration node &gt;&gt;
		&lt;&lt; append Java method reference to parent node &gt;&gt;
	if outerFlag: # Create a class.
		# Backtrack so we remove leading whitespace.
		function_start = g.find_line_start(s,function_start)
		body = s[function_start:brace_ip1+1]
		body = self.massageBody(body,methodKind)
		v = self.createHeadline(parent,body,headline)
		&lt;&lt; recursively scan the text &gt;&gt;
		# Append the brace to the parent.
		v.appendStringToBody("}")
		i = brace_ip2 + 1 # Start after the closing brace.
	else: # Create a method.
		# Backtrack so we remove leading whitespace.
		function_start = g.find_line_start(s,function_start)
		body = s[function_start:function_end]
		body = self.massageBody(body,methodKind)
		self.createHeadline(parent,body,headline)
		i = function_end
	method_seen = true
	scan_start = function_start = i # Set the start of the _next_ function.
	lparen = None ; class_seen = false
else: i += 1</t>
<t tx="ekr.20031218072017.3273">save_ip = i
i = scan_start
while i &lt; function_start and g.is_ws_or_nl(s,i):
	i += 1
	
if outerFlag:
	parent.appendStringToBody("@ignore\n" + self.rootLine + "@language java\n")

if i &lt; function_start:
	decl_headline = g.angleBrackets(" " + self.methodName + " declarations ")

	# Append the headline to the parent's body.
	parent.appendStringToBody(decl_leader + leader + decl_headline + "\n")
	scan_start = g.find_line_start(s,scan_start) # Backtrack so we remove leading whitespace.
	decls = s[scan_start:function_start]
	decls = self.undentBody(decls)
	body = g.choose(self.treeType == "@file",decls,"@code\n\n" + decls)
	self.createHeadline(parent,body,decl_headline)

i = save_ip
scan_start = i</t>
<t tx="ekr.20031218072017.3274">if self.treeType == "@file":
	if outerFlag:
		parent.appendStringToBody("\n@others\n")
	else:
		parent.appendStringToBody("\n\t@others\n")
else:
	kind = g.choose(outerFlag,"classes","methods")
	ref_name = g.angleBrackets(" " + self.methodName + " " + kind + " ")
	parent.appendStringToBody(leader + ref_name + "\n")</t>
<t tx="ekr.20031218072017.3275"># These mark the points in the present function.
# g.trace("recursive scan:" + `g.get_line(s,brace_ip1+ 1)`)
oldMethodName = self.methodName
self.methodName = headline
self.scanJavaText(s[brace_ip1+1:brace_ip2], # Don't include either brace.
	v,false) # inner level
self.methodName = oldMethodName
</t>
<t tx="ekr.20031218072017.3276">if g.match_c_word(s,i,"class") or g.match_c_word(s,i,"interface"):
	if g.match_c_word(s,i,"class"):
		class_seen = true
	else:
		interface_seen = true
	i = g.skip_c_id(s,i) # Skip the class or interface keyword.
	i = g.skip_ws_and_nl(s,i)
	if i &lt; len(s) and g.is_c_id(s[i]):
		# Remember the class or interface name.
		j = i ; i = g.skip_c_id(s,i) ; name = s[j:i]
else:
	j = i ; i = g.skip_c_id(s,i)
	if not lparen and not class_seen:
		name = s[j:i] # Remember the name.</t>
<t tx="ekr.20031218072017.3277">if g.match(s,i,"//"):
	i = g.skip_line(s,i)
elif g.match(s,i,"/*"):
	i = g.skip_block_comment(s,i)
else:
	i += 1</t>
<t tx="ekr.20031218072017.3278">@ We can not be seeing a function definition when we find an equal sign at the top level. Equal signs inside parentheses are handled by the open paren logic.
@c

i += 1 # skip the '='
function_start = 0 # 3/23/03: (bug fix: was None) We can't be in a function.
lparen = None   # We have not seen an argument list yet.
if g.match(s,i,'='):
	i = g.skip_braces(s,i)</t>
<t tx="ekr.20031218072017.3279">lparen = i
# This will skip any equal signs inside the paren.
i = g.skip_parens(s,i)
if g.match(s,i,')'):
	i += 1
	i = g.skip_ws_and_nl(s,i)
	if g.match(s,i,';'):
		lparen = None # not a function definition.
else: lparen = None</t>
<t tx="ekr.20031218072017.3280">@ A semicolon signals the end of a declaration, thereby potentially starting the _next_ function defintion.   Declarations end a function definition unless we have already seen a parenthesis, in which case we are seeing an old-style function definition.
@c

i += 1 # skip the semicolon.
if lparen == None:
	function_start = i + 1 # The semicolon ends the declaration.</t>
<t tx="ekr.20031218072017.3281"># Creates a child of parent for each Pascal function definition seen.

def scanPascalText (self,s,parent):

	method_seen = false ; methodKind = "methods"
	scan_start = function_start = i = 0
	name = None
	while i &lt; len(s):
		# line = g.get_line(s,i) ; g.trace(`line`)
		ch = s[i]
		if ch == '{': i = g.skip_pascal_braces(s,i)
		elif ch == '"' or ch == '\'': i = g.skip_pascal_string(s,i)
		elif g.match(s,i,"//"): i = g.skip_to_end_of_line(s,i)
		elif g.match(s,i,"(*"): i = g.skip_pascal_block_comment(s,i)
		elif g.is_c_id(s[i]):
			&lt;&lt; handle possible Pascal function &gt;&gt;
		else: i += 1
	&lt;&lt; Append any unused text to the parent's body text &gt;&gt;</t>
<t tx="ekr.20031218072017.3282">if g.match_c_word(s,i,"begin"):
	i = g.skip_pascal_begin_end(s,i)
	if g.match_c_word(s,i,"end"):
		i = g.skip_c_id(s,i)
elif (g.match_c_word(s,i,"function")  or g.match_c_word(s,i,"procedure") or
	g.match_c_word(s,i,"constructor") or g.match_c_word(s,i,"destructor")):

	# line = g.get_line(s,i) ; g.trace(`line`)
	
	start = i
	i = g.skip_c_id(s,i)
	i = g.skip_ws_and_nl(s,i)
	&lt;&lt; remember the function name, or continue &gt;&gt;
	&lt;&lt; skip the function definition, or continue &gt;&gt;
	if not method_seen:
		method_seen = true
		&lt;&lt; create a child node for leading declarations &gt;&gt;
		&lt;&lt; append noweb method reference to the parent node &gt;&gt;
		function_start = start
	else: function_start = scan_start
	&lt;&lt; create a child node for the function &gt;&gt;
else: i = g.skip_c_id(s,i)</t>
<t tx="ekr.20031218072017.3283">save_ip = i
i = scan_start
while i &lt; start and g.is_ws_or_nl(s,i):
	i += 1
if i &lt; start:
	parent.appendStringToBody("@ignore\n" + self.rootLine + "@language pascal\n")
	headline = g.angleBrackets(self.methodName + " declarations ")
	# Append the headline to the parent's body.
	parent.appendStringToBody(headline + "\n")
	if self.treeType == "@file":
		body = s[scan_start:start]
	else:
		body = "@code\n\n" + s[scan_start:start]
	body = self.undentBody(body)
	self.createHeadline(parent,body,headline)
i = save_ip
scan_start = i</t>
<t tx="ekr.20031218072017.3284"># Point i _after_ the last character of the function.
i = g.skip_ws(s,i)
if g.is_nl(s,i):
	i = g.skip_nl(s,i)
function_end = i
headline = name
body = s[function_start:function_end]
body = self.massageBody(body,methodKind)
self.createHeadline(parent,body,headline)
scan_start = i</t>
<t tx="ekr.20031218072017.3285">if i &lt; len(s) and g.is_c_id(s[i]):
	j = i ; i = g.skip_c_id(s,i)
	while i + 1 &lt; len(s) and s[i] == '.' and g.is_c_id(s[i+1]):
		i += 1 ; j = i
		i = g.skip_c_id(s,i)
	name = s[j:i]
else: continue</t>
<t tx="ekr.20031218072017.3286">&lt;&lt; skip past the semicolon &gt;&gt;

if not g.match_c_word(s,i,"begin"):
	continue
# Skip to the matching end.
i = g.skip_pascal_begin_end(s,i)
if g.match_c_word(s,i,"end"):
	i = g.skip_c_id(s,i)
	i = g.skip_ws_and_nl(s,i)
	if g.match(s,i,';'):
		i += 1
	i = g.skip_ws(s,i)
	if g.is_nl(s,i):
		i = g.skip_nl(s,i)
else: continue</t>
<t tx="ekr.20031218072017.3287">while i &lt; len(s) and s[i] != ';':
	# The paremeter list may contain "inner" semicolons.
	if s[i] == '(':
		i = g.skip_parens(s,i)
		if g.match(s,i,')'):
			i += 1
		else: break
	else: i += 1
if g.match(s,i,';'):
	i += 1
i = g.skip_ws_and_nl(s,i)

if g.match_c_word(s,i,"var"):
	# Skip to the next begin.
	i = g.skip_c_id(s,i)
	done = false
	while i &lt; len(s) and not done:
		ch = s[i]
		if ch == '{': i = g.skip_pascal_braces(s,i)
		elif g.match(s,i,"//"): i = g.skip_to_end_of_line(s,i)
		elif g.match(s,i,"(*"): i = g.skip_pascal_block_comment(s,i)
		elif g.is_c_id(ch):
			if g.match_c_word(s,i,"begin"): done = true
			else: i = g.skip_c_id(s,i)
		elif ch == '"' or ch == '\'': i = g.skip_pascal_string(s,i)
		else: i += 1</t>
<t tx="ekr.20031218072017.3288"># Append the headline to the parent's body.
if self.treeType == "@file":
	parent.appendStringToBody("@others\n")
else:
	parent.appendStringToBody(
		g.angleBrackets(" " + self.methodName + " methods ") + "\n")</t>
<t tx="ekr.20031218072017.3289"></t>
<t tx="ekr.20031218072017.3290"># Headlines not containing a section reference are ignored in noweb and generate index index in cweb.

def convertCodePartToWeb (self,s,i,v,result):

	# g.trace(g.get_line(s,i))
	c = self.c ; nl = self.output_newline
	lb = g.choose(self.webType=="cweb","@&lt;","&lt;&lt;")
	rb = g.choose(self.webType=="cweb","@&gt;","&gt;&gt;")
	h = string.strip(v.headString())
	&lt;&lt; put v's headline ref in head_ref &gt;&gt;
	&lt;&lt; put name following @root or @file in file_name &gt;&gt;
	if g.match_word(s,i,"@root"):
		i = g.skip_line(s,i)
		&lt;&lt; append ref to file_name &gt;&gt;
	elif g.match_word(s,i,"@c") or g.match_word(s,i,"@code"):
		i = g.skip_line(s,i)
		&lt;&lt; append head_ref &gt;&gt;
	elif g.match_word(h,0,"@file"):
		# Only do this if nothing else matches.
		&lt;&lt; append ref to file_name &gt;&gt;
		i = g.skip_line(s,i) # 4/28/02
	else:
		&lt;&lt; append head_ref &gt;&gt;
	i,result = self.copyPart(s,i,result)
	return i, string.strip(result) + nl
	
@ %defs a b c</t>
<t tx="ekr.20031218072017.3291">@ We look for either noweb or cweb brackets. head_ref does not include these brackets.
@c

head_ref = None
j = 0
if g.match(h,j,"&lt;&lt;"):
	k = string.find(h,"&gt;&gt;",j)
elif g.match(h,j,"&lt;@"):
	k = string.find(h,"@&gt;",j)
else:
	k = -1

if k &gt; -1:
	head_ref = string.strip(h[j+2:k])
	if len(head_ref) == 0:
		head_ref = None</t>
<t tx="ekr.20031218072017.3292">if g.match(h,0,"@file") or g.match(h,0,"@root"):
	line = h[5:]
	line = string.strip(line)
	&lt;&lt; set file_name &gt;&gt;
else:
	file_name = line = None
</t>
<t tx="ekr.20031218072017.3293"># set j &amp; k so line[j:k] is the file name.
# g.trace(`line`)

if g.match(line,0,"&lt;"):
	j = 1 ; k = string.find(line,"&gt;",1)
elif g.match(line,0,'"'):
	j = 1 ; k = string.find(line,'"',1)
else:
	j = 0 ; k = string.find(line," ",0)
if k == -1:
	k = len(line)

file_name = string.strip(line[j:k])
if file_name and len(file_name) == 0:
	file_name = None</t>
<t tx="ekr.20031218072017.3294">if self.webType == "cweb":
	if not file_name:
		result += "@&lt;root@&gt;=" + nl
	else:
		result += "@(" + file_name + "@&gt;" + nl # @(...@&gt; denotes a file.
else:
	if not file_name:
		file_name = "*"
	result += lb + file_name + rb + "=" + nl
</t>
<t tx="ekr.20031218072017.3295">if self.webType == "cweb":
	if not head_ref:
		result += "@^" + h + "@&gt;" + nl # Convert the headline to an index entry.
		result += "@c" + nl # @c denotes a new section.
	else: 
		escaped_head_ref = string.replace(head_ref,"@","@@")
		result += "@&lt;" + escaped_head_ref + "@&gt;=" + nl
else:
	if not head_ref:
		if v == c.currentVnode():
			head_ref = g.choose(file_name,file_name,"*")
		else:
			head_ref = "@others"

	result += lb + head_ref + rb + "=" + nl</t>
<t tx="ekr.20031218072017.3296">def convertDocPartToWeb (self,s,i,result):
	
	nl = self.output_newline

	# g.trace(g.get_line(s,i))
	if g.match_word(s,i,"@doc"):
		i = g.skip_line(s,i)
	elif g.match(s,i,"@ ") or g.match(s,i,"@\t") or g.match(s,i,"@*"):
		i += 2
	elif g.match(s,i,"@\n"):
		i += 1
	i = g.skip_ws_and_nl(s,i)
	i, result2 = self.copyPart(s,i,"")
	if len(result2) &gt; 0:
		# Break lines after periods.
		result2 = string.replace(result2,".  ","." + nl)
		result2 = string.replace(result2,". ","." + nl)
		result += nl+"@"+nl+string.strip(result2)+nl+nl
	else:
		# All nodes should start with '@', even if the doc part is empty.
		result += g.choose(self.webType=="cweb",nl+"@ ",nl+"@"+nl)
	return i, result</t>
<t tx="ekr.20031218072017.3297">@ This code converts a vnode to noweb text as follows:

Convert @doc to @
Convert @root or @code to &lt;&lt; name &gt;&gt;=, assuming the headline contains &lt;&lt; name &gt;&gt;
Ignore other directives
Format doc parts so they fit in pagewidth columns.
Output code parts as is.
@c

def convertVnodeToWeb (self,v):

	if not v: return ""
	startInCode = not g.app.config.at_root_bodies_start_in_doc_mode
	nl = self.output_newline
	s = v.bodyString()
	lb = g.choose(self.webType=="cweb","@&lt;","&lt;&lt;")
	i = 0 ; result = "" ; docSeen = false
	while i &lt; len(s):
		progress = i
		# g.trace(g.get_line(s,i))
		i = g.skip_ws_and_nl(s,i)
		if self.isDocStart(s,i) or g.match_word(s,i,"@doc"):
			i,result = self.convertDocPartToWeb(s,i,result)
			docSeen = true
		elif (g.match_word(s,i,"@code") or g.match_word(s,i,"@root") or
			g.match_word(s,i,"@c") or g.match(s,i,lb)):
			&lt;&lt; Supply a missing doc part &gt;&gt;
			i,result = self.convertCodePartToWeb(s,i,v,result)
		elif self.treeType == "@file" or startInCode:
			&lt;&lt; Supply a missing doc part &gt;&gt;
			i,result = self.convertCodePartToWeb(s,i,v,result)
		else:
			i,result = self.convertDocPartToWeb(s,i,result)
			docSeen = true
		assert(progress &lt; i)
	result = string.strip(result)
	if len(result) &gt; 0:
		result += nl
	return result</t>
<t tx="ekr.20031218072017.3298">if not docSeen:
	docSeen = true
	result += g.choose(self.webType=="cweb",nl+"@ ",nl+"@"+nl)</t>
<t tx="ekr.20031218072017.3299"># Copies characters to result until the end of the present section is seen.

def copyPart (self,s,i,result):

	# g.trace(g.get_line(s,i))
	lb = g.choose(self.webType=="cweb","@&lt;","&lt;&lt;")
	rb = g.choose(self.webType=="cweb","@&gt;","&gt;&gt;")
	type = self.webType
	while i &lt; len(s):
		progress = j = i # We should be at the start of a line here.
		i = g.skip_nl(s,i) ; i = g.skip_ws(s,i)
		if self.isDocStart(s,i):
			return i, result
		if (g.match_word(s,i,"@doc") or
			g.match_word(s,i,"@c") or
			g.match_word(s,i,"@root") or
			g.match_word(s,i,"@code")): # 2/25/03
			return i, result
		elif (g.match(s,i,"&lt;&lt;") and # must be on separate lines.
			g.find_on_line(s,i,"&gt;&gt;=") &gt; -1):
			return i, result
		else:
			# Copy the entire line, escaping '@' and
			# Converting @others to &lt; &lt; @ others &gt; &gt;
			i = g.skip_line(s,j) ; line = s[j:i]
			if type == "cweb":
				line = string.replace(line,"@","@@")
			else:
				j = g.skip_ws(line,0)
				if g.match(line,j,"@others"):
					line = string.replace(line,"@others",lb + "@others" + rb)
				elif g.match(line,0,"@"):
					# Special case: do not escape @ %defs.
					k = g.skip_ws(line,1)
					if not g.match(line,k,"%defs"):
						line = "@" + line
			result += line
		assert(progress &lt; i)
	return i, string.rstrip(result)</t>
<t tx="ekr.20031218072017.3300">def removeSentinelsCommand (self,fileName):

	self.setEncoding()
	path, self.fileName = g.os_path_split(fileName) # path/fileName
	&lt;&lt; Read file into s &gt;&gt;
	valid = true
	line_delim = start_delim = end_delim = None
	&lt;&lt; set delims from the header line &gt;&gt;
	if valid == false:
		g.es("invalid @+leo sentinel in " + fileName)
		return

	# g.trace("line: '%s', start: '%s', end: '%s'" % (line_delim,start_delim,end_delim))

	s = self.removeSentinelLines(s,line_delim,start_delim,end_delim)
	ext = g.app.config.remove_sentinels_extension
	if ext == None or len(ext) == 0:
		ext = ".txt"
	if ext[0] == '.':
		newFileName = g.os_path_join(path,fileName+ext)
	else:
		head,ext2 = g.os_path_splitext(fileName) 
		newFileName = g.os_path_join(path,head+ext+ext2)
	&lt;&lt; Write s into newFileName &gt;&gt;</t>
<t tx="ekr.20031218072017.3301">try:
	file = open(fileName)
	s = file.read()
	s = g.toUnicode(s,self.encoding)
	file.close()
except:
	g.es("Can not open " + fileName, color="blue")
	import leoTest ; leoTest.fail()
	return</t>
<t tx="ekr.20031218072017.3302"># This code is similar to atFile::scanHeader.

tag = "@+leo" ; tag2 = "-ver="
# Skip any non @+leo lines.
i = 0
while i &lt; len(s) and not g.find_on_line(s,i,tag):
	i = g.skip_line(s,i)
# We should be at the @+leo line.
i = j = g.skip_ws(s,i)
# The opening comment delim is the initial non-whitespace.
while i &lt; len(s) and not g.match(s,i,tag) and not g.is_ws(s[i]) and not g.is_nl(s,i):
	i += 1
if j &lt; i: line_delim = s[j:i]
else: valid = false
# Make sure we have @+leo
i = g.skip_ws(s,i)
if g.match(s,i,tag): i += len(tag)
else: valid = false
# Skip a version tag. Bug fix: 10/15/03
if valid and g.match(s,i,tag2):
	i += len(tag2) + 1 # Skip the tag and the actual version.
# The closing comment delim is the trailing non-whitespace.
i = j = g.skip_ws(s,i)
while i &lt; len(s) and not g.is_ws(s[i]) and not g.is_nl(s,i):
	i += 1
if j &lt; i:
	start_delim = line_delim
	end_delim = s[j:i]
	line_delim = None</t>
<t tx="ekr.20031218072017.3303">@ Properly removes all sentinel lines in s.  Only leading single-line comments may be sentinels.

line_delim, start_delim and end_delim are the comment delimiters.
@c

def removeSentinelLines(self,s,line_delim,start_delim,end_delim):

	i = 0 ; result = [] ; first = true
	while i &lt; len(s):
		start = i # The start of the next syntax element.
		if first or g.is_nl(s,i):
			first = false
			&lt;&lt; handle possible sentinel &gt;&gt;
		elif g.match(s,i,line_delim):
			i = g.skip_to_end_of_line(s,i)
		elif g.match(s,i,start_delim):
			i = g.skip_matching_delims(s,i,start_delim,end_delim)
		elif g.match(s,i,"'") or g.match(s,i,'"'):
			i = g.skip_string(s,i)
		else:
			i += 1
		assert(i==0 or start&lt;i)
		result.append(s[start:i])# 12/11/03: hugely faster than string concatenation.

	result = ''.join(result) 
	return result</t>
<t tx="ekr.20031218072017.3304">i = g.skip_nl(s,i)
i = g.skip_ws(s,i)

if line_delim:
	if g.match(s,i,line_delim):
		j = i + len(line_delim)
		i = g.skip_to_end_of_line(s,i)
		if g.match(s,j,"@"):
			continue # Remove the sentinel.
elif start_delim:
	if g.match(s,i,start_delim):
		j = i + len(start_delim)
		i = g.skip_matching_delims(s,i,start_delim,end_delim)
		if g.match(s,j,"@"):
			continue # Remove the sentinel.</t>
<t tx="ekr.20031218072017.3305"></t>
<t tx="ekr.20031218072017.3306">def createHeadline (self,parent,body,headline):

	# g.trace("parent,headline:" + `parent` + ":" + `headline`)
	# Create the vnode.
	v = parent.insertAsLastChild()
	v.initHeadString(headline,self.encoding)
	# Set the body.
	if len(body) &gt; 0:
		v.setBodyStringOrPane(body,self.encoding)
	return v</t>
<t tx="ekr.20031218072017.3307">def error (self,s): g.es(s)</t>
<t tx="ekr.20031218072017.3308">def getLeadingIndent (self,s,i):

	"""Return the leading whitespace of a line, ignoring blank and comment lines."""

	c = self.c
	i = g.find_line_start(s,i)
	while i &lt; len(s):
		# g.trace(`g.get_line(s,i)`)
		j = g.skip_ws(s,i) # Bug fix: 2/14/03
		if g.is_nl(s,j) or g.match(s,j,"#"): # Bug fix: 2/14/03
			i = g.skip_line(s,i) # ignore blank lines and comment lines.
		else:
			i, width = g.skip_leading_ws_with_indent(s,i,c.tab_width)
			# g.trace("returns:" + `width`)
			return width
	# g.trace("returns:0")
	return 0</t>
<t tx="ekr.20031218072017.3309"># The start of a document part or module in a noweb or cweb file.
# Exporters may have to test for @doc as well.

def isDocStart (self,s,i):
	
	if not g.match(s,i,"@"):
		return false

	j = g.skip_ws(s,i+1)
	if g.match(s,j,"%defs"):
		return false
	elif self.webType == "cweb" and g.match(s,i,"@*"):
		return true
	else:
		return g.match(s,i,"@ ") or g.match(s,i,"@\t") or g.match(s,i,"@\n")

def isModuleStart (self,s,i):

	if self.isDocStart(s,i):
		return true
	else:
		return self.webType == "cweb" and (
			g.match(s,i,"@c") or g.match(s,i,"@p") or
			g.match(s,i,"@d") or g.match(s,i,"@f"))
</t>
<t tx="ekr.20031218072017.3310">def massageBody (self,s,methodKind):
	
	# g.trace(`s`)
	# g.trace(`g.get_line(s,0)`)
	c = self.c
	if self.treeType == "@file":
		if self.fileType == ".py": # 7/31/02: was "py"
			return self.undentBody(s)
		else:
			newBody, comment = self.skipLeadingComments(s)
			newBody = self.undentBody(newBody)
			newLine = g.choose(g.is_nl(newBody,0),"\n","\n\n")
			if len(comment) &gt; 0:
				return comment + "\n@c" + newLine + newBody
			else:
				return newBody
	else:
		# Inserts &lt; &lt; self.methodName methodKind &gt; &gt; =
		cweb = self.fileType == "c" and not c.use_noweb_flag
		lb = g.choose(cweb,"@&lt;","&lt;&lt;")
		rb = g.choose(cweb,"@&gt;=","&gt;&gt;=")
		intro = lb + " " + self.methodName + " " + methodKind + " " + rb
		if self.fileType == ".py": # 7/31/02: was "py"
			newBody = self.undentBody(s)
			newLine = g.choose(g.is_nl(newBody,0),"\n","\n\n")
			return intro + newLine + newBody
		else:
			newBody, comment = self.skipLeadingComments(s)
			newBody = self.undentBody(newBody)
			newLine = g.choose(g.is_nl(newBody,0),"\n","\n\n")
			if len(comment) &gt; 0:
				return comment + "\n" + intro + newLine + newBody
			else:
				return intro + newLine + newBody</t>
<t tx="ekr.20031218072017.3311">def massageComment (self,s):

	"""Returns s with all runs of whitespace and newlines converted to a single blank.
	
	Also removes leading and trailing whitespace."""

	# g.trace(`g.get_line(s,0)`)
	s = string.strip(s)
	s = string.replace(s,"\n"," ")
	s = string.replace(s,"\r"," ")
	s = string.replace(s,"\t"," ")
	s = string.replace(s,"  "," ")
	s = string.strip(s)
	return s</t>
<t tx="ekr.20031218072017.3312">def massageWebBody (self,s):

	type = self.webType
	lb = g.choose(type=="cweb","@&lt;","&lt;&lt;")
	rb = g.choose(type=="cweb","@&gt;","&gt;&gt;")
	&lt;&lt; Remove most newlines from @space and @* sections &gt;&gt;
	&lt;&lt; Replace abbreviated names with full names &gt;&gt;
	s = string.rstrip(s)
	return s</t>
<t tx="ekr.20031218072017.3313">i = 0
while i &lt; len(s):
	i = g.skip_ws_and_nl(s,i)
	if self.isDocStart(s,i):
		# Scan to end of the doc part.
		if g.match(s,i,"@ %def"):
			# Don't remove the newline following %def
			i = g.skip_line(s,i) ; start = end = i
		else:
			start = end = i ; i += 2
		while i &lt; len(s):
			i = g.skip_ws_and_nl(s,i)
			if self.isModuleStart(s,i) or g.match(s,i,lb):
				end = i ; break
			elif type == "cweb": i += 1
			else: i = g.skip_to_end_of_line(s,i)
		# Remove newlines from start to end.
		doc = s[start:end]
		doc = string.replace(doc,"\n"," ")
		doc = string.replace(doc,"\r","")
		doc = string.strip(doc)
		if doc and len(doc) &gt; 0:
			if doc == "@":
				doc = g.choose(self.webType=="cweb", "@ ","@\n")
			else:
				doc += "\n\n"
			# g.trace("new doc:" + `doc`)
			s = s[:start] + doc + s[end:]
			i = start + len(doc)
	else: i = g.skip_line(s,i)</t>
<t tx="ekr.20031218072017.3314">i = 0
while i &lt; len(s):
	# g.trace(`g.get_line(s,i)`)
	if g.match(s,i,lb):
		i += 2 ; j = i ; k = g.find_on_line(s,j,rb)
		if k &gt; -1:
			name = s[j:k]
			name2 = self.cstLookup(name)
			if name != name2:
				# Replace name by name2 in s.
				# g.trace("replacing:" + `name` + ", by:" + `name2`)
				s = s[:j] + name2 + s[k:]
				i = j + len(name2)
	i = g.skip_line(s,i)</t>
<t tx="ekr.20031218072017.3315">def skipLeadingComments (self,s):

	"""Skips all leading comments in s, returning the remaining body text and the massaged comment text.

	Returns (body, comment)"""

	# g.trace(`g.get_line(s,0)`)
	s_original = s
	s = string.lstrip(s)
	i = 0 ; comment = ""
	if self.fileType in [".c", ".cpp"]: # 11/2/02: don't mess with java comments.
		&lt;&lt; scan for C-style comments &gt;&gt;
	elif self.fileType == ".pas":
		&lt;&lt; scan for Pascal comments &gt;&gt;
	elif self.fileType == ".py":
		&lt;&lt; scan for Python comments &gt;&gt;
	comment = string.strip(comment)
	if len(comment) == 0:
		return s_original, "" # Bug fix: 11/2/02: don't skip leading whitespace!
	elif self.treeType == "@file":
		return s[i:], "@ " + comment
	else:
		return s[i:], "@ " + comment + "\n"</t>
<t tx="ekr.20031218072017.3316">while i &lt; len(s):
	if g.match(s,i,"//"): # Handle a C++ comment.
		while g.match(s,i,'/'):
			i += 1
		j = i ; i = g.skip_line(s,i)
		comment = comment + self.massageComment(s[j:i]) + "\n"
		# 8/2/02: Preserve leading whitespace for undentBody
		i = g.skip_ws(s,i)
		i = g.skip_blank_lines(s,i)
	elif g.match(s,i,"/*"): # Handle a block C comment.
		j = i + 2 ; i = g.skip_block_comment (s,i)
		k = g.choose(g.match(s,i-2,"*/"),i-2,i)
		if self.fileType == ".java":
			# 8/2/02: a hack: add leading whitespace then remove it.
			comment = self.undentBody(comment)
			comment2 = ' ' * 2 + s[j:k]
			comment2 = self.undentBody(comment2)
			comment = comment + comment2 + "\n"
		else:
			comment = comment + self.massageComment(s[j:k]) + "\n"
		# 8/2/02: Preserve leading whitespace for undentBody
		i = g.skip_ws(s,i)
		i = g.skip_blank_lines(s,i)
	else: break</t>
<t tx="ekr.20031218072017.3317">while i &lt; len(s):
	if g.match(s,i,"//"): # Handle a Pascal line comment.
		while g.match(s,i,'/'):
			i += 1
		j = i ; i = g.skip_line(s,i)
		comment = comment + self.massageComment(s[j:i]) + "\n"
		# 8/2/02: Preserve leading whitespace for undentBody
		i = g.skip_ws(s,i)
		i = g.skip_blank_lines(s,i)
	elif g.match(s,i,'(*'):
		j = i + 1 ; i = g.skip_pascal_block_comment(s,i)
		comment = comment + self.massageComment(s[j:i]) + "\n"
		# 8/2/02: Preserve leading whitespace for undentBody
		i = g.skip_ws(s,i)
		i = g.skip_blank_lines(s,i)
	else: break</t>
<t tx="ekr.20031218072017.3318">while i &lt; len(s) and g.match(s,i,'#'):
	j = i + 1 ; i = g.skip_line(s,i)
	comment = self.undentBody(comment)
	comment = comment + self.massageComment(s[j:i]) + "\n"
	# 8/2/02: Preserve leading whitespace for undentBody
	i = g.skip_ws(s,i)
	i = g.skip_blank_lines(s,i)</t>
<t tx="ekr.20031218072017.3319"># We look at the first line to determine how much leading whitespace to delete.

def undentBody (self,s):

	"""Removes extra leading indentation from all lines."""

	# g.trace(`s`)
	c = self.c
	i = 0 ; result = ""
	# Copy an @code line as is.
	if g.match(s,i,"@code"):
		j = i ; i = g.skip_line(s,i) # don't use get_line: it is only for dumping.
		result += s[j:i]
	# Calculate the amount to be removed from each line.
	undent = self.getLeadingIndent(s,i)
	if undent == 0: return s
	while i &lt; len(s):
		j = i ; i = g.skip_line(s,i) # don't use get_line: it is only for dumping.
		line = s[j:i]
		# g.trace(`line`)
		line = g.removeLeadingWhitespace(line,undent,c.tab_width)
		result += line
	return result</t>
<t tx="ekr.20031218072017.3320">@language python

&lt;&lt; About the vnode and tnode classes &gt;&gt;
&lt;&lt; About clones &gt;&gt;

import leoGlobals as g
from leoGlobals import true,false

import string,time,types

@others</t>
<t tx="ekr.20031218072017.3321">class baseTnode:
	"""The base class of the tnode class."""
	&lt;&lt; tnode constants &gt;&gt;
	@others
	
class tnode (baseTnode):
	"""A class that implements tnodes."""
	pass</t>
<t tx="ekr.20031218072017.3322">dirtyBit =		0x01
richTextBit =	0x02 # Determines whether we use &lt;bt&gt; or &lt;btr&gt; tags.
visitedBit =	0x04</t>
<t tx="ekr.20031218072017.3323">def __repr__ (self):
	
	return "&lt;tnode %d&gt;" % (id(self))
		
__str__ = __repr__</t>
<t tx="ekr.20031218072017.3324">def extraAttributes (self):

	try:    return self.unknownAttributes
	except: return None
	
def setExtraAttributes (self,attributes):
	
	if attributes != None:
		self.unknownAttributes = attributes</t>
<t tx="ekr.20031218072017.3325"></t>
<t tx="ekr.20031218072017.3326">def hasBody (self):

	return self.bodyString and len(self.bodyString) &gt; 0</t>
<t tx="ekr.20031218072017.3327"></t>
<t tx="ekr.20031218072017.3328">def isDirty (self):

	return (self.statusBits &amp; self.dirtyBit) != 0</t>
<t tx="ekr.20031218072017.3329">def isRichTextBit (self):

	return (self.statusBits &amp; self.richTextBit) != 0</t>
<t tx="ekr.20031218072017.3330">def isVisited (self):

	return (self.statusBits &amp; self.visitedBit) != 0</t>
<t tx="ekr.20031218072017.3331"></t>
<t tx="ekr.20031218072017.3332"></t>
<t tx="ekr.20031218072017.3333">def clearDirty (self):

	self.statusBits &amp;= ~ self.dirtyBit</t>
<t tx="ekr.20031218072017.3334">def clearRichTextBit (self):

	self.statusBits &amp;= ~ self.richTextBit</t>
<t tx="ekr.20031218072017.3335">def clearVisited (self):

	self.statusBits &amp;= ~ self.visitedBit</t>
<t tx="ekr.20031218072017.3336">def setDirty (self):

	self.statusBits |= self.dirtyBit</t>
<t tx="ekr.20031218072017.3337">def setRichTextBit (self):

	self.statusBits |= self.richTextBit</t>
<t tx="ekr.20031218072017.3338">def setVisited (self):

	self.statusBits |= self.visitedBit</t>
<t tx="ekr.20031218072017.3339">def setCloneIndex (self, index):

	self.cloneIndex = index</t>
<t tx="ekr.20031218072017.3340">def setFileIndex (self, index):

	self.fileIndex = index</t>
<t tx="ekr.20031218072017.3341">class baseVnode:
	"""The base class of the vnode class."""
	&lt;&lt; vnode constants &gt;&gt;
	@others
	
class vnode (baseVnode):
	"""A class that implements vnodes."""
	pass</t>
<t tx="ekr.20031218072017.3342"></t>
<t tx="ekr.20031218072017.3343">if 0: # not used
	def __cmp__(self,other):
		
		g.trace(`self` + "," + `other`)
		return not (self is other) # Must return 0, 1 or -1</t>
<t tx="ekr.20031218072017.3344">def __init__ (self,c,t):

	assert(t)
	&lt;&lt; initialize vnode data members &gt;&gt;
</t>
<t tx="ekr.20031218072017.3345">def __repr__ (self):
	
	if self.t:
		return "&lt;vnode %d:%s&gt;" % (id(self),`self.t.headString`)
	else:
		return "&lt;vnode %d:NULL tnode&gt;" % (id(self))
		
__str__ = __repr__
</t>
<t tx="ekr.20031218072017.3346"></t>
<t tx="ekr.20031218072017.3347"># 12/03/02: We now handle @file options here.

def afterHeadlineMatch(self,s):
	
	h = self.headString()

	if s != "@file" and g.match_word(h,0,s):
		# No options are valid.
		return string.strip(h[len(s):])
	elif g.match(h,0,"@file"):
		i,atFileType,junk = g.scanAtFileOptions(h)
		if s == atFileType:
			# print "s,h:",s,h
			return string.strip(h[i:])
		else: return ""
	else: return ""
</t>
<t tx="ekr.20031218072017.3348">@ Returns the filename following @file or @rawfile, in the receivers's headline, or the empty string if the receiver is not an @file node.
@c

def atFileNodeName (self):
	return self.afterHeadlineMatch("@file")
	
def atNoSentinelsFileNodeName (self):
	return self.afterHeadlineMatch("@nosentinelsfile")
	
def atRawFileNodeName (self):
	return self.afterHeadlineMatch("@rawfile")
	
def atSilentFileNodeName (self):
	return self.afterHeadlineMatch("@silentfile")
</t>
<t tx="ekr.20031218072017.3349"># Returns true if the receiver's headline starts with @file.
def isAtFileNode (self):
	s = self.atFileNodeName()
	return len(s) &gt; 0
	
# Returns true if the receiver's headline starts with @rawfile.
def isAtNoSentinelsFileNode (self):
	s = self.atNoSentinelsFileNodeName()
	return len(s) &gt; 0
	
# Returns true if the receiver's headline starts with @rawfile.
def isAtRawFileNode (self):
	s = self.atRawFileNodeName()
	return len(s) &gt; 0

# Returns true if the receiver's headline starts with @silentfile.
def isAtSilentFileNode (self):
	s = self.atSilentFileNodeName()
	return len(s) &gt; 0
</t>
<t tx="ekr.20031218072017.3350">def isAnyAtFileNode (self):

	return (
		self.isAtFileNode() or
		self.isAtNoSentinelsFileNode() or
		self.isAtRawFileNode() or
		self.isAtSilentFileNode())
		
def anyAtFileNodeName (self):

	if self.isAtFileNode():
		return self.atFileNodeName()
	elif self.isAtNoSentinelsFileNode():
		return self.atNoSentinelsFileNodeName()
	elif self.isAtRawFileNode():
		return self.atRawFileNodeName()
	elif self.isAtSilentFileNode():
		return self.atSilentFileNodeName()
	else:
		return ""
</t>
<t tx="ekr.20031218072017.3351">def isAtIgnoreNode (self):

	"""Returns true if the receiver contains @ignore in its body at the start of a line."""

	flag, i = g.is_special(self.t.bodyString, 0, "@ignore")
	return flag
</t>
<t tx="ekr.20031218072017.3352">def isAtOthersNode (self):

	"""Returns true if the receiver contains @others in its body at the start of a line."""

	flag, i = g.is_special(self.t.bodyString,0,"@others")
	return flag
</t>
<t tx="ekr.20031218072017.3353">def matchHeadline (self,pattern):

	"""Returns true if the headline matches the pattern ignoring whitespace and case.
	
	The headline may contain characters following the successfully matched pattern."""

	h = string.lower(self.headString())
	h = string.replace(h,' ','')
	h = string.replace(h,'\t','')

	s = string.lower(pattern)
	s = string.replace(s,' ','')
	s = string.replace(s,'\t','')

	# ignore characters in the headline following the match
	return s == h[0:len(s)]
</t>
<t tx="ekr.20031218072017.3354"></t>
<t tx="ekr.20031218072017.3355"># Converts the outline to a string in "MORE" format

def convertTreeToString (self):

	v = self
	level1 = v.level()
	after = v.nodeAfterTree()
	s = ""
	while v and v != after:
		s += v.moreHead(level1) + "\n"
		body = v.moreBody()
		if len(body) &gt; 0:
			s += body + "\n"
		v = v.threadNext()
	return s</t>
<t tx="ekr.20031218072017.3356"># Returns the headline string in MORE format.

def moreHead (self, firstLevel,useVerticalBar=false):

	v = self
	level = self.level() - firstLevel
	if level &gt; 0: s = "\t" * level
	else: s = ""
	s += g.choose(v.hasChildren(), "+ ", "- ")
	s += v.headString()
	return s</t>
<t tx="ekr.20031218072017.3357">@ 
	+ test line
	- test line
	\ test line
	test line +
	test line -
	test line \
	More lines...
@c

def moreBody (self):

	"""Returns the body string in MORE format.  
	
	Inserts a backslash before any leading plus, minus or backslash."""

	v = self ; list = []
	
	if 1: # new code: only escape the first non-blank character of the line.
		s =  v.t.bodyString ; result = []
		lines = string.split(s,'\n')
		for s in lines:
			i = g.skip_ws(s,0)
			if i &lt; len(s):
				ch = s[i]
				if ch == '+' or ch == '-' or ch == '\\':
					s = s[:i] + '\\' + s[i:]
			result.append(s)
		return string.join(result,'\n')

	else: # pre 3.1 code.
		for ch in v.t.bodyString:
			if ch == '+' or ch == '-' or ch == '\\':
				list.append('\\')
			list.append(ch)
		return string.join(list,'')</t>
<t tx="ekr.20031218072017.3358">def extraAttributes (self):

	try:    tnodeList = self.tnodeList
	except: tnodeList = None
	
	try:    unknownAttributes = self.unknownAttributes
	except: unknownAttributes = None

	return tnodeList, unknownAttributes
	
def setExtraAttributes (self,data):
	
	tnodeList, unknownAttributes = data

	if tnodeList != None:
		self.tnodeList = tnodeList

	if unknownAttributes != None:
		self.unknownAttributes = unknownAttributes</t>
<t tx="ekr.20031218072017.3359"></t>
<t tx="ekr.20031218072017.3360"></t>
<t tx="ekr.20031218072017.3361"># childIndex and nthChild are zero-based.

def childIndex (self):
	
	
	if 0: # old code:
		parent=self.parent()
		if not parent: return 0
	
		child = parent.firstChild()
		n = 0
		while child:
			if child == self: return n
			n += 1 ; child = child.next()
		assert(false)</t>
<t tx="ekr.20031218072017.3362">def firstChild (self):
	
	return self.t._firstChild</t>
<t tx="ekr.20031218072017.3363">def hasChildren (self):

	return self.firstChild() != None</t>
<t tx="ekr.20031218072017.3364">def lastChild (self):

	child = self.firstChild()
	while child and child.next():
		child = child.next()
	return child</t>
<t tx="ekr.20031218072017.3365"># childIndex and nthChild are zero-based.

def nthChild (self, n):

	child = self.firstChild()
	if not child: return None
	while n &gt; 0 and child:
		n -= 1
		child = child.next()
	return child</t>
<t tx="ekr.20031218072017.3366">def numberOfChildren (self):

	n = 0
	child = self.firstChild()
	while child:
		n += 1
		child = child.next()
	return n</t>
<t tx="ekr.20031218072017.3367"></t>
<t tx="ekr.20031218072017.3368">def isCloned (self):
	
	return len(self.t.vnodeList) &gt; 1</t>
<t tx="ekr.20031218072017.3369">def isDirty (self):

	return self.t.isDirty()</t>
<t tx="ekr.20031218072017.3370">def isExpanded (self):

	return ( self.statusBits &amp; self.expandedBit ) != 0</t>
<t tx="ekr.20031218072017.3371">def isMarked (self):

	return ( self.statusBits &amp; vnode.markedBit ) != 0</t>
<t tx="ekr.20031218072017.3372">def isOrphan (self):

	return ( self.statusBits &amp; vnode.orphanBit ) != 0</t>
<t tx="ekr.20031218072017.3373">def isSelected (self):

	return ( self.statusBits &amp; vnode.selectedBit ) != 0</t>
<t tx="ekr.20031218072017.3374">def isTopBitSet (self):

	return ( self.statusBits &amp; self.topBit ) != 0</t>
<t tx="ekr.20031218072017.3375"># Returns true if all parents are expanded.

def isVisible (self):
	
	v = self.parent()
	while v:
		if not v.isExpanded():
			return false
		v = v.parent()
	return true</t>
<t tx="ekr.20031218072017.3376">def isVisited (self):

	return ( self.statusBits &amp; vnode.visitedBit ) != 0</t>
<t tx="ekr.20031218072017.3377">def status (self):

	return self.statusBits</t>
<t tx="ekr.20031218072017.3378"># Compatibility routine for scripts

def bodyString (self):

	# This message should never be printed and we want to avoid crashing here!
	if not g.isUnicode(self.t.bodyString):
		s = "Leo internal error: not unicode:" + `self.t.bodyString`
		print s ; g.es(s,color="red")

	# Make _sure_ we return a unicode string.
	return g.toUnicode(self.t.bodyString,g.app.tkEncoding)</t>
<t tx="ekr.20031218072017.3379">def currentPosition (self):
	return self.c.currentPosition()
		
def currentVnode (self):
	return self.c.currentVnode()</t>
<t tx="ekr.20031218072017.3380">def edit_text (self):

	v = self

	return self.c.frame.tree.getEditTextDict(v)</t>
<t tx="ekr.20031218072017.3381">def findRoot (self):
	
	return self.c.rootPosition()</t>
<t tx="ekr.20031218072017.3382">def isRoot (self):

	return not self.parent() and not self.back()</t>
<t tx="ekr.20031218072017.3383">def exists(self,c):
	
	"""Return true if v exists in c's tree"""
	
	v = self ; c = v.c
	
	# This code must be fast.
	root = c.rootVnode()
	while v:
		if v == root:
			return true
		pv = v.parent()
		if pv:
			v = pv
		else:
			v = v.back()
		
	return false</t>
<t tx="ekr.20031218072017.3384"></t>
<t tx="ekr.20031218072017.3385">def computeIcon (self):

	val = 0 ; v = self
	if v.t.hasBody(): val += 1
	if v.isMarked(): val += 2
	if v.isCloned(): val += 4
	if v.isDirty(): val += 8
	return val
	
def setIcon (self):

	pass # Compatibility routine for old scripts</t>
<t tx="ekr.20031218072017.3386"></t>
<t tx="ekr.20031218072017.3387"># Compatibility routine for scripts

def clearAllVisited (self):
	
	self.c.clearAllVisited()
</t>
<t tx="ekr.20031218072017.3388">def clearAllVisitedInTree (self):
	
	for p in self.subtree_iter():
		p.v.clearVisited()
		p.v.t.clearVisited()</t>
<t tx="ekr.20031218072017.3389">def clearClonedBit (self):

	self.statusBits &amp;= ~ self.clonedBit</t>
<t tx="ekr.20031218072017.3390">def clearDirty (self):

	v = self
	v.t.clearDirty()

def clearDirtyJoined (self):

	g.trace()
	v = self ; c = v.c
	c.beginUpdate()
	v.t.clearDirty()
	c.endUpdate() # recomputes all icons</t>
<t tx="ekr.20031218072017.3391">def clearMarked (self):

	self.statusBits &amp;= ~ self.markedBit
	g.doHook("clear-mark",c=self.c,v=self)</t>
<t tx="ekr.20031218072017.3392">def clearOrphan (self):

	self.statusBits &amp;= ~ self.orphanBit</t>
<t tx="ekr.20031218072017.3393">def clearVisited (self):

	self.statusBits &amp;= ~ self.visitedBit</t>
<t tx="ekr.20031218072017.3395">def contract(self):

	self.statusBits &amp;= ~ self.expandedBit

def expand(self):

	self.statusBits |= self.expandedBit

def initExpandedBit (self):

	self.statusBits |= self.expandedBit</t>
<t tx="ekr.20031218072017.3396">def initStatus (self, status):

	self.statusBits = status</t>
<t tx="ekr.20031218072017.3397">def setClonedBit (self):

	self.statusBits |= self.clonedBit

def initClonedBit (self, val):

	if val:
		self.statusBits |= self.clonedBit
	else:
		self.statusBits &amp;= ~ self.clonedBit</t>
<t tx="ekr.20031218072017.3398">def setMarked (self):

	self.statusBits |= self.markedBit
	g.doHook("set-mark",c=self.c,v=self)

def initMarkedBit (self):

	self.statusBits |= self.markedBit</t>
<t tx="ekr.20031218072017.3399">def setOrphan (self):

	self.statusBits |= self.orphanBit</t>
<t tx="ekr.20031218072017.3400"># This only sets the selected bit.

def setSelected (self):

	self.statusBits |= self.selectedBit</t>
<t tx="ekr.20031218072017.3401"># Compatibility routine for scripts

def setVisited (self):

	self.statusBits |= self.visitedBit</t>
<t tx="ekr.20031218072017.3402">def setSelection (self, start, length):

	self.t.setSelection ( start, length )</t>
<t tx="ekr.20031218072017.3403">def setT (self, t):

	if t != self:
		del self.t
		self.t = t</t>
<t tx="ekr.20031218072017.3404">def trimTrailingLines (self):

	"""Trims trailing blank lines from a node.
	
	It is surprising difficult to do this during Untangle."""

	v = self
	body = v.bodyString()
	# g.trace(`body`)
	lines = string.split(body,'\n')
	i = len(lines) - 1 ; changed = false
	while i &gt;= 0:
		line = lines[i]
		j = g.skip_ws(line,0)
		if j + 1 == len(line):
			del lines[i]
			i -= 1 ; changed = true
		else: break
	if changed:
		body = string.join(body,'') + '\n' # Add back one last newline.
		# g.trace(`body`)
		v.setBodyStringOrPane(body)
		# Don't set the dirty bit: it would just be annoying.
</t>
<t tx="ekr.20031218072017.3405"></t>
<t tx="ekr.20031218072017.3406"># Compatibility routine for scripts

def back (self):

	return self._back</t>
<t tx="ekr.20031218072017.3407">def lastNode (self):

	v = self
	level = self.level()
	result = None

	while v:
		result = v
		v = v.threadNext()
		if not v or v.level() &lt;= level:
			break

	return result</t>
<t tx="ekr.20031218072017.3408">def level (self):

	"""Returns the indentation level of the receiver.
	
	The root nodes have level 0, their children have level 1, and so on."""

	level = 0 ; parent = self.parent()
	while parent:
		level += 1
		parent = parent.parent()
	return level
</t>
<t tx="ekr.20031218072017.3409"># Compatibility routine for scripts

def next (self):

	return self._next</t>
<t tx="ekr.20031218072017.3410"># Returns the vnode following the tree whose root is the receiver.

def nodeAfterTree (self):

	next = self.next()
	pv = self.parent()

	while not next and pv:
		next = pv.next()
		pv = pv.parent()

	return next</t>
<t tx="ekr.20031218072017.3411"># Compatibility routine for scripts

def parent (self):

	return self._parent</t>
<t tx="ekr.20031218072017.3412">def threadBack (self):
	
	"""Returns the previous element of the outline, or None if at the start of the outline"""

	back = self.back()
	if back:
		lastChild = back.lastChild()
		if lastChild:
			return lastChild.lastNode()
		else:
			return back
	else:
		return self.parent()</t>
<t tx="ekr.20031218072017.3413">def threadNext (self):

	"""Returns node following the receiver in "threadNext" order"""

	# g.stat()
	v = self
	if v.firstChild():
		return v.firstChild()
	elif v.next():
		return v.next()
	else:
		pv = v.parent()
		while pv:
			if pv.next():
				return pv.next()
			pv = pv.parent()
		return None</t>
<t tx="ekr.20031218072017.3414">def visBack (self):

	v = self.threadBack()
	while v and not v.isVisible():
		v = v.threadBack()
	return v</t>
<t tx="ekr.20031218072017.3415">def visNext (self):

	v = self.threadNext()
	while v and not v.isVisible():
		v = v.threadNext()
	return v</t>
<t tx="ekr.20031218072017.3416"></t>
<t tx="ekr.20031218072017.3417"></t>
<t tx="ekr.20031218072017.3418">@ This is the main delete routine.  It deletes the receiver's entire tree from the screen.  Because of the undo command we never actually delete vnodes or tnodes.
@c

def doDelete (self,newPosition):

	"""Unlinks the receiver, but does not destroy it. May be undone."""

	v = self ; c = v.c

	v.setDirty() # Mark @file nodes dirty!
	v.unlink()

	# We must set the currentVnode here!
	c.selectVnode(newPosition)
	return self</t>
<t tx="ekr.20031218072017.3419">def insertAfter (self,t=None):

	"""Inserts a new vnode after self"""

	if not t:
		t = tnode(headString="NewHeadline")

	v = vnode(self.c,t)
	v.linkAfter(self)

	return v</t>
<t tx="ekr.20031218072017.3420">def insertAsLastChild (self,t=None):

	"""Inserts a new vnode as the last child of the receiver"""

	n = self.numberOfChildren()
	if not t:
		t = tnode(headString="NewHeadline")
	return self.insertAsNthChild(n,t)</t>
<t tx="ekr.20031218072017.3421">def insertAsNthChild (self,n,t=None):

	"""Inserts a new node as the the nth child of the receiver.
	The receiver must have at least n-1 children"""

	if not t:
		t = tnode(headString="NewHeadline")

	v = vnode(self.c,t)
	v.linkAsNthChild(self,n)

	return v</t>
<t tx="ekr.20031218072017.3422">def moveToRoot (self, oldRoot = None):

	"""Moves the receiver to the root position"""

	v = self

	v.unlink()
	v.linkAsRoot(oldRoot)
	
	return v</t>
<t tx="ekr.20031218072017.3423"># Restores (relinks) the dv tree in the position described by back and parent.

def restoreOutlineFromDVnodes (self, dv, parent, back):

	if back:
		dv.linkAfter(back)
	elif parent:
		dv.linkAsNthChild(parent, 0)
	else:
		dv.linkAsRoot()
	return dv</t>
<t tx="ekr.20031218072017.3424"># Creates a clone of back and insert it as the next sibling of back.

def clone (self,back):
	
	"""Create a clone of back."""
	
	clone = self.cloneTree(back)

	# Set the clone bit in all nodes joined to back.
	# This is not nearly enough.
	clone.setClonedBit()
	back.setClonedBit()
	for v in back.t.joinList:
		v.setClonedBit()

	return clone</t>
<t tx="ekr.20031218072017.3425">def linkAsNthChild (self,pv,n):

	"""Links self as the n'th child of vnode pv"""

	v = self
	# g.trace(v,pv,n)
	v._parent = pv
	if n == 0:
		v._back = None
		v._next = pv.t._firstChild
		if pv.t._firstChild:
			pv.t._firstChild._back = v
		pv.t._firstChild = v
	else:
		prev = pv.nthChild(n-1) # zero based
		assert(prev)
		v._back = prev
		v._next = prev._next
		prev._next = v
		if v._next:
			v._next._back = v</t>
<t tx="ekr.20031218072017.3426">def linkAsRoot(self, oldRoot = None):
	
	"""Link a vnode as the root node and set the root _position_."""

	v = self ; c = v.c

	# Clear all links except the child link.
	v._parent = None
	v._back = None
	v._next = oldRoot

	# Link in the rest of the tree only when oldRoot != None.
	# Otherwise, we are calling this routine from init code and
	# we want to start with a pristine tree.
	if oldRoot: oldRoot._back = v

	newRoot = position(v,[])
	c.setRootPosition(newRoot)</t>
<t tx="ekr.20031218072017.3427"></t>
<t tx="ekr.20031218072017.3428">def addTreeToJoinLists (self):
	
	"""Add each v of v's entire tree to v.t.joinList."""
	
	v = self ; after = v.nodeAfterTree()
	
	while v and v != after:
		if not v in v.t.joinList:
			v.t.joinList.append(v)
		v = v.threadNext()</t>
<t tx="ekr.20031218072017.3429">def cloneTree (self, oldTree):
	
	"""Create a cloned tree after oldTree."""

	# Create a new tree following oldTree.
	newTree = oldTree.copyTree()
	newTree.linkAfter(oldTree)
	# Join the trees and copy clone bits.
	oldTree.joinTreeTo(newTree)
	oldTree.copyCloneBitsTo(newTree)
	return newTree</t>
<t tx="ekr.20031218072017.3430"># This methods propagates clone bits from the receiver's tree to tree2.

def copyCloneBitsTo (self, tree2):

	tree1 = self
	assert(tree2)
	# Set the bit in the root.
	if tree1.isCloned():
		tree2.setClonedBit()
	else:
		tree2.clearClonedBit()
	# Recursively set the bits in all subtrees.
	child1 = tree1.firstChild()
	child2 = tree2.firstChild()
	while child1:
		assert(child2)
		if child1.isCloned():
			child2.setClonedBit()
		else:
			child2.clearClonedBit()
		child1 = child1.next()
		child2 = child2.next()
	assert(child2 == None)</t>
<t tx="ekr.20031218072017.3431"># Rewritten 7/11/03.

def copyTree (self):
	
	"""Returns a free-standing copy of a vnode and all its descendents.
	
	The new tree uses the same tnodes as the old,
	but the new vnodes are _not_ joined to the old nodes.
	That is, the new vnodes v do not appear on v.t.joinList."""
	
	c = self.c ; old_v = self
	
	# g.trace(self)
	
	# Copy all fields of the root.
	new_v = vnode(c,old_v.t)
	new_v.t.headString = old_v.t.headString
	new_v.iconVal = old_v.iconVal
	assert(new_v not in new_v.t.joinList)

	# Recursively copy and link all children.
	old_child = old_v.firstChild()
	n = 0
	while old_child:
		new_child = old_child.copyTree()
		new_child.linkAsNthChild(new_v,n)
		assert(new_child not in new_child.t.joinList)
		n += 1
		old_child = old_child.next()
		
	return new_v
</t>
<t tx="ekr.20031218072017.3432"># This method creates all nodes that depend on the receiver.
def createDependents (self):

	v = self ; parent = v.parent()
	if not parent: return

	# Copy v as the nth child of all nodes joined to parent.
	n = v.childIndex()
	
	# 7/11/03: work on copy of join list.
	joinList = parent.t.joinList[:]
	if parent in joinList:
		joinList.remove(parent)

	for pv in joinList:
		# g.trace(n,pv)
		copy = v.copyTree()
		copy.linkAsNthChild(pv,n)
		v.joinTreeTo(copy)</t>
<t tx="ekr.20031218072017.3433"># Destroys all dependent vnodes and tree nodes associated with the receiver.

def destroyDependents (self):
	
	"""Destroy the nth child of all nodes joined to the receiver's parent.."""

	parent = self.parent()
	if not parent:
		# g.trace("no parent",self)
		return

	n = self.childIndex()
	
	# 7/11/03: work on copy of join list.
	joinList = parent.t.joinList[:]
	if parent in joinList:
		joinList.remove(parent)
	#trace(parent,joinList)

	for join in joinList:
		# g.trace(n,join)
		child = join.nthChild(n)
		if child:
			child.unjoinTree()
			child.unlink()
			child.destroyTree()</t>
<t tx="ekr.20031218072017.3434">@ This code should be called only when it is no longer possible to undo a previous delete.  It is always valid to destroy dependent trees.
@c

def destroyTree (self):

	"""Destroys (irrevocably deletes) a vnode tree."""

	pass</t>
<t tx="ekr.20031218072017.3435">if 0:
	def invalidOutline (self, message):

		s = "invalid outline: " + message + "\n"
		parent = self.parent()
	
		if parent:
			s += repr(parent)
		else:
			s += repr(self)
	
		g.alert ( s )</t>
<t tx="ekr.20031218072017.3436">@  This code makes no assumptions about the two trees, and some or all of the nodes may already have been joined.  The assert's guarantee that both trees have the same topology.
@c

def joinTreeTo (self, tree2):

	"""Joins all nodes in the receiver and tree2."""

	tree1 = self
	assert(tree2)
	# Join the roots.
	tree1.joinNodeTo ( tree2 )
	# Recursively join all subtrees.
	child1 = tree1.firstChild()
	child2 = tree2.firstChild()
	while child1:
		assert(child2)
		child1.joinTreeTo(child2)
		child1 = child1.next()
		child2 = child2.next()
	assert(child2 == None)</t>
<t tx="ekr.20031218072017.3437">@ The receiver is a clone if and only it is structurally _dissimilar_ to a node joined to it.

Structurally _similar_ joined nodes have non-null, distinct and joined parents, and have the same child indices.
@c

def shouldBeClone (self):
	
	"""Returns true if the receiver should be a clone"""
	pv1 = self.parent()
	n = self.childIndex()

	for v in self.t.joinList:
		if v != self:
			vp = v.parent()
			# self and v are structurally dissimilar if...
			if( (not pv1 or not vp) or  # they are at the top level, or
				vp == pv1 or  # have the same parent, or
				pv1.t != vp.t or  # have unjoined parents, or
				(v.childIndex() != n)): # have different child indices.

				# g.trace("true",v)
				return true

	# The receiver is structurally similar to all nodes joined to it.
	# g.trace("false",v)
	return false</t>
<t tx="ekr.20031218072017.3438">def unlink (self):

	"""Unlinks a vnode from the tree."""

	v = self ; c = v.c

	# g.trace(v._parent," child: ",v.t._firstChild," back: ", v._back, " next: ", v._next)
	
	# Special case the root.
	if v == c.rootPosition().v: # 3/11/04
		assert(v._next)
		newRoot = position(v._next,[])
		c.setRootPosition(newRoot)

	# Clear the links in other nodes.
	if v._back:
		v._back._next = v._next
	if v._next:
		v._next._back = v._back

	if v._parent and v == v._parent.t._firstChild:
		v._parent.t._firstChild = v._next

	# Clear the links in this node.
	v._parent = v._next = v._back = None</t>
<t tx="ekr.20031218072017.3439">"""Install and run Leo plugins.

On startup:
- doPlugins() calls loadHandlers() to import all
  mod_XXXX.py files in the Leo directory.

- Imported files should register hook handlers using the
  registerHandler and registerExclusiveHandler functions.
  Only one "exclusive" function is allowed per hook.

After startup:
- doPlugins() calls doHandlersForTag() to handle the hook.
- The first non-None return is sent back to Leo.
"""

import leoGlobals as g
from leoGlobals import true,false

handlers = {}

def doPlugins(tag,keywords):
	if g.app.killed:
		return
	if tag == "start1":
		loadHandlers()
	return doHandlersForTag(tag,keywords)
		
@others</t>
<t tx="ekr.20031218072017.3440">def loadHandlers(loadAllFlag=false):

	"""Load all enabled plugins from the plugins directory"""
	import glob,os
	
	plugins_path = g.os_path_join(g.app.loadDir,"..","plugins")
	manager_path = g.os_path_join(plugins_path,"pluginsManager.txt")
	
	files = glob.glob(g.os_path_join(plugins_path,"*.py"))
	files = [g.os_path_abspath(file) for file in files]

	if loadAllFlag:
		files.sort()
		enabled_files = files
	else:
		&lt;&lt; set enabled_files from pluginsManager.txt &gt;&gt;
		enabled_files = [g.os_path_abspath(file) for file in enabled_files]
	
	# Load plugins in the order they appear in the enabled_files list.
	g.app.loadedPlugins = []
	if files and enabled_files:
		for file in enabled_files:
			if file in files:
				file = g.toUnicode(file,g.app.tkEncoding)
				g.importFromPath(file,plugins_path)
	if g.app.loadedPlugins and not loadAllFlag:
		g.es("%d plugins loaded" % (len(g.app.loadedPlugins)), color="blue")
		if 0:
			for name in g.app.loadedPlugins:
				print name</t>
<t tx="ekr.20031218072017.3441">if not g.os_path_exists(manager_path):
	return

enabled_files = []
try:
	file = open(manager_path)
	lines = file.readlines()
	for s in lines:
		s = s.strip()
		if s and not g.match(s,0,"#"):
			enabled_files.append(g.os_path_join(plugins_path,s))
	file.close()
except:
	g.es("Can not open: " + manager_path)
	import leoTest ; leoTest.fail()
	return</t>
<t tx="ekr.20031218072017.3442">def doHandlersForTag (tag,keywords):
	
	"""Execute all handlers for a given tag, in alphabetical order"""

	global handlers

	if handlers.has_key(tag):
		handle_fns = handlers[tag]
		handle_fns.sort()
		for handle_fn in handle_fns:
			ret = handle_fn(tag,keywords)
			if ret is not None:
				return ret

	if handlers.has_key("all"):
		handle_fns = handlers["all"]
		handle_fns.sort()
		for handle_fn in handle_fns:
			ret = handle_fn(tag,keywords)
			if ret is not None:
				return ret
	return None</t>
<t tx="ekr.20031218072017.3443">def registerHandler(tags,fn):
	
	""" Register one or more handlers"""
	
	import types

	if type(tags) in (types.TupleType,types.ListType):
		for tag in tags:
			registerOneHandler(tag,fn)
	else:
		registerOneHandler(tags,fn)

def registerOneHandler(tag,fn):
	
	"""Register one handler"""

	global handlers

	existing = handlers.setdefault(tag,[])
	try:
		existing.append(fn)
	except AttributeError:
		g.es("*** Two exclusive handlers for '%s'" % tag)
</t>
<t tx="ekr.20031218072017.3444">def registerExclusiveHandler(tags, fn):
	
	""" Register one or more exclusive handlers"""
	
	import types
	
	if type(tags) in (types.TupleType,types.ListType):
		for tag in tags:
			registerOneExclusiveHandler(tag,fn)
	else:
		registerOneExclusiveHandler(tags,fn)
			
def registerOneExclusiveHandler(tag, fn):
	
	"""Register one exclusive handler"""
	
	global handlers
	
	if handlers.has_key(tag):
		g.es("*** Two exclusive handlers for '%s'" % tag)
	else:
		handlers[tag] = (fn,)
</t>
<t tx="ekr.20031218072017.3445">@ The following is taken from page 188 of the Python Cookbook.

The following method allows you to add a function as a method of any class.  That is, it converts the function to a method of the class.  The method just added is available instantly to all existing instances of the class, and to all instances created in the future.

The function's first argument should be self.

The newly created method has the same name as the function unless the optional name argument is supplied, in which case that name is used as the method name.
@c

def funcToMethod(f,theClass,name=None):
	
	"""Converts the function f to a method of theClass with the given optional name."""

	setattr(theClass,name or f.__name__,f)
	
# That's all!</t>
<t tx="ekr.20031218072017.3446">@language python

# Tangle and Untangle.
import leoGlobals as g
from leoGlobals import true,false

import os,string

&lt;&lt; about Tangle and Untangle &gt;&gt;
&lt;&lt; constants &amp; synonyms &gt;&gt;

@others</t>
<t tx="ekr.20031218072017.3447"># Synonyms for multiple_parts_flag.
allow_multiple_parts = 1
disallow_multiple_parts = 2
unused_parts_flag = 3

# Synonyms for is_root_flag to st_enter.
is_root_name = 1 ; not_root_name = 0

# Synonyms for scanAllDirectives
report_errors = 1 ; dont_report_errors = 0
require_path = 1 ; done_require_path = 0

# Constants...
max_errors = 20

@ All these must be defined together, because they form a single enumeration.  Some of these are used by utility functions.
@c

if 1: # A single enum...

	# Used by token_type().
	plain_line = 1 # all other lines
	at_at	     = 2 # double-at sign.
	at_chapter = 3 # @chapter
	# at_c       = 4 # @c in noweb mode
	at_code	   = 5 # @code, or @c or @p in CWEB mode.
	at_doc	    = 6 # @doc
	at_other   = 7 # all other @directives
	at_root	   = 8 # @root or noweb * sections
	at_section = 9 # @section
	# at_space   = 10 # @space
	at_web	    = 11 # any CWEB control code, except at_at.
	
	# Returned by self.skip_section_name() and allies and used by token_type.
	bad_section_name = 12  # &lt; &lt; with no matching &gt; &gt;
	section_ref	 = 13  # &lt; &lt; name &gt; &gt;
	section_def	 = 14  # &lt; &lt; name &gt; &gt; =
	
	# Returned by is_sentinal_line.
	non_sentinel_line   = 15
	start_sentinel_line = 16
	end_sentinel_line   = 17
	
	# Stephen P. Schaefer 9/13/2002
	# add support for @first
	at_last    = 18
</t>
<t tx="ekr.20031218072017.3448"></t>
<t tx="ekr.20031218072017.3449">class tst_node:
	@others</t>
<t tx="ekr.20031218072017.3450">def __init__ (self,name,root_flag):

	# g.trace("tst_node.__init__" + `name`)
	self.name = name
	self.is_root = root_flag
	self.referenced = false
	self.parts = []</t>
<t tx="ekr.20031218072017.3451">def __repr__ (self):

	return "tst_node:" + self.name</t>
<t tx="ekr.20031218072017.3452">class part_node:
	@others</t>
<t tx="ekr.20031218072017.3453">def __init__ (self,name,code,doc,is_root,is_dirty):

	# g.trace("part_node.__init__" + `name`)
	self.name = name # Section or file name.
	self.code = code # The code text.
	self.doc = doc # The doc text.
	self.is_dirty = is_dirty # true: vnode for body text is dirty.
	self.is_root = is_root # true: name is a root name.</t>
<t tx="ekr.20031218072017.3454">def __repr__ (self):

	return "part_node:" + self.name</t>
<t tx="ekr.20031218072017.3455">class ust_node:
	@others</t>
<t tx="ekr.20031218072017.3456">@ The text has been masssaged so that 1) it contains no leading indentation and 2) all code arising from section references have been replaced by the reference line itself.  Text for all copies of the same part can differ only in non-critical white space.
@c

def __init__ (self,name,code,part,of,nl_flag,update_flag):

	# g.trace("ust_node.__init__", `name` +":"+ `part`)
	self.name = name # section name
	self.parts = {} # parts dict
	self.code = code # code text
	self.part = part # n in "(part n of m)" or zero.
	self.of = of  # m in "(part n of m)" or zero.
	self.nl_flag = nl_flag  # true: section starts with a newline.
	self.update_flag = update_flag # true: section corresponds to a section in the outline.</t>
<t tx="ekr.20031218072017.3457">def __repr__ (self):

	return "ust_node:" + self.name</t>
<t tx="ekr.20031218072017.3458">class def_node:
	@others</t>
<t tx="ekr.20031218072017.3459">@ The text has been masssaged so that 1) it contains no leading indentation and 2) all code arising from section references have been replaced by the reference line itself.  Text for all copies of the same part can differ only in non-critical white space.
@c

def __init__ (self,name,indent,part,of,nl_flag,code):

	if 0:
		g.trace("def_node.__init__",
			"name:" + name + ", part:" + `part` + ", of:" + `of` + ", indent:" + `indent`)
	self.name = name
	self.indent = indent
	self.code = code
	if self.code == None: self.code = ""
	self.part = part
	self.of = of
	self.nl_flag = nl_flag</t>
<t tx="ekr.20031218072017.3460">def __repr__ (self):

	return "def_node:" + self.name</t>
<t tx="ekr.20031218072017.3461">@doc Stephen P. Schaefer, 9/2/2002
Collect the root node specific attributes in an
easy-to-use container.
@code
class root_attributes:
	@others</t>
<t tx="ekr.20031218072017.3462">@ Stephen P. Schaefer, 9/2/2002
Keep track of the attributes of a root node
@c

def __init__ (self, tangle_state):

	if 0:
		&lt;&lt; trace the state &gt;&gt;
	self.language = tangle_state.language
	self.single_comment_string = tangle_state.single_comment_string
	self.start_comment_string = tangle_state.start_comment_string
	self.end_comment_string = tangle_state.end_comment_string
	self.use_header_flag = tangle_state.use_header_flag
	self.print_mode = tangle_state.print_mode
	
	# of all the state variables, this one isn't set in tangleCommands.__init__
	# peculiar
	try:
		self.path = tangle_state.path
	except AttributeError:
		self.path = None
	
	self.page_width = tangle_state.page_width
	self.tab_width = tangle_state.tab_width
	self.first_lines = tangle_state.first_lines # Stephen P. Schaefer 9/13/2002</t>
<t tx="ekr.20031218072017.3463">try:
	if tangle_state.path: pass
except AttributeError:
	tangle_state.path = None
	
g.trace("def_root_attribute.__init__",
	"language:" + tangle_state.language +
	", single_comment_string: " + tangle_state.single_comment_string +
	", start_comment_string: " + tangle_state.start_comment_string +
	", end_comment_string: " + tangle_state.end_comment_string +
	", use_header_flag: " + g.choose(tangle_state.use_header_flag, "true", "false") +
	", print_mode: " + tangle_state.print_mode +
	", path: " + g.choose(tangle_state.path, tangle_state.path, "") +
	", page_width: " + tangle_state.page_width +
	", tab_width: " + tangle_state.tab_width +
	# Stephen P. Schaefer 9/13/2002
	", first_lines: " + tangle_state.first_lines)</t>
<t tx="ekr.20031218072017.3464">def __repr__ (self):

	return ("root_attributes: language: " + self.language +
		", single_comment_string: " + self.single_comment_string +
		", start_comment_string: " +	self.start_comment_string +
		", end_comment_string: " +	self.end_comment_string +
		", use_header_flag: " + g.choose(self.use_header_flag, "true", "false") +
		", print_mode: " + self.print_mode +
		", path: " + self.path +
		", page_width: " + self.page_width +
		", tab_width: " + self.tab_width +
		# Stephen P. Schaefer 9/13/2002
		", first_lines: " + self.first_lines)
</t>
<t tx="ekr.20031218072017.3465">class baseTangleCommands:
	"""The base class for Leo's tangle and untangle commands."""
	@others
	
class tangleCommands (baseTangleCommands):
	"""A class that implements Leo' tangle and untangle commands."""
	pass</t>
<t tx="ekr.20031218072017.3466">def __init__ (self,c):

	self.c = c
	self.init_ivars()</t>
<t tx="ekr.20031218072017.3467">@ Only top-level drivers initialize ivars.
</t>
<t tx="ekr.20031218072017.3468"># This code is called from tangleTree and untangleTree.

def cleanup (self):
	
	if self.errors == 0:
		&lt;&lt; call tangle_done.run() or untangle_done.run() &gt;&gt;

	# Reinitialize the symbol tables and lists.
	self.tst = {}
	self.ust = {}
	self.root_list = []
	self.def_stack = []</t>
<t tx="ekr.20031218072017.3469"># Create a list of root names:
root_names = []
dir = self.tangle_directory # Bug fix: 12/04/02
if not dir: dir = ""
for section in self.root_list:
	for part in section.parts:
		if part.is_root:
			root_names.append(g.os_path_join(dir,part.name))

if self.tangling and self.tangle_batch_flag:
	try:
		import tangle_done
		tangle_done.run(root_names)
	except:
		g.es("Can not execute tangle_done.run()")
		g.es_exception()
if not self.tangling and self.untangle_batch_flag:
	try:
		import untangle_done
		untangle_done.run(root_names)
	except:
		g.es("Can not execute tangle_done.run()")
		g.es_exception()</t>
<t tx="ekr.20031218072017.3470">def initTangleCommand (self):

	c = self.c
	c.endEditing()
	
	g.es("Tangling...")
	c.setIvarsFromPrefs()
	self.init_ivars()
	self.tangling = true</t>
<t tx="ekr.20031218072017.3471">def initUntangleCommand (self):

	c = self.c
	c.endEditing()
	
	g.es("Untangling...")
	c.setIvarsFromPrefs()
	self.init_ivars()
	self.tangling = false</t>
<t tx="ekr.20031218072017.3472">def tangle(self):

	c = self.c ; p = c.currentPosition()
	self.initTangleCommand()
	self.tangleTree(p,report_errors)
	g.es("Tangle complete")</t>
<t tx="ekr.20031218072017.3473">def tangleAll(self):

	c = self.c
	self.initTangleCommand()
	has_roots = false
	
	for p in c.rootPosition().self_and_siblings_iter():
		ok = self.tangleTree(p,dont_report_errors)
		if ok: has_roots = true
		if self.path_warning_given:
			break # Fatal error.

	if not has_roots:
		self.warning("----- The outline contains no roots")
	elif self.errors &gt; 0 and not self.path_warning_given:
		self.warning("----- Tangle halted because of errors")
	else:
		g.es("Tangle complete")</t>
<t tx="ekr.20031218072017.3474">def tangleMarked(self):

	c = self.c ; p = c.rootPosition()
	c.clearAllVisited() # No roots have been tangled yet.
	self.initTangleCommand()
	any_marked = false
	while p:
		is_ignore, i = g.is_special(p.bodyString(),0,"@ignore")
		# Only tangle marked and unvisited nodes.
		if is_ignore:
			p.moveToNodeAfterTree()
		elif p.isMarked():
			ok = self.tangleTree(p,dont_report_errors)
			if ok: any_marked = true
			if self.path_warning_given:
				break # Fatal error.
			p.moveToNodeAfterTree()
		else: p.moveToThreadNext()

	if not any_marked:
		self.warning("----- The outline contains no marked roots")
	elif self.errors &gt; 0 and not self.path_warning_given:
		self.warning("----- Tangle halted because of errors")
	else:
		g.es("Tangle complete")</t>
<t tx="ekr.20031218072017.3475"># Traverses the tree whose root is given, handling each headline and associated body text.

def tanglePass1(self,p):

	"""The main routine of tangle pass 1"""

	next = p.nodeAfterTree()
	
	while p and p != next:
		self.p = p
		self.setRootFromHeadline(p)
		dict = g.get_directives_dict(p.bodyString(),[self.head_root])
		is_ignore = dict.has_key("ignore")
		if is_ignore:
			p.moveToNodeAfterTree()
			continue
		# This must be called after root_name has been set.
		if self.tangling:
			self.scanAllDirectives(p,require_path,report_errors) # calls init_directive_ivars.
		# Scan the headline and body text.
		self.skip_headline(p)
		self.skip_body(p)
		p.moveToThreadNext()
		if self.errors &gt;= max_errors:
			self.warning("----- Halting Tangle: too many errors")
			break

	if self.tangling:
		self.st_check()
		# g.trace(self.st_dump(verbose_flag=true))</t>
<t tx="ekr.20031218072017.3476"># At this point p is the root of the tree that has been tangled.

def tanglePass2(self):

	self.p = None # self.p is not valid in pass 2.

	if self.errors &gt; 0:
		self.warning("----- No file written because of errors")
	elif self.root_list == None:
		self.warning("----- The outline contains no roots")
	else:
		self.put_all_roots() # pass 2 top level function.</t>
<t tx="ekr.20031218072017.3477"># This function is called only from the top level, so there is no need to initialize globals.

def tangleTree(self,p,report_flag):

	"""Tangles all nodes in the tree whose root is p.
	
	Reports on its results if report_flag is true."""

	assert(p)
	any_root_flag = false
	next = p.nodeAfterTree()
	self.path_warning_given = false

	while p and p != next:
		self.setRootFromHeadline(p)
		dict = g.get_directives_dict(p.bodyString(),[self.head_root])
		is_ignore = dict.has_key("ignore")
		is_root = dict.has_key("root")
		is_unit = dict.has_key("unit")
		if is_ignore:
			p.moveToNodeAfterTree()
		elif not is_root and not is_unit:
			p.moveToThreadNext()
		else:
			self.tanglePass1(p) # sets self.p
			if self.root_list and self.tangling:
				any_root_flag = true
				self.tanglePass2() # self.p invalid in pass 2.
			self.cleanup()
			p.modeAfterTree()
			if self.path_warning_given: break # Fatal error.

	if self.tangling and report_flag and not any_root_flag:
		# This is done by Untangle if we are untangling.
		self.warning("----- The outline contains no roots")
	return any_root_flag</t>
<t tx="ekr.20031218072017.3478">def untangle(self):

	c = self.c ; p = c.currentPosition()
	self.initUntangleCommand()
	
	c.beginUpdate()
	self.untangleTree(p,report_errors)
	c.endUpdate()
	g.es("Untangle complete")</t>
<t tx="ekr.20031218072017.3479">def untangleAll(self):

	c = self.c
	self.initUntangleCommand()
	has_roots = false

	c.beginUpdate()
	for p in c.rootPosition().self_and_siblings_iter():
		ok = self.untangleTree(p,false)
		if ok: has_roots = true
	c.endUpdate()

	if not has_roots:
		self.warning("----- The outline contains no roots")
	elif self.errors &gt; 0:
		self.warning("----- Untangle command halted because of errors")
	else:
		g.es("Untangle complete")</t>
<t tx="ekr.20031218072017.3480">def untangleMarked(self):

	c = self.c ; p = c.rootPosition()
	self.initUntangleCommand()
	marked_flag = false

	c.beginUpdate()
	while p: # Don't use an iterator.
		if p.isMarked():
			ok = self.untangleTree(p,dont_report_errors)
			if ok: marked_flag = true
			if self.errors &gt; 0: break
			p.moveToNodeAfterTree()
		else:
			p.moveToThreadNext()
	c.endUpdate()

	if not marked_flag:
		self.warning("----- The outline contains no marked roots")
	elif self.errors &gt; 0:
		self.warning("----- Untangle command halted because of errors")
	else:
		g.es("Untangle complete")</t>
<t tx="ekr.20031218072017.3481">@ This method untangles the derived files in a vnode known to contain at least one @root directive. The work is done in two passes. The first pass creates the UST by scanning the derived file. The second pass updates the outline using the UST and a TST that is created during the pass.

We assume that all sections from root to end are contained in the derived file, and we attempt to update all such sections. The begin/end params indicate the range of nodes to be scanned when building the TST.
@c

def untangleRoot(self,root,begin,end):

	# g.trace("root,begin,end:" + `root` + `begin` + `end`)
	&lt;&lt; Set path &amp; root_name to the file specified in the @root directive &gt;&gt;
	&lt;&lt; return if @silent or unknown language &gt;&gt;
	&lt;&lt; Read the file into file_buf &gt;&gt;
	g.es("@root " + path)
	# Pass 1: Scan the C file, creating the UST
	self.scan_derived_file(file_buf)
	# g.trace(self.ust_dump())
	if self.errors == 0:
		&lt;&lt; Pass 2: Untangle the outline using the UST and a newly-created TST &gt;&gt;
	self.cleanup()</t>
<t tx="ekr.20031218072017.3482">if self.language == "unknown":
	g.es("@comment disables Untangle for " + path, color="blue")
	return

if self.print_mode in ("quiet","silent"):
	g.es("@" + self.print_mode +  " inhibits Untangle for " + path, color="blue")
	return</t>
<t tx="ekr.20031218072017.3483">s = root.bodyString()
i = 0
while i &lt; len(s):
	code, junk = self.token_type(s,i,report_errors)
	if code == at_root:
		# token_type sets root_name unless there is a syntax error.
		if self.root_name: path = self.root_name
		break
	else: i = g.skip_line(s,i)
	
if not self.root_name:
	# A bad @root command.  token_type has already given an error.
	self.cleanup()
	return</t>
<t tx="ekr.20031218072017.3484">f = None
try:
	path = g.os_path_join(self.tangle_directory,path)
	f = open(path)
	if f:
		file_buf = f.read()
		file_buf = string.replace(file_buf,g.body_ignored_newline,'')
except:
	if f: f.close()
	g.es("error reading: " + path)
	g.es_exception()
	self.cleanup()
	return
</t>
<t tx="ekr.20031218072017.3485">@ This code untangles the root and all its siblings. We don't call tangleTree here because we must handle all siblings.  tanglePass1 handles an entire tree.  It also handles @ignore.
@c

p = begin
while p and p != end: # Don't use iterator.
	self.tanglePass1(p)
	if self.errors != 0:
		break
	p.moveToNodeAfterTree()

self.ust_warn_about_orphans()</t>
<t tx="ekr.20031218072017.3486"># This funtion is called when the user selects any "Untangle" command.

def untangleTree(self,p,report_flag):

	# g.trace(p)
	c = self.c
	any_root_flag = false
	afterEntireTree = p.nodeAfterTree()
	# Initialize these globals here: they can't be cleared later.
	self.head_root = None
	self.errors = 0
	c.clearAllVisited() # Used by untangle code.

	while p and p != afterEntireTree and self.errors == 0:
		self.setRootFromHeadline(p)
		dict = g.get_directives_dict(p.bodyString(),[self.head_root])
		ignore = dict.has_key("ignore")
		root = dict.has_key("root")
		unit = dict.has_key("unit")
		if ignore:
			p.moveToNodeAfterTree()
		elif unit:
			# Expand the context to the @unit directive.
			unitNode = p   # 9/27/99
			afterUnit = p.nodeAfterTree()
			p.moveToThreadNext()
			while p and p != afterUnit and self.errors == 0:
				self.setRootFromHeadline(p)
				dict = g.get_directives_dict(p.bodyString(),[self.head_root])
				root = dict.has_key("root")
				if root:
					any_root_flag = true
					end = None
					&lt;&lt; set end to the next root in the unit &gt;&gt;
					# g.trace("end:" + `end`)
					self.scanAllDirectives(p,require_path,report_errors)
					self.untangleRoot(p,unitNode,afterUnit)
					p = end.copy()
				else: p.moveToThreadNext()
		elif root:
			# Limit the range of the @root to its own tree.
			afterRoot = p.nodeAfterTree()
			any_root_flag = true
			self.scanAllDirectives(p,require_path,report_errors)
			self.untangleRoot(p,p,afterRoot) # 9/27/99
			p = afterRoot.copy()
		else:
			p.moveToThreadNext()
	if report_flag:
		if not any_root_flag:
			self.warning("----- The outline contains no roots")
		elif self.errors &gt; 0:
			self.warning("----- Untangle command halted because of errors")
	return any_root_flag</t>
<t tx="ekr.20031218072017.3487">@ The untangle_root function will untangle an entire tree by calling untangleTree, so the following code ensures that the next @root node will not be an offspring of p.
@c

end = p.threadNext()
while end and end != afterUnit:
	flag, i = g.is_special(end.bodyString(),0,"@root")
	if flag and not p.isAncestorOf(end):
		break
	end.moveToThreadNext()</t>
<t tx="ekr.20031218072017.3488"></t>
<t tx="ekr.20031218072017.3489"></t>
<t tx="ekr.20031218072017.3490">@ This method handles newline processing while skipping a code section. It sets 'done' if the line contains an @directive or section definition that terminates the present code section. On entry: i should point to the first character of a line.  This routine scans past a line only if it could not contain a section reference.

Returns (i, done)
@c

def handle_newline(self,s,i):

	j = i ; done = false
	kind, end = self.token_type(s,i,dont_report_errors)
	# token_type will not skip whitespace in noweb mode.
	i = g.skip_ws(s,i)
	# g.trace(`kind` + "," + `g.get_line(s,i)`)

	if kind == plain_line:
		pass
	elif (kind == at_code or kind == at_doc or
		kind == at_root or kind == section_def):
		i = j ; done = true # Terminate this code section and rescan.
	elif kind == section_ref:
		# Enter the reference.
		ref = s[i:end]
		self.st_enter_section_name(ref,None,None,unused_parts_flag)
	# DTHEIN 13-OCT-2002: @first directives are OK in code sections
	elif (kind == at_other) and g.match_word(s,j,"@first"):
		pass
	elif kind == at_other or kind == at_chapter or kind == at_section:
		# We expect to see only @doc,@c or @root directives
		# while scanning a code section.
		i = g.skip_to_end_of_line(s,i)
		if 0: # 12/03/02: no longer needed
			self.error("directive not valid here: " + s[j:i])
	elif kind == bad_section_name:
		if self.use_cweb_flag:
			i = g.skip_to_end_of_line(s,i)
	elif kind == at_web or kind == at_at:
		i += 2 # Skip a CWEB control code.
	else: assert(false)

	return i, done</t>
<t tx="ekr.20031218072017.3491"># This method handles all the body text.

def skip_body (self,p):

	# g.trace(p)
	s = p.bodyString()
	code_seen = false ; code = doc = None ; i = 0
	anyChanged = false
	
	if self.start_mode == "code":
		j = g.skip_blank_lines(s,i)
		i,code = self.skip_code(s,j)
		if code:
			&lt;&lt; Define a section for a leading code part &gt;&gt;

	if not code:
		i,doc = self.skip_doc(s,i) # Start in doc section by default.
		if i &gt;= len(s) and doc:
			&lt;&lt; Define a section containing only an @doc part &gt;&gt;

	while i &lt; len(s):
		progress = i # progress indicator
		# line = g.get_line(s,i) ; g.trace(`line`)
		kind, end = self.token_type(s,i,report_errors)
		# if g.is_nl(s,i): i = g.skip_nl(s,i)
		i = g.skip_ws(s,i)
		if kind == section_def:
			&lt;&lt; Scan and define a section definition &gt;&gt;
		elif kind == at_code:
			if self.use_cweb_flag:
				i += 2 # Skip the at-c or at-p
			else:
				i = g.skip_line(s,i)
			&lt;&lt; Scan and define an @code defininition &gt;&gt;
		elif kind == at_root:
			i = g.skip_line(s,i)
			&lt;&lt; Scan and define a root section &gt;&gt;
		elif kind == at_doc:
			if self.use_cweb_flag:
				i += 2 # Skip the at-space
			else:
				i = g.skip_line(s,i)
			i, doc = self.skip_doc(s,i)
		elif kind == at_chapter or kind == at_section:
			i = g.skip_line(s,i)
			i, doc = self.skip_doc(s,i)
		else:
			i = g.skip_line(s,i)
		assert(progress &lt; i) # we must make progress!
	# 3/4/02: Only call p.trimTrailingLines if we have changed its body.
	if anyChanged:
		p.trimTrailingLines()</t>
<t tx="ekr.20031218072017.3492">@ The following subsections contain the interface between the Tangle and Untangle commands.  This interface is an important hack, and allows Untangle to avoid duplicating the logic in skip_tree and its allies.

The aha is this: just at the time the Tangle command enters a definition into the symbol table, all the information is present that Untangle needs to update that definition.

To get whitespace exactly right we retain the outline's leading whitespace and remove leading whitespace from the updated definition.
</t>
<t tx="ekr.20031218072017.3493">@ It's valid for an @doc directive to appear under a headline that does not contain a section name.  In that case, no section is defined.
@c

if self.header_name:
	# Tangle code.
	flag = g.choose(code_seen,allow_multiple_parts,disallow_multiple_parts)
	part = self.st_enter_section_name(self.header_name,code,doc,flag)
	# Untangle code.
	if not self.tangling: 
		# Untangle no longer updates doc parts.
		# 12/03/02: Mark the part as having been updated to suppress warning.
		junk,junk = self.ust_lookup(self.header_name,
			part,not_root_name,true) # set update flag

doc = None</t>
<t tx="ekr.20031218072017.3494">if self.header_name:
	# Tangle code.
	flag = g.choose(code_seen,allow_multiple_parts,disallow_multiple_parts)
	part = self.st_enter_section_name(self.header_name,code,doc,flag)
	# Untangle code.
	if not self.tangling: 
		head = s[:j] ; tail = s[i:]
		s,i,changed = self.update_def(self.header,part,head,code,tail,not_root_name)
		if changed: anyChanged = true
	code_seen = true
	code = doc = None</t>
<t tx="ekr.20031218072017.3495"># We enter the code part and any preceding doc part into the symbol table.

# Skip the section definition line.
k = i ; i, kind, junk = self.skip_section_name(s,i)
section_name = s[k:i]
# g.trace(`section_name`)
assert(kind == section_def)
i = g.skip_to_end_of_line(s,i)

# Tangle code: enter the section name even if the code part is empty.
j = g.skip_blank_lines(s,i)
i, code = self.skip_code(s,j)
flag = g.choose(kind==section_def,allow_multiple_parts,disallow_multiple_parts)
part = self.st_enter_section_name(section_name,code,doc,flag)
		
if not self.tangling: # Untangle code.
	head = s[:j] ; tail = s[i:]
	s,i,changed = self.update_def(section_name,part,head,code,tail,not_root_name)
	if changed: anyChanged = true
	
code = doc = None</t>
<t tx="ekr.20031218072017.3496"># All @c or @code directives denote &lt; &lt; headline_name &gt; &gt; =
if self.header_name:

	# Tangle code.
	j = g.skip_blank_lines(s,i)
	i, code = self.skip_code(s,j)
	flag = g.choose(code_seen,allow_multiple_parts,disallow_multiple_parts)
	part = self.st_enter_section_name(self.header_name,code,doc,flag)
	if not self.tangling: # Untangle code.
		head = s[:j] ; tail = s[i:]
		s,i,changed = self.update_def(self.header,part,head,code,tail,not_root_name)
		if changed: anyChanged = true
else:
	self.error("@c expects the headline: " + self.header + " to contain a section name")

code_seen = true
code = doc = None</t>
<t tx="ekr.20031218072017.3497"># We save the file name in case another @root ends the code section.
old_root_name = self.root_name

# Tangle code.
j = g.skip_blank_lines(s,i)
k, code = self.skip_code(s,j)

# Stephen Schaefer, 9/2/02, later
# st_enter_root_name relies on scanAllDirectives to have set
# the root attributes, such as language, *_comment_string,
# use_header_flag, etc.
self.st_enter_root_name(old_root_name,code,doc)

if not self.tangling: # Untangle code.
	part = 1 # Use 1 for root part.
	head = s[:j] ; tail = s[k:]
	s,i,changed = self.update_def(old_root_name,part,head,code,tail,is_root_name)
	if changed: anyChanged = true
	
code = doc = None</t>
<t tx="ekr.20031218072017.3498">@ This method skips an entire code section. The caller is responsible for entering the completed section into the symbol table. On entry, i points at the line following the @directive or section definition that starts a code section. We skip code until we see the end of the body text or the next @ directive or section defintion that starts a code or doc part.
@c

def skip_code(self,s,i):

	# g.trace(`g.get_line(s,i)`)
	code1 = i
	nl_i = i # For error messages
	done = false # true when end of code part seen.
	if self.use_noweb_flag:
		&lt;&lt; skip a noweb code section &gt;&gt;
	else:
		&lt;&lt; skip a CWEB code section &gt;&gt;
	code = s[code1:i]
	# g.trace(returns: + `code`)
	return i,code</t>
<t tx="ekr.20031218072017.3499">@ This code handles the following escape conventions: double at-sign at the start of a line and at-&lt;&lt; and at.&gt;.
@c

i, done = self.handle_newline(s,i)
while not done and i &lt; len(s):
	ch = s[i]
	if g.is_nl(s,i):
		nl_i = i = g.skip_nl(s,i)
		i, done = self.handle_newline(s,i)
	elif ch == '@' and (g.match(s,i+1,"&lt;&lt;") or # must be on different lines
		g.match(s,i+1,"&gt;&gt;")):
		i += 3 # skip the noweb escape sequence.
	elif ch == '&lt;':
		&lt;&lt; handle possible noweb section reference &gt;&gt;
	else: i += 1</t>
<t tx="ekr.20031218072017.3500">j, kind, end = self.is_section_name(s,i)
if kind == section_def:
	k = g.skip_to_end_of_line(s,i)
	# We are in the middle of a line.
	i += 1
	self.error("chunk definition not valid here\n" + s[nl_i:k])
elif kind == bad_section_name:
	i += 1 # This is not an error.  Just skip the '&lt;'.
else:
	assert(kind == section_ref)
	# Enter the reference into the symbol table.
	name = s[i:end]
	self.st_enter_section_name(name,None,None,unused_parts_flag)
	i = end</t>
<t tx="ekr.20031218072017.3501"># This code is simple because CWEB control codes are valid anywhere.

while not done and i &lt; len(s):
	if s[i] == '@':
		&lt;&lt; handle CWEB control code &gt;&gt;
	else: i += 1</t>
<t tx="ekr.20031218072017.3502">j, kind, end = self.is_section_name(s,i)

if kind == section_def:
	done = true
elif kind == bad_section_name:
	i += 2 # Any other control code.
else:
	assert(kind == section_ref)
	# Enter the reference into the symbol table.
	name = s[i:j]
	self.st_enter_section_name(name,None,None,unused_parts_flag)
	i = j</t>
<t tx="ekr.20031218072017.3503">def skip_doc(self,s,i):

	# g.trace(`g.get_line(s,i)`)
	# Skip @space, @*, @doc, @chapter and @section directives.
	doc1 = i
	while i &lt; len(s):
		if g.is_nl(s,i):
			doc1 = i = g.skip_nl(s,i)
		elif g.match(s,i,"@ ") or g.match(s,i,"@\t") or g.match(s,i,"@*"):
			i = g.skip_ws(s,i+2) ; doc1 = i
		elif g.match(s,i,"@\n"):
			i += 1 ; doc1 = i
		elif (g.match_word(s,i,"@doc") or
			  g.match_word(s,i,"@chapter") or
			  g.match_word(s,i,"@section")):
			doc1 = i = g.skip_line(s,i)
		else: break

	while i &lt; len(s):
		kind, end = self.token_type(s,i,dont_report_errors)
		if kind == at_code or kind == at_root or kind == section_def:
			break
		i = g.skip_line(s,i)

	doc = s[doc1:i]
	# g.trace(doc)
	return i, doc</t>
<t tx="ekr.20031218072017.3504">@ This function sets ivars that keep track of the indentation level. We also remember where the next line starts because it is assumed to be the first line of a documentation section.

A headline can contain a leading section name.  If it does, we substitute the section name if we see an @c directive in the body text.
@c

def skip_headline(self,p):

	self.header = s = p.headString()
	# Set self.header_name.
	j = i = g.skip_ws(s,0)
	i, kind, end = self.is_section_name(s,i)
	if kind == bad_section_name:
		self.header_name = None
	else:
		self.header_name = s[j:end]</t>
<t tx="ekr.20031218072017.3505"></t>
<t tx="ekr.20031218072017.3506">@ This method outputs a code section, expanding section references by their definition. We should see no @directives or section definitions that would end the code section.

Most of the differences bewteen noweb mode and CWEB mode are handled by token_type(called from put_newline). Here, the only difference is that noweb handles double-@ signs only at the start of a line.
@c

def put_code(self,s,no_first_lws_flag):

	# g.trace(`g.get_line(s,0)`)
	i = 0
	if i &lt; len(s):
		i = self.put_newline(s,i,no_first_lws_flag)
		# Double @ is valid in both noweb and CWEB modes here.
		if g.match(s,i,"@@"):
			self.os('@') ; i += 2
	while i &lt; len(s):
		progress = i
		ch = s[i]
		if (g.match(s,i,"&lt;&lt;") and self.use_noweb_flag or
			g.match(s,i,"@&lt;") and self.use_cweb_flag):
			&lt;&lt; put possible section reference &gt;&gt;
		elif ch == '@': # We are in the middle of a line.
			if self.use_cweb_flag:
				&lt;&lt; handle 2-character CWEB control codes &gt;&gt;
			else:
				&lt;&lt; handle noweb @ &lt; &lt; convention &gt;&gt;
		elif ch == g.body_ignored_newline:
			i += 1
		elif ch == g.body_newline:
			i += 1 ; self.onl()
			i = self.put_newline(s,i,false) # Put full lws
			if self.use_cweb_flag and g.match(s,i,"@@"):
				self.os('@') ; i += 2
		else: self.os(s[i]) ; i += 1
		assert(progress &lt; i)</t>
<t tx="ekr.20031218072017.3507">j, kind, name_end = self.is_section_name(s,i)
if kind == section_def:
	# We are in the middle of a code section
	self.error(
		"Should never happen:\n" +
		"section definition while putting a section reference: " +
		s[i:j])
	i += 1
elif kind == bad_section_name:
	self.os(s[i]) ; i += 1 # This is not an error.
else:
	assert(kind == section_ref)
	name = s[i:name_end]
	self.put_section(s,i,name,name_end)
	i = j</t>
<t tx="ekr.20031218072017.3508">if g.match(s,i,"@@"):
	# Handle double @ sign.
	self.os('@') ; i += 2
else:
	i += 1 # skip the @.
	if i+1 &gt;= len(s) or g.is_ws_or_nl(s,i):
		# A control code: at-backslash is not a valid CWEB control code.
		# We are in CWEB mode, so we can output C block comments.
		self.os("/*@" + s[i] + "*/") ; i += 1
	else:
		self.os("@") # The at sign is not part of a control code.</t>
<t tx="ekr.20031218072017.3509">@ The user must ensure that neither @ &lt; &lt; nor @ &gt; &gt; occurs in comments or strings. However, it is valid for @ &lt; &lt; or @ &gt; &gt; to appear in the doc chunk or in a single-line comment.
@c

if g.match(s,i,"@&lt;&lt;"):
	self.os("/*@*/&lt;&lt;") ; i += 3

elif g.match(s,i,"@&gt;&gt;"):
	self.os("/*@*/&gt;&gt;") ; i += 3
	
else: self.os("@") ; i += 1</t>
<t tx="ekr.20031218072017.3510"># This method outputs a doc section within a block comment.

def put_doc(self,s):

	# g.trace(`g.get_line(s,0)`)
	width = self.page_width
	words = 0 ; word_width = 0 ; line_width = 0
	# 8/1/02: can't use choose here!
	if self.single_comment_string == None: single_w = 0
	else: single_w = len(self.single_comment_string)
	# Make sure we put at least 20 characters on a line.
	if width - max(0,self.tangle_indent) &lt; 20:
		width = max(0,self.tangle_indent) + 20
	# Skip Initial white space in the doc part.
	i = g.skip_ws_and_nl(s,0)
	if i &lt; len(s) and (self.print_mode == "verbose" or self.print_mode == "quiet"):
		use_block_comment = self.start_comment_string and self.end_comment_string
		use_single_comment = not use_block_comment and self.single_comment_string
		# javadoc_comment = use_block_comment and self.start_comment_string == "/**"
		if use_block_comment or use_single_comment:
			if 0: # The section name ends in an self.onl().
				self.onl()
			self.put_leading_ws(self.tangle_indent)
			if use_block_comment:
				self.os(self.start_comment_string)
			&lt;&lt; put the doc part &gt;&gt;
			self.onl()
			self.put_leading_ws(self.tangle_indent)
			if use_block_comment:
				self.os(self.end_comment_string)
			self.onl()
		else: self.onl()</t>
<t tx="ekr.20031218072017.3511">@ This code fills and outputs each line of a doc part. It keeps track of whether the next word will fit on a line,and starts a new line if needed.
@c

if use_single_comment:
	# New code: 5/31/00
	self.os(self.single_comment_string) ; self.otab()
	line_width =(single_w / abs(self.tab_width) + 1) * abs(self.tab_width)
else:
	line_width = abs(self.tab_width)
	self.onl() ; self.otab()
self.put_leading_ws(self.tangle_indent)
line_width += max(0,self.tangle_indent)
words = 0 ; word_width = 0
while i &lt; len(s):
	&lt;&lt;output or skip whitespace or newlines&gt;&gt;
	if i &gt;= len(s):
		break
	&lt;&lt;compute the width of the next word&gt;&gt;
	if words == 0 or line_width + word_width &lt; width:
		words += 1
		&lt;&lt;output next word&gt;&gt;
		line_width += word_width
	else:
		# 11-SEP-2002 DTHEIN: Fixed linewrapping bug in
		# tab-then-comment sequencing
		self.onl()
		if use_single_comment:
			self.os(self.single_comment_string) ; self.otab()
			line_width = (single_w / abs(self.tab_width) + 1) * abs(self.tab_width)
		else:
			self.otab()
			line_width = abs(self.tab_width)
		words = 0
		self.put_leading_ws(self.tangle_indent)
		# tangle_indent is in spaces.
		line_width += max(0,self.tangle_indent)
</t>
<t tx="ekr.20031218072017.3512">@ This outputs whitespace if it fits, and ignores it otherwise, and starts a new line if a newline is seen. The effect of self code is that we never start a line with whitespace that was originally at the end of a line.
@c

while g.is_ws_or_nl(s,i):
	ch = s[i]
	if ch == '\t':
		pad = abs(self.tab_width) - (line_width % abs(self.tab_width))
		line_width += pad
		if line_width &lt; width: self.otab()
		i += 1
	elif ch == ' ':
		line_width += 1
		if line_width &lt; width: self.os(ch)
		i += 1
	else:
		assert(g.is_nl(s,i))
		self.onl()
		if use_single_comment:
			# New code: 5/31/00
			self.os(self.single_comment_string) ; self.otab()
			line_width = (single_w / abs(self.tab_width) + 1) * abs(self.tab_width)
		else:
			self.otab()
			line_width = abs(self.tab_width)
		i = g.skip_nl(s,i)
		words = 0
		self.put_leading_ws(self.tangle_indent)
		# tangle_indent is in spaces.
		line_width += max(0,self.tangle_indent)
</t>
<t tx="ekr.20031218072017.3513">j = i ; word_width = 0
while j &lt; len(s) and not g.is_ws_or_nl(s,j):
	word_width += 1
	j += 1</t>
<t tx="ekr.20031218072017.3514">while i &lt; len(s) and not g.is_ws_or_nl(s,i):
	self.os(s[i])
	i += 1</t>
<t tx="ekr.20031218072017.3515"># Puts tabs and spaces corresponding to n spaces, assuming that we are at the start of a line.

def put_leading_ws(self,n):

	# g.trace("tab_width:" + `self.tab_width` + ", indent:" + `indent`)
	w = self.tab_width

	if w &gt; 1:
		q,r = divmod(n,w) 
		self.otabs(q) 
		self.oblanks(r) 
	else:
		self.oblanks(n)
</t>
<t tx="ekr.20031218072017.3516">@ This method handles scanning when putting the start of a new line. Unlike the corresponding method in pass one, this method doesn't need to set a done flag in the caller because the caller already knows where the code section ends.
@c

def put_newline(self,s,i,no_first_lws_flag):

	kind, end = self.token_type(s,i,dont_report_errors)
	&lt;&lt; Output leading white space except for blank lines &gt;&gt;
	if i &gt;= len(s):
		return i
	elif kind == at_web or kind == at_at:
		i += 2 # Allow the line to be scanned.
	elif kind == at_doc or kind == at_code:
		if self.use_cweb_flag:
			i += 2
	else:
		# These should have set limit in pass 1.
		assert(kind != section_def and kind != at_chapter and kind != at_section)
	return i</t>
<t tx="ekr.20031218072017.3517">j = i ; i = g.skip_ws(s,i)
if i &lt; len(s) and not g.is_nl(s,i):
	# Conditionally output the leading previous leading whitespace.
	if not no_first_lws_flag:
		self.put_leading_ws(self.tangle_indent)
	# Always output the leading whitespace of _this_ line.
	k, width = g.skip_leading_ws_with_indent(s,j,self.tab_width)
	self.put_leading_ws(width)</t>
<t tx="ekr.20031218072017.3518"># This method outputs one part of a section definition.

def put_part_node(self,part,no_first_lws_flag):

	if 0:
		if part: name = part.name # can't use choose.
		else: name = "&lt;NULL part&gt;"
		g.trace(`name`)

	if part.doc and self.output_doc_flag and self.print_mode != "silent" and part.doc:
		self.put_doc(part.doc)

	if part.code:
		self.put_code(part.code,no_first_lws_flag)</t>
<t tx="ekr.20031218072017.3519">@ This method outputs the definition of a section and all sections referenced from the section. name is the section's name. This code checks for recursive definitions by calling section_check(). We can not allow section x to expand to code containing another call to section x, either directly or indirectly.
@c

def put_section(self,s,i,name,name_end):

	j = g.skip_line(s,i)
	# g.trace("indent:" + `self.tangle_indent`  + ", " + `s[i:j]`)
	outer_old_indent = self.tangle_indent
	trailing_ws_indent = 0 # Set below.
	inner_old_indent = 0 # Set below.
	newline_flag = false  # true if the line ends with the reference.
	assert(g.match(name,0,"&lt;&lt;") or g.match(name,0,"@&lt;"))
	&lt;&lt; Calculate the new value of tangle_indent &gt;&gt;
	&lt;&lt; Set 'newline_flag' if the line ends with the reference &gt;&gt;
	section = self.st_lookup(name,not_root_name)
	if section and section.parts:
		# Expand the section only if we are not already expanding it.
		if self.section_check(name):
			self.section_stack.append(name)
			&lt;&lt; put all parts of the section definition &gt;&gt;
			self.section_stack.pop()
	else:
		&lt;&lt; Put a comment about the undefined section &gt;&gt;
	if not newline_flag:
		self.put_leading_ws(trailing_ws_indent)
	self.tangle_indent = outer_old_indent
	return i, name_end</t>
<t tx="ekr.20031218072017.3520"># Find the start of the line containing the reference.
j = i
while j &gt; 0 and not g.is_nl(s,j):
	j -= 1
if g.is_nl(s,j):
	j = g.skip_nl(s,j)

# Bump the indentation
j, width = g.skip_leading_ws_with_indent(s,j,self.tab_width)
self.tangle_indent += width
# g.trace("leading ws:" + `width` + " + new indent:" + `self.tangle_indent`)

# 4/27/01: Force no trailing whitespace in @silent mode.
if self.print_mode == "silent":
	trailing_ws_indent = 0
else:
	trailing_ws_indent = self.tangle_indent

# Increase the indentation if the section reference does not immediately follow
# the leading white space.  4/3/01: Make no adjustment in @silent mode.
if (j &lt; len(s) and self.print_mode != "silent" and
		((self.use_noweb_flag and s[j] != '&lt;') or
		(self.use_cweb_flag and s[j] != '@'))):
	self.tangle_indent += abs(self.tab_width)</t>
<t tx="ekr.20031218072017.3521">if self.print_mode != "silent":
	i = name_end
	i = g.skip_ws(s,i)
	newline_flag = (i &gt;= len(s) or g.is_nl(s,i))</t>
<t tx="ekr.20031218072017.3522">@ This section outputs each part of a section definition. We first count how many parts there are so that the code can output a comment saying 'part x of y'.
@c

# Output each part of the section.
sections = len(section.parts)
count = 0
for part in section.parts:
	count += 1
	# In @silent mode, there is no sentinel line to "use up" the previously output
	# leading whitespace.  We set the flag to tell put_part_node and put_code
	# not to call put_newline at the start of the first code part of the definition.
	no_first_leading_ws_flag = (count == 1 and self.print_mode == "silent")
	inner_old_indent = self.tangle_indent
	# 4/3/01: @silent inhibits newlines after section expansion.
	if self.print_mode != "silent":
		&lt;&lt; Put the section name in a comment &gt;&gt;
	self.put_part_node(part,no_first_leading_ws_flag)
	# 4/3/01: @silent inhibits newlines after section expansion.
	if count == sections and (self.print_mode != "silent" and self.print_mode != "quiet"):
		&lt;&lt; Put the ending comment &gt;&gt;
	# Restore the old indent.
	self.tangle_indent = inner_old_indent</t>
<t tx="ekr.20031218072017.3523">if count &gt; 1:
	self.onl()
	self.put_leading_ws(self.tangle_indent)
	
# Don't print trailing whitespace
name = string.rstrip(name)
if self.single_comment_string:
	self.os(self.single_comment_string) ; self.oblank() ; self.os(name)
	&lt;&lt; put (n of m) &gt;&gt;
else:
	assert(
		self.start_comment_string and len(self.start_comment_string) &gt; 0 and
		self.end_comment_string and len(self.end_comment_string)&gt; 0)
	self.os(self.start_comment_string) ; self.oblank() ; self.os(name)
	&lt;&lt; put (n of m) &gt;&gt;
	self.oblank() ; self.os(self.end_comment_string)

self.onl() # Always output a newline.</t>
<t tx="ekr.20031218072017.3524">if sections &gt; 1:
	self.oblank()
	self.os("(" + `count` + " of " + `sections` + ")")</t>
<t tx="ekr.20031218072017.3525">@ We do not produce an ending comment unless we are ending the last part of the section,and the comment is clearer if we don't say(n of m).
@c

self.onl() ; self.put_leading_ws(self.tangle_indent)
#  Don't print trailing whitespace
while name_end &gt; 0 and g.is_ws(s[name_end-1]):
	name_end -= 1

if self.single_comment_string:
	self.os(self.single_comment_string) ; self.oblank()
	self.os("-- end -- ") ; self.os(name)
else:
	self.os(self.start_comment_string) ; self.oblank()
	self.os("-- end -- ") ; self.os(name)
	self.oblank() ; self.os(self.end_comment_string)
	
@ The following code sets a flag for untangle.

If something follows the section reference we must add a newline, otherwise the "something" would become part of the comment.  Any whitespace following the (!newline) should follow the section defintion when Untangled.
@c

if not newline_flag:
	self.os(" (!newline)") # LeoCB puts the leading blank, so we must do so too.
	# Put the whitespace following the reference.
	while name_end &lt; len(s) and g.is_ws(s[name_end]):
		self.os(s[name_end])
		name_end += 1
	self.onl() # We must supply the newline!</t>
<t tx="ekr.20031218072017.3526">self.onl() ; self.put_leading_ws(self.tangle_indent)

if self.print_mode != "silent":
	if self.single_comment_string:
		self.os(self.single_comment_string)
		self.os(" undefined section: ") ; self.os(name) ; self.onl()
	else:
		self.os(self.start_comment_string)
		self.os(" undefined section: ") ; self.os(name)
		self.oblank() ; self.os(self.end_comment_string) ; self.onl()

self.error("Undefined section: " + name)</t>
<t tx="ekr.20031218072017.3527">@ We can not allow a section to be defined in terms of itself, either directly or indirectly.

We push an entry on the section stack whenever beginning to expand a section and pop the section stack at the end of each section.  This method checks whether the given name appears in the stack. If so, the section is defined in terms of itself.
@c

def section_check (self,name):

	if name in self.section_stack:
		s = "Invalid recursive reference of " + name + "\n"
		for n in self.section_stack:
			s += "called from: " + n + "\n"
		self.error(s)
		return false
	return true</t>
<t tx="ekr.20031218072017.3528"></t>
<t tx="ekr.20031218072017.3529">def st_check(self):

	"""Checks the given symbol table for defined but never referenced sections."""

	keys = self.tst.keys()
	keys.sort()
	# g.trace(`keys`)
	for name in keys:
		section = self.tst[name]
		if not section.referenced:
			g.es(	' ' * 4 + "Warning: " +
				g.choose(self.use_noweb_flag,"&lt;&lt; ","@&lt; ") +
				section.name +
				g.choose(self.use_noweb_flag," &gt;&gt;"," @&gt;") +
				" has been defined but not used.")</t>
<t tx="ekr.20031218072017.3530"># Dumps the given symbol table in a readable format.

def st_dump(self,verbose_flag=true):
	
	s = "\ndump of symbol table...\n"
	keys = self.tst.keys()
	keys.sort()
	for name in keys:
		section = self.tst[name]
		if verbose_flag:
			s += self.st_dump_node(section)
		else:
			type = g.choose(len(section.parts)&gt;0,"  ","un")
			s += ("\n" + type + "defined:[" + section.name + "]")
	return s</t>
<t tx="ekr.20031218072017.3531"># Dumps each part of a section's definition.

def st_dump_node(self,section):

	s = ("\nsection: " + section.name +
		", referenced:" + `section.referenced` +
		", is root:" + `section.is_root`)
	
	if len(section.parts) &gt; 0:
		s += "\n----- parts of " + g.angleBrackets(section.name)
		n = 1 # part list is in numeric order
		for part in section.parts:
			s += "\n----- Part " + `n`
			n += 1
			s += "\ndoc:  [" + `part.doc`  + "]"
			s += "\ncode: [" + `part.code` + "]"
		s += "\n----- end of partList\n"
	return s</t>
<t tx="ekr.20031218072017.3532">def st_enter(self,name,code,doc,multiple_parts_flag,is_root_flag):

	"""Enters names and their associated code and doc parts into the given symbol table."""
	
	# g.trace(`name`)
	section = self.st_lookup(name,is_root_flag)
	assert(section)
	if doc:
		doc = string.rstrip(doc) # remove trailing lines.
	if code:
		if self.print_mode != "silent": # @silent supresses newline processing.
			i = g.skip_blank_lines(code,0) # remove leading lines.
			if i &gt; 0: code = code[i:] 
			if code and len(code) &gt; 0: code = string.rstrip(code) # remove trailing lines.
		if len(code) == 0: code = None
	if code:
		&lt;&lt; check for duplicate code definitions &gt;&gt;
	if code or doc:
		part = part_node(name,code,doc,is_root_flag,false) # not dirty
		section.parts.append(part)
	else: # A reference
		section.referenced = true
	if is_root_flag:
		self.root_list.append(section)
		section.referenced = true # Mark the root as referenced.
		&lt;&lt;remember root node attributes&gt;&gt;
	# Stephen Schaefer, 9/2/02
	return len(section.parts) # part number
</t>
<t tx="ekr.20031218072017.3533">for part in section.parts:

	if part.code and multiple_parts_flag == disallow_multiple_parts:
		# Give the message only for non-empty parts.
		self.error("Multiple parts not allowed for " + name)
		return 0 # part number

	if self.tangling and code and code == part.code:
		g.es("Warning: possible duplicate definition of: &lt;&lt;" +
			section.name + "&gt;&gt;")</t>
<t tx="ekr.20031218072017.3534"># Stephen Schaefer, 9/2/02
# remember the language and comment characteristics
section.root_attributes = root_attributes(self)</t>
<t tx="ekr.20031218072017.3535"># Enters a root name into the given symbol table.

def st_enter_root_name(self,name,code,doc):
	
	# assert(code)
	if name: # User errors can result in an empty @root name.
		self.st_enter(name,code,doc,disallow_multiple_parts,is_root_name)</t>
<t tx="ekr.20031218072017.3536">def st_enter_section_name(self,name,code,doc,multiple_parts_flag):

	"""Enters a section name into the given symbol table.

	The code and doc pointers are None for references."""
	
	return self.st_enter(name,code,doc,multiple_parts_flag,not_root_name)</t>
<t tx="ekr.20031218072017.3537">def st_lookup(self,name,is_root_flag):

	"""Looks up name in the symbol table and creates a tst_node for it if it does not exist."""

	if is_root_flag:
		key = name
	else:
		key = self.standardize_name(name)

	if self.tst.has_key(key):
		section = self.tst[key]
		# g.trace("found:" + key)
		return section
	else:
		# g.trace("not found:" + key)
		section = tst_node(key,is_root_flag)
		self.tst [key] = section
		return section</t>
<t tx="ekr.20031218072017.3538"></t>
<t tx="ekr.20031218072017.3539">def ust_dump (self):

	s = "\n---------- Untangle Symbol Table ----------"
	keys = self.ust.keys()
	keys.sort()
	for name in keys:
		section = self.ust[name]
		s += "\n\n" + section.name
		for part in section.parts.values():
			assert(part.of == section.of)
			s += "\n----- part " + `part.part` + " of " + `part.of` + " -----\n"
			s += `g.get_line(part.code,0)`
	s += "\n--------------------"
	return s</t>
<t tx="ekr.20031218072017.3540">@ This routine enters names and their code parts into the given table. The 'part' and 'of' parameters are taken from the "(part n of m)" portion of the line that introduces the section definition in the C code.

If no part numbers are given the caller should set the 'part' and 'of' parameters to zero.  The caller is reponsible for checking for duplicate parts.

This function handles names scanned from a source file; the corresponding st_enter routine handles names scanned from outlines.
@c

def ust_enter (self,name,part,of,code,nl_flag,is_root_flag):

	if not is_root_flag:
		name = self.standardize_name(name)
	&lt;&lt; remove blank lines from the start and end of the text &gt;&gt;
	u = ust_node(name,code,part,of,nl_flag,false) # update_flag
	if not self.ust.has_key(name):
		self.ust[name] = u
	section = self.ust[name]
	section.parts[part]=u # Parts may be defined in any order.
	# g.trace("section name: [" + name + "](" + `part` + " of " + `of` + ")..."+`g.get_line(code,0)`)</t>
<t tx="ekr.20031218072017.3541">i = g.skip_blank_lines(code,0)
if i &gt; 0:
	code = code[i:]
	code = string.rstrip(code)
</t>
<t tx="ekr.20031218072017.3542"># Searches the given table for a part matching the name and part number.

def ust_lookup (self,name,part_number,is_root_flag,update_flag):
	
	# g.trace(`name` + ":" + `part_number`)
	
	if not is_root_flag:
		name = self.standardize_name(name)

	if part_number == 0: part_number = 1 # A hack: zero indicates the first part.
	if self.ust.has_key(name):
		section = self.ust[name]
		if section.parts.has_key(part_number):
			part = section.parts[part_number]
			if update_flag: part.update_flag = true
			# g.trace("found:" + name + " (" + `part_number` + ")...\n" + `g.get_line(part.code,0)`)
			return part, true

	# g.trace("not found:" + name + " (" + `part_number` + ")...\n")
	return None, false</t>
<t tx="ekr.20031218072017.3543">def ust_warn_about_orphans (self):

	"""Issues a warning about any sections in the derived file for which
	no corresponding section has been seen in the outline."""

	for section in self.ust.values():
		# g.trace(`section`)
		for part in section.parts.values():
			assert(part.of == section.of)
			if not part.update_flag:
				g.es("Warning: " +
					g.choose(self.use_noweb_flag,"&lt;&lt; ","@&lt; ") +
					part.name +
					g.choose(self.use_noweb_flag," &gt;&gt;"," @&gt;") +
					" is not in the outline")
				break # One warning per section is enough.
</t>
<t tx="ekr.20031218072017.3544"></t>
<t tx="ekr.20031218072017.3545">@ This function compares the interior of comments and returns true if they are identical except for whitespace or newlines. It is up to the caller to eliminate the opening and closing delimiters from the text to be compared.
@c

def compare_comments (self,s1,s2):

	tot_len = 0
	if self.comment: tot_len += len(self.comment)
	if self.comment_end: tot_len += len(self.comment_end)
	CWEB_flag = (self.language == "c" and not self.use_noweb_flag)
	
	p1, p2 = 0, 0
	while p1 &lt; len(s1) and p2 &lt; len(s2):
		p1 = g.skip_ws_and_nl(s1,p1)
		p2 = g.skip_ws_and_nl(s2,p2)
		if self.comment and self.comment_end:
			&lt;&lt; Check both parts for @ comment conventions &gt;&gt;
		if p1 &gt;= len(s1) or p2 &gt;= len(s2):
			break
		if s1[p1] != s2[p2]:
			return false
		p1 += 1 ; p2 += 1
	p1 = g.skip_ws_and_nl(s1,p1)
	p2 = g.skip_ws_and_nl(s2,p2)
	return p1 == len(s1) and p2 == len(s2)
</t>
<t tx="ekr.20031218072017.3546">@ This code is used in forgiving_compare()and in compare_comments().

In noweb mode we allow / * @ * /  (without the spaces)to be equal to @.
In CWEB mode we allow / * @ ? * / (without the spaces)to be equal to @?.
at-backslash is not a valid CWEB control code, so we don't have to equate
/ * @ \\ * / with at-backslash.

We must be careful not to run afoul of this very convention here!
@c

if p1 &lt; len(s1) and s1[p1] == '@':
	if g.match(s2,p2,self.comment + '@' + self.comment_end):
		p1 += 1
		p2 += tot_len + 1
		continue
	elif (CWEB_flag and s1[p1] == '@' and p1 + 1 &lt; len(s1) and
		g.match(s2,p2,self.comment + '@' + s1[p1+1])):
		p1 += 2
		p2 += tot_len + 2
		continue
elif p2 &lt; len(s2) and s2[p2] == '@':
	if g.match(s1,p1,self.comment + '@' + self.comment_end):
		p2 += 1
		p1 += tot_len + 1
		continue
	elif (CWEB_flag and s1[p1] == '@' and p1 + 1 &lt; len(s1) and
		g.match(s1,p1,self.comment + '@' + s2[p2+1])):
		p2 += 2
		p1 += tot_len + 2
		continue
</t>
<t tx="ekr.20031218072017.3547">@ This function is called to massage an @doc part in the ust. We call this routine only after a mismatch in @doc parts is found between the ust and tst. On entry, the parameters point to the inside of a block C comment: the opening and closing delimiters are not part of the text handled by self routine.

This code removes newlines that may have been inserted by the Tangle command in a block comment. Tangle may break lines differently in different expansions, but line breaks are ignored by forgiving_compare() and doc_compare() within block C comments.

We count the leading whitespace from the first non-blank line and remove this much whitespace from all lines. We also remove singleton newlines and replace sequences of two or more newlines by a single newline.
@c

def massage_block_comment (self,s):

	c = self.c
	newlines = 0  # Consecutive newlines seen.
	i = g.skip_blank_lines(s,0)
	# Copy the first line and set n
	i, n = g.skip_leading_ws_with_indent(s,i,c.tab_width)
	j = i ; i = g.skip_to_end_of_line(s,i)
	result = s[j:i]
	while i &lt; len(s):
		assert(g.is_nl(s,i))
		newlines += 1
		# Replace the first newline with a blank.
		result += ' ' ; i += 1
		while i &lt; len(s) and g.is_nl(s,i):
			i += 1 # skip the newline.
		j = i ; i = g.skip_ws(s,i)
		if g.is_nl(s,i)and newlines &gt; 1:
			# Skip blank lines.
			while g.is_nl(s,i):
				i += 1
		else:
			# Skip the leading whitespace.
			i = j # back track
			i = g.skip_leading_ws(s,i,n,c.tab_width)
			newlines = 0
			# Copy the rest of the line.
			j = i ; i = g.skip_to_end_of_line(s,i)
			result += s[j:i]
	return result
</t>
<t tx="ekr.20031218072017.3548">@ This is the "forgiving compare" function.  It compares two texts and returns true if they are identical except for comments or non-critical whitespace.  Whitespace inside strings or preprocessor directives must match exactly.
@c

def forgiving_compare (self,name,part,s1,s2):

	if 0:
		g.trace(`name`+":"+`part`+
			  "\n1:"+`g.get_line(s1,0)`+
			  "\n2:"+ `g.get_line(s2,0)`)
	s1 = g.toUnicode(s1,self.encoding) # 4/4/03
	s2 = g.toUnicode(s2,self.encoding) # 4/4/03
	&lt;&lt; Define forgiving_compare vars &gt;&gt;
	p1 = g.skip_ws_and_nl(s1,0) 
	p2 = g.skip_ws_and_nl(s2,0)
	result = true
	while result and p1 &lt; len(s1) and p2 &lt; len(s2):
		first1 = p1 ; first2 = p2
		if self.comment and self.comment_end:
			&lt;&lt; Check both parts for @ comment conventions &gt;&gt;
		ch1 = s1[p1]
		if ch1 == '\r' or ch1 == '\n':
			&lt;&lt; Compare non-critical newlines &gt;&gt;
		elif ch1 ==  ' ' or ch1 == '\t':
			&lt;&lt; Compare non-critical whitespace &gt;&gt;
		elif ch1 == '\'' or ch1 == '"':
			&lt;&lt; Compare possible strings &gt;&gt;
		elif ch1 == '#':
			&lt;&lt; Compare possible preprocessor directives &gt;&gt;
		elif ch1 == '&lt;' or ch1 == '@':
			&lt;&lt; Compare possible section references &gt;&gt;
		else:
			&lt;&lt; Compare comments or single characters &gt;&gt;
	&lt;&lt; Make sure both parts have ended &gt;&gt;
	if not result:
		&lt;&lt; trace the mismatch &gt;&gt;
	return result</t>
<t tx="ekr.20031218072017.3549"># scan_derived_file has set the ivars describing comment delims.
first1 = first2 = 0

tot_len = 0
if self.comment: tot_len += len(self.comment)
if self.comment_end: tot_len += len(self.comment_end)

CWEB_flag = (self.language == "c" and not self.use_noweb_flag)</t>
<t tx="ekr.20031218072017.3550">p1 = g.skip_ws_and_nl(s1,p1)
p2 = g.skip_ws_and_nl(s2,p2)
</t>
<t tx="ekr.20031218072017.3551">p1 = g.skip_ws(s1,p1)
p2 = g.skip_ws(s2,p2)</t>
<t tx="ekr.20031218072017.3552">if self.language == "c":
	&lt;&lt; compare preprocessor directives &gt;&gt;
else:
	&lt;&lt; compare single characters &gt;&gt;
</t>
<t tx="ekr.20031218072017.3553">assert(p1 &lt; len(s1) and p2 &lt; len(s2))
result = s1[p1] == s2[p2]
p1 += 1 ; p2 += 1
if not result: self.mismatch("Mismatched single characters")</t>
<t tx="ekr.20031218072017.3554"># We cannot assume that newlines are single characters.

result = s1[p1] == s2[p2]
p1 += 1 ; p2 += 1
while result and p1 &lt; len(s1) and p2 &lt; len(s2):
	if g.is_nl(s1,p1):
		result = g.is_nl(s2,p2)
		if not result or self.is_end_of_directive(s1,p1):
			break
		p1 = g.skip_nl(s1,p1)
		p2 = g.skip_nl(s2,p2)
	else:
		result = s1[p1] == s2[p2]
		p1 += 1 ; p2 += 1
if not result:
	self.mismatch("Mismatched preprocessor directives")</t>
<t tx="ekr.20031218072017.3555"># This code implicitly assumes that string1_len == string2_len == 1.
# The match test ensures that the language actually supports strings.

if (g.match(s1,p1,self.string1) or g.match(s1,p1,self.string2)) and s1[p1] == s2[p2]:

	if self.language == "pascal":
		&lt;&lt; Compare Pascal strings &gt;&gt;
	else:
		&lt;&lt; Compare C strings &gt;&gt;
	if not result:
		self.mismatch("Mismatched strings")
else:
	&lt;&lt; Compare single characters &gt;&gt;</t>
<t tx="ekr.20031218072017.3556">delim = s1[p1]
result = s1[p1] == s2[p2]
p1 += 1 ; p2 += 1

while result and p1 &lt; len(s1) and p2 &lt; len(s2):
	if s1[p1] == delim and self.is_end_of_string(s1,p1,delim):
		result =(s2[p2] == delim and self.is_end_of_string(s2,p2,delim))
		p1 += 1 ; p2 += 1
		break
	elif g.is_nl(s1,p1) and g.is_nl(s2,p2):
		p1 = g.skip_nl(s1,p1)
		p2 = g.skip_nl(s2,p2)
	else:
		result = s1[p1] == s2[p2]
		p1 += 1 ; p2 += 1
</t>
<t tx="ekr.20031218072017.3557">@ We assume the Pascal string is on a single line so the problems with cr/lf do not concern us.
@c

first1 = p1 ; first2 = p2
p1 = g.skip_pascal_string(s1,p1)
p2 = g.skip_pascal_string(s2,p2)
result = s1[first1,p1] == s2[first2,p2]
</t>
<t tx="ekr.20031218072017.3558">if s1[p1] == '@' and CWEB_flag:  start_ref = "@&lt;"
elif s1[p1] == '&lt;' and not CWEB_flag:  start_ref = "&lt;&lt;"
else: start_ref = None

# Tangling may insert newlines.
p2 = g.skip_ws_and_nl(s2,p2)

junk, kind1, junk2 = self.is_section_name(s1,p1)
junk, kind2, junk2 = self.is_section_name(s2,p2)

if start_ref and (kind1 != bad_section_name or kind2 != bad_section_name):
	result = self.compare_section_names(s1[p1:],s2[p2:])
	if result:
		p1, junk1, junk2 = self.skip_section_name(s1,p1)
		p2, junk1, junk2 = self.skip_section_name(s2,p2)
	else: self.mismatch("Mismatched section names")
else:
	# Neither p1 nor p2 points at a section name.
	result = s1[p1] == s2[p2]
	p1 += 1 ; p2 += 1
	if not result:
		self.mismatch("Mismatch at '@' or '&lt;'")</t>
<t tx="ekr.20031218072017.3559">if g.match(s1,p1,self.sentinel) and g.match(s2,p2,self.sentinel):
	first1 = p1 ; first2 = p2
	p1 = g.skip_to_end_of_line(s1,p1)
	p2 = g.skip_to_end_of_line(s2,p2)
	result = self.compare_comments(s1[first1:p1],s2[first2:p2])
	if not result:
		self.mismatch("Mismatched sentinel comments")
elif g.match(s1,p1,self.line_comment) and g.match(s2,p2,self.line_comment):
	first1 = p1 ; first2 = p2
	p1 = g.skip_to_end_of_line(s1,p1)
	p2 = g.skip_to_end_of_line(s2,p2)
	result = self.compare_comments(s1[first1:p1],s2[first2:p2])
	if not result:
		self.mismatch("Mismatched single-line comments")
elif g.match(s1,p1,self.comment) and g.match(s2,p2,self.comment):
	while (p1 &lt; len(s1) and p2 &lt; len(s2) and
		not g.match(s1,p1,self.comment_end) and not g.match(s2,p2,self.comment_end)):
		# ws doesn't have to match exactly either!
		if g.is_nl(s1,p1)or g.is_ws(s1[p1]):
			p1 = g.skip_ws_and_nl(s1,p1)
		else: p1 += 1
		if g.is_nl(s2,p2)or g.is_ws(s2[p2]):
			p2 = g.skip_ws_and_nl(s2,p2)
		else: p2 += 1
	p1 = g.skip_ws_and_nl(s1,p1)
	p2 = g.skip_ws_and_nl(s2,p2)
	if g.match(s1,p1,self.comment_end) and g.match(s2,p2,self.comment_end):
		first1 = p1 ; first2 = p2
		p1 += len(self.comment_end)
		p2 += len(self.comment_end)
		result = self.compare_comments(s1[first1:p1],s2[first2:p2])
	else: result = false
	if not result:
		self.mismatch("Mismatched block comments")
elif g.match(s1,p1,self.comment2) and g.match(s2,p2,self.comment2):
	while (p1 &lt; len(s1) and p2 &lt; len(s2) and
		not g.match(s1,p1,self.comment2_end) and not g.match(s2,p2,self.comment2_end)):
		# ws doesn't have to match exactly either!
		if  g.is_nl(s1,p1)or g.is_ws(s1[p1]):
			p1 = g.skip_ws_and_nl(s1,p1)
		else: p1 += 1
		if g.is_nl(s2,p2)or g.is_ws(s2[p2]):
			p2 = g.skip_ws_and_nl(s2,p2)
		else: p2 += 1
	p1 = g.skip_ws_and_nl(s1,p1)
	p2 = g.skip_ws_and_nl(s2,p2)
	if g.match(s1,p1,self.comment2_end) and g.match(s2,p2,self.comment2_end):
		first1 = p1 ; first2 = p2
		p1 += len(self.comment2_end)
		p2 += len(self.comment2_end)
		result = self.compare_comments(s1[first1:p1],s2[first2:p2])
	else: result = false
	if not result:
		self.mismatch("Mismatched alternalte block comments")
else:
	&lt;&lt; Compare single characters &gt;&gt;</t>
<t tx="ekr.20031218072017.3560">if result:
	p1 = g.skip_ws_and_nl(s1,p1)
	p2 = g.skip_ws_and_nl(s2,p2)
	result = p1 &gt;= len(s1) and p2 &gt;= len(s2)
	if not result:
		# Show the ends of both parts.
		p1 = len(s1)
		p2 = len(s2)
		self.mismatch("One part ends before the other.")</t>
<t tx="ekr.20031218072017.3561">if 0:
	g.trace(self.message +
		"\nPart " + `part` + ", section " + name +
		"\n1:" + g.get_line(s1,p1) +
		"\n2:" + g.get_line(s2,p2) )</t>
<t tx="ekr.20031218072017.3562">def mismatch (self,message):

	self.message = message</t>
<t tx="ekr.20031218072017.3563">@ This function scans an entire derived file in s, discovering section or part definitions.

This is the easiest place to delete leading whitespace from each line: we simply don't copy it.  We also ignore leading blank lines and trailing blank lines.  The resulting definition must compare equal using the "forgiving" compare to any other definitions of that section or part.

We use a stack to handle nested expansions.  The outermost level of expansion corresponds to the @root directive that created the file.  When the stack is popped, the indent variable is restored.

self.root_name is the name of the file mentioned in the @root directive.

The caller has deleted all body_ignored_newlines from the text.
@c

def scan_derived_file (self,s):

	c = self.c
	self.def_stack = []
	&lt;&lt; set the private global matching vars &gt;&gt;
	line_indent = 0  # The indentation to use if we see a section reference.
	# indent is the leading whitespace to be deleted.
	i, indent = g.skip_leading_ws_with_indent(s,0,self.tab_width)
	&lt;&lt; Skip the header line output by tangle &gt;&gt;
	# The top level of the stack represents the root.
	self.push_new_def_node(self.root_name,indent,1,1,true)
	while i &lt; len(s):
		ch = s[i]
		if ch == g.body_ignored_newline:
			i += 1 # ignore
		elif ch == g.body_newline:
			&lt;&lt; handle the start of a new line &gt;&gt;
		elif g.match(s,i,self.sentinel) and self.is_sentinel_line(s,i):
			&lt;&lt; handle a sentinel line  &gt;&gt;
		elif g.match(s,i,self.line_comment) or g.match(s,i,self.verbatim):
			&lt;&lt; copy the entire line &gt;&gt;
		elif g.match(s,i,self.comment):
			&lt;&lt; copy a multi-line comment &gt;&gt;
		elif g.match(s,i,self.comment2):
			&lt;&lt; copy an alternate multi-line comment &gt;&gt;
		elif g.match(s,i,self.string1) or g.match(s,i,self.string2):
			&lt;&lt; copy a string &gt;&gt;
		else:
			self.copy(ch) ; i += 1
	&lt;&lt; end all open sections &gt;&gt;</t>
<t tx="ekr.20031218072017.3564">if self.sentinel or self.comment:
	line = g.choose(self.sentinel,self.sentinel,self.comment) + " Created by Leo from" 
	if g.match(s,i,line):
		# Even a block comment will end on the first line.
		i = g.skip_to_end_of_line(s,i)</t>
<t tx="ekr.20031218072017.3565">self.copy(ch) ; i += 1 # This works because we have one-character newlines.

# Set line_indent, used only if we see a section reference.
junk, line_indent = g.skip_leading_ws_with_indent(s,i,c.tab_width)
i = g.skip_leading_ws(s,i,indent,c.tab_width) # skip indent leading white space.</t>
<t tx="ekr.20031218072017.3566">@ This is the place to eliminate the proper amount of whitespace from the start of each line. We do this by setting the 'indent' variable to the leading whitespace of the first _non-blank_ line following the opening sentinel.

Tangle increases the indentation by one tab if the section reference is not the first non-whitespace item on the line,so self code must do the same.
@c

# g.trace(`g.get_line(s,i)`)
result,junk,kind,name,part,of,end,nl_flag = self.is_sentinel_line_with_data(s,i)
assert(result==true)
&lt;&lt; terminate the previous part of this section if it exists &gt;&gt;

if kind == start_sentinel_line:
	indent = line_indent
	# Increase line_indent by one tab width if the
	# the section reference does not start the line.
	j = i - 1
	while j &gt;= 0:
		if g.is_nl(s,j):
			break
		elif not g.is_ws(s[j]):
			indent += abs(self.tab_width) ; break
		j -= 1
	# copy the section reference to the _present_ section,
	# but only if this is the first part of the section.
	if part &lt; 2: self.copy(name)
	# Skip to the first character of the new section definition.
	i = g.skip_to_end_of_line(s,i)
	# Start the new section.
	self.push_new_def_node(name,indent,part,of,nl_flag)
else:
	assert(kind == end_sentinel_line)
	# Skip the sentinel line.
	i = g.skip_to_end_of_line(s,i)
	# Skip a newline only if it was added after(!newline)
	if not nl_flag:
		i = g.skip_ws(s,i)
		i = g.skip_nl(s,i)
		i = g.skip_ws(s,i)
		# Copy any whitespace following the (!newline)
		while end and g.is_ws(s[end]):
			self.copy(s[end])
			end += 1
	# Restore the old indentation level.
	if len(self.def_stack) &gt; 0:
		indent = self.def_stack[-1].indent</t>
<t tx="ekr.20031218072017.3567">@ We have just seen a sentinel line. Any kind of sentinel line will terminate a previous part of the present definition. For end sentinel lines, the present section name must match the name on the top of the stack.
@c

if len(self.def_stack) &gt; 0:
	dn = self.def_stack[-1]
	if self.compare_section_names(name,dn.name):
		dn = self.def_stack.pop()
		if len(dn.code) &gt; 0:
			thePart, found = self.ust_lookup(name,dn.part,false,false) # not root, not update
			# Check for incompatible previous definition.
			if found and not self.forgiving_compare(name,dn.part,dn.code,thePart.code):
				self.error("Incompatible definitions of " + name)
			elif not found:
				self.ust_enter(name,dn.part,dn.of,dn.code,dn.nl_flag,false) # not root
	elif kind == end_sentinel_line:
		self.error("Missing sentinel line for: " + name)</t>
<t tx="ekr.20031218072017.3568">j = i ; i = g.skip_to_end_of_line(s,i)
self.copy(s[j:i])
</t>
<t tx="ekr.20031218072017.3569">j = i
if self.language == "pascal":
	i = g.skip_pascal_string(s,i)
else:
	i = g.skip_string(s,i)
self.copy(s[j:i])</t>
<t tx="ekr.20031218072017.3570">assert(self.comment_end)

# Scan for the ending delimiter.
j = i ; i += len(self.comment)
while i &lt; len(s) and not g.match(s,i,self.comment_end):
	i += 1
if g.match(s,i,self.comment_end):
	i += len(self.comment_end)
self.copy(s[j:i])</t>
<t tx="ekr.20031218072017.3571">assert(self.comment2_end)
j = i
# Scan for the ending delimiter.
i += len(self.comment2)
while i &lt; len(s) and not g.match(s,i,self.comment2_end):
	i += 1
if g.match(s,i,self.comment2_end):
	i += len(self.comment2)
self.copy(s[j:i])</t>
<t tx="ekr.20031218072017.3572">dn= None
while len(self.def_stack) &gt; 0:
	dn = self.def_stack.pop()
	if len(self.def_stack) &gt; 0:
		self.error("Unterminated section: " + dn.name)
if dn:
	# Terminate the root setcion.
	i = len(s)
	if dn.code and len(dn.code) &gt; 0:
		self.ust_enter(dn.name,dn.part,dn.of,dn.code,dn.nl_flag,true) # is_root_flag
	else:
		self.error("Missing root part")
else:
	self.error("Missing root section")</t>
<t tx="ekr.20031218072017.3573">@ This function handles the actual updating of section definitions in the web.  Only code parts are updated, never doc parts.

During pass 2 of Untangle, skip_body() calls this routine when it discovers the definition of a section in the outline.  We look up the name in the ust. If an entry exists, we compare the code (the code part of an outline node) with the code part in the ust. We update the code part if necessary.

We use the forgiving_compare() to compare code parts. It's not possible to change only trivial whitespace using Untangle because forgiving_compare() ignores trivial whitespace.
@c

# Major change: 2/23/01: Untangle never updates doc parts.

def update_def (self,name,part_number,head,code,tail,is_root_flag): # Doc parts are never updated!

	# g.trace(`name` + ":" + `part_number` + ":" + `code`)
	p = self.p ; body = p.bodyString()
	if not head: head = ""
	if not tail: tail = ""
	if not code: code = ""
	false_ret = head + code + tail, len(head) + len(code), false
	part, found = self.ust_lookup(name,part_number,is_root_flag,true) # Set update
	if not found:
		return false_ret  # Not an error.
	ucode = g.toUnicode(part.code,self.encoding) # 4/4/03
	&lt;&lt; Remove leading blank lines and comments from ucode &gt;&gt;
	# g.trace(`ucode`)
	if not ucode or len(ucode) == 0:
		return false_ret # Not an error.
	if code and self.forgiving_compare(name,part,code,ucode):
		return false_ret # Not an error.
	# Update the body.
	g.es("***Updating: " + p.headString())
	i = g.skip_blank_lines(ucode,0)
	ucode = ucode[i:]
	ucode = string.rstrip(ucode)
	# Add the trailing whitespace of code to ucode.
	code2 = string.rstrip(code)
	trail_ws = code[len(code2):]
	ucode = ucode + trail_ws
	body = head + ucode + tail
	self.update_current_vnode(body)
	if 0:
		g.trace("head:" + `head`)
		g.trace("ucode:" + `ucode`)
		g.trace("tail:" + `tail`)
	return body, len(head) + len(ucode),true
</t>
<t tx="ekr.20031218072017.3574">@ We assume that any leading comments came from an @doc part.  This isn't always valid and this code will eliminate such leading comments.  This is a defect in Untangle; it can hardly be avoided.
@c

i = g.skip_blank_lines(ucode,0)
j = g.skip_ws(ucode,i)
# g.trace("comment,end,single:"+`self.comment`+":"+`self.comment_end`+":"+`self.line_comment`)

if self.comment and self.comment_end:
	if ucode and g.match(ucode,j,self.comment):
		# Skip to the end of the block comment.
		i = j + len(self.comment)
		i = string.find(ucode,self.comment_end,i)
		if i == -1: ucode = None # An unreported problem in the user code.
		else:
			i += len(self.comment_end)
			i = g.skip_blank_lines(ucode,i)
elif self.line_comment:
	while ucode and g.match(ucode,j,self.line_comment):
		i = g.skip_line(ucode,i)
		i = g.skip_blank_lines(ucode,i)
		j = g.skip_ws(ucode,i)
# Only the value of ucode matters here.
if ucode: ucode = ucode[i:]</t>
<t tx="ekr.20031218072017.3575">def update_current_vnode (self,s):

	"""Called from within the Untangle logic to update the body text of self.p."""

	c = self.c ; p = self.p
	assert(self.p)
	p.setBodyStringOrPane(s)

	c.beginUpdate()
	c.setChanged(true)
	p.setDirty()
	p.setMarked()
	c.endUpdate()</t>
<t tx="ekr.20031218072017.3576">@ These utilities deal with tangle ivars, so they should be methods.
</t>
<t tx="ekr.20031218072017.3577"># Compares section names or root names.
# Arbitrary text may follow the section name on the same line.

def compare_section_names (self,s1,s2):

	# g.trace(`g.get_line(s1,0)` + ":" + `g.get_line(s2,0)`)
	if g.match(s1,0,"&lt;&lt;") or g.match(s1,0,"@&lt;"):
		# Use a forgiving compare of the two section names.
		delim = g.choose(self.use_cweb_flag,"@&gt;","&gt;&gt;")
		i1 = i2 = 0
		while i1 &lt; len(s1) and i2 &lt; len(s2):
			ch1 = s1[i1] ; ch2 = s2[i2]
			if g.is_ws(ch1) and g.is_ws(ch2):
				i1 = g.skip_ws(s1,i1)
				i2 = g.skip_ws(s2,i2)
			elif g.match(s1,i1,delim) and g.match(s2,i2,delim):
				return true
			elif string.lower(ch1) == string.lower(ch2):
				i1 += 1 ; i2 += 1
			else: return false
		return false
	else: # A root name.
		return s1 == s2</t>
<t tx="ekr.20031218072017.3578">def copy (self, s):

	assert(len(self.def_stack) &gt; 0)
	dn = self.def_stack[-1] # Add the code at the top of the stack.
	dn.code += s</t>
<t tx="ekr.20031218072017.3579">def error (self,s):
	self.errors += 1
	g.es_error(s)
	
def pathError (self,s):
	if not self.path_warning_given:
		self.path_warning_given = true
		self.error(s)
	
def warning (self,s):
	g.es_error(s)
</t>
<t tx="ekr.20031218072017.3580"># This function returns true if we are at the end of preprocessor directive.

def is_end_of_directive (self,s,i):

	return g.is_nl(s,i) and not self.is_escaped(s,i)</t>
<t tx="ekr.20031218072017.3581">def is_end_of_string (self,s,i,delim):

	return i &lt; len(s) and s[i] == delim and not self.is_escaped(s,i)</t>
<t tx="ekr.20031218072017.3582"># This function returns true if the s[i] is preceded by an odd number of back slashes.

def is_escaped (self,s,i):

	back_slashes = 0 ; i -= 1
	while i &gt;= 0 and s[i] == '\\':
		back_slashes += 1
		i -= 1
	return (back_slashes &amp; 1) == 1
</t>
<t tx="ekr.20031218072017.3583">def is_section_name(self,s,i):

	kind = bad_section_name ; end = -1

	if self.use_cweb_flag :
		if g.match(s,i,"@&lt;"):
			i, kind, end = self.skip_cweb_section_name(s,i)
	elif g.match(s,i,"&lt;&lt;"):
		i, kind, end = self.skip_noweb_section_name(s,i)

	# g.trace(`kind` + ":" + `g.get_line(s,end)`)
	return i, kind, end</t>
<t tx="ekr.20031218072017.3584">@ This function returns true if i points to a line a sentinel line of one of the following forms:

start_sentinel &lt;&lt;section name&gt;&gt; end_sentinel
start_sentinel &lt;&lt;section name&gt;&gt; (n of m) end_sentinel
start_sentinel -- end -- &lt;&lt;section name&gt;&gt; end_sentinel
start_sentinel -- end -- &lt;&lt;section name&gt;&gt; (n of m) end_sentinel

start_sentinel: the string that signals the start of sentinel lines\
end_sentinel:   the string that signals the endof sentinel lines.

end_sentinel may be None,indicating that sentinel lines end with a newline.

Any of these forms may end with (!newline), indicating that the section reference was not followed by a newline in the orignal text.  We set nl_flag to false if such a string is seen. The name argument contains the section name.

The valid values of kind param are:

non_sentinel_line,   # not a sentinel line.
start_sentinel_line, #   /// &lt;section name&gt; or /// &lt;section name&gt;(n of m)
end_sentinel_line  //  /// -- end -- &lt;section name&gt; or /// -- end -- &lt;section name&gt;(n of m).
@c
def is_sentinel_line (self,s,i):

	result,i,kind,name,part,of,end,nl_flag = self.is_sentinel_line_with_data(s,i)
	return result

def is_sentinel_line_with_data (self,s,i):

	start_sentinel = self.sentinel
	end_sentinel = self.sentinel_end
	&lt;&lt; Initialize the return values &gt;&gt;
	&lt;&lt; Make sure the line starts with start_sentinel &gt;&gt;
	&lt;&lt; Set end_flag if we have -- end -- &gt;&gt;
	&lt;&lt; Make sure we have a section reference &gt;&gt;
	&lt;&lt; Set part and of if they exist &gt;&gt;
	&lt;&lt; Set nl_flag to false if !newline exists &gt;&gt;
	&lt;&lt; Make sure the line ends with end_sentinel &gt;&gt;
	kind = g.choose(end_flag,end_sentinel_line,start_sentinel_line)
	return true,i,kind,name,part,of,end,nl_flag</t>
<t tx="ekr.20031218072017.3585">name = end = None
part = of = 1
kind = non_sentinel_line
nl_flag = true
false_data = (false,i,kind,name,part,of,end,nl_flag)
</t>
<t tx="ekr.20031218072017.3586">if g.is_nl(s,i): i = g.skip_nl(s,i)
i = g.skip_ws(s,i)

# 4/18/00: We now require an exact match of the sentinel.
if g.match(s,i,start_sentinel):
	i += len(start_sentinel)
else:
	return false_data</t>
<t tx="ekr.20031218072017.3587"># If i points to "-- end --", this code skips it and sets end_flag.

end_flag = false
i = g.skip_ws(s,i)
if g.match(s,i,"--"):
	while i &lt; len(s) and s[i] == '-':
		i += 1
	i = g.skip_ws(s,i)
	if not g.match(s,i,"end"):
		return false_data # Not a valid sentinel line.
	i += 3 ; i = g.skip_ws(s,i)
	if not g.match(s,i,"--"):
		return false_data # Not a valid sentinel line.
	while i &lt; len(s) and s[i] == '-':
		i += 1
	end_flag = true</t>
<t tx="ekr.20031218072017.3588">i = g.skip_ws(s,i)

if (self.use_noweb_flag and g.match(s,i,"&lt;&lt;") or
	self.use_cweb_flag  and g.match(s,i,"@&lt;") ):

	j = i ; i, kind, end = self.skip_section_name(s,i)
	if kind != section_ref:
		return false_data
	name = s[j:i]
else:
	return false_data</t>
<t tx="ekr.20031218072017.3589"># This code handles (m of n), if it exists.
i = g.skip_ws(s,i)
if g.match(s,i,'('):
	j = i
	i += 1 ; i = g.skip_ws(s,i)
	i, part = self.scan_short_val(s,i)
	if part == -1:
		i = j # back out of the scanning for the number.
		part = 1
	else:
		i = g.skip_ws(s,i)
		if not g.match(s,i,"of"):
			return false_data
		i += 2 ; i = g.skip_ws(s,i)
		i, of = self.scan_short_val(s,i)
		if of == -1:
			return false_data
		i = g.skip_ws(s,i)
		if g.match(s,i,')'):
			i += 1 # Skip the paren and do _not_ return.
		else:
			return false_data</t>
<t tx="ekr.20031218072017.3590">line = "(!newline)"
i = g.skip_ws(s,i)
if g.match(s,i,line):
	i += len(line)
	nl_flag = false
</t>
<t tx="ekr.20031218072017.3591">i = g.skip_ws(s,i)
if end_sentinel:
	# Make sure the line ends with the end sentinel.
	if g.match(s,i,end_sentinel):
		i += len(end_sentinel)
	else:
		return false_data

end = i # Show the start of the whitespace.
i = g.skip_ws(s,i)
if i &lt; len(s) and not g.is_nl(s,i):
	return false_data</t>
<t tx="ekr.20031218072017.3592"># This function pushes a new def_node on the top of the section stack.

def push_new_def_node (self,name,indent,part,of,nl_flag):
		
	# g.trace(`name` + ":" + `part`)
	node = def_node(name,indent,part,of,nl_flag,None)
	self.def_stack.append(node)</t>
<t tx="ekr.20031218072017.3593"># This function scans a positive integer.
# returns (i,val), where val == -1 if there is an error.

def scan_short_val (self,s,i):

	if i &gt;= len(s) or s[i] not in string.digits:
		return i, -1

	j = i
	while i &lt; len(s) and s[i] in string.digits:
		i += 1

	val = int(s[j:i])
	# g.trace(s[j:i] + ":" + `val`)
	return i, val</t>
<t tx="ekr.20031218072017.3594">def setRootFromHeadline (self,p):

	s = p.headString()

	if s[0:5] == "@root":
		i,self.start_mode = g.scanAtRootOptions(s,0)
		i = g.skip_ws(s,i)

		if i &lt; len(s): # Non-empty file name.
			# self.root_name must be set later by token_type().
			self.root = s[i:]</t>
<t tx="ekr.20031218072017.3595">@ This function skips past a section name that starts with @&lt; and ends with @&gt;. This code also skips any = following the section name.

Returns (i, kind, end), where kind is:

	bad_section_name:  @ &lt; with no matching @ &gt;
	section_ref: @ &lt; name @ &gt;
	section_def: @ &lt; name @ &gt; =

Unlike noweb, bad section names generate errors.
@c

def skip_cweb_section_name(self,s,i):
	
	j = i # Used for error message.
	kind = bad_section_name ; end = -1
	runon = false ; empty_name = true
	assert(s[i:i+2]=="@&lt;")
	i += 2
	while i &lt; len(s):
		if g.match(s,i,"@&gt;="):
			i += 3 ; end = i-1 ; kind = section_def ; break
		elif g.match(s,i,"@&gt;"):
			i += 2 ; end = i ; kind = section_ref ; break
		elif g.match(s,i,"@&lt;"):
			runon = true ; break
		elif g.match(s,i,"@@"): i += 2
		elif g.is_ws_or_nl(s,i): i += 1
		else:
			i += 1 ; empty_name = false

	if empty_name:
		g.scanError("empty CWEB section name: " + s[j:i])
		return i, bad_section_name, -1
	elif i &gt;= len(s) or runon:
		g.scanError("Run on CWEB section name: " + s[j:i])
		return i, bad_section_name, -1
	else:
		return i, kind, end</t>
<t tx="ekr.20031218072017.3596">@ This function skips past a section name that starts with &lt; &lt; and might end with &gt; &gt; or &gt; &gt; =. The entire section name must appear on the same line.

Note: this code no longer supports extended noweb mode.

Returns (i, kind, end),
	end indicates the end of the section name itself (not counting the =).
	kind is one of:
		bad_section_name: "no matching "&gt;&gt;" or "&gt;&gt;"  This is _not_ a user error!
		section_ref: &lt; &lt; name &gt; &gt;
		section_def: &lt; &lt; name &gt; &gt; =
		at_root:     &lt; &lt; * &gt; &gt; =
@c
def skip_noweb_section_name(self,s,i):
	
	assert(g.match(s,i,"&lt;&lt;"))
	i += 2
	j = i # Return this value if no section name found.
	kind = bad_section_name ; end = -1 ; empty_name = true

	# Scan for the end of the section name.
	while i &lt; len(s) and not g.is_nl(s,i):
		if g.match(s,i,"&gt;&gt;="):
			i += 3 ; end = i - 1 ; kind = section_def ; break
		elif g.match(s,i,"&gt;&gt;"):
			i += 2 ; end = i ; kind = section_ref ; break
		elif g.is_ws_or_nl(s,i):
			i += 1
		elif empty_name and s[i] == '*':
			empty_name = false
			i = g.skip_ws(s,i+1) # skip the '*'
			if g.match(s,i,"&gt;&gt;="):
				i += 3 ; end = i - 1 ; kind = at_root ; break
		else:
			i += 1 ; empty_name = false

	if empty_name:
		kind = bad_section_name
	if kind == bad_section_name:
		i = j
	return i, kind, end</t>
<t tx="ekr.20031218072017.3597"># Returns a tuple (i, kind, end)

def skip_section_name(self,s,i):

	if self.use_noweb_flag:
		return self.skip_noweb_section_name(s,i)
	else:
		return self.skip_cweb_section_name(s,i)</t>
<t tx="ekr.20031218072017.3598">def standardize_name (self,name):

	"""Removes leading and trailing brackets, converts white space to a single blank and converts to lower case."""

	# Convert to lowercase.
	name = string.lower(name)
	# Convert whitespace to a single space.
	name = string.replace(name,'\t',' ')
	name = string.replace(name,'  ',' ')
	# Remove leading '&lt;'
	i = 0 ; n = len(name)
	while i &lt; n and name[i] == '&lt;':
		i += 1
	j = i
	# Find the first '&gt;'
	while i &lt; n and name [i] != '&gt;':
		i += 1
	name = string.strip(name[j:i])
	# g.trace(`name`)
	return name</t>
<t tx="ekr.20031218072017.3599">def token_type(self,s,i,err_flag):

	"""This method returns a code indicating the apparent kind of token at the position i.
	
	The caller must determine whether section definiton tokens are valid.
	
	returns (kind, end) and sets global root_name using setRootFromText()."""

	kind = plain_line ; end = -1
	if self.use_noweb_flag:
		&lt;&lt; set token_type in noweb mode &gt;&gt;
	else:
		&lt;&lt; set token_type for CWEB mode &gt;&gt;
	if kind == at_other :
		&lt;&lt; set kind for directive &gt;&gt;
	# g.trace(`kind` + ":" + `g.get_line(s,i)`)
	return kind, end
</t>
<t tx="ekr.20031218072017.3600">if g.match(s,i,"&lt;&lt;"):
	i, kind, end = self.skip_section_name(s,i)
	if kind == bad_section_name:
		kind = plain_line # not an error.
	elif kind == at_root:
		if self.head_root:
			self.setRootFromText(self.head_root,err_flag)
		else:
			kind = bad_section_name # The warning has been given.
elif g.match(s,i,"@ ") or g.match(s,i,"@\t") or g.match(s,i,"@\n"):
	# 10/30/02: Only @doc starts a noweb doc part in raw cweb mode.
	kind = g.choose(self.raw_cweb_flag,plain_line,at_doc)
elif g.match(s,i,"@@"): kind = at_at
elif i &lt; len(s) and s[i] == '@': kind = at_other
else: kind = plain_line</t>
<t tx="ekr.20031218072017.3601">i = g.skip_ws(s,i)
if g.match(s,i,"@*") or g.match(s,i,"@ "): kind = at_doc
elif g.match(s,i,"@&lt;"): i, kind, end = self.skip_section_name(s,i)
elif g.match(s,i,"@@"): kind = at_at
elif g.match_word(s,i,"@c") or g.match_word(s,i,"@p"): kind = at_code
elif i &lt; len(s) and s[i] == '@':
	if   i + 1 &gt;= len(s): kind = at_doc
	elif i + 1 &lt; len(s) and s[i+1] not in string.ascii_letters:
		kind = at_web
	else: kind = at_other # Set kind later
else: kind = plain_line</t>
<t tx="ekr.20031218072017.3602"># This code will return at_other for any directive other than those listed.

if g.match_word(s,i,"@c"):
	# 10/30/02: Only @code starts a code section in raw cweb mode.
	kind = g.choose(self.raw_cweb_flag,plain_line,at_code)
else:
	for name, type in [
		("@chapter", at_chapter),
		("@code", at_code),
		("@doc", at_doc),
		("@root", at_root),
		("@section", at_section) ]:
		if g.match_word(s,i,name):
			kind = type ; break
		
if self.raw_cweb_flag and kind == at_other:
	# 10/30/02: Everything else is plain text in raw cweb mode.
	kind = plain_line

if kind == at_root:
	i = self.setRootFromText(s[i:],err_flag)</t>
<t tx="ekr.20031218072017.3603">@language python

# Undo manager for leo.py.

&lt;&lt; How Leo implements unlimited undo &gt;&gt;
&lt;&lt; Define optional ivars &gt;&gt;

import leoGlobals as g
from leoGlobals import true,false

import string,types

@others</t>
<t tx="ekr.20031218072017.3604">optionalIvars = (
	"lastChild",
	"parent","oldParent",
	"back","oldBack",
	"n","oldN","oldV",
	"oldText","newText",
	"oldSel","newSel",
	"sort","select",
	"oldTree","newTree", # Added newTree 10/14/03
	"yview",
	# For incremental undo typing...
	"leading","trailing",
	"oldMiddleLines","newMiddleLines",
	"oldNewlines","newNewlines")</t>
<t tx="ekr.20031218072017.3605">class baseUndoer:
	"""The base class of the undoer class."""
	@others
	
class undoer (baseUndoer):
	"""A class that implements unlimited undo and redo."""
	pass</t>
<t tx="ekr.20031218072017.3606">def __init__ (self,c):
	
	u = self ; u.c = c
	
	# Ivars to transition to new undo scheme...
	
	u.debug = false # true: enable debugging code in new undo scheme.
	u.debug_print = false # true: enable print statements in debug code.
	u.new_undo = true # true: enable new debug code.

	# Statistics comparing old and new ways (only if u.debug is on).
	u.new_mem = 0
	u.old_mem = 0

	# State ivars...
	u.undoType = "Can't Undo"
	
	# These must be set here, _not_ in clearUndoState.
	u.redoMenuLabel = "Can't Redo"
	u.undoMenuLabel = "Can't Undo"
	u.realRedoMenuLabel = "Can't Redo"
	u.realUndoMenuLabel = "Can't Undo"
	u.undoing = false # true if executing an Undo command.
	u.redoing = false # true if executing a Redo command.</t>
<t tx="ekr.20031218072017.3607">def clearIvars (self):
	
	self.p = None # The position/node being operated upon for undo and redo.
	for ivar in optionalIvars:
		setattr(self,ivar,None)</t>
<t tx="ekr.20031218072017.3608"></t>
<t tx="ekr.20031218072017.3609">def clearUndoState (self):

	"""Clears then entire Undo state.
	
	All non-undoable commands should call this method."""
	
	u = self
	u.setRedoType("Can't Redo")
	u.setUndoType("Can't Undo")
	u.beads = [] # List of undo nodes.
	u.bead = -1 # Index of the present bead: -1:len(beads)
	u.clearIvars()</t>
<t tx="ekr.20031218072017.3610"># Translation does not affect these routines.

def canRedo (self):

	u = self
	return u.redoMenuLabel != "Can't Redo"

def canUndo (self):

	u = self
	return u.undoMenuLabel != "Can't Undo"
</t>
<t tx="ekr.20031218072017.3611">def enableMenuItems (self):

	u = self ; frame = u.c.frame
	
	menu = frame.menu.getMenu("Edit")
	frame.menu.enableMenu(menu,u.redoMenuLabel,u.canRedo())
	frame.menu.enableMenu(menu,u.undoMenuLabel,u.canUndo())
</t>
<t tx="ekr.20031218072017.3612">def getBead (self,n):
	
	u = self
	if n &lt; 0 or n &gt;= len(u.beads):
		return None
	d = u.beads[n]
	# g.trace(n,len(u.beads),d)
	self.clearIvars()
	u.p = d["v"]
	u.undoType = d["undoType"]

	for ivar in optionalIvars:
		val = d.get(ivar,None)
		setattr(u,ivar,val)

	if not u.new_undo: # Recreate an "oldText" entry if necessary.
		if u.undoType == "Typing" and u.oldText == None:
			assert(n &gt; 0)
			old_d = u.beads[n-1]
			# The user will lose data if these asserts fail.
			assert(old_d["undoType"] == "Typing")
			assert(old_d["v"] == u.p)
			u.oldText = old_d["newText"]
			# g.trace(`u.oldText`)
	return d
	
def peekBead (self,n):
	
	u = self
	if n &lt; 0 or n &gt;= len(u.beads):
		return None
	d = u.beads[n]
	# g.trace(n,len(u.beads),d)
	return d

def setBead (self,n,keywords=None):

	u = self ; d = {}
	d["undoType"]=u.undoType
	d["v"]=u.p
	# Only enter significant entries into the dictionary.
	# This is an important space optimization for typing.
	for ivar in optionalIvars:
		if getattr(u,ivar) != None:
			d[ivar] = getattr(u,ivar)
	# copy all significant keywords to d.
	if keywords:
		for key in keywords.keys():
			if keywords[key] != None:
				d[key] = keywords[key]
	# Clear the "oldText" entry if the previous entry was a "Typing" entry.
	# This optimization halves the space needed for Undo/Redo Typing.
	if not u.new_undo:
		if u.undoType == "Typing" and n &gt; 0:
			old_d = u.beads[n-1]
			if old_d["undoType"] == "Typing" and old_d["v"] == u.p:
				del d["oldText"] # We can recreate this entry from old_d["newText"]
				# g.trace(`u.oldText`)
	# g.trace(d)
	return d
</t>
<t tx="ekr.20031218072017.3613">def redoMenuName (self,name):

	if name=="Can't Redo":
		return name
	else:
		return "Redo " + name

def undoMenuName (self,name):

	if name=="Can't Undo":
		return name
	else:
		return "Undo " + name</t>
<t tx="ekr.20031218072017.3614"># These routines update both the ivar and the menu label.
def setRedoType (self,type):
	u = self ; frame = u.c.frame
	menu = frame.menu.getMenu("Edit")
	name = u.redoMenuName(type)
	if name != u.redoMenuLabel:
		# Update menu using old name.
		realLabel = frame.menu.getRealMenuName(name)
		if realLabel == name:
			underline=g.choose(g.match(name,0,"Can't"),-1,0)
		else:
			underline = realLabel.find("&amp;")
		realLabel = realLabel.replace("&amp;","")
		frame.menu.setMenuLabel(menu,u.realRedoMenuLabel,realLabel,underline=underline)
		u.redoMenuLabel = name
		u.realRedoMenuLabel = realLabel

def setUndoType (self,type):
	u = self ; frame = u.c.frame
	menu = frame.menu.getMenu("Edit")
	name = u.undoMenuName(type)
	if name != u.undoMenuLabel:
		# Update menu using old name.
		realLabel = frame.menu.getRealMenuName(name)
		if realLabel == name:
			underline=g.choose(g.match(name,0,"Can't"),-1,0)
		else:
			underline = realLabel.find("&amp;")
		realLabel = realLabel.replace("&amp;","")
		frame.menu.setMenuLabel(menu,u.realUndoMenuLabel,realLabel,underline=underline)
		u.undoType = type
		u.undoMenuLabel = name
		u.realUndoMenuLabel = realLabel</t>
<t tx="ekr.20031218072017.3615">@ This routine saves enough information so an operation can be undone and redone.  We do nothing when called from the undo/redo logic because the Undo and Redo commands merely reset the bead pointer.
@c

def setUndoParams (self,undo_type,p,**keywords):
	
	# g.trace(undo_type,p,keywords)

	u = self
	if u.redoing or u.undoing: return None
	if undo_type == None:
		return None
	if undo_type == "Can't Undo":
		u.clearUndoState()
		return None

	# Set the type: set the menu labels later.
	u.undoType = undo_type
	# Calculate the standard derived information.
	u.p = p
	u.parent = p.parent()
	u.back = p.back()
	u.n = p.childIndex()
	# Push params on undo stack, clearing all forward entries.
	u.bead += 1
	d = u.setBead(u.bead,keywords)
	u.beads[u.bead:] = [d]
	# g.trace(len(u.beads),u.bead,keywords)
	# Recalculate the menu labels.
	u.setUndoTypes()
	return d</t>
<t tx="ekr.20031218072017.3616">def setUndoTypes (self):
	
	u = self
	# g.trace(u.bead,len(u.beads))

	# Set the undo type and undo menu label.
	d = u.peekBead(u.bead)
	if d:
		u.setUndoType(d["undoType"])
	else:
		u.setUndoType("Can't Undo")

	# Set only the redo menu label.
	d = u.peekBead(u.bead+1)
	if d:
		u.setRedoType(d["undoType"])
	else:
		u.setRedoType("Can't Redo")</t>
<t tx="ekr.20031218072017.3617"></t>
<t tx="ekr.20031218072017.3618">def saveTree (self,p):
	
	tree = None ## no longer used??
	headlines = []
	bodies = []
	extraAttributes = []
	for p in p.subtree_iter(copy=true):
		headlines.append(p.headString())
		bodies.append(p.bodyString())
		data = p.v.extraAttributes(), p.v.t.extraAttributes()
		extraAttributes.append(data)

	return tree, headlines, bodies, extraAttributes

def restoreExtraAttributes (self,v,extraAttributes):

	v_extraAttributes, t_extraAttributes = extraAttributes
	v.setExtraAttributes(v_extraAttributes)
	v.t.setExtraAttributes(t_extraAttributes)</t>
<t tx="ekr.20031218072017.3619">def findSharedVnode (self,target):

	u = self ; c = u.c ; v = c.rootVnode()
	while v:
		if v != target and v.t == target.t:
			return v
		v = v.threadNext()
	return None</t>
<t tx="ekr.20031218072017.3620"># undoes the previous demote operation.
def undoDemote (self):
	
	u = self ; c = u.c
	p   = u.p.copy()
	ins = u.p.copy()
	last = u.lastChild
	assert(p.hasFirstChild)
	child = p.firstChild()
	c.beginUpdate()
	if 1: # update...
		# Do not undemote children up to last.
		# Do not use an iterator here.
		if last:
			while child and child != last:
				child = child.next()
			if child:
				child = child.next()
		while child:
			next = child.next()
			child.moveAfter(ins)
			ins = child
			child = next
		c.selectVnode(p)
	c.endUpdate()</t>
<t tx="ekr.20031218072017.3621"># Undoes the previous promote operation.
def undoPromote (self):
	
	u = self ; c = u.c ; p = u.p
	next = p.next()
	last = u.lastChild
	assert(next)
	c.beginUpdate()
	if 1: # update...
		while next: # don't use an iterator here.
			p2 = next
			next = p2.next()
			n = p.numberOfChildren()
			p2.moveToNthChildOf(p,n)
			if p2 == last: break
		c.selectVnode(p)
	c.endUpdate()</t>
<t tx="ekr.20031218072017.3622">def undoSortChildren (self):

	u = self ; c = u.c ; p = u.p
	assert(p)
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		index = 0
		for child in u.sort:
			child.moveToNthChildOf(p,index)
			index += 1
		p.setDirty()
		c.setChanged(true)
	c.endUpdate()</t>
<t tx="ekr.20031218072017.3623">def undoSortSiblings (self):
	
	u = self ; c = u.c ; p = u.p
	parent = p.parent()
	assert(p and parent)
	c.beginUpdate()
	if 1: # inside update...
		c.endEditing()
		index = 0
		for sib in u.sort:
			sib.moveToNthChildOf(parent,index)
			index += 1
		parent.setDirty()
		c.setChanged(true)
	c.endUpdate()</t>
<t tx="ekr.20031218072017.3624">def undoSortTopLevel (self):
	
	u = self ; c = u.c
	root = c.rootPosition()
	
	c.beginUpdate()
	c.endEditing()
	v = u.sort[0]
	v.moveToRoot(oldRoot=root)
	for next in u.sort[1:]:
		next.moveAfter(v)
		v = next
	c.setChanged(true)
	c.endUpdate()
</t>
<t tx="ekr.20031218072017.3625"></t>
<t tx="ekr.20031218072017.3626">import leoGlobals as g
from leoGlobals import true,false

class leoColorPanel:
	
	"""A base class to create Leo's color panel.
	
	Subclasses may create subsidiary panels."""
	
	&lt;&lt; define default color panel data &gt;&gt;

	@others</t>
<t tx="ekr.20031218072017.3627">colorPanelData = (
	#Dialog name,                option name,         default color),
	("Brackets",          "section_name_brackets_color", "blue"),
	("Comments",          "comment_color",               "red"),
	("CWEB section names","cweb_section_name_color",     "red"),
	("Directives",        "directive_color",             "blue"),
	("Doc parts",         "doc_part_color",              "red"),
	("Keywords" ,         "keyword_color",               "blue"),
	("Leo Keywords",      "leo_keyword_color",           "blue"),
	("Section Names",     "section_name_color",          "red"),
	("Strings",           "string_color",   "#00aa00"), # Used by IDLE.
	("Undefined Names",   "undefined_section_name_color","red") )</t>
<t tx="ekr.20031218072017.3628">def __init__ (self,c):
	
	self.c = c
	self.frame = c.frame
	self.top = None # Created in subclass.

	self.revertColors = {}
	
	config = g.app.config
	for name,option_name,default_color in self.colorPanelData:
		self.revertColors[option_name] = config.getColorsPref(option_name)</t>
<t tx="ekr.20031218072017.3629">def bringToFront (self):
	self.oops()

def oops(self):
	print "leoColorPanel oops:", g.callerName(2), "should be overridden in subclass"</t>
<t tx="ekr.20031218072017.3630">@language python

"""Leo's base compare class."""

import leoGlobals as g
from leoGlobals import true,false

import difflib,filecmp,os,string

@others</t>
<t tx="ekr.20031218072017.3631">def choose(cond, a, b): # warning: evaluates all arguments

	if cond: return a
	else: return b
</t>
<t tx="ekr.20031218072017.3632">def go ():

	cmp = leoCompare(
		commands = None,
		
		appendOutput = true,

		ignoreBlankLines = true,
		ignoreFirstLine1 = false,
		ignoreFirstLine2 = false,
		ignoreInteriorWhitespace = false,
		ignoreLeadingWhitespace = true,
		ignoreSentinelLines = false,
		
		limitCount = 9, # Zero means don't stop.
		limitToExtension = ".py",  # For directory compares.
		makeWhitespaceVisible = true,
		
		printBothMatches = false,
		printMatches = false,
		printMismatches = true,
		printTrailingMismatches = false,

		outputFileName = None)

	if 1: # Compare all files in Tangle test directories

		path1 = "c:\\prog\\test\\tangleTest\\"
		path2 = "c:\\prog\\test\\tangleTestCB\\"
		cmp.compare_directories(path1,path2)

	else: # Compare two files.

		name1 = "c:\\prog\\test\\compare1.txt"
		name2 = "c:\\prog\\test\\compare2.txt"
		cmp.compare_files(name1,name2)</t>
<t tx="ekr.20031218072017.3633">class baseLeoCompare:
	"""The base class for Leo's compare code."""
	@others
	
class leoCompare (baseLeoCompare):
	"""A class containing Leo's compare code."""
	pass</t>
<t tx="ekr.20031218072017.3634"># All these ivars are known to the leoComparePanel class.

def __init__ (self,

	# Keyword arguments are much convenient and more clear for scripts.
	commands = None,
	
	appendOutput = false,

	ignoreBlankLines = true,
	ignoreFirstLine1 = false,
	ignoreFirstLine2 = false,
	ignoreInteriorWhitespace = false,
	ignoreLeadingWhitespace = true,
	ignoreSentinelLines = false,

	limitCount = 0, # Zero means don't stop.
	limitToExtension = ".py",  # For directory compares.
	makeWhitespaceVisible = true,

	printBothMatches = false,
	printMatches = false,
	printMismatches = true,
	printTrailingMismatches = false,

	outputFileName = None ):
		
	# It is more convenient for the leoComparePanel to set these directly.
	self.c = commands
	
	self.appendOutput = appendOutput

	self.ignoreBlankLines = ignoreBlankLines
	self.ignoreFirstLine1 = ignoreFirstLine1
	self.ignoreFirstLine2 = ignoreFirstLine2
	self.ignoreInteriorWhitespace = ignoreInteriorWhitespace
	self.ignoreLeadingWhitespace = ignoreLeadingWhitespace
	self.ignoreSentinelLines = ignoreSentinelLines

	self.limitCount = limitCount
	self.limitToExtension = limitToExtension

	self.printBothMatches = printBothMatches
	self.printMatches = printMatches
	self.printMismatches = printMismatches
	self.printTrailingMismatches = printTrailingMismatches
	
	# For communication between methods...
	self.outputFileName = outputFileName
	self.fileName1 = None 
	self.fileName2 = None
	# Open files...
	self.outputFile = None</t>
<t tx="ekr.20031218072017.3635"># We ignore the filename portion of path1 and path2 if it exists.

def compare_directories (self,path1,path2):
	
	# Ignore everything except the directory name.
	dir1 = g.os_path_dirname(path1)
	dir2 = g.os_path_dirname(path2)
	dir1 = g.os_path_normpath(dir1)
	dir2 = g.os_path_normpath(dir2)
	
	if dir1 == dir2:
		self.show("Directory names are identical.\nPlease pick distinct directories.")
		return
		
	try:
		list1 = os.listdir(dir1)
	except:
		self.show("invalid directory:" + dir1)
		return
	try:
		list2 = os.listdir(dir2)
	except:
		self.show("invalid directory:" + dir2)
		return
		
	if self.outputFileName:
		self.openOutputFile()
	ok = self.outputFileName == None or self.outputFile
	if not ok:
		return

	# Create files and files2, the lists of files to be compared.
	files1 = []
	files2 = []
	for f in list1:
		junk, ext = g.os_path_splitext(f)
		if self.limitToExtension:
			if ext == self.limitToExtension:
				files1.append(f)
		else:
			files1.append(f)
	for f in list2:
		junk, ext = g.os_path_splitext(f)
		if self.limitToExtension:
			if ext == self.limitToExtension:
				files2.append(f)
		else:
			files2.append(f)

	# Compare the files and set the yes, no and fail lists.
	yes = [] ; no = [] ; fail = []
	for f1 in files1:
		head,f2 = g.os_path_split(f1)
		if f2 in files2:
			try:
				name1 = g.os_path_join(dir1,f1)
				name2 = g.os_path_join(dir2,f2)
				val = filecmp.cmp(name1,name2,0)
				if val: yes.append(f1)
				else:    no.append(f1)
			except:
				self.show("exception in filecmp.cmp")
				g.es_exception()
				fail.append(f1)
		else:
			fail.append(f1)
	
	# Print the results.
	for kind, files in (
		("----- matches --------",yes),
		("----- mismatches -----",no),
		("----- not found ------",fail)):
		self.show(kind)
		for f in files:
			self.show(f)
	
	if self.outputFile:
		self.outputFile.close()
		self.outputFile = None</t>
<t tx="ekr.20031218072017.3636">def compare_files (self, name1, name2):
	
	if name1 == name2:
		self.show("File names are identical.\nPlease pick distinct files.")
		return

	f1 = f2 = None
	try:
		f1 = self.doOpen(name1)
		f2 = self.doOpen(name2)
		if self.outputFileName:
			self.openOutputFile()
		ok = self.outputFileName == None or self.outputFile
		ok = g.choose(ok and ok != 0,1,0)
		if f1 and f2 and ok: # Don't compare if there is an error opening the output file.
			self.compare_open_files(f1,f2,name1,name2)
	except:
		self.show("exception comparing files")
		g.es_exception()
	try:
		if f1: f1.close()
		if f2: f2.close()
		if self.outputFile:
			self.outputFile.close() ; self.outputFile = None
	except:
		self.show("exception closing files")
		g.es_exception()</t>
<t tx="ekr.20031218072017.3637">def compare_lines (self,s1,s2):
	
	if self.ignoreLeadingWhitespace:
		s1 = string.lstrip(s1)
		s2 = string.lstrip(s2)

	if self.ignoreInteriorWhitespace:
		k1 = g.skip_ws(s1,0)
		k2 = g.skip_ws(s2,0)
		ws1 = s1[:k1]
		ws2 = s2[:k2]
		tail1 = s1[k1:]
		tail2 = s2[k2:]
		tail1 = string.replace(tail1," ","")
		tail1 = string.replace(tail1,"\t","")
		tail2 = string.replace(tail2," ","")
		tail2 = string.replace(tail2,"\t","")
		s1 = ws1 + tail1
		s2 = ws2 + tail2

	return s1 == s2</t>
<t tx="ekr.20031218072017.3638">def compare_open_files (self, f1, f2, name1, name2):

	# self.show("compare_open_files")
	lines1 = 0 ; lines2 = 0 ; mismatches = 0 ; printTrailing = true
	sentinelComment1 = sentinelComment2 = None
	if self.openOutputFile():
		self.show("1: " + name1)
		self.show("2: " + name2)
		self.show("")
	s1 = s2 = None
	&lt;&lt; handle opening lines &gt;&gt;
	while 1:
		if s1 == None:
			s1 = g.readlineForceUnixNewline(f1) ; lines1 += 1
		if s2 == None:
			s2 = g.readlineForceUnixNewline(f2) ; lines2 += 1
		&lt;&lt; ignore blank lines and/or sentinels &gt;&gt;
		n1 = len(s1) ; n2 = len(s2)
		if n1==0 and n2 != 0: self.show("1.eof***:")
		if n2==0 and n1 != 0: self.show("2.eof***:")
		if n1==0 or n2==0: break
		match = self.compare_lines(s1,s2)
		if not match: mismatches += 1
		&lt;&lt; print matches and/or mismatches &gt;&gt;
		&lt;&lt; warn if mismatch limit reached &gt;&gt;
		s1 = s2 = None # force a read of both lines.
	&lt;&lt; handle reporting after at least one eof is seen &gt;&gt;</t>
<t tx="ekr.20031218072017.3639">if self.ignoreSentinelLines:
	
	s1 = g.readlineForceUnixNewline(f1) ; lines1 += 1
	s2 = g.readlineForceUnixNewline(f2) ; lines2 += 1
	# Note: isLeoHeader may return None.
	sentinelComment1 = self.isLeoHeader(s1)
	sentinelComment2 = self.isLeoHeader(s2)
	if not sentinelComment1: self.show("no @+leo line for " + name1)
	if not sentinelComment2: self.show("no @+leo line for " + name2)
		
if self.ignoreFirstLine1:
	if s1 == None:
		g.readlineForceUnixNewline(f1) ; lines1 += 1
	s1 = None

if self.ignoreFirstLine2:
	if s2 == None:
		g.readlineForceUnixNewline(f2) ; lines2 += 1
	s2 = None</t>
<t tx="ekr.20031218072017.3640"># Completely empty strings denotes end-of-file.
if s1 and len(s1) &gt; 0:
	if self.ignoreBlankLines and len(string.strip(s1)) == 0:
		s1 = None ; continue
		
	if self.ignoreSentinelLines and sentinelComment1 and self.isSentinel(s1,sentinelComment1):
		s1 = None ; continue

if s2 and len(s2) &gt; 0:
	if self.ignoreBlankLines and len(string.strip(s2)) == 0:
		s2 = None ; continue

	if self.ignoreSentinelLines and sentinelComment2 and self.isSentinel(s2,sentinelComment2):
		s2 = None ; continue
</t>
<t tx="ekr.20031218072017.3641">if self.limitCount == 0 or mismatches &lt;= self.limitCount:

	if match and self.printMatches:
		
		if self.printBothMatches:
			self.dump(string.rjust("1." + `lines1`,6) + ' :',s1)
			self.dump(string.rjust("2." + `lines2`,6) + ' :',s2)
		else:
			self.dump(string.rjust(       `lines1`,6) + ' :',s1)
	
	if not match and self.printMismatches:
		
		self.dump(string.rjust("1." + `lines1`,6) + '*:',s1)
		self.dump(string.rjust("2." + `lines2`,6) + '*:',s2)</t>
<t tx="ekr.20031218072017.3642">if self.limitCount &gt; 0 and mismatches &gt;= self.limitCount:
	
	if printTrailing:
		self.show("")
		self.show("limit count reached")
		self.show("")
		printTrailing = false</t>
<t tx="ekr.20031218072017.3643">if n1 &gt; 0: 
	lines1 += self.dumpToEndOfFile("1.",f1,s1,lines1,printTrailing)
	
if n2 &gt; 0:
	lines2 += self.dumpToEndOfFile("2.",f2,s2,lines2,printTrailing)

self.show("")
self.show("lines1:" + `lines1`)
self.show("lines2:" + `lines2`)
self.show("mismatches:" + `mismatches`)</t>
<t tx="ekr.20031218072017.3644">def filecmp (self,f1,f2):

	val = filecmp.cmp(f1,f2)
	if 1:
		if val: self.show("equal")
		else:   self.show("*** not equal")
	else:
		self.show("filecmp.cmp returns:")
		if val: self.show(`val` + " (equal)")
		else:   self.show(`val` + " (not equal)")
	return val</t>
<t tx="ekr.20031218072017.3645"></t>
<t tx="ekr.20031218072017.3646">def doOpen (self,name):

	try:
		f = open(name,'r')
		return f
	except:
		self.show("can not open:" + '"' + name + '"')
		return None</t>
<t tx="ekr.20031218072017.3647">def dump (self,tag,s):

	cmp = self ; out = tag

	for ch in s[:-1]: # don't print the newline
	
		if cmp.makeWhitespaceVisible:
			if ch == '\t':
				out += "[" ; out += "t" ; out += "]"
			elif ch == ' ':
				out += "[" ; out += " " ; out += "]"
			else: out += ch
		else:
			if 1:
				out += ch
			else: # I don't know why I thought this was a good idea ;-)
				if ch == '\t' or ch == ' ':
					out += ' '
				else:
					out += ch

	self.show(out)</t>
<t tx="ekr.20031218072017.3648">def dumpToEndOfFile (self,tag,f,s,line,printTrailing):

	trailingLines = 0
	while 1:
		if not s:
			s = g.readlineForceUnixNewline(f)
		if len(s) == 0: break
		trailingLines += 1
		if self.printTrailingMismatches and printTrailing:
			tag2 = string.rjust(tag + `line`,6) + "+:"
			self.dump(tag2,s)
		s = None

	self.show(tag + `trailingLines` + " trailing lines")
	return trailingLines</t>
<t tx="ekr.20031218072017.3649">@ These methods are based on atFile.scanHeader().  They are simpler because we only care about the starting sentinel comment: any line starting with the starting sentinel comment is presumed to be a sentinel line.
@c

def isLeoHeader (self,s):

	tag = "@+leo"
	j = string.find(s,tag)
	if j &gt; 0:
		i = g.skip_ws(s,0)
		if i &lt; j: return s[i:j]
		else: return None
	else: return None
		
def isSentinel (self,s,sentinelComment):

	i = g.skip_ws(s,0)
	return g.match(s,i,sentinelComment)</t>
<t tx="ekr.20031218072017.3650">def show (self,s):
	
	# print s
	if self.outputFile:
		self.outputFile.write(s + '\n')
	elif self.c:
		g.es(s)
	else:
		print s
		print</t>
<t tx="ekr.20031218072017.3651">def showIvars (self):
	
	self.show("fileName1:"        + `self.fileName1`)
	self.show("fileName2:"        + `self.fileName2`)
	self.show("outputFileName:"   + `self.outputFileName`)
	self.show("limitToExtension:" + `self.limitToExtension`)
	self.show("")

	self.show("ignoreBlankLines:"         + `self.ignoreBlankLines`)
	self.show("ignoreFirstLine1:"         + `self.ignoreFirstLine1`)
	self.show("ignoreFirstLine2:"         + `self.ignoreFirstLine2`)
	self.show("ignoreInteriorWhitespace:" + `self.ignoreInteriorWhitespace`)
	self.show("ignoreLeadingWhitespace:"  + `self.ignoreLeadingWhitespace`)
	self.show("ignoreSentinelLines:"      + `self.ignoreSentinelLines`)
	self.show("")
	
	self.show("limitCount:"              + `self.limitCount`)
	self.show("printMatches:"            + `self.printMatches`)
	self.show("printMismatches:"         + `self.printMismatches`)
	self.show("printTrailingMismatches:" + `self.printTrailingMismatches`)</t>
<t tx="ekr.20031218072017.3652">@language python

import leoGlobals as g
from leoGlobals import true,false

import sys,string
	
class leoFontPanel:
	
	"""The base class for Leo's font panel."""

	@others</t>
<t tx="ekr.20031218072017.3653">def __init__ (self,c):

	self.c = c
	self.frame = c.frame
	self.default_font = None # Should be set in subclasses.
	self.last_selected_font = None</t>
<t tx="ekr.20031218072017.3654">def bringToFront(self):
	
	self.oops()
	
def oops(self):

	print ("leoTkinterFontPanel oops:",
		g.callerName(2),
		"should be overridden in subclass")</t>
<t tx="ekr.20031218072017.3655">"""The base classes for all Leo Windows, their body, log and tree panes, key bindings and menus.

These classes should be overridden to create frames for a particular gui."""

import leoGlobals as g
from leoGlobals import true,false

import leoColor,leoMenu,leoNodes,leoUndo
import os,string,sys,time

&lt;&lt; About handling events &gt;&gt;

@others</t>
<t tx="ekr.20031218072017.3656">class leoBody:
	
	"""The base class for the body pane in Leo windows."""
	
	@others</t>
<t tx="ekr.20031218072017.3657">def __init__ (self,frame,parentFrame):

	self.frame = frame
	self.c = c = frame.c
	self.forceFullRecolorFlag = false
	frame.body = self
	
	# May be overridden in subclasses...
	self.bodyCtrl = self
	
	# Must be overridden in subclasses...
	self.colorizer = None</t>
<t tx="ekr.20031218072017.3658">def oops (self):
	
	g.trace("leoBody oops:", g.callerName(2), "should be overridden in subclass")</t>
<t tx="ekr.20031218072017.3659">def setFontFromConfig (self):
	
	self.oops()</t>
<t tx="ekr.20031218072017.3660">def createBindings (self,frame):
	self.oops()

def createControl (self,frame,parentFrame):
	self.oops()
	
def initialRatios (self):
	self.oops()
	
def onBodyChanged (self,v,undoType,oldSel=None,oldYview=None,newSel=None,oldText=None):
	self.oops()
	
def setBodyFontFromConfig (self):
	self.oops()
	
</t>
<t tx="ekr.20031218072017.3661">def bbox(self,index):

	self.oops()</t>
<t tx="ekr.20031218072017.3662">def tag_add (self,tagName,index1,index2):

	self.oops()

def tag_bind (self,tagName,event,callback):

	self.oops()

def tag_configure (self,colorName,**keys):

	self.oops()

def tag_delete(self,tagName):

	self.oops()

def tag_remove (self,tagName,index1,index2):
	self.oops()</t>
<t tx="ekr.20031218072017.3663">def cget(self,*args,**keys):
	
	self.oops()
	
def configure (self,*args,**keys):
	
	self.oops()</t>
<t tx="ekr.20031218072017.3664">def hasFocus (self):
	
	self.oops()
	
def setFocus (self):
	
	self.oops()</t>
<t tx="ekr.20031218072017.3665">def getBodyPaneHeight (self):
	
	self.oops()

def getBodyPaneWidth (self):
	
	self.oops()</t>
<t tx="ekr.20031218072017.3666">def scheduleIdleTimeRoutine (self,function,*args,**keys):

	self.oops()</t>
<t tx="ekr.20031218072017.3667">def adjustIndex (self,index,offset):
	
	self.oops()
	
def compareIndices(self,i,rel,j):

	self.oops()
	
def convertRowColumnToIndex (self,row,column):
	
	self.oops()
	
def convertIndexToRowColumn (self,index):
	
	self.oops()
	
def getImageIndex (self,image):
	
	self.oops()</t>
<t tx="ekr.20031218072017.3668">def getBeforeInsertionPoint (self):
	self.oops()

def getInsertionPoint (self):
	self.oops()
	
def getCharAtInsertPoint (self):
	self.oops()

def getCharBeforeInsertPoint (self):
	self.oops()
	
def makeInsertPointVisible (self):
	self.oops()
	
def setInsertionPoint (self,index):
	self.oops()

def setInsertionPointToEnd (self):
	self.oops()
	
def setInsertPointToStartOfLine (self,lineNumber): # zero-based line number
	self.oops()</t>
<t tx="ekr.20031218072017.3669">def bind (self,*args,**keys):
	
	self.oops()
</t>
<t tx="ekr.20031218072017.3670">def deleteTextSelection (self):
	self.oops()
	
def getSelectedText (self):
	self.oops()
	
def getTextSelection (self):
	self.oops()
	
def hasTextSelection (self):
	self.oops()
	
def selectAllText (self):
	self.oops()
	
def setTextSelection (self,i,j=None):
	self.oops()</t>
<t tx="ekr.20031218072017.3671"></t>
<t tx="ekr.20031218072017.3672">def deleteAllText(self):
	self.oops()

def deleteCharacter (self,index):
	self.oops()
	
def deleteLastChar (self):
	self.oops()
	
def deleteLine (self,lineNumber): # zero based line number.
	self.oops()
	
def deleteLines (self,line1,numberOfLines): # zero based line numbers.
	self.oops()
	
def deleteRange (self,index1,index2):
	self.oops()</t>
<t tx="ekr.20031218072017.3673">def getAllText (self):
	self.oops()
	
def getCharAtIndex (self,index):
	self.oops()
	
def getInsertLines (self):
	self.oops()
	return None,None,None
	
def getSelectionAreas (self):
	self.oops()
	return None,None,None
	
def getSelectionLines (self):
	self.oops()
	return None,None,None
	
def getTextRange (self,index1,index2):
	self.oops()</t>
<t tx="ekr.20031218072017.3674">def insertAtInsertPoint (self,s):
	
	self.oops()
	
def insertAtEnd (self,s):
	
	self.oops()
	
def insertAtStartOfLine (self,lineNumber,s):
	
	self.oops()</t>
<t tx="ekr.20031218072017.3675">def setSelectionAreas (self,before,sel,after):
	self.oops()</t>
<t tx="ekr.20031218072017.3676">def makeIndexVisible (self,index):
	self.oops()
	
def setFirstVisibleIndex (self,index):
	self.oops()
	
def getYScrollPosition (self):
	self.oops()
	
def setYScrollPosition (self,scrollPosition):
	self.oops()
	
def scrollUp (self):
	self.oops()
	
def scrollDown (self):
	self.oops()</t>
<t tx="ekr.20031218072017.3677"># It's weird to have the tree class be responsible for coloring the body pane!

def getColorizer(self):
	
	return self.colorizer

def recolor_now(self,p,incremental=false):

	self.colorizer.colorize(p,incremental)

def recolor_range(self,p,leading,trailing):
	
	self.colorizer.recolor_range(p,leading,trailing)

def recolor(self,p,incremental=false):
	
	if 0: # Do immediately
		self.colorizer.colorize(p,incremental)
	else: # Do at idle time
		self.colorizer.schedule(p,incremental)
	
def updateSyntaxColorer(self,p):
	
	return self.colorizer.updateSyntaxColorer(p)</t>
<t tx="ekr.20031218072017.3678">class leoFrame:
	
	"""The base class for all Leo windows."""
	
	instances = 0
	
	@others</t>
<t tx="ekr.20031218072017.3679">def __init__ (self):
	
	self.c = None # Must be created by subclasses.
	self.title = None # Must be created by subclasses.
	
	# Objects attached to this frame.
	self.menu = None
	self.keys = None
	self.colorPanel = None 
	self.fontPanel = None 
	self.prefsPanel = None
	self.comparePanel = None

	# Gui-independent data
	self.es_newlines = 0 # newline count for this log stream
	self.openDirectory = ""
	self.saved=false # true if ever saved
	self.splitVerticalFlag,self.ratio, self.secondary_ratio = self.initialRatios()
	self.startupWindow=false # true if initially opened window
	self.stylesheet = None # The contents of &lt;?xml-stylesheet...?&gt; line.

	# Colors of log pane.
	self.statusColorTags = [] # list of color names used as tags in status window.

	# Previous row and column shown in the status area.
	self.lastStatusRow = self.lastStatusCol = 0
	self.tab_width = 0 # The tab width in effect in this pane.</t>
<t tx="ekr.20031218072017.3680"></t>
<t tx="ekr.20031218072017.3681"># In the Edit menu...
def OnCopy  (self,event=None): self.oops()
def OnCut   (self,event=None): self.oops()
def OnPaste (self,event=None): self.oops()

def OnCutFromMenu  (self):     self.oops()
def OnCopyFromMenu (self):     self.oops()
def OnPasteFromMenu (self):    self.oops()

def abortEditLabelCommand (self): self.oops()
def endEditLabelCommand (self):   self.oops()
def insertHeadlineTime (self):    self.oops()

# In the Window menu...
def cascade(self):              self.oops()
def equalSizedPanes(self):      self.oops()
def hideLogWindow (self):       self.oops()
def minimizeAll(self):          self.oops()
def toggleActivePane(self):     self.oops()
def toggleSplitDirection(self): self.oops()

# In help menu...
def leoHelp (self): self.oops()</t>
<t tx="ekr.20031218072017.3682">def bringToFront (self):
	
	self.oops()

def deiconify (self):
	
	self.oops()
	
def lift (self):
	
	self.oops()
	
def update (self):
	
	self.oops()
</t>
<t tx="ekr.20031218072017.3683"></t>
<t tx="ekr.20031218072017.3684">def resizePanesToRatio (self,ratio,secondary_ratio):
	
	pass</t>
<t tx="ekr.20031218072017.3685">def setInitialWindowGeometry (self):
	
	self.oops()</t>
<t tx="ekr.20031218072017.3686">def setTopGeometry (self,w,h,x,y,adjustSize=true):
	
	self.oops()</t>
<t tx="ekr.20031218072017.3687">def setTabWidth (self,w):
	
	# Subclasses may override this to affect drawing.
	self.tab_width = w</t>
<t tx="ekr.20031218072017.3688">def getTitle (self):
	return self.title
	
def setTitle (self,title):
	self.title = title</t>
<t tx="ekr.20031218072017.3689">def initialRatios (self):

	config = g.app.config

	s = config.getWindowPref("initial_splitter_orientation")
	verticalFlag = s == None or (s != "h" and s != "horizontal")

	if verticalFlag:
		r = config.getFloatWindowPref("initial_vertical_ratio")
		if r == None or r &lt; 0.0 or r &gt; 1.0: r = 0.5
		r2 = config.getFloatWindowPref("initial_vertical_secondary_ratio")
		if r2 == None or r2 &lt; 0.0 or r2 &gt; 1.0: r2 = 0.8
	else:
		r = config.getFloatWindowPref("initial_horizontal_ratio")
		if r == None or r &lt; 0.0 or r &gt; 1.0: r = 0.3
		r2 = config.getFloatWindowPref("initial_horizontal_secondary_ratio")
		if r2 == None or r2 &lt; 0.0 or r2 &gt; 1.0: r2 = 0.8

	# print (`r`,`r2`)
	return verticalFlag,r,r2</t>
<t tx="ekr.20031218072017.3690">def longFileName (self):

	return self.c.mFileName
	
def shortFileName (self):

	return g.shortFileName(self.c.mFileName)</t>
<t tx="ekr.20031218072017.3691">def oops(self):
	
	print "leoFrame oops:", g.callerName(2), "should be overridden in subclass"
</t>
<t tx="ekr.20031218072017.3692">def promptForSave (self):
	
	"""Prompt the user to save changes.
	
	Return true if the user vetos the quit or save operation."""
	
	c = self.c
	name = g.choose(c.mFileName,c.mFileName,self.title)
	type = g.choose(g.app.quitting, "quitting?", "closing?")

	answer = g.app.gui.runAskYesNoCancelDialog(
		"Confirm",
		'Save changes to %s before %s' % (name,type))
		
	# print answer	
	if answer == "cancel":
		return true # Veto.
	elif answer == "no":
		return false # Don't save and don't veto.
	else:
		if not c.mFileName:
			&lt;&lt; Put up a file save dialog to set mFileName &gt;&gt;
		if c.mFileName:
			# print "saving", c.mFileName
			c.fileCommands.save(c.mFileName)
			return false # Don't veto.
		else:
			return true # Veto.</t>
<t tx="ekr.20031218072017.3693"># Make sure we never pass None to the ctor.
if not c.mFileName:
	c.mFileName = ""

c.mFileName = g.app.gui.runSaveFileDialog(
	initialfile = c.mFileName,
	title="Save",
	filetypes=[("Leo files", "*.leo")],
	defaultextension=".leo")</t>
<t tx="ekr.20031218072017.3694">class leoLog:
	
	"""The base class for the log pane in Leo windows."""
	
	@others</t>
<t tx="ekr.20031218072017.3695">def __init__ (self,frame,parentFrame):
	
	self.frame = frame
	self.c = frame.c
	self.enabled = true
	self.newlines = 0

	self.logCtrl = self.createControl(parentFrame)
	self.setFontFromConfig()
</t>
<t tx="ekr.20031218072017.3696">def configure (self,*args,**keys):
	
	self.oops()</t>
<t tx="ekr.20031218072017.3697">def configureBorder(self,border):
	
	self.oops()
</t>
<t tx="ekr.20031218072017.3698">def createControl (self,parentFrame):
	
	self.oops()</t>
<t tx="ekr.20031218072017.3699">def enable (self,enabled=true):
	
	self.enabled = enabled
	
def disable (self):
	
	self.enabled = false
</t>
<t tx="ekr.20031218072017.3700">def oops (self):
	
	print "leoLog oops:", g.callerName(2), "should be overridden in subclass"</t>
<t tx="ekr.20031218072017.3701">def setFontFromConfig (self):
	
	self.oops()</t>
<t tx="ekr.20031218072017.3702">def onActivateLog (self,event=None):

	try:
		g.app.setLog(self,"OnActivateLog")
	except:
		g.es_event_exception("activate log")</t>
<t tx="ekr.20031218072017.3703"># All output to the log stream eventually comes here.

def put (self,s,color=None):
	self.oops()

def putnl (self):
	self.oops()</t>
<t tx="ekr.20031218072017.3704"># This would be useful if we removed all the tree redirection routines.
# However, those routines are pretty ingrained into Leo...

class leoTree:
	
	"""The base class for the outline pane in Leo windows."""
	
	@others</t>
<t tx="ekr.20031218072017.3705">def __init__ (self,frame):
	
	self.frame = frame
	self.c = c = frame.c

	self.edit_text_dict = {} # New in 3.12: keys vnodes, values are edit_text (Tk.Text widgets)
	
	# "public" ivars: correspond to setters &amp; getters.
	self._dragging = false
	self._editPosition = None

	# Controlling redraws
	self.updateCount = 0 # self.redraw does nothing unless this is zero.
	self.redrawCount = 0 # For traces
	self.redrawScheduled = false # true if redraw scheduled.</t>
<t tx="ekr.20031218072017.3706"></t>
<t tx="ekr.20031218072017.3707">def drawIcon(self,v,x=None,y=None):
	self.oops()

def redraw(self,event=None): # May be bound to an event.
	self.oops()

def redraw_now(self):
	self.oops()
	
def redrawAfterException (self):
	self.oops()
</t>
<t tx="ekr.20031218072017.3708">def editLabel(self,v):
	self.oops()

def endEditLabel(self):
	self.oops()

def setNormalLabelState(self,v):
	self.oops()</t>
<t tx="ekr.20031218072017.3709">def getFont(self):
	self.oops()
	
def setFont(self,font=None,fontName=None):
	self.oops()</t>
<t tx="ekr.20031218072017.3710"># These should all be internal to the tkinter.frame class.

def OnActivateHeadline(self,v):
	self.oops()
	
def onHeadChanged(self,v):
	self.oops()

def OnHeadlineKey(self,v,event):
	self.oops()

def idle_head_key(self,v,ch=None):
	self.oops()</t>
<t tx="ekr.20031218072017.3711">def scrollTo(self,v):
	self.oops()

def idle_scrollTo(self,v):
	
	self.oops()


</t>
<t tx="ekr.20031218072017.3712">def select(self,p,updateBeadList=true):
	
	self.oops()</t>
<t tx="ekr.20031218072017.3713">def expandAllAncestors(self,v):
	
	self.oops()</t>
<t tx="ekr.20031218072017.3714">def beginUpdate (self):

	self.updateCount += 1</t>
<t tx="ekr.20031218072017.3715">def endUpdate (self,flag=true):

	assert(self.updateCount &gt; 0)
	self.updateCount -= 1
	if flag and self.updateCount == 0:
		self.redraw()</t>
<t tx="ekr.20031218072017.3716">def dragging(self):
	return self._dragging

def getEditTextDict(self,v):
	return self.edit_text_dict.get(v)
	
def editPosition(self):
	return self._editPosition
	
def setDragging(self,flag):
	self._dragging = flag

def setEditPosition(self,p):
	self._editPosition = p</t>
<t tx="ekr.20031218072017.3718">def oops(self):
	
	print "leoTree oops:", g.callerName(2), "should be overridden in subclass"</t>
<t tx="ekr.20031218072017.3719">@first # -*- coding: utf-8 -*-

"""A module containing the base leoGui class.

This class and its subclasses hides the details of which gui is actually being used.
Leo's core calls this class to allocate all gui objects.

Plugins may define their own gui classes by setting g.app.gui."""

import leoGlobals as g
from leoGlobals import true,false

import leoFrame # for null gui.

@others</t>
<t tx="ekr.20031218072017.3720">class leoGui:
	
	"""The base class of all gui classes.
	
	Subclasses are expected to override all do-nothing methods of this class."""
	
	&lt;&lt; define leoGui file types &gt;&gt;
	
	@others
</t>
<t tx="ekr.20031218072017.3721"></t>
<t tx="ekr.20031218072017.3722">def __init__ (self,guiName):
	
	# g.trace("leoGui",guiName)
	
	self.leoIcon = None
	self.mGuiName = guiName
	self.mainLoop = None
	self.root = None
	self.utils = None</t>
<t tx="ekr.20031218072017.3723"></t>
<t tx="ekr.20031218072017.3724">def createRootWindow(self):

	"""Create the hidden root window for the gui.
	
	Nothing needs to be done if the root window need not exist."""

	self.oops()</t>
<t tx="ekr.20031218072017.3725">def destroySelf (self):

	self.oops()</t>
<t tx="ekr.20031218072017.3726">def finishCreate (self):

	"""Do any remaining chores after the root window has been created."""

	self.oops()</t>
<t tx="ekr.20031218072017.3727">def killGui(self,exitFlag=true):

	"""Destroy the gui.
	
	The entire Leo application should terminate if exitFlag is true."""

	self.oops()</t>
<t tx="ekr.20031218072017.3728">def recreateRootWindow(self):

	"""Create the hidden root window of the gui
    after a previous gui has terminated with killGui(false)."""

	self.oops()</t>
<t tx="ekr.20031218072017.3729">def runMainLoop(self):

	"""Run the gui's main loop."""

	self.oops()</t>
<t tx="ekr.20031218072017.3730">def runAboutLeoDialog(self,version,copyright,url,email):
	"""Create and run Leo's About Leo dialog."""
	self.oops()
	
def runAskLeoIDDialog(self):
	"""Create and run a dialog to get g.app.LeoID."""
	self.oops()

def runAskOkDialog(self,title,message=None,text="Ok"):
	"""Create and run an askOK dialog ."""
	self.oops()

def runAskOkCancelNumberDialog(self,title,message):
	"""Create and run askOkCancelNumber dialog ."""
	self.oops()

def runAskYesNoDialog(self,title,message=None):
	"""Create and run an askYesNo dialog."""
	self.oops()

def runAskYesNoCancelDialog(self,title,
	message=None,yesMessage="Yes",noMessage="No",defaultButton="Yes"):
	"""Create and run an askYesNoCancel dialog ."""
	self.oops()</t>
<t tx="ekr.20031218072017.3731">def runOpenFileDialog(self,title,filetypes,defaultextension):

	"""Create and run an open file dialog ."""

	self.oops()

def runSaveFileDialog(self,initialfile,title,filetypes,defaultextension):

	"""Create and run a save file dialog ."""
	
	self.oops()</t>
<t tx="ekr.20031218072017.3732">def createColorPanel(self,c):
	"""Create Color panel."""
	self.oops()
	
def createComparePanel(self,c):
	"""Create Compare panel."""
	self.oops()
	
def createFindPanel(self):
	"""Create a hidden Find panel."""
	self.oops()

def createFontPanel(self,c):
	"""Create a Font panel."""
	self.oops()
	
def createLeoFrame(self,title):
	"""Create a new Leo frame."""
	self.oops()
	
def createPrefsPanel(self,c):
	"""Create a Prefs panel."""
	self.oops()</t>
<t tx="ekr.20031218072017.3733">@ Subclasses are expected to subclass all of the following methods.

These are all do-nothing methods: callers are expected to check for None returns.

The type of commander passed to methods depends on the type of frame or dialog being created.  The commander may be a Commands instance or one of its subcommanders.</t>
<t tx="ekr.20031218072017.3734">def replaceClipboardWith (self,s):
	
	self.oops()

def getTextFromClipboard (self):
	
	self.oops()</t>
<t tx="ekr.20031218072017.3735">def attachLeoIcon (self,window):
	"""Attach the Leo icon to a window."""
	self.oops()
	
def center_dialog(self,dialog):
	"""Center a dialog."""
	self.oops()
	
def create_labeled_frame (self,parent,caption=None,relief="groove",bd=2,padx=0,pady=0):
	"""Create a labeled frame."""
	self.oops()
	
def get_window_info (self,window):
	"""Return the window information."""
	self.oops()
</t>
<t tx="ekr.20031218072017.3736">def getFontFromParams(self,family,size,slant,weight,defaultSize=12):
	
	self.oops()</t>
<t tx="ekr.20031218072017.3737">def get_focus(self,frame):

	"""Return the widget that has focus, or the body widget if None."""

	self.oops()
		
def set_focus(self,commander,widget):

	"""Set the focus of the widget in the given commander if it needs to be changed."""

	self.oops()</t>
<t tx="ekr.20031218072017.3738">def firstIndex (self):

	self.oops()
	
def lastIndex (self):

	self.oops()
	
def moveIndexForward(self,t,index,n):

	self.oops()
	
def moveIndexToNextLine(self,t,index):

	self.oop()</t>
<t tx="ekr.20031218072017.3739">def setIdleTimeHook (self,idleTimeHookHandler,*args,**keys):
	
	self.oops()
	
def setIdleTimeHookAfterDelay (self,delay,idleTimeHookHandler,*args,**keys):
	
	self.oops()
</t>
<t tx="ekr.20031218072017.3740">def guiName(self):
	
	try:
		return self.mGuiName
	except:
		return "invalid gui name"</t>
<t tx="ekr.20031218072017.3741">def oops (self):
	
	print "leoGui oops", g.callerName(2), "should be overridden in subclass"</t>
<t tx="ekr.20031218072017.3742">class unitTestGui(leoGui):
	
	"""gui class for use by unit tests."""
	
	@others</t>
<t tx="ekr.20031218072017.3743">def __init__ (self,dict,trace=false):
	
	self.dict = dict
	self.oldGui = g.app.gui
	self.trace=trace
	
	# Init the base class
	leoGui.__init__ (self,"unitTestGui")

	g.app.gui = self
	
def destroySelf (self):
	
	g.app.gui = self.oldGui</t>
<t tx="ekr.20031218072017.3744">def runAboutLeoDialog(self,version,copyright,url,email):
	return self.simulateDialog("aboutLeoDialog")
	
def runAskLeoIDDialog(self):
	return self.simulateDialog("leoIDDialog")

def runAskOkDialog(self,title,message=None,text="Ok"):
	return self.simulateDialog("okDialog","Ok")

def runAskOkCancelNumberDialog(self,title,message):
	return self.simulateDialog("numberDialog",-1)
	
def runOpenFileDialog(self,title,filetypes,defaultextension):
	return self.simulateDialog("openFileDialog")

def runSaveFileDialog(self,initialfile,title,filetypes,defaultextension):
	return self.simulateDialog("saveFileDialog")

def runAskYesNoDialog(self,title,message=None):
	return self.simulateDialog("yesNoDialog","no")

def runAskYesNoCancelDialog(self,title,
	message=None,yesMessage="Yes",noMessage="No",defaultButton="Yes"):
	return self.simulateDialog("yesNoCancelDialog","cancel")</t>
<t tx="ekr.20031218072017.3745">def set_focus(self,c,widget):
	pass</t>
<t tx="ekr.20031218072017.3746">def oops(self):
	
	g.trace("unitTestGui",g.callerName(2))
	
	if 0: # Fail the unit test.
		assert 0,"call to undefined method in unitTestMethod class"</t>
<t tx="ekr.20031218072017.3747">def simulateDialog (self,key,defaultVal=None):
	
	val = self.dict.get(key,defaultVal)

	if self.trace:
		print key, val

	return val</t>
<t tx="ekr.20031218072017.3748">"""Gui-independent keystroke handling for Leo."""

import leoGlobals as g
from leoGlobals import true,false</t>
<t tx="ekr.20031218072017.3749">"""Gui-independent menu handling for Leo."""

import leoGlobals as g
from leoGlobals import true,false

import string,sys

@others</t>
<t tx="ekr.20031218072017.3750">class leoMenu:
	
	"""The base class for all Leo menus."""

	@others</t>
<t tx="ekr.20031218072017.3751">def __init__ (self,frame):
	
	self.c = frame.c
	self.frame = frame
	self.menus = {} # Menu dictionary.
	self.menuShortcuts = []
	
	self.defineMenuTables()</t>
<t tx="ekr.20031218072017.3752">def defineMenuTables (self):
	
	c = self.c ; f = self.frame
	
	&lt;&lt; define edit menu tables &gt;&gt;
	&lt;&lt; define file menu tables &gt;&gt;
	&lt;&lt; define outline menu tables &gt;&gt;
	&lt;&lt; define window menu tables &gt;&gt;
	&lt;&lt; define help menu tables &gt;&gt;</t>
<t tx="ekr.20031218072017.3753">&lt;&lt; define editMenuTopTable &gt;&gt;
&lt;&lt; define editMenuEditBodyTable &gt;&gt;
&lt;&lt; define editMenuEditHeadlineTable &gt;&gt;
&lt;&lt; define editMenuFindMenuTable &gt;&gt;
&lt;&lt; define editMenuTop2Table &gt;&gt;</t>
<t tx="ekr.20031218072017.3754">self.editMenuEditBodyTable = (
	("Extract &amp;Section","Shift+Ctrl+E",c.extractSection),
	("Extract &amp;Names","Shift+Ctrl+N",c.extractSectionNames),
	("&amp;Extract","Shift+Ctrl+D",c.extract),
	("-",None,None),
	("Convert All B&amp;lanks",None,c.convertAllBlanks),
	("Convert All T&amp;abs",None,c.convertAllTabs),
	("Convert &amp;Blanks","Shift+Ctrl+B",c.convertBlanks),
	("Convert &amp;Tabs","Shift+Ctrl+J",c.convertTabs),
	("Insert Body Time/&amp;Date","Shift+Ctrl+G",c.insertBodyTime),
	("&amp;Reformat Paragraph","Shift+Ctrl+P",c.reformatParagraph),
	("-",None,None),
	("&amp;Indent","Ctrl+]",c.indentBody),
	("&amp;Unindent","Ctrl+[",c.dedentBody),
	("&amp;Match Brackets","Ctrl+K",c.findMatchingBracket))</t>
<t tx="ekr.20031218072017.3755">self.editMenuEditHeadlineTable = (
	("Edit &amp;Headline","Ctrl+H",c.editHeadline),
	("&amp;End Edit Headline","Escape",f.endEditLabelCommand),
	("&amp;Abort Edit Headline","Shift-Escape",f.abortEditLabelCommand),
	("Insert Headline Time/&amp;Date","Shift+Ctrl+H",f.insertHeadlineTime),
	# 2/16/04: restore Toggle Angle Brackets command without any default shortcut.
	("Toggle Angle Brackets",None,c.toggleAngleBrackets))</t>
<t tx="ekr.20031218072017.3756">self.editMenuFindMenuTable = (
	("&amp;Find Panel","Ctrl+F",c.findPanel),
	("-",None,None),
	("Find &amp;Next","F3",c.findNext),
	("Find &amp;Previous","F4",c.findPrevious),
	("&amp;Replace","Ctrl+=",c.replace),
	("Replace, &amp;Then Find","Ctrl+-",c.replaceThenFind))</t>
<t tx="ekr.20031218072017.3757">try:
	show = c.frame.body.getColorizer().showInvisibles
except:
	show = false

label = g.choose(show,"Hide In&amp;visibles","Show In&amp;visibles")
	
self.editMenuTop2Table = (
	("&amp;Go To Line Number","Alt+G",c.goToLineNumber),
	("&amp;Execute Script","Alt+Shift+E",c.executeScript),
	("Set Fon&amp;t...","Shift+Alt+T",c.fontPanel),
	("Set &amp;Colors...","Shift+Alt+C",c.colorPanel),
	(label,"Alt+V",c.viewAllCharacters),
	("-",None,None),
	("Prefere&amp;nces","Ctrl+Y",c.preferences))</t>
<t tx="ekr.20031218072017.3758">&lt;&lt; define fileMenuTopTable &gt;&gt;
&lt;&lt; define fileMenuTop2Table &gt;&gt;
&lt;&lt; define fileMenuReadWriteMenuTable &gt;&gt;
&lt;&lt; define fileMenuTangleMenuTable &gt;&gt;
&lt;&lt; define fileMenuUntangleMenuTable &gt;&gt;
&lt;&lt; define fileMenuImportMenuTable &gt;&gt;
&lt;&lt; define fileMenuExportMenuTable &gt;&gt;
&lt;&lt; define fileMenuTop3MenuTable &gt;&gt;</t>
<t tx="ekr.20031218072017.3759">self.fileMenuTopTable = (
	("&amp;New","Ctrl+N",c.new),
	("&amp;Open...","Ctrl+O",c.open))</t>
<t tx="ekr.20031218072017.3760">self.fileMenuTop2Table = (
	("-",None,None),
	("&amp;Close","Ctrl+W",c.close),
	("&amp;Save","Ctrl+S",c.save),
	("Save &amp;As","Shift+Ctrl+S",c.saveAs),
	("Save To",None,c.saveTo), # &amp;Tangle
	("Re&amp;vert To Saved",None,c.revert)) # &amp;Read/Write</t>
<t tx="ekr.20031218072017.3761">self.fileMenuReadWriteMenuTable = (
	("&amp;Read Outline Only","Shift+Ctrl+R",c.readOutlineOnly),
	("Read @file &amp;Nodes",None,c.readAtFileNodes),
	("-",None,None),
	("Write &amp;Dirty @file Nodes","Shift+Ctrl+Q",c.fileCommands.writeDirtyAtFileNodes),
	("Write &amp;Missing @file Nodes",None,c.fileCommands.writeMissingAtFileNodes),
	("Write &amp;Outline Only",None,c.fileCommands.writeOutlineOnly),
	("&amp;Write @file Nodes","Shift+Ctrl+W",c.fileCommands.writeAtFileNodes),
	("-",None,None),
	("Write 4.x Derived Files",None,c.writeNewDerivedFiles),
	("Write 3.x Derived Files",None,c.writeOldDerivedFiles))</t>
<t tx="ekr.20031218072017.3762">self.fileMenuTangleMenuTable = (
	("Tangle &amp;All","Shift+Ctrl+A",c.tangleAll),
	("Tangle &amp;Marked","Shift+Ctrl+M",c.tangleMarked),
	("&amp;Tangle","Shift+Ctrl+T",c.tangle))</t>
<t tx="ekr.20031218072017.3763">self.fileMenuUntangleMenuTable = (
	("Untangle &amp;All",None,c.untangleAll),
	("Untangle &amp;Marked",None,c.untangleMarked),
	("&amp;Untangle","Shift+Ctrl+U",c.untangle))</t>
<t tx="ekr.20031218072017.3764">self.fileMenuImportMenuTable = (
	("Import Derived File",None,c.importDerivedFile),
	("Import To @&amp;file","Shift+Ctrl+F",c.importAtFile),
	("Import To @&amp;root",None,c.importAtRoot),
	("Import &amp;CWEB Files",None,c.importCWEBFiles),
	
	("Import &amp;noweb Files",None,c.importNowebFiles),
	("Import Flattened &amp;Outline",None,c.importFlattenedOutline))</t>
<t tx="ekr.20031218072017.3765">self.fileMenuExportMenuTable = [
	("Export &amp;Headlines",None,c.exportHeadlines),
	("Outline To &amp;CWEB",None,c.outlineToCWEB),
	("Outline To &amp;Noweb",None,c.outlineToNoweb),
	("&amp;Flatten Outline",None,c.flattenOutline),
	("&amp;Remove Sentinels",None,c.removeSentinels),
	("&amp;Weave",None,c.weave)]</t>
<t tx="ekr.20031218072017.3766">self.fileMenuTop3MenuTable = (
	("E&amp;xit","Ctrl-Q",g.app.onQuit),)</t>
<t tx="ekr.20031218072017.3767">&lt;&lt; define outlineMenuTopMenuTable &gt;&gt;
&lt;&lt; define outlineMenuExpandContractMenuTable &gt;&gt;
&lt;&lt; define outlineMenuMoveMenuTable &gt;&gt;
&lt;&lt; define outlineMenuMarkMenuTable &gt;&gt;
&lt;&lt; define outlineMenuGoToMenuTable &gt;&gt;</t>
<t tx="ekr.20031218072017.3768">self.outlineMenuTopMenuTable = (
	("C&amp;ut Node","Shift+Ctrl+X",c.cutOutline),
	("C&amp;opy Node","Shift+Ctrl+C",c.copyOutline),
	("&amp;Paste Node","Shift+Ctrl+V",c.pasteOutline),
	("&amp;Delete Node","Shift+Ctrl+BkSp",c.deleteOutline),
	("-",None,None),
	("&amp;Insert Node","Ctrl+I",c.insertHeadline),
	("&amp;Clone Node","Ctrl+`",c.clone),
	("Sort Childre&amp;n",None,c.sortChildren), # Conflicted with Hoist.
	("&amp;Sort Siblings","Alt-A",c.sortSiblings),
	("Chec&amp;k Outline",None,c.checkOutline),
	("-",None,None),
	("&amp;Hoist",None,c.hoist),
	("D&amp;e-Hoist",None,f.c.dehoist),
	("-",None,None))
	
# Ampersand bindings:  c,d,e,h,i,k,n,o,p,s,u</t>
<t tx="ekr.20031218072017.3769">self.outlineMenuExpandContractMenuTable = (
	("&amp;Contract All","Alt+-",c.contractAllHeadlines),
	("Contract &amp;Node","Alt+[",c.contractNode),
	("Contract &amp;Parent","Alt+0",c.contractParent),
	("-",None,None),
	("Expand P&amp;rev Level","Alt+.",c.expandPrevLevel),
	("Expand N&amp;ext Level","Alt+=",c.expandNextLevel),
	("-",None,None),
	("Expand To Level &amp;1","Alt+1",c.expandLevel1),
	("Expand To Level &amp;2","Alt+2",c.expandLevel2),
	("Expand To Level &amp;3","Alt+3",c.expandLevel3),
	("Expand To Level &amp;4","Alt+4",c.expandLevel4),
	("Expand To Level &amp;5","Alt+5",c.expandLevel5),
	("Expand To Level &amp;6","Alt+6",c.expandLevel6),
	("Expand To Level &amp;7","Alt+7",c.expandLevel7),
	("Expand To Level &amp;8","Alt+8",c.expandLevel8),
	# ("Expand To Level &amp;9","Alt+9",c.expandLevel9),
	("-",None,None),
	("Expand &amp;All","Alt+9",c.expandAllHeadlines),
	("Expand N&amp;ode","Alt+]",c.expandNode))</t>
<t tx="ekr.20031218072017.3770">self.outlineMenuMoveMenuTable = (
	("Move &amp;Down", "Ctrl+D",c.moveOutlineDown),
	("Move &amp;Left", "Ctrl+L",c.moveOutlineLeft),
	("Move &amp;Right","Ctrl+R",c.moveOutlineRight),
	("Move &amp;Up",   "Ctrl+U",c.moveOutlineUp),
	("-",None,None),
	("&amp;Promote","Ctrl+{",c.promote),
	("&amp;Demote", "Ctrl+}",c.demote))</t>
<t tx="ekr.20031218072017.3771">self.outlineMenuMarkMenuTable = (
	("&amp;Mark","Ctrl-M",c.markHeadline),
	("Mark &amp;Subheads","Alt+S",c.markSubheads),
	("Mark Changed &amp;Items","Alt+C",c.markChangedHeadlines),
	("Mark Changed &amp;Roots","Alt+R",c.markChangedRoots),
	("Mark &amp;Clones","Alt+K",c.markClones),
	("&amp;Unmark All","Alt+U",c.unmarkAll))</t>
<t tx="ekr.20031218072017.3772">self.outlineMenuGoToMenuTable = (
	("Go Back",None,c.goPrevVisitedNode), # Usually use buttons for this.
	("Go Forward",None,c.goNextVisitedNode),
	("-",None,None),
	("Go To Next &amp;Marked","Alt+M",c.goToNextMarkedHeadline),
	("Go To Next C&amp;hanged","Alt+D",c.goToNextDirtyHeadline),
	("Go To Next &amp;Clone","Alt+N",c.goToNextClone),
	("-",None,None),
	("Go To &amp;First Node","Alt+Shift+G",c.goToFirstNode),
	("Go To &amp;Last Node","Alt+Shift+H",c.goToLastNode),
	("Go To &amp;Parent","Alt+Shift+P",c.goToParent),
	("Go To P&amp;rev Sibling","Alt+Shift+R",c.goToPrevSibling),
	("Go To Next &amp;Sibling","Alt+Shift+S",c.goToNextSibling),
	("-",None,None),
	("Go To Prev V&amp;isible","Alt-UpArrow",c.selectVisBack),
	("Go To Next &amp;Visible","Alt-DnArrow",c.selectVisNext),
	("Go To Prev Node","Alt-Shift+UpArrow",c.selectThreadBack),
	("Go To Next Node","Alt-Shift-DnArrow",c.selectThreadNext))</t>
<t tx="ekr.20031218072017.3773">self.windowMenuTopTable = (
	("&amp;Equal Sized Panes","Ctrl-E",f.equalSizedPanes),
	("Toggle &amp;Active Pane","Ctrl-T",f.toggleActivePane),
	("Toggle &amp;Split Direction",None,f.toggleSplitDirection),
	("-",None,None),
	("Casca&amp;de",None,f.cascade),
	("&amp;Minimize All",None,f.minimizeAll),
	("-",None,None),
	("Open &amp;Compare Window",None,c.openCompareWindow),
	("Open &amp;Python Window","Alt+P",c.openPythonWindow))</t>
<t tx="ekr.20031218072017.3774">self.helpMenuTopTable = (
	("&amp;About Leo...",None,c.about),
	("Online &amp;Home Page",None,c.leoHome),
	("-",None,None),
	("Open Online &amp;Tutorial",None,c.leoTutorial))
	
self.helpMenuTop2Table = (
	("Open &amp;Offline Tutorial",None,f.leoHelp),)
	
self.helpMenuTop3Table = (
	("Open Leo&amp;Docs.leo",None,c.leoDocumentation),
	("-",None,None),
	("Open Leo&amp;Config.leo",None,c.leoConfig),
	("Apply &amp;Settings",None,c.applyConfig))</t>
<t tx="ekr.20031218072017.3775">def oops (self):

	print "leoMenu oops:", g.callerName(2), "should be overridden in subclass"</t>
<t tx="ekr.20031218072017.3776"></t>
<t tx="ekr.20031218072017.3777">def updateAllMenus (self):
	
	"""The Tk "postcommand" callback called when a click happens in any menu.
	
	Updates (enables or disables) all menu items."""
	
	# A horrible kludge: set g.app.log to cover for a possibly missing activate event.
	g.app.setLog(self.frame.log,"updateAllMenus")
	
	# Allow the user first crack at updating menus.
	c = self.c ; v = c.currentVnode()

	if not g.doHook("menu2",c=c,v=v):
		self.updateFileMenu()
		self.updateEditMenu()
		self.updateOutlineMenu()</t>
<t tx="ekr.20031218072017.3778">def updateFileMenu (self):
	
	c = self.c ; frame = c.frame
	if not c: return

	try:
		enable = frame.menu.enableMenu
		menu = frame.menu.getMenu("File")
		enable(menu,"Revert To Saved", c.canRevert())
		enable(menu,"Open With...", g.app.hasOpenWithMenu)
	except:
		g.es("exception updating File menu")
		g.es_exception()</t>
<t tx="ekr.20031218072017.3779">def updateOutlineMenu (self):

	c = self.c ; frame = c.frame
	if not c: return

	p = c.currentPosition()
	hasParent = p.hasParent()
	hasBack = p.hasBack()
	hasNext = p.hasNext()
	hasChildren = p.hasChildren()
	isExpanded = p.isExpanded()
	isCloned = p.isCloned()
	isMarked = p.isMarked()

	try:
		enable = frame.menu.enableMenu
		&lt;&lt; enable top level outline menu &gt;&gt;
		&lt;&lt; enable expand/contract submenu &gt;&gt;
		&lt;&lt; enable move submenu &gt;&gt;
		&lt;&lt; enable go to submenu &gt;&gt;
		&lt;&lt; enable mark submenu &gt;&gt;
	except:
		g.es("exception updating Outline menu")
		g.es_exception()</t>
<t tx="ekr.20031218072017.3780"># Returns true if text in the outline or body text is selected.

def hasSelection (self):
	
	body = self.frame.body

	if body:
		first, last = body.getTextSelection()
		return first != last
	else:
		return false</t>
<t tx="ekr.20031218072017.3781"></t>
<t tx="ekr.20031218072017.3782"># Returns the translation of a menu name or an item name.

def getRealMenuName (self,menuName):

	cmn = self.canonicalizeTranslatedMenuName(menuName)
	return g.app.realMenuNameDict.get(cmn,menuName)
	
def setRealMenuName (self,untrans,trans):

	cmn = self.canonicalizeTranslatedMenuName(untrans)
	g.app.realMenuNameDict[cmn] = trans

def setRealMenuNamesFromTable (self,table):

	try:
		for untrans,trans in table:
			self.setRealMenuName(untrans,trans)
	except:
		g.es("exception in setRealMenuNamesFromTable")
		g.es_exception()</t>
<t tx="ekr.20031218072017.3783">def canonicalizeMenuName (self,name):
	
	name = name.lower() ; newname = ""
	for ch in name:
		# if ch not in (' ','\t','\n','\r','&amp;'):
		if ch in string.ascii_letters:
			newname = newname+ch
	return newname
	
def canonicalizeTranslatedMenuName (self,name):
	
	name = name.lower() ; newname = ""
	for ch in name:
		if ch not in (' ','\t','\n','\r','&amp;'):
		# if ch in string.ascii_letters:
			newname = newname+ch
	return newname
</t>
<t tx="ekr.20031218072017.3784">def createMenuItemsFromTable (self,menuName,table,openWith=false):
	
	try:
		menu = self.getMenu(menuName)
		if menu == None:
			print "menu does not exist: ", menuName
			g.es("menu does not exist: " + `menuName`)
			return
		self.createMenuEntries(menu,table,openWith)
	except:
		print "exception creating items for ", menuName," menu"
		g.es("exception creating items for " + `menuName` + " menu")
		g.es_exception()
		
	g.app.menuWarningsGiven = true</t>
<t tx="ekr.20031218072017.3785">def createMenusFromTables (self):

	c = self.c
	&lt;&lt; create the file menu &gt;&gt;
	&lt;&lt; create the edit menu &gt;&gt;
	&lt;&lt; create the outline menu &gt;&gt;
	g.doHook("create-optional-menus",c=c)
	&lt;&lt; create the window menu &gt;&gt;
	&lt;&lt; create the help menu &gt;&gt;</t>
<t tx="ekr.20031218072017.3786">editMenu = self.createNewMenu("&amp;Edit")

self.createMenuEntries(editMenu,self.editMenuTopTable)

&lt;&lt; create the edit body submenu &gt;&gt;
&lt;&lt; create the edit headline submenu &gt;&gt;
&lt;&lt; create the find submenu &gt;&gt;

self.createMenuEntries(editMenu,self.editMenuTop2Table)</t>
<t tx="ekr.20031218072017.3787">editBodyMenu = self.createNewMenu("Edit &amp;Body...","Edit")

self.createMenuEntries(editBodyMenu,self.editMenuEditBodyTable)</t>
<t tx="ekr.20031218072017.3788">editHeadlineMenu = self.createNewMenu("Edit &amp;Headline...","Edit")

self.createMenuEntries(editHeadlineMenu,self.editMenuEditHeadlineTable)</t>
<t tx="ekr.20031218072017.3789">findMenu = self.createNewMenu("&amp;Find...","Edit")

self.createMenuEntries(findMenu,self.editMenuFindMenuTable)</t>
<t tx="ekr.20031218072017.3790">fileMenu = self.createNewMenu("&amp;File")

self.createMenuEntries(fileMenu,self.fileMenuTopTable)
self.createNewMenu("Open &amp;With...","File")
self.createMenuEntries(fileMenu,self.fileMenuTop2Table)
&lt;&lt; create the recent files submenu &gt;&gt;
self.add_separator(fileMenu)
&lt;&lt; create the read/write submenu &gt;&gt;
&lt;&lt; create the tangle submenu &gt;&gt;
&lt;&lt; create the untangle submenu &gt;&gt;
&lt;&lt; create the import submenu &gt;&gt;
&lt;&lt; create the export submenu &gt;&gt;
self.add_separator(fileMenu)
self.createMenuEntries(fileMenu,self.fileMenuTop3MenuTable)</t>
<t tx="ekr.20031218072017.3791">self.createNewMenu("Recent &amp;Files...","File")
c.recentFiles = g.app.config.getRecentFiles()

if 0: # Not needed, and causes problems in wxWindows...
	self.createRecentFilesMenuItems()</t>
<t tx="ekr.20031218072017.3792">readWriteMenu = self.createNewMenu("&amp;Read/Write...","File")

self.createMenuEntries(readWriteMenu,self.fileMenuReadWriteMenuTable)</t>
<t tx="ekr.20031218072017.3793">tangleMenu = self.createNewMenu("&amp;Tangle...","File")

self.createMenuEntries(tangleMenu,self.fileMenuTangleMenuTable)</t>
<t tx="ekr.20031218072017.3794">untangleMenu = self.createNewMenu("&amp;Untangle...","File")

self.createMenuEntries(untangleMenu,self.fileMenuUntangleMenuTable)</t>
<t tx="ekr.20031218072017.3795">importMenu = self.createNewMenu("&amp;Import...","File")

self.createMenuEntries(importMenu,self.fileMenuImportMenuTable)</t>
<t tx="ekr.20031218072017.3796">exportMenu = self.createNewMenu("&amp;Export...","File")

self.createMenuEntries(exportMenu,self.fileMenuExportMenuTable)</t>
<t tx="ekr.20031218072017.3797">outlineMenu = self.createNewMenu("&amp;Outline")

self.createMenuEntries(outlineMenu,self.outlineMenuTopMenuTable)

&lt;&lt; create expand/contract submenu &gt;&gt;
&lt;&lt; create move submenu &gt;&gt;
&lt;&lt; create mark submenu &gt;&gt;
&lt;&lt; create goto submenu &gt;&gt;</t>
<t tx="ekr.20031218072017.3798">expandMenu = self.createNewMenu("&amp;Expand/Contract...","Outline")

self.createMenuEntries(expandMenu,self.outlineMenuExpandContractMenuTable)</t>
<t tx="ekr.20031218072017.3799">moveSelectMenu = self.createNewMenu("&amp;Move...","Outline")

self.createMenuEntries(moveSelectMenu,self.outlineMenuMoveMenuTable)</t>
<t tx="ekr.20031218072017.3800">markMenu = self.createNewMenu("M&amp;ark/Unmark...","Outline")

self.createMenuEntries(markMenu,self.outlineMenuMarkMenuTable)</t>
<t tx="ekr.20031218072017.3801">gotoMenu = self.createNewMenu("&amp;Go To...","Outline")

self.createMenuEntries(gotoMenu,self.outlineMenuGoToMenuTable)</t>
<t tx="ekr.20031218072017.3802">windowMenu = self.createNewMenu("&amp;Window")

self.createMenuEntries(windowMenu,self.windowMenuTopTable)</t>
<t tx="ekr.20031218072017.3803">helpMenu = self.createNewMenu("&amp;Help")

self.createMenuEntries(helpMenu,self.helpMenuTopTable)

if sys.platform=="win32":
	self.createMenuEntries(helpMenu,self.helpMenuTop2Table)

self.createMenuEntries(helpMenu,self.helpMenuTop3Table)</t>
<t tx="ekr.20031218072017.3804">def createNewMenu (self,menuName,parentName="top",before=None):

	try:
		parent = self.getMenu(parentName)
		
		if 0: # 11/13/03: Allow parent to be None.
			if parent == None:
				g.es("unknown parent menu: " + parentName)
				return None

		menu = self.getMenu(menuName)
		if menu:
			g.es("menu already exists: " + menuName,color="red")
		else:
			menu = self.new_menu(parent,tearoff=0)
			self.setMenu(menuName,menu)
			label = self.getRealMenuName(menuName)
			amp_index = label.find("&amp;")
			label = label.replace("&amp;","")
			if before: # Insert the menu before the "before" menu.
				index_label = self.getRealMenuName(before)
				amp_index = index_label.find("&amp;")
				index_label = index_label.replace("&amp;","")
				index = parent.index(index_label)
				self.insert_cascade(parent,index=index,label=label,menu=menu,underline=amp_index)
			else:
				self.add_cascade(parent,label=label,menu=menu,underline=amp_index)
			return menu
	except:
		g.es("exception creating " + menuName + " menu")
		g.es_exception()
		return None</t>
<t tx="ekr.20031218072017.3805">def deleteMenu (self,menuName):

	try:
		menu = self.getMenu(menuName)
		if menu:
			self.destroy(menu)
			self.destroyMenu(menuName)
		else:
			g.es("can't delete menu: " + menuName)
	except:
		g.es("exception deleting " + menuName + " menu")
		g.es_exception()</t>
<t tx="ekr.20031218072017.3806">def deleteMenuItem (self,itemName,menuName="top"):
	
	"""Delete itemName from the menu whose name is menuName.."""

	try:
		menu = self.getMenu(menuName)
		if menu:
			realItemName = self.getRealMenuName(itemName)
			self.delete(menu,realItemName)
		else:
			g.es("menu not found: " + menuName)
	except:
		g.es("exception deleting " + itemName + " from " + menuName + " menu")
		g.es_exception()</t>
<t tx="ekr.20031218072017.3807">def getMenu (self,menuName):

	cmn = self.canonicalizeMenuName(menuName)
	return self.menus.get(cmn)
	
def setMenu (self,menuName,menu):
	
	cmn = self.canonicalizeMenuName(menuName)
	self.menus [cmn] = menu
	
def destroyMenu (self,menuName):
	
	cmn = self.canonicalizeMenuName(menuName)
	del self.menus[cmn]</t>
<t tx="ekr.20031218072017.3808"></t>
<t tx="ekr.20031218072017.3809">def add_cascade (self,parent,label,menu,underline):
	self.oops()
	
def add_command (self,menu,**keys):
	self.oops()
	
def add_separator(self,menu):
	self.oops()
	
def bind (self,bind_shortcut,callback):
	self.oops()

def delete (self,menu,realItemName):
	self.oops()
	
def delete_range (self,menu,n1,n2):
	self.oops()

def destroy (self,menu):
	self.oops()

def insert_cascade (self,parent,index,label,menu,underline):
	self.oops()

def new_menu(self,parent,tearoff=0):
	self.oops()</t>
<t tx="ekr.20031218072017.3810">def createMenuBar (self,frame):
	self.oops()
	
def createOpenWithMenuFromTable (self,table):
	self.oops()

def defineMenuCallback(self,command,name):
	self.oops()
	
def defineOpenWithMenuCallback(self,command):
	self.oops()
	
def disableMenu (self,menu,name):
	self.oops()
	
def enableMenu (self,menu,name,val):
	self.oops()
	
def setMenuLabel (self,menu,name,label,underline=-1):
	self.oops()</t>
<t tx="ekr.20031218072017.3811">class nullMenu(leoMenu):
	
	"""A null menu class for testing and batch execution."""

	def oops (self):

		g.trace("leoMenu", g.callerName(2))
		pass</t>
<t tx="ekr.20031218072017.3812">@language python

import leoGlobals as g
from leoGlobals import true,false

import string
	
class leoPrefs:
	
	&lt;&lt; define leoPrefs constants &gt;&gt;

	"""A base class that creates Leo's preferenes panel."""
	@others</t>
<t tx="ekr.20031218072017.3813"># Constants used for defaults when leoConfig.txt can not be read.
default_page_width = 132
default_tab_width = 4
default_target_language = "python"

# Corresponding ivars in the Commands class and this class.
ivars = [
	"tangle_batch_flag", "untangle_batch_flag",
	"use_header_flag", "output_doc_flag",
	"tangle_directory", "page_width", "tab_width",
	"target_language" ]</t>
<t tx="ekr.20031218072017.3814"></t>
<t tx="ekr.20031218072017.3815">def __init__ (self,c):

	self.c = c

	# Global options...
	self.page_width = self.default_page_width
	self.tab_width = self.default_tab_width
	self.tangle_batch_flag = 0
	self.untangle_batch_flag = 0
	
	# Default Tangle options...
	self.tangle_directory = ""
	self.use_header_flag = 0
	self.output_doc_flag = 0
	
	# Default Target Language...
	self.target_language = self.default_target_language

	self.init(c)
	# g.es("Prefs.__init__")</t>
<t tx="ekr.20031218072017.3816"># Initializes prefs ivars and widgets from c's ivars.

def init(self,c):

	self.c = c
	#g.trace(`c.tab_width`)

	for var in self.ivars:
		val = getattr(c,var)
		setattr(self,var,val)
		# g.trace(val,var)

	&lt;&lt; remember values for revert &gt;&gt;</t>
<t tx="ekr.20031218072017.3817"># Global options
self.revert_tangle_batch_flag = c.tangle_batch_flag
self.revert_untangle_batch_flag = c.untangle_batch_flag
self.revert_page_width = c.page_width
self.revert_tab_width = c.tab_width

# Default Tangle Options
self.revert_tangle_directory = c.tangle_directory
self.revert_output_doc_flag = c.output_doc_flag
self.revert_use_header_flag = c.use_header_flag

# Default Target Language
if c.target_language == None:
	c.target_language = "python"
self.revert_target_language = c.target_language</t>
<t tx="ekr.20031218072017.3818">def restoreOptions (self):
	
	c = self.c
	
	# Global options
	c.tangle_batch_flag = self.revert_tangle_batch_flag
	c.untangle_batch_flag = self.revert_untangle_batch_flag
	c.page_width = self.revert_page_width
	c.tab_width = self.revert_tab_width
	
	# Default Tangle Options
	c.tangle_directory = self.revert_tangle_directory
	c.output_doc_flag = self.revert_output_doc_flag
	c.use_header_flag = self.revert_use_header_flag
	
	# Default Target Language
	c.target_language = self.revert_target_language</t>
<t tx="ekr.20031218072017.3819">def bringToFront (self):
	self.oops()
	
def oops(self):
	print ("leoPrefs oops:",
		g.callerName(2),
		"should be overridden in subclass")</t>
<t tx="ekr.20031218072017.3820">def print_ivars (self):
	
	"""Debugging routine for Prefs panel."""
	
	for var in self.ivars:
		g.trace(var, getattr(self,var))</t>
<t tx="ekr.20031218072017.3821"></t>
<t tx="ekr.20031218072017.3822">import leoGlobals as g
from leoGlobals import true,false

import leoColorPanel
import string,Tkinter,tkColorChooser

Tk = Tkinter

&lt;&lt; define gui-dependent color panel data &gt;&gt;

@others</t>
<t tx="ekr.20031218072017.3823">colorNamesList = (
	"gray60", "gray70", "gray80", "gray85", "gray90", "gray95",
	"snow1", "snow2", "snow3", "snow4", "seashell1", "seashell2",
	"seashell3", "seashell4", "AntiqueWhite1", "AntiqueWhite2", "AntiqueWhite3",
	"AntiqueWhite4", "bisque1", "bisque2", "bisque3", "bisque4", "PeachPuff1",
	"PeachPuff2", "PeachPuff3", "PeachPuff4", "NavajoWhite1", "NavajoWhite2",
	"NavajoWhite3", "NavajoWhite4", "LemonChiffon1", "LemonChiffon2",
	"LemonChiffon3", "LemonChiffon4", "cornsilk1", "cornsilk2", "cornsilk3",
	"cornsilk4", "ivory1", "ivory2", "ivory3", "ivory4", "honeydew1", "honeydew2",
	"honeydew3", "honeydew4", "LavenderBlush1", "LavenderBlush2",
	"LavenderBlush3", "LavenderBlush4", "MistyRose1", "MistyRose2",
	"MistyRose3", "MistyRose4", "azure1", "azure2", "azure3", "azure4",
	"SlateBlue1", "SlateBlue2", "SlateBlue3", "SlateBlue4", "RoyalBlue1",
	"RoyalBlue2", "RoyalBlue3", "RoyalBlue4", "blue1", "blue2", "blue3", "blue4",
	"DodgerBlue1", "DodgerBlue2", "DodgerBlue3", "DodgerBlue4", "SteelBlue1",
	"SteelBlue2", "SteelBlue3", "SteelBlue4", "DeepSkyBlue1", "DeepSkyBlue2",
	"DeepSkyBlue3", "DeepSkyBlue4", "SkyBlue1", "SkyBlue2", "SkyBlue3",
	"SkyBlue4", "LightSkyBlue1", "LightSkyBlue2", "LightSkyBlue3",
	"LightSkyBlue4", "SlateGray1", "SlateGray2", "SlateGray3", "SlateGray4",
	"LightSteelBlue1", "LightSteelBlue2", "LightSteelBlue3",
	"LightSteelBlue4", "LightBlue1", "LightBlue2", "LightBlue3",
	"LightBlue4", "LightCyan1", "LightCyan2", "LightCyan3", "LightCyan4",
	"PaleTurquoise1", "PaleTurquoise2", "PaleTurquoise3", "PaleTurquoise4",
	"CadetBlue1", "CadetBlue2", "CadetBlue3", "CadetBlue4", "turquoise1",
	"turquoise2", "turquoise3", "turquoise4", "cyan1", "cyan2", "cyan3", "cyan4",
	"DarkSlateGray1", "DarkSlateGray2", "DarkSlateGray3",
	"DarkSlateGray4", "aquamarine1", "aquamarine2", "aquamarine3",
	"aquamarine4", "DarkSeaGreen1", "DarkSeaGreen2", "DarkSeaGreen3",
	"DarkSeaGreen4", "SeaGreen1", "SeaGreen2", "SeaGreen3", "SeaGreen4",
	"PaleGreen1", "PaleGreen2", "PaleGreen3", "PaleGreen4", "SpringGreen1",
	"SpringGreen2", "SpringGreen3", "SpringGreen4", "green1", "green2",
	"green3", "green4", "chartreuse1", "chartreuse2", "chartreuse3",
	"chartreuse4", "OliveDrab1", "OliveDrab2", "OliveDrab3", "OliveDrab4",
	"DarkOliveGreen1", "DarkOliveGreen2", "DarkOliveGreen3",
	"DarkOliveGreen4", "khaki1", "khaki2", "khaki3", "khaki4",
	"LightGoldenrod1", "LightGoldenrod2", "LightGoldenrod3",
	"LightGoldenrod4", "LightYellow1", "LightYellow2", "LightYellow3",
	"LightYellow4", "yellow1", "yellow2", "yellow3", "yellow4", "gold1", "gold2",
	"gold3", "gold4", "goldenrod1", "goldenrod2", "goldenrod3", "goldenrod4",
	"DarkGoldenrod1", "DarkGoldenrod2", "DarkGoldenrod3", "DarkGoldenrod4",
	"RosyBrown1", "RosyBrown2", "RosyBrown3", "RosyBrown4", "IndianRed1",
	"IndianRed2", "IndianRed3", "IndianRed4", "sienna1", "sienna2", "sienna3",
	"sienna4", "burlywood1", "burlywood2", "burlywood3", "burlywood4", "wheat1",
	"wheat2", "wheat3", "wheat4", "tan1", "tan2", "tan3", "tan4", "chocolate1",
	"chocolate2", "chocolate3", "chocolate4", "firebrick1", "firebrick2",
	"firebrick3", "firebrick4", "brown1", "brown2", "brown3", "brown4", "salmon1",
	"salmon2", "salmon3", "salmon4", "LightSalmon1", "LightSalmon2",
	"LightSalmon3", "LightSalmon4", "orange1", "orange2", "orange3", "orange4",
	"DarkOrange1", "DarkOrange2", "DarkOrange3", "DarkOrange4", "coral1",
	"coral2", "coral3", "coral4", "tomato1", "tomato2", "tomato3", "tomato4",
	"OrangeRed1", "OrangeRed2", "OrangeRed3", "OrangeRed4", "red1", "red2", "red3",
	"red4", "DeepPink1", "DeepPink2", "DeepPink3", "DeepPink4", "HotPink1",
	"HotPink2", "HotPink3", "HotPink4", "pink1", "pink2", "pink3", "pink4",
	"LightPink1", "LightPink2", "LightPink3", "LightPink4", "PaleVioletRed1",
	"PaleVioletRed2", "PaleVioletRed3", "PaleVioletRed4", "maroon1",
	"maroon2", "maroon3", "maroon4", "VioletRed1", "VioletRed2", "VioletRed3",
	"VioletRed4", "magenta1", "magenta2", "magenta3", "magenta4", "orchid1",
	"orchid2", "orchid3", "orchid4", "plum1", "plum2", "plum3", "plum4",
	"MediumOrchid1", "MediumOrchid2", "MediumOrchid3", "MediumOrchid4",
	"DarkOrchid1", "DarkOrchid2", "DarkOrchid3", "DarkOrchid4", "purple1",
	"purple2", "purple3", "purple4", "MediumPurple1", "MediumPurple2",
	"MediumPurple3", "MediumPurple4", "thistle1", "thistle2", "thistle3",
	"thistle4" )
</t>
<t tx="ekr.20031218072017.3824">class leoTkinterColorNamePanel:
	
	"""A class to create and run a Tkinter color name panel."""
	
	@others
</t>
<t tx="ekr.20031218072017.3825">def __init__ (self,colorPanel,name,color):
	
	# No need for a base class.
	self.colorPanel = colorPanel
	self.name = name
	self.color = color
	self.revertColor = color
	
	self.createFrame(name,color)</t>
<t tx="ekr.20031218072017.3826">def getSelection (self):

	box = self.box ; color = None
	
	# Get the family name if possible, or font otherwise.
	items = box.curselection()

	if len(items)&gt; 0:
		try: # This shouldn't fail now.
			items = map(int, items)
			color = box.get(items[0])
		except:
			g.es("unexpected exception")
			g.es_exception()

	if not color:
		color = self.color
	return color</t>
<t tx="ekr.20031218072017.3827">def createFrame (self,name,color):
	
	assert(name==self.name)
	assert(color==self.color)
	self.revertColor = color
	
	Tk = Tkinter ; gui = g.app.gui

	self.top = top = Tk.Toplevel(g.app.root)
	top.title("Color names for " + '"' + name + '"')
	top.protocol("WM_DELETE_WINDOW", self.onOk)

	&lt;&lt; create color name panel &gt;&gt;
	self.select(color)
	
	gui.center_dialog(top) # Do this _after_ building the dialog!
	# top.resizable(0,0)
	
	# This must be a modal dialog.
	top.grab_set()
	top.focus_set() # Get all keystrokes.</t>
<t tx="ekr.20031218072017.3828"># Create organizer frames
outer = Tk.Frame(top,bd=2,relief="groove")
outer.pack(fill="both",expand=1)

upper = Tk.Frame(outer)
upper.pack(fill="both",expand=1)

# A kludge to give vertical space to the listbox!
spacer = Tk.Frame(upper) 
spacer.pack(side="right",pady="2i") 

lower = Tk.Frame(outer)
# padx=20 gives more room to the Listbox!
lower.pack(padx=40) # Not expanding centers the buttons.

# Create and populate the listbox.
self.box = box = Tk.Listbox(upper) # height doesn't seem to work.
box.bind("&lt;Double-Button-1&gt;", self.onApply)

if color not in colorNamesList:
	box.insert(0,color)
	
names = list(colorNamesList) # It's actually a tuple.
names.sort()
for name in names:
	box.insert("end",name)

bar = Tk.Scrollbar(box)
bar.pack(side="right", fill="y")
box.pack(padx=2,pady=2,expand=1,fill="both")

bar.config(command=box.yview)
box.config(yscrollcommand=bar.set)
	
# Create the row of buttons.
for text,command in (
	("OK",self.onOk),
	("Cancel",self.onCancel),
	("Revert",self.onRevert),
	("Apply",self.onApply) ):
		
	b = Tk.Button(lower,text=text,command=command)
	b.pack(side="left",pady=6,padx=4)</t>
<t tx="ekr.20031218072017.3829">def onApply (self,event=None):
	self.color = color = self.getSelection()
	self.colorPanel.update(self.name,color)

def onOk (self):
	color = self.getSelection()
	self.colorPanel.update(self.name,color)
	self.top.destroy()
	
def onCancel (self):
	self.onRevert()
	self.top.destroy()
	
def onRevert (self):
	self.color = color = self.revertColor
	self.select(self.color)
	self.colorPanel.update(self.name,color)</t>
<t tx="ekr.20031218072017.3830">def select (self,color):

	# g.trace(color)

	# The name should be on the list!
	box = self.box
	for i in xrange(0,box.size()):
		item = box.get(i)
		if color == item:
			box.select_clear(0,"end")
			box.select_set(i)
			box.see(i)
			return

	# g.trace("not found:" + `color`)</t>
<t tx="ekr.20031218072017.3831">class leoTkinterColorPanel (leoColorPanel.leoColorPanel):
	
	"""A class to create and run a Tkinter color panel."""

	@others</t>
<t tx="ekr.20031218072017.3832">def __init__ (self,c):
	
	"""Create a tkinter color panel."""
	
	# Init the base class
	leoColorPanel.leoColorPanel.__init__(self,c)
	
	# For communication with callbacks.
	self.changed_options = []
	self.buttons = {}
	self.nameButtons = {}
	self.option_names = {}

	self.createFrame()</t>
<t tx="ekr.20031218072017.3833">def bringToFront(self):
	
	self.top.deiconify()
	self.top.lift()
</t>
<t tx="ekr.20031218072017.3834">def showColorPicker (self,name):
	
	option_name = self.option_names[name]
	color = g.app.config.getColorsPref(option_name)
	rgb,val = tkColorChooser.askcolor(color=color)
	if val != None:
		self.update(name,val)</t>
<t tx="ekr.20031218072017.3835">def showColorName (self,name,color):
	
	"""Bring up a tkinter color name panel."""
	
	# No need to use an app gui routine: this is all Tk code.
	leoTkinterColorNamePanel(self,name,color)</t>
<t tx="ekr.20031218072017.3836">def onOk (self):
	# Update the revert colors
	config = g.app.config
	for name in self.changed_options:
		option_name = self.option_names[name]
		self.revertColors[option_name] = config.getColorsPref(option_name)
	self.changed_options = []
	if 1: # Hide the window, preserving its position.
		self.top.withdraw()
	else: # works.
		self.c.frame.colorPanel = None
		self.top.destroy()
	
def onCancel (self):
	self.onRevert()
	if 1: # Hide the window, preserving its position.
		self.top.withdraw()
	else: # works.
		self.c.frame.colorPanel = None
		self.top.destroy()
	
def onRevert (self):
	config = g.app.config
	for name in self.changed_options:
		option_name = self.option_names[name]
		old_val = self.revertColors[option_name]
		# Update the current settings.
		config.setColorsPref(option_name,old_val)
		# Update the buttons.
		b = self.buttons[name]
		b.configure(bg=old_val)
		b = self.nameButtons[name]
		b.configure(text=`old_val`)
	self.changed_options = []
	self.c.recolor()</t>
<t tx="ekr.20031218072017.3837">def update (self,name,val):
	
	config = g.app.config
	# g.es(str(name) + " = " + str(val))
	
	# Put the new color in the button.
	b = self.buttons[name]
	b.configure(bg=val)
	option_name = self.option_names[name]
	
	# Put the new color name or value in the name button.
	b = self.nameButtons[name]
	if type(val) == "" or type(val) == u"":
		b.configure(text=val) # Prevents unwanted quotes in the name.
	else:
		b.configure(text=str(val))
	
	# Save the changed option names for revert and cancel.
	if name not in self.changed_options:
		self.changed_options.append(name)

	# Set the new value and recolor.
	config.setColorsPref(option_name,val)
	self.c.recolor()</t>
<t tx="ekr.20031218072017.3838">@language python

"""Leo's base compare class."""

import leoGlobals as g
from leoGlobals import true,false

import leoCompare
import Tkinter,tkFileDialog

Tk = Tkinter

class leoTkinterComparePanel (leoCompare.leoCompare):
	
	"""A class that creates Leo's compare panel."""

	@others</t>
<t tx="ekr.20031218072017.3839"></t>
<t tx="ekr.20031218072017.3840">def __init__ (self,c):
	
	# Init the base class.
	leoCompare.leoCompare.__init__ (self,c)
	self.c = c

	&lt;&lt; init tkinter compare ivars &gt;&gt;
	
	# These ivars are set from Entry widgets.
	self.limitCount = 0
	self.limitToExtension = None
	
	# The default file name in the "output file name" browsers.
	self.defaultOutputFileName = "CompareResults.txt"
	
	self.createFrame()</t>
<t tx="ekr.20031218072017.3841"># Ivars pointing to Tk elements.
self.browseEntries = []
self.extensionEntry = None
self.countEntry = None
self.printButtons = []
	
# No corresponding ivar in the leoCompare class.
self.useOutputFileVar = Tk.IntVar()

# These all correspond to ivars in leoCompare....
self.appendOutputVar             = Tk.IntVar()

self.ignoreBlankLinesVar         = Tk.IntVar()
self.ignoreFirstLine1Var         = Tk.IntVar()
self.ignoreFirstLine2Var         = Tk.IntVar()
self.ignoreInteriorWhitespaceVar = Tk.IntVar()
self.ignoreLeadingWhitespaceVar  = Tk.IntVar()
self.ignoreSentinelLinesVar      = Tk.IntVar()

self.limitToExtensionVar         = Tk.IntVar()
self.makeWhitespaceVisibleVar    = Tk.IntVar()

self.printBothMatchesVar         = Tk.IntVar()
self.printMatchesVar             = Tk.IntVar()
self.printMismatchesVar          = Tk.IntVar()
self.printTrailingMismatchesVar  = Tk.IntVar()
self.stopAfterMismatchVar        = Tk.IntVar()</t>
<t tx="ekr.20031218072017.3842"># Initialize ivars from config parameters.

def finishCreate (self):

	config = g.app.config
	
	# File names.
	for i,option in (
		(0,"compare_file_1"),
		(1,"compare_file_2"),
		(2,"output_file") ):
			
		name = config.getComparePref(option)
		if name and len(name) &gt; 0:
			e = self.browseEntries[i]
			e.delete(0,"end")
			e.insert(0,name)
			
	name = config.getComparePref("output_file")
	b = g.choose(name and len(name) &gt; 0,1,0)
	self.useOutputFileVar.set(b)

	# File options.
	b = config.getBoolComparePref("ignore_first_line_of_file_1")
	if b == None: b = 0
	self.ignoreFirstLine1Var.set(b)
	
	b = config.getBoolComparePref("ignore_first_line_of_file_2")
	if b == None: b = 0
	self.ignoreFirstLine2Var.set(b)
	
	b = config.getBoolComparePref("append_output_to_output_file")
	if b == None: b = 0
	self.appendOutputVar.set(b)

	ext = config.getComparePref("limit_directory_search_extension")
	b = ext and len(ext) &gt; 0
	b = g.choose(b and b != 0,1,0)
	self.limitToExtensionVar.set(b)
	if b:
		e = self.extensionEntry
		e.delete(0,"end")
		e.insert(0,ext)
		
	# Print options.
	b = config.getBoolComparePref("print_both_lines_for_matches")
	if b == None: b = 0
	self.printBothMatchesVar.set(b)
	
	b = config.getBoolComparePref("print_matching_lines")
	if b == None: b = 0
	self.printMatchesVar.set(b)
	
	b = config.getBoolComparePref("print_mismatching_lines")
	if b == None: b = 0
	self.printMismatchesVar.set(b)
	
	b = config.getBoolComparePref("print_trailing_lines")
	if b == None: b = 0
	self.printTrailingMismatchesVar.set(b)
	
	n = config.getIntComparePref("limit_count")
	b = n and n &gt; 0
	b = g.choose(b and b != 0,1,0)
	self.stopAfterMismatchVar.set(b)
	if b:
		e = self.countEntry
		e.delete(0,"end")
		e.insert(0,`n`)

	# Whitespace options.
	b = config.getBoolComparePref("ignore_blank_lines")
	if b == None: b = 1 # unusual default.
	self.ignoreBlankLinesVar.set(b)
	
	b = config.getBoolComparePref("ignore_interior_whitespace")
	if b == None: b = 0
	self.ignoreInteriorWhitespaceVar.set(b)
	
	b = config.getBoolComparePref("ignore_leading_whitespace")
	if b == None: b = 0
	self.ignoreLeadingWhitespaceVar.set(b)
	
	b = config.getBoolComparePref("ignore_sentinel_lines")
	if b == None: b = 0
	self.ignoreSentinelLinesVar.set(b)
	
	b = config.getBoolComparePref("make_whitespace_visible")
	if b == None: b = 0
	self.makeWhitespaceVisibleVar.set(b)</t>
<t tx="ekr.20031218072017.3843">def createFrame (self):

	gui = g.app.gui
	self.top = top = Tk.Toplevel(g.app.root)
	top.title("Leo Compare files and directories")
	top.protocol("WM_DELETE_WINDOW", self.onClose)

	&lt;&lt; create the organizer frames &gt;&gt;
	&lt;&lt; create the browser rows &gt;&gt;
	&lt;&lt; create the extension row &gt;&gt;
	&lt;&lt; create the whitespace options frame &gt;&gt;
	&lt;&lt; create the print options frame &gt;&gt;
	&lt;&lt; create the compare buttons &gt;&gt;

	gui.center_dialog(top) # Do this _after_ building the dialog!
	top.resizable(0,0)
	self.finishCreate()</t>
<t tx="ekr.20031218072017.3844">outer = Tk.Frame(top, bd=2,relief="groove")
outer.pack(pady=4)

row1 = Tk.Frame(outer)
row1.pack(pady=4)

row2 = Tk.Frame(outer)
row2.pack(pady=4)

row3 = Tk.Frame(outer)
row3.pack(pady=4)

row4 = Tk.Frame(outer)
row4.pack(pady=4,expand=1,fill="x") # for left justification.

options = Tk.Frame(outer)
options.pack(pady=4)

ws = Tk.Frame(options)
ws.pack(side="left",padx=4)

pr = Tk.Frame(options)
pr.pack(side="right",padx=4)

lower = Tk.Frame(outer)
lower.pack(pady=6)</t>
<t tx="ekr.20031218072017.3845">for row,text,text2,command,var in (
	(row1,"Compare path 1:","Ignore first line",self.onBrowse1,self.ignoreFirstLine1Var),
	(row2,"Compare path 2:","Ignore first line",self.onBrowse2,self.ignoreFirstLine2Var),
	(row3,"Output file:",   "Use output file",  self.onBrowse3,self.useOutputFileVar) ):

	lab = Tk.Label(row,anchor="e",text=text,width=13)
	lab.pack(side="left",padx=4)
	
	e = Tk.Entry(row)
	e.pack(side="left",padx=2)
	self.browseEntries.append(e)
	
	b = Tk.Button(row,text="browse...",command=command)
	b.pack(side="left",padx=6)

	b = Tk.Checkbutton(row,text=text2,anchor="w",variable=var,width=15)
	b.pack(side="left")</t>
<t tx="ekr.20031218072017.3846">b = Tk.Checkbutton(row4,anchor="w",var=self.limitToExtensionVar,
	text="Limit directory compares to type:")
b.pack(side="left",padx=4)

self.extensionEntry = e = Tk.Entry(row4,width=6)
e.pack(side="left",padx=2)

b = Tk.Checkbutton(row4,anchor="w",var=self.appendOutputVar,
	text="Append output to output file")
b.pack(side="left",padx=4)</t>
<t tx="ekr.20031218072017.3847">w,f = gui.create_labeled_frame(ws,caption="Whitespace options",relief="groove")
	
for text,var in (
	("Ignore Leo sentinel lines", self.ignoreSentinelLinesVar),
	("Ignore blank lines",        self.ignoreBlankLinesVar),
	("Ignore leading whitespace", self.ignoreLeadingWhitespaceVar),
	("Ignore interior whitespace",self.ignoreInteriorWhitespaceVar),
	("Make whitespace visible",   self.makeWhitespaceVisibleVar) ):
	
	b = Tk.Checkbutton(f,text=text,variable=var)
	b.pack(side="top",anchor="w")
	
spacer = Tk.Frame(f)
spacer.pack(padx="1i")</t>
<t tx="ekr.20031218072017.3848">w,f = gui.create_labeled_frame(pr,caption="Print options",relief="groove")

row = Tk.Frame(f)
row.pack(expand=1,fill="x")

b = Tk.Checkbutton(row,text="Stop after",variable=self.stopAfterMismatchVar)
b.pack(side="left",anchor="w")

self.countEntry = e = Tk.Entry(row,width=4)
e.pack(side="left",padx=2)
e.insert(01,"1")

lab = Tk.Label(row,text="mismatches")
lab.pack(side="left",padx=2)

for padx,text,var in (    
	(0,  "Print matched lines",           self.printMatchesVar),
	(20, "Show both matching lines",      self.printBothMatchesVar),
	(0,  "Print mismatched lines",        self.printMismatchesVar),
	(0,  "Print unmatched trailing lines",self.printTrailingMismatchesVar) ):
	
	b = Tk.Checkbutton(f,text=text,variable=var)
	b.pack(side="top",anchor="w",padx=padx)
	self.printButtons.append(b)
	
# To enable or disable the "Print both matching lines" button.
b = self.printButtons[0]
b.configure(command=self.onPrintMatchedLines)

spacer = Tk.Frame(f)
spacer.pack(padx="1i")</t>
<t tx="ekr.20031218072017.3849">for text,command in (
	("Compare files",      self.onCompareFiles),
	("Compare directories",self.onCompareDirectories) ):
	
	b = Tk.Button(lower,text=text,command=command,width=18)
	b.pack(side="left",padx=6)</t>
<t tx="ekr.20031218072017.3850">def setIvarsFromWidgets (self):

	# File paths: checks for valid file name.
	e = self.browseEntries[0]
	self.fileName1 = e.get()
	
	e = self.browseEntries[1]
	self.fileName2 = e.get()

	# Ignore first line settings.
	self.ignoreFirstLine1 = self.ignoreFirstLine1Var.get()
	self.ignoreFirstLine2 = self.ignoreFirstLine2Var.get()
	
	# Output file: checks for valid file name.
	if self.useOutputFileVar.get():
		e = self.browseEntries[2]
		name = e.get()
		if name != None and len(name) == 0:
			name = None
		self.outputFileName = name
	else:
		self.outputFileName = None

	# Extension settings.
	if self.limitToExtensionVar.get():
		self.limitToExtension = self.extensionEntry.get()
		if len(self.limitToExtension) == 0:
			self.limitToExtension = None
	else:
		self.limitToExtension = None
		
	self.appendOutput = self.appendOutputVar.get()
	
	# Whitespace options.
	self.ignoreBlankLines         = self.ignoreBlankLinesVar.get()
	self.ignoreInteriorWhitespace = self.ignoreInteriorWhitespaceVar.get()
	self.ignoreLeadingWhitespace  = self.ignoreLeadingWhitespaceVar.get()
	self.ignoreSentinelLines      = self.ignoreSentinelLinesVar.get()
	self.makeWhitespaceVisible    = self.makeWhitespaceVisibleVar.get()
	
	# Print options.
	self.printMatches            = self.printMatchesVar.get()
	self.printMismatches         = self.printMismatchesVar.get()
	self.printTrailingMismatches = self.printTrailingMismatchesVar.get()
	
	if self.printMatches:
		self.printBothMatches = self.printBothMatchesVar.get()
	else:
		self.printBothMatches = false
	
	if self.stopAfterMismatchVar.get():
		try:
			count = self.countEntry.get()
			self.limitCount = int(count)
		except: self.limitCount = 0
	else:
		self.limitCount = 0</t>
<t tx="ekr.20031218072017.3851">def bringToFront(self):
	
	self.top.deiconify()
	self.top.lift()
</t>
<t tx="ekr.20031218072017.3852">def browser (self,n):
	
	types = [
		("C/C++ files","*.c"),
		("C/C++ files","*.cpp"),
		("C/C++ files","*.h"),
		("C/C++ files","*.hpp"),
		("Java files","*.java"),
		("Pascal files","*.pas"),
		("Python files","*.py"),
		("Text files","*.txt"),
		("All files","*") ]

	fileName = tkFileDialog.askopenfilename(
		title="Choose compare file" + n,
		filetypes=types,
		defaultextension=".txt")
		
	if fileName and len(fileName) &gt; 0:
		# The dialog also warns about this, so this may never happen.
		if not g.os_path_exists(fileName):
			self.show("not found: " + fileName)
			fileName = None
	else: fileName = None
		
	return fileName</t>
<t tx="ekr.20031218072017.3853"></t>
<t tx="ekr.20031218072017.3854">def onBrowse1 (self):
	
	fileName = self.browser("1")
	if fileName:
		e = self.browseEntries[0]
		e.delete(0,"end")
		e.insert(0,fileName)
	self.top.deiconify()
	
def onBrowse2 (self):
	
	fileName = self.browser("2")
	if fileName:
		e = self.browseEntries[1]
		e.delete(0,"end")
		e.insert(0,fileName)
	self.top.deiconify()
	
def onBrowse3 (self): # Get the name of the output file.

	fileName = tkFileDialog.asksaveasfilename(
		initialfile = self.defaultOutputFileName,
		title="Set output file",
		filetypes=[("Text files", "*.txt")],
		defaultextension=".txt")
		
	if fileName and len(fileName) &gt; 0:
		self.defaultOutputFileName = fileName
		self.useOutputFileVar.set(1) # The user will expect this.
		e = self.browseEntries[2]
		e.delete(0,"end")
		e.insert(0,fileName)</t>
<t tx="ekr.20031218072017.3855">def onClose (self):
	
	self.top.withdraw()</t>
<t tx="ekr.20031218072017.3856">def onCompareDirectories (self):

	self.setIvarsFromWidgets()
	self.compare_directories(self.fileName1,self.fileName2)

def onCompareFiles (self):

	self.setIvarsFromWidgets()
	self.compare_files(self.fileName1,self.fileName2)</t>
<t tx="ekr.20031218072017.3857">def onPrintMatchedLines (self):
	
	v = self.printMatchesVar.get()
	b = self.printButtons[1]
	state = g.choose(v,"normal","disabled")
	b.configure(state=state)</t>
<t tx="ekr.20031218072017.3858">@language python

import leoGlobals as g
from leoGlobals import true,false
import string,Tkinter

Tk = Tkinter

@others</t>
<t tx="ekr.20031218072017.3859">class leoTkinterDialog:
	"""The base class for all Leo Tkinter dialogs"""
	@others</t>
<t tx="ekr.20031218072017.3860">def __init__(self,title="",resizeable=true):
	
	"""Constructor for the leoTkinterDialog class."""
	
	self.answer = None # Value returned from run()
	self.resizeable = resizeable
	self.title = title
	self.modal = None
	
	self.buttonsFrame = None # Frame to hold typical dialog buttons.
	self.defaultButtonCommand = None  # Command to call when user closes the window by clicking the close box.
	self.frame = None # The outermost frame.
	self.root = None # g.app.root
	self.top = None # The toplevel Tk widget.
	self.focus_widget = None # The widget to get the first focus.</t>
<t tx="ekr.20031218072017.3861">def cancelButton(self):
	
	"""Do default click action in cancel button."""
	
	self.answer="cancel"
	self.top.destroy()
	
def noButton(self):
	
	"""Do default click action in no button."""
	
	self.answer="no"
	self.top.destroy()
	
def okButton(self):
	
	"""Do default click action in ok button."""
	
	self.answer="ok"
	self.top.destroy()

def yesButton(self):
	
	"""Do default click action in yes button."""

	self.answer="yes"
	self.top.destroy()</t>
<t tx="ekr.20031218072017.3862">def center(self):
	
	"""Center any leoTkinterDialog."""
	
	g.app.gui.center_dialog(self.top)
</t>
<t tx="ekr.20031218072017.3863">def createButtons (self,buttons):
	
	"""Create a row of buttons.
	
	buttons is a list of dictionaries containing the properties of each button."""
	
	assert(self.frame)
	self.buttonsFrame = f = Tk.Frame(self.top)
	f.pack(side="top",padx=30)

	# Buttons is a list of dictionaries, with an empty dictionary at the end if there is only one entry.
	buttonList = []
	for d in buttons:
		text = d.get("text","&lt;missing button name&gt;")
		isDefault = d.get("default",false)
		underline = d.get("underline",0)
		command = d.get("command",None)
		bd = g.choose(isDefault,4,2)

		b = Tk.Button(f,width=6,text=text,bd=bd,underline=underline,command=command)
		b.pack(side="left",padx=5,pady=10)
		buttonList.append(b)
		
		if isDefault and command:
			self.defaultButtonCommand = command
		
	return buttonList</t>
<t tx="ekr.20031218072017.3864">def createMessageFrame (self,message):
	
	"""Create a frame containing a Tk.Label widget."""

	label = Tk.Label(self.frame,text=message)
	label.pack(pady=10)
</t>
<t tx="ekr.20031218072017.3865">def createTopFrame(self):
	
	"""Create the Tk.Toplevel widget for a leoTkinterDialog."""
	
	self.root = g.app.root

	self.top = Tk.Toplevel(self.root)
	self.top.title(self.title)

	if not self.resizeable:
		self.top.resizable(0,0) # neither height or width is resizable.

	self.frame = Tk.Frame(self.top)
	self.frame.pack(side="top",expand=1,fill="both")
	
	# Do this at idle time.
	def callback(top=self.top):
		g.app.gui.attachLeoIcon(top)
	
	self.top.after_idle(callback)</t>
<t tx="ekr.20031218072017.3866">def run (self,modal):
	
	"""Run a leoTkinterDialog."""

	self.modal = modal
	
	self.center() # Do this after all packing complete.

	if self.modal:
		self.top.grab_set() # Make the dialog a modal dialog.
		if self.focus_widget == None:
			self.focus_widget = self.top
		self.focus_widget.focus_set() # Get all keystrokes.	
		self.root.wait_window(self.top)
		return self.answer
	else:
		self.root.wait_window(self.top)
		return None</t>
<t tx="ekr.20031218072017.3867">class tkinterAboutLeo (leoTkinterDialog):
	
	"""A class that creates the Tkinter About Leo dialog."""

	@others
</t>
<t tx="ekr.20031218072017.3868">def __init__ (self,version,copyright,url,email):
	
	"""Create a Tkinter About Leo dialog."""

	leoTkinterDialog.__init__(self,"About Leo",resizeable=true) # Initialize the base class.
	
	self.copyright = copyright
	self.email = email
	self.url = url
	self.version = version

	self.createTopFrame()
	self.createFrame()
</t>
<t tx="ekr.20031218072017.3869">def createFrame (self):
	
	"""Create the frame for an About Leo dialog."""
	
	frame = self.frame
	copyright = self.copyright ; email = self.email
	url = self.url ; version = self.version
	
	# Calculate the approximate height &amp; width. (There are bugs in Tk here.)
	lines = string.split(copyright,'\n')
	height = len(lines) + 8 # Add lines for version,url,email,spacing.
	width = 0
	for line in lines:
		width = max(width,len(line))
	width = max(width,len(url))
	width += 10 # 9/9/02

	frame.pack(padx=6,pady=4)
	
	self.text = text = Tk.Text(frame,height=height,width=width,bd=0,bg=frame.cget("background"))
	text.pack(pady=10)
	
	try:
		bitmap_name = g.os_path_join(g.app.loadDir,"..","Icons","Leoapp.GIF") # 5/12/03
		image = Tkinter.PhotoImage(file=bitmap_name)
		text.image_create("1.0",image=image,padx=10)
	except:
		g.es("exception getting icon")
		g.es_exception()

	text.insert("end",version,"version")
	text.insert("end",copyright,"copyright")
	text.insert("end",'\n')
	text.insert("end",url,"url") # Add "url" tag.
	text.insert("end",'\n')
	text.insert("end",email,"email") # Add "email" tag.
	
	text.tag_config("version",justify="center")
	text.tag_config("copyright",justify="center",spacing1="3")
	
	text.tag_config("url",underline=1,justify="center",spacing1="10")
	text.tag_bind("url","&lt;Button-1&gt;",self.onAboutLeoUrl)
	text.tag_bind("url","&lt;Enter&gt;",self.setArrowCursor)
	text.tag_bind("url","&lt;Leave&gt;",self.setDefaultCursor)

	text.tag_config("email",underline=1,justify="center",spacing1="10")
	text.tag_bind("email","&lt;Button-1&gt;",self.onAboutLeoEmail)
	text.tag_bind("email","&lt;Enter&gt;",self.setArrowCursor)
	text.tag_bind("email","&lt;Leave&gt;",self.setDefaultCursor)

	text.configure(state="disabled")</t>
<t tx="ekr.20031218072017.3870">def onAboutLeoEmail(self,event=None):
	
	"""Handle clicks in the email link in an About Leo dialog."""
	
	try:
		import webbrowser
		webbrowser.open("mailto:" + self.email)
	except:
		g.es("not found: " + self.email)</t>
<t tx="ekr.20031218072017.3871">def onAboutLeoUrl(self,event=None):
	
	"""Handle clicks in the url link in an About Leo dialog."""

	try:
		import webbrowser
		webbrowser.open(self.url)
	except:
		g.es("not found: " + self.url)</t>
<t tx="ekr.20031218072017.3872">def setArrowCursor (self,event=None):
	
	"""Set the cursor to an arrow in an About Leo dialog."""
	
	self.text.configure(cursor="arrow")
	
def setDefaultCursor (self,event=None):
	
	"""Set the cursor to the default cursor in an About Leo dialog."""
	
	self.text.configure(cursor="xterm")</t>
<t tx="ekr.20031218072017.3873">class tkinterAskOk(leoTkinterDialog):
	
	"""A class that creates a Tkinter dialog with a single OK button."""

	@others</t>
<t tx="ekr.20031218072017.3874">def __init__ (self,title,message=None,text="Ok",resizeable=false):

	"""Create a dialog with one button"""

	leoTkinterDialog.__init__(self,title,resizeable) # Initialize the base class.
	self.text = text
	self.createTopFrame()
	self.top.bind("&lt;Key&gt;", self.onKey)

	if message:
		self.createMessageFrame(message)

	buttons = {"text":text,"command":self.okButton,"default":true}, # Singleton tuple.
	self.createButtons(buttons)</t>
<t tx="ekr.20031218072017.3875">def onKey(self,event):
	
	"""Handle Key events in askOk dialogs."""

	ch = event.char.lower()

	if ch in (self.text[0].lower(),'\n','\r'):
		self.okButton()

	return "break"
</t>
<t tx="ekr.20031218072017.3876">class  tkinterAskOkCancelNumber (leoTkinterDialog):
	
	"""Create and run a modal Tkinter dialog to get a number."""
	
	@others
</t>
<t tx="ekr.20031218072017.3877">def __init__ (self,title,message):
	
	"""Create a number dialog"""

	leoTkinterDialog.__init__(self,title,resizeable=false) # Initialize the base class.
	self.answer = -1
	self.number_entry = None

	self.createTopFrame()
	self.top.bind("&lt;Key&gt;", self.onKey)

	self.createFrame(message)
	self.focus_widget = self.number_entry

	buttons = (
			{"text":"Ok",    "command":self.okButton,     "default":true},
			{"text":"Cancel","command":self.cancelButton} )
	buttonList = self.createButtons(buttons)
	self.ok_button = buttonList[0] # Override the default kind of Ok button.</t>
<t tx="ekr.20031218072017.3878">def createFrame (self,message):
	
	"""Create the frame for a number dialog."""
	
	f = self.frame
	
	lab = Tk.Label(f,text=message)
	lab.pack(pady=10,side="left")
	
	self.number_entry = t = Tk.Entry(f,width=20)
	t.pack(side="left")</t>
<t tx="ekr.20031218072017.3879">def okButton(self):
	
	"""Handle clicks in the ok button of a number dialog."""

	s = self.number_entry.get().strip()

	try:
		self.answer=int(s)
	except:
		self.answer=-1 # Cancel the operation.

	self.top.destroy()
	
def cancelButton(self):
	
	"""Handle clicks in the cancel button of a number dialog."""

	self.answer=-1
	self.top.destroy()</t>
<t tx="ekr.20031218072017.3880">def onKey (self,event):
	
	&lt;&lt; eliminate non-numbers &gt;&gt;

	ch = event.char.lower()

	if ch in ('o','\n','\r'):
		self.okButton()
	elif ch == 'c':
		self.cancelButton()

	return "break"</t>
<t tx="ekr.20031218072017.3881">e = self.number_entry
s = e.get().strip()

i = 0
while i &lt; len(s):
	ch = s[i]
	if ch not in string.digits:
		e.delete(`i`)
		s = e.get()
	else:
		i += 1</t>
<t tx="ekr.20031218072017.3882">class tkinterAskYesNo (leoTkinterDialog):

	"""A class that creates a Tkinter dialog with two buttons: Yes and No."""

	@others

</t>
<t tx="ekr.20031218072017.3883">def __init__ (self,title,message=None,resizeable=false):
	
	"""Create a dialog having yes and no buttons."""

	leoTkinterDialog.__init__(self,title,resizeable) # Initialize the base class.
	self.createTopFrame()
	self.top.bind("&lt;Key&gt;",self.onKey)

	if message:
		self.createMessageFrame(message)
		
	buttons = (
		{"text":"Yes","command":self.yesButton,  "default":true},
		{"text":"No", "command":self.noButton} )
	self.createButtons(buttons)
</t>
<t tx="ekr.20031218072017.3884">def onKey(self,event):
	
	"""Handle keystroke events in dialogs having yes and no buttons."""

	ch = event.char.lower()

	if ch in ('y','\n','\r'):
		self.yesButton()
	elif ch == 'n':
		self.noButton()

	return "break"</t>
<t tx="ekr.20031218072017.3885">class tkinterAskYesNoCancel(leoTkinterDialog):
	
	"""A class to create and run Tkinter dialogs having three buttons.
	
	By default, these buttons are labeled Yes, No and Cancel."""
	
	@others
</t>
<t tx="ekr.20031218072017.3886">def __init__ (self,title,
	message=None,
	yesMessage="Yes",
	noMessage="No",
	defaultButton="Yes",
	resizeable=false):
		
	"""Create a dialog having three buttons."""

	leoTkinterDialog.__init__(self,title,resizeable) # Initialize the base class.
	self.yesMessage,self.noMessage = yesMessage,noMessage
	self.defaultButton = defaultButton

	self.createTopFrame()
	self.top.bind("&lt;Key&gt;",self.onKey)

	if message:
		self.createMessageFrame(message)
		
	buttons = (
		{"text":yesMessage,"command":self.yesButton,   "default":yesMessage==defaultButton},
		{"text":noMessage, "command":self.noButton,    "default":noMessage==defaultButton},
		{"text":"Cancel",  "command":self.cancelButton,"default":"Cancel"==defaultButton} )
	self.createButtons(buttons)

</t>
<t tx="ekr.20031218072017.3887">def onKey(self,event):
	
	"""Handle keystrokes in dialogs with three buttons."""

	ch = event.char.lower()
	
	if ch in ('\n','\r'):
		ch = self.defaultButton[0].lower()

	if ch == self.yesMessage[0].lower():
		self.yesButton()
	elif ch == self.noMessage[0].lower():
		self.noButton()
	elif ch == 'c':
		self.cancelButton()

	return "break"</t>
<t tx="ekr.20031218072017.3888">def noButton(self):
	
	"""Handle clicks in the 'no' (second) button in a dialog with three buttons."""
	
	self.answer=self.noMessage.lower()
	self.top.destroy()
	
def yesButton(self):
	
	"""Handle clicks in the 'yes' (first) button in a dialog with three buttons."""
	
	self.answer=self.yesMessage.lower()
	self.top.destroy()
</t>
<t tx="ekr.20031218072017.3889">class tkinterListBoxDialog (leoTkinterDialog):

	"""A base class for Tkinter dialogs containing a Tk Listbox"""

	@others</t>
<t tx="ekr.20031218072017.3890">def __init__ (self,c,title,label):
	
	"""Constructor for the base listboxDialog class."""
	
	leoTkinterDialog.__init__(self,title,resizeable=true) # Initialize the base class.
	self.createTopFrame()
	self.top.protocol("WM_DELETE_WINDOW", self.destroy)

	# Initialize common ivars.
	self.c = c
	self.label = label
	self.vnodeList = []
	self.vnodeList = []
	self.buttonFrame = None
	
	# Fill in the frame.
	self.createFrame()
	self.fillbox()
	
	# Make the common bindings after creating self.box.
	
	self.box.bind("&lt;Double-Button-1&gt;",self.go)
</t>
<t tx="ekr.20031218072017.3891">def addStdButtons (self,frame):
	
	"""Add stanadard buttons to a listBox dialog."""
	
	# Create the ok and cancel buttons.
	self.ok = ok = Tk.Button(frame,text="Go",width=6,command=self.go)
	self.hide = hide = Tk.Button(frame,text="Hide",width=6,command=self.hide)

	ok.pack(side="left",pady=2,padx=5)
	hide.pack(side="left",pady=2,padx=5)</t>
<t tx="ekr.20031218072017.3892">def createFrame(self):
	
	"""Create the essentials of a listBoxDialog frame
	
	Subclasses will add buttons to self.buttonFrame"""
	
	self.outerFrame = f = Tk.Frame(self.frame)
	f.pack(expand=1,fill="both")
	
	if self.label:
		labf = Tk.Frame(f)
		labf.pack(pady=2)
		lab = Tk.Label(labf,text=self.label)
		lab.pack()
	
	f2 = Tk.Frame(f)
	f2.pack(expand=1,fill="both")
	
	self.box = box = Tk.Listbox(f2,height=20,width=30)
	box.pack(side="left",expand=1,fill="both")
	
	bar = Tk.Scrollbar(f2)
	bar.pack(side="left", fill="y")
	
	bar.config(command=box.yview)
	box.config(yscrollcommand=bar.set)</t>
<t tx="ekr.20031218072017.3893">def destroy (self,event=None):
	
	"""Hide, do not destroy, a listboxDialog window
	
	subclasses may override to really destroy the window"""
	
	self.top.withdraw() # Don't allow this window to be destroyed.
</t>
<t tx="ekr.20031218072017.3894">def hide (self):
	
	"""Hide a list box dialog."""
	
	self.top.withdraw()</t>
<t tx="ekr.20031218072017.3895">def fillbox(self,event=None):
	
	"""Fill a listbox from information.
	
	Overridden by subclasses"""
	
	pass</t>
<t tx="ekr.20031218072017.3896">def go(self,event=None):
	
	"""Handle clicks in the "go" button in a list box dialog."""
	
	c = self.c ; box = self.box
	
	# Work around an old Python bug.  Convert strings to ints.
	items = box.curselection()
	try:
		items = map(int, items)
	except ValueError: pass

	if items:
		n = items[0]
		v = self.vnodeList[n]
		c.beginUpdate()
		c.frame.tree.expandAllAncestors(v)
		c.selectVnode(v,updateBeadList=true) # A case could be made for updateBeadList=false
		c.endUpdate()
		c.frame.tree.idle_scrollTo(v)
</t>
<t tx="ekr.20031218072017.3897">import leoGlobals as g
from leoGlobals import true,false

import leoFind, leoTkinterDialog
import string,sys,Tkinter,types

Tk=Tkinter

class leoTkinterFind (leoFind.leoFind,leoTkinterDialog.leoTkinterDialog):

	"""A class that implements Leo's tkinter find dialog."""

	@others</t>
<t tx="ekr.20031218072017.3898"></t>
<t tx="ekr.20031218072017.3899">def __init__(self,title="Leo Find/Change",resizeable=false):
	
	# Init the base classes...

	leoFind.leoFind.__init__(self)
	leoTkinterDialog.leoTkinterDialog.__init__(self,title,resizeable)

	&lt;&lt; init the tkinter ivars &gt;&gt;
	
	self.createTopFrame() # Create the outer tkinter dialog frame.
	self.createFrame()</t>
<t tx="ekr.20031218072017.3900">self.dict = {}

for key in self.intKeys:
	self.dict[key] = Tk.IntVar()

for key in self.newStringKeys:
	self.dict[key] = Tk.StringVar()
	
self.s_text = Tk.Text() # Used by find.search()</t>
<t tx="ekr.20031218072017.3901">def destroySelf (self):
	
	self.top.destroy()</t>
<t tx="ekr.20031218072017.3902">def createFrame (self):

	# Create the find panel...
	outer = Tk.Frame(self.frame,relief="groove",bd=2)
	outer.pack(padx=2,pady=2)

	&lt;&lt; Create the Find and Change panes &gt;&gt;
	&lt;&lt; Create four columns of radio and checkboxes &gt;&gt;
	&lt;&lt; Create two rows of buttons &gt;&gt;
	
	for widget in (self.find_text, self.change_text):
		widget.bind ("&lt;1&gt;",  self.resetWrap)
		widget.bind("&lt;Key&gt;", self.resetWrap)
	
	for widget in (outer, self.find_text, self.change_text):
		widget.bind("&lt;Key-Return&gt;", self.findButton)
		widget.bind("&lt;Key-Escape&gt;", self.onCloseWindow)
	
	self.top.protocol("WM_DELETE_WINDOW", self.onCloseWindow)</t>
<t tx="ekr.20031218072017.3903">columnsFrame = Tk.Frame(outer,relief="groove",bd=2)
columnsFrame.pack(anchor="e",expand=1,padx="7m",pady="2m") # Don't fill.

numberOfColumns = 4 # Number of columns
columns = [] ; radioLists = [] ; checkLists = []
for i in xrange(numberOfColumns):
	columns.append(Tk.Frame(columnsFrame,bd=1))
	radioLists.append([])
	checkLists.append([])

for i in xrange(numberOfColumns):
	columns[i].pack(side="left",padx="1m") # fill="y" Aligns to top. padx expands columns.

radioLists[0] = [
	(self.dict["radio-find-type"],"Plain Search","plain-search"),  
	(self.dict["radio-find-type"],"Pattern Match Search","pattern-search"),
	(self.dict["radio-find-type"],"Script Search","script-search")]
checkLists[0] = [
	("Script Change",self.dict["script_change"])]
checkLists[1] = [
	("Whole Word",  self.dict["whole_word"]),
	("Ignore Case", self.dict["ignore_case"]),
	("Wrap Around", self.dict["wrap"]),
	("Reverse",     self.dict["reverse"])]
radioLists[2] = [
	(self.dict["radio-search-scope"],"Entire Outline","entire-outine"),
	(self.dict["radio-search-scope"],"Suboutline Only","suboutline-only"),  
	(self.dict["radio-search-scope"],"Node Only","node-only"),    
	(self.dict["radio-search-scope"],"Selection Only","selection-only")] # 11/9/03
checkLists[2] = []
checkLists[3] = [
	("Search Headline Text", self.dict["search_headline"]),
	("Search Body Text",     self.dict["search_body"]),
	("Mark Finds",           self.dict["mark_finds"]),
	("Mark Changes",         self.dict["mark_changes"])]

for i in xrange(numberOfColumns):
	for var,name,val in radioLists[i]:
		box = Tk.Radiobutton(columns[i],anchor="w",text=name,variable=var,value=val)
		box.pack(fill="x")
		box.bind("&lt;1&gt;", self.resetWrap)
		if val == None: box.configure(state="disabled")
	for name, var in checkLists[i]:
		box = Tk.Checkbutton(columns[i],anchor="w",text=name,variable=var)
		box.pack(fill="x")
		box.bind("&lt;1&gt;", self.resetWrap)
		if var == None: box.configure(state="disabled")
</t>
<t tx="ekr.20031218072017.3904">fc = Tk.Frame(outer, bd="1m")
fc.pack(anchor="n", fill="x", expand=1)

# Removed unused height/width params: using fractions causes problems in some locales!
fpane = Tk.Frame(fc, bd=1)
cpane = Tk.Frame(fc, bd=1)

fpane.pack(anchor="n", expand=1, fill="x")
cpane.pack(anchor="s", expand=1, fill="x")

# Create the labels and text fields...
flab = Tk.Label(fpane, width=8, text="Find:")
clab = Tk.Label(cpane, width=8, text="Change:")

# Use bigger boxes for scripts.
self.find_text   = ftxt = Tk.Text(fpane, height=10, width=80)
self.change_text = ctxt = Tk.Text(cpane, height=10, width=80)

fBar = Tk.Scrollbar(fpane,name='findBar')
cBar = Tk.Scrollbar(cpane,name='changeBar')

# Add scrollbars.
for bar,txt in ((fBar,ftxt),(cBar,ctxt)):
	txt['yscrollcommand'] = bar.set
	bar['command'] = txt.yview
	bar.pack(side="right", fill="y")

flab.pack(side="left")
clab.pack(side="left")
ctxt.pack(side="right", expand=1, fill="both")
ftxt.pack(side="right", expand=1, fill="both")</t>
<t tx="ekr.20031218072017.3905"># Create the button panes
buttons  = Tk.Frame(outer,bd=1)
buttons2 = Tk.Frame(outer,bd=1)
buttons.pack (anchor="n",expand=1,fill="x")
buttons2.pack(anchor="n",expand=1,fill="x")

# Create the first row of buttons
findButton=Tk.Button(buttons,width=8,text="Find",bd=4,command=self.findButton) # The default.
contextBox=Tk.Checkbutton(buttons,anchor="w",text="Show Context",variable=self.dict["batch"])
findAllButton=Tk.Button(buttons,width=8,text="Find All",command=self.findAllButton)

findButton.pack   (pady="1m",padx="25m",side="left")
contextBox.pack   (pady="1m",          side="left",expand=1)
findAllButton.pack(pady="1m",padx="25m",side="right",fill="x",)

# Create the second row of buttons
changeButton    =Tk.Button(buttons2,width=8,text="Change",command=self.changeButton)
changeFindButton=Tk.Button(buttons2,        text="Change, Then Find",command=self.changeThenFindButton)
changeAllButton =Tk.Button(buttons2,width=8,text="Change All",command=self.changeAllButton)

changeButton.pack    (pady="1m",padx="25m",side="left")
changeFindButton.pack(pady="1m",          side="left",expand=1)
changeAllButton.pack (pady="1m",padx="25m",side="right")</t>
<t tx="ekr.20031218072017.3906">def onCloseWindow(self,event=None):

	self.top.withdraw()</t>
<t tx="ekr.20031218072017.3907">def bringToFront (self):
	
	"""Bring the tkinter Find Panel to the front."""
	
	c = g.top() ; t = self.find_text ; gui = g.app.gui
	        
	self.top.withdraw() # Helps bring the window to the front.
	self.top.deiconify()
	self.top.lift()

	gui.set_focus(c,t)
	gui.setTextSelection (t,"1.0","end") # Thanks Rich.</t>
<t tx="ekr.20031218072017.3908">def gui_search (self,t,*args,**keys):
	return t.search(*args,**keys)

def init_s_text (self,s):
	c = self.c ; t = self.s_text	
	t.delete("1.0","end")
	t.insert("end",s)
	t.mark_set("insert",g.choose(c.reverse_flag,"end","1.0"))
	return t
</t>
<t tx="ekr.20031218072017.3909">@language python

import leoGlobals as g
from leoGlobals import true,false

import leoFontPanel
import Tkinter,tkFont
import sys,string

Tk = Tkinter

class leoTkinterFontPanel (leoFontPanel.leoFontPanel):
	
	"""A class to create and run a tkinter font panel."""

	@others</t>
<t tx="ekr.20031218072017.3910"></t>
<t tx="ekr.20031218072017.3911">def __init__ (self,c):
	
	leoFontPanel.leoFontPanel.__init__(self,c)

	self.default_font = "Courier"
	
	# Slots for callbacks
	self.listBoxIndex = 0
	self.family_list_box = None
	self.size_entry = None
	self.example_entry = None
	self.outer = None
	
	self.setRevertVars()
	self.createFrame()
	
	# Finish up after the dialog is frozen.
	# This works around Tk weirdness
	self.outer.after_idle(self.finishCreate)</t>
<t tx="ekr.20031218072017.3912">def createFrame (self):

	c = self.c ; gui = g.app.gui
	self.top = top = Tk.Toplevel(g.app.root)
	gui.attachLeoIcon(top)

	top.title("Fonts for " + c.frame.shortFileName()) # DS, 10/28/03
	top.protocol("WM_DELETE_WINDOW", self.onOk)
	
	&lt;&lt; create the Tk.IntVars &gt;&gt;
	&lt;&lt; Create the organizer frames &gt;&gt;
	&lt;&lt; create the font pane &gt;&gt;
	&lt;&lt; create the checkboxes &gt;&gt;
	&lt;&lt; create the buttons &gt;&gt;
	
	# This must be done _after_ the dialog has been built!
	w,h,x,y = gui.center_dialog(top)
	top.wm_minsize(height=h,width=w)
</t>
<t tx="ekr.20031218072017.3913"># Variables to track values of style checkboxes.
self.sizeVar = Tk.IntVar()
self.boldVar = Tk.IntVar()
self.italVar = Tk.IntVar()

# Variables to track values of pane checkboxes.
self.bodyVar = Tk.IntVar()
self.logVar = Tk.IntVar()
self.treeVar = Tk.IntVar()</t>
<t tx="ekr.20031218072017.3914">self.outer = outer = Tk.Frame(top,bd=2,relief="groove",width="8i")
outer.pack(padx=2,pady=2,expand=1,fill="both")

upper = Tk.Frame(outer)
upper.pack(fill="both",expand=1)

lt = Tk.Frame(upper)
lt.pack(side="left",fill="both",expand=1)

rt = Tk.Frame(upper)
rt.pack(side="right",anchor="n",padx=4) # Not filling or expanding centers contents.

# Not filling or expanding centers contents.
# padx=20 gives more room to the Listbox in the lt frame!
lower = Tk.Frame(outer)
lower.pack(side="top",anchor="w",padx=20)</t>
<t tx="ekr.20031218072017.3915"># Create the list box and its scrollbar.
self.family_list_box = box = Tk.Listbox(lt,height=7)

# Fill the listbox to set the width.
names = tkFont.families()
names = list(names)
names.sort()
for name in names:
	box.insert("end", name)

box.pack(padx=4,pady=4,fill="both",expand=1)
box.bind("&lt;Double-Button-1&gt;", self.update)

bar = Tk.Scrollbar(box)
bar.pack(side="right", fill="y")

bar.config(command=box.yview)
box.config(yscrollcommand=bar.set)</t>
<t tx="ekr.20031218072017.3916"># Create the style checkboxes.
for text,var in (
	("Bold",self.boldVar),
	("Italic",self.italVar)):

	b = Tk.Checkbutton(rt,text=text,variable=var)
	b.pack(side="top",anchor="w")

# Create the size label and entry widget.
row = Tk.Frame(rt)
row.pack(side="top")

lab = Tk.Label(row,text="Size:")
lab.pack(side="left")

self.size_entry = e = Tk.Entry(row,width=4)
e.pack(side="left")
e.bind("&lt;Key&gt;",self.onSizeEntryKey)

# Create the pane checkboxes.
for text,var in (
	("Body",   self.bodyVar),
	("Outline",self.treeVar,),
	("Log",    self.logVar)):

	b = Tk.Checkbutton(rt,text=text,variable=var)
	b.pack(side="top",anchor="w")</t>
<t tx="ekr.20031218072017.3917">for name,command in (
	("Apply",self.onApply),
	("OK",self.onOk),
	("Cancel",self.onCancel),
	("Revert",self.onRevert)):
		
	b = Tk.Button(lower,width=7,text=name,command=command)
	b.pack(side="left",anchor="w",pady=6,padx=4,expand=0)</t>
<t tx="ekr.20031218072017.3918">def finishCreate (self):
	
	# These do not get changed when reverted.
	self.bodyVar.set(1)
	self.logVar.set(0)
	self.treeVar.set(0)
	
	# All other vars do change when reverted.
	self.revertIvars()
	self.update()</t>
<t tx="ekr.20031218072017.3919">def setRevertVars (self):
	
	"""Set vars for revert."""
	
	c = self.c

	fn = c.frame.body.cget("font")
	self.revertBodyFont = tkFont.Font(font=fn)
	
	fn = c.frame.log.getFontConfig()
	self.revertLogFont = tkFont.Font(font=fn)
	
	self.revertTreeFont = c.frame.tree.getFont()</t>
<t tx="ekr.20031218072017.3920"></t>
<t tx="ekr.20031218072017.3921">def selectFont (self,font):
	
	box = self.family_list_box
	
	# All selections come here.
	self.last_selected_font = font

	# The name should be on the list!
	name, size, slant, weight = self.getFontSettings(font)
	for i in xrange(0,box.size()):
		item = box.get(i)
		if name == item:
			box.select_clear(0,"end")
			box.select_set(i)
			box.see(i)
			self.last_selected_font = font
			# g.trace(name)
			return

	# print "not found:" + name</t>
<t tx="ekr.20031218072017.3922">def onSizeEntryKey (self,event=None):
	
	self.size_entry.after_idle(self.idle_entry_key)
	
def idle_entry_key (self):
	
	size = self.size_entry.get() # Doesn't work until idle time.
	try:
		size = int(size)
		self.sizeVar.set(size)
	except: # The user typed an invalid number.
		return</t>
<t tx="ekr.20031218072017.3923"></t>
<t tx="ekr.20031218072017.3924">def onApply (self):
	
	self.update()
</t>
<t tx="ekr.20031218072017.3925">def onCancel (self):

	self.onRevert()
	self.showSettings()
	self.hide()</t>
<t tx="ekr.20031218072017.3926">def onOk (self):

	c = self.c
	self.showSettings()
	
	&lt;&lt; update the configuration settings &gt;&gt;

	self.setRevertVars()
	self.hide()</t>
<t tx="ekr.20031218072017.3927">set = g.app.config.setWindowPref

fn = c.frame.body.cget("font")
font = tkFont.Font(font=fn)
name,size,slant,weight = self.getFontSettings(font)
set("body_text_font_family",name)
set("body_text_font_size",size)
set("body_text_font_slant",slant)
set("body_text_font_weight",weight)
	
fn = c.frame.log.getFontConfig()
font = tkFont.Font(font=fn)
name,size,slant,weight = self.getFontSettings(font)
set("log_text_font_family",name)
set("log_text_font_size",size)
set("log_text_font_slant",slant)
set("log_text_font_weight",weight)
	
font = c.frame.tree.getFont()
name,size,slant,weight = self.getFontSettings(font)
set("headline_text_font_family",name)
set("headline_text_font_size",size)
set("headline_text_font_slant",slant)
set("headline_text_font_weight",weight)</t>
<t tx="ekr.20031218072017.3928">def onRevert (self):

	c = self.c
	c.frame.body.configure(font=self.revertBodyFont)
	c.frame.log.configureFont(self.revertLogFont)
	c.frame.tree.setFont (font=self.revertTreeFont)
	c.redraw()
	self.revertIvars()
	# Don't call update here.</t>
<t tx="ekr.20031218072017.3929">def hide (self):
	
	"""Hide the font panel."""

	self.top.withdraw()</t>
<t tx="ekr.20031218072017.3930"></t>
<t tx="ekr.20031218072017.3931">@ Returns a font corresponding to present visual state of the font panel.  As a benign side effect, this routine selects the font in the list box.

Alas, the selection in the list box may have been cleared.  In that case, we must figure out what it should be. We recreate the family name (and only the family name!) from self.last_selected_font, or in an emergency the font returned from getImpliedFont().
@c

def getActiveFont (self):

	box = self.family_list_box
	family = font = None

	# Get the family name if possible, or font otherwise.
	items = box.curselection()
	if len(items) == 0:
		# Nothing selected.
		if self.last_selected_font:
			font =self.last_selected_font
		else:
			font = self.getImpliedFont()
	else:
		try: # This shouldn't fail now.
			items = map(int, items)
			family = box.get(items[0])
		except:
			g.es("unexpected exception")
			g.es_exception()
			font = self.getImpliedFont()
	# At this point we either have family or font.
	assert(font or family)
	if not family:
		# Extract the family from the computed font.
		family,junk,junk,junk = self.getFontSettings(font)
	# At last we have a valid family name!
	# Get all other font settings from the font panel.
	bold = self.boldVar.get()
	ital = self.italVar.get()
	size = self.sizeVar.get()
	# g.trace(`size`)
	slant=g.choose(ital,"italic","roman")
	weight=g.choose(bold,"bold","normal")
	# Compute the font from all the settings.
	font = tkFont.Font(family=family,size=size,slant=slant,weight=weight)
	self.selectFont(font)
	return font</t>
<t tx="ekr.20031218072017.3932">def getFontSettings (self, font):

	name   = font.cget("family")
	size   = font.cget("size")
	slant  = font.cget("slant")
	weight = font.cget("weight")

	return name, size, slant, weight</t>
<t tx="ekr.20031218072017.3933"># If a single pane's checkbox is checked, select that pane's present font.
# Otherwise, select the present font of some checked pane, it doesn't much matter which.
# If none are check, select the body pane's present font.

def getImpliedFont (self):

	c = self.c

	body = self.bodyVar.get()
	log  = self.logVar.get()
	tree = self.treeVar.get()
	
	fn = c.frame.body.cget("font")
	bodyFont = tkFont.Font(font=fn)
	fn = c.frame.log.getFontConfig()
	logFont = tkFont.Font(font=fn)
	treeFont = c.frame.tree.getFont()
	
	if log and not body and not tree:
		font = logFont
	elif tree and not body and not log:
		font = treeFont
	elif body: font = bodyFont
	elif tree: font = treeFont
	elif log:  font = logFont # Exercise for the reader: prove this case will never happen.
	else:      font = bodyFont
	return font</t>
<t tx="ekr.20031218072017.3934">def revertIvars (self):
	
	c = self.c
	# Revert the fonts themselves in the various panes.
	font = self.revertBodyFont
	c.frame.body.configure(font=font)
	font = self.revertLogFont
	c.frame.log.configureFont(font)
	font = self.revertTreeFont
	c.frame.tree.setFont(font=font)
	# Revert the setting of the items in the font panel
	self.last_selected_font = None # Use the font for the selected panes.
	font = self.getImpliedFont()
	self.selectFont(font)
	try:
		name, size, slant, weight = self.getFontSettings(font)
		size=int(size)
	except: pass

	self.sizeVar.set(size)
	self.boldVar.set(g.choose(weight=="bold",1,0))
	self.italVar.set(g.choose(slant=="italic",1,0))
	
	e = self.size_entry
	e.delete(0,"end")
	e.insert(0,`size`)</t>
<t tx="ekr.20031218072017.3935"># Note that just after a revert all three setting may be different.

def showSettings (self):
	
	"""Write all font settings to the log panel."""

	c = self.c
	g.es("---------------")
	# Body pane.
	fn = c.frame.body.cget("font")
	font = tkFont.Font(font=fn)
	name,size,slant,weight = self.getFontSettings(font)
	g.es("body font:" + name + "," + `size` + "," + slant + "," + weight)
	# Log pane.
	fn = c.frame.log.getFontConfig()
	font = tkFont.Font(font=fn)
	name,size,slant,weight = self.getFontSettings(font)
	g.es("log font:" + name + "," + `size` + "," + slant + "," + weight)
	# Tree pane.
	font = c.frame.tree.getFont()
	name,size,slant,weight = self.getFontSettings(font)
	g.es("headline font:" + name + "," + `size` + "," + slant + "," + weight)</t>
<t tx="ekr.20031218072017.3936">def update (self,event=None):
	
	"""Update the body text to show the present settings."""
	
	c = self.c
	size = self.sizeVar.get()
	&lt;&lt; insert the new text in the size box &gt;&gt;
	activeFont = self.getActiveFont()
	bodyChecked = self.bodyVar.get()
	logChecked = self.logVar.get()
	treeChecked = self.treeVar.get()

	if not bodyChecked and not logChecked and not treeChecked:
		g.es("no pane selected")
		return
	

	# c.frame.body.configure(setgrid=0) # Disable body resizes.
	c.beginUpdate()
	&lt;&lt; set the fonts in all panes &gt;&gt;
	c.endUpdate()
	# c.frame.body.configure(setgrid=1) # Enable body resizes.

	self.top.deiconify()
	self.top.lift()</t>
<t tx="ekr.20031218072017.3937">e = self.size_entry
e.delete(0,"end")
e.insert(0,`size`)</t>
<t tx="ekr.20031218072017.3938">font = g.choose(bodyChecked,activeFont,self.revertBodyFont)
c.frame.body.configure(font=font)

font = g.choose(logChecked,activeFont,self.revertLogFont)
c.frame.log.configureFont(font)

font = g.choose(treeChecked,activeFont,self.revertTreeFont)
c.frame.tree.setFont(font=font)</t>
<t tx="ekr.20031218072017.3939">@first # -*- coding: utf-8 -*-

# To do: Use config params for window height, width and bar color, relief and width.

@language python

import leoGlobals as g
from leoGlobals import true,false

import leoColor,leoFrame,leoNodes
import leoTkinterMenu,leoTkinterTree
import Tkinter,tkFont
import os,string,sys,time

Tk = Tkinter

@others</t>
<t tx="ekr.20031218072017.3940">class leoTkinterFrame (leoFrame.leoFrame):
	
	"""A class that represents a Leo window."""

	@others</t>
<t tx="ekr.20031218072017.3941"></t>
<t tx="ekr.20031218072017.3942">def __repr__ (self):

	return "&lt;leoTkinterFrame: %s&gt;" % self.title
</t>
<t tx="ekr.20031218072017.3943"></t>
<t tx="ekr.20031218072017.3944">def createCanvas (self,parentFrame):
	
	frame = self ; config = g.app.config ; Tk = Tkinter
	
	scrolls = config.getBoolWindowPref('outline_pane_scrolls_horizontally')
	scrolls = g.choose(scrolls,1,0)

	canvas = Tk.Canvas(parentFrame,name="canvas",
		bd=0,bg="white",relief="flat")

	frame.treeBar = treeBar = Tk.Scrollbar(parentFrame,name="treeBar")
	
	# Bind mouse wheel event to canvas
	if sys.platform != "win32": # Works on 98, crashes on XP.
		canvas.bind("&lt;MouseWheel&gt;", self.OnMouseWheel)
		
	canvas['yscrollcommand'] = self.setCallback
	treeBar['command']     = self.yviewCallback
	
	treeBar.pack(side="right", fill="y")
	if scrolls: 
		treeXBar = Tk.Scrollbar( 
			parentFrame,name='treeXBar',orient="horizontal") 
		canvas['xscrollcommand'] = treeXBar.set 
		treeXBar['command'] = canvas.xview 
		treeXBar.pack(side="bottom", fill="x")
	
	canvas.pack(expand=1,fill="both")

	canvas.bind("&lt;Button-1&gt;", frame.OnActivateTree)

	# Handle mouse wheel in the outline pane.
	if sys.platform == "linux2": # This crashes tcl83.dll
		canvas.bind("&lt;MouseWheel&gt;", frame.OnMouseWheel)
	
	# g.print_bindings("canvas",canvas)
	return canvas</t>
<t tx="ekr.20031218072017.3945">@ The key invariants used throughout this code:

1. self.splitVerticalFlag tells the alignment of the main splitter and
2. not self.splitVerticalFlag tells the alignment of the secondary splitter.

Only the general-purpose divideAnySplitter routine doesn't know about these invariants.  So most of this code is specialized for Leo's window.  OTOH, creating a single splitter window would be much easier than this code.
</t>
<t tx="ekr.20031218072017.3946">def resizePanesToRatio(self,ratio,secondary_ratio):

	self.divideLeoSplitter(self.splitVerticalFlag, ratio)
	self.divideLeoSplitter(not self.splitVerticalFlag, secondary_ratio)
	# g.trace(`ratio`)
</t>
<t tx="ekr.20031218072017.3947">def bindBar (self, bar, verticalFlag):
	
	if verticalFlag == self.splitVerticalFlag:
		bar.bind("&lt;B1-Motion&gt;", self.onDragMainSplitBar)

	else:
		bar.bind("&lt;B1-Motion&gt;", self.onDragSecondarySplitBar)
</t>
<t tx="ekr.20031218072017.3948"># 5/20/03: Removed the ancient kludge for forcing the height &amp; width of f.
# The code in leoFileCommands.getGlobals now works!

def createLeoSplitter (self, parent, verticalFlag):
	
	"""Create a splitter window and panes into which the caller packs widgets.
	
	Returns (f, bar, pane1, pane2) """

	Tk = Tkinter
	
	# Create the frames.
	f = Tk.Frame(parent,bd=0,relief="flat")
	f.pack(expand=1,fill="both",pady=1)
	pane1 = Tk.Frame(f)
	pane2 = Tk.Frame(f)
	bar =   Tk.Frame(f,bd=2,relief="raised",bg="LightSteelBlue2")

	# Configure and place the frames.
	self.configureBar(bar,verticalFlag)
	self.bindBar(bar,verticalFlag)
	self.placeSplitter(bar,pane1,pane2,verticalFlag)

	return f, bar, pane1, pane2</t>
<t tx="ekr.20031218072017.3949"># This is the general-purpose placer for splitters.
# It is the only general-purpose splitter code in Leo.

def divideAnySplitter (self, frac, verticalFlag, bar, pane1, pane2):

	if verticalFlag:
		# Panes arranged vertically; horizontal splitter bar
		bar.place(rely=frac)
		pane1.place(relheight=frac)
		pane2.place(relheight=1-frac)
	else:
		# Panes arranged horizontally; vertical splitter bar
		bar.place(relx=frac)
		pane1.place(relwidth=frac)
		pane2.place(relwidth=1-frac)</t>
<t tx="ekr.20031218072017.3950"># Divides the main or secondary splitter, using the key invariant.
def divideLeoSplitter (self, verticalFlag, frac):
	if self.splitVerticalFlag == verticalFlag:
		self.divideLeoSplitter1(frac,verticalFlag)
		self.ratio = frac # Ratio of body pane to tree pane.
	else:
		self.divideLeoSplitter2(frac,verticalFlag)
		self.secondary_ratio = frac # Ratio of tree pane to log pane.

# Divides the main splitter.
def divideLeoSplitter1 (self, frac, verticalFlag): 
	self.divideAnySplitter(frac, verticalFlag,
		self.bar1, self.split1Pane1, self.split1Pane2)

# Divides the secondary splitter.
def divideLeoSplitter2 (self, frac, verticalFlag): 
	self.divideAnySplitter (frac, verticalFlag,
		self.bar2, self.split2Pane1, self.split2Pane2)</t>
<t tx="ekr.20031218072017.3951">def onDragMainSplitBar (self, event):
	self.onDragSplitterBar(event,self.splitVerticalFlag)

def onDragSecondarySplitBar (self, event):
	self.onDragSplitterBar(event,not self.splitVerticalFlag)

def onDragSplitterBar (self, event, verticalFlag):

	# x and y are the coordinates of the cursor relative to the bar, not the main window.
	bar = event.widget
	x = event.x
	y = event.y
	top = bar.winfo_toplevel()

	if verticalFlag:
		# Panes arranged vertically; horizontal splitter bar
		wRoot	= top.winfo_rooty()
		barRoot = bar.winfo_rooty()
		wMax	= top.winfo_height()
		offset = float(barRoot) + y - wRoot
	else:
		# Panes arranged horizontally; vertical splitter bar
		wRoot	= top.winfo_rootx()
		barRoot = bar.winfo_rootx()
		wMax	= top.winfo_width()
		offset = float(barRoot) + x - wRoot

	# Adjust the pixels, not the frac.
	if offset &lt; 3: offset = 3
	if offset &gt; wMax - 2: offset = wMax - 2
	# Redraw the splitter as the drag is occuring.
	frac = float(offset) / wMax
	# g.trace(`frac`)
	self.divideLeoSplitter(verticalFlag, frac)</t>
<t tx="ekr.20031218072017.3952">def placeSplitter (self,bar,pane1,pane2,verticalFlag):

	if verticalFlag:
		# Panes arranged vertically; horizontal splitter bar
		pane1.place(relx=0.5, rely =   0, anchor="n", relwidth=1.0, relheight=0.5)
		pane2.place(relx=0.5, rely = 1.0, anchor="s", relwidth=1.0, relheight=0.5)
		bar.place  (relx=0.5, rely = 0.5, anchor="c", relwidth=1.0)
	else:
		# Panes arranged horizontally; vertical splitter bar
		# adj gives tree pane more room when tiling vertically.
		adj = g.choose(verticalFlag != self.splitVerticalFlag,0.65,0.5)
		pane1.place(rely=0.5, relx =   0, anchor="w", relheight=1.0, relwidth=adj)
		pane2.place(rely=0.5, relx = 1.0, anchor="e", relheight=1.0, relwidth=1.0-adj)
		bar.place  (rely=0.5, relx = adj, anchor="c", relheight=1.0)</t>
<t tx="ekr.20031218072017.3953"></t>
<t tx="ekr.20031218072017.3954">def createIconBar (self):
	
	"""Create an empty icon bar in the packer's present position"""

	if not self.iconFrame:
		self.iconFrame = Tk.Frame(self.outerFrame,height="5m",bd=2,relief="groove")
		self.iconFrame.pack(fill="x",pady=2)</t>
<t tx="ekr.20031218072017.3955">def hideIconBar (self):
	
	"""Hide the icon bar by unpacking it.
	
	A later call to showIconBar will repack it in a new location."""
	
	if self.iconFrame:
		self.iconFrame.pack_forget()
</t>
<t tx="ekr.20031218072017.3956">def clearIconBar(self):
	
	"""Destroy all the widgets in the icon bar"""
	
	f = self.iconFrame
	if not f: return
	
	for slave in f.pack_slaves():
		slave.destroy()

	f.configure(height="5m") # The default height.
	g.app.iconWidgetCount = 0
	g.app.iconImageRefs = []
</t>
<t tx="ekr.20031218072017.3957">def showIconBar(self):
	
	"""Show the icon bar by repacking it"""

	self.iconFrame.pack(fill="x",pady=2)</t>
<t tx="ekr.20031218072017.3958">def addIconButton(self,text=None,imagefile=None,image=None,command=None,bg=None):
	
	"""Add a button containing text or a picture to the icon bar.
	
	Pictures take precedence over text"""
	
	f = self.iconFrame
	if not imagefile and not image and not text: return

	# First define n.	
	try:
		g.app.iconWidgetCount += 1
		n = g.app.iconWidgetCount
	except:
		n = g.app.iconWidgetCount = 1

	if not command:
		def command(n=n):
			print "command for widget %s" % (n)

	if imagefile or image:
		&lt;&lt; create a picture &gt;&gt;
	elif text:
		w = min(6,len(text))
		b = Tk.Button(f,text=text,width=w,relief="groove",bd=2,command=command)
		b.pack(side="left", fill="y")
		return b
		
	return None</t>
<t tx="ekr.20031218072017.3959">try:
	if imagefile:
		# Create the image.  Throws an exception if file not found
		imagefile = g.os_path_join(g.app.loadDir,imagefile)
		imagefile = g.os_path_normpath(imagefile)
		image = Tkinter.PhotoImage(master=g.app.root,file=imagefile)
		
		# Must keep a reference to the image!
		try:
			refs = g.app.iconImageRefs
		except:
			refs = g.app.iconImageRefs = []
	
		refs.append((imagefile,image),)
	
	if not bg:
		bg = f.cget("bg")

	b = Tk.Button(f,image=image,relief="flat",bd=0,command=command,bg=bg)
	b.pack(side="left",fill="y")
	return b
	
except:
	g.es_exception()
	return None</t>
<t tx="ekr.20031218072017.3960">@tabwidth 4
</t>
<t tx="ekr.20031218072017.3961">def createStatusLine (self):
	
	if self.statusFrame and self.statusLabel:
		return
	
	self.statusFrame = statusFrame = Tk.Frame(self.outerFrame,bd=2)
	statusFrame.pack(fill="x",pady=1)
	
	text = "line 0, col 0"
	width = len(text) + 4
	self.statusLabel = Tk.Label(statusFrame,text=text,width=width,anchor="w")
	self.statusLabel.pack(side="left",padx=1)
	
	bg = statusFrame.cget("background")
	self.statusText = Tk.Text(statusFrame,height=1,state="disabled",bg=bg,relief="groove")
	self.statusText.pack(side="left",expand=1,fill="x")

	# Register an idle-time handler to update the row and column indicators.
	self.statusFrame.after_idle(self.updateStatusRowCol)</t>
<t tx="ekr.20031218072017.3962">def clearStatusLine (self):
	
	t = self.statusText
	if not t: return
	
	t.configure(state="normal")
	t.delete("1.0","end")
	t.configure(state="disabled")</t>
<t tx="ekr.20031218072017.3963">def putStatusLine (self,s,color=None):
	
	t = self.statusText ; tags = self.statusColorTags
	if not t: return

	t.configure(state="normal")
	
	if "black" not in self.log.colorTags:
		tags.append("black")
		
	if color and color not in tags:
		tags.append(color)
		t.tag_config(color,foreground=color)

	if color:
		t.insert("end",s)
		t.tag_add(color,"end-%dc" % (len(s)+1),"end-1c")
		t.tag_config("black",foreground="black")
		t.tag_add("black","end")
	else:
		t.insert("end",s)
	
	t.configure(state="disabled")</t>
<t tx="ekr.20031218072017.3964"></t>
<t tx="ekr.20031218072017.3965">def destroyAllPanels (self):
	
	"""Destroy all panels attached to this frame."""
	
	panels = (self.comparePanel, self.colorPanel, self.fontPanel, self.prefsPanel)

	for panel in panels:
		if panel:
			panel.top.destroy()
			
	self.comparePanel = None
	self.colorPanel = None
	self.fontPanel = None
	self.prefsPanel = None</t>
<t tx="ekr.20031218072017.3966">def bringToFront (self):
	
	"""Bring the tkinter Prefs Panel to the front."""

	self.top.deiconify()
	self.top.lift()</t>
<t tx="ekr.20031218072017.3967"></t>
<t tx="ekr.20031218072017.3968">def configureBar (self, bar, verticalFlag):
	
	config = g.app.config

	# Get configuration settings.
	w = config.getWindowPref("split_bar_width")
	if not w or w &lt; 1: w = 7
	relief = config.getWindowPref("split_bar_relief")
	if not relief: relief = "flat"
	color = config.getWindowPref("split_bar_color")
	if not color: color = "LightSteelBlue2"

	try:
		if verticalFlag:
			# Panes arranged vertically; horizontal splitter bar
			bar.configure(relief=relief,height=w,bg=color,cursor="sb_v_double_arrow")
		else:
			# Panes arranged horizontally; vertical splitter bar
			bar.configure(relief=relief,width=w,bg=color,cursor="sb_h_double_arrow")
	except: # Could be a user error. Use all defaults
		g.es("exception in user configuration for splitbar")
		g.es_exception()
		if verticalFlag:
			# Panes arranged vertically; horizontal splitter bar
			bar.configure(height=7,cursor="sb_v_double_arrow")
		else:
			# Panes arranged horizontally; vertical splitter bar
			bar.configure(width=7,cursor="sb_h_double_arrow")</t>
<t tx="ekr.20031218072017.3969">def configureBarsFromConfig (self):
	
	config = g.app.config

	w = config.getWindowPref("split_bar_width")
	if not w or w &lt; 1: w = 7
	
	relief = config.getWindowPref("split_bar_relief")
	if not relief or relief == "": relief = "flat"

	color = config.getWindowPref("split_bar_color")
	if not color or color == "": color = "LightSteelBlue2"

	if self.splitVerticalFlag:
		bar1,bar2=self.bar1,self.bar2
	else:
		bar1,bar2=self.bar2,self.bar1
		
	try:
		bar1.configure(relief=relief,height=w,bg=color)
		bar2.configure(relief=relief,width=w,bg=color)
	except: # Could be a user error.
		g.es("exception in user configuration for splitbar")
		g.es_exception()</t>
<t tx="ekr.20031218072017.3970">def reconfigurePanes (self):
	
	border = g.app.config.getIntWindowPref('additional_body_text_border')
	if border == None: border = 0
	
	# The body pane needs a _much_ bigger border when tiling horizontally.
	border = g.choose(self.splitVerticalFlag,2+border,6+border)
	self.bodyCtrl.configure(bd=border)
	
	# The log pane needs a slightly bigger border when tiling vertically.
	border = g.choose(self.splitVerticalFlag,4,2) 
	self.log.configureBorder(border)</t>
<t tx="ekr.20031218072017.3971"></t>
<t tx="ekr.20031218072017.3972"># Called from quit logic and when user closes the window.
# Returns true if the close happened.

def OnCloseLeoEvent(self):

	g.app.closeLeoWindow(self)</t>
<t tx="ekr.20031218072017.3973">def OnControlKeyDown (self,event=None):
	
	self.controlKeyIsDown = true
	
def OnControlKeyUp (self,event=None):

	self.controlKeyIsDown = false

</t>
<t tx="ekr.20031218072017.3974"># Handle the "visibility" event and attempt to attach the Leo icon.
# This code must be executed whenever the window is redrawn.

def OnVisibility (self,event):

	if self.icon and event.widget is self.top:

		# print "OnVisibility"
		self.icon.attach(self.top)</t>
<t tx="ekr.20031218072017.3975">def OnActivateBody (self,event=None):

	try:
		frame = self ; c = frame.c ; gui = g.app.gui
		g.app.setLog(frame.log,"OnActivateBody")
		self.tree.OnDeactivate()
		gui.set_focus(c,frame.body.bodyCtrl) # Reference to bodyCtrl is allowable in an event handler.
	except:
		g.es_event_exception("activate body")</t>
<t tx="ekr.20031218072017.3976">def OnActivateTree (self,event=None):

	try:
		frame = self ; c = frame.c ; gui = g.app.gui
		g.app.setLog(frame.log,"OnActivateTree")
		self.tree.undimEditLabel()
		gui.set_focus(c, frame.bodyCtrl)
	except:
		g.es_event_exception("activate tree")
</t>
<t tx="ekr.20031218072017.3977">def OnBodyClick (self,event=None):

	try:
		c = self.c ; v = c.currentVnode()
		if not g.doHook("bodyclick1",c=c,v=v,event=event):
			self.OnActivateBody(event=event)
		g.doHook("bodyclick2",c=c,v=v,event=event)
	except:
		g.es_event_exception("bodyclick")

def OnBodyRClick(self,event=None):
	
	try:
		c = self.c ; v = c.currentVnode()
		if not g.doHook("bodyrclick1",c=c,v=v,event=event):
			pass # By default Leo does nothing.
		g.doHook("bodyrclick2",c=c,v=v,event=event)
	except:
		g.es_event_exception("iconrclick")</t>
<t tx="ekr.20031218072017.3978">def OnBodyDoubleClick (self,event=None):

	try:
		c = self.c ; v = c.currentVnode()
		if not g.doHook("bodydclick1",c=c,v=v,event=event):
			if event: # 8/4/02: prevent wandering insertion point.
				index = "@%d,%d" % (event.x, event.y) # Find where we clicked
			body = self.bodyCtrl
			start = body.index(index + " wordstart")
			end = body.index(index + " wordend")
			self.body.setTextSelection(start,end)
		g.doHook("bodydclick2",c=c,v=v,event=event)
	except:
		g.es_event_exception("bodydclick")

	return "break" # Inhibit all further event processing.</t>
<t tx="ekr.20031218072017.3979"></t>
<t tx="ekr.20031218072017.3980"></t>
<t tx="ekr.20031218072017.3981">def abortEditLabelCommand (self):
	
	frame = self ; c = frame.c ; v = c.currentVnode() ; tree = frame.tree
	
	if g.app.batchMode:
		c.notValidInBatchMode("Abort Edit Headline")
		return

	if self.revertHeadline and v.edit_text() and v == tree.editPosition():
	
		v.edit_text().delete("1.0","end")
		v.edit_text().insert("end",self.revertHeadline)
		tree.idle_head_key(v) # Must be done immediately.
		tree.revertHeadline = None
		tree.select(v)
		if v and len(v.t.joinList) &gt; 0:
			tree.force_redraw() # force a redraw of joined headlines.</t>
<t tx="ekr.20031218072017.3982">def endEditLabelCommand (self):

	frame = self ; c = frame.c ; tree = frame.tree ; gui = g.app.gui
	
	if g.app.batchMode:
		c.notValidInBatchMode("End Edit Headline")
		return
	
	v = frame.tree.editPosition()

	# g.trace(v)
	if v and v.edit_text():
		tree.select(v)
	if v: # Bug fix 10/9/02: also redraw ancestor headlines.
		tree.force_redraw() # force a redraw of joined headlines.

	gui.set_focus(c,c.frame.bodyCtrl) # 10/14/02</t>
<t tx="ekr.20031218072017.3983">def insertHeadlineTime (self):

	frame = self ; c = frame.c ; v = c.currentVnode()
	h = v.headString() # Remember the old value.
	
	if g.app.batchMode:
		c.notValidInBatchMode("Insert Headline Time")
		return

	if v.edit_text():
		sel1,sel2 = g.app.gui.getTextSelection(v.edit_text())
		if sel1 and sel2 and sel1 != sel2: # 7/7/03
			v.edit_text().delete(sel1,sel2)
		v.edit_text().insert("insert",c.getTime(body=false))
		frame.tree.idle_head_key(v)

	# A kludge to get around not knowing whether we are editing or not.
	if h.strip() == v.headString().strip():
		g.es("Edit headline to append date/time")</t>
<t tx="ekr.20031218072017.3984"></t>
<t tx="ekr.20031218072017.3985">def toggleActivePane(self):
	
	c = self.c ; gui = g.app.gui
	if gui.get_focus(self) == self.bodyCtrl:
		gui.set_focus(c,self.canvas)
	else:
		gui.set_focus(c,self.bodyCtrl)</t>
<t tx="ekr.20031218072017.3986">def cascade(self):

	x,y,delta = 10,10,10
	for frame in g.app.windowList:
		top = frame.top

		# Compute w,h
		top.update_idletasks() # Required to get proper info.
		geom = top.geometry() # geom = "WidthxHeight+XOffset+YOffset"
		dim,junkx,junky = string.split(geom,'+')
		w,h = string.split(dim,'x')
		w,h = int(w),int(h)

		# Set new x,y and old w,h
		frame.setTopGeometry(w,h,x,y,adjustSize=false)

		# Compute the new offsets.
		x += 30 ; y += 30
		if x &gt; 200:
			x = 10 + delta ; y = 40 + delta
			delta += 10
</t>
<t tx="ekr.20031218072017.3987">def equalSizedPanes(self):

	frame = self
	frame.resizePanesToRatio(0.5,frame.secondary_ratio)
</t>
<t tx="ekr.20031218072017.3988">def hideLogWindow (self):
	
	frame = self
	frame.divideLeoSplitter2(0.99, not frame.splitVerticalFlag)</t>
<t tx="ekr.20031218072017.3989">def minimizeAll(self):

	self.minimize(g.app.findFrame)
	self.minimize(g.app.pythonFrame)
	for frame in g.app.windowList:
		self.minimize(frame)
	
def minimize(self, frame):

	if frame and frame.top.state() == "normal":
		frame.top.iconify()</t>
<t tx="ekr.20031218072017.3990"># The key invariant: self.splitVerticalFlag tells the alignment of the main splitter.
def toggleSplitDirection(self):
	# Abbreviations.
	frame = self
	bar1 = self.bar1 ; bar2 = self.bar2
	split1Pane1,split1Pane2 = self.split1Pane1,self.split1Pane2
	split2Pane1,split2Pane2 = self.split2Pane1,self.split2Pane2
	# Switch directions.
	verticalFlag = self.splitVerticalFlag = not self.splitVerticalFlag
	orientation = g.choose(verticalFlag,"vertical","horizontal")
	g.app.config.setWindowPref("initial_splitter_orientation",orientation)
	# Reconfigure the bars.
	bar1.place_forget()
	bar2.place_forget()
	self.configureBar(bar1,verticalFlag)
	self.configureBar(bar2,not verticalFlag)
	# Make the initial placements again.
	self.placeSplitter(bar1,split1Pane1,split1Pane2,verticalFlag)
	self.placeSplitter(bar2,split2Pane1,split2Pane2,not verticalFlag)
	# Adjust the log and body panes to give more room around the bars.
	self.reconfigurePanes()
	# Redraw with an appropriate ratio.
	vflag,ratio,secondary_ratio = frame.initialRatios()
	self.resizePanesToRatio(ratio,secondary_ratio)</t>
<t tx="ekr.20031218072017.3991"></t>
<t tx="ekr.20031218072017.3992">def leoHelp (self):
	
	file = g.os_path_join(g.app.loadDir,"..","doc","sbooks.chm")

	if g.os_path_exists(file):
		os.startfile(file)
	else:	
		answer = g.app.gui.runAskYesNoDialog(
			"Download Tutorial?",
			"Download tutorial (sbooks.chm) from SourceForge?")

		if answer == "yes":
			try:
				if 0: # Download directly.  (showProgressBar needs a lot of work)
					url = "http://umn.dl.sourceforge.net/sourceforge/leo/sbooks.chm"
					import urllib
					self.scale = None
					urllib.urlretrieve(url,file,self.showProgressBar)
					if self.scale:
						self.scale.destroy()
						self.scale = None
				else:
					url = "http://prdownloads.sourceforge.net/leo/sbooks.chm?download"
					import webbrowser
					os.chdir(g.app.loadDir)
					webbrowser.open_new(url)
			except:
				g.es("exception dowloading sbooks.chm")
				g.es_exception()</t>
<t tx="ekr.20031218072017.3993">def showProgressBar (self,count,size,total):

	# g.trace("count,size,total:" + `count` + "," + `size` + "," + `total`)
	if self.scale == None:
		&lt;&lt; create the scale widget &gt;&gt;
	self.scale.set(count*size)
	self.scale.update_idletasks()</t>
<t tx="ekr.20031218072017.3994">Tk = Tkinter
top = Tk.Toplevel()
top.title("Download progress")
self.scale = scale = Tk.Scale(top,state="normal",orient="horizontal",from_=0,to=total)
scale.pack()
top.lift()</t>
<t tx="ekr.20031218072017.3995">def getFocus(self):
	
	"""Returns the widget that has focus, or body if None."""
	f = self.top.focus_displayof()
	if f:
		return f
	else:
		return self.bodyCtrl
		
def getTitle (self):
	return self.top.title()
	
def setTitle (self,title):
	return self.top.title(title)
	
def get_window_info(self):
	return g.app.gui.get_window_info(self.top)
	
def iconify(self):
	self.top.iconify()

def deiconify (self):
	self.top.deiconify()
	
def lift (self):
	self.top.lift()
	
def update (self):
	self.top.update()
</t>
<t tx="ekr.20031218072017.3996">class leoTkinterBody (leoFrame.leoBody):
	
	"""A class that represents the body pane of a Tkinter window."""

	@others</t>
<t tx="ekr.20031218072017.3997"></t>
<t tx="ekr.20031218072017.3998">def createControl (self,frame,parentFrame):
	
	config = g.app.config

	# A light selectbackground value is needed to make syntax coloring look good.
	wrap = config.getBoolWindowPref('body_pane_wraps')
	wrap = g.choose(wrap,"word","none")
	
	# Setgrid=1 cause severe problems with the font panel.
	body = Tk.Text(parentFrame,name='body',
		bd=2,bg="white",relief="flat",
		setgrid=0,wrap=wrap, selectbackground="Gray80") 
	
	bodyBar = Tk.Scrollbar(parentFrame,name='bodyBar')
	frame.bodyBar = self.bodyBar = bodyBar
	body['yscrollcommand'] = bodyBar.set
	bodyBar['command'] = body.yview
	bodyBar.pack(side="right", fill="y")
	
	# 8/30/03: Always create the horizontal bar.
	self.bodyXBar = bodyXBar = Tk.Scrollbar(
		parentFrame,name='bodyXBar',orient="horizontal")
	body['xscrollcommand'] = bodyXBar.set
	bodyXBar['command'] = body.xview
	self.bodyXbar = frame.bodyXBar = bodyXBar
	
	if wrap == "none":
		bodyXBar.pack(side="bottom", fill="x")
		
	body.pack(expand=1, fill="both")

	if 0: # Causes the cursor not to blink.
		body.configure(insertofftime=0)
		
	return body</t>
<t tx="ekr.20031218072017.3999">def forceFullRecolor (self):
	
	self.forceFullRecolorFlag = true</t>
<t tx="ekr.20031218072017.4000">@
I could have used this to redirect all calls from the body class and the bodyCtrl to Tk. OTOH:

1. Most of the wrappers do more than the old Tk routines now and
2. The wrapper names are more discriptive than the Tk names.

Still, using the Tk names would have had its own appeal.  If I had prefixed the tk routine with tk_ the __getatt__ routine could have stripped it off!
@c

if 0: # This works.
	def __getattr__(self,attr):
		return getattr(self.bodyCtrl,attr)
		
if 0: # This would work if all tk wrapper routines were prefixed with tk_
	def __getattr__(self,attr):
		if attr[0:2] == "tk_":
			return getattr(self.bodyCtrl,attr[3:])</t>
<t tx="ekr.20031218072017.4001">def bbox(self,index):

	return self.bodyCtrl.bbox(index)</t>
<t tx="ekr.20031218072017.4002"># Could have been replaced by the __getattr__ routine above...
# 12/19/03: no: that would cause more problems.

def tag_add (self,tagName,index1,index2):
	self.bodyCtrl.tag_add(tagName,index1,index2)

def tag_bind (self,tagName,event,callback):
	self.bodyCtrl.tag_bind(tagName,event,callback)

def tag_configure (self,colorName,**keys):
	self.bodyCtrl.tag_configure(colorName,keys)

def tag_delete(self,tagName):
	self.bodyCtrl.tag_delete(tagName)

def tag_remove (self,tagName,index1,index2):
	return self.bodyCtrl.tag_remove(tagName,index1,index2)</t>
<t tx="ekr.20031218072017.4003">def hasFocus (self):
	
	return self.bodyCtrl == self.frame.top.focus_displayof()
	
def setFocus (self):
	
	self.bodyCtrl.focus_set()</t>
<t tx="ekr.20031218072017.4004">def getBodyPaneHeight (self):
	
	return self.bodyCtrl.winfo_height()

def getBodyPaneWidth (self):
	
	return self.bodyCtrl.winfo_width()</t>
<t tx="ekr.20031218072017.4005">def scheduleIdleTimeRoutine (self,function,*args,**keys):

	self.bodyCtrl.after_idle(function,*args,**keys)</t>
<t tx="ekr.20031218072017.4006"></t>
<t tx="ekr.20031218072017.4007">def adjustIndex (self,index,offset):
	
	t = self.bodyCtrl
	return t.index("%s + %dc" % (t.index(index),offset))</t>
<t tx="ekr.20031218072017.4008">def compareIndices(self,i,rel,j):

	return self.bodyCtrl.compare(i,rel,j)</t>
<t tx="ekr.20031218072017.4009">def convertRowColumnToIndex (self,row,column):
	
	return self.bodyCtrl.index("%s.%s" % (row,column))</t>
<t tx="ekr.20031218072017.4010">def convertIndexToRowColumn (self,index):
	
	index = self.bodyCtrl.index(index)
	start, end = string.split(index,'.')
	return int(start),int(end)</t>
<t tx="ekr.20031218072017.4011">def getImageIndex (self,image):
	
	return self.bodyCtrl.index(image)</t>
<t tx="ekr.20031218072017.4012">def tkIndex(self,index):
	
	"""Returns the canonicalized Tk index."""
	
	if index == "start": index = "1.0"
	
	return self.bodyCtrl.index(index)</t>
<t tx="ekr.20031218072017.4013"></t>
<t tx="ekr.20031218072017.4014">def getCharAtInsertPoint (self):
	
	s = self.bodyCtrl.get("insert")
	return g.toUnicode(s,g.app.tkEncoding)

def getCharBeforeInsertPoint (self):

	s = self.bodyCtrl.get("insert -1c")
	return g.toUnicode(s,g.app.tkEncoding)</t>
<t tx="ekr.20031218072017.4015">def makeInsertPointVisible (self):
	
	self.bodyCtrl.see("insert -5l")</t>
<t tx="ekr.20031218072017.4016">def setInsertionPoint (self,index):
	self.bodyCtrl.mark_set("insert",index)

def setInsertionPointToEnd (self):
	self.bodyCtrl.mark_set("insert","end")
	
def setInsertPointToStartOfLine (self,lineNumber): # zero-based line number
	self.bodyCtrl.mark_set("insert",str(1+lineNumber)+".0 linestart")</t>
<t tx="ekr.20031218072017.4017">def bind (self,*args,**keys):
	
	return self.bodyCtrl.bind(*args,**keys)
</t>
<t tx="ekr.20031218072017.4018"></t>
<t tx="ekr.20031218072017.4019">def deleteTextSelection (self):
	
	t = self.bodyCtrl
	sel = t.tag_ranges("sel")
	if len(sel) == 2:
		start,end = sel
		if t.compare(start,"!=",end):
			t.delete(start,end)</t>
<t tx="ekr.20031218072017.4020">def getSelectedText (self):
	
	"""Return the selected text of the body frame, converted to unicode."""

	start, end = self.getTextSelection()
	if start and end and start != end:
		s = self.bodyCtrl.get(start,end)
		if s is None:
			return u""
		else:
			return g.toUnicode(s,g.app.tkEncoding)
	else:
		return None</t>
<t tx="ekr.20031218072017.4021">def getTextSelection (self):
	
	"""Return a tuple representing the selected range of body text.
	
	Return a tuple giving the insertion point if no range of text is selected."""

	bodyCtrl = self.bodyCtrl
	sel = bodyCtrl.tag_ranges("sel")

	if len(sel) == 2:
		return sel
	else:
		# Return the insertion point if there is no selected text.
		insert = bodyCtrl.index("insert")
		return insert,insert</t>
<t tx="ekr.20031218072017.4022">def hasTextSelection (self):

	sel = self.bodyCtrl.tag_ranges("sel")
	return sel and len(sel) == 2</t>
<t tx="ekr.20031218072017.4023">def selectAllText (self):
	
	g.app.gui.setTextSelection(self.bodyCtrl,"1.0","end")
</t>
<t tx="ekr.20031218072017.4024">def setTextSelection (self,i,j=None):
	
	# Allow the user to pass either a 2-tuple or two separate args.
	if i is None:
		i,j = "1.0","1.0"
	elif len(i) == 2:
		i,j = i

	g.app.gui.setTextSelection(self.bodyCtrl,i,j)</t>
<t tx="ekr.20031218072017.4025"></t>
<t tx="ekr.20031218072017.4026">def deleteAllText(self):
	self.bodyCtrl.delete("1.0","end")

def deleteCharacter (self,index):
	t = self.bodyCtrl
	t.delete(t.index(index))
	
def deleteLastChar (self):
	self.bodyCtrl.delete("end-1c")
	
def deleteLine (self,lineNumber): # zero based line number.
	self.bodyCtrl.delete(str(1+lineNumber)+".0","end")
	
def deleteLines (self,line1,numberOfLines): # zero based line numbers.
	self.bodyCtrl.delete(str(1+line1)+".0",str(1+line1+numberOfLines-1)+".0 lineend")
	
def deleteRange (self,index1,index2):
	t = self.bodyCtrl
	t.delete(t.index(index1),t.index(index2))</t>
<t tx="ekr.20031218072017.4027"></t>
<t tx="ekr.20031218072017.4028">def getAllText (self):
	
	"""Return all the body text, converted to unicode."""
	
	s = self.bodyCtrl.get("1.0","end")
	if s is None:
		return u""
	else:
		return g.toUnicode(s,g.app.tkEncoding)</t>
<t tx="ekr.20031218072017.4029">def getCharAtIndex (self,index):
	
	"""Return all the body text, converted to unicode."""
	
	s = self.bodyCtrl.get(index)
	if s is None:
		return u""
	else:
		return g.toUnicode(s,g.app.tkEncoding)</t>
<t tx="ekr.20031218072017.4030">def getInsertLines (self):
	
	"""Return before,after where:
		
	before is all the lines before the line containing the insert point.
	sel is the line containing the insert point.
	after is all the lines after the line containing the insert point.
	
	All lines end in a newline, except possibly the last line."""
	
	t = self.bodyCtrl

	before = t.get("1.0","insert linestart")
	ins    = t.get("insert linestart","insert lineend + 1c")
	after  = t.get("insert lineend + 1c","end")

	before = g.toUnicode(before,g.app.tkEncoding)
	ins    = g.toUnicode(ins,   g.app.tkEncoding)
	after  = g.toUnicode(after ,g.app.tkEncoding)

	return before,ins,after</t>
<t tx="ekr.20031218072017.4031">def getSelectionAreas (self):
	
	"""Return before,sel,after where:
		
	before is the text before the selected text
	(or the text before the insert point if no selection)
	sel is the selected text (or "" if no selection)
	after is the text after the selected text
	(or the text after the insert point if no selection)"""
	
	g.trace()
	t = self.bodyCtrl
	
	sel_index = t.getTextSelection()
	if len(sel_index) == 2:
		i,j = sel_index
		sel = t.get(i,j)
	else:
		i = j = t.index("insert")
		sel = ""

	before = t.get("1.0",i)
	after  = t.get(j,"end")
	
	before = g.toUnicode(before,g.app.tkEncoding)
	sel    = g.toUnicode(sel,   g.app.tkEncoding)
	after  = g.toUnicode(after ,g.app.tkEncoding)
	return before,sel,after</t>
<t tx="ekr.20031218072017.4032">def getTextRange (self,index1,index2):
	
	t = self.bodyCtrl
	return t.get(t.index(index1),t.index(index2))</t>
<t tx="ekr.20031218072017.4033"></t>
<t tx="ekr.20031218072017.4034">def insertAtInsertPoint (self,s):
	
	self.bodyCtrl.insert("insert",s)</t>
<t tx="ekr.20031218072017.4035">def insertAtEnd (self,s):
	
	self.bodyCtrl.insert("end",s)</t>
<t tx="ekr.20031218072017.4036">def insertAtStartOfLine (self,lineNumber,s):
	
	self.bodyCtrl.insert(str(1+lineNumber)+".0",s)</t>
<t tx="ekr.20031218072017.4037">def setSelectionAreas (self,before,sel,after):
	
	"""Replace the body text by before + sel + after and
	set the selection so that the sel text is selected."""

	t = self.bodyCtrl ; gui = g.app.gui
	t.delete("1.0","end")

	if before: t.insert("1.0",before)
	sel_start = t.index("end-1c") # 10/24/03: -1c

	if sel: t.insert("end",sel)
	sel_end = t.index("end")

	if after:
		# A horrible Tk kludge.  Remove a trailing newline so we don't keep extending the text.
		if after[-1] == '\n':
			after = after[:-1]
		t.insert("end",after)

	gui.setTextSelection(t,sel_start,sel_end)
	# g.trace(sel_start,sel_end)
	
	return t.index(sel_start), t.index(sel_end)</t>
<t tx="ekr.20031218072017.4038">def makeIndexVisible (self,index):
	
	self.bodyCtrl.see(index)
	
def setFirstVisibleIndex (self,index):
	
	self.bodyCtrl.yview("moveto",index)
	
def getYScrollPosition (self):
	
	return self.bodyCtrl.yview()
	
def setYScrollPosition (self,scrollPosition):

	if len(scrollPosition) == 2:
		first,last = scrollPosition
	else:
		first = scrollPosition
	self.bodyCtrl.yview("moveto",first)
	
def scrollUp (self):
	
	self.bodyCtrl.yview("scroll",-1,"units")
	
def scrollDown (self):

	self.bodyCtrl.yview("scroll",1,"units")</t>
<t tx="ekr.20031218072017.4039">class leoTkinterLog (leoFrame.leoLog):
	
	"""A class that represents the log pane of a Tkinter window."""

	@others</t>
<t tx="ekr.20031218072017.4040">def __init__ (self,frame,parentFrame):
	
	# g.trace("leoTkinterLog")
	
	# Call the base class constructor.
	leoFrame.leoLog.__init__(self,frame,parentFrame)
	
	self.colorTags = [] # list of color names used as tags in log window.
	
	self.logCtrl.bind("&lt;Button-1&gt;", self.onActivateLog)</t>
<t tx="ekr.20031218072017.4041">def configureBorder(self,border):
	
	self.logCtrl.configure(bd=border)
	
def configureFont(self,font):

	self.logCtrl.configure(font=font)</t>
<t tx="ekr.20031218072017.4042">def createControl (self,parentFrame):
	
	config = g.app.config
	
	wrap = config.getBoolWindowPref('log_pane_wraps')
	wrap = g.choose(wrap,"word","none")

	log = Tk.Text(parentFrame,name="log",
		setgrid=0,wrap=wrap,bd=2,bg="white",relief="flat")
	
	self.logBar = logBar = Tk.Scrollbar(parentFrame,name="logBar")

	log['yscrollcommand'] = logBar.set
	logBar['command'] = log.yview
	
	logBar.pack(side="right", fill="y")
	# rr 8/14/02 added horizontal elevator 
	if wrap == "none": 
		logXBar = Tk.Scrollbar( 
			parentFrame,name='logXBar',orient="horizontal") 
		log['xscrollcommand'] = logXBar.set 
		logXBar['command'] = log.xview 
		logXBar.pack(side="bottom", fill="x")
	log.pack(expand=1, fill="both")

	return log</t>
<t tx="ekr.20031218072017.4043">def getFontConfig (self):

	font = self.logCtrl.cget("font")
	# g.trace(font)
	return font</t>
<t tx="ekr.20031218072017.4044">def hasFocus (self):
	
	return g.app.gui.get_focus(self.frame) == self.logCtrl</t>
<t tx="ekr.20031218072017.4045">def onActivateLog (self,event=None):

	try:
		g.app.setLog(self,"OnActivateLog")
		self.frame.tree.OnDeactivate()
	except:
		g.es_event_exception("activate log")</t>
<t tx="ekr.20031218072017.4046">def setFontFromConfig (self):

	logCtrl = self.logCtrl ; config = g.app.config

	font = config.getFontFromParams(
		"log_text_font_family", "log_text_font_size",
		"log_text_font_slant",  "log_text_font_weight",
		config.defaultLogFontSize)
	
	logCtrl.configure(font=font)

	bg = config.getWindowPref("log_text_background_color")
	if bg:
		try: logCtrl.configure(bg=bg)
		except: pass
	
	fg = config.getWindowPref("log_text_foreground_color")
	if fg:
		try: logCtrl.configure(fg=fg)
		except: pass</t>
<t tx="ekr.20031218072017.4047">@first # -*- coding: utf-8 -*-

"""Leo's Tkinter Gui module."""

import leoGlobals as g
from leoGlobals import true,false

import leoGui
import leoTkinterColorPanels,leoTkinterComparePanel,leoTkinterDialog
import leoTkinterFind,leoTkinterFontPanel,leoTkinterFrame
import leoTkinterPrefs
import tkFont,Tkinter,tkFileDialog

import string,sys

Tk = Tkinter

class tkinterGui(leoGui.leoGui):
	
	"""A class encapulating all calls to tkinter."""
	
	@others</t>
<t tx="ekr.20031218072017.4048"></t>
<t tx="ekr.20031218072017.4049">def createRootWindow(self):

	"""Create a hidden Tk root window."""

	self.root = root = Tkinter.Tk()
	root.title("Leo Main Window")
	root.withdraw()
	
	self.setDefaultIcon()
	self.getDefaultConfigFont(g.app.config)
	self.createGlobalWindows()

	return root</t>
<t tx="ekr.20031218072017.4050">def createGlobalWindows (self):
	
	"""Create the global windows for the application."""

	g.app.findFrame = g.app.gui.createFindPanel()
	g.app.globalWindows.append(g.app.findFrame)</t>
<t tx="ekr.20031218072017.4051">def destroySelf (self):

	if 0: # Works in Python 2.1 and 2.2.  Leaves Python window open.
		self.root.destroy()
		
	else: # Works in Python 2.3.  Closes Python window.
		self.root.quit()</t>
<t tx="ekr.20031218072017.4052">def finishCreate (self):
	
	pass
	
</t>
<t tx="ekr.20031218072017.4053">def killGui(self,exitFlag=true):
	
	"""Destroy a gui and terminate Leo if exitFlag is true."""

	pass # Not ready yet.

</t>
<t tx="ekr.20031218072017.4054">def recreateRootWindow(self):
	"""A do-nothing base class to create the hidden root window of a gui

	after a previous gui has terminated with killGui(false)."""
	pass

</t>
<t tx="ekr.20031218072017.4055">def runMainLoop(self):

	"""Run tkinter's main loop."""

	# g.trace("tkinterGui")
	self.root.mainloop()</t>
<t tx="ekr.20031218072017.4056">def runAboutLeoDialog(self,version,copyright,url,email):
	"""Create and run a Tkinter About Leo dialog."""
	d = leoTkinterDialog.tkinterAboutLeo(version,copyright,url,email)
	return d.run(modal=false)
	
def runAskLeoIDDialog(self):
	"""Create and run a dialog to get g.app.LeoID."""
	d = leoTkinterDialog.tkinterAskLeoID()
	return d.run(modal=true)

def runAskOkDialog(self,title,message=None,text="Ok"):
	"""Create and run a Tkinter an askOK dialog ."""
	d = leoTkinterDialog.tkinterAskOk(title,message,text)
	return d.run(modal=true)

def runAskOkCancelNumberDialog(self,title,message):
	"""Create and run askOkCancelNumber dialog ."""
	d = leoTkinterDialog.tkinterAskOkCancelNumber(title,message)
	return d.run(modal=true)

def runAskYesNoDialog(self,title,message=None):
	"""Create and run an askYesNo dialog."""
	d = leoTkinterDialog.tkinterAskYesNo(title,message)
	return d.run(modal=true)

def runAskYesNoCancelDialog(self,title,
	message=None,yesMessage="Yes",noMessage="No",defaultButton="Yes"):
	"""Create and run an askYesNoCancel dialog ."""
	d = leoTkinterDialog.tkinterAskYesNoCancel(
		title,message,yesMessage,noMessage,defaultButton)
	return d.run(modal=true)</t>
<t tx="ekr.20031218072017.4057">def runOpenFileDialog(self,title,filetypes,defaultextension):

	"""Create and run an Tkinter open file dialog ."""

	return tkFileDialog.askopenfilename(
		title=title,
		filetypes=filetypes)
	# DTHEIN 2004.01.31: remove default extension on open, so that we can
	#                    open files without extensions
	# defaultextension=defaultextension)

def runSaveFileDialog(self,initialfile,title,filetypes,defaultextension):

	"""Create and run an Tkinter save file dialog ."""

	return tkFileDialog.asksaveasfilename(
		initialfile=initialfile,
		title=title,
		filetypes=filetypes)
	# EKR: 2004.01.31: remove default extensions on save too.
	# defaultextension=defaultextension)</t>
<t tx="ekr.20031218072017.4058">def createColorPanel(self,c):
	"""Create a Tkinter color picker panel."""
	return leoTkinterColorPanels.leoTkinterColorPanel(c)
	
def createComparePanel(self,c):
	"""Create a Tkinter color picker panel."""
	return leoTkinterComparePanel.leoTkinterComparePanel(c)

def createFindPanel(self): # The find panel is global, so no c param.
	"""Create a hidden Tkinter find panel."""
	panel = leoTkinterFind.leoTkinterFind()
	panel.top.withdraw()
	return panel

def createFontPanel(self,c):
	"""Create a Tkinter font panel."""
	return leoTkinterFontPanel.leoTkinterFontPanel(c)
	
def createLeoFrame(self,title):
	"""Create a new Leo frame."""
	return leoTkinterFrame.leoTkinterFrame(title)

def createPrefsPanel(self,c):
	"""Create a Tkinter find panel."""
	return leoTkinterPrefs.leoTkinterPrefs(c)</t>
<t tx="ekr.20031218072017.4059"></t>
<t tx="ekr.20031218072017.4060"></t>
<t tx="ekr.20031218072017.4061"># WARNING: Call this routine _after_ creating a dialog.
# (This routine inhibits the grid and pack geometry managers.)

def get_window_info (self,top):
	
	top.update_idletasks() # Required to get proper info.

	# Get the information about top and the screen.
	geom = top.geometry() # geom = "WidthxHeight+XOffset+YOffset"
	dim,x,y = string.split(geom,'+')
	w,h = string.split(dim,'x')
	w,h,x,y = int(w),int(h),int(x),int(y)
	
	return w,h,x,y</t>
<t tx="ekr.20031218072017.4062">def center_dialog(self,top):

	"""Center the dialog on the screen.

	WARNING: Call this routine _after_ creating a dialog.
	(This routine inhibits the grid and pack geometry managers.)"""

	sw = top.winfo_screenwidth()
	sh = top.winfo_screenheight()
	w,h,x,y = self.get_window_info(top)
	
	# Set the new window coordinates, leaving w and h unchanged.
	x = (sw - w)/2
	y = (sh - h)/2
	top.geometry("%dx%d%+d%+d" % (w,h,x,y))
	
	return w,h,x,y</t>
<t tx="ekr.20031218072017.4063"># Returns frames w and f.
# Typically the caller would pack w into other frames, and pack content into f.

def create_labeled_frame (self,parent,
	caption=None,relief="groove",bd=2,padx=0,pady=0):
	
	Tk = Tkinter
	# Create w, the master frame.
	w = Tk.Frame(parent)
	w.grid(sticky="news")
	
	# Configure w as a grid with 5 rows and columns.
	# The middle of this grid will contain f, the expandable content area.
	w.columnconfigure(1,minsize=bd)
	w.columnconfigure(2,minsize=padx)
	w.columnconfigure(3,weight=1)
	w.columnconfigure(4,minsize=padx)
	w.columnconfigure(5,minsize=bd)
	
	w.rowconfigure(1,minsize=bd)
	w.rowconfigure(2,minsize=pady)
	w.rowconfigure(3,weight=1)
	w.rowconfigure(4,minsize=pady)
	w.rowconfigure(5,minsize=bd)

	# Create the border spanning all rows and columns.
	border = Tk.Frame(w,bd=bd,relief=relief) # padx=padx,pady=pady)
	border.grid(row=1,column=1,rowspan=5,columnspan=5,sticky="news")
	
	# Create the content frame, f, in the center of the grid.
	f = Tk.Frame(w,bd=bd)
	f.grid(row=3,column=3,sticky="news")
	
	# Add the caption.
	if caption and len(caption) &gt; 0:
		caption = Tk.Label(parent,text=caption,highlightthickness=0,bd=0)
		caption.tkraise(w)
		caption.grid(in_=w,row=0,column=2,rowspan=2,columnspan=3,padx=4,sticky="w")

	return w,f</t>
<t tx="ekr.20031218072017.4064"></t>
<t tx="ekr.20031218072017.4065">def get_focus(self,frame):
	
	"""Returns the widget that has focus, or body if None."""

	return frame.top.focus_displayof()
	
</t>
<t tx="ekr.20031218072017.4066"></t>
<t tx="ekr.20031218072017.4067"></t>
<t tx="ekr.20031218072017.4068">def attachLeoIcon (self,w):
	
	"""Try to attach a Leo icon to the Leo Window.
	
	Use tk's wm_iconbitmap function if available (tk 8.3.4 or greater).
	Otherwise, try to use the Python Imaging Library and the tkIcon package."""

	if self.bitmap != None:
		# We don't need PIL or tkicon: this is tk 8.3.4 or greater.
		try:
			w.wm_iconbitmap(self.bitmap)
		except:
			self.bitmap = None
	
	if self.bitmap == None:
		try:
			&lt;&lt; try to use the PIL and tkIcon packages to draw the icon &gt;&gt;
		except:
			# import traceback ; traceback.print_exc()
			self.leoIcon = None</t>
<t tx="ekr.20031218072017.4069">@ This code requires Fredrik Lundh's PIL and tkIcon packages:

Download PIL    from http://www.pythonware.com/downloads/index.htm#pil
Download tkIcon from http://www.effbot.org/downloads/#tkIcon

Many thanks to Jonathan M. Gilligan for suggesting this code.
@c

import Image,tkIcon,_tkicon

# Wait until the window has been drawn once before attaching the icon in OnVisiblity.
def visibilityCallback(event,self=self,w=w):
	try: self.leoIcon.attach(w.winfo_id())
	except: pass
w.bind("&lt;Visibility&gt;",visibilityCallback)
if not self.leoIcon:
	# Load a 16 by 16 gif.  Using .gif rather than an .ico allows us to specify transparency.
	icon_file_name = g.os_path_join(g.app.loadDir,'..','Icons','LeoWin.gif')
	icon_file_name = g.os_path_normpath(icon_file_name)
	icon_image = Image.open(icon_file_name)
	if 1: # Doesn't resize.
		self.leoIcon = self.createLeoIcon(icon_image)
	else: # Assumes 64x64
		self.leoIcon = tkIcon.Icon(icon_image)</t>
<t tx="ekr.20031218072017.4070"># This code is adapted from tkIcon.__init__
# Unlike the tkIcon code, this code does _not_ resize the icon file.

def createLeoIcon (self,icon):
	
	try:
		import Image,tkIcon,_tkicon
		
		i = icon ; m = None
		# create transparency mask
		if i.mode == "P":
			try:
				t = i.info["transparency"]
				m = i.point(lambda i, t=t: i==t, "1")
			except KeyError: pass
		elif i.mode == "RGBA":
			# get transparency layer
			m = i.split()[3].point(lambda i: i == 0, "1")
		if not m:
			m = Image.new("1", i.size, 0) # opaque
		# clear unused parts of the original image
		i = i.convert("RGB")
		i.paste((0, 0, 0), (0, 0), m)
		# create icon
		m = m.tostring("raw", ("1", 0, 1))
		c = i.tostring("raw", ("BGRX", 0, -1))
		return _tkicon.new(i.size, c, m)
	except:
		return None</t>
<t tx="ekr.20031218072017.4071"></t>
<t tx="ekr.20031218072017.4072">def setIdleTimeHook (self,idleTimeHookHandler,*args,**keys):
	
	# g.trace(idleTimeHookHandler)
	if self.root:
		self.root.after_idle(idleTimeHookHandler,*args,**keys)
		
</t>
<t tx="ekr.20031218072017.4073">def setIdleTimeHookAfterDelay (self,delay,idleTimeHookHandler,*args,**keys):
	
	if self.root:
		g.app.root.after(g.app.idleTimeDelay,idleTimeHookHandler)</t>
<t tx="ekr.20031218072017.4074"></t>
<t tx="ekr.20031218072017.4075">def firstIndex (self):

	return "1.0"</t>
<t tx="ekr.20031218072017.4076">def lastIndex (self):

	return "end"</t>
<t tx="ekr.20031218072017.4077">def moveIndexBackward(self,index,n):

	return "%s-%dc" % (index,n)
</t>
<t tx="ekr.20031218072017.4078">def moveIndexForward(self,t,index,n):

	newpos = t.index("%s+%dc" % (index,n))
	
	return g.choose(t.compare(newpos,"==","end"),None,newpos)
	
def moveIndexToNextLine(self,t,index):

	newpos = t.index("%s linestart + 1lines" % (index))
	
	return g.choose(t.compare(newpos,"==","end"),None,newpos)</t>
<t tx="ekr.20031218072017.4079">def compareIndices (self,t,n1,rel,n2):
	return t.compare(n1,rel,n2)</t>
<t tx="ekr.20031218072017.4080">def getindex(self,text,index):
	
	"""Convert string index of the form line.col into a tuple of two ints."""
	
	return tuple(map(int,string.split(text.index(index), ".")))</t>
<t tx="ekr.20031218072017.4081"></t>
<t tx="ekr.20031218072017.4082">def getInsertPoint(self,t):

	return t.index("insert")</t>
<t tx="ekr.20031218072017.4083">def setInsertPoint (self,t,pos):

	return t.mark_set("insert",pos)</t>
<t tx="ekr.20031218072017.4084"></t>
<t tx="ekr.20031218072017.4085">def getSelectionRange (self,t):

	return t.tag_ranges("sel")</t>
<t tx="ekr.20031218072017.4086">def getTextSelection (self,t):
	
	"""Return a tuple representing the selected range of t, a Tk.Text widget.
	
	Return a tuple giving the insertion point if no range of text is selected."""

	# To get the current selection
	sel = t.tag_ranges("sel")  ## Do not remove:  remove entire routine instead!!
	if len(sel) == 2:
		return sel
	else:
		# 7/1/03: Return the insertion point if there is no selected text.
		insert = t.index("insert")
		return insert,insert</t>
<t tx="ekr.20031218072017.4087">def setSelectionRange(self,t,n1,n2):

	return g.app.gui.setTextSelection(t,n1,n2)</t>
<t tx="ekr.20031218072017.4088">def setSelectionRangeWithLength(self,t,start,length):
	
	return g.app.gui.setTextSelection(t,start,start + "+" + `length` + "c")
</t>
<t tx="ekr.20031218072017.4089">def setTextSelection (self,t,start,end):
	
	"""tk gui: set the selection range in Tk.Text widget t."""

	if not start or not end:
		return

	if t.compare(start, "&gt;", end):
		start,end = end,start
		
	t.tag_remove("sel","1.0",start)
	t.tag_add("sel",start,end)
	t.tag_remove("sel",end,"end")
	t.mark_set("insert",end)</t>
<t tx="ekr.20031218072017.4090"></t>
<t tx="ekr.20031218072017.4091">def getAllText (self,t):
	
	"""Return all the text of Tk.Text t converted to unicode."""
	
	s = t.get("1.0","end")
	if s is None:
		return u""
	else:
		return g.toUnicode(s,g.app.tkEncoding)</t>
<t tx="ekr.20031218072017.4092">def getCharAfterIndex (self,t,index):
	
	if t.compare(index + "+1c","&gt;=","end"):
		return None
	else:
		ch = t.get(index + "+1c")
		return g.toUnicode(ch,g.app.tkEncoding)</t>
<t tx="ekr.20031218072017.4093">def getCharAtIndex (self,t,index):
	ch = t.get(index)
	return g.toUnicode(ch,g.app.tkEncoding)</t>
<t tx="ekr.20031218072017.4094">def getCharBeforeIndex (self,t,index):
	
	index = t.index(index)
	if index == "1.0":
		return None
	else:
		ch = t.get(index + "-1c")
		return g.toUnicode(ch,g.app.tkEncoding)</t>
<t tx="ekr.20031218072017.4095">def getLineContainingIndex (self,t,index):

	line = t.get(index + " linestart", index + " lineend")
	return g.toUnicode(line,g.app.tkEncoding)</t>
<t tx="ekr.20031218072017.4096">def replaceSelectionRangeWithText (self,t,start,end,text):

	t.delete(start,end)
	t.insert(start,text)</t>
<t tx="ekr.20031218072017.4097"></t>
<t tx="ekr.20031218072017.4098">def makeIndexVisible(self,t,index):

	return t.see(index)</t>
<t tx="ekr.20031218072017.4099">"""Tkinter keystroke handling for Leo."""

import leoGlobals as g
from leoGlobals import true,false</t>
<t tx="ekr.20031218072017.4100">"""Tkinter menu handling for Leo."""

import leoGlobals as g
from leoGlobals import true,false

import leoMenu
import Tkinter

class leoTkinterMenu (leoMenu.leoMenu):
	"""A class that represents a Leo window."""
	@others</t>
<t tx="ekr.20031218072017.4101"></t>
<t tx="ekr.20031218072017.4102">def __init__ (self,frame):
	
	# Init the base class.
	leoMenu.leoMenu.__init__(self,frame)
	
	self.top = frame.top
	self.c = frame.c
	self.frame = frame</t>
<t tx="ekr.20031218072017.4103"># See the Tk docs for what these routines are to do</t>
<t tx="ekr.20031218072017.4104"></t>
<t tx="ekr.20031218072017.4105">def add_cascade (self,parent,label,menu,underline):
	
	"""Wrapper for the Tkinter add_cascade menu method."""
	
	return parent.add_cascade(label=label,menu=menu,underline=underline)

</t>
<t tx="ekr.20031218072017.4106">def add_command (self,menu,**keys):
	
	"""Wrapper for the Tkinter add_command menu method."""

	return menu.add_command(**keys)
	
</t>
<t tx="ekr.20031218072017.4107">def add_separator(self,menu):
	
	"""Wrapper for the Tkinter add_separator menu method."""

	menu.add_separator()
	
</t>
<t tx="ekr.20031218072017.4108">def bind (self,bind_shortcut,callback):
	
	"""Wrapper for the Tkinter bind menu method."""

	return self.top.bind(bind_shortcut,callback)
	
</t>
<t tx="ekr.20031218072017.4109">def delete (self,menu,realItemName):
	
	"""Wrapper for the Tkinter delete menu method."""

	return menu.delete(realItemName)</t>
<t tx="ekr.20031218072017.4110">def delete_range (self,menu,n1,n2):
	
	"""Wrapper for the Tkinter delete menu method."""

	return menu.delete(n1,n2)

</t>
<t tx="ekr.20031218072017.4111">def destroy (self,menu):
	
	"""Wrapper for the Tkinter destroy menu method."""

	return menu.destroy()

</t>
<t tx="ekr.20031218072017.4112">def insert_cascade (self,parent,index,label,menu,underline):
	
	"""Wrapper for the Tkinter insert_cascade menu method."""
	
	return parent.insert_cascade(
		index=index,label=label,
		menu=menu,underline=underline)


</t>
<t tx="ekr.20031218072017.4113">def new_menu(self,parent,tearoff=false):
	
	"""Wrapper for the Tkinter new_menu menu method."""

	return Tkinter.Menu(parent,tearoff=tearoff)</t>
<t tx="ekr.20031218072017.4114"></t>
<t tx="ekr.20031218072017.4115">def createMenuBar(self,frame):

	top = frame.top
	topMenu = Tkinter.Menu(top,postcommand=self.updateAllMenus)
	
	# Do gui-independent stuff.
	self.setMenu("top",topMenu)
	self.createMenusFromTables()
	
	top.config(menu=topMenu) # Display the menu.</t>
<t tx="ekr.20031218072017.4116">@ Entries in the table passed to createOpenWithMenuFromTable are
tuples of the form (commandName,shortcut,data).

- command is one of "os.system", "os.startfile", "os.spawnl", "os.spawnv" or "exec".
- shortcut is a string describing a shortcut, just as for createMenuItemsFromTable.
- data is a tuple of the form (command,arg,ext).

Leo executes command(arg+path) where path is the full path to the temp file.
If ext is not None, the temp file has the given extension.
Otherwise, Leo computes an extension based on the @language directive in effect.
@c

def createOpenWithMenuFromTable (self,table):

	g.app.openWithTable = table # Override any previous table.
	# Delete the previous entry.
	parent = self.getMenu("File")
	label = self.getRealMenuName("Open &amp;With...")
	amp_index = label.find("&amp;")
	label = label.replace("&amp;","")
	try:
		index = parent.index(label)
		parent.delete(index)
	except:
		try:
			index = parent.index("Open With...")
			parent.delete(index)
		except: return
	# Create the "Open With..." menu.
	openWithMenu = Tkinter.Menu(parent,tearoff=0)
	self.setMenu("Open With...",openWithMenu)
	parent.insert_cascade(index,label=label,menu=openWithMenu,underline=amp_index)
	# Populate the "Open With..." menu.
	shortcut_table = []
	for triple in table:
		if len(triple) == 3: # 6/22/03
			shortcut_table.append(triple)
		else:
			g.es("createOpenWithMenuFromTable: invalid data",color="red")
			return
			
	# for i in shortcut_table: print i
	self.createMenuItemsFromTable("Open &amp;With...",shortcut_table,openWith=1)
</t>
<t tx="ekr.20031218072017.4117">def defineMenuCallback(self,command,name):
	
	# The first parameter must be event, and it must default to None.
	def callback(event=None,self=self,command=command,label=name):
		return self.c.doCommand(command,label,event)

	return callback</t>
<t tx="ekr.20031218072017.4118">def defineOpenWithMenuCallback(self,command):
	
	# The first parameter must be event, and it must default to None.
	def callback(event=None,self=self,data=command):
		return self.c.openWith(data=data)

	return callback</t>
<t tx="ekr.20031218072017.4119">def disableMenu (self,menu,name):
	
	try:
		menu.entryconfig(name,state="disabled")
	except: 
		try:
			realName = self.getRealMenuName(name)
			realName = realName.replace("&amp;","")
			menu.entryconfig(realName,state="disabled")
		except:
			print "disableMenu menu,name:",menu,name
			g.es_exception()
			pass
</t>
<t tx="ekr.20031218072017.4120"># Fail gracefully if the item name does not exist.

def enableMenu (self,menu,name,val):
	
	state = g.choose(val,"normal","disabled")
	try:
		menu.entryconfig(name,state=state)
	except:
		try:
			realName = self.getRealMenuName(name)
			realName = realName.replace("&amp;","")
			menu.entryconfig(realName,state=state)
		except:
			print "enableMenu menu,name,val:",menu,name,val
			g.es_exception()
			pass</t>
<t tx="ekr.20031218072017.4121">def setMenuLabel (self,menu,name,label,underline=-1):

	try:
		if type(name) == type(0):
			# "name" is actually an index into the menu.
			menu.entryconfig(name,label=label,underline=underline)
		else:
			# Bug fix: 2/16/03: use translated name.
			realName = self.getRealMenuName(name)
			realName = realName.replace("&amp;","")
			# Bug fix: 3/25/03" use tranlasted label.
			label = self.getRealMenuName(label)
			label = label.replace("&amp;","")
			menu.entryconfig(realName,label=label,underline=underline)
	except:
		print "setMenuLabel menu,name,label:",menu,name,label
		g.es_exception()
		pass</t>
<t tx="ekr.20031218072017.4122">@language python

import leoGlobals as g
from leoGlobals import true,false

import leoPrefs
import string,Tkinter
Tk = Tkinter

class leoTkinterPrefs (leoPrefs.leoPrefs):

	"""A class that creates Leo's preferenes panel."""

	@others</t>
<t tx="ekr.20031218072017.4123"></t>
<t tx="ekr.20031218072017.4124">def __init__ (self,c):
	
	"""Ctor for the leoTkinterPrefs class."""
	
	# Init the base class
	leoPrefs.leoPrefs.__init__(self,c)
	
	self.createFrame()
	self.setWidgets()</t>
<t tx="ekr.20031218072017.4125">def createFrame (self):
	
	"""Create the tkinter Prefs panel."""

	c = self.c ; gui = g.app.gui
	self.top = top = Tk.Toplevel()
	c.frame.prefsPanel = self
	head,tail = g.os_path_split(c.frame.title)
	self.top.title("Prefs for " + tail)
	
	# Create the outer frame
	outer = Tk.Frame(top,bd=2,relief="groove")
	outer.pack(fill="both",expand=1,padx=2,pady=2)
	&lt;&lt; Create the Tk.IntVars &gt;&gt;
	&lt;&lt; Create the Global Options frame &gt;&gt;
	&lt;&lt; Create the Tangle Options frame &gt;&gt;
	&lt;&lt; Create the Target Language frame &gt;&gt;
	&lt;&lt; Create the Ok, Cancel &amp; Revert buttons &gt;&gt;
	gui.center_dialog(top) # Do this _after_ building the dialog!
	top.resizable(0,0) # neither height or width is resizable.
	self.top.protocol("WM_DELETE_WINDOW", self.onCancel)</t>
<t tx="ekr.20031218072017.4126">self.replace_tabs_var = Tk.IntVar()
self.tangle_batch_var = Tk.IntVar()
self.untangle_batch_var = Tk.IntVar()

self.use_header_var = Tk.IntVar()
self.output_doc_var = Tk.IntVar()

self.lang_var = Tk.StringVar()</t>
<t tx="ekr.20031218072017.4127"># Frame and title
w,glob = gui.create_labeled_frame (outer,caption="Global Options")
w.pack(padx=2,pady=2,expand=1,fill="x")

# Page width &amp; page width
f = Tk.Frame(glob)
f.pack(anchor="w", pady="1m", expand=1, fill="x")

lab = Tk.Label(f, anchor="w", padx="1m", text="Page width:")
self.pageWidthText = txt = Tk.Text(f, height=1, width=4)
lab.pack(side="left")
txt.pack(side="left")
txt.bind("&lt;Key&gt;", self.idle_set_ivars)

lab2 = Tk.Label(f, padx="1m", text="Tab width:")
self.tabWidthText = txt2 = Tk.Text(f, height=1, width=4)
lab2.pack(side="left")
txt2.pack(side="left")
txt2.bind("&lt;Key&gt;", self.idle_set_ivars)

# Batch Checkbuttons...
self.replaceTabsBox = replaceBox = Tk.Checkbutton(glob,anchor="w",
	text="Replace tabs with spaces",
	variable=self.replace_tabs_var,command=self.idle_set_ivars)
self.doneBox = doneBox = Tk.Checkbutton(glob,anchor="w",
	text="Run tangle_done.py after Tangle",
	variable=self.tangle_batch_var,command=self.idle_set_ivars)
self.unBox = unBox = Tk.Checkbutton(glob,anchor="w",
	text="Run untangle_done.py after Untangle",
	variable=self.untangle_batch_var,command=self.idle_set_ivars)

for box in (replaceBox, doneBox, unBox):
	box.pack(fill="x")</t>
<t tx="ekr.20031218072017.4128"># Frame and title
w,tangle = gui.create_labeled_frame (outer,caption="Default Options")
w.pack(padx=2,pady=2,expand=1,fill="x")

# Label and text
lab3 = Tk.Label(tangle, anchor="w", text="Default tangle directory")
self.tangleDirectoryText = txt3 = Tk.Text(tangle, height=1, width=30)
txt3.bind("&lt;Key&gt;", self.idle_set_ivars) # Capture the change immediately
lab3.pack(            padx="1m", pady="1m", fill="x")
txt3.pack(anchor="w", padx="1m", pady="1m", fill="x")

# Checkbuttons
self.headerBox = header = Tk.Checkbutton(tangle,anchor="w",
	text="Tangle outputs header line",
	variable=self.use_header_var,command=self.idle_set_ivars)
self.docBox = doc = Tk.Checkbutton(tangle,anchor="w",
	text="Tangle outputs document chunks",
	variable=self.output_doc_var,command=self.idle_set_ivars)
header.pack(fill="x")
doc.pack(fill="x")</t>
<t tx="ekr.20031218072017.4129">buttons = Tk.Frame(outer)
buttons.pack(padx=2,pady=2,expand=1,fill="x")

okButton = Tk.Button(buttons,text="OK",width=7,command=self.onOK)
cancelButton = Tk.Button(buttons,text="Cancel",width=7,command=self.onCancel)
revertButton = Tk.Button(buttons,text="Revert",width=7,command=self.onRevert)

okButton.pack(side="left",pady=7,expand=1)
cancelButton.pack(side="left",pady=7,expand=0)
revertButton.pack(side="left",pady=7,expand=1)</t>
<t tx="ekr.20031218072017.4130">def setWidgets (self):
	
	"""Set the values of checkbox &amp; other widgets from the commander's ivars."""
	
	c = self.c

	# Global options
	self.replace_tabs_var.set(g.choose(c.tab_width&lt;0,1,0))
	self.tangle_batch_var.set(c.tangle_batch_flag)
	self.untangle_batch_var.set(c.untangle_batch_flag)
	self.pageWidthText.delete("1.0","end")
	self.pageWidthText.insert("end",`c.page_width`)
	self.tabWidthText.delete("1.0","end")
	self.tabWidthText.insert("end",`abs(c.tab_width)`)

	# Default Tangle Options
	self.tangleDirectoryText.delete("1.0","end")
	self.tangleDirectoryText.insert("end",c.tangle_directory)
	self.output_doc_var.set(c.output_doc_flag)
	self.use_header_var.set(c.use_header_flag)

	# Default Target Language
	if c.target_language == None:
		c.target_language = "python"
	self.lang_var.set(c.target_language)</t>
<t tx="ekr.20031218072017.4131">def bringToFront (self):
	
	"""Bring the tkinter Prefs Panel to the front."""

	self.top.deiconify()
	self.top.lift()</t>
<t tx="ekr.20031218072017.4132"></t>
<t tx="ekr.20031218072017.4133">def hide (self):
	
	"""Hide the tkinter Prefs panel."""
	
	if 1: # Hide the window, preserving its position.
		self.top.withdraw()
	else: # works.
		self.c.frame.prefsPanel = None
		self.top.destroy()</t>
<t tx="ekr.20031218072017.4134">def onOK (self):
	"""Handle a click in the OK button in the tkinter Prefs panel."""
	g.app.config.setConfigIvars(self.c)
	g.app.config.update()
	self.hide()

def onCancel (self):
	"""Handle a click in the Cancel button in the tkinter Prefs panel."""
	c = self.c
	self.restoreOptions()
	self.init(c)
	self.set_ivars(c)
	self.hide()

def onRevert (self):
	"""Handle a click in the Revert button in the tkinter Prefs panel."""
	c = self.c
	self.restoreOptions()
	self.init(c)
	self.set_ivars(c)</t>
<t tx="ekr.20031218072017.4135"># These event handlers get executed when the user types in the prefs panel.

def set_ivars (self,c):
	
	"""Idle-time code to any change in the tkinter Prefs panel."""

	&lt;&lt; update ivars &gt;&gt;
	for var in self.ivars:
		val = getattr(self,var)
		setattr(c,var,val)
		
	c.frame.setTabWidth(c.tab_width)
	# self.print_ivars()

def idle_set_ivars (self, event=None):
	
	"""Handle any change in the tkinter Prefs panel."""
	
	c = g.top() ; v = c.currentVnode()
	self.top.after_idle(self.set_ivars,c)
	c.frame.body.recolor(v)
	# print self.print_ivars()</t>
<t tx="ekr.20031218072017.4136"># Global options
w = self.pageWidthText.get("1.0","end")
w = string.strip(w)
try:
	self.page_width = abs(int(w))
except:
	self.page_width = self.default_page_width
	
w = self.tabWidthText.get("1.0","end")
w = string.strip(w)
try:
	self.tab_width = abs(int(w))
	if self.replace_tabs_var.get(): # 1/30/03
		self.tab_width = - abs(self.tab_width)
	# print self.tab_width
except:
	self.tab_width = self.default_tab_width

self.tangle_batch_flag = self.tangle_batch_var.get()
self.untangle_batch_flag = self.untangle_batch_var.get()

# Default Tangle options
dir = self.tangleDirectoryText.get("1.0","end")
self.tangle_directory = string.strip(dir)

self.use_header_flag = self.use_header_var.get()
self.output_doc_flag = self.output_doc_var.get()

# Default Target Language
self.target_language = self.lang_var.get()
</t>
<t tx="ekr.20031218072017.4137">def set_lang (self):
	
	"""Handle a change to the Default Target Language radio box."""
	
	c = self.c
	v = c.currentVnode()
	language = self.lang_var.get()
	c.target_language = self.target_language = language
	c.frame.body.recolor(v)
	# g.trace(language)</t>
<t tx="ekr.20031218072017.4138">@language python

&lt;&lt; about the tree classes &gt;&gt;

import leoGlobals as g
from leoGlobals import true,false

import leoFrame
import Tkinter,tkFont
import os,string,types

&lt;&lt; about drawing &gt;&gt;
&lt;&lt; drawing constants &gt;&gt;

class leoTkinterTree (leoFrame.leoTree):
	
	callbacksInjected = false

	"""Leo tkinter tree class."""
	
	@others</t>
<t tx="ekr.20031218072017.4139">@ This class implements a tree control similar to Windows explorer.  The draw code is based on code found in Python's IDLE program.  Thank you Guido van Rossum!

The tree class knows about vnodes.  The vnode class could be split into a base class (say a treeItem class) containing the ivars known to the tree class, and a derived class containing everything else, including, e.g., the bodyString ivar.  I haven't chosen to split the vnode class this way because nothing would be gained in Leo.
</t>
<t tx="ekr.20031218072017.4140">box_padding = 5 # extra padding between box and icon
box_width = 9 + box_padding
icon_width = 20
text_indent = 4 # extra padding between icon and tex
child_indent = 28 # was 20
hline_y = 7 # Vertical offset of horizontal line
root_left = 7 + box_width
root_top = 2
hiding = true # true if we don't reallocate items
line_height = 17 + 2 # To be replaced by Font height</t>
<t tx="ekr.20031218072017.4141"></t>
<t tx="ekr.20031218072017.4142">def deleteBindings (self):
	
	"""Delete all tree bindings and all references to tree widgets."""
	
	# print "deleteBindings: %d, %d" % (len(self.tagBindings),len(self.bindings))

	count = 0
	# Unbind all the tag bindings.
	for id,id2,binding in self.tagBindings:
		self.canvas.tag_unbind(id,binding,id2)
		count += 1
	self.tagBindings = []
	# Unbind all the text bindings.
	for t,id,binding in self.bindings:
		t.unbind(binding,id)
		count += 1
	self.bindings = []
	# print("bindings freed:"+`count`)</t>
<t tx="ekr.20031218072017.4143"># canvas.delete("all") does _not_ delete the Tkinter objects associated with those objects!

def deleteWidgets (self):
	
	"""Delete all widgets in the canvas"""
	
	self.icon_id_dict = {} # Delete all references to icons.
	self.edit_text_dict = {} # Delete all references to Tk.Edit widgets.
		
	# Fixes a _huge_ memory leak.
	for w in self.widgets:
		w.destroy() 
	self.widgets = []</t>
<t tx="ekr.20031218072017.4144"></t>
<t tx="ekr.20031218072017.4145">@ About drawing and updating strategy.

This version of Leo draws the outline "by hand" using the Tk canvas widget.  Surprisingly, this is not only easy, but simplifies the vnode and Commands classes.

1.  Updating and redraw.  The tree.redraw() method is called automatically from the "outermost" call to tree.endUpdate.  Moreover, calling .tree.redraw() inside a tree.beginUpdate/tree.endUpdate pair does nothing.  c.redraw(), c.beginUpdate() and c.endUpdate() just call the corresponding tree methods.  Finally, beginUpdate()/endUpdate(false) can be used to suppress redrawing entirely.

Therefore, the Commands class never needs to worry about extra calls to tree.redraw() provided all code that draws to the tree is enclosed in a tree.beginUpdate/tree.endUpdate pair.  The tree.idle_body_key event handler manages redrawing "by hand" by maintaining a redraw_flag and then calling endUpdate(redraw_flag).

2.  The tree.redraw() method deletes all old canvas items and recomputes all data, including v.iconVal.  This means that v.doDelete need not actually delete vnodes for them to disappear from the screen.  Indeed, vnode are never actually deleted, only unlinked.  It would be valid for "dependent" vnodes to be deleted, but there really is no need to do so.
</t>
<t tx="ekr.20031218072017.4146"># Returns the last visible node of the screen.

def lastVisible (self):
	
	p = last = self.c.rootPosition()
	while p:
		last = p
		if p.hasFirstChild():
			if p.isExpanded():
				p.moveToFirstChild()
			else:
				p.moveToNodeAfterTree()
		else:
			p.moveToThreadNext()
	return last</t>
<t tx="ekr.20031218072017.4147">def getIconImage (self, name):

	# Return the image from the cache if possible.
	if self.iconimages.has_key(name):
		return self.iconimages[name]
		
	try:
		fullname = g.os_path_join(g.app.loadDir,"..","Icons",name)
		fullname = g.os_path_normpath(fullname)
		image = Tkinter.PhotoImage(master=self.canvas, file=fullname)
		self.iconimages[name] = image
		return image
	except:
		g.es("Exception loading: " + fullname)
		g.es_exception()
		return None</t>
<t tx="ekr.20031218072017.4148">def numberOfVisibleNodes(self):
	
	n = 0 ; p = self.c.rootPosition()
	while p:
		n += 1
		p.moveToVisNext()
	return n</t>
<t tx="ekr.20031218072017.4149">@ We can't just return icony because the tree hasn't been redrawn yet.  For the same reason we can't rely on any TK canvas methods here.
@c

def yoffset(self, v1):

	# if not v1.isVisible(): print "yoffset not visible:", `v1`
	root = self.c.rootPosition()
	h, flag = self.yoffsetTree(root,v1)
	# flag can be false during initialization.
	# if not flag: print "yoffset fails:", h, `v1`
	return h

# Returns the visible height of the tree and all sibling trees, stopping at v1

def yoffsetTree(self,p,porv1):

	h = 0
	for p in p.siblings_iter():
		# print "yoffsetTree:", p
		if p == porv1:
			return h, true
		h += self.line_height
		if p.isExpanded() and p.hasChildrent():
			child = p.firstChild()
			h2, flag = self.yoffsetTree(child,porv1)
			h += h2
			if flag: return h, true
	
	return h, false</t>
<t tx="ekr.20031218072017.4150"></t>
<t tx="ekr.20031218072017.4151">def getFont (self):

	return self.font
		
# Called by leoFontPanel.
def setFont (self, font=None, fontName=None):
	
	if fontName:
		self.fontName = fontName
		self.font = tkFont.Font(font=fontName)
	else:
		self.fontName = None
		self.font = font
		
	self.setLineHeight(self.font)
	
# Called by ctor and when config params are reloaded.
def setFontFromConfig (self):

	font = g.app.config.getFontFromParams(
		"headline_text_font_family", "headline_text_font_size",
		"headline_text_font_slant",  "headline_text_font_weight",
		g.app.config.defaultTreeFontSize)

	self.setFont(font)</t>
<t tx="ekr.20031218072017.4152">def headWidth(self,v):

	"""Returns the proper width of the entry widget for the headline."""

	return max(10,5 + len(v.headString()))</t>
<t tx="ekr.20031218072017.4153">def setLineHeight (self,font):
	
	try:
		metrics = font.metrics()
		linespace = metrics ["linespace"]
		self.line_height = linespace + 5 # Same as before for the default font on Windows.
		# print metrics
	except:
		self.line_height = line_height # was 17 + 2
		g.es("exception setting outline line height")
		g.es_exception()</t>
<t tx="ekr.20031218072017.4154">def setTreeColorsFromConfig (self):

	bg = g.app.config.getWindowPref("outline_pane_background_color")
	if bg:
		try: self.canvas.configure(bg=bg)
		except: pass
</t>
<t tx="ekr.20031218072017.4155"></t>
<t tx="ekr.20031218072017.4156">def updateNode (self,v,x,y):
	
	"""Draw a node that may have become visible as a result of a scrolling operation"""

	if self.inExpandedVisibleArea(y):
		# This check is a major optimization.
		if not v.edit_text():
			return self.force_draw_node(v,x,y)
		else:
			return self.line_height

	return self.line_height</t>
<t tx="ekr.20031218072017.4157"></t>
<t tx="ekr.20031218072017.4158"># Convenience methods so the caller doesn't have to know the present edit node.

def dimEditLabel (self):

	p = self.c.currentPosition()
	self.setDisabledLabelState(p)

def undimEditLabel (self):

	p = self.c.currentPosition()
	self.setSelectedLabelState(p)</t>
<t tx="ekr.20031218072017.4159">def editLabel (self, p):
	
	"""Start editing v.edit_text."""

	# End any previous editing
	if self.editPosition() and p != self.editPosition():
		self.endEditLabel()
		self.frame.revertHeadline = None
		
	self.setEditPosition(p)

	# Start editing
	if p and p.v.edit_text():
		self.setNormalLabelState(p)
		self.frame.revertHeadline = p.headString()</t>
<t tx="ekr.20031218072017.4160">def endEditLabel (self):
	
	"""End editing for self.editText."""

	c = self.c ; gui = g.app.gui
	
	p = self.editPosition()

	if p and p.v.edit_text():
		self.setUnselectedLabelState(p)
		self.setEditPosition(None)
	if p: # Also redraw ancestor headlines.
		self.force_redraw() # force a redraw of joined and ancestor headlines.
	gui.set_focus(c,c.frame.bodyCtrl) # 10/14/02</t>
<t tx="ekr.20031218072017.4161">def expandAllAncestors (self,p):
	
	redraw_flag = false
	for p in p.parents_iter():
		if not p.isExpanded():
			p.expand()
			redraw_flag = true

	return redraw_flag</t>
<t tx="ekr.20031218072017.4162">def setNormalLabelState (self,p): # selected, editing

	if p.v and p.v.edit_text():
		&lt;&lt; set editing headline colors &gt;&gt;
		p.v.edit_text().tag_remove("sel","1.0","end")
		p.v.edit_text().tag_add("sel","1.0","end")
		g.app.gui.set_focus(self.c,p.v.edit_text())

def setDisabledLabelState (self,p): # selected, disabled

	if p.v and p.v.edit_text():
		&lt;&lt; set selected, disabled headline colors &gt;&gt;

def setSelectedLabelState (self,p): # selected, not editing
	self.setDisabledLabelState(p)

def setUnselectedLabelState (self,p): # not selected.

	if p and p.v.edit_text():
		&lt;&lt; set unselected headline colors &gt;&gt;</t>
<t tx="ekr.20031218072017.4163">config = g.app.config
fg   = config.getWindowPref("headline_text_editing_foreground_color")
bg   = config.getWindowPref("headline_text_editing_background_color")
selfg = config.getWindowPref("headline_text_editing_selection_foreground_color")
selbg = config.getWindowPref("headline_text_editing_selection_background_color")

if not fg or not bg:
	fg,bg = "black","white"
	
try:
	if selfg and selbg:
		p.v.edit_text().configure(
			selectforeground=selfg,selectbackground=selbg,
			state="normal",highlightthickness=1,fg=fg,bg=bg)
	else:
		p.v.edit_text().configure(
			state="normal",highlightthickness=1,fg=fg,bg=bg)
except:
	g.es_exception()</t>
<t tx="ekr.20031218072017.4164">config = g.app.config
fg = config.getWindowPref("headline_text_selected_foreground_color")
bg = config.getWindowPref("headline_text_selected_background_color")

if not fg or not bg:
	fg,bg = "black","gray80"

try:
	p.v.edit_text().configure(
		state="disabled",highlightthickness=0,fg=fg,bg=bg)
except:
	g.es_exception()</t>
<t tx="ekr.20031218072017.4165">config = g.app.config
fg = config.getWindowPref("headline_text_unselected_foreground_color")
bg = config.getWindowPref("headline_text_unselected_background_color")

if not fg or not bg:
	fg,bg = "black","white"

try:
	p.v.edit_text().configure(
		state="disabled",highlightthickness=0,fg=fg,bg=bg)
except:
	g.es_exception()</t>
<t tx="ekr.20031218072017.4248"># Warning: changes by EKR have not been properly tested!
import leoGlobals as g
from leoGlobals import true,false

import re

&lt;&lt; about this script &gt;&gt;

@others

c = g.top() ; v = c.rootVnode()

s = []
while v:
	s.append(graphvizString(v))
	v = v.next()
s = ''.join(s)

# Look for an @encoding directive.
dict = g.scanDirectives(c,c.rootVnode())
encoding = dict.get("encoding",None)
if encoding is None:
	encoding = g.app.config.default_derived_file_encoding

if 0: # testing
	print s
else:
	gvFile = open('/tmp/leo.dot','w')
	gvFile.write('digraph foo {\n')
	gvFile.write(g.toEncodedString(s,encoding))
	gvFile.write('}\n')
	gvFile.close()</t>
<t tx="ekr.20031218072017.4249">@

http://sourceforge.net/forum/message.php?msg_id=2337165

Here's a simple script to create a graphviz .DOT file from a Leo outline. The
output is in /tmp/leo.dot. You then need to run "dot" (part of the graphviz
package) on the .dot file to produce a graph in whatever format you want (JPEG,
PNG, Postscript, etc).

It's really simple and it doesn't seem to work on leodocs.leo because of some
unicode issues. But anyway, here it is, maybe someone can improve on it.

This code is hereby released as public domain - do whatever you want with it,
but hopefully, improve it and post it back here :-)</t>
<t tx="ekr.20031218072017.4251"># About the only time you should run this script is when:
# - changing the format of timestamps in nodeIndices.setTimestamp or
# - when making a retroactive change to leoID.txt.

import leoGlobals as g
from leoGlobals import true,false

if 0: # This is usually a very bad idea.

	c = g.top() ; v = c.rootVnode()
	while v:
		v.t.fileIndex = None
		v = v.threadNext()
		
	g.es("all timestamps cleared")</t>
<t tx="ekr.20031218192539">Added at = self</t>
<t tx="ekr.20031218192539.1"></t>
<t tx="ekr.20031219071829"></t>
<t tx="ekr.20031219073155"></t>
<t tx="ekr.20031219073155.1"></t>
<t tx="ekr.20031219073155.2"></t>
<t tx="ekr.20031219074948">Useful for unit testing.</t>
<t tx="ekr.20031219074948.1"># From the Python cookbook, recipe 5.23

class nullObject:
	
	"""An object that does nothing, and does it very well."""
	
	def __init__   (self,*args,**keys): pass
	def __call__   (self,*args,**keys): return self
	
	def __repr__   (self): return "nullObject"
	
	def __nonzero__ (self): return 0
	
	def __delattr__(self,attr):     return self
	def __getattr__(self,attr):     return self
	def __setattr__(self,attr,val): return self</t>
<t tx="ekr.20031219075221">if 0: # This causes no end of problems.

	def __getattr__(self,attr):

		g.trace("nullGui",attr)
		return nullObject()</t>
<t tx="ekr.20031219082957">The nullGui class is not ready for prime time yet.</t>
<t tx="ekr.20031219100030"></t>
<t tx="ekr.20040104162835"></t>
<t tx="ekr.20040104162835.1">@nocolor
</t>
<t tx="ekr.20040104162835.2">From:  Dan Winkler &lt;heydan@post.harvard.edu&gt;  
Date:  2003/12/25 Thu AM 01:27:31 EST 
To:  "Edward K. Ream" &lt;edreamleo@charter.net&gt; 
Subject:  Marked nodes 

I'm seeing a bug where when I open an outline some of the nodes are 
marked even though they weren't marked the last time I saved the 
outline.  In fact, I'm not using marking at all in this project and I 
have cleared all marks explicitly a few times before saving, but the 
marks keep coming back.  It's a minor problem, doesn't harm anything, 
but kind of unsettling.
</t>
<t tx="ekr.20040104162835.3">The problem was that after saving an outline and the files derived from 
it and quitting and opening the outline, Leo would report that some 
nodes in the derived file had changed but they hadn't.  And the changes 
Leo thought it saw caused it to mark some nodes which were not 
previously marked and to delete some tabs.  So I'd go unmark the nodes 
and reinsert the tabs and save again, only to have the whole process 
repeat when I'd quit Leo and open the outline again.

Marking nodes and deleting tabs are not significant changes for a 
scheme program but now I'm also seeing my program doing strange things 
I can't explain and I wonder if maybe Leo is also making other changes, 
more than just innocuous marks and tab changes.

Yes, I converted from 3.x to 4.x and as I recall there were some 
messages about fixing problems Leo found in the outline.

I'll attach the derived file and the outline so you can try it.  See if 
you can save it with no marks (do unmark all) and then quit and open it 
again and see if it doesn't tell you some nodes have changed and mark 
some nodes.</t>
<t tx="ekr.20040104162835.4">I figured out the bug I was chasing in my scheme program and I can't 
blame it on Leo, although I did see Leo introducing some garbage 
characters at the insertion point when saving a derived file.  So the 
problems I've seen with derived files are:

- tabs get removed sometimes when file is read back in
- nodes get marked sometimes when file is read back in
- garbage character gets inserted at the insertion point when file is 
written out
</t>
<t tx="ekr.20040104162835.5">From:  Dan Winkler &lt;heydan@post.harvard.edu&gt;  
Date:  2003/12/25 Thu AM 01:34:59 EST 
To:  "Edward K. Ream" &lt;edreamleo@charter.net&gt; 
Subject:  Another clue

attachment: CashRegister.ss.txt

In addition to the marks being set, I also see some tabs disappearing 
so that I have to insert tabs again to make the code look right.

I believe the problem is that Leo is reading in the @file file and 
changing nodes under the @file node even though the file has not 
changed. The log window does have a few "changed:" messages right after 
the reading @file message.

I'm attaching the @file file (a derived file, I guess you call it?) so 
you can see if you can recreate this problem yourself.  You might not 
see the tab problem right away but you can't miss the marking problem 
if it happens.  Try saving the outline with no nodes marked and then 
quit and open it again and see if some nodes get marked as part of 
reading in the @file node.

I must warn you this file contains a lot of scary-looking scheme code 
but I hope you won't have to look at it too closely.  It's some 
software I'm trying to write to run the cash register in my neighbor's 
dry cleaning business for him.</t>
<t tx="ekr.20040104162835.8"></t>
<t tx="ekr.20040104162835.9">Here's Apple's documentation on making Unix software run on OS X:

http://developer.apple.com/documentation/Porting/Conceptual/ 
PortingUnix/index.html
</t>
<t tx="ekr.20040104162835.10">In general, Unix commands can go anywhere and they're found by the 
shell using the $PATH variable.  To know what your path is, type "echo 
$PATH" at the shell.

Typically you'll have new things added to your path by a file called 
.login in your home directory.  This runs when you log in and then the 
settings are inherited by all the shells you run.

You can also type the full path to something if you want to invoke it 
that way, such as "/usr/local/bin/python".

Fink puts everything underneath /sw so as to avoid conflicting with 
Apple's versions of things.

If you can't invoke a file, it might be that it's not set to be 
executable.  If you do "ls -l" you'll see files listed with their 
permissions.  You'll see some of r, w, and x meaning read, write and 
execute.  These appear three times for owner, group, and everyone.  You 
can do "chmod +x filename" to make it executable for the owner or you 
can use numbers as in "chmod 755 file name" which sets rwx for the 
owner (7 = 111 in binary = rwx) and rx for group and everyone (5 = 101 
in binary = r_x).

I know this might seem confusing at first but the fact that things 
won't execute without being set executable is a big curb on viruses.  
In fact, there are no OS X viruses yet.  Anyway, it's all a matter of 
what you're used to.  Windows seems confusing to someone new to it too.

</t>
<t tx="ekr.20040104162835.11">You can type "which python" to find out which version of python (or any 
other command) will run.
</t>
<t tx="ekr.20040104162835.12">That error message (from import _tkinter) makes it sound like you are 
somehow running the text-only version of Python that came with OS X... 
except you said you deleted that.

You can use "get info" in the finder to check and set which program 
will be used to open a given file.  So you can select your main leo.py 
file (or whichever the one you start with is), do get info on it, and 
tell it to open with the MacPython launcher that you want.  Then you 
should be able to double click it to open it.  That's what I do to run 
Leo on my Mac.

</t>
<t tx="ekr.20040104162835.13">Yes, fink does have pre-built Pythons, both 2.1 and 2.2.  (If you don't 
see them it probably means you don't have the right servers listed in 
your /sw/etc/apt/sources.list file.)  However, the versions of Python 
you'd get through fink are set up to run under X Windows, which I don't 
think is what you want.

I think what you want is MacPython which can run Tk programs like Leo 
under Aqua.  That's what I use these days.

I can tell from your question that you don't understand the following 
differences between the versions of Python available:

1) The version that comes with OS X is a text only one which doesn't 
have Tk.  Leo can't run under that.  Also, I hate Apple for including 
this instead of one that does have Tk and I hope they'll fix it some 
day.

2) You can get a version of Python from fink with has Tk but which runs 
under X Windows.  I don't think you want that.

3). You can also get MacPython which has Tk but it's a version of Tk 
that uses the Aqua windowing system, not X Windows.

So Tk can either be present or not and if it is present it can use 
either X Windows or Aqua.  You want it present and using Aqua, I think.


</t>
<t tx="ekr.20040104162835.14">&gt; 1. The python that FC installs is MacPython.  I think that because the
&gt; MacPython docs talk about Fink.

Nope.  The python installed by FC knows nothing about the Mac.  It 
thinks it's running on a Unix machine.  And it uses a version of Tk 
which thinks it's running on a Unix machine.  The window standard on 
Unix is called X (or X11 or XFree86, all the same thing).  So the main 
reason to run Leo this way would be to get an idea of how it works for 
Unix/Linux users.  But when programs run under X, they don't look like 
Mac programs.  They don't get all those glossy, translucent widgets 
that Aqua provides.  They really look like they would on a Unix/Linux 
machine.

Aqua is the native windowing system on Mac.  MacPython is set up to 
work with it.  Most Mac users will want Leo to work this way.  That's 
what I do.

&gt;
&gt;
&gt; I have the TkTclAquBI (Batteries included) installer.  Is installing 
&gt; this
&gt; enough to get Leo to work with Aqua?  Do I have to de-install the
&gt; present tk stuff that I installed with FC?

Yes, I think that's all I installed to get Tk to work under Aqua.  You 
don't have to deinstall the FC stuff.  All the FC stuff lives in its 
own world under /sw and runs under X.  It won't conflict with the Mac 
world.

</t>
<t tx="ekr.20040104162835.15">Double-clickable things (i.e. Macintosh applications) are usually 
actually folders with a name that ends in .app.  The file you found is 
probably executable only from the command line, not by double clicking 
it.  So I think if you run it from the command line it will work but 
will not know about Tk because Apple's version was built without Tk 
support.

You can also execute the .app programs from the command line by using 
the open command, so "open foo.app" will do the same thing as double 
clicking on foo in the finder (the .app extension is suppressed).  The 
idea behind this is that an application can look like just one opaque 
icon in the finder but actually have all its resources nicely organized 
in subfolders.
</t>
<t tx="ekr.20040104162835.16">FC gets its list of packages from the servers listed in 
/sw/etc/apt/sources.list.  So you can put Leo into any server and 
people can add it to their sources.list or you can talk to the people 
who run the default servers and get Leo hosted there (better).
</t>
<t tx="ekr.20040104162835.18">Jon Schull &lt;jschull@softlock.com&gt;  
Date:  2003/12/30 Tue PM 05:50:51 EST 
To:  edreamleo@charter.net 
Subject:  Leo, Mac OS X 10.3, and VPython 
             

I've been evaluating leo or vpython programming on  Mac OS X 10.3, and 
have some observations and a suggestion.

Observations.
		Leo runs under X11 as well as under OS X.
		My X11 python configuration was created using the recipe at XXX 
(which enables vpython).
		The OS X configuration is vanilla MacPython from MacPython.org, along 
with AquaTclTk batteries included XXX.
		In both environments I can run leo under python leo.py and under idle.
		Under OS X we get font smoothing, but we can't run visual python 
programs (python crashes;  this is a known incompatibility with 
MacPython.)
	
		Under X11 we can run visual python programs like this one
			#box.py
			from visual import *
			box()
			
    And we can even run them under leo (under X11). HOWEVER, when the 
visual python program is terminated, leo vanishes (leo and the vp 
program apparently run in the same space)
	
	Under x11, we can keep leo alive by putting the vp program in its own 
space:
	
		os.popen3('/sw/bin/python /Users/jis/box.py')
	
	However,  this doesn't let us see the output of stderr and stdout.  
Those text streams are available...
		
		def do(cmd='ls'):
			from os import popen3
			pIn,pOut,pErr=0,1,2
			popenResults=popen3(cmd)
			print popenResults[pOut].read()
			print popenResults[pErr].read()
		
		import os	
		do('/sw/bin/python /Users/jis/box.py')
		
	...but only when the vpython program terminates.
	
	Here's the good news:  if we execute our vp program with 
/sw/bin/idle.py rather than with python, we get to see the program 
output in real time (under idle, under X11).
	
		import os	
		os.chdir('/sw/lib/python2.3/idlelib')
		os.popen3('/sw/bin/python idle.py -r /Users/jis/box.py')
		
		#this runs as an executed script in leo, and produces a live idle 
with real time ongoing output.
	
	Now, while idle is running, leo sits in suspended animation.  But when 
the vpython program terminates, we are left in idle, and when idle is 
terminated, leo becomes active again.
	
	It would be even better if leo were not suspended (using os.spawn, 
perhaps) but the real point is that I would really really like leo's 
"Execute script" command to execute code this way and spare me having 
to  hard-write the path to box.py.  It ought to be possible to 
eliminate os.chdir as well.

------------------
Jon Schull, Ph.D.
Associate Professor
Information Technology
Rochester Institute of Technology
schull@digitalgoods.com 585-738-6696
</t>
<t tx="ekr.20040104184644"># An example of running this script:
import leoGlobals as g
from leoGlobals import true,false

@others

types = (".py",) #,".c",".html",".txt")

dir = "c:/Zope-2.6.2-src/lib/python"
dir = "c:/Zope-2.6.2-src/lib/Components"

importFiles(dir,types,recursive=true)

g.es("done",color="blue")</t>
<t tx="ekr.20040104184913">What I did:
	
- Added at.scripting ivar.

- Add trailing newline in putBody when at.scripting is true.</t>
<t tx="ekr.20040104184913.1">def importFiles (dir,type=None,kind="@file",recursive=false):
	
	c = g.top() ; v = c.currentVnode()

	# Check the params.
	if kind != "@file" and kind != "@root":
		g.es("kind must be @file or @root: " + `kind`)
		return

	if not g.os_path_exists(dir):
		g.es("directory does not exist: " + `dir`)
		return
	
	c.beginUpdate()
	root = createLastChildOf(v,"imported files")
	try:
		importDir (dir,type,kind,recursive,root)
		root.contract()
	except:
		g.es_exception()
	c.endUpdate()
</t>
<t tx="ekr.20040104184913.2">def importDir (dir,types,kind,recursive,root):
	
	c = g.top() # Get the commander.
	g.es("dir: " + dir,color="blue")
	
	try:
		files = os.listdir(dir)
		files2 = [] ; dirs =[]
		for f in files:
			path = g.os_path_join(dir,f)
			if g.os_path_isfile(path):
				name, ext = g.os_path_splitext(f)
				if not types or ext in types:
					files2.append(path)
			elif recursive:
				dirs.append(path)
		if len(files2) &gt; 0 or len(dirs) &gt; 0:
			child = createLastChildOf(root,dir)
			c.selectVnode(child)
		if len(files2) &gt; 0:
			c.importCommands.importFilesCommand(files2,kind)
		if len(dirs) &gt; 0:
			dirs.sort()
			for dir in dirs:
				importDir(dir,types,kind,recursive,child)
	except:
		g.es("exception in importFiles script")
		g.es_exception()
</t>
<t tx="ekr.20040104184913.3">def createLastChildOf (v,headline):
	
	child = v.insertAsLastChild()
	child.initHeadString(headline)
	return child
</t>
<t tx="ekr.20040104200407"></t>
<t tx="ekr.20040105064959">@nocolor</t>
<t tx="ekr.20040105070023"></t>
<t tx="ekr.20040105070023.1">
</t>
<t tx="ekr.20040105070023.2"></t>
<t tx="ekr.20040105070023.3"></t>
<t tx="ekr.20040105070023.4"></t>
<t tx="ekr.20040105070023.5">Leo 4.1 rc3, build 1.62 , December 19, 2003
Python 2.3.0, Tk 8.4.2
Linux 2.4.22-21mdkenterprise

1. Any tab typed before the first tab stop behaves correctly (the cursor is moved to the tab stop). Good.

2. Any tab typed after a non-tab character (even a space) _and_ after the first tab stop position doesn't behave like a tab and doesn't move the cursor to the next tab stop. Bad.

3. Any tab typed after a tab character will behave properly no matter what position on the line. Okay.

To reproduce this, set your global tab prefernence to 4. Show invisibles. And then create a node containing:

[BEGIN BODY TEXT]
@language plain
@tabwidth 8
[END BODY TEXT]

Create a child node to that one, containing:

[BEGIN BODY TEXT]
@root-code somefilename
\t\tThis works
bbb\tAnd This works
So\tdoes this

But, this \tdoes not.
Here is the two-tab \t\t behavior.
[END BODY TEXT]

I hope this is a Leo bug and not a Tk bug. 

Dave Hein </t>
<t tx="ekr.20040105070616">This may be the result of excessive string concatenation.</t>
<t tx="ekr.20040105070616.2">- beginUpdate does not inhibit redraw!!

- put leo window in front when find succeeds or fails.

- get trace to work

- Use Clover key on mac.
	How can we use platform-specific keystrokes.</t>
<t tx="ekr.20040105080119">@nocolor

https://sourceforge.net/forum/message.php?msg_id=2355843
By: rodrigo_b

At least pluginManager should be there too....

(or both files could be merged... who knows)

The better would be to have

$HOME/.leo/
$HOME/.leo/leoConfig.txt
$HOME/.leo/plugins/pluginManager.txt
$HOME/.leo/plugins/&lt;myplugins&gt;.py

look for .leoConfig.txt, then leoConfig.txt</t>
<t tx="ekr.20040105080119.1">Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=2355852
By: rodrigo_b

On Linux, if you copy some leo headline or body text, and try to paste it in
the Find/Change panel (as a string to search), it does not work.

I suspect the problem is due that Ctrl+V (paste) is not define in the Find
panel.

RodrigoB.

</t>
<t tx="ekr.20040105080119.4">Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=2342120
By: rodrigo_b

Today I was trying to clen some of the hooks of LeoN and I tried the
"draw-outline-text-box" that appears in the plugins documentation. But this
hook was not called when expected, in fact it was not called at all. I search
inside the code of 4.1rc1 and did not found any reference to it....

I would like to try to use "draw-outline-text-box" instead of overwriting the
tree.drawText method as I actually do.

Does this hook exist ? 
</t>
<t tx="ekr.20040105103517"></t>
<t tx="ekr.20040105103916">@nocolor
http://sourceforge.net/forum/message.php?msg_id=2355564
By: sbeards

When importing a PHP file with a short open tag (see
http://www.php.net/manual/en/configuration.directives.php#ini.short-open-tag)
or an open tag with all caps or mixed case Leo will recognize the file as mixed
HTML and PHP. This prevents the file from being automatically expanded by Leo
(a very cool automation process).

One way that I fixed this in my copy of Leo was to make the following change
in leoImport.py:scanPHPtext():
change:

if not s.startswith("&lt;?php") to if not s.startswith("&lt;?")

However, this will not work if the file starts with an xml open tag (since an
open tag for an xml file is &lt;?xml).

maybe the following will work?

if not (
	s.startswith("&lt;?P") or s.startswith("&lt;?p") or s.startswith("&lt;?=") or
	s.startswith("&lt;?\n") or s.startswith("&lt;? ") or s.startswith("&lt;?\t") or
	s.startswith("&lt;?\r"))

This way seems really messy and not fully complete. Does anyone have a better
way?

Also maybe the next line in leoImport.py should be changed to check for

s.endswith("?&gt;\r")

This way it'll work for our Mac friends too.

Scott</t>
<t tx="ekr.20040105115534"></t>
<t tx="ekr.20040105115534.1"></t>
<t tx="ekr.20040105120208.1"></t>
<t tx="ekr.20040105121411"></t>
<t tx="ekr.20040105210752"></t>
<t tx="ekr.20040105214540">@nocolor

Values for the state field.

No modifiers:  0
Shift: 1
Caps_lock: 2
Control: 4
Alt: 131072

A possible strategy:
	
1.  Only pass keys to body pane if state is 0, 1, 2 or 3.</t>
<t tx="ekr.20040105223536">def handleStatusLineKey (self,event):
	
	c = self.c ; frame = c.frame
	ch = event.char ; keysym = event.keysym
	keycode = event.keycode ; state = event.state

	if 1: # ch and len(ch)&gt;0:
		&lt;&lt; trace the key event &gt;&gt;

	try:
		status = self.keyStatus
	except:
		status = [] ; frame.clearStatusLine()
	
	for sym,name in (
		("Alt_L","Alt"),("Alt_R","Alt"),
		("Control_L","Control"),("Control_R","Control"),
		("Escape","Esc"),
		("Shift_L","Shift"), ("Shift_R","Shift")):
		if keysym == sym:
			if name not in status:
				status.append(name)
				frame.putStatusLine(name + ' ')
			break
	else:
		status = [] ; frame.clearStatusLine()

	self.keyStatus = status</t>
<t tx="ekr.20040105223536.1">try:    self.keyCount += 1
except: self.keyCount  = 1

printable = g.choose(ch == keysym and state &lt; 4,"printable","")

print "%4d %s %d %s %x %s" % (
	self.keyCount,repr(ch),keycode,keysym,state,printable)</t>
<t tx="ekr.20040106095546">@ This is called only from doCommand.  The implicit assumption is that doCommand itself is not contained in a beginUpdate/endUpdate pair.
@c

def redrawAfterException (self):
	
	"""Make sure drawing is enabled following an exception."""
		
	if not self.redrawScheduled:
		self.redrawScheduled = true
		self.canvas.after_idle(self.idle_redraw)
		self.updateCount = 0 # would not work if we are in a beginUpdate/endUpdate pair.</t>
<t tx="ekr.20040106095546.1">def enableDrawingAfterException (self):
	pass</t>
<t tx="ekr.20040106095546.2"></t>
<t tx="ekr.20040106095934">Created tree.enableDrawingAfterException and called it in es_exception.</t>
<t tx="ekr.20040106101045">@nocolor

https://sourceforge.net/forum/message.php?msg_id=2360976
By: nobody

The example below is the error message I'm getting when I try to click open the
leo file driveinfo.leo. My OS is win2000 and python 2.3. I'm also having the
same problem with sbsytlesheets.leo from the ScreenMaker program. Does anyone
know what I need to do to view theses files? Thanks.

File encoding: UTF-8
Traceback (most recent call last):
  File "C:\Program Files\Leo\src\leoFileCommands.py", line 470, in getLeoFile
    self.getPrefs()
  File "C:\Program Files\Leo\src\leoFileCommands.py", line 604, in getPrefs
    self.getDquote() ; val = f() ; self.getDquote()
  File "C:\Program Files\Leo\src\leoFileCommands.py", line 195, in getDquote
    self.getTag('"')
  File "C:\Program Files\Leo\src\leoFileCommands.py", line 263, in getTag
    raise BadLeoFile("expecting" + tag)
BadLeoFile: Bad Leo File:expecting"
C:\leo\driveinfo.leo is not a valid Leo file: &lt;leoFileCommands.BadLeoFile instance
at 0x00C055A8&gt;
leoConfig.txt encoding: utf-8
Text encoding: cp1252

</t>
<t tx="ekr.20040106115311">@nocolor

https://sourceforge.net/forum/message.php?msg_id=2361036
By: jasonic

I just had a great user interface idea to improve Leo tree behavior. 

The most common tree node clicking task people do is expand or contract by clicking
on the little +/- squares.

But why should one have such a small target?
HCI research studies have all shown one can improve interfaces just  by making
target areas as large as possible in ebery case. Preceise hand eye skills shoudl
not be squandered especially for repetitive tasks.

So in Leo's case one could make the target for each node exactly one line high,
and as wide as the entire pane. This could be an active rollover with a highlight
color. then single clicking would expand/contract that node.

The exception would be when you want to rename a node. Then clicking directly
on the name itself would only affect the name to make it editable as now.

Enhancements would be use of modifier Keys to alter the expand/contract nodeclick
behavior.

Ctrl+click would apply expand/contract one nested level down in that node.

Shift+click would apply expand/contract to all nested levels in that node.

Holding a number keyclick wouldapply/contract to the same number of nested levelsin
that node.
3+node click would affect 3 nested levels 
5+node click would affect  5 nested levels
etc.

I've mocked up a tiny flash version to help you explore the rollover idea yourselves.
In my minimal demo, the only active node "4.1 final".

Click on it and you can se how they could all work. Rollover the text and you
can see how that area could catch focus into editing. Colors are a little dull,
but they would be set all by preferences anyway.
[Also, complex clicking is not enabled in the this demo either. I'll play more
with it later when I have time and after some feedback. This direction is prelim
to my LeoFlashJabber project for 2004

http://tranzilla.net/leo/swf/tree_ui_idea_000.html

</t>
<t tx="ekr.20040106121339"></t>
<t tx="ekr.20040106121339.1"></t>
<t tx="ekr.20040106122602"></t>
<t tx="ekr.20040106145421">@nocolor

https://sourceforge.net/forum/message.php?msg_id=2361052
By: sbeards

This issue also affects highlighting the PHP opening tags in leoColor.py:doNormalState.

The code is currently as follows:
@color

if match(s,i,"&lt;?php"):
	self.tag("keyword",i,i+5)
	i += 5
elif match(s,i,"?&gt;"):
	self.tag("keyword",i,i+2)
	i += 2
else:
	i += 1

@nocolor
It would be nice if we could also catch the following all of which should be valid when the language is PHP.

&lt;?_    (Note: replace the '_' with whitespace)
&lt;?=
&lt;?[pP][hH][pP] (Note: regex/mixed case is OK)

Can't we use the following regex to catch these cases?

"&lt;?(\s|=|[pP][hH][pP])"

Scott
</t>
<t tx="ekr.20040106183213"></t>
<t tx="ekr.20040107064101"></t>
<t tx="ekr.20040107064101.1"></t>
<t tx="ekr.20040107064101.2">@nocolor

- ESC closes the Find panel.

- Bound Return key to Find button.</t>
<t tx="ekr.20040107064101.3">@nocolor

The fix was to remove the call to self.getDquote() in the getTargetLanguage.</t>
<t tx="ekr.20040107064101.5"></t>
<t tx="ekr.20040107064854">from ZODG import FileStorage,DB
from Persistence import Persistent

# Connect to db.
# FileStorage is standard: entire db is stored in a single file.
storage = FileStorage.FileStorage("/tmp/test-filestorage.fs")
db = DB.(storage)
conn = db.open()

# Get the root of the db.
root = conn.root()

# Defining user classes.
class leoData(Persistent):
	pass
	
# Commit or revert.
get_transaction().commit()
get_transaction().abort()</t>
<t tx="ekr.20040107064854.1"></t>
<t tx="ekr.20040107064854.2"></t>
<t tx="ekr.20040107065006">@nocolor

Yes he's absolutely right -- focus on the ZODB.

..stay alway from ZTP. ZPT, TPZ, CMF, Plone and all that other stuff for now.

I jsut came accross a handy slide show overview from last spring:
http://jace.seacrow.com/tech/zope/blug-zodb

BerkeyDB Storage is cool too and fits Leo well I think. plays nicely wiht ZODB
standalnioe and in Zope.
</t>
<t tx="ekr.20040107080609">Changed frame.idle_head_key to frame.tree.idle_head_key in two places:

- Insert Headline Time/Date

- Change headline.</t>
<t tx="ekr.20040107080609.1">@nocolor

By: jasonic ( Jason Cunliffe )
ZShell  
2003-12-31 22:25

Hi, Just another friendly reminder to check out Jerome Alet's ZShell, one of Zope's best kept secrets:

http://www.librelogiciel.com/software/

ZShell : Manipulate the Zope Object DataBase with Unix shell like commands

and also

ZShellScripts : Unifies the Zope notion of Scripts and provides several Script interpreters : Python, Unix shell , Lisp, Perl, PHP, Ruby, and Zope ZShell

Not only for obvious usefullness, but also as a valuable study of Python access to the ZODB.

JAXML is cool too..
http://www.librelogiciel.com/software/jaxml/action_Presentation

- Jason</t>
<t tx="ekr.20040107084614"></t>
<t tx="ekr.20040107090240"></t>
<t tx="ekr.20040107090747.1"></t>
<t tx="ekr.20040107161709">http://sourceforge.net/forum/message.php?msg_id=2362014
By: grayrest

Steps to reproduce:
0. Have create_nonexistant_directories =1 in config (not sure if this matters,
leon.leo has an @path directive)
1. Get a leo outline (leon.leo in my case) containing @file nodes but without
the corresponding files.
2. File&gt;Read/Write&gt;Write missing @ file nodes

Expected results:
Directory ./dev created and all @file nodes in directory written.

Actual results:
exception executing command
Traceback (most recent call last):
  File "C:\Program Files\Leo\src\leoCommands.py", line 128, in doCommand
    command()
  File "C:\Program Files\Leo\src\leoFileCommands.py", line 1863, in
writeMissingAtFileNodes
    changedFiles = at.writeMissing(v)
  File "C:\Program Files\Leo\src\leoAtFile.py", line 676, in writeMissing
    if at.trace: trace("old_df",v)
AttributeError: atFile instance has no attribute 'trace'

Comments:
Didn't do a reduced testcase because I figured this was one of the "reorg" problems
and the solution would be fairly obvious (at least to ed ;]). If this is a problem,
I can create a testcase.
</t>
<t tx="ekr.20040108095341"></t>
<t tx="ekr.20040108131321"></t>
<t tx="ekr.20040108131321.1"></t>
<t tx="ekr.20040108133440">The assertion

assert(i == new_len)

in &lt;&lt; initialize new states &gt;&gt; has caused no end of troubles.  The new code eliminates the assertion by brute force.  It has never been clear why the assert has failed, and it does so rarely.  However, the very worst that can happen is that some lines aren't colored properly, so it's not a big deal.</t>
<t tx="ekr.20040108134357"></t>
<t tx="ekr.20040108141927"></t>
<t tx="ekr.20040108153420"></t>
<t tx="ekr.20040108153420.1">This is so handy.</t>
<t tx="ekr.20040108153757">@nocolor

http://sourceforge.net/forum/message.php?msg_id=2361160
By: ejoy

the finding panel is a little difficult to use:

- the dialog is too big (both the find and replace text entry), and I can not
even resize the dialog but move it. This often overlap the underline text
content I'm looking for.

- All buttons are on the bottom of the panel, not a good place I think. I
suggest rearrange the buttons on the right part of the panel and put the checkboxs
at the bottom. And the dialog should be small. Just like most finding&amp;replace
dialogs found in other applications (for example, python IDLE)
</t>
<t tx="ekr.20040109072646"></t>
<t tx="ekr.20040109072646.1">@nocolor
http://sourceforge.net/forum/message.php?msg_id=2366400
By: rogererens

I still have problems. I pasted your code into leo and pressing control-e works
indeed.
Pasting it into a file hoh.py and issueing the command leo.py -script hoh.py
gives:
C:\Leo\src&gt;leo.py -script hoh.py
__getattr__: nullGui __eq__
__getattr__: nullFrame __nonzero__
Traceback (most recent call last):
  File "C:\Leo\src\leo.py", line 241, in ?
    run(fileName)
  File "C:\Leo\src\leo.py", line 79, in run
    c,frame = createFrame(fileName)
  File "C:\Leo\src\leo.py", line 161, in createFrame
    c,frame = app.gui.newLeoCommanderAndFrame(fileName=None)
  File "C:\Leo\src\leoGui.py", line 66, in newLeoCommanderAndFrame
    c = leoCommands.Commands(frame,fileName)
  File "C:\Leo\src\leoCommands.py", line 26, in __init__
    self.tangleCommands = leoTangle.tangleCommands(self)
  File "C:\Leo\src\leoTangle.py", line 364, in __init__
    self.init_ivars()
  File "C:\Leo\src\leoTangle.py", line 381, in init_ivars
    if c.frame:
TypeError: __nonzero__ should return an int

I removed python2.3.1, pythonwin and wxpython and installed only (full) python2.3.3
and leo (without the desktop shortcut), but the error remains.

I disabled the tangling output checkboxes in the prefs (BTW the titlebar of
the prefs window for files living on the desktop reads 'Prefs for Desktop' instead
of 'Prefs for &lt;filename&gt;').

It appears to me that init_ivars in leoTangle.py shouldn't test for c.frame in
case one is running leo in batch-mode as there is no frame hanging around?

EKR: removing the __getattr__ routines from the nullGui and nullFrame classes probably fixed this.
</t>
<t tx="ekr.20040109073834"></t>
<t tx="ekr.20040109073834.1">@nocolor

http://sourceforge.net/forum/message.php?msg_id=2365939
By: grayrest

Write dirty @file nodes

No matter what the state of the outline, I never have any dirty @file nodes.
This is annoying because I need to move to somewhere above the @file node to
use write @file nodes and I'm usually working on a clone that's somewhere else
in the outline.
</t>
<t tx="ekr.20040115162445.1">@nocolor


BUG: Shift+Ctrl+BkSp doesn't delete node   </t>
<t tx="ekr.20040115162445.2">By: dthein ( Dave Hein ) 
 RE: BUG: Shift+Ctrl+BkSp doesn't delete node   
2004-01-15 03:30  

 OK, the cause of the keymapping problem is a issue with the X11 keyboard mapping, not with Tk.

If you have this problem on your system, issue the command:

xmodmap -pke 

and look in the results for the line for keycode 22. I'll bet it shows something like:

keycode 22 = BackSpace Terminate_Server

That second token ("Terminate_Server") is what is supposed to be mapped to Shift-Backspace. You want this second token to be either not present or to be BackSpace.

To fix this, create a file (e.g. .Xmodmap) and give it the content:

keycode 22 = BackSpace

then run the command:

xmodmap .Xmodmap

And you'll have fixed the problem.

Now, on my system this also disables the ability to terminate the X server using Ctrl-Alt-BackSpace ... this is because of some conflict with xdb (xdb is the newer keyboard mapping facility in XFree86 ... xmodmap is the old original X11 keyboard mapping facility). I'm still working on that.

I'm also not able to get xmodmap to make this change during X11 startup (again because of conflicts with xdb). But I'm working on that as well.</t>
<t tx="ekr.20040115163454"></t>
<t tx="ekr.20040115165036">@language html
@ignore
@color</t>
<t tx="ekr.20040115165036.1">@ 
This document demonstrates what appears to be a bug in Leo 4.1 rc3, build 1.62 of December 19, 2003.

It has manifested when Leo is executed under Python 2.3.3, Tk 8.4.3 under Windows 2000.

In brief, derived XML files are not well-formed with respect to comments under some conditions.  Comments can wind up nested, which looks okay to humans but not to XML parsers.
@c</t>
<t tx="ekr.20040115165036.3">@first &lt;?xml version='1.0'?&gt;
@language HTML
&lt;HiMom&gt;
@ This will produce, in the derived file, an XML comment with another XML comment embedded.  Or, if you prefer, it will produce an unclosed XML comment followed by a well-formed one, followed by a string of text containing a comment-close marker.

This text is sitting in the inner comment, according to the first view.
@c


@
This comment is well-formed, seemingly because its content does not begin on the same line as the at-sign.
@c
&lt;/HiMom&gt;</t>
<t tx="ekr.20040115165036.4">&lt;?xml version='1.0'?&gt;
&lt;!--@+leo-ver=4--&gt;
&lt;!--@+node:@file xmlcommentbug.xml--&gt;
&lt;!--@@first--&gt;
&lt;!--@@language HTML--&gt;
&lt;HiMom&gt;
&lt;!--@+at --&gt;
&lt;!--
&lt;!--@nonl--&gt;
This will produce, in the derived file, an XML comment with another XML 
comment embedded.  Or, if you prefer, it will produce an unclosed XML comment 
followed by a well-formed one, followed by a string of text containing a 
comment-close marker.

This text is sitting in the inner comment, according to the first view.
--&gt;
&lt;!--@-at--&gt;
&lt;!--@@c--&gt;


&lt;!--@+at--&gt;
&lt;!--
This comment is well-formed, seemingly because its content does not begin on 
the same line as the at-sign.
--&gt;
&lt;!--@-at--&gt;
&lt;!--@@c--&gt;
&lt;/HiMom&gt;
&lt;!--@nonl--&gt;
&lt;!--@-node:@file xmlcommentbug.xml--&gt;
&lt;!--@-leo--&gt;</t>
<t tx="ekr.20040115165504"></t>
<t tx="ekr.20040116023856"># Affects moving, inserting, deleting, cloning and sorting nodes.</t>
<t tx="ekr.20040117092727">By: dthein ( Dave Hein ) 
 RE: BUG: Non-leading tabs not working properl   
2004-01-17 14:40  

 This seems to be a TK bug. I've reproduced the problem directly in Tk.

It's been around for a long time :-(

More details on this page, along with a patch for an earlier version.

http://www.qs.co.nz/Tcl/TkTabs.html

The Tk folks fixed a bug I reported with Ctrl-V behavior, but it took about a year for them to get to it. I don't have high expectations with this problem either, but I'll probably put together a patch for some of the recent version of Tk and submit the patches and bug report.  
</t>
<t tx="ekr.20040117092727.1">@nocolor</t>
<t tx="ekr.20040117092727.2">Read and respond to this message at: 
https://sourceforge.net/forum/message.php?msg_id=2379351
By: korakot

If leo use database storage (ZODB or otherwise)
it could scale much better. This will bring us some
possiblity to store all versions of changes to a node
or a tree.

Cloning will then point to a specific version. If there
is no conflict, it can update to a later version when
the primary clone change. If there is a conflict
we can deal with it wisely using 'diff information'
because we have 'all versions' stored.

</t>
<t tx="ekr.20040117111232">https://sourceforge.net/forum/message.php?msg_id=2379777
By: nobody

Here is my results of a short surfing:

- The SubVersion book (explain concepts, usage, etc..)
http://svnbook.red-bean.com/html-chunk/

-SubVersion applications can be programmed in Python
http://svnbook.red-bean.com/html-chunk/ch08s02.html
http://pysvn.tigris.org/

 The main problem of using SubVersion will be the binary dependencies (no more
pure python code).

- Zope Version Control
Similar Plone access to SVN (Plone is a Zope application Plone-&gt;Zope-&gt;Python),
could give some ideas
http://plone.org/events/conferences/1/archive/PloneSVN2003.pdf

Got nothing very clear...
I think we should start by creating a requirements document.
What exactly we want to create ?

rodrigob
</t>
<t tx="ekr.20040117111755">@nocolor

By: grayrest ( Karl Guertin ) 
 diff: css support   
2004-01-09 23:42  

 I got frustrated at leo's lack of support for CSS. The main difficulty I was having is that CSS only specifies the /* and */ comment delimiters and not any single line delimeter. Trying the depricated @comment /* */ doesn't work because it produces the output

/* @@comment /* */ */

which fails because the first */ on the line ends the comment, leaving the second */ as a syntax error in the file.

Anyway, while looking into it I figured I'd just add CSS as a supported language. It took longer than expected (there are a LOT of keywords in css) but the only hangup was that css keywords include dashes (e.g. margin-top). Diff against 4.1RC3 release is below. In case it gets mangled, the diff can also be found at http://r39h92.res.gatech.edu:8788/leon_files/css.diff 

A few other comments:
When working on LeoPy.leo, the @file nodes automatically read and ctrl+shift+w writes all the files in the entire outline. When working on LeoN.leo, the files are not automatically read and ctrl+shift+w only writes the @file nodes in the subtree. Does anybody know why this is the case?

If you want to see the developing leon web interface I'm working on, you can visit http://r39h92.res.gatech.edu:8788/ . Also, feel free to test leon on my server by connecting to :8787. The usernames and passwords are the defaults. I'm hacking on the server, which results in me starting/restarting it a lot, which dumps all the nodes. It's usually up.

@color

diff -u copysrc/leoApp.py src/leoApp.py
--- copysrc/leoApp.py 2003-12-13 10:33:28.000000000 -0500
+++ src/leoApp.py 2004-01-09 17:24:34.484375000 -0500
@@ -82,6 +82,7 @@
self.language_delims_dict = {
"actionscript" : "// /* */", #jason 2003-07-03
"c" : "// /* */", # C, C++ or objective C.
+ "css" : "/* */",
"cweb" : "@q@ @&gt;", # Use the "cweb hack"
"elisp" : ";",
"forth" : "_\\_ _(_ _)_", # Use the "REM hack"
@@ -104,6 +105,7 @@
self.language_extension_dict = {
"actionscript" : "as", #jason 2003-07-03
"c" : "c", 
+ "css" : "css",
"cweb" : "w",
"elisp" : "el",
"forth" : "forth",
diff -u copysrc/leoColor.py src/leoColor.py
--- copysrc/leoColor.py 2003-12-15 20:47:22.000000000 -0500
+++ src/leoColor.py 2004-01-09 17:47:09.031250000 -0500
@@ -80,6 +80,89 @@
#@nonl
#@-node:&lt;&lt; c keywords &gt;&gt;
#@nl
+ #@&lt;&lt; css keywords &gt;&gt;
+ #@+node:&lt;&lt; css keywords &gt;&gt;
+ css_keywords = (
+ #html tags
+ "address", "applet", "area", "a", "base", "basefont",
+ "big", "blockquote", "body", "br", "b", "caption", "center",
+ "cite", "code", "dd", "dfn", "dir", "div", "dl", "dt", "em", "font",
+ "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "hr", "html", "img",
+ "input", "isindex", "i", "kbd", "link", "li", "link", "map", "menu",
+ "meta", "ol", "option", "param", "pre", "p", "samp",
+ "select", "small", "span", "strike", "strong", "style", "sub", "sup",
+ "table", "td", "textarea", "th", "title", "tr", "tt", "ul", "u", "var",
+ 
+ #units
+ "mm", "cm", "in", "pt", "pc", "em", "ex", "px",
+ 
+ #colors
+ "aqua", "black", "blue", "fuchsia", "gray", "green", "lime", "maroon", "navy", "olive", "purple", "red", "silver", "teal", "yellow", "white",
+ 
+ #important directive
+ "!important",
+ 
+ #font rules
+ "font", "font-family", "font-style", "font-variant", "font-weight", "font-size",
+ #font values
+ "cursive", "fantasy", "monospace", "normal", "italic", "oblique", "small-caps",
+ "bold", "bolder", "lighter", "medium", "larger", "smaller",
+ "serif", "sans-serif",
+ 
+ #background rules
+ "background", "background-color", "background-image", "background-repeat", "background-attachment", "background-position",
+ #background values
+ "contained", "none", "top", "center", "bottom", "left", "right", "scroll", "fixed",
+ "repeat", "repeat-x", "repeat-y", "no-repeat",
+ 
+ #text rules
+ "word-spacing", "letter-spacing", "text-decoration", "vertical-align", "text-transform", "text-align", "text-indent", "text-transform", "text-shadow", "unicode-bidi", "line-height",
+ #text values
+ "normal", "none", "underline", "overline", "blink", "sub", "super", "middle", "top", "text-top", "text-bottom",
+ "capitalize", "uppercase", "lowercase", "none", "left", "right", "center", "justify",
+ "line-through",
+ 
+ 
+ #box rules
+ "margin", "margin-top", "margin-bottom", "margin-left", "margin-right",
+ "margin", "padding-top", "padding-bottom", "padding-left", "padding-right",
+ "border", "border-width", "border-style", "border-top", "border-top-width", "border-top-style", "border-bottom", "border-bottom-width", "border-bottom-style", "border-left", "border-left-width", "border-left-style", "border-right", "border-right-width", "border-right-style", "border-color",
+ #box values
+ "width", "height", "float", "clear",
+ "auto", "thin", "medium", "thick", "left", "right", "none", "both",
+ "none", "dotted", "dashed", "solid", "double", "groove", "ridge", "inset", "outset",
+ 
+ #display rules
+ "display", "white-space", 
+ "min-width", "max-width", "min-height", "max-height",
+ "outline-color", "outline-style", "outline-width",
+ #display values
+ "run-in", "inline-block", "list-item", "block", "inline", "none", "normal", "pre", "nowrap", "table-cell", "table-row", "table-row-group", "table-header-group", "inline-table", "table-column", "table-column-group", "table-cell", "table-caption"
+ 
+ #list rules
+ "list-style", "list-style-type", "list-style-image", "list-style-position",
+ #list values
+ "disc", "circle", "square", "decimal", "decimal-leading-zero", "none",
+ "lower-roman", "upper-roman", "lower-alpha", "upper-alpha", "lower-latin", "upper-latin",
+ 
+ #table rules
+ "border-collapse", "caption-side",
+ #table-values
+ "empty-cells", "table-layout",
+ 
+ #misc values/rules
+ "counter-increment", "counter-reset",
+ "marker-offset", "z-index",
+ "cursor", "direction", "marks", "quotes",
+ "clip", "content", "orphans", "overflow", "visibility",
+ 
+ #aural rules
+ "pitch", "range", "pitch-during", "cue-after", "pause-after", "cue-before", "pause-before", "speak-header", "speak-numeral", "speak-punctuation", "speed-rate", "play-during", "voice-family",
+ #aural values
+ "stress", "azimuth", "elevation", "pitch", "richness", "volume",
+ "page-break", "page-after", "page-inside")
+ #@-node:&lt;&lt; css keywords &gt;&gt;
+ #@nl
cweb_keywords = c_keywords
#@&lt;&lt; elisp keywords&gt;&gt;
#@+node:&lt;&lt; elisp keywords&gt;&gt;
@@ -864,7 +947,7 @@
# The list of languages for which keywords exist.
# Eventually we might just use language_delims_dict.keys()
languages = [
- "actionscript","c","cweb","elisp","html","java","latex",
+ "actionscript","c","css","cweb","elisp","html","java","latex",
"pascal","perl","perlpod","php","python","rebol","tcltk"]

self.keywords = []
@@ -1507,7 +1590,7 @@
#@+node:&lt;&lt; handle general keyword &gt;&gt;
if self.language == "rebol":
j = self.skip_id(s,i+1,chars="-~!?")
- elif self.language == "elisp":
+ elif self.language == "elisp" or self.language == "css":
j = self.skip_id(s,i+1,chars="-")
else:
j = self.skip_id(s,i)
diff -u copysrc/leoTkinterPrefs.py src/leoTkinterPrefs.py
--- copysrc/leoTkinterPrefs.py 2003-11-19 11:14:28.000000000 -0500
+++ src/leoTkinterPrefs.py 2004-01-09 18:11:42.640625000 -0500
@@ -130,12 +130,12 @@
left_data = [
("ActionScript", "actionscript"),
("C/C++","c"),
+ ("CSS","css"),
("CWEB", "cweb"),
("elisp","elisp"),
("HTML", "html"),
("Java", "java"),
- ("LaTeX", "latex"),
- ("Pascal", "pascal")]
+ ("LaTeX", "latex")]

for text,value in left_data:
button = Tk.Radiobutton(lt,anchor="w",text=text,
@@ -144,6 +144,7 @@

# Right column of radio buttons.
right_data = [
+ ("Pascal", "pascal"),
("Perl", "perl"),
("Perl+POD", "perlpod"),
("PHP", "php"),
 
</t>
<t tx="ekr.20040117112213">@nocolor

http://sourceforge.net/forum/message.php?msg_id=2373816
By: sbeards

A related issue is that leoConfig.txt gets auto-tangled and overwritten on startup.
This will be a problem if Leo is run by a non-root user or the file is not readable.
For example, I get the following traceback after starting Leo (when leoConfig.txt
is read-only):

Traceback (most recent call last):
  File "/usr/local/share/leo-4.1-rc3/src/leoConfig.py", line 672, in update
    cf = open(self.configFileName,mode)
IOError: [Errno 13] Permission denied:
'/usr/local/share/leo-4.1-rc3/src/../config/leoConfig.txt'

Is there a reason leoConfig.txt gets auto-tangled on startup? Is there anyway
to disable this? Is this by design?
</t>
<t tx="ekr.20040117112808.1">@nocolor

https://sourceforge.net/forum/message.php?msg_id=2370629
By: tyndal

I found a small bug in the leo install script.
It doesnt check to see that the $LEO_PREFIX/bin exists before trying to install
the "leo" script into it, giving an error.

you just need to make a small check similar to the one for the lib directory..
(i've included it below)

Thanks,
-Tyndal

#------------------------------
echo ""
echo Making directory structure $LEO_PREFIX/bin

RESULTS=`mkdir -p $LEO_PREFIX/bin 2&gt;&amp;1`
if [ $? -ne 0 ]; then
    echo Failure making directory $LEO_PREFIX/bin
    exit 0;
fi
#
#-----------------------------
</t>
<t tx="ekr.20040117112808.2"></t>
<t tx="ekr.20040117113539.1">@nocolor

I recently wrote a few shell scripts (on linux) with leo, and I noticed
there was no colorizer support for shell (apart from comments), so I added
it: see the attached leo file. Note that this only adds colorizer support
for vanilla /bin/sh keywords -- one could customize it to add support for
all the different shell flavors out there (bash, ksh, etc), although I
think this is better left out for when we have a more flexible way of
specifying language grammars. Note that I changed the default extension
type for shell scripts from "txt" to "sh" (much more common for shell
scripts, I think).

In addition to what's specified in "How to add support for a new language"
(in LeoPy.leo), I also had to modify the &lt;&lt; handle single-line comment &gt;&gt;
block in colorizer.doNormalState to avoid that the built-in shell variable
'$#' starts a single-line comment.

As usual, feel free to modify at will.

Last thing: if I try to "Import to @file" a file with no extension, it
fails saying "&lt;filename&gt;.py does not exist" (where &lt;filename&gt; is the file I
want to load), i.e. Leo always tries to add a ".py" extension to files to
be imported if they don't have one. This is with Leo 4.1rc3 CVS version,
Python 2.3.2 on Linux.
</t>
<t tx="ekr.20040117162509.1">def childIndex (self):
	return self.v.childIndex
	
def firstChild (self):
	return self.v.firstChild()
	
def hasChildren (self):
	return self.v.hasChildren()
	
def lastChild (self):
	return self.v.lastChild()
	
def nthChild (self, n):
	return self.v.nthChild(n)
	
def numberOfChildren (self):
	return self.v.numberOfChildren()</t>
<t tx="ekr.20040117162509.8">def isCloned (self):
	return len(self.v.t.vnodes) &gt; 1
	
def isDirty (self):
	return self.v.isDirty()
	
def isExpanded (self):
	return self.v.isExpanded()

def isMarked (self):
	return self.v.isMarked()
	
def isOrphan (self):
	return self.v.isOrpan()
	
def isSelected (self):
	return self.v.isSelected()
	
def isTopBitSet (self):
	return self.v.isTopBitSet()
	
def isVisited (self):
	return self.v.isVisited()

def status (self):
	return self.v.status()</t>
<t tx="ekr.20040117162509.16">def isVisible (self):
	
	"""Return true if all of a position's parents are expanded."""
	
	if 0: # Using an iterator here allocates one extracopy.
		for p in self.parents_iter():
			if not p.v.isExpanded():
				return false
		return true
	
	# Note: v.isVisible no longer exists.
	
	p = self
	if not p:
		return false
		
	# Avoid calling p.copy() or copying the stack.
	v = p.v ; n = len(p.stack)-1

	v,n = p.vParentWithStack(v,p.stack,n)
	while v:
		if not v.isExpanded():
			return false
		v,n = p.vParentWithStack(v,p.stack,n)

	return true
</t>
<t tx="ekr.20040117162509.25">def isRoot (self):
	
	assert(0) # It's not clear how to do this.

	return not self.parent() and not self.back()</t>
<t tx="ekr.20040117163122"></t>
<t tx="ekr.20040117163606">def currentVnode (self):
	return self.v.currentVnode()
	
def exists(self,c):
	return self.v.exists(c)
	
def findRoot (self):
	return self.v.findRoot()
	
def isAncestorOf (self, v):
	return self.v.isAncestorOf(v)</t>
<t tx="ekr.20040117163955.1">def bodyString (self):
	return self.v.bodyString()
	
def cleanHeadString (self):
	return self.v.cleanHeadString()
	
def edit_text (self):
	return self.v.editText()
	
def headString (self):
	return self.v.headString()</t>
<t tx="ekr.20040117164346"></t>
<t tx="ekr.20040117164357.1">def appendStringToBody (self,s,encoding="utf-8"):
	return self.v.appendStringToBody(s,encoding)
	
def initHeadString (self,s,encoding="utf-8"):
	return self.v.initHeadString(s,encoding)
	
def scriptSetBodyString (self,s,encoding="utf-8"):
	return self.v.scriptSetBodyString(s,encoding)
	
def setBodyStringOrPane (self,s,encoding="utf-8"):
	return self.v.setBodyStringOrPane(s,encoding)
	
setBodyTextOrPane = setBodyStringOrPane

def setHeadString (self,s,encoding="utf-8"):
	return self.v.setHeadString(s,encoding)
	
def setHeadStringOrHeadline (self,s,encoding="utf-8"):
	return self.v.setHeadStringOrHeadline(s,encoding)</t>
<t tx="ekr.20040117164357.7">def computeIcon (self):
	return self.v.computeIcon()
	
def setIcon (self):
	return self.v.setIcon()</t>
<t tx="ekr.20040117164357.8"></t>
<t tx="ekr.20040117164357.9"># Compatibility routine for scripts

def clearAllVisited (self):
	
	self.c.clearAllVisited()
</t>
<t tx="ekr.20040117164357.10">def clearAllVisitedInTree (self):

	v = self ; c = v.c
	after = v.nodeAfterTree()
	
	c.beginUpdate()
	while v and v != after:
		v.clearVisited()
		v.t.clearVisited()
		v = v.threadNext()
	c.endUpdate()
</t>
<t tx="ekr.20040117164357.11">def clearClonedBit (self):

	self.statusBits &amp;= ~ self.clonedBit</t>
<t tx="ekr.20040117164357.12">def clearDirty (self):

	v = self
	v.t.clearDirty()

def clearDirtyJoined (self):

	# trace()
	v = self ; c = v.c
	c.beginUpdate()
	v.t.clearDirty()
	c.endUpdate() # recomputes all icons</t>
<t tx="ekr.20040117164357.13">def clearMarked (self):

	self.statusBits &amp;= ~ self.markedBit
	doHook("clear-mark",c=self.c,v=self)</t>
<t tx="ekr.20040117164357.14">def clearOrphan (self):

	self.statusBits &amp;= ~ self.orphanBit</t>
<t tx="ekr.20040117164357.15">def clearVisited (self):

	self.statusBits &amp;= ~ self.visitedBit</t>
<t tx="ekr.20040117164357.16">def clearVisitedInTree (self):

	after = self.nodeAfterTree()
	v = self
	while v and v != after:
		v.clearVisited()
		v = v.threadNext()</t>
<t tx="ekr.20040117164357.17">def contract(self):

	self.statusBits &amp;= ~ self.expandedBit

def expand(self):

	self.statusBits |= self.expandedBit

def initExpandedBit (self):

	self.statusBits |= self.expandedBit</t>
<t tx="ekr.20040117164357.18">def initStatus (self, status):

	self.statusBits = status</t>
<t tx="ekr.20040117164357.19">@ This is called from the key-event handler, so we must not force a redraw of the screen here. We avoid redraw in most cases by passing redraw_flag to the caller.

2/1/03: I don't see how this can possibly be correct.
Why is it needed?? If it is needed, what about undo??
@c

def setAncestorsOfClonedNodesInTreeDirty(self):

	"""This marks v dirty and all cloned nodes in v's tree."""

	# Look up the tree for an ancestor @file node.
	v = self ; redraw_flag = false
	
	if v == None:
		return redraw_flag
		
	flag = v.setAncestorAtFileNodeDirty()
	if flag: redraw_flag = true
		
	next = v.nodeAfterTree()
	v = v.threadNext()
	while v and v != next:
		if v.isCloned() and not v.isDirty():
			flag = v.setAncestorAtFileNodeDirty()
			if flag: redraw_flag = true
			for v2 in v.t.joinList:
				if v2 != v:
					flag = v2.setAncestorAtFileNodeDirty()
					if flag: redraw_flag = true
		v = v.threadNext()

	return redraw_flag</t>
<t tx="ekr.20040117164357.20">@ This is called from the key-event handler, so we must not force a redraw of the screen here. We avoid redraw in most cases by passing redraw_flag to c.endUpdate().

This is called from v.setDirty, so we avoid further calls to v.setDirty here.  The caller, that is, v.setDirty itself, handles all clones.

@c
def setAncestorAtFileNodeDirty(self):

	# Look up the tree for an ancestor @file node.
	v = self ; c = v.c
	redraw_flag = false
	c.beginUpdate()
	while v:
		if not v.isDirty() and v.isAnyAtFileNode():
			# trace(v)
			redraw_flag = true
			v.t.setDirty() # Do not call v.setDirty here!
		v = v.parent()
	c.endUpdate(redraw_flag) # A crucial optimization: does nothing if inside nested begin/endUpdate.
	return redraw_flag # Allow caller to do the same optimization.</t>
<t tx="ekr.20040117164357.21">def setClonedBit (self):

	self.statusBits |= self.clonedBit

def initClonedBit (self, val):

	if val:
		self.statusBits |= self.clonedBit
	else:
		self.statusBits &amp;= ~ self.clonedBit</t>
<t tx="ekr.20040117164357.22">@ v.setDirty now ensures that all cloned nodes are marked dirty and that all ancestor @file nodes are marked dirty.  It is much safer to do it this way.
@c

def setDirty (self):

	v = self ; c = v.c
	# trace(`v`)
	changed = false
	c.beginUpdate()
	if not v.t.isDirty():
		v.t.setDirty()
		changed = true
	# This must _always_ be called, even if v is already dirty.
	if v.setAncestorAtFileNodeDirty():
		changed = true
	for v2 in v.t.joinList:
		if v2 != v:
			assert(v2.t.isDirty())
			# Again, must always be called.
			if v2.setAncestorAtFileNodeDirty():
				changed = true
	c.endUpdate(changed)
	return changed
	
def setDirtyDeleted (self):
	self.setDirty()
	return

def initDirtyBit (self):
	self.t.setDirty()</t>
<t tx="ekr.20040117164357.23">def setMarked (self):

	self.statusBits |= self.markedBit
	doHook("set-mark",c=self.c,v=self)

def initMarkedBit (self):

	self.statusBits |= self.markedBit</t>
<t tx="ekr.20040117164357.24">def setOrphan (self):

	self.statusBits |= self.orphanBit</t>
<t tx="ekr.20040117164357.25"># This only sets the selected bit.

def setSelected (self):

	self.statusBits |= self.selectedBit</t>
<t tx="ekr.20040117164357.26"># Compatibility routine for scripts

def setVisited (self):

	self.statusBits |= self.visitedBit</t>
<t tx="ekr.20040117164357.27">def setSelection (self, start, length):

	self.t.setSelection ( start, length )</t>
<t tx="ekr.20040117164357.28">def setT (self, t):

	if t != self:
		del self.t
		self.t = t</t>
<t tx="ekr.20040117164357.29">def trimTrailingLines (self):

	"""Trims trailing blank lines from a node.
	
	It is surprising difficult to do this during Untangle."""

	v = self
	body = v.bodyString()
	# trace(`body`)
	lines = string.split(body,'\n')
	i = len(lines) - 1 ; changed = false
	while i &gt;= 0:
		line = lines[i]
		j = skip_ws(line,0)
		if j + 1 == len(line):
			del lines[i]
			i -= 1 ; changed = true
		else: break
	if changed:
		body = string.join(body,'') + '\n' # Add back one last newline.
		# trace(`body`)
		v.setBodyStringOrPane(body)
		# Don't set the dirty bit: it would just be annoying.
</t>
<t tx="ekr.20040117170612"># This is used only to associate p.t with p.v.t.

if 1: # Good for compatibility, bad for finding conversion problems.

	def __getattr__ (self,attr):
		
		# N.B. Using __getAttr__ automatically
		# keeps p.t in synch with p.v.t.
		if attr=="t":
			return self.v.t
		else:
			# Only called when normal lookup fails.
			raise AttributeError</t>
<t tx="ekr.20040117171654"># Using this routine can generate huge numbers of temporary positions during a tree traversal.

def copy (self):
	
	""""Return an independent copy of a position."""

	return position(self.v,self.stack)</t>
<t tx="ekr.20040117173448">@
The test "if p" is the _only_ correct way to test whether a position p is valid.
In particular, tests like "if p is None" or "if p is not None" will not work properly.
@c

def __nonzero__ ( self):
	
	"""Return true if a position is valid."""

	return self.v is not None</t>
<t tx="ekr.20040117181936">@nocolor

- (done) Disable all write logic.
- (done) Test all position code.
- (done) Get read logic working.
- (done) Get drag working.
- (done) Get all menu enablers working
- (done) Get insert/delete/clone working.
- (done) Get write logic working.
- (done) Get copy/paste nodes working.

- Get find command working.
- Get import/export working.
- (partial) Get undo/redo working.</t>
<t tx="ekr.20040117184516"></t>
<t tx="ekr.20040118090055">https://sourceforge.net/forum/message.php?msg_id=2380238
By: dthein

I've submitted a patch and bug report to the Tk project.

The patch, #879073, for those that want to fix this problem on their systems,
is at:

http://sourceforge.net/tracker/?func=detail&amp;aid=879073&amp;group_id=12997&amp;atid=31299
7

And the bug report, #879077, is at:

http://sourceforge.net/tracker/?func=detail&amp;aid=879077&amp;group_id=12997&amp;atid=11299
7

The patch is for 8.4.2.  If you have a different version, you can probably figure
out the changes needed by looking at the patch file.  If not, let me know your
version and I may be able to produce a patch for it.

Note: If you use tabs for anything other than leading whitespace, you will find
this patch really helpful.  I make lots of little tables when I'm documenting
or note-taking ... this fix really helped my sanity when making those tables
inside Leo.

Dave Hein</t>
<t tx="ekr.20040118101339.1"></t>
<t tx="ekr.20040118101339.4">@
Add colorizer support for the /bin/sh reserved keywords.

The &lt;&lt; handle single-line comment &gt;&gt; block belongs to the "doNormalState" method of the colorizer class and is needed to avoid that the identifier "$#" starts a single line comment.</t>
<t tx="ekr.20040118101339.5">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;leo_file&gt;
&lt;leo_header file_format="1" tnodes="1" max_tnode_index="1"/&gt;
&lt;vnodes&gt;
&lt;v t="ekr.20031218072017.369" a="V"&gt;&lt;vh&gt;&amp;lt;&amp;lt; Create the Target Language frame &amp;gt;&amp;gt; frame&lt;/vh&gt;&lt;/v&gt;
&lt;/vnodes&gt;
&lt;tnodes&gt;
&lt;t tx="ekr.20031218072017.369"&gt;# Frame and title
w,target = gui.create_labeled_frame (outer,caption="Default Target Language")
w.pack(padx=2,pady=2,expand=1,fill="x")

# Frames for two columns of radio buttons
lt = Tk.Frame(target)
rt = Tk.Frame(target)
lt.pack(side="left")
rt.pack(side="right")

# Left column of radio buttons.
left_data = [
	("ActionScript", "actionscript"),
	("C/C++","c"),
	("CWEB", "cweb"),
	("elisp","elisp"),
	("HTML", "html"),
	("Java", "java"),
	("LaTeX", "latex"),
	("Pascal", "pascal")]

for text,value in left_data:
	button = Tk.Radiobutton(lt,anchor="w",text=text,
		variable=self.lang_var,value=value,command=self.set_lang)
	button.pack(fill="x") 
	
# Right column of radio buttons.
right_data = [
	("Perl", "perl"),
	("Perl+POD", "perlpod"),
	("PHP", "php"),
	("Plain Text", "plain"),
	("Python", "python"),
	("Rebol", "rebol"),
	("Shell", "shell"),
	("tcl/tk", "tcltk")]
	
for text,value in right_data:
	button = Tk.Radiobutton(rt,anchor="w",text=text,
		variable=self.lang_var,value=value,command=self.set_lang)
	button.pack(fill="x")
&lt;/t&gt;
&lt;/tnodes&gt;
&lt;/leo_file&gt;
# Internally, lower case is used for all language names.
self.language_delims_dict = {
	"actionscript" : "// /* */", #jason 2003-07-03
	"c" : "// /* */", # C, C++ or objective C.
	"cweb" : "@q@ @&gt;", # Use the "cweb hack"
	"elisp" : ";",
	"forth" : "_\\_ _(_ _)_", # Use the "REM hack"
	"fortran" : "C",
	"fortran90" : "!",
	"html" : "&lt;!-- --&gt;",
	"java" : "// /* */",
	"latex" : "%",
	"pascal" : "// { }",
	"perl" : "#",
	"perlpod" : "# __=pod__ __=cut__", # 9/25/02: The perlpod hack.
	"php" : "//",
	"plain" : "#", # We must pick something.
	"python" : "#",
	"rebol" : ";", #jason 2003-07-03
	"shell" : "#",  # shell scripts
	"tcltk" : "#",
	"unknown" : "#" } # Set when @comment is seen.
	
self.language_extension_dict = {
	"actionscript" : "as", #jason 2003-07-03
	"c" : "c", 
	"cweb" : "w",
	"elisp" : "el",
	"forth" : "forth",
	"fortran" : "f",
	"fortran90" : "f",
	"html" : "html",
	"java" : "java",
	"latex" : "tex", # 1/8/04
	"noweb" : "nw",
	"pascal" : "p",
	"perl" : "perl",
	"perlpod" : "perl", 
	"php" : "php",
	"plain" : "txt",
	"python" : "py",
	"rebol" : "r",  #jason 2003-07-03
	"shell" : "sh", # DS, 040113
	"tex" : "tex",
	"tcltk" : "tcl",
	"unknown" : "txt" } # Set when @comment is seen.</t>
<t tx="ekr.20040118101339.6"># Frame and title
w,target = gui.create_labeled_frame (outer,caption="Default Target Language")
w.pack(padx=2,pady=2,expand=1,fill="x")

# Frames for two columns of radio buttons
lt = Tk.Frame(target)
rt = Tk.Frame(target)
lt.pack(side="left")
rt.pack(side="right")

# Left column of radio buttons.
left_data = [
	("ActionScript", "actionscript"),
	("C/C++","c"),
	("CWEB", "cweb"),
	("elisp","elisp"),
	("HTML", "html"),
	("Java", "java"),
	("LaTeX", "latex"),
	("Pascal", "pascal")]

for text,value in left_data:
	button = Tk.Radiobutton(lt,anchor="w",text=text,
		variable=self.lang_var,value=value,command=self.set_lang)
	button.pack(fill="x") 
	
# Right column of radio buttons.
right_data = [
	("Perl", "perl"),
	("Perl+POD", "perlpod"),
	("PHP", "php"),
	("Plain Text", "plain"),
	("Python", "python"),
	("Rebol", "rebol"),
	("Shell", "shell"), # DS, 040113
	("tcl/tk", "tcltk")]
	
for text,value in right_data:
	button = Tk.Radiobutton(rt,anchor="w",text=text,
		variable=self.lang_var,value=value,command=self.set_lang)
	button.pack(fill="x")
</t>
<t tx="ekr.20040118101339.7"># Define has_string, keywords, single_comment_start, block_comment_start, block_comment_end.

if self.language == "cweb": # Use C comments, not cweb sentinel comments.
	delim1,delim2,delim3 = set_delims_from_language("c")
elif self.comment_string:
	delim1,delim2,delim3 = set_delims_from_string(self.comment_string)
elif self.language == "plain": # 1/30/03
	delim1,delim2,delim3 = None,None,None
else:
	delim1,delim2,delim3 = set_delims_from_language(self.language)

self.single_comment_start = delim1
self.block_comment_start = delim2
self.block_comment_end = delim3

# A strong case can be made for making this code as fast as possible.
# Whether this is compatible with general language descriptions remains to be seen.
self.has_string = self.language != "plain"
if self.language == "plain":
	self.string_delims = ()
elif self.language in ("elisp","html"):
	self.string_delims = ('"')
else:
	self.string_delims = ("'",'"')
self.has_pp_directives = self.language in ("c","cweb","latex")

# The list of languages for which keywords exist.
# Eventually we might just use language_delims_dict.keys()
languages = [
	"actionscript","c","cweb","elisp","html","java","latex",
	"pascal","perl","perlpod","php","python","rebol",
	"shell", # DS, 040113
	"tcltk"]

self.keywords = []
if self.language == "cweb":
	for i in self.c_keywords:
		self.keywords.append(i)
	for i in self.cweb_keywords:
		self.keywords.append(i)
else:
	for name in languages:
		if self.language==name: 
			# trace("setting keywords for",name)
			self.keywords = getattr(self, name + "_keywords")

# Color plain text unless we are under the control of @nocolor.
# state = choose(self.flag,"normal","nocolor")
state = self.setFirstLineState()

if 1: # 10/25/02: we color both kinds of references in cweb mode.
	self.lb = "&lt;&lt;"
	self.rb = "&gt;&gt;"
else:
	self.lb = choose(self.language == "cweb","@&lt;","&lt;&lt;")
	self.rb = choose(self.language == "cweb","@&gt;","&gt;&gt;")</t>
<t tx="ekr.20040118101339.8">&lt;&lt; actionscript keywords &gt;&gt;
&lt;&lt; c keywords &gt;&gt;
cweb_keywords = c_keywords
&lt;&lt; elisp keywords&gt;&gt;
&lt;&lt; html keywords &gt;&gt;
&lt;&lt; java keywords &gt;&gt;
&lt;&lt; latex keywords &gt;&gt;
&lt;&lt; pascal keywords &gt;&gt;
&lt;&lt; perl keywords &gt;&gt;
perlpod_keywords = perl_keywords
&lt;&lt; python keywords &gt;&gt;
&lt;&lt; tcl/tk keywords &gt;&gt;
&lt;&lt; php keywords &gt;&gt;
&lt;&lt; rebol keywords &gt;&gt;
&lt;&lt; shell keywords &gt;&gt;</t>
<t tx="ekr.20040118101339.9">actionscript_keywords = (
#Jason 2003-07-03 
#Actionscript keywords for Leo adapted from UltraEdit syntax highlighting
"break", "call", "continue", "delete", "do", "else", "false", "for", "function", "goto", "if", "in", "new", "null", "return", "true", "typeof", "undefined", "var", "void", "while", "with", "#include", "catch", "constructor", "prototype", "this", "try", "_parent", "_root", "__proto__", "ASnative", "abs", "acos", "appendChild", "asfunction", "asin", "atan", "atan2", "attachMovie", "attachSound", "attributes", "BACKSPACE", "CAPSLOCK", "CONTROL", "ceil", "charAt", "charCodeAt", "childNodes", "chr", "cloneNode", "close", "concat", "connect", "cos", "createElement", "createTextNode", "DELETEKEY", "DOWN", "docTypeDecl", "duplicateMovieClip", "END", "ENTER", "ESCAPE", "enterFrame", "entry", "equal", "eval", "evaluate", "exp", "firstChild", "floor", "fromCharCode", "fscommand", "getAscii", "getBeginIndex", "getBounds", "getBytesLoaded", "getBytesTotal", "getCaretIndex", "getCode", "getDate", "getDay", "getEndIndex", "getFocus", "getFullYear", "getHours", "getMilliseconds", "getMinutes", "getMonth", "getPan", "getProperty", "getRGB", "getSeconds", "getTime", "getTimer", "getTimezoneOffset", "getTransform", "getURL", "getUTCDate", "getUTCDay", "getUTCFullYear", "getUTCHours", "getUTCMilliseconds", "getUTCMinutes", "getUTCMonth", "getUTCSeconds", "getVersion", "getVolume", "getYear", "globalToLocal", "gotoAndPlay", "gotoAndStop", "HOME", "haschildNodes", "hide", "hitTest", "INSERT", "Infinity", "ifFrameLoaded", "ignoreWhite", "indexOf", "insertBefore", "int", "isDown", "isFinite", "isNaN", "isToggled", "join", "keycode", "keyDown", "keyUp", "LEFT", "LN10", "LN2", "LOG10E", "LOG2E", "lastChild", "lastIndexOf", "length", "load", "loaded", "loadMovie", "loadMovieNum", "loadVariables", "loadVariablesNum", "localToGlobal", "log", "MAX_VALUE", "MIN_VALUE", "max", "maxscroll", "mbchr", "mblength", "mbord", "mbsubstring", "min", "NEGATIVE_INFINITY", "NaN", "newline", "nextFrame", "nextScene", "nextSibling", "nodeName", "nodeType", "nodeValue", "on", "onClipEvent", "onClose", "onConnect", "onData", "onLoad", "onXML", "ord", "PGDN", "PGUP", "PI", "POSITIVE_INFINITY", "parentNode", "parseFloat", "parseInt", "parseXML", "play", "pop", "pow", "press", "prevFrame", "previousSibling", "prevScene", "print", "printAsBitmap", "printAsBitmapNum", "printNum", "push", "RIGHT", "random", "release", "removeMovieClip", "removeNode", "reverse", "round", "SPACE", "SQRT1_2", "SQRT2", "scroll", "send", "sendAndLoad", "set", "setDate", "setFocus", "setFullYear", "setHours", "setMilliseconds", "setMinutes", "setMonth", "setPan", "setProperty", "setRGB", "setSeconds", "setSelection", "setTime", "setTransform", "setUTCDate", "setUTCFullYear", "setUTCHours", "setUTCMilliseconds", "setUTCMinutes", "setUTCMonth", "setUTCSeconds", "setVolume", "setYear", "shift", "show", "sin", "slice", "sort", "start", "startDrag", "status", "stop", "stopAllSounds", "stopDrag", "substr", "substring", "swapDepths", "splice", "split", "sqrt", "TAB", "tan", "targetPath", "tellTarget", "toggleHighQuality", "toLowerCase", "toString", "toUpperCase", "trace", "UP", "UTC", "unescape", "unloadMovie", "unLoadMovieNum", "unshift", "updateAfterEvent", "valueOf", "xmlDecl", "_alpha", "_currentframe", "_droptarget", "_focusrect", "_framesloaded", "_height", "_highquality", "_name", "_quality", "_rotation", "_soundbuftime", "_target", "_totalframes", "_url", "_visible", "_width", "_x", "_xmouse", "_xscale", "_y", "_ymouse", "_yscale", "and", "add", "eq", "ge", "gt", "le", "lt", "ne", "not", "or", "Array", "Boolean", "Color", "Date", "Key", "Math", "MovieClip", "Mouse", "Number", "Object", "Selection", "Sound", "String", "XML", "XMLSocket"
)</t>
<t tx="ekr.20040118101339.10">c_keywords = (
	# C keywords
	"auto","break","case","char","continue",
	"default","do","double","else","enum","extern",
	"float","for","goto","if","int","long","register","return",
	"short","signed","sizeof","static","struct","switch",
	"typedef","union","unsigned","void","volatile","while",
	# C++ keywords
	"asm","bool","catch","class","const_cast",
	"delete","dynamic_cast","explicit","false","friend",
	"inline","mutable","namespace","new","operator",
	"private","protected","public","reinterpret_cast","static_cast",
	"template","this","throw","true","try",
	"typeid","typename","using","virtual","wchar_t")</t>
<t tx="ekr.20040118101339.11"># EKR: needs more work.
elisp_keywords = (
	# Maybe...
	"error","princ",
	# More typical of other lisps...
	"apply","eval",
	"t","nil",
	"and","or","not",
	"cons","car","cdr",
	"cond",
	"defconst","defun","defvar",
	"eq","ne","equal","gt","ge","lt","le",
	"if",
	"let",
	"mapcar",
	"prog","progn",
	"set","setq",
	"type-of",
	"unless",
	"when","while")</t>
<t tx="ekr.20040118101339.12"># No longer used by syntax colorer.
html_keywords = ()

if 0: # Not used at present.
	unused_keywords = (
		# html constructs.
		"a","body","cf",
		"h1","h2","h3","h4","h5","h6",
		"head","html","hr",
		"i","img","li","lu","meta",
		"p","title","ul",
		# Common tags
		"caption","col","colgroup",
		"table","tbody","td","tfoot","th","thead","tr",
		"script","style")

	html_specials = ( "&lt;%","%&gt;" )</t>
<t tx="ekr.20040118101339.13">java_keywords = (
	"abstract","boolean","break","byte","byvalue",
	"case","cast","catch","char","class","const","continue",
	"default","do","double","else","extends",
	"false","final","finally","float","for","future",
	"generic","goto","if","implements","import","inner",
	"instanceof","int","interface","long","native",
	"new","null","operator","outer",
	"package","private","protected","public","rest","return",
	"short","static","super","switch","synchronized",
	"this","throw","transient","true","try",
	"var","void","volatile","while")</t>
<t tx="ekr.20040118101339.14">#If you see two idenitical words, with minor capitalization differences
#DO NOT ASSUME that they are the same word. For example \vert produces
#a single vertical line and \Vert produces a double vertical line
#Marcus A. Martin.

latex_special_keyword_characters = "@(){}%"

latex_keywords = (
	#special keyworlds
	"\\%", # 11/9/03
	"\\@", "\\(", "\\)", "\\{", "\\}",
	#A
	"\\acute", "\\addcontentsline", "\\addtocontents", "\\addtocounter", "\\address",
	"\\addtolength", "\\addvspace", "\\AE", "\\ae", "\\aleph", "\\alph", "\\angle",
	"\\appendix", 
	"\\approx",	"\\arabic", "\\arccos", "\\arcsin", "\\arctan", "\\ast", "\\author",
	#B
	"\\b", "\\backmatter", "\\backslash", "\\bar", "\\baselineskip", "\\baselinestretch",
	"\\begin", "\\beta", "\\bezier", "\\bf", "\\bfseries", "\\bibitem", "\\bigcap", 
	"\\bigcup", "\\bigodot", "\\bigoplus", "\\bigotimes", "\\bigskip", "\\biguplus", 
	"\\bigvee", "\\bigwedge",	"\\bmod", "\\boldmath", "\\Box", "\\breve", "\\bullet",
	#C
	"\\c", "\\cal", "\\caption", "\\cdot", "\\cdots", "\\centering", "\\chapter", 
	"\\check", "\\chi", "\\circ", "\\circle", "\\cite", "\\cleardoublepage", "\\clearpage", 
	"\\cline",	"\\closing", "\\clubsuit", "\\coprod", "\\copywright", "\\cos", "\\cosh", 
	"\\cot", "\\coth",	"csc",
	#D
	"\\d", "\\dag", "\\dashbox", "\\date", "\\ddag", "\\ddot", "\\ddots", "\\decl", 
	"\\deg", "\\Delta", 
	"\\delta", "\\depthits", "\\det", 
	"\\DH", "\\dh", "\\Diamond", "\\diamondsuit", "\\dim", "\\div", "\\DJ", "\\dj", 
	"\\documentclass", "\\documentstyle", 
	"\\dot", "\\dotfil", "\\downarrow",
	#E
	"\\ell", "\\em", "\\emph", "\\end", "\\enlargethispage", "\\ensuremath", 
	"\\enumi", "\\enuii", "\\enumiii", "\\enuiv", "\\epsilon", "\\equation", "\\equiv",	
	"\\eta", "\\example", "\\exists", "\\exp",
	#F
	"\\fbox", "\\figure", "\\flat", "\\flushbottom", "\\fnsymbol", "\\footnote", 
	"\\footnotemark", "\\fotenotesize", 
	"\\footnotetext", "\\forall", "\\frac", "\\frame", "\\framebox", "\\frenchspacing", 
	"\\frontmatter",
	#G
	"\\Gamma", "\\gamma", "\\gcd", "\\geq", "\\gg", "\\grave", "\\guillemotleft", 
	"\\guillemotright",	"\\guilsinglleft", "\\guilsinglright",
	#H
	"\\H", "\\hat", "\\hbar", "\\heartsuit", "\\heightits", "\\hfill", "\\hline", "\\hom",
	"\\hrulefill",	"\\hspace", "\\huge",	"\\Huge",	"\\hyphenation"
	#I
	"\\Im", "\\imath", "\\include", "includeonly", "indent", "\\index", "\\inf", "\\infty", 
	"\\input", "\\int", "\\iota",	"\\it", "\\item", "\\itshape",
	#J
	"\\jmath", "\\Join",
	#K
	"\\k", "\\kappa", "\\ker", "\\kill",
	#L
	"\\label", "\\Lambda", "\\lambda", "\\langle", "\\large", "\\Large", "\\LARGE", 
	"\\LaTeX", "\\LaTeXe", 
	"\\ldots", "\\leadsto", "\\left", "\\Leftarrow", "\\leftarrow", "\\lefteqn", "\\leq",
	"\\lg", "\\lhd", "\\lim", "\\liminf", "\\limsup", "\\line", 	"\\linebreak", 
	"\\linethickness", "\\linewidth",	"\\listfiles",
	"\\ll", "\\ln", "\\location", "\\log", "\\Longleftarrow", "\\longleftarrow", 
	"\\Longrightarrow",	"longrightarrow",
	#M
	"\\mainmatter", "\\makebox", "\\makeglossary", "\\makeindex","\\maketitle", "\\markboth", "\\markright",
	"\\mathbf", "\\mathcal", "\\mathit", "\\mathnormal", "\\mathop",
	"\\mathrm", "\\mathsf", "\\mathtt", "\\max", "\\mbox", "\\mdseries", "\\medskip",
	"\\mho", "\\min", "\\mp", "\\mpfootnote", "\\mu", "\\multicolumn", "\\multiput",
	#N
	"\\nabla", "\\natural", "\\nearrow", "\\neq", "\\newcommand", "\\newcounter", 
	"\\newenvironment", "\\newfont",
	"\\newlength",	"\\newline", "\\newpage", "\\newsavebox", "\\newtheorem", "\\NG", "\\ng",
	"\\nocite", "\\noindent", "\\nolinbreak", "\\nopagebreak", "\\normalsize",
	"\\not", "\\nu", "nwarrow",
	#O
	"\\Omega", "\\omega", "\\onecolumn", "\\oint", "\\opening", "\\oval", 
	"\\overbrace", "\\overline",
	#P
	"\\P", "\\page", "\\pagebreak", "\\pagenumbering", "\\pageref", "\\pagestyle", 
	"\\par", "\\parbox",	"\\paragraph", "\\parindent", "\\parskip", "\\part", 
	"\\partial", "\\per", "\\Phi", 	"\\phi",	"\\Pi", "\\pi", "\\pm", 
	"\\pmod", "\\pounds", "\\prime", "\\printindex", "\\prod", "\\propto", "\\protext", 
	"\\providecomamnd", "\\Psi",	"\\psi", "\\put",
	#Q
	"\\qbezier", "\\quoteblbase", "\\quotesinglbase",
	#R
	"\\r", "\\raggedbottom", "\\raggedleft", "\\raggedright", "\\raisebox", "\\rangle", 
	"\\Re", "\\ref", 	"\\renewcommand", "\\renewenvironment", "\\rhd", "\\rho", "\\right", 
	"\\Rightarrow",	"\\rightarrow", "\\rm", "\\rmfamily",
	"\\Roman", "\\roman", "\\rule", 
	#S
	"\\s", "\\samepage", "\\savebox", "\\sbox", "\\sc", "\\scriptsize", "\\scshape", 
	"\\searrow",	"\\sec", "\\section",
	"\\setcounter", "\\setlength", "\\settowidth", "\\settodepth", "\\settoheight", 
	"\\settowidth", "\\sf", "\\sffamily", "\\sharp", "\\shortstack", "\\Sigma", "\\sigma", 
	"\\signature", "\\sim", "\\simeq", "\\sin", "\\sinh", "\\sl", "\\SLiTeX",
	"\\slshape", "\\small", "\\smallskip", "\\spadesuit", "\\sqrt", "\\sqsubset",	
	"\\sqsupset", "\\SS",
	"\\stackrel", "\\star", "\\subsection", "\\subset", 
	"\\subsubsection", "\\sum", "\\sup", "\\supressfloats", "\\surd", "\\swarrow",
	#T
	"\\t", "\\table", "\\tableofcontents", "\\tabularnewline", "\\tan", "\\tanh", 
	"\\tau", "\\telephone",	"\\TeX", "\\textbf",
	"\\textbullet", "\\textcircled", "\\textcompworkmark",	"\\textemdash", 
	"\\textendash", "\\textexclamdown", "\\textheight", "\\textquestiondown", 
	"\\textquoteblleft", "\\textquoteblright", "\\textquoteleft",
	"\\textperiod", "\\textquotebl", "\\textquoteright", "\\textmd", "\\textit", "\\textrm", 
	"\\textsc", "\\textsl", "\\textsf", "\\textsuperscript", "\\texttt", "\\textup",
	"\\textvisiblespace", "\\textwidth", "\\TH", "\\th", "\\thanks", "\\thebibligraphy",
	"\\Theta", "theta", 
	"\\tilde", "\\thinlines", 
	"\\thispagestyle", "\\times", "\\tiny", "\\title",	"\\today", "\\totalheightits", 
	"\\triangle", "\\tt", 
	"\\ttfamily", "\\twocoloumn", "\\typeout", "\\typein",
	#U
	"\\u", "\\underbrace", "\\underline", "\\unitlength", "\\unlhd", "\\unrhd", "\\Uparrow",
	"\\uparrow",	"\\updownarrow", "\\upshape", "\\Upsilon", "\\upsilon", "\\usebox",	
	"\\usecounter", "\\usepackage", 
	#V
	"\\v", "\\value", "\\varepsilon", "\\varphi", "\\varpi", "\\varrho", "\\varsigma", 
	"\\vartheta", "\\vdots", "\\vec", "\\vector", "\\verb", "\\Vert", "\\vert", 	"\\vfill",
	"\\vline", "\\vphantom", "\\vspace",
	#W
	"\\widehat", "\\widetilde", "\\widthits", "\\wp",
	#X
	"\\Xi", "\\xi",
	#Z
	"\\zeta" )</t>
<t tx="ekr.20040118101339.15">pascal_keywords = (
	"and","array","as","begin",
	"case","const","class","constructor","cdecl"
	"div","do","downto","destructor","dispid","dynamic",
	"else","end","except","external",
	"false","file","for","forward","function","finally",
	"goto","if","in","is","label","library",
	"mod","message","nil","not","nodefault""of","or","on",
	"procedure","program","packed","pascal",
	"private","protected","public","published",
	"record","repeat","raise","read","register",
	"set","string","shl","shr","stdcall",
	"then","to","true","type","try","until","unit","uses",
	"var","virtual","while","with","xor"
	# object pascal
	"asm","absolute","abstract","assembler","at","automated",
	"finalization",
	"implementation","inherited","initialization","inline","interface",
	"object","override","resident","resourcestring",
	"threadvar",
	# limited contexts
	"exports","property","default","write","stored","index","name" )</t>
<t tx="ekr.20040118101339.16">perl_keywords = (
	"continue","do","else","elsif","format","for","format","for","foreach",
	"if","local","package","sub","tr","unless","until","while","y",
	# Comparison operators
	"cmp","eq","ge","gt","le","lt","ne",
	# Matching ooperators
	"m","s",
	# Unary functions
	"alarm","caller","chdir","cos","chroot","exit","eval","exp",
	"getpgrp","getprotobyname","gethostbyname","getnetbyname","gmtime",
	"hex","int","length","localtime","log","ord","oct",
	"require","reset","rand","rmdir","readlink",
	"scalar","sin","sleep","sqrt","srand","umask",
	# Transfer ops
	"next","last","redo","go","dump",
	# File operations...
	"select","open",
	# FL ops
	"binmode","close","closedir","eof",
	"fileno","getc","getpeername","getsockname","lstat",
	"readdir","rewinddir","stat","tell","telldir","write",
	# FL2 ops
	"bind","connect","flock","listen","opendir",
	"seekdir","shutdown","truncate",
	# FL32 ops
	"accept","pipe",
	# FL3 ops
	"fcntl","getsockopt","ioctl","read",
	"seek","send","sysread","syswrite",
	# FL4 &amp; FL5 ops
	"recv","setsocket","socket","socketpair",
	# Array operations
	"pop","shift","split","delete",
	# FLIST ops
	"sprintf","grep","join","pack",
	# LVAL ops
	"chop","defined","study","undef",
	# f0 ops
	"endhostent","endnetent","endservent","endprotoent",
	"endpwent","endgrent","fork",
	"getgrent","gethostent","getlogin","getnetent","getppid",
	"getprotoent","getpwent","getservent",
	"setgrent","setpwent","time","times","wait","wantarray",
	# f1 ops
	"getgrgid","getgrnam","getprotobynumber","getpwnam","getpwuid",
	"sethostent","setnetent","setprotoent","setservent",
	# f2 ops
	"atan2","crypt",
	"gethostbyaddr","getnetbyaddr","getpriority","getservbyname","getservbyport",
	"index","link","mkdir","msgget","rename",
	"semop","setpgrp","symlink","unpack","waitpid",
	# f2 or 3 ops
	"index","rindex","substr",
	# f3 ops
	"msgctl","msgsnd","semget","setpriority","shmctl","shmget","vec",
	# f4 &amp; f5 ops
	"semctl","shmread","shmwrite","msgrcv",
	# Assoc ops
	"dbmclose","each","keys","values",
	# List ops
	"chmod","chown","die","exec","kill",
	"print","printf","return","reverse",
	"sort","system","syscall","unlink","utime","warn")</t>
<t tx="ekr.20040118101339.17">php_keywords = ( # 08-SEP-2002 DTHEIN
	"__CLASS__", "__FILE__", "__FUNCTION__", "__LINE__",
	"and", "as", "break",
	"case", "cfunction", "class", "const", "continue",
	"declare", "default", "do",
	"else", "elseif", "enddeclare", "endfor", "endforeach",
	"endif", "endswitch",  "endwhile", "eval", "extends",
	"for", "foreach", "function", "global", "if",
	"new", "old_function", "or", "static", "switch",
	"use", "var", "while", "xor" )
	
# The following are supposed to be followed by ()
php_paren_keywords = (
	"array", "die", "echo", "empty", "exit",
	"include", "include_once", "isset", "list",
	"print", "require", "require_once", "return",
	"unset" )
	
# The following are handled by special case code:
# "&lt;?php", "?&gt;"
</t>
<t tx="ekr.20040118101339.18">python_keywords = (
	"and",       "del",       "for",       "is",        "raise",    
	"assert",    "elif",      "from",      "lambda",    "return",   
	"break",     "else",      "global",    "not",       "try",      
	"class",     "except",    "if",        "or",        "yield",   
	"continue",  "exec",      "import",    "pass",      "while",
	"def",       "finally",   "in",        "print",     "None")</t>
<t tx="ekr.20040118101339.19">rebol_keywords = (
#Jason 2003-07-03 
#based on UltraEdit syntax highlighting
"about", "abs", "absolute", "add", "alert", "alias", "all", "alter", "and", "and~", "any", "append", "arccosine", "arcsine", "arctangent", "array", "ask", "at",  
"back", "bind", "boot-prefs", "break", "browse", "build-port", "build-tag",  
"call", "caret-to-offset", "catch", "center-face", "change", "change-dir", "charset", "checksum", "choose", "clean-path", "clear", "clear-fields", "close", "comment", "complement", "compose", "compress", "confirm", "continue-post", "context", "copy", "cosine", "create-request", "crypt", "cvs-date", "cvs-version",  
"debase", "decode-cgi", "decode-url", "decompress", "deflag-face", "dehex", "delete", "demo", "desktop", "detab", "dh-compute-key", "dh-generate-key", "dh-make-key", "difference", "dirize", "disarm", "dispatch", "divide", "do", "do-boot", "do-events", "do-face", "do-face-alt", "does", "dsa-generate-key", "dsa-make-key", "dsa-make-signature", "dsa-verify-signature",  
"echo", "editor", "either", "else", "emailer", "enbase", "entab", "exclude", "exit", "exp", "extract", 
"fifth", "find", "find-key-face", "find-window", "flag-face", "first", "flash", "focus", "for", "forall", "foreach", "forever", "form", "forskip", "fourth", "free", "func", "function",  
"get", "get-modes", "get-net-info", "get-style",  
"halt", "has", "head", "help", "hide", "hide-popup",  
"if", "import-email", "in", "inform", "input", "insert", "insert-event-func", "intersect", 
"join", 
"last", "launch", "launch-thru", "layout", "license", "list-dir", "load", "load-image", "load-prefs", "load-thru", "log-10", "log-2", "log-e", "loop", "lowercase",  
"make", "make-dir", "make-face", "max", "maximum", "maximum-of", "min", "minimum", "minimum-of", "mold", "multiply",  
"negate", "net-error", "next", "not", "now",  
"offset-to-caret", "open", "open-events", "or", "or~", 
"parse", "parse-email-addrs", "parse-header", "parse-header-date", "parse-xml", "path-thru", "pick", "poke", "power", "prin", "print", "probe", "protect", "protect-system",  
"q", "query", "quit",  
"random", "read", "read-io", "read-net", "read-thru", "reboot", "recycle", "reduce", "reform", "rejoin", "remainder", "remold", "remove", "remove-event-func", "rename", "repeat", "repend", "replace", "request", "request-color", "request-date", "request-download", "request-file", "request-list", "request-pass", "request-text", "resend", "return", "reverse", "rsa-encrypt", "rsa-generate-key", "rsa-make-key", 
"save", "save-prefs", "save-user", "scroll-para", "second", "secure", "select", "send", "send-and-check", "set", "set-modes", "set-font", "set-net", "set-para", "set-style", "set-user", "set-user-name", "show", "show-popup", "sine", "size-text", "skip", "sort", "source", "split-path", "square-root", "stylize", "subtract", "switch",  
"tail", "tangent", "textinfo", "third", "throw", "throw-on-error", "to", "to-binary", "to-bitset", "to-block", "to-char", "to-date", "to-decimal", "to-email", "to-event", "to-file", "to-get-word", "to-hash", "to-hex", "to-idate", "to-image", "to-integer", "to-issue", "to-list", "to-lit-path", "to-lit-word", "to-local-file", "to-logic", "to-money", "to-none", "to-pair", "to-paren", "to-path", "to-rebol-file", "to-refinement", "to-set-path", "to-set-word", "to-string", "to-tag", "to-time", "to-tuple", "to-url", "to-word", "trace", "trim", "try",  
"unfocus", "union", "unique", "uninstall", "unprotect", "unset", "until", "unview", "update", "upgrade", "uppercase", "usage", "use",  
"vbug", "view", "view-install", "view-prefs",  
"wait", "what", "what-dir", "while", "write", "write-io",  
"xor", "xor~",  
"action!", "any-block!", "any-function!", "any-string!", "any-type!", "any-word!",  
"binary!", "bitset!", "block!",  
"char!",  
"datatype!", "date!", "decimal!", 
"email!", "error!", "event!",  
"file!", "function!",  
"get-word!",  
"hash!",  
"image!", "integer!", "issue!",  
"library!", "list!", "lit-path!", "lit-word!", "logic!",  
"money!",  
"native!", "none!", "number!",  
"object!", "op!",  
"pair!", "paren!", "path!", "port!",  
"refinement!", "routine!",  
"series!", "set-path!", "set-word!", "string!", "struct!", "symbol!",  
"tag!", "time!", "tuple!",  
"unset!", "url!",  
"word!",  
"any-block?", "any-function?", "any-string?", "any-type?", "any-word?",  
"binary?", "bitset?", "block?",  
"char?", "connected?", "crypt-strength?", 
"datatype?", "date?", "decimal?", "dir?",  
"email?", "empty?", "equal?", "error?", "even?", "event?", "exists?", "exists-key?",
"file?", "flag-face?", "found?", "function?",  
"get-word?", "greater-or-equal?", "greater?",  
"hash?", "head?",  
"image?", "in-window?", "index?", "info?", "input?", "inside?", "integer?", "issue?",  
"length?", "lesser-or-equal?", "lesser?", "library?", "link-app?", "link?", "list?", "lit-path?", "lit-word?", "logic?",  
"modified?", "money?",  
"native?", "negative?", "none?", "not-equal?", "number?",  
"object?", "odd?", "offset?", "op?", "outside?",  
"pair?", "paren?", "path?", "port?", "positive?",  
"refinement?", "routine?",  
"same?", "screen-offset?", "script?", "series?", "set-path?", "set-word?", "size?", "span?", "strict-equal?", "strict-not-equal?", "string?", "struct?",  
"tag?", "tail?", "time?", "tuple?", "type?",  
"unset?", "url?",  
"value?", "view?", 
"within?", "word?",  
"zero?"
)</t>
<t tx="ekr.20040118101339.20">tcltk_keywords = ( # Only the tcl keywords are here.
	"after",     "append",    "array",
	"bgerror",   "binary",    "break",
	"catch",     "cd",        "clock",
	"close",     "concat",    "continue",
	"dde",
	"encoding",  "eof",       "eval",
	"exec",      "exit",      "expr",
	"fblocked",  "fconfigure","fcopy",     "file",      "fileevent",
	"filename",  "flush",     "for",       "foreach",   "format",
	"gets",      "glob",      "global",
	"history",
	"if",        "incr",      "info",      "interp",
	"join",
	"lappend",   "lindex",    "linsert",   "list",      "llength",
	"load",      "lrange",    "lreplace",  "lsearch",   "lsort",
	"memory",    "msgcat",
	"namespace",
	"open",
	"package",   "parray",    "pid",
	"proc",      "puts",      "pwd",
	"read",      "regexp",    "registry",   "regsub",
	"rename",    "resource",  "return",
	"scan",      "seek",      "set",        "socket",   "source",
	"split",     "string",    "subst",      "switch",
	"tell",      "time",      "trace",
	"unknown",   "unset",     "update",     "uplevel",   "upvar",
	"variable",  "vwait",
	"while" )</t>
<t tx="ekr.20040118101339.21">shell_keywords = (
	# reserved keywords
	"case","do","done","elif","else","esac","fi",
	"for","if","in","then",
	"until","while",
	"break","cd","chdir","continue","eval","exec",
	"exit","kill","newgrp","pwd","read","readonly",
	"return","shift","test","trap","ulimit",
	"umask","wait"
)</t>
<t tx="ekr.20040118101339.22"># print "single-line comment i,s:",i,s

if self.language == "cweb" and self.latex_cweb_comments:
	j = i + len(self.single_comment_start)
	self.tag("comment",i,j)
	self.doLatexLine(s,j,len(s))
	i = len(s)
elif self.language == "shell" and (i&gt;0 and s[i-1]=='$'):
	i += 1 # '$#' in shell should not start a comment (DS 040113)
else:
	j = len(s)
	if not doHook("color-optional-markup",
		colorer=self,v=self.v,s=s,i=i,j=j,colortag="comment"):
		self.tag("comment",i,j)
	i = j</t>
<t tx="ekr.20040119170255"></t>
<t tx="ekr.20040119170255.1">@nocolor

Title: Colorize Python source using the built-in tokenizer 
Submitter: Jürgen Hermann 
Last Updated: 2001/04/06 
Version no: 1.2 

This code is part of MoinMoin (http://moin.sourceforge.net/) and converts Python source code to HTML markup, rendering comments, keywords, operators, numeric and string literals in different colors.

It shows how to use the built-in keyword, token and tokenize modules to scan Python source code and re-emit it with no changes to its original formatting (which is the hard part).

The test code at the bottom of the module formats itself and launches a browser with the result.</t>
<t tx="ekr.20040119170255.2">"""MoinMoin - Python Source Parser."""

# Warning: cStringIO does not handle Unicode properly.
# It would probably be best to use lists instead...

import cgi, string, sys, cStringIO
import keyword, token, tokenize

&lt;&lt; define constants &gt;&gt;

@others

if __name__ == "__main__":

	test()</t>
<t tx="ekr.20040119170255.3">def test():

	import os, sys
	print "Formatting..."

	# open own source
	source = open('python.py').read()
	dest   = open('python.html','wt')

	# write colorized version to "python.html"
	Parser(source,dest).format()
	dest.close()

	# load HTML page into browser
	if os.name == "nt":
		os.system("explorer python.html")
	else:
		os.system("netscape python.html &amp;")
</t>
<t tx="ekr.20040119170255.4">class Parser:

	""" Send colored python source."""
	@others</t>
<t tx="ekr.20040119170255.5">_KEYWORD = token.NT_OFFSET + 1
_TEXT    = token.NT_OFFSET + 2

_colors = {
	token.NUMBER:       '#0080C0',
	token.OP:           '#0000C0',
	token.STRING:       '#004080',
	tokenize.COMMENT:   '#008000',
	token.NAME:         '#000000',
	token.ERRORTOKEN:   '#FF8080',
	_KEYWORD:           '#C00000',
	_TEXT:              '#000000',
}</t>
<t tx="ekr.20040119170255.6">def __init__(self,raw,out=sys.stdout):

	""" Store the source text."""

	self.raw = string.strip(string.expandtabs(raw)) # EKR: 8-space tabs by default.
	self.out = out</t>
<t tx="ekr.20040119170255.7">def format(self):

	""" Parse and send the colored source."""

	# store line offsets in self.lines
	self.lines = [0, 0]
	pos = 0
	while 1:
		pos = string.find(self.raw,'\n',pos) + 1
		if not pos: break
		self.lines.append(pos)

	self.lines.append(len(self.raw))

	# parse the source and write it
	self.pos = 0
	text = cStringIO.StringIO(self.raw)

	self.out.write('&lt;pre&gt;&lt;font face="Lucida,Courier New"&gt;')

	try:
		# This generates calls to Parser.__call__.
		tokenize.tokenize(text.readline,self)
	except tokenize.TokenError, ex:
		msg = ex[0]
		line = ex[1][0]
		self.out.write("&lt;h3&gt;ERROR: %s&lt;/h3&gt;%s\n" % (
			msg, self.raw[self.lines[line]:]))

	self.out.write('&lt;/font&gt;&lt;/pre&gt;')</t>
<t tx="ekr.20040119170255.8">def __call__(self, toktype, toktext, (srow,scol), (erow,ecol), line):
	""" Token handler."""
	
	# toktyp:       the token type.
	# toktext:      the token string.
	# (srow, scol): the row and column (ints) where the token begins in the source.
	# (erow, ecol): the row and column (ints) where the token ends in the source.
	# line:         the (logical) line on which the token was found: continuation lines are included.

	# EKR: called by tokenize.tokenize
	if 0:
		print "type", toktype, token.tok_name[toktype], "text", toktext,
		print "start", srow,scol, "end", erow,ecol, "&lt;br&gt;"

	# calculate new positions
	oldpos = self.pos
	newpos = self.lines[srow] + scol
	self.pos = newpos + len(toktext)

	# handle newlines
	if toktype in [token.NEWLINE, tokenize.NL]:
		self.out.write('\n')
		return

	# send the original whitespace, if needed
	if newpos &gt; oldpos:
		self.out.write(self.raw[oldpos:newpos])

	# skip indenting tokens
	if toktype in [token.INDENT, token.DEDENT]:
		self.pos = newpos
		return

	# map token type to a color group
	if token.LPAR &lt;= toktype and toktype &lt;= token.OP:
		toktype = token.OP
	elif toktype == token.NAME and keyword.iskeyword(toktext):
		toktype = _KEYWORD
	color = _colors.get(toktype,_colors[_TEXT])

	style = ''
	if toktype == token.ERRORTOKEN:
		style = ' style="border: solid 1.5pt #FF0000;"'

	# send text
	self.out.write('&lt;font color="%s"%s&gt;' % (color, style))
	self.out.write(cgi.escape(toktext)) # do html escapes.
	self.out.write('&lt;/font&gt;')</t>
<t tx="ekr.20040123102724"></t>
<t tx="ekr.20040123102724.1">@nocolor

https://sourceforge.net/forum/message.php?msg_id=2382892
By: paulpaterson

Should be quite easy ...

(this list ex Alex Martelli from c.l.py)

http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/52298

http://www.norvig.com/python/py2html.html

http://www.danbala.com/python/lpy/lpy.py.html

The first one is all the code you need. The others would require an additional
module/dependency.

Paul</t>
<t tx="ekr.20040123102724.2">@nocolor</t>
<t tx="ekr.20040123102724.3">
https://sourceforge.net/forum/message.php?msg_id=2385991
By: nobody

I often found myself using the same template for many projects but something differs in them. E.g. name of files. So my offer is add new directive variable:

@variable ProjectName MyFunProject

Later in parent node, child nodes or headers I could use this as:

$(ProjectNode).py or smth. similar.
This line when tangling could be replaces with
MyFunProject.py

Of course, there comes some complexity with untangling, but it is just an offer :)

Dalius
</t>
<t tx="ekr.20040123102724.4">https://sourceforge.net/forum/message.php?msg_id=2386199
By: nobody

Dalius-
FWIW, I like it! I also can think of a LOAD of variations (i.e., multi-line
variables, etc.), but I'll limit myself to one thing: 'variable' by definition
should be changeable. May I suggest you call the directive "@constant"?

--Rich

</t>
<t tx="ekr.20040123102724.5">https://sourceforge.net/forum/message.php?msg_id=2386359
By: paulpaterson

I like this idea because I think templating is an important "design pattern"
that Leo could usefully support. Currently you can only do this in a limited
way by cloning nodes across derived files, which is something Edward doesn't
like to do because it makes reading derived files ambiguous (same information
in more than one place). I still do this because I rarely read files into Leo,
I mostly explicitely tangle files out of Leo.

Back to your idea ;) ISTM that your idea works well for directives (you can
do the variable substitution) but for general text (where I think there is a
bigger gain) there are two issues,

1. The template itself is now present in multiple derived files (see above)

2. The file derived from the template has now lost the variable name because
it was substituted out for the variable value

The end result is that templated files would almost certainly have to be a one
way street for Leo - they are derived from the Leo file but never read back
in. If you don't mind having this restriction, which basically means you have
to use @root nodes, then I don't see a problem.

Presumably most of this could all be done with a tangle_done script - the only
problem is how to change directives.</t>
<t tx="ekr.20040123102724.6">https://sourceforge.net/forum/message.php?msg_id=2389750
By: daliuslt

Just for your interests where is one way to create constants in leo (even multiline).
Let's way we have outline:

+-[ ] @file-nosent objects.mak
|   +-[clone] &lt;&lt; my_const &gt;&gt;
+-[ ] @file-nosent makefile
    +-[close] &lt;&lt; my_const &gt;&gt;

objects.mak is:
--
&lt;&lt; my_const &gt;&gt;.o:
gcc -g -c &lt;&lt; my_const &gt;&gt;.c -o &lt;&lt; my_const &gt;&gt;.o

&lt;&lt; my_const &gt;&gt;cmd.o:
gcc -g -c &lt;&lt; my_const &gt;&gt;cmd.c -o &lt;&lt; my_const &gt;&gt;cmd.o
--

makefile is
--
&lt;&lt; my_const &gt;&gt;:
gcc &lt;&lt; my_const &gt;&gt;.o &lt;&lt; my_const &gt;&gt;cmd.o -o &lt;&lt; my_const &gt;&gt;
--

&lt;&lt; my_const &gt;&gt; can be:
test

While it works pretty good it still have some drawbacks:
1. You are forced to use @file-nosent. You can edit your files outside of Leo.
2. You can't use &lt;&lt; my_const &gt;&gt; in header lines, while it would be really nice
if you could write
@file-nosent obj_&lt;&lt; my_const &gt;&gt;.mak
(Leo lacks introspection?)
3. Result is not 100% what you expect.

---

(constant = variable = define) ???

Constants and clones in fact are the same. Usually clones are used like symbolic
links (or shortcuts) not like clones or constants. I think this could be
separated.

Constants could be read back into leo. E.g.: you have constant value in leo
file and while reading back files to outline you change all values with constant
name.

I hope I am clear :)
Dalius</t>
<t tx="ekr.20040124073801"></t>
<t tx="ekr.20040124073929"></t>
<t tx="ekr.20040124074218.3"></t>
<t tx="ekr.20040125095950">from leoGlobals import *

def myCommand():
	print "my command"

c = top()

menuTable = (
	("My command",None,myCommand),) # Note the last comma.

c.frame.menu.createMenuItemsFromTable("Edit",menuTable)
</t>
<t tx="ekr.20040125105904">@nocolor

https://sourceforge.net/forum/message.php?msg_id=2381444
By: nobody

You might also want to look at aegis (http://aegis.sourceforge.net), in particular,
its off-line distribution model (where changesets can be packaged in to a file,
sent via e-mail, and imported into a remote repository), which could be useful
for a collaborative/networked version of Leo.
</t>
<t tx="ekr.20040125105904.1"></t>
<t tx="ekr.20040125105904.2">@nocolor

Changed:

if sys.platform not in ("linux1","linux2"):

to:

if sys.platform not in ("darwin",freebsd4","freebsd5","linux1","linux2"):</t>
<t tx="ekr.20040125114453">@nocolor
http://sourceforge.net/forum/message.php?msg_id=2391076
By: thyrsus

There is a lot of correct intepretation going on, but there are some errors.
As an example, the anaconda code, in text.py, contains the following lines.
I'll use periods for leading whitespace, the two characters ^I for leading tabs,
and a $ to indicate a newline:

class WaitWindow:
def pop(self):
	self.screen.popWindow()
	self.screen.refresh()

def __init__(self, screen, title, text):
	self.screen = screen
	width = 40
	if (len(text) &lt; width): width = len(text)

	t = TextboxReflowed(width, text)

	g = GridForm(self.screen, title, 1, 1)
	g.add(t, 0, 0)
	g.draw()
	self.screen.refresh()


After importing file text.py, I get three associated nodes like so:

[class WaitWindow]
.|
.+-[pop]
.|
.+-[__init__]

However, the contents of the nodes are off.  In node [class WaitWindow] the
text is

class WaitWindow:
	@others
	self.screen = screen
	width = 40
	if (len(text) &lt; width): width = len(text)

	t = TextboxReflowed(width, text)
	g = GridForm(self.screen, title, 1, 1)
	g.add(t, 0, 0)
	g.draw()
	self.screen.refresh()

Node [pop] contains the text

def pop(self):

Node [__init__] contains the text

self.screen.popWindow()
self.screen.refresh()

def __init__(self, screen, title, text):

This anaconda code is being correctly interpreted by the python 1.5 interpreter.
I'm too green with python to pronounce on whether the formatting is conventional.
I don't consider this a bug a major problem, but it should probably be addressed
before we start touting Leo for large collections of existing code.

This is my first experience importing python; in the past I've imported perl
code, and Leo gave me just one big @file node, and I was on my own to better
structure it.  Given the perversity of perl syntax ("Nothing but perl can parse
Perl." - Tom Christiansen), that's probably the right thing to do.  It's a judgement
call for whomever wants to take responsibility for the python importer as to
whether that may be the right thing to do for python.</t>
<t tx="ekr.20040125114612">@nocolor

http://sourceforge.net/forum/message.php?msg_id=2387427
By: dthein

Minor bug, I guess.

But if I try to import (either as root or file node) a file called README, I
get an error saying Leo couldn't find "README.py".

I had to rename the file to README.txt and then import it, then change the @file-code
heading to "@file-code README" ... same with @root-code directive.


Dave Hein
</t>
<t tx="ekr.20040125114744">http://sourceforge.net/forum/message.php?msg_id=2388444
By: mdawson

I use DocBook XML for my computer documentation, and lately for
publishing just about any text document.  Naturally, I wanted an
easy way to use DocBook to publish Leo outlines.

I've written a small Leo module, called Leo2AsciiDoc, that enables
automatic publication of a plain text Leo outline to HTML or PDF, or
as a web site or man page.  Stuart Rackham's AsciiDoc program (in
Python) is what makes this possible.
    Leo2AsciiDoc exports a Leo outline to a text file, from whence
it can be converted to DocBook XML by AsciiDoc, and then
automatically published via DocBook to HTML or PDF.

One Leo outline can contain any number of documents, or web sites
(via DocBook Website).

I'm also learning Literate Programming, and am happy to be able to
automatically publish (via make) a program's source and
documentation from Leo.

An example of the product is the paged HTML documentation for the
module at:
    http://devguide.leo.marshallresearch.ca

The web page for Leo2AsciiDoc is
at:
    http://leo.marshallresearch.ca

That web site is produced from a Leo outline.

    ----------------------------------------
    Michael Dawson

</t>
<t tx="ekr.20040125120212"></t>
<t tx="ekr.20040125120212.1">@nocolor

https://sourceforge.net/forum/message.php?msg_id=2390686
By: proff_fs

Hi,

I think I found a bug in Leo 4.1rc3.

Create a Node:

- ( ) NewHeadline

Rename it to Test:

- ( ) Test

Clone this node:

- (C) Test
|
- (C) Test

Insert another node after the first:

- (C) Test
|
- ( ) NewHeadline
|
- (C) Test

Move the new node to the right:

- (C) Test
|   |
|   - ( ) NewHeadline
|
- (C) Test
    |
    - ( ) NewHeadline

Move the last node (the subnode of the second clone) up. The wrong result:

- ( ) NewHeadline
|
- ( ) NewHeadline</t>
<t tx="ekr.20040125121407">@nocolor</t>
<t tx="ekr.20040125121407.1">https://sourceforge.net/forum/message.php?msg_id=2389876
By: randomandy

Is it only me who sees this as a question on how to reinvent the wheel? (or
in the case of emacs, how to reinvent the &lt;i&gt;everything&lt;/i&gt;.)

Leo and Python both seem so well suited as wonderful hierarchal glue programs.
And both are so elegant in the way their simple functionality brings such power
and order to the cause. It just seems it would be a shame to take something
so novel and unique and try to turn it into &lt;i&gt;yet another&lt;/i&gt; huge text editor.

I'm with &lt;A HREF="http://sourceforge.net/forum/message.php?msg_id=2345873"&gt;Danny
&lt;/A&gt; on this one. The ideal solution is to find the most elegant and seamless
way to splice one's own beloved text editor (or multipurpose editor/OS) in with
the Leo paradigm. Have Leo hand off the text duties to the editor, or have the
editor deliver heirarchy commands to Leo.

I'm also quite curious if this makes a good tie in with SciTE. SciTE produces
stunningly readible language highlighting/formatting. Could it be employed for
basic cell text display, and then for heavier editing, a keystroke or button
could open the cell text in one's preferred weapons grade text editor?

Scintilla also has a similarly beautiful code-to-html and code-to-pdf capability
that seems very suited to the literary part of the Leo paradigm: publication.
It would be nice if that code could be exploited as well.

This Leo is really a marvelous work. It's transforming the way I think (i.e.
making it possible again). Nice work, Edward.
</t>
<t tx="ekr.20040125121407.2">By: dannyobrien ( danny o'brien ) 
 RE: What would it take to turn Leo into Emacs   
2003-12-23 09:18  

 I agree with the embedding; I've used the vim plugin and it works well, but actually embedding the editor directly into the text field of leo (and allowing a range of keyboard shortcuts for eg headline editing) would be perfect.

There is some support for this in gvim, the GUI version of vim that comes as standard. This can be run so as its GUI is "embedded" in another GTK widget, using that library's GtkSocket/GtkPlug system. A quick demo of that (and how to do it in python) is here:

http://www.daa.com.au/pipermail/pygtk/2003-October/006185.html

To see this working with gvim, run the second (socket.py) program on that page then type

gvim --socketid &lt;number generated by socket.py&gt;

I'm not sure how you could do this in other widget libraries - I don't know much about X Windows, but I suppose it would need support in vim as well as the widget set.
 
</t>
<t tx="ekr.20040125121407.3">https://sourceforge.net/forum/message.php?msg_id=2388448
By: mdawson

I use XEmacs as my text editor.  The first thing I did when
evaluating Leo was to set up "open with" to use XEmacs for editing
Leo body text.

My progress so far:

- my Open_With Plugin opens a Leo node as a foreground buffer in
XEmacs, or a background (invisible) buffer in XEmacs.

- my Open_Tree Plugin opens a sub-tree of Leo nodes as background
buffers in XEmacs.

- my filename modification plugin changes the temporary file names
used by Leo so that they can be spotted more easily in an XEmacs
buffer listing (e.g. ibuffer).

- an elisp function to kill all XEmacs Leo buffers at once.

- another elisp function to indent and unindent the Leo comments in
derived Python source, which improves the readability of code.

- my setup of the elisp Multiple-Major-Modes XEmacs package, so that
XEmacs is in text-mode in Leo @doc sections, and the correct
language mode in @code sections.

Any of these might be able to be adapted for your own use. They
should all work with Emacs as well as XEmacs, but I've not tested
that.

These are all outlined in Appendix "C. XEmacs Text Editor" of the
document at:
    http://devguide.leo.marshallresearch.ca

and the Leo outline that contains them is available
at:
    http://leo.marshallresearch.ca


    ----------------------------------------
    Michael Dawson

 
</t>
<t tx="ekr.20040126104851.1"></t>
<t tx="ekr.20040126104851.2"></t>
<t tx="ekr.20040126115428"></t>
<t tx="ekr.20040126115428.1"></t>
<t tx="ekr.20040126115428.2">The fix was to insert code to test for a special case.

I wonder what this code would look like in the shared-tnode world?
</t>
<t tx="ekr.20040126115428.3">The fix was to insert weird special case in the move up code.</t>
<t tx="ekr.20040126115428.4"></t>
<t tx="ekr.20040126121604">Changed:

if sys.platform not in ("linux1","linux2"):

to:

if sys.platform not in ("darwin",freebsd4","freebsd5","linux1","linux2"):

in:

&lt;&lt; set bind_shortcut and menu_shortcut using accel &gt;&gt;</t>
<t tx="ekr.20040126131359">@nocolor

c.doCommand calls tree.redrawAfterException on exceptions.  This works because doCommand is itself _not_ contained in any begin/endUpdate pair, so setting elf.updateCount = 0 in tree.redrawAfterException will work.</t>
<t tx="ekr.20040126131801">c.doCommand calls tree.redrawAfterException on exceptions.  This works because doCommand is itself _not_ contained in any begin/endUpdate pair, so setting elf.updateCount = 0 in tree.redrawAfterException will work.</t>
<t tx="ekr.20040127102756">t</t>
<t tx="ekr.20040127102756.1">@nocolor

https://sourceforge.net/forum/message.php?msg_id=2395408
By: tibi

The re search is working fine but the replace is ignoring the \1 as a reference
to the 1st re match, it is just replacing the text by \3.\2.\1 as is.
BTW it seems impossible to undo a search/replace operation.

reply:

A brief look at the code shows that no easy _direct_ fix is possible.  I won't go into the details except to say that:

a) the problem is bound up with the very difficult "text index" problem, so trying to do without TK will be hard.
b) the Tk.Text widget has a search command but no search/replace command.

However, Leo's new script-based find/change command certainly can do anything you want.  As an example, look for the script whose headline is:

Find scripts to convert @doc comments to doc strings

This does a complex regex search and replace, complete with undo.  It's not perfect: in particular, "found" text isn't selected, and the selection is weird.  However, it shows what can be done.  Just copy the find and change texts to the find &amp; change areas of Leo's find/change dialog, then select the Script Search radio button and the Script Change checkbox.

Edward
</t>
<t tx="ekr.20040127160412"></t>
<t tx="ekr.20040128174042">def warnAboutOrphandAndIgnoredNodes (self):
	
	# 10/26/02: Always warn, even when language=="cweb"
	at = self ; root = at.root
	
	for p in root.subtree_iter():
		if not p.v.t.isVisited(): # 1/24/04: check tnode bit, not vnode bit.
			at.writeError("Orphan node:  " + p.headString())
			if p.isCloned() and p.hasParent():
				g.es("parent node: " + p.parent().headString(),color="blue")
		if p.isAtIgnoreNode():
			at.writeError("@ignore node: " + p.headString())</t>
<t tx="ekr.20040128174042.1">@nocolor

Request

Could improve the orphan node error text a bit?  Would you be able to state which clone is orphaned, perhaps by listing the name of the parent node where the orphan resides?

What I did:

- created warnAboutOrpanAndIgnoredNodes in base class (oldWriteClass).

- call root.clearAllVisitedInTree in both old and new write routines.
  (fixes a recent bug)

- added better error reporting in warnAboutOrpanAndIgnoredNodes.</t>
<t tx="ekr.20040128174425"></t>
<t tx="ekr.20040128190248">@nocolor

The problem was that scanAllDirectives was setting the comment delimiter after scanHeader had been called.

The solution:
	
- Call scanAllDirectives from top_df_read instead of the two versions of readOpenFile.
- Pass an importing arg to scanAllDirectives which inhibits setting the comment delims.</t>
<t tx="ekr.20040129074950"></t>
<t tx="ekr.20040129080202"></t>
<t tx="ekr.20040129080256.1"></t>
<t tx="ekr.20040129081333">@nocolor

http://sourceforge.net/forum/message.php?msg_id=2378670
By: thyrsus

If I load a read-only leo file and try to save it under any other name (not
previously existing) elsewhere, the save does not create a new file, nor do
anything else substantantive as far as I can tell.  In this example, I'm using
the "Save As" entry from the file menu and adding a character to the end of
the file name in the pop up box it prompts me with.  Here's the content of the
Leo Log Window after I've read the read-only "projects.leo" and tried to save
it as "projects1.leo":

Leo Log Window...
Leo 4.1 rc3, build  1.62 , December 19, 2003
Python 2.3.2, Tk 8.3.5

read only: /home/sps/projects.leo
File encoding: UTF-8
reading: /home/sps/projects.leo
leoConfig.txt encoding: utf-8
Text encoding: UTF-8
leoID = thyrsus
read only: /home/sps/projects1.leo</t>
<t tx="ekr.20040129090223">@nocolor

- write_LEO_file now ignores the self.read_only attribute and instead tries to call os.access(fileName,os.W_OK).

- &lt;&lt; delete backup file &gt;&gt; now returns false on exceptions so the various save commands won't mistakenly report that the file has been saved.

- Commands.save no longer calls c.setChanged(false).  This is done only in fileCommands.save.  So now if a Save fails the outline will still be marked dirty.</t>
<t tx="ekr.20040129092815"></t>
<t tx="ekr.20040129094501">@nocolor
http://sourceforge.net/forum/message.php?msg_id=2355533
By: sbeards

So, here is a summary of these issues.

Scott</t>
<t tx="ekr.20040129100453">This is a bit more complicated than I first thought. We found that this issue
does not cause a "cannot send headers" warning for a PHP file. This problem
is caused when you have more than one character after the ?&gt; (a newline or any
other character will do it). I must have had some other problem with my source
file.

Further, Leo does _not_ add a newline at the end of the body text for imported
files. When there is a newline at the end of the source file Leo acts as TextPad
acts (shows the last valid cursor position as the beginning of the line after
the last line). When there is no newline at the end of the source file Leo will
show the last valid cursor position as the end of the last line. This is the
expected behavior.</t>
<t tx="ekr.20040129100453.1">The ending ?&gt; will not exist in the derived file when multiple newlines exist
after the @last directive.
Test body text:
@last ?&gt;\n\n

Test derived file output:
#@+leo-ver=4
#@+node:@file test.txt
#@@last
                                                                           
#@-node:@file test.txt
#@-leo
</t>
<t tx="ekr.20040129100453.2">When using @last the last character in a derived file is always a newline
(when using @file or @file-nosent and maybe always?).

This will only be a problem in special cases when you do not want the derived
file to end in a newline (when generating binary files maybe?).</t>
<t tx="ekr.20040129105514">@nocolor

By: paulpaterson ( Paul Paterson ) 
 Leo 4.1 requires Python 2.3   
2004-01-09 23:04  

Using Python 2.2 if I try to open the Python shell from the Leo Windows menu then I get the following:

Traceback (most recent call last):
File "C:\Apps\leo-4.1-rc3\src\leoCommands.py", line 3425, in openPythonWindow
ImportError: No module named idlelib.PyShell

The fix was mostly to convert to do idle_dir = str(idle_dir) before setting sys.path: In Python 2.2 sys.path doesn't handle Unicode strings properly.</t>
<t tx="ekr.20040129133809"></t>
<t tx="ekr.20040129133809.1">Report:
	
python.exe -i -tOO 
\leo4CVS\src\leoTkinterGui.py: inconsistent use of tabs and spaces
in indentation
\leo4CVS\src\leoFind.py: inconsistent use of tabs and spaces in indentation
&gt;&gt;only get this warning on the first compile run

Fix:
	
There was a line that contained a leading space before a tab.</t>
<t tx="ekr.20040129133809.2"></t>
<t tx="ekr.20040129133809.3">@nocolor

sometimes copy &amp; paste is greyed out from the log or if the headline is active
window, even if selected.
not sure how or what happens but its frequent.

What I did:

- Call frame.body.hasFocus() to see what has focus.

- Enable cut &amp; copy if the body does _not_ have focus: we can't tell what is selected in the headline :-(</t>
<t tx="ekr.20040129133809.4"></t>
<t tx="ekr.20040129133809.5">sometimes after a drag of a node, 
then the expand/contract doesnt work.
click or menu has no effect.
in an open leo
maybe it is ok after you save the file
other times only fix is to exit &amp; restart.</t>
<t tx="ekr.20040129133809.6">extensions menu either launch console or explorer:
Traceback (most recent call last):
  File "\leo4CVS\src\leoCommands.py", line 127, in doCommand
    command()
TypeError: launchCmd() takes exactly 1 argument (0 given)
once in red once in black, must be from the redirect to log getting doubled.

This is a bug in the open_shell.py plugin</t>
<t tx="ekr.20040129133809.8">When opening a .leo file Leo selects the correct node but it is no longer the top most node in the window.

(no) Probably related to Leo now saving of the body pane size.</t>
<t tx="ekr.20040129153428"># !1/29/04: new routine.

def setAllAncestorAtFileNodesDirty (self):

	v = self ; c = v.c
	changed = false
	c.beginUpdate()
	if v.setAncestorAtFileNodeDirty():
		changed = true
	for v2 in v.t.joinList:
		if v2 != v and v2.setAncestorAtFileNodeDirty():
			changed = true
	c.endUpdate(changed)
	return changed</t>
<t tx="ekr.20040129154656"></t>
<t tx="ekr.20040129154656.1">This is correct and more accurate.

- Created v.setAllAncestorAtFileNodesDirty.

- Call v.setAllAncestorAtFileNodesDirty instead of v.setDirty.

- "Duplicate" calls to v.setAllAncestorAtFileNodesDirty are needed just as with v.setDirty.

- This change affects drags, moves, clones, insert, delete, sorting.</t>
<t tx="ekr.20040130073456"># The problem was that "blank" lines in the expansion of @others got leading whitespace.</t>
<t tx="ekr.20040130073846">This would really help when writing gui plugins.

The first place it would be useful would be in eliminating calls to the Tk search routine.</t>
<t tx="ekr.20040130073846.1"></t>
<t tx="ekr.20040130080552">@nocolor

The problem was in the write logic.</t>
<t tx="ekr.20040130080552.2"></t>
<t tx="ekr.20040130111957"># While I was at it, I fixed the code so it marks only changed nodes as dirty.</t>
<t tx="ekr.20040130112145">import leoGlobals as g
from leoGlobals import true,false

c = g.top() ; v = c.currentVnode()
last_v = g.app.searchDict.get("v")
if last_v and v == last_v:
	v = v.threadNext()
found = false
while v:
	lines = v.bodyString().split('\n')
	for s in lines:
		i = g.skip_ws(s,0)
		leading = s[0:i]
		if leading:
			blanks, tabs = 0,0
			for ch in leading:
				if ch == ' ':
					blanks += 1
				if ch == '\t':
					tabs += 1 ; break
			if blanks &gt; 0 and tabs &gt; 0:
				# g.trace(leading)
				g.es("blanks precede leading tab: " + v.headString())
				found = true ; break
	if found: break
	v = v.threadNext()
if found:
	g.app.searchDict["v"] = v
	c.selectVnode(v)
	c.redraw()
else:
	g.es("done",color="blue")
	g.app.searchDict["v"] = None
g.app.searchDict["continue"] = false</t>
<t tx="ekr.20040130112427">- Fixed Dan Winkler's bug with CashRegister.ss.

- Possibly fixed the "Zope Sprint" bug.

- Ensure trailing newline in scripts.

- Fixed indent problem in leoTkinterGui.py.

- Fixed several problems in the Convert All Blanks/Tabs commands.

- Give shorter message when saving a read-only file fails.
  This is a bit of a kludge.  Only time will tell if it works acceptably.

- Leo no longer writes "empty" attributes like a="".  This arose because Leo no longer writes cloned attributes.

- Added some code to save and restore the "top" vnode, but this really is useless at present: the "top" vnode is a function of the scroll state, and that is a Tk-dependent value.  The only proper way of computing the top node would be to look at the scroll state, and this I don't care to do now.

</t>
<t tx="ekr.20040130160615"></t>
<t tx="ekr.20040130161634">@nocolor

was busy so I just read protected it.
now I get a traceback every time it trys to write.
a simple write protected warning would be enough.

What I did:
	
Give "read only" message if read_only ivar is set.
Otherwise, give full traceback.

This is not really a great solution.  Ideally, we would trap the actual OS error message, but that is probably platform-specific.</t>
<t tx="ekr.20040130164211">if frame.body.hasFocus():
	data = frame.body.getSelectedText()
	canCut = data and len(data) &gt; 0
else:
	# This isn't strictly correct, but we can't get the Tk headline selection.
	canCut = true

enable(menu,"Cut",canCut)
enable(menu,"Copy",canCut)

data = gui.getTextFromClipboard()
canPaste = data and len(data) &gt; 0
enable(menu,"Paste",canPaste)</t>
<t tx="ekr.20040130164211.1"></t>
<t tx="ekr.20040130165952"></t>
<t tx="ekr.20040130165952.1"></t>
<t tx="ekr.20040130170918">@nocolor

Cut &amp; paste do not stick in the headline if you paste from the edit menu. 

They do stick if the commands are invoked from menu shortcuts.

The fix was to enable the previously disabled code if the body does not have focus.</t>
<t tx="ekr.20040130171643">None of these are guarranteed.</t>
<t tx="ekr.20040130174232">@nocolor

- Eliminated entries like a="":  This happened because Leo no longer writes clone bits.

- Made sure Leo writes a="T" entries.  However, Leo really can't use this easily.

Another possibility would be to save the scrolling state, but that is very gui-dependent.</t>
<t tx="ekr.20040130183451"></t>
<t tx="ekr.20040130185920"></t>
<t tx="ekr.20040130185920.1"></t>
<t tx="ekr.20040131093452"></t>
<t tx="ekr.20040131094356"></t>
<t tx="ekr.20040131095315">@nocolor
http://sourceforge.net/forum/message.php?msg_id=2403118
By: paulpaterson

If you hoist a node with no children and then insert a node (CTRL-I) then the
child is created as a sibling of the hoisted node and consequently is not
displayed.

This is *normal* Leo behaviour (inserted node becomes a sibling) but in the
context of a hoist this is confusing and ends up with you creating lots
of "invisible" nodes until you wise up and realise what is going on! Then you
de-hoise and discover all the lost nodes.

What I did:

Fixing this bug in the case of inserting nodes is easy.  However, the same trick can not be used for clones.

Also disabled Clone command if the current node is the root of a hoist.</t>
<t tx="ekr.20040131100627"></t>
<t tx="ekr.20040131101109">@nocolor

I noticed a couple other things:

1. There are a bunch of "types" arrays scattered throughout the code
that are used to set the list of filters on file dialogs.  

  a. These could probably be consolidated into a single global and just
referenced.

  b. They don't include all the language types that leo supports (.e.g.,
PHP ... "*.php, *.php3, *.php4")

2. Perhaps the file save dialog should also not use the default
extension, but rather just depend on the filter.

</t>
<t tx="ekr.20040131103531">allFullFiletypes = [
	("All files",   "*"),
	("C/C++ files", "*.c"),
	("C/C++ files", "*.cpp"),
	("C/C++ files", "*.h"),
	("C/C++ files", "*.hpp"),
	("Java files",  "*.java"),
	("Pascal files","*.pas"),
	("Python files","*.py")]
	# To do: *.php, *.php3, *.php4")
pythonFullFiletypes = [
	("Python files","*.py"),
	("All files","*"),
	("C/C++ files","*.c"),
	("C/C++ files","*.cpp"),
	("C/C++ files","*.h"),
	("C/C++ files","*.hpp"),
	("Java files","*.java"),
	("Pascal files","*.pas")]
	# To do: *.php, *.php3, *.php4")
textFullFiletypes = [
	("Text files","*.txt"),
	("C/C++ files","*.c"),
	("C/C++ files","*.cpp"),
	("C/C++ files","*.h"),
	("C/C++ files","*.hpp"),
	("Java files","*.java"),
	("Pascal files","*.pas"),
	("Python files","*.py"),
	("All files","*")]
	# To do: *.php, *.php3, *.php4")
CWEBTextAllFiletypes = [
	("CWEB files","*.w"),
	("Text files","*.txt"),
	("All files", "*")]
leoAllFiletypes = [
	("Leo files","*.leo"),
	("All files","*")]
leoFiletypes = [
	("Leo files","*.leo")]
nowebTextAllFiletypes = [
	("Noweb files","*.nw"),
	("Text files", "*.txt"),
	("All files",  "*")]
textAllFiletypes = [
	("Text files","*.txt"),
	("All files", "*")]</t>
<t tx="ekr.20040131103531.1">@nocolor

I've been reading throught the tk8.2 code and found that the
defaultextension is applied to any file without extension, and also that
if the defaultextension is not set, then the filter is used as a default
extension (if more than one extension, it uses the first in the list).

I modifed (not checked in) code in leoTkInterGui.py to:

[BEGIN CODE QUOTE]
@color
def runOpenFileDialog(self,title,filetypes,defaultextension):

"""Create and run an Tkinter open file dialog ."""

return tkFileDialog.askopenfilename(
title=title,
filetypes=filetypes)
# DTHEIN 2004.01.31: remove default extension on open, so that we can
#                    open files without extensions
#
# return tkFileDialog.askopenfilename(
# title=title,
# filetypes=filetypes,
# defaultextension=defaultextension)
@nocolor
[END CODE QUOTE]

This works perfectly for me.  If I set the filter is set to "*" then the
extensionless file "README" is imported as "README".  If I change the
filter to "*.java", the dialog try to open "README.java".</t>
<t tx="ekr.20040131170659">def canClone (self):

	c = self
	
	if c.hoistStack:
		current = c.currentPosition()
		return current != c.hoistStack[-1]
	else:
		return true</t>
<t tx="ekr.20040131171020">menu = frame.menu.getMenu("Outline")
enable(menu,"Cut Node",c.canCutOutline())
enable(menu,"Delete Node",c.canDeleteHeadline())
enable(menu,"Paste Node",c.canPasteOutline())
enable(menu,"Clone Node",c.canClone()) # 1/31/04
enable(menu,"Sort Siblings",c.canSortSiblings())
enable(menu,"Hoist",c.canHoist())
enable(menu,"De-Hoist",c.canDehoist())</t>
<t tx="ekr.20040131171020.1">menu = frame.menu.getMenu("Expand/Contract...")
enable(menu,"Contract Parent",c.canContractParent())
enable(menu,"Contract Node",hasChildren and isExpanded)
enable(menu,"Expand Node",hasChildren and not isExpanded)
enable(menu,"Expand Prev Level",hasChildren and isExpanded)
enable(menu,"Expand Next Level",hasChildren)
enable(menu,"Expand To Level 1",hasChildren and isExpanded)
for i in xrange(2,9):
	frame.menu.enableMenu(menu,"Expand To Level " + str(i), hasChildren)</t>
<t tx="ekr.20040131171020.2">menu = frame.menu.getMenu("Move...")
enable(menu,"Move Down",c.canMoveOutlineDown())
enable(menu,"Move Left",c.canMoveOutlineLeft())
enable(menu,"Move Right",c.canMoveOutlineRight())
enable(menu,"Move Up",c.canMoveOutlineUp())
enable(menu,"Promote",c.canPromote())
enable(menu,"Demote",c.canDemote())</t>
<t tx="ekr.20040131171020.3">menu = frame.menu.getMenu("Go To...")
enable(menu,"Go Back",c.beadPointer &gt; 1)
enable(menu,"Go Forward",c.beadPointer + 1 &lt; len(c.beadList))
enable(menu,"Go To Prev Visible",c.canSelectVisBack())
enable(menu,"Go To Next Visible",c.canSelectVisNext())
enable(menu,"Go To Next Marked",c.canGoToNextMarkedHeadline())
enable(menu,"Go To Next Changed",c.canGoToNextDirtyHeadline())
enable(menu,"Go To Next Clone",isCloned)
enable(menu,"Go To Prev Node",c.canSelectThreadBack())
enable(menu,"Go To Next Node",c.canSelectThreadNext())
enable(menu,"Go To Parent",hasParent)
enable(menu,"Go To Prev Sibling",hasBack)
enable(menu,"Go To Next Sibling",hasNext)</t>
<t tx="ekr.20040131171020.4">menu = frame.menu.getMenu("Mark/Unmark...")
label = g.choose(isMarked,"Unmark","Mark")
frame.menu.setMenuLabel(menu,0,label)
enable(menu,"Mark Subheads",hasChildren)
enable(menu,"Mark Changed Items",c.canMarkChangedHeadlines())
enable(menu,"Mark Changed Roots",c.canMarkChangedRoots())
enable(menu,"Mark Clones",isCloned)
</t>
<t tx="ekr.20040201061928"># Initialize Leo's find panel using the named children of this node.
import leoGlobals as g
from leoGlobals import true,false

g.app.searchDict = {} # Clear dict.get("v") logic.
g.initScriptFind("Find script")

c = g.top()
c.selectVnode(c.rootPosition())
c.redraw()</t>
<t tx="ekr.20040201063019"></t>
<t tx="ekr.20040201063200">def rPrint(node,level):

	indent = "%*s" % (4*level,"")
	print indent + str(node.headString())
	child = node.firstChild()
	while(child):
		rPrint(child,level+1)
		child = child.next()

</t>
<t tx="ekr.20040201063200.1">def newLineize(s):

	return re.sub('"',"'",re.sub(r"\s", r"\n", s))

</t>
<t tx="ekr.20040201063200.2">def graphvizString(node):

	result = []
	child = node.firstChild()
	while child:
		result.append('"%s" -&gt; "%s";\n%s' % (
			newLineize(node.headString()),
			newLineize(child.headString()),
			graphvizString(child)))
		child = child.next()
	return ''.join(result)
</t>
<t tx="ekr.20040201070415"></t>
<t tx="ekr.20040201070845"></t>
<t tx="ekr.20040201070919"></t>
<t tx="ekr.20040201101905"></t>
<t tx="ekr.20040201101905.1">@nocolor

- Script-find commands now call runFindScript repeatedly only for the Find All Command.

- Set app.searchDict.get("continue") = false in exception handlers.</t>
<t tx="ekr.20040201103324"></t>
<t tx="ekr.20040201103324.1">After setting up script/find and hitting Find button.
(And then after every save!)

Exception in Tkinter callback
Traceback (most recent call last):
  File "C:\PYTHON23\lib\lib-tk\Tkinter.py", line 1345, in __call__
    return self.func(*args)
  File "c:\prog\leoCVS\leo\src\leoFind.py", line 167, in findButton
    c = self.setup_button()
  File "c:\prog\leoCVS\leo\src\leoFind.py", line 258, in setup_button
    c.setIvarsFromFind()
  File "c:\prog\leoCVS\leo\src\leoCommands.py", line 92, in setIvarsFromFind
    find.set_ivars(c)
  File "C:\prog\leoCVS\leo\src\leoTkinterFind.py", line 235, in set_ivars
    val = self.dict[key].get()
  File "C:\PYTHON23\lib\lib-tk\Tkinter.py", line 254, in get
    return getint(self._tk.globalgetvar(self._name))
ValueError: invalid literal for int():
</t>
<t tx="ekr.20040201104001">if 1:
 	dubious line</t>
<t tx="ekr.20040201113342"></t>
<t tx="ekr.20040201113342.1"></t>
<t tx="ekr.20040201113342.2"></t>
<t tx="ekr.20040203064731"></t>
<t tx="ekr.20040203064731.1">@nocolor
http://sourceforge.net/forum/message.php?msg_id=2406406
By: tibi

A bug in the regular search/replace:

- put the anything in a node
- Ctrl+F,
- in the Find field just type &lt;enter&gt; to look for newlines
- type something in the replace field
- choose "Node only" and "body text"
- click "Change all": Leo repeatedly inserts the change text

What I did:

- Hacked search method in leoFind.py, and created the moveIndexToNext method.
- Added t argument to moveIndexForward.
- moveIndexForward and moveIndexToNextLine now return None if index is at end of text.
- Added a check for newpos is None in search.</t>
<t tx="ekr.20040203075059">This might be the best way to reliably have Tk move to the next line!
</t>
<t tx="ekr.20040203100534">Leo 4.1 release candidate 4 is now available at
http://sourceforge.net/projects/leo/

This release fixes numerous bugs reported since 4.1 rc3 and makes
several other improvements, including several nifty new plugins.

The highlights version 4.1:
---------------------------
- Leo runs in batch mode when invoked with --script aScriptFile.py
- Leo supports Unicode characters (e.g. Chinese) in path and file names.
- @directives and section references are now valid when executing scripts.
- @ignored and orphan nodes now valid in @file-nosent trees.
- Script-based find/change commands.
- Check Outline command.
- Hoist &amp; DeHoist commands.
- A new gui-agnostic architecture: useful for batch mode and unit tests.
- Several new configuration settings.
- Many new unit tests.
- A host of bug fixes.

Quotes of the month
-------------------

I'm a newbie to Leo(a couple of weeks) and I feel addicted to
programming again...in fact it has resurrected a dead project of mine :)
The outline has proven most liberating in terms of testing ideas out.
Thanks a lot! -- anon

"Wow, wow, and wow. I just started using Leo about a month ago..Now I
finally understand how to use clones and I realized that this is
exactly how I want to organize my information.  Multiple views on my
data, fully interlinkable just like my thoughts...Thanks for a great
tool! -- anon

"I *LIKE* it; I was amazed at how [different the Leo] experience was
compared to flat-filing. It was almost Forth-like in the way that it
was possible to work top-down or bottom-up at will (I believe this is
the key to its strength, btw)." --Tarvin Rhodes

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Leo requires Python 2.1 or above and tcl/tk 8.3 or above.
Leo works on Linux, Windows and MacOs X.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Wiki:     http://leo.hd1.org/

Edward K. Ream
February 3, 2004</t>
<t tx="ekr.20040205063350"></t>
<t tx="ekr.20040205063350.1">@nocolor

By: sbeards ( Scott Beardsley ) 
 BUG: Paste node under cloned parent   
2004-02-04 17:45  

 Summary: When pasting a node into the outline where any parent is cloned all child nodes (after the point at which you pasted the new node) will change into cloned nodes.

Steps to reproduce:
1. Create a parent node (named 'cloned').
2. Create two children nodes (one named 'dummy' and another named 'bottom') under the parent node 'cloned'.
3. Move the 'bottom' node below the 'dummy' node.
4. Clone node 'cloned'.
5. Copy node 'dummy'.
6. Paste node 'dummy' in between 'dummy' and 'bottom'.
7. After pasting you'll see that 'bottom' is now marked as a cloned node.

Impact: Although this should be fixed I don't see it as a major bug. This bug mainly seems to impact the readability of the outline. It doesn't seem to cause any other impact to the status of the parent clone.

Additional Notes:
1. It seems that the delete node code undoes this problem. When deleting _any_ child node the clone is removed from 'bottom'. Very funky behaviour.
2. If there are any additional nodes under 'bottom' they will be marked as clones also.

Environment:
Leo 4.1 rc3,4
Python 2.3.3
Tk 8.4.4
W2K, Linux (Slackware 9.1)

Scott</t>
<t tx="ekr.20040206072057">csharp_keywords = [
	"abstract","as",
	"base","bool","break","byte",
	"case","catch","char","checked","class","const","continue",
	"decimal","default","delegate","do","double",
	"else","enum","event","explicit","extern",
	"false","finally","fixed","float","for","foreach",
	"get","goto",
	"if","implicit","in","int","interface","internal","is",
	"lock","long",
	"namespace","new","null",
	"object","operator","out","override",
	"params","partial","private","protected","public",
	"readonly","ref","return",
	"sbyte","sealed","set","short","sizeof","stackalloc",
	"static","string","struct","switch",
	"this","throw","true","try","typeof",
	"uint","ulong","unchecked","unsafe","ushort","using",
	"value","virtual","void","volatile",
	"where","while",
	"yield"]</t>
<t tx="ekr.20040206073310">@nocolor

2/6/04 Jeff Nowland: Added support for c#</t>
<t tx="ekr.20040206075634.1"></t>
<t tx="ekr.20040206080140"></t>
<t tx="ekr.20040206085827"></t>
<t tx="ekr.20040207170503">@nocolor

By: dthein ( Dave Hein ) 
 BUG: double-paste in searchbox.py plugin   
2004-02-06 16:59  

 Leo 4.1 rc4, build 1.76 , February 3, 2004
Python 2.3.3, Tk 8.4.2, linux2

When I Ctrl-C copy a string from a body and Ctlr-V paste it into the searchbox it gets pasted twice (e.g. the string "image" gets pasted as "imageimage").

I'll try to track this down, but if anyone has a clue right away, please post the solution.

--
Dave Hein  
</t>
<t tx="ekr.20040208095208">@nocolor

http://sourceforge.net/forum/message.php?msg_id=2415033
By: nobody

Ive been scanning Speed Reams Slash post and the Faq and saw an interesting
usage pattern: Creating a node called a Task and adding cloned nodes to it that
represent that task(I hope that explains it).  I can see myself using this idiom
in the future.  Now my question is does the Task/clone idiom warrant special
commands in Leo?  My basis:

1. Do enough Leo users work with this idiom that making it easier to utilize
would be desirable?  I guess a good rule of thumb might be, if the sequence
of actions occur more frequently than the primitive commands like opening a
file it should be considered.

Maybe a way of doing it:

1. A special mark node as Task command.
2. A Add to lask marked task command, that clones a node and moves that node
into the Task node.</t>
<t tx="ekr.20040208101427"></t>
<t tx="ekr.20040208101427.1">@nocolor
http://sourceforge.net/forum/message.php?msg_id=2414271
By: dthein

Leo 4.1 rc4, build  1.76 , February 3, 2004
Python 2.3.3, Tk 8.4.2, linux2

If I click on menu Outline, and then on menu item Hoist, I get the expected
result (node is hoisted).

But if I Alt-O to dropdown the Outline menu, and then hit the H key, nothing
happens (actually, something gets changed because the title bar of the window
now shows an asterisk).

This does work OK for de-hoist.  I can Alt-O and then hit the E key, and the
outline is restored.</t>
<t tx="ekr.20040208104150"># 2/8/04: New code.
for key in self.keysDict.keys():
	newKey = key.replace('&amp;','')
	self.rawKeysDict[newKey] = key,self.keysDict[key]
	
if 0: #trace
	keys = self.rawKeysDict.keys()
	keys.sort()
	for key in keys:
		print self.rawKeysDict[key]</t>
<t tx="ekr.20040208112836">@nocolor

http://sourceforge.net/forum/message.php?msg_id=2415127
By: edream

I have just hacked the code to allow &amp; in entries in leoConfig.txt that describe
shortcuts.

This is a hack because it probably interacts poorly with the present mechanism
that allows menu entries to be translated.  I haven't looked into this in detail:
possibly everything works when menus are translated.  More likely things break.
If so, not using &amp; in leoConfig.txt will probably "restore" things to their
former not-very-good state.

It appears that I shall have to revisit this whole gruesome topic when
the configuration code gets rewritten.</t>
<t tx="ekr.20040212082826"></t>
<t tx="ekr.20040212082949"></t>
<t tx="ekr.20040212085815">Changed leoConfig.leo, and the popup menu.

By: sbeards ( Scott Beardsley ) 
 BUG: Toggle brackets via Ctrl+B   
2004-02-11 17:21  

The ToggleAngleBrackets keyboard command (Ctrl+B) doesn't seem to be working at all. </t>
<t tx="ekr.20040212094034">@nocolor
http://sourceforge.net/forum/message.php?msg_id=2420426
By: dalcolmo

&gt; One copy of leoConfig.txt might specify installation options; other copies
might specify per-folder or per-file options.

Maybe I misunderstand this, but would the .leo file be the place for any per-file
options?

&gt; "inheritable" copies of leoConfig.txt.
Yes! I want a copy per user, so I won't have to manually update the latest
installation of leo with my configurations. The typical global rc file (in /etc
or in the leo program dir) and local config file in ~/.leo would do fine. As
far as I am concerned, that would also be my preferred setup under Windows,
but I am sure most people would disagree.

Please move all global configuration options to one place. Currently, besides
having to edit leoConfig.leo, I have also to edit leoPlugins.leo or
pluginsManager.txt
I believe, these should also be configuration settings.

Best regards - Josef Dalcolmo</t>
<t tx="ekr.20040212094121"></t>
<t tx="ekr.20040213051400"></t>
<t tx="ekr.20040213060739">@nocolor

By: nobody ( Nobody/Anonymous ) 
 RE: 4.1rc4 Plug-in Bug?   
2004-02-13 03:32  

 if you write protect leoconfig.txt you also notice via traceback that it opens for write on entry too, not sure if it actually writes anything at that time.

looking forward to what the team dreams up for config options.
checkbox or dropdown &amp; edit of available options
with spin boxes for font size etc
a positive way to lock all the panes ito the same scheme or allow individual choice.
and all the other per user options maybe an override on the command line to enable or disable a plugin or select a particular config.txt
 
</t>
<t tx="ekr.20040213090121">@nocolor

By: tibi ( Thiébaut Champenier ) 
 inserting a new node   
2004-02-13 13:23  

 Hi,

When doing ctrl+i I on the node that has children I would prefer Leo to insert the new node as the last children instead of the first. It just makes more sense to me, for exemple when you take a big file and cut it in subnodes you typically start at the top and create new nodes while paging down the file.
What do you think ?
To try it just make this little change:
RCS file: /cvsroot/leo/leo/src/leoCommands.py,v
retrieving revision 1.76
diff -r1.76 leoCommands.py
2516c2516
&lt; v = current.insertAsNthChild(0)
---
&gt; v = current.insertAsLastChild()  </t>
<t tx="ekr.20040213090726">@nocolor
http://sourceforge.net/forum/message.php?msg_id=2420490
By: dalcolmo

I found a bug when using 
default_derived_file_encoding = iso-8859-1
in leoConfig.leo.

The first line in the derived file will be:
#@+leo-ver=4-encoding=iso-8859-1.

Python 2.3.2 reacts to such a file with:
 
File "jdgui.py", line 1
SyntaxError: 'unknown encoding: iso-8859-1.'

The same goes for the encoding iso-8859-15.
Without the dot (the last character of the sentinel line) Python accepts the
line.

Best regards - Josef Dalcolmo

Fix:

This is a bug in Python 2.3.  I have submitted bug reports.
The workaround is to insert the following line in @file nodes.

@first # -*- coding: iso-8859-1 -*-</t>
<t tx="ekr.20040216054459">@nocolor

http://sourceforge.net/forum/message.php?msg_id=2424151
By: ksejlod ( Peter Barrel ) 
 I Have a (maybe) great idea!   
2004-02-15 04:29

I've been using LEO for a while and finding surprinsingly powerfull new uses now and then, (hey, not a week passes that i dont think to myself : "why did'nt anyone thought of that kind of tool that is LEO. It's so stupid to program such a tool, yet no one thought of doing such a thing ! ")

I was wondering if there was a leo keyword (beginning with "@") that would do a feature I thought would be great: something such as :
@h
@endh
and of course, similarily...
@f
@endf

Standing for "Header", "End Header", "Footer" and "End Footer". Let me please explain ...

When creating files with @file (or nosentinels) I use the keyword "@others" in the starting node body of the file and place in the file, as it's decendants (children, grand-children &amp; so on) some clones of other stuff somewhere else outside of this file (usualy, clones of parts of program regrouped as children of a "components" node up in the leo outline. Typical Example:

-Introduction
-+components
-a
-b
-c
-+@file program.BAS
-b
-c
-a

a, b, and c are clones and the @file node contains @others.

As you see, I proceed that way because in older programming languages or in lower level languages, the order of components such as procs, declarations, etc as an importance. It also has the implication that &lt;&lt; and &gt;&gt; brackets are irrelevant in my way of using leo.

Now, my feature that I looked for in the doc but could not find (so i suggest it here in case no one had any need of this before) is that when used in the BODY of a node part of an "@file" the @h and @endh would define a chunk of text in the body, you've guessed it, to be added before _each_ children node and ONLY children no grandchildren or any deeper. But It could also be used INSIDE the body of a children to define headers or footers for IT'S OWN direct children.

so, eehh, do you see the relevance of such a feature? Have i explained it clearly? maybe this would help:
CONST baba=2 AS INTEGER
CONST bebe=7 AS INTEGER
CONST zaza=5 AS INTEGER
CONST bobo=1 AS INTEGER
... the beginning and end of each of those "parts-of-a-program" is the same for a potential lot of lines... 

To Be Precise :
It's just really for adding something at end or beginning of a direct children of a node part of an @file in the tangling process. 

Is this feature already implemented but i have not found it? I'm pretty sure it easy to implement... what do you people think of this?
Thanks 
--
k

p.s. I'm the guy who proposed that in the untangling process, a clone would not be updated by it's _Last-Instance-Found_ in the @file beeing untangled, but instead updated by the _Last-Modified-One-Found_ in the @file... :)

(ooouuuuhh that would be slick...)  

By: ksejlod ( Peter Barrel ) 
 RE: I Have a (maybe) great idea!   
2004-02-15 04:35  

 The tree i tried to draw in ascii did not came out the way i did it, sourceforge "eated" leading spaces sorry a, b and c are children of their "+" node just above them.........
--
k  
</t>
<t tx="ekr.20040216153243"></t>
<t tx="ekr.20040216153243.4"></t>
<t tx="ekr.20040216153243.5">when in headline, selectall selects the body text then delete will delete it!
obviously, these should only be operating on the headline text at that point.

-selectall now selets all the body, but its not a visable select and delete
delets it while focus is still in the log or headline!


EKR:  The Select All command probably should select all text in the widget that has focus.
</t>
<t tx="ekr.20040216153659">Changed Undo/Redo messages:

- Insert Outline to Insert Node.
- Delete Outline to Delete Node.
- Clone to Clone Node.

This is a real code change: it affects the undo/redo logic.

BTW, some way should be found to translate these (and all other text as well!!).</t>
<t tx="ekr.20040216153659.1">Including, e.g., Undo messages.</t>
<t tx="ekr.20040216162857">@nocolor

double tracebacks are still here, top one in red one in black when script out
to log enabled.</t>
<t tx="ekr.20040217085322">Leo 4.1 final is now available at
http://sourceforge.net/projects/leo/

Leo 4.1 final is the culmination of four months of work. No
significant bugs have been reported since 4.1 rc4. Several people have
contributed nifty plugins recently. See leoPlugins.leo for full
details.

The highlights version 4.1:
---------------------------
- Leo runs in batch mode when invoked with --script aScriptFile.py
- Leo supports Unicode characters (e.g. Chinese) in path and file names.
- @directives and section references are now valid when executing scripts.
- @ignored and orphan nodes now valid in @file-nosent trees.
- Script-based find/change commands.
- Check Outline command.
- Hoist &amp; DeHoist commands.
- A new gui-agnostic architecture: useful for batch mode and unit tests.
- Several new configuration settings.
- Many new unit tests.
- A host of bug fixes.

Quotes of the month
-------------------

"I'm a newbie to Leo(a couple of weeks) and I feel addicted to
programming again...in fact it has resurrected a dead project of mine :)
The outline has proven most liberating in terms of testing ideas out.
Thanks a lot!" -- anon

"Wow, wow, and wow. I just started using Leo about a month ago..Now I
finally understand how to use clones and I realized that this is
exactly how I want to organize my information.  Multiple views on my
data, fully interlinkable just like my thoughts...Thanks for a great
tool! -- anon

"I *LIKE* it; I was amazed at how [different the Leo] experience was
compared to flat-filing. It was almost Forth-like in the way that it
was possible to work top-down or bottom-up at will (I believe this is
the key to its strength, btw)." --Tarvin Rhodes

What is Leo?
------------
- A programmer's editor, an outlining editor and a flexible browser.
- A literate programming tool, compatible with noweb and CWEB.
- A data organizer and project manager. Leo provides multiple views
   of projects within a single outline.
- Fully scriptable using Python. Leo saves its files in XML format.
- Portable. leo.py is 100% pure Python.
- Open Software, distributed under the Python License.

Leo requires Python 2.1 or above and tcl/tk 8.3 or above.
Leo works on Linux, Windows and MacOs X.

Links:
------
Leo:      http://webpages.charter.net/edreamleo/front.html
Home:     http://sourceforge.net/projects/leo/
Download: http://sourceforge.net/project/showfiles.php?group_id=3458
CVS:      http://sourceforge.net/cvs/?group_id=3458
Wiki:     http://leo.hd1.org/

Edward K. Ream
February 20, 2004</t>
<t tx="ekr.20040217090833">By: rogererens ( Roger Erens ) 
 RE: Documentation for 4.1rc3   
2004-02-04 10:04  

@nocolor

It is stated that you can edit the temporary file with the editor as named in the "Open with..." submenu.
However, the temporary files are edited with the application that is associated with their extension. In my case I always fire up vim with .txt-files.

Hence the menu item would be better called something like "Open as..." with submenu items like ".doc file" or ".txt file"

Or, use something else instead of "os.startfile" to really use the intended editor.</t>
<t tx="ekr.20040217152557"></t>
<t tx="ekr.20040217152936"></t>
<t tx="ekr.20040217152936.1"></t>
<t tx="ekr.20040217153407"></t>
<t tx="ekr.20040217153407.1"></t>
<t tx="ekr.20040217153407.2"></t>
<t tx="ekr.20040217153407.3"></t>
<t tx="ekr.20040217153743"></t>
<t tx="ekr.20040217154134"></t>
<t tx="ekr.20040217154256"></t>
<t tx="ekr.20040217164441"></t>
<t tx="ekr.20040218053305">@nocolor

http://sourceforge.net/forum/message.php?msg_id=2429098
By: nobody

can there be a little more consistance in the popup names?
find/change is Leo find change and has the leo icon
prefs is prefs for leo w/Tk icon
compare is Leo Compare . w/Tk icon
open python is *leo*  w/Tk icon
when Leo is the first word, then its not as easy to
select if you have more than one open
from the taskbar. sometimes all you see is Leo...
its also a little nebulous which leo they work on,
maybe good design, but shoulden't they be able to tag the title at least with
the current leo which has focus?
not something immediate, but as new dialogs are comtemplated and plugins can
open them, maybe something in globals can be beefed up to name and open dialogs.</t>
<t tx="ekr.20040220100517">@nocolor

- Email to Fred Drake re 4.1 final.
- Upgrade acknowledgements.
- Call Speed.

- Add Zope plugin.

* Fix these pychecker warnings:
	
C:/prog/leoCVS/leo/src\leoTkinterGui.py:181: Parameter (defaultextension) not used
C:/prog/leoCVS/leo/src\leoTkinterGui.py:192: Parameter (defaultextension) not used
C:/prog/leoCVS/leo/src\leoTkinterGui.py:380: Parameter (defaultSize) not used

* Implement a global routine that checks to see if a class implements all other methods of another class.

* Use g.x for all methods x in leoGlobals.py

* Add link to my FAQ</t>
<t tx="ekr.20040220110030">@nocolor

http://sourceforge.net/forum/message.php?msg_id=2431552
By: nobody

From: Rich

 I just got nipped twice by the following effect: the Caps-Lock key is ON, but
because the LED is on the Caps-Lock key, it is hidden behind my hand. I hit
Ctrl-x, expecting to cut my selection, but the entire node is cut.

   I know there's a problem with tk and the shift key status, so I'm wondering
if it would be possible to change the shape of the cursor when the Caps-Lock
is ON (preferrably a big red flashing blot 8-), or otherwise show that Caps-Lock
is active ( "CAPS" on a status line, for instance).

  Another way: I don't know if this goes against an "anti-modalism rule," but
only allowing Ctrl-Shift-x|c|v in the outline pane would also be acceptable
to me.</t>
<t tx="ekr.20040225061559">1) Is there a way that a "new" Leo installation could query the older one for config data? That is, every time I get a new copy, I need to do a side-by-side compare and edit with the previous leoConfig.leo in order to change the settings to the way I want them. It would be really nice if this could be automated in some fashion.

</t>
<t tx="ekr.20040225061559.1">(2) On loading leoPlugins.leo, I got "Unexpected end of file. Expecting @-leo sentinel" for the following files:

</t>
<t tx="ekr.20040226085005">@nocolor
http://sourceforge.net/forum/message.php?msg_id=2442609
By: nobody

&gt;&gt;Anyway, I can import java, javax, javax.swing. And I just created my first
JTree.

good man.  You will probably be subclassing JApplet.  You subclass a Java class
like this:

class EdwardsApplet(JApplet):
   pass

Id recommend getting the SDK javadoc on your PC or have a good link to the SDK
javadoc.  Read the JApplet doc in the Swing package.  The thing to keep in mind
is that you will be adding things to the JApplet's content pane, which will
be using a Layout Manager.  I believe the default for it is the BorderLayout.
This means after you get a reference to the ContentPane, you should be able
to add your components with:

cp = getContentPane()
cp.add( JTree() , BorderLayout.EAST )

Ill have to look at how Jython should package applets but you will be using,
I believe, a program called appletviewer that comes with the JDK to view your
applet.  Remember that Jython is a couple of versions behind CPython, so stick
to only features available in 2.1.  As is, you will be calling things like you
did in Python.  The Jython home page might have tips on building an applet.

What would be cool is if Leo could be totally packaged as a Jython applet, then
a demoer could test a pretty full fledged Leo throught there browser. :)

______________________________________________________________________
You are receiving this email because you elected to monitor this forum.
To stop monitoring this forum, login to SourceForge.net and visit: 
https://sourceforge.net/forum/unmonitor.php?forum_id=10226
</t>
<t tx="ekr.20040226092546">@nocolor
http://sourceforge.net/forum/message.php?msg_id=2442772
By: ejoy

I made an experiment last night. I replaced the call to open()in leofilecommand.py
with a call to gzip.open().
The LeoPy.leo file saved this way is only 600K! And there is no significant
speed down in saving.

I think it is a good idea to add compression support for load/save .leo files.
When reading or writing file with name ending with ".leo.gz", leo can call gzip
module to uncompress/compress the file, saving a lot of disk space.

What do you think of this?
</t>
<t tx="ekr.20040226094105">@nocolor</t>
<t tx="ekr.20040226094105.1">
https://sourceforge.net/forum/message.php?msg_id=2437859
By: halw

David,

I agree that your solution is best -- the problem is it doesn't work. 

If you look at the original post you'll note that the mouse wheel works fine
in all other Leo panes (which are native text panes, not a custom canvas).

In fact, a stock RH9 system does set up X as those pages indicate. The problem
is elsewhere, perhaps Tk or Tkinter.

If Edward doesn't want to ship a workaround, that's fine. It should, IMO, make
it into the FAQ, though.

--Hal

</t>
<t tx="ekr.20040226094105.2">https://sourceforge.net/forum/message.php?msg_id=2435622
By: djsg

Tk is complying with the behavior of XFree86, and not hiding that behavior. 

Documentation for XFree86 4.2.0 -- documentation for a 4.4 development version
matches it, so 4.3.0 ought to match it also:

http://www.xfree86.org/4.2.0/mouse7.html

An example of configuration for XFree86 3.3.2.

First, the URL: 

http://www.genius-europe.com/service/faq/tuxmouse.htm

o save their bandwidth, the example follows: 


All mices with scroll wheel or stick

XFree86 &gt;= 3.3.2 (or other XServer with wheel to mouse button support)
The mouse must be setup in XF86Config to send the mouse buttons 4 and 5 for
wheel actions.
Edit /etc/XF86Config with your favorite editor
Add the following line to the "Pointer" section.

ZAxisMapping 4 5

Make sure your Protocol is set to either "IMPS/2" for a PS/2 mouse
or for serial mice set it to "IntelliMouse" or "Auto".
Example for PS/2 wheel mouse:

Section "Pointer"
Protocol "IMPS/2"
Device "/dev/psaux"
SampleRate 60
BaudRate 1200
ZAxisMapping 4 5
Buttons 3
EndSection

After XWindows is started run :
imwheel -k


</t>
<t tx="ekr.20040226094105.3">
https://sourceforge.net/forum/message.php?msg_id=2433628
By: halw

Okay, I have a workaround that works for me with my existing Tk version. My
Tkinter skills are weak, but I don't think this will hurt anything else :)

Turns out this Tk version (or X or Tkinter or ....) doesn't generate MouseWheel
events, but maps to buttons 4 (up) &amp; 5 (down).

Add to if clause 
# Handle mouse wheel in the outline pane.
if sys.platform == "linux2": # This crashes tcl83.dll
..canvas.bind("&lt;MouseWheel&gt;", frame.OnMouseWheel)
..def mapWheel(e):
....if e.num == 4:
......e.delta = 120
......return frame.OnMouseWheel(e)
....elif e.num == 5:
......e.delta = -120
......return frame.OnMouseWheel(e)
..canvas.bind("&lt;ButtonPress&gt;", mapWheel, add=1)</t>
<t tx="ekr.20040226100415"></t>
<t tx="ekr.20040226105601">@nocolor

http://sourceforge.net/forum/message.php?msg_id=2434323
By: nobody

Okay, so 4.2 is to address a graphical interface to configuring Leo, so I'm
going to go over some of the ways the Alpha, AlphaX, and AlphaTk family of
editors handle this. These are editors that use Tcl as the core scripting
language, much as elisp does for Emacs. In AlphaTk, all of the code is in Tcl &amp;
Tk, so it run on any system that support Tcl/Tk 8.3+, and shows off the type of
dialogs that can be given to Leo as it also (currently) uses the Tk half of
this. It is available for Windows, and has a 45 day free demo period. It works
fine with The Tcl/Tk we use to run Leo so you only need to download AlphaTk.exe
via this link: http://www.santafe.edu/~vince/alphatk/download.html

In Alpha, like Emacs, their are "modes" specfic to each language that give you
useful functionality when you are editing code in that language. Each mode has
its own namespace (e.g. 'pyth' for the python Mode) that hold all the variables
and functions that provide the functionality mentioned above. There is a set of
variables and functions that form a sort of "global mode" that would be useful
in editing plain text, and provides values and simple editting bahavior if no
such simularly named things exists in the pyth namespace, if these do exist,
them overide these global values &amp; functions when in that editting mode.

Modes are held in a directory named "Modes", in Leo this would probably be a
subdirectory of 'plugins'. In Alpha a simple mode can be defined in a single
file, Leo should proabably use the multi-file method, each mode is given its own
subdirectory (e.g. ...\plugins\Modes\Python Mode\), then various files to define
that mode's functionality would be placed in that directory. Thus you could
include the syntax files directly from jEdit here. 

Alpha only concerns itself with what it needs to know to accomplish what its
user is trying to do, thus, if a user never edits a c++ file in a session, Alpha
never loads in the details of the C Mode (which includes c++), it knows it has a
C Mode, what file extensions it should activate for &amp; has a short description to
give if the users ask for help on the mode, but only loads the rest of the code
that defines the mode if it is called on to edit a c or c++ file. It does this
by scanning all of the subdirectories files for a function call that has all
this info as parameters. These are gathered into a cache (a script file) that
gets executed when alpha starts up. This cache has a dictionary of filenames to
modification dates so that the cache remains valid as long as the files scanned
are already in the dictionary and have the same modification dates. Any conflict
gets caught at start-up and triggers a rescanning. 

Alpha has a function, 'newPref', that builds dictionaries of various kinds of
variables, consisting of variable_name to a tuple. That tuple varies according
to the type of variable, but has as a minimum, the default value and the
namespace it is to be created in. Other parts of the tuple might include a list
of the possible values, or a series of tuples (&lt;text to present in drop down
box&gt;, &lt;value&gt;). Any change by the user to a value other than the default gets
that choice written to a cache that gets loaded the first time a mode is
activated. When newPref executes it checks to see if the variable already
exists, and only creates that variable and intializes it to the default if it
doesn't. A further wrinkle is that any comment immediately preceding a newPref
call gets stored as help text for that variable.

These dictionaries are used to allow the configuration dialog for a mode be
automatically created on the fly. Flag dictionaries get their keys dumped and
sorted to create an array of checkboxes, their stored comments forms a "tooltip"
box of text displayed when the arrow hovers over the checkbox.

Other dictionaries drive other types of widgets in the dialog panes.

More later, but much of this could be adapted to Leo. Other things to check out
are the keysetting dialogs, an example of which is under "Config-&gt;Special
Keys...".

Tom
</t>
<t tx="ekr.20040226114127">from leoGlobals import *

from ZODB import FileStorage, DB

if 1:
	print "-"*20
	storage = FileStorage.FileStorage(r"c:\prog\zopeTemp\leo.fs") 
	db = DB(storage)
	print storage ; print db
	db.close()
</t>
<t tx="ekr.20040227053137">https://sourceforge.net/forum/message.php?msg_id=2444789
By: nobody

To continue on things that Alpha contribute to Leo, let me tell you the some of
the reasons behind the design.

File structure: Alpha has the equivalent of a plugin directory, however, the
actual plug-ins are organized in subdirectories; files that tell alpha how to
support languages are placed in the "Modes" directory, files that add
functionality exposed primarily through an add-in menu are placed in the "Menus"
directory (Leo might use "Menus &amp; Widgets" to include things like the new search
plug-in), other code that provides functionality that is not tied to a
particular language, and is not primarily invoked via a menu are placed in the
"Packages" directory, (e.g. the completion package that provide general word
completion).

This helps out when someone wants to roll their own code, if you want to add a
language look at the examples that are in the 'Modes' directory, you can quickly
cobble together elementary support and then extend it over time.

Installing a plug-in is really just a matter of putting the files in the right
place and have Alpha update its indexes. Now that does not mean that the new
features are enabled (other than for a language, those activate whenever Alpha
realises that it is editting a file of that language), if you go to
"Config-&gt;Global-Setup-&gt;Features" or "Config-&gt;Global-Setup-&gt;Menus", you get a
panel of checkboxes for Features or Menus that you can check to enable Globally,
(i.e. no matter what mode is currently active). Note that a tooltip box giving a
description is available whenever you hover the mouse over the feature/menu
name. These are built dynamically, are sorted alphabetically, and continued on
another page whenever their are too many to position on a single page. This
means no carefully redesign of a dialog box is needed to accomadate new
features.

The preferences for a language are only settable when a given mode is active.
Although in Alpha this is dependent on the file you are editing, Leo can be
thought of as in a given language mode dependent on what language directive is
in effect for the current cursor position. Once you are in a mode, the
"Config-&gt;&lt;mode&gt; Mode Prefs" Menu becomes active, Allowing you to choose what
Menus &amp; Feature you would like available when you are in this mode. You also
have access to the Preferences that are available in that mode.

Note that any preference, feature set, menus that you chose are all store in a
cache of code that sets them to your chosen values whenever you start Alpha.
These values can be saved and used when you upgade to a new version (of Alpha or
any of its packages), conversely, discarded the Prefs directory restores you to
all the defaults as orginally specified. Mechanisms exist to prune out cached
values that are no longer used, and to ensure that a new variable that has been
added is set if it needs to be before some code gets executed.

Tom

</t>
<t tx="ekr.20040227211451"></t>
<t tx="ekr.20040227212621">def hasBack(self):
	return self.v and self.v._back
	

	
hasFirstChild = hasChildren
	
def hasNext(self):
	return self.v and self.v._next
	
def hasParent(self):
	return self.v and (self.v._parent or len(self.stack) &gt; 0)
	
def hasThreadBack(self):
	return self.hasParent() or self.hasBack() # Much cheaper than computing the actual value.
	
hasVisBack = hasThreadBack</t>
<t tx="ekr.20040227214711">def level(self):
	
	p = self ; level = 0
	
	if not p:
		return level
	
	# Avoid calling p.copy() or copying the stack.
	v = p.v ; n = len(p.stack)-1

	while 1:
		assert(p)
		v,n = p.vParentWithStack(v,p.stack,n)
		# g.trace(level,"len(stack): %2d" % n,v)
		if v:
			level += 1
		else:
			return level</t>
<t tx="ekr.20040227214711.1"># None of these routines should ever change p or call p.copy().

if 0: # not used

	@others</t>
<t tx="ekr.20040227221500">def vThreadBack (self):
	
	"""Return the vnode at p.moveThreadBack() without calling p.copy()"""
	
	p = self
	if not p: return None
	
	if not p.v._back:
		return p.vParent()
		
	# Prepare to simulate various moveToX calls.
	n = len(p.stack)-1
	extraStack = [] # A tempoary extra stack.  Can't be helped.
	level1 = level2 = p.level()
		
	v = p.v_back # No change to level.
	if not v.t._firstChild:
		return v

	# Simulate repeated "lookahead" calls to p.moveToThreadNext().
	while 1:
		assert(v)
		if v.t._firstChild:
			# Simulate call to p.moveFirstChild()
			level2 += 1
			if v.isCloned():
				extraStack.append(v)
			v = v.t._firstChild
		elif p.v._next:
			v = v._next
		else:
			# Look ahead before moving to parent.
			assert(level2&lt;level1)
			if level2 == level1-1:
				assert(p.v == extraStack.pop())
				return v # We are about to come back to where we started.
			# Simulate p.moveToParent()
			level2 -= 1
			if v._parent:
				v = v._parent
			else:
				assert(self.stack)
				v = extraStack.pop()</t>
<t tx="ekr.20040227221500.1">def vThreadNext (self):
	
	"""Return the vnode at p.moveThreadNext() without calling p.copy()"""
	
	p = self
	if not p: return
	
	v = p.v

	if v.t._firstChild:
		return v.t._firstChild
	elif v._next:
		return v._next
	else:
		n = len(p.stack)-1
		v,n = p.vParentWithStack(v,p.stack,n)
		while v:
			if v._next:
				v = v._next
				break
			v,n = p.vParentWithStack(v,p.stack,n)
		return v</t>
<t tx="ekr.20040227224946">def hasThreadNext(self):

	p = self ; v = p.v
	if not p.v: return false

	if v.t._firstChild or v._next:
		return true
	else:
		n = len(p.stack)-1
		v,n = p.vParentWithStack(v,p.stack,n)
		while v:
			if v._next:
				return true
			v,n = p.vParentWithStack(v,p.stack,n)
		return false

hasVisNext = hasThreadNext</t>
<t tx="ekr.20040228060340"># A crucial utility method.
# The p.level(), p.isVisible() and p.hasThreadNext() methods show how to use this method.

&lt;&lt; about the vParentWithStack utility method &gt;&gt;

def vParentWithStack(self,v,stack,n):
	
	"""A utility that allows the computation of p.v without calling p.copy().
	
	v,stack[:n] correspond to p.v,p.stack for some intermediate position p.

	Returns (v,n) such that v,stack[:n] correpond to the parent position of p."""

	if not v:
		return None,n
	elif v._parent:
		return v._parent,n # don't change stack.
	elif stack and n &gt;= 0:
		return self.stack[n],n-1 # simulate popping the stack.
	else:
		return None,n</t>
<t tx="ekr.20040228060340.1">@ 
This method allows us to simulate calls to p.parent() without generating any intermediate data.

For example, the code below will compute the same values for list1 and list2:

# The first way depends on the call to p.copy:
list1 = []
p=p.copy() # odious.
while p:
	p = p.moveToParent()
	if p: list1.append(p.v)
# The second way uses p.vParentWithStack to avoid all odious intermediate data.

list2 = []
n = len(p.stack)-1
v,n = p.vParentWithStack(v,p.stack,n)
while v:
	list2.append(v)
	v,n = p.vParentWithStack(v,p.stack,n)

</t>
<t tx="ekr.20040228094013"></t>
<t tx="ekr.20040228094013.1"></t>
<t tx="ekr.20040228094013.2">def vBack(self):
	return self.v and self.v._back
	
def vFirstChild(self):
	return self.v and self.v.t and self.v.t._firstChild
	
def vNext(self):
	return self.v and self.v._next
	
def vParent(self):
	return self.v and (v._parent or (self.stack and self.stack[-1]))</t>
<t tx="ekr.20040228094013.3"># These routines are tricky and not very useful.</t>
<t tx="ekr.20040228154544"></t>
<t tx="ekr.20040301071824"># These remain in 4.2: the file read logic calls these before creating positions.</t>
<t tx="ekr.20040301081957"></t>
<t tx="ekr.20040301081957.1"></t>
<t tx="ekr.20040301192211">@nocolor


</t>
<t tx="ekr.20040301201418"># WARNING: this only works if not g.sharedNodes.

def convertTreeToSharedNodes(self):

	c = self
	
	# Return if the tree has already been converted.
	v = c.rootVnode()
	while v:
		if v._firstChild and not v._firstChild._parent:
			# print ; print "already converted"
			return
		v = v.threadNext()

	# Init.
	v = c.rootVnode()
	while v:
		v.t.vnodeList = []
		v = v.threadNext()
		
	# Create a list of cloned nodes:
	v = c.rootVnode() ; cloneList = []
	while v:
		if v.isCloned():
			# print "clone",v
			cloneList.append(v)
		v = v.threadNext()

	# Set _firstChild in tnodes.
	v = c.rootVnode()
	while v:
		child = v.firstChild()
		# Careful: set the field only the first time we see a shared tree.
		# This logic must match the logic below.
		if child:
			if not hasattr(v.t,"_firstChild"):
				v.t._firstChild = child
		else: v.t._firstChild = None
		v = v.threadNext()
		
	v = c.rootVnode()
	while v:
		if child and not hasattr(v.t,"_firstChild"):
			v.t._firstChild = child
		v = v.threadNext()
		
	# Set v.t.vnodeList.
	v = c.rootVnode()
	while v:
		# Careful: only set one value for non-cloned joined nodes.
		if v in cloneList: # Cloned
			try:    v.t.vnodeList.append(v)
			except: v.t.vnodeList = [v]
		elif not hasattr(v.t,"vnodeList"): # Maybe joined.
			v.t.vnodeList = [v]
		v = v.threadNext()
		
	# Clear _parent field of any node whose parent is a clone.
	v = c.rootVnode() ; clearList = []
	for v in cloneList:
		child = v.firstChild()
		while child:
			clearList.append(child)
			child = child.next()

	for v in clearList:
		v._parent = None</t>
<t tx="ekr.20040301205720">def __str__ (self):
	
	p = self
	
	if p.v:
		return "&lt;pos(%d) %s&gt;" % (len(p.stack),p.v.headString())
	else:
		return "&lt;pos None&gt;"
		
__repr__ = __str__</t>
<t tx="ekr.20040301211133">while 1:
	assert(p)
	if p.v.t._firstChild:
		p.moveToFirstChild()
	elif p.v._next:
		p.moveToNext()
	else:
		# Look ahead. We are about to call p.moveToParent().
		if p.level() == 1:
			break
		p.moveToParent()</t>
<t tx="ekr.20040301211500">def checkNextThreadNextLevel(self,level1):
	
	"""Return true if p.getThreadNext().level() &gt; level1.

	Do not alter p or call p.copy()."""

	p = self ; level = p.level()
	assert(p)
	assert(level &gt; level1)

	if p.v.t._firstChild:
		return true # Level increasing.
	elif p.v._next:
		return true # Level unchanged.
	else:
		n = len(p.stack)-1
		v,n = p.vParentWithStack(p.v,p.stack,n)
		assert(v)
		level -= 1
		if level == level1: return false 
		while v:
			assert(level &gt; level1)
			if v._next: return true
			v,n = p.vParentWithStack(v,p.stack,n)
			assert(v)
			level -= 1
			if level == level1: return false</t>
<t tx="ekr.20040301213056">def disableSaveCommands(self):
		
	if not g.app.disableSave:
		g.es("disabling Save commands",color="purple")
		g.app.disableSave = true
</t>
<t tx="ekr.20040301213345"></t>
<t tx="ekr.20040302083805"></t>
<t tx="ekr.20040302083805.1">- renamed v._next, v._back, v._parent, v.t._firstChild
- moved _firstChild to tnode for 4.2.
- v.iconVal not defined in 4.2: can be computed easily by drawing code.
- added t.vnodeList in 4.2.</t>
<t tx="ekr.20040302083805.4">- v.nodeAfterTree
- v.threadNext
- v.moveToNthChildOf
- v.validateOutlineWithParent
- v.exists
- v.linkAsNthChild
- v.createDependents
- v.shouldBeClone (replaced p by vp1)
- v.matchHeadline (replaced p by s)</t>
<t tx="ekr.20040302084553.2"></t>
<t tx="ekr.20040302094109"></t>
<t tx="ekr.20040302112717"></t>
<t tx="ekr.20040303162823">def setAncestorsOfClonedNodesInTreeDirty(self):

	"""This marks v dirty and all cloned nodes in v's tree."""

	p = self
	
	return p and p.setAncestorAtFileNodeDirty()</t>
<t tx="ekr.20040303163052">@ This is called from the key-event handler, so we must not force a redraw of the screen here. We avoid redraw in most cases by passing redraw_flag to c.endUpdate().

This is called from v.setDirty, so we avoid further calls to v.setDirty here.  The caller, that is, v.setDirty itself, handles all clones.

@c
def setAncestorAtFileNodeDirty(self):

	# Look up the tree for an ancestor @file node.
	p = self.copy() ; c = p.c
	redraw_flag = false
	c.beginUpdate()
	if 1: # update...
		while p:
			if not p.v.isDirty() and p.v.isAnyAtFileNode():
				redraw_flag = true
				p.v.t.setDirty() # Do not call v.setDirty here!
			p.moveToParent()
	c.endUpdate(redraw_flag) # A crucial optimization: does nothing if inside nested begin/endUpdate.
	return redraw_flag # Allow caller to do the same optimization.</t>
<t tx="ekr.20040303163330"># Ensures that all ancestor @file nodes are marked dirty.
# It is much safer to do it this way.

def setDirty (self):

	p = self ; c = p.c
	changed = false
	
	c.beginUpdate()
	if 1: # update...
		if not p.v.t.isDirty():
			p.v.t.setDirty()
			changed = true
		# This must be called even if p.v is already dirty.
		if p.setAncestorAtFileNodeDirty():
			changed = true
	c.endUpdate(changed)

	return changed</t>
<t tx="ekr.20040303163717">def isDirty (self):
	
	p = self
	return p.v and p.v.isDirty()
</t>
<t tx="ekr.20040303165342">def canDehoist(self):
	
	return len(self.hoistStack) &gt; 0
		
def canHoist(self):
	
	c = self
	root = c.rootPosition()
	p = c.currentPosition()

	if p == root:
		return p.hasNext()
	elif not c.hoistStack:
		return true
	else:
		return c.hoistStack[-1] != p</t>
<t tx="ekr.20040303175026"></t>
<t tx="ekr.20040303175026.1"></t>
<t tx="ekr.20040303175026.2">@ This is the main delete routine.  It deletes the receiver's entire tree from the screen.  Because of the undo command we never actually delete vnodes or tnodes.
@c

def doDelete (self,newPosition):

	"""Unlinks p.v from the outline.  May be undone.
	
	Returns newPosition."""

	p = self ; c = p.c

	p.setDirty() # Mark @file nodes dirty!
	p.unlink()
	c.selectVnode(newPosition)
	
	return newPosition</t>
<t tx="ekr.20040303175026.3">def insertAfter (self,t=None):

	"""Inserts a new vnode after self.
	
	Returns the newly created position."""
	
	p = self ; c = p.c
	p2 = self.copy()

	if not t:
		t = tnode(headString="NewHeadline")

	p2.v = vnode(c,t)
	p2.v.iconVal = 0
	p2.linkAfter(p)

	return p2</t>
<t tx="ekr.20040303175026.4">def insertAsLastChild (self,t=None):

	"""Inserts a new vnode as the last child of self.
	
	Returns the newly created position."""
	
	p = self
	n = p.numberOfChildren()

	if not t:
		t = tnode(headString="NewHeadline")
	
	return p.insertAsNthChild(n,t)</t>
<t tx="ekr.20040303175026.5">def insertAsNthChild (self,n,t=None):

	"""Inserts a new node as the the nth child of self.
	self must have at least n-1 children.
	
	Returns the newly created position."""
	
	p = self ; c = p.c
	p2 = self.copy()

	if not t:
		t = tnode(headString="NewHeadline")
	
	p2.v = vnode(c,t)
	p2.v.iconVal = 0
	p2.linkAsNthChild(p,n)

	return p2</t>
<t tx="ekr.20040303175026.6">def moveToRoot (self, oldRoot = None):

	"""Moves self to the root position.
	
	Returns the root position."""

	p = self.copy()
	p.unlink()
	p.linkAsRoot(oldRoot)
	
	return p</t>
<t tx="ekr.20040303175026.8"># Creates a clone back and insert it as the next sibling of back.

def clone (self,back):
	
	"""Create a clone of back.
	
	Returns the newly created position."""
	
	p = self ; c = p.c
	
	p2 = back.copy()
	p2.v = vnode(c,back.v.t)
	p2.linkAfter(back)

	return p2</t>
<t tx="ekr.20040303175026.9">if 0: # Not yet.

	def copyTreeWithNewTnodes (self):
		
		"""Return a copy of self with all new tnodes"""
		
		c = self.c
		
		# Create the root node.
		old_v = self
		new_v = vnode(c,tnode())
		new_v.t.headString = old_v.t.headString
		new_v.t.bodyString = old_v.t.bodyString
		
		# Recursively create all descendents.
		old_child = old_v.firstChild() ; n = 0
		while old_child:
			new_child = old_child.copyTreeWithNewTnodes()
			new_child.linkAsNthChild (new_v, n)
			n += 1
			old_child = old_child.next()
			
		# Return the root of the new tree.
		return new_v</t>
<t tx="ekr.20040303175026.10"># Used by scripts

def moveAfter (self,a):

	"""Moves a position after position a.
	
	Returns the newly created position."""

	p = self.copy() ; c = p.c

	p.unlink()
	p.linkAfter(a)
	
	# Moving a node after another node can create a new root node.
	if not a.hasParent() and not a.hasBack():
		c.setRootPosition(a)

	return p</t>
<t tx="ekr.20040303175026.11">def moveToNthChildOf (self,parent,n):

	"""Moves a position to the nth child of parent.
	
	Returns the newly created position."""

	p = self.copy() ; c = p.c

	p.unlink()
	p.linkAsNthChild(parent,n)
	
	# Moving a node can create a new root node.
	if not parent.hasParent() and not parent.hasBack():
		c.setRootPosition(parent)
		
	return p</t>
<t tx="ekr.20040303175026.12">def sortChildren (self):
	
	p = self

	# Create a list of (headline,position) tuples
	pairs = []
	for child in p.children_iter():
		pairs.append((string.lower(child.headString()),child.copy())) # do we need to copy?

	# Sort the list on the headlines.
	pairs.sort()

	# Move the children.
	index = 0
	for headline,child in pairs:
		child.moveToNthChildOf(p,index)
		index += 1</t>
<t tx="ekr.20040303175026.13"># This routine checks the structure of the receiver's tree.

def validateOutlineWithParent (self,pv):
	
	p = self
	result = true # optimists get only unpleasant surprises.
	parent = p.getParent()
	childIndex = p.childIndex()
	&lt;&lt; validate parent ivar &gt;&gt;
	&lt;&lt; validate childIndex ivar &gt;&gt;
	&lt;&lt; validate x ivar &gt;&gt;

	# Recursively validate all the children.
	for child in p.children_iter():
		r = child.validateOutlineWithParent(p)
		if not r: result = false

	return result</t>
<t tx="ekr.20040303175026.14">if parent != pv:
	p.invalidOutline( "Invalid parent link: " + parent.v.description() )</t>
<t tx="ekr.20040303175026.15">if pv:
	if childIndex &lt; 0:
		p.invalidOutline ( "missing childIndex" + childIndex )
	elif childIndex &gt;= pv.numberOfChildren():
		p.invalidOutline ( "missing children entry for index: " + childIndex )
elif childIndex &lt; 0:
	p.invalidOutline ( "negative childIndex" + childIndex )</t>
<t tx="ekr.20040303175026.16">if not p.v.t and pv:
	self.invalidOutline ( "Empty t" )</t>
<t tx="ekr.20040303175026.18">def invalidOutline (self, message):

	s = "invalid outline: " + message + "\n"
	parent = self.getParent()

	if parent:
		s += repr(parent)
	else:
		s += repr(self)

	g.alert(s)</t>
<t tx="ekr.20040303175026.23">if 1: # These will eventually go away.

	# Called from undo...
	def addTreeToJoinLists (self): pass
	def joinTreeTo  (self, tree2): pass
	def unjoinTree         (self): pass
	
	# Called only from commands...
	def createDependents   (self): pass
	def destroyDependents  (self): pass</t>
<t tx="ekr.20040303212445">def childIndex(self):
	
	p = self
	
	if not p.hasParent(): return 0
	
	# Point v at the first sibling
	v = p.v
	while v and v._back:
		v = v._back
		
	# Now count.
	n = 0
	while v:
		if v == p.v: return n
		v = v._next
		n += 1
	assert(false)</t>
<t tx="ekr.20040303214038">def setAllAncestorAtFileNodesDirty (self):

	p = self ; c = p.c
	changed = false
	c.beginUpdate()
	if p.setAncestorAtFileNodeDirty():
		changed = true
	c.endUpdate(changed)
	return changed</t>
<t tx="ekr.20040304163125">import leoGlobals as g
from leoGlobals import true,false
import string

c = g.top()

@others

v = findNode(c,"@file leoGlobals.py")
nameList = findFunctionsInTree(v)

if 0:
	nameList.sort() ; g.enl()
	for name in nameList: g.es(name)
	
s = "%d functions in leoGlobals.py" % len(nameList)
print s ; g.es(s)
	
if 1:
	v = findTopLevelNode(c,"Code")
else:
	v = c.currentVnode() # massage this script itself!
g.enl() ; g.enl()
count = prependNamesInTree(v,nameList,"g.",replace=false) # Just prints if replace==false.
s = "%d --- done --- " % count
print s ; g.es(s)
</t>
<t tx="ekr.20040304163522">def findDefs(body):
	
	lines = body.split('\n')
	names = []
	for s in lines:
		i = g.skip_ws(s,0)
		if g.match(s,i,"class"):
			return [] # The classes are defined in a single node.
		if g.match(s,i,"def"):
			i = g.skip_ws(s,i+3)
			j = g.skip_c_id(s,i)
			if j &gt; i:
				name = s[i:j]
				if g.match(name,0,"__init__"): 
					return [] # Disallow other class methods.
				names.append(name)
	return names</t>
<t tx="ekr.20040304164949">def prependNamesInTree(v,nameList,prefix,replace=false):
	assert(len(prefix) &gt; 0)
	ch1 = string.letters + '_'
	ch2 = string.letters + string.digits + '_'
	def_s = "def " ; def_n = len(def_s)
	prefix_n = len(prefix)
	after = v.nodeAfterTree()
	total = 0
	while v and v != after:
		count = 0 ; s = v.bodyString()
		printFlag = false
		if s:
			for name in nameList:
				i = 0 ; n = len(name)
				while 1:
					&lt;&lt; look for name followed by '(' &gt;&gt;
			if count and replace:
				if 0:
					&lt;&lt; print before and after &gt;&gt;
				v.setBodyStringOrPane(s)
		g.es("%3d %s" % (count,v.headString()))
		total += count
		v = v.threadNext()
	return total</t>
<t tx="ekr.20040304165432">def findNode(c,name):
	
	v = c.rootVnode()
	while v and v.headString() != name:
		v = v.threadNext()
	return v
	
def findTopLevelNode(c,name):
	
	v = c.rootVnode()
	while v and v.headString() != name:
		v = v.next()
	return v</t>
<t tx="ekr.20040304165432.1">def findFunctionsInTree(v):
	
	nameList = []
	after = v.nodeAfterTree()
	while v and v != after:
		names = findDefs(v.bodyString())
		if names:
			for name in names:
				if name not in nameList:
					nameList.append(name)
		v = v.threadNext()
	return nameList</t>
<t tx="ekr.20040304173234">print "-"*10,count,v.headString()
print "before..."
print v.bodyString()
print "-"*10,"after..."
print s</t>
<t tx="ekr.20040304173234.1">i = s.find(name,i)
if i == -1:
	break
elif g.match(s,i-1,'.'):
	i += n # Already an attribute.
elif g.match(s,i-prefix_n,prefix):
	i += n # Already preceded by the prefix.
elif g.match(s,i-def_n,def_s):
	i += n # preceded by "def"
elif i &gt; 0 and s[i-1] in ch1:
	i += n # Not a word match.
elif i+n &lt; len(s) and s[i+n] in ch2:
	i += n # Not a word match.
else:
	j = i + n
	j = g.skip_ws(s,j)
	if j &gt;= len(s) or s[j] != '(':
		i += n
	else: # Replace name by prefix+name
		s = s[:i] + prefix + name + s[i+n:]
		i += n ; count += 1
		# g.es('.',newline=false)
		if 1:
			if not printFlag:
				printFlag = true
				# print v.headString()
			print g.get_line(s,i-n)</t>
<t tx="ekr.20040305084926"></t>
<t tx="ekr.20040305161150">Otherwise the tree-drawing code will change the position!</t>
<t tx="ekr.20040305161150.1"></t>
<t tx="ekr.20040305161150.2"></t>
<t tx="ekr.20040305162628"></t>
<t tx="ekr.20040305162628.1">@others</t>
<t tx="ekr.20040305162910"></t>
<t tx="ekr.20040305162910.1"></t>
<t tx="ekr.20040305162910.2"></t>
<t tx="ekr.20040305171133">class allNodes_iter_class:

	"""Returns a list of positions in the entire outline."""

	@others

def allNodes_iter (self,copy=false):
	
	return self.allNodes_iter_class(self,copy)</t>
<t tx="ekr.20040305171133.1">def __init__(self,p,copy):

	self.first = p.c.rootPosition().copy()
	self.p = None
	self.copy = copy
	
def __iter__(self):

	return self
</t>
<t tx="ekr.20040305171133.3">def next(self):
	
	if self.first:
		self.p = self.first
		self.first = None

	elif self.p:
		self.p.moveToThreadNext()

	if self.p:
		if self.copy: return self.p.copy()
		else:         return self.p
	else: raise StopIteration</t>
<t tx="ekr.20040305172211.1">class children_iter_class:

	"""Returns a list of children of a position."""

	@others

def children_iter (self,copy=false):

	return self.children_iter_class(self,copy)</t>
<t tx="ekr.20040305172211.2">def __init__(self,p,copy):

	self.first = p.copy().moveToFirstChild()
	self.p = None
	self.copy = copy

def __iter__(self):
	
	return self
</t>
<t tx="ekr.20040305172211.3">def next(self):
	
	if self.first:
		self.p = self.first
		self.first = None

	elif self.p:
		self.p.moveToNext()

	if self.p:
		if self.copy: return self.p.copy()
		else:         return self.p
	else: raise StopIteration</t>
<t tx="ekr.20040305172855">class parents_iter_class:

	"""Returns a list of positions of a position."""

	@others

def parents_iter (self,copy=false,includeSelf=false):

	return self.parents_iter_class(self,copy,includeSelf)
	
def self_and_parents_iter(self,copy=false):
	
	return self.parents_iter_class(self,copy,includeSelf=true)</t>
<t tx="ekr.20040305172855.1">def __init__(self,p,copy,includeSelf):

	self.first = p.copy()
	if not includeSelf:
		self.first.moveToParent()
	self.p = None
	self.copy = copy

def __iter__(self):

	return self</t>
<t tx="ekr.20040305172855.2">def next(self):
	
	if self.first:
		self.p = self.first
		self.first = None

	elif self.p:
		self.p.moveToParent()

	if self.p:
		if self.copy: return self.p.copy()
		else:         return self.p
	else: raise StopIteration</t>
<t tx="ekr.20040305173343">class siblings_iter_class:

	"""Returns a list of siblings of a position."""

	@others

def siblings_iter (self,copy=false,following=false):

	return self.siblings_iter_class(self,copy,following)
	
self_and_siblings_iter = siblings_iter
	
def following_siblings_iter (self,copy=false):

	return self.siblings_iter_class(self,copy,following=true)</t>
<t tx="ekr.20040305173343.1">def __init__(self,p,copy,following):

	p = p.copy()
	if not following: # return all siblings.
		while p.hasBack():
			p.moveToBack()
			
	self.first = p
	self.p = None
	self.copy = copy

def __iter__(self):
	
	return self
</t>
<t tx="ekr.20040305173343.2">def next(self):
	
	if self.first:
		self.p = self.first
		self.first = None

	elif self.p:
		self.p.moveToNext()

	if self.p:
		if self.copy: return self.p.copy()
		else:         return self.p
	else: raise StopIteration</t>
<t tx="ekr.20040305173559">class subtree_iter_class:

	"""Returns a list of positions in a subtree, including the root of the subtree."""

	@others

def subtree_iter (self,copy=false):

	return self.subtree_iter_class(self,copy)</t>
<t tx="ekr.20040305173559.1">def __init__(self,p,copy):
	
	self.first = p.copy()
	self.after = p.nodeAfterTree()
	self.p = None
	self.copy = copy
	
def __iter__(self):

	return self</t>
<t tx="ekr.20040305173559.2">def next(self):
	
	if self.first:
		self.p = self.first
		self.first = None

	elif self.p:
		self.p.moveToThreadNext()

	if self.p and self.p != self.after:
		if self.copy: return self.p.copy()
		else:         return self.p
	else:
		raise StopIteration</t>
<t tx="ekr.20040305222007"></t>
<t tx="ekr.20040305222924"></t>
<t tx="ekr.20040305222924.1">def setHeadString (self,s,encoding="utf-8"):
	
	p = self
	p.v.initHeadString(s,encoding)
	p.setDirty()
	
def initHeadString (self,s,encoding="utf-8"):
	
	p = self
	p.v.initHeadString(s,encoding)
</t>
<t tx="ekr.20040305223225">def setHeadStringOrHeadline (self,s,encoding="utf-8"):

	p = self

	p.c.endEditing()
	p.v.initHeadString(s,encoding)
	p.setDirty()</t>
<t tx="ekr.20040305223522">def setBodyStringOrPane (self,s,encoding="utf-8"):

	p = self ; v = p.v ; c = p.c
	if not c or not v: return

	s = g.toUnicode(s,encoding)
	if p == c.currentPosition():
		# This code destoys all tags, so we must recolor.
		c.frame.body.setSelectionAreas(s,None,None)
		c.recolor()
		
	# Keep the body text in the tnode up-to-date.
	if v.t.bodyString != s:
		v.t.setTnodeText(s)
		v.t.setSelection(0,0)
		p.setDirty()
		if not c.isChanged():
			c.setChanged(true)

setBodyTextOrPane = setBodyStringOrPane # Compatibility with old scripts</t>
<t tx="ekr.20040306060312">def moveToLastChildOf (self,parent):

	"""Moves a position to the last child of parent.
	
	Returns the newly created position."""

	p = self.copy()

	p.unlink()
	n = p.numberOfChildren()
	p.linkAsNthChild(parent,n)

	# Moving a node can create a new root node.
	if not parent.hasParent() and not parent.hasBack():
		p.c.setRootPosition(parent)
		
	return p</t>
<t tx="ekr.20040306210951"></t>
<t tx="ekr.20040306211032">def afterHeadlineMatch (self,s): return self.v.afterHeadlineMatch(s)
def anyAtFileNodeName    (self): return self.v.anyAtFileNodeName()

def atFileNodeName            (self): return self.v.atFileNodeName()
def atNoSentinelsFileNodeName (self): return self.v.atNoSentinelsFileNodeName()
def atRawFileNodeName         (self): return self.v.atRawFileNodeName()
def atSilentFileNodeName      (self): return self.v.atSilentFileNodeName()

def isAnyAtFileNode         (self): return self.v.isAnyAtFileNode()

def isAtFileNode            (self): return self.v.isAtFileNode()
def isAtIgnoreNode          (self): return self.v.isAtIgnoreNode()
def isAtNoSentinelsFileNode (self): return self.v.isAtNoSentinelsFileNode()
def isAtOthersNode          (self): return self.v.isAtOthersNode()
def isAtRawFileNode         (self): return self.v.isAtRawFileNode()
def isAtSilentFileNode      (self): return self.v.isAtSilentFileNode()

def matchHeadline (self,pattern): return self.v.matchHeadline(pattern)</t>
<t tx="ekr.20040306211917">def convertTreeToString (self):

	return self.v.convertTreeToString()
	
def moreHead (self, firstLevel,useVerticalBar=false):

	return self.v.moreHead(firstLevel,useVerticalBar)

def moreBody (self):

	return self.v.moreBody()
</t>
<t tx="ekr.20040306212151">def extraAttributes (self):
	
	return self.v.extraAttributes()

def setExtraAttributes (self,data):

	return self.v.setExtraAttributes(data)</t>
<t tx="ekr.20040306212636"></t>
<t tx="ekr.20040306212636.1">def numberOfChildren (self):
	
	return self.v.numberOfChildren()
</t>
<t tx="ekr.20040306214240"># These aren't very useful.</t>
<t tx="ekr.20040306214240.1"></t>
<t tx="ekr.20040306214240.2"></t>
<t tx="ekr.20040306214240.3">def hasChildren(self):
	
	p = self
	# g.trace(p,p.v)
	return p.v and p.v.t and p.v.t._firstChild</t>
<t tx="ekr.20040306214401">def isDirty     (self): return self.v.isDirty()
def isExpanded  (self): return self.v.isExpanded()
def isMarked    (self): return self.v.isMarked()
def isOrphan    (self): return self.v.isOrphan()
def isSelected  (self): return self.v.isSelected()
def isTopBitSet (self): return self.v.isTopBitSet()
def isVisited   (self): return self.v.isVisited()
def status      (self): return self.v.status()</t>
<t tx="ekr.20040306215056">def isCloned (self):
	
	return len(self.v.t.vnodeList) &gt; 1</t>
<t tx="ekr.20040306215548">def findRoot (self):
	
	return self.c.frame.rootPosition()</t>
<t tx="ekr.20040306220230">def bodyString (self):
	
	return self.v.bodyString()

def headString (self):
	
	return self.v.headString()
	
def cleanHeadString (self):
	
	return self.v.cleanHeadString()
</t>
<t tx="ekr.20040306220230.1">def edit_text (self):
	
	return self.v.edit_text()</t>
<t tx="ekr.20040306220634"></t>
<t tx="ekr.20040306220634.2">def appendStringToBody (self,s,encoding="utf-8"):
	
	return self.v.appendStringToBody(s,encoding)
	
def scriptSetBodyString (self,s,encoding="utf-8"):
	
	return self.v.scriptSetBodyString(s,encoding)</t>
<t tx="ekr.20040306220634.8">def computeIcon (self):
	
	return self.v.computeIcon()
	
def setIcon (self):

	pass # Compatibility routine for old scripts</t>
<t tx="ekr.20040306220634.9"># Clone bits are no longer used.
# Dirty bits are handled carefully by the position class.

def clearMarked  (self): return self.v.clearMarked()
def clearOrphan  (self): return self.v.clearOrphan()
def clearVisited (self): return self.v.clearVisited()

def contract (self): return self.v.contract()
def expand   (self): return self.v.expand()

def initExpandedBit    (self): return self.v.initExpandedBit()
def initMarkedBit      (self): return self.v.initMarkedBit()
def initStatus (self, status): return self.v.initStatus()
	
def setMarked   (self): return self.v.setMarked()
def setOrphan   (self): return self.v.setOrphan()
def setSelected (self): return self.v.setSelected()
def setVisited  (self): return self.v.setVisited()</t>
<t tx="ekr.20040306220634.17"># Compatibility routine for scripts.

def clearVisitedInTree (self):
	
	for p in self.subtree_iter():
		p.clearVisited()</t>
<t tx="ekr.20040306220634.29">def setSelection (self,start,length):

	return self.v.setSelection(start,length)</t>
<t tx="ekr.20040306220634.31">def trimTrailingLines (self):

	return self.v.trimTrailingLines()</t>
<t tx="ekr.20040306223950">We _can_ make the Leo compatible with old scipts !!!

1. Iterators replace most calls to next(), threadNext() etc., so any _other_ calls to there routines do _not_ have to be efficient:

2. In other words, iterators are the place to "optimize" tree traversals.

3. I added proxies to the position class so that p.x() is valid almost anywhere that v.x() is valid.

The only exceptions is that the v.linkX and v.unlink routines should only be called explicitly from the position class.

4.  I shall define porv.setCurrentVnode() and porv.currentVnode () in terms of porv.setCurrentPosition and porv.currentPosition.

This will deal with positions or vnodes as appropriate.

5. Added t ivar to position class:  self.t = self.v.t

Therefore, almost all code should continue to work!
</t>
<t tx="ekr.20040307073708">@others</t>
<t tx="ekr.20040307073708.1">class allNodes_iter_class:

	"""Returns a list of vnodes in the entire outline."""

	@others

def allNodes_iter (self):

	return self.allNodes_iter_class(self)</t>
<t tx="ekr.20040307073708.2">def __init__(self,v):

	self.first = v.c.rootVnode()
	self.v = None
	
def __iter__(self):

	return self</t>
<t tx="ekr.20040307073708.3">def next(self):
	
	if self.first:
		self.v = self.first
		self.first = None

	elif self.v:
		self.v = self.v.threadNext()

	if self.v: return self.v
	else: raise StopIteration</t>
<t tx="ekr.20040307073708.4">class subtree_iter_class:

	"""Returns a list of vnodes in a subtree, including the root of the subtree."""

	@others

def subtree_iter (self):

	return self.subtree_iter_class(self)</t>
<t tx="ekr.20040307073708.5">def __init__(self,v):
	
	self.first = v
	self.after = v and v.nodeAfterTree()
	self.v = None
	
def __iter__(self):

	return self
</t>
<t tx="ekr.20040307073708.6">def next(self):
	
	if self.first:
		self.v = self.first
		self.first = None

	elif self.v:
		self.v = self.v.threadNext()

	if self.v and self.v != self.after:
		return self.v
	else:
		raise StopIteration</t>
<t tx="ekr.20040307073708.7">class children_iter_class:

	"""Returns a list of children of a vnode."""

	@others

def children_iter (self):

	return self.children_iter_class(self)</t>
<t tx="ekr.20040307073708.8">def __init__(self,v):

	self.first = v and v.firstChild()
	self.v = None

def __iter__(self):

	return self</t>
<t tx="ekr.20040307073708.9">def next(self):
	
	if self.first:
		self.v = self.first
		self.first = None

	elif self.v:
		self.v = self.v.next()

	if self.v: return self.v
	else: raise StopIteration</t>
<t tx="ekr.20040307073708.10">class parents_iter_class:

	"""Returns a list of parents of a vnode."""

	@others

def parents_iter (self):

	return self.parents_iter_class(self)</t>
<t tx="ekr.20040307073708.11">def __init__(self,v):

	self.first = v and v.parent()
	self.v = None

def __iter__(self):

	return self</t>
<t tx="ekr.20040307073708.12">def next(self):
	
	if self.first:
		self.v = self.first
		self.first = None

	elif self.v:
		self.v = self.v.parent()

	if self.v: return self.v
	else: raise StopIteration</t>
<t tx="ekr.20040307073708.13">class siblings_iter_class:

	"""Returns a list of siblings of a vnode."""

	@others

def siblings_iter (self,following=false):

	return self.siblings_iter_class(self,following)</t>
<t tx="ekr.20040307073708.14">def __init__(self,v,following):

	if not following: # return all siblings.
		while v.back():
			v = v.back()

	self.first = v
	self.v = None

def __iter__(self):

	return self</t>
<t tx="ekr.20040307073708.15">def next(self):
	
	if self.first:
		self.v = self.first
		self.first = None

	elif self.v:
		self.v = self.v.next()

	if self.v: return self.v
	else: raise StopIteration</t>
<t tx="ekr.20040307085922">def hasChildren (self):
	
	v = self
	return v.firstChild()

hasFirstChild = hasChildren</t>
<t tx="ekr.20040307091318"></t>
<t tx="ekr.20040307101707">if 0: # find the hang.
	try:    g.debug_count += 1
	except: g.debug_count  = 0
	g.trace(v)
	if g.debug_count &gt; 100: break</t>
<t tx="ekr.20040307104131.1">def isAncestorOf (self, p2):
	
	p = self
	
	if 0: # Avoid the copies made in the iterator.
		for p3 in p2.parents_iter():
			if p3 == p:
				return true

	# Avoid calling p.copy() or copying the stack.
 	v2 = p2.v ; n = len(p.stack)-1
	v2,n = p2.vParentWithStack(v2,p2.stack,n)
	while v2:
		if v2 == p.v:
			return true
		v2,n = p2.vParentWithStack(v2,p2.stack,n)

	return false</t>
<t tx="ekr.20040307104131.2">def isRoot (self):
	
	p = self

	return not p.hasParent() and not p.hasBack()</t>
<t tx="ekr.20040307104131.3">def exists(self,c):
	
	"""Return true if a position exists in c's tree"""
	
	p = self.copy()
	
	# This code must be fast.
	root = c.rootPosition()
	while p:
		if p == root:
			return true
		if p.hasParent():
			p.moveToParent()
		else:
			p.moveToBack()
		
	return false</t>
<t tx="ekr.20040308151706">@nocolor

Changes since the last cvs update:
	
- Disables changes if not a complete word.
- Disables changes if preceeded by prefix:
	- Running this script twice is now safe.
- Disables changes if preceeded by "def " or "."
- Added replace parameter for safety.

@color</t>
<t tx="ekr.20040308151706.1"></t>
<t tx="ekr.20040308153521"></t>
<t tx="ekr.20040309041436.1"></t>
<t tx="ekr.20040309041436.2">@ In the sharedNodes scheme the v.parent field can not be used alone to determine a vnode's parent.  Thus the parents iterator, and the iterators that depend on it do not exist.

@c

if not g.sharedNodes:
	
	@others</t>
<t tx="ekr.20040309041826"></t>
<t tx="ekr.20040309045533"></t>
<t tx="ekr.20040309045858">@nocolor

The problem was that the calls to tag_bind did not copy the position, and the position changed during the tree traversal in the tree drawing code.  Making a copy of the position for each binding solved the problem.

The draw_box </t>
<t tx="ekr.20040309144438">@nocolor

By: niccl ( Nic Cave-Lynch ) 
 I admit it: Clones really are wonderful   
2004-03-06 12:17  

I just had to share this, particularly after my recent thoughts doubting the real value of cloned nodes.

I've been struggling for two days trying to find an obscure bug in a real-time communications system. I'd got some idea of where the problem was, and looked at code 'til I was dreaming about it. I'd got nowhere much: just sore eyes. Then I decided to try [Leo's] much-vaunted clones as a way of focussing on just the areas where I knew the problem had to be.

It's a communications system: transmit path, receive path, so I was going to set up two trees of clones, one for each path. I used find all to mark the nodes with the variables I was interested in, ready to clone them to the new trees. As I was doing this, I realised (it was actually much more like being hit over the head with a gold brick wrapped in a slice of lemon) that one node was in both trees when it should only have been in one. There was my bug: It's amazingly easy to type 'Rx' instead of 'Tx'...

So. Clones saved the day. I'm even more convinced that Leo is brilliant. Thanks Ed</t>
<t tx="ekr.20040310062332"># These remain in 4.2:  linking and unlinking does not depend on position.

# These are private routines:  the position class does not define proxies for these.</t>
<t tx="ekr.20040310062332.1">def invalidOutline (self, message):
	
	p = self

	if p.hasParent():
		node = p.parent()
	else:
		node = p

	g.alert("invalid outline: %s\n%s" % (message,node))</t>
<t tx="ekr.20040310062332.2">def linkAfter (self,after):

	"""Link self after v."""
	
	# g.trace(self,after)
	
	p = self

	p.v._parent = after.v._parent
	
	# New in 4.2: clear parent links in all children if this is a clone.
	p.v.t.vnodeList.append(p.v)
	if len(p.v.t.vnodeList) &gt; 1:
		# g.trace("creating first clone") # Can happen in moves also.
		for child in p.children_iter():
			child.v._parent = None
	
	p.v._back = after.v
	p.v._next = after.v._next
	
	after.v._next = p.v
	
	if p.v._next:
		p.v._next._back = p.v

	if 0:
		g.trace('-'*20,after)
		p.dump(p,label="p")
		p.dump(after,label="back")
		if p.next(): p.dump(p.next(),label="next")</t>
<t tx="ekr.20040310062332.3">def linkAsNthChild (self,parent,n):

	"""Links self as the n'th child of vnode pv"""
	
	# g.trace(self,parent,n)

	p = self

	p.v._parent = parent.v
	
	# New in 4.2: clear parent links in all children if this is a clone.
	p.v.t.vnodeList.append(p.v)
	if len(p.v.t.vnodeList) &gt; 1:
		for child in p.children_iter():
			child.v._parent = None

	if n == 0:
		child1 = parent.v.t._firstChild
		p.v._back = None
		p.v._next = child1
		if child1:
			child1._back = p.v
		parent.v.t._firstChild = p.v
		
	else:
		prev = parent.nthChild(n-1) # zero based
		assert(prev)
		p.v._back = prev.v
		p.v._next = prev.v._next
		prev.v._next = p.v
		if p.v._next:
			p.v._next._back = p.v
			
	if 0:
		g.trace('-'*20)
		p.dump(p,label="p")
		p.dump(parent,label="parent")</t>
<t tx="ekr.20040310062332.4">def linkAsRoot(self, oldRoot = None):
	
	"""Link self as the root node."""
	
	# g.trace(self,oldRoot)

	p = self ; v = p.v
	
	# Clear all links except the child link.
	v._parent = None
	v._back = None
	v._next = oldRoot

	# Link in the rest of the tree only when oldRoot != None.
	# Otherwise, we are calling this routine from init code and
	# we want to start with a pristine tree.
	if oldRoot:
		oldRoot._back = v

	p.c.setRootPosition(p)</t>
<t tx="ekr.20040310062332.5">def unlink (self):

	"""Unlinks the receiver from the tree before moving or deleting.
	
	The mFistChild link is not affected in the receiver."""

	p = self ; v = p.v ; parent = p.parent()

	# g.trace(v._parent," child:",v.t._firstChild," back:",v._back, " next:",v._next)
	
	# Special case the root.
	if p == p.c.rootPosition():
		if not p.v._next: return # Should never happen.
		p.c.setRootPosition(p.next())
	
	# New in 4.2: Set the parent links in all children if this is the penultimate clone.
	vnodeList = v.t.vnodeList
	if v in vnodeList:
		vnodeList.remove(v)
	if len(vnodeList) == 1:
		# g.trace("************* clearing parent link in chidren")
		for child in p.children_iter():
			child._parent = parent
	
	if parent and parent.v.t._firstChild == v:
		parent.v.t._firstChild = v._next

	# Clear the links in other nodes.
	if v._back: v._back._next = v._next
	if v._next: v._next._back = v._back
	
	# Clear the links in this node.
	v._parent = v._next = v._back = None
	
	if 0:
		g.trace('-'*20)
		p.dump(p,label="p")
		if parent: p.dump(parent,label="parent")</t>
<t tx="ekr.20040310062415.1"></t>
<t tx="ekr.20040310085820">Script to change p.v.x to p.x for all proxy methods x.w

Also p.v.t to p.t ?</t>
<t tx="ekr.20040310091144">@nocolor

By: dalcolmo ( Josef Dalcolmo ) 
 initial_window position   
2004-03-04 17:57  

 I just installed 4.1 (had 4.1rc4 so far) and now I noticed that the Leo application window doesn't appear in the upper left corner any more, but with a bit of an offset.

I thought this is because of the leoConfig.txt settings of:

initial_window_top = 20
initial_window_left = 20

I tried to set these to 0, but that did not work at all any more!

Then I tried to set this values to 1, which works but the offset is still greater. When saving a file with a position in the corner it still appears with an offset when starting it again.

Since I changed some other configurations on my computer almost at the same time, I am not absolutely sure that the problem isn't coming from somewhere else - still the settings I named above don't seem to work properly.

- Josef
 
---------------------------------------

https://sourceforge.net/forum/message.php?msg_id=2457260
By: dalcolmo


&gt;Iirc the window position gets written to leoConfig.txt if that file exists
and is writable. I would first check that file.

I thought the window position (and size) ist stored in the .leo file (it is
per file).

&gt;The settings you mention are probably (again iirc) for new windows.

I thought they would apply if I start a new Leo without a preexisting file.
They do not work properly in this case either.

Can you position a Leo window (the whole application) so it appears on the upper
left corner of the screen when double-clicking on the leo file?

(I am using Leo 4.1 final with Python 2.3.3 on Win2000. I recently upgraded
both Leo and Python and now I can't place Leo windows in the corner any more
- upon starting).

Best regards - Josef Dalcolmo
</t>
<t tx="ekr.20040310092400">@nocolor

By: billp9619 ( bill palmer ) 
 leo_header optional closetag sb valid?   
2004-03-07 01:21  

 1. &lt;leo_header ... /&gt;
vs.
2. &lt;leo_header ... &gt;&lt;/leo_header&gt;

Leo saves using style 1 and treats style 2 as invalid.

Both are equivalent and so I think leo should accept both. Some applications for comparing xml insist on style 2. 

billp
 
</t>
<t tx="ekr.20040310092400.1">@nocolor

https://sourceforge.net/forum/message.php?msg_id=2460535
By: nobody

See CallTipWindow.py in IDLE 1.0.2

Fairly simple implementation - uses a new toplevel window without a border.

Read the comments in the code for potential drawbacks on some platforms.

Regards, Myles.
</t>
<t tx="ekr.20040310100905"></t>
<t tx="ekr.20040310104639"></t>
<t tx="ekr.20040310153624">def dumpLink (self,link):
	return g.choose(link,link,"&lt;none&gt;")

def dump (self,p,label=""):

	print '-'*10,label,p
	print "back   ",p.dumpLink(p.back())
	print "next   ",p.dumpLink(p.next())
	print "parent ",p.dumpLink(p.parent())
	print "_parent",p.dumpLink(p.v and p.v._parent)
	print "child  ",p.dumpLink(p.firstChild())
	print "vnodes..."
	if p.v:
		for v in p.v.t.vnodeList:
			print v
	print</t>
<t tx="ekr.20040311022923"></t>
<t tx="ekr.20040311075229">This allows the user to choose a "safe mode".  It is off by default.</t>
<t tx="ekr.20040311080500"></t>
<t tx="ekr.20040311080500.1">self_and_siblings_iter()
self_and_parents_iter()
</t>
<t tx="ekr.20040311081401"></t>
<t tx="ekr.20040311094927">def nullPosition (self):
	
	return leoNodes.position(None,[])</t>
<t tx="ekr.20040311110432.1">I started the transition to "pure" position code.

That is, I started eliminating code in "not g.sharedNodes" parts.  I did this because doing things "both ways" doesn't make any sense: much easier to change code.</t>
<t tx="ekr.20040311113514">def clearDirty (self):

	p = self
	p.v.clearDirty()</t>
<t tx="ekr.20040311124726">@nocolor

- Iterators.
	- Convenient.
	- copy param.
	- c.allNodes_iter a very useful abbreviation.

p.x for most methods v.x.

p.t ivar simulated by p.__getattr__
</t>
<t tx="ekr.20040311124726.2">This masks convertion problems.

It is useful for compatibility.</t>
<t tx="ekr.20040311133449"></t>
<t tx="ekr.20040311143141"></t>
<t tx="ekr.20040311160938"></t>
<t tx="ekr.20040311165107"></t>
<t tx="ekr.20040311165928"></t>
<t tx="ekr.20040311173238">def topPosition(self):
	
	"""Return the root position."""
	
	return self._topPosition.copy()

def setTopPosition(self,p):
	
	"""Set the root positioin."""
	
	self._topPosition = p
	
# Define these for compatibiility with old scripts.
topVnode = topPosition
setTopVnode = setTopPosition</t>
<t tx="ekr.20040312013017"></t>
<t tx="ekr.20040312015705"># Compatibility routine for scripts.

def clearAllVisited (self):
	
	for p in self.allNodes_iter():
		p.clearVisited()</t>
<t tx="ekr.20040312015908"></t>
<t tx="ekr.20040312021644">- Top level sort.
- Go to Line Number.
- All Tangle/untangle commands.
- All import/export commands.</t>
<t tx="ekr.20040312024615"></t>
<t tx="ekr.20040312073921"></t>
<t tx="ekr.20040312073921.1"></t>
<t tx="ekr.20040312073921.2">Removed all code governed by "if not g.sharedNodes".
</t>
<t tx="ekr.20040312073921.3"></t>
<t tx="ekr.20040312081427"></t>
<t tx="ekr.20040312081427.1">These don't have to be efficient?</t>
<t tx="ekr.20040312090934">def allNodes_iter(self,copy=false):
	
	c = self
	
	return c.rootPosition().allNodes_iter(copy)
</t>
<t tx="ekr.20040312092039"></t>
<t tx="ekr.20040312092455"></t>
<t tx="ekr.20040312092455.1"></t>
<t tx="ekr.20040312092455.2"></t>
<t tx="ekr.20040312092455.3"></t>
<t tx="ekr.20040312094553"></t>
<t tx="ekr.20040312094553.1"></t>
<t tx="ekr.20040312101356"></t>
<t tx="ekr.20040312120107"></t>
<t tx="ekr.20040312122501"></t>
</tnodes>
</leo_file>
