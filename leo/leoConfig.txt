# leoConfig.txt: configuration file for Leo.
# 7/20/2002 by Edward K. Ream
#
# Leo looks for this file using the directory in sys.leo_config_directory.
# 	(You would typically set this attribute in sitecustomize.py).
# 	If sys.leo_config_directory does not exist,
#	 Leo attempts to load this file from the directory from which Leo was loaded.
#
# Settings in this file override settings in all .leo files.
# (But not always, see below for the real truth.)
#
# 	Leo does not write settings to the <preferences> and <find_panel_settings>
# 	elements of .leo files that exist in this file.
#
# Leo uses Python's ConfigParser module to parse this file,
# with all of ConfigParser's features (and bugs!).
#
# 	Comments start with a pound character in the leftmost column.
# 	You may specify booleans as 0/1, no/yes, false/true, off/on (case insensitive).
# 	These get converted to 0/1 if the file is not read_only
#

# WARNING: !! Do not place anything except comments before here !!

# -----------------------------------------------------------------------------
# General configuration options

[config options]

read_only = 1
#	WARNING: Clearing the read_only attribute will cause Leo to remove
#	all comments and alter order of attributes when rewriting this file!!
#	Syntax errors in this file set this file to read-only.

xml_version_string = UTF-8
#	The version used at the start of .leo files.
#	Default is UTF-8.  Better is ISO-8859-1.
#	Use UTF-8 to write leo.py 2.x files.

# -----------------------------------------------------------------------------
# The list of files in the "Recent Files" menu at startup.

[recent files]

file1 = c:\prog\leocvs\leo\leopy.leo
file0 = c:\prog\leocvs\leo\leodocs.leo
#	Paths to recent files.
#	Valid option names: file0 through file9.

# -----------------------------------------------------------------------------
# Initial settings of the Compare panel.
# 	These correspond to the keyword parameters of the leoCompare constructor.
# 	Exception: there are no keywords for compare file names in the constructor.

[compare options]

# ----- Options specifying files for the Compare panel.

compare_file_1 = c:/prog/test/compareTest1/file1.txt
#	Path to the first file or directory to be compared.
#	Directory compares ignore a filename part of the path, if present.
#	E.g., c:/directory1/spam.py is valid for directory compares.

compare_file_2 = c:/prog/test/compareTest2/file2.txt
#	Path to the second file or directory to be compared.
#	Directory compares ignore a filename part of the path, if present.
#	E.g., c:/directory2/spam.py is valid for directory compares

output_file = c:/prog/test/compareResults.txt
#	Path to the output file.
#	Leo will silently write to this file, regardless of whether it already exists.
#	Leo will write to the log pane if this path is empty or invalid.

append_output_to_output_file = 0
#	0: Replace output file with results of compare.
#	1: Append output to output file.

# ----- Options related to directory compares.
#	These options has no effect when comparing files.

limit_directory_search_extension = .py
#	Limit directory searches to files with the given file extension.
# 	Examples:
#		None	Compare all files when comparing directories.
#		.py  	Compare .py files when comparing directories.

# ----- Options related to file compares.
#	These options have no effect when comparing directories.

ignore_blank_lines = 1
#	1: Ignore blanks lines when comparing files.

ignore_first_line_of_file_1 = 0
#	1: Ignore the first line of compare_file_1 when comparing files.

ignore_first_line_of_file_2 = 0
#	1: Ignore the first line of compare_file_2 when comparing files.

ignore_interior_whitespace = 0
#	1: Ignore whitespace after the leading whitespace of a line when comparing files.

ignore_leading_whitespace = 0
#	1: Ignore leading whitespace of each line when comparing files.
#	Not recommended when comparing .py files.

ignore_sentinel_lines = 0
#	1: Ignore sentinel lines when comparing files.
#	Leo sets sentinel comment delimiters from the first line of each file.
#	This option has no effect if the first line is not a @+leo line.

# ----- Options affecting how Leo shows the results of file compares.
#	(Leo gathers statistics regardless of these options.)

limit_count = 9
#	0: Show lines regardless of the number of mismatches.
#	n: Stop showing lines after n mismatches.

make_whitespace_visible = 0
#	1: Show blanks as [ ] and tabs as [t]

print_both_lines_for_matches = 0
#	0: Print only the line of compare_file_1 when showing matching lines.
#	1: Print lines of both files when showing matching lines.

print_matching_lines = 0
#	1: Print lines that match using the print_both_lines_for_matches option.

print_mismatching_lines = 1
#	1: Print lines that do not compare equal to each other.

print_trailing_lines = 1
#	1: Print lines all lines in one file after an end-of-file is seen on the other file.

# -----------------------------------------------------------------------------
# The initial settings of the Find/Change panel.

[find/change options]

change_string = 
# 	The change string (without the quotes unless quotes are part of the string).

find_string = 
# 	The find string (without the quotes unless quotes are part of the string).

# ----- 0/1 settings for checkboxes in the Find/Change panel.

batch = 0
ignore_case = 0
mark_changes = 0
mark_finds = 0
pattern_match = 0
reverse = 0
search_body = 1
search_headline = 0
suboutline_only = 0
whole_word = 1
wrap = 0

# -----------------------------------------------------------------------------
# The initial settings of the Preferences panel.

[prefs panel options]

default_tangle_directory = 
# 	(Deprecated)
# 	The default directory used if no directory specified
# 	in @path, @root or @file directives.

default_target_language = Python
# 	The default language if no @language or @comment is in effect.

tab_width = 4
# 	The width of tabs on the screen.
# 	This setting is also used when writing doc parts.
# 	Valid values: A nonzero positive or negative integer.
# 	Negative tab widths cause Leo to convert tabs to blanks when typing.

page_width = 132
# 	The page width for wrapping doc parts in derived files.
# 	Valid values: any nonzero positive integer.

output_doc_chunks = 1
# 	1/0: Explicit Tangle commands output doc parts.

tangle_outputs_header = 1
# 	1/0: Explicit Tangle commands output file header.

run_tangle_done.py = 0
# 	1/0: Run tangle_done.py after explicit Tangle commands.

run_untangle_done.py = 0
# 	1/0: Run tangle_done.py after explicit Untangle commands.

# -----------------------------------------------------------------------------
# Syntax coloring options and colors.

[syntax coloring options]

color_directives_in_plain_text = 1
# 	1/0: Color Leo directives for @language plain

underline_undefined_section_names = 1
# 	1/0: Underline undefined section names
#	Only functional if use_hyperlinks = 0

use_hyperlinks = 0
# 	1: use hyperlinks.       Underline "live" links.
#		Cute, but disorienting and _not_ recommended.
#		Control-clicking moves to indicated node.
#	0: don't use hyperlinks and allow underlining of undefined section names.

# The following may be any valid Tk color name or color value.
# 	For example, #00aa00 is the dark green used by IDLE.
# 	For Tk color names see: http://www.tcl.tk/man/tcl8.3/TkCmd/colors.htm
# 	These names are case sensitive, for example: BlanchedAlmond

comment_color = firebrick3
#	The color of comments in code parts.

cweb_section_name_color = red
#	The color of name in @<name@>

directive_color = blue
#	The color of C/C++ preprocessor directive lines.

doc_part_color = firebrick3
#	The color of text in doc parts.

keyword_color = blue
#	The color of keywords of the present language.
#	For example, the color of "if", "try" and "except" in Python.

leo_keyword_color = #00aa00
#	The color of Leo keywords.
#	For example, the color of @ignore, @color, etc.

section_name_color = red
#	The color of name in <<name>> when name is defined.

section_name_brackets_color = blue
#	The color of << and >> in <<name>>

string_color = #00aa00
#	The color of strings and their delimiters.

undefined_section_name_color = red
#	The color of name in <<name>> when name is undefined.

# -----------------------------------------------------------------------------
# Options that affect the appearance of windows.
# Options that require pixel values can be any Python expression that yields an int.
# Warning: the number of pixels per inch varies...

[window options]

body_pane_wraps = 1
#	0/1: Wrap body text if 1.

additional_body_text_border = 0
#	Additional border in body text pane, in pixels (must be an integer).

# ----- body pane options...

body_text_font_family = Courier
#	Font family for body text.
#	Default is default font for Tk.Text widgets.
#	Invalid font names are translated to a font in a system-dependent way.

body_text_font_size = 9
#	Size of body text. Must be an integer.
#	Default is 9 on Windows, 12 on Linux and all others.

body_text_font_slant = roman
#	The Tk -slant setting: roman or italic.  Default is roman.

body_text_font_weight = normal
#	The Tk -weight setting: normal or bold.  Default is normal.

# ----- outline pane options...

headline_text_font_family =
#	Font family for headline text.
#	Default is default font for Tk.Text widgets.
#	Invalid font names are translated to a font in a system-dependent way.

headline_text_font_size = 9
#	Size of headline text. Must be an integer.
#	Default is 12

headline_text_font_slant = roman
#	The Tk -slant setting: roman or italic. Default is roman.

headline_text_font_weight = normal
#	The Tk -weight setting: normal or bold.  Default is normal.

# ----- log pane options...

log_text_font_family =
#	Font family for text in the log pane.
#	Default is default font for Tk.Text widgets.
#	Invalid font names are translated to a font in a system-dependent way.

log_text_font_size =
#	Size of text in the log pane. Must be an integer.
#	Default is 12

log_text_font_slant = roman
#	The Tk -slant setting: roman or italic. Default is roman.

log_text_font_weight = normal
#	The Tk -weight setting: normal or bold.  Default is normal.

# ----- Options for new windows...
# (Leo now properly opens windows for existing files where they were last positioned.

initial_window_height = 20
#	Height of window, Tk grid units (must be an integer).
#	Grid units must be specified because Leo windows are gridded.
	
initial_window_width = 60
#	Width window, in Tk grid units (must be an integer).
#	Grid units must be specified because Leo windows are gridded.

initial_window_left = 10
#	Distance from left of screen of window, in pixels (must be an integer).

initial_window_top = 10
#	Distance from top of screen of window, in pixels (must be an integer).

# ----- Options for newly opened windows...

initial_splitter_orientation = v
#	valid values: h or horizontal or v or vertical.
#	(Actually, anything but h or horizontal is considered vertical.)
#	vertical: body pane below outline and log panes.
#	horizontal: body pane to left of outline and log panes.
#	Note This is _not_ saved in .leo files, but the body/outline ratio _is_ saved.
#	This will lead to confusing results when this file is read only:
#	1. Changes to orientation caused by Toggle Split Direction are not changed, but
#	2. Changes to body/outline ratio _are_ changed.

initial_vertical_ratio = 0.5
#	tree pane/body pane size when spitting pane vertically.
#	Applies only to new windows. Overridden by ratio in .leo files.
#	Valid values: 0.0 to 1.0.

initial_horizontal_ratio = 0.3
#	tree pane/body pane size when spitting pane horizontally.
#	Applies only to new windows. Overridden by ratio in .leo files.
#	Valid values: 0.0 to 1.0.

# ----- Options for the bar that separates panes in the Leo window...
# (Leo should save these to .leo files, and it doesn't)

split_bar_color = LightSteelBlue2
#	The color of the split bar.
#	Valid values: Tk color names or Tk color values.

split_bar_relief = groove
#	The Tk -relief option for the split bar.
#	Valid values: raised, sunken, flat, ridge, solid, groove.
	
split_bar_width = 7
#	The width of the split bar, in pixels (must be an integer).
